
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025de4  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006878  08035f88  08035f88  00026f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c800  0803c800  0002e870  2**0
                  CONTENTS
  4 .ARM          00000008  0803c800  0803c800  0002d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c808  0803c808  0002e870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803c808  0803c808  0002d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803c810  0803c810  0002d810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803c814  0002e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000199f0  20000870  0803d084  0002e870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a260  0803d084  0002f260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005aeb0  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f10  00000000  00000000  00089750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00028496  00000000  00000000  00091660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003050  00000000  00000000  000b9af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000306c  00000000  00000000  000bcb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191b  00000000  00000000  000bfbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00049bfa  00000000  00000000  000e14cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab068  00000000  00000000  0012b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d6131  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bed0  00000000  00000000  001d6174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001e2044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08035f6c 	.word	0x08035f6c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	08035f6c 	.word	0x08035f6c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f005 fbf4 	bl	80168d2 <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f005 fbea 	bl	80168d2 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f005 fbe0 	bl	80168d2 <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f005 fbd6 	bl	80168d2 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil3_Pin, coil2_Pin,coil1_Pin};
 8011130:	4b4a      	ldr	r3, [pc, #296]	@ (801125c <StartIOTask+0x130>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil3_GPIO_Port, coil2_GPIO_Port, coil1_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input3_Pin, input2_Pin, input1_Pin };
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input3_GPIO_Port, input2_GPIO_Port, input1_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e072      	b.n	801124a <StartIOTask+0x11e>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483d      	ldr	r0, [pc, #244]	@ (8011260 <StartIOTask+0x134>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f007 fc66 	bl	8018a3e <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f005 fba1 	bl	80168d2 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85e      	bhi.n	8011256 <StartIOTask+0x12a>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f005 fb89 	bl	80168d2 <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f005 fb76 	bl	80168c4 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1e      	ldr	r4, [pc, #120]	@ (8011264 <StartIOTask+0x138>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f007 fc74 	bl	8018ada <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f007 fbde 	bl	80189ba <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e014      	b.n	801122c <StartIOTask+0x100>
		pinInputs_r[i] = (uint8_t)(!HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]));
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f005 fb56 	bl	80168c4 <HAL_GPIO_ReadPin>
 8011218:	fab0 f080 	clz	r0, r0
 801121c:	0940      	lsrs	r0, r0, #5
 801121e:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8011222:	446b      	add	r3, sp
 8011224:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011228:	3401      	adds	r4, #1
 801122a:	b2e4      	uxtb	r4, r4
 801122c:	2c02      	cmp	r4, #2
 801122e:	d9e8      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 8011230:	4c0d      	ldr	r4, [pc, #52]	@ (8011268 <StartIOTask+0x13c>)
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	f007 fc51 	bl	8018ada <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011238:	2300      	movs	r3, #0
 801123a:	461a      	mov	r2, r3
 801123c:	a903      	add	r1, sp, #12
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	f007 fbbb 	bl	80189ba <osMessageQueuePut>
    osDelay(1);
 8011244:	2001      	movs	r0, #1
 8011246:	f007 fac0 	bl	80187ca <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 801124a:	4b05      	ldr	r3, [pc, #20]	@ (8011260 <StartIOTask+0x134>)
 801124c:	6818      	ldr	r0, [r3, #0]
 801124e:	f007 fc37 	bl	8018ac0 <osMessageQueueGetCount>
 8011252:	2800      	cmp	r0, #0
 8011254:	d186      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011256:	2400      	movs	r4, #0
 8011258:	e7c5      	b.n	80111e6 <StartIOTask+0xba>
 801125a:	bf00      	nop
 801125c:	08035f88 	.word	0x08035f88
 8011260:	200008a4 	.word	0x200008a4
 8011264:	200008a8 	.word	0x200008a8
 8011268:	200008ac 	.word	0x200008ac

0801126c <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 801126c:	b084      	sub	sp, #16
 801126e:	b508      	push	{r3, lr}
 8011270:	f10d 0c08 	add.w	ip, sp, #8
 8011274:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011278:	2300      	movs	r3, #0
 801127a:	461a      	mov	r2, r3
 801127c:	4661      	mov	r1, ip
 801127e:	4804      	ldr	r0, [pc, #16]	@ (8011290 <add_log_mess_to_q+0x24>)
 8011280:	6800      	ldr	r0, [r0, #0]
 8011282:	f007 fb9a 	bl	80189ba <osMessageQueuePut>

}
 8011286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801128a:	b004      	add	sp, #16
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	2000089c 	.word	0x2000089c

08011294 <StartSettingsTask>:
{
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011298:	2300      	movs	r3, #0
 801129a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801129c:	4b7d      	ldr	r3, [pc, #500]	@ (8011494 <StartSettingsTask+0x200>)
 801129e:	4a7e      	ldr	r2, [pc, #504]	@ (8011498 <StartSettingsTask+0x204>)
 80112a0:	497e      	ldr	r1, [pc, #504]	@ (801149c <StartSettingsTask+0x208>)
 80112a2:	487f      	ldr	r0, [pc, #508]	@ (80114a0 <StartSettingsTask+0x20c>)
 80112a4:	f004 fea0 	bl	8015fe8 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 80112a8:	497e      	ldr	r1, [pc, #504]	@ (80114a4 <StartSettingsTask+0x210>)
 80112aa:	487f      	ldr	r0, [pc, #508]	@ (80114a8 <StartSettingsTask+0x214>)
 80112ac:	f009 feca 	bl	801b044 <lfs_fs_ll_init>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	db3b      	blt.n	801132c <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 80112b4:	487d      	ldr	r0, [pc, #500]	@ (80114ac <StartSettingsTask+0x218>)
 80112b6:	f009 feaf 	bl	801b018 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 80112ba:	4c7d      	ldr	r4, [pc, #500]	@ (80114b0 <StartSettingsTask+0x21c>)
 80112bc:	4620      	mov	r0, r4
 80112be:	f009 fe9f 	bl	801b000 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 80112c2:	487c      	ldr	r0, [pc, #496]	@ (80114b4 <StartSettingsTask+0x220>)
 80112c4:	f009 fe9c 	bl	801b000 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 80112c8:	4620      	mov	r0, r4
 80112ca:	f009 fea5 	bl	801b018 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 80112ce:	487a      	ldr	r0, [pc, #488]	@ (80114b8 <StartSettingsTask+0x224>)
 80112d0:	f009 fea2 	bl	801b018 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 80112d4:	4879      	ldr	r0, [pc, #484]	@ (80114bc <StartSettingsTask+0x228>)
 80112d6:	f009 fe9f 	bl	801b018 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 80112da:	4879      	ldr	r0, [pc, #484]	@ (80114c0 <StartSettingsTask+0x22c>)
 80112dc:	f009 fe9c 	bl	801b018 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 80112e0:	4878      	ldr	r0, [pc, #480]	@ (80114c4 <StartSettingsTask+0x230>)
 80112e2:	f009 fe99 	bl	801b018 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 80112e6:	2200      	movs	r2, #0
 80112e8:	a939      	add	r1, sp, #228	@ 0xe4
 80112ea:	4877      	ldr	r0, [pc, #476]	@ (80114c8 <StartSettingsTask+0x234>)
 80112ec:	f009 fddc 	bl	801aea8 <mg_fs_lfs_status>
 80112f0:	b330      	cbz	r0, 8011340 <StartSettingsTask+0xac>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 80112f2:	2101      	movs	r1, #1
 80112f4:	4874      	ldr	r0, [pc, #464]	@ (80114c8 <StartSettingsTask+0x234>)
 80112f6:	f009 fe15 	bl	801af24 <mg_fs_lfs_open>
 80112fa:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80112fc:	22c6      	movs	r2, #198	@ 0xc6
 80112fe:	a907      	add	r1, sp, #28
 8011300:	f009 fe40 	bl	801af84 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011304:	4620      	mov	r0, r4
 8011306:	f009 fe31 	bl	801af6c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 801130a:	2200      	movs	r2, #0
 801130c:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011310:	2302      	movs	r3, #2
 8011312:	a907      	add	r1, sp, #28
 8011314:	486d      	ldr	r0, [pc, #436]	@ (80114cc <StartSettingsTask+0x238>)
 8011316:	6800      	ldr	r0, [r0, #0]
 8011318:	f007 fdb6 	bl	8018e88 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 801131c:	2200      	movs	r2, #0
 801131e:	a939      	add	r1, sp, #228	@ 0xe4
 8011320:	486b      	ldr	r0, [pc, #428]	@ (80114d0 <StartSettingsTask+0x23c>)
 8011322:	f009 fdc1 	bl	801aea8 <mg_fs_lfs_status>
 8011326:	b1c0      	cbz	r0, 801135a <StartSettingsTask+0xc6>
{
 8011328:	2400      	movs	r4, #0
 801132a:	e089      	b.n	8011440 <StartSettingsTask+0x1ac>
	  flash_not_connect_flag = 1; //indicate that flash is not found
 801132c:	4b69      	ldr	r3, [pc, #420]	@ (80114d4 <StartSettingsTask+0x240>)
 801132e:	2201      	movs	r2, #1
 8011330:	701a      	strb	r2, [r3, #0]
	  osDelay(3000);
 8011332:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011336:	f007 fa48 	bl	80187ca <osDelay>
	  HAL_NVIC_SystemReset();
 801133a:	f005 f953 	bl	80165e4 <HAL_NVIC_SystemReset>
 801133e:	e7b9      	b.n	80112b4 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8011340:	22c6      	movs	r2, #198	@ 0xc6
 8011342:	2100      	movs	r1, #0
 8011344:	a807      	add	r0, sp, #28
 8011346:	f01b fc93 	bl	802cc70 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 801134a:	2302      	movs	r3, #2
 801134c:	2200      	movs	r2, #0
 801134e:	a907      	add	r1, sp, #28
 8011350:	485e      	ldr	r0, [pc, #376]	@ (80114cc <StartSettingsTask+0x238>)
 8011352:	6800      	ldr	r0, [r0, #0]
 8011354:	f007 fd98 	bl	8018e88 <xQueueGenericSend>
 8011358:	e7e0      	b.n	801131c <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 801135a:	f240 609a 	movw	r0, #1690	@ 0x69a
 801135e:	f009 fc3b 	bl	801abd8 <pvPortMalloc>
	  if (web_users == NULL) {
 8011362:	4604      	mov	r4, r0
 8011364:	b390      	cbz	r0, 80113cc <StartSettingsTask+0x138>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 8011366:	495c      	ldr	r1, [pc, #368]	@ (80114d8 <StartSettingsTask+0x244>)
 8011368:	2001      	movs	r0, #1
 801136a:	f000 febf 	bl	80120ec <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 801136e:	4b5b      	ldr	r3, [pc, #364]	@ (80114dc <StartSettingsTask+0x248>)
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	6020      	str	r0, [r4, #0]
 8011374:	889b      	ldrh	r3, [r3, #4]
 8011376:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 8011378:	ad01      	add	r5, sp, #4
 801137a:	4e59      	ldr	r6, [pc, #356]	@ (80114e0 <StartSettingsTask+0x24c>)
 801137c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801137e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011380:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011384:	f845 0b04 	str.w	r0, [r5], #4
 8011388:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 801138a:	ad01      	add	r5, sp, #4
 801138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801138e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8011392:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 8011396:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 801139a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 801139e:	6828      	ldr	r0, [r5, #0]
 80113a0:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 80113a4:	792b      	ldrb	r3, [r5, #4]
 80113a6:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 80113aa:	2102      	movs	r1, #2
 80113ac:	4848      	ldr	r0, [pc, #288]	@ (80114d0 <StartSettingsTask+0x23c>)
 80113ae:	f009 fdb9 	bl	801af24 <mg_fs_lfs_open>
 80113b2:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 80113b4:	f240 629a 	movw	r2, #1690	@ 0x69a
 80113b8:	4621      	mov	r1, r4
 80113ba:	f009 fdef 	bl	801af9c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 80113be:	4628      	mov	r0, r5
 80113c0:	f009 fdd4 	bl	801af6c <mg_fs_lfs_close>
	  free(web_users);
 80113c4:	4620      	mov	r0, r4
 80113c6:	f009 fc89 	bl	801acdc <vPortFree>
 80113ca:	e7ad      	b.n	8011328 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 80113cc:	4945      	ldr	r1, [pc, #276]	@ (80114e4 <StartSettingsTask+0x250>)
 80113ce:	2003      	movs	r0, #3
 80113d0:	f000 fe8c 	bl	80120ec <logging>
 80113d4:	e7f6      	b.n	80113c4 <StartSettingsTask+0x130>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80113d6:	4d3c      	ldr	r5, [pc, #240]	@ (80114c8 <StartSettingsTask+0x234>)
 80113d8:	4628      	mov	r0, r5
 80113da:	f009 fe11 	bl	801b000 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80113de:	2102      	movs	r1, #2
 80113e0:	4628      	mov	r0, r5
 80113e2:	f009 fd9f 	bl	801af24 <mg_fs_lfs_open>
 80113e6:	4605      	mov	r5, r0
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d033      	beq.n	8011454 <StartSettingsTask+0x1c0>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80113ec:	22c6      	movs	r2, #198	@ 0xc6
 80113ee:	a907      	add	r1, sp, #28
 80113f0:	f009 fdd4 	bl	801af9c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80113f4:	4628      	mov	r0, r5
 80113f6:	f009 fdb9 	bl	801af6c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80113fa:	2200      	movs	r2, #0
 80113fc:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011400:	2302      	movs	r3, #2
 8011402:	a907      	add	r1, sp, #28
 8011404:	4831      	ldr	r0, [pc, #196]	@ (80114cc <StartSettingsTask+0x238>)
 8011406:	6800      	ldr	r0, [r0, #0]
 8011408:	f007 fd3e 	bl	8018e88 <xQueueGenericSend>
 801140c:	e022      	b.n	8011454 <StartSettingsTask+0x1c0>
				 osDelay(1);
 801140e:	2001      	movs	r0, #1
 8011410:	f007 f9db 	bl	80187ca <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011418:	4833      	ldr	r0, [pc, #204]	@ (80114e8 <StartSettingsTask+0x254>)
 801141a:	f005 fa53 	bl	80168c4 <HAL_GPIO_ReadPin>
 801141e:	2800      	cmp	r0, #0
 8011420:	d0f5      	beq.n	801140e <StartSettingsTask+0x17a>
			 osDelay(1000);
 8011422:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011426:	f007 f9d0 	bl	80187ca <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 801142a:	4829      	ldr	r0, [pc, #164]	@ (80114d0 <StartSettingsTask+0x23c>)
 801142c:	f009 fde8 	bl	801b000 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 8011430:	f005 f8d8 	bl	80165e4 <HAL_NVIC_SystemReset>
 8011434:	e000      	b.n	8011438 <StartSettingsTask+0x1a4>
		 press_time = 0;
 8011436:	2400      	movs	r4, #0
	  osDelay(1000);
 8011438:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801143c:	f007 f9c5 	bl	80187ca <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8011440:	2200      	movs	r2, #0
 8011442:	a907      	add	r1, sp, #28
 8011444:	4b21      	ldr	r3, [pc, #132]	@ (80114cc <StartSettingsTask+0x238>)
 8011446:	6818      	ldr	r0, [r3, #0]
 8011448:	f008 f831 	bl	80194ae <xQueuePeek>
	  if(mqtt_config.save){
 801144c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d1c0      	bne.n	80113d6 <StartSettingsTask+0x142>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 8011454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011458:	4823      	ldr	r0, [pc, #140]	@ (80114e8 <StartSettingsTask+0x254>)
 801145a:	f005 fa33 	bl	80168c4 <HAL_GPIO_ReadPin>
 801145e:	2800      	cmp	r0, #0
 8011460:	d1e9      	bne.n	8011436 <StartSettingsTask+0x1a2>
		 press_time++;
 8011462:	3401      	adds	r4, #1
 8011464:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8011466:	4d20      	ldr	r5, [pc, #128]	@ (80114e8 <StartSettingsTask+0x254>)
 8011468:	2201      	movs	r2, #1
 801146a:	2102      	movs	r1, #2
 801146c:	4628      	mov	r0, r5
 801146e:	f005 fa30 	bl	80168d2 <HAL_GPIO_WritePin>
		 osDelay(100);
 8011472:	2064      	movs	r0, #100	@ 0x64
 8011474:	f007 f9a9 	bl	80187ca <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8011478:	2200      	movs	r2, #0
 801147a:	2102      	movs	r1, #2
 801147c:	4628      	mov	r0, r5
 801147e:	f005 fa28 	bl	80168d2 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 8011482:	2c08      	cmp	r4, #8
 8011484:	d1d8      	bne.n	8011438 <StartSettingsTask+0x1a4>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8011486:	2201      	movs	r2, #1
 8011488:	2102      	movs	r1, #2
 801148a:	4628      	mov	r0, r5
 801148c:	f005 fa21 	bl	80168d2 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011490:	e7c0      	b.n	8011414 <StartSettingsTask+0x180>
 8011492:	bf00      	nop
 8011494:	08011a19 	.word	0x08011a19
 8011498:	08011a3d 	.word	0x08011a3d
 801149c:	08011119 	.word	0x08011119
 80114a0:	08011105 	.word	0x08011105
 80114a4:	08011a69 	.word	0x08011a69
 80114a8:	08011a55 	.word	0x08011a55
 80114ac:	08036204 	.word	0x08036204
 80114b0:	0803620c 	.word	0x0803620c
 80114b4:	08036218 	.word	0x08036218
 80114b8:	08036228 	.word	0x08036228
 80114bc:	08036234 	.word	0x08036234
 80114c0:	08037d84 	.word	0x08037d84
 80114c4:	0803623c 	.word	0x0803623c
 80114c8:	08036244 	.word	0x08036244
 80114cc:	200008a0 	.word	0x200008a0
 80114d0:	08036258 	.word	0x08036258
 80114d4:	200008c8 	.word	0x200008c8
 80114d8:	08036294 	.word	0x08036294
 80114dc:	080362cc 	.word	0x080362cc
 80114e0:	080362d4 	.word	0x080362d4
 80114e4:	08036268 	.word	0x08036268
 80114e8:	40020400 	.word	0x40020400

080114ec <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 80114ec:	b508      	push	{r3, lr}
	switch (param_type) {
 80114ee:	2901      	cmp	r1, #1
 80114f0:	d014      	beq.n	801151c <RW_parameters_from_queue+0x30>
 80114f2:	2902      	cmp	r1, #2
 80114f4:	d01a      	beq.n	801152c <RW_parameters_from_queue+0x40>
 80114f6:	b101      	cbz	r1, 80114fa <RW_parameters_from_queue+0xe>
}
 80114f8:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 80114fa:	b14a      	cbz	r2, 8011510 <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 80114fc:	2a01      	cmp	r2, #1
 80114fe:	d1fb      	bne.n	80114f8 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 8011500:	2302      	movs	r3, #2
 8011502:	2200      	movs	r2, #0
 8011504:	4601      	mov	r1, r0
 8011506:	4812      	ldr	r0, [pc, #72]	@ (8011550 <RW_parameters_from_queue+0x64>)
 8011508:	6800      	ldr	r0, [r0, #0]
 801150a:	f007 fcbd 	bl	8018e88 <xQueueGenericSend>
 801150e:	e7f3      	b.n	80114f8 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 8011510:	4601      	mov	r1, r0
 8011512:	4b0f      	ldr	r3, [pc, #60]	@ (8011550 <RW_parameters_from_queue+0x64>)
 8011514:	6818      	ldr	r0, [r3, #0]
 8011516:	f007 ffca 	bl	80194ae <xQueuePeek>
 801151a:	e7ed      	b.n	80114f8 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 801151c:	2a00      	cmp	r2, #0
 801151e:	d1eb      	bne.n	80114f8 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 8011520:	4601      	mov	r1, r0
 8011522:	4b0c      	ldr	r3, [pc, #48]	@ (8011554 <RW_parameters_from_queue+0x68>)
 8011524:	6818      	ldr	r0, [r3, #0]
 8011526:	f007 ffc2 	bl	80194ae <xQueuePeek>
 801152a:	e7e5      	b.n	80114f8 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 801152c:	b14a      	cbz	r2, 8011542 <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 801152e:	2a01      	cmp	r2, #1
 8011530:	d1e2      	bne.n	80114f8 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 8011532:	2302      	movs	r3, #2
 8011534:	2200      	movs	r2, #0
 8011536:	4601      	mov	r1, r0
 8011538:	4807      	ldr	r0, [pc, #28]	@ (8011558 <RW_parameters_from_queue+0x6c>)
 801153a:	6800      	ldr	r0, [r0, #0]
 801153c:	f007 fca4 	bl	8018e88 <xQueueGenericSend>
}
 8011540:	e7da      	b.n	80114f8 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 8011542:	4601      	mov	r1, r0
 8011544:	4b05      	ldr	r3, [pc, #20]	@ (801155c <RW_parameters_from_queue+0x70>)
 8011546:	6818      	ldr	r0, [r3, #0]
 8011548:	f007 ffb1 	bl	80194ae <xQueuePeek>
 801154c:	e7d4      	b.n	80114f8 <RW_parameters_from_queue+0xc>
 801154e:	bf00      	nop
 8011550:	200008a0 	.word	0x200008a0
 8011554:	200008ac 	.word	0x200008ac
 8011558:	200008a4 	.word	0x200008a4
 801155c:	200008a8 	.word	0x200008a8

08011560 <StartDisplayTask>:
{
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011564:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011568:	f007 f92f 	bl	80187ca <osDelay>
	SSD1306_Init (); // initialise the display
 801156c:	f006 ffc6 	bl	80184fc <SSD1306_Init>
	osDelay(100);//
 8011570:	2064      	movs	r0, #100	@ 0x64
 8011572:	f007 f92a 	bl	80187ca <osDelay>
	SSD1306_GotoXY(x=1,y=0);
 8011576:	2100      	movs	r1, #0
 8011578:	2001      	movs	r0, #1
 801157a:	f006 ff23 	bl	80183c4 <SSD1306_GotoXY>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 801157e:	2000      	movs	r0, #0
 8011580:	f006 fee4 	bl	801834c <SSD1306_Fill>
	if (flash_not_connect_flag){
 8011584:	4ba6      	ldr	r3, [pc, #664]	@ (8011820 <StartDisplayTask+0x2c0>)
 8011586:	781c      	ldrb	r4, [r3, #0]
 8011588:	2c00      	cmp	r4, #0
 801158a:	d142      	bne.n	8011612 <StartDisplayTask+0xb2>
	SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 801158c:	4da5      	ldr	r5, [pc, #660]	@ (8011824 <StartDisplayTask+0x2c4>)
 801158e:	2201      	movs	r2, #1
 8011590:	4629      	mov	r1, r5
 8011592:	48a5      	ldr	r0, [pc, #660]	@ (8011828 <StartDisplayTask+0x2c8>)
 8011594:	f006 ff6a 	bl	801846c <SSD1306_Puts>
	SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 8011598:	2201      	movs	r2, #1
 801159a:	4629      	mov	r1, r5
 801159c:	48a3      	ldr	r0, [pc, #652]	@ (801182c <StartDisplayTask+0x2cc>)
 801159e:	f006 ff65 	bl	801846c <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80115a2:	f104 010b 	add.w	r1, r4, #11
 80115a6:	b2c9      	uxtb	r1, r1
 80115a8:	2001      	movs	r0, #1
 80115aa:	f006 ff0b 	bl	80183c4 <SSD1306_GotoXY>
	SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80115ae:	2201      	movs	r2, #1
 80115b0:	4629      	mov	r1, r5
 80115b2:	489f      	ldr	r0, [pc, #636]	@ (8011830 <StartDisplayTask+0x2d0>)
 80115b4:	f006 ff5a 	bl	801846c <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80115b8:	f104 0116 	add.w	r1, r4, #22
 80115bc:	b2c9      	uxtb	r1, r1
 80115be:	2001      	movs	r0, #1
 80115c0:	f006 ff00 	bl	80183c4 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80115c4:	2201      	movs	r2, #1
 80115c6:	4629      	mov	r1, r5
 80115c8:	489a      	ldr	r0, [pc, #616]	@ (8011834 <StartDisplayTask+0x2d4>)
 80115ca:	f006 ff4f 	bl	801846c <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80115ce:	f104 0121 	add.w	r1, r4, #33	@ 0x21
 80115d2:	b2c9      	uxtb	r1, r1
 80115d4:	2001      	movs	r0, #1
 80115d6:	f006 fef5 	bl	80183c4 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80115da:	4b97      	ldr	r3, [pc, #604]	@ (8011838 <StartDisplayTask+0x2d8>)
 80115dc:	6859      	ldr	r1, [r3, #4]
 80115de:	780a      	ldrb	r2, [r1, #0]
 80115e0:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80115e2:	7888      	ldrb	r0, [r1, #2]
 80115e4:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80115e6:	790e      	ldrb	r6, [r1, #4]
 80115e8:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 80115ea:	9103      	str	r1, [sp, #12]
 80115ec:	9602      	str	r6, [sp, #8]
 80115ee:	9401      	str	r4, [sp, #4]
 80115f0:	9000      	str	r0, [sp, #0]
 80115f2:	4992      	ldr	r1, [pc, #584]	@ (801183c <StartDisplayTask+0x2dc>)
 80115f4:	a805      	add	r0, sp, #20
 80115f6:	f01a ff79 	bl	802c4ec <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80115fa:	2201      	movs	r2, #1
 80115fc:	4629      	mov	r1, r5
 80115fe:	a805      	add	r0, sp, #20
 8011600:	f006 ff34 	bl	801846c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8011604:	f007 f824 	bl	8018650 <SSD1306_UpdateScreen>
	vTaskDelay(3000);
 8011608:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801160c:	f008 fc48 	bl	8019ea0 <vTaskDelay>
	int i=0;
 8011610:	e0ce      	b.n	80117b0 <StartDisplayTask+0x250>
		SSD1306_GotoXY(x=1,y=0);
 8011612:	2100      	movs	r1, #0
 8011614:	2001      	movs	r0, #1
 8011616:	f006 fed5 	bl	80183c4 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801161a:	2000      	movs	r0, #0
 801161c:	f006 fe96 	bl	801834c <SSD1306_Fill>
		SSD1306_Puts("Error. Flash mem", &Font_7x10, SSD1306_COLOR_WHITE);
 8011620:	4c80      	ldr	r4, [pc, #512]	@ (8011824 <StartDisplayTask+0x2c4>)
 8011622:	2201      	movs	r2, #1
 8011624:	4621      	mov	r1, r4
 8011626:	4886      	ldr	r0, [pc, #536]	@ (8011840 <StartDisplayTask+0x2e0>)
 8011628:	f006 ff20 	bl	801846c <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=10);
 801162c:	210a      	movs	r1, #10
 801162e:	2001      	movs	r0, #1
 8011630:	f006 fec8 	bl	80183c4 <SSD1306_GotoXY>
		SSD1306_Puts("chip is not", &Font_7x10, SSD1306_COLOR_WHITE);
 8011634:	2201      	movs	r2, #1
 8011636:	4621      	mov	r1, r4
 8011638:	4882      	ldr	r0, [pc, #520]	@ (8011844 <StartDisplayTask+0x2e4>)
 801163a:	f006 ff17 	bl	801846c <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=20);
 801163e:	2114      	movs	r1, #20
 8011640:	2001      	movs	r0, #1
 8011642:	f006 febf 	bl	80183c4 <SSD1306_GotoXY>
		SSD1306_Puts("connected. Reboot", &Font_7x10, SSD1306_COLOR_WHITE);
 8011646:	2201      	movs	r2, #1
 8011648:	4621      	mov	r1, r4
 801164a:	487f      	ldr	r0, [pc, #508]	@ (8011848 <StartDisplayTask+0x2e8>)
 801164c:	f006 ff0e 	bl	801846c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011650:	f006 fffe 	bl	8018650 <SSD1306_UpdateScreen>
		vTaskDelay(3000);
 8011654:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011658:	f008 fc22 	bl	8019ea0 <vTaskDelay>
		SSD1306_GotoXY(x=1,y=20);
 801165c:	2414      	movs	r4, #20
 801165e:	e795      	b.n	801158c <StartDisplayTask+0x2c>
		switch (flash_status_flag) {
 8011660:	f113 0f05 	cmn.w	r3, #5
 8011664:	d108      	bne.n	8011678 <StartDisplayTask+0x118>
			SSD1306_GotoXY(x=1,y=40);
 8011666:	2128      	movs	r1, #40	@ 0x28
 8011668:	2001      	movs	r0, #1
 801166a:	f006 feab 	bl	80183c4 <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_IO", &Font_7x10, SSD1306_COLOR_WHITE);
 801166e:	2201      	movs	r2, #1
 8011670:	496c      	ldr	r1, [pc, #432]	@ (8011824 <StartDisplayTask+0x2c4>)
 8011672:	4876      	ldr	r0, [pc, #472]	@ (801184c <StartDisplayTask+0x2ec>)
 8011674:	f006 fefa 	bl	801846c <SSD1306_Puts>
		SSD1306_GotoXY(x=1,y=0);
 8011678:	2100      	movs	r1, #0
 801167a:	2001      	movs	r0, #1
 801167c:	f006 fea2 	bl	80183c4 <SSD1306_GotoXY>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011680:	4c68      	ldr	r4, [pc, #416]	@ (8011824 <StartDisplayTask+0x2c4>)
 8011682:	2201      	movs	r2, #1
 8011684:	4621      	mov	r1, r4
 8011686:	4872      	ldr	r0, [pc, #456]	@ (8011850 <StartDisplayTask+0x2f0>)
 8011688:	f006 fef0 	bl	801846c <SSD1306_Puts>
				(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801168c:	4b6a      	ldr	r3, [pc, #424]	@ (8011838 <StartDisplayTask+0x2d8>)
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011692:	0e13      	lsrs	r3, r2, #24
		sprintf(buf,"%lu.%lu.%lu.%lu",
 8011694:	9301      	str	r3, [sp, #4]
 8011696:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80116a0:	b2d2      	uxtb	r2, r2
 80116a2:	496c      	ldr	r1, [pc, #432]	@ (8011854 <StartDisplayTask+0x2f4>)
 80116a4:	a805      	add	r0, sp, #20
 80116a6:	f01a ff21 	bl	802c4ec <sprintf>
		SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80116aa:	2201      	movs	r2, #1
 80116ac:	4621      	mov	r1, r4
 80116ae:	a805      	add	r0, sp, #20
 80116b0:	f006 fedc 	bl	801846c <SSD1306_Puts>
		SSD1306_GotoXY(x,y=y+11);
 80116b4:	210b      	movs	r1, #11
 80116b6:	2001      	movs	r0, #1
 80116b8:	f006 fe84 	bl	80183c4 <SSD1306_GotoXY>
		SSD1306_Puts("Inputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 80116bc:	2201      	movs	r2, #1
 80116be:	4621      	mov	r1, r4
 80116c0:	4865      	ldr	r0, [pc, #404]	@ (8011858 <StartDisplayTask+0x2f8>)
 80116c2:	f006 fed3 	bl	801846c <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 80116c6:	210b      	movs	r1, #11
 80116c8:	203d      	movs	r0, #61	@ 0x3d
 80116ca:	f006 fe7b 	bl	80183c4 <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 80116ce:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 80116d0:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<INPUTS_COUNT ; i++){
 80116d2:	e01f      	b.n	8011714 <StartDisplayTask+0x1b4>
			SSD1306_GotoXY(x=1,y=40);
 80116d4:	2128      	movs	r1, #40	@ 0x28
 80116d6:	2001      	movs	r0, #1
 80116d8:	f006 fe74 	bl	80183c4 <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_CORRUPT", &Font_7x10, SSD1306_COLOR_WHITE);
 80116dc:	2201      	movs	r2, #1
 80116de:	4951      	ldr	r1, [pc, #324]	@ (8011824 <StartDisplayTask+0x2c4>)
 80116e0:	485e      	ldr	r0, [pc, #376]	@ (801185c <StartDisplayTask+0x2fc>)
 80116e2:	f006 fec3 	bl	801846c <SSD1306_Puts>
			break;
 80116e6:	e7c7      	b.n	8011678 <StartDisplayTask+0x118>
			SSD1306_GotoXY(x=1,y=40);
 80116e8:	2128      	movs	r1, #40	@ 0x28
 80116ea:	2001      	movs	r0, #1
 80116ec:	f006 fe6a 	bl	80183c4 <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOMEM", &Font_7x10, SSD1306_COLOR_WHITE);
 80116f0:	2201      	movs	r2, #1
 80116f2:	494c      	ldr	r1, [pc, #304]	@ (8011824 <StartDisplayTask+0x2c4>)
 80116f4:	485a      	ldr	r0, [pc, #360]	@ (8011860 <StartDisplayTask+0x300>)
 80116f6:	f006 feb9 	bl	801846c <SSD1306_Puts>
			break;
 80116fa:	e7bd      	b.n	8011678 <StartDisplayTask+0x118>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80116fc:	2201      	movs	r2, #1
 80116fe:	4949      	ldr	r1, [pc, #292]	@ (8011824 <StartDisplayTask+0x2c4>)
 8011700:	a805      	add	r0, sp, #20
 8011702:	f006 feb3 	bl	801846c <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 8011706:	3408      	adds	r4, #8
 8011708:	b2e4      	uxtb	r4, r4
 801170a:	210b      	movs	r1, #11
 801170c:	4620      	mov	r0, r4
 801170e:	f006 fe59 	bl	80183c4 <SSD1306_GotoXY>
		for (i=0 ; i<INPUTS_COUNT ; i++){
 8011712:	4635      	mov	r5, r6
 8011714:	2d02      	cmp	r5, #2
 8011716:	dc0f      	bgt.n	8011738 <StartDisplayTask+0x1d8>
			sprintf((char *)buf,"%d",i+1);
 8011718:	1c6e      	adds	r6, r5, #1
 801171a:	4632      	mov	r2, r6
 801171c:	4951      	ldr	r1, [pc, #324]	@ (8011864 <StartDisplayTask+0x304>)
 801171e:	a805      	add	r0, sp, #20
 8011720:	f01a fee4 	bl	802c4ec <sprintf>
			if ( io_status.inputs[i] ){
 8011724:	4b50      	ldr	r3, [pc, #320]	@ (8011868 <StartDisplayTask+0x308>)
 8011726:	5d5b      	ldrb	r3, [r3, r5]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d0e7      	beq.n	80116fc <StartDisplayTask+0x19c>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 801172c:	2200      	movs	r2, #0
 801172e:	493d      	ldr	r1, [pc, #244]	@ (8011824 <StartDisplayTask+0x2c4>)
 8011730:	a805      	add	r0, sp, #20
 8011732:	f006 fe9b 	bl	801846c <SSD1306_Puts>
 8011736:	e7e6      	b.n	8011706 <StartDisplayTask+0x1a6>
		SSD1306_GotoXY(x=1,y=y+11);
 8011738:	2116      	movs	r1, #22
 801173a:	2001      	movs	r0, #1
 801173c:	f006 fe42 	bl	80183c4 <SSD1306_GotoXY>
		SSD1306_Puts("Outputs:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011740:	2201      	movs	r2, #1
 8011742:	4938      	ldr	r1, [pc, #224]	@ (8011824 <StartDisplayTask+0x2c4>)
 8011744:	4849      	ldr	r0, [pc, #292]	@ (801186c <StartDisplayTask+0x30c>)
 8011746:	f006 fe91 	bl	801846c <SSD1306_Puts>
		SSD1306_GotoXY(x=x+60,y);
 801174a:	2116      	movs	r1, #22
 801174c:	203d      	movs	r0, #61	@ 0x3d
 801174e:	f006 fe39 	bl	80183c4 <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011752:	2500      	movs	r5, #0
		SSD1306_GotoXY(x=x+60,y);
 8011754:	243d      	movs	r4, #61	@ 0x3d
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 8011756:	e00b      	b.n	8011770 <StartDisplayTask+0x210>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011758:	2201      	movs	r2, #1
 801175a:	4932      	ldr	r1, [pc, #200]	@ (8011824 <StartDisplayTask+0x2c4>)
 801175c:	a805      	add	r0, sp, #20
 801175e:	f006 fe85 	bl	801846c <SSD1306_Puts>
			SSD1306_GotoXY(x=x+8,y);
 8011762:	3408      	adds	r4, #8
 8011764:	b2e4      	uxtb	r4, r4
 8011766:	2116      	movs	r1, #22
 8011768:	4620      	mov	r0, r4
 801176a:	f006 fe2b 	bl	80183c4 <SSD1306_GotoXY>
		for (i=0 ; i<OUTPUTS_COUNT ; i++){
 801176e:	4635      	mov	r5, r6
 8011770:	2d02      	cmp	r5, #2
 8011772:	dc10      	bgt.n	8011796 <StartDisplayTask+0x236>
			sprintf((char *)buf,"%d",i+1);
 8011774:	1c6e      	adds	r6, r5, #1
 8011776:	4632      	mov	r2, r6
 8011778:	493a      	ldr	r1, [pc, #232]	@ (8011864 <StartDisplayTask+0x304>)
 801177a:	a805      	add	r0, sp, #20
 801177c:	f01a feb6 	bl	802c4ec <sprintf>
			if ( io_status.outputs[i] ){
 8011780:	4b39      	ldr	r3, [pc, #228]	@ (8011868 <StartDisplayTask+0x308>)
 8011782:	442b      	add	r3, r5
 8011784:	78db      	ldrb	r3, [r3, #3]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0e6      	beq.n	8011758 <StartDisplayTask+0x1f8>
				SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_BLACK);
 801178a:	2200      	movs	r2, #0
 801178c:	4925      	ldr	r1, [pc, #148]	@ (8011824 <StartDisplayTask+0x2c4>)
 801178e:	a805      	add	r0, sp, #20
 8011790:	f006 fe6c 	bl	801846c <SSD1306_Puts>
 8011794:	e7e5      	b.n	8011762 <StartDisplayTask+0x202>
		SSD1306_UpdateScreen();
 8011796:	f006 ff5b 	bl	8018650 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 801179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801179e:	2201      	movs	r2, #1
 80117a0:	2178      	movs	r1, #120	@ 0x78
 80117a2:	4833      	ldr	r0, [pc, #204]	@ (8011870 <StartDisplayTask+0x310>)
 80117a4:	f005 fbea 	bl	8016f7c <HAL_I2C_IsDeviceReady>
 80117a8:	bb50      	cbnz	r0, 8011800 <StartDisplayTask+0x2a0>
		osDelay(200);
 80117aa:	20c8      	movs	r0, #200	@ 0xc8
 80117ac:	f007 f80d 	bl	80187ca <osDelay>
		RW_parameters_from_queue(io_status.inputs, S_INPUTS, S_READ);
 80117b0:	4c2d      	ldr	r4, [pc, #180]	@ (8011868 <StartDisplayTask+0x308>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	2101      	movs	r1, #1
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7ff fe98 	bl	80114ec <RW_parameters_from_queue>
		RW_parameters_from_queue(io_status.outputs, S_OUTPUTS, S_READ);
 80117bc:	2200      	movs	r2, #0
 80117be:	2102      	movs	r1, #2
 80117c0:	1ce0      	adds	r0, r4, #3
 80117c2:	f7ff fe93 	bl	80114ec <RW_parameters_from_queue>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80117c6:	2000      	movs	r0, #0
 80117c8:	f006 fdc0 	bl	801834c <SSD1306_Fill>
		switch (flash_status_flag) {
 80117cc:	4b29      	ldr	r3, [pc, #164]	@ (8011874 <StartDisplayTask+0x314>)
 80117ce:	f993 3000 	ldrsb.w	r3, [r3]
 80117d2:	f113 0f0c 	cmn.w	r3, #12
 80117d6:	d087      	beq.n	80116e8 <StartDisplayTask+0x188>
 80117d8:	f73f af42 	bgt.w	8011660 <StartDisplayTask+0x100>
 80117dc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80117e0:	f43f af78 	beq.w	80116d4 <StartDisplayTask+0x174>
 80117e4:	f113 0f18 	cmn.w	r3, #24
 80117e8:	f47f af46 	bne.w	8011678 <StartDisplayTask+0x118>
			SSD1306_GotoXY(x=1,y=40);
 80117ec:	2128      	movs	r1, #40	@ 0x28
 80117ee:	2001      	movs	r0, #1
 80117f0:	f006 fde8 	bl	80183c4 <SSD1306_GotoXY>
			SSD1306_Puts("LFS_ERR_NOSPC", &Font_7x10, SSD1306_COLOR_WHITE);
 80117f4:	2201      	movs	r2, #1
 80117f6:	490b      	ldr	r1, [pc, #44]	@ (8011824 <StartDisplayTask+0x2c4>)
 80117f8:	481f      	ldr	r0, [pc, #124]	@ (8011878 <StartDisplayTask+0x318>)
 80117fa:	f006 fe37 	bl	801846c <SSD1306_Puts>
			break;
 80117fe:	e73b      	b.n	8011678 <StartDisplayTask+0x118>
			HAL_I2C_DeInit(&hi2c1);
 8011800:	481b      	ldr	r0, [pc, #108]	@ (8011870 <StartDisplayTask+0x310>)
 8011802:	f005 fae5 	bl	8016dd0 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 8011806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801180a:	f008 fb49 	bl	8019ea0 <vTaskDelay>
			MX_I2C1_Init();
 801180e:	f000 fbc5 	bl	8011f9c <MX_I2C1_Init>
			vTaskDelay(1000);
 8011812:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011816:	f008 fb43 	bl	8019ea0 <vTaskDelay>
			SSD1306_Init ();
 801181a:	f006 fe6f 	bl	80184fc <SSD1306_Init>
 801181e:	e7bc      	b.n	801179a <StartDisplayTask+0x23a>
 8011820:	200008c8 	.word	0x200008c8
 8011824:	2000010c 	.word	0x2000010c
 8011828:	08036320 	.word	0x08036320
 801182c:	0803632c 	.word	0x0803632c
 8011830:	08036338 	.word	0x08036338
 8011834:	08036344 	.word	0x08036344
 8011838:	200008cc 	.word	0x200008cc
 801183c:	0803634c 	.word	0x0803634c
 8011840:	080362ec 	.word	0x080362ec
 8011844:	08036300 	.word	0x08036300
 8011848:	0803630c 	.word	0x0803630c
 801184c:	0803636c 	.word	0x0803636c
 8011850:	080363a8 	.word	0x080363a8
 8011854:	080363ac 	.word	0x080363ac
 8011858:	080363bc 	.word	0x080363bc
 801185c:	08036378 	.word	0x08036378
 8011860:	08036398 	.word	0x08036398
 8011864:	0803b89c 	.word	0x0803b89c
 8011868:	2000088c 	.word	0x2000088c
 801186c:	080363c4 	.word	0x080363c4
 8011870:	200008d4 	.word	0x200008d4
 8011874:	200008c9 	.word	0x200008c9
 8011878:	08036388 	.word	0x08036388

0801187c <StartLoggingTask>:
{
 801187c:	b530      	push	{r4, r5, lr}
 801187e:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 8011880:	4845      	ldr	r0, [pc, #276]	@ (8011998 <StartLoggingTask+0x11c>)
 8011882:	f000 fc27 	bl	80120d4 <reg_logging_fn>
	logger_set_level(L_INFO);
 8011886:	2001      	movs	r0, #1
 8011888:	f000 fc2a 	bl	80120e0 <logger_set_level>
	logging(L_INFO, "Device started...");
 801188c:	4943      	ldr	r1, [pc, #268]	@ (801199c <StartLoggingTask+0x120>)
 801188e:	2001      	movs	r0, #1
 8011890:	f000 fc2c 	bl	80120ec <logging>
	  while (mg_fs_mounted() == 0){
 8011894:	e003      	b.n	801189e <StartLoggingTask+0x22>
		  osDelay(500);
 8011896:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801189a:	f006 ff96 	bl	80187ca <osDelay>
	  while (mg_fs_mounted() == 0){
 801189e:	f009 fbc7 	bl	801b030 <mg_fs_mounted>
 80118a2:	2800      	cmp	r0, #0
 80118a4:	d0f7      	beq.n	8011896 <StartLoggingTask+0x1a>
	uint32_t count = 1780;
 80118a6:	f240 64f4 	movw	r4, #1780	@ 0x6f4
 80118aa:	e051      	b.n	8011950 <StartLoggingTask+0xd4>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80118ac:	2300      	movs	r3, #0
 80118ae:	461a      	mov	r2, r3
 80118b0:	a907      	add	r1, sp, #28
 80118b2:	483b      	ldr	r0, [pc, #236]	@ (80119a0 <StartLoggingTask+0x124>)
 80118b4:	6800      	ldr	r0, [r0, #0]
 80118b6:	f007 f8c2 	bl	8018a3e <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80118ba:	2102      	movs	r1, #2
 80118bc:	4839      	ldr	r0, [pc, #228]	@ (80119a4 <StartLoggingTask+0x128>)
 80118be:	f009 fb31 	bl	801af24 <mg_fs_lfs_open>
 80118c2:	4605      	mov	r5, r0
		  flash_status_flag = mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len);
 80118c4:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80118c8:	f10d 011d 	add.w	r1, sp, #29
 80118cc:	f009 fb66 	bl	801af9c <mg_fs_lfs_write>
 80118d0:	4b35      	ldr	r3, [pc, #212]	@ (80119a8 <StartLoggingTask+0x12c>)
 80118d2:	7018      	strb	r0, [r3, #0]
		  mg_fs_lfs_close(f_pointer);
 80118d4:	4628      	mov	r0, r5
 80118d6:	f009 fb49 	bl	801af6c <mg_fs_lfs_close>
 80118da:	e03f      	b.n	801195c <StartLoggingTask+0xe0>
    	vPortGetHeapStats(&heap_status);
 80118dc:	a848      	add	r0, sp, #288	@ 0x120
 80118de:	f009 fa3b 	bl	801ad58 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 80118e2:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 80118e4:	9304      	str	r3, [sp, #16]
 80118e6:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 80118e8:	9303      	str	r3, [sp, #12]
 80118ea:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80118ec:	9302      	str	r3, [sp, #8]
 80118ee:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 80118f4:	9300      	str	r3, [sp, #0]
 80118f6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80118f8:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 80118fa:	492c      	ldr	r1, [pc, #176]	@ (80119ac <StartLoggingTask+0x130>)
 80118fc:	2001      	movs	r0, #1
 80118fe:	f000 fbf5 	bl	80120ec <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011902:	4c2b      	ldr	r4, [pc, #172]	@ (80119b0 <StartLoggingTask+0x134>)
 8011904:	6863      	ldr	r3, [r4, #4]
 8011906:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011908:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801190a:	9301      	str	r3, [sp, #4]
 801190c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011916:	b2d2      	uxtb	r2, r2
 8011918:	4926      	ldr	r1, [pc, #152]	@ (80119b4 <StartLoggingTask+0x138>)
 801191a:	2001      	movs	r0, #1
 801191c:	f000 fbe6 	bl	80120ec <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011920:	6861      	ldr	r1, [r4, #4]
 8011922:	780a      	ldrb	r2, [r1, #0]
 8011924:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011926:	7888      	ldrb	r0, [r1, #2]
 8011928:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801192a:	790d      	ldrb	r5, [r1, #4]
 801192c:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 801192e:	9103      	str	r1, [sp, #12]
 8011930:	9502      	str	r5, [sp, #8]
 8011932:	9401      	str	r4, [sp, #4]
 8011934:	9000      	str	r0, [sp, #0]
 8011936:	4920      	ldr	r1, [pc, #128]	@ (80119b8 <StartLoggingTask+0x13c>)
 8011938:	2001      	movs	r0, #1
 801193a:	f000 fbd7 	bl	80120ec <logging>
    	logging(L_INFO, "Flash chip model name: %s",  get_flash_chip_model());
 801193e:	f009 fb7d 	bl	801b03c <get_flash_chip_model>
 8011942:	4602      	mov	r2, r0
 8011944:	491d      	ldr	r1, [pc, #116]	@ (80119bc <StartLoggingTask+0x140>)
 8011946:	2001      	movs	r0, #1
 8011948:	f000 fbd0 	bl	80120ec <logging>
    	count = 0;
 801194c:	2400      	movs	r4, #0
    count ++;
 801194e:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011950:	4b13      	ldr	r3, [pc, #76]	@ (80119a0 <StartLoggingTask+0x124>)
 8011952:	6818      	ldr	r0, [r3, #0]
 8011954:	f007 f8b4 	bl	8018ac0 <osMessageQueueGetCount>
 8011958:	2800      	cmp	r0, #0
 801195a:	d1a7      	bne.n	80118ac <StartLoggingTask+0x30>
    osDelay(500);
 801195c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011960:	f006 ff33 	bl	80187ca <osDelay>
    if (count == 2000){
 8011964:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 8011968:	d1f1      	bne.n	801194e <StartLoggingTask+0xd2>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801196a:	2200      	movs	r2, #0
 801196c:	a94f      	add	r1, sp, #316	@ 0x13c
 801196e:	480d      	ldr	r0, [pc, #52]	@ (80119a4 <StartLoggingTask+0x128>)
 8011970:	f009 fa9a 	bl	801aea8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011974:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8011976:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801197a:	429a      	cmp	r2, r3
 801197c:	d9ae      	bls.n	80118dc <StartLoggingTask+0x60>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 801197e:	4c10      	ldr	r4, [pc, #64]	@ (80119c0 <StartLoggingTask+0x144>)
 8011980:	4620      	mov	r0, r4
 8011982:	f009 fb3d 	bl	801b000 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8011986:	4621      	mov	r1, r4
 8011988:	4806      	ldr	r0, [pc, #24]	@ (80119a4 <StartLoggingTask+0x128>)
 801198a:	f009 fb2d 	bl	801afe8 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 801198e:	490d      	ldr	r1, [pc, #52]	@ (80119c4 <StartLoggingTask+0x148>)
 8011990:	2001      	movs	r0, #1
 8011992:	f000 fbab 	bl	80120ec <logging>
 8011996:	e7a1      	b.n	80118dc <StartLoggingTask+0x60>
 8011998:	0801126d 	.word	0x0801126d
 801199c:	080363d0 	.word	0x080363d0
 80119a0:	2000089c 	.word	0x2000089c
 80119a4:	080363e4 	.word	0x080363e4
 80119a8:	200008c9 	.word	0x200008c9
 80119ac:	08036418 	.word	0x08036418
 80119b0:	200008cc 	.word	0x200008cc
 80119b4:	080364ac 	.word	0x080364ac
 80119b8:	080364c8 	.word	0x080364c8
 80119bc:	080364f0 	.word	0x080364f0
 80119c0:	080363f4 	.word	0x080363f4
 80119c4:	08036404 	.word	0x08036404

080119c8 <StartWatchDogTask>:
{
 80119c8:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 80119ca:	4806      	ldr	r0, [pc, #24]	@ (80119e4 <StartWatchDogTask+0x1c>)
 80119cc:	f005 fbcc 	bl	8017168 <HAL_IWDG_Refresh>
    osDelay(500);
 80119d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80119d4:	f006 fef9 	bl	80187ca <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80119d8:	2101      	movs	r1, #1
 80119da:	4803      	ldr	r0, [pc, #12]	@ (80119e8 <StartWatchDogTask+0x20>)
 80119dc:	f004 ff7f 	bl	80168de <HAL_GPIO_TogglePin>
  for(;;)
 80119e0:	e7f3      	b.n	80119ca <StartWatchDogTask+0x2>
 80119e2:	bf00      	nop
 80119e4:	20000928 	.word	0x20000928
 80119e8:	40020400 	.word	0x40020400

080119ec <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80119ec:	b500      	push	{lr}
 80119ee:	b087      	sub	sp, #28
 80119f0:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119f8:	9300      	str	r3, [sp, #0]
 80119fa:	2301      	movs	r3, #1
 80119fc:	f10d 0217 	add.w	r2, sp, #23
 8011a00:	f10d 010f 	add.w	r1, sp, #15
 8011a04:	4803      	ldr	r0, [pc, #12]	@ (8011a14 <EthTxn+0x28>)
 8011a06:	f006 f93e 	bl	8017c86 <HAL_SPI_TransmitReceive>
}
 8011a0a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011a0e:	b007      	add	sp, #28
 8011a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a14:	20000938 	.word	0x20000938

08011a18 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011a18:	b500      	push	{lr}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a24:	2201      	movs	r2, #1
 8011a26:	f10d 0107 	add.w	r1, sp, #7
 8011a2a:	4803      	ldr	r0, [pc, #12]	@ (8011a38 <FlashSPIsendByte+0x20>)
 8011a2c:	f006 f849 	bl	8017ac2 <HAL_SPI_Transmit>
}
 8011a30:	b003      	add	sp, #12
 8011a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a36:	bf00      	nop
 8011a38:	20000990 	.word	0x20000990

08011a3c <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011a3c:	b508      	push	{r3, lr}
 8011a3e:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a44:	4601      	mov	r1, r0
 8011a46:	4802      	ldr	r0, [pc, #8]	@ (8011a50 <FlashSPIrecvBuff+0x14>)
 8011a48:	f006 fa47 	bl	8017eda <HAL_SPI_Receive>
}
 8011a4c:	bd08      	pop	{r3, pc}
 8011a4e:	bf00      	nop
 8011a50:	20000990 	.word	0x20000990

08011a54 <FS_Lock>:
void FS_Lock(void * param){
 8011a54:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011a56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011a5a:	4b02      	ldr	r3, [pc, #8]	@ (8011a64 <FS_Lock+0x10>)
 8011a5c:	6818      	ldr	r0, [r3, #0]
 8011a5e:	f006 ff0b 	bl	8018878 <osMutexAcquire>
}
 8011a62:	bd08      	pop	{r3, pc}
 8011a64:	20000894 	.word	0x20000894

08011a68 <FS_Unlock>:
void FS_Unlock(void * param){
 8011a68:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011a6a:	4b02      	ldr	r3, [pc, #8]	@ (8011a74 <FS_Unlock+0xc>)
 8011a6c:	6818      	ldr	r0, [r3, #0]
 8011a6e:	f006 ff32 	bl	80188d6 <osMutexRelease>
}
 8011a72:	bd08      	pop	{r3, pc}
 8011a74:	20000894 	.word	0x20000894

08011a78 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011a78:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011a7a:	482c      	ldr	r0, [pc, #176]	@ (8011b2c <MX_FREERTOS_Init+0xb4>)
 8011a7c:	f006 feb3 	bl	80187e6 <osMutexNew>
 8011a80:	4b2b      	ldr	r3, [pc, #172]	@ (8011b30 <MX_FREERTOS_Init+0xb8>)
 8011a82:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011a84:	482b      	ldr	r0, [pc, #172]	@ (8011b34 <MX_FREERTOS_Init+0xbc>)
 8011a86:	f006 feae 	bl	80187e6 <osMutexNew>
 8011a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8011b38 <MX_FREERTOS_Init+0xc0>)
 8011a8c:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8011b3c <MX_FREERTOS_Init+0xc4>)
 8011a90:	2103      	movs	r1, #3
 8011a92:	2001      	movs	r0, #1
 8011a94:	f006 ff46 	bl	8018924 <osMessageQueueNew>
 8011a98:	4b29      	ldr	r3, [pc, #164]	@ (8011b40 <MX_FREERTOS_Init+0xc8>)
 8011a9a:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011a9c:	4a29      	ldr	r2, [pc, #164]	@ (8011b44 <MX_FREERTOS_Init+0xcc>)
 8011a9e:	2103      	movs	r1, #3
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	f006 ff3f 	bl	8018924 <osMessageQueueNew>
 8011aa6:	4b28      	ldr	r3, [pc, #160]	@ (8011b48 <MX_FREERTOS_Init+0xd0>)
 8011aa8:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8011aaa:	4a28      	ldr	r2, [pc, #160]	@ (8011b4c <MX_FREERTOS_Init+0xd4>)
 8011aac:	2103      	movs	r1, #3
 8011aae:	2001      	movs	r0, #1
 8011ab0:	f006 ff38 	bl	8018924 <osMessageQueueNew>
 8011ab4:	4b26      	ldr	r3, [pc, #152]	@ (8011b50 <MX_FREERTOS_Init+0xd8>)
 8011ab6:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011ab8:	4a26      	ldr	r2, [pc, #152]	@ (8011b54 <MX_FREERTOS_Init+0xdc>)
 8011aba:	21c6      	movs	r1, #198	@ 0xc6
 8011abc:	2001      	movs	r0, #1
 8011abe:	f006 ff31 	bl	8018924 <osMessageQueueNew>
 8011ac2:	4b25      	ldr	r3, [pc, #148]	@ (8011b58 <MX_FREERTOS_Init+0xe0>)
 8011ac4:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8011ac6:	4a25      	ldr	r2, [pc, #148]	@ (8011b5c <MX_FREERTOS_Init+0xe4>)
 8011ac8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8011acc:	200f      	movs	r0, #15
 8011ace:	f006 ff29 	bl	8018924 <osMessageQueueNew>
 8011ad2:	4b23      	ldr	r3, [pc, #140]	@ (8011b60 <MX_FREERTOS_Init+0xe8>)
 8011ad4:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8011ad6:	4a23      	ldr	r2, [pc, #140]	@ (8011b64 <MX_FREERTOS_Init+0xec>)
 8011ad8:	2100      	movs	r1, #0
 8011ada:	4823      	ldr	r0, [pc, #140]	@ (8011b68 <MX_FREERTOS_Init+0xf0>)
 8011adc:	f006 fe16 	bl	801870c <osThreadNew>
 8011ae0:	4b22      	ldr	r3, [pc, #136]	@ (8011b6c <MX_FREERTOS_Init+0xf4>)
 8011ae2:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 8011ae4:	4a22      	ldr	r2, [pc, #136]	@ (8011b70 <MX_FREERTOS_Init+0xf8>)
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	4822      	ldr	r0, [pc, #136]	@ (8011b74 <MX_FREERTOS_Init+0xfc>)
 8011aea:	f006 fe0f 	bl	801870c <osThreadNew>
 8011aee:	4b22      	ldr	r3, [pc, #136]	@ (8011b78 <MX_FREERTOS_Init+0x100>)
 8011af0:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011af2:	4a22      	ldr	r2, [pc, #136]	@ (8011b7c <MX_FREERTOS_Init+0x104>)
 8011af4:	2100      	movs	r1, #0
 8011af6:	4822      	ldr	r0, [pc, #136]	@ (8011b80 <MX_FREERTOS_Init+0x108>)
 8011af8:	f006 fe08 	bl	801870c <osThreadNew>
 8011afc:	4b21      	ldr	r3, [pc, #132]	@ (8011b84 <MX_FREERTOS_Init+0x10c>)
 8011afe:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011b00:	4a21      	ldr	r2, [pc, #132]	@ (8011b88 <MX_FREERTOS_Init+0x110>)
 8011b02:	2100      	movs	r1, #0
 8011b04:	4821      	ldr	r0, [pc, #132]	@ (8011b8c <MX_FREERTOS_Init+0x114>)
 8011b06:	f006 fe01 	bl	801870c <osThreadNew>
 8011b0a:	4b21      	ldr	r3, [pc, #132]	@ (8011b90 <MX_FREERTOS_Init+0x118>)
 8011b0c:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011b0e:	4a21      	ldr	r2, [pc, #132]	@ (8011b94 <MX_FREERTOS_Init+0x11c>)
 8011b10:	2100      	movs	r1, #0
 8011b12:	4821      	ldr	r0, [pc, #132]	@ (8011b98 <MX_FREERTOS_Init+0x120>)
 8011b14:	f006 fdfa 	bl	801870c <osThreadNew>
 8011b18:	4b20      	ldr	r3, [pc, #128]	@ (8011b9c <MX_FREERTOS_Init+0x124>)
 8011b1a:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 8011b1c:	4a20      	ldr	r2, [pc, #128]	@ (8011ba0 <MX_FREERTOS_Init+0x128>)
 8011b1e:	2100      	movs	r1, #0
 8011b20:	4820      	ldr	r0, [pc, #128]	@ (8011ba4 <MX_FREERTOS_Init+0x12c>)
 8011b22:	f006 fdf3 	bl	801870c <osThreadNew>
 8011b26:	4b20      	ldr	r3, [pc, #128]	@ (8011ba8 <MX_FREERTOS_Init+0x130>)
 8011b28:	6018      	str	r0, [r3, #0]
}
 8011b2a:	bd08      	pop	{r3, pc}
 8011b2c:	080365f4 	.word	0x080365f4
 8011b30:	20000898 	.word	0x20000898
 8011b34:	080365e4 	.word	0x080365e4
 8011b38:	20000894 	.word	0x20000894
 8011b3c:	08036664 	.word	0x08036664
 8011b40:	200008ac 	.word	0x200008ac
 8011b44:	0803664c 	.word	0x0803664c
 8011b48:	200008a8 	.word	0x200008a8
 8011b4c:	08036634 	.word	0x08036634
 8011b50:	200008a4 	.word	0x200008a4
 8011b54:	0803661c 	.word	0x0803661c
 8011b58:	200008a0 	.word	0x200008a0
 8011b5c:	08036604 	.word	0x08036604
 8011b60:	2000089c 	.word	0x2000089c
 8011b64:	08036730 	.word	0x08036730
 8011b68:	08011bd5 	.word	0x08011bd5
 8011b6c:	200008c4 	.word	0x200008c4
 8011b70:	0803670c 	.word	0x0803670c
 8011b74:	0801112d 	.word	0x0801112d
 8011b78:	200008c0 	.word	0x200008c0
 8011b7c:	080366e8 	.word	0x080366e8
 8011b80:	08011561 	.word	0x08011561
 8011b84:	200008bc 	.word	0x200008bc
 8011b88:	080366c4 	.word	0x080366c4
 8011b8c:	08011295 	.word	0x08011295
 8011b90:	200008b8 	.word	0x200008b8
 8011b94:	080366a0 	.word	0x080366a0
 8011b98:	0801187d 	.word	0x0801187d
 8011b9c:	200008b4 	.word	0x200008b4
 8011ba0:	0803667c 	.word	0x0803667c
 8011ba4:	080119c9 	.word	0x080119c9
 8011ba8:	200008b0 	.word	0x200008b0

08011bac <EthResetBegin>:
void EthResetBegin(void){
 8011bac:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011bb4:	4801      	ldr	r0, [pc, #4]	@ (8011bbc <EthResetBegin+0x10>)
 8011bb6:	f004 fe8c 	bl	80168d2 <HAL_GPIO_WritePin>
}
 8011bba:	bd08      	pop	{r3, pc}
 8011bbc:	40020000 	.word	0x40020000

08011bc0 <EthResetEnd>:
void EthResetEnd(void){
 8011bc0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011bc8:	4801      	ldr	r0, [pc, #4]	@ (8011bd0 <EthResetEnd+0x10>)
 8011bca:	f004 fe82 	bl	80168d2 <HAL_GPIO_WritePin>
}
 8011bce:	bd08      	pop	{r3, pc}
 8011bd0:	40020000 	.word	0x40020000

08011bd4 <StartEthTask>:
{
 8011bd4:	b530      	push	{r4, r5, lr}
 8011bd6:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 8011bd8:	ad22      	add	r5, sp, #136	@ 0x88
 8011bda:	4b64      	ldr	r3, [pc, #400]	@ (8011d6c <StartEthTask+0x198>)
 8011bdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011bde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 8011be2:	ac02      	add	r4, sp, #8
 8011be4:	2280      	movs	r2, #128	@ 0x80
 8011be6:	2100      	movs	r1, #0
 8011be8:	4620      	mov	r0, r4
 8011bea:	f01b f841 	bl	802cc70 <memset>
 8011bee:	2340      	movs	r3, #64	@ 0x40
 8011bf0:	f88d 3008 	strb.w	r3, [sp, #8]
 8011bf4:	2322      	movs	r3, #34	@ 0x22
 8011bf6:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8011d70 <StartEthTask+0x19c>)
 8011bfc:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011bfe:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011c02:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011c04:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011c08:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011c0a:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011c0e:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011c10:	f88d 300d 	strb.w	r3, [sp, #13]
 8011c14:	2301      	movs	r3, #1
 8011c16:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011c1a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011c1e:	4b55      	ldr	r3, [pc, #340]	@ (8011d74 <StartEthTask+0x1a0>)
 8011c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c22:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011c24:	4b54      	ldr	r3, [pc, #336]	@ (8011d78 <StartEthTask+0x1a4>)
 8011c26:	aa58      	add	r2, sp, #352	@ 0x160
 8011c28:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011c2a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011c2c:	e003      	b.n	8011c36 <StartEthTask+0x62>
	  osDelay(500);
 8011c2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011c32:	f006 fdca 	bl	80187ca <osDelay>
  while (mg_fs_mounted() == 0){
 8011c36:	f009 f9fb 	bl	801b030 <mg_fs_mounted>
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	d0f7      	beq.n	8011c2e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011c3e:	a858      	add	r0, sp, #352	@ 0x160
 8011c40:	f011 fe08 	bl	8023854 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011c44:	4b4d      	ldr	r3, [pc, #308]	@ (8011d7c <StartEthTask+0x1a8>)
 8011c46:	2203      	movs	r2, #3
 8011c48:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011c4a:	f002 ff6f 	bl	8014b2c <dash_hdl>
 8011c4e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011c50:	e00f      	b.n	8011c72 <StartEthTask+0x9e>
	  EthResetBegin();
 8011c52:	f7ff ffab 	bl	8011bac <EthResetBegin>
	  osDelay(500);
 8011c56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011c5a:	f006 fdb6 	bl	80187ca <osDelay>
	  EthResetEnd();
 8011c5e:	f7ff ffaf 	bl	8011bc0 <EthResetEnd>
	  osDelay(2000);
 8011c62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011c66:	f006 fdb0 	bl	80187ca <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011c6a:	a902      	add	r1, sp, #8
 8011c6c:	a858      	add	r0, sp, #352	@ 0x160
 8011c6e:	f017 fa21 	bl	80290b4 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011c72:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0eb      	beq.n	8011c52 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011c7a:	2106      	movs	r1, #6
 8011c7c:	a802      	add	r0, sp, #8
 8011c7e:	f003 fbbf 	bl	8015400 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011c82:	483f      	ldr	r0, [pc, #252]	@ (8011d80 <StartEthTask+0x1ac>)
 8011c84:	f002 ff60 	bl	8014b48 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011c88:	4b3b      	ldr	r3, [pc, #236]	@ (8011d78 <StartEthTask+0x1a4>)
 8011c8a:	4622      	mov	r2, r4
 8011c8c:	493d      	ldr	r1, [pc, #244]	@ (8011d84 <StartEthTask+0x1b0>)
 8011c8e:	a858      	add	r0, sp, #352	@ 0x160
 8011c90:	f015 fc3e 	bl	8027510 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011c94:	e006      	b.n	8011ca4 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011c96:	2101      	movs	r1, #1
 8011c98:	a858      	add	r0, sp, #352	@ 0x160
 8011c9a:	f017 ffa5 	bl	8029be8 <mg_mgr_poll>
    osDelay(1);
 8011c9e:	2001      	movs	r0, #1
 8011ca0:	f006 fd93 	bl	80187ca <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011ca4:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d1f4      	bne.n	8011c96 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011cac:	4b32      	ldr	r3, [pc, #200]	@ (8011d78 <StartEthTask+0x1a4>)
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011cb2:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011cb4:	9301      	str	r3, [sp, #4]
 8011cb6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011cc0:	b2d2      	uxtb	r2, r2
 8011cc2:	4931      	ldr	r1, [pc, #196]	@ (8011d88 <StartEthTask+0x1b4>)
 8011cc4:	2001      	movs	r0, #1
 8011cc6:	f000 fa11 	bl	80120ec <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4611      	mov	r1, r2
 8011cce:	a826      	add	r0, sp, #152	@ 0x98
 8011cd0:	f7ff fc0c 	bl	80114ec <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011cd4:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011cd8:	b1eb      	cbz	r3, 8011d16 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011cda:	492c      	ldr	r1, [pc, #176]	@ (8011d8c <StartEthTask+0x1b8>)
 8011cdc:	2001      	movs	r0, #1
 8011cde:	f000 fa05 	bl	80120ec <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011ce2:	4b27      	ldr	r3, [pc, #156]	@ (8011d80 <StartEthTask+0x1ac>)
 8011ce4:	9301      	str	r3, [sp, #4]
 8011ce6:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	ab47      	add	r3, sp, #284	@ 0x11c
 8011cee:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011cf2:	a902      	add	r1, sp, #8
 8011cf4:	a858      	add	r0, sp, #352	@ 0x160
 8011cf6:	f003 fac1 	bl	801527c <mqtt_init>
  start_sntp(&mgr);
 8011cfa:	a858      	add	r0, sp, #352	@ 0x160
 8011cfc:	f003 ff56 	bl	8015bac <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011d00:	a902      	add	r1, sp, #8
 8011d02:	a858      	add	r0, sp, #352	@ 0x160
 8011d04:	f004 f91e 	bl	8015f44 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011d08:	a858      	add	r0, sp, #352	@ 0x160
 8011d0a:	f001 f853 	bl	8012db4 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011d0e:	f007 ffb9 	bl	8019c84 <xTaskGetTickCount>
 8011d12:	4605      	mov	r5, r0
 8011d14:	e008      	b.n	8011d28 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011d16:	491e      	ldr	r1, [pc, #120]	@ (8011d90 <StartEthTask+0x1bc>)
 8011d18:	2001      	movs	r0, #1
 8011d1a:	f000 f9e7 	bl	80120ec <logging>
 8011d1e:	e7ec      	b.n	8011cfa <StartEthTask+0x126>
      osDelay(1);
 8011d20:	2001      	movs	r0, #1
 8011d22:	f006 fd52 	bl	80187ca <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011d26:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011d28:	f007 ffac 	bl	8019c84 <xTaskGetTickCount>
 8011d2c:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011d2e:	1b41      	subs	r1, r0, r5
 8011d30:	a858      	add	r0, sp, #352	@ 0x160
 8011d32:	f017 ff59 	bl	8029be8 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	a802      	add	r0, sp, #8
 8011d3c:	4798      	blx	r3
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d1ee      	bne.n	8011d20 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011d42:	f7ff ff33 	bl	8011bac <EthResetBegin>
    	  osDelay(100);
 8011d46:	2064      	movs	r0, #100	@ 0x64
 8011d48:	f006 fd3f 	bl	80187ca <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011d4c:	f7ff ff38 	bl	8011bc0 <EthResetEnd>
    	  osDelay(3000);
 8011d50:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011d54:	f006 fd39 	bl	80187ca <osDelay>
    	  mif.driver->init(&mif);
 8011d58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	a802      	add	r0, sp, #8
 8011d5e:	4798      	blx	r3
    	  osDelay(7000);
 8011d60:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011d64:	f006 fd31 	bl	80187ca <osDelay>
 8011d68:	e7e5      	b.n	8011d36 <StartEthTask+0x162>
 8011d6a:	bf00      	nop
 8011d6c:	08035fa4 	.word	0x08035fa4
 8011d70:	1fff7a00 	.word	0x1fff7a00
 8011d74:	20000118 	.word	0x20000118
 8011d78:	200008cc 	.word	0x200008cc
 8011d7c:	2000012c 	.word	0x2000012c
 8011d80:	080114ed 	.word	0x080114ed
 8011d84:	0803650c 	.word	0x0803650c
 8011d88:	080364ac 	.word	0x080364ac
 8011d8c:	08036520 	.word	0x08036520
 8011d90:	08036538 	.word	0x08036538

08011d94 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011d94:	b20b      	sxth	r3, r1
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dd20      	ble.n	8011ddc <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011d9a:	b570      	push	{r4, r5, r6, lr}
 8011d9c:	b082      	sub	sp, #8
 8011d9e:	4606      	mov	r6, r0
 8011da0:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011da2:	188b      	adds	r3, r1, r2
 8011da4:	2b04      	cmp	r3, #4
 8011da6:	dd02      	ble.n	8011dae <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011da8:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011daa:	b002      	add	sp, #8
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011dae:	1e4c      	subs	r4, r1, #1
 8011db0:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011db2:	2200      	movs	r2, #0
 8011db4:	2101      	movs	r1, #1
 8011db6:	a801      	add	r0, sp, #4
 8011db8:	f7ff fb98 	bl	80114ec <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011dbc:	e00a      	b.n	8011dd4 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011dbe:	f104 0308 	add.w	r3, r4, #8
 8011dc2:	446b      	add	r3, sp
 8011dc4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	b2a1      	uxth	r1, r4
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f000 fe47 	bl	8012a60 <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011dd2:	3401      	adds	r4, #1
 8011dd4:	42a5      	cmp	r5, r4
 8011dd6:	dcf2      	bgt.n	8011dbe <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011dd8:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011dda:	e7e6      	b.n	8011daa <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011ddc:	2001      	movs	r0, #1
}
 8011dde:	4770      	bx	lr

08011de0 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de2:	b083      	sub	sp, #12
 8011de4:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011de6:	b20a      	sxth	r2, r1
 8011de8:	2a00      	cmp	r2, #0
 8011dea:	dd43      	ble.n	8011e74 <eMBRegCoilsCB+0x94>
 8011dec:	4605      	mov	r5, r0
 8011dee:	461f      	mov	r7, r3
 8011df0:	198b      	adds	r3, r1, r6
 8011df2:	2b04      	cmp	r3, #4
 8011df4:	dc41      	bgt.n	8011e7a <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011df6:	b327      	cbz	r7, 8011e42 <eMBRegCoilsCB+0x62>
 8011df8:	2f01      	cmp	r7, #1
 8011dfa:	d139      	bne.n	8011e70 <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011dfc:	3901      	subs	r1, #1
 8011dfe:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011e00:	2200      	movs	r2, #0
 8011e02:	2102      	movs	r1, #2
 8011e04:	a801      	add	r0, sp, #4
 8011e06:	f7ff fb71 	bl	80114ec <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011e0a:	4627      	mov	r7, r4
 8011e0c:	e00f      	b.n	8011e2e <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011e0e:	2201      	movs	r2, #1
 8011e10:	b2b9      	uxth	r1, r7
 8011e12:	4628      	mov	r0, r5
 8011e14:	f000 fe58 	bl	8012ac8 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011e18:	2201      	movs	r2, #1
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f000 fe53 	bl	8012ac8 <xMBUtilGetBits>
 8011e22:	f107 0308 	add.w	r3, r7, #8
 8011e26:	446b      	add	r3, sp
 8011e28:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011e2c:	3701      	adds	r7, #1
 8011e2e:	1933      	adds	r3, r6, r4
 8011e30:	42bb      	cmp	r3, r7
 8011e32:	dcec      	bgt.n	8011e0e <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011e34:	2201      	movs	r2, #1
 8011e36:	2102      	movs	r1, #2
 8011e38:	a801      	add	r0, sp, #4
 8011e3a:	f7ff fb57 	bl	80114ec <RW_parameters_from_queue>
				return MB_ENOERR;
 8011e3e:	2000      	movs	r0, #0
 8011e40:	e019      	b.n	8011e76 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011e42:	1e4c      	subs	r4, r1, #1
 8011e44:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011e46:	2200      	movs	r2, #0
 8011e48:	2102      	movs	r1, #2
 8011e4a:	a801      	add	r0, sp, #4
 8011e4c:	f7ff fb4e 	bl	80114ec <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011e50:	e00a      	b.n	8011e68 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011e52:	f104 0308 	add.w	r3, r4, #8
 8011e56:	446b      	add	r3, sp
 8011e58:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	b2a1      	uxth	r1, r4
 8011e60:	4628      	mov	r0, r5
 8011e62:	f000 fdfd 	bl	8012a60 <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011e66:	3401      	adds	r4, #1
 8011e68:	42a6      	cmp	r6, r4
 8011e6a:	dcf2      	bgt.n	8011e52 <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011e6c:	4638      	mov	r0, r7
 8011e6e:	e002      	b.n	8011e76 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011e70:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011e72:	e000      	b.n	8011e76 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011e74:	2001      	movs	r0, #1
}
 8011e76:	b003      	add	sp, #12
 8011e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	e7fb      	b.n	8011e76 <eMBRegCoilsCB+0x96>

08011e7e <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011e7e:	2001      	movs	r0, #1
 8011e80:	4770      	bx	lr

08011e82 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011e82:	2001      	movs	r0, #1
 8011e84:	4770      	bx	lr
	...

08011e88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e8c:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e8e:	2400      	movs	r4, #0
 8011e90:	9403      	str	r4, [sp, #12]
 8011e92:	9404      	str	r4, [sp, #16]
 8011e94:	9405      	str	r4, [sp, #20]
 8011e96:	9406      	str	r4, [sp, #24]
 8011e98:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011e9a:	9400      	str	r4, [sp, #0]
 8011e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8011f90 <MX_GPIO_Init+0x108>)
 8011e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ea0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011ea4:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ea8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011eac:	9200      	str	r2, [sp, #0]
 8011eae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011eb0:	9401      	str	r4, [sp, #4]
 8011eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011eb4:	f042 0201 	orr.w	r2, r2, #1
 8011eb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ebc:	f002 0201 	and.w	r2, r2, #1
 8011ec0:	9201      	str	r2, [sp, #4]
 8011ec2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ec4:	9402      	str	r4, [sp, #8]
 8011ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ec8:	f042 0202 	orr.w	r2, r2, #2
 8011ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ed0:	f003 0302 	and.w	r3, r3, #2
 8011ed4:	9302      	str	r3, [sp, #8]
 8011ed6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011ed8:	4e2e      	ldr	r6, [pc, #184]	@ (8011f94 <MX_GPIO_Init+0x10c>)
 8011eda:	4622      	mov	r2, r4
 8011edc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f004 fcf6 	bl	80168d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011ee6:	4d2c      	ldr	r5, [pc, #176]	@ (8011f98 <MX_GPIO_Init+0x110>)
 8011ee8:	4622      	mov	r2, r4
 8011eea:	2107      	movs	r1, #7
 8011eec:	4628      	mov	r0, r5
 8011eee:	f004 fcf0 	bl	80168d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f004 fcea 	bl	80168d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011efe:	2201      	movs	r2, #1
 8011f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011f04:	4630      	mov	r0, r6
 8011f06:	f004 fce4 	bl	80168d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : input1_Pin input2_Pin input3_Pin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011f0a:	f04f 0907 	mov.w	r9, #7
 8011f0e:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011f12:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f14:	f04f 0802 	mov.w	r8, #2
 8011f18:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f1c:	a903      	add	r1, sp, #12
 8011f1e:	4630      	mov	r0, r6
 8011f20:	f004 fb64 	bl	80165ec <HAL_GPIO_Init>

  /*Configure GPIO pins : coil1_Pin coil2_Pin coil3_Pin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011f24:	23e0      	movs	r3, #224	@ 0xe0
 8011f26:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f28:	2701      	movs	r7, #1
 8011f2a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f2c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f2e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f30:	a903      	add	r1, sp, #12
 8011f32:	4630      	mov	r0, r6
 8011f34:	f004 fb5a 	bl	80165ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011f38:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f3c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f3e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f40:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f42:	a903      	add	r1, sp, #12
 8011f44:	4628      	mov	r0, r5
 8011f46:	f004 fb51 	bl	80165ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011f4e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f50:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f52:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f54:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011f58:	a903      	add	r1, sp, #12
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	f004 fb46 	bl	80165ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011f60:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011f64:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f66:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f68:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011f6a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f6e:	a903      	add	r1, sp, #12
 8011f70:	4630      	mov	r0, r6
 8011f72:	f004 fb3b 	bl	80165ec <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f7a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011f7c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f7e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011f80:	a903      	add	r1, sp, #12
 8011f82:	4628      	mov	r0, r5
 8011f84:	f004 fb32 	bl	80165ec <HAL_GPIO_Init>

}
 8011f88:	b009      	add	sp, #36	@ 0x24
 8011f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f8e:	bf00      	nop
 8011f90:	40023800 	.word	0x40023800
 8011f94:	40020000 	.word	0x40020000
 8011f98:	40020400 	.word	0x40020400

08011f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011f9c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011f9e:	480b      	ldr	r0, [pc, #44]	@ (8011fcc <MX_I2C1_Init+0x30>)
 8011fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd0 <MX_I2C1_Init+0x34>)
 8011fa2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd4 <MX_I2C1_Init+0x38>)
 8011fa6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011fac:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011fae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011fb2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011fb4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011fb6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011fb8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011fba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011fbc:	f004 fe2a 	bl	8016c14 <HAL_I2C_Init>
 8011fc0:	b900      	cbnz	r0, 8011fc4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011fc2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011fc4:	f000 f93c 	bl	8012240 <Error_Handler>
}
 8011fc8:	e7fb      	b.n	8011fc2 <MX_I2C1_Init+0x26>
 8011fca:	bf00      	nop
 8011fcc:	200008d4 	.word	0x200008d4
 8011fd0:	40005400 	.word	0x40005400
 8011fd4:	00030d40 	.word	0x00030d40

08011fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011fd8:	b530      	push	{r4, r5, lr}
 8011fda:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fdc:	2300      	movs	r3, #0
 8011fde:	9303      	str	r3, [sp, #12]
 8011fe0:	9304      	str	r3, [sp, #16]
 8011fe2:	9305      	str	r3, [sp, #20]
 8011fe4:	9306      	str	r3, [sp, #24]
 8011fe6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011fe8:	6802      	ldr	r2, [r0, #0]
 8011fea:	4b15      	ldr	r3, [pc, #84]	@ (8012040 <HAL_I2C_MspInit+0x68>)
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d001      	beq.n	8011ff4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011ff0:	b009      	add	sp, #36	@ 0x24
 8011ff2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ff4:	2500      	movs	r5, #0
 8011ff6:	9501      	str	r5, [sp, #4]
 8011ff8:	4c12      	ldr	r4, [pc, #72]	@ (8012044 <HAL_I2C_MspInit+0x6c>)
 8011ffa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ffc:	f043 0302 	orr.w	r3, r3, #2
 8012000:	6323      	str	r3, [r4, #48]	@ 0x30
 8012002:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012004:	f003 0302 	and.w	r3, r3, #2
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801200c:	23c0      	movs	r3, #192	@ 0xc0
 801200e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012010:	2312      	movs	r3, #18
 8012012:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012014:	2301      	movs	r3, #1
 8012016:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012018:	2303      	movs	r3, #3
 801201a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801201c:	2304      	movs	r3, #4
 801201e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012020:	a903      	add	r1, sp, #12
 8012022:	4809      	ldr	r0, [pc, #36]	@ (8012048 <HAL_I2C_MspInit+0x70>)
 8012024:	f004 fae2 	bl	80165ec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012028:	9502      	str	r5, [sp, #8]
 801202a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801202c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012030:	6423      	str	r3, [r4, #64]	@ 0x40
 8012032:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012038:	9302      	str	r3, [sp, #8]
 801203a:	9b02      	ldr	r3, [sp, #8]
}
 801203c:	e7d8      	b.n	8011ff0 <HAL_I2C_MspInit+0x18>
 801203e:	bf00      	nop
 8012040:	40005400 	.word	0x40005400
 8012044:	40023800 	.word	0x40023800
 8012048:	40020400 	.word	0x40020400

0801204c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 801204c:	6802      	ldr	r2, [r0, #0]
 801204e:	4b0a      	ldr	r3, [pc, #40]	@ (8012078 <HAL_I2C_MspDeInit+0x2c>)
 8012050:	429a      	cmp	r2, r3
 8012052:	d000      	beq.n	8012056 <HAL_I2C_MspDeInit+0xa>
 8012054:	4770      	bx	lr
{
 8012056:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8012058:	4a08      	ldr	r2, [pc, #32]	@ (801207c <HAL_I2C_MspDeInit+0x30>)
 801205a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801205c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012060:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8012062:	4c07      	ldr	r4, [pc, #28]	@ (8012080 <HAL_I2C_MspDeInit+0x34>)
 8012064:	2140      	movs	r1, #64	@ 0x40
 8012066:	4620      	mov	r0, r4
 8012068:	f004 fba4 	bl	80167b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 801206c:	2180      	movs	r1, #128	@ 0x80
 801206e:	4620      	mov	r0, r4
 8012070:	f004 fba0 	bl	80167b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8012074:	bd10      	pop	{r4, pc}
 8012076:	bf00      	nop
 8012078:	40005400 	.word	0x40005400
 801207c:	40023800 	.word	0x40023800
 8012080:	40020400 	.word	0x40020400

08012084 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8012084:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8012086:	4807      	ldr	r0, [pc, #28]	@ (80120a4 <MX_IWDG_Init+0x20>)
 8012088:	4b07      	ldr	r3, [pc, #28]	@ (80120a8 <MX_IWDG_Init+0x24>)
 801208a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 801208c:	2303      	movs	r3, #3
 801208e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8012090:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8012094:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8012096:	f005 f83b 	bl	8017110 <HAL_IWDG_Init>
 801209a:	b900      	cbnz	r0, 801209e <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 801209c:	bd08      	pop	{r3, pc}
    Error_Handler();
 801209e:	f000 f8cf 	bl	8012240 <Error_Handler>
}
 80120a2:	e7fb      	b.n	801209c <MX_IWDG_Init+0x18>
 80120a4:	20000928 	.word	0x20000928
 80120a8:	40003000 	.word	0x40003000

080120ac <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 80120ac:	b084      	sub	sp, #16
 80120ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80120b2:	b004      	add	sp, #16
 80120b4:	4770      	bx	lr

080120b6 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80120b6:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80120b8:	fb01 f400 	mul.w	r4, r1, r0
 80120bc:	4620      	mov	r0, r4
 80120be:	f008 fd8b 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80120c2:	4605      	mov	r5, r0
 80120c4:	b118      	cbz	r0, 80120ce <mg_calloc+0x18>
 80120c6:	4622      	mov	r2, r4
 80120c8:	2100      	movs	r1, #0
 80120ca:	f01a fdd1 	bl	802cc70 <memset>
  return p;
}
 80120ce:	4628      	mov	r0, r5
 80120d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080120d4 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 80120d4:	b108      	cbz	r0, 80120da <reg_logging_fn+0x6>
		_send_log_mess = fn;
 80120d6:	4a01      	ldr	r2, [pc, #4]	@ (80120dc <reg_logging_fn+0x8>)
 80120d8:	6010      	str	r0, [r2, #0]
	}
}
 80120da:	4770      	bx	lr
 80120dc:	20000000 	.word	0x20000000

080120e0 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 80120e0:	4b01      	ldr	r3, [pc, #4]	@ (80120e8 <logger_set_level+0x8>)
 80120e2:	7018      	strb	r0, [r3, #0]
}
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop
 80120e8:	20000934 	.word	0x20000934

080120ec <logging>:

void logging(logging_level_t level, const char *format, ...){
 80120ec:	b40e      	push	{r1, r2, r3}
 80120ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120f0:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 80120f4:	4b44      	ldr	r3, [pc, #272]	@ (8012208 <logging+0x11c>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	4283      	cmp	r3, r0
 80120fa:	d905      	bls.n	8012108 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 80120fc:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8012100:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012104:	b003      	add	sp, #12
 8012106:	4770      	bx	lr
 8012108:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 801210a:	2101      	movs	r1, #1
 801210c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8012110:	f7ff ffd1 	bl	80120b6 <mg_calloc>
    if (!tmp_buf){
 8012114:	4605      	mov	r5, r0
 8012116:	2800      	cmp	r0, #0
 8012118:	d0f0      	beq.n	80120fc <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 801211a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801211e:	2100      	movs	r1, #0
 8012120:	a85b      	add	r0, sp, #364	@ 0x16c
 8012122:	f01a fda5 	bl	802cc70 <memset>
    mess.log_level = level;
 8012126:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 801212a:	f017 fdf1 	bl	8029d10 <mg_now>
 801212e:	f7fe fa45 	bl	80105bc <__aeabi_ul2d>
 8012132:	4606      	mov	r6, r0
 8012134:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8012136:	2200      	movs	r2, #0
 8012138:	4b34      	ldr	r3, [pc, #208]	@ (801220c <logging+0x120>)
 801213a:	f7fe fb9f 	bl	801087c <__aeabi_ddiv>
 801213e:	f7fe fe37 	bl	8010db0 <__aeabi_d2lz>
 8012142:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8012146:	a94f      	add	r1, sp, #316	@ 0x13c
 8012148:	a858      	add	r0, sp, #352	@ 0x160
 801214a:	f01a fe27 	bl	802cd9c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 801214e:	ab4f      	add	r3, sp, #316	@ 0x13c
 8012150:	4a2f      	ldr	r2, [pc, #188]	@ (8012210 <logging+0x124>)
 8012152:	2140      	movs	r1, #64	@ 0x40
 8012154:	a83f      	add	r0, sp, #252	@ 0xfc
 8012156:	f01b fc33 	bl	802d9c0 <strftime>
 801215a:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 801215c:	4630      	mov	r0, r6
 801215e:	4639      	mov	r1, r7
 8012160:	f7fe fd12 	bl	8010b88 <__aeabi_d2iz>
 8012164:	4a2b      	ldr	r2, [pc, #172]	@ (8012214 <logging+0x128>)
 8012166:	fb82 3200 	smull	r3, r2, r2, r0
 801216a:	17c3      	asrs	r3, r0, #31
 801216c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8012170:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012174:	fb02 0313 	mls	r3, r2, r3, r0
 8012178:	4a27      	ldr	r2, [pc, #156]	@ (8012218 <logging+0x12c>)
 801217a:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 801217e:	a83f      	add	r0, sp, #252	@ 0xfc
 8012180:	4420      	add	r0, r4
 8012182:	f01a f84b 	bl	802c21c <snprintf>
 8012186:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8012188:	1c63      	adds	r3, r4, #1
 801218a:	2220      	movs	r2, #32
 801218c:	a93f      	add	r1, sp, #252	@ 0xfc
 801218e:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8012190:	2200      	movs	r2, #0
 8012192:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8012194:	aba2      	add	r3, sp, #648	@ 0x288
 8012196:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8012198:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 801219c:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 801219e:	21fd      	movs	r1, #253	@ 0xfd
 80121a0:	4630      	mov	r0, r6
 80121a2:	f01a fb03 	bl	802c7ac <vsnprintf>
 80121a6:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 80121a8:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 80121ac:	9601      	str	r6, [sp, #4]
 80121ae:	4b1b      	ldr	r3, [pc, #108]	@ (801221c <logging+0x130>)
 80121b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	ab3f      	add	r3, sp, #252	@ 0xfc
 80121b8:	4a19      	ldr	r2, [pc, #100]	@ (8012220 <logging+0x134>)
 80121ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80121be:	4628      	mov	r0, r5
 80121c0:	f01a f82c 	bl	802c21c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 80121c4:	2cf5      	cmp	r4, #245	@ 0xf5
 80121c6:	d81b      	bhi.n	8012200 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 80121c8:	4628      	mov	r0, r5
 80121ca:	f7fe f869 	bl	80102a0 <strlen>
 80121ce:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 80121d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80121d6:	4629      	mov	r1, r5
 80121d8:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 80121dc:	f01a fd8f 	bl	802ccfe <strncpy>
    if (_send_log_mess) {
 80121e0:	4b10      	ldr	r3, [pc, #64]	@ (8012224 <logging+0x138>)
 80121e2:	681e      	ldr	r6, [r3, #0]
 80121e4:	b146      	cbz	r6, 80121f8 <logging+0x10c>
        _send_log_mess(mess);
 80121e6:	ac5b      	add	r4, sp, #364	@ 0x16c
 80121e8:	22f2      	movs	r2, #242	@ 0xf2
 80121ea:	a95f      	add	r1, sp, #380	@ 0x17c
 80121ec:	4668      	mov	r0, sp
 80121ee:	f01b ff7b 	bl	802e0e8 <memcpy>
 80121f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80121f6:	47b0      	blx	r6
    free(tmp_buf);
 80121f8:	4628      	mov	r0, r5
 80121fa:	f008 fd6f 	bl	801acdc <vPortFree>
 80121fe:	e77d      	b.n	80120fc <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8012200:	23f6      	movs	r3, #246	@ 0xf6
 8012202:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8012206:	e7e4      	b.n	80121d2 <logging+0xe6>
 8012208:	20000934 	.word	0x20000934
 801220c:	408f4000 	.word	0x408f4000
 8012210:	08036754 	.word	0x08036754
 8012214:	10624dd3 	.word	0x10624dd3
 8012218:	08036768 	.word	0x08036768
 801221c:	20000004 	.word	0x20000004
 8012220:	08036770 	.word	0x08036770
 8012224:	20000000 	.word	0x20000000

08012228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012228:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 801222a:	6802      	ldr	r2, [r0, #0]
 801222c:	4b03      	ldr	r3, [pc, #12]	@ (801223c <HAL_TIM_PeriodElapsedCallback+0x14>)
 801222e:	429a      	cmp	r2, r3
 8012230:	d000      	beq.n	8012234 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012232:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8012234:	f004 f936 	bl	80164a4 <HAL_IncTick>
}
 8012238:	e7fb      	b.n	8012232 <HAL_TIM_PeriodElapsedCallback+0xa>
 801223a:	bf00      	nop
 801223c:	40014000 	.word	0x40014000

08012240 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012240:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012242:	e7fe      	b.n	8012242 <Error_Handler+0x2>

08012244 <SystemClock_Config>:
{
 8012244:	b500      	push	{lr}
 8012246:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012248:	2230      	movs	r2, #48	@ 0x30
 801224a:	2100      	movs	r1, #0
 801224c:	a808      	add	r0, sp, #32
 801224e:	f01a fd0f 	bl	802cc70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012252:	2300      	movs	r3, #0
 8012254:	9303      	str	r3, [sp, #12]
 8012256:	9304      	str	r3, [sp, #16]
 8012258:	9305      	str	r3, [sp, #20]
 801225a:	9306      	str	r3, [sp, #24]
 801225c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801225e:	9301      	str	r3, [sp, #4]
 8012260:	4a20      	ldr	r2, [pc, #128]	@ (80122e4 <SystemClock_Config+0xa0>)
 8012262:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8012264:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012268:	6411      	str	r1, [r2, #64]	@ 0x40
 801226a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801226c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8012270:	9201      	str	r2, [sp, #4]
 8012272:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012274:	9302      	str	r3, [sp, #8]
 8012276:	4b1c      	ldr	r3, [pc, #112]	@ (80122e8 <SystemClock_Config+0xa4>)
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012286:	9302      	str	r3, [sp, #8]
 8012288:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801228a:	2309      	movs	r3, #9
 801228c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801228e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012292:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012294:	2301      	movs	r3, #1
 8012296:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012298:	2202      	movs	r2, #2
 801229a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801229c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80122a0:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80122a2:	2304      	movs	r3, #4
 80122a4:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80122a6:	2164      	movs	r1, #100	@ 0x64
 80122a8:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80122aa:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80122ac:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80122ae:	a808      	add	r0, sp, #32
 80122b0:	f004 ff60 	bl	8017174 <HAL_RCC_OscConfig>
 80122b4:	b988      	cbnz	r0, 80122da <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80122b6:	230f      	movs	r3, #15
 80122b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80122ba:	2302      	movs	r3, #2
 80122bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80122be:	2300      	movs	r3, #0
 80122c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80122c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80122c6:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80122c8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80122ca:	2103      	movs	r1, #3
 80122cc:	a803      	add	r0, sp, #12
 80122ce:	f005 f9bb 	bl	8017648 <HAL_RCC_ClockConfig>
 80122d2:	b920      	cbnz	r0, 80122de <SystemClock_Config+0x9a>
}
 80122d4:	b015      	add	sp, #84	@ 0x54
 80122d6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80122da:	f7ff ffb1 	bl	8012240 <Error_Handler>
    Error_Handler();
 80122de:	f7ff ffaf 	bl	8012240 <Error_Handler>
 80122e2:	bf00      	nop
 80122e4:	40023800 	.word	0x40023800
 80122e8:	40007000 	.word	0x40007000

080122ec <main>:
{
 80122ec:	b500      	push	{lr}
 80122ee:	b083      	sub	sp, #12
 80122f0:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80122f2:	4b11      	ldr	r3, [pc, #68]	@ (8012338 <main+0x4c>)
 80122f4:	4a11      	ldr	r2, [pc, #68]	@ (801233c <main+0x50>)
 80122f6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80122f8:	b662      	cpsie	i
	volatile int i = 1000000;
 80122fa:	4b11      	ldr	r3, [pc, #68]	@ (8012340 <main+0x54>)
 80122fc:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 80122fe:	e002      	b.n	8012306 <main+0x1a>
		i--;
 8012300:	9b01      	ldr	r3, [sp, #4]
 8012302:	3b01      	subs	r3, #1
 8012304:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8012306:	9b01      	ldr	r3, [sp, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	dcf9      	bgt.n	8012300 <main+0x14>
  HAL_Init();
 801230c:	f004 f8b0 	bl	8016470 <HAL_Init>
  SystemClock_Config();
 8012310:	f7ff ff98 	bl	8012244 <SystemClock_Config>
  MX_GPIO_Init();
 8012314:	f7ff fdb8 	bl	8011e88 <MX_GPIO_Init>
  MX_SPI2_Init();
 8012318:	f000 f836 	bl	8012388 <MX_SPI2_Init>
  MX_I2C1_Init();
 801231c:	f7ff fe3e 	bl	8011f9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8012320:	f000 f810 	bl	8012344 <MX_SPI1_Init>
  MX_IWDG_Init();
 8012324:	f7ff feae 	bl	8012084 <MX_IWDG_Init>
  osKernelInitialize();
 8012328:	f006 f9c2 	bl	80186b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 801232c:	f7ff fba4 	bl	8011a78 <MX_FREERTOS_Init>
  osKernelStart();
 8012330:	f006 f9d0 	bl	80186d4 <osKernelStart>
  while (1)
 8012334:	e7fe      	b.n	8012334 <main+0x48>
 8012336:	bf00      	nop
 8012338:	e000ed00 	.word	0xe000ed00
 801233c:	08010000 	.word	0x08010000
 8012340:	000f4240 	.word	0x000f4240

08012344 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012344:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012346:	480e      	ldr	r0, [pc, #56]	@ (8012380 <MX_SPI1_Init+0x3c>)
 8012348:	4b0e      	ldr	r3, [pc, #56]	@ (8012384 <MX_SPI1_Init+0x40>)
 801234a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801234c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012350:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012352:	2300      	movs	r3, #0
 8012354:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012356:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012358:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801235a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801235c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012360:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012362:	2208      	movs	r2, #8
 8012364:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012366:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012368:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801236a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801236c:	230a      	movs	r3, #10
 801236e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012370:	f005 fb48 	bl	8017a04 <HAL_SPI_Init>
 8012374:	b900      	cbnz	r0, 8012378 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012376:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012378:	f7ff ff62 	bl	8012240 <Error_Handler>
}
 801237c:	e7fb      	b.n	8012376 <MX_SPI1_Init+0x32>
 801237e:	bf00      	nop
 8012380:	20000990 	.word	0x20000990
 8012384:	40013000 	.word	0x40013000

08012388 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012388:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 801238a:	480d      	ldr	r0, [pc, #52]	@ (80123c0 <MX_SPI2_Init+0x38>)
 801238c:	4b0d      	ldr	r3, [pc, #52]	@ (80123c4 <MX_SPI2_Init+0x3c>)
 801238e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012390:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012394:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012396:	2300      	movs	r3, #0
 8012398:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801239a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801239c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801239e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80123a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123a4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80123a6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80123a8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80123aa:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80123ac:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80123ae:	230a      	movs	r3, #10
 80123b0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80123b2:	f005 fb27 	bl	8017a04 <HAL_SPI_Init>
 80123b6:	b900      	cbnz	r0, 80123ba <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80123b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80123ba:	f7ff ff41 	bl	8012240 <Error_Handler>
}
 80123be:	e7fb      	b.n	80123b8 <MX_SPI2_Init+0x30>
 80123c0:	20000938 	.word	0x20000938
 80123c4:	40003800 	.word	0x40003800

080123c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80123c8:	b500      	push	{lr}
 80123ca:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123cc:	2300      	movs	r3, #0
 80123ce:	9305      	str	r3, [sp, #20]
 80123d0:	9306      	str	r3, [sp, #24]
 80123d2:	9307      	str	r3, [sp, #28]
 80123d4:	9308      	str	r3, [sp, #32]
 80123d6:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 80123d8:	6803      	ldr	r3, [r0, #0]
 80123da:	4a28      	ldr	r2, [pc, #160]	@ (801247c <HAL_SPI_MspInit+0xb4>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d005      	beq.n	80123ec <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80123e0:	4a27      	ldr	r2, [pc, #156]	@ (8012480 <HAL_SPI_MspInit+0xb8>)
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d025      	beq.n	8012432 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80123e6:	b00b      	add	sp, #44	@ 0x2c
 80123e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80123ec:	2100      	movs	r1, #0
 80123ee:	9101      	str	r1, [sp, #4]
 80123f0:	4b24      	ldr	r3, [pc, #144]	@ (8012484 <HAL_SPI_MspInit+0xbc>)
 80123f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80123f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80123fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123fc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8012400:	9201      	str	r2, [sp, #4]
 8012402:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012404:	9102      	str	r1, [sp, #8]
 8012406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012408:	f042 0202 	orr.w	r2, r2, #2
 801240c:	631a      	str	r2, [r3, #48]	@ 0x30
 801240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012410:	f003 0302 	and.w	r3, r3, #2
 8012414:	9302      	str	r3, [sp, #8]
 8012416:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012418:	2338      	movs	r3, #56	@ 0x38
 801241a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801241c:	2302      	movs	r3, #2
 801241e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012420:	2303      	movs	r3, #3
 8012422:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012424:	2305      	movs	r3, #5
 8012426:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012428:	a905      	add	r1, sp, #20
 801242a:	4817      	ldr	r0, [pc, #92]	@ (8012488 <HAL_SPI_MspInit+0xc0>)
 801242c:	f004 f8de 	bl	80165ec <HAL_GPIO_Init>
 8012430:	e7d9      	b.n	80123e6 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012432:	2100      	movs	r1, #0
 8012434:	9103      	str	r1, [sp, #12]
 8012436:	4b13      	ldr	r3, [pc, #76]	@ (8012484 <HAL_SPI_MspInit+0xbc>)
 8012438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801243a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801243e:	641a      	str	r2, [r3, #64]	@ 0x40
 8012440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012442:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012446:	9203      	str	r2, [sp, #12]
 8012448:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801244a:	9104      	str	r1, [sp, #16]
 801244c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801244e:	f042 0202 	orr.w	r2, r2, #2
 8012452:	631a      	str	r2, [r3, #48]	@ 0x30
 8012454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	9304      	str	r3, [sp, #16]
 801245c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801245e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012462:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012464:	2302      	movs	r3, #2
 8012466:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012468:	2303      	movs	r3, #3
 801246a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801246c:	2305      	movs	r3, #5
 801246e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012470:	a905      	add	r1, sp, #20
 8012472:	4805      	ldr	r0, [pc, #20]	@ (8012488 <HAL_SPI_MspInit+0xc0>)
 8012474:	f004 f8ba 	bl	80165ec <HAL_GPIO_Init>
}
 8012478:	e7b5      	b.n	80123e6 <HAL_SPI_MspInit+0x1e>
 801247a:	bf00      	nop
 801247c:	40013000 	.word	0x40013000
 8012480:	40003800 	.word	0x40003800
 8012484:	40023800 	.word	0x40023800
 8012488:	40020400 	.word	0x40020400

0801248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801248c:	b500      	push	{lr}
 801248e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012490:	2200      	movs	r2, #0
 8012492:	9200      	str	r2, [sp, #0]
 8012494:	4b0d      	ldr	r3, [pc, #52]	@ (80124cc <HAL_MspInit+0x40>)
 8012496:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012498:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 801249c:	6459      	str	r1, [r3, #68]	@ 0x44
 801249e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80124a0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80124a4:	9100      	str	r1, [sp, #0]
 80124a6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80124a8:	9201      	str	r2, [sp, #4]
 80124aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80124ac:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80124b0:	6419      	str	r1, [r3, #64]	@ 0x40
 80124b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80124b8:	9301      	str	r3, [sp, #4]
 80124ba:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80124bc:	210f      	movs	r1, #15
 80124be:	f06f 0001 	mvn.w	r0, #1
 80124c2:	f004 f87b 	bl	80165bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80124c6:	b003      	add	sp, #12
 80124c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80124cc:	40023800 	.word	0x40023800

080124d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80124d0:	b530      	push	{r4, r5, lr}
 80124d2:	b089      	sub	sp, #36	@ 0x24
 80124d4:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80124d6:	2400      	movs	r4, #0
 80124d8:	9401      	str	r4, [sp, #4]
 80124da:	4b1d      	ldr	r3, [pc, #116]	@ (8012550 <HAL_InitTick+0x80>)
 80124dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80124e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80124e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80124ea:	9301      	str	r3, [sp, #4]
 80124ec:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80124ee:	a902      	add	r1, sp, #8
 80124f0:	a803      	add	r0, sp, #12
 80124f2:	f005 f97f 	bl	80177f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80124f6:	f005 f96d 	bl	80177d4 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80124fa:	4a16      	ldr	r2, [pc, #88]	@ (8012554 <HAL_InitTick+0x84>)
 80124fc:	fba2 2300 	umull	r2, r3, r2, r0
 8012500:	0c9b      	lsrs	r3, r3, #18
 8012502:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012504:	4814      	ldr	r0, [pc, #80]	@ (8012558 <HAL_InitTick+0x88>)
 8012506:	4a15      	ldr	r2, [pc, #84]	@ (801255c <HAL_InitTick+0x8c>)
 8012508:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 801250a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801250e:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012510:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 8012512:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012514:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012516:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012518:	f005 feea 	bl	80182f0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 801251c:	4604      	mov	r4, r0
 801251e:	b110      	cbz	r0, 8012526 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8012520:	4620      	mov	r0, r4
 8012522:	b009      	add	sp, #36	@ 0x24
 8012524:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 8012526:	480c      	ldr	r0, [pc, #48]	@ (8012558 <HAL_InitTick+0x88>)
 8012528:	f005 fd9c 	bl	8018064 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 801252c:	4604      	mov	r4, r0
 801252e:	2800      	cmp	r0, #0
 8012530:	d1f6      	bne.n	8012520 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8012532:	2018      	movs	r0, #24
 8012534:	f004 f852 	bl	80165dc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012538:	2d0f      	cmp	r5, #15
 801253a:	d901      	bls.n	8012540 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 801253c:	2401      	movs	r4, #1
 801253e:	e7ef      	b.n	8012520 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012540:	2200      	movs	r2, #0
 8012542:	4629      	mov	r1, r5
 8012544:	2018      	movs	r0, #24
 8012546:	f004 f839 	bl	80165bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801254a:	4b05      	ldr	r3, [pc, #20]	@ (8012560 <HAL_InitTick+0x90>)
 801254c:	601d      	str	r5, [r3, #0]
 801254e:	e7e7      	b.n	8012520 <HAL_InitTick+0x50>
 8012550:	40023800 	.word	0x40023800
 8012554:	431bde83 	.word	0x431bde83
 8012558:	200009e8 	.word	0x200009e8
 801255c:	40014000 	.word	0x40014000
 8012560:	20000108 	.word	0x20000108

08012564 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012564:	e7fe      	b.n	8012564 <NMI_Handler>

08012566 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012566:	e7fe      	b.n	8012566 <HardFault_Handler>

08012568 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012568:	e7fe      	b.n	8012568 <MemManage_Handler>

0801256a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801256a:	e7fe      	b.n	801256a <BusFault_Handler>

0801256c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801256c:	e7fe      	b.n	801256c <UsageFault_Handler>

0801256e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801256e:	4770      	bx	lr

08012570 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8012570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8012572:	4802      	ldr	r0, [pc, #8]	@ (801257c <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012574:	f005 fdb6 	bl	80180e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012578:	bd08      	pop	{r3, pc}
 801257a:	bf00      	nop
 801257c:	200009e8 	.word	0x200009e8

08012580 <_getpid>:
 8012580:	2001      	movs	r0, #1
 8012582:	4770      	bx	lr

08012584 <_kill>:
 8012584:	b508      	push	{r3, lr}
 8012586:	f01b fd77 	bl	802e078 <__errno>
 801258a:	2316      	movs	r3, #22
 801258c:	6003      	str	r3, [r0, #0]
 801258e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012592:	bd08      	pop	{r3, pc}

08012594 <_exit>:
 8012594:	b508      	push	{r3, lr}
 8012596:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801259a:	f7ff fff3 	bl	8012584 <_kill>
 801259e:	e7fe      	b.n	801259e <_exit+0xa>

080125a0 <_read>:
 80125a0:	b570      	push	{r4, r5, r6, lr}
 80125a2:	460c      	mov	r4, r1
 80125a4:	4616      	mov	r6, r2
 80125a6:	2500      	movs	r5, #0
 80125a8:	e006      	b.n	80125b8 <_read+0x18>
 80125aa:	f3af 8000 	nop.w
 80125ae:	4621      	mov	r1, r4
 80125b0:	f801 0b01 	strb.w	r0, [r1], #1
 80125b4:	3501      	adds	r5, #1
 80125b6:	460c      	mov	r4, r1
 80125b8:	42b5      	cmp	r5, r6
 80125ba:	dbf6      	blt.n	80125aa <_read+0xa>
 80125bc:	4630      	mov	r0, r6
 80125be:	bd70      	pop	{r4, r5, r6, pc}

080125c0 <_write>:
 80125c0:	b570      	push	{r4, r5, r6, lr}
 80125c2:	460c      	mov	r4, r1
 80125c4:	4616      	mov	r6, r2
 80125c6:	2500      	movs	r5, #0
 80125c8:	e004      	b.n	80125d4 <_write+0x14>
 80125ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80125ce:	f3af 8000 	nop.w
 80125d2:	3501      	adds	r5, #1
 80125d4:	42b5      	cmp	r5, r6
 80125d6:	dbf8      	blt.n	80125ca <_write+0xa>
 80125d8:	4630      	mov	r0, r6
 80125da:	bd70      	pop	{r4, r5, r6, pc}

080125dc <_close>:
 80125dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80125e0:	4770      	bx	lr

080125e2 <_fstat>:
 80125e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80125e6:	604b      	str	r3, [r1, #4]
 80125e8:	2000      	movs	r0, #0
 80125ea:	4770      	bx	lr

080125ec <_isatty>:
 80125ec:	2001      	movs	r0, #1
 80125ee:	4770      	bx	lr

080125f0 <_lseek>:
 80125f0:	2000      	movs	r0, #0
 80125f2:	4770      	bx	lr

080125f4 <_sbrk>:
 80125f4:	b510      	push	{r4, lr}
 80125f6:	4603      	mov	r3, r0
 80125f8:	4a0c      	ldr	r2, [pc, #48]	@ (801262c <_sbrk+0x38>)
 80125fa:	490d      	ldr	r1, [pc, #52]	@ (8012630 <_sbrk+0x3c>)
 80125fc:	480d      	ldr	r0, [pc, #52]	@ (8012634 <_sbrk+0x40>)
 80125fe:	6800      	ldr	r0, [r0, #0]
 8012600:	b140      	cbz	r0, 8012614 <_sbrk+0x20>
 8012602:	480c      	ldr	r0, [pc, #48]	@ (8012634 <_sbrk+0x40>)
 8012604:	6800      	ldr	r0, [r0, #0]
 8012606:	4403      	add	r3, r0
 8012608:	1a52      	subs	r2, r2, r1
 801260a:	4293      	cmp	r3, r2
 801260c:	d806      	bhi.n	801261c <_sbrk+0x28>
 801260e:	4a09      	ldr	r2, [pc, #36]	@ (8012634 <_sbrk+0x40>)
 8012610:	6013      	str	r3, [r2, #0]
 8012612:	bd10      	pop	{r4, pc}
 8012614:	4807      	ldr	r0, [pc, #28]	@ (8012634 <_sbrk+0x40>)
 8012616:	4c08      	ldr	r4, [pc, #32]	@ (8012638 <_sbrk+0x44>)
 8012618:	6004      	str	r4, [r0, #0]
 801261a:	e7f2      	b.n	8012602 <_sbrk+0xe>
 801261c:	f01b fd2c 	bl	802e078 <__errno>
 8012620:	230c      	movs	r3, #12
 8012622:	6003      	str	r3, [r0, #0]
 8012624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012628:	e7f3      	b.n	8012612 <_sbrk+0x1e>
 801262a:	bf00      	nop
 801262c:	20020000 	.word	0x20020000
 8012630:	00000800 	.word	0x00000800
 8012634:	20000a34 	.word	0x20000a34
 8012638:	2001a260 	.word	0x2001a260

0801263c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801263c:	4a03      	ldr	r2, [pc, #12]	@ (801264c <SystemInit+0x10>)
 801263e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012642:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012646:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801264a:	4770      	bx	lr
 801264c:	e000ed00 	.word	0xe000ed00

08012650 <Reset_Handler>:
 8012650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012688 <LoopFillZerobss+0xe>
 8012654:	f7ff fff2 	bl	801263c <SystemInit>
 8012658:	480c      	ldr	r0, [pc, #48]	@ (801268c <LoopFillZerobss+0x12>)
 801265a:	490d      	ldr	r1, [pc, #52]	@ (8012690 <LoopFillZerobss+0x16>)
 801265c:	4a0d      	ldr	r2, [pc, #52]	@ (8012694 <LoopFillZerobss+0x1a>)
 801265e:	2300      	movs	r3, #0
 8012660:	e002      	b.n	8012668 <LoopCopyDataInit>

08012662 <CopyDataInit>:
 8012662:	58d4      	ldr	r4, [r2, r3]
 8012664:	50c4      	str	r4, [r0, r3]
 8012666:	3304      	adds	r3, #4

08012668 <LoopCopyDataInit>:
 8012668:	18c4      	adds	r4, r0, r3
 801266a:	428c      	cmp	r4, r1
 801266c:	d3f9      	bcc.n	8012662 <CopyDataInit>
 801266e:	4a0a      	ldr	r2, [pc, #40]	@ (8012698 <LoopFillZerobss+0x1e>)
 8012670:	4c0a      	ldr	r4, [pc, #40]	@ (801269c <LoopFillZerobss+0x22>)
 8012672:	2300      	movs	r3, #0
 8012674:	e001      	b.n	801267a <LoopFillZerobss>

08012676 <FillZerobss>:
 8012676:	6013      	str	r3, [r2, #0]
 8012678:	3204      	adds	r2, #4

0801267a <LoopFillZerobss>:
 801267a:	42a2      	cmp	r2, r4
 801267c:	d3fb      	bcc.n	8012676 <FillZerobss>
 801267e:	f01b fd09 	bl	802e094 <__libc_init_array>
 8012682:	f7ff fe33 	bl	80122ec <main>
 8012686:	4770      	bx	lr
 8012688:	20020000 	.word	0x20020000
 801268c:	20000000 	.word	0x20000000
 8012690:	20000870 	.word	0x20000870
 8012694:	0803c814 	.word	0x0803c814
 8012698:	20000870 	.word	0x20000870
 801269c:	2001a260 	.word	0x2001a260

080126a0 <ADC_IRQHandler>:
 80126a0:	e7fe      	b.n	80126a0 <ADC_IRQHandler>

080126a2 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80126a2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80126a4:	880b      	ldrh	r3, [r1, #0]
 80126a6:	2b05      	cmp	r3, #5
 80126a8:	d001      	beq.n	80126ae <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126aa:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80126ac:	bd38      	pop	{r3, r4, r5, pc}
 80126ae:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80126b0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80126b2:	7881      	ldrb	r1, [r0, #2]
 80126b4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80126b8:	3101      	adds	r1, #1
 80126ba:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80126bc:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80126be:	7902      	ldrb	r2, [r0, #4]
 80126c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 80126c4:	1e53      	subs	r3, r2, #1
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80126cc:	4563      	cmp	r3, ip
 80126ce:	d820      	bhi.n	8012712 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 80126d0:	2300      	movs	r3, #0
 80126d2:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80126d4:	2301      	movs	r3, #1
 80126d6:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80126d8:	8823      	ldrh	r3, [r4, #0]
 80126da:	3301      	adds	r3, #1
 80126dc:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 80126de:	f012 0f07 	tst.w	r2, #7
 80126e2:	d010      	beq.n	8012706 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80126e4:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80126e8:	3301      	adds	r3, #1
 80126ea:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80126ec:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80126ee:	8823      	ldrh	r3, [r4, #0]
 80126f0:	3301      	adds	r3, #1
 80126f2:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80126f4:	2300      	movs	r3, #0
 80126f6:	3002      	adds	r0, #2
 80126f8:	f7ff fb72 	bl	8011de0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80126fc:	b930      	cbnz	r0, 801270c <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 80126fe:	8823      	ldrh	r3, [r4, #0]
 8012700:	442b      	add	r3, r5
 8012702:	8023      	strh	r3, [r4, #0]
 8012704:	e7d2      	b.n	80126ac <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012706:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 801270a:	e7ef      	b.n	80126ec <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 801270c:	f000 f9f0 	bl	8012af0 <prveMBError2Exception>
 8012710:	e7cc      	b.n	80126ac <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012712:	2003      	movs	r0, #3
 8012714:	e7ca      	b.n	80126ac <eMBFuncReadCoils+0xa>

08012716 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012716:	880b      	ldrh	r3, [r1, #0]
 8012718:	2b05      	cmp	r3, #5
 801271a:	d001      	beq.n	8012720 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801271c:	2003      	movs	r0, #3
 801271e:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012720:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012722:	7881      	ldrb	r1, [r0, #2]
 8012724:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012728:	3101      	adds	r1, #1
 801272a:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801272c:	7903      	ldrb	r3, [r0, #4]
 801272e:	b9f3      	cbnz	r3, 801276e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012730:	78c2      	ldrb	r2, [r0, #3]
 8012732:	1e53      	subs	r3, r2, #1
 8012734:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012736:	2bfd      	cmp	r3, #253	@ 0xfd
 8012738:	d91b      	bls.n	8012772 <eMBFuncWriteCoil+0x5c>
{
 801273a:	b500      	push	{lr}
 801273c:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012744:	2aff      	cmp	r2, #255	@ 0xff
 8012746:	d00b      	beq.n	8012760 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012748:	2300      	movs	r3, #0
 801274a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801274e:	2301      	movs	r3, #1
 8012750:	461a      	mov	r2, r3
 8012752:	a801      	add	r0, sp, #4
 8012754:	f7ff fb44 	bl	8011de0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012758:	b930      	cbnz	r0, 8012768 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 801275a:	b003      	add	sp, #12
 801275c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012760:	2301      	movs	r3, #1
 8012762:	f88d 3004 	strb.w	r3, [sp, #4]
 8012766:	e7f2      	b.n	801274e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012768:	f000 f9c2 	bl	8012af0 <prveMBError2Exception>
 801276c:	e7f5      	b.n	801275a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801276e:	2003      	movs	r0, #3
 8012770:	4770      	bx	lr
 8012772:	2003      	movs	r0, #3
}
 8012774:	4770      	bx	lr

08012776 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012776:	880b      	ldrh	r3, [r1, #0]
 8012778:	2b05      	cmp	r3, #5
 801277a:	d92d      	bls.n	80127d8 <eMBFuncWriteMultipleCoils+0x62>
{
 801277c:	b510      	push	{r4, lr}
 801277e:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012780:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012782:	7883      	ldrb	r3, [r0, #2]
 8012784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012788:	3301      	adds	r3, #1
 801278a:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 801278c:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801278e:	7903      	ldrb	r3, [r0, #4]
 8012790:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8012794:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8012798:	f013 0f07 	tst.w	r3, #7
 801279c:	d00e      	beq.n	80127bc <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 801279e:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80127a2:	f10c 0c01 	add.w	ip, ip, #1
 80127a6:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 80127aa:	1e53      	subs	r3, r2, #1
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80127b2:	d213      	bcs.n	80127dc <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80127b4:	45f4      	cmp	ip, lr
 80127b6:	d004      	beq.n	80127c2 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127b8:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80127ba:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80127bc:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80127c0:	e7f3      	b.n	80127aa <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80127c2:	2301      	movs	r3, #1
 80127c4:	3006      	adds	r0, #6
 80127c6:	f7ff fb0b 	bl	8011de0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80127ca:	b910      	cbnz	r0, 80127d2 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80127cc:	2305      	movs	r3, #5
 80127ce:	8023      	strh	r3, [r4, #0]
 80127d0:	e7f3      	b.n	80127ba <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 80127d2:	f000 f98d 	bl	8012af0 <prveMBError2Exception>
 80127d6:	e7f0      	b.n	80127ba <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127d8:	2003      	movs	r0, #3
}
 80127da:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127dc:	2003      	movs	r0, #3
 80127de:	e7ec      	b.n	80127ba <eMBFuncWriteMultipleCoils+0x44>

080127e0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80127e0:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80127e2:	880b      	ldrh	r3, [r1, #0]
 80127e4:	2b05      	cmp	r3, #5
 80127e6:	d001      	beq.n	80127ec <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127e8:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80127ea:	bd38      	pop	{r3, r4, r5, pc}
 80127ec:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80127ee:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80127f0:	7881      	ldrb	r1, [r0, #2]
 80127f2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80127f6:	3101      	adds	r1, #1
 80127f8:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80127fa:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80127fc:	7902      	ldrb	r2, [r0, #4]
 80127fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012802:	1e53      	subs	r3, r2, #1
 8012804:	b29b      	uxth	r3, r3
 8012806:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 801280a:	4563      	cmp	r3, ip
 801280c:	d81f      	bhi.n	801284e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 801280e:	2300      	movs	r3, #0
 8012810:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012812:	2302      	movs	r3, #2
 8012814:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012816:	8823      	ldrh	r3, [r4, #0]
 8012818:	3301      	adds	r3, #1
 801281a:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 801281c:	f012 0f07 	tst.w	r2, #7
 8012820:	d00f      	beq.n	8012842 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012822:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012826:	3301      	adds	r3, #1
 8012828:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801282a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801282c:	8823      	ldrh	r3, [r4, #0]
 801282e:	3301      	adds	r3, #1
 8012830:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012832:	3002      	adds	r0, #2
 8012834:	f7ff faae 	bl	8011d94 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012838:	b930      	cbnz	r0, 8012848 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 801283a:	8823      	ldrh	r3, [r4, #0]
 801283c:	442b      	add	r3, r5
 801283e:	8023      	strh	r3, [r4, #0]
 8012840:	e7d3      	b.n	80127ea <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012842:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012846:	e7f0      	b.n	801282a <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012848:	f000 f952 	bl	8012af0 <prveMBError2Exception>
 801284c:	e7cd      	b.n	80127ea <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801284e:	2003      	movs	r0, #3
 8012850:	e7cb      	b.n	80127ea <eMBFuncReadDiscreteInputs+0xa>

08012852 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012852:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012854:	880b      	ldrh	r3, [r1, #0]
 8012856:	2b05      	cmp	r3, #5
 8012858:	d001      	beq.n	801285e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801285a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801285c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801285e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012860:	7881      	ldrb	r1, [r0, #2]
 8012862:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012866:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012868:	2301      	movs	r3, #1
 801286a:	461a      	mov	r2, r3
 801286c:	b289      	uxth	r1, r1
 801286e:	3003      	adds	r0, #3
 8012870:	f7ff fb07 	bl	8011e82 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012874:	2800      	cmp	r0, #0
 8012876:	d0f1      	beq.n	801285c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012878:	f000 f93a 	bl	8012af0 <prveMBError2Exception>
 801287c:	e7ee      	b.n	801285c <eMBFuncWriteHoldingRegister+0xa>

0801287e <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801287e:	880b      	ldrh	r3, [r1, #0]
 8012880:	2b05      	cmp	r3, #5
 8012882:	d922      	bls.n	80128ca <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012884:	b510      	push	{r4, lr}
 8012886:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012888:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801288a:	7883      	ldrb	r3, [r0, #2]
 801288c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012890:	3301      	adds	r3, #1
 8012892:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8012894:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8012896:	7902      	ldrb	r2, [r0, #4]
 8012898:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 801289c:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 80128a0:	1e53      	subs	r3, r2, #1
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	2b77      	cmp	r3, #119	@ 0x77
 80128a6:	d812      	bhi.n	80128ce <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80128a8:	0053      	lsls	r3, r2, #1
 80128aa:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80128ac:	4563      	cmp	r3, ip
 80128ae:	d001      	beq.n	80128b4 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128b0:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80128b2:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80128b4:	2301      	movs	r3, #1
 80128b6:	3006      	adds	r0, #6
 80128b8:	f7ff fae3 	bl	8011e82 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80128bc:	b910      	cbnz	r0, 80128c4 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80128be:	2305      	movs	r3, #5
 80128c0:	8023      	strh	r3, [r4, #0]
 80128c2:	e7f6      	b.n	80128b2 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 80128c4:	f000 f914 	bl	8012af0 <prveMBError2Exception>
 80128c8:	e7f3      	b.n	80128b2 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128ca:	2003      	movs	r0, #3
}
 80128cc:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128ce:	2003      	movs	r0, #3
 80128d0:	e7ef      	b.n	80128b2 <eMBFuncWriteMultipleHoldingRegister+0x34>

080128d2 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80128d2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80128d4:	880b      	ldrh	r3, [r1, #0]
 80128d6:	2b05      	cmp	r3, #5
 80128d8:	d001      	beq.n	80128de <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128da:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80128dc:	bd38      	pop	{r3, r4, r5, pc}
 80128de:	4602      	mov	r2, r0
 80128e0:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80128e2:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80128e4:	7881      	ldrb	r1, [r0, #2]
 80128e6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80128ea:	3101      	adds	r1, #1
 80128ec:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80128ee:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80128f0:	1e6b      	subs	r3, r5, #1
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	2b7c      	cmp	r3, #124	@ 0x7c
 80128f6:	d901      	bls.n	80128fc <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80128f8:	2003      	movs	r0, #3
 80128fa:	e7ef      	b.n	80128dc <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 80128fc:	2300      	movs	r3, #0
 80128fe:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012900:	f04f 0c03 	mov.w	ip, #3
 8012904:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012908:	f8b4 c000 	ldrh.w	ip, [r4]
 801290c:	f10c 0c01 	add.w	ip, ip, #1
 8012910:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012914:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012918:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 801291c:	8822      	ldrh	r2, [r4, #0]
 801291e:	3201      	adds	r2, #1
 8012920:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012922:	462a      	mov	r2, r5
 8012924:	f7ff faad 	bl	8011e82 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012928:	b920      	cbnz	r0, 8012934 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 801292a:	8823      	ldrh	r3, [r4, #0]
 801292c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012930:	8023      	strh	r3, [r4, #0]
 8012932:	e7d3      	b.n	80128dc <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012934:	f000 f8dc 	bl	8012af0 <prveMBError2Exception>
 8012938:	e7d0      	b.n	80128dc <eMBFuncReadHoldingRegister+0xa>

0801293a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801293a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801293c:	880b      	ldrh	r3, [r1, #0]
 801293e:	2b09      	cmp	r3, #9
 8012940:	d943      	bls.n	80129ca <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012942:	4604      	mov	r4, r0
 8012944:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012946:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012948:	7881      	ldrb	r1, [r0, #2]
 801294a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 801294e:	3101      	adds	r1, #1
 8012950:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012952:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012954:	7907      	ldrb	r7, [r0, #4]
 8012956:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 801295a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 801295c:	7981      	ldrb	r1, [r0, #6]
 801295e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012962:	3101      	adds	r1, #1
 8012964:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012966:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012968:	7a02      	ldrb	r2, [r0, #8]
 801296a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801296e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8012970:	1e7b      	subs	r3, r7, #1
 8012972:	b29b      	uxth	r3, r3
 8012974:	2b7c      	cmp	r3, #124	@ 0x7c
 8012976:	d82a      	bhi.n	80129ce <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012978:	b35a      	cbz	r2, 80129d2 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 801297a:	2a79      	cmp	r2, #121	@ 0x79
 801297c:	d82b      	bhi.n	80129d6 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 801297e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8012982:	d001      	beq.n	8012988 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012984:	2003      	movs	r0, #3
 8012986:	e021      	b.n	80129cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012988:	2301      	movs	r3, #1
 801298a:	f104 000a 	add.w	r0, r4, #10
 801298e:	f7ff fa78 	bl	8011e82 <eMBRegHoldingCB>
 8012992:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 8012994:	b9b0      	cbnz	r0, 80129c4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 8012996:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8012998:	4620      	mov	r0, r4
 801299a:	2217      	movs	r2, #23
 801299c:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 80129a0:	882a      	ldrh	r2, [r5, #0]
 80129a2:	3201      	adds	r2, #1
 80129a4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80129a6:	007a      	lsls	r2, r7, #1
 80129a8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 80129aa:	882a      	ldrh	r2, [r5, #0]
 80129ac:	3201      	adds	r2, #1
 80129ae:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80129b0:	463a      	mov	r2, r7
 80129b2:	4631      	mov	r1, r6
 80129b4:	f7ff fa65 	bl	8011e82 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 80129b8:	b920      	cbnz	r0, 80129c4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 80129ba:	882b      	ldrh	r3, [r5, #0]
 80129bc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80129c0:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 80129c2:	e003      	b.n	80129cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 80129c4:	f000 f894 	bl	8012af0 <prveMBError2Exception>
 80129c8:	e000      	b.n	80129cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 80129ca:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80129cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129ce:	2003      	movs	r0, #3
 80129d0:	e7fc      	b.n	80129cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 80129d2:	2003      	movs	r0, #3
 80129d4:	e7fa      	b.n	80129cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 80129d6:	2003      	movs	r0, #3
 80129d8:	e7f8      	b.n	80129cc <eMBFuncReadWriteMultipleHoldingRegister+0x92>

080129da <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80129da:	880a      	ldrh	r2, [r1, #0]
 80129dc:	2a05      	cmp	r2, #5
 80129de:	d001      	beq.n	80129e4 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80129e0:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80129e2:	4770      	bx	lr
{
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	4603      	mov	r3, r0
 80129e8:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80129ea:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80129ec:	7881      	ldrb	r1, [r0, #2]
 80129ee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 80129f2:	3101      	adds	r1, #1
 80129f4:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80129f6:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80129f8:	7905      	ldrb	r5, [r0, #4]
 80129fa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80129fe:	1e6a      	subs	r2, r5, #1
 8012a00:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012a02:	2a7b      	cmp	r2, #123	@ 0x7b
 8012a04:	d901      	bls.n	8012a0a <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012a06:	2003      	movs	r0, #3
}
 8012a08:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8012a0e:	2204      	movs	r2, #4
 8012a10:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012a14:	8822      	ldrh	r2, [r4, #0]
 8012a16:	3201      	adds	r2, #1
 8012a18:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8012a1a:	006a      	lsls	r2, r5, #1
 8012a1c:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 8012a1e:	8823      	ldrh	r3, [r4, #0]
 8012a20:	3301      	adds	r3, #1
 8012a22:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012a24:	462a      	mov	r2, r5
 8012a26:	f7ff fa2a 	bl	8011e7e <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8012a2a:	b920      	cbnz	r0, 8012a36 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 8012a2c:	8823      	ldrh	r3, [r4, #0]
 8012a2e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012a32:	8023      	strh	r3, [r4, #0]
 8012a34:	e7e8      	b.n	8012a08 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012a36:	f000 f85b 	bl	8012af0 <prveMBError2Exception>
 8012a3a:	e7e5      	b.n	8012a08 <eMBFuncReadInputRegister+0x2e>

08012a3c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8012a3c:	b538      	push	{r3, r4, r5, lr}
 8012a3e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012a40:	4b05      	ldr	r3, [pc, #20]	@ (8012a58 <eMBFuncReportSlaveID+0x1c>)
 8012a42:	881c      	ldrh	r4, [r3, #0]
 8012a44:	4622      	mov	r2, r4
 8012a46:	4905      	ldr	r1, [pc, #20]	@ (8012a5c <eMBFuncReportSlaveID+0x20>)
 8012a48:	3001      	adds	r0, #1
 8012a4a:	f01b fb4d 	bl	802e0e8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8012a4e:	3401      	adds	r4, #1
 8012a50:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012a52:	2000      	movs	r0, #0
 8012a54:	bd38      	pop	{r3, r4, r5, pc}
 8012a56:	bf00      	nop
 8012a58:	20000a38 	.word	0x20000a38
 8012a5c:	20000a3c 	.word	0x20000a3c

08012a60 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8012a60:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8012a62:	2a08      	cmp	r2, #8
 8012a64:	d823      	bhi.n	8012aae <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012a66:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012a6a:	f001 0407 	and.w	r4, r1, #7
 8012a6e:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012a72:	f04f 0c01 	mov.w	ip, #1
 8012a76:	fa0c f202 	lsl.w	r2, ip, r2
 8012a7a:	b292      	uxth	r2, r2
 8012a7c:	3a01      	subs	r2, #1
 8012a7e:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8012a80:	f001 0107 	and.w	r1, r1, #7
 8012a84:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012a88:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012a8c:	eb0e 020c 	add.w	r2, lr, ip
 8012a90:	f810 c002 	ldrb.w	ip, [r0, r2]
 8012a94:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8012a98:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8012a9a:	ea23 0301 	bic.w	r3, r3, r1
 8012a9e:	b21b      	sxth	r3, r3
 8012aa0:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8012aa2:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8012aa6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012aaa:	5483      	strb	r3, [r0, r2]
}
 8012aac:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 8012aae:	4b03      	ldr	r3, [pc, #12]	@ (8012abc <xMBUtilSetBits+0x5c>)
 8012ab0:	4a03      	ldr	r2, [pc, #12]	@ (8012ac0 <xMBUtilSetBits+0x60>)
 8012ab2:	2137      	movs	r1, #55	@ 0x37
 8012ab4:	4803      	ldr	r0, [pc, #12]	@ (8012ac4 <xMBUtilSetBits+0x64>)
 8012ab6:	f017 fb89 	bl	802a1cc <__assert_func>
 8012aba:	bf00      	nop
 8012abc:	080367b4 	.word	0x080367b4
 8012ac0:	0803680c 	.word	0x0803680c
 8012ac4:	080367c4 	.word	0x080367c4

08012ac8 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012ac8:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8012acc:	2301      	movs	r3, #1
 8012ace:	4093      	lsls	r3, r2
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012ad4:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012ad8:	4460      	add	r0, ip
 8012ada:	7840      	ldrb	r0, [r0, #1]
 8012adc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8012ae0:	f001 0107 	and.w	r1, r1, #7
 8012ae4:	410a      	asrs	r2, r1
 8012ae6:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8012ae8:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 8012aec:	b2c0      	uxtb	r0, r0
 8012aee:	4770      	bx	lr

08012af0 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012af0:	2801      	cmp	r0, #1
 8012af2:	d005      	beq.n	8012b00 <prveMBError2Exception+0x10>
 8012af4:	2807      	cmp	r0, #7
 8012af6:	d005      	beq.n	8012b04 <prveMBError2Exception+0x14>
 8012af8:	b108      	cbz	r0, 8012afe <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012afa:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8012afc:	4770      	bx	lr
 8012afe:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8012b00:	2002      	movs	r0, #2
 8012b02:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012b04:	2006      	movs	r0, #6
 8012b06:	4770      	bx	lr

08012b08 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012b08:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8012b0a:	f000 f9ce 	bl	8012eaa <eMBTCPDoInit>
 8012b0e:	4604      	mov	r4, r0
 8012b10:	b120      	cbz	r0, 8012b1c <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 8012b12:	4b11      	ldr	r3, [pc, #68]	@ (8012b58 <eMBTCPInit+0x50>)
 8012b14:	2201      	movs	r2, #1
 8012b16:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012b18:	4620      	mov	r0, r4
 8012b1a:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8012b1c:	f000 f8ca 	bl	8012cb4 <xMBPortEventInit>
 8012b20:	b1c0      	cbz	r0, 8012b54 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 8012b22:	4b0e      	ldr	r3, [pc, #56]	@ (8012b5c <eMBTCPInit+0x54>)
 8012b24:	4a0e      	ldr	r2, [pc, #56]	@ (8012b60 <eMBTCPInit+0x58>)
 8012b26:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012b28:	4b0e      	ldr	r3, [pc, #56]	@ (8012b64 <eMBTCPInit+0x5c>)
 8012b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8012b68 <eMBTCPInit+0x60>)
 8012b2c:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8012b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8012b6c <eMBTCPInit+0x64>)
 8012b30:	4a0f      	ldr	r2, [pc, #60]	@ (8012b70 <eMBTCPInit+0x68>)
 8012b32:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012b34:	4b0f      	ldr	r3, [pc, #60]	@ (8012b74 <eMBTCPInit+0x6c>)
 8012b36:	4a10      	ldr	r2, [pc, #64]	@ (8012b78 <eMBTCPInit+0x70>)
 8012b38:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8012b3a:	4b10      	ldr	r3, [pc, #64]	@ (8012b7c <eMBTCPInit+0x74>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8012b40:	4b0f      	ldr	r3, [pc, #60]	@ (8012b80 <eMBTCPInit+0x78>)
 8012b42:	22ff      	movs	r2, #255	@ 0xff
 8012b44:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012b46:	4b0f      	ldr	r3, [pc, #60]	@ (8012b84 <eMBTCPInit+0x7c>)
 8012b48:	2202      	movs	r2, #2
 8012b4a:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8012b4c:	4b02      	ldr	r3, [pc, #8]	@ (8012b58 <eMBTCPInit+0x50>)
 8012b4e:	2201      	movs	r2, #1
 8012b50:	701a      	strb	r2, [r3, #0]
 8012b52:	e7e1      	b.n	8012b18 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012b54:	2403      	movs	r4, #3
 8012b56:	e7df      	b.n	8012b18 <eMBTCPInit+0x10>
 8012b58:	2000009c 	.word	0x2000009c
 8012b5c:	20000a74 	.word	0x20000a74
 8012b60:	08012ebb 	.word	0x08012ebb
 8012b64:	20000a70 	.word	0x20000a70
 8012b68:	08012ebd 	.word	0x08012ebd
 8012b6c:	20000a6c 	.word	0x20000a6c
 8012b70:	08012ec5 	.word	0x08012ec5
 8012b74:	20000a78 	.word	0x20000a78
 8012b78:	08012f05 	.word	0x08012f05
 8012b7c:	20000a68 	.word	0x20000a68
 8012b80:	20000a7d 	.word	0x20000a7d
 8012b84:	20000a7c 	.word	0x20000a7c

08012b88 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012b88:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8012b8a:	4b06      	ldr	r3, [pc, #24]	@ (8012ba4 <eMBEnable+0x1c>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d001      	beq.n	8012b96 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8012b92:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8012b94:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 8012b96:	4b04      	ldr	r3, [pc, #16]	@ (8012ba8 <eMBEnable+0x20>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	4b01      	ldr	r3, [pc, #4]	@ (8012ba4 <eMBEnable+0x1c>)
 8012ba0:	7018      	strb	r0, [r3, #0]
 8012ba2:	e7f7      	b.n	8012b94 <eMBEnable+0xc>
 8012ba4:	2000009c 	.word	0x2000009c
 8012ba8:	20000a74 	.word	0x20000a74

08012bac <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8012bac:	b530      	push	{r4, r5, lr}
 8012bae:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8012bb0:	4b36      	ldr	r3, [pc, #216]	@ (8012c8c <eMBPoll+0xe0>)
 8012bb2:	781c      	ldrb	r4, [r3, #0]
 8012bb4:	2c00      	cmp	r4, #0
 8012bb6:	d163      	bne.n	8012c80 <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8012bb8:	f10d 0007 	add.w	r0, sp, #7
 8012bbc:	f000 f88e 	bl	8012cdc <xMBPortEventGet>
 8012bc0:	2801      	cmp	r0, #1
 8012bc2:	d002      	beq.n	8012bca <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	b003      	add	sp, #12
 8012bc8:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 8012bca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	d014      	beq.n	8012bfc <eMBPoll+0x50>
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	d1f6      	bne.n	8012bc4 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8012bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8012c90 <eMBPoll+0xe4>)
 8012bd8:	6818      	ldr	r0, [r3, #0]
 8012bda:	7801      	ldrb	r1, [r0, #0]
 8012bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8012c94 <eMBPoll+0xe8>)
 8012bde:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8012be0:	4b2d      	ldr	r3, [pc, #180]	@ (8012c98 <eMBPoll+0xec>)
 8012be2:	2201      	movs	r2, #1
 8012be4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012be6:	2300      	movs	r3, #0
 8012be8:	2b0f      	cmp	r3, #15
 8012bea:	dc25      	bgt.n	8012c38 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8012bec:	4a2b      	ldr	r2, [pc, #172]	@ (8012c9c <eMBPoll+0xf0>)
 8012bee:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8012bf2:	b30a      	cbz	r2, 8012c38 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8012bf4:	4291      	cmp	r1, r2
 8012bf6:	d017      	beq.n	8012c28 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	e7f5      	b.n	8012be8 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8012bfc:	4b28      	ldr	r3, [pc, #160]	@ (8012ca0 <eMBPoll+0xf4>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a28      	ldr	r2, [pc, #160]	@ (8012ca4 <eMBPoll+0xf8>)
 8012c02:	4923      	ldr	r1, [pc, #140]	@ (8012c90 <eMBPoll+0xe4>)
 8012c04:	4828      	ldr	r0, [pc, #160]	@ (8012ca8 <eMBPoll+0xfc>)
 8012c06:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012c08:	4605      	mov	r5, r0
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d1da      	bne.n	8012bc4 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012c0e:	4b26      	ldr	r3, [pc, #152]	@ (8012ca8 <eMBPoll+0xfc>)
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	4a26      	ldr	r2, [pc, #152]	@ (8012cac <eMBPoll+0x100>)
 8012c14:	7812      	ldrb	r2, [r2, #0]
 8012c16:	4293      	cmp	r3, r2
 8012c18:	d001      	beq.n	8012c1e <eMBPoll+0x72>
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d132      	bne.n	8012c84 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012c1e:	2002      	movs	r0, #2
 8012c20:	f000 f850 	bl	8012cc4 <xMBPortEventPost>
    return MB_ENOERR;
 8012c24:	462c      	mov	r4, r5
 8012c26:	e7cd      	b.n	8012bc4 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012c28:	4a1c      	ldr	r2, [pc, #112]	@ (8012c9c <eMBPoll+0xf0>)
 8012c2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	491c      	ldr	r1, [pc, #112]	@ (8012ca4 <eMBPoll+0xf8>)
 8012c32:	4798      	blx	r3
 8012c34:	4b18      	ldr	r3, [pc, #96]	@ (8012c98 <eMBPoll+0xec>)
 8012c36:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012c38:	4b1b      	ldr	r3, [pc, #108]	@ (8012ca8 <eMBPoll+0xfc>)
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	b323      	cbz	r3, 8012c88 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012c3e:	4b16      	ldr	r3, [pc, #88]	@ (8012c98 <eMBPoll+0xec>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	b19b      	cbz	r3, 8012c6c <eMBPoll+0xc0>
                    usLength = 0;
 8012c44:	4a17      	ldr	r2, [pc, #92]	@ (8012ca4 <eMBPoll+0xf8>)
 8012c46:	2100      	movs	r1, #0
 8012c48:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012c4a:	4912      	ldr	r1, [pc, #72]	@ (8012c94 <eMBPoll+0xe8>)
 8012c4c:	7809      	ldrb	r1, [r1, #0]
 8012c4e:	4810      	ldr	r0, [pc, #64]	@ (8012c90 <eMBPoll+0xe4>)
 8012c50:	6805      	ldr	r5, [r0, #0]
 8012c52:	f04f 0c01 	mov.w	ip, #1
 8012c56:	f8a2 c000 	strh.w	ip, [r2]
 8012c5a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012c5e:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012c60:	6800      	ldr	r0, [r0, #0]
 8012c62:	8811      	ldrh	r1, [r2, #0]
 8012c64:	eb01 050c 	add.w	r5, r1, ip
 8012c68:	8015      	strh	r5, [r2, #0]
 8012c6a:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012c6c:	4b10      	ldr	r3, [pc, #64]	@ (8012cb0 <eMBPoll+0x104>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4a0c      	ldr	r2, [pc, #48]	@ (8012ca4 <eMBPoll+0xf8>)
 8012c72:	8812      	ldrh	r2, [r2, #0]
 8012c74:	4906      	ldr	r1, [pc, #24]	@ (8012c90 <eMBPoll+0xe4>)
 8012c76:	6809      	ldr	r1, [r1, #0]
 8012c78:	480c      	ldr	r0, [pc, #48]	@ (8012cac <eMBPoll+0x100>)
 8012c7a:	7800      	ldrb	r0, [r0, #0]
 8012c7c:	4798      	blx	r3
 8012c7e:	e7a1      	b.n	8012bc4 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012c80:	2406      	movs	r4, #6
 8012c82:	e79f      	b.n	8012bc4 <eMBPoll+0x18>
    return MB_ENOERR;
 8012c84:	4604      	mov	r4, r0
 8012c86:	e79d      	b.n	8012bc4 <eMBPoll+0x18>
 8012c88:	461c      	mov	r4, r3
 8012c8a:	e79b      	b.n	8012bc4 <eMBPoll+0x18>
 8012c8c:	2000009c 	.word	0x2000009c
 8012c90:	20000a60 	.word	0x20000a60
 8012c94:	20000a5d 	.word	0x20000a5d
 8012c98:	20000a5c 	.word	0x20000a5c
 8012c9c:	2000001c 	.word	0x2000001c
 8012ca0:	20000a6c 	.word	0x20000a6c
 8012ca4:	20000a5e 	.word	0x20000a5e
 8012ca8:	20000a64 	.word	0x20000a64
 8012cac:	20000a7d 	.word	0x20000a7d
 8012cb0:	20000a78 	.word	0x20000a78

08012cb4 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012cb4:	4b02      	ldr	r3, [pc, #8]	@ (8012cc0 <xMBPortEventInit+0xc>)
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012cba:	2001      	movs	r0, #1
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	20000a7e 	.word	0x20000a7e

08012cc4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	4a03      	ldr	r2, [pc, #12]	@ (8012cd4 <xMBPortEventPost+0x10>)
 8012cc8:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012cca:	4a03      	ldr	r2, [pc, #12]	@ (8012cd8 <xMBPortEventPost+0x14>)
 8012ccc:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	20000a7e 	.word	0x20000a7e
 8012cd8:	20000a7f 	.word	0x20000a7f

08012cdc <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012cdc:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012cde:	4a05      	ldr	r2, [pc, #20]	@ (8012cf4 <xMBPortEventGet+0x18>)
 8012ce0:	7810      	ldrb	r0, [r2, #0]
 8012ce2:	b130      	cbz	r0, 8012cf2 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012ce4:	4a04      	ldr	r2, [pc, #16]	@ (8012cf8 <xMBPortEventGet+0x1c>)
 8012ce6:	7812      	ldrb	r2, [r2, #0]
 8012ce8:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012cea:	4b02      	ldr	r3, [pc, #8]	@ (8012cf4 <xMBPortEventGet+0x18>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012cf0:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012cf2:	4770      	bx	lr
 8012cf4:	20000a7e 	.word	0x20000a7e
 8012cf8:	20000a7f 	.word	0x20000a7f

08012cfc <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012cfc:	2907      	cmp	r1, #7
 8012cfe:	d000      	beq.n	8012d02 <handler_mb_tcp+0x6>
 8012d00:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012d02:	b538      	push	{r3, r4, r5, lr}
 8012d04:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 8012d06:	4b1e      	ldr	r3, [pc, #120]	@ (8012d80 <handler_mb_tcp+0x84>)
 8012d08:	f100 021c 	add.w	r2, r0, #28
 8012d0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012d10:	f013 fb4c 	bl	80263ac <mg_check_ip_acl>
 8012d14:	2801      	cmp	r0, #1
 8012d16:	d006      	beq.n	8012d26 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8012d18:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012d1c:	f043 0320 	orr.w	r3, r3, #32
 8012d20:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 8012d26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012d28:	b293      	uxth	r3, r2
 8012d2a:	4916      	ldr	r1, [pc, #88]	@ (8012d84 <handler_mb_tcp+0x88>)
 8012d2c:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012d2e:	b933      	cbnz	r3, 8012d3e <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8012d30:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012d34:	f043 0320 	orr.w	r3, r3, #32
 8012d38:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012d3c:	e7f2      	b.n	8012d24 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012d3e:	461a      	mov	r2, r3
 8012d40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012d42:	4811      	ldr	r0, [pc, #68]	@ (8012d88 <handler_mb_tcp+0x8c>)
 8012d44:	f01b f9d0 	bl	802e0e8 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012d48:	2001      	movs	r0, #1
 8012d4a:	f7ff ffbb 	bl	8012cc4 <xMBPortEventPost>
			eMBPoll ();
 8012d4e:	f7ff ff2d 	bl	8012bac <eMBPoll>
			eMBPoll ();
 8012d52:	f7ff ff2b 	bl	8012bac <eMBPoll>
			if(bFrameSent){
 8012d56:	4b0d      	ldr	r3, [pc, #52]	@ (8012d8c <handler_mb_tcp+0x90>)
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	b933      	cbnz	r3, 8012d6a <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 8012d5c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012d60:	f043 0320 	orr.w	r3, r3, #32
 8012d64:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012d68:	e7dc      	b.n	8012d24 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 8012d6a:	2500      	movs	r5, #0
 8012d6c:	4b07      	ldr	r3, [pc, #28]	@ (8012d8c <handler_mb_tcp+0x90>)
 8012d6e:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012d70:	4b07      	ldr	r3, [pc, #28]	@ (8012d90 <handler_mb_tcp+0x94>)
 8012d72:	881a      	ldrh	r2, [r3, #0]
 8012d74:	4907      	ldr	r1, [pc, #28]	@ (8012d94 <handler_mb_tcp+0x98>)
 8012d76:	4620      	mov	r0, r4
 8012d78:	f014 fc32 	bl	80275e0 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012d7c:	6425      	str	r5, [r4, #64]	@ 0x40
 8012d7e:	e7d1      	b.n	8012d24 <handler_mb_tcp+0x28>
 8012d80:	20000a80 	.word	0x20000a80
 8012d84:	2000128c 	.word	0x2000128c
 8012d88:	20001290 	.word	0x20001290
 8012d8c:	20000a88 	.word	0x20000a88
 8012d90:	20000a8a 	.word	0x20000a8a
 8012d94:	20000a8c 	.word	0x20000a8c

08012d98 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8012d98:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012d9a:	fb01 f400 	mul.w	r4, r1, r0
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f007 ff1a 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012da4:	4605      	mov	r5, r0
 8012da6:	b118      	cbz	r0, 8012db0 <my_calloc+0x18>
 8012da8:	4622      	mov	r2, r4
 8012daa:	2100      	movs	r1, #0
 8012dac:	f019 ff60 	bl	802cc70 <memset>
  return p;
}
 8012db0:	4628      	mov	r0, r5
 8012db2:	bd38      	pop	{r3, r4, r5, pc}

08012db4 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8012db4:	b530      	push	{r4, r5, lr}
 8012db6:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012db8:	2300      	movs	r3, #0
 8012dba:	4a24      	ldr	r2, [pc, #144]	@ (8012e4c <init_mb_tcp+0x98>)
 8012dbc:	4924      	ldr	r1, [pc, #144]	@ (8012e50 <init_mb_tcp+0x9c>)
 8012dbe:	f014 fb23 	bl	8027408 <mg_listen>

	eMBTCPInit(0);
 8012dc2:	2000      	movs	r0, #0
 8012dc4:	f7ff fea0 	bl	8012b08 <eMBTCPInit>
	eMBEnable();
 8012dc8:	f7ff fede 	bl	8012b88 <eMBEnable>

	size_t acl_size = 0;
 8012dcc:	2200      	movs	r2, #0
 8012dce:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8012dd0:	a901      	add	r1, sp, #4
 8012dd2:	4820      	ldr	r0, [pc, #128]	@ (8012e54 <init_mb_tcp+0xa0>)
 8012dd4:	f008 f868 	bl	801aea8 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8012dd8:	9801      	ldr	r0, [sp, #4]
 8012dda:	1e42      	subs	r2, r0, #1
 8012ddc:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d815      	bhi.n	8012e10 <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 8012de4:	2101      	movs	r1, #1
 8012de6:	4408      	add	r0, r1
 8012de8:	f7ff ffd6 	bl	8012d98 <my_calloc>
 8012dec:	4d1a      	ldr	r5, [pc, #104]	@ (8012e58 <init_mb_tcp+0xa4>)
 8012dee:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8012df0:	2101      	movs	r1, #1
 8012df2:	4818      	ldr	r0, [pc, #96]	@ (8012e54 <init_mb_tcp+0xa0>)
 8012df4:	f008 f896 	bl	801af24 <mg_fs_lfs_open>
 8012df8:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8012dfa:	9a01      	ldr	r2, [sp, #4]
 8012dfc:	6829      	ldr	r1, [r5, #0]
 8012dfe:	f008 f8c1 	bl	801af84 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 8012e02:	9b01      	ldr	r3, [sp, #4]
 8012e04:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 8012e06:	4620      	mov	r0, r4
 8012e08:	f008 f8b0 	bl	801af6c <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8012e0c:	b003      	add	sp, #12
 8012e0e:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8012e10:	2101      	movs	r1, #1
 8012e12:	200b      	movs	r0, #11
 8012e14:	f7ff ffc0 	bl	8012d98 <my_calloc>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	4c0f      	ldr	r4, [pc, #60]	@ (8012e58 <init_mb_tcp+0xa4>)
 8012e1c:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8012e1e:	220b      	movs	r2, #11
 8012e20:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 8012e22:	4a0e      	ldr	r2, [pc, #56]	@ (8012e5c <init_mb_tcp+0xa8>)
 8012e24:	ca03      	ldmia	r2!, {r0, r1}
 8012e26:	6018      	str	r0, [r3, #0]
 8012e28:	6059      	str	r1, [r3, #4]
 8012e2a:	8811      	ldrh	r1, [r2, #0]
 8012e2c:	7892      	ldrb	r2, [r2, #2]
 8012e2e:	8119      	strh	r1, [r3, #8]
 8012e30:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8012e32:	2102      	movs	r1, #2
 8012e34:	4807      	ldr	r0, [pc, #28]	@ (8012e54 <init_mb_tcp+0xa0>)
 8012e36:	f008 f875 	bl	801af24 <mg_fs_lfs_open>
 8012e3a:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8012e3c:	6862      	ldr	r2, [r4, #4]
 8012e3e:	6821      	ldr	r1, [r4, #0]
 8012e40:	f008 f8ac 	bl	801af9c <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8012e44:	4628      	mov	r0, r5
 8012e46:	f008 f891 	bl	801af6c <mg_fs_lfs_close>
}
 8012e4a:	e7df      	b.n	8012e0c <init_mb_tcp+0x58>
 8012e4c:	08012cfd 	.word	0x08012cfd
 8012e50:	0803681c 	.word	0x0803681c
 8012e54:	08036830 	.word	0x08036830
 8012e58:	20000a80 	.word	0x20000a80
 8012e5c:	08036844 	.word	0x08036844

08012e60 <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012e60:	2001      	movs	r0, #1
 8012e62:	4770      	bx	lr

08012e64 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012e64:	4b04      	ldr	r3, [pc, #16]	@ (8012e78 <xMBTCPPortGetRequest+0x14>)
 8012e66:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012e68:	4b04      	ldr	r3, [pc, #16]	@ (8012e7c <xMBTCPPortGetRequest+0x18>)
 8012e6a:	881a      	ldrh	r2, [r3, #0]
 8012e6c:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012e6e:	2200      	movs	r2, #0
 8012e70:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012e72:	2001      	movs	r0, #1
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop
 8012e78:	20001290 	.word	0x20001290
 8012e7c:	2000128c 	.word	0x2000128c

08012e80 <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012e80:	b510      	push	{r4, lr}
 8012e82:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012e84:	460a      	mov	r2, r1
 8012e86:	4601      	mov	r1, r0
 8012e88:	4804      	ldr	r0, [pc, #16]	@ (8012e9c <xMBTCPPortSendResponse+0x1c>)
 8012e8a:	f01b f92d 	bl	802e0e8 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012e8e:	4b04      	ldr	r3, [pc, #16]	@ (8012ea0 <xMBTCPPortSendResponse+0x20>)
 8012e90:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012e92:	2001      	movs	r0, #1
 8012e94:	4b03      	ldr	r3, [pc, #12]	@ (8012ea4 <xMBTCPPortSendResponse+0x24>)
 8012e96:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012e98:	bd10      	pop	{r4, pc}
 8012e9a:	bf00      	nop
 8012e9c:	20000a8c 	.word	0x20000a8c
 8012ea0:	20000a8a 	.word	0x20000a8a
 8012ea4:	20000a88 	.word	0x20000a88

08012ea8 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012ea8:	4770      	bx	lr

08012eaa <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012eaa:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012eac:	f7ff ffd8 	bl	8012e60 <xMBTCPPortInit>
 8012eb0:	b108      	cbz	r0, 8012eb6 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012eb2:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012eb4:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012eb6:	2003      	movs	r0, #3
 8012eb8:	e7fc      	b.n	8012eb4 <eMBTCPDoInit+0xa>

08012eba <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012eba:	4770      	bx	lr

08012ebc <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012ebc:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012ebe:	f7ff fff3 	bl	8012ea8 <vMBTCPPortDisable>
}
 8012ec2:	bd08      	pop	{r3, pc}

08012ec4 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012ec4:	b570      	push	{r4, r5, r6, lr}
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	4606      	mov	r6, r0
 8012eca:	460d      	mov	r5, r1
 8012ecc:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012ece:	f10d 0102 	add.w	r1, sp, #2
 8012ed2:	a801      	add	r0, sp, #4
 8012ed4:	f7ff ffc6 	bl	8012e64 <xMBTCPPortGetRequest>
 8012ed8:	b180      	cbz	r0, 8012efc <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012eda:	9b01      	ldr	r3, [sp, #4]
 8012edc:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012ede:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012ee0:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012ee4:	d10c      	bne.n	8012f00 <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012ee6:	3307      	adds	r3, #7
 8012ee8:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012eea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012eee:	3b07      	subs	r3, #7
 8012ef0:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012ef2:	23ff      	movs	r3, #255	@ 0xff
 8012ef4:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012ef6:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012ef8:	b002      	add	sp, #8
 8012efa:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012efc:	2005      	movs	r0, #5
 8012efe:	e7fb      	b.n	8012ef8 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8012f00:	2005      	movs	r0, #5
 8012f02:	e7f9      	b.n	8012ef8 <eMBTCPReceive+0x34>

08012f04 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8012f04:	b508      	push	{r3, lr}
 8012f06:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8012f08:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8012f0a:	1c53      	adds	r3, r2, #1
 8012f0c:	121b      	asrs	r3, r3, #8
 8012f0e:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8012f12:	3201      	adds	r2, #1
 8012f14:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8012f18:	b289      	uxth	r1, r1
 8012f1a:	3807      	subs	r0, #7
 8012f1c:	f7ff ffb0 	bl	8012e80 <xMBTCPPortSendResponse>
 8012f20:	b108      	cbz	r0, 8012f26 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012f22:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012f24:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8012f26:	2005      	movs	r0, #5
 8012f28:	e7fc      	b.n	8012f24 <eMBTCPSend+0x20>
	...

08012f2c <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012f2c:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012f2e:	4b03      	ldr	r3, [pc, #12]	@ (8012f3c <handle_OPTIONS_method+0x10>)
 8012f30:	4a03      	ldr	r2, [pc, #12]	@ (8012f40 <handle_OPTIONS_method+0x14>)
 8012f32:	21c8      	movs	r1, #200	@ 0xc8
 8012f34:	f011 f9a2 	bl	802427c <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012f38:	bd08      	pop	{r3, pc}
 8012f3a:	bf00      	nop
 8012f3c:	0803b1fc 	.word	0x0803b1fc
 8012f40:	08036850 	.word	0x08036850

08012f44 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8012f44:	b570      	push	{r4, r5, r6, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	4605      	mov	r5, r0
 8012f4a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012f4c:	ae02      	add	r6, sp, #8
 8012f4e:	4910      	ldr	r1, [pc, #64]	@ (8012f90 <handler_dev_version+0x4c>)
 8012f50:	4630      	mov	r0, r6
 8012f52:	f011 fb1d 	bl	8024590 <mg_str_s>
 8012f56:	2300      	movs	r3, #0
 8012f58:	9300      	str	r3, [sp, #0]
 8012f5a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012f62:	f011 fd37 	bl	80249d4 <mg_match>
 8012f66:	b158      	cbz	r0, 8012f80 <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 8012f68:	4b0a      	ldr	r3, [pc, #40]	@ (8012f94 <handler_dev_version+0x50>)
 8012f6a:	9301      	str	r3, [sp, #4]
 8012f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8012f98 <handler_dev_version+0x54>)
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	4b0a      	ldr	r3, [pc, #40]	@ (8012f9c <handler_dev_version+0x58>)
 8012f72:	4a0b      	ldr	r2, [pc, #44]	@ (8012fa0 <handler_dev_version+0x5c>)
 8012f74:	21c8      	movs	r1, #200	@ 0xc8
 8012f76:	4628      	mov	r0, r5
 8012f78:	f011 f980 	bl	802427c <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8012f7c:	b004      	add	sp, #16
 8012f7e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012f80:	4b08      	ldr	r3, [pc, #32]	@ (8012fa4 <handler_dev_version+0x60>)
 8012f82:	4a07      	ldr	r2, [pc, #28]	@ (8012fa0 <handler_dev_version+0x5c>)
 8012f84:	f240 1195 	movw	r1, #405	@ 0x195
 8012f88:	4628      	mov	r0, r5
 8012f8a:	f011 f977 	bl	802427c <mg_http_reply>
		return;
 8012f8e:	e7f5      	b.n	8012f7c <handler_dev_version+0x38>
 8012f90:	080368f0 	.word	0x080368f0
 8012f94:	0803699c 	.word	0x0803699c
 8012f98:	080369a0 	.word	0x080369a0
 8012f9c:	080368f4 	.word	0x080368f4
 8012fa0:	0803692c 	.word	0x0803692c
 8012fa4:	080369a4 	.word	0x080369a4

08012fa8 <handler_dev_info>:

static void handler_dev_info(struct mg_connection *c, struct mg_http_message *hm){
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	b088      	sub	sp, #32
 8012fac:	4605      	mov	r5, r0
 8012fae:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012fb0:	ae06      	add	r6, sp, #24
 8012fb2:	4913      	ldr	r1, [pc, #76]	@ (8013000 <handler_dev_info+0x58>)
 8012fb4:	4630      	mov	r0, r6
 8012fb6:	f011 faeb 	bl	8024590 <mg_str_s>
 8012fba:	2300      	movs	r3, #0
 8012fbc:	9300      	str	r3, [sp, #0]
 8012fbe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012fc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012fc6:	f011 fd05 	bl	80249d4 <mg_match>
 8012fca:	b188      	cbz	r0, 8012ff0 <handler_dev_info+0x48>
		mg_http_reply(c, 200, headers,
 8012fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8013004 <handler_dev_info+0x5c>)
 8012fce:	9304      	str	r3, [sp, #16]
 8012fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8013008 <handler_dev_info+0x60>)
 8012fd2:	9303      	str	r3, [sp, #12]
 8012fd4:	4b0d      	ldr	r3, [pc, #52]	@ (801300c <handler_dev_info+0x64>)
 8012fd6:	9302      	str	r3, [sp, #8]
 8012fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8013010 <handler_dev_info+0x68>)
 8012fda:	9301      	str	r3, [sp, #4]
 8012fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8013014 <handler_dev_info+0x6c>)
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8013018 <handler_dev_info+0x70>)
 8012fe2:	4a0e      	ldr	r2, [pc, #56]	@ (801301c <handler_dev_info+0x74>)
 8012fe4:	21c8      	movs	r1, #200	@ 0xc8
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f011 f948 	bl	802427c <mg_http_reply>
	}else{
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;
	}
}
 8012fec:	b008      	add	sp, #32
 8012fee:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8013020 <handler_dev_info+0x78>)
 8012ff2:	4a0a      	ldr	r2, [pc, #40]	@ (801301c <handler_dev_info+0x74>)
 8012ff4:	f240 1195 	movw	r1, #405	@ 0x195
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	f011 f93f 	bl	802427c <mg_http_reply>
		return;
 8012ffe:	e7f5      	b.n	8012fec <handler_dev_info+0x44>
 8013000:	080368f0 	.word	0x080368f0
 8013004:	08036a60 	.word	0x08036a60
 8013008:	08036a74 	.word	0x08036a74
 801300c:	08036a80 	.word	0x08036a80
 8013010:	0803699c 	.word	0x0803699c
 8013014:	080369a0 	.word	0x080369a0
 8013018:	080369f4 	.word	0x080369f4
 801301c:	0803692c 	.word	0x0803692c
 8013020:	080369a4 	.word	0x080369a4

08013024 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8013024:	b570      	push	{r4, r5, r6, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	4605      	mov	r5, r0
 801302a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801302c:	ae02      	add	r6, sp, #8
 801302e:	4914      	ldr	r1, [pc, #80]	@ (8013080 <handle_firmware_deactivate+0x5c>)
 8013030:	4630      	mov	r0, r6
 8013032:	f011 faad 	bl	8024590 <mg_str_s>
 8013036:	2300      	movs	r3, #0
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801303e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013042:	f011 fcc7 	bl	80249d4 <mg_match>
 8013046:	b198      	cbz	r0, 8013070 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8013048:	4b0e      	ldr	r3, [pc, #56]	@ (8013084 <handle_firmware_deactivate+0x60>)
 801304a:	6a1b      	ldr	r3, [r3, #32]
 801304c:	480e      	ldr	r0, [pc, #56]	@ (8013088 <handle_firmware_deactivate+0x64>)
 801304e:	4798      	blx	r3
 8013050:	b138      	cbz	r0, 8013062 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013052:	4b0e      	ldr	r3, [pc, #56]	@ (801308c <handle_firmware_deactivate+0x68>)
 8013054:	4a0e      	ldr	r2, [pc, #56]	@ (8013090 <handle_firmware_deactivate+0x6c>)
 8013056:	21c8      	movs	r1, #200	@ 0xc8
 8013058:	4628      	mov	r0, r5
 801305a:	f011 f90f 	bl	802427c <mg_http_reply>
}
 801305e:	b004      	add	sp, #16
 8013060:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8013062:	4b0c      	ldr	r3, [pc, #48]	@ (8013094 <handle_firmware_deactivate+0x70>)
 8013064:	4a0a      	ldr	r2, [pc, #40]	@ (8013090 <handle_firmware_deactivate+0x6c>)
 8013066:	21c8      	movs	r1, #200	@ 0xc8
 8013068:	4628      	mov	r0, r5
 801306a:	f011 f907 	bl	802427c <mg_http_reply>
 801306e:	e7f6      	b.n	801305e <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013070:	4b09      	ldr	r3, [pc, #36]	@ (8013098 <handle_firmware_deactivate+0x74>)
 8013072:	4a07      	ldr	r2, [pc, #28]	@ (8013090 <handle_firmware_deactivate+0x6c>)
 8013074:	f240 1195 	movw	r1, #405	@ 0x195
 8013078:	4628      	mov	r0, r5
 801307a:	f011 f8ff 	bl	802427c <mg_http_reply>
}
 801307e:	e7ee      	b.n	801305e <handle_firmware_deactivate+0x3a>
 8013080:	08036a88 	.word	0x08036a88
 8013084:	200000a0 	.word	0x200000a0
 8013088:	08036218 	.word	0x08036218
 801308c:	08036a90 	.word	0x08036a90
 8013090:	0803692c 	.word	0x0803692c
 8013094:	08036acc 	.word	0x08036acc
 8013098:	08036b10 	.word	0x08036b10

0801309c <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	4605      	mov	r5, r0
 80130a2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80130a4:	ae02      	add	r6, sp, #8
 80130a6:	4912      	ldr	r1, [pc, #72]	@ (80130f0 <handle_web_files_remove+0x54>)
 80130a8:	4630      	mov	r0, r6
 80130aa:	f011 fa71 	bl	8024590 <mg_str_s>
 80130ae:	2300      	movs	r3, #0
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80130b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80130ba:	f011 fc8b 	bl	80249d4 <mg_match>
 80130be:	b178      	cbz	r0, 80130e0 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 80130c0:	4e0c      	ldr	r6, [pc, #48]	@ (80130f4 <handle_web_files_remove+0x58>)
 80130c2:	6a33      	ldr	r3, [r6, #32]
 80130c4:	4c0c      	ldr	r4, [pc, #48]	@ (80130f8 <handle_web_files_remove+0x5c>)
 80130c6:	4620      	mov	r0, r4
 80130c8:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 80130ca:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80130cc:	4620      	mov	r0, r4
 80130ce:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 80130d0:	4b0a      	ldr	r3, [pc, #40]	@ (80130fc <handle_web_files_remove+0x60>)
 80130d2:	4a0b      	ldr	r2, [pc, #44]	@ (8013100 <handle_web_files_remove+0x64>)
 80130d4:	21c8      	movs	r1, #200	@ 0xc8
 80130d6:	4628      	mov	r0, r5
 80130d8:	f011 f8d0 	bl	802427c <mg_http_reply>
}
 80130dc:	b004      	add	sp, #16
 80130de:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80130e0:	4b08      	ldr	r3, [pc, #32]	@ (8013104 <handle_web_files_remove+0x68>)
 80130e2:	4a07      	ldr	r2, [pc, #28]	@ (8013100 <handle_web_files_remove+0x64>)
 80130e4:	f240 1195 	movw	r1, #405	@ 0x195
 80130e8:	4628      	mov	r0, r5
 80130ea:	f011 f8c7 	bl	802427c <mg_http_reply>
}
 80130ee:	e7f5      	b.n	80130dc <handle_web_files_remove+0x40>
 80130f0:	08036a88 	.word	0x08036a88
 80130f4:	200000a0 	.word	0x200000a0
 80130f8:	08036204 	.word	0x08036204
 80130fc:	08036b60 	.word	0x08036b60
 8013100:	0803692c 	.word	0x0803692c
 8013104:	08036b10 	.word	0x08036b10

08013108 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8013108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310a:	b0c3      	sub	sp, #268	@ 0x10c
 801310c:	4606      	mov	r6, r0
 801310e:	460d      	mov	r5, r1
	char username[128] = {0};
 8013110:	2400      	movs	r4, #0
 8013112:	9422      	str	r4, [sp, #136]	@ 0x88
 8013114:	277c      	movs	r7, #124	@ 0x7c
 8013116:	463a      	mov	r2, r7
 8013118:	4621      	mov	r1, r4
 801311a:	a823      	add	r0, sp, #140	@ 0x8c
 801311c:	f019 fda8 	bl	802cc70 <memset>
	char pass[128] = {0};
 8013120:	9402      	str	r4, [sp, #8]
 8013122:	463a      	mov	r2, r7
 8013124:	4621      	mov	r1, r4
 8013126:	a803      	add	r0, sp, #12
 8013128:	f019 fda2 	bl	802cc70 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 801312c:	2280      	movs	r2, #128	@ 0x80
 801312e:	9200      	str	r2, [sp, #0]
 8013130:	ab02      	add	r3, sp, #8
 8013132:	a922      	add	r1, sp, #136	@ 0x88
 8013134:	4628      	mov	r0, r5
 8013136:	f012 f953 	bl	80253e0 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 801313a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801313e:	b113      	cbz	r3, 8013146 <handler_logout+0x3e>
 8013140:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013144:	b962      	cbnz	r2, 8013160 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8013146:	b913      	cbnz	r3, 801314e <handler_logout+0x46>
 8013148:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801314c:	bb4b      	cbnz	r3, 80131a2 <handler_logout+0x9a>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 801314e:	4b21      	ldr	r3, [pc, #132]	@ (80131d4 <handler_logout+0xcc>)
 8013150:	4a21      	ldr	r2, [pc, #132]	@ (80131d8 <handler_logout+0xd0>)
 8013152:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013156:	4630      	mov	r0, r6
 8013158:	f011 f890 	bl	802427c <mg_http_reply>
}
 801315c:	b043      	add	sp, #268	@ 0x10c
 801315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8013160:	4b1e      	ldr	r3, [pc, #120]	@ (80131dc <handler_logout+0xd4>)
 8013162:	4a1d      	ldr	r2, [pc, #116]	@ (80131d8 <handler_logout+0xd0>)
 8013164:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013168:	4630      	mov	r0, r6
 801316a:	f011 f887 	bl	802427c <mg_http_reply>
        return;
 801316e:	e7f5      	b.n	801315c <handler_logout+0x54>
				logging(L_INFO, "User: %s is logout", web_tokens[i].user);
 8013170:	23b8      	movs	r3, #184	@ 0xb8
 8013172:	fb03 f404 	mul.w	r4, r3, r4
 8013176:	4f1a      	ldr	r7, [pc, #104]	@ (80131e0 <handler_logout+0xd8>)
 8013178:	19e5      	adds	r5, r4, r7
 801317a:	462a      	mov	r2, r5
 801317c:	4919      	ldr	r1, [pc, #100]	@ (80131e4 <handler_logout+0xdc>)
 801317e:	2001      	movs	r0, #1
 8013180:	f7fe ffb4 	bl	80120ec <logging>
				web_tokens[i].token[0] = '\0';
 8013184:	2300      	movs	r3, #0
 8013186:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
				web_tokens[i].expare = 0;
 801318a:	2000      	movs	r0, #0
 801318c:	2100      	movs	r1, #0
 801318e:	e9c5 012c 	strd	r0, r1, [r5, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8013192:	553b      	strb	r3, [r7, r4]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8013194:	4b14      	ldr	r3, [pc, #80]	@ (80131e8 <handler_logout+0xe0>)
 8013196:	4a10      	ldr	r2, [pc, #64]	@ (80131d8 <handler_logout+0xd0>)
 8013198:	21c8      	movs	r1, #200	@ 0xc8
 801319a:	4630      	mov	r0, r6
 801319c:	f011 f86e 	bl	802427c <mg_http_reply>
		        return;
 80131a0:	e7dc      	b.n	801315c <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 80131a2:	2400      	movs	r4, #0
 80131a4:	2c09      	cmp	r4, #9
 80131a6:	dc0c      	bgt.n	80131c2 <handler_logout+0xba>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 80131a8:	23b8      	movs	r3, #184	@ 0xb8
 80131aa:	fb04 f303 	mul.w	r3, r4, r3
 80131ae:	3380      	adds	r3, #128	@ 0x80
 80131b0:	a902      	add	r1, sp, #8
 80131b2:	480b      	ldr	r0, [pc, #44]	@ (80131e0 <handler_logout+0xd8>)
 80131b4:	4418      	add	r0, r3
 80131b6:	f7fd f813 	bl	80101e0 <strcmp>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d0d8      	beq.n	8013170 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 80131be:	3401      	adds	r4, #1
 80131c0:	e7f0      	b.n	80131a4 <handler_logout+0x9c>
        mg_http_reply(c, 404, headers,
 80131c2:	4b0a      	ldr	r3, [pc, #40]	@ (80131ec <handler_logout+0xe4>)
 80131c4:	4a04      	ldr	r2, [pc, #16]	@ (80131d8 <handler_logout+0xd0>)
 80131c6:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80131ca:	4630      	mov	r0, r6
 80131cc:	f011 f856 	bl	802427c <mg_http_reply>
        return;
 80131d0:	e7c4      	b.n	801315c <handler_logout+0x54>
 80131d2:	bf00      	nop
 80131d4:	08036cac 	.word	0x08036cac
 80131d8:	0803692c 	.word	0x0803692c
 80131dc:	08036ba8 	.word	0x08036ba8
 80131e0:	20001a90 	.word	0x20001a90
 80131e4:	08036c28 	.word	0x08036c28
 80131e8:	08036c3c 	.word	0x08036c3c
 80131ec:	08036c78 	.word	0x08036c78

080131f0 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 80131f0:	b530      	push	{r4, r5, lr}
 80131f2:	b0c7      	sub	sp, #284	@ 0x11c
 80131f4:	4605      	mov	r5, r0
 80131f6:	460c      	mov	r4, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 80131f8:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80131fc:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8013200:	d024      	beq.n	801324c <handle_login+0x5c>
 8013202:	4b14      	ldr	r3, [pc, #80]	@ (8013254 <handle_login+0x64>)
              cookie_name, u->token,
 8013204:	f104 0180 	add.w	r1, r4, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8013208:	b312      	cbz	r2, 8013250 <handle_login+0x60>
 801320a:	4a13      	ldr	r2, [pc, #76]	@ (8013258 <handle_login+0x68>)
 801320c:	4813      	ldr	r0, [pc, #76]	@ (801325c <handle_login+0x6c>)
 801320e:	9002      	str	r0, [sp, #8]
 8013210:	9201      	str	r2, [sp, #4]
 8013212:	9100      	str	r1, [sp, #0]
 8013214:	4a12      	ldr	r2, [pc, #72]	@ (8013260 <handle_login+0x70>)
 8013216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801321a:	a806      	add	r0, sp, #24
 801321c:	f010 fb30 	bl	8023880 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8013220:	9405      	str	r4, [sp, #20]
 8013222:	2200      	movs	r2, #0
 8013224:	9204      	str	r2, [sp, #16]
 8013226:	4b0f      	ldr	r3, [pc, #60]	@ (8013264 <handle_login+0x74>)
 8013228:	9303      	str	r3, [sp, #12]
 801322a:	490f      	ldr	r1, [pc, #60]	@ (8013268 <handle_login+0x78>)
 801322c:	9102      	str	r1, [sp, #8]
 801322e:	9201      	str	r2, [sp, #4]
 8013230:	9300      	str	r3, [sp, #0]
 8013232:	4b0e      	ldr	r3, [pc, #56]	@ (801326c <handle_login+0x7c>)
 8013234:	aa06      	add	r2, sp, #24
 8013236:	21c8      	movs	r1, #200	@ 0xc8
 8013238:	4628      	mov	r0, r5
 801323a:	f011 f81f 	bl	802427c <mg_http_reply>
  logging(L_INFO, "Authenticated web user: %s ", u->user);
 801323e:	4622      	mov	r2, r4
 8013240:	490b      	ldr	r1, [pc, #44]	@ (8013270 <handle_login+0x80>)
 8013242:	2001      	movs	r0, #1
 8013244:	f7fe ff52 	bl	80120ec <logging>
}
 8013248:	b047      	add	sp, #284	@ 0x11c
 801324a:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 801324c:	4b09      	ldr	r3, [pc, #36]	@ (8013274 <handle_login+0x84>)
 801324e:	e7d9      	b.n	8013204 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8013250:	4a09      	ldr	r2, [pc, #36]	@ (8013278 <handle_login+0x88>)
 8013252:	e7db      	b.n	801320c <handle_login+0x1c>
 8013254:	08036d24 	.word	0x08036d24
 8013258:	08036d48 	.word	0x08036d48
 801325c:	0002a300 	.word	0x0002a300
 8013260:	08036d54 	.word	0x08036d54
 8013264:	08022a3d 	.word	0x08022a3d
 8013268:	08037dcc 	.word	0x08037dcc
 801326c:	08036d98 	.word	0x08036d98
 8013270:	08036da0 	.word	0x08036da0
 8013274:	08036d38 	.word	0x08036d38
 8013278:	08036fac 	.word	0x08036fac

0801327c <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 801327c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013280:	b0e5      	sub	sp, #404	@ 0x194
 8013282:	4605      	mov	r5, r0
 8013284:	460c      	mov	r4, r1
 8013286:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8013288:	2100      	movs	r1, #0
 801328a:	9159      	str	r1, [sp, #356]	@ 0x164
 801328c:	2225      	movs	r2, #37	@ 0x25
 801328e:	a85a      	add	r0, sp, #360	@ 0x168
 8013290:	f019 fcee 	bl	802cc70 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8013294:	2280      	movs	r2, #128	@ 0x80
 8013296:	9200      	str	r2, [sp, #0]
 8013298:	ab02      	add	r3, sp, #8
 801329a:	a922      	add	r1, sp, #136	@ 0x88
 801329c:	4620      	mov	r0, r4
 801329e:	f012 f89f 	bl	80253e0 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 80132a2:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80132a6:	b113      	cbz	r3, 80132ae <auth+0x32>
 80132a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80132ac:	b94a      	cbnz	r2, 80132c2 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	f040 80bb 	bne.w	801342a <auth+0x1ae>
 80132b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	f040 80b2 	bne.w	8013422 <auth+0x1a6>
	return false;
 80132be:	2000      	movs	r0, #0
 80132c0:	e0b4      	b.n	801342c <auth+0x1b0>
		logging(L_INFO, "Try to authenticate user: %s", username);
 80132c2:	aa22      	add	r2, sp, #136	@ 0x88
 80132c4:	495b      	ldr	r1, [pc, #364]	@ (8013434 <auth+0x1b8>)
 80132c6:	2001      	movs	r0, #1
 80132c8:	f7fe ff10 	bl	80120ec <logging>
		mg_sha1_init(&sha1_ctx);
 80132cc:	a842      	add	r0, sp, #264	@ 0x108
 80132ce:	f011 f8ad 	bl	802442c <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 80132d2:	a802      	add	r0, sp, #8
 80132d4:	f7fc ffe4 	bl	80102a0 <strlen>
 80132d8:	4602      	mov	r2, r0
 80132da:	a902      	add	r1, sp, #8
 80132dc:	a842      	add	r0, sp, #264	@ 0x108
 80132de:	f011 f8bf 	bl	8024460 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 80132e2:	a942      	add	r1, sp, #264	@ 0x108
 80132e4:	a859      	add	r0, sp, #356	@ 0x164
 80132e6:	f011 f8f5 	bl	80244d4 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 80132ea:	2400      	movs	r4, #0
 80132ec:	e02a      	b.n	8013344 <auth+0xc8>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80132ee:	4641      	mov	r1, r8
 80132f0:	4628      	mov	r0, r5
 80132f2:	f7ff ff7d 	bl	80131f0 <handle_login>
 80132f6:	e066      	b.n	80133c6 <auth+0x14a>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 80132f8:	4f4f      	ldr	r7, [pc, #316]	@ (8013438 <auth+0x1bc>)
 80132fa:	2280      	movs	r2, #128	@ 0x80
 80132fc:	a922      	add	r1, sp, #136	@ 0x88
 80132fe:	4638      	mov	r0, r7
 8013300:	f019 fcfd 	bl	802ccfe <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 8013304:	f016 fd04 	bl	8029d10 <mg_now>
 8013308:	4b4c      	ldr	r3, [pc, #304]	@ (801343c <auth+0x1c0>)
 801330a:	18c3      	adds	r3, r0, r3
 801330c:	f141 0100 	adc.w	r1, r1, #0
 8013310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013314:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013318:	2128      	movs	r1, #40	@ 0x28
 801331a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 801331e:	f012 fca5 	bl	8025c6c <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013322:	b94e      	cbnz	r6, 8013338 <auth+0xbc>
					logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 8013324:	22b8      	movs	r2, #184	@ 0xb8
 8013326:	4b46      	ldr	r3, [pc, #280]	@ (8013440 <auth+0x1c4>)
 8013328:	fb02 3204 	mla	r2, r2, r4, r3
 801332c:	4945      	ldr	r1, [pc, #276]	@ (8013444 <auth+0x1c8>)
 801332e:	2001      	movs	r0, #1
 8013330:	f7fe fedc 	bl	80120ec <logging>
					return true;
 8013334:	2001      	movs	r0, #1
 8013336:	e079      	b.n	801342c <auth+0x1b0>
					if (set_cookie)handle_login(c, &web_tokens[1]);
 8013338:	4639      	mov	r1, r7
 801333a:	4628      	mov	r0, r5
 801333c:	f7ff ff58 	bl	80131f0 <handle_login>
 8013340:	e7f0      	b.n	8013324 <auth+0xa8>
		for (i=0; i< user_list_size; i++ ){
 8013342:	3401      	adds	r4, #1
 8013344:	2c09      	cmp	r4, #9
 8013346:	dc45      	bgt.n	80133d4 <auth+0x158>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8013348:	a922      	add	r1, sp, #136	@ 0x88
 801334a:	20a9      	movs	r0, #169	@ 0xa9
 801334c:	4b3e      	ldr	r3, [pc, #248]	@ (8013448 <auth+0x1cc>)
 801334e:	fb00 3004 	mla	r0, r0, r4, r3
 8013352:	f7fc ff45 	bl	80101e0 <strcmp>
 8013356:	2800      	cmp	r0, #0
 8013358:	d1f3      	bne.n	8013342 <auth+0xc6>
 801335a:	23a9      	movs	r3, #169	@ 0xa9
 801335c:	fb04 f303 	mul.w	r3, r4, r3
 8013360:	3380      	adds	r3, #128	@ 0x80
 8013362:	a959      	add	r1, sp, #356	@ 0x164
 8013364:	4838      	ldr	r0, [pc, #224]	@ (8013448 <auth+0x1cc>)
 8013366:	4418      	add	r0, r3
 8013368:	f7fc ff3a 	bl	80101e0 <strcmp>
 801336c:	2800      	cmp	r0, #0
 801336e:	d1e8      	bne.n	8013342 <auth+0xc6>
					if(web_tokens[i].expare < mg_now()){
 8013370:	4b33      	ldr	r3, [pc, #204]	@ (8013440 <auth+0x1c4>)
 8013372:	22b8      	movs	r2, #184	@ 0xb8
 8013374:	fb02 3304 	mla	r3, r2, r4, r3
 8013378:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 801337c:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 8013380:	f016 fcc6 	bl	8029d10 <mg_now>
 8013384:	4580      	cmp	r8, r0
 8013386:	418f      	sbcs	r7, r1
 8013388:	d2b6      	bcs.n	80132f8 <auth+0x7c>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 801338a:	27b8      	movs	r7, #184	@ 0xb8
 801338c:	fb04 f707 	mul.w	r7, r4, r7
 8013390:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8013440 <auth+0x1c4>
 8013394:	eb07 0809 	add.w	r8, r7, r9
 8013398:	2280      	movs	r2, #128	@ 0x80
 801339a:	a922      	add	r1, sp, #136	@ 0x88
 801339c:	4640      	mov	r0, r8
 801339e:	f019 fcae 	bl	802ccfe <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 80133a2:	f016 fcb5 	bl	8029d10 <mg_now>
 80133a6:	4b25      	ldr	r3, [pc, #148]	@ (801343c <auth+0x1c0>)
 80133a8:	18c0      	adds	r0, r0, r3
 80133aa:	f141 0100 	adc.w	r1, r1, #0
 80133ae:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
 80133b2:	f8c8 10b4 	str.w	r1, [r8, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 80133b6:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80133ba:	2128      	movs	r1, #40	@ 0x28
 80133bc:	4448      	add	r0, r9
 80133be:	f012 fc55 	bl	8025c6c <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 80133c2:	2e00      	cmp	r6, #0
 80133c4:	d193      	bne.n	80132ee <auth+0x72>
						logging(L_INFO, "User: %s is authenticated", web_tokens[i].user);
 80133c6:	4642      	mov	r2, r8
 80133c8:	491e      	ldr	r1, [pc, #120]	@ (8013444 <auth+0x1c8>)
 80133ca:	2001      	movs	r0, #1
 80133cc:	f7fe fe8e 	bl	80120ec <logging>
						return true;
 80133d0:	2001      	movs	r0, #1
 80133d2:	e02b      	b.n	801342c <auth+0x1b0>
	return false;
 80133d4:	2000      	movs	r0, #0
 80133d6:	e029      	b.n	801342c <auth+0x1b0>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 80133d8:	22b8      	movs	r2, #184	@ 0xb8
 80133da:	4b19      	ldr	r3, [pc, #100]	@ (8013440 <auth+0x1c4>)
 80133dc:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	4b1a      	ldr	r3, [pc, #104]	@ (801344c <auth+0x1d0>)
 80133e4:	4a1a      	ldr	r2, [pc, #104]	@ (8013450 <auth+0x1d4>)
 80133e6:	21c8      	movs	r1, #200	@ 0xc8
 80133e8:	4628      	mov	r0, r5
 80133ea:	f010 ff47 	bl	802427c <mg_http_reply>
 80133ee:	e016      	b.n	801341e <auth+0x1a2>
		for (i=0;i<user_list_size; i++){
 80133f0:	3401      	adds	r4, #1
 80133f2:	2c09      	cmp	r4, #9
 80133f4:	dc17      	bgt.n	8013426 <auth+0x1aa>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 80133f6:	23b8      	movs	r3, #184	@ 0xb8
 80133f8:	fb04 f303 	mul.w	r3, r4, r3
 80133fc:	3380      	adds	r3, #128	@ 0x80
 80133fe:	a902      	add	r1, sp, #8
 8013400:	480f      	ldr	r0, [pc, #60]	@ (8013440 <auth+0x1c4>)
 8013402:	4418      	add	r0, r3
 8013404:	f7fc feec 	bl	80101e0 <strcmp>
 8013408:	2800      	cmp	r0, #0
 801340a:	d1f1      	bne.n	80133f0 <auth+0x174>
 801340c:	23b8      	movs	r3, #184	@ 0xb8
 801340e:	fb04 f303 	mul.w	r3, r4, r3
 8013412:	4a0b      	ldr	r2, [pc, #44]	@ (8013440 <auth+0x1c4>)
 8013414:	5cd3      	ldrb	r3, [r2, r3]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d0ea      	beq.n	80133f0 <auth+0x174>
				if (set_cookie) mg_http_reply(c, 200, headers,
 801341a:	2e00      	cmp	r6, #0
 801341c:	d1dc      	bne.n	80133d8 <auth+0x15c>
				return true;
 801341e:	2001      	movs	r0, #1
 8013420:	e004      	b.n	801342c <auth+0x1b0>
		for (i=0;i<user_list_size; i++){
 8013422:	2400      	movs	r4, #0
 8013424:	e7e5      	b.n	80133f2 <auth+0x176>
	return false;
 8013426:	2000      	movs	r0, #0
 8013428:	e000      	b.n	801342c <auth+0x1b0>
 801342a:	2000      	movs	r0, #0
}
 801342c:	b065      	add	sp, #404	@ 0x194
 801342e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013432:	bf00      	nop
 8013434:	08036dbc 	.word	0x08036dbc
 8013438:	20001b48 	.word	0x20001b48
 801343c:	0a4cb800 	.word	0x0a4cb800
 8013440:	20001a90 	.word	0x20001a90
 8013444:	08036ddc 	.word	0x08036ddc
 8013448:	200021c0 	.word	0x200021c0
 801344c:	08036df8 	.word	0x08036df8
 8013450:	0803692c 	.word	0x0803692c

08013454 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8013454:	b510      	push	{r4, lr}
 8013456:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8013458:	2201      	movs	r2, #1
 801345a:	f7ff ff0f 	bl	801327c <auth>
 801345e:	b100      	cbz	r0, 8013462 <handler_authanticate+0xe>
}
 8013460:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8013462:	4b04      	ldr	r3, [pc, #16]	@ (8013474 <handler_authanticate+0x20>)
 8013464:	4a04      	ldr	r2, [pc, #16]	@ (8013478 <handler_authanticate+0x24>)
 8013466:	f240 1193 	movw	r1, #403	@ 0x193
 801346a:	4620      	mov	r0, r4
 801346c:	f010 ff06 	bl	802427c <mg_http_reply>
}
 8013470:	e7f6      	b.n	8013460 <handler_authanticate+0xc>
 8013472:	bf00      	nop
 8013474:	08036e38 	.word	0x08036e38
 8013478:	0803692c 	.word	0x0803692c

0801347c <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 801347c:	b510      	push	{r4, lr}
 801347e:	b090      	sub	sp, #64	@ 0x40
 8013480:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8013482:	a809      	add	r0, sp, #36	@ 0x24
 8013484:	f007 fc68 	bl	801ad58 <vPortGetHeapStats>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8013488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801348a:	9306      	str	r3, [sp, #24]
 801348c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801348e:	9305      	str	r3, [sp, #20]
 8013490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013492:	9304      	str	r3, [sp, #16]
 8013494:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013496:	9303      	str	r3, [sp, #12]
 8013498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801349a:	9302      	str	r3, [sp, #8]
 801349c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801349e:	9301      	str	r3, [sp, #4]
 80134a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	4b03      	ldr	r3, [pc, #12]	@ (80134b4 <handle_ram_status_get+0x38>)
 80134a6:	4a04      	ldr	r2, [pc, #16]	@ (80134b8 <handle_ram_status_get+0x3c>)
 80134a8:	21c8      	movs	r1, #200	@ 0xc8
 80134aa:	4620      	mov	r0, r4
 80134ac:	f010 fee6 	bl	802427c <mg_http_reply>
}
 80134b0:	b010      	add	sp, #64	@ 0x40
 80134b2:	bd10      	pop	{r4, pc}
 80134b4:	08036e68 	.word	0x08036e68
 80134b8:	08036f6c 	.word	0x08036f6c

080134bc <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 80134bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134be:	b091      	sub	sp, #68	@ 0x44
 80134c0:	4606      	mov	r6, r0
 80134c2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80134c4:	ad0c      	add	r5, sp, #48	@ 0x30
 80134c6:	494b      	ldr	r1, [pc, #300]	@ (80135f4 <handle_io_status_get+0x138>)
 80134c8:	4628      	mov	r0, r5
 80134ca:	f011 f861 	bl	8024590 <mg_str_s>
 80134ce:	2300      	movs	r3, #0
 80134d0:	9300      	str	r3, [sp, #0]
 80134d2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80134d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134da:	f011 fa7b 	bl	80249d4 <mg_match>
 80134de:	b328      	cbz	r0, 801352c <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 80134e0:	4c45      	ldr	r4, [pc, #276]	@ (80135f8 <handle_io_status_get+0x13c>)
 80134e2:	6823      	ldr	r3, [r4, #0]
 80134e4:	2200      	movs	r2, #0
 80134e6:	2101      	movs	r1, #1
 80134e8:	a80a      	add	r0, sp, #40	@ 0x28
 80134ea:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	2200      	movs	r2, #0
 80134f0:	2102      	movs	r1, #2
 80134f2:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 80134f6:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 80134f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80134fc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013500:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8013504:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013508:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 801350c:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013510:	9505      	str	r5, [sp, #20]
 8013512:	9404      	str	r4, [sp, #16]
 8013514:	9003      	str	r0, [sp, #12]
 8013516:	9102      	str	r1, [sp, #8]
 8013518:	9201      	str	r2, [sp, #4]
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	4b37      	ldr	r3, [pc, #220]	@ (80135fc <handle_io_status_get+0x140>)
 801351e:	4a38      	ldr	r2, [pc, #224]	@ (8013600 <handle_io_status_get+0x144>)
 8013520:	21c8      	movs	r1, #200	@ 0xc8
 8013522:	4630      	mov	r0, r6
 8013524:	f010 feaa 	bl	802427c <mg_http_reply>
}
 8013528:	b011      	add	sp, #68	@ 0x44
 801352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 801352c:	ad0e      	add	r5, sp, #56	@ 0x38
 801352e:	4935      	ldr	r1, [pc, #212]	@ (8013604 <handle_io_status_get+0x148>)
 8013530:	4628      	mov	r0, r5
 8013532:	f011 f82d 	bl	8024590 <mg_str_s>
 8013536:	2300      	movs	r3, #0
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801353e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013542:	f011 fa47 	bl	80249d4 <mg_match>
 8013546:	2800      	cmp	r0, #0
 8013548:	d04b      	beq.n	80135e2 <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801354a:	ab08      	add	r3, sp, #32
 801354c:	4a2e      	ldr	r2, [pc, #184]	@ (8013608 <handle_io_status_get+0x14c>)
 801354e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013552:	c903      	ldmia	r1, {r0, r1}
 8013554:	f00f ff58 	bl	8023408 <mg_json_get_num>
 8013558:	2800      	cmp	r0, #0
 801355a:	d03a      	beq.n	80135d2 <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 801355c:	ab0a      	add	r3, sp, #40	@ 0x28
 801355e:	4a2b      	ldr	r2, [pc, #172]	@ (801360c <handle_io_status_get+0x150>)
 8013560:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013564:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013568:	f00f ff4e 	bl	8023408 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 801356c:	2800      	cmp	r0, #0
 801356e:	d030      	beq.n	80135d2 <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8013570:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013574:	f7fd fb30 	bl	8010bd8 <__aeabi_d2uiz>
 8013578:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 801357a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801357e:	f7fd fb2b 	bl	8010bd8 <__aeabi_d2uiz>
 8013582:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8013584:	1e63      	subs	r3, r4, #1
 8013586:	b2db      	uxtb	r3, r3
 8013588:	2b02      	cmp	r3, #2
 801358a:	d801      	bhi.n	8013590 <handle_io_status_get+0xd4>
 801358c:	2d01      	cmp	r5, #1
 801358e:	d907      	bls.n	80135a0 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8013590:	4b1f      	ldr	r3, [pc, #124]	@ (8013610 <handle_io_status_get+0x154>)
 8013592:	4a1b      	ldr	r2, [pc, #108]	@ (8013600 <handle_io_status_get+0x144>)
 8013594:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013598:	4630      	mov	r0, r6
 801359a:	f010 fe6f 	bl	802427c <mg_http_reply>
 801359e:	e7c3      	b.n	8013528 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80135a0:	4f15      	ldr	r7, [pc, #84]	@ (80135f8 <handle_io_status_get+0x13c>)
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2200      	movs	r2, #0
 80135a6:	2102      	movs	r1, #2
 80135a8:	a807      	add	r0, sp, #28
 80135aa:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 80135ac:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 80135b0:	446b      	add	r3, sp
 80135b2:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	2201      	movs	r2, #1
 80135ba:	2102      	movs	r1, #2
 80135bc:	a807      	add	r0, sp, #28
 80135be:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 80135c0:	9501      	str	r5, [sp, #4]
 80135c2:	9400      	str	r4, [sp, #0]
 80135c4:	4b13      	ldr	r3, [pc, #76]	@ (8013614 <handle_io_status_get+0x158>)
 80135c6:	4a0e      	ldr	r2, [pc, #56]	@ (8013600 <handle_io_status_get+0x144>)
 80135c8:	21c8      	movs	r1, #200	@ 0xc8
 80135ca:	4630      	mov	r0, r6
 80135cc:	f010 fe56 	bl	802427c <mg_http_reply>
 80135d0:	e7aa      	b.n	8013528 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 80135d2:	4b11      	ldr	r3, [pc, #68]	@ (8013618 <handle_io_status_get+0x15c>)
 80135d4:	4a0a      	ldr	r2, [pc, #40]	@ (8013600 <handle_io_status_get+0x144>)
 80135d6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80135da:	4630      	mov	r0, r6
 80135dc:	f010 fe4e 	bl	802427c <mg_http_reply>
 80135e0:	e7a2      	b.n	8013528 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80135e2:	4b0e      	ldr	r3, [pc, #56]	@ (801361c <handle_io_status_get+0x160>)
 80135e4:	4a06      	ldr	r2, [pc, #24]	@ (8013600 <handle_io_status_get+0x144>)
 80135e6:	f240 1195 	movw	r1, #405	@ 0x195
 80135ea:	4630      	mov	r0, r6
 80135ec:	f010 fe46 	bl	802427c <mg_http_reply>
}
 80135f0:	e79a      	b.n	8013528 <handle_io_status_get+0x6c>
 80135f2:	bf00      	nop
 80135f4:	080368f0 	.word	0x080368f0
 80135f8:	2000285c 	.word	0x2000285c
 80135fc:	08036fb0 	.word	0x08036fb0
 8013600:	0803692c 	.word	0x0803692c
 8013604:	08036a88 	.word	0x08036a88
 8013608:	08036fe4 	.word	0x08036fe4
 801360c:	08036ff0 	.word	0x08036ff0
 8013610:	08037030 	.word	0x08037030
 8013614:	08036ff8 	.word	0x08036ff8
 8013618:	0803706c 	.word	0x0803706c
 801361c:	080370a8 	.word	0x080370a8

08013620 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8013620:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8013622:	fb01 f400 	mul.w	r4, r1, r0
 8013626:	4620      	mov	r0, r4
 8013628:	f007 fad6 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801362c:	4605      	mov	r5, r0
 801362e:	b118      	cbz	r0, 8013638 <mg_calloc+0x18>
 8013630:	4622      	mov	r2, r4
 8013632:	2100      	movs	r1, #0
 8013634:	f019 fb1c 	bl	802cc70 <memset>
}
 8013638:	4628      	mov	r0, r5
 801363a:	bd38      	pop	{r3, r4, r5, pc}

0801363c <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 801363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801363e:	b08b      	sub	sp, #44	@ 0x2c
 8013640:	4606      	mov	r6, r0
 8013642:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013644:	ad06      	add	r5, sp, #24
 8013646:	4984      	ldr	r1, [pc, #528]	@ (8013858 <handle_mqtt_conf+0x21c>)
 8013648:	4628      	mov	r0, r5
 801364a:	f010 ffa1 	bl	8024590 <mg_str_s>
 801364e:	2300      	movs	r3, #0
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013656:	e894 0003 	ldmia.w	r4, {r0, r1}
 801365a:	f011 f9bb 	bl	80249d4 <mg_match>
 801365e:	2800      	cmp	r0, #0
 8013660:	d03b      	beq.n	80136da <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013662:	21c6      	movs	r1, #198	@ 0xc6
 8013664:	2001      	movs	r0, #1
 8013666:	f7ff ffdb 	bl	8013620 <mg_calloc>
		if (mqtt_config == NULL) {
 801366a:	4605      	mov	r5, r0
 801366c:	b340      	cbz	r0, 80136c0 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 801366e:	4b7b      	ldr	r3, [pc, #492]	@ (801385c <handle_mqtt_conf+0x220>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2200      	movs	r2, #0
 8013674:	4611      	mov	r1, r2
 8013676:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8013678:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 801367c:	4638      	mov	r0, r7
 801367e:	f7fc fe0f 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8013682:	b2c4      	uxtb	r4, r0
 8013684:	4622      	mov	r2, r4
 8013686:	212a      	movs	r1, #42	@ 0x2a
 8013688:	4638      	mov	r0, r7
 801368a:	f019 faf1 	bl	802cc70 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 801368e:	442c      	add	r4, r5
 8013690:	2300      	movs	r3, #0
 8013692:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013696:	786b      	ldrb	r3, [r5, #1]
 8013698:	b1eb      	cbz	r3, 80136d6 <handle_mqtt_conf+0x9a>
 801369a:	4b71      	ldr	r3, [pc, #452]	@ (8013860 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 801369c:	1caa      	adds	r2, r5, #2
 801369e:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80136a2:	9703      	str	r7, [sp, #12]
 80136a4:	9102      	str	r1, [sp, #8]
 80136a6:	9201      	str	r2, [sp, #4]
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	4b6e      	ldr	r3, [pc, #440]	@ (8013864 <handle_mqtt_conf+0x228>)
 80136ac:	4a6e      	ldr	r2, [pc, #440]	@ (8013868 <handle_mqtt_conf+0x22c>)
 80136ae:	21c8      	movs	r1, #200	@ 0xc8
 80136b0:	4630      	mov	r0, r6
 80136b2:	f010 fde3 	bl	802427c <mg_http_reply>
		free(mqtt_config);
 80136b6:	4628      	mov	r0, r5
 80136b8:	f007 fb10 	bl	801acdc <vPortFree>
}
 80136bc:	b00b      	add	sp, #44	@ 0x2c
 80136be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80136c0:	4b6a      	ldr	r3, [pc, #424]	@ (801386c <handle_mqtt_conf+0x230>)
 80136c2:	4a69      	ldr	r2, [pc, #420]	@ (8013868 <handle_mqtt_conf+0x22c>)
 80136c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80136c8:	4630      	mov	r0, r6
 80136ca:	f010 fdd7 	bl	802427c <mg_http_reply>
			free(mqtt_config);
 80136ce:	4628      	mov	r0, r5
 80136d0:	f007 fb04 	bl	801acdc <vPortFree>
			return;
 80136d4:	e7f2      	b.n	80136bc <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80136d6:	4b66      	ldr	r3, [pc, #408]	@ (8013870 <handle_mqtt_conf+0x234>)
 80136d8:	e7e0      	b.n	801369c <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 80136da:	ad08      	add	r5, sp, #32
 80136dc:	4965      	ldr	r1, [pc, #404]	@ (8013874 <handle_mqtt_conf+0x238>)
 80136de:	4628      	mov	r0, r5
 80136e0:	f010 ff56 	bl	8024590 <mg_str_s>
 80136e4:	2300      	movs	r3, #0
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80136ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136f0:	f011 f970 	bl	80249d4 <mg_match>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	f000 80a7 	beq.w	8013848 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80136fa:	21c6      	movs	r1, #198	@ 0xc6
 80136fc:	2001      	movs	r0, #1
 80136fe:	f7ff ff8f 	bl	8013620 <mg_calloc>
		if (mqtt_config == NULL) {
 8013702:	4605      	mov	r5, r0
 8013704:	b310      	cbz	r0, 801374c <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013706:	ab05      	add	r3, sp, #20
 8013708:	4a5b      	ldr	r2, [pc, #364]	@ (8013878 <handle_mqtt_conf+0x23c>)
 801370a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801370e:	c903      	ldmia	r1, {r0, r1}
 8013710:	f00f fc10 	bl	8022f34 <mg_json_get>
 8013714:	2800      	cmp	r0, #0
 8013716:	db24      	blt.n	8013762 <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013718:	1c6b      	adds	r3, r5, #1
 801371a:	4a58      	ldr	r2, [pc, #352]	@ (801387c <handle_mqtt_conf+0x240>)
 801371c:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013720:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013724:	f00f fe96 	bl	8023454 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013728:	4a55      	ldr	r2, [pc, #340]	@ (8013880 <handle_mqtt_conf+0x244>)
 801372a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801372e:	f012 f81f 	bl	8025770 <mg_json_get_str>
 8013732:	4607      	mov	r7, r0
 8013734:	b328      	cbz	r0, 8013782 <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013736:	f016 fd07 	bl	802a148 <is_valid_mqtt_url>
 801373a:	4603      	mov	r3, r0
 801373c:	b1e0      	cbz	r0, 8013778 <handle_mqtt_conf+0x13c>
					switch (err) {
 801373e:	3304      	adds	r3, #4
 8013740:	2b03      	cmp	r3, #3
 8013742:	d879      	bhi.n	8013838 <handle_mqtt_conf+0x1fc>
 8013744:	e8df f003 	tbb	[pc, r3]
 8013748:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801374c:	4b47      	ldr	r3, [pc, #284]	@ (801386c <handle_mqtt_conf+0x230>)
 801374e:	4a46      	ldr	r2, [pc, #280]	@ (8013868 <handle_mqtt_conf+0x22c>)
 8013750:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013754:	4630      	mov	r0, r6
 8013756:	f010 fd91 	bl	802427c <mg_http_reply>
			free(mqtt_config);
 801375a:	4628      	mov	r0, r5
 801375c:	f007 fabe 	bl	801acdc <vPortFree>
			return;
 8013760:	e7ac      	b.n	80136bc <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013762:	4b48      	ldr	r3, [pc, #288]	@ (8013884 <handle_mqtt_conf+0x248>)
 8013764:	4a40      	ldr	r2, [pc, #256]	@ (8013868 <handle_mqtt_conf+0x22c>)
 8013766:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801376a:	4630      	mov	r0, r6
 801376c:	f010 fd86 	bl	802427c <mg_http_reply>
		free(mqtt_config);
 8013770:	4628      	mov	r0, r5
 8013772:	f007 fab3 	bl	801acdc <vPortFree>
 8013776:	e7a1      	b.n	80136bc <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8013778:	227f      	movs	r2, #127	@ 0x7f
 801377a:	4639      	mov	r1, r7
 801377c:	1ca8      	adds	r0, r5, #2
 801377e:	f019 fabe 	bl	802ccfe <strncpy>
			free(broker);
 8013782:	4638      	mov	r0, r7
 8013784:	f007 faaa 	bl	801acdc <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8013788:	4a3f      	ldr	r2, [pc, #252]	@ (8013888 <handle_mqtt_conf+0x24c>)
 801378a:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 801378e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013792:	f011 ffed 	bl	8025770 <mg_json_get_str>
 8013796:	4607      	mov	r7, r0
 8013798:	b128      	cbz	r0, 80137a6 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 801379a:	2220      	movs	r2, #32
 801379c:	4601      	mov	r1, r0
 801379e:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80137a2:	f019 faac 	bl	802ccfe <strncpy>
			free(username);
 80137a6:	4638      	mov	r0, r7
 80137a8:	f007 fa98 	bl	801acdc <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 80137ac:	4a37      	ldr	r2, [pc, #220]	@ (801388c <handle_mqtt_conf+0x250>)
 80137ae:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80137b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80137b6:	f011 ffdb 	bl	8025770 <mg_json_get_str>
 80137ba:	4604      	mov	r4, r0
 80137bc:	b128      	cbz	r0, 80137ca <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 80137be:	2220      	movs	r2, #32
 80137c0:	4601      	mov	r1, r0
 80137c2:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 80137c6:	f019 fa9a 	bl	802ccfe <strncpy>
			free(password);
 80137ca:	4620      	mov	r0, r4
 80137cc:	f007 fa86 	bl	801acdc <vPortFree>
			mqtt_config->save = 1;
 80137d0:	2201      	movs	r2, #1
 80137d2:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 80137d4:	4b21      	ldr	r3, [pc, #132]	@ (801385c <handle_mqtt_conf+0x220>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2100      	movs	r1, #0
 80137da:	4628      	mov	r0, r5
 80137dc:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80137de:	4b2c      	ldr	r3, [pc, #176]	@ (8013890 <handle_mqtt_conf+0x254>)
 80137e0:	4a21      	ldr	r2, [pc, #132]	@ (8013868 <handle_mqtt_conf+0x22c>)
 80137e2:	21c8      	movs	r1, #200	@ 0xc8
 80137e4:	4630      	mov	r0, r6
 80137e6:	f010 fd49 	bl	802427c <mg_http_reply>
 80137ea:	e7c1      	b.n	8013770 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 80137ec:	4b29      	ldr	r3, [pc, #164]	@ (8013894 <handle_mqtt_conf+0x258>)
 80137ee:	4a1e      	ldr	r2, [pc, #120]	@ (8013868 <handle_mqtt_conf+0x22c>)
 80137f0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80137f4:	4630      	mov	r0, r6
 80137f6:	f010 fd41 	bl	802427c <mg_http_reply>
					free(broker);
 80137fa:	4638      	mov	r0, r7
 80137fc:	f007 fa6e 	bl	801acdc <vPortFree>
					free(mqtt_config);
 8013800:	4628      	mov	r0, r5
 8013802:	f007 fa6b 	bl	801acdc <vPortFree>
					return;
 8013806:	e759      	b.n	80136bc <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013808:	4b23      	ldr	r3, [pc, #140]	@ (8013898 <handle_mqtt_conf+0x25c>)
 801380a:	4a17      	ldr	r2, [pc, #92]	@ (8013868 <handle_mqtt_conf+0x22c>)
 801380c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013810:	4630      	mov	r0, r6
 8013812:	f010 fd33 	bl	802427c <mg_http_reply>
							break;
 8013816:	e7f0      	b.n	80137fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013818:	4b20      	ldr	r3, [pc, #128]	@ (801389c <handle_mqtt_conf+0x260>)
 801381a:	4a13      	ldr	r2, [pc, #76]	@ (8013868 <handle_mqtt_conf+0x22c>)
 801381c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013820:	4630      	mov	r0, r6
 8013822:	f010 fd2b 	bl	802427c <mg_http_reply>
							break;
 8013826:	e7e8      	b.n	80137fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013828:	4b1d      	ldr	r3, [pc, #116]	@ (80138a0 <handle_mqtt_conf+0x264>)
 801382a:	4a0f      	ldr	r2, [pc, #60]	@ (8013868 <handle_mqtt_conf+0x22c>)
 801382c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013830:	4630      	mov	r0, r6
 8013832:	f010 fd23 	bl	802427c <mg_http_reply>
							break;
 8013836:	e7e0      	b.n	80137fa <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013838:	4b1a      	ldr	r3, [pc, #104]	@ (80138a4 <handle_mqtt_conf+0x268>)
 801383a:	4a0b      	ldr	r2, [pc, #44]	@ (8013868 <handle_mqtt_conf+0x22c>)
 801383c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013840:	4630      	mov	r0, r6
 8013842:	f010 fd1b 	bl	802427c <mg_http_reply>
							break;
 8013846:	e7d8      	b.n	80137fa <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013848:	4b17      	ldr	r3, [pc, #92]	@ (80138a8 <handle_mqtt_conf+0x26c>)
 801384a:	4a07      	ldr	r2, [pc, #28]	@ (8013868 <handle_mqtt_conf+0x22c>)
 801384c:	f240 1195 	movw	r1, #405	@ 0x195
 8013850:	4630      	mov	r0, r6
 8013852:	f010 fd13 	bl	802427c <mg_http_reply>
 8013856:	e731      	b.n	80136bc <handle_mqtt_conf+0x80>
 8013858:	080368f0 	.word	0x080368f0
 801385c:	2000285c 	.word	0x2000285c
 8013860:	080370fc 	.word	0x080370fc
 8013864:	08037148 	.word	0x08037148
 8013868:	0803692c 	.word	0x0803692c
 801386c:	0803710c 	.word	0x0803710c
 8013870:	08037104 	.word	0x08037104
 8013874:	08036a88 	.word	0x08036a88
 8013878:	08037190 	.word	0x08037190
 801387c:	080371c4 	.word	0x080371c4
 8013880:	080371d0 	.word	0x080371d0
 8013884:	08037194 	.word	0x08037194
 8013888:	08037318 	.word	0x08037318
 801388c:	08037324 	.word	0x08037324
 8013890:	08037330 	.word	0x08037330
 8013894:	080371dc 	.word	0x080371dc
 8013898:	08037220 	.word	0x08037220
 801389c:	0803726c 	.word	0x0803726c
 80138a0:	080372ac 	.word	0x080372ac
 80138a4:	080372e4 	.word	0x080372e4
 80138a8:	080370a8 	.word	0x080370a8

080138ac <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 80138ac:	b570      	push	{r4, r5, r6, lr}
 80138ae:	b08a      	sub	sp, #40	@ 0x28
 80138b0:	4606      	mov	r6, r0
 80138b2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80138b4:	ad04      	add	r5, sp, #16
 80138b6:	495e      	ldr	r1, [pc, #376]	@ (8013a30 <handle_mb_tcp_access_list+0x184>)
 80138b8:	4628      	mov	r0, r5
 80138ba:	f010 fe69 	bl	8024590 <mg_str_s>
 80138be:	2300      	movs	r3, #0
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80138c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80138ca:	f011 f883 	bl	80249d4 <mg_match>
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d03d      	beq.n	801394e <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 80138d2:	2200      	movs	r2, #0
 80138d4:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 80138d6:	a903      	add	r1, sp, #12
 80138d8:	4856      	ldr	r0, [pc, #344]	@ (8013a34 <handle_mb_tcp_access_list+0x188>)
 80138da:	f007 fae5 	bl	801aea8 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 80138de:	9803      	ldr	r0, [sp, #12]
 80138e0:	1e42      	subs	r2, r0, #1
 80138e2:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d829      	bhi.n	801393e <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 80138ea:	2101      	movs	r1, #1
 80138ec:	4408      	add	r0, r1
 80138ee:	f7ff fe97 	bl	8013620 <mg_calloc>
			if (acl == NULL){
 80138f2:	4604      	mov	r4, r0
 80138f4:	b1b8      	cbz	r0, 8013926 <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 80138f6:	2101      	movs	r1, #1
 80138f8:	484e      	ldr	r0, [pc, #312]	@ (8013a34 <handle_mb_tcp_access_list+0x188>)
 80138fa:	f007 fb13 	bl	801af24 <mg_fs_lfs_open>
 80138fe:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 8013900:	9a03      	ldr	r2, [sp, #12]
 8013902:	4621      	mov	r1, r4
 8013904:	f007 fb3e 	bl	801af84 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013908:	4628      	mov	r0, r5
 801390a:	f007 fb2f 	bl	801af6c <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 801390e:	9400      	str	r4, [sp, #0]
 8013910:	4b49      	ldr	r3, [pc, #292]	@ (8013a38 <handle_mb_tcp_access_list+0x18c>)
 8013912:	4a4a      	ldr	r2, [pc, #296]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 8013914:	21c8      	movs	r1, #200	@ 0xc8
 8013916:	4630      	mov	r0, r6
 8013918:	f010 fcb0 	bl	802427c <mg_http_reply>
	        free(acl);
 801391c:	4620      	mov	r0, r4
 801391e:	f007 f9dd 	bl	801acdc <vPortFree>
}
 8013922:	b00a      	add	sp, #40	@ 0x28
 8013924:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013926:	4946      	ldr	r1, [pc, #280]	@ (8013a40 <handle_mb_tcp_access_list+0x194>)
 8013928:	2003      	movs	r0, #3
 801392a:	f7fe fbdf 	bl	80120ec <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801392e:	4b45      	ldr	r3, [pc, #276]	@ (8013a44 <handle_mb_tcp_access_list+0x198>)
 8013930:	4a42      	ldr	r2, [pc, #264]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 8013932:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013936:	4630      	mov	r0, r6
 8013938:	f010 fca0 	bl	802427c <mg_http_reply>
		        return;
 801393c:	e7f1      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 801393e:	4b42      	ldr	r3, [pc, #264]	@ (8013a48 <handle_mb_tcp_access_list+0x19c>)
 8013940:	4a3e      	ldr	r2, [pc, #248]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 8013942:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013946:	4630      	mov	r0, r6
 8013948:	f010 fc98 	bl	802427c <mg_http_reply>
	        return;
 801394c:	e7e9      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 801394e:	ad06      	add	r5, sp, #24
 8013950:	493e      	ldr	r1, [pc, #248]	@ (8013a4c <handle_mb_tcp_access_list+0x1a0>)
 8013952:	4628      	mov	r0, r5
 8013954:	f010 fe1c 	bl	8024590 <mg_str_s>
 8013958:	2300      	movs	r3, #0
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013960:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013964:	f011 f836 	bl	80249d4 <mg_match>
 8013968:	2800      	cmp	r0, #0
 801396a:	d058      	beq.n	8013a1e <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 801396c:	ab03      	add	r3, sp, #12
 801396e:	4a38      	ldr	r2, [pc, #224]	@ (8013a50 <handle_mb_tcp_access_list+0x1a4>)
 8013970:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013974:	c903      	ldmia	r1, {r0, r1}
 8013976:	f00f fadd 	bl	8022f34 <mg_json_get>
 801397a:	2800      	cmp	r0, #0
 801397c:	db34      	blt.n	80139e8 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 801397e:	4a35      	ldr	r2, [pc, #212]	@ (8013a54 <handle_mb_tcp_access_list+0x1a8>)
 8013980:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013988:	f011 fef2 	bl	8025770 <mg_json_get_str>
		if (acl){
 801398c:	4604      	mov	r4, r0
 801398e:	2800      	cmp	r0, #0
 8013990:	d03d      	beq.n	8013a0e <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 8013992:	ad08      	add	r5, sp, #32
 8013994:	4601      	mov	r1, r0
 8013996:	4628      	mov	r0, r5
 8013998:	f010 fdfa 	bl	8024590 <mg_str_s>
 801399c:	f106 021c 	add.w	r2, r6, #28
 80139a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80139a4:	f012 fd02 	bl	80263ac <mg_check_ip_acl>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	db25      	blt.n	80139f8 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 80139ac:	4d21      	ldr	r5, [pc, #132]	@ (8013a34 <handle_mb_tcp_access_list+0x188>)
 80139ae:	4628      	mov	r0, r5
 80139b0:	f007 fb26 	bl	801b000 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 80139b4:	2102      	movs	r1, #2
 80139b6:	4628      	mov	r0, r5
 80139b8:	f007 fab4 	bl	801af24 <mg_fs_lfs_open>
 80139bc:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 80139be:	4620      	mov	r0, r4
 80139c0:	f7fc fc6e 	bl	80102a0 <strlen>
 80139c4:	1c42      	adds	r2, r0, #1
 80139c6:	4621      	mov	r1, r4
 80139c8:	4628      	mov	r0, r5
 80139ca:	f007 fae7 	bl	801af9c <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 80139ce:	4628      	mov	r0, r5
 80139d0:	f007 facc 	bl	801af6c <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 80139d4:	4b20      	ldr	r3, [pc, #128]	@ (8013a58 <handle_mb_tcp_access_list+0x1ac>)
 80139d6:	4a19      	ldr	r2, [pc, #100]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 80139d8:	21c8      	movs	r1, #200	@ 0xc8
 80139da:	4630      	mov	r0, r6
 80139dc:	f010 fc4e 	bl	802427c <mg_http_reply>
				free(acl);
 80139e0:	4620      	mov	r0, r4
 80139e2:	f007 f97b 	bl	801acdc <vPortFree>
				return;
 80139e6:	e79c      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 80139e8:	4b1c      	ldr	r3, [pc, #112]	@ (8013a5c <handle_mb_tcp_access_list+0x1b0>)
 80139ea:	4a14      	ldr	r2, [pc, #80]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 80139ec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80139f0:	4630      	mov	r0, r6
 80139f2:	f010 fc43 	bl	802427c <mg_http_reply>
			return;
 80139f6:	e794      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 80139f8:	4b19      	ldr	r3, [pc, #100]	@ (8013a60 <handle_mb_tcp_access_list+0x1b4>)
 80139fa:	4a10      	ldr	r2, [pc, #64]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 80139fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a00:	4630      	mov	r0, r6
 8013a02:	f010 fc3b 	bl	802427c <mg_http_reply>
				free(acl);
 8013a06:	4620      	mov	r0, r4
 8013a08:	f007 f968 	bl	801acdc <vPortFree>
				return;
 8013a0c:	e789      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013a0e:	4b15      	ldr	r3, [pc, #84]	@ (8013a64 <handle_mb_tcp_access_list+0x1b8>)
 8013a10:	4a0a      	ldr	r2, [pc, #40]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 8013a12:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a16:	4630      	mov	r0, r6
 8013a18:	f010 fc30 	bl	802427c <mg_http_reply>
			return;
 8013a1c:	e781      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013a1e:	4b12      	ldr	r3, [pc, #72]	@ (8013a68 <handle_mb_tcp_access_list+0x1bc>)
 8013a20:	4a06      	ldr	r2, [pc, #24]	@ (8013a3c <handle_mb_tcp_access_list+0x190>)
 8013a22:	f240 1195 	movw	r1, #405	@ 0x195
 8013a26:	4630      	mov	r0, r6
 8013a28:	f010 fc28 	bl	802427c <mg_http_reply>
		return;
 8013a2c:	e779      	b.n	8013922 <handle_mb_tcp_access_list+0x76>
 8013a2e:	bf00      	nop
 8013a30:	080368f0 	.word	0x080368f0
 8013a34:	08036830 	.word	0x08036830
 8013a38:	080373c8 	.word	0x080373c8
 8013a3c:	0803692c 	.word	0x0803692c
 8013a40:	0803736c 	.word	0x0803736c
 8013a44:	080373a0 	.word	0x080373a0
 8013a48:	080373f4 	.word	0x080373f4
 8013a4c:	08036a88 	.word	0x08036a88
 8013a50:	08037190 	.word	0x08037190
 8013a54:	08037428 	.word	0x08037428
 8013a58:	08037470 	.word	0x08037470
 8013a5c:	08037194 	.word	0x08037194
 8013a60:	08037438 	.word	0x08037438
 8013a64:	080374c4 	.word	0x080374c4
 8013a68:	0803750c 	.word	0x0803750c

08013a6c <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8013a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a70:	b0c7      	sub	sp, #284	@ 0x11c
 8013a72:	4681      	mov	r9, r0
 8013a74:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8013a76:	2272      	movs	r2, #114	@ 0x72
 8013a78:	498e      	ldr	r1, [pc, #568]	@ (8013cb4 <handle_dev_status+0x248>)
 8013a7a:	a827      	add	r0, sp, #156	@ 0x9c
 8013a7c:	f01a fb34 	bl	802e0e8 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8013a80:	2101      	movs	r1, #1
 8013a82:	201e      	movs	r0, #30
 8013a84:	f7ff fdcc 	bl	8013620 <mg_calloc>
 8013a88:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013a8a:	2101      	movs	r1, #1
 8013a8c:	202e      	movs	r0, #46	@ 0x2e
 8013a8e:	f7ff fdc7 	bl	8013620 <mg_calloc>
 8013a92:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8013a94:	2101      	movs	r1, #1
 8013a96:	202e      	movs	r0, #46	@ 0x2e
 8013a98:	f7ff fdc2 	bl	8013620 <mg_calloc>
 8013a9c:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013a9e:	2101      	movs	r1, #1
 8013aa0:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013aa4:	f7ff fdbc 	bl	8013620 <mg_calloc>
 8013aa8:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013aaa:	2101      	movs	r1, #1
 8013aac:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013ab0:	f7ff fdb6 	bl	8013620 <mg_calloc>
 8013ab4:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8013ab6:	2e00      	cmp	r6, #0
 8013ab8:	f000 80e3 	beq.w	8013c82 <handle_dev_status+0x216>
 8013abc:	2f00      	cmp	r7, #0
 8013abe:	f000 80e0 	beq.w	8013c82 <handle_dev_status+0x216>
 8013ac2:	f1b8 0f00 	cmp.w	r8, #0
 8013ac6:	f000 80dc 	beq.w	8013c82 <handle_dev_status+0x216>
 8013aca:	2c00      	cmp	r4, #0
 8013acc:	f000 80d9 	beq.w	8013c82 <handle_dev_status+0x216>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	f000 80d6 	beq.w	8013c82 <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013ad6:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8013ada:	4977      	ldr	r1, [pc, #476]	@ (8013cb8 <handle_dev_status+0x24c>)
 8013adc:	4658      	mov	r0, fp
 8013ade:	f010 fd57 	bl	8024590 <mg_str_s>
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8013aea:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013aee:	f010 ff71 	bl	80249d4 <mg_match>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	f000 80bd 	beq.w	8013c72 <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013af8:	f001 fbba 	bl	8015270 <get_mqtt_connection>
			if(!mqtt_connection){
 8013afc:	4682      	mov	sl, r0
 8013afe:	b358      	cbz	r0, 8013b58 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013b00:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013b04:	f013 0f20 	tst.w	r3, #32
 8013b08:	d12c      	bne.n	8013b64 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013b0a:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8013b0e:	f013 0f20 	tst.w	r3, #32
 8013b12:	d02d      	beq.n	8013b70 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013b14:	221e      	movs	r2, #30
 8013b16:	4969      	ldr	r1, [pc, #420]	@ (8013cbc <handle_dev_status+0x250>)
 8013b18:	4630      	mov	r0, r6
 8013b1a:	f019 f8f0 	bl	802ccfe <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013b1e:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013ce4 <handle_dev_status+0x278>
 8013b22:	f10a 0308 	add.w	r3, sl, #8
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	465b      	mov	r3, fp
 8013b2a:	4a65      	ldr	r2, [pc, #404]	@ (8013cc0 <handle_dev_status+0x254>)
 8013b2c:	212e      	movs	r1, #46	@ 0x2e
 8013b2e:	4640      	mov	r0, r8
 8013b30:	f00f fea6 	bl	8023880 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013b34:	f10a 031c 	add.w	r3, sl, #28
 8013b38:	9300      	str	r3, [sp, #0]
 8013b3a:	465b      	mov	r3, fp
 8013b3c:	4a60      	ldr	r2, [pc, #384]	@ (8013cc0 <handle_dev_status+0x254>)
 8013b3e:	212e      	movs	r1, #46	@ 0x2e
 8013b40:	4638      	mov	r0, r7
 8013b42:	f00f fe9d 	bl	8023880 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 8013b46:	4620      	mov	r0, r4
 8013b48:	f7fc fbaa 	bl	80102a0 <strlen>
 8013b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8013cc4 <handle_dev_status+0x258>)
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013b52:	f04f 0a01 	mov.w	sl, #1
 8013b56:	e028      	b.n	8013baa <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 8013b58:	221e      	movs	r2, #30
 8013b5a:	495b      	ldr	r1, [pc, #364]	@ (8013cc8 <handle_dev_status+0x25c>)
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f019 f8ce 	bl	802ccfe <strncpy>
 8013b62:	e7f0      	b.n	8013b46 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 8013b64:	221e      	movs	r2, #30
 8013b66:	4959      	ldr	r1, [pc, #356]	@ (8013ccc <handle_dev_status+0x260>)
 8013b68:	4630      	mov	r0, r6
 8013b6a:	f019 f8c8 	bl	802ccfe <strncpy>
 8013b6e:	e7d6      	b.n	8013b1e <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 8013b70:	221e      	movs	r2, #30
 8013b72:	4957      	ldr	r1, [pc, #348]	@ (8013cd0 <handle_dev_status+0x264>)
 8013b74:	4630      	mov	r0, r6
 8013b76:	f019 f8c2 	bl	802ccfe <strncpy>
 8013b7a:	e7d0      	b.n	8013b1e <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8013b7c:	fa5f f38a 	uxtb.w	r3, sl
 8013b80:	2201      	movs	r2, #1
 8013b82:	2180      	movs	r1, #128	@ 0x80
 8013b84:	a807      	add	r0, sp, #28
 8013b86:	f001 ff63 	bl	8015a50 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013b8a:	a907      	add	r1, sp, #28
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	f019 f877 	bl	802cc80 <strcat>
				strcat(pub_topics_str, "\", \"");
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7fc fb84 	bl	80102a0 <strlen>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	1821      	adds	r1, r4, r0
 8013b9c:	4a4d      	ldr	r2, [pc, #308]	@ (8013cd4 <handle_dev_status+0x268>)
 8013b9e:	6810      	ldr	r0, [r2, #0]
 8013ba0:	50e0      	str	r0, [r4, r3]
 8013ba2:	7913      	ldrb	r3, [r2, #4]
 8013ba4:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013ba6:	f10a 0a01 	add.w	sl, sl, #1
 8013baa:	f1ba 0f03 	cmp.w	sl, #3
 8013bae:	dde5      	ble.n	8013b7c <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013bb0:	f04f 0a01 	mov.w	sl, #1
 8013bb4:	e007      	b.n	8013bc6 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f7fc fb72 	bl	80102a0 <strlen>
 8013bbc:	4b41      	ldr	r3, [pc, #260]	@ (8013cc4 <handle_dev_status+0x258>)
 8013bbe:	881b      	ldrh	r3, [r3, #0]
 8013bc0:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013bc2:	f10a 0a01 	add.w	sl, sl, #1
 8013bc6:	f1ba 0f03 	cmp.w	sl, #3
 8013bca:	dc18      	bgt.n	8013bfe <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013bcc:	fa5f f38a 	uxtb.w	r3, sl
 8013bd0:	2202      	movs	r2, #2
 8013bd2:	2180      	movs	r1, #128	@ 0x80
 8013bd4:	a807      	add	r0, sp, #28
 8013bd6:	f001 ff3b 	bl	8015a50 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013bda:	a907      	add	r1, sp, #28
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f019 f84f 	bl	802cc80 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013be2:	f1ba 0f02 	cmp.w	sl, #2
 8013be6:	dce6      	bgt.n	8013bb6 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8013be8:	4620      	mov	r0, r4
 8013bea:	f7fc fb59 	bl	80102a0 <strlen>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	1821      	adds	r1, r4, r0
 8013bf2:	4a38      	ldr	r2, [pc, #224]	@ (8013cd4 <handle_dev_status+0x268>)
 8013bf4:	6810      	ldr	r0, [r2, #0]
 8013bf6:	50e0      	str	r0, [r4, r3]
 8013bf8:	7913      	ldrb	r3, [r2, #4]
 8013bfa:	710b      	strb	r3, [r1, #4]
 8013bfc:	e7e1      	b.n	8013bc2 <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8013bfe:	4628      	mov	r0, r5
 8013c00:	f7fc fb4e 	bl	80102a0 <strlen>
 8013c04:	4b2f      	ldr	r3, [pc, #188]	@ (8013cc4 <handle_dev_status+0x258>)
 8013c06:	881b      	ldrh	r3, [r3, #0]
 8013c08:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013c0a:	f04f 0a01 	mov.w	sl, #1
 8013c0e:	e007      	b.n	8013c20 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013c10:	4628      	mov	r0, r5
 8013c12:	f7fc fb45 	bl	80102a0 <strlen>
 8013c16:	4b2b      	ldr	r3, [pc, #172]	@ (8013cc4 <handle_dev_status+0x258>)
 8013c18:	881b      	ldrh	r3, [r3, #0]
 8013c1a:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013c1c:	f10a 0a01 	add.w	sl, sl, #1
 8013c20:	f1ba 0f03 	cmp.w	sl, #3
 8013c24:	dc18      	bgt.n	8013c58 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013c26:	fa5f f38a 	uxtb.w	r3, sl
 8013c2a:	2202      	movs	r2, #2
 8013c2c:	2180      	movs	r1, #128	@ 0x80
 8013c2e:	a807      	add	r0, sp, #28
 8013c30:	f001 fef6 	bl	8015a20 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013c34:	a907      	add	r1, sp, #28
 8013c36:	4628      	mov	r0, r5
 8013c38:	f019 f822 	bl	802cc80 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013c3c:	f1ba 0f02 	cmp.w	sl, #2
 8013c40:	dce6      	bgt.n	8013c10 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013c42:	4628      	mov	r0, r5
 8013c44:	f7fc fb2c 	bl	80102a0 <strlen>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	1829      	adds	r1, r5, r0
 8013c4c:	4a21      	ldr	r2, [pc, #132]	@ (8013cd4 <handle_dev_status+0x268>)
 8013c4e:	6810      	ldr	r0, [r2, #0]
 8013c50:	50e8      	str	r0, [r5, r3]
 8013c52:	7913      	ldrb	r3, [r2, #4]
 8013c54:	710b      	strb	r3, [r1, #4]
 8013c56:	e7e1      	b.n	8013c1c <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013c58:	9504      	str	r5, [sp, #16]
 8013c5a:	9403      	str	r4, [sp, #12]
 8013c5c:	9702      	str	r7, [sp, #8]
 8013c5e:	f8cd 8004 	str.w	r8, [sp, #4]
 8013c62:	9600      	str	r6, [sp, #0]
 8013c64:	ab27      	add	r3, sp, #156	@ 0x9c
 8013c66:	4a1c      	ldr	r2, [pc, #112]	@ (8013cd8 <handle_dev_status+0x26c>)
 8013c68:	21c8      	movs	r1, #200	@ 0xc8
 8013c6a:	4648      	mov	r0, r9
 8013c6c:	f010 fb06 	bl	802427c <mg_http_reply>
 8013c70:	e00e      	b.n	8013c90 <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 8013c72:	4b1a      	ldr	r3, [pc, #104]	@ (8013cdc <handle_dev_status+0x270>)
 8013c74:	4a18      	ldr	r2, [pc, #96]	@ (8013cd8 <handle_dev_status+0x26c>)
 8013c76:	f240 1195 	movw	r1, #405	@ 0x195
 8013c7a:	4648      	mov	r0, r9
 8013c7c:	f010 fafe 	bl	802427c <mg_http_reply>
 8013c80:	e006      	b.n	8013c90 <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 8013c82:	4b17      	ldr	r3, [pc, #92]	@ (8013ce0 <handle_dev_status+0x274>)
 8013c84:	4a14      	ldr	r2, [pc, #80]	@ (8013cd8 <handle_dev_status+0x26c>)
 8013c86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013c8a:	4648      	mov	r0, r9
 8013c8c:	f010 faf6 	bl	802427c <mg_http_reply>
	free(mqtt_status_str);
 8013c90:	4630      	mov	r0, r6
 8013c92:	f007 f823 	bl	801acdc <vPortFree>
	free(mqtt_server_addr);
 8013c96:	4638      	mov	r0, r7
 8013c98:	f007 f820 	bl	801acdc <vPortFree>
	free(mqtt_local_addr);
 8013c9c:	4640      	mov	r0, r8
 8013c9e:	f007 f81d 	bl	801acdc <vPortFree>
	free(pub_topics_str);
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f007 f81a 	bl	801acdc <vPortFree>
	free(subscr_topics_str);
 8013ca8:	4628      	mov	r0, r5
 8013caa:	f007 f817 	bl	801acdc <vPortFree>
}
 8013cae:	b047      	add	sp, #284	@ 0x11c
 8013cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cb4:	080375cc 	.word	0x080375cc
 8013cb8:	080368f0 	.word	0x080368f0
 8013cbc:	0803756c 	.word	0x0803756c
 8013cc0:	08037580 	.word	0x08037580
 8013cc4:	08037584 	.word	0x08037584
 8013cc8:	0803b38c 	.word	0x0803b38c
 8013ccc:	08037560 	.word	0x08037560
 8013cd0:	08037574 	.word	0x08037574
 8013cd4:	08037588 	.word	0x08037588
 8013cd8:	0803692c 	.word	0x0803692c
 8013cdc:	080370a8 	.word	0x080370a8
 8013ce0:	08037590 	.word	0x08037590
 8013ce4:	0802632d 	.word	0x0802632d

08013ce8 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8013ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cea:	b08d      	sub	sp, #52	@ 0x34
 8013cec:	4607      	mov	r7, r0
 8013cee:	460c      	mov	r4, r1
 8013cf0:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013cf2:	ae08      	add	r6, sp, #32
 8013cf4:	4923      	ldr	r1, [pc, #140]	@ (8013d84 <handle_fs_get_log+0x9c>)
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f010 fc4a 	bl	8024590 <mg_str_s>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d08:	f010 fe64 	bl	80249d4 <mg_match>
 8013d0c:	b318      	cbz	r0, 8013d56 <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8013d0e:	2300      	movs	r3, #0
 8013d10:	9302      	str	r3, [sp, #8]
 8013d12:	9303      	str	r3, [sp, #12]
 8013d14:	9304      	str	r3, [sp, #16]
 8013d16:	9305      	str	r3, [sp, #20]
 8013d18:	9306      	str	r3, [sp, #24]
 8013d1a:	9307      	str	r3, [sp, #28]
 8013d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8013d88 <handle_fs_get_log+0xa0>)
 8013d1e:	9302      	str	r3, [sp, #8]
 8013d20:	4b1a      	ldr	r3, [pc, #104]	@ (8013d8c <handle_fs_get_log+0xa4>)
 8013d22:	9307      	str	r3, [sp, #28]
		switch (number) {
 8013d24:	b145      	cbz	r5, 8013d38 <handle_fs_get_log+0x50>
 8013d26:	2d01      	cmp	r5, #1
 8013d28:	d00e      	beq.n	8013d48 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013d2a:	ab02      	add	r3, sp, #8
 8013d2c:	4a18      	ldr	r2, [pc, #96]	@ (8013d90 <handle_fs_get_log+0xa8>)
 8013d2e:	4621      	mov	r1, r4
 8013d30:	4638      	mov	r0, r7
 8013d32:	f011 f80b 	bl	8024d4c <mg_http_serve_file>
				break;
 8013d36:	e005      	b.n	8013d44 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013d38:	ab02      	add	r3, sp, #8
 8013d3a:	4a15      	ldr	r2, [pc, #84]	@ (8013d90 <handle_fs_get_log+0xa8>)
 8013d3c:	4621      	mov	r1, r4
 8013d3e:	4638      	mov	r0, r7
 8013d40:	f011 f804 	bl	8024d4c <mg_http_serve_file>
}
 8013d44:	b00d      	add	sp, #52	@ 0x34
 8013d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013d48:	ab02      	add	r3, sp, #8
 8013d4a:	4a12      	ldr	r2, [pc, #72]	@ (8013d94 <handle_fs_get_log+0xac>)
 8013d4c:	4621      	mov	r1, r4
 8013d4e:	4638      	mov	r0, r7
 8013d50:	f010 fffc 	bl	8024d4c <mg_http_serve_file>
				break;
 8013d54:	e7f6      	b.n	8013d44 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013d56:	ad0a      	add	r5, sp, #40	@ 0x28
 8013d58:	490f      	ldr	r1, [pc, #60]	@ (8013d98 <handle_fs_get_log+0xb0>)
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	f010 fc18 	bl	8024590 <mg_str_s>
 8013d60:	2300      	movs	r3, #0
 8013d62:	9300      	str	r3, [sp, #0]
 8013d64:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d6c:	f010 fe32 	bl	80249d4 <mg_match>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d1e7      	bne.n	8013d44 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013d74:	4b09      	ldr	r3, [pc, #36]	@ (8013d9c <handle_fs_get_log+0xb4>)
 8013d76:	4a0a      	ldr	r2, [pc, #40]	@ (8013da0 <handle_fs_get_log+0xb8>)
 8013d78:	f240 1195 	movw	r1, #405	@ 0x195
 8013d7c:	4638      	mov	r0, r7
 8013d7e:	f010 fa7d 	bl	802427c <mg_http_reply>
}
 8013d82:	e7df      	b.n	8013d44 <handle_fs_get_log+0x5c>
 8013d84:	080368f0 	.word	0x080368f0
 8013d88:	08037d84 	.word	0x08037d84
 8013d8c:	200000a0 	.word	0x200000a0
 8013d90:	080363e4 	.word	0x080363e4
 8013d94:	080363f4 	.word	0x080363f4
 8013d98:	08036a88 	.word	0x08036a88
 8013d9c:	08037640 	.word	0x08037640
 8013da0:	0803692c 	.word	0x0803692c

08013da4 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8013da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013da6:	4604      	mov	r4, r0
 8013da8:	460d      	mov	r5, r1
 8013daa:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013dac:	4f0b      	ldr	r7, [pc, #44]	@ (8013ddc <write_users+0x38>)
 8013dae:	6a3b      	ldr	r3, [r7, #32]
 8013db0:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013db2:	2202      	movs	r2, #2
 8013db4:	4621      	mov	r1, r4
 8013db6:	4638      	mov	r0, r7
 8013db8:	f00e ffd2 	bl	8022d60 <mg_fs_open>
 8013dbc:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	22a9      	movs	r2, #169	@ 0xa9
 8013dc2:	fb06 f202 	mul.w	r2, r6, r2
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	6800      	ldr	r0, [r0, #0]
 8013dca:	4798      	blx	r3
	mg_fs_close(fd);
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f00e ffe0 	bl	8022d92 <mg_fs_close>
	logging(L_INFO, "Saved web users to file");
 8013dd2:	4903      	ldr	r1, [pc, #12]	@ (8013de0 <write_users+0x3c>)
 8013dd4:	2001      	movs	r0, #1
 8013dd6:	f7fe f989 	bl	80120ec <logging>
}
 8013dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ddc:	200000a0 	.word	0x200000a0
 8013de0:	08037698 	.word	0x08037698

08013de4 <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8013de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de8:	b0ae      	sub	sp, #184	@ 0xb8
 8013dea:	4606      	mov	r6, r0
 8013dec:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013dee:	ad26      	add	r5, sp, #152	@ 0x98
 8013df0:	49a8      	ldr	r1, [pc, #672]	@ (8014094 <handle_manage_user+0x2b0>)
 8013df2:	4628      	mov	r0, r5
 8013df4:	f010 fbcc 	bl	8024590 <mg_str_s>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	9300      	str	r3, [sp, #0]
 8013dfc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e04:	f010 fde6 	bl	80249d4 <mg_match>
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	d143      	bne.n	8013e94 <handle_manage_user+0xb0>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013e0c:	ad28      	add	r5, sp, #160	@ 0xa0
 8013e0e:	49a2      	ldr	r1, [pc, #648]	@ (8014098 <handle_manage_user+0x2b4>)
 8013e10:	4628      	mov	r0, r5
 8013e12:	f010 fbbd 	bl	8024590 <mg_str_s>
 8013e16:	2300      	movs	r3, #0
 8013e18:	9300      	str	r3, [sp, #0]
 8013e1a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e22:	f010 fdd7 	bl	80249d4 <mg_match>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	f000 80fd 	beq.w	8014026 <handle_manage_user+0x242>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013e2c:	ab03      	add	r3, sp, #12
 8013e2e:	4a9b      	ldr	r2, [pc, #620]	@ (801409c <handle_manage_user+0x2b8>)
 8013e30:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013e34:	c903      	ldmia	r1, {r0, r1}
 8013e36:	f00f f87d 	bl	8022f34 <mg_json_get>
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	f2c0 8089 	blt.w	8013f52 <handle_manage_user+0x16e>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8013e40:	4a97      	ldr	r2, [pc, #604]	@ (80140a0 <handle_manage_user+0x2bc>)
 8013e42:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e4a:	f011 fc91 	bl	8025770 <mg_json_get_str>
 8013e4e:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8013e50:	4a94      	ldr	r2, [pc, #592]	@ (80140a4 <handle_manage_user+0x2c0>)
 8013e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013e56:	f011 fc8b 	bl	8025770 <mg_json_get_str>
 8013e5a:	4607      	mov	r7, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013e5c:	2d00      	cmp	r5, #0
 8013e5e:	f000 80d4 	beq.w	801400a <handle_manage_user+0x226>
 8013e62:	2800      	cmp	r0, #0
 8013e64:	f000 80d1 	beq.w	801400a <handle_manage_user+0x226>
 8013e68:	782b      	ldrb	r3, [r5, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 80cd 	beq.w	801400a <handle_manage_user+0x226>
 8013e70:	7803      	ldrb	r3, [r0, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f000 80c9 	beq.w	801400a <handle_manage_user+0x226>
	        for (int i = 0; i < user_list_size; i++) {
 8013e78:	2400      	movs	r4, #0
 8013e7a:	2c09      	cmp	r4, #9
 8013e7c:	dc7f      	bgt.n	8013f7e <handle_manage_user+0x19a>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013e7e:	4629      	mov	r1, r5
 8013e80:	20a9      	movs	r0, #169	@ 0xa9
 8013e82:	4b89      	ldr	r3, [pc, #548]	@ (80140a8 <handle_manage_user+0x2c4>)
 8013e84:	fb00 3004 	mla	r0, r0, r4, r3
 8013e88:	f7fc f9aa 	bl	80101e0 <strcmp>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d068      	beq.n	8013f62 <handle_manage_user+0x17e>
	        for (int i = 0; i < user_list_size; i++) {
 8013e90:	3401      	adds	r4, #1
 8013e92:	e7f2      	b.n	8013e7a <handle_manage_user+0x96>
	    char *response = calloc(response_len, sizeof(char));
 8013e94:	2101      	movs	r1, #1
 8013e96:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013e9a:	f7ff fbc1 	bl	8013620 <mg_calloc>
 8013e9e:	4607      	mov	r7, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013ea0:	2101      	movs	r1, #1
 8013ea2:	20a0      	movs	r0, #160	@ 0xa0
 8013ea4:	f7ff fbbc 	bl	8013620 <mg_calloc>
 8013ea8:	4680      	mov	r8, r0
	    if (response && user_entry) {
 8013eaa:	2f00      	cmp	r7, #0
 8013eac:	d03d      	beq.n	8013f2a <handle_manage_user+0x146>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d03b      	beq.n	8013f2a <handle_manage_user+0x146>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80140ac <handle_manage_user+0x2c8>)
 8013eb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013eb6:	6038      	str	r0, [r7, #0]
 8013eb8:	6079      	str	r1, [r7, #4]
 8013eba:	60ba      	str	r2, [r7, #8]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	733b      	strb	r3, [r7, #12]
 8013ec0:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 8013ec2:	2400      	movs	r4, #0
 8013ec4:	e008      	b.n	8013ed8 <handle_manage_user+0xf4>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013ec6:	4643      	mov	r3, r8
 8013ec8:	4a79      	ldr	r2, [pc, #484]	@ (80140b0 <handle_manage_user+0x2cc>)
 8013eca:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013ece:	1978      	adds	r0, r7, r5
 8013ed0:	f018 f9a4 	bl	802c21c <snprintf>
 8013ed4:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 8013ed6:	3401      	adds	r4, #1
 8013ed8:	2c09      	cmp	r4, #9
 8013eda:	dc18      	bgt.n	8013f0e <handle_manage_user+0x12a>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013edc:	22a9      	movs	r2, #169	@ 0xa9
 8013ede:	fb04 f202 	mul.w	r2, r4, r2
 8013ee2:	4b71      	ldr	r3, [pc, #452]	@ (80140a8 <handle_manage_user+0x2c4>)
 8013ee4:	5c9a      	ldrb	r2, [r3, r2]
 8013ee6:	2a00      	cmp	r2, #0
 8013ee8:	d0f5      	beq.n	8013ed6 <handle_manage_user+0xf2>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013eea:	22a9      	movs	r2, #169	@ 0xa9
 8013eec:	fb02 3304 	mla	r3, r2, r4, r3
 8013ef0:	4a70      	ldr	r2, [pc, #448]	@ (80140b4 <handle_manage_user+0x2d0>)
 8013ef2:	21a0      	movs	r1, #160	@ 0xa0
 8013ef4:	4640      	mov	r0, r8
 8013ef6:	f018 f991 	bl	802c21c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013efa:	2d0c      	cmp	r5, #12
 8013efc:	d9e3      	bls.n	8013ec6 <handle_manage_user+0xe2>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013efe:	4a6e      	ldr	r2, [pc, #440]	@ (80140b8 <handle_manage_user+0x2d4>)
 8013f00:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013f04:	1978      	adds	r0, r7, r5
 8013f06:	f018 f989 	bl	802c21c <snprintf>
 8013f0a:	4405      	add	r5, r0
 8013f0c:	e7db      	b.n	8013ec6 <handle_manage_user+0xe2>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8013f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80140bc <handle_manage_user+0x2d8>)
 8013f10:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013f14:	1978      	adds	r0, r7, r5
 8013f16:	f018 f981 	bl	802c21c <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8013f1a:	9700      	str	r7, [sp, #0]
 8013f1c:	4b64      	ldr	r3, [pc, #400]	@ (80140b0 <handle_manage_user+0x2cc>)
 8013f1e:	4a68      	ldr	r2, [pc, #416]	@ (80140c0 <handle_manage_user+0x2dc>)
 8013f20:	21c8      	movs	r1, #200	@ 0xc8
 8013f22:	4630      	mov	r0, r6
 8013f24:	f010 f9aa 	bl	802427c <mg_http_reply>
 8013f28:	e00a      	b.n	8013f40 <handle_manage_user+0x15c>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013f2a:	4966      	ldr	r1, [pc, #408]	@ (80140c4 <handle_manage_user+0x2e0>)
 8013f2c:	2003      	movs	r0, #3
 8013f2e:	f7fe f8dd 	bl	80120ec <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013f32:	4b65      	ldr	r3, [pc, #404]	@ (80140c8 <handle_manage_user+0x2e4>)
 8013f34:	4a62      	ldr	r2, [pc, #392]	@ (80140c0 <handle_manage_user+0x2dc>)
 8013f36:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	f010 f99e 	bl	802427c <mg_http_reply>
	    free(response);
 8013f40:	4638      	mov	r0, r7
 8013f42:	f006 fecb 	bl	801acdc <vPortFree>
	    free(user_entry);
 8013f46:	4640      	mov	r0, r8
 8013f48:	f006 fec8 	bl	801acdc <vPortFree>
}
 8013f4c:	b02e      	add	sp, #184	@ 0xb8
 8013f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        mg_http_reply(c, 400, headers,
 8013f52:	4b5e      	ldr	r3, [pc, #376]	@ (80140cc <handle_manage_user+0x2e8>)
 8013f54:	4a5a      	ldr	r2, [pc, #360]	@ (80140c0 <handle_manage_user+0x2dc>)
 8013f56:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f010 f98e 	bl	802427c <mg_http_reply>
	        return;
 8013f60:	e7f4      	b.n	8013f4c <handle_manage_user+0x168>
	                mg_http_reply(c, 400, headers,
 8013f62:	4b5b      	ldr	r3, [pc, #364]	@ (80140d0 <handle_manage_user+0x2ec>)
 8013f64:	4a56      	ldr	r2, [pc, #344]	@ (80140c0 <handle_manage_user+0x2dc>)
 8013f66:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	f010 f986 	bl	802427c <mg_http_reply>
	                free(username_add);
 8013f70:	4628      	mov	r0, r5
 8013f72:	f006 feb3 	bl	801acdc <vPortFree>
	                free(password_add);
 8013f76:	4638      	mov	r0, r7
 8013f78:	f006 feb0 	bl	801acdc <vPortFree>
	                return;
 8013f7c:	e7e6      	b.n	8013f4c <handle_manage_user+0x168>
			char add_pass_digest[sha1_str_len] = {0};
 8013f7e:	2400      	movs	r4, #0
 8013f80:	9404      	str	r4, [sp, #16]
 8013f82:	2225      	movs	r2, #37	@ 0x25
 8013f84:	4621      	mov	r1, r4
 8013f86:	a805      	add	r0, sp, #20
 8013f88:	f018 fe72 	bl	802cc70 <memset>
			mg_sha1_init(&sha1_ctx);
 8013f8c:	a80f      	add	r0, sp, #60	@ 0x3c
 8013f8e:	f010 fa4d 	bl	802442c <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8013f92:	4638      	mov	r0, r7
 8013f94:	f7fc f984 	bl	80102a0 <strlen>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	4639      	mov	r1, r7
 8013f9c:	a80f      	add	r0, sp, #60	@ 0x3c
 8013f9e:	f010 fa5f 	bl	8024460 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8013fa2:	a90f      	add	r1, sp, #60	@ 0x3c
 8013fa4:	a804      	add	r0, sp, #16
 8013fa6:	f010 fa95 	bl	80244d4 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 8013faa:	4621      	mov	r1, r4
 8013fac:	2909      	cmp	r1, #9
 8013fae:	dc24      	bgt.n	8013ffa <handle_manage_user+0x216>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8013fb0:	23a9      	movs	r3, #169	@ 0xa9
 8013fb2:	fb01 f303 	mul.w	r3, r1, r3
 8013fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80140a8 <handle_manage_user+0x2c4>)
 8013fb8:	5cd3      	ldrb	r3, [r2, r3]
 8013fba:	b10b      	cbz	r3, 8013fc0 <handle_manage_user+0x1dc>
	        for (int i = 0; i < user_list_size; i++) {
 8013fbc:	3101      	adds	r1, #1
 8013fbe:	e7f5      	b.n	8013fac <handle_manage_user+0x1c8>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8013fc0:	23a9      	movs	r3, #169	@ 0xa9
 8013fc2:	fb03 f401 	mul.w	r4, r3, r1
 8013fc6:	4690      	mov	r8, r2
 8013fc8:	227f      	movs	r2, #127	@ 0x7f
 8013fca:	4629      	mov	r1, r5
 8013fcc:	eb08 0004 	add.w	r0, r8, r4
 8013fd0:	f018 fe95 	bl	802ccfe <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013fd4:	3480      	adds	r4, #128	@ 0x80
 8013fd6:	2228      	movs	r2, #40	@ 0x28
 8013fd8:	a904      	add	r1, sp, #16
 8013fda:	eb08 0004 	add.w	r0, r8, r4
 8013fde:	f018 fe8e 	bl	802ccfe <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 8013fe2:	220a      	movs	r2, #10
 8013fe4:	4641      	mov	r1, r8
 8013fe6:	483b      	ldr	r0, [pc, #236]	@ (80140d4 <handle_manage_user+0x2f0>)
 8013fe8:	f7ff fedc 	bl	8013da4 <write_users>
	            mg_http_reply(c, 200, headers,
 8013fec:	4b3a      	ldr	r3, [pc, #232]	@ (80140d8 <handle_manage_user+0x2f4>)
 8013fee:	4a34      	ldr	r2, [pc, #208]	@ (80140c0 <handle_manage_user+0x2dc>)
 8013ff0:	21c8      	movs	r1, #200	@ 0xc8
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f010 f942 	bl	802427c <mg_http_reply>
 8013ff8:	e00e      	b.n	8014018 <handle_manage_user+0x234>
	            mg_http_reply(c, 400, headers,
 8013ffa:	4b38      	ldr	r3, [pc, #224]	@ (80140dc <handle_manage_user+0x2f8>)
 8013ffc:	4a30      	ldr	r2, [pc, #192]	@ (80140c0 <handle_manage_user+0x2dc>)
 8013ffe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014002:	4630      	mov	r0, r6
 8014004:	f010 f93a 	bl	802427c <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8014008:	e006      	b.n	8014018 <handle_manage_user+0x234>
	        mg_http_reply(c, 400, headers,
 801400a:	4b35      	ldr	r3, [pc, #212]	@ (80140e0 <handle_manage_user+0x2fc>)
 801400c:	4a2c      	ldr	r2, [pc, #176]	@ (80140c0 <handle_manage_user+0x2dc>)
 801400e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014012:	4630      	mov	r0, r6
 8014014:	f010 f932 	bl	802427c <mg_http_reply>
		free(username_add);
 8014018:	4628      	mov	r0, r5
 801401a:	f006 fe5f 	bl	801acdc <vPortFree>
		free(password_add);
 801401e:	4638      	mov	r0, r7
 8014020:	f006 fe5c 	bl	801acdc <vPortFree>
		return;
 8014024:	e792      	b.n	8013f4c <handle_manage_user+0x168>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8014026:	ad2a      	add	r5, sp, #168	@ 0xa8
 8014028:	492e      	ldr	r1, [pc, #184]	@ (80140e4 <handle_manage_user+0x300>)
 801402a:	4628      	mov	r0, r5
 801402c:	f010 fab0 	bl	8024590 <mg_str_s>
 8014030:	2300      	movs	r3, #0
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014038:	e894 0003 	ldmia.w	r4, {r0, r1}
 801403c:	f010 fcca 	bl	80249d4 <mg_match>
 8014040:	2800      	cmp	r0, #0
 8014042:	d155      	bne.n	80140f0 <handle_manage_user+0x30c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8014044:	ad2c      	add	r5, sp, #176	@ 0xb0
 8014046:	4928      	ldr	r1, [pc, #160]	@ (80140e8 <handle_manage_user+0x304>)
 8014048:	4628      	mov	r0, r5
 801404a:	f010 faa1 	bl	8024590 <mg_str_s>
 801404e:	2300      	movs	r3, #0
 8014050:	9300      	str	r3, [sp, #0]
 8014052:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014056:	e894 0003 	ldmia.w	r4, {r0, r1}
 801405a:	f010 fcbb 	bl	80249d4 <mg_match>
 801405e:	2800      	cmp	r0, #0
 8014060:	f000 80f3 	beq.w	801424a <handle_manage_user+0x466>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8014064:	4a0e      	ldr	r2, [pc, #56]	@ (80140a0 <handle_manage_user+0x2bc>)
 8014066:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801406a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801406e:	f011 fb7f 	bl	8025770 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8014072:	4607      	mov	r7, r0
 8014074:	b118      	cbz	r0, 801407e <handle_manage_user+0x29a>
 8014076:	7803      	ldrb	r3, [r0, #0]
 8014078:	2b00      	cmp	r3, #0
 801407a:	f040 80cf 	bne.w	801421c <handle_manage_user+0x438>
	        mg_http_reply(c, 400, headers,
 801407e:	4b1b      	ldr	r3, [pc, #108]	@ (80140ec <handle_manage_user+0x308>)
 8014080:	4a0f      	ldr	r2, [pc, #60]	@ (80140c0 <handle_manage_user+0x2dc>)
 8014082:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014086:	4630      	mov	r0, r6
 8014088:	f010 f8f8 	bl	802427c <mg_http_reply>
	    free(username_del);
 801408c:	4638      	mov	r0, r7
 801408e:	f006 fe25 	bl	801acdc <vPortFree>
 8014092:	e75b      	b.n	8013f4c <handle_manage_user+0x168>
 8014094:	080368f0 	.word	0x080368f0
 8014098:	08036a88 	.word	0x08036a88
 801409c:	08037190 	.word	0x08037190
 80140a0:	080376d8 	.word	0x080376d8
 80140a4:	080376e0 	.word	0x080376e0
 80140a8:	200021c0 	.word	0x200021c0
 80140ac:	080376b0 	.word	0x080376b0
 80140b0:	0803b398 	.word	0x0803b398
 80140b4:	080376c0 	.word	0x080376c0
 80140b8:	080376d0 	.word	0x080376d0
 80140bc:	080376d4 	.word	0x080376d4
 80140c0:	0803692c 	.word	0x0803692c
 80140c4:	0803736c 	.word	0x0803736c
 80140c8:	080373a0 	.word	0x080373a0
 80140cc:	08037194 	.word	0x08037194
 80140d0:	080376e8 	.word	0x080376e8
 80140d4:	08036258 	.word	0x08036258
 80140d8:	08037724 	.word	0x08037724
 80140dc:	08037760 	.word	0x08037760
 80140e0:	08037794 	.word	0x08037794
 80140e4:	080377d4 	.word	0x080377d4
 80140e8:	08037890 	.word	0x08037890
 80140ec:	0803792c 	.word	0x0803792c
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 80140f0:	ab03      	add	r3, sp, #12
 80140f2:	4a5a      	ldr	r2, [pc, #360]	@ (801425c <handle_manage_user+0x478>)
 80140f4:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80140f8:	c903      	ldmia	r1, {r0, r1}
 80140fa:	f00e ff1b 	bl	8022f34 <mg_json_get>
 80140fe:	2800      	cmp	r0, #0
 8014100:	db21      	blt.n	8014146 <handle_manage_user+0x362>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8014102:	4a57      	ldr	r2, [pc, #348]	@ (8014260 <handle_manage_user+0x47c>)
 8014104:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8014108:	e894 0003 	ldmia.w	r4, {r0, r1}
 801410c:	f011 fb30 	bl	8025770 <mg_json_get_str>
 8014110:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8014112:	4a54      	ldr	r2, [pc, #336]	@ (8014264 <handle_manage_user+0x480>)
 8014114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014118:	f011 fb2a 	bl	8025770 <mg_json_get_str>
 801411c:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 801411e:	b125      	cbz	r5, 801412a <handle_manage_user+0x346>
 8014120:	b118      	cbz	r0, 801412a <handle_manage_user+0x346>
 8014122:	782b      	ldrb	r3, [r5, #0]
 8014124:	b10b      	cbz	r3, 801412a <handle_manage_user+0x346>
 8014126:	7803      	ldrb	r3, [r0, #0]
 8014128:	b9bb      	cbnz	r3, 801415a <handle_manage_user+0x376>
	            mg_http_reply(c, 400, headers,
 801412a:	4b4f      	ldr	r3, [pc, #316]	@ (8014268 <handle_manage_user+0x484>)
 801412c:	4a4f      	ldr	r2, [pc, #316]	@ (801426c <handle_manage_user+0x488>)
 801412e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014132:	4630      	mov	r0, r6
 8014134:	f010 f8a2 	bl	802427c <mg_http_reply>
	    free(username_edit);
 8014138:	4628      	mov	r0, r5
 801413a:	f006 fdcf 	bl	801acdc <vPortFree>
	    free(new_password);
 801413e:	4620      	mov	r0, r4
 8014140:	f006 fdcc 	bl	801acdc <vPortFree>
	    return;
 8014144:	e702      	b.n	8013f4c <handle_manage_user+0x168>
	        mg_http_reply(c, 400, headers,
 8014146:	4b4a      	ldr	r3, [pc, #296]	@ (8014270 <handle_manage_user+0x48c>)
 8014148:	4a48      	ldr	r2, [pc, #288]	@ (801426c <handle_manage_user+0x488>)
 801414a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801414e:	4630      	mov	r0, r6
 8014150:	f010 f894 	bl	802427c <mg_http_reply>
	    char *new_password = NULL;
 8014154:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8014156:	4625      	mov	r5, r4
 8014158:	e7ee      	b.n	8014138 <handle_manage_user+0x354>
	            char new_pass_digest[sha1_str_len] = {0};
 801415a:	2700      	movs	r7, #0
 801415c:	9704      	str	r7, [sp, #16]
 801415e:	2225      	movs	r2, #37	@ 0x25
 8014160:	4639      	mov	r1, r7
 8014162:	a805      	add	r0, sp, #20
 8014164:	f018 fd84 	bl	802cc70 <memset>
	            mg_sha1_init(&sha1_ctx);
 8014168:	a80f      	add	r0, sp, #60	@ 0x3c
 801416a:	f010 f95f 	bl	802442c <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 801416e:	4620      	mov	r0, r4
 8014170:	f7fc f896 	bl	80102a0 <strlen>
 8014174:	4602      	mov	r2, r0
 8014176:	4621      	mov	r1, r4
 8014178:	a80f      	add	r0, sp, #60	@ 0x3c
 801417a:	f010 f971 	bl	8024460 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 801417e:	a90f      	add	r1, sp, #60	@ 0x3c
 8014180:	a804      	add	r0, sp, #16
 8014182:	f010 f9a7 	bl	80244d4 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8014186:	2f09      	cmp	r7, #9
 8014188:	dc25      	bgt.n	80141d6 <handle_manage_user+0x3f2>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 801418a:	4629      	mov	r1, r5
 801418c:	20a9      	movs	r0, #169	@ 0xa9
 801418e:	4b39      	ldr	r3, [pc, #228]	@ (8014274 <handle_manage_user+0x490>)
 8014190:	fb00 3007 	mla	r0, r0, r7, r3
 8014194:	f7fc f824 	bl	80101e0 <strcmp>
 8014198:	b108      	cbz	r0, 801419e <handle_manage_user+0x3ba>
	            for (int i = 0; i < user_list_size; i++) {
 801419a:	3701      	adds	r7, #1
 801419c:	e7f3      	b.n	8014186 <handle_manage_user+0x3a2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 801419e:	23a9      	movs	r3, #169	@ 0xa9
 80141a0:	fb03 f707 	mul.w	r7, r3, r7
 80141a4:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80141a8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8014274 <handle_manage_user+0x490>
 80141ac:	2228      	movs	r2, #40	@ 0x28
 80141ae:	a904      	add	r1, sp, #16
 80141b0:	4440      	add	r0, r8
 80141b2:	f018 fda4 	bl	802ccfe <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 80141b6:	4447      	add	r7, r8
 80141b8:	2300      	movs	r3, #0
 80141ba:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 80141be:	220a      	movs	r2, #10
 80141c0:	4641      	mov	r1, r8
 80141c2:	482d      	ldr	r0, [pc, #180]	@ (8014278 <handle_manage_user+0x494>)
 80141c4:	f7ff fdee 	bl	8013da4 <write_users>
	                mg_http_reply(c, 200, headers,
 80141c8:	4b2c      	ldr	r3, [pc, #176]	@ (801427c <handle_manage_user+0x498>)
 80141ca:	4a28      	ldr	r2, [pc, #160]	@ (801426c <handle_manage_user+0x488>)
 80141cc:	21c8      	movs	r1, #200	@ 0xc8
 80141ce:	4630      	mov	r0, r6
 80141d0:	f010 f854 	bl	802427c <mg_http_reply>
 80141d4:	e7b0      	b.n	8014138 <handle_manage_user+0x354>
	                mg_http_reply(c, 404, headers,
 80141d6:	4b2a      	ldr	r3, [pc, #168]	@ (8014280 <handle_manage_user+0x49c>)
 80141d8:	4a24      	ldr	r2, [pc, #144]	@ (801426c <handle_manage_user+0x488>)
 80141da:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 80141de:	4630      	mov	r0, r6
 80141e0:	f010 f84c 	bl	802427c <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 80141e4:	e7a8      	b.n	8014138 <handle_manage_user+0x354>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 80141e6:	2280      	movs	r2, #128	@ 0x80
 80141e8:	2100      	movs	r1, #0
 80141ea:	4628      	mov	r0, r5
 80141ec:	f018 fd40 	bl	802cc70 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 80141f0:	23a9      	movs	r3, #169	@ 0xa9
 80141f2:	fb03 f004 	mul.w	r0, r3, r4
 80141f6:	3080      	adds	r0, #128	@ 0x80
 80141f8:	4c1e      	ldr	r4, [pc, #120]	@ (8014274 <handle_manage_user+0x490>)
 80141fa:	2229      	movs	r2, #41	@ 0x29
 80141fc:	2100      	movs	r1, #0
 80141fe:	4420      	add	r0, r4
 8014200:	f018 fd36 	bl	802cc70 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8014204:	220a      	movs	r2, #10
 8014206:	4621      	mov	r1, r4
 8014208:	481b      	ldr	r0, [pc, #108]	@ (8014278 <handle_manage_user+0x494>)
 801420a:	f7ff fdcb 	bl	8013da4 <write_users>
	            mg_http_reply(c, 200, headers,
 801420e:	4b1d      	ldr	r3, [pc, #116]	@ (8014284 <handle_manage_user+0x4a0>)
 8014210:	4a16      	ldr	r2, [pc, #88]	@ (801426c <handle_manage_user+0x488>)
 8014212:	21c8      	movs	r1, #200	@ 0xc8
 8014214:	4630      	mov	r0, r6
 8014216:	f010 f831 	bl	802427c <mg_http_reply>
 801421a:	e737      	b.n	801408c <handle_manage_user+0x2a8>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 801421c:	2401      	movs	r4, #1
 801421e:	2c09      	cmp	r4, #9
 8014220:	dc0b      	bgt.n	801423a <handle_manage_user+0x456>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8014222:	23a9      	movs	r3, #169	@ 0xa9
 8014224:	4d13      	ldr	r5, [pc, #76]	@ (8014274 <handle_manage_user+0x490>)
 8014226:	fb03 5504 	mla	r5, r3, r4, r5
 801422a:	4639      	mov	r1, r7
 801422c:	4628      	mov	r0, r5
 801422e:	f7fb ffd7 	bl	80101e0 <strcmp>
 8014232:	2800      	cmp	r0, #0
 8014234:	d0d7      	beq.n	80141e6 <handle_manage_user+0x402>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8014236:	3401      	adds	r4, #1
 8014238:	e7f1      	b.n	801421e <handle_manage_user+0x43a>
	            mg_http_reply(c, 400, headers,
 801423a:	4b13      	ldr	r3, [pc, #76]	@ (8014288 <handle_manage_user+0x4a4>)
 801423c:	4a0b      	ldr	r2, [pc, #44]	@ (801426c <handle_manage_user+0x488>)
 801423e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014242:	4630      	mov	r0, r6
 8014244:	f010 f81a 	bl	802427c <mg_http_reply>
 8014248:	e720      	b.n	801408c <handle_manage_user+0x2a8>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801424a:	4b10      	ldr	r3, [pc, #64]	@ (801428c <handle_manage_user+0x4a8>)
 801424c:	4a07      	ldr	r2, [pc, #28]	@ (801426c <handle_manage_user+0x488>)
 801424e:	f240 1195 	movw	r1, #405	@ 0x195
 8014252:	4630      	mov	r0, r6
 8014254:	f010 f812 	bl	802427c <mg_http_reply>
 8014258:	e678      	b.n	8013f4c <handle_manage_user+0x168>
 801425a:	bf00      	nop
 801425c:	08037190 	.word	0x08037190
 8014260:	080376d8 	.word	0x080376d8
 8014264:	080376e0 	.word	0x080376e0
 8014268:	0803784c 	.word	0x0803784c
 801426c:	0803692c 	.word	0x0803692c
 8014270:	08037194 	.word	0x08037194
 8014274:	200021c0 	.word	0x200021c0
 8014278:	08036258 	.word	0x08036258
 801427c:	080377d8 	.word	0x080377d8
 8014280:	0803781c 	.word	0x0803781c
 8014284:	08037898 	.word	0x08037898
 8014288:	080378d8 	.word	0x080378d8
 801428c:	0803796c 	.word	0x0803796c

08014290 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 8014290:	b570      	push	{r4, r5, r6, lr}
 8014292:	460e      	mov	r6, r1
 8014294:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 8014296:	2201      	movs	r2, #1
 8014298:	4601      	mov	r1, r0
 801429a:	480e      	ldr	r0, [pc, #56]	@ (80142d4 <load_users+0x44>)
 801429c:	f00e fd60 	bl	8022d60 <mg_fs_open>
	if (!fd) {
 80142a0:	b188      	cbz	r0, 80142c6 <load_users+0x36>
 80142a2:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 80142a4:	4b0b      	ldr	r3, [pc, #44]	@ (80142d4 <load_users+0x44>)
 80142a6:	691b      	ldr	r3, [r3, #16]
 80142a8:	22a9      	movs	r2, #169	@ 0xa9
 80142aa:	fb04 f202 	mul.w	r2, r4, r2
 80142ae:	4631      	mov	r1, r6
 80142b0:	6800      	ldr	r0, [r0, #0]
 80142b2:	4798      	blx	r3
	mg_fs_close(fd);
 80142b4:	4628      	mov	r0, r5
 80142b6:	f00e fd6c 	bl	8022d92 <mg_fs_close>
	logging(L_INFO, "Loaded web users from file");
 80142ba:	4907      	ldr	r1, [pc, #28]	@ (80142d8 <load_users+0x48>)
 80142bc:	2001      	movs	r0, #1
 80142be:	f7fd ff15 	bl	80120ec <logging>
	return true;
 80142c2:	2001      	movs	r0, #1
}
 80142c4:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Can't open file with users");
 80142c6:	4905      	ldr	r1, [pc, #20]	@ (80142dc <load_users+0x4c>)
 80142c8:	2003      	movs	r0, #3
 80142ca:	f7fd ff0f 	bl	80120ec <logging>
		return false;
 80142ce:	2000      	movs	r0, #0
 80142d0:	e7f8      	b.n	80142c4 <load_users+0x34>
 80142d2:	bf00      	nop
 80142d4:	200000a0 	.word	0x200000a0
 80142d8:	080379e8 	.word	0x080379e8
 80142dc:	080379cc 	.word	0x080379cc

080142e0 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 80142e0:	b570      	push	{r4, r5, r6, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	4605      	mov	r5, r0
 80142e6:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 80142e8:	ae04      	add	r6, sp, #16
 80142ea:	4915      	ldr	r1, [pc, #84]	@ (8014340 <handle_restart_mcu+0x60>)
 80142ec:	4630      	mov	r0, r6
 80142ee:	f010 f94f 	bl	8024590 <mg_str_s>
 80142f2:	2300      	movs	r3, #0
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80142fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80142fe:	f010 fb69 	bl	80249d4 <mg_match>
 8014302:	b1a0      	cbz	r0, 801432e <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8014304:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8014306:	6818      	ldr	r0, [r3, #0]
 8014308:	2300      	movs	r3, #0
 801430a:	9302      	str	r3, [sp, #8]
 801430c:	4b0d      	ldr	r3, [pc, #52]	@ (8014344 <handle_restart_mcu+0x64>)
 801430e:	9301      	str	r3, [sp, #4]
 8014310:	2301      	movs	r3, #1
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014318:	2300      	movs	r3, #0
 801431a:	f011 fb1b 	bl	8025954 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801431e:	4b0a      	ldr	r3, [pc, #40]	@ (8014348 <handle_restart_mcu+0x68>)
 8014320:	4a0a      	ldr	r2, [pc, #40]	@ (801434c <handle_restart_mcu+0x6c>)
 8014322:	21c8      	movs	r1, #200	@ 0xc8
 8014324:	4628      	mov	r0, r5
 8014326:	f00f ffa9 	bl	802427c <mg_http_reply>
}
 801432a:	b006      	add	sp, #24
 801432c:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801432e:	4b08      	ldr	r3, [pc, #32]	@ (8014350 <handle_restart_mcu+0x70>)
 8014330:	4a06      	ldr	r2, [pc, #24]	@ (801434c <handle_restart_mcu+0x6c>)
 8014332:	f240 1195 	movw	r1, #405	@ 0x195
 8014336:	4628      	mov	r0, r5
 8014338:	f00f ffa0 	bl	802427c <mg_http_reply>
}
 801433c:	e7f5      	b.n	801432a <handle_restart_mcu+0x4a>
 801433e:	bf00      	nop
 8014340:	08036a88 	.word	0x08036a88
 8014344:	080165e5 	.word	0x080165e5
 8014348:	08037a04 	.word	0x08037a04
 801434c:	0803692c 	.word	0x0803692c
 8014350:	08036b10 	.word	0x08036b10

08014354 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8014354:	b570      	push	{r4, r5, r6, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	4605      	mov	r5, r0
 801435a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 801435c:	ae02      	add	r6, sp, #8
 801435e:	4914      	ldr	r1, [pc, #80]	@ (80143b0 <handle_activete_and_reboot+0x5c>)
 8014360:	4630      	mov	r0, r6
 8014362:	f010 f915 	bl	8024590 <mg_str_s>
 8014366:	2300      	movs	r3, #0
 8014368:	9300      	str	r3, [sp, #0]
 801436a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801436e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014372:	f010 fb2f 	bl	80249d4 <mg_match>
 8014376:	b198      	cbz	r0, 80143a0 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8014378:	4b0e      	ldr	r3, [pc, #56]	@ (80143b4 <handle_activete_and_reboot+0x60>)
 801437a:	69db      	ldr	r3, [r3, #28]
 801437c:	490e      	ldr	r1, [pc, #56]	@ (80143b8 <handle_activete_and_reboot+0x64>)
 801437e:	480f      	ldr	r0, [pc, #60]	@ (80143bc <handle_activete_and_reboot+0x68>)
 8014380:	4798      	blx	r3
 8014382:	b128      	cbz	r0, 8014390 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8014384:	4621      	mov	r1, r4
 8014386:	4628      	mov	r0, r5
 8014388:	f7ff ffaa 	bl	80142e0 <handle_restart_mcu>
}
 801438c:	b004      	add	sp, #16
 801438e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8014390:	4b0b      	ldr	r3, [pc, #44]	@ (80143c0 <handle_activete_and_reboot+0x6c>)
 8014392:	4a0c      	ldr	r2, [pc, #48]	@ (80143c4 <handle_activete_and_reboot+0x70>)
 8014394:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014398:	4628      	mov	r0, r5
 801439a:	f00f ff6f 	bl	802427c <mg_http_reply>
 801439e:	e7f5      	b.n	801438c <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80143a0:	4b09      	ldr	r3, [pc, #36]	@ (80143c8 <handle_activete_and_reboot+0x74>)
 80143a2:	4a08      	ldr	r2, [pc, #32]	@ (80143c4 <handle_activete_and_reboot+0x70>)
 80143a4:	f240 1195 	movw	r1, #405	@ 0x195
 80143a8:	4628      	mov	r0, r5
 80143aa:	f00f ff67 	bl	802427c <mg_http_reply>
}
 80143ae:	e7ed      	b.n	801438c <handle_activete_and_reboot+0x38>
 80143b0:	08036a88 	.word	0x08036a88
 80143b4:	200000a0 	.word	0x200000a0
 80143b8:	08036218 	.word	0x08036218
 80143bc:	08037a3c 	.word	0x08037a3c
 80143c0:	08037a54 	.word	0x08037a54
 80143c4:	0803692c 	.word	0x0803692c
 80143c8:	08036b10 	.word	0x08036b10

080143cc <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 80143cc:	b570      	push	{r4, r5, r6, lr}
 80143ce:	b0c4      	sub	sp, #272	@ 0x110
 80143d0:	4606      	mov	r6, r0
 80143d2:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 80143d4:	ad42      	add	r5, sp, #264	@ 0x108
 80143d6:	4920      	ldr	r1, [pc, #128]	@ (8014458 <handle_fs_mkdir+0x8c>)
 80143d8:	4628      	mov	r0, r5
 80143da:	f010 f8d9 	bl	8024590 <mg_str_s>
 80143de:	2300      	movs	r3, #0
 80143e0:	9300      	str	r3, [sp, #0]
 80143e2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80143e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143ea:	f010 faf3 	bl	80249d4 <mg_match>
 80143ee:	b350      	cbz	r0, 8014446 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80143f0:	237b      	movs	r3, #123	@ 0x7b
 80143f2:	aa23      	add	r2, sp, #140	@ 0x8c
 80143f4:	4919      	ldr	r1, [pc, #100]	@ (801445c <handle_fs_mkdir+0x90>)
 80143f6:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80143fa:	f010 ffb6 	bl	802536a <mg_http_get_var>
 80143fe:	2800      	cmp	r0, #0
 8014400:	dd19      	ble.n	8014436 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8014402:	ab23      	add	r3, sp, #140	@ 0x8c
 8014404:	4a16      	ldr	r2, [pc, #88]	@ (8014460 <handle_fs_mkdir+0x94>)
 8014406:	2180      	movs	r1, #128	@ 0x80
 8014408:	a803      	add	r0, sp, #12
 801440a:	f017 ff07 	bl	802c21c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 801440e:	4b15      	ldr	r3, [pc, #84]	@ (8014464 <handle_fs_mkdir+0x98>)
 8014410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014412:	a803      	add	r0, sp, #12
 8014414:	4798      	blx	r3
 8014416:	b130      	cbz	r0, 8014426 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8014418:	4b13      	ldr	r3, [pc, #76]	@ (8014468 <handle_fs_mkdir+0x9c>)
 801441a:	4a14      	ldr	r2, [pc, #80]	@ (801446c <handle_fs_mkdir+0xa0>)
 801441c:	21c8      	movs	r1, #200	@ 0xc8
 801441e:	4630      	mov	r0, r6
 8014420:	f00f ff2c 	bl	802427c <mg_http_reply>
 8014424:	e016      	b.n	8014454 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8014426:	4b12      	ldr	r3, [pc, #72]	@ (8014470 <handle_fs_mkdir+0xa4>)
 8014428:	4a10      	ldr	r2, [pc, #64]	@ (801446c <handle_fs_mkdir+0xa0>)
 801442a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801442e:	4630      	mov	r0, r6
 8014430:	f00f ff24 	bl	802427c <mg_http_reply>
 8014434:	e00e      	b.n	8014454 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8014436:	4b0f      	ldr	r3, [pc, #60]	@ (8014474 <handle_fs_mkdir+0xa8>)
 8014438:	4a0c      	ldr	r2, [pc, #48]	@ (801446c <handle_fs_mkdir+0xa0>)
 801443a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801443e:	4630      	mov	r0, r6
 8014440:	f00f ff1c 	bl	802427c <mg_http_reply>
 8014444:	e006      	b.n	8014454 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014446:	4b0c      	ldr	r3, [pc, #48]	@ (8014478 <handle_fs_mkdir+0xac>)
 8014448:	4a08      	ldr	r2, [pc, #32]	@ (801446c <handle_fs_mkdir+0xa0>)
 801444a:	f240 1195 	movw	r1, #405	@ 0x195
 801444e:	4630      	mov	r0, r6
 8014450:	f00f ff14 	bl	802427c <mg_http_reply>
}
 8014454:	b044      	add	sp, #272	@ 0x110
 8014456:	bd70      	pop	{r4, r5, r6, pc}
 8014458:	08036a88 	.word	0x08036a88
 801445c:	08037a98 	.word	0x08037a98
 8014460:	08037aa0 	.word	0x08037aa0
 8014464:	200000a0 	.word	0x200000a0
 8014468:	08037aa8 	.word	0x08037aa8
 801446c:	0803692c 	.word	0x0803692c
 8014470:	08037adc 	.word	0x08037adc
 8014474:	08037b18 	.word	0x08037b18
 8014478:	08036b10 	.word	0x08036b10

0801447c <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 801447c:	b570      	push	{r4, r5, r6, lr}
 801447e:	b0a4      	sub	sp, #144	@ 0x90
 8014480:	4605      	mov	r5, r0
 8014482:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014484:	ae22      	add	r6, sp, #136	@ 0x88
 8014486:	491c      	ldr	r1, [pc, #112]	@ (80144f8 <handle_firmware_upload+0x7c>)
 8014488:	4630      	mov	r0, r6
 801448a:	f010 f881 	bl	8024590 <mg_str_s>
 801448e:	2300      	movs	r3, #0
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014496:	e894 0003 	ldmia.w	r4, {r0, r1}
 801449a:	f010 fa9b 	bl	80249d4 <mg_match>
 801449e:	b308      	cbz	r0, 80144e4 <handle_firmware_upload+0x68>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80144a0:	2380      	movs	r3, #128	@ 0x80
 80144a2:	aa02      	add	r2, sp, #8
 80144a4:	4915      	ldr	r1, [pc, #84]	@ (80144fc <handle_firmware_upload+0x80>)
 80144a6:	f104 0010 	add.w	r0, r4, #16
 80144aa:	f010 ff5e 	bl	802536a <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 80144ae:	4914      	ldr	r1, [pc, #80]	@ (8014500 <handle_firmware_upload+0x84>)
 80144b0:	a802      	add	r0, sp, #8
 80144b2:	f7fb fe95 	bl	80101e0 <strcmp>
 80144b6:	b958      	cbnz	r0, 80144d0 <handle_firmware_upload+0x54>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 80144b8:	4b12      	ldr	r3, [pc, #72]	@ (8014504 <handle_firmware_upload+0x88>)
 80144ba:	9300      	str	r3, [sp, #0]
 80144bc:	4b12      	ldr	r3, [pc, #72]	@ (8014508 <handle_firmware_upload+0x8c>)
 80144be:	4a13      	ldr	r2, [pc, #76]	@ (801450c <handle_firmware_upload+0x90>)
 80144c0:	4621      	mov	r1, r4
 80144c2:	4628      	mov	r0, r5
 80144c4:	f012 fd18 	bl	8026ef8 <mg_http_upload>
			vTaskDelay(1);
 80144c8:	2001      	movs	r0, #1
 80144ca:	f005 fce9 	bl	8019ea0 <vTaskDelay>
 80144ce:	e010      	b.n	80144f2 <handle_firmware_upload+0x76>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80144d0:	4b0b      	ldr	r3, [pc, #44]	@ (8014500 <handle_firmware_upload+0x84>)
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	4b0e      	ldr	r3, [pc, #56]	@ (8014510 <handle_firmware_upload+0x94>)
 80144d6:	4a0f      	ldr	r2, [pc, #60]	@ (8014514 <handle_firmware_upload+0x98>)
 80144d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80144dc:	4628      	mov	r0, r5
 80144de:	f00f fecd 	bl	802427c <mg_http_reply>
 80144e2:	e006      	b.n	80144f2 <handle_firmware_upload+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80144e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014518 <handle_firmware_upload+0x9c>)
 80144e6:	4a0b      	ldr	r2, [pc, #44]	@ (8014514 <handle_firmware_upload+0x98>)
 80144e8:	f240 1195 	movw	r1, #405	@ 0x195
 80144ec:	4628      	mov	r0, r5
 80144ee:	f00f fec5 	bl	802427c <mg_http_reply>
}
 80144f2:	b024      	add	sp, #144	@ 0x90
 80144f4:	bd70      	pop	{r4, r5, r6, pc}
 80144f6:	bf00      	nop
 80144f8:	08036a88 	.word	0x08036a88
 80144fc:	0803b2e8 	.word	0x0803b2e8
 8014500:	08037b54 	.word	0x08037b54
 8014504:	0003d090 	.word	0x0003d090
 8014508:	0803620c 	.word	0x0803620c
 801450c:	200000a0 	.word	0x200000a0
 8014510:	08037b64 	.word	0x08037b64
 8014514:	0803692c 	.word	0x0803692c
 8014518:	08036b10 	.word	0x08036b10

0801451c <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 801451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801451e:	b097      	sub	sp, #92	@ 0x5c
 8014520:	4604      	mov	r4, r0
 8014522:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8014524:	2101      	movs	r1, #1
 8014526:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801452a:	f7ff f879 	bl	8013620 <mg_calloc>
	if (buff == NULL){
 801452e:	4605      	mov	r5, r0
 8014530:	b150      	cbz	r0, 8014548 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8014532:	2201      	movs	r2, #1
 8014534:	4621      	mov	r1, r4
 8014536:	4828      	ldr	r0, [pc, #160]	@ (80145d8 <calc_file_md5sum+0xbc>)
 8014538:	f00e fc12 	bl	8022d60 <mg_fs_open>
	if (fd==NULL){
 801453c:	4604      	mov	r4, r0
 801453e:	b140      	cbz	r0, 8014552 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014540:	4668      	mov	r0, sp
 8014542:	f00f f81d 	bl	8023580 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8014546:	e010      	b.n	801456a <calc_file_md5sum+0x4e>
		free(buff);
 8014548:	f006 fbc8 	bl	801acdc <vPortFree>
		return -1;
 801454c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014550:	e040      	b.n	80145d4 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014552:	f00e fc1e 	bl	8022d92 <mg_fs_close>
		free(buff);
 8014556:	4628      	mov	r0, r5
 8014558:	f006 fbc0 	bl	801acdc <vPortFree>
		return -2;
 801455c:	f06f 0001 	mvn.w	r0, #1
 8014560:	e038      	b.n	80145d4 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014562:	4629      	mov	r1, r5
 8014564:	4668      	mov	r0, sp
 8014566:	f00f f821 	bl	80235ac <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801456a:	4b1b      	ldr	r3, [pc, #108]	@ (80145d8 <calc_file_md5sum+0xbc>)
 801456c:	691b      	ldr	r3, [r3, #16]
 801456e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014572:	4629      	mov	r1, r5
 8014574:	6820      	ldr	r0, [r4, #0]
 8014576:	4798      	blx	r3
 8014578:	4602      	mov	r2, r0
 801457a:	2800      	cmp	r0, #0
 801457c:	d1f1      	bne.n	8014562 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 801457e:	4620      	mov	r0, r4
 8014580:	f00e fc07 	bl	8022d92 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8014584:	2101      	movs	r1, #1
 8014586:	2010      	movs	r0, #16
 8014588:	f7ff f84a 	bl	8013620 <mg_calloc>
	if (digest == NULL){
 801458c:	4607      	mov	r7, r0
 801458e:	b128      	cbz	r0, 801459c <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8014590:	4601      	mov	r1, r0
 8014592:	4668      	mov	r0, sp
 8014594:	f00f f861 	bl	802365a <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8014598:	2400      	movs	r4, #0
 801459a:	e012      	b.n	80145c2 <calc_file_md5sum+0xa6>
		free(buff);
 801459c:	4628      	mov	r0, r5
 801459e:	f006 fb9d 	bl	801acdc <vPortFree>
		free(digest);
 80145a2:	4638      	mov	r0, r7
 80145a4:	f006 fb9a 	bl	801acdc <vPortFree>
		return -1;
 80145a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80145ac:	e012      	b.n	80145d4 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80145ae:	0061      	lsls	r1, r4, #1
 80145b0:	5d3b      	ldrb	r3, [r7, r4]
 80145b2:	4a0a      	ldr	r2, [pc, #40]	@ (80145dc <calc_file_md5sum+0xc0>)
 80145b4:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 80145b8:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80145bc:	f017 fe2e 	bl	802c21c <snprintf>
	for (int i = 0; i < 16; ++i) {
 80145c0:	3401      	adds	r4, #1
 80145c2:	2c0f      	cmp	r4, #15
 80145c4:	ddf3      	ble.n	80145ae <calc_file_md5sum+0x92>
	free(buff);
 80145c6:	4628      	mov	r0, r5
 80145c8:	f006 fb88 	bl	801acdc <vPortFree>
	free(digest);
 80145cc:	4638      	mov	r0, r7
 80145ce:	f006 fb85 	bl	801acdc <vPortFree>
	return 0;
 80145d2:	2000      	movs	r0, #0
}
 80145d4:	b017      	add	sp, #92	@ 0x5c
 80145d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145d8:	200000a0 	.word	0x200000a0
 80145dc:	08037bb0 	.word	0x08037bb0

080145e0 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	4605      	mov	r5, r0
 80145e6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80145e8:	ae02      	add	r6, sp, #8
 80145ea:	4919      	ldr	r1, [pc, #100]	@ (8014650 <handle_firmware_md5+0x70>)
 80145ec:	4630      	mov	r0, r6
 80145ee:	f00f ffcf 	bl	8024590 <mg_str_s>
 80145f2:	2300      	movs	r3, #0
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80145fe:	f010 f9e9 	bl	80249d4 <mg_match>
 8014602:	b1e8      	cbz	r0, 8014640 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8014604:	2101      	movs	r1, #1
 8014606:	2021      	movs	r0, #33	@ 0x21
 8014608:	f7ff f80a 	bl	8013620 <mg_calloc>
 801460c:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 801460e:	4601      	mov	r1, r0
 8014610:	4810      	ldr	r0, [pc, #64]	@ (8014654 <handle_firmware_md5+0x74>)
 8014612:	f7ff ff83 	bl	801451c <calc_file_md5sum>
 8014616:	b958      	cbnz	r0, 8014630 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8014618:	9400      	str	r4, [sp, #0]
 801461a:	4b0f      	ldr	r3, [pc, #60]	@ (8014658 <handle_firmware_md5+0x78>)
 801461c:	4a0f      	ldr	r2, [pc, #60]	@ (801465c <handle_firmware_md5+0x7c>)
 801461e:	21c8      	movs	r1, #200	@ 0xc8
 8014620:	4628      	mov	r0, r5
 8014622:	f00f fe2b 	bl	802427c <mg_http_reply>
		free(md5_str);
 8014626:	4620      	mov	r0, r4
 8014628:	f006 fb58 	bl	801acdc <vPortFree>
}
 801462c:	b004      	add	sp, #16
 801462e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014630:	4b0b      	ldr	r3, [pc, #44]	@ (8014660 <handle_firmware_md5+0x80>)
 8014632:	4a0a      	ldr	r2, [pc, #40]	@ (801465c <handle_firmware_md5+0x7c>)
 8014634:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8014638:	4628      	mov	r0, r5
 801463a:	f00f fe1f 	bl	802427c <mg_http_reply>
 801463e:	e7f2      	b.n	8014626 <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014640:	4b08      	ldr	r3, [pc, #32]	@ (8014664 <handle_firmware_md5+0x84>)
 8014642:	4a06      	ldr	r2, [pc, #24]	@ (801465c <handle_firmware_md5+0x7c>)
 8014644:	f240 1195 	movw	r1, #405	@ 0x195
 8014648:	4628      	mov	r0, r5
 801464a:	f00f fe17 	bl	802427c <mg_http_reply>
}
 801464e:	e7ed      	b.n	801462c <handle_firmware_md5+0x4c>
 8014650:	080368f0 	.word	0x080368f0
 8014654:	08037a3c 	.word	0x08037a3c
 8014658:	08037bb8 	.word	0x08037bb8
 801465c:	0803692c 	.word	0x0803692c
 8014660:	08037bdc 	.word	0x08037bdc
 8014664:	080369a4 	.word	0x080369a4

08014668 <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8014668:	290b      	cmp	r1, #11
 801466a:	d000      	beq.n	801466e <dashboard+0x6>
 801466c:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 801466e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014670:	b0b5      	sub	sp, #212	@ 0xd4
 8014672:	4605      	mov	r5, r0
 8014674:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 8014676:	2200      	movs	r2, #0
 8014678:	4621      	mov	r1, r4
 801467a:	f7fe fdff 	bl	801327c <auth>
 801467e:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014680:	ae08      	add	r6, sp, #32
 8014682:	49af      	ldr	r1, [pc, #700]	@ (8014940 <dashboard+0x2d8>)
 8014684:	4630      	mov	r0, r6
 8014686:	f00f ff83 	bl	8024590 <mg_str_s>
 801468a:	2300      	movs	r3, #0
 801468c:	9300      	str	r3, [sp, #0]
 801468e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014696:	f010 f99d 	bl	80249d4 <mg_match>
 801469a:	b120      	cbz	r0, 80146a6 <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 801469c:	4628      	mov	r0, r5
 801469e:	f7fe fc45 	bl	8012f2c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80146a2:	b035      	add	sp, #212	@ 0xd4
 80146a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80146a6:	ae0a      	add	r6, sp, #40	@ 0x28
 80146a8:	49a6      	ldr	r1, [pc, #664]	@ (8014944 <dashboard+0x2dc>)
 80146aa:	4630      	mov	r0, r6
 80146ac:	f00f ff70 	bl	8024590 <mg_str_s>
 80146b0:	2300      	movs	r3, #0
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146b8:	f104 0108 	add.w	r1, r4, #8
 80146bc:	c903      	ldmia	r1, {r0, r1}
 80146be:	f010 f989 	bl	80249d4 <mg_match>
 80146c2:	b100      	cbz	r0, 80146c6 <dashboard+0x5e>
 80146c4:	b1bf      	cbz	r7, 80146f6 <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 80146c6:	ae0c      	add	r6, sp, #48	@ 0x30
 80146c8:	499f      	ldr	r1, [pc, #636]	@ (8014948 <dashboard+0x2e0>)
 80146ca:	4630      	mov	r0, r6
 80146cc:	f00f ff60 	bl	8024590 <mg_str_s>
 80146d0:	2300      	movs	r3, #0
 80146d2:	9300      	str	r3, [sp, #0]
 80146d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146d8:	f104 0108 	add.w	r1, r4, #8
 80146dc:	c903      	ldmia	r1, {r0, r1}
 80146de:	f010 f979 	bl	80249d4 <mg_match>
 80146e2:	b180      	cbz	r0, 8014706 <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 80146e4:	4999      	ldr	r1, [pc, #612]	@ (801494c <dashboard+0x2e4>)
 80146e6:	2001      	movs	r0, #1
 80146e8:	f7fd fd00 	bl	80120ec <logging>
        	 handler_authanticate(c,hm);
 80146ec:	4621      	mov	r1, r4
 80146ee:	4628      	mov	r0, r5
 80146f0:	f7fe feb0 	bl	8013454 <handler_authanticate>
 80146f4:	e7d5      	b.n	80146a2 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 80146f6:	4b96      	ldr	r3, [pc, #600]	@ (8014950 <dashboard+0x2e8>)
 80146f8:	4a96      	ldr	r2, [pc, #600]	@ (8014954 <dashboard+0x2ec>)
 80146fa:	f240 1193 	movw	r1, #403	@ 0x193
 80146fe:	4628      	mov	r0, r5
 8014700:	f00f fdbc 	bl	802427c <mg_http_reply>
 8014704:	e7cd      	b.n	80146a2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8014706:	ae0e      	add	r6, sp, #56	@ 0x38
 8014708:	4993      	ldr	r1, [pc, #588]	@ (8014958 <dashboard+0x2f0>)
 801470a:	4630      	mov	r0, r6
 801470c:	f00f ff40 	bl	8024590 <mg_str_s>
 8014710:	2300      	movs	r3, #0
 8014712:	9300      	str	r3, [sp, #0]
 8014714:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014718:	f104 0108 	add.w	r1, r4, #8
 801471c:	c903      	ldmia	r1, {r0, r1}
 801471e:	f010 f959 	bl	80249d4 <mg_match>
 8014722:	b140      	cbz	r0, 8014736 <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014724:	498d      	ldr	r1, [pc, #564]	@ (801495c <dashboard+0x2f4>)
 8014726:	2001      	movs	r0, #1
 8014728:	f7fd fce0 	bl	80120ec <logging>
			handler_logout(c,hm);
 801472c:	4621      	mov	r1, r4
 801472e:	4628      	mov	r0, r5
 8014730:	f7fe fcea 	bl	8013108 <handler_logout>
 8014734:	e7b5      	b.n	80146a2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8014736:	ae10      	add	r6, sp, #64	@ 0x40
 8014738:	4989      	ldr	r1, [pc, #548]	@ (8014960 <dashboard+0x2f8>)
 801473a:	4630      	mov	r0, r6
 801473c:	f00f ff28 	bl	8024590 <mg_str_s>
 8014740:	2300      	movs	r3, #0
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014748:	f104 0108 	add.w	r1, r4, #8
 801474c:	c903      	ldmia	r1, {r0, r1}
 801474e:	f010 f941 	bl	80249d4 <mg_match>
 8014752:	b138      	cbz	r0, 8014764 <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014754:	4983      	ldr	r1, [pc, #524]	@ (8014964 <dashboard+0x2fc>)
 8014756:	2001      	movs	r0, #1
 8014758:	f7fd fcc8 	bl	80120ec <logging>
			handle_ram_status_get(c);
 801475c:	4628      	mov	r0, r5
 801475e:	f7fe fe8d 	bl	801347c <handle_ram_status_get>
 8014762:	e79e      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014764:	ae12      	add	r6, sp, #72	@ 0x48
 8014766:	4980      	ldr	r1, [pc, #512]	@ (8014968 <dashboard+0x300>)
 8014768:	4630      	mov	r0, r6
 801476a:	f00f ff11 	bl	8024590 <mg_str_s>
 801476e:	2300      	movs	r3, #0
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014776:	f104 0108 	add.w	r1, r4, #8
 801477a:	c903      	ldmia	r1, {r0, r1}
 801477c:	f010 f92a 	bl	80249d4 <mg_match>
 8014780:	b140      	cbz	r0, 8014794 <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014782:	497a      	ldr	r1, [pc, #488]	@ (801496c <dashboard+0x304>)
 8014784:	2001      	movs	r0, #1
 8014786:	f7fd fcb1 	bl	80120ec <logging>
			handle_io_status_get(c, hm);
 801478a:	4621      	mov	r1, r4
 801478c:	4628      	mov	r0, r5
 801478e:	f7fe fe95 	bl	80134bc <handle_io_status_get>
 8014792:	e786      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8014794:	ae14      	add	r6, sp, #80	@ 0x50
 8014796:	4976      	ldr	r1, [pc, #472]	@ (8014970 <dashboard+0x308>)
 8014798:	4630      	mov	r0, r6
 801479a:	f00f fef9 	bl	8024590 <mg_str_s>
 801479e:	2300      	movs	r3, #0
 80147a0:	9300      	str	r3, [sp, #0]
 80147a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147a6:	f104 0108 	add.w	r1, r4, #8
 80147aa:	c903      	ldmia	r1, {r0, r1}
 80147ac:	f010 f912 	bl	80249d4 <mg_match>
 80147b0:	b140      	cbz	r0, 80147c4 <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 80147b2:	4970      	ldr	r1, [pc, #448]	@ (8014974 <dashboard+0x30c>)
 80147b4:	2001      	movs	r0, #1
 80147b6:	f7fd fc99 	bl	80120ec <logging>
			handle_mqtt_conf(c, hm);
 80147ba:	4621      	mov	r1, r4
 80147bc:	4628      	mov	r0, r5
 80147be:	f7fe ff3d 	bl	801363c <handle_mqtt_conf>
 80147c2:	e76e      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 80147c4:	ae16      	add	r6, sp, #88	@ 0x58
 80147c6:	496c      	ldr	r1, [pc, #432]	@ (8014978 <dashboard+0x310>)
 80147c8:	4630      	mov	r0, r6
 80147ca:	f00f fee1 	bl	8024590 <mg_str_s>
 80147ce:	2300      	movs	r3, #0
 80147d0:	9300      	str	r3, [sp, #0]
 80147d2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147d6:	f104 0108 	add.w	r1, r4, #8
 80147da:	c903      	ldmia	r1, {r0, r1}
 80147dc:	f010 f8fa 	bl	80249d4 <mg_match>
 80147e0:	b140      	cbz	r0, 80147f4 <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 80147e2:	4966      	ldr	r1, [pc, #408]	@ (801497c <dashboard+0x314>)
 80147e4:	2001      	movs	r0, #1
 80147e6:	f7fd fc81 	bl	80120ec <logging>
			handle_mb_tcp_access_list(c, hm);
 80147ea:	4621      	mov	r1, r4
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7ff f85d 	bl	80138ac <handle_mb_tcp_access_list>
 80147f2:	e756      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 80147f4:	ae18      	add	r6, sp, #96	@ 0x60
 80147f6:	4962      	ldr	r1, [pc, #392]	@ (8014980 <dashboard+0x318>)
 80147f8:	4630      	mov	r0, r6
 80147fa:	f00f fec9 	bl	8024590 <mg_str_s>
 80147fe:	2300      	movs	r3, #0
 8014800:	9300      	str	r3, [sp, #0]
 8014802:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014806:	f104 0108 	add.w	r1, r4, #8
 801480a:	c903      	ldmia	r1, {r0, r1}
 801480c:	f010 f8e2 	bl	80249d4 <mg_match>
 8014810:	b140      	cbz	r0, 8014824 <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014812:	495c      	ldr	r1, [pc, #368]	@ (8014984 <dashboard+0x31c>)
 8014814:	2001      	movs	r0, #1
 8014816:	f7fd fc69 	bl	80120ec <logging>
			handle_dev_status(c, hm);
 801481a:	4621      	mov	r1, r4
 801481c:	4628      	mov	r0, r5
 801481e:	f7ff f925 	bl	8013a6c <handle_dev_status>
 8014822:	e73e      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014824:	ae1a      	add	r6, sp, #104	@ 0x68
 8014826:	4958      	ldr	r1, [pc, #352]	@ (8014988 <dashboard+0x320>)
 8014828:	4630      	mov	r0, r6
 801482a:	f00f feb1 	bl	8024590 <mg_str_s>
 801482e:	2300      	movs	r3, #0
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014836:	68e1      	ldr	r1, [r4, #12]
 8014838:	68a0      	ldr	r0, [r4, #8]
 801483a:	f010 f8cb 	bl	80249d4 <mg_match>
 801483e:	b148      	cbz	r0, 8014854 <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014840:	4952      	ldr	r1, [pc, #328]	@ (801498c <dashboard+0x324>)
 8014842:	2001      	movs	r0, #1
 8014844:	f7fd fc52 	bl	80120ec <logging>
			handle_fs_get_log(c, hm, 0);
 8014848:	2200      	movs	r2, #0
 801484a:	4621      	mov	r1, r4
 801484c:	4628      	mov	r0, r5
 801484e:	f7ff fa4b 	bl	8013ce8 <handle_fs_get_log>
 8014852:	e726      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014854:	ae1c      	add	r6, sp, #112	@ 0x70
 8014856:	494e      	ldr	r1, [pc, #312]	@ (8014990 <dashboard+0x328>)
 8014858:	4630      	mov	r0, r6
 801485a:	f00f fe99 	bl	8024590 <mg_str_s>
 801485e:	2300      	movs	r3, #0
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014866:	68e1      	ldr	r1, [r4, #12]
 8014868:	68a0      	ldr	r0, [r4, #8]
 801486a:	f010 f8b3 	bl	80249d4 <mg_match>
 801486e:	b148      	cbz	r0, 8014884 <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014870:	4948      	ldr	r1, [pc, #288]	@ (8014994 <dashboard+0x32c>)
 8014872:	2001      	movs	r0, #1
 8014874:	f7fd fc3a 	bl	80120ec <logging>
			handle_fs_get_log(c, hm, 1);
 8014878:	2201      	movs	r2, #1
 801487a:	4621      	mov	r1, r4
 801487c:	4628      	mov	r0, r5
 801487e:	f7ff fa33 	bl	8013ce8 <handle_fs_get_log>
 8014882:	e70e      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014884:	ae1e      	add	r6, sp, #120	@ 0x78
 8014886:	4944      	ldr	r1, [pc, #272]	@ (8014998 <dashboard+0x330>)
 8014888:	4630      	mov	r0, r6
 801488a:	f00f fe81 	bl	8024590 <mg_str_s>
 801488e:	2300      	movs	r3, #0
 8014890:	9300      	str	r3, [sp, #0]
 8014892:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014896:	68e1      	ldr	r1, [r4, #12]
 8014898:	68a0      	ldr	r0, [r4, #8]
 801489a:	f010 f89b 	bl	80249d4 <mg_match>
 801489e:	b140      	cbz	r0, 80148b2 <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 80148a0:	493e      	ldr	r1, [pc, #248]	@ (801499c <dashboard+0x334>)
 80148a2:	2001      	movs	r0, #1
 80148a4:	f7fd fc22 	bl	80120ec <logging>
			handle_manage_user(c, hm);
 80148a8:	4621      	mov	r1, r4
 80148aa:	4628      	mov	r0, r5
 80148ac:	f7ff fa9a 	bl	8013de4 <handle_manage_user>
 80148b0:	e6f7      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 80148b2:	ae20      	add	r6, sp, #128	@ 0x80
 80148b4:	493a      	ldr	r1, [pc, #232]	@ (80149a0 <dashboard+0x338>)
 80148b6:	4630      	mov	r0, r6
 80148b8:	f00f fe6a 	bl	8024590 <mg_str_s>
 80148bc:	2300      	movs	r3, #0
 80148be:	9300      	str	r3, [sp, #0]
 80148c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148c4:	68e1      	ldr	r1, [r4, #12]
 80148c6:	68a0      	ldr	r0, [r4, #8]
 80148c8:	f010 f884 	bl	80249d4 <mg_match>
 80148cc:	b140      	cbz	r0, 80148e0 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 80148ce:	4935      	ldr	r1, [pc, #212]	@ (80149a4 <dashboard+0x33c>)
 80148d0:	2001      	movs	r0, #1
 80148d2:	f7fd fc0b 	bl	80120ec <logging>
			handle_restart_mcu(c, hm);
 80148d6:	4621      	mov	r1, r4
 80148d8:	4628      	mov	r0, r5
 80148da:	f7ff fd01 	bl	80142e0 <handle_restart_mcu>
 80148de:	e6e0      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 80148e0:	ae22      	add	r6, sp, #136	@ 0x88
 80148e2:	4931      	ldr	r1, [pc, #196]	@ (80149a8 <dashboard+0x340>)
 80148e4:	4630      	mov	r0, r6
 80148e6:	f00f fe53 	bl	8024590 <mg_str_s>
 80148ea:	2300      	movs	r3, #0
 80148ec:	9300      	str	r3, [sp, #0]
 80148ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80148f2:	68e1      	ldr	r1, [r4, #12]
 80148f4:	68a0      	ldr	r0, [r4, #8]
 80148f6:	f010 f86d 	bl	80249d4 <mg_match>
 80148fa:	b140      	cbz	r0, 801490e <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 80148fc:	492b      	ldr	r1, [pc, #172]	@ (80149ac <dashboard+0x344>)
 80148fe:	2001      	movs	r0, #1
 8014900:	f7fd fbf4 	bl	80120ec <logging>
			handler_dev_version(c, hm);
 8014904:	4621      	mov	r1, r4
 8014906:	4628      	mov	r0, r5
 8014908:	f7fe fb1c 	bl	8012f44 <handler_dev_version>
 801490c:	e6c9      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/info"), NULL)){
 801490e:	ae24      	add	r6, sp, #144	@ 0x90
 8014910:	4927      	ldr	r1, [pc, #156]	@ (80149b0 <dashboard+0x348>)
 8014912:	4630      	mov	r0, r6
 8014914:	f00f fe3c 	bl	8024590 <mg_str_s>
 8014918:	2300      	movs	r3, #0
 801491a:	9300      	str	r3, [sp, #0]
 801491c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014920:	68e1      	ldr	r1, [r4, #12]
 8014922:	68a0      	ldr	r0, [r4, #8]
 8014924:	f010 f856 	bl	80249d4 <mg_match>
 8014928:	2800      	cmp	r0, #0
 801492a:	d045      	beq.n	80149b8 <dashboard+0x350>
			logging(L_INFO, "Call API /api/device/info");
 801492c:	4921      	ldr	r1, [pc, #132]	@ (80149b4 <dashboard+0x34c>)
 801492e:	2001      	movs	r0, #1
 8014930:	f7fd fbdc 	bl	80120ec <logging>
			handler_dev_info(c, hm);
 8014934:	4621      	mov	r1, r4
 8014936:	4628      	mov	r0, r5
 8014938:	f7fe fb36 	bl	8012fa8 <handler_dev_info>
 801493c:	e6b1      	b.n	80146a2 <dashboard+0x3a>
 801493e:	bf00      	nop
 8014940:	08037c1c 	.word	0x08037c1c
 8014944:	08037c24 	.word	0x08037c24
 8014948:	08037c3c 	.word	0x08037c3c
 801494c:	08037c48 	.word	0x08037c48
 8014950:	08037c2c 	.word	0x08037c2c
 8014954:	08036fac 	.word	0x08036fac
 8014958:	08037c5c 	.word	0x08037c5c
 801495c:	08037c68 	.word	0x08037c68
 8014960:	08037c80 	.word	0x08037c80
 8014964:	08037c90 	.word	0x08037c90
 8014968:	08037cac 	.word	0x08037cac
 801496c:	08037cbc 	.word	0x08037cbc
 8014970:	08037cd4 	.word	0x08037cd4
 8014974:	08037ce8 	.word	0x08037ce8
 8014978:	08037d04 	.word	0x08037d04
 801497c:	08037d14 	.word	0x08037d14
 8014980:	08037d30 	.word	0x08037d30
 8014984:	08037d44 	.word	0x08037d44
 8014988:	08037d60 	.word	0x08037d60
 801498c:	08037d70 	.word	0x08037d70
 8014990:	08037d8c 	.word	0x08037d8c
 8014994:	08037da0 	.word	0x08037da0
 8014998:	08037dc0 	.word	0x08037dc0
 801499c:	08037dd4 	.word	0x08037dd4
 80149a0:	08037df0 	.word	0x08037df0
 80149a4:	08037e04 	.word	0x08037e04
 80149a8:	08037e24 	.word	0x08037e24
 80149ac:	08037e38 	.word	0x08037e38
 80149b0:	08037e58 	.word	0x08037e58
 80149b4:	08037e6c 	.word	0x08037e6c
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 80149b8:	ae26      	add	r6, sp, #152	@ 0x98
 80149ba:	4950      	ldr	r1, [pc, #320]	@ (8014afc <dashboard+0x494>)
 80149bc:	4630      	mov	r0, r6
 80149be:	f00f fde7 	bl	8024590 <mg_str_s>
 80149c2:	2300      	movs	r3, #0
 80149c4:	9300      	str	r3, [sp, #0]
 80149c6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149ca:	68e1      	ldr	r1, [r4, #12]
 80149cc:	68a0      	ldr	r0, [r4, #8]
 80149ce:	f010 f801 	bl	80249d4 <mg_match>
 80149d2:	b120      	cbz	r0, 80149de <dashboard+0x376>
			handle_firmware_upload(c, hm);
 80149d4:	4621      	mov	r1, r4
 80149d6:	4628      	mov	r0, r5
 80149d8:	f7ff fd50 	bl	801447c <handle_firmware_upload>
 80149dc:	e661      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 80149de:	ae28      	add	r6, sp, #160	@ 0xa0
 80149e0:	4947      	ldr	r1, [pc, #284]	@ (8014b00 <dashboard+0x498>)
 80149e2:	4630      	mov	r0, r6
 80149e4:	f00f fdd4 	bl	8024590 <mg_str_s>
 80149e8:	2300      	movs	r3, #0
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	e896 000c 	ldmia.w	r6, {r2, r3}
 80149f0:	68e1      	ldr	r1, [r4, #12]
 80149f2:	68a0      	ldr	r0, [r4, #8]
 80149f4:	f00f ffee 	bl	80249d4 <mg_match>
 80149f8:	b140      	cbz	r0, 8014a0c <dashboard+0x3a4>
			logging(L_INFO, "Call API /api/firmware/md5");
 80149fa:	4942      	ldr	r1, [pc, #264]	@ (8014b04 <dashboard+0x49c>)
 80149fc:	2001      	movs	r0, #1
 80149fe:	f7fd fb75 	bl	80120ec <logging>
			handle_firmware_md5(c, hm);
 8014a02:	4621      	mov	r1, r4
 8014a04:	4628      	mov	r0, r5
 8014a06:	f7ff fdeb 	bl	80145e0 <handle_firmware_md5>
 8014a0a:	e64a      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 8014a0c:	ae2a      	add	r6, sp, #168	@ 0xa8
 8014a0e:	493e      	ldr	r1, [pc, #248]	@ (8014b08 <dashboard+0x4a0>)
 8014a10:	4630      	mov	r0, r6
 8014a12:	f00f fdbd 	bl	8024590 <mg_str_s>
 8014a16:	2300      	movs	r3, #0
 8014a18:	9300      	str	r3, [sp, #0]
 8014a1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a1e:	68e1      	ldr	r1, [r4, #12]
 8014a20:	68a0      	ldr	r0, [r4, #8]
 8014a22:	f00f ffd7 	bl	80249d4 <mg_match>
 8014a26:	b140      	cbz	r0, 8014a3a <dashboard+0x3d2>
			logging(L_INFO, "Call API /api/firmware/apply");
 8014a28:	4938      	ldr	r1, [pc, #224]	@ (8014b0c <dashboard+0x4a4>)
 8014a2a:	2001      	movs	r0, #1
 8014a2c:	f7fd fb5e 	bl	80120ec <logging>
			handle_activete_and_reboot(c, hm);
 8014a30:	4621      	mov	r1, r4
 8014a32:	4628      	mov	r0, r5
 8014a34:	f7ff fc8e 	bl	8014354 <handle_activete_and_reboot>
 8014a38:	e633      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014a3a:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014a3c:	4934      	ldr	r1, [pc, #208]	@ (8014b10 <dashboard+0x4a8>)
 8014a3e:	4630      	mov	r0, r6
 8014a40:	f00f fda6 	bl	8024590 <mg_str_s>
 8014a44:	2300      	movs	r3, #0
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a4c:	68e1      	ldr	r1, [r4, #12]
 8014a4e:	68a0      	ldr	r0, [r4, #8]
 8014a50:	f00f ffc0 	bl	80249d4 <mg_match>
 8014a54:	b120      	cbz	r0, 8014a60 <dashboard+0x3f8>
			handle_firmware_deactivate(c, hm);
 8014a56:	4621      	mov	r1, r4
 8014a58:	4628      	mov	r0, r5
 8014a5a:	f7fe fae3 	bl	8013024 <handle_firmware_deactivate>
 8014a5e:	e620      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014a60:	ae2e      	add	r6, sp, #184	@ 0xb8
 8014a62:	492c      	ldr	r1, [pc, #176]	@ (8014b14 <dashboard+0x4ac>)
 8014a64:	4630      	mov	r0, r6
 8014a66:	f00f fd93 	bl	8024590 <mg_str_s>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a72:	68e1      	ldr	r1, [r4, #12]
 8014a74:	68a0      	ldr	r0, [r4, #8]
 8014a76:	f00f ffad 	bl	80249d4 <mg_match>
 8014a7a:	b120      	cbz	r0, 8014a86 <dashboard+0x41e>
			 handle_web_files_remove(c, hm);
 8014a7c:	4621      	mov	r1, r4
 8014a7e:	4628      	mov	r0, r5
 8014a80:	f7fe fb0c 	bl	801309c <handle_web_files_remove>
 8014a84:	e60d      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014a86:	ae30      	add	r6, sp, #192	@ 0xc0
 8014a88:	4923      	ldr	r1, [pc, #140]	@ (8014b18 <dashboard+0x4b0>)
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	f00f fd80 	bl	8024590 <mg_str_s>
 8014a90:	2300      	movs	r3, #0
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a98:	68e1      	ldr	r1, [r4, #12]
 8014a9a:	68a0      	ldr	r0, [r4, #8]
 8014a9c:	f00f ff9a 	bl	80249d4 <mg_match>
 8014aa0:	b140      	cbz	r0, 8014ab4 <dashboard+0x44c>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8014aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8014b1c <dashboard+0x4b4>)
 8014aa4:	9300      	str	r3, [sp, #0]
 8014aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8014b20 <dashboard+0x4b8>)
 8014aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8014b24 <dashboard+0x4bc>)
 8014aaa:	4621      	mov	r1, r4
 8014aac:	4628      	mov	r0, r5
 8014aae:	f012 fa23 	bl	8026ef8 <mg_http_upload>
 8014ab2:	e5f6      	b.n	80146a2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8014ab4:	ae32      	add	r6, sp, #200	@ 0xc8
 8014ab6:	491c      	ldr	r1, [pc, #112]	@ (8014b28 <dashboard+0x4c0>)
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f00f fd69 	bl	8024590 <mg_str_s>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	9300      	str	r3, [sp, #0]
 8014ac2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014ac6:	68e1      	ldr	r1, [r4, #12]
 8014ac8:	68a0      	ldr	r0, [r4, #8]
 8014aca:	f00f ff83 	bl	80249d4 <mg_match>
 8014ace:	b120      	cbz	r0, 8014ada <dashboard+0x472>
			 handle_fs_mkdir(c, hm);
 8014ad0:	4621      	mov	r1, r4
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	f7ff fc7a 	bl	80143cc <handle_fs_mkdir>
 8014ad8:	e5e3      	b.n	80146a2 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014ada:	2300      	movs	r3, #0
 8014adc:	9302      	str	r3, [sp, #8]
 8014ade:	9303      	str	r3, [sp, #12]
 8014ae0:	9304      	str	r3, [sp, #16]
 8014ae2:	9305      	str	r3, [sp, #20]
 8014ae4:	9306      	str	r3, [sp, #24]
 8014ae6:	9307      	str	r3, [sp, #28]
 8014ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8014b20 <dashboard+0x4b8>)
 8014aea:	9302      	str	r3, [sp, #8]
 8014aec:	4b0d      	ldr	r3, [pc, #52]	@ (8014b24 <dashboard+0x4bc>)
 8014aee:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014af0:	aa02      	add	r2, sp, #8
 8014af2:	4621      	mov	r1, r4
 8014af4:	4628      	mov	r0, r5
 8014af6:	f012 f919 	bl	8026d2c <mg_http_serve_dir>
}
 8014afa:	e5d2      	b.n	80146a2 <dashboard+0x3a>
 8014afc:	08037e88 	.word	0x08037e88
 8014b00:	08037ea0 	.word	0x08037ea0
 8014b04:	08037eb4 	.word	0x08037eb4
 8014b08:	08037ed0 	.word	0x08037ed0
 8014b0c:	08037ee4 	.word	0x08037ee4
 8014b10:	08037f04 	.word	0x08037f04
 8014b14:	08037f20 	.word	0x08037f20
 8014b18:	08037f3c 	.word	0x08037f3c
 8014b1c:	0016e360 	.word	0x0016e360
 8014b20:	08036204 	.word	0x08036204
 8014b24:	200000a0 	.word	0x200000a0
 8014b28:	08037f58 	.word	0x08037f58

08014b2c <dash_hdl>:

void * dash_hdl (void){
 8014b2c:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 8014b2e:	220a      	movs	r2, #10
 8014b30:	4902      	ldr	r1, [pc, #8]	@ (8014b3c <dash_hdl+0x10>)
 8014b32:	4803      	ldr	r0, [pc, #12]	@ (8014b40 <dash_hdl+0x14>)
 8014b34:	f7ff fbac 	bl	8014290 <load_users>

	return &dashboard;
}
 8014b38:	4802      	ldr	r0, [pc, #8]	@ (8014b44 <dash_hdl+0x18>)
 8014b3a:	bd08      	pop	{r3, pc}
 8014b3c:	200021c0 	.word	0x200021c0
 8014b40:	08036258 	.word	0x08036258
 8014b44:	08014669 	.word	0x08014669

08014b48 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014b48:	4b01      	ldr	r3, [pc, #4]	@ (8014b50 <reg_parameter_handler+0x8>)
 8014b4a:	6018      	str	r0, [r3, #0]
}
 8014b4c:	4770      	bx	lr
 8014b4e:	bf00      	nop
 8014b50:	2000285c 	.word	0x2000285c

08014b54 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014b54:	4b1a      	ldr	r3, [pc, #104]	@ (8014bc0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	b103      	cbz	r3, 8014b5c <_ZL18mqtt_timer_handlerPv+0x8>
 8014b5a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8014b5c:	b530      	push	{r4, r5, lr}
 8014b5e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014b60:	4918      	ldr	r1, [pc, #96]	@ (8014bc4 <_ZL18mqtt_timer_handlerPv+0x70>)
 8014b62:	2001      	movs	r0, #1
 8014b64:	f7fd fac2 	bl	80120ec <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014b68:	4c17      	ldr	r4, [pc, #92]	@ (8014bc8 <_ZL18mqtt_timer_handlerPv+0x74>)
 8014b6a:	2240      	movs	r2, #64	@ 0x40
 8014b6c:	2100      	movs	r1, #0
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f018 f87e 	bl	802cc70 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014b74:	ad02      	add	r5, sp, #8
 8014b76:	4b15      	ldr	r3, [pc, #84]	@ (8014bcc <_ZL18mqtt_timer_handlerPv+0x78>)
 8014b78:	6819      	ldr	r1, [r3, #0]
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f00f fd08 	bl	8024590 <mg_str_s>
 8014b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b84:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014b88:	4b11      	ldr	r3, [pc, #68]	@ (8014bd0 <_ZL18mqtt_timer_handlerPv+0x7c>)
 8014b8a:	6819      	ldr	r1, [r3, #0]
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	f00f fcff 	bl	8024590 <mg_str_s>
 8014b92:	f104 0308 	add.w	r3, r4, #8
 8014b96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b9a:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 8014b9e:	233c      	movs	r3, #60	@ 0x3c
 8014ba0:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8014bd4 <_ZL18mqtt_timer_handlerPv+0x80>)
 8014ba8:	4622      	mov	r2, r4
 8014baa:	490b      	ldr	r1, [pc, #44]	@ (8014bd8 <_ZL18mqtt_timer_handlerPv+0x84>)
 8014bac:	6809      	ldr	r1, [r1, #0]
 8014bae:	480b      	ldr	r0, [pc, #44]	@ (8014bdc <_ZL18mqtt_timer_handlerPv+0x88>)
 8014bb0:	6800      	ldr	r0, [r0, #0]
 8014bb2:	f014 fa61 	bl	8029078 <mg_mqtt_connect>
 8014bb6:	4b02      	ldr	r3, [pc, #8]	@ (8014bc0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014bb8:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8014bba:	b005      	add	sp, #20
 8014bbc:	bd30      	pop	{r4, r5, pc}
 8014bbe:	bf00      	nop
 8014bc0:	20002880 	.word	0x20002880
 8014bc4:	08037f74 	.word	0x08037f74
 8014bc8:	20002884 	.word	0x20002884
 8014bcc:	200028d8 	.word	0x200028d8
 8014bd0:	200028d4 	.word	0x200028d4
 8014bd4:	080151ad 	.word	0x080151ad
 8014bd8:	200028dc 	.word	0x200028dc
 8014bdc:	200028c8 	.word	0x200028c8

08014be0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	b085      	sub	sp, #20
 8014be6:	4681      	mov	r9, r0
 8014be8:	4688      	mov	r8, r1
 8014bea:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8014bec:	4c2a      	ldr	r4, [pc, #168]	@ (8014c98 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 8014bee:	f100 0308 	add.w	r3, r0, #8
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	4b29      	ldr	r3, [pc, #164]	@ (8014c9c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8014ca0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014bf8:	2128      	movs	r1, #40	@ 0x28
 8014bfa:	6820      	ldr	r0, [r4, #0]
 8014bfc:	f00e fe40 	bl	8023880 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8014c00:	6824      	ldr	r4, [r4, #0]
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7fb fb4c 	bl	80102a0 <strlen>
 8014c08:	4601      	mov	r1, r0
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f000 fc1e 	bl	801544c <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 8014c10:	2600      	movs	r6, #0
 8014c12:	e03b      	b.n	8014c8c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014c14:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014c18:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014c1c:	791d      	ldrb	r5, [r3, #4]
 8014c1e:	4f21      	ldr	r7, [pc, #132]	@ (8014ca4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014c20:	462b      	mov	r3, r5
 8014c22:	4622      	mov	r2, r4
 8014c24:	2180      	movs	r1, #128	@ 0x80
 8014c26:	6838      	ldr	r0, [r7, #0]
 8014c28:	f000 fc2e 	bl	8015488 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014c2c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014cb0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014c30:	462b      	mov	r3, r5
 8014c32:	4622      	mov	r2, r4
 8014c34:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014c38:	f8db 0000 	ldr.w	r0, [fp]
 8014c3c:	f000 fcd4 	bl	80155e8 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014c40:	4d19      	ldr	r5, [pc, #100]	@ (8014ca8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014c42:	ac02      	add	r4, sp, #8
 8014c44:	6839      	ldr	r1, [r7, #0]
 8014c46:	4620      	mov	r0, r4
 8014c48:	f00f fca2 	bl	8024590 <mg_str_s>
 8014c4c:	f105 0318 	add.w	r3, r5, #24
 8014c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c54:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014c58:	f8db 1000 	ldr.w	r1, [fp]
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f00f fc97 	bl	8024590 <mg_str_s>
 8014c62:	f105 0320 	add.w	r3, r5, #32
 8014c66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c6a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8014c6e:	2401      	movs	r4, #1
 8014c70:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014c74:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014c78:	4629      	mov	r1, r5
 8014c7a:	4648      	mov	r0, r9
 8014c7c:	f012 ff62 	bl	8027b44 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014c80:	683a      	ldr	r2, [r7, #0]
 8014c82:	490a      	ldr	r1, [pc, #40]	@ (8014cac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014c84:	4620      	mov	r0, r4
 8014c86:	f7fd fa31 	bl	80120ec <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014c8a:	4426      	add	r6, r4
 8014c8c:	4556      	cmp	r6, sl
 8014c8e:	d3c1      	bcc.n	8014c14 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014c90:	b005      	add	sp, #20
 8014c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c96:	bf00      	nop
 8014c98:	2000287c 	.word	0x2000287c
 8014c9c:	08026311 	.word	0x08026311
 8014ca0:	08037580 	.word	0x08037580
 8014ca4:	200028d0 	.word	0x200028d0
 8014ca8:	20002884 	.word	0x20002884
 8014cac:	08037f94 	.word	0x08037f94
 8014cb0:	200028cc 	.word	0x200028cc

08014cb4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014cb4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014cb6:	fb01 f400 	mul.w	r4, r1, r0
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f005 ff8c 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014cc0:	4605      	mov	r5, r0
 8014cc2:	b118      	cbz	r0, 8014ccc <_ZL9my_callocjj+0x18>
 8014cc4:	4622      	mov	r2, r4
 8014cc6:	2100      	movs	r1, #0
 8014cc8:	f017 ffd2 	bl	802cc70 <memset>
}
 8014ccc:	4628      	mov	r0, r5
 8014cce:	bd38      	pop	{r3, r4, r5, pc}

08014cd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cd4:	b087      	sub	sp, #28
 8014cd6:	4607      	mov	r7, r0
 8014cd8:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014cda:	4d58      	ldr	r5, [pc, #352]	@ (8014e3c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014cdc:	682b      	ldr	r3, [r5, #0]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	2101      	movs	r1, #1
 8014ce2:	a804      	add	r0, sp, #16
 8014ce4:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014ce6:	682b      	ldr	r3, [r5, #0]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	2102      	movs	r1, #2
 8014cec:	f10d 0013 	add.w	r0, sp, #19
 8014cf0:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014cf2:	2203      	movs	r2, #3
 8014cf4:	4952      	ldr	r1, [pc, #328]	@ (8014e40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014cf6:	a804      	add	r0, sp, #16
 8014cf8:	f017 ff26 	bl	802cb48 <memcmp>
 8014cfc:	b948      	cbnz	r0, 8014d12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014cfe:	2203      	movs	r2, #3
 8014d00:	4950      	ldr	r1, [pc, #320]	@ (8014e44 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8014d02:	f10d 0013 	add.w	r0, sp, #19
 8014d06:	f017 ff1f 	bl	802cb48 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014d0a:	b910      	cbnz	r0, 8014d12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014d0c:	2c00      	cmp	r4, #0
 8014d0e:	f000 8091 	beq.w	8014e34 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8014d12:	4b4b      	ldr	r3, [pc, #300]	@ (8014e40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014d14:	aa06      	add	r2, sp, #24
 8014d16:	e912 0003 	ldmdb	r2, {r0, r1}
 8014d1a:	6018      	str	r0, [r3, #0]
 8014d1c:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014d1e:	2101      	movs	r1, #1
 8014d20:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014d24:	f7ff ffc6 	bl	8014cb4 <_ZL9my_callocjj>
 8014d28:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014d2a:	2101      	movs	r1, #1
 8014d2c:	2080      	movs	r0, #128	@ 0x80
 8014d2e:	f7ff ffc1 	bl	8014cb4 <_ZL9my_callocjj>
 8014d32:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014d34:	2200      	movs	r2, #0
 8014d36:	e038      	b.n	8014daa <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014d38:	f102 0801 	add.w	r8, r2, #1
 8014d3c:	fa5f f888 	uxtb.w	r8, r8
 8014d40:	f102 0318 	add.w	r3, r2, #24
 8014d44:	eb0d 0203 	add.w	r2, sp, r3
 8014d48:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	4643      	mov	r3, r8
 8014d50:	2201      	movs	r2, #1
 8014d52:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014d56:	4630      	mov	r0, r6
 8014d58:	f000 fe3a 	bl	80159d0 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014d5c:	4643      	mov	r3, r8
 8014d5e:	2201      	movs	r2, #1
 8014d60:	2180      	movs	r1, #128	@ 0x80
 8014d62:	4628      	mov	r0, r5
 8014d64:	f000 fe74 	bl	8015a50 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014d68:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014e48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014d6c:	ac02      	add	r4, sp, #8
 8014d6e:	4629      	mov	r1, r5
 8014d70:	4620      	mov	r0, r4
 8014d72:	f00f fc0d 	bl	8024590 <mg_str_s>
 8014d76:	f109 0318 	add.w	r3, r9, #24
 8014d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d7e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014d82:	4631      	mov	r1, r6
 8014d84:	4620      	mov	r0, r4
 8014d86:	f00f fc03 	bl	8024590 <mg_str_s>
 8014d8a:	f109 0320 	add.w	r3, r9, #32
 8014d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d92:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014d96:	2300      	movs	r3, #0
 8014d98:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014d9c:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014da0:	4649      	mov	r1, r9
 8014da2:	4638      	mov	r0, r7
 8014da4:	f012 fece 	bl	8027b44 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014da8:	4642      	mov	r2, r8
 8014daa:	2a02      	cmp	r2, #2
 8014dac:	d9c4      	bls.n	8014d38 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014dae:	2200      	movs	r2, #0
 8014db0:	e038      	b.n	8014e24 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014db2:	f102 0801 	add.w	r8, r2, #1
 8014db6:	fa5f f888 	uxtb.w	r8, r8
 8014dba:	f102 0318 	add.w	r3, r2, #24
 8014dbe:	eb0d 0203 	add.w	r2, sp, r3
 8014dc2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	4643      	mov	r3, r8
 8014dca:	2202      	movs	r2, #2
 8014dcc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f000 fdfd 	bl	80159d0 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014dd6:	4643      	mov	r3, r8
 8014dd8:	2202      	movs	r2, #2
 8014dda:	2180      	movs	r1, #128	@ 0x80
 8014ddc:	4628      	mov	r0, r5
 8014dde:	f000 fe37 	bl	8015a50 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014de2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014e48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014de6:	ac02      	add	r4, sp, #8
 8014de8:	4629      	mov	r1, r5
 8014dea:	4620      	mov	r0, r4
 8014dec:	f00f fbd0 	bl	8024590 <mg_str_s>
 8014df0:	f109 0318 	add.w	r3, r9, #24
 8014df4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014df8:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014dfc:	4631      	mov	r1, r6
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f00f fbc6 	bl	8024590 <mg_str_s>
 8014e04:	f109 0320 	add.w	r3, r9, #32
 8014e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e0c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014e10:	2300      	movs	r3, #0
 8014e12:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014e16:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014e1a:	4649      	mov	r1, r9
 8014e1c:	4638      	mov	r0, r7
 8014e1e:	f012 fe91 	bl	8027b44 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014e22:	4642      	mov	r2, r8
 8014e24:	2a02      	cmp	r2, #2
 8014e26:	d9c4      	bls.n	8014db2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f005 ff57 	bl	801acdc <vPortFree>
		free(topik);
 8014e2e:	4628      	mov	r0, r5
 8014e30:	f005 ff54 	bl	801acdc <vPortFree>
}
 8014e34:	b007      	add	sp, #28
 8014e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e3a:	bf00      	nop
 8014e3c:	20002868 	.word	0x20002868
 8014e40:	20002860 	.word	0x20002860
 8014e44:	20002863 	.word	0x20002863
 8014e48:	20002884 	.word	0x20002884

08014e4c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014e4c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8014e4e:	4b05      	ldr	r3, [pc, #20]	@ (8014e64 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014e50:	6818      	ldr	r0, [r3, #0]
 8014e52:	b110      	cbz	r0, 8014e5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014e54:	4b04      	ldr	r3, [pc, #16]	@ (8014e68 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	b903      	cbnz	r3, 8014e5c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014e5a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014e5c:	2100      	movs	r1, #0
 8014e5e:	f7ff ff37 	bl	8014cd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014e62:	e7fa      	b.n	8014e5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014e64:	20002880 	.word	0x20002880
 8014e68:	2000286c 	.word	0x2000286c

08014e6c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014e6c:	b508      	push	{r3, lr}
	if(is_registered){
 8014e6e:	4b05      	ldr	r3, [pc, #20]	@ (8014e84 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	b903      	cbnz	r3, 8014e76 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014e74:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014e76:	2101      	movs	r1, #1
 8014e78:	4b03      	ldr	r3, [pc, #12]	@ (8014e88 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8014e7a:	6818      	ldr	r0, [r3, #0]
 8014e7c:	f7ff ff28 	bl	8014cd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014e80:	e7f8      	b.n	8014e74 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014e82:	bf00      	nop
 8014e84:	2000286c 	.word	0x2000286c
 8014e88:	20002880 	.word	0x20002880

08014e8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8014e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e90:	b083      	sub	sp, #12
 8014e92:	4681      	mov	r9, r0
 8014e94:	460d      	mov	r5, r1
 8014e96:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014e98:	2400      	movs	r4, #0
 8014e9a:	e000      	b.n	8014e9e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8014e9c:	3401      	adds	r4, #1
 8014e9e:	42b4      	cmp	r4, r6
 8014ea0:	d22e      	bcs.n	8014f00 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014ea2:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014ea6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8014eaa:	2b02      	cmp	r3, #2
 8014eac:	d1f6      	bne.n	8014e9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014eae:	2101      	movs	r1, #1
 8014eb0:	2080      	movs	r0, #128	@ 0x80
 8014eb2:	f7ff feff 	bl	8014cb4 <_ZL9my_callocjj>
 8014eb6:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014eb8:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014ebc:	2202      	movs	r2, #2
 8014ebe:	2180      	movs	r1, #128	@ 0x80
 8014ec0:	f000 fdae 	bl	8015a20 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014ec4:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8014f0c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014ec8:	f04f 0b01 	mov.w	fp, #1
 8014ecc:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014ed0:	46ea      	mov	sl, sp
 8014ed2:	4639      	mov	r1, r7
 8014ed4:	4650      	mov	r0, sl
 8014ed6:	f00f fb5b 	bl	8024590 <mg_str_s>
 8014eda:	f108 0318 	add.w	r3, r8, #24
 8014ede:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014ee2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014ee6:	4641      	mov	r1, r8
 8014ee8:	4648      	mov	r0, r9
 8014eea:	f012 fddd 	bl	8027aa8 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8014eee:	463a      	mov	r2, r7
 8014ef0:	4905      	ldr	r1, [pc, #20]	@ (8014f08 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014ef2:	4658      	mov	r0, fp
 8014ef4:	f7fd f8fa 	bl	80120ec <logging>
			free(topik);
 8014ef8:	4638      	mov	r0, r7
 8014efa:	f005 feef 	bl	801acdc <vPortFree>
 8014efe:	e7cd      	b.n	8014e9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8014f00:	b003      	add	sp, #12
 8014f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f06:	bf00      	nop
 8014f08:	08037fb8 	.word	0x08037fb8
 8014f0c:	20002884 	.word	0x20002884

08014f10 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f14:	b087      	sub	sp, #28
	int relay_number = 0;  // Переменная для хранения номера реле
 8014f16:	2300      	movs	r3, #0
 8014f18:	9303      	str	r3, [sp, #12]
    const char *topic = mess->topic.buf;
 8014f1a:	6807      	ldr	r7, [r0, #0]
    const size_t topic_len = mess->topic.len;
 8014f1c:	6845      	ldr	r5, [r0, #4]
    const char *message = mess->data.buf;
 8014f1e:	6884      	ldr	r4, [r0, #8]
    const size_t message_len = mess->data.len;
 8014f20:	68c6      	ldr	r6, [r0, #12]
    if(message == NULL || topic == NULL){
 8014f22:	b1ac      	cbz	r4, 8014f50 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
 8014f24:	b1a7      	cbz	r7, 8014f50 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x40>
    if (topic_len < 1 || message_len < 1){
 8014f26:	b105      	cbz	r5, 8014f2a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a>
 8014f28:	bb0e      	cbnz	r6, 8014f6e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x5e>
    	logging(L_ERR, "Subscrabed topik len or message len < 1");
 8014f2a:	498c      	ldr	r1, [pc, #560]	@ (801515c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 8014f2c:	2003      	movs	r0, #3
 8014f2e:	f7fd f8dd 	bl	80120ec <logging>
    	MG_ERROR(("Subscrabed topik len or message len < 1 \n"));
 8014f32:	4b8b      	ldr	r3, [pc, #556]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f340 8101 	ble.w	801513e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 8014f3c:	4b89      	ldr	r3, [pc, #548]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014f3e:	229a      	movs	r2, #154	@ 0x9a
 8014f40:	4989      	ldr	r1, [pc, #548]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8014f42:	2001      	movs	r0, #1
 8014f44:	f011 fa98 	bl	8026478 <mg_log_prefix>
 8014f48:	4888      	ldr	r0, [pc, #544]	@ (801516c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 8014f4a:	f00f f943 	bl	80241d4 <mg_log>
    	return;
 8014f4e:	e0f6      	b.n	801513e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8014f50:	4b83      	ldr	r3, [pc, #524]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f340 80f2 	ble.w	801513e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
 8014f5a:	4b82      	ldr	r3, [pc, #520]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8014f5c:	2294      	movs	r2, #148	@ 0x94
 8014f5e:	4982      	ldr	r1, [pc, #520]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8014f60:	2001      	movs	r0, #1
 8014f62:	f011 fa89 	bl	8026478 <mg_log_prefix>
 8014f66:	4882      	ldr	r0, [pc, #520]	@ (8015170 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 8014f68:	f00f f934 	bl	80241d4 <mg_log>
    	return;
 8014f6c:	e0e7      	b.n	801513e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    char * local_message = (char *)calloc (message_len + 1, sizeof (char));
 8014f6e:	2101      	movs	r1, #1
 8014f70:	1870      	adds	r0, r6, r1
 8014f72:	f7ff fe9f 	bl	8014cb4 <_ZL9my_callocjj>
 8014f76:	4681      	mov	r9, r0
    char * local_topic = (char *)calloc (topic_len + 1, sizeof(char));
 8014f78:	2101      	movs	r1, #1
 8014f7a:	1868      	adds	r0, r5, r1
 8014f7c:	f7ff fe9a 	bl	8014cb4 <_ZL9my_callocjj>
 8014f80:	4680      	mov	r8, r0
    strncpy(local_message, message, message_len);
 8014f82:	4632      	mov	r2, r6
 8014f84:	4621      	mov	r1, r4
 8014f86:	4648      	mov	r0, r9
 8014f88:	f017 feb9 	bl	802ccfe <strncpy>
    strncpy(local_topic, topic, topic_len);
 8014f8c:	462a      	mov	r2, r5
 8014f8e:	4639      	mov	r1, r7
 8014f90:	4640      	mov	r0, r8
 8014f92:	f017 feb4 	bl	802ccfe <strncpy>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014f96:	4b77      	ldr	r3, [pc, #476]	@ (8015174 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	2102      	movs	r1, #2
 8014f9e:	a805      	add	r0, sp, #20
 8014fa0:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8014fa2:	9b05      	ldr	r3, [sp, #20]
 8014fa4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014fa8:	0c1b      	lsrs	r3, r3, #16
 8014faa:	f88d 3012 	strb.w	r3, [sp, #18]
    const char *switch_position = strstr(local_topic, "switch");
 8014fae:	4972      	ldr	r1, [pc, #456]	@ (8015178 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x268>)
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	f017 fedd 	bl	802cd70 <strstr>
    if (switch_position != NULL) {
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	f000 80b2 	beq.w	8015120 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8014fbc:	aa03      	add	r2, sp, #12
 8014fbe:	496f      	ldr	r1, [pc, #444]	@ (801517c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x26c>)
 8014fc0:	f017 fab4 	bl	802c52c <sscanf>
 8014fc4:	2801      	cmp	r0, #1
 8014fc6:	d009      	beq.n	8014fdc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xcc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014fc8:	4b65      	ldr	r3, [pc, #404]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f300 809d 	bgt.w	801510c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 8014fd2:	496b      	ldr	r1, [pc, #428]	@ (8015180 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x270>)
 8014fd4:	2003      	movs	r0, #3
 8014fd6:	f7fd f889 	bl	80120ec <logging>
 8014fda:	e0aa      	b.n	8015132 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8014fdc:	4b60      	ldr	r3, [pc, #384]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	dc19      	bgt.n	8015018 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x108>
    		logging(L_INFO, "Recv control message in topik %s, relay number %d, action %s", local_topic, relay_number, local_message);
 8014fe4:	f8cd 9000 	str.w	r9, [sp]
 8014fe8:	9b03      	ldr	r3, [sp, #12]
 8014fea:	4642      	mov	r2, r8
 8014fec:	4965      	ldr	r1, [pc, #404]	@ (8015184 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x274>)
 8014fee:	2001      	movs	r0, #1
 8014ff0:	f7fd f87c 	bl	80120ec <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8014ff4:	9c03      	ldr	r4, [sp, #12]
 8014ff6:	1e63      	subs	r3, r4, #1
 8014ff8:	2b02      	cmp	r3, #2
 8014ffa:	d819      	bhi.n	8015030 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x120>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 8014ffc:	2e02      	cmp	r6, #2
 8014ffe:	d034      	beq.n	801506a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15a>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 8015000:	2e03      	cmp	r6, #3
 8015002:	d055      	beq.n	80150b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a0>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 8015004:	4b56      	ldr	r3, [pc, #344]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	dc74      	bgt.n	80150f6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message);
 801500c:	464a      	mov	r2, r9
 801500e:	495e      	ldr	r1, [pc, #376]	@ (8015188 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8015010:	2003      	movs	r0, #3
 8015012:	f7fd f86b 	bl	80120ec <logging>
 8015016:	e08c      	b.n	8015132 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, local_topic));
 8015018:	4b52      	ldr	r3, [pc, #328]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801501a:	22ad      	movs	r2, #173	@ 0xad
 801501c:	4952      	ldr	r1, [pc, #328]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801501e:	2002      	movs	r0, #2
 8015020:	f011 fa2a 	bl	8026478 <mg_log_prefix>
 8015024:	4642      	mov	r2, r8
 8015026:	9903      	ldr	r1, [sp, #12]
 8015028:	4858      	ldr	r0, [pc, #352]	@ (801518c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x27c>)
 801502a:	f00f f8d3 	bl	80241d4 <mg_log>
 801502e:	e7d9      	b.n	8014fe4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd4>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015030:	4b4b      	ldr	r3, [pc, #300]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	dc0c      	bgt.n	8015052 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x142>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8015038:	9b03      	ldr	r3, [sp, #12]
 801503a:	2203      	movs	r2, #3
 801503c:	4954      	ldr	r1, [pc, #336]	@ (8015190 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 801503e:	4610      	mov	r0, r2
 8015040:	f7fd f854 	bl	80120ec <logging>
    		    free(local_message);
 8015044:	4648      	mov	r0, r9
 8015046:	f005 fe49 	bl	801acdc <vPortFree>
    		    free(local_topic);
 801504a:	4640      	mov	r0, r8
 801504c:	f005 fe46 	bl	801acdc <vPortFree>
    			return;
 8015050:	e075      	b.n	801513e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8015052:	4b44      	ldr	r3, [pc, #272]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015054:	22b2      	movs	r2, #178	@ 0xb2
 8015056:	4944      	ldr	r1, [pc, #272]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015058:	2001      	movs	r0, #1
 801505a:	f011 fa0d 	bl	8026478 <mg_log_prefix>
 801505e:	9a03      	ldr	r2, [sp, #12]
 8015060:	2103      	movs	r1, #3
 8015062:	484b      	ldr	r0, [pc, #300]	@ (8015190 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x280>)
 8015064:	f00f f8b6 	bl	80241d4 <mg_log>
 8015068:	e7e6      	b.n	8015038 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x128>
			if (message_len == 2 && strncmp(local_message, "ON", 2) == 0) {
 801506a:	2202      	movs	r2, #2
 801506c:	4949      	ldr	r1, [pc, #292]	@ (8015194 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x284>)
 801506e:	4648      	mov	r0, r9
 8015070:	f017 fe33 	bl	802ccda <strncmp>
 8015074:	2800      	cmp	r0, #0
 8015076:	d1c3      	bne.n	8015000 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf0>
				sw_w[relay_number-1] = 1;
 8015078:	f104 0317 	add.w	r3, r4, #23
 801507c:	446b      	add	r3, sp
 801507e:	2201      	movs	r2, #1
 8015080:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8015084:	4b36      	ldr	r3, [pc, #216]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	4293      	cmp	r3, r2
 801508a:	dc06      	bgt.n	801509a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x18a>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801508c:	4b39      	ldr	r3, [pc, #228]	@ (8015174 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2201      	movs	r2, #1
 8015092:	2102      	movs	r1, #2
 8015094:	a804      	add	r0, sp, #16
 8015096:	4798      	blx	r3
 8015098:	e04b      	b.n	8015132 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 801509a:	4b32      	ldr	r3, [pc, #200]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801509c:	22bf      	movs	r2, #191	@ 0xbf
 801509e:	4932      	ldr	r1, [pc, #200]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80150a0:	2002      	movs	r0, #2
 80150a2:	f011 f9e9 	bl	8026478 <mg_log_prefix>
 80150a6:	9903      	ldr	r1, [sp, #12]
 80150a8:	483b      	ldr	r0, [pc, #236]	@ (8015198 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x288>)
 80150aa:	f00f f893 	bl	80241d4 <mg_log>
 80150ae:	e7ed      	b.n	801508c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x17c>
			} else if (message_len == 3 && strncmp(local_message, "OFF", 3) == 0) {
 80150b0:	2203      	movs	r2, #3
 80150b2:	493a      	ldr	r1, [pc, #232]	@ (801519c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x28c>)
 80150b4:	4648      	mov	r0, r9
 80150b6:	f017 fe10 	bl	802ccda <strncmp>
 80150ba:	2800      	cmp	r0, #0
 80150bc:	d1a2      	bne.n	8015004 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf4>
				sw_w[relay_number-1] = 0;
 80150be:	f104 0317 	add.w	r3, r4, #23
 80150c2:	446b      	add	r3, sp
 80150c4:	2200      	movs	r2, #0
 80150c6:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80150ca:	4b25      	ldr	r3, [pc, #148]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	dc06      	bgt.n	80150e0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d0>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80150d2:	4b28      	ldr	r3, [pc, #160]	@ (8015174 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2201      	movs	r2, #1
 80150d8:	2102      	movs	r1, #2
 80150da:	a804      	add	r0, sp, #16
 80150dc:	4798      	blx	r3
 80150de:	e028      	b.n	8015132 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x222>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 80150e0:	4b20      	ldr	r3, [pc, #128]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80150e2:	22c3      	movs	r2, #195	@ 0xc3
 80150e4:	4920      	ldr	r1, [pc, #128]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80150e6:	2002      	movs	r0, #2
 80150e8:	f011 f9c6 	bl	8026478 <mg_log_prefix>
 80150ec:	9903      	ldr	r1, [sp, #12]
 80150ee:	482c      	ldr	r0, [pc, #176]	@ (80151a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x290>)
 80150f0:	f00f f870 	bl	80241d4 <mg_log>
 80150f4:	e7ed      	b.n	80150d2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", local_message));
 80150f6:	4b1b      	ldr	r3, [pc, #108]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80150f8:	22c7      	movs	r2, #199	@ 0xc7
 80150fa:	491b      	ldr	r1, [pc, #108]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80150fc:	2001      	movs	r0, #1
 80150fe:	f011 f9bb 	bl	8026478 <mg_log_prefix>
 8015102:	4649      	mov	r1, r9
 8015104:	4820      	ldr	r0, [pc, #128]	@ (8015188 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x278>)
 8015106:	f00f f865 	bl	80241d4 <mg_log>
 801510a:	e77f      	b.n	801500c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 801510c:	4b15      	ldr	r3, [pc, #84]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 801510e:	22cc      	movs	r2, #204	@ 0xcc
 8015110:	4915      	ldr	r1, [pc, #84]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 8015112:	2001      	movs	r0, #1
 8015114:	f011 f9b0 	bl	8026478 <mg_log_prefix>
 8015118:	4822      	ldr	r0, [pc, #136]	@ (80151a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x294>)
 801511a:	f00f f85b 	bl	80241d4 <mg_log>
 801511e:	e758      	b.n	8014fd2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc2>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015120:	4b0f      	ldr	r3, [pc, #60]	@ (8015160 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	dc0d      	bgt.n	8015144 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", local_topic);
 8015128:	4642      	mov	r2, r8
 801512a:	491f      	ldr	r1, [pc, #124]	@ (80151a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 801512c:	2003      	movs	r0, #3
 801512e:	f7fc ffdd 	bl	80120ec <logging>
    free(local_message);
 8015132:	4648      	mov	r0, r9
 8015134:	f005 fdd2 	bl	801acdc <vPortFree>
    free(local_topic);
 8015138:	4640      	mov	r0, r8
 801513a:	f005 fdcf 	bl	801acdc <vPortFree>
}
 801513e:	b007      	add	sp, #28
 8015140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", local_topic));
 8015144:	4b07      	ldr	r3, [pc, #28]	@ (8015164 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 8015146:	22d0      	movs	r2, #208	@ 0xd0
 8015148:	4907      	ldr	r1, [pc, #28]	@ (8015168 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 801514a:	2001      	movs	r0, #1
 801514c:	f011 f994 	bl	8026478 <mg_log_prefix>
 8015150:	4641      	mov	r1, r8
 8015152:	4815      	ldr	r0, [pc, #84]	@ (80151a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x298>)
 8015154:	f00f f83e 	bl	80241d4 <mg_log>
 8015158:	e7e6      	b.n	8015128 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 801515a:	bf00      	nop
 801515c:	08038044 	.word	0x08038044
 8015160:	2000012c 	.word	0x2000012c
 8015164:	08037fd4 	.word	0x08037fd4
 8015168:	08037ff4 	.word	0x08037ff4
 801516c:	0803806c 	.word	0x0803806c
 8015170:	08038020 	.word	0x08038020
 8015174:	20002868 	.word	0x20002868
 8015178:	08038098 	.word	0x08038098
 801517c:	080380a0 	.word	0x080380a0
 8015180:	0803820c 	.word	0x0803820c
 8015184:	080380d8 	.word	0x080380d8
 8015188:	08038198 	.word	0x08038198
 801518c:	080380ac 	.word	0x080380ac
 8015190:	08038118 	.word	0x08038118
 8015194:	08038168 	.word	0x08038168
 8015198:	0803816c 	.word	0x0803816c
 801519c:	08038180 	.word	0x08038180
 80151a0:	08038184 	.word	0x08038184
 80151a4:	080381d4 	.word	0x080381d4
 80151a8:	08038244 	.word	0x08038244

080151ac <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80151ac:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80151ae:	2910      	cmp	r1, #16
 80151b0:	d031      	beq.n	8015216 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 80151b2:	4605      	mov	r5, r0
 80151b4:	2911      	cmp	r1, #17
 80151b6:	d002      	beq.n	80151be <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 80151b8:	2909      	cmp	r1, #9
 80151ba:	d03a      	beq.n	8015232 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 80151bc:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 80151be:	4b22      	ldr	r3, [pc, #136]	@ (8015248 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	dc1d      	bgt.n	8015202 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 80151c6:	4921      	ldr	r1, [pc, #132]	@ (801524c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 80151c8:	2001      	movs	r0, #1
 80151ca:	f7fc ff8f 	bl	80120ec <logging>
		mqtt_conn = conn;
 80151ce:	4b20      	ldr	r3, [pc, #128]	@ (8015250 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80151d0:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 80151d2:	4b20      	ldr	r3, [pc, #128]	@ (8015254 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d1f0      	bne.n	80151bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80151da:	4e1f      	ldr	r6, [pc, #124]	@ (8015258 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 80151dc:	2206      	movs	r2, #6
 80151de:	4631      	mov	r1, r6
 80151e0:	4628      	mov	r0, r5
 80151e2:	f7ff fcfd 	bl	8014be0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80151e6:	4c1a      	ldr	r4, [pc, #104]	@ (8015250 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80151e8:	2101      	movs	r1, #1
 80151ea:	6820      	ldr	r0, [r4, #0]
 80151ec:	f7ff fd70 	bl	8014cd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80151f0:	2206      	movs	r2, #6
 80151f2:	4631      	mov	r1, r6
 80151f4:	6820      	ldr	r0, [r4, #0]
 80151f6:	f7ff fe49 	bl	8014e8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 80151fa:	4b16      	ldr	r3, [pc, #88]	@ (8015254 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80151fc:	2201      	movs	r2, #1
 80151fe:	701a      	strb	r2, [r3, #0]
 8015200:	e7dc      	b.n	80151bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8015202:	4b16      	ldr	r3, [pc, #88]	@ (801525c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8015204:	22e1      	movs	r2, #225	@ 0xe1
 8015206:	4916      	ldr	r1, [pc, #88]	@ (8015260 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8015208:	2003      	movs	r0, #3
 801520a:	f011 f935 	bl	8026478 <mg_log_prefix>
 801520e:	4815      	ldr	r0, [pc, #84]	@ (8015264 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8015210:	f00e ffe0 	bl	80241d4 <mg_log>
 8015214:	e7d7      	b.n	80151c6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8015216:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8015218:	4913      	ldr	r1, [pc, #76]	@ (8015268 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 801521a:	2001      	movs	r0, #1
 801521c:	f7fc ff66 	bl	80120ec <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8015220:	4620      	mov	r0, r4
 8015222:	f7ff fe75 	bl	8014f10 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8015226:	2100      	movs	r1, #0
 8015228:	4b09      	ldr	r3, [pc, #36]	@ (8015250 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	f7ff fd50 	bl	8014cd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 8015230:	e7c4      	b.n	80151bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 8015232:	490e      	ldr	r1, [pc, #56]	@ (801526c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8015234:	2001      	movs	r0, #1
 8015236:	f7fc ff59 	bl	80120ec <logging>
		mqtt_conn     = NULL;
 801523a:	2300      	movs	r3, #0
 801523c:	4a04      	ldr	r2, [pc, #16]	@ (8015250 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 801523e:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8015240:	4a04      	ldr	r2, [pc, #16]	@ (8015254 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8015242:	7013      	strb	r3, [r2, #0]
}
 8015244:	e7ba      	b.n	80151bc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8015246:	bf00      	nop
 8015248:	2000012c 	.word	0x2000012c
 801524c:	080382a0 	.word	0x080382a0
 8015250:	20002880 	.word	0x20002880
 8015254:	2000286c 	.word	0x2000286c
 8015258:	200000c8 	.word	0x200000c8
 801525c:	08038274 	.word	0x08038274
 8015260:	08037ff4 	.word	0x08037ff4
 8015264:	08038288 	.word	0x08038288
 8015268:	080382b8 	.word	0x080382b8
 801526c:	080382dc 	.word	0x080382dc

08015270 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8015270:	4b01      	ldr	r3, [pc, #4]	@ (8015278 <get_mqtt_connection+0x8>)
 8015272:	6818      	ldr	r0, [r3, #0]
 8015274:	4770      	bx	lr
 8015276:	bf00      	nop
 8015278:	20002880 	.word	0x20002880

0801527c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 801527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015280:	b086      	sub	sp, #24
 8015282:	4606      	mov	r6, r0
 8015284:	460c      	mov	r4, r1
 8015286:	4691      	mov	r9, r2
 8015288:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 801528a:	2101      	movs	r1, #1
 801528c:	2080      	movs	r0, #128	@ 0x80
 801528e:	f7ff fd11 	bl	8014cb4 <_ZL9my_callocjj>
 8015292:	f8df a148 	ldr.w	sl, [pc, #328]	@ 80153dc <mqtt_init+0x160>
 8015296:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 801529a:	2101      	movs	r1, #1
 801529c:	2021      	movs	r0, #33	@ 0x21
 801529e:	f7ff fd09 	bl	8014cb4 <_ZL9my_callocjj>
 80152a2:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80153e0 <mqtt_init+0x164>
 80152a6:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80152aa:	2101      	movs	r1, #1
 80152ac:	2021      	movs	r0, #33	@ 0x21
 80152ae:	f7ff fd01 	bl	8014cb4 <_ZL9my_callocjj>
 80152b2:	4f3b      	ldr	r7, [pc, #236]	@ (80153a0 <mqtt_init+0x124>)
 80152b4:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80152b6:	2101      	movs	r1, #1
 80152b8:	2080      	movs	r0, #128	@ 0x80
 80152ba:	f7ff fcfb 	bl	8014cb4 <_ZL9my_callocjj>
 80152be:	4b39      	ldr	r3, [pc, #228]	@ (80153a4 <mqtt_init+0x128>)
 80152c0:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80152c2:	2101      	movs	r1, #1
 80152c4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80152c8:	f7ff fcf4 	bl	8014cb4 <_ZL9my_callocjj>
 80152cc:	4b36      	ldr	r3, [pc, #216]	@ (80153a8 <mqtt_init+0x12c>)
 80152ce:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80152d0:	2101      	movs	r1, #1
 80152d2:	2028      	movs	r0, #40	@ 0x28
 80152d4:	f7ff fcee 	bl	8014cb4 <_ZL9my_callocjj>
 80152d8:	4b34      	ldr	r3, [pc, #208]	@ (80153ac <mqtt_init+0x130>)
 80152da:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 80152dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80152de:	4b34      	ldr	r3, [pc, #208]	@ (80153b0 <mqtt_init+0x134>)
 80152e0:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80152e2:	f8da a000 	ldr.w	sl, [sl]
 80152e6:	4649      	mov	r1, r9
 80152e8:	4650      	mov	r0, sl
 80152ea:	f018 fecb 	bl	802e084 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 80152ee:	f8d8 9000 	ldr.w	r9, [r8]
 80152f2:	4629      	mov	r1, r5
 80152f4:	4648      	mov	r0, r9
 80152f6:	f018 fec5 	bl	802e084 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 80152fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80152fc:	6838      	ldr	r0, [r7, #0]
 80152fe:	f018 fec1 	bl	802e084 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8015302:	464b      	mov	r3, r9
 8015304:	4652      	mov	r2, sl
 8015306:	492b      	ldr	r1, [pc, #172]	@ (80153b4 <mqtt_init+0x138>)
 8015308:	2001      	movs	r0, #1
 801530a:	f7fc feef 	bl	80120ec <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 801530e:	4d2a      	ldr	r5, [pc, #168]	@ (80153b8 <mqtt_init+0x13c>)
 8015310:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8015312:	4b2a      	ldr	r3, [pc, #168]	@ (80153bc <mqtt_init+0x140>)
 8015314:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8015316:	2106      	movs	r1, #6
 8015318:	4620      	mov	r0, r4
 801531a:	f000 f871 	bl	8015400 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 801531e:	4e28      	ldr	r6, [pc, #160]	@ (80153c0 <mqtt_init+0x144>)
 8015320:	ac04      	add	r4, sp, #16
 8015322:	f8d8 1000 	ldr.w	r1, [r8]
 8015326:	4620      	mov	r0, r4
 8015328:	f00f f932 	bl	8024590 <mg_str_s>
 801532c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015330:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8015334:	6839      	ldr	r1, [r7, #0]
 8015336:	4620      	mov	r0, r4
 8015338:	f00f f92a 	bl	8024590 <mg_str_s>
 801533c:	f106 0308 	add.w	r3, r6, #8
 8015340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015344:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8015348:	233c      	movs	r3, #60	@ 0x3c
 801534a:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 801534c:	2400      	movs	r4, #0
 801534e:	9402      	str	r4, [sp, #8]
 8015350:	4b1c      	ldr	r3, [pc, #112]	@ (80153c4 <mqtt_init+0x148>)
 8015352:	9301      	str	r3, [sp, #4]
 8015354:	2303      	movs	r3, #3
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	f242 7210 	movw	r2, #10000	@ 0x2710
 801535c:	2300      	movs	r3, #0
 801535e:	6828      	ldr	r0, [r5, #0]
 8015360:	f010 faf8 	bl	8025954 <mg_timer_add>
 8015364:	4b18      	ldr	r3, [pc, #96]	@ (80153c8 <mqtt_init+0x14c>)
 8015366:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8015368:	9402      	str	r4, [sp, #8]
 801536a:	4b18      	ldr	r3, [pc, #96]	@ (80153cc <mqtt_init+0x150>)
 801536c:	9301      	str	r3, [sp, #4]
 801536e:	2601      	movs	r6, #1
 8015370:	9600      	str	r6, [sp, #0]
 8015372:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8015376:	2300      	movs	r3, #0
 8015378:	6828      	ldr	r0, [r5, #0]
 801537a:	f010 faeb 	bl	8025954 <mg_timer_add>
 801537e:	4b14      	ldr	r3, [pc, #80]	@ (80153d0 <mqtt_init+0x154>)
 8015380:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8015382:	9402      	str	r4, [sp, #8]
 8015384:	4b13      	ldr	r3, [pc, #76]	@ (80153d4 <mqtt_init+0x158>)
 8015386:	9301      	str	r3, [sp, #4]
 8015388:	9600      	str	r6, [sp, #0]
 801538a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801538e:	2300      	movs	r3, #0
 8015390:	6828      	ldr	r0, [r5, #0]
 8015392:	f010 fadf 	bl	8025954 <mg_timer_add>
 8015396:	4b10      	ldr	r3, [pc, #64]	@ (80153d8 <mqtt_init+0x15c>)
 8015398:	6018      	str	r0, [r3, #0]

}
 801539a:	b006      	add	sp, #24
 801539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a0:	200028d4 	.word	0x200028d4
 80153a4:	200028d0 	.word	0x200028d0
 80153a8:	200028cc 	.word	0x200028cc
 80153ac:	2000287c 	.word	0x2000287c
 80153b0:	20002868 	.word	0x20002868
 80153b4:	080382f4 	.word	0x080382f4
 80153b8:	200028c8 	.word	0x200028c8
 80153bc:	200028c4 	.word	0x200028c4
 80153c0:	20002884 	.word	0x20002884
 80153c4:	08014b55 	.word	0x08014b55
 80153c8:	20002878 	.word	0x20002878
 80153cc:	08014e6d 	.word	0x08014e6d
 80153d0:	20002874 	.word	0x20002874
 80153d4:	08014e4d 	.word	0x08014e4d
 80153d8:	20002870 	.word	0x20002870
 80153dc:	200028dc 	.word	0x200028dc
 80153e0:	200028d8 	.word	0x200028d8

080153e4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80153e4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80153e6:	fb01 f400 	mul.w	r4, r1, r0
 80153ea:	4620      	mov	r0, r4
 80153ec:	f005 fbf4 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80153f0:	4605      	mov	r5, r0
 80153f2:	b118      	cbz	r0, 80153fc <_ZL9my_callocjj+0x18>
 80153f4:	4622      	mov	r2, r4
 80153f6:	2100      	movs	r1, #0
 80153f8:	f017 fc3a 	bl	802cc70 <memset>
}
 80153fc:	4628      	mov	r0, r5
 80153fe:	bd38      	pop	{r3, r4, r5, pc}

08015400 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8015400:	b570      	push	{r4, r5, r6, lr}
 8015402:	4606      	mov	r6, r0
 8015404:	460d      	mov	r5, r1

	if ( unical_id){
 8015406:	4b0f      	ldr	r3, [pc, #60]	@ (8015444 <set_device_id+0x44>)
 8015408:	6818      	ldr	r0, [r3, #0]
 801540a:	b108      	cbz	r0, 8015410 <set_device_id+0x10>
		free(unical_id);
 801540c:	f005 fc66 	bl	801acdc <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015410:	0068      	lsls	r0, r5, #1
 8015412:	2101      	movs	r1, #1
 8015414:	4408      	add	r0, r1
 8015416:	f7ff ffe5 	bl	80153e4 <_ZL9my_callocjj>
 801541a:	4b0a      	ldr	r3, [pc, #40]	@ (8015444 <set_device_id+0x44>)
 801541c:	6018      	str	r0, [r3, #0]


	if (unical_id){
 801541e:	b108      	cbz	r0, 8015424 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8015420:	2400      	movs	r4, #0
 8015422:	e00b      	b.n	801543c <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015428:	e00b      	b.n	8015442 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 801542a:	4b06      	ldr	r3, [pc, #24]	@ (8015444 <set_device_id+0x44>)
 801542c:	6818      	ldr	r0, [r3, #0]
 801542e:	5d32      	ldrb	r2, [r6, r4]
 8015430:	4905      	ldr	r1, [pc, #20]	@ (8015448 <set_device_id+0x48>)
 8015432:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015436:	f017 f859 	bl	802c4ec <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 801543a:	3401      	adds	r4, #1
 801543c:	42ac      	cmp	r4, r5
 801543e:	d3f4      	bcc.n	801542a <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 8015440:	2000      	movs	r0, #0
}
 8015442:	bd70      	pop	{r4, r5, r6, pc}
 8015444:	200028e4 	.word	0x200028e4
 8015448:	08038320 	.word	0x08038320

0801544c <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4605      	mov	r5, r0
 8015450:	460c      	mov	r4, r1

	if(dev_conf_ip){
 8015452:	4b0c      	ldr	r3, [pc, #48]	@ (8015484 <set_device_conf_ip+0x38>)
 8015454:	6818      	ldr	r0, [r3, #0]
 8015456:	b108      	cbz	r0, 801545c <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 8015458:	f005 fc40 	bl	801acdc <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 801545c:	2101      	movs	r1, #1
 801545e:	1860      	adds	r0, r4, r1
 8015460:	f7ff ffc0 	bl	80153e4 <_ZL9my_callocjj>
 8015464:	4b07      	ldr	r3, [pc, #28]	@ (8015484 <set_device_conf_ip+0x38>)
 8015466:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 8015468:	b140      	cbz	r0, 801547c <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 801546a:	4622      	mov	r2, r4
 801546c:	4629      	mov	r1, r5
 801546e:	f017 fc46 	bl	802ccfe <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8015472:	4b04      	ldr	r3, [pc, #16]	@ (8015484 <set_device_conf_ip+0x38>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2000      	movs	r0, #0
 8015478:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 801547a:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 801547c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015480:	e7fb      	b.n	801547a <set_device_conf_ip+0x2e>
 8015482:	bf00      	nop
 8015484:	200028e0 	.word	0x200028e0

08015488 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8015488:	b500      	push	{lr}
 801548a:	b087      	sub	sp, #28

	strcpy(buff, "");
 801548c:	f04f 0c00 	mov.w	ip, #0
 8015490:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8015494:	3a01      	subs	r2, #1
 8015496:	2a07      	cmp	r2, #7
 8015498:	f200 8087 	bhi.w	80155aa <get_config_topik_string+0x122>
 801549c:	e8df f002 	tbb	[pc, r2]
 80154a0:	45251604 	.word	0x45251604
 80154a4:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80154a8:	9304      	str	r3, [sp, #16]
 80154aa:	4b41      	ldr	r3, [pc, #260]	@ (80155b0 <get_config_topik_string+0x128>)
 80154ac:	9303      	str	r3, [sp, #12]
 80154ae:	4b41      	ldr	r3, [pc, #260]	@ (80155b4 <get_config_topik_string+0x12c>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	9302      	str	r3, [sp, #8]
 80154b4:	4b40      	ldr	r3, [pc, #256]	@ (80155b8 <get_config_topik_string+0x130>)
 80154b6:	9301      	str	r3, [sp, #4]
 80154b8:	4b40      	ldr	r3, [pc, #256]	@ (80155bc <get_config_topik_string+0x134>)
 80154ba:	9300      	str	r3, [sp, #0]
 80154bc:	4b40      	ldr	r3, [pc, #256]	@ (80155c0 <get_config_topik_string+0x138>)
 80154be:	4a41      	ldr	r2, [pc, #260]	@ (80155c4 <get_config_topik_string+0x13c>)
 80154c0:	f016 feac 	bl	802c21c <snprintf>
			return -1;
			break;
	}


	return 0;
 80154c4:	2000      	movs	r0, #0
}
 80154c6:	b007      	add	sp, #28
 80154c8:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80154cc:	9304      	str	r3, [sp, #16]
 80154ce:	4b3e      	ldr	r3, [pc, #248]	@ (80155c8 <get_config_topik_string+0x140>)
 80154d0:	9303      	str	r3, [sp, #12]
 80154d2:	4a38      	ldr	r2, [pc, #224]	@ (80155b4 <get_config_topik_string+0x12c>)
 80154d4:	6812      	ldr	r2, [r2, #0]
 80154d6:	9202      	str	r2, [sp, #8]
 80154d8:	4a37      	ldr	r2, [pc, #220]	@ (80155b8 <get_config_topik_string+0x130>)
 80154da:	9201      	str	r2, [sp, #4]
 80154dc:	9300      	str	r3, [sp, #0]
 80154de:	4b38      	ldr	r3, [pc, #224]	@ (80155c0 <get_config_topik_string+0x138>)
 80154e0:	4a38      	ldr	r2, [pc, #224]	@ (80155c4 <get_config_topik_string+0x13c>)
 80154e2:	f016 fe9b 	bl	802c21c <snprintf>
	return 0;
 80154e6:	2000      	movs	r0, #0
			break;
 80154e8:	e7ed      	b.n	80154c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80154ea:	9304      	str	r3, [sp, #16]
 80154ec:	4b37      	ldr	r3, [pc, #220]	@ (80155cc <get_config_topik_string+0x144>)
 80154ee:	9303      	str	r3, [sp, #12]
 80154f0:	4b30      	ldr	r3, [pc, #192]	@ (80155b4 <get_config_topik_string+0x12c>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	9302      	str	r3, [sp, #8]
 80154f6:	4b30      	ldr	r3, [pc, #192]	@ (80155b8 <get_config_topik_string+0x130>)
 80154f8:	9301      	str	r3, [sp, #4]
 80154fa:	4b35      	ldr	r3, [pc, #212]	@ (80155d0 <get_config_topik_string+0x148>)
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	4b30      	ldr	r3, [pc, #192]	@ (80155c0 <get_config_topik_string+0x138>)
 8015500:	4a30      	ldr	r2, [pc, #192]	@ (80155c4 <get_config_topik_string+0x13c>)
 8015502:	f016 fe8b 	bl	802c21c <snprintf>
	return 0;
 8015506:	2000      	movs	r0, #0
			break;
 8015508:	e7dd      	b.n	80154c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 801550a:	9304      	str	r3, [sp, #16]
 801550c:	4b31      	ldr	r3, [pc, #196]	@ (80155d4 <get_config_topik_string+0x14c>)
 801550e:	9303      	str	r3, [sp, #12]
 8015510:	4b28      	ldr	r3, [pc, #160]	@ (80155b4 <get_config_topik_string+0x12c>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	9302      	str	r3, [sp, #8]
 8015516:	4b28      	ldr	r3, [pc, #160]	@ (80155b8 <get_config_topik_string+0x130>)
 8015518:	9301      	str	r3, [sp, #4]
 801551a:	4b2d      	ldr	r3, [pc, #180]	@ (80155d0 <get_config_topik_string+0x148>)
 801551c:	9300      	str	r3, [sp, #0]
 801551e:	4b28      	ldr	r3, [pc, #160]	@ (80155c0 <get_config_topik_string+0x138>)
 8015520:	4a28      	ldr	r2, [pc, #160]	@ (80155c4 <get_config_topik_string+0x13c>)
 8015522:	f016 fe7b 	bl	802c21c <snprintf>
	return 0;
 8015526:	2000      	movs	r0, #0
			break;
 8015528:	e7cd      	b.n	80154c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 801552a:	9304      	str	r3, [sp, #16]
 801552c:	4b2a      	ldr	r3, [pc, #168]	@ (80155d8 <get_config_topik_string+0x150>)
 801552e:	9303      	str	r3, [sp, #12]
 8015530:	4b20      	ldr	r3, [pc, #128]	@ (80155b4 <get_config_topik_string+0x12c>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	9302      	str	r3, [sp, #8]
 8015536:	4b20      	ldr	r3, [pc, #128]	@ (80155b8 <get_config_topik_string+0x130>)
 8015538:	9301      	str	r3, [sp, #4]
 801553a:	4b25      	ldr	r3, [pc, #148]	@ (80155d0 <get_config_topik_string+0x148>)
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	4b20      	ldr	r3, [pc, #128]	@ (80155c0 <get_config_topik_string+0x138>)
 8015540:	4a20      	ldr	r2, [pc, #128]	@ (80155c4 <get_config_topik_string+0x13c>)
 8015542:	f016 fe6b 	bl	802c21c <snprintf>
	return 0;
 8015546:	2000      	movs	r0, #0
			break;
 8015548:	e7bd      	b.n	80154c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 801554a:	9304      	str	r3, [sp, #16]
 801554c:	4b23      	ldr	r3, [pc, #140]	@ (80155dc <get_config_topik_string+0x154>)
 801554e:	9303      	str	r3, [sp, #12]
 8015550:	4b18      	ldr	r3, [pc, #96]	@ (80155b4 <get_config_topik_string+0x12c>)
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	9302      	str	r3, [sp, #8]
 8015556:	4b18      	ldr	r3, [pc, #96]	@ (80155b8 <get_config_topik_string+0x130>)
 8015558:	9301      	str	r3, [sp, #4]
 801555a:	4b1d      	ldr	r3, [pc, #116]	@ (80155d0 <get_config_topik_string+0x148>)
 801555c:	9300      	str	r3, [sp, #0]
 801555e:	4b18      	ldr	r3, [pc, #96]	@ (80155c0 <get_config_topik_string+0x138>)
 8015560:	4a18      	ldr	r2, [pc, #96]	@ (80155c4 <get_config_topik_string+0x13c>)
 8015562:	f016 fe5b 	bl	802c21c <snprintf>
	return 0;
 8015566:	2000      	movs	r0, #0
			break;
 8015568:	e7ad      	b.n	80154c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 801556a:	9304      	str	r3, [sp, #16]
 801556c:	4b1c      	ldr	r3, [pc, #112]	@ (80155e0 <get_config_topik_string+0x158>)
 801556e:	9303      	str	r3, [sp, #12]
 8015570:	4b10      	ldr	r3, [pc, #64]	@ (80155b4 <get_config_topik_string+0x12c>)
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	9302      	str	r3, [sp, #8]
 8015576:	4b10      	ldr	r3, [pc, #64]	@ (80155b8 <get_config_topik_string+0x130>)
 8015578:	9301      	str	r3, [sp, #4]
 801557a:	4b15      	ldr	r3, [pc, #84]	@ (80155d0 <get_config_topik_string+0x148>)
 801557c:	9300      	str	r3, [sp, #0]
 801557e:	4b10      	ldr	r3, [pc, #64]	@ (80155c0 <get_config_topik_string+0x138>)
 8015580:	4a10      	ldr	r2, [pc, #64]	@ (80155c4 <get_config_topik_string+0x13c>)
 8015582:	f016 fe4b 	bl	802c21c <snprintf>
	return 0;
 8015586:	2000      	movs	r0, #0
			break;
 8015588:	e79d      	b.n	80154c6 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 801558a:	9304      	str	r3, [sp, #16]
 801558c:	4b15      	ldr	r3, [pc, #84]	@ (80155e4 <get_config_topik_string+0x15c>)
 801558e:	9303      	str	r3, [sp, #12]
 8015590:	4b08      	ldr	r3, [pc, #32]	@ (80155b4 <get_config_topik_string+0x12c>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	9302      	str	r3, [sp, #8]
 8015596:	4b08      	ldr	r3, [pc, #32]	@ (80155b8 <get_config_topik_string+0x130>)
 8015598:	9301      	str	r3, [sp, #4]
 801559a:	4b0d      	ldr	r3, [pc, #52]	@ (80155d0 <get_config_topik_string+0x148>)
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	4b08      	ldr	r3, [pc, #32]	@ (80155c0 <get_config_topik_string+0x138>)
 80155a0:	4a08      	ldr	r2, [pc, #32]	@ (80155c4 <get_config_topik_string+0x13c>)
 80155a2:	f016 fe3b 	bl	802c21c <snprintf>
	return 0;
 80155a6:	2000      	movs	r0, #0
			break;
 80155a8:	e78d      	b.n	80154c6 <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80155aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155ae:	e78a      	b.n	80154c6 <get_config_topik_string+0x3e>
 80155b0:	08038340 	.word	0x08038340
 80155b4:	200028e4 	.word	0x200028e4
 80155b8:	08036a80 	.word	0x08036a80
 80155bc:	08038348 	.word	0x08038348
 80155c0:	200000f8 	.word	0x200000f8
 80155c4:	08038328 	.word	0x08038328
 80155c8:	08038098 	.word	0x08038098
 80155cc:	08038358 	.word	0x08038358
 80155d0:	08038360 	.word	0x08038360
 80155d4:	08038368 	.word	0x08038368
 80155d8:	08038370 	.word	0x08038370
 80155dc:	08038378 	.word	0x08038378
 80155e0:	08038388 	.word	0x08038388
 80155e4:	08038398 	.word	0x08038398

080155e8 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 80155e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ec:	b099      	sub	sp, #100	@ 0x64
 80155ee:	9017      	str	r0, [sp, #92]	@ 0x5c
 80155f0:	460d      	mov	r5, r1
 80155f2:	4617      	mov	r7, r2
 80155f4:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 80155f6:	460a      	mov	r2, r1
 80155f8:	2100      	movs	r1, #0
 80155fa:	f017 fb39 	bl	802cc70 <memset>

	switch (payload_type) {
 80155fe:	1e7a      	subs	r2, r7, #1
 8015600:	2a07      	cmp	r2, #7
 8015602:	f200 81ba 	bhi.w	801597a <get_config_payload_string+0x392>
 8015606:	e8df f012 	tbh	[pc, r2, lsl #1]
 801560a:	0008      	.short	0x0008
 801560c:	00a10043 	.word	0x00a10043
 8015610:	00c500ea 	.word	0x00c500ea
 8015614:	0193016e 	.word	0x0193016e
 8015618:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801561a:	2101      	movs	r1, #1
 801561c:	2080      	movs	r0, #128	@ 0x80
 801561e:	f7ff fee1 	bl	80153e4 <_ZL9my_callocjj>
 8015622:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8015624:	9400      	str	r4, [sp, #0]
 8015626:	4b80      	ldr	r3, [pc, #512]	@ (8015828 <get_config_payload_string+0x240>)
 8015628:	4a80      	ldr	r2, [pc, #512]	@ (801582c <get_config_payload_string+0x244>)
 801562a:	2180      	movs	r1, #128	@ 0x80
 801562c:	f016 fdf6 	bl	802c21c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8015630:	4b7f      	ldr	r3, [pc, #508]	@ (8015830 <get_config_payload_string+0x248>)
 8015632:	681a      	ldr	r2, [r3, #0]
 8015634:	4b7f      	ldr	r3, [pc, #508]	@ (8015834 <get_config_payload_string+0x24c>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	9314      	str	r3, [sp, #80]	@ 0x50
 801563a:	4b7f      	ldr	r3, [pc, #508]	@ (8015838 <get_config_payload_string+0x250>)
 801563c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801563e:	4b7f      	ldr	r3, [pc, #508]	@ (801583c <get_config_payload_string+0x254>)
 8015640:	9312      	str	r3, [sp, #72]	@ 0x48
 8015642:	4b7f      	ldr	r3, [pc, #508]	@ (8015840 <get_config_payload_string+0x258>)
 8015644:	9311      	str	r3, [sp, #68]	@ 0x44
 8015646:	4b7f      	ldr	r3, [pc, #508]	@ (8015844 <get_config_payload_string+0x25c>)
 8015648:	9310      	str	r3, [sp, #64]	@ 0x40
 801564a:	4b7f      	ldr	r3, [pc, #508]	@ (8015848 <get_config_payload_string+0x260>)
 801564c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801564e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015650:	4b7e      	ldr	r3, [pc, #504]	@ (801584c <get_config_payload_string+0x264>)
 8015652:	930d      	str	r3, [sp, #52]	@ 0x34
 8015654:	497e      	ldr	r1, [pc, #504]	@ (8015850 <get_config_payload_string+0x268>)
 8015656:	910c      	str	r1, [sp, #48]	@ 0x30
 8015658:	940b      	str	r4, [sp, #44]	@ 0x2c
 801565a:	497e      	ldr	r1, [pc, #504]	@ (8015854 <get_config_payload_string+0x26c>)
 801565c:	910a      	str	r1, [sp, #40]	@ 0x28
 801565e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015660:	9308      	str	r3, [sp, #32]
 8015662:	9707      	str	r7, [sp, #28]
 8015664:	487c      	ldr	r0, [pc, #496]	@ (8015858 <get_config_payload_string+0x270>)
 8015666:	9006      	str	r0, [sp, #24]
 8015668:	9405      	str	r4, [sp, #20]
 801566a:	9104      	str	r1, [sp, #16]
 801566c:	9403      	str	r4, [sp, #12]
 801566e:	9102      	str	r1, [sp, #8]
 8015670:	9201      	str	r2, [sp, #4]
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	4b79      	ldr	r3, [pc, #484]	@ (801585c <get_config_payload_string+0x274>)
 8015676:	4a7a      	ldr	r2, [pc, #488]	@ (8015860 <get_config_payload_string+0x278>)
 8015678:	4629      	mov	r1, r5
 801567a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801567c:	f016 fdce 	bl	802c21c <snprintf>
 8015680:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8015682:	4638      	mov	r0, r7
 8015684:	f005 fb2a 	bl	801acdc <vPortFree>

			return len;
 8015688:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 801568a:	b019      	add	sp, #100	@ 0x64
 801568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8015690:	2101      	movs	r1, #1
 8015692:	2080      	movs	r0, #128	@ 0x80
 8015694:	f7ff fea6 	bl	80153e4 <_ZL9my_callocjj>
 8015698:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801569a:	2101      	movs	r1, #1
 801569c:	2080      	movs	r0, #128	@ 0x80
 801569e:	f7ff fea1 	bl	80153e4 <_ZL9my_callocjj>
 80156a2:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 80156a4:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8015898 <get_config_payload_string+0x2b0>
 80156a8:	9400      	str	r4, [sp, #0]
 80156aa:	464b      	mov	r3, r9
 80156ac:	4a6d      	ldr	r2, [pc, #436]	@ (8015864 <get_config_payload_string+0x27c>)
 80156ae:	2180      	movs	r1, #128	@ 0x80
 80156b0:	4638      	mov	r0, r7
 80156b2:	f016 fdb3 	bl	802c21c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 80156b6:	f8df a194 	ldr.w	sl, [pc, #404]	@ 801584c <get_config_payload_string+0x264>
 80156ba:	4e65      	ldr	r6, [pc, #404]	@ (8015850 <get_config_payload_string+0x268>)
 80156bc:	9602      	str	r6, [sp, #8]
 80156be:	9701      	str	r7, [sp, #4]
 80156c0:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015830 <get_config_payload_string+0x248>
 80156c4:	f8db 3000 	ldr.w	r3, [fp]
 80156c8:	9300      	str	r3, [sp, #0]
 80156ca:	4653      	mov	r3, sl
 80156cc:	4a66      	ldr	r2, [pc, #408]	@ (8015868 <get_config_payload_string+0x280>)
 80156ce:	2180      	movs	r1, #128	@ 0x80
 80156d0:	4640      	mov	r0, r8
 80156d2:	f016 fda3 	bl	802c21c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 80156d6:	9400      	str	r4, [sp, #0]
 80156d8:	4b64      	ldr	r3, [pc, #400]	@ (801586c <get_config_payload_string+0x284>)
 80156da:	4a54      	ldr	r2, [pc, #336]	@ (801582c <get_config_payload_string+0x244>)
 80156dc:	2180      	movs	r1, #128	@ 0x80
 80156de:	4638      	mov	r0, r7
 80156e0:	f016 fd9c 	bl	802c21c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 80156e4:	f8db 3000 	ldr.w	r3, [fp]
 80156e8:	4a52      	ldr	r2, [pc, #328]	@ (8015834 <get_config_payload_string+0x24c>)
 80156ea:	6812      	ldr	r2, [r2, #0]
 80156ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80156ee:	4a52      	ldr	r2, [pc, #328]	@ (8015838 <get_config_payload_string+0x250>)
 80156f0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80156f2:	4a52      	ldr	r2, [pc, #328]	@ (801583c <get_config_payload_string+0x254>)
 80156f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80156f6:	4a52      	ldr	r2, [pc, #328]	@ (8015840 <get_config_payload_string+0x258>)
 80156f8:	9211      	str	r2, [sp, #68]	@ 0x44
 80156fa:	4a52      	ldr	r2, [pc, #328]	@ (8015844 <get_config_payload_string+0x25c>)
 80156fc:	9210      	str	r2, [sp, #64]	@ 0x40
 80156fe:	4a52      	ldr	r2, [pc, #328]	@ (8015848 <get_config_payload_string+0x260>)
 8015700:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015702:	930e      	str	r3, [sp, #56]	@ 0x38
 8015704:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8015708:	960c      	str	r6, [sp, #48]	@ 0x30
 801570a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801570c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8015710:	9309      	str	r3, [sp, #36]	@ 0x24
 8015712:	f8cd a020 	str.w	sl, [sp, #32]
 8015716:	9707      	str	r7, [sp, #28]
 8015718:	f8cd 8018 	str.w	r8, [sp, #24]
 801571c:	9405      	str	r4, [sp, #20]
 801571e:	f8cd 9010 	str.w	r9, [sp, #16]
 8015722:	9403      	str	r4, [sp, #12]
 8015724:	f8cd 9008 	str.w	r9, [sp, #8]
 8015728:	9301      	str	r3, [sp, #4]
 801572a:	f8cd a000 	str.w	sl, [sp]
 801572e:	464b      	mov	r3, r9
 8015730:	4a4b      	ldr	r2, [pc, #300]	@ (8015860 <get_config_payload_string+0x278>)
 8015732:	4629      	mov	r1, r5
 8015734:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015736:	f016 fd71 	bl	802c21c <snprintf>
 801573a:	4604      	mov	r4, r0
			free(name);
 801573c:	4638      	mov	r0, r7
 801573e:	f005 facd 	bl	801acdc <vPortFree>
			free(com_topik);
 8015742:	4640      	mov	r0, r8
 8015744:	f005 faca 	bl	801acdc <vPortFree>
			return len;
 8015748:	b2e0      	uxtb	r0, r4
 801574a:	e79e      	b.n	801568a <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 801574c:	4b38      	ldr	r3, [pc, #224]	@ (8015830 <get_config_payload_string+0x248>)
 801574e:	6819      	ldr	r1, [r3, #0]
 8015750:	4b3e      	ldr	r3, [pc, #248]	@ (801584c <get_config_payload_string+0x264>)
 8015752:	4a47      	ldr	r2, [pc, #284]	@ (8015870 <get_config_payload_string+0x288>)
 8015754:	4837      	ldr	r0, [pc, #220]	@ (8015834 <get_config_payload_string+0x24c>)
 8015756:	6800      	ldr	r0, [r0, #0]
 8015758:	9010      	str	r0, [sp, #64]	@ 0x40
 801575a:	4837      	ldr	r0, [pc, #220]	@ (8015838 <get_config_payload_string+0x250>)
 801575c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801575e:	4837      	ldr	r0, [pc, #220]	@ (801583c <get_config_payload_string+0x254>)
 8015760:	900e      	str	r0, [sp, #56]	@ 0x38
 8015762:	4837      	ldr	r0, [pc, #220]	@ (8015840 <get_config_payload_string+0x258>)
 8015764:	900d      	str	r0, [sp, #52]	@ 0x34
 8015766:	4837      	ldr	r0, [pc, #220]	@ (8015844 <get_config_payload_string+0x25c>)
 8015768:	900c      	str	r0, [sp, #48]	@ 0x30
 801576a:	4837      	ldr	r0, [pc, #220]	@ (8015848 <get_config_payload_string+0x260>)
 801576c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801576e:	910a      	str	r1, [sp, #40]	@ 0x28
 8015770:	9309      	str	r3, [sp, #36]	@ 0x24
 8015772:	4840      	ldr	r0, [pc, #256]	@ (8015874 <get_config_payload_string+0x28c>)
 8015774:	9008      	str	r0, [sp, #32]
 8015776:	9207      	str	r2, [sp, #28]
 8015778:	9106      	str	r1, [sp, #24]
 801577a:	9305      	str	r3, [sp, #20]
 801577c:	483e      	ldr	r0, [pc, #248]	@ (8015878 <get_config_payload_string+0x290>)
 801577e:	9004      	str	r0, [sp, #16]
 8015780:	483e      	ldr	r0, [pc, #248]	@ (801587c <get_config_payload_string+0x294>)
 8015782:	9003      	str	r0, [sp, #12]
 8015784:	9202      	str	r2, [sp, #8]
 8015786:	483e      	ldr	r0, [pc, #248]	@ (8015880 <get_config_payload_string+0x298>)
 8015788:	9001      	str	r0, [sp, #4]
 801578a:	9100      	str	r1, [sp, #0]
 801578c:	4934      	ldr	r1, [pc, #208]	@ (8015860 <get_config_payload_string+0x278>)
 801578e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015790:	f016 feac 	bl	802c4ec <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8015794:	4b26      	ldr	r3, [pc, #152]	@ (8015830 <get_config_payload_string+0x248>)
 8015796:	6819      	ldr	r1, [r3, #0]
 8015798:	4b2c      	ldr	r3, [pc, #176]	@ (801584c <get_config_payload_string+0x264>)
 801579a:	4a3a      	ldr	r2, [pc, #232]	@ (8015884 <get_config_payload_string+0x29c>)
 801579c:	4825      	ldr	r0, [pc, #148]	@ (8015834 <get_config_payload_string+0x24c>)
 801579e:	6800      	ldr	r0, [r0, #0]
 80157a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80157a2:	4825      	ldr	r0, [pc, #148]	@ (8015838 <get_config_payload_string+0x250>)
 80157a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80157a6:	4825      	ldr	r0, [pc, #148]	@ (801583c <get_config_payload_string+0x254>)
 80157a8:	900e      	str	r0, [sp, #56]	@ 0x38
 80157aa:	4825      	ldr	r0, [pc, #148]	@ (8015840 <get_config_payload_string+0x258>)
 80157ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80157ae:	4825      	ldr	r0, [pc, #148]	@ (8015844 <get_config_payload_string+0x25c>)
 80157b0:	900c      	str	r0, [sp, #48]	@ 0x30
 80157b2:	4825      	ldr	r0, [pc, #148]	@ (8015848 <get_config_payload_string+0x260>)
 80157b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80157b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80157b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80157ba:	4833      	ldr	r0, [pc, #204]	@ (8015888 <get_config_payload_string+0x2a0>)
 80157bc:	9008      	str	r0, [sp, #32]
 80157be:	9207      	str	r2, [sp, #28]
 80157c0:	9106      	str	r1, [sp, #24]
 80157c2:	9305      	str	r3, [sp, #20]
 80157c4:	4831      	ldr	r0, [pc, #196]	@ (801588c <get_config_payload_string+0x2a4>)
 80157c6:	9004      	str	r0, [sp, #16]
 80157c8:	4823      	ldr	r0, [pc, #140]	@ (8015858 <get_config_payload_string+0x270>)
 80157ca:	9003      	str	r0, [sp, #12]
 80157cc:	9202      	str	r2, [sp, #8]
 80157ce:	482c      	ldr	r0, [pc, #176]	@ (8015880 <get_config_payload_string+0x298>)
 80157d0:	9001      	str	r0, [sp, #4]
 80157d2:	9100      	str	r1, [sp, #0]
 80157d4:	4922      	ldr	r1, [pc, #136]	@ (8015860 <get_config_payload_string+0x278>)
 80157d6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80157d8:	f016 fe88 	bl	802c4ec <sprintf>
			break;
 80157dc:	e7da      	b.n	8015794 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80157de:	4b14      	ldr	r3, [pc, #80]	@ (8015830 <get_config_payload_string+0x248>)
 80157e0:	6819      	ldr	r1, [r3, #0]
 80157e2:	4b1a      	ldr	r3, [pc, #104]	@ (801584c <get_config_payload_string+0x264>)
 80157e4:	4a1d      	ldr	r2, [pc, #116]	@ (801585c <get_config_payload_string+0x274>)
 80157e6:	4813      	ldr	r0, [pc, #76]	@ (8015834 <get_config_payload_string+0x24c>)
 80157e8:	6800      	ldr	r0, [r0, #0]
 80157ea:	9010      	str	r0, [sp, #64]	@ 0x40
 80157ec:	4812      	ldr	r0, [pc, #72]	@ (8015838 <get_config_payload_string+0x250>)
 80157ee:	900f      	str	r0, [sp, #60]	@ 0x3c
 80157f0:	4812      	ldr	r0, [pc, #72]	@ (801583c <get_config_payload_string+0x254>)
 80157f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80157f4:	4812      	ldr	r0, [pc, #72]	@ (8015840 <get_config_payload_string+0x258>)
 80157f6:	900d      	str	r0, [sp, #52]	@ 0x34
 80157f8:	4812      	ldr	r0, [pc, #72]	@ (8015844 <get_config_payload_string+0x25c>)
 80157fa:	900c      	str	r0, [sp, #48]	@ 0x30
 80157fc:	4812      	ldr	r0, [pc, #72]	@ (8015848 <get_config_payload_string+0x260>)
 80157fe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015800:	910a      	str	r1, [sp, #40]	@ 0x28
 8015802:	9309      	str	r3, [sp, #36]	@ 0x24
 8015804:	4822      	ldr	r0, [pc, #136]	@ (8015890 <get_config_payload_string+0x2a8>)
 8015806:	9008      	str	r0, [sp, #32]
 8015808:	9207      	str	r2, [sp, #28]
 801580a:	9106      	str	r1, [sp, #24]
 801580c:	9305      	str	r3, [sp, #20]
 801580e:	4821      	ldr	r0, [pc, #132]	@ (8015894 <get_config_payload_string+0x2ac>)
 8015810:	9004      	str	r0, [sp, #16]
 8015812:	4811      	ldr	r0, [pc, #68]	@ (8015858 <get_config_payload_string+0x270>)
 8015814:	9003      	str	r0, [sp, #12]
 8015816:	9202      	str	r2, [sp, #8]
 8015818:	4819      	ldr	r0, [pc, #100]	@ (8015880 <get_config_payload_string+0x298>)
 801581a:	9001      	str	r0, [sp, #4]
 801581c:	9100      	str	r1, [sp, #0]
 801581e:	4910      	ldr	r1, [pc, #64]	@ (8015860 <get_config_payload_string+0x278>)
 8015820:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015822:	f016 fe63 	bl	802c4ec <sprintf>
			break;
 8015826:	e7b5      	b.n	8015794 <get_config_payload_string+0x1ac>
 8015828:	080383a0 	.word	0x080383a0
 801582c:	080383ac 	.word	0x080383ac
 8015830:	200028e4 	.word	0x200028e4
 8015834:	200028e0 	.word	0x200028e0
 8015838:	080369a0 	.word	0x080369a0
 801583c:	0803699c 	.word	0x0803699c
 8015840:	080383b4 	.word	0x080383b4
 8015844:	08036a60 	.word	0x08036a60
 8015848:	08036a74 	.word	0x08036a74
 801584c:	08036a80 	.word	0x08036a80
 8015850:	08036fac 	.word	0x08036fac
 8015854:	08038340 	.word	0x08038340
 8015858:	0803a838 	.word	0x0803a838
 801585c:	08038370 	.word	0x08038370
 8015860:	0803851c 	.word	0x0803851c
 8015864:	080383c4 	.word	0x080383c4
 8015868:	080384f4 	.word	0x080384f4
 801586c:	080383cc 	.word	0x080383cc
 8015870:	08038358 	.word	0x08038358
 8015874:	080383e0 	.word	0x080383e0
 8015878:	080383e4 	.word	0x080383e4
 801587c:	080383f4 	.word	0x080383f4
 8015880:	08038418 	.word	0x08038418
 8015884:	08038368 	.word	0x08038368
 8015888:	08038420 	.word	0x08038420
 801588c:	08038424 	.word	0x08038424
 8015890:	08038434 	.word	0x08038434
 8015894:	08038438 	.word	0x08038438
 8015898:	08038098 	.word	0x08038098
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 801589c:	4b38      	ldr	r3, [pc, #224]	@ (8015980 <get_config_payload_string+0x398>)
 801589e:	6819      	ldr	r1, [r3, #0]
 80158a0:	4b38      	ldr	r3, [pc, #224]	@ (8015984 <get_config_payload_string+0x39c>)
 80158a2:	4a39      	ldr	r2, [pc, #228]	@ (8015988 <get_config_payload_string+0x3a0>)
 80158a4:	4839      	ldr	r0, [pc, #228]	@ (801598c <get_config_payload_string+0x3a4>)
 80158a6:	6800      	ldr	r0, [r0, #0]
 80158a8:	9010      	str	r0, [sp, #64]	@ 0x40
 80158aa:	4839      	ldr	r0, [pc, #228]	@ (8015990 <get_config_payload_string+0x3a8>)
 80158ac:	900f      	str	r0, [sp, #60]	@ 0x3c
 80158ae:	4839      	ldr	r0, [pc, #228]	@ (8015994 <get_config_payload_string+0x3ac>)
 80158b0:	900e      	str	r0, [sp, #56]	@ 0x38
 80158b2:	4839      	ldr	r0, [pc, #228]	@ (8015998 <get_config_payload_string+0x3b0>)
 80158b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80158b6:	4839      	ldr	r0, [pc, #228]	@ (801599c <get_config_payload_string+0x3b4>)
 80158b8:	900c      	str	r0, [sp, #48]	@ 0x30
 80158ba:	4839      	ldr	r0, [pc, #228]	@ (80159a0 <get_config_payload_string+0x3b8>)
 80158bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80158be:	910a      	str	r1, [sp, #40]	@ 0x28
 80158c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80158c2:	4838      	ldr	r0, [pc, #224]	@ (80159a4 <get_config_payload_string+0x3bc>)
 80158c4:	9008      	str	r0, [sp, #32]
 80158c6:	9207      	str	r2, [sp, #28]
 80158c8:	9106      	str	r1, [sp, #24]
 80158ca:	9305      	str	r3, [sp, #20]
 80158cc:	4836      	ldr	r0, [pc, #216]	@ (80159a8 <get_config_payload_string+0x3c0>)
 80158ce:	9004      	str	r0, [sp, #16]
 80158d0:	4836      	ldr	r0, [pc, #216]	@ (80159ac <get_config_payload_string+0x3c4>)
 80158d2:	9003      	str	r0, [sp, #12]
 80158d4:	9202      	str	r2, [sp, #8]
 80158d6:	4836      	ldr	r0, [pc, #216]	@ (80159b0 <get_config_payload_string+0x3c8>)
 80158d8:	9001      	str	r0, [sp, #4]
 80158da:	9100      	str	r1, [sp, #0]
 80158dc:	4935      	ldr	r1, [pc, #212]	@ (80159b4 <get_config_payload_string+0x3cc>)
 80158de:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80158e0:	f016 fe04 	bl	802c4ec <sprintf>
			break;
 80158e4:	e756      	b.n	8015794 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80158e6:	4b26      	ldr	r3, [pc, #152]	@ (8015980 <get_config_payload_string+0x398>)
 80158e8:	6819      	ldr	r1, [r3, #0]
 80158ea:	4b26      	ldr	r3, [pc, #152]	@ (8015984 <get_config_payload_string+0x39c>)
 80158ec:	4a32      	ldr	r2, [pc, #200]	@ (80159b8 <get_config_payload_string+0x3d0>)
 80158ee:	4827      	ldr	r0, [pc, #156]	@ (801598c <get_config_payload_string+0x3a4>)
 80158f0:	6800      	ldr	r0, [r0, #0]
 80158f2:	9010      	str	r0, [sp, #64]	@ 0x40
 80158f4:	4826      	ldr	r0, [pc, #152]	@ (8015990 <get_config_payload_string+0x3a8>)
 80158f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80158f8:	4826      	ldr	r0, [pc, #152]	@ (8015994 <get_config_payload_string+0x3ac>)
 80158fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80158fc:	4826      	ldr	r0, [pc, #152]	@ (8015998 <get_config_payload_string+0x3b0>)
 80158fe:	900d      	str	r0, [sp, #52]	@ 0x34
 8015900:	4826      	ldr	r0, [pc, #152]	@ (801599c <get_config_payload_string+0x3b4>)
 8015902:	900c      	str	r0, [sp, #48]	@ 0x30
 8015904:	4826      	ldr	r0, [pc, #152]	@ (80159a0 <get_config_payload_string+0x3b8>)
 8015906:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015908:	910a      	str	r1, [sp, #40]	@ 0x28
 801590a:	9309      	str	r3, [sp, #36]	@ 0x24
 801590c:	482b      	ldr	r0, [pc, #172]	@ (80159bc <get_config_payload_string+0x3d4>)
 801590e:	9008      	str	r0, [sp, #32]
 8015910:	9207      	str	r2, [sp, #28]
 8015912:	9106      	str	r1, [sp, #24]
 8015914:	9305      	str	r3, [sp, #20]
 8015916:	482a      	ldr	r0, [pc, #168]	@ (80159c0 <get_config_payload_string+0x3d8>)
 8015918:	9004      	str	r0, [sp, #16]
 801591a:	4824      	ldr	r0, [pc, #144]	@ (80159ac <get_config_payload_string+0x3c4>)
 801591c:	9003      	str	r0, [sp, #12]
 801591e:	9202      	str	r2, [sp, #8]
 8015920:	4823      	ldr	r0, [pc, #140]	@ (80159b0 <get_config_payload_string+0x3c8>)
 8015922:	9001      	str	r0, [sp, #4]
 8015924:	9100      	str	r1, [sp, #0]
 8015926:	4923      	ldr	r1, [pc, #140]	@ (80159b4 <get_config_payload_string+0x3cc>)
 8015928:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801592a:	f016 fddf 	bl	802c4ec <sprintf>
			break;
 801592e:	e731      	b.n	8015794 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8015930:	4b13      	ldr	r3, [pc, #76]	@ (8015980 <get_config_payload_string+0x398>)
 8015932:	6819      	ldr	r1, [r3, #0]
 8015934:	4b13      	ldr	r3, [pc, #76]	@ (8015984 <get_config_payload_string+0x39c>)
 8015936:	4a23      	ldr	r2, [pc, #140]	@ (80159c4 <get_config_payload_string+0x3dc>)
 8015938:	4814      	ldr	r0, [pc, #80]	@ (801598c <get_config_payload_string+0x3a4>)
 801593a:	6800      	ldr	r0, [r0, #0]
 801593c:	9010      	str	r0, [sp, #64]	@ 0x40
 801593e:	4814      	ldr	r0, [pc, #80]	@ (8015990 <get_config_payload_string+0x3a8>)
 8015940:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015942:	4814      	ldr	r0, [pc, #80]	@ (8015994 <get_config_payload_string+0x3ac>)
 8015944:	900e      	str	r0, [sp, #56]	@ 0x38
 8015946:	4814      	ldr	r0, [pc, #80]	@ (8015998 <get_config_payload_string+0x3b0>)
 8015948:	900d      	str	r0, [sp, #52]	@ 0x34
 801594a:	4814      	ldr	r0, [pc, #80]	@ (801599c <get_config_payload_string+0x3b4>)
 801594c:	900c      	str	r0, [sp, #48]	@ 0x30
 801594e:	4814      	ldr	r0, [pc, #80]	@ (80159a0 <get_config_payload_string+0x3b8>)
 8015950:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015952:	910a      	str	r1, [sp, #40]	@ 0x28
 8015954:	9309      	str	r3, [sp, #36]	@ 0x24
 8015956:	481c      	ldr	r0, [pc, #112]	@ (80159c8 <get_config_payload_string+0x3e0>)
 8015958:	9008      	str	r0, [sp, #32]
 801595a:	9207      	str	r2, [sp, #28]
 801595c:	9106      	str	r1, [sp, #24]
 801595e:	9305      	str	r3, [sp, #20]
 8015960:	481a      	ldr	r0, [pc, #104]	@ (80159cc <get_config_payload_string+0x3e4>)
 8015962:	9004      	str	r0, [sp, #16]
 8015964:	4811      	ldr	r0, [pc, #68]	@ (80159ac <get_config_payload_string+0x3c4>)
 8015966:	9003      	str	r0, [sp, #12]
 8015968:	9202      	str	r2, [sp, #8]
 801596a:	4811      	ldr	r0, [pc, #68]	@ (80159b0 <get_config_payload_string+0x3c8>)
 801596c:	9001      	str	r0, [sp, #4]
 801596e:	9100      	str	r1, [sp, #0]
 8015970:	4910      	ldr	r1, [pc, #64]	@ (80159b4 <get_config_payload_string+0x3cc>)
 8015972:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015974:	f016 fdba 	bl	802c4ec <sprintf>
			break;
 8015978:	e70c      	b.n	8015794 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 801597a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801597e:	e684      	b.n	801568a <get_config_payload_string+0xa2>
 8015980:	200028e4 	.word	0x200028e4
 8015984:	08036a80 	.word	0x08036a80
 8015988:	08038378 	.word	0x08038378
 801598c:	200028e0 	.word	0x200028e0
 8015990:	080369a0 	.word	0x080369a0
 8015994:	0803699c 	.word	0x0803699c
 8015998:	080383b4 	.word	0x080383b4
 801599c:	08036a60 	.word	0x08036a60
 80159a0:	08036a74 	.word	0x08036a74
 80159a4:	0803845c 	.word	0x0803845c
 80159a8:	08038460 	.word	0x08038460
 80159ac:	0803a838 	.word	0x0803a838
 80159b0:	08038418 	.word	0x08038418
 80159b4:	0803851c 	.word	0x0803851c
 80159b8:	08038388 	.word	0x08038388
 80159bc:	08038480 	.word	0x08038480
 80159c0:	08038484 	.word	0x08038484
 80159c4:	08038398 	.word	0x08038398
 80159c8:	080384b0 	.word	0x080384b0
 80159cc:	080384b4 	.word	0x080384b4

080159d0 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 80159d0:	b530      	push	{r4, r5, lr}
 80159d2:	b083      	sub	sp, #12
 80159d4:	461c      	mov	r4, r3
 80159d6:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 80159da:	2a01      	cmp	r2, #1
 80159dc:	d00b      	beq.n	80159f6 <gen_bin_sensor_status_payload_JSON+0x26>
 80159de:	2a02      	cmp	r2, #2
 80159e0:	d10b      	bne.n	80159fa <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 80159e2:	4b0a      	ldr	r3, [pc, #40]	@ (8015a0c <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 80159e4:	b15d      	cbz	r5, 80159fe <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 80159e6:	4a0a      	ldr	r2, [pc, #40]	@ (8015a10 <gen_bin_sensor_status_payload_JSON+0x40>)
 80159e8:	9201      	str	r2, [sp, #4]
 80159ea:	9400      	str	r4, [sp, #0]
 80159ec:	4a09      	ldr	r2, [pc, #36]	@ (8015a14 <gen_bin_sensor_status_payload_JSON+0x44>)
 80159ee:	f016 fc15 	bl	802c21c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 80159f2:	b003      	add	sp, #12
 80159f4:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 80159f6:	4b08      	ldr	r3, [pc, #32]	@ (8015a18 <gen_bin_sensor_status_payload_JSON+0x48>)
 80159f8:	e7f4      	b.n	80159e4 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 80159fa:	2300      	movs	r3, #0
 80159fc:	e7f2      	b.n	80159e4 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 80159fe:	4a07      	ldr	r2, [pc, #28]	@ (8015a1c <gen_bin_sensor_status_payload_JSON+0x4c>)
 8015a00:	9201      	str	r2, [sp, #4]
 8015a02:	9400      	str	r4, [sp, #0]
 8015a04:	4a03      	ldr	r2, [pc, #12]	@ (8015a14 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015a06:	f016 fc09 	bl	802c21c <snprintf>
 8015a0a:	e7f2      	b.n	80159f2 <gen_bin_sensor_status_payload_JSON+0x22>
 8015a0c:	08038098 	.word	0x08038098
 8015a10:	08038168 	.word	0x08038168
 8015a14:	080384e4 	.word	0x080384e4
 8015a18:	08038340 	.word	0x08038340
 8015a1c:	08038180 	.word	0x08038180

08015a20 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8015a20:	b500      	push	{lr}
 8015a22:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015a24:	9302      	str	r3, [sp, #8]
 8015a26:	4b06      	ldr	r3, [pc, #24]	@ (8015a40 <generate_comand_topik_for_subscrabe+0x20>)
 8015a28:	9301      	str	r3, [sp, #4]
 8015a2a:	4b06      	ldr	r3, [pc, #24]	@ (8015a44 <generate_comand_topik_for_subscrabe+0x24>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	9300      	str	r3, [sp, #0]
 8015a30:	4b05      	ldr	r3, [pc, #20]	@ (8015a48 <generate_comand_topik_for_subscrabe+0x28>)
 8015a32:	4a06      	ldr	r2, [pc, #24]	@ (8015a4c <generate_comand_topik_for_subscrabe+0x2c>)
 8015a34:	f016 fbf2 	bl	802c21c <snprintf>
			break;
	}
}
 8015a38:	b005      	add	sp, #20
 8015a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a3e:	bf00      	nop
 8015a40:	08038098 	.word	0x08038098
 8015a44:	200028e4 	.word	0x200028e4
 8015a48:	08036a80 	.word	0x08036a80
 8015a4c:	080384c0 	.word	0x080384c0

08015a50 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8015a50:	b500      	push	{lr}
 8015a52:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8015a54:	f04f 0c00 	mov.w	ip, #0
 8015a58:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8015a5c:	2a01      	cmp	r2, #1
 8015a5e:	d006      	beq.n	8015a6e <generate_status_topik+0x1e>
 8015a60:	2a02      	cmp	r2, #2
 8015a62:	d00f      	beq.n	8015a84 <generate_status_topik+0x34>
 8015a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8015a68:	b005      	add	sp, #20
 8015a6a:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8015a6e:	9302      	str	r3, [sp, #8]
 8015a70:	4b0a      	ldr	r3, [pc, #40]	@ (8015a9c <generate_status_topik+0x4c>)
 8015a72:	9301      	str	r3, [sp, #4]
 8015a74:	4b0a      	ldr	r3, [pc, #40]	@ (8015aa0 <generate_status_topik+0x50>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8015aa4 <generate_status_topik+0x54>)
 8015a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8015aa8 <generate_status_topik+0x58>)
 8015a7e:	f016 fbcd 	bl	802c21c <snprintf>
 8015a82:	e7f1      	b.n	8015a68 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015a84:	9302      	str	r3, [sp, #8]
 8015a86:	4b09      	ldr	r3, [pc, #36]	@ (8015aac <generate_status_topik+0x5c>)
 8015a88:	9301      	str	r3, [sp, #4]
 8015a8a:	4b05      	ldr	r3, [pc, #20]	@ (8015aa0 <generate_status_topik+0x50>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	4b04      	ldr	r3, [pc, #16]	@ (8015aa4 <generate_status_topik+0x54>)
 8015a92:	4a05      	ldr	r2, [pc, #20]	@ (8015aa8 <generate_status_topik+0x58>)
 8015a94:	f016 fbc2 	bl	802c21c <snprintf>
 8015a98:	e7e6      	b.n	8015a68 <generate_status_topik+0x18>
 8015a9a:	bf00      	nop
 8015a9c:	08038340 	.word	0x08038340
 8015aa0:	200028e4 	.word	0x200028e4
 8015aa4:	08036a80 	.word	0x08036a80
 8015aa8:	080384d0 	.word	0x080384d0
 8015aac:	08038098 	.word	0x08038098

08015ab0 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8015ab0:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015ab2:	4b08      	ldr	r3, [pc, #32]	@ (8015ad4 <timer_fn+0x24>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	b12b      	cbz	r3, 8015ac4 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8015ab8:	4b06      	ldr	r3, [pc, #24]	@ (8015ad4 <timer_fn+0x24>)
 8015aba:	6818      	ldr	r0, [r3, #0]
 8015abc:	b108      	cbz	r0, 8015ac2 <timer_fn+0x12>
 8015abe:	f014 f9eb 	bl	8029e98 <mg_sntp_request>
}
 8015ac2:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015ac4:	4a04      	ldr	r2, [pc, #16]	@ (8015ad8 <timer_fn+0x28>)
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	f014 fab8 	bl	802a03c <mg_sntp_connect>
 8015acc:	4b01      	ldr	r3, [pc, #4]	@ (8015ad4 <timer_fn+0x24>)
 8015ace:	6018      	str	r0, [r3, #0]
 8015ad0:	e7f2      	b.n	8015ab8 <timer_fn+0x8>
 8015ad2:	bf00      	nop
 8015ad4:	200028e8 	.word	0x200028e8
 8015ad8:	08015add 	.word	0x08015add

08015adc <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015adc:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8015ade:	2912      	cmp	r1, #18
 8015ae0:	d002      	beq.n	8015ae8 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8015ae2:	2909      	cmp	r1, #9
 8015ae4:	d046      	beq.n	8015b74 <sfn+0x98>
}
 8015ae6:	bd70      	pop	{r4, r5, r6, pc}
 8015ae8:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 8015aea:	4926      	ldr	r1, [pc, #152]	@ (8015b84 <sfn+0xa8>)
 8015aec:	2001      	movs	r0, #1
 8015aee:	f7fc fafd 	bl	80120ec <logging>
    uint64_t curtime = mg_now();
 8015af2:	f014 f90d 	bl	8029d10 <mg_now>
 8015af6:	4606      	mov	r6, r0
 8015af8:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015afa:	4b23      	ldr	r3, [pc, #140]	@ (8015b88 <sfn+0xac>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	2b01      	cmp	r3, #1
 8015b00:	dc20      	bgt.n	8015b44 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015b02:	4632      	mov	r2, r6
 8015b04:	462b      	mov	r3, r5
 8015b06:	4921      	ldr	r1, [pc, #132]	@ (8015b8c <sfn+0xb0>)
 8015b08:	2001      	movs	r0, #1
 8015b0a:	f7fc faef 	bl	80120ec <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8015b0e:	6825      	ldr	r5, [r4, #0]
 8015b10:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8015b12:	f010 fcab 	bl	802646c <mg_millis>
 8015b16:	1a28      	subs	r0, r5, r0
 8015b18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015b1c:	f04f 0300 	mov.w	r3, #0
 8015b20:	eb64 0101 	sbc.w	r1, r4, r1
 8015b24:	f7fb f918 	bl	8010d58 <__aeabi_uldivmod>
 8015b28:	4b19      	ldr	r3, [pc, #100]	@ (8015b90 <sfn+0xb4>)
 8015b2a:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015b2e:	4b16      	ldr	r3, [pc, #88]	@ (8015b88 <sfn+0xac>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	2b01      	cmp	r3, #1
 8015b34:	dc12      	bgt.n	8015b5c <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 8015b36:	462a      	mov	r2, r5
 8015b38:	4623      	mov	r3, r4
 8015b3a:	4916      	ldr	r1, [pc, #88]	@ (8015b94 <sfn+0xb8>)
 8015b3c:	2001      	movs	r0, #1
 8015b3e:	f7fc fad5 	bl	80120ec <logging>
 8015b42:	e7d0      	b.n	8015ae6 <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 8015b44:	4b14      	ldr	r3, [pc, #80]	@ (8015b98 <sfn+0xbc>)
 8015b46:	221b      	movs	r2, #27
 8015b48:	4914      	ldr	r1, [pc, #80]	@ (8015b9c <sfn+0xc0>)
 8015b4a:	2002      	movs	r0, #2
 8015b4c:	f010 fc94 	bl	8026478 <mg_log_prefix>
 8015b50:	4632      	mov	r2, r6
 8015b52:	462b      	mov	r3, r5
 8015b54:	480d      	ldr	r0, [pc, #52]	@ (8015b8c <sfn+0xb0>)
 8015b56:	f00e fb3d 	bl	80241d4 <mg_log>
 8015b5a:	e7d2      	b.n	8015b02 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8015b98 <sfn+0xbc>)
 8015b5e:	2221      	movs	r2, #33	@ 0x21
 8015b60:	490e      	ldr	r1, [pc, #56]	@ (8015b9c <sfn+0xc0>)
 8015b62:	2002      	movs	r0, #2
 8015b64:	f010 fc88 	bl	8026478 <mg_log_prefix>
 8015b68:	462a      	mov	r2, r5
 8015b6a:	4623      	mov	r3, r4
 8015b6c:	480c      	ldr	r0, [pc, #48]	@ (8015ba0 <sfn+0xc4>)
 8015b6e:	f00e fb31 	bl	80241d4 <mg_log>
 8015b72:	e7e0      	b.n	8015b36 <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015b74:	490b      	ldr	r1, [pc, #44]	@ (8015ba4 <sfn+0xc8>)
 8015b76:	2001      	movs	r0, #1
 8015b78:	f7fc fab8 	bl	80120ec <logging>
    s_sntp_conn = NULL;
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba8 <sfn+0xcc>)
 8015b7e:	2200      	movs	r2, #0
 8015b80:	601a      	str	r2, [r3, #0]
}
 8015b82:	e7b0      	b.n	8015ae6 <sfn+0xa>
 8015b84:	0803869c 	.word	0x0803869c
 8015b88:	2000012c 	.word	0x2000012c
 8015b8c:	080386e0 	.word	0x080386e0
 8015b90:	200028f0 	.word	0x200028f0
 8015b94:	08038738 	.word	0x08038738
 8015b98:	08038794 	.word	0x08038794
 8015b9c:	080386c0 	.word	0x080386c0
 8015ba0:	08038714 	.word	0x08038714
 8015ba4:	0803875c 	.word	0x0803875c
 8015ba8:	200028e8 	.word	0x200028e8

08015bac <start_sntp>:

void start_sntp(void *arg){
 8015bac:	b530      	push	{r4, r5, lr}
 8015bae:	b085      	sub	sp, #20
 8015bb0:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015bb2:	490d      	ldr	r1, [pc, #52]	@ (8015be8 <start_sntp+0x3c>)
 8015bb4:	2001      	movs	r0, #1
 8015bb6:	f7fc fa99 	bl	80120ec <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8015bba:	9402      	str	r4, [sp, #8]
 8015bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8015bec <start_sntp+0x40>)
 8015bbe:	9501      	str	r5, [sp, #4]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	9300      	str	r3, [sp, #0]
 8015bc4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015bc8:	2300      	movs	r3, #0
 8015bca:	4620      	mov	r0, r4
 8015bcc:	f00f fec2 	bl	8025954 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8015bd0:	9402      	str	r4, [sp, #8]
 8015bd2:	9501      	str	r5, [sp, #4]
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	4a05      	ldr	r2, [pc, #20]	@ (8015bf0 <start_sntp+0x44>)
 8015bda:	2300      	movs	r3, #0
 8015bdc:	4620      	mov	r0, r4
 8015bde:	f00f feb9 	bl	8025954 <mg_timer_add>

}
 8015be2:	b005      	add	sp, #20
 8015be4:	bd30      	pop	{r4, r5, pc}
 8015be6:	bf00      	nop
 8015be8:	08038778 	.word	0x08038778
 8015bec:	08015ab1 	.word	0x08015ab1
 8015bf0:	00107ac0 	.word	0x00107ac0

08015bf4 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015bf4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8015bf6:	fb01 f400 	mul.w	r4, r1, r0
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f004 ffec 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015c00:	4605      	mov	r5, r0
 8015c02:	b118      	cbz	r0, 8015c0c <my_calloc+0x18>
 8015c04:	4622      	mov	r2, r4
 8015c06:	2100      	movs	r1, #0
 8015c08:	f017 f832 	bl	802cc70 <memset>
}
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	bd38      	pop	{r3, r4, r5, pc}

08015c10 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015c10:	b570      	push	{r4, r5, r6, lr}
 8015c12:	b088      	sub	sp, #32
 8015c14:	4605      	mov	r5, r0
 8015c16:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 8015c18:	4917      	ldr	r1, [pc, #92]	@ (8015c78 <dev_description_handler+0x68>)
 8015c1a:	2000      	movs	r0, #0
 8015c1c:	f7fc fa66 	bl	80120ec <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015c20:	ae06      	add	r6, sp, #24
 8015c22:	4916      	ldr	r1, [pc, #88]	@ (8015c7c <dev_description_handler+0x6c>)
 8015c24:	4630      	mov	r0, r6
 8015c26:	f00e fcb3 	bl	8024590 <mg_str_s>
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015c36:	f00e fecd 	bl	80249d4 <mg_match>
 8015c3a:	b1a8      	cbz	r0, 8015c68 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 8015c3c:	4b10      	ldr	r3, [pc, #64]	@ (8015c80 <dev_description_handler+0x70>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	9305      	str	r3, [sp, #20]
 8015c42:	4b10      	ldr	r3, [pc, #64]	@ (8015c84 <dev_description_handler+0x74>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	9304      	str	r3, [sp, #16]
 8015c48:	4b0f      	ldr	r3, [pc, #60]	@ (8015c88 <dev_description_handler+0x78>)
 8015c4a:	9303      	str	r3, [sp, #12]
 8015c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8015c8c <dev_description_handler+0x7c>)
 8015c4e:	9302      	str	r3, [sp, #8]
 8015c50:	4b0f      	ldr	r3, [pc, #60]	@ (8015c90 <dev_description_handler+0x80>)
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	4b0f      	ldr	r3, [pc, #60]	@ (8015c94 <dev_description_handler+0x84>)
 8015c56:	9300      	str	r3, [sp, #0]
 8015c58:	4b0f      	ldr	r3, [pc, #60]	@ (8015c98 <dev_description_handler+0x88>)
 8015c5a:	4a10      	ldr	r2, [pc, #64]	@ (8015c9c <dev_description_handler+0x8c>)
 8015c5c:	21c8      	movs	r1, #200	@ 0xc8
 8015c5e:	4628      	mov	r0, r5
 8015c60:	f00e fb0c 	bl	802427c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8015c64:	b008      	add	sp, #32
 8015c66:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 8015c68:	4b0d      	ldr	r3, [pc, #52]	@ (8015ca0 <dev_description_handler+0x90>)
 8015c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8015c9c <dev_description_handler+0x8c>)
 8015c6c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015c70:	4628      	mov	r0, r5
 8015c72:	f00e fb03 	bl	802427c <mg_http_reply>
}
 8015c76:	e7f5      	b.n	8015c64 <dev_description_handler+0x54>
 8015c78:	08038798 	.word	0x08038798
 8015c7c:	080368f0 	.word	0x080368f0
 8015c80:	20002904 	.word	0x20002904
 8015c84:	2000290c 	.word	0x2000290c
 8015c88:	080369a0 	.word	0x080369a0
 8015c8c:	08036a60 	.word	0x08036a60
 8015c90:	080383b4 	.word	0x080383b4
 8015c94:	08036a74 	.word	0x08036a74
 8015c98:	08038aa0 	.word	0x08038aa0
 8015c9c:	08036fac 	.word	0x08036fac
 8015ca0:	08037640 	.word	0x08037640

08015ca4 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015ca4:	b510      	push	{r4, lr}
 8015ca6:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8015ca8:	4905      	ldr	r1, [pc, #20]	@ (8015cc0 <dev_404_handler+0x1c>)
 8015caa:	2000      	movs	r0, #0
 8015cac:	f7fc fa1e 	bl	80120ec <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015cb0:	4b04      	ldr	r3, [pc, #16]	@ (8015cc4 <dev_404_handler+0x20>)
 8015cb2:	4a05      	ldr	r2, [pc, #20]	@ (8015cc8 <dev_404_handler+0x24>)
 8015cb4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f00e fadf 	bl	802427c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8015cbe:	bd10      	pop	{r4, pc}
 8015cc0:	080387b8 	.word	0x080387b8
 8015cc4:	080387d0 	.word	0x080387d0
 8015cc8:	08036fac 	.word	0x08036fac

08015ccc <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8015ccc:	290b      	cmp	r1, #11
 8015cce:	d000      	beq.n	8015cd2 <ssdp_web_handler+0x6>
 8015cd0:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015cd2:	b570      	push	{r4, r5, r6, lr}
 8015cd4:	b086      	sub	sp, #24
 8015cd6:	4605      	mov	r5, r0
 8015cd8:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 8015cda:	4917      	ldr	r1, [pc, #92]	@ (8015d38 <ssdp_web_handler+0x6c>)
 8015cdc:	2000      	movs	r0, #0
 8015cde:	f7fc fa05 	bl	80120ec <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015ce2:	ae02      	add	r6, sp, #8
 8015ce4:	4915      	ldr	r1, [pc, #84]	@ (8015d3c <ssdp_web_handler+0x70>)
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f00e fc52 	bl	8024590 <mg_str_s>
 8015cec:	2300      	movs	r3, #0
 8015cee:	9300      	str	r3, [sp, #0]
 8015cf0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015cf4:	f104 0108 	add.w	r1, r4, #8
 8015cf8:	c903      	ldmia	r1, {r0, r1}
 8015cfa:	f00e fe6b 	bl	80249d4 <mg_match>
 8015cfe:	b128      	cbz	r0, 8015d0c <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015d00:	4621      	mov	r1, r4
 8015d02:	4628      	mov	r0, r5
 8015d04:	f7ff ff84 	bl	8015c10 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015d08:	b006      	add	sp, #24
 8015d0a:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015d0c:	ae04      	add	r6, sp, #16
 8015d0e:	490c      	ldr	r1, [pc, #48]	@ (8015d40 <ssdp_web_handler+0x74>)
 8015d10:	4630      	mov	r0, r6
 8015d12:	f00e fc3d 	bl	8024590 <mg_str_s>
 8015d16:	2300      	movs	r3, #0
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015d1e:	f104 0108 	add.w	r1, r4, #8
 8015d22:	c903      	ldmia	r1, {r0, r1}
 8015d24:	f00e fe56 	bl	80249d4 <mg_match>
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	d0ed      	beq.n	8015d08 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	4628      	mov	r0, r5
 8015d30:	f7ff ffb8 	bl	8015ca4 <dev_404_handler>
}
 8015d34:	e7e8      	b.n	8015d08 <ssdp_web_handler+0x3c>
 8015d36:	bf00      	nop
 8015d38:	080387fc 	.word	0x080387fc
 8015d3c:	08038824 	.word	0x08038824
 8015d40:	0803883c 	.word	0x0803883c

08015d44 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 8015d44:	b510      	push	{r4, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	4602      	mov	r2, r0
 8015d4a:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 8015d4c:	0e14      	lsrs	r4, r2, #24
 8015d4e:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 8015d52:	0c11      	lsrs	r1, r2, #16
 8015d54:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 8015d58:	0a13      	lsrs	r3, r2, #8
 8015d5a:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 8015d5e:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 8015d62:	9401      	str	r4, [sp, #4]
 8015d64:	b2c9      	uxtb	r1, r1
 8015d66:	9100      	str	r1, [sp, #0]
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	b2d2      	uxtb	r2, r2
 8015d6c:	4902      	ldr	r1, [pc, #8]	@ (8015d78 <ip_to_string+0x34>)
 8015d6e:	f016 fbbd 	bl	802c4ec <sprintf>
}
 8015d72:	b004      	add	sp, #16
 8015d74:	bd10      	pop	{r4, pc}
 8015d76:	bf00      	nop
 8015d78:	08038840 	.word	0x08038840

08015d7c <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 8015d7c:	b570      	push	{r4, r5, r6, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015d82:	491e      	ldr	r1, [pc, #120]	@ (8015dfc <send_ssdp_notify+0x80>)
 8015d84:	2000      	movs	r0, #0
 8015d86:	f7fc f9b1 	bl	80120ec <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 8015d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8015e00 <send_ssdp_notify+0x84>)
 8015d8c:	6818      	ldr	r0, [r3, #0]
 8015d8e:	f7fa fa87 	bl	80102a0 <strlen>
 8015d92:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8015d94:	2101      	movs	r1, #1
 8015d96:	f200 1039 	addw	r0, r0, #313	@ 0x139
 8015d9a:	f7ff ff2b 	bl	8015bf4 <my_calloc>
 8015d9e:	4a19      	ldr	r2, [pc, #100]	@ (8015e04 <send_ssdp_notify+0x88>)
 8015da0:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015da2:	b330      	cbz	r0, 8015df2 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015da4:	4b18      	ldr	r3, [pc, #96]	@ (8015e08 <send_ssdp_notify+0x8c>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	4d18      	ldr	r5, [pc, #96]	@ (8015e0c <send_ssdp_notify+0x90>)
 8015daa:	6829      	ldr	r1, [r5, #0]
 8015dac:	6898      	ldr	r0, [r3, #8]
 8015dae:	f7ff ffc9 	bl	8015d44 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015db2:	4b13      	ldr	r3, [pc, #76]	@ (8015e00 <send_ssdp_notify+0x84>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	9302      	str	r3, [sp, #8]
 8015db8:	4b15      	ldr	r3, [pc, #84]	@ (8015e10 <send_ssdp_notify+0x94>)
 8015dba:	9301      	str	r3, [sp, #4]
 8015dbc:	682b      	ldr	r3, [r5, #0]
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	4b14      	ldr	r3, [pc, #80]	@ (8015e14 <send_ssdp_notify+0x98>)
 8015dc2:	4a15      	ldr	r2, [pc, #84]	@ (8015e18 <send_ssdp_notify+0x9c>)
 8015dc4:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015dc8:	480e      	ldr	r0, [pc, #56]	@ (8015e04 <send_ssdp_notify+0x88>)
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	f016 fa26 	bl	802c21c <snprintf>
    if (udp_conn != NULL) {
 8015dd0:	b14e      	cbz	r6, 8015de6 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8015e04 <send_ssdp_notify+0x88>)
 8015dd4:	681c      	ldr	r4, [r3, #0]
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	f7fa fa62 	bl	80102a0 <strlen>
 8015ddc:	4602      	mov	r2, r0
 8015dde:	4621      	mov	r1, r4
 8015de0:	4630      	mov	r0, r6
 8015de2:	f011 fbfd 	bl	80275e0 <mg_send>
    free(buff);
 8015de6:	4b07      	ldr	r3, [pc, #28]	@ (8015e04 <send_ssdp_notify+0x88>)
 8015de8:	6818      	ldr	r0, [r3, #0]
 8015dea:	f004 ff77 	bl	801acdc <vPortFree>
}
 8015dee:	b004      	add	sp, #16
 8015df0:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015df2:	490a      	ldr	r1, [pc, #40]	@ (8015e1c <send_ssdp_notify+0xa0>)
 8015df4:	2003      	movs	r0, #3
 8015df6:	f7fc f979 	bl	80120ec <logging>
		return; //TODO add log
 8015dfa:	e7f8      	b.n	8015dee <send_ssdp_notify+0x72>
 8015dfc:	0803884c 	.word	0x0803884c
 8015e00:	2000290c 	.word	0x2000290c
 8015e04:	20002908 	.word	0x20002908
 8015e08:	200028fc 	.word	0x200028fc
 8015e0c:	20002904 	.word	0x20002904
 8015e10:	0803889c 	.word	0x0803889c
 8015e14:	08038894 	.word	0x08038894
 8015e18:	080389a8 	.word	0x080389a8
 8015e1c:	08038864 	.word	0x08038864

08015e20 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015e20:	2907      	cmp	r1, #7
 8015e22:	d000      	beq.n	8015e26 <ssdp_listener_handler+0x6>
 8015e24:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8015e26:	b570      	push	{r4, r5, r6, lr}
 8015e28:	b088      	sub	sp, #32
 8015e2a:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015e2c:	491a      	ldr	r1, [pc, #104]	@ (8015e98 <ssdp_listener_handler+0x78>)
 8015e2e:	2000      	movs	r0, #0
 8015e30:	f7fc f95c 	bl	80120ec <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015e34:	4b19      	ldr	r3, [pc, #100]	@ (8015e9c <ssdp_listener_handler+0x7c>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	ad02      	add	r5, sp, #8
 8015e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015e3c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015e3e:	4628      	mov	r0, r5
 8015e40:	f00e fbb2 	bl	80245a8 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015e44:	ae04      	add	r6, sp, #16
 8015e46:	4916      	ldr	r1, [pc, #88]	@ (8015ea0 <ssdp_listener_handler+0x80>)
 8015e48:	4630      	mov	r0, r6
 8015e4a:	f00e fba1 	bl	8024590 <mg_str_s>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	9300      	str	r3, [sp, #0]
 8015e52:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015e56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015e5a:	f00e fdbb 	bl	80249d4 <mg_match>
 8015e5e:	b918      	cbnz	r0, 8015e68 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015e60:	2300      	movs	r3, #0
 8015e62:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015e64:	b008      	add	sp, #32
 8015e66:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015e68:	ad06      	add	r5, sp, #24
 8015e6a:	490e      	ldr	r1, [pc, #56]	@ (8015ea4 <ssdp_listener_handler+0x84>)
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	f00e fb8f 	bl	8024590 <mg_str_s>
 8015e72:	2300      	movs	r3, #0
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015e7a:	a902      	add	r1, sp, #8
 8015e7c:	c903      	ldmia	r1, {r0, r1}
 8015e7e:	f00e fda9 	bl	80249d4 <mg_match>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d0ec      	beq.n	8015e60 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015e86:	4908      	ldr	r1, [pc, #32]	@ (8015ea8 <ssdp_listener_handler+0x88>)
 8015e88:	2000      	movs	r0, #0
 8015e8a:	f7fc f92f 	bl	80120ec <logging>
			send_ssdp_notify(udp_listen_conn);
 8015e8e:	4b03      	ldr	r3, [pc, #12]	@ (8015e9c <ssdp_listener_handler+0x7c>)
 8015e90:	6818      	ldr	r0, [r3, #0]
 8015e92:	f7ff ff73 	bl	8015d7c <send_ssdp_notify>
 8015e96:	e7e3      	b.n	8015e60 <ssdp_listener_handler+0x40>
 8015e98:	080388a4 	.word	0x080388a4
 8015e9c:	200028f8 	.word	0x200028f8
 8015ea0:	080388d8 	.word	0x080388d8
 8015ea4:	080388e4 	.word	0x080388e4
 8015ea8:	080388f4 	.word	0x080388f4

08015eac <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8015eac:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015eae:	490c      	ldr	r1, [pc, #48]	@ (8015ee0 <ssdp_timer_handler+0x34>)
 8015eb0:	2000      	movs	r0, #0
 8015eb2:	f7fc f91b 	bl	80120ec <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	461a      	mov	r2, r3
 8015eba:	490a      	ldr	r1, [pc, #40]	@ (8015ee4 <ssdp_timer_handler+0x38>)
 8015ebc:	480a      	ldr	r0, [pc, #40]	@ (8015ee8 <ssdp_timer_handler+0x3c>)
 8015ebe:	6800      	ldr	r0, [r0, #0]
 8015ec0:	f013 f862 	bl	8028f88 <mg_connect>
	if (conn == NULL){
 8015ec4:	b130      	cbz	r0, 8015ed4 <ssdp_timer_handler+0x28>
 8015ec6:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015ec8:	f7ff ff58 	bl	8015d7c <send_ssdp_notify>
	mg_close_conn(conn);
 8015ecc:	4620      	mov	r0, r4
 8015ece:	f011 fa45 	bl	802735c <mg_close_conn>
}
 8015ed2:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015ed4:	4905      	ldr	r1, [pc, #20]	@ (8015eec <ssdp_timer_handler+0x40>)
 8015ed6:	2003      	movs	r0, #3
 8015ed8:	f7fc f908 	bl	80120ec <logging>
		return ;
 8015edc:	e7f9      	b.n	8015ed2 <ssdp_timer_handler+0x26>
 8015ede:	bf00      	nop
 8015ee0:	08038924 	.word	0x08038924
 8015ee4:	08038c44 	.word	0x08038c44
 8015ee8:	20002900 	.word	0x20002900
 8015eec:	0803893c 	.word	0x0803893c

08015ef0 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015ef0:	b570      	push	{r4, r5, r6, lr}
 8015ef2:	4606      	mov	r6, r0
 8015ef4:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015ef6:	4910      	ldr	r1, [pc, #64]	@ (8015f38 <ssdp_set_id+0x48>)
 8015ef8:	2000      	movs	r0, #0
 8015efa:	f7fc f8f7 	bl	80120ec <logging>
	if (id && (id_len > 0)){
 8015efe:	b1d6      	cbz	r6, 8015f36 <ssdp_set_id+0x46>
 8015f00:	b1cd      	cbz	r5, 8015f36 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015f02:	4b0e      	ldr	r3, [pc, #56]	@ (8015f3c <ssdp_set_id+0x4c>)
 8015f04:	6818      	ldr	r0, [r3, #0]
 8015f06:	b108      	cbz	r0, 8015f0c <ssdp_set_id+0x1c>
 8015f08:	f004 fee8 	bl	801acdc <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015f0c:	0068      	lsls	r0, r5, #1
 8015f0e:	2101      	movs	r1, #1
 8015f10:	4408      	add	r0, r1
 8015f12:	f7ff fe6f 	bl	8015bf4 <my_calloc>
 8015f16:	4b09      	ldr	r3, [pc, #36]	@ (8015f3c <ssdp_set_id+0x4c>)
 8015f18:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8015f1a:	b160      	cbz	r0, 8015f36 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015f1c:	2400      	movs	r4, #0
 8015f1e:	e008      	b.n	8015f32 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015f20:	4b06      	ldr	r3, [pc, #24]	@ (8015f3c <ssdp_set_id+0x4c>)
 8015f22:	6818      	ldr	r0, [r3, #0]
 8015f24:	5d32      	ldrb	r2, [r6, r4]
 8015f26:	4906      	ldr	r1, [pc, #24]	@ (8015f40 <ssdp_set_id+0x50>)
 8015f28:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015f2c:	f016 fade 	bl	802c4ec <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015f30:	3401      	adds	r4, #1
 8015f32:	42a5      	cmp	r5, r4
 8015f34:	d8f4      	bhi.n	8015f20 <ssdp_set_id+0x30>
}
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	08038964 	.word	0x08038964
 8015f3c:	2000290c 	.word	0x2000290c
 8015f40:	08038320 	.word	0x08038320

08015f44 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8015f44:	b530      	push	{r4, r5, lr}
 8015f46:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8015f48:	4b18      	ldr	r3, [pc, #96]	@ (8015fac <ssdp_start_server+0x68>)
 8015f4a:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8015f4c:	4b18      	ldr	r3, [pc, #96]	@ (8015fb0 <ssdp_start_server+0x6c>)
 8015f4e:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8015f50:	2101      	movs	r1, #1
 8015f52:	2028      	movs	r0, #40	@ 0x28
 8015f54:	f7ff fe4e 	bl	8015bf4 <my_calloc>
 8015f58:	4b16      	ldr	r3, [pc, #88]	@ (8015fb4 <ssdp_start_server+0x70>)
 8015f5a:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8015f5c:	b318      	cbz	r0, 8015fa6 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8015f5e:	4d14      	ldr	r5, [pc, #80]	@ (8015fb0 <ssdp_start_server+0x6c>)
 8015f60:	2106      	movs	r1, #6
 8015f62:	6828      	ldr	r0, [r5, #0]
 8015f64:	f7ff ffc4 	bl	8015ef0 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8015f68:	4913      	ldr	r1, [pc, #76]	@ (8015fb8 <ssdp_start_server+0x74>)
 8015f6a:	2001      	movs	r0, #1
 8015f6c:	f7fc f8be 	bl	80120ec <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8015f70:	4c0e      	ldr	r4, [pc, #56]	@ (8015fac <ssdp_start_server+0x68>)
 8015f72:	2300      	movs	r3, #0
 8015f74:	9302      	str	r3, [sp, #8]
 8015f76:	4b11      	ldr	r3, [pc, #68]	@ (8015fbc <ssdp_start_server+0x78>)
 8015f78:	9301      	str	r3, [sp, #4]
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8015f82:	2300      	movs	r3, #0
 8015f84:	6820      	ldr	r0, [r4, #0]
 8015f86:	f00f fce5 	bl	8025954 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8015f8a:	682b      	ldr	r3, [r5, #0]
 8015f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8015fc0 <ssdp_start_server+0x7c>)
 8015f8e:	490d      	ldr	r1, [pc, #52]	@ (8015fc4 <ssdp_start_server+0x80>)
 8015f90:	6820      	ldr	r0, [r4, #0]
 8015f92:	f011 fabd 	bl	8027510 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8015f96:	682b      	ldr	r3, [r5, #0]
 8015f98:	4a0b      	ldr	r2, [pc, #44]	@ (8015fc8 <ssdp_start_server+0x84>)
 8015f9a:	490c      	ldr	r1, [pc, #48]	@ (8015fcc <ssdp_start_server+0x88>)
 8015f9c:	6820      	ldr	r0, [r4, #0]
 8015f9e:	f011 fa33 	bl	8027408 <mg_listen>
 8015fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8015fd0 <ssdp_start_server+0x8c>)
 8015fa4:	6018      	str	r0, [r3, #0]
}
 8015fa6:	b005      	add	sp, #20
 8015fa8:	bd30      	pop	{r4, r5, pc}
 8015faa:	bf00      	nop
 8015fac:	20002900 	.word	0x20002900
 8015fb0:	200028fc 	.word	0x200028fc
 8015fb4:	20002904 	.word	0x20002904
 8015fb8:	08038978 	.word	0x08038978
 8015fbc:	08015ead 	.word	0x08015ead
 8015fc0:	08015ccd 	.word	0x08015ccd
 8015fc4:	08038990 	.word	0x08038990
 8015fc8:	08015e21 	.word	0x08015e21
 8015fcc:	08038c44 	.word	0x08038c44
 8015fd0:	200028f8 	.word	0x200028f8

08015fd4 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8015fd4:	4770      	bx	lr
	...

08015fd8 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015fd8:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8015fda:	4b02      	ldr	r3, [pc, #8]	@ (8015fe4 <sFLASH_SPI_ReadBuffer+0xc>)
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	4798      	blx	r3
}
 8015fe0:	bd08      	pop	{r3, pc}
 8015fe2:	bf00      	nop
 8015fe4:	20002950 	.word	0x20002950

08015fe8 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8015fe8:	b410      	push	{r4}
	if (chip_select){
 8015fea:	b158      	cbz	r0, 8016004 <SPI_flash_reg_cb+0x1c>
 8015fec:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8015fee:	4809      	ldr	r0, [pc, #36]	@ (8016014 <SPI_flash_reg_cb+0x2c>)
 8015ff0:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8015ff2:	b159      	cbz	r1, 801600c <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8015ff4:	4807      	ldr	r0, [pc, #28]	@ (8016014 <SPI_flash_reg_cb+0x2c>)
 8015ff6:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8015ff8:	4906      	ldr	r1, [pc, #24]	@ (8016014 <SPI_flash_reg_cb+0x2c>)
 8015ffa:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8015ffc:	608b      	str	r3, [r1, #8]
}
 8015ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016002:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8016004:	4803      	ldr	r0, [pc, #12]	@ (8016014 <SPI_flash_reg_cb+0x2c>)
 8016006:	4c04      	ldr	r4, [pc, #16]	@ (8016018 <SPI_flash_reg_cb+0x30>)
 8016008:	60c4      	str	r4, [r0, #12]
 801600a:	e7f2      	b.n	8015ff2 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 801600c:	4901      	ldr	r1, [pc, #4]	@ (8016014 <SPI_flash_reg_cb+0x2c>)
 801600e:	4802      	ldr	r0, [pc, #8]	@ (8016018 <SPI_flash_reg_cb+0x30>)
 8016010:	6108      	str	r0, [r1, #16]
 8016012:	e7f1      	b.n	8015ff8 <SPI_flash_reg_cb+0x10>
 8016014:	20002950 	.word	0x20002950
 8016018:	08015fd5 	.word	0x08015fd5

0801601c <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 801601c:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 801601e:	4b02      	ldr	r3, [pc, #8]	@ (8016028 <sFLASH_CS_LOW+0xc>)
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	4798      	blx	r3
}
 8016024:	bd08      	pop	{r3, pc}
 8016026:	bf00      	nop
 8016028:	20002950 	.word	0x20002950

0801602c <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 801602c:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 801602e:	4b02      	ldr	r3, [pc, #8]	@ (8016038 <sFLASH_CS_HIGH+0xc>)
 8016030:	691b      	ldr	r3, [r3, #16]
 8016032:	4798      	blx	r3
}
 8016034:	bd08      	pop	{r3, pc}
 8016036:	bf00      	nop
 8016038:	20002950 	.word	0x20002950

0801603c <sFLASH_ReadByte>:
{
 801603c:	b500      	push	{lr}
 801603e:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8016040:	4b05      	ldr	r3, [pc, #20]	@ (8016058 <sFLASH_ReadByte+0x1c>)
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	2101      	movs	r1, #1
 8016046:	f10d 0007 	add.w	r0, sp, #7
 801604a:	4798      	blx	r3
}
 801604c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016050:	b003      	add	sp, #12
 8016052:	f85d fb04 	ldr.w	pc, [sp], #4
 8016056:	bf00      	nop
 8016058:	20002950 	.word	0x20002950

0801605c <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 801605c:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 801605e:	4b02      	ldr	r3, [pc, #8]	@ (8016068 <sFLASH_SendByte+0xc>)
 8016060:	689b      	ldr	r3, [r3, #8]
 8016062:	4798      	blx	r3
}
 8016064:	bd08      	pop	{r3, pc}
 8016066:	bf00      	nop
 8016068:	20002950 	.word	0x20002950

0801606c <sFLASH_Reset>:
void sFLASH_Reset(void){
 801606c:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 801606e:	f7ff ffd5 	bl	801601c <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8016072:	2066      	movs	r0, #102	@ 0x66
 8016074:	f7ff fff2 	bl	801605c <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8016078:	2099      	movs	r0, #153	@ 0x99
 801607a:	f7ff ffef 	bl	801605c <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 801607e:	f7ff ffd5 	bl	801602c <sFLASH_CS_HIGH>
}
 8016082:	bd08      	pop	{r3, pc}

08016084 <sFLASH_Init>:
void sFLASH_Init(void){
 8016084:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8016086:	2064      	movs	r0, #100	@ 0x64
 8016088:	f000 fa1e 	bl	80164c8 <HAL_Delay>
    sFLASH_Reset();
 801608c:	f7ff ffee 	bl	801606c <sFLASH_Reset>
    HAL_Delay(100);
 8016090:	2064      	movs	r0, #100	@ 0x64
 8016092:	f000 fa19 	bl	80164c8 <HAL_Delay>
    HAL_Delay(100);
 8016096:	2064      	movs	r0, #100	@ 0x64
 8016098:	f000 fa16 	bl	80164c8 <HAL_Delay>
}
 801609c:	bd08      	pop	{r3, pc}

0801609e <sFLASH_ReadBuffer>:
{
 801609e:	b570      	push	{r4, r5, r6, lr}
 80160a0:	4606      	mov	r6, r0
 80160a2:	460c      	mov	r4, r1
 80160a4:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 80160a6:	f7ff ffb9 	bl	801601c <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 80160aa:	2d10      	cmp	r5, #16
 80160ac:	d917      	bls.n	80160de <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 80160ae:	200b      	movs	r0, #11
 80160b0:	f7ff ffd4 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80160b4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80160b8:	f7ff ffd0 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 80160bc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80160c0:	f7ff ffcc 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80160c4:	b2e0      	uxtb	r0, r4
 80160c6:	f7ff ffc9 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 80160ca:	2000      	movs	r0, #0
 80160cc:	f7ff ffc6 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 80160d0:	4629      	mov	r1, r5
 80160d2:	4630      	mov	r0, r6
 80160d4:	f7ff ff80 	bl	8015fd8 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 80160d8:	f7ff ffa8 	bl	801602c <sFLASH_CS_HIGH>
}
 80160dc:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 80160de:	2003      	movs	r0, #3
 80160e0:	f7ff ffbc 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80160e4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80160e8:	f7ff ffb8 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80160ec:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80160f0:	f7ff ffb4 	bl	801605c <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 80160f4:	b2e0      	uxtb	r0, r4
 80160f6:	f7ff ffb1 	bl	801605c <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 80160fa:	e004      	b.n	8016106 <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 80160fc:	f7ff ff9e 	bl	801603c <sFLASH_ReadByte>
 8016100:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8016104:	4625      	mov	r5, r4
 8016106:	1e6b      	subs	r3, r5, #1
 8016108:	b29c      	uxth	r4, r3
 801610a:	2d00      	cmp	r5, #0
 801610c:	d1f6      	bne.n	80160fc <sFLASH_ReadBuffer+0x5e>
 801610e:	e7e3      	b.n	80160d8 <sFLASH_ReadBuffer+0x3a>

08016110 <sFLASH_ReadID>:
{
 8016110:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8016112:	f7ff ff83 	bl	801601c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8016116:	f7ff ff89 	bl	801602c <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801611a:	f7ff ff7f 	bl	801601c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801611e:	f7ff ff85 	bl	801602c <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8016122:	f7ff ff7b 	bl	801601c <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8016126:	209f      	movs	r0, #159	@ 0x9f
 8016128:	f7ff ff98 	bl	801605c <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 801612c:	f7ff ff86 	bl	801603c <sFLASH_ReadByte>
 8016130:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8016132:	f7ff ff83 	bl	801603c <sFLASH_ReadByte>
 8016136:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8016138:	f7ff ff80 	bl	801603c <sFLASH_ReadByte>
 801613c:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 801613e:	f7ff ff75 	bl	801602c <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8016142:	0224      	lsls	r4, r4, #8
 8016144:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8016148:	ea44 0005 	orr.w	r0, r4, r5
 801614c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016150 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8016150:	b538      	push	{r3, r4, r5, lr}
 8016152:	4605      	mov	r5, r0
	sFLASH_Init();
 8016154:	f7ff ff96 	bl	8016084 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8016158:	f7ff ffda 	bl	8016110 <sFLASH_ReadID>
	switch (flash_id) {
 801615c:	4b55      	ldr	r3, [pc, #340]	@ (80162b4 <sFLASH_GetInfo+0x164>)
 801615e:	4298      	cmp	r0, r3
 8016160:	f000 8085 	beq.w	801626e <sFLASH_GetInfo+0x11e>
 8016164:	f0c0 809c 	bcc.w	80162a0 <sFLASH_GetInfo+0x150>
 8016168:	4b53      	ldr	r3, [pc, #332]	@ (80162b8 <sFLASH_GetInfo+0x168>)
 801616a:	4298      	cmp	r0, r3
 801616c:	f200 8098 	bhi.w	80162a0 <sFLASH_GetInfo+0x150>
 8016170:	3b03      	subs	r3, #3
 8016172:	4298      	cmp	r0, r3
 8016174:	f0c0 8094 	bcc.w	80162a0 <sFLASH_GetInfo+0x150>
 8016178:	4b50      	ldr	r3, [pc, #320]	@ (80162bc <sFLASH_GetInfo+0x16c>)
 801617a:	4403      	add	r3, r0
 801617c:	2b03      	cmp	r3, #3
 801617e:	f200 808f 	bhi.w	80162a0 <sFLASH_GetInfo+0x150>
 8016182:	e8df f003 	tbb	[pc, r3]
 8016186:	2b02      	.short	0x2b02
 8016188:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801618a:	4c4d      	ldr	r4, [pc, #308]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 801618c:	4b4d      	ldr	r3, [pc, #308]	@ (80162c4 <sFLASH_GetInfo+0x174>)
 801618e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016190:	2301      	movs	r3, #1
 8016192:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016194:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8016196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801619a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801619c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80161a0:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 80161a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80161a6:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q16", sizeof(flash_info.model_name) - 1);
 80161a8:	2231      	movs	r2, #49	@ 0x31
 80161aa:	4947      	ldr	r1, [pc, #284]	@ (80162c8 <sFLASH_GetInfo+0x178>)
 80161ac:	f104 000e 	add.w	r0, r4, #14
 80161b0:	f016 fda5 	bl	802ccfe <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80161b4:	2300      	movs	r3, #0
 80161b6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 80161ba:	46ac      	mov	ip, r5
 80161bc:	4c40      	ldr	r4, [pc, #256]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 80161be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80161d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80161d8:	4628      	mov	r0, r5
 80161da:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80161dc:	4c38      	ldr	r4, [pc, #224]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 80161de:	4b3b      	ldr	r3, [pc, #236]	@ (80162cc <sFLASH_GetInfo+0x17c>)
 80161e0:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80161e2:	2301      	movs	r3, #1
 80161e4:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80161e6:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80161e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80161ec:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80161ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80161f2:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 80161f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80161f8:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q32", sizeof(flash_info.model_name) - 1);
 80161fa:	2231      	movs	r2, #49	@ 0x31
 80161fc:	4934      	ldr	r1, [pc, #208]	@ (80162d0 <sFLASH_GetInfo+0x180>)
 80161fe:	f104 000e 	add.w	r0, r4, #14
 8016202:	f016 fd7c 	bl	802ccfe <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016206:	2300      	movs	r3, #0
 8016208:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801620c:	e7d5      	b.n	80161ba <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801620e:	4c2c      	ldr	r4, [pc, #176]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 8016210:	4b30      	ldr	r3, [pc, #192]	@ (80162d4 <sFLASH_GetInfo+0x184>)
 8016212:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016214:	2301      	movs	r3, #1
 8016216:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016218:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801621a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801621e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016224:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8016226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801622a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q64", sizeof(flash_info.model_name) - 1);
 801622c:	2231      	movs	r2, #49	@ 0x31
 801622e:	492a      	ldr	r1, [pc, #168]	@ (80162d8 <sFLASH_GetInfo+0x188>)
 8016230:	f104 000e 	add.w	r0, r4, #14
 8016234:	f016 fd63 	bl	802ccfe <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016238:	2300      	movs	r3, #0
 801623a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801623e:	e7bc      	b.n	80161ba <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8016240:	4c1f      	ldr	r4, [pc, #124]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 8016242:	4b1d      	ldr	r3, [pc, #116]	@ (80162b8 <sFLASH_GetInfo+0x168>)
 8016244:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016246:	2301      	movs	r3, #1
 8016248:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 801624a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801624c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016250:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016252:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016256:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8016258:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "Winbond W25Q128", sizeof(flash_info.model_name) - 1);
 801625a:	2231      	movs	r2, #49	@ 0x31
 801625c:	491f      	ldr	r1, [pc, #124]	@ (80162dc <sFLASH_GetInfo+0x18c>)
 801625e:	f104 000e 	add.w	r0, r4, #14
 8016262:	f016 fd4c 	bl	802ccfe <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016266:	2300      	movs	r3, #0
 8016268:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801626c:	e7a5      	b.n	80161ba <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 801626e:	4c14      	ldr	r4, [pc, #80]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 8016270:	4b10      	ldr	r3, [pc, #64]	@ (80162b4 <sFLASH_GetInfo+0x164>)
 8016272:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8016274:	2301      	movs	r3, #1
 8016276:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8016278:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801627a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801627e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8016280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016284:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8016286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801628a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 801628c:	2231      	movs	r2, #49	@ 0x31
 801628e:	4914      	ldr	r1, [pc, #80]	@ (80162e0 <sFLASH_GetInfo+0x190>)
 8016290:	f104 000e 	add.w	r0, r4, #14
 8016294:	f016 fd33 	bl	802ccfe <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8016298:	2300      	movs	r3, #0
 801629a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801629e:	e78c      	b.n	80161ba <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80162a0:	4807      	ldr	r0, [pc, #28]	@ (80162c0 <sFLASH_GetInfo+0x170>)
 80162a2:	2300      	movs	r3, #0
 80162a4:	f840 3b0e 	str.w	r3, [r0], #14
			strncpy(flash_info.model_name, "Unknown", sizeof(flash_info.model_name) - 1);
 80162a8:	2231      	movs	r2, #49	@ 0x31
 80162aa:	490e      	ldr	r1, [pc, #56]	@ (80162e4 <sFLASH_GetInfo+0x194>)
 80162ac:	f016 fd27 	bl	802ccfe <strncpy>
			break;
 80162b0:	e783      	b.n	80161ba <sFLASH_GetInfo+0x6a>
 80162b2:	bf00      	nop
 80162b4:	00c22016 	.word	0x00c22016
 80162b8:	00ef4018 	.word	0x00ef4018
 80162bc:	ff10bfeb 	.word	0xff10bfeb
 80162c0:	20002910 	.word	0x20002910
 80162c4:	00ef4015 	.word	0x00ef4015
 80162c8:	08038c60 	.word	0x08038c60
 80162cc:	00ef4016 	.word	0x00ef4016
 80162d0:	08038c70 	.word	0x08038c70
 80162d4:	00ef4017 	.word	0x00ef4017
 80162d8:	08038c80 	.word	0x08038c80
 80162dc:	08038c90 	.word	0x08038c90
 80162e0:	08038ca0 	.word	0x08038ca0
 80162e4:	08038ca8 	.word	0x08038ca8

080162e8 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80162e8:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80162ea:	f7ff fe97 	bl	801601c <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80162ee:	2006      	movs	r0, #6
 80162f0:	f7ff feb4 	bl	801605c <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80162f4:	f7ff fe9a 	bl	801602c <sFLASH_CS_HIGH>
}
 80162f8:	bd08      	pop	{r3, pc}
	...

080162fc <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80162fc:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 80162fe:	4d09      	ldr	r5, [pc, #36]	@ (8016324 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8016300:	f7ff fe8c 	bl	801601c <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8016304:	2005      	movs	r0, #5
 8016306:	f7ff fea9 	bl	801605c <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 801630a:	f7ff fe97 	bl	801603c <sFLASH_ReadByte>
 801630e:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8016310:	f7ff fe8c 	bl	801602c <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8016314:	462b      	mov	r3, r5
 8016316:	3d01      	subs	r5, #1
 8016318:	b113      	cbz	r3, 8016320 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801631a:	f014 0f01 	tst.w	r4, #1
 801631e:	d1ef      	bne.n	8016300 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8016320:	bd38      	pop	{r3, r4, r5, pc}
 8016322:	bf00      	nop
 8016324:	000186a0 	.word	0x000186a0

08016328 <sFLASH_EraseSector>:
{
 8016328:	b510      	push	{r4, lr}
 801632a:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 801632c:	f7ff ffdc 	bl	80162e8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016330:	f7ff fe74 	bl	801601c <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8016334:	2020      	movs	r0, #32
 8016336:	f7ff fe91 	bl	801605c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801633a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801633e:	f7ff fe8d 	bl	801605c <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8016342:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8016346:	f7ff fe89 	bl	801605c <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 801634a:	b2e0      	uxtb	r0, r4
 801634c:	f7ff fe86 	bl	801605c <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8016350:	f7ff fe6c 	bl	801602c <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8016354:	f7ff ffd2 	bl	80162fc <sFLASH_WaitForWriteEnd>
}
 8016358:	bd10      	pop	{r4, pc}

0801635a <sFLASH_WritePage>:
{
 801635a:	b570      	push	{r4, r5, r6, lr}
 801635c:	4606      	mov	r6, r0
 801635e:	460c      	mov	r4, r1
 8016360:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8016362:	f7ff ffc1 	bl	80162e8 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8016366:	f7ff fe59 	bl	801601c <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 801636a:	2002      	movs	r0, #2
 801636c:	f7ff fe76 	bl	801605c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8016370:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8016374:	f7ff fe72 	bl	801605c <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8016378:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801637c:	f7ff fe6e 	bl	801605c <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8016380:	b2e0      	uxtb	r0, r4
 8016382:	f7ff fe6b 	bl	801605c <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016386:	e004      	b.n	8016392 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8016388:	f816 0b01 	ldrb.w	r0, [r6], #1
 801638c:	f7ff fe66 	bl	801605c <sFLASH_SendByte>
  while (NumByteToWrite--)
 8016390:	4625      	mov	r5, r4
 8016392:	1e6b      	subs	r3, r5, #1
 8016394:	b29c      	uxth	r4, r3
 8016396:	2d00      	cmp	r5, #0
 8016398:	d1f6      	bne.n	8016388 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 801639a:	f7ff fe47 	bl	801602c <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 801639e:	f7ff ffad 	bl	80162fc <sFLASH_WaitForWriteEnd>
}
 80163a2:	bd70      	pop	{r4, r5, r6, pc}

080163a4 <sFLASH_WriteBuffer>:
{
 80163a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163a8:	4605      	mov	r5, r0
 80163aa:	460c      	mov	r4, r1
 80163ac:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80163ae:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80163b0:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80163b2:	b9d3      	cbnz	r3, 80163ea <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80163b4:	b971      	cbnz	r1, 80163d4 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80163b6:	4621      	mov	r1, r4
 80163b8:	f7ff ffcf 	bl	801635a <sFLASH_WritePage>
 80163bc:	e013      	b.n	80163e6 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80163be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80163c2:	4621      	mov	r1, r4
 80163c4:	4628      	mov	r0, r5
 80163c6:	f7ff ffc8 	bl	801635a <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80163ca:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80163ce:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80163d2:	4631      	mov	r1, r6
 80163d4:	1e4b      	subs	r3, r1, #1
 80163d6:	b2de      	uxtb	r6, r3
 80163d8:	2900      	cmp	r1, #0
 80163da:	d1f0      	bne.n	80163be <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80163dc:	b2fa      	uxtb	r2, r7
 80163de:	4621      	mov	r1, r4
 80163e0:	4628      	mov	r0, r5
 80163e2:	f7ff ffba 	bl	801635a <sFLASH_WritePage>
}
 80163e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163ea:	f1c3 0800 	rsb	r8, r3, #0
 80163ee:	fa5f f888 	uxtb.w	r8, r8
 80163f2:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80163f4:	b9a1      	cbnz	r1, 8016420 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80163f6:	4590      	cmp	r8, r2
 80163f8:	d20d      	bcs.n	8016416 <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 80163fa:	4413      	add	r3, r2
 80163fc:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80163fe:	4642      	mov	r2, r8
 8016400:	4621      	mov	r1, r4
 8016402:	f7ff ffaa 	bl	801635a <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8016406:	4632      	mov	r2, r6
 8016408:	eb08 0104 	add.w	r1, r8, r4
 801640c:	eb05 0008 	add.w	r0, r5, r8
 8016410:	f7ff ffa3 	bl	801635a <sFLASH_WritePage>
 8016414:	e7e7      	b.n	80163e6 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8016416:	463a      	mov	r2, r7
 8016418:	4621      	mov	r1, r4
 801641a:	f7ff ff9e 	bl	801635a <sFLASH_WritePage>
 801641e:	e7e2      	b.n	80163e6 <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 8016420:	eba7 0708 	sub.w	r7, r7, r8
 8016424:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016428:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801642c:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801642e:	4642      	mov	r2, r8
 8016430:	4621      	mov	r1, r4
 8016432:	f7ff ff92 	bl	801635a <sFLASH_WritePage>
      WriteAddr +=  count;
 8016436:	4444      	add	r4, r8
      pBuffer += count;
 8016438:	4445      	add	r5, r8
      while (NumOfPage--)
 801643a:	e00a      	b.n	8016452 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801643c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016440:	4621      	mov	r1, r4
 8016442:	4628      	mov	r0, r5
 8016444:	f7ff ff89 	bl	801635a <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8016448:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 801644c:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016450:	4646      	mov	r6, r8
 8016452:	1e73      	subs	r3, r6, #1
 8016454:	fa5f f883 	uxtb.w	r8, r3
 8016458:	2e00      	cmp	r6, #0
 801645a:	d1ef      	bne.n	801643c <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 801645c:	2f00      	cmp	r7, #0
 801645e:	d0c2      	beq.n	80163e6 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016460:	fa5f f289 	uxtb.w	r2, r9
 8016464:	4621      	mov	r1, r4
 8016466:	4628      	mov	r0, r5
 8016468:	f7ff ff77 	bl	801635a <sFLASH_WritePage>
}
 801646c:	e7bb      	b.n	80163e6 <sFLASH_WriteBuffer+0x42>
	...

08016470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8016470:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016472:	4b0b      	ldr	r3, [pc, #44]	@ (80164a0 <HAL_Init+0x30>)
 8016474:	681a      	ldr	r2, [r3, #0]
 8016476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801647a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016482:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016484:	681a      	ldr	r2, [r3, #0]
 8016486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801648a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801648c:	2003      	movs	r0, #3
 801648e:	f000 f883 	bl	8016598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016492:	200f      	movs	r0, #15
 8016494:	f7fc f81c 	bl	80124d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016498:	f7fb fff8 	bl	801248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 801649c:	2000      	movs	r0, #0
 801649e:	bd08      	pop	{r3, pc}
 80164a0:	40023c00 	.word	0x40023c00

080164a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80164a4:	4a03      	ldr	r2, [pc, #12]	@ (80164b4 <HAL_IncTick+0x10>)
 80164a6:	6811      	ldr	r1, [r2, #0]
 80164a8:	4b03      	ldr	r3, [pc, #12]	@ (80164b8 <HAL_IncTick+0x14>)
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	440b      	add	r3, r1
 80164ae:	6013      	str	r3, [r2, #0]
}
 80164b0:	4770      	bx	lr
 80164b2:	bf00      	nop
 80164b4:	20002964 	.word	0x20002964
 80164b8:	20000106 	.word	0x20000106

080164bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80164bc:	4b01      	ldr	r3, [pc, #4]	@ (80164c4 <HAL_GetTick+0x8>)
 80164be:	6818      	ldr	r0, [r3, #0]
}
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop
 80164c4:	20002964 	.word	0x20002964

080164c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80164c8:	b538      	push	{r3, r4, r5, lr}
 80164ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80164cc:	f7ff fff6 	bl	80164bc <HAL_GetTick>
 80164d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80164d2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80164d6:	d002      	beq.n	80164de <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80164d8:	4b04      	ldr	r3, [pc, #16]	@ (80164ec <HAL_Delay+0x24>)
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80164de:	f7ff ffed 	bl	80164bc <HAL_GetTick>
 80164e2:	1b40      	subs	r0, r0, r5
 80164e4:	42a0      	cmp	r0, r4
 80164e6:	d3fa      	bcc.n	80164de <HAL_Delay+0x16>
  {
  }
}
 80164e8:	bd38      	pop	{r3, r4, r5, pc}
 80164ea:	bf00      	nop
 80164ec:	20000106 	.word	0x20000106

080164f0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80164f0:	2800      	cmp	r0, #0
 80164f2:	db07      	blt.n	8016504 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80164f4:	f000 021f 	and.w	r2, r0, #31
 80164f8:	0940      	lsrs	r0, r0, #5
 80164fa:	2301      	movs	r3, #1
 80164fc:	4093      	lsls	r3, r2
 80164fe:	4a02      	ldr	r2, [pc, #8]	@ (8016508 <__NVIC_EnableIRQ+0x18>)
 8016500:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8016504:	4770      	bx	lr
 8016506:	bf00      	nop
 8016508:	e000e100 	.word	0xe000e100

0801650c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 801650c:	2800      	cmp	r0, #0
 801650e:	db08      	blt.n	8016522 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016510:	0109      	lsls	r1, r1, #4
 8016512:	b2c9      	uxtb	r1, r1
 8016514:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8016518:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 801651c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8016520:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016522:	f000 000f 	and.w	r0, r0, #15
 8016526:	0109      	lsls	r1, r1, #4
 8016528:	b2c9      	uxtb	r1, r1
 801652a:	4b01      	ldr	r3, [pc, #4]	@ (8016530 <__NVIC_SetPriority+0x24>)
 801652c:	5419      	strb	r1, [r3, r0]
  }
}
 801652e:	4770      	bx	lr
 8016530:	e000ed14 	.word	0xe000ed14

08016534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016534:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016536:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801653a:	f1c0 0c07 	rsb	ip, r0, #7
 801653e:	f1bc 0f04 	cmp.w	ip, #4
 8016542:	bf28      	it	cs
 8016544:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016548:	1d03      	adds	r3, r0, #4
 801654a:	2b06      	cmp	r3, #6
 801654c:	d90f      	bls.n	801656e <NVIC_EncodePriority+0x3a>
 801654e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016550:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8016554:	fa0e f00c 	lsl.w	r0, lr, ip
 8016558:	ea21 0100 	bic.w	r1, r1, r0
 801655c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801655e:	fa0e fe03 	lsl.w	lr, lr, r3
 8016562:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8016566:	ea41 0002 	orr.w	r0, r1, r2
 801656a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801656e:	2300      	movs	r3, #0
 8016570:	e7ee      	b.n	8016550 <NVIC_EncodePriority+0x1c>
	...

08016574 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8016574:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016578:	4905      	ldr	r1, [pc, #20]	@ (8016590 <__NVIC_SystemReset+0x1c>)
 801657a:	68ca      	ldr	r2, [r1, #12]
 801657c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016580:	4b04      	ldr	r3, [pc, #16]	@ (8016594 <__NVIC_SystemReset+0x20>)
 8016582:	4313      	orrs	r3, r2
 8016584:	60cb      	str	r3, [r1, #12]
 8016586:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801658a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 801658c:	e7fd      	b.n	801658a <__NVIC_SystemReset+0x16>
 801658e:	bf00      	nop
 8016590:	e000ed00 	.word	0xe000ed00
 8016594:	05fa0004 	.word	0x05fa0004

08016598 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016598:	4a07      	ldr	r2, [pc, #28]	@ (80165b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 801659a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801659c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80165a0:	041b      	lsls	r3, r3, #16
 80165a2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80165a4:	0200      	lsls	r0, r0, #8
 80165a6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80165aa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80165ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80165b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80165b4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80165b6:	4770      	bx	lr
 80165b8:	e000ed00 	.word	0xe000ed00

080165bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80165bc:	b510      	push	{r4, lr}
 80165be:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80165c0:	4b05      	ldr	r3, [pc, #20]	@ (80165d8 <HAL_NVIC_SetPriority+0x1c>)
 80165c2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80165c4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80165c8:	f7ff ffb4 	bl	8016534 <NVIC_EncodePriority>
 80165cc:	4601      	mov	r1, r0
 80165ce:	4620      	mov	r0, r4
 80165d0:	f7ff ff9c 	bl	801650c <__NVIC_SetPriority>
}
 80165d4:	bd10      	pop	{r4, pc}
 80165d6:	bf00      	nop
 80165d8:	e000ed00 	.word	0xe000ed00

080165dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80165dc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80165de:	f7ff ff87 	bl	80164f0 <__NVIC_EnableIRQ>
}
 80165e2:	bd08      	pop	{r3, pc}

080165e4 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80165e4:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 80165e6:	f7ff ffc5 	bl	8016574 <__NVIC_SystemReset>
	...

080165ec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80165ec:	2300      	movs	r3, #0
 80165ee:	2b0f      	cmp	r3, #15
 80165f0:	f200 80d7 	bhi.w	80167a2 <HAL_GPIO_Init+0x1b6>
{
 80165f4:	b570      	push	{r4, r5, r6, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	e065      	b.n	80166c6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80165fa:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80165fc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016600:	2403      	movs	r4, #3
 8016602:	fa04 f40e 	lsl.w	r4, r4, lr
 8016606:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 801660a:	68cc      	ldr	r4, [r1, #12]
 801660c:	fa04 f40e 	lsl.w	r4, r4, lr
 8016610:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8016612:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016614:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016616:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801661a:	684a      	ldr	r2, [r1, #4]
 801661c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8016620:	409a      	lsls	r2, r3
 8016622:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8016624:	6042      	str	r2, [r0, #4]
 8016626:	e05c      	b.n	80166e2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016628:	08dc      	lsrs	r4, r3, #3
 801662a:	3408      	adds	r4, #8
 801662c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016630:	f003 0507 	and.w	r5, r3, #7
 8016634:	00ad      	lsls	r5, r5, #2
 8016636:	f04f 0e0f 	mov.w	lr, #15
 801663a:	fa0e fe05 	lsl.w	lr, lr, r5
 801663e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016642:	690a      	ldr	r2, [r1, #16]
 8016644:	40aa      	lsls	r2, r5
 8016646:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 801664a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 801664e:	e05c      	b.n	801670a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016650:	2204      	movs	r2, #4
 8016652:	e000      	b.n	8016656 <HAL_GPIO_Init+0x6a>
 8016654:	2200      	movs	r2, #0
 8016656:	fa02 f20e 	lsl.w	r2, r2, lr
 801665a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 801665c:	3402      	adds	r4, #2
 801665e:	4d51      	ldr	r5, [pc, #324]	@ (80167a4 <HAL_GPIO_Init+0x1b8>)
 8016660:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016664:	4a50      	ldr	r2, [pc, #320]	@ (80167a8 <HAL_GPIO_Init+0x1bc>)
 8016666:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8016668:	ea6f 020c 	mvn.w	r2, ip
 801666c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016670:	684e      	ldr	r6, [r1, #4]
 8016672:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8016676:	d001      	beq.n	801667c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8016678:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 801667c:	4c4a      	ldr	r4, [pc, #296]	@ (80167a8 <HAL_GPIO_Init+0x1bc>)
 801667e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8016680:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8016682:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016686:	684e      	ldr	r6, [r1, #4]
 8016688:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 801668c:	d001      	beq.n	8016692 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 801668e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8016692:	4c45      	ldr	r4, [pc, #276]	@ (80167a8 <HAL_GPIO_Init+0x1bc>)
 8016694:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8016696:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8016698:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801669c:	684e      	ldr	r6, [r1, #4]
 801669e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80166a2:	d001      	beq.n	80166a8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80166a4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80166a8:	4c3f      	ldr	r4, [pc, #252]	@ (80167a8 <HAL_GPIO_Init+0x1bc>)
 80166aa:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80166ac:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80166ae:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80166b0:	684d      	ldr	r5, [r1, #4]
 80166b2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80166b6:	d001      	beq.n	80166bc <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80166b8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80166bc:	4c3a      	ldr	r4, [pc, #232]	@ (80167a8 <HAL_GPIO_Init+0x1bc>)
 80166be:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80166c0:	3301      	adds	r3, #1
 80166c2:	2b0f      	cmp	r3, #15
 80166c4:	d86b      	bhi.n	801679e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80166c6:	2201      	movs	r2, #1
 80166c8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80166ca:	680c      	ldr	r4, [r1, #0]
 80166cc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80166d0:	ea32 0404 	bics.w	r4, r2, r4
 80166d4:	d1f4      	bne.n	80166c0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80166d6:	684c      	ldr	r4, [r1, #4]
 80166d8:	f004 0403 	and.w	r4, r4, #3
 80166dc:	3c01      	subs	r4, #1
 80166de:	2c01      	cmp	r4, #1
 80166e0:	d98b      	bls.n	80165fa <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80166e2:	684a      	ldr	r2, [r1, #4]
 80166e4:	f002 0203 	and.w	r2, r2, #3
 80166e8:	2a03      	cmp	r2, #3
 80166ea:	d009      	beq.n	8016700 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80166ec:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80166ee:	005d      	lsls	r5, r3, #1
 80166f0:	2203      	movs	r2, #3
 80166f2:	40aa      	lsls	r2, r5
 80166f4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80166f8:	688a      	ldr	r2, [r1, #8]
 80166fa:	40aa      	lsls	r2, r5
 80166fc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80166fe:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016700:	684a      	ldr	r2, [r1, #4]
 8016702:	f002 0203 	and.w	r2, r2, #3
 8016706:	2a02      	cmp	r2, #2
 8016708:	d08e      	beq.n	8016628 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 801670a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801670c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016710:	2203      	movs	r2, #3
 8016712:	fa02 f20e 	lsl.w	r2, r2, lr
 8016716:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801671a:	684a      	ldr	r2, [r1, #4]
 801671c:	f002 0203 	and.w	r2, r2, #3
 8016720:	fa02 f20e 	lsl.w	r2, r2, lr
 8016724:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8016726:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016728:	684a      	ldr	r2, [r1, #4]
 801672a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 801672e:	d0c7      	beq.n	80166c0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016730:	2200      	movs	r2, #0
 8016732:	9201      	str	r2, [sp, #4]
 8016734:	4a1d      	ldr	r2, [pc, #116]	@ (80167ac <HAL_GPIO_Init+0x1c0>)
 8016736:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8016738:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 801673c:	6454      	str	r4, [r2, #68]	@ 0x44
 801673e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8016740:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8016744:	9201      	str	r2, [sp, #4]
 8016746:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8016748:	089c      	lsrs	r4, r3, #2
 801674a:	1ca5      	adds	r5, r4, #2
 801674c:	4a15      	ldr	r2, [pc, #84]	@ (80167a4 <HAL_GPIO_Init+0x1b8>)
 801674e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016752:	f003 0e03 	and.w	lr, r3, #3
 8016756:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801675a:	220f      	movs	r2, #15
 801675c:	fa02 f20e 	lsl.w	r2, r2, lr
 8016760:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016764:	4a12      	ldr	r2, [pc, #72]	@ (80167b0 <HAL_GPIO_Init+0x1c4>)
 8016766:	4290      	cmp	r0, r2
 8016768:	f43f af74 	beq.w	8016654 <HAL_GPIO_Init+0x68>
 801676c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016770:	4290      	cmp	r0, r2
 8016772:	d00e      	beq.n	8016792 <HAL_GPIO_Init+0x1a6>
 8016774:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016778:	4290      	cmp	r0, r2
 801677a:	d00c      	beq.n	8016796 <HAL_GPIO_Init+0x1aa>
 801677c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016780:	4290      	cmp	r0, r2
 8016782:	d00a      	beq.n	801679a <HAL_GPIO_Init+0x1ae>
 8016784:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8016788:	4290      	cmp	r0, r2
 801678a:	f43f af61 	beq.w	8016650 <HAL_GPIO_Init+0x64>
 801678e:	2207      	movs	r2, #7
 8016790:	e761      	b.n	8016656 <HAL_GPIO_Init+0x6a>
 8016792:	2201      	movs	r2, #1
 8016794:	e75f      	b.n	8016656 <HAL_GPIO_Init+0x6a>
 8016796:	2202      	movs	r2, #2
 8016798:	e75d      	b.n	8016656 <HAL_GPIO_Init+0x6a>
 801679a:	2203      	movs	r2, #3
 801679c:	e75b      	b.n	8016656 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 801679e:	b002      	add	sp, #8
 80167a0:	bd70      	pop	{r4, r5, r6, pc}
 80167a2:	4770      	bx	lr
 80167a4:	40013800 	.word	0x40013800
 80167a8:	40013c00 	.word	0x40013c00
 80167ac:	40023800 	.word	0x40023800
 80167b0:	40020000 	.word	0x40020000

080167b4 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80167b4:	2300      	movs	r3, #0
 80167b6:	2b0f      	cmp	r3, #15
 80167b8:	d87c      	bhi.n	80168b4 <HAL_GPIO_DeInit+0x100>
{
 80167ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167bc:	e02d      	b.n	801681a <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80167be:	2504      	movs	r5, #4
 80167c0:	e000      	b.n	80167c4 <HAL_GPIO_DeInit+0x10>
 80167c2:	2500      	movs	r5, #0
 80167c4:	fa05 f50c 	lsl.w	r5, r5, ip
 80167c8:	42a5      	cmp	r5, r4
 80167ca:	d057      	beq.n	801687c <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80167cc:	6804      	ldr	r4, [r0, #0]
 80167ce:	005d      	lsls	r5, r3, #1
 80167d0:	f04f 0c03 	mov.w	ip, #3
 80167d4:	fa0c fc05 	lsl.w	ip, ip, r5
 80167d8:	ea24 040c 	bic.w	r4, r4, ip
 80167dc:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80167de:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80167e2:	f10e 0e08 	add.w	lr, lr, #8
 80167e6:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80167ea:	f003 0607 	and.w	r6, r3, #7
 80167ee:	00b6      	lsls	r6, r6, #2
 80167f0:	250f      	movs	r5, #15
 80167f2:	40b5      	lsls	r5, r6
 80167f4:	ea24 0405 	bic.w	r4, r4, r5
 80167f8:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80167fc:	68c4      	ldr	r4, [r0, #12]
 80167fe:	ea24 040c 	bic.w	r4, r4, ip
 8016802:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016804:	6844      	ldr	r4, [r0, #4]
 8016806:	ea24 0202 	bic.w	r2, r4, r2
 801680a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801680c:	6882      	ldr	r2, [r0, #8]
 801680e:	ea22 020c 	bic.w	r2, r2, ip
 8016812:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016814:	3301      	adds	r3, #1
 8016816:	2b0f      	cmp	r3, #15
 8016818:	d84b      	bhi.n	80168b2 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 801681a:	2201      	movs	r2, #1
 801681c:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 801681e:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8016822:	ea32 0401 	bics.w	r4, r2, r1
 8016826:	d1f5      	bne.n	8016814 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8016828:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 801682c:	f10e 0502 	add.w	r5, lr, #2
 8016830:	4c21      	ldr	r4, [pc, #132]	@ (80168b8 <HAL_GPIO_DeInit+0x104>)
 8016832:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8016836:	f003 0c03 	and.w	ip, r3, #3
 801683a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801683e:	250f      	movs	r5, #15
 8016840:	fa05 f70c 	lsl.w	r7, r5, ip
 8016844:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016846:	4d1d      	ldr	r5, [pc, #116]	@ (80168bc <HAL_GPIO_DeInit+0x108>)
 8016848:	42a8      	cmp	r0, r5
 801684a:	d0ba      	beq.n	80167c2 <HAL_GPIO_DeInit+0xe>
 801684c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016850:	42a8      	cmp	r0, r5
 8016852:	d00d      	beq.n	8016870 <HAL_GPIO_DeInit+0xbc>
 8016854:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016858:	42a8      	cmp	r0, r5
 801685a:	d00b      	beq.n	8016874 <HAL_GPIO_DeInit+0xc0>
 801685c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016860:	42a8      	cmp	r0, r5
 8016862:	d009      	beq.n	8016878 <HAL_GPIO_DeInit+0xc4>
 8016864:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8016868:	42a8      	cmp	r0, r5
 801686a:	d0a8      	beq.n	80167be <HAL_GPIO_DeInit+0xa>
 801686c:	2507      	movs	r5, #7
 801686e:	e7a9      	b.n	80167c4 <HAL_GPIO_DeInit+0x10>
 8016870:	2501      	movs	r5, #1
 8016872:	e7a7      	b.n	80167c4 <HAL_GPIO_DeInit+0x10>
 8016874:	2502      	movs	r5, #2
 8016876:	e7a5      	b.n	80167c4 <HAL_GPIO_DeInit+0x10>
 8016878:	2503      	movs	r5, #3
 801687a:	e7a3      	b.n	80167c4 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801687c:	4c10      	ldr	r4, [pc, #64]	@ (80168c0 <HAL_GPIO_DeInit+0x10c>)
 801687e:	6825      	ldr	r5, [r4, #0]
 8016880:	ea25 0506 	bic.w	r5, r5, r6
 8016884:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8016886:	6865      	ldr	r5, [r4, #4]
 8016888:	ea25 0506 	bic.w	r5, r5, r6
 801688c:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801688e:	68e5      	ldr	r5, [r4, #12]
 8016890:	ea25 0506 	bic.w	r5, r5, r6
 8016894:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8016896:	68a5      	ldr	r5, [r4, #8]
 8016898:	ea25 0506 	bic.w	r5, r5, r6
 801689c:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801689e:	4e06      	ldr	r6, [pc, #24]	@ (80168b8 <HAL_GPIO_DeInit+0x104>)
 80168a0:	f10e 0402 	add.w	r4, lr, #2
 80168a4:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80168a8:	ea25 0507 	bic.w	r5, r5, r7
 80168ac:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 80168b0:	e78c      	b.n	80167cc <HAL_GPIO_DeInit+0x18>
    }
  }
}
 80168b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168b4:	4770      	bx	lr
 80168b6:	bf00      	nop
 80168b8:	40013800 	.word	0x40013800
 80168bc:	40020000 	.word	0x40020000
 80168c0:	40013c00 	.word	0x40013c00

080168c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80168c4:	6903      	ldr	r3, [r0, #16]
 80168c6:	4219      	tst	r1, r3
 80168c8:	d001      	beq.n	80168ce <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80168ca:	2001      	movs	r0, #1
 80168cc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80168ce:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80168d0:	4770      	bx	lr

080168d2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80168d2:	b10a      	cbz	r2, 80168d8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80168d4:	6181      	str	r1, [r0, #24]
 80168d6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80168d8:	0409      	lsls	r1, r1, #16
 80168da:	6181      	str	r1, [r0, #24]
  }
}
 80168dc:	4770      	bx	lr

080168de <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80168de:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80168e0:	ea01 0203 	and.w	r2, r1, r3
 80168e4:	ea21 0103 	bic.w	r1, r1, r3
 80168e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80168ec:	6181      	str	r1, [r0, #24]
}
 80168ee:	4770      	bx	lr

080168f0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80168f0:	6803      	ldr	r3, [r0, #0]
 80168f2:	695a      	ldr	r2, [r3, #20]
 80168f4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80168f8:	d101      	bne.n	80168fe <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80168fa:	2000      	movs	r0, #0
}
 80168fc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80168fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016902:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8016904:	2300      	movs	r3, #0
 8016906:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8016908:	2220      	movs	r2, #32
 801690a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801690e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016912:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8016914:	f042 0204 	orr.w	r2, r2, #4
 8016918:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 801691a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 801691e:	2001      	movs	r0, #1
 8016920:	4770      	bx	lr

08016922 <I2C_WaitOnFlagUntilTimeout>:
{
 8016922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016926:	4606      	mov	r6, r0
 8016928:	460c      	mov	r4, r1
 801692a:	4617      	mov	r7, r2
 801692c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801692e:	e03b      	b.n	80169a8 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016930:	f7ff fdc4 	bl	80164bc <HAL_GetTick>
 8016934:	9b06      	ldr	r3, [sp, #24]
 8016936:	1ac0      	subs	r0, r0, r3
 8016938:	4540      	cmp	r0, r8
 801693a:	d802      	bhi.n	8016942 <I2C_WaitOnFlagUntilTimeout+0x20>
 801693c:	f1b8 0f00 	cmp.w	r8, #0
 8016940:	d132      	bne.n	80169a8 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016942:	2d01      	cmp	r5, #1
 8016944:	d018      	beq.n	8016978 <I2C_WaitOnFlagUntilTimeout+0x56>
 8016946:	6833      	ldr	r3, [r6, #0]
 8016948:	699b      	ldr	r3, [r3, #24]
 801694a:	ea24 0303 	bic.w	r3, r4, r3
 801694e:	b29b      	uxth	r3, r3
 8016950:	fab3 f383 	clz	r3, r3
 8016954:	095b      	lsrs	r3, r3, #5
 8016956:	429f      	cmp	r7, r3
 8016958:	d126      	bne.n	80169a8 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 801695a:	2300      	movs	r3, #0
 801695c:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 801695e:	2220      	movs	r2, #32
 8016960:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8016964:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8016968:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801696a:	f042 0220 	orr.w	r2, r2, #32
 801696e:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016970:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8016974:	2001      	movs	r0, #1
 8016976:	e027      	b.n	80169c8 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016978:	6833      	ldr	r3, [r6, #0]
 801697a:	695b      	ldr	r3, [r3, #20]
 801697c:	ea24 0303 	bic.w	r3, r4, r3
 8016980:	b29b      	uxth	r3, r3
 8016982:	fab3 f383 	clz	r3, r3
 8016986:	095b      	lsrs	r3, r3, #5
 8016988:	e7e5      	b.n	8016956 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801698a:	6833      	ldr	r3, [r6, #0]
 801698c:	695b      	ldr	r3, [r3, #20]
 801698e:	ea24 0c03 	bic.w	ip, r4, r3
 8016992:	fa1f fc8c 	uxth.w	ip, ip
 8016996:	fabc fc8c 	clz	ip, ip
 801699a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801699e:	4567      	cmp	r7, ip
 80169a0:	d111      	bne.n	80169c6 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80169a2:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80169a6:	d1c3      	bne.n	8016930 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80169a8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80169ac:	2d01      	cmp	r5, #1
 80169ae:	d0ec      	beq.n	801698a <I2C_WaitOnFlagUntilTimeout+0x68>
 80169b0:	6833      	ldr	r3, [r6, #0]
 80169b2:	699b      	ldr	r3, [r3, #24]
 80169b4:	ea24 0c03 	bic.w	ip, r4, r3
 80169b8:	fa1f fc8c 	uxth.w	ip, ip
 80169bc:	fabc fc8c 	clz	ip, ip
 80169c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80169c4:	e7eb      	b.n	801699e <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80169c6:	2000      	movs	r0, #0
}
 80169c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080169cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80169cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169d0:	4605      	mov	r5, r0
 80169d2:	460e      	mov	r6, r1
 80169d4:	4690      	mov	r8, r2
 80169d6:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80169d8:	e053      	b.n	8016a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80169da:	681a      	ldr	r2, [r3, #0]
 80169dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80169e0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80169e2:	682b      	ldr	r3, [r5, #0]
 80169e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80169e8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80169ea:	2300      	movs	r3, #0
 80169ec:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80169ee:	2220      	movs	r2, #32
 80169f0:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80169f4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80169f8:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80169fa:	f042 0204 	orr.w	r2, r2, #4
 80169fe:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8016a00:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8016a04:	2001      	movs	r0, #1
 8016a06:	e04a      	b.n	8016a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016a08:	f7ff fd58 	bl	80164bc <HAL_GetTick>
 8016a0c:	eba0 0009 	sub.w	r0, r0, r9
 8016a10:	4540      	cmp	r0, r8
 8016a12:	d802      	bhi.n	8016a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8016a14:	f1b8 0f00 	cmp.w	r8, #0
 8016a18:	d133      	bne.n	8016a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016a1a:	2f01      	cmp	r7, #1
 8016a1c:	d017      	beq.n	8016a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8016a1e:	682b      	ldr	r3, [r5, #0]
 8016a20:	699b      	ldr	r3, [r3, #24]
 8016a22:	ea26 0303 	bic.w	r3, r6, r3
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	3b00      	subs	r3, #0
 8016a2a:	bf18      	it	ne
 8016a2c:	2301      	movne	r3, #1
 8016a2e:	b343      	cbz	r3, 8016a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016a30:	2300      	movs	r3, #0
 8016a32:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016a34:	2220      	movs	r2, #32
 8016a36:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016a3a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016a3e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016a40:	f042 0220 	orr.w	r2, r2, #32
 8016a44:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016a46:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8016a4a:	2001      	movs	r0, #1
 8016a4c:	e027      	b.n	8016a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016a4e:	682b      	ldr	r3, [r5, #0]
 8016a50:	695b      	ldr	r3, [r3, #20]
 8016a52:	ea26 0303 	bic.w	r3, r6, r3
 8016a56:	b29b      	uxth	r3, r3
 8016a58:	3b00      	subs	r3, #0
 8016a5a:	bf18      	it	ne
 8016a5c:	2301      	movne	r3, #1
 8016a5e:	e7e6      	b.n	8016a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016a60:	682b      	ldr	r3, [r5, #0]
 8016a62:	699c      	ldr	r4, [r3, #24]
 8016a64:	ea26 0404 	bic.w	r4, r6, r4
 8016a68:	b2a4      	uxth	r4, r4
 8016a6a:	3c00      	subs	r4, #0
 8016a6c:	bf18      	it	ne
 8016a6e:	2401      	movne	r4, #1
 8016a70:	b1a4      	cbz	r4, 8016a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016a72:	682b      	ldr	r3, [r5, #0]
 8016a74:	695a      	ldr	r2, [r3, #20]
 8016a76:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8016a7a:	d1ae      	bne.n	80169da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8016a7c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8016a80:	d1c2      	bne.n	8016a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8016a82:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8016a86:	2f01      	cmp	r7, #1
 8016a88:	d1ea      	bne.n	8016a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8016a8a:	682b      	ldr	r3, [r5, #0]
 8016a8c:	695c      	ldr	r4, [r3, #20]
 8016a8e:	ea26 0404 	bic.w	r4, r6, r4
 8016a92:	b2a4      	uxth	r4, r4
 8016a94:	3c00      	subs	r4, #0
 8016a96:	bf18      	it	ne
 8016a98:	2401      	movne	r4, #1
 8016a9a:	e7e9      	b.n	8016a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8016a9c:	2000      	movs	r0, #0
}
 8016a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08016aa4 <I2C_MasterRequestWrite>:
{
 8016aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	4604      	mov	r4, r0
 8016aaa:	460d      	mov	r5, r1
 8016aac:	4616      	mov	r6, r2
 8016aae:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8016ab0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8016ab2:	2b08      	cmp	r3, #8
 8016ab4:	d00d      	beq.n	8016ad2 <I2C_MasterRequestWrite+0x2e>
 8016ab6:	2b01      	cmp	r3, #1
 8016ab8:	d00b      	beq.n	8016ad2 <I2C_MasterRequestWrite+0x2e>
 8016aba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8016abe:	d008      	beq.n	8016ad2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016ac0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016ac2:	2b12      	cmp	r3, #18
 8016ac4:	d10a      	bne.n	8016adc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016ac6:	6802      	ldr	r2, [r0, #0]
 8016ac8:	6813      	ldr	r3, [r2, #0]
 8016aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016ace:	6013      	str	r3, [r2, #0]
 8016ad0:	e004      	b.n	8016adc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016ad2:	6822      	ldr	r2, [r4, #0]
 8016ad4:	6813      	ldr	r3, [r2, #0]
 8016ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016ada:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016adc:	9700      	str	r7, [sp, #0]
 8016ade:	4633      	mov	r3, r6
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	f7ff ff1b 	bl	8016922 <I2C_WaitOnFlagUntilTimeout>
 8016aec:	b980      	cbnz	r0, 8016b10 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016aee:	6923      	ldr	r3, [r4, #16]
 8016af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016af4:	d116      	bne.n	8016b24 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016af6:	6823      	ldr	r3, [r4, #0]
 8016af8:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8016afc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8016afe:	463b      	mov	r3, r7
 8016b00:	4632      	mov	r2, r6
 8016b02:	4913      	ldr	r1, [pc, #76]	@ (8016b50 <I2C_MasterRequestWrite+0xac>)
 8016b04:	4620      	mov	r0, r4
 8016b06:	f7ff ff61 	bl	80169cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016b0a:	b9f8      	cbnz	r0, 8016b4c <I2C_MasterRequestWrite+0xa8>
}
 8016b0c:	b003      	add	sp, #12
 8016b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016b10:	6823      	ldr	r3, [r4, #0]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016b18:	d002      	beq.n	8016b20 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016b1e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8016b20:	2003      	movs	r0, #3
 8016b22:	e7f3      	b.n	8016b0c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016b24:	11eb      	asrs	r3, r5, #7
 8016b26:	6822      	ldr	r2, [r4, #0]
 8016b28:	f003 0306 	and.w	r3, r3, #6
 8016b2c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8016b30:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016b32:	463b      	mov	r3, r7
 8016b34:	4632      	mov	r2, r6
 8016b36:	4907      	ldr	r1, [pc, #28]	@ (8016b54 <I2C_MasterRequestWrite+0xb0>)
 8016b38:	4620      	mov	r0, r4
 8016b3a:	f7ff ff47 	bl	80169cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016b3e:	b918      	cbnz	r0, 8016b48 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016b40:	6823      	ldr	r3, [r4, #0]
 8016b42:	b2ed      	uxtb	r5, r5
 8016b44:	611d      	str	r5, [r3, #16]
 8016b46:	e7da      	b.n	8016afe <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8016b48:	2001      	movs	r0, #1
 8016b4a:	e7df      	b.n	8016b0c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8016b4c:	2001      	movs	r0, #1
 8016b4e:	e7dd      	b.n	8016b0c <I2C_MasterRequestWrite+0x68>
 8016b50:	00010002 	.word	0x00010002
 8016b54:	00010008 	.word	0x00010008

08016b58 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8016b58:	b570      	push	{r4, r5, r6, lr}
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	460d      	mov	r5, r1
 8016b5e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016b60:	6823      	ldr	r3, [r4, #0]
 8016b62:	695b      	ldr	r3, [r3, #20]
 8016b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016b68:	d121      	bne.n	8016bae <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016b6a:	4620      	mov	r0, r4
 8016b6c:	f7ff fec0 	bl	80168f0 <I2C_IsAcknowledgeFailed>
 8016b70:	b9f8      	cbnz	r0, 8016bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016b72:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016b76:	d0f3      	beq.n	8016b60 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016b78:	f7ff fca0 	bl	80164bc <HAL_GetTick>
 8016b7c:	1b80      	subs	r0, r0, r6
 8016b7e:	42a8      	cmp	r0, r5
 8016b80:	d801      	bhi.n	8016b86 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8016b82:	2d00      	cmp	r5, #0
 8016b84:	d1ec      	bne.n	8016b60 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8016b86:	6823      	ldr	r3, [r4, #0]
 8016b88:	695b      	ldr	r3, [r3, #20]
 8016b8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016b8e:	d1e7      	bne.n	8016b60 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016b90:	2300      	movs	r3, #0
 8016b92:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016b94:	2220      	movs	r2, #32
 8016b96:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016b9a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016b9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016ba0:	f042 0220 	orr.w	r2, r2, #32
 8016ba4:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016ba6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016baa:	2001      	movs	r0, #1
 8016bac:	e000      	b.n	8016bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8016bae:	2000      	movs	r0, #0
}
 8016bb0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8016bb2:	2001      	movs	r0, #1
 8016bb4:	e7fc      	b.n	8016bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08016bb6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8016bb6:	b570      	push	{r4, r5, r6, lr}
 8016bb8:	4604      	mov	r4, r0
 8016bba:	460d      	mov	r5, r1
 8016bbc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8016bbe:	6823      	ldr	r3, [r4, #0]
 8016bc0:	695b      	ldr	r3, [r3, #20]
 8016bc2:	f013 0f04 	tst.w	r3, #4
 8016bc6:	d121      	bne.n	8016c0c <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016bc8:	4620      	mov	r0, r4
 8016bca:	f7ff fe91 	bl	80168f0 <I2C_IsAcknowledgeFailed>
 8016bce:	b9f8      	cbnz	r0, 8016c10 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016bd0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016bd4:	d0f3      	beq.n	8016bbe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016bd6:	f7ff fc71 	bl	80164bc <HAL_GetTick>
 8016bda:	1b80      	subs	r0, r0, r6
 8016bdc:	42a8      	cmp	r0, r5
 8016bde:	d801      	bhi.n	8016be4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8016be0:	2d00      	cmp	r5, #0
 8016be2:	d1ec      	bne.n	8016bbe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	695b      	ldr	r3, [r3, #20]
 8016be8:	f013 0f04 	tst.w	r3, #4
 8016bec:	d1e7      	bne.n	8016bbe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016bf2:	2220      	movs	r2, #32
 8016bf4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016bf8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016bfc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016bfe:	f042 0220 	orr.w	r2, r2, #32
 8016c02:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016c04:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016c08:	2001      	movs	r0, #1
 8016c0a:	e000      	b.n	8016c0e <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8016c0c:	2000      	movs	r0, #0
}
 8016c0e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8016c10:	2001      	movs	r0, #1
 8016c12:	e7fc      	b.n	8016c0e <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08016c14 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8016c14:	2800      	cmp	r0, #0
 8016c16:	f000 80cc 	beq.w	8016db2 <HAL_I2C_Init+0x19e>
{
 8016c1a:	b570      	push	{r4, r5, r6, lr}
 8016c1c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016c1e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d077      	beq.n	8016d16 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016c26:	2324      	movs	r3, #36	@ 0x24
 8016c28:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016c2c:	6822      	ldr	r2, [r4, #0]
 8016c2e:	6813      	ldr	r3, [r2, #0]
 8016c30:	f023 0301 	bic.w	r3, r3, #1
 8016c34:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016c36:	6822      	ldr	r2, [r4, #0]
 8016c38:	6813      	ldr	r3, [r2, #0]
 8016c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016c3e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016c40:	6822      	ldr	r2, [r4, #0]
 8016c42:	6813      	ldr	r3, [r2, #0]
 8016c44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016c48:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016c4a:	f000 fdb3 	bl	80177b4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016c4e:	6862      	ldr	r2, [r4, #4]
 8016c50:	4b5a      	ldr	r3, [pc, #360]	@ (8016dbc <HAL_I2C_Init+0x1a8>)
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d864      	bhi.n	8016d20 <HAL_I2C_Init+0x10c>
 8016c56:	4b5a      	ldr	r3, [pc, #360]	@ (8016dc0 <HAL_I2C_Init+0x1ac>)
 8016c58:	4298      	cmp	r0, r3
 8016c5a:	bf8c      	ite	hi
 8016c5c:	2300      	movhi	r3, #0
 8016c5e:	2301      	movls	r3, #1
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	f040 80a8 	bne.w	8016db6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8016c66:	4957      	ldr	r1, [pc, #348]	@ (8016dc4 <HAL_I2C_Init+0x1b0>)
 8016c68:	fba1 3100 	umull	r3, r1, r1, r0
 8016c6c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016c6e:	6825      	ldr	r5, [r4, #0]
 8016c70:	686a      	ldr	r2, [r5, #4]
 8016c72:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016c76:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8016c7a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016c7c:	6821      	ldr	r1, [r4, #0]
 8016c7e:	6a0a      	ldr	r2, [r1, #32]
 8016c80:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016c84:	6866      	ldr	r6, [r4, #4]
 8016c86:	4d4d      	ldr	r5, [pc, #308]	@ (8016dbc <HAL_I2C_Init+0x1a8>)
 8016c88:	42ae      	cmp	r6, r5
 8016c8a:	d84f      	bhi.n	8016d2c <HAL_I2C_Init+0x118>
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	4313      	orrs	r3, r2
 8016c90:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016c92:	6821      	ldr	r1, [r4, #0]
 8016c94:	69ca      	ldr	r2, [r1, #28]
 8016c96:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8016c9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016c9e:	6865      	ldr	r5, [r4, #4]
 8016ca0:	4b46      	ldr	r3, [pc, #280]	@ (8016dbc <HAL_I2C_Init+0x1a8>)
 8016ca2:	429d      	cmp	r5, r3
 8016ca4:	d84c      	bhi.n	8016d40 <HAL_I2C_Init+0x12c>
 8016ca6:	1e43      	subs	r3, r0, #1
 8016ca8:	006d      	lsls	r5, r5, #1
 8016caa:	fbb3 f3f5 	udiv	r3, r3, r5
 8016cae:	3301      	adds	r3, #1
 8016cb0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8016cb4:	4203      	tst	r3, r0
 8016cb6:	d078      	beq.n	8016daa <HAL_I2C_Init+0x196>
 8016cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016cbc:	431a      	orrs	r2, r3
 8016cbe:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016cc0:	6821      	ldr	r1, [r4, #0]
 8016cc2:	680b      	ldr	r3, [r1, #0]
 8016cc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016cc8:	69e2      	ldr	r2, [r4, #28]
 8016cca:	6a20      	ldr	r0, [r4, #32]
 8016ccc:	4302      	orrs	r2, r0
 8016cce:	4313      	orrs	r3, r2
 8016cd0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016cd2:	6821      	ldr	r1, [r4, #0]
 8016cd4:	688b      	ldr	r3, [r1, #8]
 8016cd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8016cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016cde:	6922      	ldr	r2, [r4, #16]
 8016ce0:	68e0      	ldr	r0, [r4, #12]
 8016ce2:	4302      	orrs	r2, r0
 8016ce4:	4313      	orrs	r3, r2
 8016ce6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016ce8:	6821      	ldr	r1, [r4, #0]
 8016cea:	68cb      	ldr	r3, [r1, #12]
 8016cec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016cf0:	6962      	ldr	r2, [r4, #20]
 8016cf2:	69a0      	ldr	r0, [r4, #24]
 8016cf4:	4302      	orrs	r2, r0
 8016cf6:	4313      	orrs	r3, r2
 8016cf8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	6813      	ldr	r3, [r2, #0]
 8016cfe:	f043 0301 	orr.w	r3, r3, #1
 8016d02:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016d04:	2000      	movs	r0, #0
 8016d06:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016d08:	2320      	movs	r3, #32
 8016d0a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016d0e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016d10:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8016d14:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8016d16:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8016d1a:	f7fb f95d 	bl	8011fd8 <HAL_I2C_MspInit>
 8016d1e:	e782      	b.n	8016c26 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016d20:	4b29      	ldr	r3, [pc, #164]	@ (8016dc8 <HAL_I2C_Init+0x1b4>)
 8016d22:	4298      	cmp	r0, r3
 8016d24:	bf8c      	ite	hi
 8016d26:	2300      	movhi	r3, #0
 8016d28:	2301      	movls	r3, #1
 8016d2a:	e799      	b.n	8016c60 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016d2c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8016d30:	fb05 f303 	mul.w	r3, r5, r3
 8016d34:	4d25      	ldr	r5, [pc, #148]	@ (8016dcc <HAL_I2C_Init+0x1b8>)
 8016d36:	fba5 5303 	umull	r5, r3, r5, r3
 8016d3a:	099b      	lsrs	r3, r3, #6
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	e7a6      	b.n	8016c8e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016d40:	68a6      	ldr	r6, [r4, #8]
 8016d42:	b9be      	cbnz	r6, 8016d74 <HAL_I2C_Init+0x160>
 8016d44:	1e43      	subs	r3, r0, #1
 8016d46:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016d4a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016d4e:	3301      	adds	r3, #1
 8016d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016d54:	fab3 f383 	clz	r3, r3
 8016d58:	095b      	lsrs	r3, r3, #5
 8016d5a:	bb43      	cbnz	r3, 8016dae <HAL_I2C_Init+0x19a>
 8016d5c:	b9c6      	cbnz	r6, 8016d90 <HAL_I2C_Init+0x17c>
 8016d5e:	1e43      	subs	r3, r0, #1
 8016d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d64:	fbb3 f3f5 	udiv	r3, r3, r5
 8016d68:	3301      	adds	r3, #1
 8016d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016d72:	e7a3      	b.n	8016cbc <HAL_I2C_Init+0xa8>
 8016d74:	1e43      	subs	r3, r0, #1
 8016d76:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8016d7a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8016d7e:	fbb3 f3fc 	udiv	r3, r3, ip
 8016d82:	3301      	adds	r3, #1
 8016d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016d88:	fab3 f383 	clz	r3, r3
 8016d8c:	095b      	lsrs	r3, r3, #5
 8016d8e:	e7e4      	b.n	8016d5a <HAL_I2C_Init+0x146>
 8016d90:	1e43      	subs	r3, r0, #1
 8016d92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016d96:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016d9a:	fbb3 f3f5 	udiv	r3, r3, r5
 8016d9e:	3301      	adds	r3, #1
 8016da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016da8:	e788      	b.n	8016cbc <HAL_I2C_Init+0xa8>
 8016daa:	2304      	movs	r3, #4
 8016dac:	e786      	b.n	8016cbc <HAL_I2C_Init+0xa8>
 8016dae:	2301      	movs	r3, #1
 8016db0:	e784      	b.n	8016cbc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8016db2:	2001      	movs	r0, #1
}
 8016db4:	4770      	bx	lr
    return HAL_ERROR;
 8016db6:	2001      	movs	r0, #1
 8016db8:	e7ac      	b.n	8016d14 <HAL_I2C_Init+0x100>
 8016dba:	bf00      	nop
 8016dbc:	000186a0 	.word	0x000186a0
 8016dc0:	001e847f 	.word	0x001e847f
 8016dc4:	431bde83 	.word	0x431bde83
 8016dc8:	003d08ff 	.word	0x003d08ff
 8016dcc:	10624dd3 	.word	0x10624dd3

08016dd0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8016dd0:	b1a8      	cbz	r0, 8016dfe <HAL_I2C_DeInit+0x2e>
{
 8016dd2:	b510      	push	{r4, lr}
 8016dd4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016dd6:	2324      	movs	r3, #36	@ 0x24
 8016dd8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016ddc:	6802      	ldr	r2, [r0, #0]
 8016dde:	6813      	ldr	r3, [r2, #0]
 8016de0:	f023 0301 	bic.w	r3, r3, #1
 8016de4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8016de6:	f7fb f931 	bl	801204c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016dea:	2000      	movs	r0, #0
 8016dec:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8016dee:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016df2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016df4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8016df8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8016dfc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8016dfe:	2001      	movs	r0, #1
}
 8016e00:	4770      	bx	lr
	...

08016e04 <HAL_I2C_Master_Transmit>:
{
 8016e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e08:	b085      	sub	sp, #20
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	460f      	mov	r7, r1
 8016e0e:	4691      	mov	r9, r2
 8016e10:	4698      	mov	r8, r3
 8016e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8016e14:	f7ff fb52 	bl	80164bc <HAL_GetTick>
 8016e18:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016e1a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8016e1e:	b2c0      	uxtb	r0, r0
 8016e20:	2820      	cmp	r0, #32
 8016e22:	d004      	beq.n	8016e2e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8016e24:	2702      	movs	r7, #2
}
 8016e26:	4638      	mov	r0, r7
 8016e28:	b005      	add	sp, #20
 8016e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016e2e:	9500      	str	r5, [sp, #0]
 8016e30:	2319      	movs	r3, #25
 8016e32:	2201      	movs	r2, #1
 8016e34:	494f      	ldr	r1, [pc, #316]	@ (8016f74 <HAL_I2C_Master_Transmit+0x170>)
 8016e36:	4620      	mov	r0, r4
 8016e38:	f7ff fd73 	bl	8016922 <I2C_WaitOnFlagUntilTimeout>
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	f040 8092 	bne.w	8016f66 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8016e42:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	f000 808f 	beq.w	8016f6a <HAL_I2C_Master_Transmit+0x166>
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016e52:	6823      	ldr	r3, [r4, #0]
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	f012 0f01 	tst.w	r2, #1
 8016e5a:	d103      	bne.n	8016e64 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8016e5c:	681a      	ldr	r2, [r3, #0]
 8016e5e:	f042 0201 	orr.w	r2, r2, #1
 8016e62:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016e64:	6822      	ldr	r2, [r4, #0]
 8016e66:	6813      	ldr	r3, [r2, #0]
 8016e68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016e6c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016e6e:	2321      	movs	r3, #33	@ 0x21
 8016e70:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016e74:	2310      	movs	r3, #16
 8016e76:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8016e7e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016e82:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016e86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016e88:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8016f78 <HAL_I2C_Master_Transmit+0x174>)
 8016e8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016e8e:	462b      	mov	r3, r5
 8016e90:	4632      	mov	r2, r6
 8016e92:	4639      	mov	r1, r7
 8016e94:	4620      	mov	r0, r4
 8016e96:	f7ff fe05 	bl	8016aa4 <I2C_MasterRequestWrite>
 8016e9a:	4607      	mov	r7, r0
 8016e9c:	2800      	cmp	r0, #0
 8016e9e:	d166      	bne.n	8016f6e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	9303      	str	r3, [sp, #12]
 8016ea4:	6823      	ldr	r3, [r4, #0]
 8016ea6:	695a      	ldr	r2, [r3, #20]
 8016ea8:	9203      	str	r2, [sp, #12]
 8016eaa:	699b      	ldr	r3, [r3, #24]
 8016eac:	9303      	str	r3, [sp, #12]
 8016eae:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8016eb0:	e011      	b.n	8016ed6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016eb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016eb4:	2b04      	cmp	r3, #4
 8016eb6:	d001      	beq.n	8016ebc <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8016eb8:	2701      	movs	r7, #1
 8016eba:	e7b4      	b.n	8016e26 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ebc:	6822      	ldr	r2, [r4, #0]
 8016ebe:	6813      	ldr	r3, [r2, #0]
 8016ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016ec4:	6013      	str	r3, [r2, #0]
 8016ec6:	e7f7      	b.n	8016eb8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016ec8:	462a      	mov	r2, r5
 8016eca:	4631      	mov	r1, r6
 8016ecc:	4620      	mov	r0, r4
 8016ece:	f7ff fe72 	bl	8016bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	d12e      	bne.n	8016f34 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8016ed6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d036      	beq.n	8016f4a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016edc:	462a      	mov	r2, r5
 8016ede:	4631      	mov	r1, r6
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f7ff fe39 	bl	8016b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d1e3      	bne.n	8016eb2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016eea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016eec:	6823      	ldr	r3, [r4, #0]
 8016eee:	7812      	ldrb	r2, [r2, #0]
 8016ef0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8016ef2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8016ef4:	1c43      	adds	r3, r0, #1
 8016ef6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8016ef8:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8016efa:	b289      	uxth	r1, r1
 8016efc:	3901      	subs	r1, #1
 8016efe:	b289      	uxth	r1, r1
 8016f00:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8016f02:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016f04:	3b01      	subs	r3, #1
 8016f06:	b29b      	uxth	r3, r3
 8016f08:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016f0a:	6822      	ldr	r2, [r4, #0]
 8016f0c:	6951      	ldr	r1, [r2, #20]
 8016f0e:	f011 0f04 	tst.w	r1, #4
 8016f12:	d0d9      	beq.n	8016ec8 <HAL_I2C_Master_Transmit+0xc4>
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d0d7      	beq.n	8016ec8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016f18:	7843      	ldrb	r3, [r0, #1]
 8016f1a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8016f1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016f1e:	3301      	adds	r3, #1
 8016f20:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8016f22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	3b01      	subs	r3, #1
 8016f28:	b29b      	uxth	r3, r3
 8016f2a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8016f2c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016f2e:	3b01      	subs	r3, #1
 8016f30:	8523      	strh	r3, [r4, #40]	@ 0x28
 8016f32:	e7c9      	b.n	8016ec8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016f34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016f36:	2b04      	cmp	r3, #4
 8016f38:	d001      	beq.n	8016f3e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8016f3a:	2701      	movs	r7, #1
 8016f3c:	e773      	b.n	8016e26 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f3e:	6822      	ldr	r2, [r4, #0]
 8016f40:	6813      	ldr	r3, [r2, #0]
 8016f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016f46:	6013      	str	r3, [r2, #0]
 8016f48:	e7f7      	b.n	8016f3a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f4a:	6822      	ldr	r2, [r4, #0]
 8016f4c:	6813      	ldr	r3, [r2, #0]
 8016f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016f52:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8016f54:	2320      	movs	r3, #32
 8016f56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8016f60:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8016f64:	e75f      	b.n	8016e26 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8016f66:	2702      	movs	r7, #2
 8016f68:	e75d      	b.n	8016e26 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8016f6a:	2702      	movs	r7, #2
 8016f6c:	e75b      	b.n	8016e26 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8016f6e:	2701      	movs	r7, #1
 8016f70:	e759      	b.n	8016e26 <HAL_I2C_Master_Transmit+0x22>
 8016f72:	bf00      	nop
 8016f74:	00100002 	.word	0x00100002
 8016f78:	ffff0000 	.word	0xffff0000

08016f7c <HAL_I2C_IsDeviceReady>:
{
 8016f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f80:	b085      	sub	sp, #20
 8016f82:	4604      	mov	r4, r0
 8016f84:	4688      	mov	r8, r1
 8016f86:	4691      	mov	r9, r2
 8016f88:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8016f8a:	f7ff fa97 	bl	80164bc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016f8e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	2b20      	cmp	r3, #32
 8016f96:	d003      	beq.n	8016fa0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8016f98:	2002      	movs	r0, #2
}
 8016f9a:	b005      	add	sp, #20
 8016f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fa0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016fa2:	9000      	str	r0, [sp, #0]
 8016fa4:	2319      	movs	r3, #25
 8016fa6:	2201      	movs	r2, #1
 8016fa8:	4957      	ldr	r1, [pc, #348]	@ (8017108 <HAL_I2C_IsDeviceReady+0x18c>)
 8016faa:	4620      	mov	r0, r4
 8016fac:	f7ff fcb9 	bl	8016922 <I2C_WaitOnFlagUntilTimeout>
 8016fb0:	2800      	cmp	r0, #0
 8016fb2:	f040 80a0 	bne.w	80170f6 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8016fb6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016fba:	2b01      	cmp	r3, #1
 8016fbc:	f000 809d 	beq.w	80170fa <HAL_I2C_IsDeviceReady+0x17e>
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	681a      	ldr	r2, [r3, #0]
 8016fca:	f012 0f01 	tst.w	r2, #1
 8016fce:	d103      	bne.n	8016fd8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8016fd0:	681a      	ldr	r2, [r3, #0]
 8016fd2:	f042 0201 	orr.w	r2, r2, #1
 8016fd6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016fd8:	6822      	ldr	r2, [r4, #0]
 8016fda:	6813      	ldr	r3, [r2, #0]
 8016fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016fe0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8016fe2:	2324      	movs	r3, #36	@ 0x24
 8016fe4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016fe8:	2700      	movs	r7, #0
 8016fea:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016fec:	4b47      	ldr	r3, [pc, #284]	@ (801710c <HAL_I2C_IsDeviceReady+0x190>)
 8016fee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ff0:	e040      	b.n	8017074 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016ffa:	d002      	beq.n	8017002 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017000:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8017002:	2003      	movs	r0, #3
 8017004:	e7c9      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8017006:	23a0      	movs	r3, #160	@ 0xa0
 8017008:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801700c:	6822      	ldr	r2, [r4, #0]
 801700e:	6953      	ldr	r3, [r2, #20]
 8017010:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8017014:	6952      	ldr	r2, [r2, #20]
 8017016:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801701a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 801701e:	fa5f fc8c 	uxtb.w	ip, ip
 8017022:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8017026:	d009      	beq.n	801703c <HAL_I2C_IsDeviceReady+0xc0>
 8017028:	b943      	cbnz	r3, 801703c <HAL_I2C_IsDeviceReady+0xc0>
 801702a:	b93a      	cbnz	r2, 801703c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801702c:	f7ff fa46 	bl	80164bc <HAL_GetTick>
 8017030:	1b80      	subs	r0, r0, r6
 8017032:	42a8      	cmp	r0, r5
 8017034:	d8e7      	bhi.n	8017006 <HAL_I2C_IsDeviceReady+0x8a>
 8017036:	2d00      	cmp	r5, #0
 8017038:	d1e8      	bne.n	801700c <HAL_I2C_IsDeviceReady+0x90>
 801703a:	e7e4      	b.n	8017006 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 801703c:	2320      	movs	r3, #32
 801703e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	695a      	ldr	r2, [r3, #20]
 8017046:	f012 0f02 	tst.w	r2, #2
 801704a:	d131      	bne.n	80170b0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017052:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017054:	6823      	ldr	r3, [r4, #0]
 8017056:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801705a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801705c:	9600      	str	r6, [sp, #0]
 801705e:	2319      	movs	r3, #25
 8017060:	2201      	movs	r2, #1
 8017062:	4929      	ldr	r1, [pc, #164]	@ (8017108 <HAL_I2C_IsDeviceReady+0x18c>)
 8017064:	4620      	mov	r0, r4
 8017066:	f7ff fc5c 	bl	8016922 <I2C_WaitOnFlagUntilTimeout>
 801706a:	2800      	cmp	r0, #0
 801706c:	d149      	bne.n	8017102 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 801706e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8017070:	454f      	cmp	r7, r9
 8017072:	d238      	bcs.n	80170e6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017074:	6822      	ldr	r2, [r4, #0]
 8017076:	6813      	ldr	r3, [r2, #0]
 8017078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801707c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801707e:	9600      	str	r6, [sp, #0]
 8017080:	462b      	mov	r3, r5
 8017082:	2200      	movs	r2, #0
 8017084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8017088:	4620      	mov	r0, r4
 801708a:	f7ff fc4a 	bl	8016922 <I2C_WaitOnFlagUntilTimeout>
 801708e:	2800      	cmp	r0, #0
 8017090:	d1af      	bne.n	8016ff2 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8017098:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 801709a:	f7ff fa0f 	bl	80164bc <HAL_GetTick>
 801709e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80170a0:	6822      	ldr	r2, [r4, #0]
 80170a2:	6953      	ldr	r3, [r2, #20]
 80170a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80170a8:	6952      	ldr	r2, [r2, #20]
 80170aa:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80170ae:	e7b4      	b.n	801701a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80170b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80170b8:	2300      	movs	r3, #0
 80170ba:	9303      	str	r3, [sp, #12]
 80170bc:	6823      	ldr	r3, [r4, #0]
 80170be:	695a      	ldr	r2, [r3, #20]
 80170c0:	9203      	str	r2, [sp, #12]
 80170c2:	699b      	ldr	r3, [r3, #24]
 80170c4:	9303      	str	r3, [sp, #12]
 80170c6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80170c8:	9600      	str	r6, [sp, #0]
 80170ca:	2319      	movs	r3, #25
 80170cc:	2201      	movs	r2, #1
 80170ce:	490e      	ldr	r1, [pc, #56]	@ (8017108 <HAL_I2C_IsDeviceReady+0x18c>)
 80170d0:	4620      	mov	r0, r4
 80170d2:	f7ff fc26 	bl	8016922 <I2C_WaitOnFlagUntilTimeout>
 80170d6:	b990      	cbnz	r0, 80170fe <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80170d8:	2320      	movs	r3, #32
 80170da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80170de:	2300      	movs	r3, #0
 80170e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80170e4:	e759      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80170e6:	2320      	movs	r3, #32
 80170e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80170ec:	2300      	movs	r3, #0
 80170ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80170f2:	2001      	movs	r0, #1
 80170f4:	e751      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80170f6:	2002      	movs	r0, #2
 80170f8:	e74f      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80170fa:	2002      	movs	r0, #2
 80170fc:	e74d      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80170fe:	2001      	movs	r0, #1
 8017100:	e74b      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8017102:	2001      	movs	r0, #1
 8017104:	e749      	b.n	8016f9a <HAL_I2C_IsDeviceReady+0x1e>
 8017106:	bf00      	nop
 8017108:	00100002 	.word	0x00100002
 801710c:	ffff0000 	.word	0xffff0000

08017110 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8017110:	b340      	cbz	r0, 8017164 <HAL_IWDG_Init+0x54>
{
 8017112:	b538      	push	{r3, r4, r5, lr}
 8017114:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8017116:	6803      	ldr	r3, [r0, #0]
 8017118:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 801711c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801711e:	6803      	ldr	r3, [r0, #0]
 8017120:	f245 5255 	movw	r2, #21845	@ 0x5555
 8017124:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8017126:	6803      	ldr	r3, [r0, #0]
 8017128:	6842      	ldr	r2, [r0, #4]
 801712a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801712c:	6803      	ldr	r3, [r0, #0]
 801712e:	6882      	ldr	r2, [r0, #8]
 8017130:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8017132:	f7ff f9c3 	bl	80164bc <HAL_GetTick>
 8017136:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8017138:	6823      	ldr	r3, [r4, #0]
 801713a:	68da      	ldr	r2, [r3, #12]
 801713c:	f012 0f03 	tst.w	r2, #3
 8017140:	d00b      	beq.n	801715a <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8017142:	f7ff f9bb 	bl	80164bc <HAL_GetTick>
 8017146:	1b40      	subs	r0, r0, r5
 8017148:	2831      	cmp	r0, #49	@ 0x31
 801714a:	d9f5      	bls.n	8017138 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801714c:	6823      	ldr	r3, [r4, #0]
 801714e:	68db      	ldr	r3, [r3, #12]
 8017150:	f013 0f03 	tst.w	r3, #3
 8017154:	d0f0      	beq.n	8017138 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8017156:	2003      	movs	r0, #3
 8017158:	e003      	b.n	8017162 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801715a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 801715e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8017160:	2000      	movs	r0, #0
}
 8017162:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8017164:	2001      	movs	r0, #1
}
 8017166:	4770      	bx	lr

08017168 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8017168:	6803      	ldr	r3, [r0, #0]
 801716a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 801716e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8017170:	2000      	movs	r0, #0
 8017172:	4770      	bx	lr

08017174 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8017174:	2800      	cmp	r0, #0
 8017176:	f000 81e0 	beq.w	801753a <HAL_RCC_OscConfig+0x3c6>
{
 801717a:	b570      	push	{r4, r5, r6, lr}
 801717c:	b082      	sub	sp, #8
 801717e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017180:	6803      	ldr	r3, [r0, #0]
 8017182:	f013 0f01 	tst.w	r3, #1
 8017186:	d03b      	beq.n	8017200 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8017188:	4b9f      	ldr	r3, [pc, #636]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 801718a:	689b      	ldr	r3, [r3, #8]
 801718c:	f003 030c 	and.w	r3, r3, #12
 8017190:	2b04      	cmp	r3, #4
 8017192:	d02c      	beq.n	80171ee <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017194:	4b9c      	ldr	r3, [pc, #624]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017196:	689b      	ldr	r3, [r3, #8]
 8017198:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 801719c:	2b08      	cmp	r3, #8
 801719e:	d021      	beq.n	80171e4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80171a0:	6863      	ldr	r3, [r4, #4]
 80171a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171a6:	d04f      	beq.n	8017248 <HAL_RCC_OscConfig+0xd4>
 80171a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80171ac:	d052      	beq.n	8017254 <HAL_RCC_OscConfig+0xe0>
 80171ae:	4b96      	ldr	r3, [pc, #600]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80171b0:	681a      	ldr	r2, [r3, #0]
 80171b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80171b6:	601a      	str	r2, [r3, #0]
 80171b8:	681a      	ldr	r2, [r3, #0]
 80171ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80171be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80171c0:	6863      	ldr	r3, [r4, #4]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d050      	beq.n	8017268 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80171c6:	f7ff f979 	bl	80164bc <HAL_GetTick>
 80171ca:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80171cc:	4b8e      	ldr	r3, [pc, #568]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80171d4:	d114      	bne.n	8017200 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80171d6:	f7ff f971 	bl	80164bc <HAL_GetTick>
 80171da:	1b40      	subs	r0, r0, r5
 80171dc:	2864      	cmp	r0, #100	@ 0x64
 80171de:	d9f5      	bls.n	80171cc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80171e0:	2003      	movs	r0, #3
 80171e2:	e1b1      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80171e4:	4b88      	ldr	r3, [pc, #544]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80171ec:	d0d8      	beq.n	80171a0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80171ee:	4b86      	ldr	r3, [pc, #536]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80171f6:	d003      	beq.n	8017200 <HAL_RCC_OscConfig+0x8c>
 80171f8:	6863      	ldr	r3, [r4, #4]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f000 819f 	beq.w	801753e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017200:	6823      	ldr	r3, [r4, #0]
 8017202:	f013 0f02 	tst.w	r3, #2
 8017206:	d054      	beq.n	80172b2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8017208:	4b7f      	ldr	r3, [pc, #508]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 801720a:	689b      	ldr	r3, [r3, #8]
 801720c:	f013 0f0c 	tst.w	r3, #12
 8017210:	d03e      	beq.n	8017290 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017212:	4b7d      	ldr	r3, [pc, #500]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017214:	689b      	ldr	r3, [r3, #8]
 8017216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801721a:	2b08      	cmp	r3, #8
 801721c:	d033      	beq.n	8017286 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801721e:	68e3      	ldr	r3, [r4, #12]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d068      	beq.n	80172f6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017224:	4b79      	ldr	r3, [pc, #484]	@ (801740c <HAL_RCC_OscConfig+0x298>)
 8017226:	2201      	movs	r2, #1
 8017228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801722a:	f7ff f947 	bl	80164bc <HAL_GetTick>
 801722e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017230:	4b75      	ldr	r3, [pc, #468]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f013 0f02 	tst.w	r3, #2
 8017238:	d154      	bne.n	80172e4 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801723a:	f7ff f93f 	bl	80164bc <HAL_GetTick>
 801723e:	1b40      	subs	r0, r0, r5
 8017240:	2802      	cmp	r0, #2
 8017242:	d9f5      	bls.n	8017230 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8017244:	2003      	movs	r0, #3
 8017246:	e17f      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017248:	4a6f      	ldr	r2, [pc, #444]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 801724a:	6813      	ldr	r3, [r2, #0]
 801724c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017250:	6013      	str	r3, [r2, #0]
 8017252:	e7b5      	b.n	80171c0 <HAL_RCC_OscConfig+0x4c>
 8017254:	4b6c      	ldr	r3, [pc, #432]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017256:	681a      	ldr	r2, [r3, #0]
 8017258:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801725c:	601a      	str	r2, [r3, #0]
 801725e:	681a      	ldr	r2, [r3, #0]
 8017260:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8017264:	601a      	str	r2, [r3, #0]
 8017266:	e7ab      	b.n	80171c0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8017268:	f7ff f928 	bl	80164bc <HAL_GetTick>
 801726c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801726e:	4b66      	ldr	r3, [pc, #408]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8017276:	d0c3      	beq.n	8017200 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017278:	f7ff f920 	bl	80164bc <HAL_GetTick>
 801727c:	1b40      	subs	r0, r0, r5
 801727e:	2864      	cmp	r0, #100	@ 0x64
 8017280:	d9f5      	bls.n	801726e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8017282:	2003      	movs	r0, #3
 8017284:	e160      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017286:	4b60      	ldr	r3, [pc, #384]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 801728e:	d1c6      	bne.n	801721e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017290:	4b5d      	ldr	r3, [pc, #372]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	f013 0f02 	tst.w	r3, #2
 8017298:	d003      	beq.n	80172a2 <HAL_RCC_OscConfig+0x12e>
 801729a:	68e3      	ldr	r3, [r4, #12]
 801729c:	2b01      	cmp	r3, #1
 801729e:	f040 8150 	bne.w	8017542 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80172a2:	4a59      	ldr	r2, [pc, #356]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80172a4:	6813      	ldr	r3, [r2, #0]
 80172a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80172aa:	6921      	ldr	r1, [r4, #16]
 80172ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80172b0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80172b2:	6823      	ldr	r3, [r4, #0]
 80172b4:	f013 0f08 	tst.w	r3, #8
 80172b8:	d042      	beq.n	8017340 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80172ba:	6963      	ldr	r3, [r4, #20]
 80172bc:	b36b      	cbz	r3, 801731a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80172be:	4b53      	ldr	r3, [pc, #332]	@ (801740c <HAL_RCC_OscConfig+0x298>)
 80172c0:	2201      	movs	r2, #1
 80172c2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172c6:	f7ff f8f9 	bl	80164bc <HAL_GetTick>
 80172ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80172cc:	4b4e      	ldr	r3, [pc, #312]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80172ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80172d0:	f013 0f02 	tst.w	r3, #2
 80172d4:	d134      	bne.n	8017340 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80172d6:	f7ff f8f1 	bl	80164bc <HAL_GetTick>
 80172da:	1b40      	subs	r0, r0, r5
 80172dc:	2802      	cmp	r0, #2
 80172de:	d9f5      	bls.n	80172cc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80172e0:	2003      	movs	r0, #3
 80172e2:	e131      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80172e4:	4a48      	ldr	r2, [pc, #288]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80172e6:	6813      	ldr	r3, [r2, #0]
 80172e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80172ec:	6921      	ldr	r1, [r4, #16]
 80172ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80172f2:	6013      	str	r3, [r2, #0]
 80172f4:	e7dd      	b.n	80172b2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80172f6:	4b45      	ldr	r3, [pc, #276]	@ (801740c <HAL_RCC_OscConfig+0x298>)
 80172f8:	2200      	movs	r2, #0
 80172fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80172fc:	f7ff f8de 	bl	80164bc <HAL_GetTick>
 8017300:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017302:	4b41      	ldr	r3, [pc, #260]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f013 0f02 	tst.w	r3, #2
 801730a:	d0d2      	beq.n	80172b2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801730c:	f7ff f8d6 	bl	80164bc <HAL_GetTick>
 8017310:	1b40      	subs	r0, r0, r5
 8017312:	2802      	cmp	r0, #2
 8017314:	d9f5      	bls.n	8017302 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8017316:	2003      	movs	r0, #3
 8017318:	e116      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801731a:	4b3c      	ldr	r3, [pc, #240]	@ (801740c <HAL_RCC_OscConfig+0x298>)
 801731c:	2200      	movs	r2, #0
 801731e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017322:	f7ff f8cb 	bl	80164bc <HAL_GetTick>
 8017326:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8017328:	4b37      	ldr	r3, [pc, #220]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 801732a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801732c:	f013 0f02 	tst.w	r3, #2
 8017330:	d006      	beq.n	8017340 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017332:	f7ff f8c3 	bl	80164bc <HAL_GetTick>
 8017336:	1b40      	subs	r0, r0, r5
 8017338:	2802      	cmp	r0, #2
 801733a:	d9f5      	bls.n	8017328 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 801733c:	2003      	movs	r0, #3
 801733e:	e103      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017340:	6823      	ldr	r3, [r4, #0]
 8017342:	f013 0f04 	tst.w	r3, #4
 8017346:	d077      	beq.n	8017438 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017348:	4b2f      	ldr	r3, [pc, #188]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 801734a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801734c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8017350:	d133      	bne.n	80173ba <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017352:	2300      	movs	r3, #0
 8017354:	9301      	str	r3, [sp, #4]
 8017356:	4b2c      	ldr	r3, [pc, #176]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801735a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801735e:	641a      	str	r2, [r3, #64]	@ 0x40
 8017360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017366:	9301      	str	r3, [sp, #4]
 8017368:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801736a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801736c:	4b28      	ldr	r3, [pc, #160]	@ (8017410 <HAL_RCC_OscConfig+0x29c>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017374:	d023      	beq.n	80173be <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017376:	68a3      	ldr	r3, [r4, #8]
 8017378:	2b01      	cmp	r3, #1
 801737a:	d034      	beq.n	80173e6 <HAL_RCC_OscConfig+0x272>
 801737c:	2b05      	cmp	r3, #5
 801737e:	d038      	beq.n	80173f2 <HAL_RCC_OscConfig+0x27e>
 8017380:	4b21      	ldr	r3, [pc, #132]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 8017382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017384:	f022 0201 	bic.w	r2, r2, #1
 8017388:	671a      	str	r2, [r3, #112]	@ 0x70
 801738a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801738c:	f022 0204 	bic.w	r2, r2, #4
 8017390:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017392:	68a3      	ldr	r3, [r4, #8]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d03d      	beq.n	8017414 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017398:	f7ff f890 	bl	80164bc <HAL_GetTick>
 801739c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801739e:	4b1a      	ldr	r3, [pc, #104]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80173a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173a2:	f013 0f02 	tst.w	r3, #2
 80173a6:	d146      	bne.n	8017436 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80173a8:	f7ff f888 	bl	80164bc <HAL_GetTick>
 80173ac:	1b80      	subs	r0, r0, r6
 80173ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80173b2:	4298      	cmp	r0, r3
 80173b4:	d9f3      	bls.n	801739e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80173b6:	2003      	movs	r0, #3
 80173b8:	e0c6      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80173ba:	2500      	movs	r5, #0
 80173bc:	e7d6      	b.n	801736c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80173be:	4a14      	ldr	r2, [pc, #80]	@ (8017410 <HAL_RCC_OscConfig+0x29c>)
 80173c0:	6813      	ldr	r3, [r2, #0]
 80173c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80173c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80173c8:	f7ff f878 	bl	80164bc <HAL_GetTick>
 80173cc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80173ce:	4b10      	ldr	r3, [pc, #64]	@ (8017410 <HAL_RCC_OscConfig+0x29c>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80173d6:	d1ce      	bne.n	8017376 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80173d8:	f7ff f870 	bl	80164bc <HAL_GetTick>
 80173dc:	1b80      	subs	r0, r0, r6
 80173de:	2802      	cmp	r0, #2
 80173e0:	d9f5      	bls.n	80173ce <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80173e2:	2003      	movs	r0, #3
 80173e4:	e0b0      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80173e6:	4a08      	ldr	r2, [pc, #32]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80173e8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80173ea:	f043 0301 	orr.w	r3, r3, #1
 80173ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80173f0:	e7cf      	b.n	8017392 <HAL_RCC_OscConfig+0x21e>
 80173f2:	4b05      	ldr	r3, [pc, #20]	@ (8017408 <HAL_RCC_OscConfig+0x294>)
 80173f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80173f6:	f042 0204 	orr.w	r2, r2, #4
 80173fa:	671a      	str	r2, [r3, #112]	@ 0x70
 80173fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80173fe:	f042 0201 	orr.w	r2, r2, #1
 8017402:	671a      	str	r2, [r3, #112]	@ 0x70
 8017404:	e7c5      	b.n	8017392 <HAL_RCC_OscConfig+0x21e>
 8017406:	bf00      	nop
 8017408:	40023800 	.word	0x40023800
 801740c:	42470000 	.word	0x42470000
 8017410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017414:	f7ff f852 	bl	80164bc <HAL_GetTick>
 8017418:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801741a:	4b52      	ldr	r3, [pc, #328]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 801741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801741e:	f013 0f02 	tst.w	r3, #2
 8017422:	d008      	beq.n	8017436 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017424:	f7ff f84a 	bl	80164bc <HAL_GetTick>
 8017428:	1b80      	subs	r0, r0, r6
 801742a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801742e:	4298      	cmp	r0, r3
 8017430:	d9f3      	bls.n	801741a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8017432:	2003      	movs	r0, #3
 8017434:	e088      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017436:	b9ed      	cbnz	r5, 8017474 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017438:	69a3      	ldr	r3, [r4, #24]
 801743a:	2b00      	cmp	r3, #0
 801743c:	f000 8083 	beq.w	8017546 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017440:	4a48      	ldr	r2, [pc, #288]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 8017442:	6892      	ldr	r2, [r2, #8]
 8017444:	f002 020c 	and.w	r2, r2, #12
 8017448:	2a08      	cmp	r2, #8
 801744a:	d051      	beq.n	80174f0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801744c:	2b02      	cmp	r3, #2
 801744e:	d017      	beq.n	8017480 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017450:	4b45      	ldr	r3, [pc, #276]	@ (8017568 <HAL_RCC_OscConfig+0x3f4>)
 8017452:	2200      	movs	r2, #0
 8017454:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017456:	f7ff f831 	bl	80164bc <HAL_GetTick>
 801745a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801745c:	4b41      	ldr	r3, [pc, #260]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017464:	d042      	beq.n	80174ec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017466:	f7ff f829 	bl	80164bc <HAL_GetTick>
 801746a:	1b00      	subs	r0, r0, r4
 801746c:	2802      	cmp	r0, #2
 801746e:	d9f5      	bls.n	801745c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8017470:	2003      	movs	r0, #3
 8017472:	e069      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8017474:	4a3b      	ldr	r2, [pc, #236]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 8017476:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801747c:	6413      	str	r3, [r2, #64]	@ 0x40
 801747e:	e7db      	b.n	8017438 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8017480:	4b39      	ldr	r3, [pc, #228]	@ (8017568 <HAL_RCC_OscConfig+0x3f4>)
 8017482:	2200      	movs	r2, #0
 8017484:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8017486:	f7ff f819 	bl	80164bc <HAL_GetTick>
 801748a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801748c:	4b35      	ldr	r3, [pc, #212]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017494:	d006      	beq.n	80174a4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017496:	f7ff f811 	bl	80164bc <HAL_GetTick>
 801749a:	1b40      	subs	r0, r0, r5
 801749c:	2802      	cmp	r0, #2
 801749e:	d9f5      	bls.n	801748c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80174a0:	2003      	movs	r0, #3
 80174a2:	e051      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80174a4:	69e3      	ldr	r3, [r4, #28]
 80174a6:	6a22      	ldr	r2, [r4, #32]
 80174a8:	4313      	orrs	r3, r2
 80174aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80174ac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80174b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80174b2:	0852      	lsrs	r2, r2, #1
 80174b4:	3a01      	subs	r2, #1
 80174b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80174bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80174c0:	4a28      	ldr	r2, [pc, #160]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 80174c2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80174c4:	4b28      	ldr	r3, [pc, #160]	@ (8017568 <HAL_RCC_OscConfig+0x3f4>)
 80174c6:	2201      	movs	r2, #1
 80174c8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80174ca:	f7fe fff7 	bl	80164bc <HAL_GetTick>
 80174ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80174d0:	4b24      	ldr	r3, [pc, #144]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80174d8:	d106      	bne.n	80174e8 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174da:	f7fe ffef 	bl	80164bc <HAL_GetTick>
 80174de:	1b00      	subs	r0, r0, r4
 80174e0:	2802      	cmp	r0, #2
 80174e2:	d9f5      	bls.n	80174d0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80174e4:	2003      	movs	r0, #3
 80174e6:	e02f      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80174e8:	2000      	movs	r0, #0
 80174ea:	e02d      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
 80174ec:	2000      	movs	r0, #0
 80174ee:	e02b      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80174f0:	2b01      	cmp	r3, #1
 80174f2:	d02b      	beq.n	801754c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80174f4:	4b1b      	ldr	r3, [pc, #108]	@ (8017564 <HAL_RCC_OscConfig+0x3f0>)
 80174f6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80174f8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80174fc:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80174fe:	4291      	cmp	r1, r2
 8017500:	d126      	bne.n	8017550 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8017506:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017508:	428a      	cmp	r2, r1
 801750a:	d123      	bne.n	8017554 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801750c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801750e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8017512:	401a      	ands	r2, r3
 8017514:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8017518:	d11e      	bne.n	8017558 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801751a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 801751e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017520:	0852      	lsrs	r2, r2, #1
 8017522:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017524:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8017528:	d118      	bne.n	801755c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801752a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 801752e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017530:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8017534:	d114      	bne.n	8017560 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8017536:	2000      	movs	r0, #0
 8017538:	e006      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 801753a:	2001      	movs	r0, #1
}
 801753c:	4770      	bx	lr
        return HAL_ERROR;
 801753e:	2001      	movs	r0, #1
 8017540:	e002      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8017542:	2001      	movs	r0, #1
 8017544:	e000      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8017546:	2000      	movs	r0, #0
}
 8017548:	b002      	add	sp, #8
 801754a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 801754c:	2001      	movs	r0, #1
 801754e:	e7fb      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8017550:	2001      	movs	r0, #1
 8017552:	e7f9      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
 8017554:	2001      	movs	r0, #1
 8017556:	e7f7      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
 8017558:	2001      	movs	r0, #1
 801755a:	e7f5      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
 801755c:	2001      	movs	r0, #1
 801755e:	e7f3      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
 8017560:	2001      	movs	r0, #1
 8017562:	e7f1      	b.n	8017548 <HAL_RCC_OscConfig+0x3d4>
 8017564:	40023800 	.word	0x40023800
 8017568:	42470000 	.word	0x42470000

0801756c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801756c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801756e:	4b33      	ldr	r3, [pc, #204]	@ (801763c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017570:	689b      	ldr	r3, [r3, #8]
 8017572:	f003 030c 	and.w	r3, r3, #12
 8017576:	2b04      	cmp	r3, #4
 8017578:	d05b      	beq.n	8017632 <HAL_RCC_GetSysClockFreq+0xc6>
 801757a:	2b08      	cmp	r3, #8
 801757c:	d15b      	bne.n	8017636 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801757e:	4b2f      	ldr	r3, [pc, #188]	@ (801763c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017580:	685a      	ldr	r2, [r3, #4]
 8017582:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8017586:	685b      	ldr	r3, [r3, #4]
 8017588:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 801758c:	d02c      	beq.n	80175e8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801758e:	4b2b      	ldr	r3, [pc, #172]	@ (801763c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017590:	6858      	ldr	r0, [r3, #4]
 8017592:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017596:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 801759a:	ebbc 0c00 	subs.w	ip, ip, r0
 801759e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80175a2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80175a6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80175aa:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80175ae:	ebb1 010c 	subs.w	r1, r1, ip
 80175b2:	eb63 030e 	sbc.w	r3, r3, lr
 80175b6:	00db      	lsls	r3, r3, #3
 80175b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80175bc:	00c9      	lsls	r1, r1, #3
 80175be:	eb11 0c00 	adds.w	ip, r1, r0
 80175c2:	f143 0300 	adc.w	r3, r3, #0
 80175c6:	0259      	lsls	r1, r3, #9
 80175c8:	2300      	movs	r3, #0
 80175ca:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80175ce:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80175d2:	f7f9 fbc1 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80175d6:	4b19      	ldr	r3, [pc, #100]	@ (801763c <HAL_RCC_GetSysClockFreq+0xd0>)
 80175d8:	685b      	ldr	r3, [r3, #4]
 80175da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80175de:	3301      	adds	r3, #1
 80175e0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80175e2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80175e6:	e027      	b.n	8017638 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80175e8:	4b14      	ldr	r3, [pc, #80]	@ (801763c <HAL_RCC_GetSysClockFreq+0xd0>)
 80175ea:	6858      	ldr	r0, [r3, #4]
 80175ec:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80175f0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80175f4:	ebbc 0c00 	subs.w	ip, ip, r0
 80175f8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80175fc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017600:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017604:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017608:	ebb1 010c 	subs.w	r1, r1, ip
 801760c:	eb63 030e 	sbc.w	r3, r3, lr
 8017610:	00db      	lsls	r3, r3, #3
 8017612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017616:	00c9      	lsls	r1, r1, #3
 8017618:	eb11 0c00 	adds.w	ip, r1, r0
 801761c:	f143 0300 	adc.w	r3, r3, #0
 8017620:	0299      	lsls	r1, r3, #10
 8017622:	2300      	movs	r3, #0
 8017624:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8017628:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 801762c:	f7f9 fb94 	bl	8010d58 <__aeabi_uldivmod>
 8017630:	e7d1      	b.n	80175d6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8017632:	4803      	ldr	r0, [pc, #12]	@ (8017640 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017634:	e000      	b.n	8017638 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017636:	4803      	ldr	r0, [pc, #12]	@ (8017644 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8017638:	bd08      	pop	{r3, pc}
 801763a:	bf00      	nop
 801763c:	40023800 	.word	0x40023800
 8017640:	007a1200 	.word	0x007a1200
 8017644:	00f42400 	.word	0x00f42400

08017648 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8017648:	2800      	cmp	r0, #0
 801764a:	f000 809b 	beq.w	8017784 <HAL_RCC_ClockConfig+0x13c>
{
 801764e:	b570      	push	{r4, r5, r6, lr}
 8017650:	460d      	mov	r5, r1
 8017652:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017654:	4b4f      	ldr	r3, [pc, #316]	@ (8017794 <HAL_RCC_ClockConfig+0x14c>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f003 0307 	and.w	r3, r3, #7
 801765c:	428b      	cmp	r3, r1
 801765e:	d208      	bcs.n	8017672 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017660:	b2cb      	uxtb	r3, r1
 8017662:	4a4c      	ldr	r2, [pc, #304]	@ (8017794 <HAL_RCC_ClockConfig+0x14c>)
 8017664:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017666:	6813      	ldr	r3, [r2, #0]
 8017668:	f003 0307 	and.w	r3, r3, #7
 801766c:	428b      	cmp	r3, r1
 801766e:	f040 808b 	bne.w	8017788 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	f013 0f02 	tst.w	r3, #2
 8017678:	d017      	beq.n	80176aa <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801767a:	f013 0f04 	tst.w	r3, #4
 801767e:	d004      	beq.n	801768a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8017680:	4a45      	ldr	r2, [pc, #276]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 8017682:	6893      	ldr	r3, [r2, #8]
 8017684:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8017688:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801768a:	6823      	ldr	r3, [r4, #0]
 801768c:	f013 0f08 	tst.w	r3, #8
 8017690:	d004      	beq.n	801769c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8017692:	4a41      	ldr	r2, [pc, #260]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 8017694:	6893      	ldr	r3, [r2, #8]
 8017696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801769a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801769c:	4a3e      	ldr	r2, [pc, #248]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 801769e:	6893      	ldr	r3, [r2, #8]
 80176a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80176a4:	68a1      	ldr	r1, [r4, #8]
 80176a6:	430b      	orrs	r3, r1
 80176a8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80176aa:	6823      	ldr	r3, [r4, #0]
 80176ac:	f013 0f01 	tst.w	r3, #1
 80176b0:	d032      	beq.n	8017718 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80176b2:	6863      	ldr	r3, [r4, #4]
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	d021      	beq.n	80176fc <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80176b8:	1e9a      	subs	r2, r3, #2
 80176ba:	2a01      	cmp	r2, #1
 80176bc:	d925      	bls.n	801770a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80176be:	4a36      	ldr	r2, [pc, #216]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 80176c0:	6812      	ldr	r2, [r2, #0]
 80176c2:	f012 0f02 	tst.w	r2, #2
 80176c6:	d061      	beq.n	801778c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80176c8:	4933      	ldr	r1, [pc, #204]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 80176ca:	688a      	ldr	r2, [r1, #8]
 80176cc:	f022 0203 	bic.w	r2, r2, #3
 80176d0:	4313      	orrs	r3, r2
 80176d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80176d4:	f7fe fef2 	bl	80164bc <HAL_GetTick>
 80176d8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80176da:	4b2f      	ldr	r3, [pc, #188]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 80176dc:	689b      	ldr	r3, [r3, #8]
 80176de:	f003 030c 	and.w	r3, r3, #12
 80176e2:	6862      	ldr	r2, [r4, #4]
 80176e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80176e8:	d016      	beq.n	8017718 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80176ea:	f7fe fee7 	bl	80164bc <HAL_GetTick>
 80176ee:	1b80      	subs	r0, r0, r6
 80176f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80176f4:	4298      	cmp	r0, r3
 80176f6:	d9f0      	bls.n	80176da <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80176f8:	2003      	movs	r0, #3
 80176fa:	e042      	b.n	8017782 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80176fc:	4a26      	ldr	r2, [pc, #152]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 80176fe:	6812      	ldr	r2, [r2, #0]
 8017700:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8017704:	d1e0      	bne.n	80176c8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017706:	2001      	movs	r0, #1
 8017708:	e03b      	b.n	8017782 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801770a:	4a23      	ldr	r2, [pc, #140]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 801770c:	6812      	ldr	r2, [r2, #0]
 801770e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8017712:	d1d9      	bne.n	80176c8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017714:	2001      	movs	r0, #1
 8017716:	e034      	b.n	8017782 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017718:	4b1e      	ldr	r3, [pc, #120]	@ (8017794 <HAL_RCC_ClockConfig+0x14c>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	f003 0307 	and.w	r3, r3, #7
 8017720:	42ab      	cmp	r3, r5
 8017722:	d907      	bls.n	8017734 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017724:	b2ea      	uxtb	r2, r5
 8017726:	4b1b      	ldr	r3, [pc, #108]	@ (8017794 <HAL_RCC_ClockConfig+0x14c>)
 8017728:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f003 0307 	and.w	r3, r3, #7
 8017730:	42ab      	cmp	r3, r5
 8017732:	d12d      	bne.n	8017790 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017734:	6823      	ldr	r3, [r4, #0]
 8017736:	f013 0f04 	tst.w	r3, #4
 801773a:	d006      	beq.n	801774a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801773c:	4a16      	ldr	r2, [pc, #88]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 801773e:	6893      	ldr	r3, [r2, #8]
 8017740:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8017744:	68e1      	ldr	r1, [r4, #12]
 8017746:	430b      	orrs	r3, r1
 8017748:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801774a:	6823      	ldr	r3, [r4, #0]
 801774c:	f013 0f08 	tst.w	r3, #8
 8017750:	d007      	beq.n	8017762 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017752:	4a11      	ldr	r2, [pc, #68]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 8017754:	6893      	ldr	r3, [r2, #8]
 8017756:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801775a:	6921      	ldr	r1, [r4, #16]
 801775c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8017760:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8017762:	f7ff ff03 	bl	801756c <HAL_RCC_GetSysClockFreq>
 8017766:	4b0c      	ldr	r3, [pc, #48]	@ (8017798 <HAL_RCC_ClockConfig+0x150>)
 8017768:	689b      	ldr	r3, [r3, #8]
 801776a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801776e:	4a0b      	ldr	r2, [pc, #44]	@ (801779c <HAL_RCC_ClockConfig+0x154>)
 8017770:	5cd3      	ldrb	r3, [r2, r3]
 8017772:	40d8      	lsrs	r0, r3
 8017774:	4b0a      	ldr	r3, [pc, #40]	@ (80177a0 <HAL_RCC_ClockConfig+0x158>)
 8017776:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8017778:	4b0a      	ldr	r3, [pc, #40]	@ (80177a4 <HAL_RCC_ClockConfig+0x15c>)
 801777a:	6818      	ldr	r0, [r3, #0]
 801777c:	f7fa fea8 	bl	80124d0 <HAL_InitTick>
  return HAL_OK;
 8017780:	2000      	movs	r0, #0
}
 8017782:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8017784:	2001      	movs	r0, #1
}
 8017786:	4770      	bx	lr
      return HAL_ERROR;
 8017788:	2001      	movs	r0, #1
 801778a:	e7fa      	b.n	8017782 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 801778c:	2001      	movs	r0, #1
 801778e:	e7f8      	b.n	8017782 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8017790:	2001      	movs	r0, #1
 8017792:	e7f6      	b.n	8017782 <HAL_RCC_ClockConfig+0x13a>
 8017794:	40023c00 	.word	0x40023c00
 8017798:	40023800 	.word	0x40023800
 801779c:	080367a4 	.word	0x080367a4
 80177a0:	20000018 	.word	0x20000018
 80177a4:	20000108 	.word	0x20000108

080177a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80177a8:	4b01      	ldr	r3, [pc, #4]	@ (80177b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80177aa:	6818      	ldr	r0, [r3, #0]
 80177ac:	4770      	bx	lr
 80177ae:	bf00      	nop
 80177b0:	20000018 	.word	0x20000018

080177b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80177b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80177b6:	f7ff fff7 	bl	80177a8 <HAL_RCC_GetHCLKFreq>
 80177ba:	4b04      	ldr	r3, [pc, #16]	@ (80177cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80177bc:	689b      	ldr	r3, [r3, #8]
 80177be:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80177c2:	4a03      	ldr	r2, [pc, #12]	@ (80177d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80177c4:	5cd3      	ldrb	r3, [r2, r3]
}
 80177c6:	40d8      	lsrs	r0, r3
 80177c8:	bd08      	pop	{r3, pc}
 80177ca:	bf00      	nop
 80177cc:	40023800 	.word	0x40023800
 80177d0:	0803679c 	.word	0x0803679c

080177d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80177d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80177d6:	f7ff ffe7 	bl	80177a8 <HAL_RCC_GetHCLKFreq>
 80177da:	4b04      	ldr	r3, [pc, #16]	@ (80177ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80177dc:	689b      	ldr	r3, [r3, #8]
 80177de:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80177e2:	4a03      	ldr	r2, [pc, #12]	@ (80177f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80177e4:	5cd3      	ldrb	r3, [r2, r3]
}
 80177e6:	40d8      	lsrs	r0, r3
 80177e8:	bd08      	pop	{r3, pc}
 80177ea:	bf00      	nop
 80177ec:	40023800 	.word	0x40023800
 80177f0:	0803679c 	.word	0x0803679c

080177f4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80177f4:	230f      	movs	r3, #15
 80177f6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80177f8:	4b0b      	ldr	r3, [pc, #44]	@ (8017828 <HAL_RCC_GetClockConfig+0x34>)
 80177fa:	689a      	ldr	r2, [r3, #8]
 80177fc:	f002 0203 	and.w	r2, r2, #3
 8017800:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017802:	689a      	ldr	r2, [r3, #8]
 8017804:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8017808:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801780a:	689a      	ldr	r2, [r3, #8]
 801780c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8017810:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017812:	689b      	ldr	r3, [r3, #8]
 8017814:	08db      	lsrs	r3, r3, #3
 8017816:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 801781a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801781c:	4b03      	ldr	r3, [pc, #12]	@ (801782c <HAL_RCC_GetClockConfig+0x38>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	f003 0307 	and.w	r3, r3, #7
 8017824:	600b      	str	r3, [r1, #0]
}
 8017826:	4770      	bx	lr
 8017828:	40023800 	.word	0x40023800
 801782c:	40023c00 	.word	0x40023c00

08017830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017834:	b082      	sub	sp, #8
 8017836:	4605      	mov	r5, r0
 8017838:	4688      	mov	r8, r1
 801783a:	4617      	mov	r7, r2
 801783c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801783e:	f7fe fe3d 	bl	80164bc <HAL_GetTick>
 8017842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017844:	1a1b      	subs	r3, r3, r0
 8017846:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 801784a:	f7fe fe37 	bl	80164bc <HAL_GetTick>
 801784e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017850:	4b28      	ldr	r3, [pc, #160]	@ (80178f4 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8017858:	fb09 f303 	mul.w	r3, r9, r3
 801785c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801785e:	682b      	ldr	r3, [r5, #0]
 8017860:	689c      	ldr	r4, [r3, #8]
 8017862:	ea38 0404 	bics.w	r4, r8, r4
 8017866:	bf0c      	ite	eq
 8017868:	2301      	moveq	r3, #1
 801786a:	2300      	movne	r3, #0
 801786c:	42bb      	cmp	r3, r7
 801786e:	d03d      	beq.n	80178ec <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017870:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017874:	d0f3      	beq.n	801785e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017876:	f7fe fe21 	bl	80164bc <HAL_GetTick>
 801787a:	eba0 000a 	sub.w	r0, r0, sl
 801787e:	4548      	cmp	r0, r9
 8017880:	d207      	bcs.n	8017892 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017882:	9a01      	ldr	r2, [sp, #4]
 8017884:	b102      	cbz	r2, 8017888 <SPI_WaitFlagStateUntilTimeout+0x58>
 8017886:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8017888:	9b01      	ldr	r3, [sp, #4]
 801788a:	3b01      	subs	r3, #1
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	4691      	mov	r9, r2
 8017890:	e7e5      	b.n	801785e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017892:	682a      	ldr	r2, [r5, #0]
 8017894:	6853      	ldr	r3, [r2, #4]
 8017896:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 801789a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801789c:	686b      	ldr	r3, [r5, #4]
 801789e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80178a2:	d00b      	beq.n	80178bc <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80178a4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80178a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80178aa:	d014      	beq.n	80178d6 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80178ac:	2301      	movs	r3, #1
 80178ae:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80178b2:	2300      	movs	r3, #0
 80178b4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80178b8:	2003      	movs	r0, #3
 80178ba:	e018      	b.n	80178ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80178bc:	68ab      	ldr	r3, [r5, #8]
 80178be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80178c2:	d002      	beq.n	80178ca <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80178c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80178c8:	d1ec      	bne.n	80178a4 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 80178ca:	682a      	ldr	r2, [r5, #0]
 80178cc:	6813      	ldr	r3, [r2, #0]
 80178ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80178d2:	6013      	str	r3, [r2, #0]
 80178d4:	e7e6      	b.n	80178a4 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 80178d6:	682a      	ldr	r2, [r5, #0]
 80178d8:	6813      	ldr	r3, [r2, #0]
 80178da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80178de:	6013      	str	r3, [r2, #0]
 80178e0:	682a      	ldr	r2, [r5, #0]
 80178e2:	6813      	ldr	r3, [r2, #0]
 80178e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80178e8:	6013      	str	r3, [r2, #0]
 80178ea:	e7df      	b.n	80178ac <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 80178ec:	2000      	movs	r0, #0
}
 80178ee:	b002      	add	sp, #8
 80178f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178f4:	20000018 	.word	0x20000018

080178f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80178f8:	b570      	push	{r4, r5, r6, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	4604      	mov	r4, r0
 80178fe:	460d      	mov	r5, r1
 8017900:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017902:	9200      	str	r2, [sp, #0]
 8017904:	460b      	mov	r3, r1
 8017906:	2201      	movs	r2, #1
 8017908:	2102      	movs	r1, #2
 801790a:	f7ff ff91 	bl	8017830 <SPI_WaitFlagStateUntilTimeout>
 801790e:	b9d0      	cbnz	r0, 8017946 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8017910:	4b17      	ldr	r3, [pc, #92]	@ (8017970 <SPI_EndRxTxTransaction+0x78>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4a17      	ldr	r2, [pc, #92]	@ (8017974 <SPI_EndRxTxTransaction+0x7c>)
 8017916:	fba2 2303 	umull	r2, r3, r2, r3
 801791a:	0d5b      	lsrs	r3, r3, #21
 801791c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017920:	fb02 f303 	mul.w	r3, r2, r3
 8017924:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017926:	6863      	ldr	r3, [r4, #4]
 8017928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801792c:	d011      	beq.n	8017952 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801792e:	9b03      	ldr	r3, [sp, #12]
 8017930:	b13b      	cbz	r3, 8017942 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8017932:	9b03      	ldr	r3, [sp, #12]
 8017934:	3b01      	subs	r3, #1
 8017936:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017938:	6823      	ldr	r3, [r4, #0]
 801793a:	689b      	ldr	r3, [r3, #8]
 801793c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017940:	d1f5      	bne.n	801792e <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8017942:	b004      	add	sp, #16
 8017944:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017946:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017948:	f043 0320 	orr.w	r3, r3, #32
 801794c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 801794e:	2003      	movs	r0, #3
 8017950:	e7f7      	b.n	8017942 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017952:	9600      	str	r6, [sp, #0]
 8017954:	462b      	mov	r3, r5
 8017956:	2200      	movs	r2, #0
 8017958:	2180      	movs	r1, #128	@ 0x80
 801795a:	4620      	mov	r0, r4
 801795c:	f7ff ff68 	bl	8017830 <SPI_WaitFlagStateUntilTimeout>
 8017960:	2800      	cmp	r0, #0
 8017962:	d0ee      	beq.n	8017942 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017964:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017966:	f043 0320 	orr.w	r3, r3, #32
 801796a:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 801796c:	2003      	movs	r0, #3
 801796e:	e7e8      	b.n	8017942 <SPI_EndRxTxTransaction+0x4a>
 8017970:	20000018 	.word	0x20000018
 8017974:	165e9f81 	.word	0x165e9f81

08017978 <SPI_EndRxTransaction>:
{
 8017978:	b510      	push	{r4, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	4604      	mov	r4, r0
 801797e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017980:	6841      	ldr	r1, [r0, #4]
 8017982:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8017986:	d014      	beq.n	80179b2 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017988:	6861      	ldr	r1, [r4, #4]
 801798a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 801798e:	d12a      	bne.n	80179e6 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017990:	68a1      	ldr	r1, [r4, #8]
 8017992:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017996:	d019      	beq.n	80179cc <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017998:	9200      	str	r2, [sp, #0]
 801799a:	2200      	movs	r2, #0
 801799c:	2180      	movs	r1, #128	@ 0x80
 801799e:	4620      	mov	r0, r4
 80179a0:	f7ff ff46 	bl	8017830 <SPI_WaitFlagStateUntilTimeout>
 80179a4:	b330      	cbz	r0, 80179f4 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80179a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80179a8:	f043 0320 	orr.w	r3, r3, #32
 80179ac:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80179ae:	2003      	movs	r0, #3
 80179b0:	e020      	b.n	80179f4 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80179b2:	6881      	ldr	r1, [r0, #8]
 80179b4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80179b8:	d002      	beq.n	80179c0 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80179ba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80179be:	d1e3      	bne.n	8017988 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80179c0:	6820      	ldr	r0, [r4, #0]
 80179c2:	6801      	ldr	r1, [r0, #0]
 80179c4:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80179c8:	6001      	str	r1, [r0, #0]
 80179ca:	e7dd      	b.n	8017988 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80179cc:	9200      	str	r2, [sp, #0]
 80179ce:	2200      	movs	r2, #0
 80179d0:	2101      	movs	r1, #1
 80179d2:	4620      	mov	r0, r4
 80179d4:	f7ff ff2c 	bl	8017830 <SPI_WaitFlagStateUntilTimeout>
 80179d8:	b160      	cbz	r0, 80179f4 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80179da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80179dc:	f043 0320 	orr.w	r3, r3, #32
 80179e0:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80179e2:	2003      	movs	r0, #3
 80179e4:	e006      	b.n	80179f4 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80179e6:	9200      	str	r2, [sp, #0]
 80179e8:	2200      	movs	r2, #0
 80179ea:	2101      	movs	r1, #1
 80179ec:	4620      	mov	r0, r4
 80179ee:	f7ff ff1f 	bl	8017830 <SPI_WaitFlagStateUntilTimeout>
 80179f2:	b908      	cbnz	r0, 80179f8 <SPI_EndRxTransaction+0x80>
}
 80179f4:	b002      	add	sp, #8
 80179f6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80179f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80179fa:	f043 0320 	orr.w	r3, r3, #32
 80179fe:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017a00:	2003      	movs	r0, #3
 8017a02:	e7f7      	b.n	80179f4 <SPI_EndRxTransaction+0x7c>

08017a04 <HAL_SPI_Init>:
  if (hspi == NULL)
 8017a04:	2800      	cmp	r0, #0
 8017a06:	d05a      	beq.n	8017abe <HAL_SPI_Init+0xba>
{
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8017a0c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017a0e:	b933      	cbnz	r3, 8017a1e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017a10:	6843      	ldr	r3, [r0, #4]
 8017a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017a16:	d005      	beq.n	8017a24 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	61c3      	str	r3, [r0, #28]
 8017a1c:	e002      	b.n	8017a24 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017a1e:	2300      	movs	r3, #0
 8017a20:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017a22:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017a24:	2300      	movs	r3, #0
 8017a26:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8017a28:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d040      	beq.n	8017ab2 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8017a30:	2302      	movs	r3, #2
 8017a32:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8017a36:	6822      	ldr	r2, [r4, #0]
 8017a38:	6813      	ldr	r3, [r2, #0]
 8017a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017a3e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017a40:	6863      	ldr	r3, [r4, #4]
 8017a42:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8017a46:	68a2      	ldr	r2, [r4, #8]
 8017a48:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8017a4c:	4313      	orrs	r3, r2
 8017a4e:	68e2      	ldr	r2, [r4, #12]
 8017a50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8017a54:	4313      	orrs	r3, r2
 8017a56:	6922      	ldr	r2, [r4, #16]
 8017a58:	f002 0202 	and.w	r2, r2, #2
 8017a5c:	4313      	orrs	r3, r2
 8017a5e:	6962      	ldr	r2, [r4, #20]
 8017a60:	f002 0201 	and.w	r2, r2, #1
 8017a64:	4313      	orrs	r3, r2
 8017a66:	69a2      	ldr	r2, [r4, #24]
 8017a68:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8017a6c:	4313      	orrs	r3, r2
 8017a6e:	69e2      	ldr	r2, [r4, #28]
 8017a70:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8017a74:	4313      	orrs	r3, r2
 8017a76:	6a22      	ldr	r2, [r4, #32]
 8017a78:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8017a7c:	4313      	orrs	r3, r2
 8017a7e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017a80:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8017a84:	6821      	ldr	r1, [r4, #0]
 8017a86:	4313      	orrs	r3, r2
 8017a88:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8017a8a:	8b63      	ldrh	r3, [r4, #26]
 8017a8c:	f003 0304 	and.w	r3, r3, #4
 8017a90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017a92:	f002 0210 	and.w	r2, r2, #16
 8017a96:	6821      	ldr	r1, [r4, #0]
 8017a98:	4313      	orrs	r3, r2
 8017a9a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017a9c:	6822      	ldr	r2, [r4, #0]
 8017a9e:	69d3      	ldr	r3, [r2, #28]
 8017aa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017aa4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017aa6:	2000      	movs	r0, #0
 8017aa8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8017aaa:	2301      	movs	r3, #1
 8017aac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8017ab0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8017ab2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f7fa fc86 	bl	80123c8 <HAL_SPI_MspInit>
 8017abc:	e7b8      	b.n	8017a30 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8017abe:	2001      	movs	r0, #1
}
 8017ac0:	4770      	bx	lr

08017ac2 <HAL_SPI_Transmit>:
{
 8017ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ac6:	b083      	sub	sp, #12
 8017ac8:	4604      	mov	r4, r0
 8017aca:	4689      	mov	r9, r1
 8017acc:	4690      	mov	r8, r2
 8017ace:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8017ad0:	f7fe fcf4 	bl	80164bc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017ad4:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8017ad8:	b2f6      	uxtb	r6, r6
 8017ada:	2e01      	cmp	r6, #1
 8017adc:	f040 80cc 	bne.w	8017c78 <HAL_SPI_Transmit+0x1b6>
 8017ae0:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017ae2:	f1b9 0f00 	cmp.w	r9, #0
 8017ae6:	f000 80c8 	beq.w	8017c7a <HAL_SPI_Transmit+0x1b8>
 8017aea:	f1b8 0f00 	cmp.w	r8, #0
 8017aee:	f000 80c4 	beq.w	8017c7a <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8017af2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017af6:	2b01      	cmp	r3, #1
 8017af8:	f000 80c3 	beq.w	8017c82 <HAL_SPI_Transmit+0x1c0>
 8017afc:	2301      	movs	r3, #1
 8017afe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017b02:	2303      	movs	r3, #3
 8017b04:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017b0c:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017b10:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8017b14:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017b18:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8017b1a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8017b1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8017b1e:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017b20:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017b22:	68a3      	ldr	r3, [r4, #8]
 8017b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017b28:	d01e      	beq.n	8017b68 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017b2a:	6823      	ldr	r3, [r4, #0]
 8017b2c:	681a      	ldr	r2, [r3, #0]
 8017b2e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017b32:	d103      	bne.n	8017b3c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8017b34:	681a      	ldr	r2, [r3, #0]
 8017b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017b3a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017b3c:	68e3      	ldr	r3, [r4, #12]
 8017b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017b42:	d01c      	beq.n	8017b7e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017b44:	6863      	ldr	r3, [r4, #4]
 8017b46:	b113      	cbz	r3, 8017b4e <HAL_SPI_Transmit+0x8c>
 8017b48:	f1b8 0f01 	cmp.w	r8, #1
 8017b4c:	d15f      	bne.n	8017c0e <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017b4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b50:	6823      	ldr	r3, [r4, #0]
 8017b52:	7812      	ldrb	r2, [r2, #0]
 8017b54:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017b56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b58:	3301      	adds	r3, #1
 8017b5a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017b5c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b5e:	b29b      	uxth	r3, r3
 8017b60:	3b01      	subs	r3, #1
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017b66:	e052      	b.n	8017c0e <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8017b68:	6822      	ldr	r2, [r4, #0]
 8017b6a:	6813      	ldr	r3, [r2, #0]
 8017b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017b70:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8017b72:	6822      	ldr	r2, [r4, #0]
 8017b74:	6813      	ldr	r3, [r2, #0]
 8017b76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017b7a:	6013      	str	r3, [r2, #0]
 8017b7c:	e7d5      	b.n	8017b2a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017b7e:	6863      	ldr	r3, [r4, #4]
 8017b80:	b113      	cbz	r3, 8017b88 <HAL_SPI_Transmit+0xc6>
 8017b82:	f1b8 0f01 	cmp.w	r8, #1
 8017b86:	d115      	bne.n	8017bb4 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017b88:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017b8a:	6823      	ldr	r3, [r4, #0]
 8017b8c:	8812      	ldrh	r2, [r2, #0]
 8017b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017b90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b92:	3302      	adds	r3, #2
 8017b94:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017b96:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017b98:	b29b      	uxth	r3, r3
 8017b9a:	3b01      	subs	r3, #1
 8017b9c:	b29b      	uxth	r3, r3
 8017b9e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017ba0:	e008      	b.n	8017bb4 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017ba2:	f7fe fc8b 	bl	80164bc <HAL_GetTick>
 8017ba6:	1bc0      	subs	r0, r0, r7
 8017ba8:	42a8      	cmp	r0, r5
 8017baa:	d302      	bcc.n	8017bb2 <HAL_SPI_Transmit+0xf0>
 8017bac:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017bb0:	d115      	bne.n	8017bde <HAL_SPI_Transmit+0x11c>
 8017bb2:	b1a5      	cbz	r5, 8017bde <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8017bb4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d042      	beq.n	8017c42 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017bbc:	6823      	ldr	r3, [r4, #0]
 8017bbe:	689a      	ldr	r2, [r3, #8]
 8017bc0:	f012 0f02 	tst.w	r2, #2
 8017bc4:	d0ed      	beq.n	8017ba2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017bc6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017bc8:	8812      	ldrh	r2, [r2, #0]
 8017bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017bcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bce:	3302      	adds	r3, #2
 8017bd0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017bd2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	3b01      	subs	r3, #1
 8017bd8:	b29b      	uxth	r3, r3
 8017bda:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8017bdc:	e7ea      	b.n	8017bb4 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8017bde:	2301      	movs	r3, #1
 8017be0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017be4:	2300      	movs	r3, #0
 8017be6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017bea:	2603      	movs	r6, #3
 8017bec:	e045      	b.n	8017c7a <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017bee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017bf0:	7812      	ldrb	r2, [r2, #0]
 8017bf2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017bf4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bf6:	3301      	adds	r3, #1
 8017bf8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017bfa:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8017bfe:	fa1f fc8c 	uxth.w	ip, ip
 8017c02:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017c06:	fa1f fc8c 	uxth.w	ip, ip
 8017c0a:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8017c0e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	b1b3      	cbz	r3, 8017c42 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017c14:	6823      	ldr	r3, [r4, #0]
 8017c16:	689a      	ldr	r2, [r3, #8]
 8017c18:	f012 0f02 	tst.w	r2, #2
 8017c1c:	d1e7      	bne.n	8017bee <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017c1e:	f7fe fc4d 	bl	80164bc <HAL_GetTick>
 8017c22:	1bc0      	subs	r0, r0, r7
 8017c24:	42a8      	cmp	r0, r5
 8017c26:	d302      	bcc.n	8017c2e <HAL_SPI_Transmit+0x16c>
 8017c28:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017c2c:	d101      	bne.n	8017c32 <HAL_SPI_Transmit+0x170>
 8017c2e:	2d00      	cmp	r5, #0
 8017c30:	d1ed      	bne.n	8017c0e <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8017c32:	2301      	movs	r3, #1
 8017c34:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017c38:	2300      	movs	r3, #0
 8017c3a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017c3e:	2603      	movs	r6, #3
 8017c40:	e01b      	b.n	8017c7a <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017c42:	463a      	mov	r2, r7
 8017c44:	4629      	mov	r1, r5
 8017c46:	4620      	mov	r0, r4
 8017c48:	f7ff fe56 	bl	80178f8 <SPI_EndRxTxTransaction>
 8017c4c:	b108      	cbz	r0, 8017c52 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017c4e:	2320      	movs	r3, #32
 8017c50:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017c52:	68a3      	ldr	r3, [r4, #8]
 8017c54:	b933      	cbnz	r3, 8017c64 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017c56:	9301      	str	r3, [sp, #4]
 8017c58:	6823      	ldr	r3, [r4, #0]
 8017c5a:	68da      	ldr	r2, [r3, #12]
 8017c5c:	9201      	str	r2, [sp, #4]
 8017c5e:	689b      	ldr	r3, [r3, #8]
 8017c60:	9301      	str	r3, [sp, #4]
 8017c62:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017c64:	2301      	movs	r3, #1
 8017c66:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017c70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017c72:	b913      	cbnz	r3, 8017c7a <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8017c74:	2600      	movs	r6, #0
 8017c76:	e000      	b.n	8017c7a <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8017c78:	2602      	movs	r6, #2
}
 8017c7a:	4630      	mov	r0, r6
 8017c7c:	b003      	add	sp, #12
 8017c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017c82:	2602      	movs	r6, #2
 8017c84:	e7f9      	b.n	8017c7a <HAL_SPI_Transmit+0x1b8>

08017c86 <HAL_SPI_TransmitReceive>:
{
 8017c86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c8a:	b083      	sub	sp, #12
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	4688      	mov	r8, r1
 8017c90:	4691      	mov	r9, r2
 8017c92:	461f      	mov	r7, r3
 8017c94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8017c96:	f7fe fc11 	bl	80164bc <HAL_GetTick>
 8017c9a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8017c9c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017ca0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8017ca2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8017ca4:	2b01      	cmp	r3, #1
 8017ca6:	d00a      	beq.n	8017cbe <HAL_SPI_TransmitReceive+0x38>
 8017ca8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8017cac:	f040 8105 	bne.w	8017eba <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8017cb0:	68a2      	ldr	r2, [r4, #8]
 8017cb2:	2a00      	cmp	r2, #0
 8017cb4:	f040 8105 	bne.w	8017ec2 <HAL_SPI_TransmitReceive+0x23c>
 8017cb8:	2b04      	cmp	r3, #4
 8017cba:	f040 8104 	bne.w	8017ec6 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8017cbe:	f1b8 0f00 	cmp.w	r8, #0
 8017cc2:	f000 8102 	beq.w	8017eca <HAL_SPI_TransmitReceive+0x244>
 8017cc6:	f1b9 0f00 	cmp.w	r9, #0
 8017cca:	f000 8100 	beq.w	8017ece <HAL_SPI_TransmitReceive+0x248>
 8017cce:	2f00      	cmp	r7, #0
 8017cd0:	f000 80ff 	beq.w	8017ed2 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8017cd4:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	f000 80fc 	beq.w	8017ed6 <HAL_SPI_TransmitReceive+0x250>
 8017cde:	2301      	movs	r3, #1
 8017ce0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017ce4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017ce8:	b2db      	uxtb	r3, r3
 8017cea:	2b04      	cmp	r3, #4
 8017cec:	d002      	beq.n	8017cf4 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8017cee:	2305      	movs	r3, #5
 8017cf0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017cf8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8017cfc:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8017cfe:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8017d00:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017d04:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8017d06:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8017d08:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017d0a:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017d0c:	6823      	ldr	r3, [r4, #0]
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017d14:	d103      	bne.n	8017d1e <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8017d16:	681a      	ldr	r2, [r3, #0]
 8017d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017d1c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017d1e:	68e3      	ldr	r3, [r4, #12]
 8017d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017d24:	d011      	beq.n	8017d4a <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017d26:	6863      	ldr	r3, [r4, #4]
 8017d28:	b10b      	cbz	r3, 8017d2e <HAL_SPI_TransmitReceive+0xa8>
 8017d2a:	2f01      	cmp	r7, #1
 8017d2c:	d10b      	bne.n	8017d46 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017d2e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017d30:	6823      	ldr	r3, [r4, #0]
 8017d32:	7812      	ldrb	r2, [r2, #0]
 8017d34:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017d36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d38:	3301      	adds	r3, #1
 8017d3a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017d3c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017d3e:	b29b      	uxth	r3, r3
 8017d40:	3b01      	subs	r3, #1
 8017d42:	b29b      	uxth	r3, r3
 8017d44:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017d46:	2701      	movs	r7, #1
 8017d48:	e071      	b.n	8017e2e <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017d4a:	6863      	ldr	r3, [r4, #4]
 8017d4c:	b10b      	cbz	r3, 8017d52 <HAL_SPI_TransmitReceive+0xcc>
 8017d4e:	2f01      	cmp	r7, #1
 8017d50:	d10b      	bne.n	8017d6a <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017d52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017d54:	6823      	ldr	r3, [r4, #0]
 8017d56:	8812      	ldrh	r2, [r2, #0]
 8017d58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017d5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d5c:	3302      	adds	r3, #2
 8017d5e:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017d60:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	3b01      	subs	r3, #1
 8017d66:	b29b      	uxth	r3, r3
 8017d68:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017d6a:	2701      	movs	r7, #1
 8017d6c:	e01b      	b.n	8017da6 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	689a      	ldr	r2, [r3, #8]
 8017d72:	f012 0f01 	tst.w	r2, #1
 8017d76:	d00e      	beq.n	8017d96 <HAL_SPI_TransmitReceive+0x110>
 8017d78:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017d7a:	b292      	uxth	r2, r2
 8017d7c:	b15a      	cbz	r2, 8017d96 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017d7e:	68da      	ldr	r2, [r3, #12]
 8017d80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017d82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017d84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017d86:	3302      	adds	r3, #2
 8017d88:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017d8a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	3b01      	subs	r3, #1
 8017d90:	b29b      	uxth	r3, r3
 8017d92:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017d94:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017d96:	f7fe fb91 	bl	80164bc <HAL_GetTick>
 8017d9a:	1b80      	subs	r0, r0, r6
 8017d9c:	42a8      	cmp	r0, r5
 8017d9e:	d302      	bcc.n	8017da6 <HAL_SPI_TransmitReceive+0x120>
 8017da0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017da4:	d11e      	bne.n	8017de4 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017da6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017da8:	b29b      	uxth	r3, r3
 8017daa:	b91b      	cbnz	r3, 8017db4 <HAL_SPI_TransmitReceive+0x12e>
 8017dac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d062      	beq.n	8017e7a <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017db4:	6823      	ldr	r3, [r4, #0]
 8017db6:	689a      	ldr	r2, [r3, #8]
 8017db8:	f012 0f02 	tst.w	r2, #2
 8017dbc:	d0d7      	beq.n	8017d6e <HAL_SPI_TransmitReceive+0xe8>
 8017dbe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017dc0:	b292      	uxth	r2, r2
 8017dc2:	2a00      	cmp	r2, #0
 8017dc4:	d0d3      	beq.n	8017d6e <HAL_SPI_TransmitReceive+0xe8>
 8017dc6:	2f00      	cmp	r7, #0
 8017dc8:	d0d1      	beq.n	8017d6e <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017dca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017dcc:	8812      	ldrh	r2, [r2, #0]
 8017dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017dd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017dd2:	3302      	adds	r3, #2
 8017dd4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017dd6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	3b01      	subs	r3, #1
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017de0:	2700      	movs	r7, #0
 8017de2:	e7c4      	b.n	8017d6e <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8017de4:	2301      	movs	r3, #1
 8017de6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017dea:	2300      	movs	r3, #0
 8017dec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017df0:	2003      	movs	r0, #3
 8017df2:	e063      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017df4:	6823      	ldr	r3, [r4, #0]
 8017df6:	689a      	ldr	r2, [r3, #8]
 8017df8:	f012 0f01 	tst.w	r2, #1
 8017dfc:	d00e      	beq.n	8017e1c <HAL_SPI_TransmitReceive+0x196>
 8017dfe:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017e00:	b292      	uxth	r2, r2
 8017e02:	b15a      	cbz	r2, 8017e1c <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8017e04:	68da      	ldr	r2, [r3, #12]
 8017e06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017e08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017e0a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017e10:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	3b01      	subs	r3, #1
 8017e16:	b29b      	uxth	r3, r3
 8017e18:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017e1a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017e1c:	f7fe fb4e 	bl	80164bc <HAL_GetTick>
 8017e20:	1b83      	subs	r3, r0, r6
 8017e22:	42ab      	cmp	r3, r5
 8017e24:	d302      	bcc.n	8017e2c <HAL_SPI_TransmitReceive+0x1a6>
 8017e26:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017e2a:	d11e      	bne.n	8017e6a <HAL_SPI_TransmitReceive+0x1e4>
 8017e2c:	b1ed      	cbz	r5, 8017e6a <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017e2e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	b913      	cbnz	r3, 8017e3a <HAL_SPI_TransmitReceive+0x1b4>
 8017e34:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	b1fb      	cbz	r3, 8017e7a <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017e3a:	6823      	ldr	r3, [r4, #0]
 8017e3c:	689a      	ldr	r2, [r3, #8]
 8017e3e:	f012 0f02 	tst.w	r2, #2
 8017e42:	d0d7      	beq.n	8017df4 <HAL_SPI_TransmitReceive+0x16e>
 8017e44:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017e46:	b292      	uxth	r2, r2
 8017e48:	2a00      	cmp	r2, #0
 8017e4a:	d0d3      	beq.n	8017df4 <HAL_SPI_TransmitReceive+0x16e>
 8017e4c:	2f00      	cmp	r7, #0
 8017e4e:	d0d1      	beq.n	8017df4 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8017e50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017e52:	7812      	ldrb	r2, [r2, #0]
 8017e54:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8017e56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e58:	3301      	adds	r3, #1
 8017e5a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017e5c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	3b01      	subs	r3, #1
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017e66:	2700      	movs	r7, #0
 8017e68:	e7c4      	b.n	8017df4 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017e70:	2300      	movs	r3, #0
 8017e72:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017e76:	2003      	movs	r0, #3
 8017e78:	e020      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017e7a:	4632      	mov	r2, r6
 8017e7c:	4629      	mov	r1, r5
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f7ff fd3a 	bl	80178f8 <SPI_EndRxTxTransaction>
 8017e84:	b990      	cbnz	r0, 8017eac <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017e86:	68a3      	ldr	r3, [r4, #8]
 8017e88:	b933      	cbnz	r3, 8017e98 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017e8a:	9301      	str	r3, [sp, #4]
 8017e8c:	6823      	ldr	r3, [r4, #0]
 8017e8e:	68da      	ldr	r2, [r3, #12]
 8017e90:	9201      	str	r2, [sp, #4]
 8017e92:	689b      	ldr	r3, [r3, #8]
 8017e94:	9301      	str	r3, [sp, #4]
 8017e96:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017e98:	2301      	movs	r3, #1
 8017e9a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017ea4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017ea6:	b14b      	cbz	r3, 8017ebc <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017ea8:	2001      	movs	r0, #1
 8017eaa:	e007      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017eac:	2320      	movs	r3, #32
 8017eae:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8017eb6:	2001      	movs	r0, #1
 8017eb8:	e000      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8017eba:	2002      	movs	r0, #2
}
 8017ebc:	b003      	add	sp, #12
 8017ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8017ec2:	2002      	movs	r0, #2
 8017ec4:	e7fa      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
 8017ec6:	2002      	movs	r0, #2
 8017ec8:	e7f8      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017eca:	2001      	movs	r0, #1
 8017ecc:	e7f6      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
 8017ece:	2001      	movs	r0, #1
 8017ed0:	e7f4      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
 8017ed2:	2001      	movs	r0, #1
 8017ed4:	e7f2      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8017ed6:	2002      	movs	r0, #2
 8017ed8:	e7f0      	b.n	8017ebc <HAL_SPI_TransmitReceive+0x236>

08017eda <HAL_SPI_Receive>:
{
 8017eda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ede:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8017ee0:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8017ee4:	b2f6      	uxtb	r6, r6
 8017ee6:	2e01      	cmp	r6, #1
 8017ee8:	f040 80b4 	bne.w	8018054 <HAL_SPI_Receive+0x17a>
 8017eec:	4604      	mov	r4, r0
 8017eee:	4689      	mov	r9, r1
 8017ef0:	4690      	mov	r8, r2
 8017ef2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017ef4:	6843      	ldr	r3, [r0, #4]
 8017ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017efa:	d101      	bne.n	8017f00 <HAL_SPI_Receive+0x26>
 8017efc:	6883      	ldr	r3, [r0, #8]
 8017efe:	b393      	cbz	r3, 8017f66 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8017f00:	f7fe fadc 	bl	80164bc <HAL_GetTick>
 8017f04:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017f06:	f1b9 0f00 	cmp.w	r9, #0
 8017f0a:	f000 80a4 	beq.w	8018056 <HAL_SPI_Receive+0x17c>
 8017f0e:	f1b8 0f00 	cmp.w	r8, #0
 8017f12:	f000 80a0 	beq.w	8018056 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8017f16:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017f1a:	2b01      	cmp	r3, #1
 8017f1c:	f000 809f 	beq.w	801805e <HAL_SPI_Receive+0x184>
 8017f20:	2301      	movs	r3, #1
 8017f22:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8017f26:	2304      	movs	r3, #4
 8017f28:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017f30:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8017f34:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017f38:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017f3c:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8017f3e:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8017f40:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8017f42:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017f44:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017f46:	68a3      	ldr	r3, [r4, #8]
 8017f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017f4c:	d015      	beq.n	8017f7a <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017f4e:	6823      	ldr	r3, [r4, #0]
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017f56:	d103      	bne.n	8017f60 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8017f58:	681a      	ldr	r2, [r3, #0]
 8017f5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017f5e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8017f60:	68e3      	ldr	r3, [r4, #12]
 8017f62:	b1f3      	cbz	r3, 8017fa2 <HAL_SPI_Receive+0xc8>
 8017f64:	e043      	b.n	8017fee <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017f66:	2304      	movs	r3, #4
 8017f68:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017f6c:	9500      	str	r5, [sp, #0]
 8017f6e:	4613      	mov	r3, r2
 8017f70:	460a      	mov	r2, r1
 8017f72:	f7ff fe88 	bl	8017c86 <HAL_SPI_TransmitReceive>
 8017f76:	4606      	mov	r6, r0
 8017f78:	e06d      	b.n	8018056 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8017f7a:	6822      	ldr	r2, [r4, #0]
 8017f7c:	6813      	ldr	r3, [r2, #0]
 8017f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017f82:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8017f84:	6822      	ldr	r2, [r4, #0]
 8017f86:	6813      	ldr	r3, [r2, #0]
 8017f88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017f8c:	6013      	str	r3, [r2, #0]
 8017f8e:	e7de      	b.n	8017f4e <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017f90:	f7fe fa94 	bl	80164bc <HAL_GetTick>
 8017f94:	1bc0      	subs	r0, r0, r7
 8017f96:	42a8      	cmp	r0, r5
 8017f98:	d302      	bcc.n	8017fa0 <HAL_SPI_Receive+0xc6>
 8017f9a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017f9e:	d115      	bne.n	8017fcc <HAL_SPI_Receive+0xf2>
 8017fa0:	b1a5      	cbz	r5, 8017fcc <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8017fa2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d042      	beq.n	8018030 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017faa:	6823      	ldr	r3, [r4, #0]
 8017fac:	689a      	ldr	r2, [r3, #8]
 8017fae:	f012 0f01 	tst.w	r2, #1
 8017fb2:	d0ed      	beq.n	8017f90 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017fb4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017fb6:	7b1b      	ldrb	r3, [r3, #12]
 8017fb8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8017fba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017fc0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017fc2:	b29b      	uxth	r3, r3
 8017fc4:	3b01      	subs	r3, #1
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8017fca:	e7ea      	b.n	8017fa2 <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8017fcc:	2301      	movs	r3, #1
 8017fce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017fd8:	2603      	movs	r6, #3
 8017fda:	e03c      	b.n	8018056 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017fdc:	f7fe fa6e 	bl	80164bc <HAL_GetTick>
 8017fe0:	1bc0      	subs	r0, r0, r7
 8017fe2:	42a8      	cmp	r0, r5
 8017fe4:	d302      	bcc.n	8017fec <HAL_SPI_Receive+0x112>
 8017fe6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017fea:	d119      	bne.n	8018020 <HAL_SPI_Receive+0x146>
 8017fec:	b1c5      	cbz	r5, 8018020 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8017fee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017ff0:	b29b      	uxth	r3, r3
 8017ff2:	b1eb      	cbz	r3, 8018030 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017ff4:	6823      	ldr	r3, [r4, #0]
 8017ff6:	689a      	ldr	r2, [r3, #8]
 8017ff8:	f012 0f01 	tst.w	r2, #1
 8017ffc:	d0ee      	beq.n	8017fdc <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017ffe:	68da      	ldr	r2, [r3, #12]
 8018000:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018004:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018006:	3302      	adds	r3, #2
 8018008:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 801800a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 801800e:	fa1f fc8c 	uxth.w	ip, ip
 8018012:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8018016:	fa1f fc8c 	uxth.w	ip, ip
 801801a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 801801e:	e7e6      	b.n	8017fee <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8018020:	2301      	movs	r3, #1
 8018022:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8018026:	2300      	movs	r3, #0
 8018028:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801802c:	2603      	movs	r6, #3
 801802e:	e012      	b.n	8018056 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018030:	463a      	mov	r2, r7
 8018032:	4629      	mov	r1, r5
 8018034:	4620      	mov	r0, r4
 8018036:	f7ff fc9f 	bl	8017978 <SPI_EndRxTransaction>
 801803a:	b108      	cbz	r0, 8018040 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801803c:	2320      	movs	r3, #32
 801803e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8018040:	2301      	movs	r3, #1
 8018042:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8018046:	2300      	movs	r3, #0
 8018048:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801804c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801804e:	b913      	cbnz	r3, 8018056 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8018050:	2600      	movs	r6, #0
 8018052:	e000      	b.n	8018056 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8018054:	2602      	movs	r6, #2
}
 8018056:	4630      	mov	r0, r6
 8018058:	b003      	add	sp, #12
 801805a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801805e:	2602      	movs	r6, #2
 8018060:	e7f9      	b.n	8018056 <HAL_SPI_Receive+0x17c>

08018062 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018062:	4770      	bx	lr

08018064 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018064:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8018068:	b2db      	uxtb	r3, r3
 801806a:	2b01      	cmp	r3, #1
 801806c:	d12f      	bne.n	80180ce <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801806e:	2302      	movs	r3, #2
 8018070:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018074:	6802      	ldr	r2, [r0, #0]
 8018076:	68d3      	ldr	r3, [r2, #12]
 8018078:	f043 0301 	orr.w	r3, r3, #1
 801807c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801807e:	6803      	ldr	r3, [r0, #0]
 8018080:	4a15      	ldr	r2, [pc, #84]	@ (80180d8 <HAL_TIM_Base_Start_IT+0x74>)
 8018082:	4293      	cmp	r3, r2
 8018084:	d018      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x54>
 8018086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801808a:	d015      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x54>
 801808c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018090:	4293      	cmp	r3, r2
 8018092:	d011      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x54>
 8018094:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018098:	4293      	cmp	r3, r2
 801809a:	d00d      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x54>
 801809c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80180a0:	4293      	cmp	r3, r2
 80180a2:	d009      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x54>
 80180a4:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80180a8:	4293      	cmp	r3, r2
 80180aa:	d005      	beq.n	80180b8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	f042 0201 	orr.w	r2, r2, #1
 80180b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80180b4:	2000      	movs	r0, #0
 80180b6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80180b8:	689a      	ldr	r2, [r3, #8]
 80180ba:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80180be:	2a06      	cmp	r2, #6
 80180c0:	d007      	beq.n	80180d2 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	f042 0201 	orr.w	r2, r2, #1
 80180c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80180ca:	2000      	movs	r0, #0
 80180cc:	4770      	bx	lr
    return HAL_ERROR;
 80180ce:	2001      	movs	r0, #1
 80180d0:	4770      	bx	lr
  return HAL_OK;
 80180d2:	2000      	movs	r0, #0
}
 80180d4:	4770      	bx	lr
 80180d6:	bf00      	nop
 80180d8:	40010000 	.word	0x40010000

080180dc <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80180dc:	4770      	bx	lr

080180de <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80180de:	4770      	bx	lr

080180e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80180e0:	4770      	bx	lr

080180e2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80180e2:	4770      	bx	lr

080180e4 <HAL_TIM_IRQHandler>:
{
 80180e4:	b570      	push	{r4, r5, r6, lr}
 80180e6:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80180e8:	6803      	ldr	r3, [r0, #0]
 80180ea:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80180ec:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80180ee:	f015 0f02 	tst.w	r5, #2
 80180f2:	d010      	beq.n	8018116 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80180f4:	f016 0f02 	tst.w	r6, #2
 80180f8:	d00d      	beq.n	8018116 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80180fa:	f06f 0202 	mvn.w	r2, #2
 80180fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018100:	2301      	movs	r3, #1
 8018102:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018104:	6803      	ldr	r3, [r0, #0]
 8018106:	699b      	ldr	r3, [r3, #24]
 8018108:	f013 0f03 	tst.w	r3, #3
 801810c:	d05e      	beq.n	80181cc <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 801810e:	f7ff ffe6 	bl	80180de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018112:	2300      	movs	r3, #0
 8018114:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8018116:	f015 0f04 	tst.w	r5, #4
 801811a:	d012      	beq.n	8018142 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801811c:	f016 0f04 	tst.w	r6, #4
 8018120:	d00f      	beq.n	8018142 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8018122:	6823      	ldr	r3, [r4, #0]
 8018124:	f06f 0204 	mvn.w	r2, #4
 8018128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801812a:	2302      	movs	r3, #2
 801812c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801812e:	6823      	ldr	r3, [r4, #0]
 8018130:	699b      	ldr	r3, [r3, #24]
 8018132:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8018136:	d04f      	beq.n	80181d8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8018138:	4620      	mov	r0, r4
 801813a:	f7ff ffd0 	bl	80180de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801813e:	2300      	movs	r3, #0
 8018140:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8018142:	f015 0f08 	tst.w	r5, #8
 8018146:	d012      	beq.n	801816e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8018148:	f016 0f08 	tst.w	r6, #8
 801814c:	d00f      	beq.n	801816e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	f06f 0208 	mvn.w	r2, #8
 8018154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018156:	2304      	movs	r3, #4
 8018158:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801815a:	6823      	ldr	r3, [r4, #0]
 801815c:	69db      	ldr	r3, [r3, #28]
 801815e:	f013 0f03 	tst.w	r3, #3
 8018162:	d040      	beq.n	80181e6 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8018164:	4620      	mov	r0, r4
 8018166:	f7ff ffba 	bl	80180de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801816a:	2300      	movs	r3, #0
 801816c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801816e:	f015 0f10 	tst.w	r5, #16
 8018172:	d012      	beq.n	801819a <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8018174:	f016 0f10 	tst.w	r6, #16
 8018178:	d00f      	beq.n	801819a <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801817a:	6823      	ldr	r3, [r4, #0]
 801817c:	f06f 0210 	mvn.w	r2, #16
 8018180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018182:	2308      	movs	r3, #8
 8018184:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018186:	6823      	ldr	r3, [r4, #0]
 8018188:	69db      	ldr	r3, [r3, #28]
 801818a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801818e:	d031      	beq.n	80181f4 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8018190:	4620      	mov	r0, r4
 8018192:	f7ff ffa4 	bl	80180de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018196:	2300      	movs	r3, #0
 8018198:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801819a:	f015 0f01 	tst.w	r5, #1
 801819e:	d002      	beq.n	80181a6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80181a0:	f016 0f01 	tst.w	r6, #1
 80181a4:	d12d      	bne.n	8018202 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80181a6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80181aa:	d002      	beq.n	80181b2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80181ac:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80181b0:	d12f      	bne.n	8018212 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80181b2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80181b6:	d002      	beq.n	80181be <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80181b8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80181bc:	d131      	bne.n	8018222 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80181be:	f015 0f20 	tst.w	r5, #32
 80181c2:	d002      	beq.n	80181ca <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80181c4:	f016 0f20 	tst.w	r6, #32
 80181c8:	d133      	bne.n	8018232 <HAL_TIM_IRQHandler+0x14e>
}
 80181ca:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80181cc:	f7ff ff86 	bl	80180dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80181d0:	4620      	mov	r0, r4
 80181d2:	f7ff ff85 	bl	80180e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80181d6:	e79c      	b.n	8018112 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80181d8:	4620      	mov	r0, r4
 80181da:	f7ff ff7f 	bl	80180dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80181de:	4620      	mov	r0, r4
 80181e0:	f7ff ff7e 	bl	80180e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80181e4:	e7ab      	b.n	801813e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80181e6:	4620      	mov	r0, r4
 80181e8:	f7ff ff78 	bl	80180dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80181ec:	4620      	mov	r0, r4
 80181ee:	f7ff ff77 	bl	80180e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80181f2:	e7ba      	b.n	801816a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80181f4:	4620      	mov	r0, r4
 80181f6:	f7ff ff71 	bl	80180dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80181fa:	4620      	mov	r0, r4
 80181fc:	f7ff ff70 	bl	80180e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8018200:	e7c9      	b.n	8018196 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8018202:	6823      	ldr	r3, [r4, #0]
 8018204:	f06f 0201 	mvn.w	r2, #1
 8018208:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801820a:	4620      	mov	r0, r4
 801820c:	f7fa f80c 	bl	8012228 <HAL_TIM_PeriodElapsedCallback>
 8018210:	e7c9      	b.n	80181a6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8018218:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801821a:	4620      	mov	r0, r4
 801821c:	f000 f895 	bl	801834a <HAL_TIMEx_BreakCallback>
 8018220:	e7c7      	b.n	80181b2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8018222:	6823      	ldr	r3, [r4, #0]
 8018224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8018228:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801822a:	4620      	mov	r0, r4
 801822c:	f7ff ff59 	bl	80180e2 <HAL_TIM_TriggerCallback>
 8018230:	e7c5      	b.n	80181be <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8018232:	6823      	ldr	r3, [r4, #0]
 8018234:	f06f 0220 	mvn.w	r2, #32
 8018238:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 801823a:	4620      	mov	r0, r4
 801823c:	f000 f884 	bl	8018348 <HAL_TIMEx_CommutCallback>
}
 8018240:	e7c3      	b.n	80181ca <HAL_TIM_IRQHandler+0xe6>
	...

08018244 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018244:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018246:	4a29      	ldr	r2, [pc, #164]	@ (80182ec <TIM_Base_SetConfig+0xa8>)
 8018248:	4290      	cmp	r0, r2
 801824a:	d00e      	beq.n	801826a <TIM_Base_SetConfig+0x26>
 801824c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018250:	d00b      	beq.n	801826a <TIM_Base_SetConfig+0x26>
 8018252:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018256:	4290      	cmp	r0, r2
 8018258:	d007      	beq.n	801826a <TIM_Base_SetConfig+0x26>
 801825a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801825e:	4290      	cmp	r0, r2
 8018260:	d003      	beq.n	801826a <TIM_Base_SetConfig+0x26>
 8018262:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018266:	4290      	cmp	r0, r2
 8018268:	d103      	bne.n	8018272 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801826a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 801826e:	684a      	ldr	r2, [r1, #4]
 8018270:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018272:	4a1e      	ldr	r2, [pc, #120]	@ (80182ec <TIM_Base_SetConfig+0xa8>)
 8018274:	4290      	cmp	r0, r2
 8018276:	d01a      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 8018278:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801827c:	d017      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 801827e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8018282:	4290      	cmp	r0, r2
 8018284:	d013      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 8018286:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801828a:	4290      	cmp	r0, r2
 801828c:	d00f      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 801828e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018292:	4290      	cmp	r0, r2
 8018294:	d00b      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 8018296:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 801829a:	4290      	cmp	r0, r2
 801829c:	d007      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 801829e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80182a2:	4290      	cmp	r0, r2
 80182a4:	d003      	beq.n	80182ae <TIM_Base_SetConfig+0x6a>
 80182a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80182aa:	4290      	cmp	r0, r2
 80182ac:	d103      	bne.n	80182b6 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80182ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80182b2:	68ca      	ldr	r2, [r1, #12]
 80182b4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80182b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80182ba:	694a      	ldr	r2, [r1, #20]
 80182bc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80182be:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80182c0:	688b      	ldr	r3, [r1, #8]
 80182c2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80182c4:	680b      	ldr	r3, [r1, #0]
 80182c6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80182c8:	4b08      	ldr	r3, [pc, #32]	@ (80182ec <TIM_Base_SetConfig+0xa8>)
 80182ca:	4298      	cmp	r0, r3
 80182cc:	d00a      	beq.n	80182e4 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80182ce:	2301      	movs	r3, #1
 80182d0:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80182d2:	6903      	ldr	r3, [r0, #16]
 80182d4:	f013 0f01 	tst.w	r3, #1
 80182d8:	d003      	beq.n	80182e2 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80182da:	6903      	ldr	r3, [r0, #16]
 80182dc:	f023 0301 	bic.w	r3, r3, #1
 80182e0:	6103      	str	r3, [r0, #16]
  }
}
 80182e2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80182e4:	690b      	ldr	r3, [r1, #16]
 80182e6:	6303      	str	r3, [r0, #48]	@ 0x30
 80182e8:	e7f1      	b.n	80182ce <TIM_Base_SetConfig+0x8a>
 80182ea:	bf00      	nop
 80182ec:	40010000 	.word	0x40010000

080182f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80182f0:	b340      	cbz	r0, 8018344 <HAL_TIM_Base_Init+0x54>
{
 80182f2:	b510      	push	{r4, lr}
 80182f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80182f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80182fa:	b1f3      	cbz	r3, 801833a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80182fc:	2302      	movs	r3, #2
 80182fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018302:	4621      	mov	r1, r4
 8018304:	f851 0b04 	ldr.w	r0, [r1], #4
 8018308:	f7ff ff9c 	bl	8018244 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801830c:	2301      	movs	r3, #1
 801830e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018312:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8018316:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 801831a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801831e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018322:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801832a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801832e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8018332:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8018336:	2000      	movs	r0, #0
}
 8018338:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 801833a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 801833e:	f7ff fe90 	bl	8018062 <HAL_TIM_Base_MspInit>
 8018342:	e7db      	b.n	80182fc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8018344:	2001      	movs	r0, #1
}
 8018346:	4770      	bx	lr

08018348 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018348:	4770      	bx	lr

0801834a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801834a:	4770      	bx	lr

0801834c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 801834c:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 801834e:	b930      	cbnz	r0, 801835e <SSD1306_Fill+0x12>
 8018350:	2100      	movs	r1, #0
 8018352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018356:	4803      	ldr	r0, [pc, #12]	@ (8018364 <SSD1306_Fill+0x18>)
 8018358:	f014 fc8a 	bl	802cc70 <memset>
}
 801835c:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 801835e:	21ff      	movs	r1, #255	@ 0xff
 8018360:	e7f7      	b.n	8018352 <SSD1306_Fill+0x6>
 8018362:	bf00      	nop
 8018364:	20002970 	.word	0x20002970

08018368 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8018368:	287f      	cmp	r0, #127	@ 0x7f
 801836a:	d825      	bhi.n	80183b8 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 801836c:	293f      	cmp	r1, #63	@ 0x3f
 801836e:	d823      	bhi.n	80183b8 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8018370:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8018372:	4b12      	ldr	r3, [pc, #72]	@ (80183bc <SSD1306_DrawPixel+0x54>)
 8018374:	791b      	ldrb	r3, [r3, #4]
 8018376:	b113      	cbz	r3, 801837e <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8018378:	fab2 f282 	clz	r2, r2
 801837c:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 801837e:	2a01      	cmp	r2, #1
 8018380:	d00f      	beq.n	80183a2 <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8018382:	08cb      	lsrs	r3, r1, #3
 8018384:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8018388:	4c0d      	ldr	r4, [pc, #52]	@ (80183c0 <SSD1306_DrawPixel+0x58>)
 801838a:	5c22      	ldrb	r2, [r4, r0]
 801838c:	f001 0107 	and.w	r1, r1, #7
 8018390:	2301      	movs	r3, #1
 8018392:	408b      	lsls	r3, r1
 8018394:	43db      	mvns	r3, r3
 8018396:	b25b      	sxtb	r3, r3
 8018398:	4013      	ands	r3, r2
 801839a:	5423      	strb	r3, [r4, r0]
	}
}
 801839c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183a0:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80183a2:	08cb      	lsrs	r3, r1, #3
 80183a4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80183a8:	4c05      	ldr	r4, [pc, #20]	@ (80183c0 <SSD1306_DrawPixel+0x58>)
 80183aa:	5c23      	ldrb	r3, [r4, r0]
 80183ac:	f001 0107 	and.w	r1, r1, #7
 80183b0:	408a      	lsls	r2, r1
 80183b2:	4313      	orrs	r3, r2
 80183b4:	5423      	strb	r3, [r4, r0]
 80183b6:	e7f1      	b.n	801839c <SSD1306_DrawPixel+0x34>
 80183b8:	4770      	bx	lr
 80183ba:	bf00      	nop
 80183bc:	20002968 	.word	0x20002968
 80183c0:	20002970 	.word	0x20002970

080183c4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80183c4:	4b01      	ldr	r3, [pc, #4]	@ (80183cc <SSD1306_GotoXY+0x8>)
 80183c6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80183c8:	8059      	strh	r1, [r3, #2]
}
 80183ca:	4770      	bx	lr
 80183cc:	20002968 	.word	0x20002968

080183d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80183d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183d4:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80183d6:	4b24      	ldr	r3, [pc, #144]	@ (8018468 <SSD1306_Putc+0x98>)
 80183d8:	881b      	ldrh	r3, [r3, #0]
 80183da:	780a      	ldrb	r2, [r1, #0]
 80183dc:	4413      	add	r3, r2
	if (
 80183de:	2b7f      	cmp	r3, #127	@ 0x7f
 80183e0:	dc3e      	bgt.n	8018460 <SSD1306_Putc+0x90>
 80183e2:	4681      	mov	r9, r0
 80183e4:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80183e6:	4b20      	ldr	r3, [pc, #128]	@ (8018468 <SSD1306_Putc+0x98>)
 80183e8:	885b      	ldrh	r3, [r3, #2]
 80183ea:	784a      	ldrb	r2, [r1, #1]
 80183ec:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80183ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80183f0:	dc38      	bgt.n	8018464 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80183f2:	2600      	movs	r6, #0
 80183f4:	e020      	b.n	8018438 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80183f6:	4b1c      	ldr	r3, [pc, #112]	@ (8018468 <SSD1306_Putc+0x98>)
 80183f8:	8818      	ldrh	r0, [r3, #0]
 80183fa:	8859      	ldrh	r1, [r3, #2]
 80183fc:	4431      	add	r1, r6
 80183fe:	4420      	add	r0, r4
 8018400:	fab8 f288 	clz	r2, r8
 8018404:	0952      	lsrs	r2, r2, #5
 8018406:	b289      	uxth	r1, r1
 8018408:	b280      	uxth	r0, r0
 801840a:	f7ff ffad 	bl	8018368 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 801840e:	3401      	adds	r4, #1
 8018410:	782b      	ldrb	r3, [r5, #0]
 8018412:	42a3      	cmp	r3, r4
 8018414:	d90f      	bls.n	8018436 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8018416:	fa07 f304 	lsl.w	r3, r7, r4
 801841a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 801841e:	d0ea      	beq.n	80183f6 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8018420:	4b11      	ldr	r3, [pc, #68]	@ (8018468 <SSD1306_Putc+0x98>)
 8018422:	8818      	ldrh	r0, [r3, #0]
 8018424:	8859      	ldrh	r1, [r3, #2]
 8018426:	4431      	add	r1, r6
 8018428:	4420      	add	r0, r4
 801842a:	4642      	mov	r2, r8
 801842c:	b289      	uxth	r1, r1
 801842e:	b280      	uxth	r0, r0
 8018430:	f7ff ff9a 	bl	8018368 <SSD1306_DrawPixel>
 8018434:	e7eb      	b.n	801840e <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8018436:	3601      	adds	r6, #1
 8018438:	786a      	ldrb	r2, [r5, #1]
 801843a:	42b2      	cmp	r2, r6
 801843c:	d908      	bls.n	8018450 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 801843e:	6869      	ldr	r1, [r5, #4]
 8018440:	f1a9 0320 	sub.w	r3, r9, #32
 8018444:	fb02 6303 	mla	r3, r2, r3, r6
 8018448:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 801844c:	2400      	movs	r4, #0
 801844e:	e7df      	b.n	8018410 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8018450:	4a05      	ldr	r2, [pc, #20]	@ (8018468 <SSD1306_Putc+0x98>)
 8018452:	8813      	ldrh	r3, [r2, #0]
 8018454:	7829      	ldrb	r1, [r5, #0]
 8018456:	440b      	add	r3, r1
 8018458:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 801845a:	4648      	mov	r0, r9
}
 801845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8018460:	2000      	movs	r0, #0
 8018462:	e7fb      	b.n	801845c <SSD1306_Putc+0x8c>
 8018464:	2000      	movs	r0, #0
 8018466:	e7f9      	b.n	801845c <SSD1306_Putc+0x8c>
 8018468:	20002968 	.word	0x20002968

0801846c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 801846c:	b570      	push	{r4, r5, r6, lr}
 801846e:	4604      	mov	r4, r0
 8018470:	460e      	mov	r6, r1
 8018472:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8018474:	e000      	b.n	8018478 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8018476:	3401      	adds	r4, #1
	while (*str) {
 8018478:	7820      	ldrb	r0, [r4, #0]
 801847a:	b138      	cbz	r0, 801848c <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 801847c:	462a      	mov	r2, r5
 801847e:	4631      	mov	r1, r6
 8018480:	f7ff ffa6 	bl	80183d0 <SSD1306_Putc>
 8018484:	4603      	mov	r3, r0
 8018486:	7820      	ldrb	r0, [r4, #0]
 8018488:	4283      	cmp	r3, r0
 801848a:	d0f4      	beq.n	8018476 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 801848c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018490 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8018490:	b500      	push	{lr}
 8018492:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 8018494:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8018498:	f04f 0c00 	mov.w	ip, #0
 801849c:	e009      	b.n	80184b2 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 801849e:	f10c 0e01 	add.w	lr, ip, #1
 80184a2:	f812 100c 	ldrb.w	r1, [r2, ip]
 80184a6:	f10d 0c08 	add.w	ip, sp, #8
 80184aa:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80184ae:	fa5f fc8e 	uxtb.w	ip, lr
 80184b2:	459c      	cmp	ip, r3
 80184b4:	d3f3      	bcc.n	801849e <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80184b6:	3301      	adds	r3, #1
 80184b8:	220a      	movs	r2, #10
 80184ba:	9200      	str	r2, [sp, #0]
 80184bc:	b29b      	uxth	r3, r3
 80184be:	aa02      	add	r2, sp, #8
 80184c0:	4601      	mov	r1, r0
 80184c2:	4803      	ldr	r0, [pc, #12]	@ (80184d0 <ssd1306_I2C_WriteMulti+0x40>)
 80184c4:	f7fe fc9e 	bl	8016e04 <HAL_I2C_Master_Transmit>
}
 80184c8:	b043      	add	sp, #268	@ 0x10c
 80184ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80184ce:	bf00      	nop
 80184d0:	200008d4 	.word	0x200008d4

080184d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80184d4:	b500      	push	{lr}
 80184d6:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80184d8:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80184dc:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80184e0:	230a      	movs	r3, #10
 80184e2:	9300      	str	r3, [sp, #0]
 80184e4:	2302      	movs	r3, #2
 80184e6:	aa03      	add	r2, sp, #12
 80184e8:	4601      	mov	r1, r0
 80184ea:	4803      	ldr	r0, [pc, #12]	@ (80184f8 <ssd1306_I2C_Write+0x24>)
 80184ec:	f7fe fc8a 	bl	8016e04 <HAL_I2C_Master_Transmit>
}
 80184f0:	b005      	add	sp, #20
 80184f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80184f6:	bf00      	nop
 80184f8:	200008d4 	.word	0x200008d4

080184fc <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80184fc:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80184fe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8018502:	2201      	movs	r2, #1
 8018504:	2178      	movs	r1, #120	@ 0x78
 8018506:	4850      	ldr	r0, [pc, #320]	@ (8018648 <SSD1306_Init+0x14c>)
 8018508:	f7fe fd38 	bl	8016f7c <HAL_I2C_IsDeviceReady>
 801850c:	2800      	cmp	r0, #0
 801850e:	f040 8099 	bne.w	8018644 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 8018512:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8018516:	e000      	b.n	801851a <SSD1306_Init+0x1e>
		p--;
 8018518:	3b01      	subs	r3, #1
	while(p>0)
 801851a:	2b00      	cmp	r3, #0
 801851c:	d1fc      	bne.n	8018518 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 801851e:	22ae      	movs	r2, #174	@ 0xae
 8018520:	2100      	movs	r1, #0
 8018522:	2078      	movs	r0, #120	@ 0x78
 8018524:	f7ff ffd6 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8018528:	2220      	movs	r2, #32
 801852a:	2100      	movs	r1, #0
 801852c:	2078      	movs	r0, #120	@ 0x78
 801852e:	f7ff ffd1 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8018532:	2210      	movs	r2, #16
 8018534:	2100      	movs	r1, #0
 8018536:	2078      	movs	r0, #120	@ 0x78
 8018538:	f7ff ffcc 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 801853c:	22b0      	movs	r2, #176	@ 0xb0
 801853e:	2100      	movs	r1, #0
 8018540:	2078      	movs	r0, #120	@ 0x78
 8018542:	f7ff ffc7 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8018546:	22c8      	movs	r2, #200	@ 0xc8
 8018548:	2100      	movs	r1, #0
 801854a:	2078      	movs	r0, #120	@ 0x78
 801854c:	f7ff ffc2 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8018550:	2200      	movs	r2, #0
 8018552:	4611      	mov	r1, r2
 8018554:	2078      	movs	r0, #120	@ 0x78
 8018556:	f7ff ffbd 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 801855a:	2210      	movs	r2, #16
 801855c:	2100      	movs	r1, #0
 801855e:	2078      	movs	r0, #120	@ 0x78
 8018560:	f7ff ffb8 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8018564:	2240      	movs	r2, #64	@ 0x40
 8018566:	2100      	movs	r1, #0
 8018568:	2078      	movs	r0, #120	@ 0x78
 801856a:	f7ff ffb3 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 801856e:	2281      	movs	r2, #129	@ 0x81
 8018570:	2100      	movs	r1, #0
 8018572:	2078      	movs	r0, #120	@ 0x78
 8018574:	f7ff ffae 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8018578:	22ff      	movs	r2, #255	@ 0xff
 801857a:	2100      	movs	r1, #0
 801857c:	2078      	movs	r0, #120	@ 0x78
 801857e:	f7ff ffa9 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8018582:	22a1      	movs	r2, #161	@ 0xa1
 8018584:	2100      	movs	r1, #0
 8018586:	2078      	movs	r0, #120	@ 0x78
 8018588:	f7ff ffa4 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 801858c:	22a6      	movs	r2, #166	@ 0xa6
 801858e:	2100      	movs	r1, #0
 8018590:	2078      	movs	r0, #120	@ 0x78
 8018592:	f7ff ff9f 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8018596:	22a8      	movs	r2, #168	@ 0xa8
 8018598:	2100      	movs	r1, #0
 801859a:	2078      	movs	r0, #120	@ 0x78
 801859c:	f7ff ff9a 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80185a0:	223f      	movs	r2, #63	@ 0x3f
 80185a2:	2100      	movs	r1, #0
 80185a4:	2078      	movs	r0, #120	@ 0x78
 80185a6:	f7ff ff95 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80185aa:	22a4      	movs	r2, #164	@ 0xa4
 80185ac:	2100      	movs	r1, #0
 80185ae:	2078      	movs	r0, #120	@ 0x78
 80185b0:	f7ff ff90 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80185b4:	22d3      	movs	r2, #211	@ 0xd3
 80185b6:	2100      	movs	r1, #0
 80185b8:	2078      	movs	r0, #120	@ 0x78
 80185ba:	f7ff ff8b 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80185be:	2200      	movs	r2, #0
 80185c0:	4611      	mov	r1, r2
 80185c2:	2078      	movs	r0, #120	@ 0x78
 80185c4:	f7ff ff86 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80185c8:	22d5      	movs	r2, #213	@ 0xd5
 80185ca:	2100      	movs	r1, #0
 80185cc:	2078      	movs	r0, #120	@ 0x78
 80185ce:	f7ff ff81 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80185d2:	22f0      	movs	r2, #240	@ 0xf0
 80185d4:	2100      	movs	r1, #0
 80185d6:	2078      	movs	r0, #120	@ 0x78
 80185d8:	f7ff ff7c 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80185dc:	22d9      	movs	r2, #217	@ 0xd9
 80185de:	2100      	movs	r1, #0
 80185e0:	2078      	movs	r0, #120	@ 0x78
 80185e2:	f7ff ff77 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80185e6:	2222      	movs	r2, #34	@ 0x22
 80185e8:	2100      	movs	r1, #0
 80185ea:	2078      	movs	r0, #120	@ 0x78
 80185ec:	f7ff ff72 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80185f0:	22da      	movs	r2, #218	@ 0xda
 80185f2:	2100      	movs	r1, #0
 80185f4:	2078      	movs	r0, #120	@ 0x78
 80185f6:	f7ff ff6d 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80185fa:	2212      	movs	r2, #18
 80185fc:	2100      	movs	r1, #0
 80185fe:	2078      	movs	r0, #120	@ 0x78
 8018600:	f7ff ff68 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8018604:	22db      	movs	r2, #219	@ 0xdb
 8018606:	2100      	movs	r1, #0
 8018608:	2078      	movs	r0, #120	@ 0x78
 801860a:	f7ff ff63 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 801860e:	2220      	movs	r2, #32
 8018610:	2100      	movs	r1, #0
 8018612:	2078      	movs	r0, #120	@ 0x78
 8018614:	f7ff ff5e 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8018618:	228d      	movs	r2, #141	@ 0x8d
 801861a:	2100      	movs	r1, #0
 801861c:	2078      	movs	r0, #120	@ 0x78
 801861e:	f7ff ff59 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8018622:	2214      	movs	r2, #20
 8018624:	2100      	movs	r1, #0
 8018626:	2078      	movs	r0, #120	@ 0x78
 8018628:	f7ff ff54 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 801862c:	22af      	movs	r2, #175	@ 0xaf
 801862e:	2100      	movs	r1, #0
 8018630:	2078      	movs	r0, #120	@ 0x78
 8018632:	f7ff ff4f 	bl	80184d4 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8018636:	4b05      	ldr	r3, [pc, #20]	@ (801864c <SSD1306_Init+0x150>)
 8018638:	2200      	movs	r2, #0
 801863a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 801863c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 801863e:	2001      	movs	r0, #1
 8018640:	7158      	strb	r0, [r3, #5]
}
 8018642:	bd08      	pop	{r3, pc}
		return 0;
 8018644:	2000      	movs	r0, #0
 8018646:	e7fc      	b.n	8018642 <SSD1306_Init+0x146>
 8018648:	200008d4 	.word	0x200008d4
 801864c:	20002968 	.word	0x20002968

08018650 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8018650:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8018652:	2400      	movs	r4, #0
 8018654:	e01a      	b.n	801868c <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8018656:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 801865a:	b2d2      	uxtb	r2, r2
 801865c:	2100      	movs	r1, #0
 801865e:	2078      	movs	r0, #120	@ 0x78
 8018660:	f7ff ff38 	bl	80184d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8018664:	2200      	movs	r2, #0
 8018666:	4611      	mov	r1, r2
 8018668:	2078      	movs	r0, #120	@ 0x78
 801866a:	f7ff ff33 	bl	80184d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 801866e:	2210      	movs	r2, #16
 8018670:	2100      	movs	r1, #0
 8018672:	2078      	movs	r0, #120	@ 0x78
 8018674:	f7ff ff2e 	bl	80184d4 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8018678:	2380      	movs	r3, #128	@ 0x80
 801867a:	4a06      	ldr	r2, [pc, #24]	@ (8018694 <SSD1306_UpdateScreen+0x44>)
 801867c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8018680:	2140      	movs	r1, #64	@ 0x40
 8018682:	2078      	movs	r0, #120	@ 0x78
 8018684:	f7ff ff04 	bl	8018490 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8018688:	3401      	adds	r4, #1
 801868a:	b2e4      	uxtb	r4, r4
 801868c:	2c07      	cmp	r4, #7
 801868e:	d9e2      	bls.n	8018656 <SSD1306_UpdateScreen+0x6>
}
 8018690:	bd10      	pop	{r4, pc}
 8018692:	bf00      	nop
 8018694:	20002970 	.word	0x20002970

08018698 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018698:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 801869a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801869e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80186a0:	f001 fd4a 	bl	801a138 <xTaskGetSchedulerState>
 80186a4:	2801      	cmp	r0, #1
 80186a6:	d100      	bne.n	80186aa <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80186a8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80186aa:	f002 f94b 	bl	801a944 <xPortSysTickHandler>
}
 80186ae:	e7fb      	b.n	80186a8 <SysTick_Handler+0x10>

080186b0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80186b0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80186b4:	b92b      	cbnz	r3, 80186c2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80186b6:	4b06      	ldr	r3, [pc, #24]	@ (80186d0 <osKernelInitialize+0x20>)
 80186b8:	6818      	ldr	r0, [r3, #0]
 80186ba:	b928      	cbnz	r0, 80186c8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80186bc:	2201      	movs	r2, #1
 80186be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80186c0:	4770      	bx	lr
    stat = osErrorISR;
 80186c2:	f06f 0005 	mvn.w	r0, #5
 80186c6:	4770      	bx	lr
    } else {
      stat = osError;
 80186c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 80186cc:	4770      	bx	lr
 80186ce:	bf00      	nop
 80186d0:	20003670 	.word	0x20003670

080186d4 <osKernelStart>:
 80186d4:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80186d8:	b973      	cbnz	r3, 80186f8 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80186da:	4b0a      	ldr	r3, [pc, #40]	@ (8018704 <osKernelStart+0x30>)
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	2b01      	cmp	r3, #1
 80186e0:	d10d      	bne.n	80186fe <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80186e2:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186e4:	2400      	movs	r4, #0
 80186e6:	4b08      	ldr	r3, [pc, #32]	@ (8018708 <osKernelStart+0x34>)
 80186e8:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80186ea:	4b06      	ldr	r3, [pc, #24]	@ (8018704 <osKernelStart+0x30>)
 80186ec:	2202      	movs	r2, #2
 80186ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80186f0:	f001 fa6a 	bl	8019bc8 <vTaskStartScheduler>
      stat = osOK;
 80186f4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80186f6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80186f8:	f06f 0005 	mvn.w	r0, #5
 80186fc:	4770      	bx	lr
      stat = osError;
 80186fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8018702:	4770      	bx	lr
 8018704:	20003670 	.word	0x20003670
 8018708:	e000ed00 	.word	0xe000ed00

0801870c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801870c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801870e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018710:	2400      	movs	r4, #0
 8018712:	9405      	str	r4, [sp, #20]
 8018714:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8018718:	bb7c      	cbnz	r4, 801877a <osThreadNew+0x6e>
 801871a:	b370      	cbz	r0, 801877a <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 801871c:	b32a      	cbz	r2, 801876a <osThreadNew+0x5e>
      if (attr->name != NULL) {
 801871e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8018720:	6993      	ldr	r3, [r2, #24]
 8018722:	b903      	cbnz	r3, 8018726 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8018724:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018726:	1e5c      	subs	r4, r3, #1
 8018728:	2c37      	cmp	r4, #55	@ 0x37
 801872a:	d84a      	bhi.n	80187c2 <osThreadNew+0xb6>
 801872c:	6854      	ldr	r4, [r2, #4]
 801872e:	f014 0f01 	tst.w	r4, #1
 8018732:	d148      	bne.n	80187c6 <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8018734:	6956      	ldr	r6, [r2, #20]
 8018736:	b176      	cbz	r6, 8018756 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018738:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801873c:	6894      	ldr	r4, [r2, #8]
 801873e:	b134      	cbz	r4, 801874e <osThreadNew+0x42>
 8018740:	68d7      	ldr	r7, [r2, #12]
 8018742:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8018746:	d302      	bcc.n	801874e <osThreadNew+0x42>
 8018748:	6917      	ldr	r7, [r2, #16]
 801874a:	b107      	cbz	r7, 801874e <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801874c:	b9c6      	cbnz	r6, 8018780 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801874e:	b12c      	cbz	r4, 801875c <osThreadNew+0x50>
    mem  = -1;
 8018750:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018754:	e00e      	b.n	8018774 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8018756:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 801875a:	e7ef      	b.n	801873c <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801875c:	68d4      	ldr	r4, [r2, #12]
 801875e:	b98c      	cbnz	r4, 8018784 <osThreadNew+0x78>
 8018760:	6914      	ldr	r4, [r2, #16]
 8018762:	b194      	cbz	r4, 801878a <osThreadNew+0x7e>
    mem  = -1;
 8018764:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018768:	e004      	b.n	8018774 <osThreadNew+0x68>
    name = NULL;
 801876a:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 801876c:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 801876e:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8018770:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8018774:	2c01      	cmp	r4, #1
 8018776:	d00a      	beq.n	801878e <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8018778:	b1ac      	cbz	r4, 80187a6 <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801877a:	9805      	ldr	r0, [sp, #20]
}
 801877c:	b007      	add	sp, #28
 801877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8018780:	2401      	movs	r4, #1
 8018782:	e7f7      	b.n	8018774 <osThreadNew+0x68>
    mem  = -1;
 8018784:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018788:	e7f4      	b.n	8018774 <osThreadNew+0x68>
          mem = 0;
 801878a:	2400      	movs	r4, #0
 801878c:	e7f2      	b.n	8018774 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801878e:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018790:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018792:	9202      	str	r2, [sp, #8]
 8018794:	9401      	str	r4, [sp, #4]
 8018796:	9300      	str	r3, [sp, #0]
 8018798:	460b      	mov	r3, r1
 801879a:	4662      	mov	r2, ip
 801879c:	4629      	mov	r1, r5
 801879e:	f001 f9a3 	bl	8019ae8 <xTaskCreateStatic>
 80187a2:	9005      	str	r0, [sp, #20]
 80187a4:	e7e9      	b.n	801877a <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80187a6:	aa05      	add	r2, sp, #20
 80187a8:	9201      	str	r2, [sp, #4]
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	460b      	mov	r3, r1
 80187ae:	fa1f f28c 	uxth.w	r2, ip
 80187b2:	4629      	mov	r1, r5
 80187b4:	f001 f9d5 	bl	8019b62 <xTaskCreate>
 80187b8:	2801      	cmp	r0, #1
 80187ba:	d0de      	beq.n	801877a <osThreadNew+0x6e>
            hTask = NULL;
 80187bc:	2300      	movs	r3, #0
 80187be:	9305      	str	r3, [sp, #20]
 80187c0:	e7db      	b.n	801877a <osThreadNew+0x6e>
        return (NULL);
 80187c2:	2000      	movs	r0, #0
 80187c4:	e7da      	b.n	801877c <osThreadNew+0x70>
 80187c6:	2000      	movs	r0, #0
 80187c8:	e7d8      	b.n	801877c <osThreadNew+0x70>

080187ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80187ca:	b508      	push	{r3, lr}
 80187cc:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80187d0:	b933      	cbnz	r3, 80187e0 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80187d2:	b908      	cbnz	r0, 80187d8 <osDelay+0xe>
    stat = osOK;
 80187d4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80187d6:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80187d8:	f001 fb62 	bl	8019ea0 <vTaskDelay>
    stat = osOK;
 80187dc:	2000      	movs	r0, #0
 80187de:	e7fa      	b.n	80187d6 <osDelay+0xc>
    stat = osErrorISR;
 80187e0:	f06f 0005 	mvn.w	r0, #5
 80187e4:	e7f7      	b.n	80187d6 <osDelay+0xc>

080187e6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80187e6:	b570      	push	{r4, r5, r6, lr}
 80187e8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d13c      	bne.n	801886a <osMutexNew+0x84>
 80187f0:	4604      	mov	r4, r0
    if (attr != NULL) {
 80187f2:	b100      	cbz	r0, 80187f6 <osMutexNew+0x10>
      type = attr->attr_bits;
 80187f4:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80187f6:	f013 0601 	ands.w	r6, r3, #1
 80187fa:	d000      	beq.n	80187fe <osMutexNew+0x18>
      rmtx = 1U;
 80187fc:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80187fe:	f013 0f08 	tst.w	r3, #8
 8018802:	d135      	bne.n	8018870 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8018804:	b344      	cbz	r4, 8018858 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8018806:	68a1      	ldr	r1, [r4, #8]
 8018808:	b111      	cbz	r1, 8018810 <osMutexNew+0x2a>
 801880a:	68e3      	ldr	r3, [r4, #12]
 801880c:	2b4f      	cmp	r3, #79	@ 0x4f
 801880e:	d818      	bhi.n	8018842 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018810:	b191      	cbz	r1, 8018838 <osMutexNew+0x52>
      mem = -1;
 8018812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8018816:	bb6b      	cbnz	r3, 8018874 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8018818:	b316      	cbz	r6, 8018860 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801881a:	2004      	movs	r0, #4
 801881c:	f000 fc04 	bl	8019028 <xQueueCreateMutex>
 8018820:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8018822:	b31d      	cbz	r5, 801886c <osMutexNew+0x86>
        if (attr != NULL) {
 8018824:	b104      	cbz	r4, 8018828 <osMutexNew+0x42>
          name = attr->name;
 8018826:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8018828:	4621      	mov	r1, r4
 801882a:	4628      	mov	r0, r5
 801882c:	f000 ff64 	bl	80196f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8018830:	b1e6      	cbz	r6, 801886c <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8018832:	f045 0501 	orr.w	r5, r5, #1
 8018836:	e019      	b.n	801886c <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018838:	68e3      	ldr	r3, [r4, #12]
 801883a:	b17b      	cbz	r3, 801885c <osMutexNew+0x76>
      mem = -1;
 801883c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018840:	e7e9      	b.n	8018816 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8018842:	b126      	cbz	r6, 801884e <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8018844:	2004      	movs	r0, #4
 8018846:	f000 fbfa 	bl	801903e <xQueueCreateMutexStatic>
 801884a:	4605      	mov	r5, r0
 801884c:	e7e9      	b.n	8018822 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801884e:	2001      	movs	r0, #1
 8018850:	f000 fbf5 	bl	801903e <xQueueCreateMutexStatic>
 8018854:	4605      	mov	r5, r0
 8018856:	e7e4      	b.n	8018822 <osMutexNew+0x3c>
        mem = 0;
 8018858:	2300      	movs	r3, #0
 801885a:	e7dc      	b.n	8018816 <osMutexNew+0x30>
            mem = 0;
 801885c:	2300      	movs	r3, #0
 801885e:	e7da      	b.n	8018816 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8018860:	2001      	movs	r0, #1
 8018862:	f000 fbe1 	bl	8019028 <xQueueCreateMutex>
 8018866:	4605      	mov	r5, r0
 8018868:	e7db      	b.n	8018822 <osMutexNew+0x3c>
  hMutex = NULL;
 801886a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 801886c:	4628      	mov	r0, r5
 801886e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8018870:	2500      	movs	r5, #0
 8018872:	e7fb      	b.n	801886c <osMutexNew+0x86>
 8018874:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8018876:	e7f9      	b.n	801886c <osMutexNew+0x86>

08018878 <osMutexAcquire>:
 8018878:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 801887c:	b9da      	cbnz	r2, 80188b6 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801887e:	b510      	push	{r4, lr}
 8018880:	4603      	mov	r3, r0
 8018882:	460c      	mov	r4, r1
 8018884:	f020 0001 	bic.w	r0, r0, #1
 8018888:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 801888c:	2b01      	cmp	r3, #1
 801888e:	d915      	bls.n	80188bc <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8018890:	b141      	cbz	r1, 80188a4 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018892:	4621      	mov	r1, r4
 8018894:	f000 fdeb 	bl	801946e <xQueueTakeMutexRecursive>
 8018898:	2801      	cmp	r0, #1
 801889a:	d012      	beq.n	80188c2 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 801889c:	b19c      	cbz	r4, 80188c6 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 801889e:	f06f 0001 	mvn.w	r0, #1
 80188a2:	e00f      	b.n	80188c4 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80188a4:	4621      	mov	r1, r4
 80188a6:	f000 fd0f 	bl	80192c8 <xQueueSemaphoreTake>
 80188aa:	2801      	cmp	r0, #1
 80188ac:	d00e      	beq.n	80188cc <osMutexAcquire+0x54>
        if (timeout != 0U) {
 80188ae:	b17c      	cbz	r4, 80188d0 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 80188b0:	f06f 0001 	mvn.w	r0, #1
 80188b4:	e006      	b.n	80188c4 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 80188b6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80188ba:	4770      	bx	lr
    stat = osErrorParameter;
 80188bc:	f06f 0003 	mvn.w	r0, #3
 80188c0:	e000      	b.n	80188c4 <osMutexAcquire+0x4c>
  stat = osOK;
 80188c2:	2000      	movs	r0, #0
}
 80188c4:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 80188c6:	f06f 0002 	mvn.w	r0, #2
 80188ca:	e7fb      	b.n	80188c4 <osMutexAcquire+0x4c>
  stat = osOK;
 80188cc:	2000      	movs	r0, #0
 80188ce:	e7f9      	b.n	80188c4 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 80188d0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80188d4:	e7f6      	b.n	80188c4 <osMutexAcquire+0x4c>

080188d6 <osMutexRelease>:
 80188d6:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80188da:	b9ba      	cbnz	r2, 801890c <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80188dc:	b508      	push	{r3, lr}
 80188de:	4603      	mov	r3, r0
 80188e0:	f020 0001 	bic.w	r0, r0, #1
 80188e4:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80188e8:	2b01      	cmp	r3, #1
 80188ea:	d912      	bls.n	8018912 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80188ec:	b129      	cbz	r1, 80188fa <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80188ee:	f000 fbb5 	bl	801905c <xQueueGiveMutexRecursive>
 80188f2:	2801      	cmp	r0, #1
 80188f4:	d110      	bne.n	8018918 <osMutexRelease+0x42>
  stat = osOK;
 80188f6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80188f8:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80188fa:	2300      	movs	r3, #0
 80188fc:	461a      	mov	r2, r3
 80188fe:	4619      	mov	r1, r3
 8018900:	f000 fac2 	bl	8018e88 <xQueueGenericSend>
 8018904:	2801      	cmp	r0, #1
 8018906:	d10a      	bne.n	801891e <osMutexRelease+0x48>
  stat = osOK;
 8018908:	2000      	movs	r0, #0
 801890a:	e7f5      	b.n	80188f8 <osMutexRelease+0x22>
    stat = osErrorISR;
 801890c:	f06f 0005 	mvn.w	r0, #5
}
 8018910:	4770      	bx	lr
    stat = osErrorParameter;
 8018912:	f06f 0003 	mvn.w	r0, #3
 8018916:	e7ef      	b.n	80188f8 <osMutexRelease+0x22>
        stat = osErrorResource;
 8018918:	f06f 0002 	mvn.w	r0, #2
 801891c:	e7ec      	b.n	80188f8 <osMutexRelease+0x22>
        stat = osErrorResource;
 801891e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018922:	e7e9      	b.n	80188f8 <osMutexRelease+0x22>

08018924 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018924:	b570      	push	{r4, r5, r6, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801892c:	2b00      	cmp	r3, #0
 801892e:	d13a      	bne.n	80189a6 <osMessageQueueNew+0x82>
 8018930:	4614      	mov	r4, r2
 8018932:	2800      	cmp	r0, #0
 8018934:	d03b      	beq.n	80189ae <osMessageQueueNew+0x8a>
 8018936:	2900      	cmp	r1, #0
 8018938:	d03b      	beq.n	80189b2 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 801893a:	b36a      	cbz	r2, 8018998 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801893c:	6893      	ldr	r3, [r2, #8]
 801893e:	b14b      	cbz	r3, 8018954 <osMessageQueueNew+0x30>
 8018940:	68d2      	ldr	r2, [r2, #12]
 8018942:	2a4f      	cmp	r2, #79	@ 0x4f
 8018944:	d906      	bls.n	8018954 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018946:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018948:	b122      	cbz	r2, 8018954 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801894a:	fb01 f500 	mul.w	r5, r1, r0
 801894e:	6966      	ldr	r6, [r4, #20]
 8018950:	42ae      	cmp	r6, r5
 8018952:	d21b      	bcs.n	801898c <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018954:	b173      	cbz	r3, 8018974 <osMessageQueueNew+0x50>
    mem = -1;
 8018956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 801895a:	bb63      	cbnz	r3, 80189b6 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801895c:	2200      	movs	r2, #0
 801895e:	f000 fa6f 	bl	8018e40 <xQueueGenericCreate>
 8018962:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018964:	b305      	cbz	r5, 80189a8 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8018966:	b104      	cbz	r4, 801896a <osMessageQueueNew+0x46>
        name = attr->name;
 8018968:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 801896a:	4621      	mov	r1, r4
 801896c:	4628      	mov	r0, r5
 801896e:	f000 fec3 	bl	80196f8 <vQueueAddToRegistry>
 8018972:	e019      	b.n	80189a8 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018974:	68e3      	ldr	r3, [r4, #12]
 8018976:	b98b      	cbnz	r3, 801899c <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018978:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801897a:	b113      	cbz	r3, 8018982 <osMessageQueueNew+0x5e>
    mem = -1;
 801897c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018980:	e7eb      	b.n	801895a <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018982:	6963      	ldr	r3, [r4, #20]
 8018984:	b16b      	cbz	r3, 80189a2 <osMessageQueueNew+0x7e>
    mem = -1;
 8018986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801898a:	e7e6      	b.n	801895a <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801898c:	2500      	movs	r5, #0
 801898e:	9500      	str	r5, [sp, #0]
 8018990:	f000 fa0c 	bl	8018dac <xQueueGenericCreateStatic>
 8018994:	4605      	mov	r5, r0
 8018996:	e7e5      	b.n	8018964 <osMessageQueueNew+0x40>
      mem = 0;
 8018998:	2300      	movs	r3, #0
 801899a:	e7de      	b.n	801895a <osMessageQueueNew+0x36>
    mem = -1;
 801899c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189a0:	e7db      	b.n	801895a <osMessageQueueNew+0x36>
          mem = 0;
 80189a2:	2300      	movs	r3, #0
 80189a4:	e7d9      	b.n	801895a <osMessageQueueNew+0x36>
  hQueue = NULL;
 80189a6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80189a8:	4628      	mov	r0, r5
 80189aa:	b002      	add	sp, #8
 80189ac:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 80189ae:	2500      	movs	r5, #0
 80189b0:	e7fa      	b.n	80189a8 <osMessageQueueNew+0x84>
 80189b2:	2500      	movs	r5, #0
 80189b4:	e7f8      	b.n	80189a8 <osMessageQueueNew+0x84>
 80189b6:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80189b8:	e7f6      	b.n	80189a8 <osMessageQueueNew+0x84>

080189ba <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80189ba:	b510      	push	{r4, lr}
 80189bc:	b082      	sub	sp, #8
 80189be:	461c      	mov	r4, r3
 80189c0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80189c4:	b1c3      	cbz	r3, 80189f8 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80189c6:	b318      	cbz	r0, 8018a10 <osMessageQueuePut+0x56>
 80189c8:	b329      	cbz	r1, 8018a16 <osMessageQueuePut+0x5c>
 80189ca:	bb3c      	cbnz	r4, 8018a1c <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80189cc:	2300      	movs	r3, #0
 80189ce:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80189d0:	aa01      	add	r2, sp, #4
 80189d2:	f000 fb63 	bl	801909c <xQueueGenericSendFromISR>
 80189d6:	2801      	cmp	r0, #1
 80189d8:	d123      	bne.n	8018a22 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80189da:	9801      	ldr	r0, [sp, #4]
 80189dc:	b150      	cbz	r0, 80189f4 <osMessageQueuePut+0x3a>
 80189de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80189e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80189e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80189ea:	f3bf 8f4f 	dsb	sy
 80189ee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80189f2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80189f4:	b002      	add	sp, #8
 80189f6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80189f8:	b1b0      	cbz	r0, 8018a28 <osMessageQueuePut+0x6e>
 80189fa:	b1c1      	cbz	r1, 8018a2e <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80189fc:	2300      	movs	r3, #0
 80189fe:	4622      	mov	r2, r4
 8018a00:	f000 fa42 	bl	8018e88 <xQueueGenericSend>
 8018a04:	2801      	cmp	r0, #1
 8018a06:	d015      	beq.n	8018a34 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8018a08:	b1b4      	cbz	r4, 8018a38 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8018a0a:	f06f 0001 	mvn.w	r0, #1
 8018a0e:	e7f1      	b.n	80189f4 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018a10:	f06f 0003 	mvn.w	r0, #3
 8018a14:	e7ee      	b.n	80189f4 <osMessageQueuePut+0x3a>
 8018a16:	f06f 0003 	mvn.w	r0, #3
 8018a1a:	e7eb      	b.n	80189f4 <osMessageQueuePut+0x3a>
 8018a1c:	f06f 0003 	mvn.w	r0, #3
 8018a20:	e7e8      	b.n	80189f4 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8018a22:	f06f 0002 	mvn.w	r0, #2
 8018a26:	e7e5      	b.n	80189f4 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018a28:	f06f 0003 	mvn.w	r0, #3
 8018a2c:	e7e2      	b.n	80189f4 <osMessageQueuePut+0x3a>
 8018a2e:	f06f 0003 	mvn.w	r0, #3
 8018a32:	e7df      	b.n	80189f4 <osMessageQueuePut+0x3a>
  stat = osOK;
 8018a34:	2000      	movs	r0, #0
 8018a36:	e7dd      	b.n	80189f4 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8018a38:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018a3c:	e7da      	b.n	80189f4 <osMessageQueuePut+0x3a>

08018a3e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8018a3e:	b510      	push	{r4, lr}
 8018a40:	b082      	sub	sp, #8
 8018a42:	461c      	mov	r4, r3
 8018a44:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018a48:	b1c3      	cbz	r3, 8018a7c <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018a4a:	b310      	cbz	r0, 8018a92 <osMessageQueueGet+0x54>
 8018a4c:	b321      	cbz	r1, 8018a98 <osMessageQueueGet+0x5a>
 8018a4e:	bb34      	cbnz	r4, 8018a9e <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018a50:	2300      	movs	r3, #0
 8018a52:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8018a54:	aa01      	add	r2, sp, #4
 8018a56:	f000 fdd9 	bl	801960c <xQueueReceiveFromISR>
 8018a5a:	2801      	cmp	r0, #1
 8018a5c:	d122      	bne.n	8018aa4 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8018a5e:	9801      	ldr	r0, [sp, #4]
 8018a60:	b150      	cbz	r0, 8018a78 <osMessageQueueGet+0x3a>
 8018a62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018a6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018a76:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018a78:	b002      	add	sp, #8
 8018a7a:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018a7c:	b1a8      	cbz	r0, 8018aaa <osMessageQueueGet+0x6c>
 8018a7e:	b1b9      	cbz	r1, 8018ab0 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018a80:	4622      	mov	r2, r4
 8018a82:	f000 fb72 	bl	801916a <xQueueReceive>
 8018a86:	2801      	cmp	r0, #1
 8018a88:	d015      	beq.n	8018ab6 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8018a8a:	b1b4      	cbz	r4, 8018aba <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8018a8c:	f06f 0001 	mvn.w	r0, #1
 8018a90:	e7f2      	b.n	8018a78 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018a92:	f06f 0003 	mvn.w	r0, #3
 8018a96:	e7ef      	b.n	8018a78 <osMessageQueueGet+0x3a>
 8018a98:	f06f 0003 	mvn.w	r0, #3
 8018a9c:	e7ec      	b.n	8018a78 <osMessageQueueGet+0x3a>
 8018a9e:	f06f 0003 	mvn.w	r0, #3
 8018aa2:	e7e9      	b.n	8018a78 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8018aa4:	f06f 0002 	mvn.w	r0, #2
 8018aa8:	e7e6      	b.n	8018a78 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8018aaa:	f06f 0003 	mvn.w	r0, #3
 8018aae:	e7e3      	b.n	8018a78 <osMessageQueueGet+0x3a>
 8018ab0:	f06f 0003 	mvn.w	r0, #3
 8018ab4:	e7e0      	b.n	8018a78 <osMessageQueueGet+0x3a>
  stat = osOK;
 8018ab6:	2000      	movs	r0, #0
 8018ab8:	e7de      	b.n	8018a78 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8018aba:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018abe:	e7db      	b.n	8018a78 <osMessageQueueGet+0x3a>

08018ac0 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8018ac0:	b148      	cbz	r0, 8018ad6 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8018ac2:	b508      	push	{r3, lr}
 8018ac4:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8018ac8:	b112      	cbz	r2, 8018ad0 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8018aca:	f000 fe09 	bl	80196e0 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8018ace:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8018ad0:	f000 fdf3 	bl	80196ba <uxQueueMessagesWaiting>
 8018ad4:	e7fb      	b.n	8018ace <osMessageQueueGetCount+0xe>
    count = 0U;
 8018ad6:	2000      	movs	r0, #0
}
 8018ad8:	4770      	bx	lr

08018ada <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8018ada:	b508      	push	{r3, lr}
 8018adc:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018ae0:	b92b      	cbnz	r3, 8018aee <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8018ae2:	b138      	cbz	r0, 8018af4 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	f000 f90e 	bl	8018d06 <xQueueGenericReset>
    stat = osOK;
 8018aea:	2000      	movs	r0, #0
  }

  return (stat);
}
 8018aec:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8018aee:	f06f 0005 	mvn.w	r0, #5
 8018af2:	e7fb      	b.n	8018aec <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018af4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8018af8:	e7f8      	b.n	8018aec <osMessageQueueReset+0x12>
	...

08018afc <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018afc:	4b03      	ldr	r3, [pc, #12]	@ (8018b0c <vApplicationGetIdleTaskMemory+0x10>)
 8018afe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018b00:	4b03      	ldr	r3, [pc, #12]	@ (8018b10 <vApplicationGetIdleTaskMemory+0x14>)
 8018b02:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018b04:	2380      	movs	r3, #128	@ 0x80
 8018b06:	6013      	str	r3, [r2, #0]
}
 8018b08:	4770      	bx	lr
 8018b0a:	bf00      	nop
 8018b0c:	200034f0 	.word	0x200034f0
 8018b10:	200032f0 	.word	0x200032f0

08018b14 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018b14:	4b03      	ldr	r3, [pc, #12]	@ (8018b24 <vApplicationGetTimerTaskMemory+0x10>)
 8018b16:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018b18:	4b03      	ldr	r3, [pc, #12]	@ (8018b28 <vApplicationGetTimerTaskMemory+0x14>)
 8018b1a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018b1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018b20:	6013      	str	r3, [r2, #0]
}
 8018b22:	4770      	bx	lr
 8018b24:	20003170 	.word	0x20003170
 8018b28:	20002d70 	.word	0x20002d70

08018b2c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018b2c:	f100 0308 	add.w	r3, r0, #8
 8018b30:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018b32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018b36:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018b38:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018b3a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018b40:	4770      	bx	lr

08018b42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018b42:	2300      	movs	r3, #0
 8018b44:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018b46:	4770      	bx	lr

08018b48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8018b48:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018b4a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018b4c:	689a      	ldr	r2, [r3, #8]
 8018b4e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018b50:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018b52:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018b54:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018b56:	6803      	ldr	r3, [r0, #0]
 8018b58:	3301      	adds	r3, #1
 8018b5a:	6003      	str	r3, [r0, #0]
}
 8018b5c:	4770      	bx	lr

08018b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018b5e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018b60:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018b62:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8018b66:	d011      	beq.n	8018b8c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018b68:	f100 0308 	add.w	r3, r0, #8
 8018b6c:	461c      	mov	r4, r3
 8018b6e:	685b      	ldr	r3, [r3, #4]
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	42aa      	cmp	r2, r5
 8018b74:	d9fa      	bls.n	8018b6c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018b76:	6863      	ldr	r3, [r4, #4]
 8018b78:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018b7a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018b7c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8018b7e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018b80:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018b82:	6803      	ldr	r3, [r0, #0]
 8018b84:	3301      	adds	r3, #1
 8018b86:	6003      	str	r3, [r0, #0]
}
 8018b88:	bc30      	pop	{r4, r5}
 8018b8a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8018b8c:	6904      	ldr	r4, [r0, #16]
 8018b8e:	e7f2      	b.n	8018b76 <vListInsert+0x18>

08018b90 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018b90:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018b92:	6841      	ldr	r1, [r0, #4]
 8018b94:	6882      	ldr	r2, [r0, #8]
 8018b96:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018b98:	6841      	ldr	r1, [r0, #4]
 8018b9a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018b9c:	685a      	ldr	r2, [r3, #4]
 8018b9e:	4282      	cmp	r2, r0
 8018ba0:	d006      	beq.n	8018bb0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	3a01      	subs	r2, #1
 8018baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018bac:	6818      	ldr	r0, [r3, #0]
}
 8018bae:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018bb0:	6882      	ldr	r2, [r0, #8]
 8018bb2:	605a      	str	r2, [r3, #4]
 8018bb4:	e7f5      	b.n	8018ba2 <uxListRemove+0x12>

08018bb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018bb6:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018bb8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018bba:	b118      	cbz	r0, 8018bc4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018bbe:	6818      	ldr	r0, [r3, #0]
 8018bc0:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018bc4:	4770      	bx	lr

08018bc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018bc6:	b510      	push	{r4, lr}
 8018bc8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018bca:	f001 fe4b 	bl	801a864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018bce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018bd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d004      	beq.n	8018be0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8018bd6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8018bd8:	f001 fe66 	bl	801a8a8 <vPortExitCritical>

	return xReturn;
}
 8018bdc:	4620      	mov	r0, r4
 8018bde:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8018be0:	2401      	movs	r4, #1
 8018be2:	e7f9      	b.n	8018bd8 <prvIsQueueFull+0x12>

08018be4 <prvIsQueueEmpty>:
{
 8018be4:	b510      	push	{r4, lr}
 8018be6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018be8:	f001 fe3c 	bl	801a864 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018bec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018bee:	b923      	cbnz	r3, 8018bfa <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8018bf0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8018bf2:	f001 fe59 	bl	801a8a8 <vPortExitCritical>
}
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8018bfa:	2400      	movs	r4, #0
 8018bfc:	e7f9      	b.n	8018bf2 <prvIsQueueEmpty+0xe>

08018bfe <prvCopyDataToQueue>:
{
 8018bfe:	b570      	push	{r4, r5, r6, lr}
 8018c00:	4604      	mov	r4, r0
 8018c02:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018c04:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018c06:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018c08:	b95a      	cbnz	r2, 8018c22 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018c0a:	6803      	ldr	r3, [r0, #0]
 8018c0c:	b11b      	cbz	r3, 8018c16 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8018c0e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018c10:	3601      	adds	r6, #1
 8018c12:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8018c14:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018c16:	6880      	ldr	r0, [r0, #8]
 8018c18:	f001 faea 	bl	801a1f0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	60a3      	str	r3, [r4, #8]
 8018c20:	e7f6      	b.n	8018c10 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8018c22:	b96d      	cbnz	r5, 8018c40 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018c24:	6840      	ldr	r0, [r0, #4]
 8018c26:	f015 fa5f 	bl	802e0e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018c2a:	6863      	ldr	r3, [r4, #4]
 8018c2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018c2e:	4413      	add	r3, r2
 8018c30:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018c32:	68a2      	ldr	r2, [r4, #8]
 8018c34:	4293      	cmp	r3, r2
 8018c36:	d319      	bcc.n	8018c6c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018c38:	6823      	ldr	r3, [r4, #0]
 8018c3a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	e7e7      	b.n	8018c10 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018c40:	68c0      	ldr	r0, [r0, #12]
 8018c42:	f015 fa51 	bl	802e0e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018c46:	68e3      	ldr	r3, [r4, #12]
 8018c48:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018c4a:	4251      	negs	r1, r2
 8018c4c:	1a9b      	subs	r3, r3, r2
 8018c4e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018c50:	6822      	ldr	r2, [r4, #0]
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d202      	bcs.n	8018c5c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018c56:	68a3      	ldr	r3, [r4, #8]
 8018c58:	440b      	add	r3, r1
 8018c5a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8018c5c:	2d02      	cmp	r5, #2
 8018c5e:	d001      	beq.n	8018c64 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8018c60:	2000      	movs	r0, #0
 8018c62:	e7d5      	b.n	8018c10 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018c64:	b126      	cbz	r6, 8018c70 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8018c66:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8018c68:	2000      	movs	r0, #0
 8018c6a:	e7d1      	b.n	8018c10 <prvCopyDataToQueue+0x12>
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	e7cf      	b.n	8018c10 <prvCopyDataToQueue+0x12>
 8018c70:	2000      	movs	r0, #0
 8018c72:	e7cd      	b.n	8018c10 <prvCopyDataToQueue+0x12>

08018c74 <prvCopyDataFromQueue>:
{
 8018c74:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018c76:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018c78:	b16a      	cbz	r2, 8018c96 <prvCopyDataFromQueue+0x22>
{
 8018c7a:	b510      	push	{r4, lr}
 8018c7c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018c7e:	68d9      	ldr	r1, [r3, #12]
 8018c80:	4411      	add	r1, r2
 8018c82:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018c84:	689c      	ldr	r4, [r3, #8]
 8018c86:	42a1      	cmp	r1, r4
 8018c88:	d301      	bcc.n	8018c8e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018c8a:	6819      	ldr	r1, [r3, #0]
 8018c8c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018c8e:	68d9      	ldr	r1, [r3, #12]
 8018c90:	f015 fa2a 	bl	802e0e8 <memcpy>
}
 8018c94:	bd10      	pop	{r4, pc}
 8018c96:	4770      	bx	lr

08018c98 <prvUnlockQueue>:
{
 8018c98:	b538      	push	{r3, r4, r5, lr}
 8018c9a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8018c9c:	f001 fde2 	bl	801a864 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8018ca0:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8018ca4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018ca6:	e001      	b.n	8018cac <prvUnlockQueue+0x14>
			--cTxLock;
 8018ca8:	3c01      	subs	r4, #1
 8018caa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018cac:	2c00      	cmp	r4, #0
 8018cae:	dd0a      	ble.n	8018cc6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018cb0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018cb2:	b143      	cbz	r3, 8018cc6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018cb4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018cb8:	f001 f99e 	bl	8019ff8 <xTaskRemoveFromEventList>
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	d0f3      	beq.n	8018ca8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8018cc0:	f001 fa2e 	bl	801a120 <vTaskMissedYield>
 8018cc4:	e7f0      	b.n	8018ca8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8018cc6:	23ff      	movs	r3, #255	@ 0xff
 8018cc8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8018ccc:	f001 fdec 	bl	801a8a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8018cd0:	f001 fdc8 	bl	801a864 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8018cd4:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8018cd8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018cda:	e001      	b.n	8018ce0 <prvUnlockQueue+0x48>
				--cRxLock;
 8018cdc:	3c01      	subs	r4, #1
 8018cde:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018ce0:	2c00      	cmp	r4, #0
 8018ce2:	dd0a      	ble.n	8018cfa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018ce4:	692b      	ldr	r3, [r5, #16]
 8018ce6:	b143      	cbz	r3, 8018cfa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ce8:	f105 0010 	add.w	r0, r5, #16
 8018cec:	f001 f984 	bl	8019ff8 <xTaskRemoveFromEventList>
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	d0f3      	beq.n	8018cdc <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8018cf4:	f001 fa14 	bl	801a120 <vTaskMissedYield>
 8018cf8:	e7f0      	b.n	8018cdc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8018cfa:	23ff      	movs	r3, #255	@ 0xff
 8018cfc:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8018d00:	f001 fdd2 	bl	801a8a8 <vPortExitCritical>
}
 8018d04:	bd38      	pop	{r3, r4, r5, pc}

08018d06 <xQueueGenericReset>:
{
 8018d06:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8018d08:	b1e0      	cbz	r0, 8018d44 <xQueueGenericReset+0x3e>
 8018d0a:	460d      	mov	r5, r1
 8018d0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018d0e:	f001 fda9 	bl	801a864 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d12:	6823      	ldr	r3, [r4, #0]
 8018d14:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8018d16:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018d18:	fb01 3002 	mla	r0, r1, r2, r3
 8018d1c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018d1e:	2000      	movs	r0, #0
 8018d20:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018d22:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d24:	3a01      	subs	r2, #1
 8018d26:	fb02 3301 	mla	r3, r2, r1, r3
 8018d2a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018d2c:	23ff      	movs	r3, #255	@ 0xff
 8018d2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018d32:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8018d36:	b9fd      	cbnz	r5, 8018d78 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018d38:	6923      	ldr	r3, [r4, #16]
 8018d3a:	b963      	cbnz	r3, 8018d56 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8018d3c:	f001 fdb4 	bl	801a8a8 <vPortExitCritical>
}
 8018d40:	2001      	movs	r0, #1
 8018d42:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d48:	f383 8811 	msr	BASEPRI, r3
 8018d4c:	f3bf 8f6f 	isb	sy
 8018d50:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018d54:	e7fe      	b.n	8018d54 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018d56:	f104 0010 	add.w	r0, r4, #16
 8018d5a:	f001 f94d 	bl	8019ff8 <xTaskRemoveFromEventList>
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	d0ec      	beq.n	8018d3c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8018d62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018d6e:	f3bf 8f4f 	dsb	sy
 8018d72:	f3bf 8f6f 	isb	sy
 8018d76:	e7e1      	b.n	8018d3c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018d78:	f104 0010 	add.w	r0, r4, #16
 8018d7c:	f7ff fed6 	bl	8018b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018d80:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018d84:	f7ff fed2 	bl	8018b2c <vListInitialise>
 8018d88:	e7d8      	b.n	8018d3c <xQueueGenericReset+0x36>

08018d8a <prvInitialiseNewQueue>:
{
 8018d8a:	b538      	push	{r3, r4, r5, lr}
 8018d8c:	461d      	mov	r5, r3
 8018d8e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8018d90:	460b      	mov	r3, r1
 8018d92:	b949      	cbnz	r1, 8018da8 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018d94:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8018d96:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018d98:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018d9a:	2101      	movs	r1, #1
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	f7ff ffb2 	bl	8018d06 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8018da2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8018da6:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018da8:	6022      	str	r2, [r4, #0]
 8018daa:	e7f4      	b.n	8018d96 <prvInitialiseNewQueue+0xc>

08018dac <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018dac:	b940      	cbnz	r0, 8018dc0 <xQueueGenericCreateStatic+0x14>
 8018dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018db2:	f383 8811 	msr	BASEPRI, r3
 8018db6:	f3bf 8f6f 	isb	sy
 8018dba:	f3bf 8f4f 	dsb	sy
 8018dbe:	e7fe      	b.n	8018dbe <xQueueGenericCreateStatic+0x12>
	{
 8018dc0:	b510      	push	{r4, lr}
 8018dc2:	b084      	sub	sp, #16
 8018dc4:	461c      	mov	r4, r3
 8018dc6:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8018dc8:	b153      	cbz	r3, 8018de0 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018dca:	b192      	cbz	r2, 8018df2 <xQueueGenericCreateStatic+0x46>
 8018dcc:	b989      	cbnz	r1, 8018df2 <xQueueGenericCreateStatic+0x46>
 8018dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dd2:	f383 8811 	msr	BASEPRI, r3
 8018dd6:	f3bf 8f6f 	isb	sy
 8018dda:	f3bf 8f4f 	dsb	sy
 8018dde:	e7fe      	b.n	8018dde <xQueueGenericCreateStatic+0x32>
 8018de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018de4:	f383 8811 	msr	BASEPRI, r3
 8018de8:	f3bf 8f6f 	isb	sy
 8018dec:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8018df0:	e7fe      	b.n	8018df0 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018df2:	b16a      	cbz	r2, 8018e10 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018df4:	2350      	movs	r3, #80	@ 0x50
 8018df6:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018df8:	9b03      	ldr	r3, [sp, #12]
 8018dfa:	2b50      	cmp	r3, #80	@ 0x50
 8018dfc:	d013      	beq.n	8018e26 <xQueueGenericCreateStatic+0x7a>
 8018dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e02:	f383 8811 	msr	BASEPRI, r3
 8018e06:	f3bf 8f6f 	isb	sy
 8018e0a:	f3bf 8f4f 	dsb	sy
 8018e0e:	e7fe      	b.n	8018e0e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018e10:	2900      	cmp	r1, #0
 8018e12:	d0ef      	beq.n	8018df4 <xQueueGenericCreateStatic+0x48>
 8018e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e18:	f383 8811 	msr	BASEPRI, r3
 8018e1c:	f3bf 8f6f 	isb	sy
 8018e20:	f3bf 8f4f 	dsb	sy
 8018e24:	e7fe      	b.n	8018e24 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018e26:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018e28:	2301      	movs	r3, #1
 8018e2a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018e2e:	9400      	str	r4, [sp, #0]
 8018e30:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018e34:	4660      	mov	r0, ip
 8018e36:	f7ff ffa8 	bl	8018d8a <prvInitialiseNewQueue>
	}
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	b004      	add	sp, #16
 8018e3e:	bd10      	pop	{r4, pc}

08018e40 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018e40:	b940      	cbnz	r0, 8018e54 <xQueueGenericCreate+0x14>
 8018e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e46:	f383 8811 	msr	BASEPRI, r3
 8018e4a:	f3bf 8f6f 	isb	sy
 8018e4e:	f3bf 8f4f 	dsb	sy
 8018e52:	e7fe      	b.n	8018e52 <xQueueGenericCreate+0x12>
	{
 8018e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e56:	b083      	sub	sp, #12
 8018e58:	460d      	mov	r5, r1
 8018e5a:	4614      	mov	r4, r2
 8018e5c:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e5e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018e62:	3050      	adds	r0, #80	@ 0x50
 8018e64:	f001 feb8 	bl	801abd8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8018e68:	4607      	mov	r7, r0
 8018e6a:	b150      	cbz	r0, 8018e82 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018e72:	9000      	str	r0, [sp, #0]
 8018e74:	4623      	mov	r3, r4
 8018e76:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8018e7a:	4629      	mov	r1, r5
 8018e7c:	4630      	mov	r0, r6
 8018e7e:	f7ff ff84 	bl	8018d8a <prvInitialiseNewQueue>
	}
 8018e82:	4638      	mov	r0, r7
 8018e84:	b003      	add	sp, #12
 8018e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e88 <xQueueGenericSend>:
{
 8018e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e8a:	b085      	sub	sp, #20
 8018e8c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8018e8e:	b188      	cbz	r0, 8018eb4 <xQueueGenericSend+0x2c>
 8018e90:	460f      	mov	r7, r1
 8018e92:	461d      	mov	r5, r3
 8018e94:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e96:	b1b1      	cbz	r1, 8018ec6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018e98:	2d02      	cmp	r5, #2
 8018e9a:	d120      	bne.n	8018ede <xQueueGenericSend+0x56>
 8018e9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018e9e:	2b01      	cmp	r3, #1
 8018ea0:	d01d      	beq.n	8018ede <xQueueGenericSend+0x56>
 8018ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ea6:	f383 8811 	msr	BASEPRI, r3
 8018eaa:	f3bf 8f6f 	isb	sy
 8018eae:	f3bf 8f4f 	dsb	sy
 8018eb2:	e7fe      	b.n	8018eb2 <xQueueGenericSend+0x2a>
 8018eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018eb8:	f383 8811 	msr	BASEPRI, r3
 8018ebc:	f3bf 8f6f 	isb	sy
 8018ec0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018ec4:	e7fe      	b.n	8018ec4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ec6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d0e5      	beq.n	8018e98 <xQueueGenericSend+0x10>
 8018ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ed0:	f383 8811 	msr	BASEPRI, r3
 8018ed4:	f3bf 8f6f 	isb	sy
 8018ed8:	f3bf 8f4f 	dsb	sy
 8018edc:	e7fe      	b.n	8018edc <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018ede:	f001 f92b 	bl	801a138 <xTaskGetSchedulerState>
 8018ee2:	4606      	mov	r6, r0
 8018ee4:	b958      	cbnz	r0, 8018efe <xQueueGenericSend+0x76>
 8018ee6:	9b01      	ldr	r3, [sp, #4]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d048      	beq.n	8018f7e <xQueueGenericSend+0xf6>
 8018eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ef0:	f383 8811 	msr	BASEPRI, r3
 8018ef4:	f3bf 8f6f 	isb	sy
 8018ef8:	f3bf 8f4f 	dsb	sy
 8018efc:	e7fe      	b.n	8018efc <xQueueGenericSend+0x74>
 8018efe:	2600      	movs	r6, #0
 8018f00:	e03d      	b.n	8018f7e <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018f02:	462a      	mov	r2, r5
 8018f04:	4639      	mov	r1, r7
 8018f06:	4620      	mov	r0, r4
 8018f08:	f7ff fe79 	bl	8018bfe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018f0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018f0e:	b97b      	cbnz	r3, 8018f30 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8018f10:	b148      	cbz	r0, 8018f26 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8018f12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018f1e:	f3bf 8f4f 	dsb	sy
 8018f22:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8018f26:	f001 fcbf 	bl	801a8a8 <vPortExitCritical>
				return pdPASS;
 8018f2a:	2001      	movs	r0, #1
}
 8018f2c:	b005      	add	sp, #20
 8018f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018f30:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018f34:	f001 f860 	bl	8019ff8 <xTaskRemoveFromEventList>
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d0f4      	beq.n	8018f26 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8018f3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018f48:	f3bf 8f4f 	dsb	sy
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	e7e9      	b.n	8018f26 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8018f52:	f001 fca9 	bl	801a8a8 <vPortExitCritical>
					return errQUEUE_FULL;
 8018f56:	2000      	movs	r0, #0
 8018f58:	e7e8      	b.n	8018f2c <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018f5a:	a802      	add	r0, sp, #8
 8018f5c:	f001 f892 	bl	801a084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018f60:	2601      	movs	r6, #1
 8018f62:	e019      	b.n	8018f98 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8018f64:	2300      	movs	r3, #0
 8018f66:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018f6a:	e021      	b.n	8018fb0 <xQueueGenericSend+0x128>
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018f72:	e023      	b.n	8018fbc <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8018f74:	4620      	mov	r0, r4
 8018f76:	f7ff fe8f 	bl	8018c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018f7a:	f000 ff15 	bl	8019da8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8018f7e:	f001 fc71 	bl	801a864 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018f82:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018f84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018f86:	429a      	cmp	r2, r3
 8018f88:	d3bb      	bcc.n	8018f02 <xQueueGenericSend+0x7a>
 8018f8a:	2d02      	cmp	r5, #2
 8018f8c:	d0b9      	beq.n	8018f02 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018f8e:	9b01      	ldr	r3, [sp, #4]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d0de      	beq.n	8018f52 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8018f94:	2e00      	cmp	r6, #0
 8018f96:	d0e0      	beq.n	8018f5a <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8018f98:	f001 fc86 	bl	801a8a8 <vPortExitCritical>
		vTaskSuspendAll();
 8018f9c:	f000 fe6a 	bl	8019c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018fa0:	f001 fc60 	bl	801a864 <vPortEnterCritical>
 8018fa4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8018fa8:	b252      	sxtb	r2, r2
 8018faa:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018fae:	d0d9      	beq.n	8018f64 <xQueueGenericSend+0xdc>
 8018fb0:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8018fb4:	b252      	sxtb	r2, r2
 8018fb6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018fba:	d0d7      	beq.n	8018f6c <xQueueGenericSend+0xe4>
 8018fbc:	f001 fc74 	bl	801a8a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018fc0:	a901      	add	r1, sp, #4
 8018fc2:	a802      	add	r0, sp, #8
 8018fc4:	f001 f86a 	bl	801a09c <xTaskCheckForTimeOut>
 8018fc8:	b9d8      	cbnz	r0, 8019002 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018fca:	4620      	mov	r0, r4
 8018fcc:	f7ff fdfb 	bl	8018bc6 <prvIsQueueFull>
 8018fd0:	2800      	cmp	r0, #0
 8018fd2:	d0cf      	beq.n	8018f74 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018fd4:	9901      	ldr	r1, [sp, #4]
 8018fd6:	f104 0010 	add.w	r0, r4, #16
 8018fda:	f000 ffd9 	bl	8019f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018fde:	4620      	mov	r0, r4
 8018fe0:	f7ff fe5a 	bl	8018c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018fe4:	f000 fee0 	bl	8019da8 <xTaskResumeAll>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d1c8      	bne.n	8018f7e <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8018fec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ff4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018ff8:	f3bf 8f4f 	dsb	sy
 8018ffc:	f3bf 8f6f 	isb	sy
 8019000:	e7bd      	b.n	8018f7e <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8019002:	4620      	mov	r0, r4
 8019004:	f7ff fe48 	bl	8018c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019008:	f000 fece 	bl	8019da8 <xTaskResumeAll>
			return errQUEUE_FULL;
 801900c:	2000      	movs	r0, #0
 801900e:	e78d      	b.n	8018f2c <xQueueGenericSend+0xa4>

08019010 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8019010:	b148      	cbz	r0, 8019026 <prvInitialiseMutex+0x16>
	{
 8019012:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019014:	2100      	movs	r1, #0
 8019016:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019018:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801901a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801901c:	460b      	mov	r3, r1
 801901e:	460a      	mov	r2, r1
 8019020:	f7ff ff32 	bl	8018e88 <xQueueGenericSend>
	}
 8019024:	bd08      	pop	{r3, pc}
 8019026:	4770      	bx	lr

08019028 <xQueueCreateMutex>:
	{
 8019028:	b510      	push	{r4, lr}
 801902a:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801902c:	2100      	movs	r1, #0
 801902e:	2001      	movs	r0, #1
 8019030:	f7ff ff06 	bl	8018e40 <xQueueGenericCreate>
 8019034:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019036:	f7ff ffeb 	bl	8019010 <prvInitialiseMutex>
	}
 801903a:	4620      	mov	r0, r4
 801903c:	bd10      	pop	{r4, pc}

0801903e <xQueueCreateMutexStatic>:
	{
 801903e:	b510      	push	{r4, lr}
 8019040:	b082      	sub	sp, #8
 8019042:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019044:	9000      	str	r0, [sp, #0]
 8019046:	2200      	movs	r2, #0
 8019048:	4611      	mov	r1, r2
 801904a:	2001      	movs	r0, #1
 801904c:	f7ff feae 	bl	8018dac <xQueueGenericCreateStatic>
 8019050:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019052:	f7ff ffdd 	bl	8019010 <prvInitialiseMutex>
	}
 8019056:	4620      	mov	r0, r4
 8019058:	b002      	add	sp, #8
 801905a:	bd10      	pop	{r4, pc}

0801905c <xQueueGiveMutexRecursive>:
	{
 801905c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 801905e:	b138      	cbz	r0, 8019070 <xQueueGiveMutexRecursive+0x14>
 8019060:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019062:	6885      	ldr	r5, [r0, #8]
 8019064:	f001 f862 	bl	801a12c <xTaskGetCurrentTaskHandle>
 8019068:	4285      	cmp	r5, r0
 801906a:	d00a      	beq.n	8019082 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 801906c:	2000      	movs	r0, #0
	}
 801906e:	bd38      	pop	{r3, r4, r5, pc}
 8019070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019074:	f383 8811 	msr	BASEPRI, r3
 8019078:	f3bf 8f6f 	isb	sy
 801907c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8019080:	e7fe      	b.n	8019080 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8019082:	68e3      	ldr	r3, [r4, #12]
 8019084:	3b01      	subs	r3, #1
 8019086:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8019088:	b10b      	cbz	r3, 801908e <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 801908a:	2001      	movs	r0, #1
		return xReturn;
 801908c:	e7ef      	b.n	801906e <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801908e:	461a      	mov	r2, r3
 8019090:	4619      	mov	r1, r3
 8019092:	4620      	mov	r0, r4
 8019094:	f7ff fef8 	bl	8018e88 <xQueueGenericSend>
			xReturn = pdPASS;
 8019098:	2001      	movs	r0, #1
 801909a:	e7e8      	b.n	801906e <xQueueGiveMutexRecursive+0x12>

0801909c <xQueueGenericSendFromISR>:
{
 801909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80190a0:	b190      	cbz	r0, 80190c8 <xQueueGenericSendFromISR+0x2c>
 80190a2:	460f      	mov	r7, r1
 80190a4:	4616      	mov	r6, r2
 80190a6:	461c      	mov	r4, r3
 80190a8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80190aa:	b1b1      	cbz	r1, 80190da <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80190ac:	2c02      	cmp	r4, #2
 80190ae:	d120      	bne.n	80190f2 <xQueueGenericSendFromISR+0x56>
 80190b0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d01d      	beq.n	80190f2 <xQueueGenericSendFromISR+0x56>
 80190b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190ba:	f383 8811 	msr	BASEPRI, r3
 80190be:	f3bf 8f6f 	isb	sy
 80190c2:	f3bf 8f4f 	dsb	sy
 80190c6:	e7fe      	b.n	80190c6 <xQueueGenericSendFromISR+0x2a>
 80190c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190cc:	f383 8811 	msr	BASEPRI, r3
 80190d0:	f3bf 8f6f 	isb	sy
 80190d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80190d8:	e7fe      	b.n	80190d8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80190da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d0e5      	beq.n	80190ac <xQueueGenericSendFromISR+0x10>
 80190e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190e4:	f383 8811 	msr	BASEPRI, r3
 80190e8:	f3bf 8f6f 	isb	sy
 80190ec:	f3bf 8f4f 	dsb	sy
 80190f0:	e7fe      	b.n	80190f0 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80190f2:	f001 fcdd 	bl	801aab0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80190f6:	f3ef 8811 	mrs	r8, BASEPRI
 80190fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190fe:	f383 8811 	msr	BASEPRI, r3
 8019102:	f3bf 8f6f 	isb	sy
 8019106:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801910a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 801910c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801910e:	429a      	cmp	r2, r3
 8019110:	d306      	bcc.n	8019120 <xQueueGenericSendFromISR+0x84>
 8019112:	2c02      	cmp	r4, #2
 8019114:	d004      	beq.n	8019120 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8019116:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019118:	f388 8811 	msr	BASEPRI, r8
}
 801911c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8019120:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8019124:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019128:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801912a:	4622      	mov	r2, r4
 801912c:	4639      	mov	r1, r7
 801912e:	4628      	mov	r0, r5
 8019130:	f7ff fd65 	bl	8018bfe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8019134:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019138:	d006      	beq.n	8019148 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801913a:	f109 0301 	add.w	r3, r9, #1
 801913e:	b25b      	sxtb	r3, r3
 8019140:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8019144:	2001      	movs	r0, #1
 8019146:	e7e7      	b.n	8019118 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019148:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801914a:	b90b      	cbnz	r3, 8019150 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 801914c:	2001      	movs	r0, #1
 801914e:	e7e3      	b.n	8019118 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019150:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8019154:	f000 ff50 	bl	8019ff8 <xTaskRemoveFromEventList>
 8019158:	b118      	cbz	r0, 8019162 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 801915a:	b126      	cbz	r6, 8019166 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801915c:	2001      	movs	r0, #1
 801915e:	6030      	str	r0, [r6, #0]
 8019160:	e7da      	b.n	8019118 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8019162:	2001      	movs	r0, #1
 8019164:	e7d8      	b.n	8019118 <xQueueGenericSendFromISR+0x7c>
 8019166:	2001      	movs	r0, #1
 8019168:	e7d6      	b.n	8019118 <xQueueGenericSendFromISR+0x7c>

0801916a <xQueueReceive>:
{
 801916a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801916c:	b085      	sub	sp, #20
 801916e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8019170:	b190      	cbz	r0, 8019198 <xQueueReceive+0x2e>
 8019172:	460f      	mov	r7, r1
 8019174:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019176:	b1c1      	cbz	r1, 80191aa <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019178:	f000 ffde 	bl	801a138 <xTaskGetSchedulerState>
 801917c:	4606      	mov	r6, r0
 801917e:	bb00      	cbnz	r0, 80191c2 <xQueueReceive+0x58>
 8019180:	9b01      	ldr	r3, [sp, #4]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d05e      	beq.n	8019244 <xQueueReceive+0xda>
	__asm volatile
 8019186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801918a:	f383 8811 	msr	BASEPRI, r3
 801918e:	f3bf 8f6f 	isb	sy
 8019192:	f3bf 8f4f 	dsb	sy
 8019196:	e7fe      	b.n	8019196 <xQueueReceive+0x2c>
 8019198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801919c:	f383 8811 	msr	BASEPRI, r3
 80191a0:	f3bf 8f6f 	isb	sy
 80191a4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80191a8:	e7fe      	b.n	80191a8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80191aa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d0e3      	beq.n	8019178 <xQueueReceive+0xe>
 80191b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191b4:	f383 8811 	msr	BASEPRI, r3
 80191b8:	f3bf 8f6f 	isb	sy
 80191bc:	f3bf 8f4f 	dsb	sy
 80191c0:	e7fe      	b.n	80191c0 <xQueueReceive+0x56>
 80191c2:	2600      	movs	r6, #0
 80191c4:	e03e      	b.n	8019244 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80191c6:	4639      	mov	r1, r7
 80191c8:	4620      	mov	r0, r4
 80191ca:	f7ff fd53 	bl	8018c74 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80191ce:	3d01      	subs	r5, #1
 80191d0:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80191d2:	6923      	ldr	r3, [r4, #16]
 80191d4:	b923      	cbnz	r3, 80191e0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80191d6:	f001 fb67 	bl	801a8a8 <vPortExitCritical>
				return pdPASS;
 80191da:	2001      	movs	r0, #1
}
 80191dc:	b005      	add	sp, #20
 80191de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80191e0:	f104 0010 	add.w	r0, r4, #16
 80191e4:	f000 ff08 	bl	8019ff8 <xTaskRemoveFromEventList>
 80191e8:	2800      	cmp	r0, #0
 80191ea:	d0f4      	beq.n	80191d6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80191ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80191f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80191f8:	f3bf 8f4f 	dsb	sy
 80191fc:	f3bf 8f6f 	isb	sy
 8019200:	e7e9      	b.n	80191d6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8019202:	f001 fb51 	bl	801a8a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8019206:	2000      	movs	r0, #0
 8019208:	e7e8      	b.n	80191dc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801920a:	a802      	add	r0, sp, #8
 801920c:	f000 ff3a 	bl	801a084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019210:	2601      	movs	r6, #1
 8019212:	e021      	b.n	8019258 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8019214:	2300      	movs	r3, #0
 8019216:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801921a:	e029      	b.n	8019270 <xQueueReceive+0x106>
 801921c:	2300      	movs	r3, #0
 801921e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019222:	e02b      	b.n	801927c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8019224:	4620      	mov	r0, r4
 8019226:	f7ff fd37 	bl	8018c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801922a:	f000 fdbd 	bl	8019da8 <xTaskResumeAll>
 801922e:	e009      	b.n	8019244 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8019230:	4620      	mov	r0, r4
 8019232:	f7ff fd31 	bl	8018c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019236:	f000 fdb7 	bl	8019da8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801923a:	4620      	mov	r0, r4
 801923c:	f7ff fcd2 	bl	8018be4 <prvIsQueueEmpty>
 8019240:	2800      	cmp	r0, #0
 8019242:	d13f      	bne.n	80192c4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8019244:	f001 fb0e 	bl	801a864 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019248:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801924a:	2d00      	cmp	r5, #0
 801924c:	d1bb      	bne.n	80191c6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801924e:	9b01      	ldr	r3, [sp, #4]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d0d6      	beq.n	8019202 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8019254:	2e00      	cmp	r6, #0
 8019256:	d0d8      	beq.n	801920a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8019258:	f001 fb26 	bl	801a8a8 <vPortExitCritical>
		vTaskSuspendAll();
 801925c:	f000 fd0a 	bl	8019c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019260:	f001 fb00 	bl	801a864 <vPortEnterCritical>
 8019264:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019268:	b25b      	sxtb	r3, r3
 801926a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801926e:	d0d1      	beq.n	8019214 <xQueueReceive+0xaa>
 8019270:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019274:	b25b      	sxtb	r3, r3
 8019276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801927a:	d0cf      	beq.n	801921c <xQueueReceive+0xb2>
 801927c:	f001 fb14 	bl	801a8a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019280:	a901      	add	r1, sp, #4
 8019282:	a802      	add	r0, sp, #8
 8019284:	f000 ff0a 	bl	801a09c <xTaskCheckForTimeOut>
 8019288:	2800      	cmp	r0, #0
 801928a:	d1d1      	bne.n	8019230 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801928c:	4620      	mov	r0, r4
 801928e:	f7ff fca9 	bl	8018be4 <prvIsQueueEmpty>
 8019292:	2800      	cmp	r0, #0
 8019294:	d0c6      	beq.n	8019224 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019296:	9901      	ldr	r1, [sp, #4]
 8019298:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801929c:	f000 fe78 	bl	8019f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80192a0:	4620      	mov	r0, r4
 80192a2:	f7ff fcf9 	bl	8018c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80192a6:	f000 fd7f 	bl	8019da8 <xTaskResumeAll>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	d1ca      	bne.n	8019244 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80192ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80192b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80192b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80192ba:	f3bf 8f4f 	dsb	sy
 80192be:	f3bf 8f6f 	isb	sy
 80192c2:	e7bf      	b.n	8019244 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80192c4:	2000      	movs	r0, #0
 80192c6:	e789      	b.n	80191dc <xQueueReceive+0x72>

080192c8 <xQueueSemaphoreTake>:
{
 80192c8:	b570      	push	{r4, r5, r6, lr}
 80192ca:	b084      	sub	sp, #16
 80192cc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80192ce:	b158      	cbz	r0, 80192e8 <xQueueSemaphoreTake+0x20>
 80192d0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80192d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80192d4:	b18b      	cbz	r3, 80192fa <xQueueSemaphoreTake+0x32>
 80192d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192da:	f383 8811 	msr	BASEPRI, r3
 80192de:	f3bf 8f6f 	isb	sy
 80192e2:	f3bf 8f4f 	dsb	sy
 80192e6:	e7fe      	b.n	80192e6 <xQueueSemaphoreTake+0x1e>
 80192e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192ec:	f383 8811 	msr	BASEPRI, r3
 80192f0:	f3bf 8f6f 	isb	sy
 80192f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80192f8:	e7fe      	b.n	80192f8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80192fa:	f000 ff1d 	bl	801a138 <xTaskGetSchedulerState>
 80192fe:	4605      	mov	r5, r0
 8019300:	b950      	cbnz	r0, 8019318 <xQueueSemaphoreTake+0x50>
 8019302:	9b01      	ldr	r3, [sp, #4]
 8019304:	b15b      	cbz	r3, 801931e <xQueueSemaphoreTake+0x56>
 8019306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801930a:	f383 8811 	msr	BASEPRI, r3
 801930e:	f3bf 8f6f 	isb	sy
 8019312:	f3bf 8f4f 	dsb	sy
 8019316:	e7fe      	b.n	8019316 <xQueueSemaphoreTake+0x4e>
 8019318:	2600      	movs	r6, #0
 801931a:	4635      	mov	r5, r6
 801931c:	e055      	b.n	80193ca <xQueueSemaphoreTake+0x102>
 801931e:	4606      	mov	r6, r0
 8019320:	e053      	b.n	80193ca <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019322:	3b01      	subs	r3, #1
 8019324:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019326:	6823      	ldr	r3, [r4, #0]
 8019328:	b13b      	cbz	r3, 801933a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801932a:	6923      	ldr	r3, [r4, #16]
 801932c:	b94b      	cbnz	r3, 8019342 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 801932e:	f001 fabb 	bl	801a8a8 <vPortExitCritical>
				return pdPASS;
 8019332:	2601      	movs	r6, #1
}
 8019334:	4630      	mov	r0, r6
 8019336:	b004      	add	sp, #16
 8019338:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801933a:	f000 fff1 	bl	801a320 <pvTaskIncrementMutexHeldCount>
 801933e:	60a0      	str	r0, [r4, #8]
 8019340:	e7f3      	b.n	801932a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019342:	f104 0010 	add.w	r0, r4, #16
 8019346:	f000 fe57 	bl	8019ff8 <xTaskRemoveFromEventList>
 801934a:	2800      	cmp	r0, #0
 801934c:	d0ef      	beq.n	801932e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801934e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019356:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801935a:	f3bf 8f4f 	dsb	sy
 801935e:	f3bf 8f6f 	isb	sy
 8019362:	e7e4      	b.n	801932e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019364:	b146      	cbz	r6, 8019378 <xQueueSemaphoreTake+0xb0>
 8019366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801936a:	f383 8811 	msr	BASEPRI, r3
 801936e:	f3bf 8f6f 	isb	sy
 8019372:	f3bf 8f4f 	dsb	sy
 8019376:	e7fe      	b.n	8019376 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8019378:	f001 fa96 	bl	801a8a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801937c:	e7da      	b.n	8019334 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801937e:	a802      	add	r0, sp, #8
 8019380:	f000 fe80 	bl	801a084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019384:	2501      	movs	r5, #1
 8019386:	e02a      	b.n	80193de <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8019388:	2300      	movs	r3, #0
 801938a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801938e:	e032      	b.n	80193f6 <xQueueSemaphoreTake+0x12e>
 8019390:	2300      	movs	r3, #0
 8019392:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019396:	e034      	b.n	8019402 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8019398:	f001 fa64 	bl	801a864 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801939c:	68a0      	ldr	r0, [r4, #8]
 801939e:	f000 fedb 	bl	801a158 <xTaskPriorityInherit>
 80193a2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80193a4:	f001 fa80 	bl	801a8a8 <vPortExitCritical>
 80193a8:	e03b      	b.n	8019422 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80193aa:	4620      	mov	r0, r4
 80193ac:	f7ff fc74 	bl	8018c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80193b0:	f000 fcfa 	bl	8019da8 <xTaskResumeAll>
 80193b4:	e009      	b.n	80193ca <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80193b6:	4620      	mov	r0, r4
 80193b8:	f7ff fc6e 	bl	8018c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80193bc:	f000 fcf4 	bl	8019da8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80193c0:	4620      	mov	r0, r4
 80193c2:	f7ff fc0f 	bl	8018be4 <prvIsQueueEmpty>
 80193c6:	2800      	cmp	r0, #0
 80193c8:	d142      	bne.n	8019450 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80193ca:	f001 fa4b 	bl	801a864 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80193ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d1a6      	bne.n	8019322 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80193d4:	9b01      	ldr	r3, [sp, #4]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d0c4      	beq.n	8019364 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80193da:	2d00      	cmp	r5, #0
 80193dc:	d0cf      	beq.n	801937e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80193de:	f001 fa63 	bl	801a8a8 <vPortExitCritical>
		vTaskSuspendAll();
 80193e2:	f000 fc47 	bl	8019c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80193e6:	f001 fa3d 	bl	801a864 <vPortEnterCritical>
 80193ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80193ee:	b25b      	sxtb	r3, r3
 80193f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80193f4:	d0c8      	beq.n	8019388 <xQueueSemaphoreTake+0xc0>
 80193f6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80193fa:	b25b      	sxtb	r3, r3
 80193fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019400:	d0c6      	beq.n	8019390 <xQueueSemaphoreTake+0xc8>
 8019402:	f001 fa51 	bl	801a8a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019406:	a901      	add	r1, sp, #4
 8019408:	a802      	add	r0, sp, #8
 801940a:	f000 fe47 	bl	801a09c <xTaskCheckForTimeOut>
 801940e:	2800      	cmp	r0, #0
 8019410:	d1d1      	bne.n	80193b6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019412:	4620      	mov	r0, r4
 8019414:	f7ff fbe6 	bl	8018be4 <prvIsQueueEmpty>
 8019418:	2800      	cmp	r0, #0
 801941a:	d0c6      	beq.n	80193aa <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d0ba      	beq.n	8019398 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019422:	9901      	ldr	r1, [sp, #4]
 8019424:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019428:	f000 fdb2 	bl	8019f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801942c:	4620      	mov	r0, r4
 801942e:	f7ff fc33 	bl	8018c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019432:	f000 fcb9 	bl	8019da8 <xTaskResumeAll>
 8019436:	2800      	cmp	r0, #0
 8019438:	d1c7      	bne.n	80193ca <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801943a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801943e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019442:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019446:	f3bf 8f4f 	dsb	sy
 801944a:	f3bf 8f6f 	isb	sy
 801944e:	e7bc      	b.n	80193ca <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8019450:	b90e      	cbnz	r6, 8019456 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8019452:	2600      	movs	r6, #0
 8019454:	e76e      	b.n	8019334 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8019456:	f001 fa05 	bl	801a864 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801945a:	4620      	mov	r0, r4
 801945c:	f7ff fbab 	bl	8018bb6 <prvGetDisinheritPriorityAfterTimeout>
 8019460:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019462:	68a0      	ldr	r0, [r4, #8]
 8019464:	f000 ff0c 	bl	801a280 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8019468:	f001 fa1e 	bl	801a8a8 <vPortExitCritical>
 801946c:	e7f1      	b.n	8019452 <xQueueSemaphoreTake+0x18a>

0801946e <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 801946e:	b180      	cbz	r0, 8019492 <xQueueTakeMutexRecursive+0x24>
	{
 8019470:	b570      	push	{r4, r5, r6, lr}
 8019472:	460c      	mov	r4, r1
 8019474:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019476:	6886      	ldr	r6, [r0, #8]
 8019478:	f000 fe58 	bl	801a12c <xTaskGetCurrentTaskHandle>
 801947c:	4286      	cmp	r6, r0
 801947e:	d011      	beq.n	80194a4 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019480:	4621      	mov	r1, r4
 8019482:	4628      	mov	r0, r5
 8019484:	f7ff ff20 	bl	80192c8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8019488:	b180      	cbz	r0, 80194ac <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801948a:	68eb      	ldr	r3, [r5, #12]
 801948c:	3301      	adds	r3, #1
 801948e:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8019490:	e00c      	b.n	80194ac <xQueueTakeMutexRecursive+0x3e>
 8019492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019496:	f383 8811 	msr	BASEPRI, r3
 801949a:	f3bf 8f6f 	isb	sy
 801949e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80194a2:	e7fe      	b.n	80194a2 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80194a4:	68eb      	ldr	r3, [r5, #12]
 80194a6:	3301      	adds	r3, #1
 80194a8:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80194aa:	2001      	movs	r0, #1
	}
 80194ac:	bd70      	pop	{r4, r5, r6, pc}

080194ae <xQueuePeek>:
{
 80194ae:	b570      	push	{r4, r5, r6, lr}
 80194b0:	b084      	sub	sp, #16
 80194b2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80194b4:	b190      	cbz	r0, 80194dc <xQueuePeek+0x2e>
 80194b6:	460e      	mov	r6, r1
 80194b8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80194ba:	b1c1      	cbz	r1, 80194ee <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80194bc:	f000 fe3c 	bl	801a138 <xTaskGetSchedulerState>
 80194c0:	4605      	mov	r5, r0
 80194c2:	bb00      	cbnz	r0, 8019506 <xQueuePeek+0x58>
 80194c4:	9b01      	ldr	r3, [sp, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d05e      	beq.n	8019588 <xQueuePeek+0xda>
 80194ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194ce:	f383 8811 	msr	BASEPRI, r3
 80194d2:	f3bf 8f6f 	isb	sy
 80194d6:	f3bf 8f4f 	dsb	sy
 80194da:	e7fe      	b.n	80194da <xQueuePeek+0x2c>
 80194dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194e0:	f383 8811 	msr	BASEPRI, r3
 80194e4:	f3bf 8f6f 	isb	sy
 80194e8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80194ec:	e7fe      	b.n	80194ec <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80194ee:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d0e3      	beq.n	80194bc <xQueuePeek+0xe>
 80194f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194f8:	f383 8811 	msr	BASEPRI, r3
 80194fc:	f3bf 8f6f 	isb	sy
 8019500:	f3bf 8f4f 	dsb	sy
 8019504:	e7fe      	b.n	8019504 <xQueuePeek+0x56>
 8019506:	2500      	movs	r5, #0
 8019508:	e03e      	b.n	8019588 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801950a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801950c:	4631      	mov	r1, r6
 801950e:	4620      	mov	r0, r4
 8019510:	f7ff fbb0 	bl	8018c74 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8019514:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019516:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019518:	b923      	cbnz	r3, 8019524 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 801951a:	f001 f9c5 	bl	801a8a8 <vPortExitCritical>
				return pdPASS;
 801951e:	2001      	movs	r0, #1
}
 8019520:	b004      	add	sp, #16
 8019522:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019524:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019528:	f000 fd66 	bl	8019ff8 <xTaskRemoveFromEventList>
 801952c:	2800      	cmp	r0, #0
 801952e:	d0f4      	beq.n	801951a <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8019530:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019538:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801953c:	f3bf 8f4f 	dsb	sy
 8019540:	f3bf 8f6f 	isb	sy
 8019544:	e7e9      	b.n	801951a <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 8019546:	f001 f9af 	bl	801a8a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801954a:	2000      	movs	r0, #0
 801954c:	e7e8      	b.n	8019520 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801954e:	a802      	add	r0, sp, #8
 8019550:	f000 fd98 	bl	801a084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019554:	2501      	movs	r5, #1
 8019556:	e021      	b.n	801959c <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8019558:	2300      	movs	r3, #0
 801955a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801955e:	e029      	b.n	80195b4 <xQueuePeek+0x106>
 8019560:	2300      	movs	r3, #0
 8019562:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019566:	e02b      	b.n	80195c0 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8019568:	4620      	mov	r0, r4
 801956a:	f7ff fb95 	bl	8018c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801956e:	f000 fc1b 	bl	8019da8 <xTaskResumeAll>
 8019572:	e009      	b.n	8019588 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8019574:	4620      	mov	r0, r4
 8019576:	f7ff fb8f 	bl	8018c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801957a:	f000 fc15 	bl	8019da8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801957e:	4620      	mov	r0, r4
 8019580:	f7ff fb30 	bl	8018be4 <prvIsQueueEmpty>
 8019584:	2800      	cmp	r0, #0
 8019586:	d13f      	bne.n	8019608 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8019588:	f001 f96c 	bl	801a864 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801958c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801958e:	2b00      	cmp	r3, #0
 8019590:	d1bb      	bne.n	801950a <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019592:	9b01      	ldr	r3, [sp, #4]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d0d6      	beq.n	8019546 <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8019598:	2d00      	cmp	r5, #0
 801959a:	d0d8      	beq.n	801954e <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 801959c:	f001 f984 	bl	801a8a8 <vPortExitCritical>
		vTaskSuspendAll();
 80195a0:	f000 fb68 	bl	8019c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80195a4:	f001 f95e 	bl	801a864 <vPortEnterCritical>
 80195a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80195ac:	b25b      	sxtb	r3, r3
 80195ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80195b2:	d0d1      	beq.n	8019558 <xQueuePeek+0xaa>
 80195b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80195b8:	b25b      	sxtb	r3, r3
 80195ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80195be:	d0cf      	beq.n	8019560 <xQueuePeek+0xb2>
 80195c0:	f001 f972 	bl	801a8a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80195c4:	a901      	add	r1, sp, #4
 80195c6:	a802      	add	r0, sp, #8
 80195c8:	f000 fd68 	bl	801a09c <xTaskCheckForTimeOut>
 80195cc:	2800      	cmp	r0, #0
 80195ce:	d1d1      	bne.n	8019574 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80195d0:	4620      	mov	r0, r4
 80195d2:	f7ff fb07 	bl	8018be4 <prvIsQueueEmpty>
 80195d6:	2800      	cmp	r0, #0
 80195d8:	d0c6      	beq.n	8019568 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80195da:	9901      	ldr	r1, [sp, #4]
 80195dc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80195e0:	f000 fcd6 	bl	8019f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80195e4:	4620      	mov	r0, r4
 80195e6:	f7ff fb57 	bl	8018c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80195ea:	f000 fbdd 	bl	8019da8 <xTaskResumeAll>
 80195ee:	2800      	cmp	r0, #0
 80195f0:	d1ca      	bne.n	8019588 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 80195f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80195f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80195fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80195fe:	f3bf 8f4f 	dsb	sy
 8019602:	f3bf 8f6f 	isb	sy
 8019606:	e7bf      	b.n	8019588 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8019608:	2000      	movs	r0, #0
 801960a:	e789      	b.n	8019520 <xQueuePeek+0x72>

0801960c <xQueueReceiveFromISR>:
{
 801960c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019610:	b1b0      	cbz	r0, 8019640 <xQueueReceiveFromISR+0x34>
 8019612:	460d      	mov	r5, r1
 8019614:	4690      	mov	r8, r2
 8019616:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019618:	b1d9      	cbz	r1, 8019652 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801961a:	f001 fa49 	bl	801aab0 <vPortValidateInterruptPriority>
	__asm volatile
 801961e:	f3ef 8711 	mrs	r7, BASEPRI
 8019622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019626:	f383 8811 	msr	BASEPRI, r3
 801962a:	f3bf 8f6f 	isb	sy
 801962e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019632:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019634:	b9ce      	cbnz	r6, 801966a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8019636:	2000      	movs	r0, #0
	__asm volatile
 8019638:	f387 8811 	msr	BASEPRI, r7
}
 801963c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8019640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019644:	f383 8811 	msr	BASEPRI, r3
 8019648:	f3bf 8f6f 	isb	sy
 801964c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019650:	e7fe      	b.n	8019650 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019652:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019654:	2b00      	cmp	r3, #0
 8019656:	d0e0      	beq.n	801961a <xQueueReceiveFromISR+0xe>
 8019658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801965c:	f383 8811 	msr	BASEPRI, r3
 8019660:	f3bf 8f6f 	isb	sy
 8019664:	f3bf 8f4f 	dsb	sy
 8019668:	e7fe      	b.n	8019668 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 801966a:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 801966e:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019672:	4629      	mov	r1, r5
 8019674:	4620      	mov	r0, r4
 8019676:	f7ff fafd 	bl	8018c74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801967a:	1e73      	subs	r3, r6, #1
 801967c:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 801967e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8019682:	d006      	beq.n	8019692 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019684:	f109 0301 	add.w	r3, r9, #1
 8019688:	b25b      	sxtb	r3, r3
 801968a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 801968e:	2001      	movs	r0, #1
 8019690:	e7d2      	b.n	8019638 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019692:	6923      	ldr	r3, [r4, #16]
 8019694:	b90b      	cbnz	r3, 801969a <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8019696:	2001      	movs	r0, #1
 8019698:	e7ce      	b.n	8019638 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801969a:	f104 0010 	add.w	r0, r4, #16
 801969e:	f000 fcab 	bl	8019ff8 <xTaskRemoveFromEventList>
 80196a2:	b130      	cbz	r0, 80196b2 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80196a4:	f1b8 0f00 	cmp.w	r8, #0
 80196a8:	d005      	beq.n	80196b6 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80196aa:	2001      	movs	r0, #1
 80196ac:	f8c8 0000 	str.w	r0, [r8]
 80196b0:	e7c2      	b.n	8019638 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80196b2:	2001      	movs	r0, #1
 80196b4:	e7c0      	b.n	8019638 <xQueueReceiveFromISR+0x2c>
 80196b6:	2001      	movs	r0, #1
 80196b8:	e7be      	b.n	8019638 <xQueueReceiveFromISR+0x2c>

080196ba <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80196ba:	b140      	cbz	r0, 80196ce <uxQueueMessagesWaiting+0x14>
{
 80196bc:	b510      	push	{r4, lr}
 80196be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80196c0:	f001 f8d0 	bl	801a864 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80196c4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80196c6:	f001 f8ef 	bl	801a8a8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80196ca:	4620      	mov	r0, r4
 80196cc:	bd10      	pop	{r4, pc}
 80196ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196d2:	f383 8811 	msr	BASEPRI, r3
 80196d6:	f3bf 8f6f 	isb	sy
 80196da:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80196de:	e7fe      	b.n	80196de <uxQueueMessagesWaiting+0x24>

080196e0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80196e0:	b108      	cbz	r0, 80196e6 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80196e2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80196e4:	4770      	bx	lr
 80196e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80196ea:	f383 8811 	msr	BASEPRI, r3
 80196ee:	f3bf 8f6f 	isb	sy
 80196f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80196f6:	e7fe      	b.n	80196f6 <uxQueueMessagesWaitingFromISR+0x16>

080196f8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80196f8:	2300      	movs	r3, #0
 80196fa:	2b07      	cmp	r3, #7
 80196fc:	d80c      	bhi.n	8019718 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80196fe:	4a07      	ldr	r2, [pc, #28]	@ (801971c <vQueueAddToRegistry+0x24>)
 8019700:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019704:	b10a      	cbz	r2, 801970a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019706:	3301      	adds	r3, #1
 8019708:	e7f7      	b.n	80196fa <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801970a:	4a04      	ldr	r2, [pc, #16]	@ (801971c <vQueueAddToRegistry+0x24>)
 801970c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019710:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019714:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019716:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019718:	4770      	bx	lr
 801971a:	bf00      	nop
 801971c:	20003674 	.word	0x20003674

08019720 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019720:	b570      	push	{r4, r5, r6, lr}
 8019722:	4604      	mov	r4, r0
 8019724:	460d      	mov	r5, r1
 8019726:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019728:	f001 f89c 	bl	801a864 <vPortEnterCritical>
 801972c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019730:	b25b      	sxtb	r3, r3
 8019732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019736:	d00d      	beq.n	8019754 <vQueueWaitForMessageRestricted+0x34>
 8019738:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801973c:	b25b      	sxtb	r3, r3
 801973e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019742:	d00b      	beq.n	801975c <vQueueWaitForMessageRestricted+0x3c>
 8019744:	f001 f8b0 	bl	801a8a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019748:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801974a:	b15b      	cbz	r3, 8019764 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801974c:	4620      	mov	r0, r4
 801974e:	f7ff faa3 	bl	8018c98 <prvUnlockQueue>
	}
 8019752:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8019754:	2300      	movs	r3, #0
 8019756:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801975a:	e7ed      	b.n	8019738 <vQueueWaitForMessageRestricted+0x18>
 801975c:	2300      	movs	r3, #0
 801975e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8019762:	e7ef      	b.n	8019744 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019764:	4632      	mov	r2, r6
 8019766:	4629      	mov	r1, r5
 8019768:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801976c:	f000 fc28 	bl	8019fc0 <vTaskPlaceOnEventListRestricted>
 8019770:	e7ec      	b.n	801974c <vQueueWaitForMessageRestricted+0x2c>
	...

08019774 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019774:	4b08      	ldr	r3, [pc, #32]	@ (8019798 <prvResetNextTaskUnblockTime+0x24>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	b923      	cbnz	r3, 8019786 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801977c:	4b07      	ldr	r3, [pc, #28]	@ (801979c <prvResetNextTaskUnblockTime+0x28>)
 801977e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019782:	601a      	str	r2, [r3, #0]
 8019784:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019786:	4b04      	ldr	r3, [pc, #16]	@ (8019798 <prvResetNextTaskUnblockTime+0x24>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	68db      	ldr	r3, [r3, #12]
 801978c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801978e:	685a      	ldr	r2, [r3, #4]
 8019790:	4b02      	ldr	r3, [pc, #8]	@ (801979c <prvResetNextTaskUnblockTime+0x28>)
 8019792:	601a      	str	r2, [r3, #0]
	}
}
 8019794:	4770      	bx	lr
 8019796:	bf00      	nop
 8019798:	20003724 	.word	0x20003724
 801979c:	200036bc 	.word	0x200036bc

080197a0 <prvInitialiseNewTask>:
{
 80197a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a4:	4680      	mov	r8, r0
 80197a6:	460d      	mov	r5, r1
 80197a8:	4617      	mov	r7, r2
 80197aa:	4699      	mov	r9, r3
 80197ac:	9e08      	ldr	r6, [sp, #32]
 80197ae:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80197b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80197b4:	0092      	lsls	r2, r2, #2
 80197b6:	21a5      	movs	r1, #165	@ 0xa5
 80197b8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80197ba:	f013 fa59 	bl	802cc70 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80197be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80197c0:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 80197c4:	3a01      	subs	r2, #1
 80197c6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80197ca:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80197ce:	2d00      	cmp	r5, #0
 80197d0:	d061      	beq.n	8019896 <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80197d2:	f04f 0c00 	mov.w	ip, #0
 80197d6:	f1bc 0f0f 	cmp.w	ip, #15
 80197da:	d809      	bhi.n	80197f0 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80197dc:	f815 300c 	ldrb.w	r3, [r5, ip]
 80197e0:	eb04 020c 	add.w	r2, r4, ip
 80197e4:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80197e8:	b113      	cbz	r3, 80197f0 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80197ea:	f10c 0c01 	add.w	ip, ip, #1
 80197ee:	e7f2      	b.n	80197d6 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80197f0:	2300      	movs	r3, #0
 80197f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80197f6:	2e37      	cmp	r6, #55	@ 0x37
 80197f8:	d900      	bls.n	80197fc <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80197fa:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 80197fc:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80197fe:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019800:	2500      	movs	r5, #0
 8019802:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019804:	1d20      	adds	r0, r4, #4
 8019806:	f7ff f99c 	bl	8018b42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801980a:	f104 0018 	add.w	r0, r4, #24
 801980e:	f7ff f998 	bl	8018b42 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019812:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019814:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8019818:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801981a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 801981c:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019820:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019824:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8019828:	4629      	mov	r1, r5
 801982a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801982e:	f013 fa1f 	bl	802cc70 <memset>
 8019832:	4b1b      	ldr	r3, [pc, #108]	@ (80198a0 <prvInitialiseNewTask+0x100>)
 8019834:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8019836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801983a:	6622      	str	r2, [r4, #96]	@ 0x60
 801983c:	33d0      	adds	r3, #208	@ 0xd0
 801983e:	6663      	str	r3, [r4, #100]	@ 0x64
 8019840:	2201      	movs	r2, #1
 8019842:	2300      	movs	r3, #0
 8019844:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8019848:	f243 330e 	movw	r3, #13070	@ 0x330e
 801984c:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8019850:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8019854:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8019858:	f241 2334 	movw	r3, #4660	@ 0x1234
 801985c:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8019860:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8019864:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8019868:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 801986c:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8019870:	2305      	movs	r3, #5
 8019872:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8019876:	230b      	movs	r3, #11
 8019878:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801987c:	464a      	mov	r2, r9
 801987e:	4641      	mov	r1, r8
 8019880:	4638      	mov	r0, r7
 8019882:	f000 ffc3 	bl	801a80c <pxPortInitialiseStack>
 8019886:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8019888:	f1ba 0f00 	cmp.w	sl, #0
 801988c:	d001      	beq.n	8019892 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801988e:	f8ca 4000 	str.w	r4, [sl]
}
 8019892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019896:	2300      	movs	r3, #0
 8019898:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 801989c:	e7ab      	b.n	80197f6 <prvInitialiseNewTask+0x56>
 801989e:	bf00      	nop
 80198a0:	20019f2c 	.word	0x20019f2c

080198a4 <prvInitialiseTaskLists>:
{
 80198a4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80198a6:	2400      	movs	r4, #0
 80198a8:	e007      	b.n	80198ba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80198aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80198ae:	0093      	lsls	r3, r2, #2
 80198b0:	480e      	ldr	r0, [pc, #56]	@ (80198ec <prvInitialiseTaskLists+0x48>)
 80198b2:	4418      	add	r0, r3
 80198b4:	f7ff f93a 	bl	8018b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80198b8:	3401      	adds	r4, #1
 80198ba:	2c37      	cmp	r4, #55	@ 0x37
 80198bc:	d9f5      	bls.n	80198aa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80198be:	4d0c      	ldr	r5, [pc, #48]	@ (80198f0 <prvInitialiseTaskLists+0x4c>)
 80198c0:	4628      	mov	r0, r5
 80198c2:	f7ff f933 	bl	8018b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80198c6:	4c0b      	ldr	r4, [pc, #44]	@ (80198f4 <prvInitialiseTaskLists+0x50>)
 80198c8:	4620      	mov	r0, r4
 80198ca:	f7ff f92f 	bl	8018b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80198ce:	480a      	ldr	r0, [pc, #40]	@ (80198f8 <prvInitialiseTaskLists+0x54>)
 80198d0:	f7ff f92c 	bl	8018b2c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80198d4:	4809      	ldr	r0, [pc, #36]	@ (80198fc <prvInitialiseTaskLists+0x58>)
 80198d6:	f7ff f929 	bl	8018b2c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80198da:	4809      	ldr	r0, [pc, #36]	@ (8019900 <prvInitialiseTaskLists+0x5c>)
 80198dc:	f7ff f926 	bl	8018b2c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80198e0:	4b08      	ldr	r3, [pc, #32]	@ (8019904 <prvInitialiseTaskLists+0x60>)
 80198e2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80198e4:	4b08      	ldr	r3, [pc, #32]	@ (8019908 <prvInitialiseTaskLists+0x64>)
 80198e6:	601c      	str	r4, [r3, #0]
}
 80198e8:	bd38      	pop	{r3, r4, r5, pc}
 80198ea:	bf00      	nop
 80198ec:	20003750 	.word	0x20003750
 80198f0:	2000373c 	.word	0x2000373c
 80198f4:	20003728 	.word	0x20003728
 80198f8:	2000370c 	.word	0x2000370c
 80198fc:	200036f8 	.word	0x200036f8
 8019900:	200036e0 	.word	0x200036e0
 8019904:	20003724 	.word	0x20003724
 8019908:	20003720 	.word	0x20003720

0801990c <prvAddNewTaskToReadyList>:
{
 801990c:	b510      	push	{r4, lr}
 801990e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019910:	f000 ffa8 	bl	801a864 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8019914:	4a22      	ldr	r2, [pc, #136]	@ (80199a0 <prvAddNewTaskToReadyList+0x94>)
 8019916:	6813      	ldr	r3, [r2, #0]
 8019918:	3301      	adds	r3, #1
 801991a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801991c:	4b21      	ldr	r3, [pc, #132]	@ (80199a4 <prvAddNewTaskToReadyList+0x98>)
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	b15b      	cbz	r3, 801993a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8019922:	4b21      	ldr	r3, [pc, #132]	@ (80199a8 <prvAddNewTaskToReadyList+0x9c>)
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	b96b      	cbnz	r3, 8019944 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019928:	4b1e      	ldr	r3, [pc, #120]	@ (80199a4 <prvAddNewTaskToReadyList+0x98>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801992e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019930:	429a      	cmp	r2, r3
 8019932:	d807      	bhi.n	8019944 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8019934:	4b1b      	ldr	r3, [pc, #108]	@ (80199a4 <prvAddNewTaskToReadyList+0x98>)
 8019936:	601c      	str	r4, [r3, #0]
 8019938:	e004      	b.n	8019944 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 801993a:	4b1a      	ldr	r3, [pc, #104]	@ (80199a4 <prvAddNewTaskToReadyList+0x98>)
 801993c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801993e:	6813      	ldr	r3, [r2, #0]
 8019940:	2b01      	cmp	r3, #1
 8019942:	d029      	beq.n	8019998 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8019944:	4a19      	ldr	r2, [pc, #100]	@ (80199ac <prvAddNewTaskToReadyList+0xa0>)
 8019946:	6813      	ldr	r3, [r2, #0]
 8019948:	3301      	adds	r3, #1
 801994a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801994c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801994e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019950:	4b17      	ldr	r3, [pc, #92]	@ (80199b0 <prvAddNewTaskToReadyList+0xa4>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	4298      	cmp	r0, r3
 8019956:	d901      	bls.n	801995c <prvAddNewTaskToReadyList+0x50>
 8019958:	4b15      	ldr	r3, [pc, #84]	@ (80199b0 <prvAddNewTaskToReadyList+0xa4>)
 801995a:	6018      	str	r0, [r3, #0]
 801995c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019960:	1d21      	adds	r1, r4, #4
 8019962:	4b14      	ldr	r3, [pc, #80]	@ (80199b4 <prvAddNewTaskToReadyList+0xa8>)
 8019964:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019968:	f7ff f8ee 	bl	8018b48 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801996c:	f000 ff9c 	bl	801a8a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8019970:	4b0d      	ldr	r3, [pc, #52]	@ (80199a8 <prvAddNewTaskToReadyList+0x9c>)
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	b17b      	cbz	r3, 8019996 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019976:	4b0b      	ldr	r3, [pc, #44]	@ (80199a4 <prvAddNewTaskToReadyList+0x98>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801997c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801997e:	429a      	cmp	r2, r3
 8019980:	d209      	bcs.n	8019996 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8019982:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801998a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801998e:	f3bf 8f4f 	dsb	sy
 8019992:	f3bf 8f6f 	isb	sy
}
 8019996:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8019998:	f7ff ff84 	bl	80198a4 <prvInitialiseTaskLists>
 801999c:	e7d2      	b.n	8019944 <prvAddNewTaskToReadyList+0x38>
 801999e:	bf00      	nop
 80199a0:	200036dc 	.word	0x200036dc
 80199a4:	20003bb0 	.word	0x20003bb0
 80199a8:	200036d0 	.word	0x200036d0
 80199ac:	200036c0 	.word	0x200036c0
 80199b0:	200036d4 	.word	0x200036d4
 80199b4:	20003750 	.word	0x20003750

080199b8 <prvDeleteTCB>:
	{
 80199b8:	b510      	push	{r4, lr}
 80199ba:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80199bc:	3058      	adds	r0, #88	@ 0x58
 80199be:	f014 faf9 	bl	802dfb4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80199c2:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 80199c6:	b163      	cbz	r3, 80199e2 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80199c8:	2b01      	cmp	r3, #1
 80199ca:	d011      	beq.n	80199f0 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80199cc:	2b02      	cmp	r3, #2
 80199ce:	d00e      	beq.n	80199ee <prvDeleteTCB+0x36>
 80199d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199d4:	f383 8811 	msr	BASEPRI, r3
 80199d8:	f3bf 8f6f 	isb	sy
 80199dc:	f3bf 8f4f 	dsb	sy
 80199e0:	e7fe      	b.n	80199e0 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80199e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80199e4:	f001 f97a 	bl	801acdc <vPortFree>
				vPortFree( pxTCB );
 80199e8:	4620      	mov	r0, r4
 80199ea:	f001 f977 	bl	801acdc <vPortFree>
	}
 80199ee:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80199f0:	4620      	mov	r0, r4
 80199f2:	f001 f973 	bl	801acdc <vPortFree>
 80199f6:	e7fa      	b.n	80199ee <prvDeleteTCB+0x36>

080199f8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80199f8:	4b0f      	ldr	r3, [pc, #60]	@ (8019a38 <prvCheckTasksWaitingTermination+0x40>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	b1d3      	cbz	r3, 8019a34 <prvCheckTasksWaitingTermination+0x3c>
{
 80199fe:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8019a00:	f000 ff30 	bl	801a864 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a04:	4b0d      	ldr	r3, [pc, #52]	@ (8019a3c <prvCheckTasksWaitingTermination+0x44>)
 8019a06:	68db      	ldr	r3, [r3, #12]
 8019a08:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019a0a:	1d20      	adds	r0, r4, #4
 8019a0c:	f7ff f8c0 	bl	8018b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019a10:	4a0b      	ldr	r2, [pc, #44]	@ (8019a40 <prvCheckTasksWaitingTermination+0x48>)
 8019a12:	6813      	ldr	r3, [r2, #0]
 8019a14:	3b01      	subs	r3, #1
 8019a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019a18:	4a07      	ldr	r2, [pc, #28]	@ (8019a38 <prvCheckTasksWaitingTermination+0x40>)
 8019a1a:	6813      	ldr	r3, [r2, #0]
 8019a1c:	3b01      	subs	r3, #1
 8019a1e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8019a20:	f000 ff42 	bl	801a8a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8019a24:	4620      	mov	r0, r4
 8019a26:	f7ff ffc7 	bl	80199b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019a2a:	4b03      	ldr	r3, [pc, #12]	@ (8019a38 <prvCheckTasksWaitingTermination+0x40>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d1e6      	bne.n	8019a00 <prvCheckTasksWaitingTermination+0x8>
}
 8019a32:	bd10      	pop	{r4, pc}
 8019a34:	4770      	bx	lr
 8019a36:	bf00      	nop
 8019a38:	200036f4 	.word	0x200036f4
 8019a3c:	200036f8 	.word	0x200036f8
 8019a40:	200036dc 	.word	0x200036dc

08019a44 <prvIdleTask>:
{
 8019a44:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8019a46:	f7ff ffd7 	bl	80199f8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019a4a:	4b07      	ldr	r3, [pc, #28]	@ (8019a68 <prvIdleTask+0x24>)
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	2b01      	cmp	r3, #1
 8019a50:	d9f9      	bls.n	8019a46 <prvIdleTask+0x2>
				taskYIELD();
 8019a52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019a5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019a5e:	f3bf 8f4f 	dsb	sy
 8019a62:	f3bf 8f6f 	isb	sy
 8019a66:	e7ee      	b.n	8019a46 <prvIdleTask+0x2>
 8019a68:	20003750 	.word	0x20003750

08019a6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019a6c:	b570      	push	{r4, r5, r6, lr}
 8019a6e:	4604      	mov	r4, r0
 8019a70:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019a72:	4b17      	ldr	r3, [pc, #92]	@ (8019ad0 <prvAddCurrentTaskToDelayedList+0x64>)
 8019a74:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019a76:	4b17      	ldr	r3, [pc, #92]	@ (8019ad4 <prvAddCurrentTaskToDelayedList+0x68>)
 8019a78:	6818      	ldr	r0, [r3, #0]
 8019a7a:	3004      	adds	r0, #4
 8019a7c:	f7ff f888 	bl	8018b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019a80:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019a84:	d00d      	beq.n	8019aa2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019a86:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019a88:	4b12      	ldr	r3, [pc, #72]	@ (8019ad4 <prvAddCurrentTaskToDelayedList+0x68>)
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8019a8e:	42a6      	cmp	r6, r4
 8019a90:	d910      	bls.n	8019ab4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019a92:	4b11      	ldr	r3, [pc, #68]	@ (8019ad8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8019a94:	6818      	ldr	r0, [r3, #0]
 8019a96:	4b0f      	ldr	r3, [pc, #60]	@ (8019ad4 <prvAddCurrentTaskToDelayedList+0x68>)
 8019a98:	6819      	ldr	r1, [r3, #0]
 8019a9a:	3104      	adds	r1, #4
 8019a9c:	f7ff f85f 	bl	8018b5e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019aa0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019aa2:	2d00      	cmp	r5, #0
 8019aa4:	d0ef      	beq.n	8019a86 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8019ad4 <prvAddCurrentTaskToDelayedList+0x68>)
 8019aa8:	6819      	ldr	r1, [r3, #0]
 8019aaa:	3104      	adds	r1, #4
 8019aac:	480b      	ldr	r0, [pc, #44]	@ (8019adc <prvAddCurrentTaskToDelayedList+0x70>)
 8019aae:	f7ff f84b 	bl	8018b48 <vListInsertEnd>
 8019ab2:	e7f5      	b.n	8019aa0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8019ae0 <prvAddCurrentTaskToDelayedList+0x74>)
 8019ab6:	6818      	ldr	r0, [r3, #0]
 8019ab8:	4b06      	ldr	r3, [pc, #24]	@ (8019ad4 <prvAddCurrentTaskToDelayedList+0x68>)
 8019aba:	6819      	ldr	r1, [r3, #0]
 8019abc:	3104      	adds	r1, #4
 8019abe:	f7ff f84e 	bl	8018b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019ac2:	4b08      	ldr	r3, [pc, #32]	@ (8019ae4 <prvAddCurrentTaskToDelayedList+0x78>)
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	42a3      	cmp	r3, r4
 8019ac8:	d9ea      	bls.n	8019aa0 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8019aca:	4b06      	ldr	r3, [pc, #24]	@ (8019ae4 <prvAddCurrentTaskToDelayedList+0x78>)
 8019acc:	601c      	str	r4, [r3, #0]
}
 8019ace:	e7e7      	b.n	8019aa0 <prvAddCurrentTaskToDelayedList+0x34>
 8019ad0:	200036d8 	.word	0x200036d8
 8019ad4:	20003bb0 	.word	0x20003bb0
 8019ad8:	20003720 	.word	0x20003720
 8019adc:	200036e0 	.word	0x200036e0
 8019ae0:	20003724 	.word	0x20003724
 8019ae4:	200036bc 	.word	0x200036bc

08019ae8 <xTaskCreateStatic>:
	{
 8019ae8:	b530      	push	{r4, r5, lr}
 8019aea:	b087      	sub	sp, #28
 8019aec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8019aee:	b18c      	cbz	r4, 8019b14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019af0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019af2:	b1c5      	cbz	r5, 8019b26 <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019af4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8019af8:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019afa:	9d04      	ldr	r5, [sp, #16]
 8019afc:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8019b00:	d01a      	beq.n	8019b38 <xTaskCreateStatic+0x50>
 8019b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b06:	f383 8811 	msr	BASEPRI, r3
 8019b0a:	f3bf 8f6f 	isb	sy
 8019b0e:	f3bf 8f4f 	dsb	sy
 8019b12:	e7fe      	b.n	8019b12 <xTaskCreateStatic+0x2a>
 8019b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b18:	f383 8811 	msr	BASEPRI, r3
 8019b1c:	f3bf 8f6f 	isb	sy
 8019b20:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8019b24:	e7fe      	b.n	8019b24 <xTaskCreateStatic+0x3c>
 8019b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b2a:	f383 8811 	msr	BASEPRI, r3
 8019b2e:	f3bf 8f6f 	isb	sy
 8019b32:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8019b36:	e7fe      	b.n	8019b36 <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019b38:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019b3a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019b3c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019b3e:	2402      	movs	r4, #2
 8019b40:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019b44:	2400      	movs	r4, #0
 8019b46:	9403      	str	r4, [sp, #12]
 8019b48:	9502      	str	r5, [sp, #8]
 8019b4a:	ac05      	add	r4, sp, #20
 8019b4c:	9401      	str	r4, [sp, #4]
 8019b4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019b50:	9400      	str	r4, [sp, #0]
 8019b52:	f7ff fe25 	bl	80197a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019b56:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019b58:	f7ff fed8 	bl	801990c <prvAddNewTaskToReadyList>
	}
 8019b5c:	9805      	ldr	r0, [sp, #20]
 8019b5e:	b007      	add	sp, #28
 8019b60:	bd30      	pop	{r4, r5, pc}

08019b62 <xTaskCreate>:
	{
 8019b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b66:	b085      	sub	sp, #20
 8019b68:	4607      	mov	r7, r0
 8019b6a:	4688      	mov	r8, r1
 8019b6c:	4614      	mov	r4, r2
 8019b6e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019b70:	0090      	lsls	r0, r2, #2
 8019b72:	f001 f831 	bl	801abd8 <pvPortMalloc>
			if( pxStack != NULL )
 8019b76:	b310      	cbz	r0, 8019bbe <xTaskCreate+0x5c>
 8019b78:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019b7a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019b7e:	f001 f82b 	bl	801abd8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8019b82:	4605      	mov	r5, r0
 8019b84:	b1a8      	cbz	r0, 8019bb2 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8019b86:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019b90:	9303      	str	r3, [sp, #12]
 8019b92:	9002      	str	r0, [sp, #8]
 8019b94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b96:	9301      	str	r3, [sp, #4]
 8019b98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b9a:	9300      	str	r3, [sp, #0]
 8019b9c:	4633      	mov	r3, r6
 8019b9e:	4622      	mov	r2, r4
 8019ba0:	4641      	mov	r1, r8
 8019ba2:	4638      	mov	r0, r7
 8019ba4:	f7ff fdfc 	bl	80197a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019ba8:	4628      	mov	r0, r5
 8019baa:	f7ff feaf 	bl	801990c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019bae:	2001      	movs	r0, #1
 8019bb0:	e007      	b.n	8019bc2 <xTaskCreate+0x60>
					vPortFree( pxStack );
 8019bb2:	4648      	mov	r0, r9
 8019bb4:	f001 f892 	bl	801acdc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019bbc:	e001      	b.n	8019bc2 <xTaskCreate+0x60>
 8019bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8019bc2:	b005      	add	sp, #20
 8019bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019bc8 <vTaskStartScheduler>:
{
 8019bc8:	b510      	push	{r4, lr}
 8019bca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019bcc:	2400      	movs	r4, #0
 8019bce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019bd0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019bd2:	aa07      	add	r2, sp, #28
 8019bd4:	a906      	add	r1, sp, #24
 8019bd6:	a805      	add	r0, sp, #20
 8019bd8:	f7fe ff90 	bl	8018afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019bdc:	9b05      	ldr	r3, [sp, #20]
 8019bde:	9302      	str	r3, [sp, #8]
 8019be0:	9b06      	ldr	r3, [sp, #24]
 8019be2:	9301      	str	r3, [sp, #4]
 8019be4:	9400      	str	r4, [sp, #0]
 8019be6:	4623      	mov	r3, r4
 8019be8:	9a07      	ldr	r2, [sp, #28]
 8019bea:	491a      	ldr	r1, [pc, #104]	@ (8019c54 <vTaskStartScheduler+0x8c>)
 8019bec:	481a      	ldr	r0, [pc, #104]	@ (8019c58 <vTaskStartScheduler+0x90>)
 8019bee:	f7ff ff7b 	bl	8019ae8 <xTaskCreateStatic>
 8019bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8019c5c <vTaskStartScheduler+0x94>)
 8019bf4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8019bf6:	b1e8      	cbz	r0, 8019c34 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8019bf8:	f000 fc0c 	bl	801a414 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8019bfc:	2801      	cmp	r0, #1
 8019bfe:	d11a      	bne.n	8019c36 <vTaskStartScheduler+0x6e>
 8019c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c04:	f383 8811 	msr	BASEPRI, r3
 8019c08:	f3bf 8f6f 	isb	sy
 8019c0c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019c10:	4b13      	ldr	r3, [pc, #76]	@ (8019c60 <vTaskStartScheduler+0x98>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	3358      	adds	r3, #88	@ 0x58
 8019c16:	4a13      	ldr	r2, [pc, #76]	@ (8019c64 <vTaskStartScheduler+0x9c>)
 8019c18:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8019c1a:	4b13      	ldr	r3, [pc, #76]	@ (8019c68 <vTaskStartScheduler+0xa0>)
 8019c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019c22:	4b12      	ldr	r3, [pc, #72]	@ (8019c6c <vTaskStartScheduler+0xa4>)
 8019c24:	2201      	movs	r2, #1
 8019c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019c28:	4b11      	ldr	r3, [pc, #68]	@ (8019c70 <vTaskStartScheduler+0xa8>)
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8019c2e:	f000 feb3 	bl	801a998 <xPortStartScheduler>
 8019c32:	e003      	b.n	8019c3c <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 8019c34:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019c36:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8019c3a:	d001      	beq.n	8019c40 <vTaskStartScheduler+0x78>
}
 8019c3c:	b008      	add	sp, #32
 8019c3e:	bd10      	pop	{r4, pc}
 8019c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c44:	f383 8811 	msr	BASEPRI, r3
 8019c48:	f3bf 8f6f 	isb	sy
 8019c4c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019c50:	e7fe      	b.n	8019c50 <vTaskStartScheduler+0x88>
 8019c52:	bf00      	nop
 8019c54:	0803941c 	.word	0x0803941c
 8019c58:	08019a45 	.word	0x08019a45
 8019c5c:	200036b8 	.word	0x200036b8
 8019c60:	20003bb0 	.word	0x20003bb0
 8019c64:	200002d8 	.word	0x200002d8
 8019c68:	200036bc 	.word	0x200036bc
 8019c6c:	200036d0 	.word	0x200036d0
 8019c70:	200036d8 	.word	0x200036d8

08019c74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8019c74:	4a02      	ldr	r2, [pc, #8]	@ (8019c80 <vTaskSuspendAll+0xc>)
 8019c76:	6813      	ldr	r3, [r2, #0]
 8019c78:	3301      	adds	r3, #1
 8019c7a:	6013      	str	r3, [r2, #0]
}
 8019c7c:	4770      	bx	lr
 8019c7e:	bf00      	nop
 8019c80:	200036b4 	.word	0x200036b4

08019c84 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8019c84:	4b01      	ldr	r3, [pc, #4]	@ (8019c8c <xTaskGetTickCount+0x8>)
 8019c86:	6818      	ldr	r0, [r3, #0]
}
 8019c88:	4770      	bx	lr
 8019c8a:	bf00      	nop
 8019c8c:	200036d8 	.word	0x200036d8

08019c90 <xTaskIncrementTick>:
{
 8019c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019c92:	4b3a      	ldr	r3, [pc, #232]	@ (8019d7c <xTaskIncrementTick+0xec>)
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d169      	bne.n	8019d6e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019c9a:	4b39      	ldr	r3, [pc, #228]	@ (8019d80 <xTaskIncrementTick+0xf0>)
 8019c9c:	681d      	ldr	r5, [r3, #0]
 8019c9e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8019ca0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019ca2:	b9c5      	cbnz	r5, 8019cd6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8019ca4:	4b37      	ldr	r3, [pc, #220]	@ (8019d84 <xTaskIncrementTick+0xf4>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	b143      	cbz	r3, 8019cbe <xTaskIncrementTick+0x2e>
 8019cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cb0:	f383 8811 	msr	BASEPRI, r3
 8019cb4:	f3bf 8f6f 	isb	sy
 8019cb8:	f3bf 8f4f 	dsb	sy
 8019cbc:	e7fe      	b.n	8019cbc <xTaskIncrementTick+0x2c>
 8019cbe:	4a31      	ldr	r2, [pc, #196]	@ (8019d84 <xTaskIncrementTick+0xf4>)
 8019cc0:	6811      	ldr	r1, [r2, #0]
 8019cc2:	4b31      	ldr	r3, [pc, #196]	@ (8019d88 <xTaskIncrementTick+0xf8>)
 8019cc4:	6818      	ldr	r0, [r3, #0]
 8019cc6:	6010      	str	r0, [r2, #0]
 8019cc8:	6019      	str	r1, [r3, #0]
 8019cca:	4a30      	ldr	r2, [pc, #192]	@ (8019d8c <xTaskIncrementTick+0xfc>)
 8019ccc:	6813      	ldr	r3, [r2, #0]
 8019cce:	3301      	adds	r3, #1
 8019cd0:	6013      	str	r3, [r2, #0]
 8019cd2:	f7ff fd4f 	bl	8019774 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8019d90 <xTaskIncrementTick+0x100>)
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	42ab      	cmp	r3, r5
 8019cdc:	d93d      	bls.n	8019d5a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8019cde:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8019d94 <xTaskIncrementTick+0x104>)
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ce6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019cea:	009a      	lsls	r2, r3, #2
 8019cec:	4b2a      	ldr	r3, [pc, #168]	@ (8019d98 <xTaskIncrementTick+0x108>)
 8019cee:	589b      	ldr	r3, [r3, r2]
 8019cf0:	2b01      	cmp	r3, #1
 8019cf2:	d900      	bls.n	8019cf6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8019cf4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8019cf6:	4b29      	ldr	r3, [pc, #164]	@ (8019d9c <xTaskIncrementTick+0x10c>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d03c      	beq.n	8019d78 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8019cfe:	2701      	movs	r7, #1
	return xSwitchRequired;
 8019d00:	e03a      	b.n	8019d78 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8019d02:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019d04:	4b1f      	ldr	r3, [pc, #124]	@ (8019d84 <xTaskIncrementTick+0xf4>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	b343      	cbz	r3, 8019d5e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8019d84 <xTaskIncrementTick+0xf4>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	68db      	ldr	r3, [r3, #12]
 8019d12:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019d14:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8019d16:	429d      	cmp	r5, r3
 8019d18:	d326      	bcc.n	8019d68 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019d1a:	1d26      	adds	r6, r4, #4
 8019d1c:	4630      	mov	r0, r6
 8019d1e:	f7fe ff37 	bl	8018b90 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019d22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019d24:	b11b      	cbz	r3, 8019d2e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019d26:	f104 0018 	add.w	r0, r4, #24
 8019d2a:	f7fe ff31 	bl	8018b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019d2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019d30:	4a1b      	ldr	r2, [pc, #108]	@ (8019da0 <xTaskIncrementTick+0x110>)
 8019d32:	6812      	ldr	r2, [r2, #0]
 8019d34:	4293      	cmp	r3, r2
 8019d36:	d901      	bls.n	8019d3c <xTaskIncrementTick+0xac>
 8019d38:	4a19      	ldr	r2, [pc, #100]	@ (8019da0 <xTaskIncrementTick+0x110>)
 8019d3a:	6013      	str	r3, [r2, #0]
 8019d3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019d40:	009a      	lsls	r2, r3, #2
 8019d42:	4631      	mov	r1, r6
 8019d44:	4814      	ldr	r0, [pc, #80]	@ (8019d98 <xTaskIncrementTick+0x108>)
 8019d46:	4410      	add	r0, r2
 8019d48:	f7fe fefe 	bl	8018b48 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019d4c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019d4e:	4b11      	ldr	r3, [pc, #68]	@ (8019d94 <xTaskIncrementTick+0x104>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d54:	429a      	cmp	r2, r3
 8019d56:	d2d4      	bcs.n	8019d02 <xTaskIncrementTick+0x72>
 8019d58:	e7d4      	b.n	8019d04 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8019d5a:	2700      	movs	r7, #0
 8019d5c:	e7d2      	b.n	8019d04 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8019d90 <xTaskIncrementTick+0x100>)
 8019d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019d64:	601a      	str	r2, [r3, #0]
					break;
 8019d66:	e7bb      	b.n	8019ce0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8019d68:	4a09      	ldr	r2, [pc, #36]	@ (8019d90 <xTaskIncrementTick+0x100>)
 8019d6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019d6c:	e7b8      	b.n	8019ce0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8019d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8019da4 <xTaskIncrementTick+0x114>)
 8019d70:	6813      	ldr	r3, [r2, #0]
 8019d72:	3301      	adds	r3, #1
 8019d74:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8019d76:	2700      	movs	r7, #0
}
 8019d78:	4638      	mov	r0, r7
 8019d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d7c:	200036b4 	.word	0x200036b4
 8019d80:	200036d8 	.word	0x200036d8
 8019d84:	20003724 	.word	0x20003724
 8019d88:	20003720 	.word	0x20003720
 8019d8c:	200036c4 	.word	0x200036c4
 8019d90:	200036bc 	.word	0x200036bc
 8019d94:	20003bb0 	.word	0x20003bb0
 8019d98:	20003750 	.word	0x20003750
 8019d9c:	200036c8 	.word	0x200036c8
 8019da0:	200036d4 	.word	0x200036d4
 8019da4:	200036cc 	.word	0x200036cc

08019da8 <xTaskResumeAll>:
{
 8019da8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8019daa:	4b35      	ldr	r3, [pc, #212]	@ (8019e80 <xTaskResumeAll+0xd8>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	b943      	cbnz	r3, 8019dc2 <xTaskResumeAll+0x1a>
 8019db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019db4:	f383 8811 	msr	BASEPRI, r3
 8019db8:	f3bf 8f6f 	isb	sy
 8019dbc:	f3bf 8f4f 	dsb	sy
 8019dc0:	e7fe      	b.n	8019dc0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8019dc2:	f000 fd4f 	bl	801a864 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8019dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8019e80 <xTaskResumeAll+0xd8>)
 8019dc8:	681a      	ldr	r2, [r3, #0]
 8019dca:	3a01      	subs	r2, #1
 8019dcc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d14f      	bne.n	8019e74 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8019e84 <xTaskResumeAll+0xdc>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	b90b      	cbnz	r3, 8019dde <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8019dda:	2400      	movs	r4, #0
 8019ddc:	e04b      	b.n	8019e76 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8019dde:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019de0:	4b29      	ldr	r3, [pc, #164]	@ (8019e88 <xTaskResumeAll+0xe0>)
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	b31b      	cbz	r3, 8019e2e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019de6:	4b28      	ldr	r3, [pc, #160]	@ (8019e88 <xTaskResumeAll+0xe0>)
 8019de8:	68db      	ldr	r3, [r3, #12]
 8019dea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019dec:	f104 0018 	add.w	r0, r4, #24
 8019df0:	f7fe fece 	bl	8018b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019df4:	1d25      	adds	r5, r4, #4
 8019df6:	4628      	mov	r0, r5
 8019df8:	f7fe feca 	bl	8018b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019dfc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019dfe:	4b23      	ldr	r3, [pc, #140]	@ (8019e8c <xTaskResumeAll+0xe4>)
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	4298      	cmp	r0, r3
 8019e04:	d901      	bls.n	8019e0a <xTaskResumeAll+0x62>
 8019e06:	4b21      	ldr	r3, [pc, #132]	@ (8019e8c <xTaskResumeAll+0xe4>)
 8019e08:	6018      	str	r0, [r3, #0]
 8019e0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019e0e:	4629      	mov	r1, r5
 8019e10:	4b1f      	ldr	r3, [pc, #124]	@ (8019e90 <xTaskResumeAll+0xe8>)
 8019e12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019e16:	f7fe fe97 	bl	8018b48 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019e1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8019e94 <xTaskResumeAll+0xec>)
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d3dc      	bcc.n	8019de0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8019e26:	4b1c      	ldr	r3, [pc, #112]	@ (8019e98 <xTaskResumeAll+0xf0>)
 8019e28:	2201      	movs	r2, #1
 8019e2a:	601a      	str	r2, [r3, #0]
 8019e2c:	e7d8      	b.n	8019de0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8019e2e:	b10c      	cbz	r4, 8019e34 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8019e30:	f7ff fca0 	bl	8019774 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019e34:	4b19      	ldr	r3, [pc, #100]	@ (8019e9c <xTaskResumeAll+0xf4>)
 8019e36:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8019e38:	b984      	cbnz	r4, 8019e5c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8019e3a:	4b17      	ldr	r3, [pc, #92]	@ (8019e98 <xTaskResumeAll+0xf0>)
 8019e3c:	681c      	ldr	r4, [r3, #0]
 8019e3e:	b1d4      	cbz	r4, 8019e76 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8019e40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019e4c:	f3bf 8f4f 	dsb	sy
 8019e50:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8019e54:	2401      	movs	r4, #1
 8019e56:	e00e      	b.n	8019e76 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019e58:	3c01      	subs	r4, #1
 8019e5a:	d007      	beq.n	8019e6c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8019e5c:	f7ff ff18 	bl	8019c90 <xTaskIncrementTick>
 8019e60:	2800      	cmp	r0, #0
 8019e62:	d0f9      	beq.n	8019e58 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8019e64:	4b0c      	ldr	r3, [pc, #48]	@ (8019e98 <xTaskResumeAll+0xf0>)
 8019e66:	2201      	movs	r2, #1
 8019e68:	601a      	str	r2, [r3, #0]
 8019e6a:	e7f5      	b.n	8019e58 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8019e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8019e9c <xTaskResumeAll+0xf4>)
 8019e6e:	2200      	movs	r2, #0
 8019e70:	601a      	str	r2, [r3, #0]
 8019e72:	e7e2      	b.n	8019e3a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8019e74:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019e76:	f000 fd17 	bl	801a8a8 <vPortExitCritical>
}
 8019e7a:	4620      	mov	r0, r4
 8019e7c:	bd38      	pop	{r3, r4, r5, pc}
 8019e7e:	bf00      	nop
 8019e80:	200036b4 	.word	0x200036b4
 8019e84:	200036dc 	.word	0x200036dc
 8019e88:	2000370c 	.word	0x2000370c
 8019e8c:	200036d4 	.word	0x200036d4
 8019e90:	20003750 	.word	0x20003750
 8019e94:	20003bb0 	.word	0x20003bb0
 8019e98:	200036c8 	.word	0x200036c8
 8019e9c:	200036cc 	.word	0x200036cc

08019ea0 <vTaskDelay>:
	{
 8019ea0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019ea2:	b1a8      	cbz	r0, 8019ed0 <vTaskDelay+0x30>
 8019ea4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8019ea6:	4b10      	ldr	r3, [pc, #64]	@ (8019ee8 <vTaskDelay+0x48>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	b143      	cbz	r3, 8019ebe <vTaskDelay+0x1e>
 8019eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019eb0:	f383 8811 	msr	BASEPRI, r3
 8019eb4:	f3bf 8f6f 	isb	sy
 8019eb8:	f3bf 8f4f 	dsb	sy
 8019ebc:	e7fe      	b.n	8019ebc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8019ebe:	f7ff fed9 	bl	8019c74 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019ec2:	2100      	movs	r1, #0
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f7ff fdd1 	bl	8019a6c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8019eca:	f7ff ff6d 	bl	8019da8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8019ece:	b948      	cbnz	r0, 8019ee4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8019ed0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019ed8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019edc:	f3bf 8f4f 	dsb	sy
 8019ee0:	f3bf 8f6f 	isb	sy
	}
 8019ee4:	bd10      	pop	{r4, pc}
 8019ee6:	bf00      	nop
 8019ee8:	200036b4 	.word	0x200036b4

08019eec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019eec:	4b22      	ldr	r3, [pc, #136]	@ (8019f78 <vTaskSwitchContext+0x8c>)
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	b11b      	cbz	r3, 8019efa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8019ef2:	4b22      	ldr	r3, [pc, #136]	@ (8019f7c <vTaskSwitchContext+0x90>)
 8019ef4:	2201      	movs	r2, #1
 8019ef6:	601a      	str	r2, [r3, #0]
 8019ef8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8019efa:	4b20      	ldr	r3, [pc, #128]	@ (8019f7c <vTaskSwitchContext+0x90>)
 8019efc:	2200      	movs	r2, #0
 8019efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f00:	4b1f      	ldr	r3, [pc, #124]	@ (8019f80 <vTaskSwitchContext+0x94>)
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019f08:	008a      	lsls	r2, r1, #2
 8019f0a:	491e      	ldr	r1, [pc, #120]	@ (8019f84 <vTaskSwitchContext+0x98>)
 8019f0c:	588a      	ldr	r2, [r1, r2]
 8019f0e:	b95a      	cbnz	r2, 8019f28 <vTaskSwitchContext+0x3c>
 8019f10:	b10b      	cbz	r3, 8019f16 <vTaskSwitchContext+0x2a>
 8019f12:	3b01      	subs	r3, #1
 8019f14:	e7f6      	b.n	8019f04 <vTaskSwitchContext+0x18>
 8019f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f1a:	f383 8811 	msr	BASEPRI, r3
 8019f1e:	f3bf 8f6f 	isb	sy
 8019f22:	f3bf 8f4f 	dsb	sy
 8019f26:	e7fe      	b.n	8019f26 <vTaskSwitchContext+0x3a>
 8019f28:	4608      	mov	r0, r1
 8019f2a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019f2e:	008a      	lsls	r2, r1, #2
 8019f30:	4402      	add	r2, r0
 8019f32:	6851      	ldr	r1, [r2, #4]
 8019f34:	6849      	ldr	r1, [r1, #4]
 8019f36:	6051      	str	r1, [r2, #4]
 8019f38:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8019f3c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8019f40:	3208      	adds	r2, #8
 8019f42:	4402      	add	r2, r0
 8019f44:	4291      	cmp	r1, r2
 8019f46:	d00f      	beq.n	8019f68 <vTaskSwitchContext+0x7c>
 8019f48:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8019f4c:	0091      	lsls	r1, r2, #2
 8019f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8019f84 <vTaskSwitchContext+0x98>)
 8019f50:	440a      	add	r2, r1
 8019f52:	6852      	ldr	r2, [r2, #4]
 8019f54:	68d1      	ldr	r1, [r2, #12]
 8019f56:	4a0c      	ldr	r2, [pc, #48]	@ (8019f88 <vTaskSwitchContext+0x9c>)
 8019f58:	6011      	str	r1, [r2, #0]
 8019f5a:	4909      	ldr	r1, [pc, #36]	@ (8019f80 <vTaskSwitchContext+0x94>)
 8019f5c:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019f5e:	6813      	ldr	r3, [r2, #0]
 8019f60:	3358      	adds	r3, #88	@ 0x58
 8019f62:	4a0a      	ldr	r2, [pc, #40]	@ (8019f8c <vTaskSwitchContext+0xa0>)
 8019f64:	6013      	str	r3, [r2, #0]
}
 8019f66:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f68:	6848      	ldr	r0, [r1, #4]
 8019f6a:	4662      	mov	r2, ip
 8019f6c:	0091      	lsls	r1, r2, #2
 8019f6e:	4a05      	ldr	r2, [pc, #20]	@ (8019f84 <vTaskSwitchContext+0x98>)
 8019f70:	440a      	add	r2, r1
 8019f72:	6050      	str	r0, [r2, #4]
 8019f74:	e7e8      	b.n	8019f48 <vTaskSwitchContext+0x5c>
 8019f76:	bf00      	nop
 8019f78:	200036b4 	.word	0x200036b4
 8019f7c:	200036c8 	.word	0x200036c8
 8019f80:	200036d4 	.word	0x200036d4
 8019f84:	20003750 	.word	0x20003750
 8019f88:	20003bb0 	.word	0x20003bb0
 8019f8c:	200002d8 	.word	0x200002d8

08019f90 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8019f90:	b158      	cbz	r0, 8019faa <vTaskPlaceOnEventList+0x1a>
{
 8019f92:	b510      	push	{r4, lr}
 8019f94:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019f96:	4a09      	ldr	r2, [pc, #36]	@ (8019fbc <vTaskPlaceOnEventList+0x2c>)
 8019f98:	6811      	ldr	r1, [r2, #0]
 8019f9a:	3118      	adds	r1, #24
 8019f9c:	f7fe fddf 	bl	8018b5e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019fa0:	2101      	movs	r1, #1
 8019fa2:	4620      	mov	r0, r4
 8019fa4:	f7ff fd62 	bl	8019a6c <prvAddCurrentTaskToDelayedList>
}
 8019fa8:	bd10      	pop	{r4, pc}
 8019faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fae:	f383 8811 	msr	BASEPRI, r3
 8019fb2:	f3bf 8f6f 	isb	sy
 8019fb6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8019fba:	e7fe      	b.n	8019fba <vTaskPlaceOnEventList+0x2a>
 8019fbc:	20003bb0 	.word	0x20003bb0

08019fc0 <vTaskPlaceOnEventListRestricted>:
	{
 8019fc0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8019fc2:	b170      	cbz	r0, 8019fe2 <vTaskPlaceOnEventListRestricted+0x22>
 8019fc4:	460d      	mov	r5, r1
 8019fc6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8019ff4 <vTaskPlaceOnEventListRestricted+0x34>)
 8019fca:	6811      	ldr	r1, [r2, #0]
 8019fcc:	3118      	adds	r1, #24
 8019fce:	f7fe fdbb 	bl	8018b48 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8019fd2:	b10c      	cbz	r4, 8019fd8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8019fd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019fd8:	4621      	mov	r1, r4
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f7ff fd46 	bl	8019a6c <prvAddCurrentTaskToDelayedList>
	}
 8019fe0:	bd38      	pop	{r3, r4, r5, pc}
 8019fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fe6:	f383 8811 	msr	BASEPRI, r3
 8019fea:	f3bf 8f6f 	isb	sy
 8019fee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8019ff2:	e7fe      	b.n	8019ff2 <vTaskPlaceOnEventListRestricted+0x32>
 8019ff4:	20003bb0 	.word	0x20003bb0

08019ff8 <xTaskRemoveFromEventList>:
{
 8019ff8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ffa:	68c3      	ldr	r3, [r0, #12]
 8019ffc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8019ffe:	b324      	cbz	r4, 801a04a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a000:	f104 0518 	add.w	r5, r4, #24
 801a004:	4628      	mov	r0, r5
 801a006:	f7fe fdc3 	bl	8018b90 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a00a:	4b18      	ldr	r3, [pc, #96]	@ (801a06c <xTaskRemoveFromEventList+0x74>)
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	bb2b      	cbnz	r3, 801a05c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a010:	1d25      	adds	r5, r4, #4
 801a012:	4628      	mov	r0, r5
 801a014:	f7fe fdbc 	bl	8018b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a018:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a01a:	4b15      	ldr	r3, [pc, #84]	@ (801a070 <xTaskRemoveFromEventList+0x78>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	4298      	cmp	r0, r3
 801a020:	d901      	bls.n	801a026 <xTaskRemoveFromEventList+0x2e>
 801a022:	4b13      	ldr	r3, [pc, #76]	@ (801a070 <xTaskRemoveFromEventList+0x78>)
 801a024:	6018      	str	r0, [r3, #0]
 801a026:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a02a:	4629      	mov	r1, r5
 801a02c:	4b11      	ldr	r3, [pc, #68]	@ (801a074 <xTaskRemoveFromEventList+0x7c>)
 801a02e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a032:	f7fe fd89 	bl	8018b48 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a036:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a038:	4b0f      	ldr	r3, [pc, #60]	@ (801a078 <xTaskRemoveFromEventList+0x80>)
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a03e:	429a      	cmp	r2, r3
 801a040:	d911      	bls.n	801a066 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801a042:	2001      	movs	r0, #1
 801a044:	4b0d      	ldr	r3, [pc, #52]	@ (801a07c <xTaskRemoveFromEventList+0x84>)
 801a046:	6018      	str	r0, [r3, #0]
}
 801a048:	bd38      	pop	{r3, r4, r5, pc}
 801a04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a04e:	f383 8811 	msr	BASEPRI, r3
 801a052:	f3bf 8f6f 	isb	sy
 801a056:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801a05a:	e7fe      	b.n	801a05a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a05c:	4629      	mov	r1, r5
 801a05e:	4808      	ldr	r0, [pc, #32]	@ (801a080 <xTaskRemoveFromEventList+0x88>)
 801a060:	f7fe fd72 	bl	8018b48 <vListInsertEnd>
 801a064:	e7e7      	b.n	801a036 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801a066:	2000      	movs	r0, #0
	return xReturn;
 801a068:	e7ee      	b.n	801a048 <xTaskRemoveFromEventList+0x50>
 801a06a:	bf00      	nop
 801a06c:	200036b4 	.word	0x200036b4
 801a070:	200036d4 	.word	0x200036d4
 801a074:	20003750 	.word	0x20003750
 801a078:	20003bb0 	.word	0x20003bb0
 801a07c:	200036c8 	.word	0x200036c8
 801a080:	2000370c 	.word	0x2000370c

0801a084 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a084:	4b03      	ldr	r3, [pc, #12]	@ (801a094 <vTaskInternalSetTimeOutState+0x10>)
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a08a:	4b03      	ldr	r3, [pc, #12]	@ (801a098 <vTaskInternalSetTimeOutState+0x14>)
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	6043      	str	r3, [r0, #4]
}
 801a090:	4770      	bx	lr
 801a092:	bf00      	nop
 801a094:	200036c4 	.word	0x200036c4
 801a098:	200036d8 	.word	0x200036d8

0801a09c <xTaskCheckForTimeOut>:
{
 801a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 801a09e:	b1c8      	cbz	r0, 801a0d4 <xTaskCheckForTimeOut+0x38>
 801a0a0:	460c      	mov	r4, r1
 801a0a2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801a0a4:	b1f9      	cbz	r1, 801a0e6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801a0a6:	f000 fbdd 	bl	801a864 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801a0aa:	4b1b      	ldr	r3, [pc, #108]	@ (801a118 <xTaskCheckForTimeOut+0x7c>)
 801a0ac:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a0ae:	686b      	ldr	r3, [r5, #4]
 801a0b0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 801a0b2:	6822      	ldr	r2, [r4, #0]
 801a0b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a0b8:	d026      	beq.n	801a108 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a0ba:	4e18      	ldr	r6, [pc, #96]	@ (801a11c <xTaskCheckForTimeOut+0x80>)
 801a0bc:	6836      	ldr	r6, [r6, #0]
 801a0be:	682f      	ldr	r7, [r5, #0]
 801a0c0:	42b7      	cmp	r7, r6
 801a0c2:	d001      	beq.n	801a0c8 <xTaskCheckForTimeOut+0x2c>
 801a0c4:	428b      	cmp	r3, r1
 801a0c6:	d924      	bls.n	801a112 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a0c8:	4282      	cmp	r2, r0
 801a0ca:	d815      	bhi.n	801a0f8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801a0d0:	2401      	movs	r4, #1
 801a0d2:	e01a      	b.n	801a10a <xTaskCheckForTimeOut+0x6e>
 801a0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0d8:	f383 8811 	msr	BASEPRI, r3
 801a0dc:	f3bf 8f6f 	isb	sy
 801a0e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 801a0e4:	e7fe      	b.n	801a0e4 <xTaskCheckForTimeOut+0x48>
 801a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0ea:	f383 8811 	msr	BASEPRI, r3
 801a0ee:	f3bf 8f6f 	isb	sy
 801a0f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801a0f6:	e7fe      	b.n	801a0f6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 801a0f8:	1a5b      	subs	r3, r3, r1
 801a0fa:	4413      	add	r3, r2
 801a0fc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a0fe:	4628      	mov	r0, r5
 801a100:	f7ff ffc0 	bl	801a084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a104:	2400      	movs	r4, #0
 801a106:	e000      	b.n	801a10a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 801a108:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801a10a:	f000 fbcd 	bl	801a8a8 <vPortExitCritical>
}
 801a10e:	4620      	mov	r0, r4
 801a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801a112:	2401      	movs	r4, #1
 801a114:	e7f9      	b.n	801a10a <xTaskCheckForTimeOut+0x6e>
 801a116:	bf00      	nop
 801a118:	200036d8 	.word	0x200036d8
 801a11c:	200036c4 	.word	0x200036c4

0801a120 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801a120:	4b01      	ldr	r3, [pc, #4]	@ (801a128 <vTaskMissedYield+0x8>)
 801a122:	2201      	movs	r2, #1
 801a124:	601a      	str	r2, [r3, #0]
}
 801a126:	4770      	bx	lr
 801a128:	200036c8 	.word	0x200036c8

0801a12c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 801a12c:	4b01      	ldr	r3, [pc, #4]	@ (801a134 <xTaskGetCurrentTaskHandle+0x8>)
 801a12e:	6818      	ldr	r0, [r3, #0]
	}
 801a130:	4770      	bx	lr
 801a132:	bf00      	nop
 801a134:	20003bb0 	.word	0x20003bb0

0801a138 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801a138:	4b05      	ldr	r3, [pc, #20]	@ (801a150 <xTaskGetSchedulerState+0x18>)
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	b133      	cbz	r3, 801a14c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a13e:	4b05      	ldr	r3, [pc, #20]	@ (801a154 <xTaskGetSchedulerState+0x1c>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	b10b      	cbz	r3, 801a148 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 801a144:	2000      	movs	r0, #0
	}
 801a146:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 801a148:	2002      	movs	r0, #2
 801a14a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a14c:	2001      	movs	r0, #1
 801a14e:	4770      	bx	lr
 801a150:	200036d0 	.word	0x200036d0
 801a154:	200036b4 	.word	0x200036b4

0801a158 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801a158:	2800      	cmp	r0, #0
 801a15a:	d03e      	beq.n	801a1da <xTaskPriorityInherit+0x82>
	{
 801a15c:	b538      	push	{r3, r4, r5, lr}
 801a15e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a160:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a162:	4a20      	ldr	r2, [pc, #128]	@ (801a1e4 <xTaskPriorityInherit+0x8c>)
 801a164:	6812      	ldr	r2, [r2, #0]
 801a166:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a168:	4293      	cmp	r3, r2
 801a16a:	d22e      	bcs.n	801a1ca <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a16c:	6982      	ldr	r2, [r0, #24]
 801a16e:	2a00      	cmp	r2, #0
 801a170:	db05      	blt.n	801a17e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a172:	4a1c      	ldr	r2, [pc, #112]	@ (801a1e4 <xTaskPriorityInherit+0x8c>)
 801a174:	6812      	ldr	r2, [r2, #0]
 801a176:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a178:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a17c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a17e:	6961      	ldr	r1, [r4, #20]
 801a180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a184:	4a18      	ldr	r2, [pc, #96]	@ (801a1e8 <xTaskPriorityInherit+0x90>)
 801a186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a18a:	4299      	cmp	r1, r3
 801a18c:	d005      	beq.n	801a19a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a18e:	4b15      	ldr	r3, [pc, #84]	@ (801a1e4 <xTaskPriorityInherit+0x8c>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a194:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801a196:	2001      	movs	r0, #1
	}
 801a198:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a19a:	1d25      	adds	r5, r4, #4
 801a19c:	4628      	mov	r0, r5
 801a19e:	f7fe fcf7 	bl	8018b90 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a1a2:	4b10      	ldr	r3, [pc, #64]	@ (801a1e4 <xTaskPriorityInherit+0x8c>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801a1a8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a1aa:	4b10      	ldr	r3, [pc, #64]	@ (801a1ec <xTaskPriorityInherit+0x94>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	4298      	cmp	r0, r3
 801a1b0:	d901      	bls.n	801a1b6 <xTaskPriorityInherit+0x5e>
 801a1b2:	4b0e      	ldr	r3, [pc, #56]	@ (801a1ec <xTaskPriorityInherit+0x94>)
 801a1b4:	6018      	str	r0, [r3, #0]
 801a1b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a1ba:	4629      	mov	r1, r5
 801a1bc:	4b0a      	ldr	r3, [pc, #40]	@ (801a1e8 <xTaskPriorityInherit+0x90>)
 801a1be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a1c2:	f7fe fcc1 	bl	8018b48 <vListInsertEnd>
				xReturn = pdTRUE;
 801a1c6:	2001      	movs	r0, #1
 801a1c8:	e7e6      	b.n	801a198 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a1ca:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a1cc:	4b05      	ldr	r3, [pc, #20]	@ (801a1e4 <xTaskPriorityInherit+0x8c>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1d2:	429a      	cmp	r2, r3
 801a1d4:	d303      	bcc.n	801a1de <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 801a1d6:	2000      	movs	r0, #0
 801a1d8:	e7de      	b.n	801a198 <xTaskPriorityInherit+0x40>
 801a1da:	2000      	movs	r0, #0
	}
 801a1dc:	4770      	bx	lr
					xReturn = pdTRUE;
 801a1de:	2001      	movs	r0, #1
		return xReturn;
 801a1e0:	e7da      	b.n	801a198 <xTaskPriorityInherit+0x40>
 801a1e2:	bf00      	nop
 801a1e4:	20003bb0 	.word	0x20003bb0
 801a1e8:	20003750 	.word	0x20003750
 801a1ec:	200036d4 	.word	0x200036d4

0801a1f0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801a1f0:	2800      	cmp	r0, #0
 801a1f2:	d03b      	beq.n	801a26c <xTaskPriorityDisinherit+0x7c>
	{
 801a1f4:	b538      	push	{r3, r4, r5, lr}
 801a1f6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 801a1f8:	4b1e      	ldr	r3, [pc, #120]	@ (801a274 <xTaskPriorityDisinherit+0x84>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	4283      	cmp	r3, r0
 801a1fe:	d008      	beq.n	801a212 <xTaskPriorityDisinherit+0x22>
 801a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a204:	f383 8811 	msr	BASEPRI, r3
 801a208:	f3bf 8f6f 	isb	sy
 801a20c:	f3bf 8f4f 	dsb	sy
 801a210:	e7fe      	b.n	801a210 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801a212:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a214:	b943      	cbnz	r3, 801a228 <xTaskPriorityDisinherit+0x38>
 801a216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a21a:	f383 8811 	msr	BASEPRI, r3
 801a21e:	f3bf 8f6f 	isb	sy
 801a222:	f3bf 8f4f 	dsb	sy
 801a226:	e7fe      	b.n	801a226 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 801a228:	3b01      	subs	r3, #1
 801a22a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a22c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801a22e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a230:	4291      	cmp	r1, r2
 801a232:	d01d      	beq.n	801a270 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a234:	b10b      	cbz	r3, 801a23a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801a236:	2000      	movs	r0, #0
	}
 801a238:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a23a:	1d05      	adds	r5, r0, #4
 801a23c:	4628      	mov	r0, r5
 801a23e:	f7fe fca7 	bl	8018b90 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a242:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801a244:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a246:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801a24a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801a24c:	4b0a      	ldr	r3, [pc, #40]	@ (801a278 <xTaskPriorityDisinherit+0x88>)
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	4298      	cmp	r0, r3
 801a252:	d901      	bls.n	801a258 <xTaskPriorityDisinherit+0x68>
 801a254:	4b08      	ldr	r3, [pc, #32]	@ (801a278 <xTaskPriorityDisinherit+0x88>)
 801a256:	6018      	str	r0, [r3, #0]
 801a258:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a25c:	4629      	mov	r1, r5
 801a25e:	4b07      	ldr	r3, [pc, #28]	@ (801a27c <xTaskPriorityDisinherit+0x8c>)
 801a260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a264:	f7fe fc70 	bl	8018b48 <vListInsertEnd>
					xReturn = pdTRUE;
 801a268:	2001      	movs	r0, #1
 801a26a:	e7e5      	b.n	801a238 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801a26c:	2000      	movs	r0, #0
	}
 801a26e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801a270:	2000      	movs	r0, #0
 801a272:	e7e1      	b.n	801a238 <xTaskPriorityDisinherit+0x48>
 801a274:	20003bb0 	.word	0x20003bb0
 801a278:	200036d4 	.word	0x200036d4
 801a27c:	20003750 	.word	0x20003750

0801a280 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801a280:	2800      	cmp	r0, #0
 801a282:	d046      	beq.n	801a312 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801a284:	b538      	push	{r3, r4, r5, lr}
 801a286:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801a288:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801a28a:	b943      	cbnz	r3, 801a29e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801a28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a290:	f383 8811 	msr	BASEPRI, r3
 801a294:	f3bf 8f6f 	isb	sy
 801a298:	f3bf 8f4f 	dsb	sy
 801a29c:	e7fe      	b.n	801a29c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a29e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 801a2a0:	428a      	cmp	r2, r1
 801a2a2:	d200      	bcs.n	801a2a6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a2a4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a2a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a2a8:	4291      	cmp	r1, r2
 801a2aa:	d001      	beq.n	801a2b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a2ac:	2b01      	cmp	r3, #1
 801a2ae:	d000      	beq.n	801a2b2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801a2b0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801a2b2:	4b18      	ldr	r3, [pc, #96]	@ (801a314 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	42a3      	cmp	r3, r4
 801a2b8:	d022      	beq.n	801a300 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801a2ba:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a2bc:	69a3      	ldr	r3, [r4, #24]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	db02      	blt.n	801a2c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a2c2:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801a2c6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a2c8:	6962      	ldr	r2, [r4, #20]
 801a2ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801a2ce:	4b12      	ldr	r3, [pc, #72]	@ (801a318 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a2d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d1eb      	bne.n	801a2b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a2d8:	1d25      	adds	r5, r4, #4
 801a2da:	4628      	mov	r0, r5
 801a2dc:	f7fe fc58 	bl	8018b90 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801a2e0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a2e2:	4b0e      	ldr	r3, [pc, #56]	@ (801a31c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	4298      	cmp	r0, r3
 801a2e8:	d901      	bls.n	801a2ee <vTaskPriorityDisinheritAfterTimeout+0x6e>
 801a2ea:	4b0c      	ldr	r3, [pc, #48]	@ (801a31c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801a2ec:	6018      	str	r0, [r3, #0]
 801a2ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a2f2:	4629      	mov	r1, r5
 801a2f4:	4b08      	ldr	r3, [pc, #32]	@ (801a318 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801a2f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a2fa:	f7fe fc25 	bl	8018b48 <vListInsertEnd>
	}
 801a2fe:	e7d7      	b.n	801a2b0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 801a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a304:	f383 8811 	msr	BASEPRI, r3
 801a308:	f3bf 8f6f 	isb	sy
 801a30c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801a310:	e7fe      	b.n	801a310 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801a312:	4770      	bx	lr
 801a314:	20003bb0 	.word	0x20003bb0
 801a318:	20003750 	.word	0x20003750
 801a31c:	200036d4 	.word	0x200036d4

0801a320 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801a320:	4b05      	ldr	r3, [pc, #20]	@ (801a338 <pvTaskIncrementMutexHeldCount+0x18>)
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	b123      	cbz	r3, 801a330 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801a326:	4b04      	ldr	r3, [pc, #16]	@ (801a338 <pvTaskIncrementMutexHeldCount+0x18>)
 801a328:	681a      	ldr	r2, [r3, #0]
 801a32a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801a32c:	3301      	adds	r3, #1
 801a32e:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 801a330:	4b01      	ldr	r3, [pc, #4]	@ (801a338 <pvTaskIncrementMutexHeldCount+0x18>)
 801a332:	6818      	ldr	r0, [r3, #0]
	}
 801a334:	4770      	bx	lr
 801a336:	bf00      	nop
 801a338:	20003bb0 	.word	0x20003bb0

0801a33c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a33c:	4b06      	ldr	r3, [pc, #24]	@ (801a358 <prvGetNextExpireTime+0x1c>)
 801a33e:	681a      	ldr	r2, [r3, #0]
 801a340:	6813      	ldr	r3, [r2, #0]
 801a342:	b92b      	cbnz	r3, 801a350 <prvGetNextExpireTime+0x14>
 801a344:	2301      	movs	r3, #1
 801a346:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a348:	b923      	cbnz	r3, 801a354 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a34a:	68d3      	ldr	r3, [r2, #12]
 801a34c:	6818      	ldr	r0, [r3, #0]
 801a34e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a350:	2300      	movs	r3, #0
 801a352:	e7f8      	b.n	801a346 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a354:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801a356:	4770      	bx	lr
 801a358:	20003cb4 	.word	0x20003cb4

0801a35c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a35c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a35e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a360:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a362:	4291      	cmp	r1, r2
 801a364:	d80c      	bhi.n	801a380 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a366:	1ad2      	subs	r2, r2, r3
 801a368:	6983      	ldr	r3, [r0, #24]
 801a36a:	429a      	cmp	r2, r3
 801a36c:	d301      	bcc.n	801a372 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a36e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801a370:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a372:	1d01      	adds	r1, r0, #4
 801a374:	4b09      	ldr	r3, [pc, #36]	@ (801a39c <prvInsertTimerInActiveList+0x40>)
 801a376:	6818      	ldr	r0, [r3, #0]
 801a378:	f7fe fbf1 	bl	8018b5e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a37c:	2000      	movs	r0, #0
 801a37e:	e7f7      	b.n	801a370 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a380:	429a      	cmp	r2, r3
 801a382:	d201      	bcs.n	801a388 <prvInsertTimerInActiveList+0x2c>
 801a384:	4299      	cmp	r1, r3
 801a386:	d206      	bcs.n	801a396 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a388:	1d01      	adds	r1, r0, #4
 801a38a:	4b05      	ldr	r3, [pc, #20]	@ (801a3a0 <prvInsertTimerInActiveList+0x44>)
 801a38c:	6818      	ldr	r0, [r3, #0]
 801a38e:	f7fe fbe6 	bl	8018b5e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801a392:	2000      	movs	r0, #0
 801a394:	e7ec      	b.n	801a370 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801a396:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801a398:	e7ea      	b.n	801a370 <prvInsertTimerInActiveList+0x14>
 801a39a:	bf00      	nop
 801a39c:	20003cb0 	.word	0x20003cb0
 801a3a0:	20003cb4 	.word	0x20003cb4

0801a3a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a3a4:	b530      	push	{r4, r5, lr}
 801a3a6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a3a8:	f000 fa5c 	bl	801a864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a3ac:	4b11      	ldr	r3, [pc, #68]	@ (801a3f4 <prvCheckForValidListAndQueue+0x50>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	b11b      	cbz	r3, 801a3ba <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a3b2:	f000 fa79 	bl	801a8a8 <vPortExitCritical>
}
 801a3b6:	b003      	add	sp, #12
 801a3b8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 801a3ba:	4d0f      	ldr	r5, [pc, #60]	@ (801a3f8 <prvCheckForValidListAndQueue+0x54>)
 801a3bc:	4628      	mov	r0, r5
 801a3be:	f7fe fbb5 	bl	8018b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a3c2:	4c0e      	ldr	r4, [pc, #56]	@ (801a3fc <prvCheckForValidListAndQueue+0x58>)
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	f7fe fbb1 	bl	8018b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a3ca:	4b0d      	ldr	r3, [pc, #52]	@ (801a400 <prvCheckForValidListAndQueue+0x5c>)
 801a3cc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a3ce:	4b0d      	ldr	r3, [pc, #52]	@ (801a404 <prvCheckForValidListAndQueue+0x60>)
 801a3d0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	9300      	str	r3, [sp, #0]
 801a3d6:	4b0c      	ldr	r3, [pc, #48]	@ (801a408 <prvCheckForValidListAndQueue+0x64>)
 801a3d8:	4a0c      	ldr	r2, [pc, #48]	@ (801a40c <prvCheckForValidListAndQueue+0x68>)
 801a3da:	2110      	movs	r1, #16
 801a3dc:	200a      	movs	r0, #10
 801a3de:	f7fe fce5 	bl	8018dac <xQueueGenericCreateStatic>
 801a3e2:	4b04      	ldr	r3, [pc, #16]	@ (801a3f4 <prvCheckForValidListAndQueue+0x50>)
 801a3e4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801a3e6:	2800      	cmp	r0, #0
 801a3e8:	d0e3      	beq.n	801a3b2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a3ea:	4909      	ldr	r1, [pc, #36]	@ (801a410 <prvCheckForValidListAndQueue+0x6c>)
 801a3ec:	f7ff f984 	bl	80196f8 <vQueueAddToRegistry>
 801a3f0:	e7df      	b.n	801a3b2 <prvCheckForValidListAndQueue+0xe>
 801a3f2:	bf00      	nop
 801a3f4:	20003cac 	.word	0x20003cac
 801a3f8:	20003ccc 	.word	0x20003ccc
 801a3fc:	20003cb8 	.word	0x20003cb8
 801a400:	20003cb4 	.word	0x20003cb4
 801a404:	20003cb0 	.word	0x20003cb0
 801a408:	20003bb4 	.word	0x20003bb4
 801a40c:	20003c04 	.word	0x20003c04
 801a410:	08039424 	.word	0x08039424

0801a414 <xTimerCreateTimerTask>:
{
 801a414:	b510      	push	{r4, lr}
 801a416:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801a418:	f7ff ffc4 	bl	801a3a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801a41c:	4b12      	ldr	r3, [pc, #72]	@ (801a468 <xTimerCreateTimerTask+0x54>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	b1cb      	cbz	r3, 801a456 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a422:	2400      	movs	r4, #0
 801a424:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a426:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a428:	aa07      	add	r2, sp, #28
 801a42a:	a906      	add	r1, sp, #24
 801a42c:	a805      	add	r0, sp, #20
 801a42e:	f7fe fb71 	bl	8018b14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a432:	9b05      	ldr	r3, [sp, #20]
 801a434:	9302      	str	r3, [sp, #8]
 801a436:	9b06      	ldr	r3, [sp, #24]
 801a438:	9301      	str	r3, [sp, #4]
 801a43a:	2302      	movs	r3, #2
 801a43c:	9300      	str	r3, [sp, #0]
 801a43e:	4623      	mov	r3, r4
 801a440:	9a07      	ldr	r2, [sp, #28]
 801a442:	490a      	ldr	r1, [pc, #40]	@ (801a46c <xTimerCreateTimerTask+0x58>)
 801a444:	480a      	ldr	r0, [pc, #40]	@ (801a470 <xTimerCreateTimerTask+0x5c>)
 801a446:	f7ff fb4f 	bl	8019ae8 <xTaskCreateStatic>
 801a44a:	4b0a      	ldr	r3, [pc, #40]	@ (801a474 <xTimerCreateTimerTask+0x60>)
 801a44c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801a44e:	b110      	cbz	r0, 801a456 <xTimerCreateTimerTask+0x42>
}
 801a450:	2001      	movs	r0, #1
 801a452:	b008      	add	sp, #32
 801a454:	bd10      	pop	{r4, pc}
 801a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a45a:	f383 8811 	msr	BASEPRI, r3
 801a45e:	f3bf 8f6f 	isb	sy
 801a462:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801a466:	e7fe      	b.n	801a466 <xTimerCreateTimerTask+0x52>
 801a468:	20003cac 	.word	0x20003cac
 801a46c:	0803942c 	.word	0x0803942c
 801a470:	0801a779 	.word	0x0801a779
 801a474:	20003ca8 	.word	0x20003ca8

0801a478 <xTimerGenericCommand>:
	configASSERT( xTimer );
 801a478:	b1b8      	cbz	r0, 801a4aa <xTimerGenericCommand+0x32>
 801a47a:	469c      	mov	ip, r3
 801a47c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801a47e:	4818      	ldr	r0, [pc, #96]	@ (801a4e0 <xTimerGenericCommand+0x68>)
 801a480:	6800      	ldr	r0, [r0, #0]
 801a482:	b358      	cbz	r0, 801a4dc <xTimerGenericCommand+0x64>
{
 801a484:	b500      	push	{lr}
 801a486:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801a488:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a48a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a48c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a48e:	2905      	cmp	r1, #5
 801a490:	dc1c      	bgt.n	801a4cc <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a492:	f7ff fe51 	bl	801a138 <xTaskGetSchedulerState>
 801a496:	2802      	cmp	r0, #2
 801a498:	d010      	beq.n	801a4bc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a49a:	2300      	movs	r3, #0
 801a49c:	461a      	mov	r2, r3
 801a49e:	4669      	mov	r1, sp
 801a4a0:	480f      	ldr	r0, [pc, #60]	@ (801a4e0 <xTimerGenericCommand+0x68>)
 801a4a2:	6800      	ldr	r0, [r0, #0]
 801a4a4:	f7fe fcf0 	bl	8018e88 <xQueueGenericSend>
 801a4a8:	e015      	b.n	801a4d6 <xTimerGenericCommand+0x5e>
 801a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4ae:	f383 8811 	msr	BASEPRI, r3
 801a4b2:	f3bf 8f6f 	isb	sy
 801a4b6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801a4ba:	e7fe      	b.n	801a4ba <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a4bc:	2300      	movs	r3, #0
 801a4be:	9a06      	ldr	r2, [sp, #24]
 801a4c0:	4669      	mov	r1, sp
 801a4c2:	4807      	ldr	r0, [pc, #28]	@ (801a4e0 <xTimerGenericCommand+0x68>)
 801a4c4:	6800      	ldr	r0, [r0, #0]
 801a4c6:	f7fe fcdf 	bl	8018e88 <xQueueGenericSend>
 801a4ca:	e004      	b.n	801a4d6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	4662      	mov	r2, ip
 801a4d0:	4669      	mov	r1, sp
 801a4d2:	f7fe fde3 	bl	801909c <xQueueGenericSendFromISR>
}
 801a4d6:	b005      	add	sp, #20
 801a4d8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801a4dc:	2000      	movs	r0, #0
}
 801a4de:	4770      	bx	lr
 801a4e0:	20003cac 	.word	0x20003cac

0801a4e4 <prvSwitchTimerLists>:
{
 801a4e4:	b570      	push	{r4, r5, r6, lr}
 801a4e6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a4e8:	4b1b      	ldr	r3, [pc, #108]	@ (801a558 <prvSwitchTimerLists+0x74>)
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	681a      	ldr	r2, [r3, #0]
 801a4ee:	b362      	cbz	r2, 801a54a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a4f0:	68db      	ldr	r3, [r3, #12]
 801a4f2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4f4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a4f6:	1d25      	adds	r5, r4, #4
 801a4f8:	4628      	mov	r0, r5
 801a4fa:	f7fe fb49 	bl	8018b90 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a4fe:	6a23      	ldr	r3, [r4, #32]
 801a500:	4620      	mov	r0, r4
 801a502:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a504:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a508:	f013 0f04 	tst.w	r3, #4
 801a50c:	d0ec      	beq.n	801a4e8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a50e:	69a3      	ldr	r3, [r4, #24]
 801a510:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801a512:	429e      	cmp	r6, r3
 801a514:	d207      	bcs.n	801a526 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a516:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a518:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a51a:	4629      	mov	r1, r5
 801a51c:	4b0e      	ldr	r3, [pc, #56]	@ (801a558 <prvSwitchTimerLists+0x74>)
 801a51e:	6818      	ldr	r0, [r3, #0]
 801a520:	f7fe fb1d 	bl	8018b5e <vListInsert>
 801a524:	e7e0      	b.n	801a4e8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a526:	2100      	movs	r1, #0
 801a528:	9100      	str	r1, [sp, #0]
 801a52a:	460b      	mov	r3, r1
 801a52c:	4632      	mov	r2, r6
 801a52e:	4620      	mov	r0, r4
 801a530:	f7ff ffa2 	bl	801a478 <xTimerGenericCommand>
				configASSERT( xResult );
 801a534:	2800      	cmp	r0, #0
 801a536:	d1d7      	bne.n	801a4e8 <prvSwitchTimerLists+0x4>
 801a538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a53c:	f383 8811 	msr	BASEPRI, r3
 801a540:	f3bf 8f6f 	isb	sy
 801a544:	f3bf 8f4f 	dsb	sy
 801a548:	e7fe      	b.n	801a548 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801a54a:	4a04      	ldr	r2, [pc, #16]	@ (801a55c <prvSwitchTimerLists+0x78>)
 801a54c:	6810      	ldr	r0, [r2, #0]
 801a54e:	4902      	ldr	r1, [pc, #8]	@ (801a558 <prvSwitchTimerLists+0x74>)
 801a550:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801a552:	6013      	str	r3, [r2, #0]
}
 801a554:	b002      	add	sp, #8
 801a556:	bd70      	pop	{r4, r5, r6, pc}
 801a558:	20003cb4 	.word	0x20003cb4
 801a55c:	20003cb0 	.word	0x20003cb0

0801a560 <prvSampleTimeNow>:
{
 801a560:	b538      	push	{r3, r4, r5, lr}
 801a562:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801a564:	f7ff fb8e 	bl	8019c84 <xTaskGetTickCount>
 801a568:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801a56a:	4b07      	ldr	r3, [pc, #28]	@ (801a588 <prvSampleTimeNow+0x28>)
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	4283      	cmp	r3, r0
 801a570:	d805      	bhi.n	801a57e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801a572:	2300      	movs	r3, #0
 801a574:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801a576:	4b04      	ldr	r3, [pc, #16]	@ (801a588 <prvSampleTimeNow+0x28>)
 801a578:	601c      	str	r4, [r3, #0]
}
 801a57a:	4620      	mov	r0, r4
 801a57c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801a57e:	f7ff ffb1 	bl	801a4e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a582:	2301      	movs	r3, #1
 801a584:	602b      	str	r3, [r5, #0]
 801a586:	e7f6      	b.n	801a576 <prvSampleTimeNow+0x16>
 801a588:	20003ca4 	.word	0x20003ca4

0801a58c <prvProcessExpiredTimer>:
{
 801a58c:	b570      	push	{r4, r5, r6, lr}
 801a58e:	b082      	sub	sp, #8
 801a590:	4606      	mov	r6, r0
 801a592:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a594:	4917      	ldr	r1, [pc, #92]	@ (801a5f4 <prvProcessExpiredTimer+0x68>)
 801a596:	6809      	ldr	r1, [r1, #0]
 801a598:	68c9      	ldr	r1, [r1, #12]
 801a59a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a59c:	1d20      	adds	r0, r4, #4
 801a59e:	f7fe faf7 	bl	8018b90 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a5a2:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801a5a6:	f01c 0f04 	tst.w	ip, #4
 801a5aa:	d108      	bne.n	801a5be <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a5ac:	f02c 0c01 	bic.w	ip, ip, #1
 801a5b0:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a5b4:	6a23      	ldr	r3, [r4, #32]
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	4798      	blx	r3
}
 801a5ba:	b002      	add	sp, #8
 801a5bc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a5be:	69a1      	ldr	r1, [r4, #24]
 801a5c0:	4633      	mov	r3, r6
 801a5c2:	462a      	mov	r2, r5
 801a5c4:	4431      	add	r1, r6
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	f7ff fec8 	bl	801a35c <prvInsertTimerInActiveList>
 801a5cc:	2800      	cmp	r0, #0
 801a5ce:	d0f1      	beq.n	801a5b4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a5d0:	2100      	movs	r1, #0
 801a5d2:	9100      	str	r1, [sp, #0]
 801a5d4:	460b      	mov	r3, r1
 801a5d6:	4632      	mov	r2, r6
 801a5d8:	4620      	mov	r0, r4
 801a5da:	f7ff ff4d 	bl	801a478 <xTimerGenericCommand>
			configASSERT( xResult );
 801a5de:	2800      	cmp	r0, #0
 801a5e0:	d1e8      	bne.n	801a5b4 <prvProcessExpiredTimer+0x28>
 801a5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a5e6:	f383 8811 	msr	BASEPRI, r3
 801a5ea:	f3bf 8f6f 	isb	sy
 801a5ee:	f3bf 8f4f 	dsb	sy
 801a5f2:	e7fe      	b.n	801a5f2 <prvProcessExpiredTimer+0x66>
 801a5f4:	20003cb4 	.word	0x20003cb4

0801a5f8 <prvProcessTimerOrBlockTask>:
{
 801a5f8:	b570      	push	{r4, r5, r6, lr}
 801a5fa:	b082      	sub	sp, #8
 801a5fc:	4606      	mov	r6, r0
 801a5fe:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801a600:	f7ff fb38 	bl	8019c74 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a604:	a801      	add	r0, sp, #4
 801a606:	f7ff ffab 	bl	801a560 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801a60a:	9b01      	ldr	r3, [sp, #4]
 801a60c:	bb33      	cbnz	r3, 801a65c <prvProcessTimerOrBlockTask+0x64>
 801a60e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a610:	b9e4      	cbnz	r4, 801a64c <prvProcessTimerOrBlockTask+0x54>
 801a612:	42b0      	cmp	r0, r6
 801a614:	d213      	bcs.n	801a63e <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a616:	4622      	mov	r2, r4
 801a618:	1b71      	subs	r1, r6, r5
 801a61a:	4b12      	ldr	r3, [pc, #72]	@ (801a664 <prvProcessTimerOrBlockTask+0x6c>)
 801a61c:	6818      	ldr	r0, [r3, #0]
 801a61e:	f7ff f87f 	bl	8019720 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a622:	f7ff fbc1 	bl	8019da8 <xTaskResumeAll>
 801a626:	b9d8      	cbnz	r0, 801a660 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801a628:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a62c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a630:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a634:	f3bf 8f4f 	dsb	sy
 801a638:	f3bf 8f6f 	isb	sy
 801a63c:	e010      	b.n	801a660 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801a63e:	f7ff fbb3 	bl	8019da8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a642:	4629      	mov	r1, r5
 801a644:	4630      	mov	r0, r6
 801a646:	f7ff ffa1 	bl	801a58c <prvProcessExpiredTimer>
 801a64a:	e009      	b.n	801a660 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a64c:	4a06      	ldr	r2, [pc, #24]	@ (801a668 <prvProcessTimerOrBlockTask+0x70>)
 801a64e:	6812      	ldr	r2, [r2, #0]
 801a650:	6812      	ldr	r2, [r2, #0]
 801a652:	b90a      	cbnz	r2, 801a658 <prvProcessTimerOrBlockTask+0x60>
 801a654:	2401      	movs	r4, #1
 801a656:	e7de      	b.n	801a616 <prvProcessTimerOrBlockTask+0x1e>
 801a658:	461c      	mov	r4, r3
 801a65a:	e7dc      	b.n	801a616 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801a65c:	f7ff fba4 	bl	8019da8 <xTaskResumeAll>
}
 801a660:	b002      	add	sp, #8
 801a662:	bd70      	pop	{r4, r5, r6, pc}
 801a664:	20003cac 	.word	0x20003cac
 801a668:	20003cb0 	.word	0x20003cb0

0801a66c <prvProcessReceivedCommands>:
{
 801a66c:	b510      	push	{r4, lr}
 801a66e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a670:	e002      	b.n	801a678 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a672:	9b04      	ldr	r3, [sp, #16]
 801a674:	2b00      	cmp	r3, #0
 801a676:	da0f      	bge.n	801a698 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a678:	2200      	movs	r2, #0
 801a67a:	a904      	add	r1, sp, #16
 801a67c:	4b3d      	ldr	r3, [pc, #244]	@ (801a774 <prvProcessReceivedCommands+0x108>)
 801a67e:	6818      	ldr	r0, [r3, #0]
 801a680:	f7fe fd73 	bl	801916a <xQueueReceive>
 801a684:	2800      	cmp	r0, #0
 801a686:	d073      	beq.n	801a770 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a688:	9b04      	ldr	r3, [sp, #16]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	daf1      	bge.n	801a672 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a68e:	9907      	ldr	r1, [sp, #28]
 801a690:	9806      	ldr	r0, [sp, #24]
 801a692:	9b05      	ldr	r3, [sp, #20]
 801a694:	4798      	blx	r3
 801a696:	e7ec      	b.n	801a672 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a698:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a69a:	6963      	ldr	r3, [r4, #20]
 801a69c:	b113      	cbz	r3, 801a6a4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a69e:	1d20      	adds	r0, r4, #4
 801a6a0:	f7fe fa76 	bl	8018b90 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a6a4:	a803      	add	r0, sp, #12
 801a6a6:	f7ff ff5b 	bl	801a560 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801a6aa:	9b04      	ldr	r3, [sp, #16]
 801a6ac:	2b09      	cmp	r3, #9
 801a6ae:	d8e3      	bhi.n	801a678 <prvProcessReceivedCommands+0xc>
 801a6b0:	e8df f003 	tbb	[pc, r3]
 801a6b4:	30050505 	.word	0x30050505
 801a6b8:	05055037 	.word	0x05055037
 801a6bc:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a6be:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a6c2:	f043 0301 	orr.w	r3, r3, #1
 801a6c6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a6ca:	9b05      	ldr	r3, [sp, #20]
 801a6cc:	69a1      	ldr	r1, [r4, #24]
 801a6ce:	4602      	mov	r2, r0
 801a6d0:	4419      	add	r1, r3
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	f7ff fe42 	bl	801a35c <prvInsertTimerInActiveList>
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	d0cd      	beq.n	801a678 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a6dc:	6a23      	ldr	r3, [r4, #32]
 801a6de:	4620      	mov	r0, r4
 801a6e0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a6e2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a6e6:	f013 0f04 	tst.w	r3, #4
 801a6ea:	d0c5      	beq.n	801a678 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a6ec:	69a2      	ldr	r2, [r4, #24]
 801a6ee:	2100      	movs	r1, #0
 801a6f0:	9100      	str	r1, [sp, #0]
 801a6f2:	460b      	mov	r3, r1
 801a6f4:	9805      	ldr	r0, [sp, #20]
 801a6f6:	4402      	add	r2, r0
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	f7ff febd 	bl	801a478 <xTimerGenericCommand>
							configASSERT( xResult );
 801a6fe:	2800      	cmp	r0, #0
 801a700:	d1ba      	bne.n	801a678 <prvProcessReceivedCommands+0xc>
 801a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a706:	f383 8811 	msr	BASEPRI, r3
 801a70a:	f3bf 8f6f 	isb	sy
 801a70e:	f3bf 8f4f 	dsb	sy
 801a712:	e7fe      	b.n	801a712 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a714:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a718:	f023 0301 	bic.w	r3, r3, #1
 801a71c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801a720:	e7aa      	b.n	801a678 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a722:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a726:	f043 0301 	orr.w	r3, r3, #1
 801a72a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a72e:	9905      	ldr	r1, [sp, #20]
 801a730:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a732:	b131      	cbz	r1, 801a742 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a734:	4603      	mov	r3, r0
 801a736:	4602      	mov	r2, r0
 801a738:	4401      	add	r1, r0
 801a73a:	4620      	mov	r0, r4
 801a73c:	f7ff fe0e 	bl	801a35c <prvInsertTimerInActiveList>
					break;
 801a740:	e79a      	b.n	801a678 <prvProcessReceivedCommands+0xc>
 801a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a746:	f383 8811 	msr	BASEPRI, r3
 801a74a:	f3bf 8f6f 	isb	sy
 801a74e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a752:	e7fe      	b.n	801a752 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a754:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a758:	f013 0f02 	tst.w	r3, #2
 801a75c:	d004      	beq.n	801a768 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a75e:	f023 0301 	bic.w	r3, r3, #1
 801a762:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801a766:	e787      	b.n	801a678 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801a768:	4620      	mov	r0, r4
 801a76a:	f000 fab7 	bl	801acdc <vPortFree>
 801a76e:	e783      	b.n	801a678 <prvProcessReceivedCommands+0xc>
}
 801a770:	b008      	add	sp, #32
 801a772:	bd10      	pop	{r4, pc}
 801a774:	20003cac 	.word	0x20003cac

0801a778 <prvTimerTask>:
{
 801a778:	b500      	push	{lr}
 801a77a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a77c:	a801      	add	r0, sp, #4
 801a77e:	f7ff fddd 	bl	801a33c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a782:	9901      	ldr	r1, [sp, #4]
 801a784:	f7ff ff38 	bl	801a5f8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801a788:	f7ff ff70 	bl	801a66c <prvProcessReceivedCommands>
	for( ;; )
 801a78c:	e7f6      	b.n	801a77c <prvTimerTask+0x4>
	...

0801a790 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a790:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801a792:	2300      	movs	r3, #0
 801a794:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a796:	4b0d      	ldr	r3, [pc, #52]	@ (801a7cc <prvTaskExitError+0x3c>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a79e:	d008      	beq.n	801a7b2 <prvTaskExitError+0x22>
 801a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7a4:	f383 8811 	msr	BASEPRI, r3
 801a7a8:	f3bf 8f6f 	isb	sy
 801a7ac:	f3bf 8f4f 	dsb	sy
 801a7b0:	e7fe      	b.n	801a7b0 <prvTaskExitError+0x20>
 801a7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7b6:	f383 8811 	msr	BASEPRI, r3
 801a7ba:	f3bf 8f6f 	isb	sy
 801a7be:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a7c2:	9b01      	ldr	r3, [sp, #4]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d0fc      	beq.n	801a7c2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a7c8:	b002      	add	sp, #8
 801a7ca:	4770      	bx	lr
 801a7cc:	20000114 	.word	0x20000114

0801a7d0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a7d0:	4808      	ldr	r0, [pc, #32]	@ (801a7f4 <prvPortStartFirstTask+0x24>)
 801a7d2:	6800      	ldr	r0, [r0, #0]
 801a7d4:	6800      	ldr	r0, [r0, #0]
 801a7d6:	f380 8808 	msr	MSP, r0
 801a7da:	f04f 0000 	mov.w	r0, #0
 801a7de:	f380 8814 	msr	CONTROL, r0
 801a7e2:	b662      	cpsie	i
 801a7e4:	b661      	cpsie	f
 801a7e6:	f3bf 8f4f 	dsb	sy
 801a7ea:	f3bf 8f6f 	isb	sy
 801a7ee:	df00      	svc	0
 801a7f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a7f2:	0000      	.short	0x0000
 801a7f4:	e000ed08 	.word	0xe000ed08

0801a7f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a7f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a808 <vPortEnableVFP+0x10>
 801a7fc:	6801      	ldr	r1, [r0, #0]
 801a7fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a802:	6001      	str	r1, [r0, #0]
 801a804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a806:	0000      	.short	0x0000
 801a808:	e000ed88 	.word	0xe000ed88

0801a80c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a80c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a810:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a814:	f021 0101 	bic.w	r1, r1, #1
 801a818:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a81c:	4b05      	ldr	r3, [pc, #20]	@ (801a834 <pxPortInitialiseStack+0x28>)
 801a81e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a822:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a826:	f06f 0302 	mvn.w	r3, #2
 801a82a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801a82e:	3844      	subs	r0, #68	@ 0x44
 801a830:	4770      	bx	lr
 801a832:	bf00      	nop
 801a834:	0801a791 	.word	0x0801a791
	...

0801a840 <SVC_Handler>:
	__asm volatile (
 801a840:	4b07      	ldr	r3, [pc, #28]	@ (801a860 <pxCurrentTCBConst2>)
 801a842:	6819      	ldr	r1, [r3, #0]
 801a844:	6808      	ldr	r0, [r1, #0]
 801a846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a84a:	f380 8809 	msr	PSP, r0
 801a84e:	f3bf 8f6f 	isb	sy
 801a852:	f04f 0000 	mov.w	r0, #0
 801a856:	f380 8811 	msr	BASEPRI, r0
 801a85a:	4770      	bx	lr
 801a85c:	f3af 8000 	nop.w

0801a860 <pxCurrentTCBConst2>:
 801a860:	20003bb0 	.word	0x20003bb0

0801a864 <vPortEnterCritical>:
 801a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a868:	f383 8811 	msr	BASEPRI, r3
 801a86c:	f3bf 8f6f 	isb	sy
 801a870:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801a874:	4a0b      	ldr	r2, [pc, #44]	@ (801a8a4 <vPortEnterCritical+0x40>)
 801a876:	6813      	ldr	r3, [r2, #0]
 801a878:	3301      	adds	r3, #1
 801a87a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801a87c:	2b01      	cmp	r3, #1
 801a87e:	d000      	beq.n	801a882 <vPortEnterCritical+0x1e>
}
 801a880:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a882:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a886:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801a88a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801a88e:	d0f7      	beq.n	801a880 <vPortEnterCritical+0x1c>
 801a890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a894:	f383 8811 	msr	BASEPRI, r3
 801a898:	f3bf 8f6f 	isb	sy
 801a89c:	f3bf 8f4f 	dsb	sy
 801a8a0:	e7fe      	b.n	801a8a0 <vPortEnterCritical+0x3c>
 801a8a2:	bf00      	nop
 801a8a4:	20000114 	.word	0x20000114

0801a8a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801a8a8:	4b09      	ldr	r3, [pc, #36]	@ (801a8d0 <vPortExitCritical+0x28>)
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	b943      	cbnz	r3, 801a8c0 <vPortExitCritical+0x18>
 801a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8b2:	f383 8811 	msr	BASEPRI, r3
 801a8b6:	f3bf 8f6f 	isb	sy
 801a8ba:	f3bf 8f4f 	dsb	sy
 801a8be:	e7fe      	b.n	801a8be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801a8c0:	3b01      	subs	r3, #1
 801a8c2:	4a03      	ldr	r2, [pc, #12]	@ (801a8d0 <vPortExitCritical+0x28>)
 801a8c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a8c6:	b90b      	cbnz	r3, 801a8cc <vPortExitCritical+0x24>
	__asm volatile
 801a8c8:	f383 8811 	msr	BASEPRI, r3
}
 801a8cc:	4770      	bx	lr
 801a8ce:	bf00      	nop
 801a8d0:	20000114 	.word	0x20000114
	...

0801a8e0 <PendSV_Handler>:
	__asm volatile
 801a8e0:	f3ef 8009 	mrs	r0, PSP
 801a8e4:	f3bf 8f6f 	isb	sy
 801a8e8:	4b15      	ldr	r3, [pc, #84]	@ (801a940 <pxCurrentTCBConst>)
 801a8ea:	681a      	ldr	r2, [r3, #0]
 801a8ec:	f01e 0f10 	tst.w	lr, #16
 801a8f0:	bf08      	it	eq
 801a8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8fa:	6010      	str	r0, [r2, #0]
 801a8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a904:	f380 8811 	msr	BASEPRI, r0
 801a908:	f3bf 8f4f 	dsb	sy
 801a90c:	f3bf 8f6f 	isb	sy
 801a910:	f7ff faec 	bl	8019eec <vTaskSwitchContext>
 801a914:	f04f 0000 	mov.w	r0, #0
 801a918:	f380 8811 	msr	BASEPRI, r0
 801a91c:	bc09      	pop	{r0, r3}
 801a91e:	6819      	ldr	r1, [r3, #0]
 801a920:	6808      	ldr	r0, [r1, #0]
 801a922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a926:	f01e 0f10 	tst.w	lr, #16
 801a92a:	bf08      	it	eq
 801a92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a930:	f380 8809 	msr	PSP, r0
 801a934:	f3bf 8f6f 	isb	sy
 801a938:	4770      	bx	lr
 801a93a:	bf00      	nop
 801a93c:	f3af 8000 	nop.w

0801a940 <pxCurrentTCBConst>:
 801a940:	20003bb0 	.word	0x20003bb0

0801a944 <xPortSysTickHandler>:
{
 801a944:	b508      	push	{r3, lr}
	__asm volatile
 801a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a94a:	f383 8811 	msr	BASEPRI, r3
 801a94e:	f3bf 8f6f 	isb	sy
 801a952:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801a956:	f7ff f99b 	bl	8019c90 <xTaskIncrementTick>
 801a95a:	b128      	cbz	r0, 801a968 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a95c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a964:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801a968:	2300      	movs	r3, #0
 801a96a:	f383 8811 	msr	BASEPRI, r3
}
 801a96e:	bd08      	pop	{r3, pc}

0801a970 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a970:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801a974:	2300      	movs	r3, #0
 801a976:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a978:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a97a:	4b05      	ldr	r3, [pc, #20]	@ (801a990 <vPortSetupTimerInterrupt+0x20>)
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	4905      	ldr	r1, [pc, #20]	@ (801a994 <vPortSetupTimerInterrupt+0x24>)
 801a980:	fba1 1303 	umull	r1, r3, r1, r3
 801a984:	099b      	lsrs	r3, r3, #6
 801a986:	3b01      	subs	r3, #1
 801a988:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a98a:	2307      	movs	r3, #7
 801a98c:	6113      	str	r3, [r2, #16]
}
 801a98e:	4770      	bx	lr
 801a990:	20000018 	.word	0x20000018
 801a994:	10624dd3 	.word	0x10624dd3

0801a998 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a998:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a99c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a9a0:	4b3d      	ldr	r3, [pc, #244]	@ (801aa98 <xPortStartScheduler+0x100>)
 801a9a2:	429a      	cmp	r2, r3
 801a9a4:	d01c      	beq.n	801a9e0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a9a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a9aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a9ae:	4b3b      	ldr	r3, [pc, #236]	@ (801aa9c <xPortStartScheduler+0x104>)
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d01e      	beq.n	801a9f2 <xPortStartScheduler+0x5a>
{
 801a9b4:	b530      	push	{r4, r5, lr}
 801a9b6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a9b8:	4b39      	ldr	r3, [pc, #228]	@ (801aaa0 <xPortStartScheduler+0x108>)
 801a9ba:	781a      	ldrb	r2, [r3, #0]
 801a9bc:	b2d2      	uxtb	r2, r2
 801a9be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a9c0:	22ff      	movs	r2, #255	@ 0xff
 801a9c2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a9c4:	781b      	ldrb	r3, [r3, #0]
 801a9c6:	b2db      	uxtb	r3, r3
 801a9c8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a9cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a9d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a9d4:	4a33      	ldr	r2, [pc, #204]	@ (801aaa4 <xPortStartScheduler+0x10c>)
 801a9d6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a9d8:	4b33      	ldr	r3, [pc, #204]	@ (801aaa8 <xPortStartScheduler+0x110>)
 801a9da:	2207      	movs	r2, #7
 801a9dc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a9de:	e01b      	b.n	801aa18 <xPortStartScheduler+0x80>
	__asm volatile
 801a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9e4:	f383 8811 	msr	BASEPRI, r3
 801a9e8:	f3bf 8f6f 	isb	sy
 801a9ec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a9f0:	e7fe      	b.n	801a9f0 <xPortStartScheduler+0x58>
 801a9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9f6:	f383 8811 	msr	BASEPRI, r3
 801a9fa:	f3bf 8f6f 	isb	sy
 801a9fe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801aa02:	e7fe      	b.n	801aa02 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801aa04:	4a28      	ldr	r2, [pc, #160]	@ (801aaa8 <xPortStartScheduler+0x110>)
 801aa06:	6813      	ldr	r3, [r2, #0]
 801aa08:	3b01      	subs	r3, #1
 801aa0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801aa0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801aa10:	005b      	lsls	r3, r3, #1
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801aa18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801aa1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aa20:	d1f0      	bne.n	801aa04 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801aa22:	4b21      	ldr	r3, [pc, #132]	@ (801aaa8 <xPortStartScheduler+0x110>)
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	2b03      	cmp	r3, #3
 801aa28:	d008      	beq.n	801aa3c <xPortStartScheduler+0xa4>
 801aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa2e:	f383 8811 	msr	BASEPRI, r3
 801aa32:	f3bf 8f6f 	isb	sy
 801aa36:	f3bf 8f4f 	dsb	sy
 801aa3a:	e7fe      	b.n	801aa3a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801aa3c:	021b      	lsls	r3, r3, #8
 801aa3e:	4a1a      	ldr	r2, [pc, #104]	@ (801aaa8 <xPortStartScheduler+0x110>)
 801aa40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801aa42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801aa46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801aa48:	9b01      	ldr	r3, [sp, #4]
 801aa4a:	b2db      	uxtb	r3, r3
 801aa4c:	4a14      	ldr	r2, [pc, #80]	@ (801aaa0 <xPortStartScheduler+0x108>)
 801aa4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801aa50:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801aa54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801aa58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801aa5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801aa60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801aa64:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801aa68:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801aa6c:	f7ff ff80 	bl	801a970 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801aa70:	2500      	movs	r5, #0
 801aa72:	4b0e      	ldr	r3, [pc, #56]	@ (801aaac <xPortStartScheduler+0x114>)
 801aa74:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801aa76:	f7ff febf 	bl	801a7f8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801aa7a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801aa7e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801aa82:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801aa86:	f7ff fea3 	bl	801a7d0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801aa8a:	f7ff fa2f 	bl	8019eec <vTaskSwitchContext>
	prvTaskExitError();
 801aa8e:	f7ff fe7f 	bl	801a790 <prvTaskExitError>
}
 801aa92:	4628      	mov	r0, r5
 801aa94:	b003      	add	sp, #12
 801aa96:	bd30      	pop	{r4, r5, pc}
 801aa98:	410fc271 	.word	0x410fc271
 801aa9c:	410fc270 	.word	0x410fc270
 801aaa0:	e000e400 	.word	0xe000e400
 801aaa4:	20003ce4 	.word	0x20003ce4
 801aaa8:	20003ce0 	.word	0x20003ce0
 801aaac:	20000114 	.word	0x20000114

0801aab0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801aab0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801aab4:	2b0f      	cmp	r3, #15
 801aab6:	d90f      	bls.n	801aad8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801aab8:	4a11      	ldr	r2, [pc, #68]	@ (801ab00 <vPortValidateInterruptPriority+0x50>)
 801aaba:	5c9b      	ldrb	r3, [r3, r2]
 801aabc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801aabe:	4a11      	ldr	r2, [pc, #68]	@ (801ab04 <vPortValidateInterruptPriority+0x54>)
 801aac0:	7812      	ldrb	r2, [r2, #0]
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d908      	bls.n	801aad8 <vPortValidateInterruptPriority+0x28>
 801aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aaca:	f383 8811 	msr	BASEPRI, r3
 801aace:	f3bf 8f6f 	isb	sy
 801aad2:	f3bf 8f4f 	dsb	sy
 801aad6:	e7fe      	b.n	801aad6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801aad8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801aadc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801aae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801aae4:	4a08      	ldr	r2, [pc, #32]	@ (801ab08 <vPortValidateInterruptPriority+0x58>)
 801aae6:	6812      	ldr	r2, [r2, #0]
 801aae8:	4293      	cmp	r3, r2
 801aaea:	d908      	bls.n	801aafe <vPortValidateInterruptPriority+0x4e>
 801aaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aaf0:	f383 8811 	msr	BASEPRI, r3
 801aaf4:	f3bf 8f6f 	isb	sy
 801aaf8:	f3bf 8f4f 	dsb	sy
 801aafc:	e7fe      	b.n	801aafc <vPortValidateInterruptPriority+0x4c>
	}
 801aafe:	4770      	bx	lr
 801ab00:	e000e3f0 	.word	0xe000e3f0
 801ab04:	20003ce4 	.word	0x20003ce4
 801ab08:	20003ce0 	.word	0x20003ce0

0801ab0c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ab0c:	4a12      	ldr	r2, [pc, #72]	@ (801ab58 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ab0e:	f012 0f07 	tst.w	r2, #7
 801ab12:	d01f      	beq.n	801ab54 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ab14:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ab16:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ab1a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801ab1e:	33f8      	adds	r3, #248	@ 0xf8
 801ab20:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ab22:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ab24:	480d      	ldr	r0, [pc, #52]	@ (801ab5c <prvHeapInit+0x50>)
 801ab26:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801ab28:	2100      	movs	r1, #0
 801ab2a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ab2c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801ab2e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ab30:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801ab34:	480a      	ldr	r0, [pc, #40]	@ (801ab60 <prvHeapInit+0x54>)
 801ab36:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801ab38:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ab3a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ab3c:	1a99      	subs	r1, r3, r2
 801ab3e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ab40:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ab42:	4b08      	ldr	r3, [pc, #32]	@ (801ab64 <prvHeapInit+0x58>)
 801ab44:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ab46:	4b08      	ldr	r3, [pc, #32]	@ (801ab68 <prvHeapInit+0x5c>)
 801ab48:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ab4a:	4b08      	ldr	r3, [pc, #32]	@ (801ab6c <prvHeapInit+0x60>)
 801ab4c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ab50:	601a      	str	r2, [r3, #0]
}
 801ab52:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ab54:	4b06      	ldr	r3, [pc, #24]	@ (801ab70 <prvHeapInit+0x64>)
 801ab56:	e7e5      	b.n	801ab24 <prvHeapInit+0x18>
 801ab58:	20003d08 	.word	0x20003d08
 801ab5c:	20003d00 	.word	0x20003d00
 801ab60:	20003cfc 	.word	0x20003cfc
 801ab64:	20003cf4 	.word	0x20003cf4
 801ab68:	20003cf8 	.word	0x20003cf8
 801ab6c:	20003ce8 	.word	0x20003ce8
 801ab70:	000160f8 	.word	0x000160f8

0801ab74 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ab74:	4b16      	ldr	r3, [pc, #88]	@ (801abd0 <prvInsertBlockIntoFreeList+0x5c>)
 801ab76:	461a      	mov	r2, r3
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	4283      	cmp	r3, r0
 801ab7c:	d3fb      	bcc.n	801ab76 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ab7e:	6851      	ldr	r1, [r2, #4]
 801ab80:	eb02 0c01 	add.w	ip, r2, r1
 801ab84:	4584      	cmp	ip, r0
 801ab86:	d009      	beq.n	801ab9c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ab88:	6841      	ldr	r1, [r0, #4]
 801ab8a:	eb00 0c01 	add.w	ip, r0, r1
 801ab8e:	4563      	cmp	r3, ip
 801ab90:	d009      	beq.n	801aba6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ab92:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ab94:	4290      	cmp	r0, r2
 801ab96:	d019      	beq.n	801abcc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ab98:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801ab9a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ab9c:	6840      	ldr	r0, [r0, #4]
 801ab9e:	4401      	add	r1, r0
 801aba0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801aba2:	4610      	mov	r0, r2
 801aba4:	e7f0      	b.n	801ab88 <prvInsertBlockIntoFreeList+0x14>
{
 801aba6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801aba8:	4c0a      	ldr	r4, [pc, #40]	@ (801abd4 <prvInsertBlockIntoFreeList+0x60>)
 801abaa:	6824      	ldr	r4, [r4, #0]
 801abac:	42a3      	cmp	r3, r4
 801abae:	d00b      	beq.n	801abc8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801abb0:	685b      	ldr	r3, [r3, #4]
 801abb2:	4419      	add	r1, r3
 801abb4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801abb6:	6813      	ldr	r3, [r2, #0]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801abbc:	4290      	cmp	r0, r2
 801abbe:	d000      	beq.n	801abc2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801abc0:	6010      	str	r0, [r2, #0]
	}
}
 801abc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801abc6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801abc8:	6004      	str	r4, [r0, #0]
 801abca:	e7f7      	b.n	801abbc <prvInsertBlockIntoFreeList+0x48>
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop
 801abd0:	20003d00 	.word	0x20003d00
 801abd4:	20003cfc 	.word	0x20003cfc

0801abd8 <pvPortMalloc>:
{
 801abd8:	b538      	push	{r3, r4, r5, lr}
 801abda:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801abdc:	f7ff f84a 	bl	8019c74 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801abe0:	4b38      	ldr	r3, [pc, #224]	@ (801acc4 <pvPortMalloc+0xec>)
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	b1b3      	cbz	r3, 801ac14 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801abe6:	4b38      	ldr	r3, [pc, #224]	@ (801acc8 <pvPortMalloc+0xf0>)
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	421c      	tst	r4, r3
 801abec:	d150      	bne.n	801ac90 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801abee:	2c00      	cmp	r4, #0
 801abf0:	d050      	beq.n	801ac94 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801abf2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801abf6:	f014 0f07 	tst.w	r4, #7
 801abfa:	d002      	beq.n	801ac02 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801abfc:	f022 0207 	bic.w	r2, r2, #7
 801ac00:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801ac02:	2a00      	cmp	r2, #0
 801ac04:	d055      	beq.n	801acb2 <pvPortMalloc+0xda>
 801ac06:	4b31      	ldr	r3, [pc, #196]	@ (801accc <pvPortMalloc+0xf4>)
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	4293      	cmp	r3, r2
 801ac0c:	d353      	bcc.n	801acb6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801ac0e:	4930      	ldr	r1, [pc, #192]	@ (801acd0 <pvPortMalloc+0xf8>)
 801ac10:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ac12:	e004      	b.n	801ac1e <pvPortMalloc+0x46>
			prvHeapInit();
 801ac14:	f7ff ff7a 	bl	801ab0c <prvHeapInit>
 801ac18:	e7e5      	b.n	801abe6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801ac1a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801ac1c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ac1e:	6863      	ldr	r3, [r4, #4]
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d202      	bcs.n	801ac2a <pvPortMalloc+0x52>
 801ac24:	6823      	ldr	r3, [r4, #0]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d1f7      	bne.n	801ac1a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801ac2a:	4b26      	ldr	r3, [pc, #152]	@ (801acc4 <pvPortMalloc+0xec>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	42a3      	cmp	r3, r4
 801ac30:	d043      	beq.n	801acba <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801ac32:	680d      	ldr	r5, [r1, #0]
 801ac34:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801ac36:	6823      	ldr	r3, [r4, #0]
 801ac38:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801ac3a:	6863      	ldr	r3, [r4, #4]
 801ac3c:	1a9b      	subs	r3, r3, r2
 801ac3e:	2b10      	cmp	r3, #16
 801ac40:	d910      	bls.n	801ac64 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801ac42:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ac44:	f010 0f07 	tst.w	r0, #7
 801ac48:	d008      	beq.n	801ac5c <pvPortMalloc+0x84>
 801ac4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ac4e:	f383 8811 	msr	BASEPRI, r3
 801ac52:	f3bf 8f6f 	isb	sy
 801ac56:	f3bf 8f4f 	dsb	sy
 801ac5a:	e7fe      	b.n	801ac5a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801ac5c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801ac5e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801ac60:	f7ff ff88 	bl	801ab74 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801ac64:	6862      	ldr	r2, [r4, #4]
 801ac66:	4919      	ldr	r1, [pc, #100]	@ (801accc <pvPortMalloc+0xf4>)
 801ac68:	680b      	ldr	r3, [r1, #0]
 801ac6a:	1a9b      	subs	r3, r3, r2
 801ac6c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801ac6e:	4919      	ldr	r1, [pc, #100]	@ (801acd4 <pvPortMalloc+0xfc>)
 801ac70:	6809      	ldr	r1, [r1, #0]
 801ac72:	428b      	cmp	r3, r1
 801ac74:	d201      	bcs.n	801ac7a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801ac76:	4917      	ldr	r1, [pc, #92]	@ (801acd4 <pvPortMalloc+0xfc>)
 801ac78:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ac7a:	4b13      	ldr	r3, [pc, #76]	@ (801acc8 <pvPortMalloc+0xf0>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	4313      	orrs	r3, r2
 801ac80:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ac82:	2300      	movs	r3, #0
 801ac84:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801ac86:	4a14      	ldr	r2, [pc, #80]	@ (801acd8 <pvPortMalloc+0x100>)
 801ac88:	6813      	ldr	r3, [r2, #0]
 801ac8a:	3301      	adds	r3, #1
 801ac8c:	6013      	str	r3, [r2, #0]
 801ac8e:	e002      	b.n	801ac96 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801ac90:	2500      	movs	r5, #0
 801ac92:	e000      	b.n	801ac96 <pvPortMalloc+0xbe>
 801ac94:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801ac96:	f7ff f887 	bl	8019da8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ac9a:	f015 0f07 	tst.w	r5, #7
 801ac9e:	d00e      	beq.n	801acbe <pvPortMalloc+0xe6>
 801aca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aca4:	f383 8811 	msr	BASEPRI, r3
 801aca8:	f3bf 8f6f 	isb	sy
 801acac:	f3bf 8f4f 	dsb	sy
 801acb0:	e7fe      	b.n	801acb0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801acb2:	2500      	movs	r5, #0
 801acb4:	e7ef      	b.n	801ac96 <pvPortMalloc+0xbe>
 801acb6:	2500      	movs	r5, #0
 801acb8:	e7ed      	b.n	801ac96 <pvPortMalloc+0xbe>
 801acba:	2500      	movs	r5, #0
 801acbc:	e7eb      	b.n	801ac96 <pvPortMalloc+0xbe>
}
 801acbe:	4628      	mov	r0, r5
 801acc0:	bd38      	pop	{r3, r4, r5, pc}
 801acc2:	bf00      	nop
 801acc4:	20003cfc 	.word	0x20003cfc
 801acc8:	20003ce8 	.word	0x20003ce8
 801accc:	20003cf8 	.word	0x20003cf8
 801acd0:	20003d00 	.word	0x20003d00
 801acd4:	20003cf4 	.word	0x20003cf4
 801acd8:	20003cf0 	.word	0x20003cf0

0801acdc <vPortFree>:
	if( pv != NULL )
 801acdc:	2800      	cmp	r0, #0
 801acde:	d034      	beq.n	801ad4a <vPortFree+0x6e>
{
 801ace0:	b538      	push	{r3, r4, r5, lr}
 801ace2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801ace4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ace8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801acec:	4a17      	ldr	r2, [pc, #92]	@ (801ad4c <vPortFree+0x70>)
 801acee:	6812      	ldr	r2, [r2, #0]
 801acf0:	4213      	tst	r3, r2
 801acf2:	d108      	bne.n	801ad06 <vPortFree+0x2a>
 801acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801acf8:	f383 8811 	msr	BASEPRI, r3
 801acfc:	f3bf 8f6f 	isb	sy
 801ad00:	f3bf 8f4f 	dsb	sy
 801ad04:	e7fe      	b.n	801ad04 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ad06:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801ad0a:	b141      	cbz	r1, 801ad1e <vPortFree+0x42>
 801ad0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad10:	f383 8811 	msr	BASEPRI, r3
 801ad14:	f3bf 8f6f 	isb	sy
 801ad18:	f3bf 8f4f 	dsb	sy
 801ad1c:	e7fe      	b.n	801ad1c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ad1e:	ea23 0302 	bic.w	r3, r3, r2
 801ad22:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801ad26:	f7fe ffa5 	bl	8019c74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ad2a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801ad2e:	4a08      	ldr	r2, [pc, #32]	@ (801ad50 <vPortFree+0x74>)
 801ad30:	6813      	ldr	r3, [r2, #0]
 801ad32:	440b      	add	r3, r1
 801ad34:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ad36:	4628      	mov	r0, r5
 801ad38:	f7ff ff1c 	bl	801ab74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ad3c:	4a05      	ldr	r2, [pc, #20]	@ (801ad54 <vPortFree+0x78>)
 801ad3e:	6813      	ldr	r3, [r2, #0]
 801ad40:	3301      	adds	r3, #1
 801ad42:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801ad44:	f7ff f830 	bl	8019da8 <xTaskResumeAll>
}
 801ad48:	bd38      	pop	{r3, r4, r5, pc}
 801ad4a:	4770      	bx	lr
 801ad4c:	20003ce8 	.word	0x20003ce8
 801ad50:	20003cf8 	.word	0x20003cf8
 801ad54:	20003cec 	.word	0x20003cec

0801ad58 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad5a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801ad5c:	f7fe ff8a 	bl	8019c74 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801ad60:	4b17      	ldr	r3, [pc, #92]	@ (801adc0 <vPortGetHeapStats+0x68>)
 801ad62:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801ad64:	b193      	cbz	r3, 801ad8c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ad66:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ad6a:	2500      	movs	r5, #0
 801ad6c:	462c      	mov	r4, r5
 801ad6e:	e004      	b.n	801ad7a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801ad70:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801ad72:	4a14      	ldr	r2, [pc, #80]	@ (801adc4 <vPortGetHeapStats+0x6c>)
 801ad74:	6812      	ldr	r2, [r2, #0]
 801ad76:	429a      	cmp	r2, r3
 801ad78:	d00c      	beq.n	801ad94 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801ad7a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801ad7c:	685a      	ldr	r2, [r3, #4]
 801ad7e:	42aa      	cmp	r2, r5
 801ad80:	d900      	bls.n	801ad84 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801ad82:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801ad84:	42b2      	cmp	r2, r6
 801ad86:	d2f3      	bcs.n	801ad70 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801ad88:	4616      	mov	r6, r2
 801ad8a:	e7f1      	b.n	801ad70 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801ad8c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ad90:	2500      	movs	r5, #0
 801ad92:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801ad94:	f7ff f808 	bl	8019da8 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801ad98:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801ad9a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801ad9c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801ad9e:	f7ff fd61 	bl	801a864 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801ada2:	4b09      	ldr	r3, [pc, #36]	@ (801adc8 <vPortGetHeapStats+0x70>)
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801ada8:	4b08      	ldr	r3, [pc, #32]	@ (801adcc <vPortGetHeapStats+0x74>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801adae:	4b08      	ldr	r3, [pc, #32]	@ (801add0 <vPortGetHeapStats+0x78>)
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801adb4:	4b07      	ldr	r3, [pc, #28]	@ (801add4 <vPortGetHeapStats+0x7c>)
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801adba:	f7ff fd75 	bl	801a8a8 <vPortExitCritical>
}
 801adbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adc0:	20003d00 	.word	0x20003d00
 801adc4:	20003cfc 	.word	0x20003cfc
 801adc8:	20003cf8 	.word	0x20003cf8
 801adcc:	20003cf0 	.word	0x20003cf0
 801add0:	20003cec 	.word	0x20003cec
 801add4:	20003cf4 	.word	0x20003cf4

0801add8 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801add8:	2000      	movs	r0, #0
 801adda:	4770      	bx	lr

0801addc <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801addc:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801adde:	fb01 f400 	mul.w	r4, r1, r0
 801ade2:	4620      	mov	r0, r4
 801ade4:	f7ff fef8 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801ade8:	4605      	mov	r5, r0
 801adea:	b118      	cbz	r0, 801adf4 <mg_calloc+0x18>
 801adec:	4622      	mov	r2, r4
 801adee:	2100      	movs	r1, #0
 801adf0:	f011 ff3e 	bl	802cc70 <memset>
}
 801adf4:	4628      	mov	r0, r5
 801adf6:	bd38      	pop	{r3, r4, r5, pc}

0801adf8 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801adf8:	b508      	push	{r3, lr}
 801adfa:	4684      	mov	ip, r0
 801adfc:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801adfe:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801ae02:	428b      	cmp	r3, r1
 801ae04:	d90a      	bls.n	801ae1c <block_device_read+0x24>
 801ae06:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801ae08:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801ae0c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ae10:	fb01 e103 	mla	r1, r1, r3, lr
 801ae14:	f7fb f943 	bl	801609e <sFLASH_ReadBuffer>
}
 801ae18:	2000      	movs	r0, #0
 801ae1a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801ae1c:	4b03      	ldr	r3, [pc, #12]	@ (801ae2c <block_device_read+0x34>)
 801ae1e:	4a04      	ldr	r2, [pc, #16]	@ (801ae30 <block_device_read+0x38>)
 801ae20:	f240 1123 	movw	r1, #291	@ 0x123
 801ae24:	4803      	ldr	r0, [pc, #12]	@ (801ae34 <block_device_read+0x3c>)
 801ae26:	f00f f9d1 	bl	802a1cc <__assert_func>
 801ae2a:	bf00      	nop
 801ae2c:	08039434 	.word	0x08039434
 801ae30:	080394b0 	.word	0x080394b0
 801ae34:	0803944c 	.word	0x0803944c

0801ae38 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801ae38:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801ae3a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ae3c:	428b      	cmp	r3, r1
 801ae3e:	d906      	bls.n	801ae4e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801ae40:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801ae42:	fb01 f000 	mul.w	r0, r1, r0
 801ae46:	f7fb fa6f 	bl	8016328 <sFLASH_EraseSector>
}
 801ae4a:	2000      	movs	r0, #0
 801ae4c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801ae4e:	4b03      	ldr	r3, [pc, #12]	@ (801ae5c <block_device_erase+0x24>)
 801ae50:	4a03      	ldr	r2, [pc, #12]	@ (801ae60 <block_device_erase+0x28>)
 801ae52:	f240 112b 	movw	r1, #299	@ 0x12b
 801ae56:	4803      	ldr	r0, [pc, #12]	@ (801ae64 <block_device_erase+0x2c>)
 801ae58:	f00f f9b8 	bl	802a1cc <__assert_func>
 801ae5c:	08039434 	.word	0x08039434
 801ae60:	0803949c 	.word	0x0803949c
 801ae64:	0803944c 	.word	0x0803944c

0801ae68 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801ae68:	b508      	push	{r3, lr}
 801ae6a:	4684      	mov	ip, r0
 801ae6c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801ae6e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801ae72:	428b      	cmp	r3, r1
 801ae74:	d90a      	bls.n	801ae8c <block_device_prog+0x24>
 801ae76:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801ae78:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801ae7c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ae80:	fb01 e103 	mla	r1, r1, r3, lr
 801ae84:	f7fb fa8e 	bl	80163a4 <sFLASH_WriteBuffer>
}
 801ae88:	2000      	movs	r0, #0
 801ae8a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801ae8c:	4b03      	ldr	r3, [pc, #12]	@ (801ae9c <block_device_prog+0x34>)
 801ae8e:	4a04      	ldr	r2, [pc, #16]	@ (801aea0 <block_device_prog+0x38>)
 801ae90:	f240 1133 	movw	r1, #307	@ 0x133
 801ae94:	4803      	ldr	r0, [pc, #12]	@ (801aea4 <block_device_prog+0x3c>)
 801ae96:	f00f f999 	bl	802a1cc <__assert_func>
 801ae9a:	bf00      	nop
 801ae9c:	08039434 	.word	0x08039434
 801aea0:	08039488 	.word	0x08039488
 801aea4:	0803944c 	.word	0x0803944c

0801aea8 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801aea8:	b530      	push	{r4, r5, lr}
 801aeaa:	b0c3      	sub	sp, #268	@ 0x10c
 801aeac:	460d      	mov	r5, r1
 801aeae:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801aeb0:	466a      	mov	r2, sp
 801aeb2:	4601      	mov	r1, r0
 801aeb4:	480b      	ldr	r0, [pc, #44]	@ (801aee4 <mg_fs_lfs_status+0x3c>)
 801aeb6:	f004 fdad 	bl	801fa14 <lfs_stat>
 801aeba:	b110      	cbz	r0, 801aec2 <mg_fs_lfs_status+0x1a>
    return 0;
 801aebc:	2000      	movs	r0, #0
}
 801aebe:	b043      	add	sp, #268	@ 0x10c
 801aec0:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801aec2:	b10d      	cbz	r5, 801aec8 <mg_fs_lfs_status+0x20>
 801aec4:	9b01      	ldr	r3, [sp, #4]
 801aec6:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801aec8:	b11c      	cbz	r4, 801aed2 <mg_fs_lfs_status+0x2a>
 801aeca:	2200      	movs	r2, #0
 801aecc:	2300      	movs	r3, #0
 801aece:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801aed2:	f89d 3000 	ldrb.w	r3, [sp]
 801aed6:	2b02      	cmp	r3, #2
 801aed8:	d001      	beq.n	801aede <mg_fs_lfs_status+0x36>
 801aeda:	2001      	movs	r0, #1
 801aedc:	e7ef      	b.n	801aebe <mg_fs_lfs_status+0x16>
 801aede:	2004      	movs	r0, #4
 801aee0:	e7ed      	b.n	801aebe <mg_fs_lfs_status+0x16>
 801aee2:	bf00      	nop
 801aee4:	20019ea0 	.word	0x20019ea0

0801aee8 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801aee8:	b530      	push	{r4, r5, lr}
 801aeea:	b0d1      	sub	sp, #324	@ 0x144
 801aeec:	460d      	mov	r5, r1
 801aeee:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801aef0:	4602      	mov	r2, r0
 801aef2:	a901      	add	r1, sp, #4
 801aef4:	480a      	ldr	r0, [pc, #40]	@ (801af20 <mg_fs_lfs_list+0x38>)
 801aef6:	f004 feb3 	bl	801fc60 <lfs_dir_open>
 801aefa:	b120      	cbz	r0, 801af06 <mg_fs_lfs_list+0x1e>
}
 801aefc:	b051      	add	sp, #324	@ 0x144
 801aefe:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801af00:	4621      	mov	r1, r4
 801af02:	a810      	add	r0, sp, #64	@ 0x40
 801af04:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801af06:	aa0e      	add	r2, sp, #56	@ 0x38
 801af08:	a901      	add	r1, sp, #4
 801af0a:	4805      	ldr	r0, [pc, #20]	@ (801af20 <mg_fs_lfs_list+0x38>)
 801af0c:	f004 fee3 	bl	801fcd6 <lfs_dir_read>
 801af10:	2800      	cmp	r0, #0
 801af12:	dcf5      	bgt.n	801af00 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801af14:	a901      	add	r1, sp, #4
 801af16:	4802      	ldr	r0, [pc, #8]	@ (801af20 <mg_fs_lfs_list+0x38>)
 801af18:	f004 feca 	bl	801fcb0 <lfs_dir_close>
}
 801af1c:	e7ee      	b.n	801aefc <mg_fs_lfs_list+0x14>
 801af1e:	bf00      	nop
 801af20:	20019ea0 	.word	0x20019ea0

0801af24 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801af24:	b570      	push	{r4, r5, r6, lr}
 801af26:	4605      	mov	r5, r0
 801af28:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801af2a:	2054      	movs	r0, #84	@ 0x54
 801af2c:	f7ff fe54 	bl	801abd8 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801af30:	4606      	mov	r6, r0
 801af32:	b188      	cbz	r0, 801af58 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801af34:	f014 0301 	ands.w	r3, r4, #1
 801af38:	d000      	beq.n	801af3c <mg_fs_lfs_open+0x18>
 801af3a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801af3c:	f014 0f02 	tst.w	r4, #2
 801af40:	d003      	beq.n	801af4a <mg_fs_lfs_open+0x26>
 801af42:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801af46:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801af4a:	462a      	mov	r2, r5
 801af4c:	4631      	mov	r1, r6
 801af4e:	4806      	ldr	r0, [pc, #24]	@ (801af68 <mg_fs_lfs_open+0x44>)
 801af50:	f004 fd76 	bl	801fa40 <lfs_file_open>
 801af54:	2800      	cmp	r0, #0
 801af56:	db01      	blt.n	801af5c <mg_fs_lfs_open+0x38>
}
 801af58:	4630      	mov	r0, r6
 801af5a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801af5c:	4630      	mov	r0, r6
 801af5e:	f7ff febd 	bl	801acdc <vPortFree>
        return NULL;
 801af62:	2600      	movs	r6, #0
 801af64:	e7f8      	b.n	801af58 <mg_fs_lfs_open+0x34>
 801af66:	bf00      	nop
 801af68:	20019ea0 	.word	0x20019ea0

0801af6c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801af6c:	b510      	push	{r4, lr}
 801af6e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801af70:	4601      	mov	r1, r0
 801af72:	4803      	ldr	r0, [pc, #12]	@ (801af80 <mg_fs_lfs_close+0x14>)
 801af74:	f004 fd90 	bl	801fa98 <lfs_file_close>
    free(file);
 801af78:	4620      	mov	r0, r4
 801af7a:	f7ff feaf 	bl	801acdc <vPortFree>
}
 801af7e:	bd10      	pop	{r4, pc}
 801af80:	20019ea0 	.word	0x20019ea0

0801af84 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801af84:	b508      	push	{r3, lr}
 801af86:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801af88:	460a      	mov	r2, r1
 801af8a:	4601      	mov	r1, r0
 801af8c:	4802      	ldr	r0, [pc, #8]	@ (801af98 <mg_fs_lfs_read+0x14>)
 801af8e:	f004 fda9 	bl	801fae4 <lfs_file_read>
}
 801af92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801af96:	bd08      	pop	{r3, pc}
 801af98:	20019ea0 	.word	0x20019ea0

0801af9c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801af9c:	b508      	push	{r3, lr}
 801af9e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801afa0:	460a      	mov	r2, r1
 801afa2:	4601      	mov	r1, r0
 801afa4:	4802      	ldr	r0, [pc, #8]	@ (801afb0 <mg_fs_lfs_write+0x14>)
 801afa6:	f004 fdc9 	bl	801fb3c <lfs_file_write>
}
 801afaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801afae:	bd08      	pop	{r3, pc}
 801afb0:	20019ea0 	.word	0x20019ea0

0801afb4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801afb4:	b510      	push	{r4, lr}
 801afb6:	4604      	mov	r4, r0
 801afb8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801afba:	2300      	movs	r3, #0
 801afbc:	4601      	mov	r1, r0
 801afbe:	4809      	ldr	r0, [pc, #36]	@ (801afe4 <mg_fs_lfs_seek+0x30>)
 801afc0:	f004 fde8 	bl	801fb94 <lfs_file_seek>
 801afc4:	2800      	cmp	r0, #0
 801afc6:	db06      	blt.n	801afd6 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801afc8:	4621      	mov	r1, r4
 801afca:	4806      	ldr	r0, [pc, #24]	@ (801afe4 <mg_fs_lfs_seek+0x30>)
 801afcc:	f004 fe0e 	bl	801fbec <lfs_file_tell>
     if (pos < 0) {
 801afd0:	2800      	cmp	r0, #0
 801afd2:	db03      	blt.n	801afdc <mg_fs_lfs_seek+0x28>
}
 801afd4:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801afd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801afda:	e7fb      	b.n	801afd4 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801afdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801afe0:	e7f8      	b.n	801afd4 <mg_fs_lfs_seek+0x20>
 801afe2:	bf00      	nop
 801afe4:	20019ea0 	.word	0x20019ea0

0801afe8 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801afe8:	b508      	push	{r3, lr}
 801afea:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801afec:	4601      	mov	r1, r0
 801afee:	4803      	ldr	r0, [pc, #12]	@ (801affc <mg_fs_lfs_rename+0x14>)
 801aff0:	f004 fcfb 	bl	801f9ea <lfs_rename>
}
 801aff4:	fab0 f080 	clz	r0, r0
 801aff8:	0940      	lsrs	r0, r0, #5
 801affa:	bd08      	pop	{r3, pc}
 801affc:	20019ea0 	.word	0x20019ea0

0801b000 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801b000:	b508      	push	{r3, lr}
 801b002:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801b004:	4803      	ldr	r0, [pc, #12]	@ (801b014 <mg_fs_lfs_remove+0x14>)
 801b006:	f004 fcdd 	bl	801f9c4 <lfs_remove>
}
 801b00a:	fab0 f080 	clz	r0, r0
 801b00e:	0940      	lsrs	r0, r0, #5
 801b010:	bd08      	pop	{r3, pc}
 801b012:	bf00      	nop
 801b014:	20019ea0 	.word	0x20019ea0

0801b018 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801b018:	b508      	push	{r3, lr}
 801b01a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801b01c:	4803      	ldr	r0, [pc, #12]	@ (801b02c <mg_fs_lfs_mkdir+0x14>)
 801b01e:	f004 fe0b 	bl	801fc38 <lfs_mkdir>
}
 801b022:	fab0 f080 	clz	r0, r0
 801b026:	0940      	lsrs	r0, r0, #5
 801b028:	bd08      	pop	{r3, pc}
 801b02a:	bf00      	nop
 801b02c:	20019ea0 	.word	0x20019ea0

0801b030 <mg_fs_mounted>:
}
 801b030:	4b01      	ldr	r3, [pc, #4]	@ (801b038 <mg_fs_mounted+0x8>)
 801b032:	7818      	ldrb	r0, [r3, #0]
 801b034:	4770      	bx	lr
 801b036:	bf00      	nop
 801b038:	20019e40 	.word	0x20019e40

0801b03c <get_flash_chip_model>:
}
 801b03c:	4800      	ldr	r0, [pc, #0]	@ (801b040 <get_flash_chip_model+0x4>)
 801b03e:	4770      	bx	lr
 801b040:	20019e0e 	.word	0x20019e0e

0801b044 <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b048:	b090      	sub	sp, #64	@ 0x40
 801b04a:	4607      	mov	r7, r0
 801b04c:	460e      	mov	r6, r1
	flash_info = sFLASH_GetInfo();
 801b04e:	4c37      	ldr	r4, [pc, #220]	@ (801b12c <lfs_fs_ll_init+0xe8>)
 801b050:	4668      	mov	r0, sp
 801b052:	f7fb f87d 	bl	8016150 <sFLASH_GetInfo>
 801b056:	46a6      	mov	lr, r4
 801b058:	46ec      	mov	ip, sp
 801b05a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b05e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b062:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b066:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b06a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b06e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b072:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801b076:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if (flash_info.flash_id == 0x0) return -1;
 801b07a:	6823      	ldr	r3, [r4, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d052      	beq.n	801b126 <lfs_fs_ll_init+0xe2>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801b080:	46a0      	mov	r8, r4
 801b082:	8961      	ldrh	r1, [r4, #10]
 801b084:	2001      	movs	r0, #1
 801b086:	f7ff fea9 	bl	801addc <mg_calloc>
 801b08a:	4604      	mov	r4, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801b08c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801b090:	2001      	movs	r0, #1
 801b092:	f7ff fea3 	bl	801addc <mg_calloc>
 801b096:	4605      	mov	r5, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801b098:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801b09c:	2001      	movs	r0, #1
 801b09e:	f7ff fe9d 	bl	801addc <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801b0a2:	2c00      	cmp	r4, #0
 801b0a4:	d028      	beq.n	801b0f8 <lfs_fs_ll_init+0xb4>
	cfg.read_size         = flash_info.read_size;
 801b0a6:	4b21      	ldr	r3, [pc, #132]	@ (801b12c <lfs_fs_ll_init+0xe8>)
 801b0a8:	889a      	ldrh	r2, [r3, #4]
 801b0aa:	4921      	ldr	r1, [pc, #132]	@ (801b130 <lfs_fs_ll_init+0xec>)
 801b0ac:	61ca      	str	r2, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801b0ae:	88da      	ldrh	r2, [r3, #6]
 801b0b0:	620a      	str	r2, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801b0b2:	891a      	ldrh	r2, [r3, #8]
 801b0b4:	624a      	str	r2, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801b0b6:	899a      	ldrh	r2, [r3, #12]
 801b0b8:	628a      	str	r2, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801b0ba:	895b      	ldrh	r3, [r3, #10]
 801b0bc:	634b      	str	r3, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801b0be:	630b      	str	r3, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801b0c0:	63cc      	str	r4, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801b0c2:	640d      	str	r5, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801b0c4:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801b0c6:	4b1b      	ldr	r3, [pc, #108]	@ (801b134 <lfs_fs_ll_init+0xf0>)
 801b0c8:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801b0ca:	4b1b      	ldr	r3, [pc, #108]	@ (801b138 <lfs_fs_ll_init+0xf4>)
 801b0cc:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801b0ce:	4b1b      	ldr	r3, [pc, #108]	@ (801b13c <lfs_fs_ll_init+0xf8>)
 801b0d0:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801b0d2:	4b1b      	ldr	r3, [pc, #108]	@ (801b140 <lfs_fs_ll_init+0xfc>)
 801b0d4:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801b0d6:	614f      	str	r7, [r1, #20]
	cfg.unlock	= unlock;
 801b0d8:	618e      	str	r6, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801b0da:	f242 7310 	movw	r3, #10000	@ 0x2710
 801b0de:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801b0e0:	4818      	ldr	r0, [pc, #96]	@ (801b144 <lfs_fs_ll_init+0x100>)
 801b0e2:	f004 fc5c 	bl	801f99e <lfs_mount>
 801b0e6:	2800      	cmp	r0, #0
 801b0e8:	db0d      	blt.n	801b106 <lfs_fs_ll_init+0xc2>
    	fs_mounted = 1;
 801b0ea:	4b17      	ldr	r3, [pc, #92]	@ (801b148 <lfs_fs_ll_init+0x104>)
 801b0ec:	2201      	movs	r2, #1
 801b0ee:	701a      	strb	r2, [r3, #0]
    	return 0;
 801b0f0:	2000      	movs	r0, #0
}
 801b0f2:	b010      	add	sp, #64	@ 0x40
 801b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801b0f8:	2d00      	cmp	r5, #0
 801b0fa:	d1d4      	bne.n	801b0a6 <lfs_fs_ll_init+0x62>
 801b0fc:	2800      	cmp	r0, #0
 801b0fe:	d1d2      	bne.n	801b0a6 <lfs_fs_ll_init+0x62>
		return -2;
 801b100:	f06f 0001 	mvn.w	r0, #1
 801b104:	e7f5      	b.n	801b0f2 <lfs_fs_ll_init+0xae>
    	lfs_format(&lfs, &cfg);
 801b106:	4d0a      	ldr	r5, [pc, #40]	@ (801b130 <lfs_fs_ll_init+0xec>)
 801b108:	4c0e      	ldr	r4, [pc, #56]	@ (801b144 <lfs_fs_ll_init+0x100>)
 801b10a:	4629      	mov	r1, r5
 801b10c:	4620      	mov	r0, r4
 801b10e:	f004 fc33 	bl	801f978 <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801b112:	4629      	mov	r1, r5
 801b114:	4620      	mov	r0, r4
 801b116:	f004 fc42 	bl	801f99e <lfs_mount>
 801b11a:	2800      	cmp	r0, #0
 801b11c:	d1e9      	bne.n	801b0f2 <lfs_fs_ll_init+0xae>
 801b11e:	4b0a      	ldr	r3, [pc, #40]	@ (801b148 <lfs_fs_ll_init+0x104>)
 801b120:	2201      	movs	r2, #1
 801b122:	701a      	strb	r2, [r3, #0]
    	return err;
 801b124:	e7e5      	b.n	801b0f2 <lfs_fs_ll_init+0xae>
	if (flash_info.flash_id == 0x0) return -1;
 801b126:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b12a:	e7e2      	b.n	801b0f2 <lfs_fs_ll_init+0xae>
 801b12c:	20019e00 	.word	0x20019e00
 801b130:	20019e44 	.word	0x20019e44
 801b134:	0801adf9 	.word	0x0801adf9
 801b138:	0801ae69 	.word	0x0801ae69
 801b13c:	0801ae39 	.word	0x0801ae39
 801b140:	0801add9 	.word	0x0801add9
 801b144:	20019ea0 	.word	0x20019ea0
 801b148:	20019e40 	.word	0x20019e40

0801b14c <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b14c:	6803      	ldr	r3, [r0, #0]
 801b14e:	680a      	ldr	r2, [r1, #0]
 801b150:	4293      	cmp	r3, r2
 801b152:	d004      	beq.n	801b15e <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b154:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b156:	428b      	cmp	r3, r1
 801b158:	d015      	beq.n	801b186 <lfs_pair_issync+0x3a>
 801b15a:	2000      	movs	r0, #0
 801b15c:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801b15e:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b160:	6844      	ldr	r4, [r0, #4]
 801b162:	684d      	ldr	r5, [r1, #4]
 801b164:	42ac      	cmp	r4, r5
 801b166:	d00a      	beq.n	801b17e <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b168:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b16a:	428b      	cmp	r3, r1
 801b16c:	d002      	beq.n	801b174 <lfs_pair_issync+0x28>
 801b16e:	2000      	movs	r0, #0
}
 801b170:	bc30      	pop	{r4, r5}
 801b172:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b174:	6843      	ldr	r3, [r0, #4]
 801b176:	429a      	cmp	r2, r3
 801b178:	d003      	beq.n	801b182 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b17a:	2000      	movs	r0, #0
 801b17c:	e7f8      	b.n	801b170 <lfs_pair_issync+0x24>
 801b17e:	2001      	movs	r0, #1
 801b180:	e7f6      	b.n	801b170 <lfs_pair_issync+0x24>
 801b182:	2001      	movs	r0, #1
 801b184:	e7f4      	b.n	801b170 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801b186:	6843      	ldr	r3, [r0, #4]
 801b188:	429a      	cmp	r2, r3
 801b18a:	d001      	beq.n	801b190 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801b18c:	2000      	movs	r0, #0
 801b18e:	4770      	bx	lr
 801b190:	2001      	movs	r0, #1
}
 801b192:	4770      	bx	lr

0801b194 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801b194:	2300      	movs	r3, #0
 801b196:	2b02      	cmp	r3, #2
 801b198:	dc0d      	bgt.n	801b1b6 <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801b19a:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801b19c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801b1a0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801b1a4:	4062      	eors	r2, r4
 801b1a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801b1aa:	3301      	adds	r3, #1
 801b1ac:	2b02      	cmp	r3, #2
 801b1ae:	ddf5      	ble.n	801b19c <lfs_gstate_xor+0x8>
    }
}
 801b1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1b4:	4770      	bx	lr
 801b1b6:	4770      	bx	lr

0801b1b8 <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b1b8:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801b1ba:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b1bc:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801b1c0:	d00f      	beq.n	801b1e2 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b1c2:	6843      	ldr	r3, [r0, #4]
 801b1c4:	680a      	ldr	r2, [r1, #0]
 801b1c6:	4293      	cmp	r3, r2
 801b1c8:	d00d      	beq.n	801b1e6 <lfs_gstate_hasmovehere+0x2e>
 801b1ca:	6880      	ldr	r0, [r0, #8]
 801b1cc:	6849      	ldr	r1, [r1, #4]
 801b1ce:	4288      	cmp	r0, r1
 801b1d0:	d00b      	beq.n	801b1ea <lfs_gstate_hasmovehere+0x32>
 801b1d2:	428b      	cmp	r3, r1
 801b1d4:	d00b      	beq.n	801b1ee <lfs_gstate_hasmovehere+0x36>
 801b1d6:	4282      	cmp	r2, r0
 801b1d8:	d001      	beq.n	801b1de <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b1da:	2000      	movs	r0, #0
}
 801b1dc:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801b1de:	2001      	movs	r0, #1
 801b1e0:	4770      	bx	lr
 801b1e2:	2000      	movs	r0, #0
 801b1e4:	4770      	bx	lr
 801b1e6:	2001      	movs	r0, #1
 801b1e8:	4770      	bx	lr
 801b1ea:	2001      	movs	r0, #1
 801b1ec:	4770      	bx	lr
 801b1ee:	2001      	movs	r0, #1
 801b1f0:	4770      	bx	lr

0801b1f2 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801b1f2:	b082      	sub	sp, #8
 801b1f4:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801b1f6:	ab01      	add	r3, sp, #4
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	b11b      	cbz	r3, 801b204 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801b1fc:	428b      	cmp	r3, r1
 801b1fe:	d1fb      	bne.n	801b1f8 <lfs_mlist_isopen+0x6>
            return true;
 801b200:	2001      	movs	r0, #1
 801b202:	e000      	b.n	801b206 <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801b204:	2000      	movs	r0, #0
}
 801b206:	b002      	add	sp, #8
 801b208:	4770      	bx	lr

0801b20a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801b20a:	3028      	adds	r0, #40	@ 0x28
 801b20c:	e000      	b.n	801b210 <lfs_mlist_remove+0x6>
 801b20e:	4618      	mov	r0, r3
 801b210:	6803      	ldr	r3, [r0, #0]
 801b212:	b123      	cbz	r3, 801b21e <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801b214:	428b      	cmp	r3, r1
 801b216:	d1fa      	bne.n	801b20e <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	6003      	str	r3, [r0, #0]
            break;
 801b21c:	4770      	bx	lr
        }
    }
}
 801b21e:	4770      	bx	lr

0801b220 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801b220:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b222:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801b224:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801b226:	4770      	bx	lr

0801b228 <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801b228:	4800      	ldr	r0, [pc, #0]	@ (801b22c <lfs_fs_disk_version+0x4>)
 801b22a:	4770      	bx	lr
 801b22c:	00020001 	.word	0x00020001

0801b230 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801b230:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801b232:	f7ff fff9 	bl	801b228 <lfs_fs_disk_version>

}
 801b236:	0c00      	lsrs	r0, r0, #16
 801b238:	bd08      	pop	{r3, pc}

0801b23a <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801b23a:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801b23c:	f7ff fff4 	bl	801b228 <lfs_fs_disk_version>
}
 801b240:	b280      	uxth	r0, r0
 801b242:	bd08      	pop	{r3, pc}

0801b244 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801b244:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b246:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801b248:	4770      	bx	lr

0801b24a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801b24a:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801b24c:	2200      	movs	r2, #0
 801b24e:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801b250:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801b252:	f7ff fff7 	bl	801b244 <lfs_alloc_ckpoint>
}
 801b256:	bd08      	pop	{r3, pc}

0801b258 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801b258:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801b25a:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801b25c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b25e:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801b260:	fbb1 f2f3 	udiv	r2, r1, r3
 801b264:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801b268:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801b26a:	428b      	cmp	r3, r1
 801b26c:	d90d      	bls.n	801b28a <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801b26e:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801b270:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801b272:	08c8      	lsrs	r0, r1, #3
 801b274:	5c23      	ldrb	r3, [r4, r0]
 801b276:	f001 0107 	and.w	r1, r1, #7
 801b27a:	2201      	movs	r2, #1
 801b27c:	408a      	lsls	r2, r1
 801b27e:	4313      	orrs	r3, r2
 801b280:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801b282:	2000      	movs	r0, #0
 801b284:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b288:	4770      	bx	lr
 801b28a:	2000      	movs	r0, #0
 801b28c:	4770      	bx	lr
	...

0801b290 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801b290:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b292:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801b296:	d01c      	beq.n	801b2d2 <lfs_dir_traverse_filter+0x42>
 801b298:	4a19      	ldr	r2, [pc, #100]	@ (801b300 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801b29a:	6803      	ldr	r3, [r0, #0]
 801b29c:	ea83 0401 	eor.w	r4, r3, r1
 801b2a0:	4214      	tst	r4, r2
 801b2a2:	d018      	beq.n	801b2d6 <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b2a4:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801b2a8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b2ac:	d013      	beq.n	801b2d6 <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801b2ae:	4c14      	ldr	r4, [pc, #80]	@ (801b300 <lfs_dir_traverse_filter+0x70>)
 801b2b0:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801b2b2:	4a14      	ldr	r2, [pc, #80]	@ (801b304 <lfs_dir_traverse_filter+0x74>)
 801b2b4:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b2b6:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b2ba:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801b2be:	4294      	cmp	r4, r2
 801b2c0:	d009      	beq.n	801b2d6 <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801b2c2:	0d0a      	lsrs	r2, r1, #20
 801b2c4:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b2c8:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801b2cc:	d009      	beq.n	801b2e2 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801b2ce:	2000      	movs	r0, #0
 801b2d0:	e004      	b.n	801b2dc <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801b2d2:	4a0d      	ldr	r2, [pc, #52]	@ (801b308 <lfs_dir_traverse_filter+0x78>)
 801b2d4:	e7e1      	b.n	801b29a <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	6003      	str	r3, [r0, #0]
        return true;
 801b2da:	2001      	movs	r0, #1
}
 801b2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2e0:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801b2e2:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801b2e6:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b2ea:	428c      	cmp	r4, r1
 801b2ec:	d305      	bcc.n	801b2fa <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801b2ee:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b2f0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801b2f4:	6003      	str	r3, [r0, #0]
    return false;
 801b2f6:	2000      	movs	r0, #0
 801b2f8:	e7f0      	b.n	801b2dc <lfs_dir_traverse_filter+0x4c>
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	e7ee      	b.n	801b2dc <lfs_dir_traverse_filter+0x4c>
 801b2fe:	bf00      	nop
 801b300:	7ffffc00 	.word	0x7ffffc00
 801b304:	000ffc00 	.word	0x000ffc00
 801b308:	700ffc00 	.word	0x700ffc00

0801b30c <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b30c:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b310:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b314:	bf08      	it	eq
 801b316:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801b318:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b31c:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801b31e:	6803      	ldr	r3, [r0, #0]
 801b320:	440b      	add	r3, r1
 801b322:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b324:	2000      	movs	r0, #0
 801b326:	4770      	bx	lr

0801b328 <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801b328:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	dd0b      	ble.n	801b348 <lfs_dir_needsrelocation+0x20>
 801b330:	688a      	ldr	r2, [r1, #8]
 801b332:	3201      	adds	r2, #1
 801b334:	3301      	adds	r3, #1
 801b336:	f043 0301 	orr.w	r3, r3, #1
 801b33a:	fbb2 f1f3 	udiv	r1, r2, r3
 801b33e:	fb03 2211 	mls	r2, r3, r1, r2
 801b342:	b11a      	cbz	r2, 801b34c <lfs_dir_needsrelocation+0x24>
 801b344:	2000      	movs	r0, #0
 801b346:	4770      	bx	lr
 801b348:	2000      	movs	r0, #0
 801b34a:	4770      	bx	lr
 801b34c:	2001      	movs	r0, #1
}
 801b34e:	4770      	bx	lr

0801b350 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801b350:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801b352:	f7ff ff5a 	bl	801b20a <lfs_mlist_remove>

    return 0;
}
 801b356:	2000      	movs	r0, #0
 801b358:	bd08      	pop	{r3, pc}

0801b35a <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801b35a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b35c:	4770      	bx	lr

0801b35e <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801b35e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801b360:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801b364:	d101      	bne.n	801b36a <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801b366:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801b368:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801b36a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801b36c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801b36e:	4298      	cmp	r0, r3
 801b370:	bf38      	it	cc
 801b372:	4618      	movcc	r0, r3
 801b374:	4770      	bx	lr

0801b376 <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b376:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801b37c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801b380:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b382:	4770      	bx	lr

0801b384 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801b384:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b386:	4b13      	ldr	r3, [pc, #76]	@ (801b3d4 <lfs_fs_prepmove+0x50>)
 801b388:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801b38a:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b38c:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801b390:	4561      	cmp	r1, ip
 801b392:	d017      	beq.n	801b3c4 <lfs_fs_prepmove+0x40>
 801b394:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801b398:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801b39c:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801b3a0:	ea43 030c 	orr.w	r3, r3, ip
 801b3a4:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b3a6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b3aa:	4299      	cmp	r1, r3
 801b3ac:	d00d      	beq.n	801b3ca <lfs_fs_prepmove+0x46>
 801b3ae:	6813      	ldr	r3, [r2, #0]
 801b3b0:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b3b2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801b3b6:	4299      	cmp	r1, r3
 801b3b8:	d009      	beq.n	801b3ce <lfs_fs_prepmove+0x4a>
 801b3ba:	6853      	ldr	r3, [r2, #4]
 801b3bc:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801b3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3c2:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801b3c4:	f04f 0c00 	mov.w	ip, #0
 801b3c8:	e7ea      	b.n	801b3a0 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	e7f0      	b.n	801b3b0 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801b3ce:	2300      	movs	r3, #0
 801b3d0:	e7f4      	b.n	801b3bc <lfs_fs_prepmove+0x38>
 801b3d2:	bf00      	nop
 801b3d4:	800003ff 	.word	0x800003ff

0801b3d8 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801b3d8:	6803      	ldr	r3, [r0, #0]
 801b3da:	3301      	adds	r3, #1
 801b3dc:	6003      	str	r3, [r0, #0]
    return 0;
}
 801b3de:	2000      	movs	r0, #0
 801b3e0:	4770      	bx	lr
	...

0801b3e4 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801b3e4:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801b3e6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b3e8:	428b      	cmp	r3, r1
 801b3ea:	d905      	bls.n	801b3f8 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801b3ec:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b3ee:	68c3      	ldr	r3, [r0, #12]
 801b3f0:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b3f2:	2800      	cmp	r0, #0
 801b3f4:	dc07      	bgt.n	801b406 <lfs_bd_erase+0x22>
}
 801b3f6:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801b3f8:	4b06      	ldr	r3, [pc, #24]	@ (801b414 <lfs_bd_erase+0x30>)
 801b3fa:	4a07      	ldr	r2, [pc, #28]	@ (801b418 <lfs_bd_erase+0x34>)
 801b3fc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801b400:	4806      	ldr	r0, [pc, #24]	@ (801b41c <lfs_bd_erase+0x38>)
 801b402:	f00e fee3 	bl	802a1cc <__assert_func>
    LFS_ASSERT(err <= 0);
 801b406:	4b06      	ldr	r3, [pc, #24]	@ (801b420 <lfs_bd_erase+0x3c>)
 801b408:	4a03      	ldr	r2, [pc, #12]	@ (801b418 <lfs_bd_erase+0x34>)
 801b40a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801b40e:	4803      	ldr	r0, [pc, #12]	@ (801b41c <lfs_bd_erase+0x38>)
 801b410:	f00e fedc 	bl	802a1cc <__assert_func>
 801b414:	080395b0 	.word	0x080395b0
 801b418:	0803a210 	.word	0x0803a210
 801b41c:	080394c4 	.word	0x080394c4
 801b420:	080394f4 	.word	0x080394f4

0801b424 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801b424:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b426:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801b428:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b42c:	b90a      	cbnz	r2, 801b432 <lfs_fs_preporphans+0xe>
 801b42e:	2900      	cmp	r1, #0
 801b430:	db12      	blt.n	801b458 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b432:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801b436:	d901      	bls.n	801b43c <lfs_fs_preporphans+0x18>
 801b438:	2900      	cmp	r1, #0
 801b43a:	dc14      	bgt.n	801b466 <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801b43c:	4419      	add	r1, r3
 801b43e:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b440:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801b444:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801b448:	3900      	subs	r1, #0
 801b44a:	bf18      	it	ne
 801b44c:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b44e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801b452:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b454:	2000      	movs	r0, #0
 801b456:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b458:	4b06      	ldr	r3, [pc, #24]	@ (801b474 <lfs_fs_preporphans+0x50>)
 801b45a:	4a07      	ldr	r2, [pc, #28]	@ (801b478 <lfs_fs_preporphans+0x54>)
 801b45c:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801b460:	4806      	ldr	r0, [pc, #24]	@ (801b47c <lfs_fs_preporphans+0x58>)
 801b462:	f00e feb3 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b466:	4b06      	ldr	r3, [pc, #24]	@ (801b480 <lfs_fs_preporphans+0x5c>)
 801b468:	4a03      	ldr	r2, [pc, #12]	@ (801b478 <lfs_fs_preporphans+0x54>)
 801b46a:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801b46e:	4803      	ldr	r0, [pc, #12]	@ (801b47c <lfs_fs_preporphans+0x58>)
 801b470:	f00e feac 	bl	802a1cc <__assert_func>
 801b474:	08039500 	.word	0x08039500
 801b478:	0803a1e0 	.word	0x0803a1e0
 801b47c:	080394c4 	.word	0x080394c4
 801b480:	08039538 	.word	0x08039538

0801b484 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801b484:	b510      	push	{r4, lr}
 801b486:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801b488:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b48a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b48c:	21ff      	movs	r1, #255	@ 0xff
 801b48e:	68e0      	ldr	r0, [r4, #12]
 801b490:	f011 fbee 	bl	802cc70 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801b494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b498:	6023      	str	r3, [r4, #0]
}
 801b49a:	bd10      	pop	{r4, pc}

0801b49c <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801b49e:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801b4a0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b4a2:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801b4a4:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801b4a6:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801b4aa:	42bd      	cmp	r5, r7
 801b4ac:	d312      	bcc.n	801b4d4 <lfs_ctz_index+0x38>
 801b4ae:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801b4b0:	3801      	subs	r0, #1
 801b4b2:	f7f5 fc69 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801b4b6:	1c84      	adds	r4, r0, #2
 801b4b8:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801b4bc:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801b4c0:	fb04 5517 	mls	r5, r4, r7, r5
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	f7f5 fc5f 	bl	8010d88 <__popcountsi2>
 801b4ca:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801b4ce:	6035      	str	r5, [r6, #0]
    return i;
 801b4d0:	4620      	mov	r0, r4
}
 801b4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b4d4:	2000      	movs	r0, #0
 801b4d6:	e7fc      	b.n	801b4d2 <lfs_ctz_index+0x36>

0801b4d8 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4dc:	b087      	sub	sp, #28
 801b4de:	4615      	mov	r5, r2
 801b4e0:	469b      	mov	fp, r3
 801b4e2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b4e4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b4e6:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801b4ea:	eb04 020a 	add.w	r2, r4, sl
 801b4ee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	f200 80d0 	bhi.w	801b698 <lfs_bd_read+0x1c0>
 801b4f8:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801b4fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	f000 80c7 	beq.w	801b690 <lfs_bd_read+0x1b8>
 801b502:	42bb      	cmp	r3, r7
 801b504:	f240 80cb 	bls.w	801b69e <lfs_bd_read+0x1c6>
 801b508:	9003      	str	r0, [sp, #12]
 801b50a:	e084      	b.n	801b616 <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801b50c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b510:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b514:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801b516:	42a1      	cmp	r1, r4
 801b518:	d91e      	bls.n	801b558 <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801b51a:	42a3      	cmp	r3, r4
 801b51c:	d905      	bls.n	801b52a <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801b51e:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801b520:	4553      	cmp	r3, sl
 801b522:	bf28      	it	cs
 801b524:	4653      	movcs	r3, sl
 801b526:	4698      	mov	r8, r3
 801b528:	e081      	b.n	801b62e <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b52a:	1b19      	subs	r1, r3, r4
 801b52c:	eb02 0801 	add.w	r8, r2, r1
 801b530:	45d0      	cmp	r8, sl
 801b532:	bf28      	it	cs
 801b534:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b536:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b53a:	1ae3      	subs	r3, r4, r3
 801b53c:	4642      	mov	r2, r8
 801b53e:	4419      	add	r1, r3
 801b540:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b542:	f012 fdd1 	bl	802e0e8 <memcpy>
                data += diff;
 801b546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b548:	4443      	add	r3, r8
 801b54a:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b54c:	4444      	add	r4, r8
                size -= diff;
 801b54e:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b552:	e060      	b.n	801b616 <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801b554:	46d0      	mov	r8, sl
 801b556:	e06a      	b.n	801b62e <lfs_bd_read+0x156>
 801b558:	46d0      	mov	r8, sl
 801b55a:	e068      	b.n	801b62e <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801b55c:	686b      	ldr	r3, [r5, #4]
 801b55e:	68aa      	ldr	r2, [r5, #8]
 801b560:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801b562:	42a1      	cmp	r1, r4
 801b564:	d966      	bls.n	801b634 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801b566:	42a3      	cmp	r3, r4
 801b568:	d904      	bls.n	801b574 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801b56a:	1b1b      	subs	r3, r3, r4
 801b56c:	4598      	cmp	r8, r3
 801b56e:	bf28      	it	cs
 801b570:	4698      	movcs	r8, r3
 801b572:	e05f      	b.n	801b634 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b574:	1b19      	subs	r1, r3, r4
 801b576:	440a      	add	r2, r1
 801b578:	4590      	cmp	r8, r2
 801b57a:	bf28      	it	cs
 801b57c:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b57e:	68e9      	ldr	r1, [r5, #12]
 801b580:	1ae3      	subs	r3, r4, r3
 801b582:	4642      	mov	r2, r8
 801b584:	4419      	add	r1, r3
 801b586:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b588:	f012 fdae 	bl	802e0e8 <memcpy>
                data += diff;
 801b58c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b58e:	4443      	add	r3, r8
 801b590:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b592:	4444      	add	r4, r8
                size -= diff;
 801b594:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b598:	e03d      	b.n	801b616 <lfs_bd_read+0x13e>
            data += diff;
 801b59a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b59c:	9b04      	ldr	r3, [sp, #16]
 801b59e:	441a      	add	r2, r3
 801b5a0:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801b5a2:	441c      	add	r4, r3
            size -= diff;
 801b5a4:	9b05      	ldr	r3, [sp, #20]
 801b5a6:	eba3 0308 	sub.w	r3, r3, r8
 801b5aa:	449a      	add	sl, r3
            continue;
 801b5ac:	e033      	b.n	801b616 <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b5ae:	9b03      	ldr	r3, [sp, #12]
 801b5b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5b2:	b10b      	cbz	r3, 801b5b8 <lfs_bd_read+0xe0>
 801b5b4:	42bb      	cmp	r3, r7
 801b5b6:	d95f      	bls.n	801b678 <lfs_bd_read+0x1a0>
        rcache->block = block;
 801b5b8:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b5ba:	9e03      	ldr	r6, [sp, #12]
 801b5bc:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b5be:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801b5c0:	fbb4 f3f2 	udiv	r3, r4, r2
 801b5c4:	fb02 4313 	mls	r3, r2, r3, r4
 801b5c8:	1ae2      	subs	r2, r4, r3
 801b5ca:	606a      	str	r2, [r5, #4]
                lfs_min(
 801b5cc:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801b5d0:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801b5d4:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b5d8:	4401      	add	r1, r0
 801b5da:	3901      	subs	r1, #1
    return a - (a % alignment);
 801b5dc:	fbb1 fef0 	udiv	lr, r1, r0
 801b5e0:	fb00 101e 	mls	r0, r0, lr, r1
 801b5e4:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801b5e6:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801b5ea:	1b1b      	subs	r3, r3, r4
 801b5ec:	4288      	cmp	r0, r1
 801b5ee:	bf94      	ite	ls
 801b5f0:	181b      	addls	r3, r3, r0
 801b5f2:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801b5f4:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801b5f8:	428b      	cmp	r3, r1
 801b5fa:	bf28      	it	cs
 801b5fc:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801b5fe:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801b600:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801b602:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b606:	9300      	str	r3, [sp, #0]
 801b608:	68eb      	ldr	r3, [r5, #12]
 801b60a:	4639      	mov	r1, r7
 801b60c:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801b60e:	1e03      	subs	r3, r0, #0
 801b610:	dc38      	bgt.n	801b684 <lfs_bd_read+0x1ac>
        if (err) {
 801b612:	2b00      	cmp	r3, #0
 801b614:	d146      	bne.n	801b6a4 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801b616:	f1ba 0f00 	cmp.w	sl, #0
 801b61a:	d03b      	beq.n	801b694 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801b61c:	f1b9 0f00 	cmp.w	r9, #0
 801b620:	d098      	beq.n	801b554 <lfs_bd_read+0x7c>
 801b622:	f8d9 3000 	ldr.w	r3, [r9]
 801b626:	42bb      	cmp	r3, r7
 801b628:	f43f af70 	beq.w	801b50c <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801b62c:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801b62e:	682b      	ldr	r3, [r5, #0]
 801b630:	42bb      	cmp	r3, r7
 801b632:	d093      	beq.n	801b55c <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801b634:	45da      	cmp	sl, fp
 801b636:	d3ba      	bcc.n	801b5ae <lfs_bd_read+0xd6>
 801b638:	9b03      	ldr	r3, [sp, #12]
 801b63a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b63c:	69c2      	ldr	r2, [r0, #28]
 801b63e:	fbb4 f3f2 	udiv	r3, r4, r2
 801b642:	fb02 4313 	mls	r3, r2, r3, r4
 801b646:	2b00      	cmp	r3, #0
 801b648:	d1b1      	bne.n	801b5ae <lfs_bd_read+0xd6>
 801b64a:	4552      	cmp	r2, sl
 801b64c:	d8af      	bhi.n	801b5ae <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801b64e:	fbb8 f3f2 	udiv	r3, r8, r2
 801b652:	fb02 8313 	mls	r3, r2, r3, r8
 801b656:	9305      	str	r3, [sp, #20]
 801b658:	eba8 0203 	sub.w	r2, r8, r3
 801b65c:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801b65e:	6842      	ldr	r2, [r0, #4]
 801b660:	4616      	mov	r6, r2
 801b662:	9304      	str	r3, [sp, #16]
 801b664:	9300      	str	r3, [sp, #0]
 801b666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b668:	4622      	mov	r2, r4
 801b66a:	4639      	mov	r1, r7
 801b66c:	47b0      	blx	r6
            if (err) {
 801b66e:	2800      	cmp	r0, #0
 801b670:	d093      	beq.n	801b59a <lfs_bd_read+0xc2>
}
 801b672:	b007      	add	sp, #28
 801b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b678:	4b0b      	ldr	r3, [pc, #44]	@ (801b6a8 <lfs_bd_read+0x1d0>)
 801b67a:	4a0c      	ldr	r2, [pc, #48]	@ (801b6ac <lfs_bd_read+0x1d4>)
 801b67c:	216b      	movs	r1, #107	@ 0x6b
 801b67e:	480c      	ldr	r0, [pc, #48]	@ (801b6b0 <lfs_bd_read+0x1d8>)
 801b680:	f00e fda4 	bl	802a1cc <__assert_func>
        LFS_ASSERT(err <= 0);
 801b684:	4b0b      	ldr	r3, [pc, #44]	@ (801b6b4 <lfs_bd_read+0x1dc>)
 801b686:	4a09      	ldr	r2, [pc, #36]	@ (801b6ac <lfs_bd_read+0x1d4>)
 801b688:	2176      	movs	r1, #118	@ 0x76
 801b68a:	4809      	ldr	r0, [pc, #36]	@ (801b6b0 <lfs_bd_read+0x1d8>)
 801b68c:	f00e fd9e 	bl	802a1cc <__assert_func>
 801b690:	9003      	str	r0, [sp, #12]
 801b692:	e7c0      	b.n	801b616 <lfs_bd_read+0x13e>
    return 0;
 801b694:	2000      	movs	r0, #0
 801b696:	e7ec      	b.n	801b672 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801b698:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b69c:	e7e9      	b.n	801b672 <lfs_bd_read+0x19a>
 801b69e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b6a2:	e7e6      	b.n	801b672 <lfs_bd_read+0x19a>
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	e7e4      	b.n	801b672 <lfs_bd_read+0x19a>
 801b6a8:	08039570 	.word	0x08039570
 801b6ac:	0803a238 	.word	0x0803a238
 801b6b0:	080394c4 	.word	0x080394c4
 801b6b4:	080394f4 	.word	0x080394f4

0801b6b8 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6bc:	b089      	sub	sp, #36	@ 0x24
 801b6be:	4607      	mov	r7, r0
 801b6c0:	468a      	mov	sl, r1
 801b6c2:	4690      	mov	r8, r2
 801b6c4:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801b6c6:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801b6c8:	690b      	ldr	r3, [r1, #16]
 801b6ca:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b6cc:	303c      	adds	r0, #60	@ 0x3c
 801b6ce:	f7ff fd73 	bl	801b1b8 <lfs_gstate_hasmovehere>
 801b6d2:	2800      	cmp	r0, #0
 801b6d4:	f000 808d 	beq.w	801b7f2 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801b6d8:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	f000 808a 	beq.w	801b7f6 <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b6e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801b6e4:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801b6e8:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801b6ec:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801b6f0:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b6f4:	404b      	eors	r3, r1
 801b6f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	f000 8085 	beq.w	801b80a <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801b700:	4282      	cmp	r2, r0
 801b702:	d37a      	bcc.n	801b7fa <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801b704:	2600      	movs	r6, #0
 801b706:	e006      	b.n	801b716 <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801b708:	9605      	str	r6, [sp, #20]
 801b70a:	ebab 0306 	sub.w	r3, fp, r6
 801b70e:	4063      	eors	r3, r4
 801b710:	ea13 0f08 	tst.w	r3, r8
 801b714:	d048      	beq.n	801b7a8 <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b716:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b718:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b71c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b720:	bf14      	ite	ne
 801b722:	4623      	movne	r3, r4
 801b724:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801b726:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b72a:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b72c:	3308      	adds	r3, #8
 801b72e:	42ab      	cmp	r3, r5
 801b730:	d865      	bhi.n	801b7fe <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801b732:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801b734:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801b738:	2304      	movs	r3, #4
 801b73a:	9303      	str	r3, [sp, #12]
 801b73c:	a907      	add	r1, sp, #28
 801b73e:	9102      	str	r1, [sp, #8]
 801b740:	9501      	str	r5, [sp, #4]
 801b742:	9200      	str	r2, [sp, #0]
 801b744:	463a      	mov	r2, r7
 801b746:	2100      	movs	r1, #0
 801b748:	4638      	mov	r0, r7
 801b74a:	f7ff fec5 	bl	801b4d8 <lfs_bd_read>
        if (err) {
 801b74e:	4603      	mov	r3, r0
 801b750:	2800      	cmp	r0, #0
 801b752:	d156      	bne.n	801b802 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801b754:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801b756:	ba1b      	rev	r3, r3
 801b758:	4063      	eors	r3, r4
 801b75a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b75e:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801b760:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801b764:	2b00      	cmp	r3, #0
 801b766:	d0cf      	beq.n	801b708 <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801b768:	0d23      	lsrs	r3, r4, #20
 801b76a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801b76e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b772:	d1c9      	bne.n	801b708 <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801b774:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801b778:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801b77c:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b780:	4584      	cmp	ip, r0
 801b782:	d3c1      	bcc.n	801b708 <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801b784:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801b788:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801b78c:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801b790:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801b794:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801b798:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801b79c:	42a2      	cmp	r2, r4
 801b79e:	d037      	beq.n	801b810 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801b7a0:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b7a2:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801b7a6:	e7af      	b.n	801b708 <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801b7a8:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b7ac:	d033      	beq.n	801b816 <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801b7ae:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801b7b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b7b4:	429e      	cmp	r6, r3
 801b7b6:	bf28      	it	cs
 801b7b8:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801b7ba:	f8da 2000 	ldr.w	r2, [sl]
 801b7be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b7c0:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801b7c2:	9603      	str	r6, [sp, #12]
 801b7c4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b7c6:	9102      	str	r1, [sp, #8]
 801b7c8:	3304      	adds	r3, #4
 801b7ca:	9301      	str	r3, [sp, #4]
 801b7cc:	9200      	str	r2, [sp, #0]
 801b7ce:	4633      	mov	r3, r6
 801b7d0:	463a      	mov	r2, r7
 801b7d2:	2100      	movs	r1, #0
 801b7d4:	4638      	mov	r0, r7
 801b7d6:	f7ff fe7f 	bl	801b4d8 <lfs_bd_read>
            if (err) {
 801b7da:	4603      	mov	r3, r0
 801b7dc:	b988      	cbnz	r0, 801b802 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801b7de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b7e0:	1b9a      	subs	r2, r3, r6
 801b7e2:	2100      	movs	r1, #0
 801b7e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b7e6:	1998      	adds	r0, r3, r6
 801b7e8:	f011 fa42 	bl	802cc70 <memset>
            return tag + gdiff;
 801b7ec:	9b05      	ldr	r3, [sp, #20]
 801b7ee:	4423      	add	r3, r4
 801b7f0:	e007      	b.n	801b802 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801b7f2:	2600      	movs	r6, #0
 801b7f4:	e78f      	b.n	801b716 <lfs_dir_getslice+0x5e>
 801b7f6:	2600      	movs	r6, #0
 801b7f8:	e78d      	b.n	801b716 <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801b7fa:	4e08      	ldr	r6, [pc, #32]	@ (801b81c <lfs_dir_getslice+0x164>)
 801b7fc:	e78b      	b.n	801b716 <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801b7fe:	f06f 0301 	mvn.w	r3, #1
}
 801b802:	4618      	mov	r0, r3
 801b804:	b009      	add	sp, #36	@ 0x24
 801b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801b80a:	f06f 0301 	mvn.w	r3, #1
 801b80e:	e7f8      	b.n	801b802 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b810:	f06f 0301 	mvn.w	r3, #1
 801b814:	e7f5      	b.n	801b802 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b816:	f06f 0301 	mvn.w	r3, #1
 801b81a:	e7f2      	b.n	801b802 <lfs_dir_getslice+0x14a>
 801b81c:	fffffc00 	.word	0xfffffc00

0801b820 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801b820:	b510      	push	{r4, lr}
 801b822:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801b824:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801b828:	9402      	str	r4, [sp, #8]
 801b82a:	9c06      	ldr	r4, [sp, #24]
 801b82c:	9401      	str	r4, [sp, #4]
 801b82e:	2400      	movs	r4, #0
 801b830:	9400      	str	r4, [sp, #0]
 801b832:	f7ff ff41 	bl	801b6b8 <lfs_dir_getslice>
}
 801b836:	b004      	add	sp, #16
 801b838:	bd10      	pop	{r4, pc}
	...

0801b83c <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801b83c:	b510      	push	{r4, lr}
 801b83e:	b086      	sub	sp, #24
 801b840:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801b842:	ab03      	add	r3, sp, #12
 801b844:	9300      	str	r3, [sp, #0]
 801b846:	4b09      	ldr	r3, [pc, #36]	@ (801b86c <lfs_dir_getgstate+0x30>)
 801b848:	4a09      	ldr	r2, [pc, #36]	@ (801b870 <lfs_dir_getgstate+0x34>)
 801b84a:	f7ff ffe9 	bl	801b820 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801b84e:	2800      	cmp	r0, #0
 801b850:	da04      	bge.n	801b85c <lfs_dir_getgstate+0x20>
 801b852:	f110 0f02 	cmn.w	r0, #2
 801b856:	d106      	bne.n	801b866 <lfs_dir_getgstate+0x2a>
    return 0;
 801b858:	2000      	movs	r0, #0
 801b85a:	e004      	b.n	801b866 <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801b85c:	a903      	add	r1, sp, #12
 801b85e:	4620      	mov	r0, r4
 801b860:	f7ff fc98 	bl	801b194 <lfs_gstate_xor>
    return 0;
 801b864:	2000      	movs	r0, #0
}
 801b866:	b006      	add	sp, #24
 801b868:	bd10      	pop	{r4, pc}
 801b86a:	bf00      	nop
 801b86c:	7ff0000c 	.word	0x7ff0000c
 801b870:	7ff00000 	.word	0x7ff00000

0801b874 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b878:	b089      	sub	sp, #36	@ 0x24
 801b87a:	461c      	mov	r4, r3
 801b87c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b87e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b880:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801b882:	b923      	cbnz	r3, 801b88e <lfs_ctz_traverse+0x1a>
        return 0;
 801b884:	2300      	movs	r3, #0
}
 801b886:	4618      	mov	r0, r3
 801b888:	b009      	add	sp, #36	@ 0x24
 801b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b88e:	4680      	mov	r8, r0
 801b890:	4689      	mov	r9, r1
 801b892:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801b894:	3b01      	subs	r3, #1
 801b896:	9307      	str	r3, [sp, #28]
 801b898:	a907      	add	r1, sp, #28
 801b89a:	f7ff fdff 	bl	801b49c <lfs_ctz_index>
 801b89e:	4605      	mov	r5, r0
        int err = cb(data, head);
 801b8a0:	4621      	mov	r1, r4
 801b8a2:	4638      	mov	r0, r7
 801b8a4:	47b0      	blx	r6
        if (err) {
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	2800      	cmp	r0, #0
 801b8aa:	d1ec      	bne.n	801b886 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	d0ea      	beq.n	801b886 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801b8b0:	f005 0b01 	and.w	fp, r5, #1
 801b8b4:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801b8b8:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801b8ba:	9303      	str	r3, [sp, #12]
 801b8bc:	aa05      	add	r2, sp, #20
 801b8be:	9202      	str	r2, [sp, #8]
 801b8c0:	2200      	movs	r2, #0
 801b8c2:	9201      	str	r2, [sp, #4]
 801b8c4:	9400      	str	r4, [sp, #0]
 801b8c6:	4652      	mov	r2, sl
 801b8c8:	4649      	mov	r1, r9
 801b8ca:	4640      	mov	r0, r8
 801b8cc:	f7ff fe04 	bl	801b4d8 <lfs_bd_read>
        if (err) {
 801b8d0:	4604      	mov	r4, r0
 801b8d2:	b9c8      	cbnz	r0, 801b908 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801b8d4:	43eb      	mvns	r3, r5
 801b8d6:	f003 0301 	and.w	r3, r3, #1
 801b8da:	42a3      	cmp	r3, r4
 801b8dc:	dd0b      	ble.n	801b8f6 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801b8de:	ab08      	add	r3, sp, #32
 801b8e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b8e4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801b8e8:	4638      	mov	r0, r7
 801b8ea:	47b0      	blx	r6
            if (err) {
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	d1c9      	bne.n	801b886 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801b8f2:	3401      	adds	r4, #1
 801b8f4:	e7ee      	b.n	801b8d4 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801b8f6:	aa08      	add	r2, sp, #32
 801b8f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b8fc:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801b900:	f1ab 0b02 	sub.w	fp, fp, #2
 801b904:	445d      	add	r5, fp
    while (true) {
 801b906:	e7cb      	b.n	801b8a0 <lfs_ctz_traverse+0x2c>
            return err;
 801b908:	4603      	mov	r3, r0
 801b90a:	e7bc      	b.n	801b886 <lfs_ctz_traverse+0x12>

0801b90c <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801b90c:	b530      	push	{r4, r5, lr}
 801b90e:	b087      	sub	sp, #28
 801b910:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801b912:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801b914:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801b918:	6811      	ldr	r1, [r2, #0]
 801b91a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801b91c:	2508      	movs	r5, #8
 801b91e:	9503      	str	r5, [sp, #12]
 801b920:	ad04      	add	r5, sp, #16
 801b922:	9502      	str	r5, [sp, #8]
 801b924:	9201      	str	r2, [sp, #4]
 801b926:	9100      	str	r1, [sp, #0]
 801b928:	4602      	mov	r2, r0
 801b92a:	f100 0110 	add.w	r1, r0, #16
 801b92e:	f7ff fdd3 	bl	801b4d8 <lfs_bd_read>
    if (err) {
 801b932:	4603      	mov	r3, r0
 801b934:	b978      	cbnz	r0, 801b956 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b936:	9a04      	ldr	r2, [sp, #16]
 801b938:	6861      	ldr	r1, [r4, #4]
 801b93a:	4291      	cmp	r1, r2
 801b93c:	d008      	beq.n	801b950 <lfs_fs_parent_match+0x44>
 801b93e:	9d05      	ldr	r5, [sp, #20]
 801b940:	68a0      	ldr	r0, [r4, #8]
 801b942:	4285      	cmp	r5, r0
 801b944:	d004      	beq.n	801b950 <lfs_fs_parent_match+0x44>
 801b946:	4282      	cmp	r2, r0
 801b948:	d002      	beq.n	801b950 <lfs_fs_parent_match+0x44>
 801b94a:	42a9      	cmp	r1, r5
 801b94c:	d000      	beq.n	801b950 <lfs_fs_parent_match+0x44>
 801b94e:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801b950:	3b00      	subs	r3, #0
 801b952:	bf18      	it	ne
 801b954:	2301      	movne	r3, #1
}
 801b956:	4618      	mov	r0, r3
 801b958:	b007      	add	sp, #28
 801b95a:	bd30      	pop	{r4, r5, pc}

0801b95c <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b960:	b0af      	sub	sp, #188	@ 0xbc
 801b962:	9007      	str	r0, [sp, #28]
 801b964:	460e      	mov	r6, r1
 801b966:	4617      	mov	r7, r2
 801b968:	461c      	mov	r4, r3
 801b96a:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801b96e:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801b972:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801b976:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801b97a:	9304      	str	r3, [sp, #16]
 801b97c:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801b980:	9305      	str	r3, [sp, #20]
 801b982:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801b986:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801b988:	2500      	movs	r5, #0
 801b98a:	950d      	str	r5, [sp, #52]	@ 0x34
 801b98c:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b98e:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b996:	bf14      	ite	ne
 801b998:	46a1      	movne	r9, r4
 801b99a:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801b99e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b9a2:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801b9a6:	44b9      	add	r9, r7
 801b9a8:	68f3      	ldr	r3, [r6, #12]
 801b9aa:	4599      	cmp	r9, r3
 801b9ac:	d35e      	bcc.n	801ba6c <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801b9ae:	f1bb 0f00 	cmp.w	fp, #0
 801b9b2:	f340 80fa 	ble.w	801bbaa <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801b9b6:	f8d8 3000 	ldr.w	r3, [r8]
 801b9ba:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801b9bc:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801b9c0:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801b9c4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801b9c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b9ca:	4ba9      	ldr	r3, [pc, #676]	@ (801bc70 <lfs_dir_traverse+0x314>)
 801b9cc:	ea0a 0303 	and.w	r3, sl, r3
 801b9d0:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b9d2:	404a      	eors	r2, r1
 801b9d4:	401a      	ands	r2, r3
 801b9d6:	d1da      	bne.n	801b98e <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801b9d8:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	f000 8116 	beq.w	801bc0e <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b9e2:	2d02      	cmp	r5, #2
 801b9e4:	d862      	bhi.n	801baac <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801b9e6:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b9ea:	a82e      	add	r0, sp, #184	@ 0xb8
 801b9ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801b9f0:	f843 6c78 	str.w	r6, [r3, #-120]
 801b9f4:	f843 7c74 	str.w	r7, [r3, #-116]
 801b9f8:	f843 4c70 	str.w	r4, [r3, #-112]
 801b9fc:	f843 8c6c 	str.w	r8, [r3, #-108]
 801ba00:	f843 bc68 	str.w	fp, [r3, #-104]
 801ba04:	f843 ac64 	str.w	sl, [r3, #-100]
 801ba08:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801ba0a:	f843 0c60 	str.w	r0, [r3, #-96]
 801ba0e:	9804      	ldr	r0, [sp, #16]
 801ba10:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801ba14:	9805      	ldr	r0, [sp, #20]
 801ba16:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801ba1a:	9806      	ldr	r0, [sp, #24]
 801ba1c:	f823 0c58 	strh.w	r0, [r3, #-88]
 801ba20:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801ba22:	f843 0c54 	str.w	r0, [r3, #-84]
 801ba26:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801ba28:	f843 0c50 	str.w	r0, [r3, #-80]
 801ba2c:	f843 1c4c 	str.w	r1, [r3, #-76]
 801ba30:	f843 9c48 	str.w	r9, [r3, #-72]
 801ba34:	3b44      	subs	r3, #68	@ 0x44
 801ba36:	a90d      	add	r1, sp, #52	@ 0x34
 801ba38:	c903      	ldmia	r1, {r0, r1}
 801ba3a:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801ba3e:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801ba42:	009b      	lsls	r3, r3, #2
 801ba44:	3328      	adds	r3, #40	@ 0x28
 801ba46:	a910      	add	r1, sp, #64	@ 0x40
 801ba48:	440b      	add	r3, r1
 801ba4a:	3304      	adds	r3, #4
 801ba4c:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801ba4e:	3501      	adds	r5, #1
                ttag = 0;
 801ba50:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801ba52:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801ba54:	4b87      	ldr	r3, [pc, #540]	@ (801bc74 <lfs_dir_traverse+0x318>)
 801ba56:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801ba58:	2300      	movs	r3, #0
 801ba5a:	9306      	str	r3, [sp, #24]
                end = 0;
 801ba5c:	9305      	str	r3, [sp, #20]
                begin = 0;
 801ba5e:	9304      	str	r3, [sp, #16]
 801ba60:	e795      	b.n	801b98e <lfs_dir_traverse+0x32>
 801ba62:	9d08      	ldr	r5, [sp, #32]
 801ba64:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801ba66:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ba68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ba6a:	e790      	b.n	801b98e <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801ba6c:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801ba6e:	2304      	movs	r3, #4
 801ba70:	9303      	str	r3, [sp, #12]
 801ba72:	a90f      	add	r1, sp, #60	@ 0x3c
 801ba74:	9102      	str	r1, [sp, #8]
 801ba76:	f8cd 9004 	str.w	r9, [sp, #4]
 801ba7a:	9200      	str	r2, [sp, #0]
 801ba7c:	9a07      	ldr	r2, [sp, #28]
 801ba7e:	2100      	movs	r1, #0
 801ba80:	4610      	mov	r0, r2
 801ba82:	f7ff fd29 	bl	801b4d8 <lfs_bd_read>
                if (err) {
 801ba86:	4603      	mov	r3, r0
 801ba88:	2800      	cmp	r0, #0
 801ba8a:	f040 80ec 	bne.w	801bc66 <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801ba8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801ba90:	ba1b      	rev	r3, r3
 801ba92:	4063      	eors	r3, r4
 801ba94:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801ba98:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801ba9a:	6833      	ldr	r3, [r6, #0]
 801ba9c:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801ba9e:	f109 0304 	add.w	r3, r9, #4
 801baa2:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801baa4:	464f      	mov	r7, r9
                buffer = &disk;
 801baa6:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801baaa:	e78d      	b.n	801b9c8 <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801baac:	4b72      	ldr	r3, [pc, #456]	@ (801bc78 <lfs_dir_traverse+0x31c>)
 801baae:	4a73      	ldr	r2, [pc, #460]	@ (801bc7c <lfs_dir_traverse+0x320>)
 801bab0:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801bab4:	4872      	ldr	r0, [pc, #456]	@ (801bc80 <lfs_dir_traverse+0x324>)
 801bab6:	f00e fb89 	bl	802a1cc <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801baba:	4b6e      	ldr	r3, [pc, #440]	@ (801bc74 <lfs_dir_traverse+0x318>)
 801babc:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801babe:	429a      	cmp	r2, r3
 801bac0:	f43f af65 	beq.w	801b98e <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801bac4:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801bac8:	aa2e      	add	r2, sp, #184	@ 0xb8
 801baca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bace:	223c      	movs	r2, #60	@ 0x3c
 801bad0:	2100      	movs	r1, #0
 801bad2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bad4:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801bad8:	f011 f8ca 	bl	802cc70 <memset>
 801badc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bade:	f843 6c78 	str.w	r6, [r3, #-120]
 801bae2:	f843 7c74 	str.w	r7, [r3, #-116]
 801bae6:	f843 4c70 	str.w	r4, [r3, #-112]
 801baea:	f843 8c6c 	str.w	r8, [r3, #-108]
 801baee:	f843 bc68 	str.w	fp, [r3, #-104]
 801baf2:	f843 ac64 	str.w	sl, [r3, #-100]
 801baf6:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801baf8:	f843 2c60 	str.w	r2, [r3, #-96]
 801bafc:	9a04      	ldr	r2, [sp, #16]
 801bafe:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801bb02:	9a05      	ldr	r2, [sp, #20]
 801bb04:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801bb08:	9906      	ldr	r1, [sp, #24]
 801bb0a:	f823 1c58 	strh.w	r1, [r3, #-88]
 801bb0e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801bb10:	f843 2c54 	str.w	r2, [r3, #-84]
 801bb14:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801bb16:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801bb1a:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801bb1c:	9b08      	ldr	r3, [sp, #32]
 801bb1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801bb22:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801bb24:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801bb28:	1c50      	adds	r0, r2, #1
 801bb2a:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801bb2c:	1a9b      	subs	r3, r3, r2
 801bb2e:	fa11 f383 	uxtah	r3, r1, r3
 801bb32:	b21b      	sxth	r3, r3
 801bb34:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801bb36:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801bb38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801bb3c:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801bb3e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801bc84 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801bb42:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801bb46:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801bb48:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801bb4c:	465f      	mov	r7, fp
 801bb4e:	e71e      	b.n	801b98e <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bb50:	2300      	movs	r3, #0
 801bb52:	9508      	str	r5, [sp, #32]
 801bb54:	9609      	str	r6, [sp, #36]	@ 0x24
 801bb56:	970a      	str	r7, [sp, #40]	@ 0x28
 801bb58:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bb5a:	461c      	mov	r4, r3
 801bb5c:	9d06      	ldr	r5, [sp, #24]
 801bb5e:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801bb60:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801bb62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801bb64:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bb68:	4294      	cmp	r4, r2
 801bb6a:	d219      	bcs.n	801bba0 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801bb6c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801bb70:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801bb74:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801bb78:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801bb7c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801bb80:	442b      	add	r3, r5
 801bb82:	029b      	lsls	r3, r3, #10
 801bb84:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801bb88:	6891      	ldr	r1, [r2, #8]
 801bb8a:	6852      	ldr	r2, [r2, #4]
 801bb8c:	4319      	orrs	r1, r3
 801bb8e:	4638      	mov	r0, r7
 801bb90:	47b0      	blx	r6
                if (res < 0) {
 801bb92:	2800      	cmp	r0, #0
 801bb94:	db66      	blt.n	801bc64 <lfs_dir_traverse+0x308>
                if (res) {
 801bb96:	2800      	cmp	r0, #0
 801bb98:	f47f af63 	bne.w	801ba62 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801bb9c:	3401      	adds	r4, #1
 801bb9e:	e7e0      	b.n	801bb62 <lfs_dir_traverse+0x206>
 801bba0:	9d08      	ldr	r5, [sp, #32]
 801bba2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801bba4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bba6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bba8:	e6f1      	b.n	801b98e <lfs_dir_traverse+0x32>
                res = 0;
 801bbaa:	2300      	movs	r3, #0
    if (sp > 0) {
 801bbac:	2d00      	cmp	r5, #0
 801bbae:	d05a      	beq.n	801bc66 <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801bbb0:	3d01      	subs	r5, #1
 801bbb2:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801bbb6:	aa2e      	add	r2, sp, #184	@ 0xb8
 801bbb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bbbc:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801bbc0:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801bbc4:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801bbc8:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801bbcc:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801bbd0:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801bbd4:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801bbd8:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801bbda:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801bbde:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801bbe0:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801bbe4:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801bbe6:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801bbea:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801bbec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801bbf0:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801bbf2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801bbf6:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801bbf8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801bbfc:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801bbfe:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801bc02:	aa0d      	add	r2, sp, #52	@ 0x34
 801bc04:	3b44      	subs	r3, #68	@ 0x44
 801bc06:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bc0a:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801bc0e:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801bc12:	b153      	cbz	r3, 801bc2a <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801bc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc16:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801bc1a:	9a04      	ldr	r2, [sp, #16]
 801bc1c:	429a      	cmp	r2, r3
 801bc1e:	f63f aeb6 	bhi.w	801b98e <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801bc22:	9a05      	ldr	r2, [sp, #20]
 801bc24:	429a      	cmp	r2, r3
 801bc26:	f67f aeb2 	bls.w	801b98e <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801bc2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc2c:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801bc2e:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	f43f aeab 	beq.w	801b98e <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801bc38:	f240 1201 	movw	r2, #257	@ 0x101
 801bc3c:	4293      	cmp	r3, r2
 801bc3e:	f43f af3c 	beq.w	801baba <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801bc42:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801bc46:	d083      	beq.n	801bb50 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801bc48:	464a      	mov	r2, r9
 801bc4a:	9b08      	ldr	r3, [sp, #32]
 801bc4c:	9906      	ldr	r1, [sp, #24]
 801bc4e:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801bc52:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801bc54:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801bc56:	4798      	blx	r3
            if (res < 0) {
 801bc58:	1e03      	subs	r3, r0, #0
 801bc5a:	db04      	blt.n	801bc66 <lfs_dir_traverse+0x30a>
            if (res) {
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	f43f ae96 	beq.w	801b98e <lfs_dir_traverse+0x32>
 801bc62:	e7a3      	b.n	801bbac <lfs_dir_traverse+0x250>
 801bc64:	4603      	mov	r3, r0
}
 801bc66:	4618      	mov	r0, r3
 801bc68:	b02f      	add	sp, #188	@ 0xbc
 801bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc6e:	bf00      	nop
 801bc70:	7ff00000 	.word	0x7ff00000
 801bc74:	0801b291 	.word	0x0801b291
 801bc78:	080395a0 	.word	0x080395a0
 801bc7c:	0803a1b0 	.word	0x0803a1b0
 801bc80:	080394c4 	.word	0x080394c4
 801bc84:	600ffc00 	.word	0x600ffc00

0801bc88 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8c:	b087      	sub	sp, #28
 801bc8e:	4606      	mov	r6, r0
 801bc90:	468a      	mov	sl, r1
 801bc92:	4617      	mov	r7, r2
 801bc94:	461c      	mov	r4, r3
 801bc96:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801bc9a:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801bc9e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801bca0:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801bca4:	eb05 0208 	add.w	r2, r5, r8
 801bca8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801bcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcac:	429a      	cmp	r2, r3
 801bcae:	d94d      	bls.n	801bd4c <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801bcb0:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801bcb4:	e076      	b.n	801bda4 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	68ba      	ldr	r2, [r7, #8]
 801bcba:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801bcbc:	42a9      	cmp	r1, r5
 801bcbe:	d91c      	bls.n	801bcfa <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801bcc0:	42ab      	cmp	r3, r5
 801bcc2:	d904      	bls.n	801bcce <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801bcc4:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801bcc6:	4543      	cmp	r3, r8
 801bcc8:	bf28      	it	cs
 801bcca:	4643      	movcs	r3, r8
 801bccc:	e048      	b.n	801bd60 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801bcce:	1b59      	subs	r1, r3, r5
 801bcd0:	440a      	add	r2, r1
 801bcd2:	4542      	cmp	r2, r8
 801bcd4:	bf28      	it	cs
 801bcd6:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801bcd8:	68f9      	ldr	r1, [r7, #12]
 801bcda:	1aeb      	subs	r3, r5, r3
 801bcdc:	9205      	str	r2, [sp, #20]
 801bcde:	4419      	add	r1, r3
 801bce0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801bce2:	f012 fa01 	bl	802e0e8 <memcpy>
                data += diff;
 801bce6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801bce8:	9b05      	ldr	r3, [sp, #20]
 801bcea:	4419      	add	r1, r3
 801bcec:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801bcee:	441d      	add	r5, r3
                size -= diff;
 801bcf0:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801bcf4:	e02a      	b.n	801bd4c <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801bcf6:	4643      	mov	r3, r8
 801bcf8:	e032      	b.n	801bd60 <lfs_dir_getread+0xd8>
 801bcfa:	4643      	mov	r3, r8
 801bcfc:	e030      	b.n	801bd60 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801bcfe:	f06f 0301 	mvn.w	r3, #1
 801bd02:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801bd04:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801bd06:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801bd08:	fbb5 f2f3 	udiv	r2, r5, r3
 801bd0c:	fb03 5212 	mls	r2, r3, r2, r5
 801bd10:	1aaa      	subs	r2, r5, r2
 801bd12:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801bd14:	eb05 030b 	add.w	r3, r5, fp
 801bd18:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801bd1a:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801bd1c:	4403      	add	r3, r0
 801bd1e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801bd20:	fbb3 fcf0 	udiv	ip, r3, r0
 801bd24:	fb00 301c 	mls	r0, r0, ip, r3
 801bd28:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801bd2a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801bd2c:	428b      	cmp	r3, r1
 801bd2e:	bf28      	it	cs
 801bd30:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801bd32:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801bd34:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801bd36:	9302      	str	r3, [sp, #8]
 801bd38:	9101      	str	r1, [sp, #4]
 801bd3a:	9200      	str	r2, [sp, #0]
 801bd3c:	464b      	mov	r3, r9
 801bd3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bd40:	4651      	mov	r1, sl
 801bd42:	4630      	mov	r0, r6
 801bd44:	f7ff fcb8 	bl	801b6b8 <lfs_dir_getslice>
        if (err < 0) {
 801bd48:	2800      	cmp	r0, #0
 801bd4a:	db2b      	blt.n	801bda4 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801bd4c:	f1b8 0f00 	cmp.w	r8, #0
 801bd50:	d027      	beq.n	801bda2 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801bd52:	2f00      	cmp	r7, #0
 801bd54:	d0cf      	beq.n	801bcf6 <lfs_dir_getread+0x6e>
 801bd56:	683b      	ldr	r3, [r7, #0]
 801bd58:	f113 0f02 	cmn.w	r3, #2
 801bd5c:	d0ab      	beq.n	801bcb6 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801bd5e:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801bd60:	6822      	ldr	r2, [r4, #0]
 801bd62:	f112 0f02 	cmn.w	r2, #2
 801bd66:	d1ca      	bne.n	801bcfe <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801bd68:	6862      	ldr	r2, [r4, #4]
 801bd6a:	68a1      	ldr	r1, [r4, #8]
 801bd6c:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801bd6e:	42a8      	cmp	r0, r5
 801bd70:	d9c5      	bls.n	801bcfe <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801bd72:	42aa      	cmp	r2, r5
 801bd74:	d8c3      	bhi.n	801bcfe <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801bd76:	1b50      	subs	r0, r2, r5
 801bd78:	4401      	add	r1, r0
 801bd7a:	4608      	mov	r0, r1
 801bd7c:	4299      	cmp	r1, r3
 801bd7e:	bf28      	it	cs
 801bd80:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801bd82:	68e3      	ldr	r3, [r4, #12]
 801bd84:	1aa9      	subs	r1, r5, r2
 801bd86:	9005      	str	r0, [sp, #20]
 801bd88:	4602      	mov	r2, r0
 801bd8a:	4419      	add	r1, r3
 801bd8c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801bd8e:	f012 f9ab 	bl	802e0e8 <memcpy>
                data += diff;
 801bd92:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801bd94:	9b05      	ldr	r3, [sp, #20]
 801bd96:	4419      	add	r1, r3
 801bd98:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801bd9a:	441d      	add	r5, r3
                size -= diff;
 801bd9c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801bda0:	e7d4      	b.n	801bd4c <lfs_dir_getread+0xc4>
    return 0;
 801bda2:	2000      	movs	r0, #0
}
 801bda4:	b007      	add	sp, #28
 801bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bdaa <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801bdaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdae:	b089      	sub	sp, #36	@ 0x24
 801bdb0:	4682      	mov	sl, r0
 801bdb2:	4689      	mov	r9, r1
 801bdb4:	9205      	str	r2, [sp, #20]
 801bdb6:	461f      	mov	r7, r3
 801bdb8:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801bdbc:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801bdc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bdc2:	2400      	movs	r4, #0
 801bdc4:	e002      	b.n	801bdcc <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801bdc6:	2301      	movs	r3, #1
 801bdc8:	e023      	b.n	801be12 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801bdca:	442c      	add	r4, r5
 801bdcc:	42b4      	cmp	r4, r6
 801bdce:	d21f      	bcs.n	801be10 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801bdd0:	1b35      	subs	r5, r6, r4
 801bdd2:	2d08      	cmp	r5, #8
 801bdd4:	bf28      	it	cs
 801bdd6:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801bdd8:	9503      	str	r5, [sp, #12]
 801bdda:	ab06      	add	r3, sp, #24
 801bddc:	9302      	str	r3, [sp, #8]
 801bdde:	eb04 0308 	add.w	r3, r4, r8
 801bde2:	9301      	str	r3, [sp, #4]
 801bde4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bde6:	9300      	str	r3, [sp, #0]
 801bde8:	1b3b      	subs	r3, r7, r4
 801bdea:	9a05      	ldr	r2, [sp, #20]
 801bdec:	4649      	mov	r1, r9
 801bdee:	4650      	mov	r0, sl
 801bdf0:	f7ff fb72 	bl	801b4d8 <lfs_bd_read>
        if (err) {
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	b960      	cbnz	r0, 801be12 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801bdf8:	462a      	mov	r2, r5
 801bdfa:	eb0b 0104 	add.w	r1, fp, r4
 801bdfe:	a806      	add	r0, sp, #24
 801be00:	f010 fea2 	bl	802cb48 <memcmp>
        if (res) {
 801be04:	2800      	cmp	r0, #0
 801be06:	d0e0      	beq.n	801bdca <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801be08:	2800      	cmp	r0, #0
 801be0a:	dbdc      	blt.n	801bdc6 <lfs_bd_cmp+0x1c>
 801be0c:	2302      	movs	r3, #2
 801be0e:	e000      	b.n	801be12 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801be10:	2300      	movs	r3, #0
}
 801be12:	4618      	mov	r0, r3
 801be14:	b009      	add	sp, #36	@ 0x24
 801be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801be1c <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801be1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be20:	b085      	sub	sp, #20
 801be22:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801be24:	6809      	ldr	r1, [r1, #0]
 801be26:	f111 0f03 	cmn.w	r1, #3
 801be2a:	d83f      	bhi.n	801beac <lfs_bd_flush+0x90>
 801be2c:	4607      	mov	r7, r0
 801be2e:	4691      	mov	r9, r2
 801be30:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801be32:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801be34:	4299      	cmp	r1, r3
 801be36:	d22d      	bcs.n	801be94 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801be38:	68a5      	ldr	r5, [r4, #8]
 801be3a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801be3c:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801be3e:	4415      	add	r5, r2
 801be40:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801be42:	fbb5 f3f2 	udiv	r3, r5, r2
 801be46:	fb02 5313 	mls	r3, r2, r3, r5
 801be4a:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801be4c:	6885      	ldr	r5, [r0, #8]
 801be4e:	9600      	str	r6, [sp, #0]
 801be50:	68e3      	ldr	r3, [r4, #12]
 801be52:	6862      	ldr	r2, [r4, #4]
 801be54:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801be56:	1e05      	subs	r5, r0, #0
 801be58:	dc22      	bgt.n	801bea0 <lfs_bd_flush+0x84>
        if (err) {
 801be5a:	bb45      	cbnz	r5, 801beae <lfs_bd_flush+0x92>
        if (validate) {
 801be5c:	f1b8 0f00 	cmp.w	r8, #0
 801be60:	d013      	beq.n	801be8a <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801be62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be66:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801be6a:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801be6c:	9603      	str	r6, [sp, #12]
 801be6e:	9302      	str	r3, [sp, #8]
 801be70:	6863      	ldr	r3, [r4, #4]
 801be72:	9301      	str	r3, [sp, #4]
 801be74:	6823      	ldr	r3, [r4, #0]
 801be76:	9300      	str	r3, [sp, #0]
 801be78:	4633      	mov	r3, r6
 801be7a:	464a      	mov	r2, r9
 801be7c:	2100      	movs	r1, #0
 801be7e:	4638      	mov	r0, r7
 801be80:	f7ff ff93 	bl	801bdaa <lfs_bd_cmp>
            if (res < 0) {
 801be84:	2800      	cmp	r0, #0
 801be86:	db16      	blt.n	801beb6 <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801be88:	b9b8      	cbnz	r0, 801beba <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801be8a:	4621      	mov	r1, r4
 801be8c:	4638      	mov	r0, r7
 801be8e:	f7ff faf9 	bl	801b484 <lfs_cache_zero>
 801be92:	e00c      	b.n	801beae <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801be94:	4b0a      	ldr	r3, [pc, #40]	@ (801bec0 <lfs_bd_flush+0xa4>)
 801be96:	4a0b      	ldr	r2, [pc, #44]	@ (801bec4 <lfs_bd_flush+0xa8>)
 801be98:	21b3      	movs	r1, #179	@ 0xb3
 801be9a:	480b      	ldr	r0, [pc, #44]	@ (801bec8 <lfs_bd_flush+0xac>)
 801be9c:	f00e f996 	bl	802a1cc <__assert_func>
        LFS_ASSERT(err <= 0);
 801bea0:	4b0a      	ldr	r3, [pc, #40]	@ (801becc <lfs_bd_flush+0xb0>)
 801bea2:	4a08      	ldr	r2, [pc, #32]	@ (801bec4 <lfs_bd_flush+0xa8>)
 801bea4:	21b7      	movs	r1, #183	@ 0xb7
 801bea6:	4808      	ldr	r0, [pc, #32]	@ (801bec8 <lfs_bd_flush+0xac>)
 801bea8:	f00e f990 	bl	802a1cc <__assert_func>
    return 0;
 801beac:	2500      	movs	r5, #0
}
 801beae:	4628      	mov	r0, r5
 801beb0:	b005      	add	sp, #20
 801beb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801beb6:	4605      	mov	r5, r0
 801beb8:	e7f9      	b.n	801beae <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801beba:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801bebe:	e7f6      	b.n	801beae <lfs_bd_flush+0x92>
 801bec0:	080395a8 	.word	0x080395a8
 801bec4:	0803a1f4 	.word	0x0803a1f4
 801bec8:	080394c4 	.word	0x080394c4
 801becc:	080394f4 	.word	0x080394f4

0801bed0 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed4:	b083      	sub	sp, #12
 801bed6:	4607      	mov	r7, r0
 801bed8:	460c      	mov	r4, r1
 801beda:	9201      	str	r2, [sp, #4]
 801bedc:	469b      	mov	fp, r3
 801bede:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bee0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801bee2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bee6:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801beea:	f116 0f02 	cmn.w	r6, #2
 801beee:	d002      	beq.n	801bef6 <lfs_bd_prog+0x26>
 801bef0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bef2:	42b3      	cmp	r3, r6
 801bef4:	d90b      	bls.n	801bf0e <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801bef6:	eb05 0308 	add.w	r3, r5, r8
 801befa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801befc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801befe:	4293      	cmp	r3, r2
 801bf00:	d919      	bls.n	801bf36 <lfs_bd_prog+0x66>
 801bf02:	4b2b      	ldr	r3, [pc, #172]	@ (801bfb0 <lfs_bd_prog+0xe0>)
 801bf04:	4a2b      	ldr	r2, [pc, #172]	@ (801bfb4 <lfs_bd_prog+0xe4>)
 801bf06:	21e9      	movs	r1, #233	@ 0xe9
 801bf08:	482b      	ldr	r0, [pc, #172]	@ (801bfb8 <lfs_bd_prog+0xe8>)
 801bf0a:	f00e f95f 	bl	802a1cc <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bf0e:	4b2b      	ldr	r3, [pc, #172]	@ (801bfbc <lfs_bd_prog+0xec>)
 801bf10:	4a28      	ldr	r2, [pc, #160]	@ (801bfb4 <lfs_bd_prog+0xe4>)
 801bf12:	21e8      	movs	r1, #232	@ 0xe8
 801bf14:	4828      	ldr	r0, [pc, #160]	@ (801bfb8 <lfs_bd_prog+0xe8>)
 801bf16:	f00e f959 	bl	802a1cc <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bf1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bf1e:	d13c      	bne.n	801bf9a <lfs_bd_prog+0xca>
        pcache->block = block;
 801bf20:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801bf22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bf24:	6a1a      	ldr	r2, [r3, #32]
 801bf26:	fbb5 f3f2 	udiv	r3, r5, r2
 801bf2a:	fb02 5313 	mls	r3, r2, r3, r5
 801bf2e:	1aeb      	subs	r3, r5, r3
 801bf30:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801bf32:	2300      	movs	r3, #0
 801bf34:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801bf36:	f1b8 0f00 	cmp.w	r8, #0
 801bf3a:	d035      	beq.n	801bfa8 <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801bf3c:	6823      	ldr	r3, [r4, #0]
 801bf3e:	42b3      	cmp	r3, r6
 801bf40:	d1eb      	bne.n	801bf1a <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801bf42:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801bf44:	42aa      	cmp	r2, r5
 801bf46:	d8e8      	bhi.n	801bf1a <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801bf48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801bf4a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801bf4c:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801bf4e:	42a8      	cmp	r0, r5
 801bf50:	d9e3      	bls.n	801bf1a <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801bf52:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801bf54:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801bf58:	45c1      	cmp	r9, r8
 801bf5a:	bf28      	it	cs
 801bf5c:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801bf5e:	68e3      	ldr	r3, [r4, #12]
 801bf60:	1aa8      	subs	r0, r5, r2
 801bf62:	464a      	mov	r2, r9
 801bf64:	4651      	mov	r1, sl
 801bf66:	4418      	add	r0, r3
 801bf68:	f012 f8be 	bl	802e0e8 <memcpy>
            data += diff;
 801bf6c:	44ca      	add	sl, r9
            off += diff;
 801bf6e:	444d      	add	r5, r9
            size -= diff;
 801bf70:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801bf74:	68a2      	ldr	r2, [r4, #8]
 801bf76:	6863      	ldr	r3, [r4, #4]
 801bf78:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801bf7a:	4293      	cmp	r3, r2
 801bf7c:	bf38      	it	cc
 801bf7e:	4613      	movcc	r3, r2
 801bf80:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801bf82:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bf84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801bf86:	429a      	cmp	r2, r3
 801bf88:	d1d5      	bne.n	801bf36 <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bf8a:	465b      	mov	r3, fp
 801bf8c:	9a01      	ldr	r2, [sp, #4]
 801bf8e:	4621      	mov	r1, r4
 801bf90:	4638      	mov	r0, r7
 801bf92:	f7ff ff43 	bl	801be1c <lfs_bd_flush>
                if (err) {
 801bf96:	b940      	cbnz	r0, 801bfaa <lfs_bd_prog+0xda>
 801bf98:	e7cd      	b.n	801bf36 <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bf9a:	4b09      	ldr	r3, [pc, #36]	@ (801bfc0 <lfs_bd_prog+0xf0>)
 801bf9c:	4a05      	ldr	r2, [pc, #20]	@ (801bfb4 <lfs_bd_prog+0xe4>)
 801bf9e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801bfa2:	4805      	ldr	r0, [pc, #20]	@ (801bfb8 <lfs_bd_prog+0xe8>)
 801bfa4:	f00e f912 	bl	802a1cc <__assert_func>
    return 0;
 801bfa8:	2000      	movs	r0, #0
}
 801bfaa:	b003      	add	sp, #12
 801bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb0:	08039604 	.word	0x08039604
 801bfb4:	0803a204 	.word	0x0803a204
 801bfb8:	080394c4 	.word	0x080394c4
 801bfbc:	080395cc 	.word	0x080395cc
 801bfc0:	08039628 	.word	0x08039628

0801bfc4 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801bfc4:	b538      	push	{r3, r4, r5, lr}
 801bfc6:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801bfc8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bfcc:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bfce:	f7ff ff25 	bl	801be1c <lfs_bd_flush>
    if (err) {
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	b920      	cbnz	r0, 801bfe0 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801bfd6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801bfd8:	6903      	ldr	r3, [r0, #16]
 801bfda:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801bfdc:	1e03      	subs	r3, r0, #0
 801bfde:	dc01      	bgt.n	801bfe4 <lfs_bd_sync+0x20>
}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801bfe4:	4b02      	ldr	r3, [pc, #8]	@ (801bff0 <lfs_bd_sync+0x2c>)
 801bfe6:	4a03      	ldr	r2, [pc, #12]	@ (801bff4 <lfs_bd_sync+0x30>)
 801bfe8:	21dd      	movs	r1, #221	@ 0xdd
 801bfea:	4803      	ldr	r0, [pc, #12]	@ (801bff8 <lfs_bd_sync+0x34>)
 801bfec:	f00e f8ee 	bl	802a1cc <__assert_func>
 801bff0:	080394f4 	.word	0x080394f4
 801bff4:	0803a1a4 	.word	0x0803a1a4
 801bff8:	080394c4 	.word	0x080394c4

0801bffc <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801bffc:	b570      	push	{r4, r5, r6, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	4604      	mov	r4, r0
 801c002:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801c004:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801c006:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801c008:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801c00c:	42ab      	cmp	r3, r5
 801c00e:	bf28      	it	cs
 801c010:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801c012:	6812      	ldr	r2, [r2, #0]
 801c014:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801c018:	9303      	str	r3, [sp, #12]
 801c01a:	6866      	ldr	r6, [r4, #4]
 801c01c:	9602      	str	r6, [sp, #8]
 801c01e:	9101      	str	r1, [sp, #4]
 801c020:	9200      	str	r2, [sp, #0]
 801c022:	4602      	mov	r2, r0
 801c024:	2100      	movs	r1, #0
 801c026:	f7ff fec0 	bl	801bdaa <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801c02a:	b920      	cbnz	r0, 801c036 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801c02c:	68a3      	ldr	r3, [r4, #8]
 801c02e:	42ab      	cmp	r3, r5
 801c030:	d001      	beq.n	801c036 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801c032:	d202      	bcs.n	801c03a <lfs_dir_find_match+0x3e>
 801c034:	2001      	movs	r0, #1
}
 801c036:	b004      	add	sp, #16
 801c038:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801c03a:	2002      	movs	r0, #2
 801c03c:	e7fb      	b.n	801c036 <lfs_dir_find_match+0x3a>

0801c03e <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801c03e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c042:	b089      	sub	sp, #36	@ 0x24
 801c044:	9305      	str	r3, [sp, #20]
 801c046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801c048:	b953      	cbnz	r3, 801c060 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801c04a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c04e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c050:	6013      	str	r3, [r2, #0]
        *off = 0;
 801c052:	2300      	movs	r3, #0
 801c054:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c056:	6013      	str	r3, [r2, #0]
}
 801c058:	4618      	mov	r0, r3
 801c05a:	b009      	add	sp, #36	@ 0x24
 801c05c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c060:	4607      	mov	r7, r0
 801c062:	4688      	mov	r8, r1
 801c064:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801c066:	3b01      	subs	r3, #1
 801c068:	9307      	str	r3, [sp, #28]
 801c06a:	a907      	add	r1, sp, #28
 801c06c:	f7ff fa16 	bl	801b49c <lfs_ctz_index>
 801c070:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801c072:	a911      	add	r1, sp, #68	@ 0x44
 801c074:	4638      	mov	r0, r7
 801c076:	f7ff fa11 	bl	801b49c <lfs_ctz_index>
 801c07a:	4606      	mov	r6, r0
    while (current > target) {
 801c07c:	42b5      	cmp	r5, r6
 801c07e:	d91f      	bls.n	801c0c0 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801c080:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801c082:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801c086:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801c08a:	fa95 f3a5 	rbit	r3, r5
 801c08e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801c092:	429c      	cmp	r4, r3
 801c094:	bf28      	it	cs
 801c096:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801c098:	2304      	movs	r3, #4
 801c09a:	9303      	str	r3, [sp, #12]
 801c09c:	aa05      	add	r2, sp, #20
 801c09e:	9202      	str	r2, [sp, #8]
 801c0a0:	00a2      	lsls	r2, r4, #2
 801c0a2:	9201      	str	r2, [sp, #4]
 801c0a4:	9a05      	ldr	r2, [sp, #20]
 801c0a6:	9200      	str	r2, [sp, #0]
 801c0a8:	464a      	mov	r2, r9
 801c0aa:	4641      	mov	r1, r8
 801c0ac:	4638      	mov	r0, r7
 801c0ae:	f7ff fa13 	bl	801b4d8 <lfs_bd_read>
        if (err) {
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	d1cf      	bne.n	801c058 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801c0b8:	2301      	movs	r3, #1
 801c0ba:	40a3      	lsls	r3, r4
 801c0bc:	1aed      	subs	r5, r5, r3
 801c0be:	e7dd      	b.n	801c07c <lfs_ctz_find+0x3e>
    *block = head;
 801c0c0:	9b05      	ldr	r3, [sp, #20]
 801c0c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c0c4:	6013      	str	r3, [r2, #0]
    *off = pos;
 801c0c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c0c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c0ca:	6013      	str	r3, [r2, #0]
    return 0;
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	e7c3      	b.n	801c058 <lfs_ctz_find+0x1a>

0801c0d0 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801c0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c0d4:	b087      	sub	sp, #28
 801c0d6:	460c      	mov	r4, r1
 801c0d8:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801c0da:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801c0dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c0de:	4291      	cmp	r1, r2
 801c0e0:	d272      	bcs.n	801c1c8 <lfs_file_flushedread+0xf8>
 801c0e2:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801c0e4:	eba2 0901 	sub.w	r9, r2, r1
 801c0e8:	4599      	cmp	r9, r3
 801c0ea:	bf28      	it	cs
 801c0ec:	4699      	movcs	r9, r3
    nsize = size;
 801c0ee:	464e      	mov	r6, r9
    while (nsize > 0) {
 801c0f0:	e037      	b.n	801c162 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801c0f2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c0f6:	d041      	beq.n	801c17c <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801c0f8:	f06f 0301 	mvn.w	r3, #1
 801c0fc:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801c0fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c100:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801c102:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c108:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801c10a:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801c10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c110:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801c112:	1a9d      	subs	r5, r3, r2
 801c114:	42b5      	cmp	r5, r6
 801c116:	bf28      	it	cs
 801c118:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801c11a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c11c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801c120:	d041      	beq.n	801c1a6 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c122:	88a1      	ldrh	r1, [r4, #4]
 801c124:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801c126:	9505      	str	r5, [sp, #20]
 801c128:	9704      	str	r7, [sp, #16]
 801c12a:	9203      	str	r2, [sp, #12]
 801c12c:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c130:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801c134:	9102      	str	r1, [sp, #8]
 801c136:	4a27      	ldr	r2, [pc, #156]	@ (801c1d4 <lfs_file_flushedread+0x104>)
 801c138:	9201      	str	r2, [sp, #4]
 801c13a:	9300      	str	r3, [sp, #0]
 801c13c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801c140:	2200      	movs	r2, #0
 801c142:	f104 0108 	add.w	r1, r4, #8
 801c146:	4640      	mov	r0, r8
 801c148:	f7ff fd9e 	bl	801bc88 <lfs_dir_getread>
            if (err) {
 801c14c:	4603      	mov	r3, r0
 801c14e:	2800      	cmp	r0, #0
 801c150:	d13b      	bne.n	801c1ca <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801c152:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c154:	442b      	add	r3, r5
 801c156:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801c158:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c15a:	442b      	add	r3, r5
 801c15c:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801c15e:	442f      	add	r7, r5
        nsize -= diff;
 801c160:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801c162:	2e00      	cmp	r6, #0
 801c164:	d02e      	beq.n	801c1c4 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801c166:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c168:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c16c:	d0c1      	beq.n	801c0f2 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801c16e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801c170:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801c174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801c176:	4291      	cmp	r1, r2
 801c178:	d1c7      	bne.n	801c10a <lfs_file_flushedread+0x3a>
 801c17a:	e7ba      	b.n	801c0f2 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c17c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801c180:	9303      	str	r3, [sp, #12]
 801c182:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801c186:	9302      	str	r3, [sp, #8]
 801c188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c18a:	9301      	str	r3, [sp, #4]
 801c18c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c18e:	9300      	str	r3, [sp, #0]
 801c190:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c192:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c196:	2100      	movs	r1, #0
 801c198:	4640      	mov	r0, r8
 801c19a:	f7ff ff50 	bl	801c03e <lfs_ctz_find>
                if (err) {
 801c19e:	4603      	mov	r3, r0
 801c1a0:	2800      	cmp	r0, #0
 801c1a2:	d0ae      	beq.n	801c102 <lfs_file_flushedread+0x32>
 801c1a4:	e011      	b.n	801c1ca <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801c1a6:	9503      	str	r5, [sp, #12]
 801c1a8:	9702      	str	r7, [sp, #8]
 801c1aa:	9201      	str	r2, [sp, #4]
 801c1ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801c1ae:	9200      	str	r2, [sp, #0]
 801c1b0:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801c1b4:	2100      	movs	r1, #0
 801c1b6:	4640      	mov	r0, r8
 801c1b8:	f7ff f98e 	bl	801b4d8 <lfs_bd_read>
            if (err) {
 801c1bc:	4603      	mov	r3, r0
 801c1be:	2800      	cmp	r0, #0
 801c1c0:	d0c7      	beq.n	801c152 <lfs_file_flushedread+0x82>
 801c1c2:	e002      	b.n	801c1ca <lfs_file_flushedread+0xfa>
    return size;
 801c1c4:	464b      	mov	r3, r9
 801c1c6:	e000      	b.n	801c1ca <lfs_file_flushedread+0xfa>
        return 0;
 801c1c8:	2300      	movs	r3, #0
}
 801c1ca:	4618      	mov	r0, r3
 801c1cc:	b007      	add	sp, #28
 801c1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1d2:	bf00      	nop
 801c1d4:	fff7fc00 	.word	0xfff7fc00

0801c1d8 <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1dc:	b089      	sub	sp, #36	@ 0x24
 801c1de:	4683      	mov	fp, r0
 801c1e0:	468a      	mov	sl, r1
 801c1e2:	9205      	str	r2, [sp, #20]
 801c1e4:	4698      	mov	r8, r3
 801c1e6:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801c1ea:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c1ec:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c1ee:	2400      	movs	r4, #0
 801c1f0:	e006      	b.n	801c200 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801c1f2:	462a      	mov	r2, r5
 801c1f4:	a906      	add	r1, sp, #24
 801c1f6:	6838      	ldr	r0, [r7, #0]
 801c1f8:	f003 fd82 	bl	801fd00 <lfs_crc>
 801c1fc:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801c1fe:	442c      	add	r4, r5
 801c200:	42b4      	cmp	r4, r6
 801c202:	d216      	bcs.n	801c232 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801c204:	1b35      	subs	r5, r6, r4
 801c206:	2d08      	cmp	r5, #8
 801c208:	bf28      	it	cs
 801c20a:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801c20c:	9503      	str	r5, [sp, #12]
 801c20e:	ab06      	add	r3, sp, #24
 801c210:	9302      	str	r3, [sp, #8]
 801c212:	eb04 0309 	add.w	r3, r4, r9
 801c216:	9301      	str	r3, [sp, #4]
 801c218:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c21a:	9300      	str	r3, [sp, #0]
 801c21c:	eba8 0304 	sub.w	r3, r8, r4
 801c220:	9a05      	ldr	r2, [sp, #20]
 801c222:	4651      	mov	r1, sl
 801c224:	4658      	mov	r0, fp
 801c226:	f7ff f957 	bl	801b4d8 <lfs_bd_read>
        if (err) {
 801c22a:	4603      	mov	r3, r0
 801c22c:	2800      	cmp	r0, #0
 801c22e:	d0e0      	beq.n	801c1f2 <lfs_bd_crc+0x1a>
 801c230:	e000      	b.n	801c234 <lfs_bd_crc+0x5c>
    return 0;
 801c232:	2300      	movs	r3, #0
}
 801c234:	4618      	mov	r0, r3
 801c236:	b009      	add	sp, #36	@ 0x24
 801c238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c23c <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c240:	b097      	sub	sp, #92	@ 0x5c
 801c242:	4605      	mov	r5, r0
 801c244:	460e      	mov	r6, r1
 801c246:	4617      	mov	r7, r2
 801c248:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801c24a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801c24c:	b13b      	cbz	r3, 801c25e <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801c24e:	6812      	ldr	r2, [r2, #0]
 801c250:	4293      	cmp	r3, r2
 801c252:	f240 825a 	bls.w	801c70a <lfs_dir_fetchmatch+0x4ce>
 801c256:	687a      	ldr	r2, [r7, #4]
 801c258:	4293      	cmp	r3, r2
 801c25a:	f240 8259 	bls.w	801c710 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801c25e:	2400      	movs	r4, #0
 801c260:	9412      	str	r4, [sp, #72]	@ 0x48
 801c262:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801c264:	46a0      	mov	r8, r4
 801c266:	e010      	b.n	801c28a <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801c268:	f118 0301 	adds.w	r3, r8, #1
 801c26c:	f003 0301 	and.w	r3, r3, #1
 801c270:	bf48      	it	mi
 801c272:	425b      	negmi	r3, r3
 801c274:	a916      	add	r1, sp, #88	@ 0x58
 801c276:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c27a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801c27e:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801c280:	2a00      	cmp	r2, #0
 801c282:	dd00      	ble.n	801c286 <lfs_dir_fetchmatch+0x4a>
            r = i;
 801c284:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801c286:	f108 0801 	add.w	r8, r8, #1
 801c28a:	f1b8 0f01 	cmp.w	r8, #1
 801c28e:	dc1d      	bgt.n	801c2cc <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801c290:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801c294:	ab12      	add	r3, sp, #72	@ 0x48
 801c296:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801c29a:	2304      	movs	r3, #4
 801c29c:	9303      	str	r3, [sp, #12]
 801c29e:	9202      	str	r2, [sp, #8]
 801c2a0:	2100      	movs	r1, #0
 801c2a2:	9101      	str	r1, [sp, #4]
 801c2a4:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801c2a8:	9200      	str	r2, [sp, #0]
 801c2aa:	462a      	mov	r2, r5
 801c2ac:	4628      	mov	r0, r5
 801c2ae:	f7ff f913 	bl	801b4d8 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801c2b2:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801c2b6:	eb0d 0903 	add.w	r9, sp, r3
 801c2ba:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801c2be:	4683      	mov	fp, r0
 801c2c0:	2800      	cmp	r0, #0
 801c2c2:	d0d1      	beq.n	801c268 <lfs_dir_fetchmatch+0x2c>
 801c2c4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c2c8:	d0dd      	beq.n	801c286 <lfs_dir_fetchmatch+0x4a>
 801c2ca:	e21a      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801c2cc:	2c00      	cmp	r4, #0
 801c2ce:	f004 0301 	and.w	r3, r4, #1
 801c2d2:	bfb8      	it	lt
 801c2d4:	425b      	neglt	r3, r3
 801c2d6:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801c2da:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801c2dc:	f114 0c01 	adds.w	ip, r4, #1
 801c2e0:	f00c 0c01 	and.w	ip, ip, #1
 801c2e4:	bf48      	it	mi
 801c2e6:	f1cc 0c00 	rsbmi	ip, ip, #0
 801c2ea:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801c2ee:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801c2f0:	aa16      	add	r2, sp, #88	@ 0x58
 801c2f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c2f6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c2fa:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801c2fc:	2400      	movs	r4, #0
 801c2fe:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801c300:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801c304:	f8cd c01c 	str.w	ip, [sp, #28]
 801c308:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801c30a:	f1b9 0f01 	cmp.w	r9, #1
 801c30e:	f300 81eb 	bgt.w	801c6e8 <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c312:	4a90      	ldr	r2, [pc, #576]	@ (801c554 <lfs_dir_fetchmatch+0x318>)
 801c314:	ab0e      	add	r3, sp, #56	@ 0x38
 801c316:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c31a:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801c31e:	2204      	movs	r2, #4
 801c320:	f106 0108 	add.w	r1, r6, #8
 801c324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c328:	f003 fcea 	bl	801fd00 <lfs_crc>
 801c32c:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801c32e:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801c332:	2300      	movs	r3, #0
 801c334:	461c      	mov	r4, r3
 801c336:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801c338:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801c33a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801c33e:	461f      	mov	r7, r3
 801c340:	e110      	b.n	801c564 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c342:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c346:	d101      	bne.n	801c34c <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801c348:	2300      	movs	r3, #0
 801c34a:	e01e      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
                return err;
 801c34c:	4683      	mov	fp, r0
 801c34e:	e1d8      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801c350:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801c354:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801c358:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801c35c:	bf14      	ite	ne
 801c35e:	2300      	movne	r3, #0
 801c360:	2301      	moveq	r3, #1
                break;
 801c362:	e012      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801c364:	2204      	movs	r2, #4
 801c366:	9203      	str	r2, [sp, #12]
 801c368:	aa0d      	add	r2, sp, #52	@ 0x34
 801c36a:	9202      	str	r2, [sp, #8]
 801c36c:	1d22      	adds	r2, r4, #4
 801c36e:	9201      	str	r2, [sp, #4]
 801c370:	6832      	ldr	r2, [r6, #0]
 801c372:	9200      	str	r2, [sp, #0]
 801c374:	462a      	mov	r2, r5
 801c376:	2100      	movs	r1, #0
 801c378:	4628      	mov	r0, r5
 801c37a:	f7ff f8ad 	bl	801b4d8 <lfs_bd_read>
                if (err) {
 801c37e:	bb80      	cbnz	r0, 801c3e2 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801c380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c384:	429a      	cmp	r2, r3
 801c386:	d031      	beq.n	801c3ec <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801c388:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801c38a:	68f2      	ldr	r2, [r6, #12]
 801c38c:	2a00      	cmp	r2, #0
 801c38e:	f000 8165 	beq.w	801c65c <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801c392:	2100      	movs	r1, #0
 801c394:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801c396:	b153      	cbz	r3, 801c3ae <lfs_dir_fetchmatch+0x172>
 801c398:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801c39a:	6a01      	ldr	r1, [r0, #32]
 801c39c:	fbb2 f3f1 	udiv	r3, r2, r1
 801c3a0:	fb01 2313 	mls	r3, r1, r3, r2
 801c3a4:	b91b      	cbnz	r3, 801c3ae <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801c3a6:	9b08      	ldr	r3, [sp, #32]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	f040 8165 	bne.w	801c678 <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801c3ae:	4631      	mov	r1, r6
 801c3b0:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801c3b4:	f7fe ff00 	bl	801b1b8 <lfs_gstate_hasmovehere>
 801c3b8:	2800      	cmp	r0, #0
 801c3ba:	f000 817d 	beq.w	801c6b8 <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c3be:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801c3c0:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c3c4:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801c3c8:	429a      	cmp	r2, r3
 801c3ca:	f000 8173 	beq.w	801c6b4 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801c3ce:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801c3d2:	f000 8171 	beq.w	801c6b8 <lfs_dir_fetchmatch+0x47c>
 801c3d6:	429a      	cmp	r2, r3
 801c3d8:	f240 816e 	bls.w	801c6b8 <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801c3dc:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801c3e0:	e16a      	b.n	801c6b8 <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801c3e2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c3e6:	d0cf      	beq.n	801c388 <lfs_dir_fetchmatch+0x14c>
                    return err;
 801c3e8:	4683      	mov	fp, r0
 801c3ea:	e18a      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801c3ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3ee:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801c3f2:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801c3f6:	2204      	movs	r2, #4
 801c3f8:	a90b      	add	r1, sp, #44	@ 0x2c
 801c3fa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c3fc:	f003 fc80 	bl	801fd00 <lfs_crc>
 801c400:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801c402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c404:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c408:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c40c:	bf08      	it	eq
 801c40e:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801c410:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c414:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801c416:	4423      	add	r3, r4
 801c418:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801c41a:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801c41e:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801c420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c422:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801c424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c426:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801c428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c42a:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801c42c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c430:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801c432:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c436:	e095      	b.n	801c564 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c438:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c43c:	d101      	bne.n	801c442 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801c43e:	2300      	movs	r3, #0
 801c440:	e7a3      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
                return err;
 801c442:	4683      	mov	fp, r0
 801c444:	e15d      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801c446:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c44a:	d021      	beq.n	801c490 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801c44c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801c450:	d046      	beq.n	801c4e0 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801c452:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801c456:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801c45a:	429a      	cmp	r2, r3
 801c45c:	f040 80e3 	bne.w	801c626 <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c460:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c464:	2208      	movs	r2, #8
 801c466:	9203      	str	r2, [sp, #12]
 801c468:	aa10      	add	r2, sp, #64	@ 0x40
 801c46a:	9202      	str	r2, [sp, #8]
 801c46c:	f8cd 8004 	str.w	r8, [sp, #4]
 801c470:	6832      	ldr	r2, [r6, #0]
 801c472:	9200      	str	r2, [sp, #0]
 801c474:	462a      	mov	r2, r5
 801c476:	2100      	movs	r1, #0
 801c478:	4628      	mov	r0, r5
 801c47a:	f7ff f82d 	bl	801b4d8 <lfs_bd_read>
                if (err) {
 801c47e:	2800      	cmp	r0, #0
 801c480:	d04a      	beq.n	801c518 <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801c482:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c486:	f000 80e7 	beq.w	801c658 <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801c48a:	2301      	movs	r3, #1
 801c48c:	9308      	str	r3, [sp, #32]
 801c48e:	e0ca      	b.n	801c626 <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801c490:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801c492:	fa17 f280 	uxtah	r2, r7, r0
 801c496:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801c498:	9a06      	ldr	r2, [sp, #24]
 801c49a:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c49c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c4a0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c4a4:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c4a8:	f022 0203 	bic.w	r2, r2, #3
 801c4ac:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c4b0:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801c4b4:	4293      	cmp	r3, r2
 801c4b6:	d00f      	beq.n	801c4d8 <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801c4b8:	9a06      	ldr	r2, [sp, #24]
 801c4ba:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c4be:	f000 80b2 	beq.w	801c626 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801c4c2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c4c6:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801c4ca:	429a      	cmp	r2, r3
 801c4cc:	f0c0 80ab 	bcc.w	801c626 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c4d0:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801c4d4:	9306      	str	r3, [sp, #24]
 801c4d6:	e0a6      	b.n	801c626 <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801c4d8:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801c4dc:	9306      	str	r3, [sp, #24]
 801c4de:	e0a2      	b.n	801c626 <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801c4e0:	f000 0301 	and.w	r3, r0, #1
 801c4e4:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c4e6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c4ea:	2208      	movs	r2, #8
 801c4ec:	9203      	str	r2, [sp, #12]
 801c4ee:	aa0e      	add	r2, sp, #56	@ 0x38
 801c4f0:	9202      	str	r2, [sp, #8]
 801c4f2:	f8cd 8004 	str.w	r8, [sp, #4]
 801c4f6:	6832      	ldr	r2, [r6, #0]
 801c4f8:	9200      	str	r2, [sp, #0]
 801c4fa:	462a      	mov	r2, r5
 801c4fc:	2100      	movs	r1, #0
 801c4fe:	4628      	mov	r0, r5
 801c500:	f7fe ffea 	bl	801b4d8 <lfs_bd_read>
                if (err) {
 801c504:	2800      	cmp	r0, #0
 801c506:	f000 808e 	beq.w	801c626 <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801c50a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c50e:	d101      	bne.n	801c514 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801c510:	2300      	movs	r3, #0
 801c512:	e73a      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
                    return err;
 801c514:	4683      	mov	fp, r0
 801c516:	e0f4      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801c518:	2301      	movs	r3, #1
 801c51a:	9308      	str	r3, [sp, #32]
 801c51c:	e083      	b.n	801c626 <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801c51e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c522:	d101      	bne.n	801c528 <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801c524:	2300      	movs	r3, #0
 801c526:	e730      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
                    return res;
 801c528:	4683      	mov	fp, r0
 801c52a:	e0ea      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801c52c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c52e:	9b06      	ldr	r3, [sp, #24]
 801c530:	469c      	mov	ip, r3
 801c532:	ea82 0103 	eor.w	r1, r2, r3
 801c536:	4b08      	ldr	r3, [pc, #32]	@ (801c558 <lfs_dir_fetchmatch+0x31c>)
 801c538:	400b      	ands	r3, r1
 801c53a:	b17b      	cbz	r3, 801c55c <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801c53c:	2802      	cmp	r0, #2
 801c53e:	d110      	bne.n	801c562 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801c540:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801c544:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801c548:	459c      	cmp	ip, r3
 801c54a:	d30a      	bcc.n	801c562 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801c54c:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801c550:	9306      	str	r3, [sp, #24]
 801c552:	e006      	b.n	801c562 <lfs_dir_fetchmatch+0x326>
 801c554:	08035fb4 	.word	0x08035fb4
 801c558:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801c55c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c560:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801c562:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c564:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c568:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c56c:	bf14      	ite	ne
 801c56e:	4643      	movne	r3, r8
 801c570:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801c574:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c578:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801c57a:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801c57c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801c580:	2204      	movs	r2, #4
 801c582:	9203      	str	r2, [sp, #12]
 801c584:	aa0c      	add	r2, sp, #48	@ 0x30
 801c586:	9202      	str	r2, [sp, #8]
 801c588:	9401      	str	r4, [sp, #4]
 801c58a:	6832      	ldr	r2, [r6, #0]
 801c58c:	9200      	str	r2, [sp, #0]
 801c58e:	462a      	mov	r2, r5
 801c590:	2100      	movs	r1, #0
 801c592:	4628      	mov	r0, r5
 801c594:	f7fe ffa0 	bl	801b4d8 <lfs_bd_read>
            if (err) {
 801c598:	2800      	cmp	r0, #0
 801c59a:	f47f aed2 	bne.w	801c342 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801c59e:	2204      	movs	r2, #4
 801c5a0:	a90c      	add	r1, sp, #48	@ 0x30
 801c5a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c5a4:	f003 fbac 	bl	801fd00 <lfs_crc>
 801c5a8:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801c5aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801c5ac:	ba1b      	rev	r3, r3
 801c5ae:	ea88 0a03 	eor.w	sl, r8, r3
 801c5b2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801c5b6:	f1ba 0f00 	cmp.w	sl, #0
 801c5ba:	f6ff aec9 	blt.w	801c350 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c5be:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c5c6:	bf14      	ite	ne
 801c5c8:	4652      	movne	r2, sl
 801c5ca:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801c5ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c5d2:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801c5d4:	4421      	add	r1, r4
 801c5d6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c5da:	4299      	cmp	r1, r3
 801c5dc:	d83a      	bhi.n	801c654 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801c5de:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801c5e2:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801c5e6:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801c5ea:	f43f aebb 	beq.w	801c364 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801c5ee:	f104 0804 	add.w	r8, r4, #4
 801c5f2:	a90b      	add	r1, sp, #44	@ 0x2c
 801c5f4:	9103      	str	r1, [sp, #12]
 801c5f6:	9202      	str	r2, [sp, #8]
 801c5f8:	f8cd 8004 	str.w	r8, [sp, #4]
 801c5fc:	6832      	ldr	r2, [r6, #0]
 801c5fe:	9200      	str	r2, [sp, #0]
 801c600:	462a      	mov	r2, r5
 801c602:	2100      	movs	r1, #0
 801c604:	4628      	mov	r0, r5
 801c606:	f7ff fde7 	bl	801c1d8 <lfs_bd_crc>
            if (err) {
 801c60a:	2800      	cmp	r0, #0
 801c60c:	f47f af14 	bne.w	801c438 <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801c612:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c614:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801c618:	f47f af15 	bne.w	801c446 <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801c61c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801c620:	429f      	cmp	r7, r3
 801c622:	d800      	bhi.n	801c626 <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801c624:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801c626:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c628:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c62a:	404b      	eors	r3, r1
 801c62c:	9a05      	ldr	r2, [sp, #20]
 801c62e:	4213      	tst	r3, r2
 801c630:	d197      	bne.n	801c562 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801c632:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801c634:	9314      	str	r3, [sp, #80]	@ 0x50
 801c636:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801c63a:	aa14      	add	r2, sp, #80	@ 0x50
 801c63c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801c63e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c640:	4798      	blx	r3
                if (res < 0) {
 801c642:	2800      	cmp	r0, #0
 801c644:	f6ff af6b 	blt.w	801c51e <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801c648:	2800      	cmp	r0, #0
 801c64a:	f47f af6f 	bne.w	801c52c <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801c64e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c650:	9306      	str	r3, [sp, #24]
 801c652:	e786      	b.n	801c562 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801c654:	2300      	movs	r3, #0
 801c656:	e698      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
 801c658:	2300      	movs	r3, #0
 801c65a:	e696      	b.n	801c38a <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801c65c:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801c65e:	6872      	ldr	r2, [r6, #4]
 801c660:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801c662:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801c664:	aa16      	add	r2, sp, #88	@ 0x58
 801c666:	9b07      	ldr	r3, [sp, #28]
 801c668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c66c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c670:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801c672:	f109 0901 	add.w	r9, r9, #1
 801c676:	e648      	b.n	801c30a <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801c678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c67c:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c67e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801c680:	a90d      	add	r1, sp, #52	@ 0x34
 801c682:	9103      	str	r1, [sp, #12]
 801c684:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c686:	9102      	str	r1, [sp, #8]
 801c688:	9201      	str	r2, [sp, #4]
 801c68a:	6832      	ldr	r2, [r6, #0]
 801c68c:	9200      	str	r2, [sp, #0]
 801c68e:	462a      	mov	r2, r5
 801c690:	2100      	movs	r1, #0
 801c692:	4628      	mov	r0, r5
 801c694:	f7ff fda0 	bl	801c1d8 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801c698:	b120      	cbz	r0, 801c6a4 <lfs_dir_fetchmatch+0x468>
 801c69a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c69e:	d001      	beq.n	801c6a4 <lfs_dir_fetchmatch+0x468>
                    return err;
 801c6a0:	4683      	mov	fp, r0
 801c6a2:	e02e      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801c6a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c6a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	bf14      	ite	ne
 801c6ac:	2300      	movne	r3, #0
 801c6ae:	2301      	moveq	r3, #1
 801c6b0:	75b3      	strb	r3, [r6, #22]
 801c6b2:	e67c      	b.n	801c3ae <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801c6b4:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801c6b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c6ba:	b13b      	cbz	r3, 801c6cc <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801c6bc:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801c6c0:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801c6c2:	4293      	cmp	r3, r2
 801c6c4:	bf28      	it	cs
 801c6c6:	4613      	movcs	r3, r2
 801c6c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c6ca:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801c6cc:	f1bb 0f00 	cmp.w	fp, #0
 801c6d0:	da17      	bge.n	801c702 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801c6d2:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801c6d6:	8ab2      	ldrh	r2, [r6, #20]
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	d902      	bls.n	801c6e2 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801c6dc:	f06f 0b01 	mvn.w	fp, #1
 801c6e0:	e00f      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801c6e2:	f04f 0b00 	mov.w	fp, #0
 801c6e6:	e00c      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801c6e8:	4b0b      	ldr	r3, [pc, #44]	@ (801c718 <lfs_dir_fetchmatch+0x4dc>)
 801c6ea:	9301      	str	r3, [sp, #4]
 801c6ec:	6873      	ldr	r3, [r6, #4]
 801c6ee:	9300      	str	r3, [sp, #0]
 801c6f0:	6833      	ldr	r3, [r6, #0]
 801c6f2:	f240 5259 	movw	r2, #1369	@ 0x559
 801c6f6:	4909      	ldr	r1, [pc, #36]	@ (801c71c <lfs_dir_fetchmatch+0x4e0>)
 801c6f8:	4809      	ldr	r0, [pc, #36]	@ (801c720 <lfs_dir_fetchmatch+0x4e4>)
 801c6fa:	f00d fd9b 	bl	802a234 <printf>
    return LFS_ERR_CORRUPT;
 801c6fe:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801c702:	4658      	mov	r0, fp
 801c704:	b017      	add	sp, #92	@ 0x5c
 801c706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801c70a:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c70e:	e7f8      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
 801c710:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c714:	e7f5      	b.n	801c702 <lfs_dir_fetchmatch+0x4c6>
 801c716:	bf00      	nop
 801c718:	08036fac 	.word	0x08036fac
 801c71c:	080394c4 	.word	0x080394c4
 801c720:	0803964c 	.word	0x0803964c

0801c724 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801c724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c728:	b08a      	sub	sp, #40	@ 0x28
 801c72a:	4681      	mov	r9, r0
 801c72c:	4688      	mov	r8, r1
 801c72e:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801c730:	2300      	movs	r3, #0
 801c732:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801c734:	2501      	movs	r5, #1
 801c736:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c738:	4a29      	ldr	r2, [pc, #164]	@ (801c7e0 <lfs_fs_parent+0xbc>)
 801c73a:	ab05      	add	r3, sp, #20
 801c73c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c740:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c744:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801c746:	e03a      	b.n	801c7be <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801c748:	4b26      	ldr	r3, [pc, #152]	@ (801c7e4 <lfs_fs_parent+0xc0>)
 801c74a:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801c74e:	4926      	ldr	r1, [pc, #152]	@ (801c7e8 <lfs_fs_parent+0xc4>)
 801c750:	4826      	ldr	r0, [pc, #152]	@ (801c7ec <lfs_fs_parent+0xc8>)
 801c752:	f00d fd6f 	bl	802a234 <printf>
            return LFS_ERR_CORRUPT;
 801c756:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c75a:	e03c      	b.n	801c7d6 <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801c75c:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801c75e:	69e3      	ldr	r3, [r4, #28]
 801c760:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801c762:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c766:	2500      	movs	r5, #0
 801c768:	e00d      	b.n	801c786 <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c76a:	2301      	movs	r3, #1
 801c76c:	e000      	b.n	801c770 <lfs_fs_parent+0x4c>
 801c76e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801c770:	bb7b      	cbnz	r3, 801c7d2 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801c772:	f104 0618 	add.w	r6, r4, #24
 801c776:	a905      	add	r1, sp, #20
 801c778:	4630      	mov	r0, r6
 801c77a:	f7fe fce7 	bl	801b14c <lfs_pair_issync>
 801c77e:	2800      	cmp	r0, #0
 801c780:	d1e2      	bne.n	801c748 <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801c782:	4555      	cmp	r5, sl
 801c784:	d0ea      	beq.n	801c75c <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801c786:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c788:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801c78c:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c790:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801c792:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c796:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801c798:	ab07      	add	r3, sp, #28
 801c79a:	9303      	str	r3, [sp, #12]
 801c79c:	4b14      	ldr	r3, [pc, #80]	@ (801c7f0 <lfs_fs_parent+0xcc>)
 801c79e:	9302      	str	r3, [sp, #8]
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	9301      	str	r3, [sp, #4]
 801c7a4:	4b13      	ldr	r3, [pc, #76]	@ (801c7f4 <lfs_fs_parent+0xd0>)
 801c7a6:	9300      	str	r3, [sp, #0]
 801c7a8:	4b13      	ldr	r3, [pc, #76]	@ (801c7f8 <lfs_fs_parent+0xd4>)
 801c7aa:	4632      	mov	r2, r6
 801c7ac:	4621      	mov	r1, r4
 801c7ae:	4648      	mov	r0, r9
 801c7b0:	f7ff fd44 	bl	801c23c <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	b110      	cbz	r0, 801c7be <lfs_fs_parent+0x9a>
 801c7b8:	f110 0f02 	cmn.w	r0, #2
 801c7bc:	d10b      	bne.n	801c7d6 <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c7be:	69a7      	ldr	r7, [r4, #24]
 801c7c0:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c7c4:	d0d3      	beq.n	801c76e <lfs_fs_parent+0x4a>
 801c7c6:	69e3      	ldr	r3, [r4, #28]
 801c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c7cc:	d0cd      	beq.n	801c76a <lfs_fs_parent+0x46>
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	e7ce      	b.n	801c770 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801c7d2:	f06f 0301 	mvn.w	r3, #1
}
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	b00a      	add	sp, #40	@ 0x28
 801c7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7de:	bf00      	nop
 801c7e0:	08035fb4 	.word	0x08035fb4
 801c7e4:	08036fac 	.word	0x08036fac
 801c7e8:	080394c4 	.word	0x080394c4
 801c7ec:	08039684 	.word	0x08039684
 801c7f0:	0801b90d 	.word	0x0801b90d
 801c7f4:	20000008 	.word	0x20000008
 801c7f8:	7ff003ff 	.word	0x7ff003ff

0801c7fc <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801c7fc:	b500      	push	{lr}
 801c7fe:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801c800:	2300      	movs	r3, #0
 801c802:	9303      	str	r3, [sp, #12]
 801c804:	9302      	str	r3, [sp, #8]
 801c806:	9301      	str	r3, [sp, #4]
 801c808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c80c:	9300      	str	r3, [sp, #0]
 801c80e:	f7ff fd15 	bl	801c23c <lfs_dir_fetchmatch>
}
 801c812:	b005      	add	sp, #20
 801c814:	f85d fb04 	ldr.w	pc, [sp], #4

0801c818 <lfs_fs_traverse_>:
        bool includeorphans) {
 801c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c81c:	b093      	sub	sp, #76	@ 0x4c
 801c81e:	4606      	mov	r6, r0
 801c820:	460f      	mov	r7, r1
 801c822:	4690      	mov	r8, r2
 801c824:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801c826:	2220      	movs	r2, #32
 801c828:	2100      	movs	r1, #0
 801c82a:	a80a      	add	r0, sp, #40	@ 0x28
 801c82c:	f010 fa20 	bl	802cc70 <memset>
 801c830:	2501      	movs	r5, #1
 801c832:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c834:	4a62      	ldr	r2, [pc, #392]	@ (801c9c0 <lfs_fs_traverse_+0x1a8>)
 801c836:	ab08      	add	r3, sp, #32
 801c838:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c83c:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c840:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c842:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c844:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801c848:	f000 8081 	beq.w	801c94e <lfs_fs_traverse_+0x136>
 801c84c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c84e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c852:	d07a      	beq.n	801c94a <lfs_fs_traverse_+0x132>
 801c854:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801c856:	2b00      	cmp	r3, #0
 801c858:	d17b      	bne.n	801c952 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801c85a:	a908      	add	r1, sp, #32
 801c85c:	a810      	add	r0, sp, #64	@ 0x40
 801c85e:	f7fe fc75 	bl	801b14c <lfs_pair_issync>
 801c862:	b988      	cbnz	r0, 801c888 <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801c864:	4555      	cmp	r5, sl
 801c866:	d019      	beq.n	801c89c <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801c868:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801c86a:	2400      	movs	r4, #0
 801c86c:	2c01      	cmp	r4, #1
 801c86e:	dc1c      	bgt.n	801c8aa <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801c870:	1da3      	adds	r3, r4, #6
 801c872:	aa12      	add	r2, sp, #72	@ 0x48
 801c874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c878:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801c87c:	4640      	mov	r0, r8
 801c87e:	47b8      	blx	r7
            if (err) {
 801c880:	4603      	mov	r3, r0
 801c882:	b9f8      	cbnz	r0, 801c8c4 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801c884:	3401      	adds	r4, #1
 801c886:	e7f1      	b.n	801c86c <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801c888:	4b4e      	ldr	r3, [pc, #312]	@ (801c9c4 <lfs_fs_traverse_+0x1ac>)
 801c88a:	f241 2222 	movw	r2, #4642	@ 0x1222
 801c88e:	494e      	ldr	r1, [pc, #312]	@ (801c9c8 <lfs_fs_traverse_+0x1b0>)
 801c890:	484e      	ldr	r0, [pc, #312]	@ (801c9cc <lfs_fs_traverse_+0x1b4>)
 801c892:	f00d fccf 	bl	802a234 <printf>
            return LFS_ERR_CORRUPT;
 801c896:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c89a:	e013      	b.n	801c8c4 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801c89c:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801c89e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c8a0:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801c8a2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c8a6:	2500      	movs	r5, #0
 801c8a8:	e7de      	b.n	801c868 <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801c8aa:	aa10      	add	r2, sp, #64	@ 0x40
 801c8ac:	a90a      	add	r1, sp, #40	@ 0x28
 801c8ae:	4630      	mov	r0, r6
 801c8b0:	f7ff ffa4 	bl	801c7fc <lfs_dir_fetch>
        if (err) {
 801c8b4:	9005      	str	r0, [sp, #20]
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	d17f      	bne.n	801c9ba <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c8ba:	2400      	movs	r4, #0
 801c8bc:	e016      	b.n	801c8ec <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801c8be:	f113 0f02 	cmn.w	r3, #2
 801c8c2:	d011      	beq.n	801c8e8 <lfs_fs_traverse_+0xd0>
}
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	b013      	add	sp, #76	@ 0x4c
 801c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801c8cc:	f8cd 8008 	str.w	r8, [sp, #8]
 801c8d0:	9701      	str	r7, [sp, #4]
 801c8d2:	9b07      	ldr	r3, [sp, #28]
 801c8d4:	9300      	str	r3, [sp, #0]
 801c8d6:	9b06      	ldr	r3, [sp, #24]
 801c8d8:	4632      	mov	r2, r6
 801c8da:	2100      	movs	r1, #0
 801c8dc:	4630      	mov	r0, r6
 801c8de:	f7fe ffc9 	bl	801b874 <lfs_ctz_traverse>
                if (err) {
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	d1ed      	bne.n	801c8c4 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c8e8:	3401      	adds	r4, #1
 801c8ea:	b2a4      	uxth	r4, r4
 801c8ec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801c8f0:	42a3      	cmp	r3, r4
 801c8f2:	d9a6      	bls.n	801c842 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801c8f4:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801c8f6:	aa06      	add	r2, sp, #24
 801c8f8:	9200      	str	r2, [sp, #0]
 801c8fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801c8fe:	f043 0308 	orr.w	r3, r3, #8
 801c902:	4a33      	ldr	r2, [pc, #204]	@ (801c9d0 <lfs_fs_traverse_+0x1b8>)
 801c904:	a90a      	add	r1, sp, #40	@ 0x28
 801c906:	4630      	mov	r0, r6
 801c908:	f7fe ff8a 	bl	801b820 <lfs_dir_get>
            if (tag < 0) {
 801c90c:	1e03      	subs	r3, r0, #0
 801c90e:	dbd6      	blt.n	801c8be <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801c910:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801c914:	f240 2202 	movw	r2, #514	@ 0x202
 801c918:	4293      	cmp	r3, r2
 801c91a:	d0d7      	beq.n	801c8cc <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801c91c:	f1b9 0f00 	cmp.w	r9, #0
 801c920:	d0e2      	beq.n	801c8e8 <lfs_fs_traverse_+0xd0>
 801c922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c926:	d1df      	bne.n	801c8e8 <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801c928:	f8dd b014 	ldr.w	fp, [sp, #20]
 801c92c:	e001      	b.n	801c932 <lfs_fs_traverse_+0x11a>
 801c92e:	f10b 0b01 	add.w	fp, fp, #1
 801c932:	f1bb 0f01 	cmp.w	fp, #1
 801c936:	dcd7      	bgt.n	801c8e8 <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801c938:	ab06      	add	r3, sp, #24
 801c93a:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801c93e:	4640      	mov	r0, r8
 801c940:	47b8      	blx	r7
                    if (err) {
 801c942:	4603      	mov	r3, r0
 801c944:	2800      	cmp	r0, #0
 801c946:	d0f2      	beq.n	801c92e <lfs_fs_traverse_+0x116>
 801c948:	e7bc      	b.n	801c8c4 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c94a:	2301      	movs	r3, #1
 801c94c:	e783      	b.n	801c856 <lfs_fs_traverse_+0x3e>
 801c94e:	2301      	movs	r3, #1
 801c950:	e781      	b.n	801c856 <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c952:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801c954:	e00f      	b.n	801c976 <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c956:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c958:	f8cd 8008 	str.w	r8, [sp, #8]
 801c95c:	9701      	str	r7, [sp, #4]
 801c95e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c960:	9200      	str	r2, [sp, #0]
 801c962:	4632      	mov	r2, r6
 801c964:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c968:	4630      	mov	r0, r6
 801c96a:	f7fe ff83 	bl	801b874 <lfs_ctz_traverse>
            if (err) {
 801c96e:	4603      	mov	r3, r0
 801c970:	b158      	cbz	r0, 801c98a <lfs_fs_traverse_+0x172>
 801c972:	e7a7      	b.n	801c8c4 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c974:	6824      	ldr	r4, [r4, #0]
 801c976:	b1f4      	cbz	r4, 801c9b6 <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801c978:	79a3      	ldrb	r3, [r4, #6]
 801c97a:	2b01      	cmp	r3, #1
 801c97c:	d1fa      	bne.n	801c974 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801c97e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c980:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801c984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c988:	d0e5      	beq.n	801c956 <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801c98a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c98c:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801c990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c994:	d1ee      	bne.n	801c974 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c996:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c998:	f8cd 8008 	str.w	r8, [sp, #8]
 801c99c:	9701      	str	r7, [sp, #4]
 801c99e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c9a0:	9200      	str	r2, [sp, #0]
 801c9a2:	4632      	mov	r2, r6
 801c9a4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c9a8:	4630      	mov	r0, r6
 801c9aa:	f7fe ff63 	bl	801b874 <lfs_ctz_traverse>
            if (err) {
 801c9ae:	4603      	mov	r3, r0
 801c9b0:	2800      	cmp	r0, #0
 801c9b2:	d0df      	beq.n	801c974 <lfs_fs_traverse_+0x15c>
 801c9b4:	e786      	b.n	801c8c4 <lfs_fs_traverse_+0xac>
    return 0;
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	e784      	b.n	801c8c4 <lfs_fs_traverse_+0xac>
            return err;
 801c9ba:	9b05      	ldr	r3, [sp, #20]
 801c9bc:	e782      	b.n	801c8c4 <lfs_fs_traverse_+0xac>
 801c9be:	bf00      	nop
 801c9c0:	08035fb4 	.word	0x08035fb4
 801c9c4:	08036fac 	.word	0x08036fac
 801c9c8:	080394c4 	.word	0x080394c4
 801c9cc:	08039684 	.word	0x08039684
 801c9d0:	700ffc00 	.word	0x700ffc00

0801c9d4 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801c9d4:	b538      	push	{r3, r4, r5, lr}
 801c9d6:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c9d8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801c9da:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801c9dc:	4413      	add	r3, r2
            % lfs->block_count;
 801c9de:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801c9e0:	fbb3 f1f2 	udiv	r1, r3, r2
 801c9e4:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c9e8:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801c9ea:	2100      	movs	r1, #0
 801c9ec:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801c9ee:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c9f0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801c9f2:	00db      	lsls	r3, r3, #3
 801c9f4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c9f6:	4283      	cmp	r3, r0
 801c9f8:	bf28      	it	cs
 801c9fa:	4603      	movcs	r3, r0
 801c9fc:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801c9fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801ca00:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ca02:	f010 f935 	bl	802cc70 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801ca06:	2301      	movs	r3, #1
 801ca08:	4622      	mov	r2, r4
 801ca0a:	4906      	ldr	r1, [pc, #24]	@ (801ca24 <lfs_alloc_scan+0x50>)
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f7ff ff03 	bl	801c818 <lfs_fs_traverse_>
    if (err) {
 801ca12:	4605      	mov	r5, r0
 801ca14:	b908      	cbnz	r0, 801ca1a <lfs_alloc_scan+0x46>
}
 801ca16:	4628      	mov	r0, r5
 801ca18:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f7fe fc15 	bl	801b24a <lfs_alloc_drop>
        return err;
 801ca20:	e7f9      	b.n	801ca16 <lfs_alloc_scan+0x42>
 801ca22:	bf00      	nop
 801ca24:	0801b259 	.word	0x0801b259

0801ca28 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801ca28:	b530      	push	{r4, r5, lr}
 801ca2a:	b083      	sub	sp, #12
 801ca2c:	4604      	mov	r4, r0
 801ca2e:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801ca30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ca32:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801ca34:	4293      	cmp	r3, r2
 801ca36:	d22b      	bcs.n	801ca90 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ca38:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ca3a:	08da      	lsrs	r2, r3, #3
 801ca3c:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801ca3e:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ca42:	40ca      	lsrs	r2, r1
 801ca44:	f012 0f01 	tst.w	r2, #1
 801ca48:	d005      	beq.n	801ca56 <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801ca4a:	3301      	adds	r3, #1
 801ca4c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801ca4e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801ca50:	3b01      	subs	r3, #1
 801ca52:	6623      	str	r3, [r4, #96]	@ 0x60
 801ca54:	e7ec      	b.n	801ca30 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801ca56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ca58:	4413      	add	r3, r2
                        % lfs->block_count;
 801ca5a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801ca5c:	fbb3 f1f2 	udiv	r1, r3, r2
 801ca60:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801ca64:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801ca66:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801ca68:	3301      	adds	r3, #1
 801ca6a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801ca6c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801ca6e:	3a01      	subs	r2, #1
 801ca70:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801ca72:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801ca74:	4293      	cmp	r3, r2
 801ca76:	d225      	bcs.n	801cac4 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ca78:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801ca7a:	08da      	lsrs	r2, r3, #3
 801ca7c:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801ca7e:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801ca82:	fa22 f303 	lsr.w	r3, r2, r3
 801ca86:	f013 0f01 	tst.w	r3, #1
 801ca8a:	d1ec      	bne.n	801ca66 <lfs_alloc+0x3e>
                        return 0;
 801ca8c:	2000      	movs	r0, #0
 801ca8e:	e01a      	b.n	801cac6 <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801ca90:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801ca92:	b12a      	cbz	r2, 801caa0 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801ca94:	4620      	mov	r0, r4
 801ca96:	f7ff ff9d 	bl	801c9d4 <lfs_alloc_scan>
        if(err) {
 801ca9a:	2800      	cmp	r0, #0
 801ca9c:	d0c8      	beq.n	801ca30 <lfs_alloc+0x8>
 801ca9e:	e012      	b.n	801cac6 <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801caa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801caa2:	4413      	add	r3, r2
 801caa4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801caa6:	fbb3 f1f2 	udiv	r1, r3, r2
 801caaa:	4808      	ldr	r0, [pc, #32]	@ (801cacc <lfs_alloc+0xa4>)
 801caac:	9000      	str	r0, [sp, #0]
 801caae:	fb02 3311 	mls	r3, r2, r1, r3
 801cab2:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801cab6:	4906      	ldr	r1, [pc, #24]	@ (801cad0 <lfs_alloc+0xa8>)
 801cab8:	4806      	ldr	r0, [pc, #24]	@ (801cad4 <lfs_alloc+0xac>)
 801caba:	f00d fbbb 	bl	802a234 <printf>
            return LFS_ERR_NOSPC;
 801cabe:	f06f 001b 	mvn.w	r0, #27
 801cac2:	e000      	b.n	801cac6 <lfs_alloc+0x9e>
                        return 0;
 801cac4:	2000      	movs	r0, #0
}
 801cac6:	b003      	add	sp, #12
 801cac8:	bd30      	pop	{r4, r5, pc}
 801caca:	bf00      	nop
 801cacc:	08036fac 	.word	0x08036fac
 801cad0:	080394c4 	.word	0x080394c4
 801cad4:	080396b0 	.word	0x080396b0

0801cad8 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801cad8:	b570      	push	{r4, r5, r6, lr}
 801cada:	b084      	sub	sp, #16
 801cadc:	4606      	mov	r6, r0
 801cade:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801cae0:	2500      	movs	r5, #0
 801cae2:	2d01      	cmp	r5, #1
 801cae4:	dc0d      	bgt.n	801cb02 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801cae6:	3501      	adds	r5, #1
 801cae8:	f005 0101 	and.w	r1, r5, #1
 801caec:	bf48      	it	mi
 801caee:	4249      	negmi	r1, r1
 801caf0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801caf4:	4630      	mov	r0, r6
 801caf6:	f7ff ff97 	bl	801ca28 <lfs_alloc>
        if (err) {
 801cafa:	4603      	mov	r3, r0
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d0f0      	beq.n	801cae2 <lfs_dir_alloc+0xa>
 801cb00:	e02d      	b.n	801cb5e <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801cb02:	2100      	movs	r1, #0
 801cb04:	4622      	mov	r2, r4
 801cb06:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801cb0a:	2304      	movs	r3, #4
 801cb0c:	9303      	str	r3, [sp, #12]
 801cb0e:	9202      	str	r2, [sp, #8]
 801cb10:	9101      	str	r1, [sp, #4]
 801cb12:	6822      	ldr	r2, [r4, #0]
 801cb14:	9200      	str	r2, [sp, #0]
 801cb16:	4632      	mov	r2, r6
 801cb18:	4630      	mov	r0, r6
 801cb1a:	f7fe fcdd 	bl	801b4d8 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801cb1e:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801cb20:	4603      	mov	r3, r0
 801cb22:	b110      	cbz	r0, 801cb2a <lfs_dir_alloc+0x52>
 801cb24:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cb28:	d119      	bne.n	801cb5e <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801cb2a:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801cb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	dd0a      	ble.n	801cb48 <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801cb32:	3301      	adds	r3, #1
 801cb34:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801cb38:	1853      	adds	r3, r2, r1
 801cb3a:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801cb3c:	fbb3 f2f1 	udiv	r2, r3, r1
 801cb40:	fb01 3212 	mls	r2, r1, r2, r3
 801cb44:	1a9b      	subs	r3, r3, r2
 801cb46:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801cb48:	2304      	movs	r3, #4
 801cb4a:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801cb4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cb50:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801cb52:	2300      	movs	r3, #0
 801cb54:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801cb56:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801cb58:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801cb5a:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801cb5c:	75e3      	strb	r3, [r4, #23]
}
 801cb5e:	4618      	mov	r0, r3
 801cb60:	b004      	add	sp, #16
 801cb62:	bd70      	pop	{r4, r5, r6, pc}

0801cb64 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801cb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb66:	b089      	sub	sp, #36	@ 0x24
 801cb68:	4605      	mov	r5, r0
 801cb6a:	460e      	mov	r6, r1
 801cb6c:	e053      	b.n	801cc16 <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801cb6e:	2201      	movs	r2, #1
 801cb70:	9203      	str	r2, [sp, #12]
 801cb72:	f10d 021b 	add.w	r2, sp, #27
 801cb76:	9202      	str	r2, [sp, #8]
 801cb78:	9401      	str	r4, [sp, #4]
 801cb7a:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801cb7c:	9200      	str	r2, [sp, #0]
 801cb7e:	1b1b      	subs	r3, r3, r4
 801cb80:	462a      	mov	r2, r5
 801cb82:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801cb86:	4628      	mov	r0, r5
 801cb88:	f7fe fca6 	bl	801b4d8 <lfs_bd_read>
                if (err) {
 801cb8c:	2800      	cmp	r0, #0
 801cb8e:	d152      	bne.n	801cc36 <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801cb90:	2301      	movs	r3, #1
 801cb92:	9303      	str	r3, [sp, #12]
 801cb94:	f10d 021b 	add.w	r2, sp, #27
 801cb98:	9202      	str	r2, [sp, #8]
 801cb9a:	9401      	str	r4, [sp, #4]
 801cb9c:	9a07      	ldr	r2, [sp, #28]
 801cb9e:	9200      	str	r2, [sp, #0]
 801cba0:	462a      	mov	r2, r5
 801cba2:	f105 0110 	add.w	r1, r5, #16
 801cba6:	4628      	mov	r0, r5
 801cba8:	f7ff f992 	bl	801bed0 <lfs_bd_prog>
            if (err) {
 801cbac:	bb20      	cbnz	r0, 801cbf8 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801cbae:	3401      	adds	r4, #1
 801cbb0:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801cbb2:	42a3      	cmp	r3, r4
 801cbb4:	d945      	bls.n	801cc42 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801cbb6:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801cbb8:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801cbbc:	d0d7      	beq.n	801cb6e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801cbbe:	88b2      	ldrh	r2, [r6, #4]
 801cbc0:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801cbc2:	2101      	movs	r1, #1
 801cbc4:	9105      	str	r1, [sp, #20]
 801cbc6:	f10d 011b 	add.w	r1, sp, #27
 801cbca:	9104      	str	r1, [sp, #16]
 801cbcc:	9403      	str	r4, [sp, #12]
 801cbce:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801cbd2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801cbd6:	9202      	str	r2, [sp, #8]
 801cbd8:	4a27      	ldr	r2, [pc, #156]	@ (801cc78 <lfs_file_relocate+0x114>)
 801cbda:	9201      	str	r2, [sp, #4]
 801cbdc:	1b1b      	subs	r3, r3, r4
 801cbde:	9300      	str	r3, [sp, #0]
 801cbe0:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	f106 0108 	add.w	r1, r6, #8
 801cbea:	4628      	mov	r0, r5
 801cbec:	f7ff f84c 	bl	801bc88 <lfs_dir_getread>
                if (err) {
 801cbf0:	2800      	cmp	r0, #0
 801cbf2:	d0cd      	beq.n	801cb90 <lfs_file_relocate+0x2c>
                    return err;
 801cbf4:	4607      	mov	r7, r0
 801cbf6:	e03b      	b.n	801cc70 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801cbf8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cbfc:	d11d      	bne.n	801cc3a <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801cbfe:	4b1f      	ldr	r3, [pc, #124]	@ (801cc7c <lfs_file_relocate+0x118>)
 801cc00:	9300      	str	r3, [sp, #0]
 801cc02:	9b07      	ldr	r3, [sp, #28]
 801cc04:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801cc08:	491d      	ldr	r1, [pc, #116]	@ (801cc80 <lfs_file_relocate+0x11c>)
 801cc0a:	481e      	ldr	r0, [pc, #120]	@ (801cc84 <lfs_file_relocate+0x120>)
 801cc0c:	f00d fb12 	bl	802a234 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801cc10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cc14:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801cc16:	a907      	add	r1, sp, #28
 801cc18:	4628      	mov	r0, r5
 801cc1a:	f7ff ff05 	bl	801ca28 <lfs_alloc>
        if (err) {
 801cc1e:	4607      	mov	r7, r0
 801cc20:	bb30      	cbnz	r0, 801cc70 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801cc22:	9907      	ldr	r1, [sp, #28]
 801cc24:	4628      	mov	r0, r5
 801cc26:	f7fe fbdd 	bl	801b3e4 <lfs_bd_erase>
        if (err) {
 801cc2a:	4607      	mov	r7, r0
 801cc2c:	b138      	cbz	r0, 801cc3e <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801cc2e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cc32:	d0e4      	beq.n	801cbfe <lfs_file_relocate+0x9a>
 801cc34:	e01c      	b.n	801cc70 <lfs_file_relocate+0x10c>
                    return err;
 801cc36:	4607      	mov	r7, r0
 801cc38:	e01a      	b.n	801cc70 <lfs_file_relocate+0x10c>
                return err;
 801cc3a:	4607      	mov	r7, r0
 801cc3c:	e018      	b.n	801cc70 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801cc3e:	2400      	movs	r4, #0
 801cc40:	e7b6      	b.n	801cbb0 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801cc42:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801cc44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cc46:	69e9      	ldr	r1, [r5, #28]
 801cc48:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801cc4a:	f011 fa4d 	bl	802e0e8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801cc4e:	692b      	ldr	r3, [r5, #16]
 801cc50:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801cc52:	696b      	ldr	r3, [r5, #20]
 801cc54:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801cc56:	69ab      	ldr	r3, [r5, #24]
 801cc58:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801cc5a:	f105 0110 	add.w	r1, r5, #16
 801cc5e:	4628      	mov	r0, r5
 801cc60:	f7fe fc10 	bl	801b484 <lfs_cache_zero>
        file->block = nblock;
 801cc64:	9b07      	ldr	r3, [sp, #28]
 801cc66:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801cc68:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801cc6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc6e:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801cc70:	4638      	mov	r0, r7
 801cc72:	b009      	add	sp, #36	@ 0x24
 801cc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc76:	bf00      	nop
 801cc78:	fff7fc00 	.word	0xfff7fc00
 801cc7c:	08036fac 	.word	0x08036fac
 801cc80:	080394c4 	.word	0x080394c4
 801cc84:	080396dc 	.word	0x080396dc

0801cc88 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801cc88:	b538      	push	{r3, r4, r5, lr}
 801cc8a:	4605      	mov	r5, r0
 801cc8c:	460c      	mov	r4, r1
    file->off = file->pos;
 801cc8e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801cc90:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801cc92:	f7fe fad7 	bl	801b244 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801cc96:	4621      	mov	r1, r4
 801cc98:	4628      	mov	r0, r5
 801cc9a:	f7ff ff63 	bl	801cb64 <lfs_file_relocate>
    if (err) {
 801cc9e:	b918      	cbnz	r0, 801cca8 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801cca0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cca2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801cca6:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801cca8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ccac <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccb0:	b08b      	sub	sp, #44	@ 0x2c
 801ccb2:	4605      	mov	r5, r0
 801ccb4:	460f      	mov	r7, r1
 801ccb6:	4616      	mov	r6, r2
 801ccb8:	9305      	str	r3, [sp, #20]
 801ccba:	e04d      	b.n	801cd58 <lfs_ctz_extend+0xac>
            if (size == 0) {
 801ccbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d032      	beq.n	801cd28 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801ccc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ccc4:	3b01      	subs	r3, #1
 801ccc6:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801ccc8:	a908      	add	r1, sp, #32
 801ccca:	4628      	mov	r0, r5
 801cccc:	f7fe fbe6 	bl	801b49c <lfs_ctz_index>
            noff = noff + 1;
 801ccd0:	9b08      	ldr	r3, [sp, #32]
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801ccd6:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ccd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ccda:	4293      	cmp	r3, r2
 801ccdc:	d05b      	beq.n	801cd96 <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801ccde:	2400      	movs	r4, #0
 801cce0:	46b9      	mov	r9, r7
 801cce2:	9f05      	ldr	r7, [sp, #20]
 801cce4:	9b08      	ldr	r3, [sp, #32]
 801cce6:	42a3      	cmp	r3, r4
 801cce8:	d94a      	bls.n	801cd80 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801ccea:	2201      	movs	r2, #1
 801ccec:	9203      	str	r2, [sp, #12]
 801ccee:	aa09      	add	r2, sp, #36	@ 0x24
 801ccf0:	9202      	str	r2, [sp, #8]
 801ccf2:	9401      	str	r4, [sp, #4]
 801ccf4:	9700      	str	r7, [sp, #0]
 801ccf6:	1b1b      	subs	r3, r3, r4
 801ccf8:	4632      	mov	r2, r6
 801ccfa:	2100      	movs	r1, #0
 801ccfc:	4628      	mov	r0, r5
 801ccfe:	f7fe fbeb 	bl	801b4d8 <lfs_bd_read>
                    if (err) {
 801cd02:	4603      	mov	r3, r0
 801cd04:	2800      	cmp	r0, #0
 801cd06:	d139      	bne.n	801cd7c <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801cd08:	2301      	movs	r3, #1
 801cd0a:	9303      	str	r3, [sp, #12]
 801cd0c:	aa09      	add	r2, sp, #36	@ 0x24
 801cd0e:	9202      	str	r2, [sp, #8]
 801cd10:	9401      	str	r4, [sp, #4]
 801cd12:	9a07      	ldr	r2, [sp, #28]
 801cd14:	9200      	str	r2, [sp, #0]
 801cd16:	4632      	mov	r2, r6
 801cd18:	4649      	mov	r1, r9
 801cd1a:	4628      	mov	r0, r5
 801cd1c:	f7ff f8d8 	bl	801bed0 <lfs_bd_prog>
                    if (err) {
 801cd20:	4603      	mov	r3, r0
 801cd22:	b948      	cbnz	r0, 801cd38 <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801cd24:	3401      	adds	r4, #1
 801cd26:	e7dd      	b.n	801cce4 <lfs_ctz_extend+0x38>
                *block = nblock;
 801cd28:	4682      	mov	sl, r0
 801cd2a:	9b07      	ldr	r3, [sp, #28]
 801cd2c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cd2e:	6013      	str	r3, [r2, #0]
                *off = 0;
 801cd30:	2300      	movs	r3, #0
 801cd32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cd34:	6013      	str	r3, [r2, #0]
                return 0;
 801cd36:	e02a      	b.n	801cd8e <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801cd38:	464f      	mov	r7, r9
 801cd3a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cd3e:	d11d      	bne.n	801cd7c <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801cd40:	4b36      	ldr	r3, [pc, #216]	@ (801ce1c <lfs_ctz_extend+0x170>)
 801cd42:	9300      	str	r3, [sp, #0]
 801cd44:	9b07      	ldr	r3, [sp, #28]
 801cd46:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801cd4a:	4935      	ldr	r1, [pc, #212]	@ (801ce20 <lfs_ctz_extend+0x174>)
 801cd4c:	4835      	ldr	r0, [pc, #212]	@ (801ce24 <lfs_ctz_extend+0x178>)
 801cd4e:	f00d fa71 	bl	802a234 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801cd52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd56:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801cd58:	a907      	add	r1, sp, #28
 801cd5a:	4628      	mov	r0, r5
 801cd5c:	f7ff fe64 	bl	801ca28 <lfs_alloc>
        if (err) {
 801cd60:	2800      	cmp	r0, #0
 801cd62:	d159      	bne.n	801ce18 <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801cd64:	9907      	ldr	r1, [sp, #28]
 801cd66:	4628      	mov	r0, r5
 801cd68:	f7fe fb3c 	bl	801b3e4 <lfs_bd_erase>
            if (err) {
 801cd6c:	4680      	mov	r8, r0
 801cd6e:	2800      	cmp	r0, #0
 801cd70:	d0a4      	beq.n	801ccbc <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801cd72:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cd76:	d0e3      	beq.n	801cd40 <lfs_ctz_extend+0x94>
 801cd78:	4682      	mov	sl, r0
 801cd7a:	e008      	b.n	801cd8e <lfs_ctz_extend+0xe2>
                        return err;
 801cd7c:	469a      	mov	sl, r3
 801cd7e:	e006      	b.n	801cd8e <lfs_ctz_extend+0xe2>
                *block = nblock;
 801cd80:	46c2      	mov	sl, r8
 801cd82:	9b07      	ldr	r3, [sp, #28]
 801cd84:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cd86:	6013      	str	r3, [r2, #0]
                *off = noff;
 801cd88:	9b08      	ldr	r3, [sp, #32]
 801cd8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cd8c:	6013      	str	r3, [r2, #0]
}
 801cd8e:	4650      	mov	r0, sl
 801cd90:	b00b      	add	sp, #44	@ 0x2c
 801cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801cd96:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801cd98:	fa90 f9a0 	rbit	r9, r0
 801cd9c:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801cda0:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801cda4:	9b05      	ldr	r3, [sp, #20]
 801cda6:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801cda8:	2400      	movs	r4, #0
 801cdaa:	46ab      	mov	fp, r5
 801cdac:	e006      	b.n	801cdbc <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801cdae:	465d      	mov	r5, fp
 801cdb0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cdb4:	d0c4      	beq.n	801cd40 <lfs_ctz_extend+0x94>
                    return err;
 801cdb6:	4682      	mov	sl, r0
 801cdb8:	e7e9      	b.n	801cd8e <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801cdba:	3401      	adds	r4, #1
 801cdbc:	4554      	cmp	r4, sl
 801cdbe:	d221      	bcs.n	801ce04 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801cdc0:	00a5      	lsls	r5, r4, #2
 801cdc2:	2304      	movs	r3, #4
 801cdc4:	9303      	str	r3, [sp, #12]
 801cdc6:	ab09      	add	r3, sp, #36	@ 0x24
 801cdc8:	9302      	str	r3, [sp, #8]
 801cdca:	9501      	str	r5, [sp, #4]
 801cdcc:	9b07      	ldr	r3, [sp, #28]
 801cdce:	9300      	str	r3, [sp, #0]
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	4632      	mov	r2, r6
 801cdd4:	4639      	mov	r1, r7
 801cdd6:	4658      	mov	r0, fp
 801cdd8:	f7ff f87a 	bl	801bed0 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801cddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801cdde:	2800      	cmp	r0, #0
 801cde0:	d1e5      	bne.n	801cdae <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801cde2:	454c      	cmp	r4, r9
 801cde4:	d0e9      	beq.n	801cdba <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801cde6:	2304      	movs	r3, #4
 801cde8:	9303      	str	r3, [sp, #12]
 801cdea:	a909      	add	r1, sp, #36	@ 0x24
 801cdec:	9102      	str	r1, [sp, #8]
 801cdee:	9501      	str	r5, [sp, #4]
 801cdf0:	9200      	str	r2, [sp, #0]
 801cdf2:	4632      	mov	r2, r6
 801cdf4:	2100      	movs	r1, #0
 801cdf6:	4658      	mov	r0, fp
 801cdf8:	f7fe fb6e 	bl	801b4d8 <lfs_bd_read>
                    if (err) {
 801cdfc:	2800      	cmp	r0, #0
 801cdfe:	d0dc      	beq.n	801cdba <lfs_ctz_extend+0x10e>
                        return err;
 801ce00:	4682      	mov	sl, r0
 801ce02:	e7c4      	b.n	801cd8e <lfs_ctz_extend+0xe2>
            *block = nblock;
 801ce04:	46d1      	mov	r9, sl
 801ce06:	46c2      	mov	sl, r8
 801ce08:	9b07      	ldr	r3, [sp, #28]
 801ce0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ce0c:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801ce0e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801ce12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ce14:	6019      	str	r1, [r3, #0]
            return 0;
 801ce16:	e7ba      	b.n	801cd8e <lfs_ctz_extend+0xe2>
 801ce18:	4682      	mov	sl, r0
 801ce1a:	e7b8      	b.n	801cd8e <lfs_ctz_extend+0xe2>
 801ce1c:	08036fac 	.word	0x08036fac
 801ce20:	080394c4 	.word	0x080394c4
 801ce24:	080396dc 	.word	0x080396dc

0801ce28 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801ce28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce2c:	b087      	sub	sp, #28
 801ce2e:	4605      	mov	r5, r0
 801ce30:	460c      	mov	r4, r1
 801ce32:	4617      	mov	r7, r2
 801ce34:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801ce36:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ce38:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ce3c:	d008      	beq.n	801ce50 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801ce3e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801ce40:	444b      	add	r3, r9
 801ce42:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801ce44:	4293      	cmp	r3, r2
 801ce46:	bf38      	it	cc
 801ce48:	4613      	movcc	r3, r2
 801ce4a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801ce4c:	429a      	cmp	r2, r3
 801ce4e:	d32d      	bcc.n	801ceac <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801ce50:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801ce52:	f1b8 0f00 	cmp.w	r8, #0
 801ce56:	f000 8094 	beq.w	801cf82 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801ce5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce5c:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801ce60:	d004      	beq.n	801ce6c <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801ce62:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801ce64:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801ce66:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801ce68:	4288      	cmp	r0, r1
 801ce6a:	d150      	bne.n	801cf0e <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801ce6c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ce70:	d144      	bne.n	801cefc <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801ce72:	b90a      	cbnz	r2, 801ce78 <lfs_file_flushedwrite+0x50>
 801ce74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ce76:	bb1b      	cbnz	r3, 801cec0 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801ce78:	4628      	mov	r0, r5
 801ce7a:	f7fe f9e3 	bl	801b244 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801ce7e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801ce82:	9302      	str	r3, [sp, #8]
 801ce84:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801ce88:	9301      	str	r3, [sp, #4]
 801ce8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ce8c:	9300      	str	r3, [sp, #0]
 801ce8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ce90:	462a      	mov	r2, r5
 801ce92:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801ce96:	4628      	mov	r0, r5
 801ce98:	f7ff ff08 	bl	801ccac <lfs_ctz_extend>
                if (err) {
 801ce9c:	4601      	mov	r1, r0
 801ce9e:	2800      	cmp	r0, #0
 801cea0:	d031      	beq.n	801cf06 <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801cea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cea8:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801ceaa:	e059      	b.n	801cf60 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801ceac:	f7ff feec 	bl	801cc88 <lfs_file_outline>
        if (err) {
 801ceb0:	4601      	mov	r1, r0
 801ceb2:	2800      	cmp	r0, #0
 801ceb4:	d0cc      	beq.n	801ce50 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801ceb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ceb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cebc:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801cebe:	e04f      	b.n	801cf60 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cec0:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801cec4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801cec6:	2100      	movs	r1, #0
 801cec8:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801ceca:	a805      	add	r0, sp, #20
 801cecc:	9003      	str	r0, [sp, #12]
 801cece:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801ced2:	9002      	str	r0, [sp, #8]
 801ced4:	3b01      	subs	r3, #1
 801ced6:	9301      	str	r3, [sp, #4]
 801ced8:	9200      	str	r2, [sp, #0]
 801ceda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801cedc:	4632      	mov	r2, r6
 801cede:	4628      	mov	r0, r5
 801cee0:	f7ff f8ad 	bl	801c03e <lfs_ctz_find>
                    if (err) {
 801cee4:	4601      	mov	r1, r0
 801cee6:	b920      	cbnz	r0, 801cef2 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801cee8:	4631      	mov	r1, r6
 801ceea:	4628      	mov	r0, r5
 801ceec:	f7fe faca 	bl	801b484 <lfs_cache_zero>
 801cef0:	e7c2      	b.n	801ce78 <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801cef2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cef8:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801cefa:	e031      	b.n	801cf60 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801cefc:	f06f 0301 	mvn.w	r3, #1
 801cf00:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801cf02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf04:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801cf06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cf08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cf0c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801cf0e:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801cf10:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801cf12:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cf14:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801cf16:	4546      	cmp	r6, r8
 801cf18:	bf28      	it	cs
 801cf1a:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801cf1c:	9603      	str	r6, [sp, #12]
 801cf1e:	9702      	str	r7, [sp, #8]
 801cf20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cf22:	9301      	str	r3, [sp, #4]
 801cf24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cf26:	9300      	str	r3, [sp, #0]
 801cf28:	2301      	movs	r3, #1
 801cf2a:	462a      	mov	r2, r5
 801cf2c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cf30:	4628      	mov	r0, r5
 801cf32:	f7fe ffcd 	bl	801bed0 <lfs_bd_prog>
            if (err) {
 801cf36:	4601      	mov	r1, r0
 801cf38:	b1b0      	cbz	r0, 801cf68 <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801cf3a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cf3e:	d10b      	bne.n	801cf58 <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801cf40:	4621      	mov	r1, r4
 801cf42:	4628      	mov	r0, r5
 801cf44:	f7ff fe0e 	bl	801cb64 <lfs_file_relocate>
            if (err) {
 801cf48:	4601      	mov	r1, r0
 801cf4a:	2800      	cmp	r0, #0
 801cf4c:	d0e6      	beq.n	801cf1c <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801cf4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cf50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cf54:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801cf56:	e003      	b.n	801cf60 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801cf58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cf5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cf5e:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801cf60:	4608      	mov	r0, r1
 801cf62:	b007      	add	sp, #28
 801cf64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801cf68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf6a:	4433      	add	r3, r6
 801cf6c:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801cf6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cf70:	4433      	add	r3, r6
 801cf72:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801cf74:	4437      	add	r7, r6
        nsize -= diff;
 801cf76:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801cf7a:	4628      	mov	r0, r5
 801cf7c:	f7fe f962 	bl	801b244 <lfs_alloc_ckpoint>
 801cf80:	e767      	b.n	801ce52 <lfs_file_flushedwrite+0x2a>
    return size;
 801cf82:	4649      	mov	r1, r9
 801cf84:	e7ec      	b.n	801cf60 <lfs_file_flushedwrite+0x138>
	...

0801cf88 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801cf88:	b570      	push	{r4, r5, r6, lr}
 801cf8a:	b098      	sub	sp, #96	@ 0x60
 801cf8c:	4605      	mov	r5, r0
 801cf8e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801cf90:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cf92:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801cf96:	d008      	beq.n	801cfaa <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801cf98:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cf9c:	d102      	bne.n	801cfa4 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801cf9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cfa2:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801cfa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cfa8:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801cfaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cfac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cfb0:	d068      	beq.n	801d084 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801cfb2:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801cfb4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cfb8:	d151      	bne.n	801d05e <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801cfba:	2254      	movs	r2, #84	@ 0x54
 801cfbc:	2100      	movs	r1, #0
 801cfbe:	a803      	add	r0, sp, #12
 801cfc0:	f00f fe56 	bl	802cc70 <memset>
                .ctz.head = file->ctz.head,
 801cfc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801cfc6:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801cfc8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801cfca:	930e      	str	r3, [sp, #56]	@ 0x38
 801cfcc:	2301      	movs	r3, #1
 801cfce:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801cfd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801cfd2:	9310      	str	r3, [sp, #64]	@ 0x40
 801cfd4:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801cfd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cfdc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801cfe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cfe4:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801cfe6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cfe8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cfea:	429a      	cmp	r2, r3
 801cfec:	d21a      	bcs.n	801d024 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801cfee:	2301      	movs	r3, #1
 801cff0:	f10d 020b 	add.w	r2, sp, #11
 801cff4:	a903      	add	r1, sp, #12
 801cff6:	4628      	mov	r0, r5
 801cff8:	f7ff f86a 	bl	801c0d0 <lfs_file_flushedread>
                if (res < 0) {
 801cffc:	1e03      	subs	r3, r0, #0
 801cffe:	db42      	blt.n	801d086 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801d000:	2301      	movs	r3, #1
 801d002:	f10d 020b 	add.w	r2, sp, #11
 801d006:	4621      	mov	r1, r4
 801d008:	4628      	mov	r0, r5
 801d00a:	f7ff ff0d 	bl	801ce28 <lfs_file_flushedwrite>
                if (res < 0) {
 801d00e:	1e03      	subs	r3, r0, #0
 801d010:	db39      	blt.n	801d086 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801d012:	682b      	ldr	r3, [r5, #0]
 801d014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d018:	d0e5      	beq.n	801cfe6 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801d01a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d01e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d020:	602b      	str	r3, [r5, #0]
}
 801d022:	e7e0      	b.n	801cfe6 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801d024:	2301      	movs	r3, #1
 801d026:	462a      	mov	r2, r5
 801d028:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801d02c:	4628      	mov	r0, r5
 801d02e:	f7fe fef5 	bl	801be1c <lfs_bd_flush>
                if (err) {
 801d032:	4603      	mov	r3, r0
 801d034:	b1c0      	cbz	r0, 801d068 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801d036:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d03a:	d124      	bne.n	801d086 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801d03c:	4b13      	ldr	r3, [pc, #76]	@ (801d08c <lfs_file_flush+0x104>)
 801d03e:	9300      	str	r3, [sp, #0]
 801d040:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d042:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801d046:	4912      	ldr	r1, [pc, #72]	@ (801d090 <lfs_file_flush+0x108>)
 801d048:	4812      	ldr	r0, [pc, #72]	@ (801d094 <lfs_file_flush+0x10c>)
 801d04a:	f00d f8f3 	bl	802a234 <printf>
                err = lfs_file_relocate(lfs, file);
 801d04e:	4621      	mov	r1, r4
 801d050:	4628      	mov	r0, r5
 801d052:	f7ff fd87 	bl	801cb64 <lfs_file_relocate>
                if (err) {
 801d056:	4603      	mov	r3, r0
 801d058:	2800      	cmp	r0, #0
 801d05a:	d0e3      	beq.n	801d024 <lfs_file_flush+0x9c>
 801d05c:	e013      	b.n	801d086 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801d05e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801d060:	42b3      	cmp	r3, r6
 801d062:	bf38      	it	cc
 801d064:	4633      	movcc	r3, r6
 801d066:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801d068:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d06a:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801d06c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d06e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801d070:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d072:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801d076:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801d078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d07c:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801d07e:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801d080:	2300      	movs	r3, #0
 801d082:	e000      	b.n	801d086 <lfs_file_flush+0xfe>
 801d084:	2300      	movs	r3, #0
}
 801d086:	4618      	mov	r0, r3
 801d088:	b018      	add	sp, #96	@ 0x60
 801d08a:	bd70      	pop	{r4, r5, r6, pc}
 801d08c:	08036fac 	.word	0x08036fac
 801d090:	080394c4 	.word	0x080394c4
 801d094:	080396dc 	.word	0x080396dc

0801d098 <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801d098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d09a:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801d09c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d09e:	f013 0f01 	tst.w	r3, #1
 801d0a2:	d00f      	beq.n	801d0c4 <lfs_file_read_+0x2c>
 801d0a4:	4605      	mov	r5, r0
 801d0a6:	460c      	mov	r4, r1
 801d0a8:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801d0aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d0ae:	d002      	beq.n	801d0b6 <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801d0b0:	f7ff ff6a 	bl	801cf88 <lfs_file_flush>
        if (err) {
 801d0b4:	b928      	cbnz	r0, 801d0c2 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801d0b6:	463b      	mov	r3, r7
 801d0b8:	4632      	mov	r2, r6
 801d0ba:	4621      	mov	r1, r4
 801d0bc:	4628      	mov	r0, r5
 801d0be:	f7ff f807 	bl	801c0d0 <lfs_file_flushedread>
}
 801d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801d0c4:	4b03      	ldr	r3, [pc, #12]	@ (801d0d4 <lfs_file_read_+0x3c>)
 801d0c6:	4a04      	ldr	r2, [pc, #16]	@ (801d0d8 <lfs_file_read_+0x40>)
 801d0c8:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801d0cc:	4803      	ldr	r0, [pc, #12]	@ (801d0dc <lfs_file_read_+0x44>)
 801d0ce:	f00d f87d 	bl	802a1cc <__assert_func>
 801d0d2:	bf00      	nop
 801d0d4:	08039700 	.word	0x08039700
 801d0d8:	0803a138 	.word	0x0803a138
 801d0dc:	080394c4 	.word	0x080394c4

0801d0e0 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0e2:	b083      	sub	sp, #12
 801d0e4:	4606      	mov	r6, r0
 801d0e6:	460d      	mov	r5, r1
 801d0e8:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801d0ea:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801d0ec:	b123      	cbz	r3, 801d0f8 <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801d0ee:	2b01      	cmp	r3, #1
 801d0f0:	d021      	beq.n	801d136 <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801d0f2:	2b02      	cmp	r3, #2
 801d0f4:	d023      	beq.n	801d13e <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801d0f6:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801d0f8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801d0fa:	42a3      	cmp	r3, r4
 801d0fc:	d339      	bcc.n	801d172 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801d0fe:	42bc      	cmp	r4, r7
 801d100:	d023      	beq.n	801d14a <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801d102:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801d104:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d108:	d10c      	bne.n	801d124 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801d10a:	9701      	str	r7, [sp, #4]
 801d10c:	a901      	add	r1, sp, #4
 801d10e:	4630      	mov	r0, r6
 801d110:	f7fe f9c4 	bl	801b49c <lfs_ctz_index>
 801d114:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801d116:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801d118:	4669      	mov	r1, sp
 801d11a:	4630      	mov	r0, r6
 801d11c:	f7fe f9be 	bl	801b49c <lfs_ctz_index>
        if (oindex == nindex
 801d120:	4287      	cmp	r7, r0
 801d122:	d014      	beq.n	801d14e <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801d124:	4629      	mov	r1, r5
 801d126:	4630      	mov	r0, r6
 801d128:	f7ff ff2e 	bl	801cf88 <lfs_file_flush>
    if (err) {
 801d12c:	b908      	cbnz	r0, 801d132 <lfs_file_seek_+0x52>
    file->pos = npos;
 801d12e:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801d130:	4620      	mov	r0, r4
}
 801d132:	b003      	add	sp, #12
 801d134:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801d136:	42e7      	cmn	r7, r4
 801d138:	d415      	bmi.n	801d166 <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801d13a:	443c      	add	r4, r7
 801d13c:	e7dc      	b.n	801d0f8 <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801d13e:	f7fe f90e 	bl	801b35e <lfs_file_size_>
        if (res < 0) {
 801d142:	1900      	adds	r0, r0, r4
 801d144:	d412      	bmi.n	801d16c <lfs_file_seek_+0x8c>
            npos = res;
 801d146:	4604      	mov	r4, r0
 801d148:	e7d6      	b.n	801d0f8 <lfs_file_seek_+0x18>
        return npos;
 801d14a:	4620      	mov	r0, r4
 801d14c:	e7f1      	b.n	801d132 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801d14e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801d150:	9a00      	ldr	r2, [sp, #0]
 801d152:	4293      	cmp	r3, r2
 801d154:	d8e6      	bhi.n	801d124 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801d156:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801d158:	440b      	add	r3, r1
 801d15a:	429a      	cmp	r2, r3
 801d15c:	d2e2      	bcs.n	801d124 <lfs_file_seek_+0x44>
            file->pos = npos;
 801d15e:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801d160:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801d162:	4620      	mov	r0, r4
 801d164:	e7e5      	b.n	801d132 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801d166:	f06f 0015 	mvn.w	r0, #21
 801d16a:	e7e2      	b.n	801d132 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801d16c:	f06f 0015 	mvn.w	r0, #21
 801d170:	e7df      	b.n	801d132 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801d172:	f06f 0015 	mvn.w	r0, #21
 801d176:	e7dc      	b.n	801d132 <lfs_file_seek_+0x52>

0801d178 <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801d178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d17c:	b082      	sub	sp, #8
 801d17e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801d180:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801d182:	f013 0f02 	tst.w	r3, #2
 801d186:	d02a      	beq.n	801d1de <lfs_file_write_+0x66>
 801d188:	4605      	mov	r5, r0
 801d18a:	460c      	mov	r4, r1
 801d18c:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801d18e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801d192:	d12b      	bne.n	801d1ec <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801d194:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d196:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801d19a:	d004      	beq.n	801d1a6 <lfs_file_write_+0x2e>
 801d19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d19e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d1a0:	4291      	cmp	r1, r2
 801d1a2:	d200      	bcs.n	801d1a6 <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801d1a4:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801d1a6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801d1a8:	19f1      	adds	r1, r6, r7
 801d1aa:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801d1ac:	4291      	cmp	r1, r2
 801d1ae:	d831      	bhi.n	801d214 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801d1b0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801d1b4:	d11f      	bne.n	801d1f6 <lfs_file_write_+0x7e>
 801d1b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d1b8:	429e      	cmp	r6, r3
 801d1ba:	d91c      	bls.n	801d1f6 <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801d1bc:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801d1be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d1c0:	428e      	cmp	r6, r1
 801d1c2:	d918      	bls.n	801d1f6 <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	f88d 3007 	strb.w	r3, [sp, #7]
 801d1ca:	2301      	movs	r3, #1
 801d1cc:	f10d 0207 	add.w	r2, sp, #7
 801d1d0:	4621      	mov	r1, r4
 801d1d2:	4628      	mov	r0, r5
 801d1d4:	f7ff fe28 	bl	801ce28 <lfs_file_flushedwrite>
            if (res < 0) {
 801d1d8:	2800      	cmp	r0, #0
 801d1da:	daf0      	bge.n	801d1be <lfs_file_write_+0x46>
 801d1dc:	e017      	b.n	801d20e <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801d1de:	4b0f      	ldr	r3, [pc, #60]	@ (801d21c <lfs_file_write_+0xa4>)
 801d1e0:	4a0f      	ldr	r2, [pc, #60]	@ (801d220 <lfs_file_write_+0xa8>)
 801d1e2:	f640 6126 	movw	r1, #3622	@ 0xe26
 801d1e6:	480f      	ldr	r0, [pc, #60]	@ (801d224 <lfs_file_write_+0xac>)
 801d1e8:	f00c fff0 	bl	802a1cc <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801d1ec:	f7ff fecc 	bl	801cf88 <lfs_file_flush>
        if (err) {
 801d1f0:	2800      	cmp	r0, #0
 801d1f2:	d0cf      	beq.n	801d194 <lfs_file_write_+0x1c>
 801d1f4:	e00b      	b.n	801d20e <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801d1f6:	463b      	mov	r3, r7
 801d1f8:	4642      	mov	r2, r8
 801d1fa:	4621      	mov	r1, r4
 801d1fc:	4628      	mov	r0, r5
 801d1fe:	f7ff fe13 	bl	801ce28 <lfs_file_flushedwrite>
    if (nsize < 0) {
 801d202:	2800      	cmp	r0, #0
 801d204:	db03      	blt.n	801d20e <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801d206:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d208:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801d20c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801d20e:	b002      	add	sp, #8
 801d210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801d214:	f06f 001a 	mvn.w	r0, #26
 801d218:	e7f9      	b.n	801d20e <lfs_file_write_+0x96>
 801d21a:	bf00      	nop
 801d21c:	08039730 	.word	0x08039730
 801d220:	0803a118 	.word	0x0803a118
 801d224:	080394c4 	.word	0x080394c4

0801d228 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801d228:	b500      	push	{lr}
 801d22a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801d22c:	2300      	movs	r3, #0
 801d22e:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801d230:	aa01      	add	r2, sp, #4
 801d232:	4904      	ldr	r1, [pc, #16]	@ (801d244 <lfs_fs_size_+0x1c>)
 801d234:	f7ff faf0 	bl	801c818 <lfs_fs_traverse_>
    if (err) {
 801d238:	b900      	cbnz	r0, 801d23c <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801d23a:	9801      	ldr	r0, [sp, #4]
}
 801d23c:	b003      	add	sp, #12
 801d23e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d242:	bf00      	nop
 801d244:	0801b3d9 	.word	0x0801b3d9

0801d248 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801d248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d24c:	b082      	sub	sp, #8
 801d24e:	4680      	mov	r8, r0
 801d250:	460e      	mov	r6, r1
 801d252:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801d254:	2300      	movs	r3, #0
 801d256:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801d258:	2501      	movs	r5, #1
 801d25a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801d25c:	4b27      	ldr	r3, [pc, #156]	@ (801d2fc <lfs_fs_pred+0xb4>)
 801d25e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d262:	ab02      	add	r3, sp, #8
 801d264:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801d268:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d26a:	69a7      	ldr	r7, [r4, #24]
 801d26c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801d270:	d035      	beq.n	801d2de <lfs_fs_pred+0x96>
 801d272:	69e3      	ldr	r3, [r4, #28]
 801d274:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d278:	d02f      	beq.n	801d2da <lfs_fs_pred+0x92>
 801d27a:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801d27c:	bb8b      	cbnz	r3, 801d2e2 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801d27e:	f104 0a18 	add.w	sl, r4, #24
 801d282:	4669      	mov	r1, sp
 801d284:	4650      	mov	r0, sl
 801d286:	f7fd ff61 	bl	801b14c <lfs_pair_issync>
 801d28a:	b9a8      	cbnz	r0, 801d2b8 <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801d28c:	454d      	cmp	r5, r9
 801d28e:	d01d      	beq.n	801d2cc <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801d290:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d292:	6833      	ldr	r3, [r6, #0]
 801d294:	42bb      	cmp	r3, r7
 801d296:	d027      	beq.n	801d2e8 <lfs_fs_pred+0xa0>
 801d298:	69e1      	ldr	r1, [r4, #28]
 801d29a:	6872      	ldr	r2, [r6, #4]
 801d29c:	4291      	cmp	r1, r2
 801d29e:	d027      	beq.n	801d2f0 <lfs_fs_pred+0xa8>
 801d2a0:	42ba      	cmp	r2, r7
 801d2a2:	d027      	beq.n	801d2f4 <lfs_fs_pred+0xac>
 801d2a4:	4299      	cmp	r1, r3
 801d2a6:	d027      	beq.n	801d2f8 <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801d2a8:	4652      	mov	r2, sl
 801d2aa:	4621      	mov	r1, r4
 801d2ac:	4640      	mov	r0, r8
 801d2ae:	f7ff faa5 	bl	801c7fc <lfs_dir_fetch>
        if (err) {
 801d2b2:	2800      	cmp	r0, #0
 801d2b4:	d0d9      	beq.n	801d26a <lfs_fs_pred+0x22>
 801d2b6:	e018      	b.n	801d2ea <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801d2b8:	4b11      	ldr	r3, [pc, #68]	@ (801d300 <lfs_fs_pred+0xb8>)
 801d2ba:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801d2be:	4911      	ldr	r1, [pc, #68]	@ (801d304 <lfs_fs_pred+0xbc>)
 801d2c0:	4811      	ldr	r0, [pc, #68]	@ (801d308 <lfs_fs_pred+0xc0>)
 801d2c2:	f00c ffb7 	bl	802a234 <printf>
            return LFS_ERR_CORRUPT;
 801d2c6:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801d2ca:	e00e      	b.n	801d2ea <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801d2cc:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801d2ce:	69e3      	ldr	r3, [r4, #28]
 801d2d0:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801d2d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801d2d6:	2500      	movs	r5, #0
 801d2d8:	e7da      	b.n	801d290 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d2da:	2301      	movs	r3, #1
 801d2dc:	e7ce      	b.n	801d27c <lfs_fs_pred+0x34>
 801d2de:	2301      	movs	r3, #1
 801d2e0:	e7cc      	b.n	801d27c <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801d2e2:	f06f 0001 	mvn.w	r0, #1
 801d2e6:	e000      	b.n	801d2ea <lfs_fs_pred+0xa2>
            return 0;
 801d2e8:	2000      	movs	r0, #0
}
 801d2ea:	b002      	add	sp, #8
 801d2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801d2f0:	2000      	movs	r0, #0
 801d2f2:	e7fa      	b.n	801d2ea <lfs_fs_pred+0xa2>
 801d2f4:	2000      	movs	r0, #0
 801d2f6:	e7f8      	b.n	801d2ea <lfs_fs_pred+0xa2>
 801d2f8:	2000      	movs	r0, #0
 801d2fa:	e7f6      	b.n	801d2ea <lfs_fs_pred+0xa2>
 801d2fc:	08035fb4 	.word	0x08035fb4
 801d300:	08036fac 	.word	0x08036fac
 801d304:	080394c4 	.word	0x080394c4
 801d308:	08039684 	.word	0x08039684

0801d30c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801d30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d30e:	b085      	sub	sp, #20
 801d310:	460c      	mov	r4, r1
 801d312:	4616      	mov	r6, r2
 801d314:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801d316:	9303      	str	r3, [sp, #12]
 801d318:	9202      	str	r2, [sp, #8]
 801d31a:	684b      	ldr	r3, [r1, #4]
 801d31c:	9301      	str	r3, [sp, #4]
 801d31e:	680b      	ldr	r3, [r1, #0]
 801d320:	9300      	str	r3, [sp, #0]
 801d322:	2300      	movs	r3, #0
 801d324:	4602      	mov	r2, r0
 801d326:	f100 0110 	add.w	r1, r0, #16
 801d32a:	f7fe fdd1 	bl	801bed0 <lfs_bd_prog>
    if (err) {
 801d32e:	4607      	mov	r7, r0
 801d330:	b110      	cbz	r0, 801d338 <lfs_dir_commitprog+0x2c>
}
 801d332:	4638      	mov	r0, r7
 801d334:	b005      	add	sp, #20
 801d336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801d338:	462a      	mov	r2, r5
 801d33a:	4631      	mov	r1, r6
 801d33c:	68e0      	ldr	r0, [r4, #12]
 801d33e:	f002 fcdf 	bl	801fd00 <lfs_crc>
 801d342:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801d344:	6863      	ldr	r3, [r4, #4]
 801d346:	442b      	add	r3, r5
 801d348:	6063      	str	r3, [r4, #4]
    return 0;
 801d34a:	e7f2      	b.n	801d332 <lfs_dir_commitprog+0x26>

0801d34c <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d350:	b087      	sub	sp, #28
 801d352:	4614      	mov	r4, r2
 801d354:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801d356:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d35a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d35e:	bf14      	ite	ne
 801d360:	4690      	movne	r8, r2
 801d362:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801d366:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801d36a:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801d36e:	684b      	ldr	r3, [r1, #4]
 801d370:	444b      	add	r3, r9
 801d372:	694a      	ldr	r2, [r1, #20]
 801d374:	4293      	cmp	r3, r2
 801d376:	d841      	bhi.n	801d3fc <lfs_dir_commitattr+0xb0>
 801d378:	4605      	mov	r5, r0
 801d37a:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801d37c:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801d380:	688b      	ldr	r3, [r1, #8]
 801d382:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801d386:	ba1b      	rev	r3, r3
 801d388:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801d38a:	2304      	movs	r3, #4
 801d38c:	aa05      	add	r2, sp, #20
 801d38e:	f7ff ffbd 	bl	801d30c <lfs_dir_commitprog>
    if (err) {
 801d392:	4682      	mov	sl, r0
 801d394:	bb60      	cbnz	r0, 801d3f0 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801d396:	2c00      	cmp	r4, #0
 801d398:	da21      	bge.n	801d3de <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d39a:	2400      	movs	r4, #0
 801d39c:	4544      	cmp	r4, r8
 801d39e:	d225      	bcs.n	801d3ec <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801d3a0:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801d3a4:	6839      	ldr	r1, [r7, #0]
 801d3a6:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801d3a8:	2001      	movs	r0, #1
 801d3aa:	9003      	str	r0, [sp, #12]
 801d3ac:	f10d 0013 	add.w	r0, sp, #19
 801d3b0:	9002      	str	r0, [sp, #8]
 801d3b2:	4422      	add	r2, r4
 801d3b4:	9201      	str	r2, [sp, #4]
 801d3b6:	9100      	str	r1, [sp, #0]
 801d3b8:	3b04      	subs	r3, #4
 801d3ba:	462a      	mov	r2, r5
 801d3bc:	2100      	movs	r1, #0
 801d3be:	4628      	mov	r0, r5
 801d3c0:	f7fe f88a 	bl	801b4d8 <lfs_bd_read>
            if (err) {
 801d3c4:	4603      	mov	r3, r0
 801d3c6:	b9b8      	cbnz	r0, 801d3f8 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801d3c8:	2301      	movs	r3, #1
 801d3ca:	f10d 0213 	add.w	r2, sp, #19
 801d3ce:	4631      	mov	r1, r6
 801d3d0:	4628      	mov	r0, r5
 801d3d2:	f7ff ff9b 	bl	801d30c <lfs_dir_commitprog>
            if (err) {
 801d3d6:	4603      	mov	r3, r0
 801d3d8:	b970      	cbnz	r0, 801d3f8 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801d3da:	3401      	adds	r4, #1
 801d3dc:	e7de      	b.n	801d39c <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801d3de:	4643      	mov	r3, r8
 801d3e0:	463a      	mov	r2, r7
 801d3e2:	4631      	mov	r1, r6
 801d3e4:	4628      	mov	r0, r5
 801d3e6:	f7ff ff91 	bl	801d30c <lfs_dir_commitprog>
        if (err) {
 801d3ea:	b950      	cbnz	r0, 801d402 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801d3ec:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801d3f0:	4650      	mov	r0, sl
 801d3f2:	b007      	add	sp, #28
 801d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801d3f8:	469a      	mov	sl, r3
 801d3fa:	e7f9      	b.n	801d3f0 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801d3fc:	f06f 0a1b 	mvn.w	sl, #27
 801d400:	e7f6      	b.n	801d3f0 <lfs_dir_commitattr+0xa4>
            return err;
 801d402:	4682      	mov	sl, r0
 801d404:	e7f4      	b.n	801d3f0 <lfs_dir_commitattr+0xa4>

0801d406 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801d406:	b508      	push	{r3, lr}
 801d408:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801d40a:	460a      	mov	r2, r1
 801d40c:	6841      	ldr	r1, [r0, #4]
 801d40e:	6800      	ldr	r0, [r0, #0]
 801d410:	f7ff ff9c 	bl	801d34c <lfs_dir_commitattr>
}
 801d414:	bd08      	pop	{r3, pc}
	...

0801d418 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d41c:	b08b      	sub	sp, #44	@ 0x2c
 801d41e:	4607      	mov	r7, r0
 801d420:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d422:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801d424:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d426:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d428:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801d42a:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d42c:	428b      	cmp	r3, r1
 801d42e:	bf94      	ite	ls
 801d430:	eb02 0803 	addls.w	r8, r2, r3
 801d434:	eb02 0801 	addhi.w	r8, r2, r1
 801d438:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801d43c:	fbb8 f3f2 	udiv	r3, r8, r2
 801d440:	fb02 8313 	mls	r3, r2, r3, r8
 801d444:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801d448:	2300      	movs	r3, #0
 801d44a:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801d44c:	469b      	mov	fp, r3
    while (commit->off < end) {
 801d44e:	e03c      	b.n	801d4ca <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801d450:	2201      	movs	r2, #1
 801d452:	9203      	str	r2, [sp, #12]
 801d454:	f10d 021b 	add.w	r2, sp, #27
 801d458:	9202      	str	r2, [sp, #8]
 801d45a:	9401      	str	r4, [sp, #4]
 801d45c:	6832      	ldr	r2, [r6, #0]
 801d45e:	9200      	str	r2, [sp, #0]
 801d460:	463a      	mov	r2, r7
 801d462:	2100      	movs	r1, #0
 801d464:	4638      	mov	r0, r7
 801d466:	f7fe f837 	bl	801b4d8 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801d46a:	4603      	mov	r3, r0
 801d46c:	b118      	cbz	r0, 801d476 <lfs_dir_commitcrc+0x5e>
 801d46e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d472:	f040 80c0 	bne.w	801d5f6 <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801d476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d478:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801d47a:	9307      	str	r3, [sp, #28]
 801d47c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d480:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801d482:	aa08      	add	r2, sp, #32
 801d484:	9203      	str	r2, [sp, #12]
 801d486:	9302      	str	r3, [sp, #8]
 801d488:	9401      	str	r4, [sp, #4]
 801d48a:	6832      	ldr	r2, [r6, #0]
 801d48c:	9200      	str	r2, [sp, #0]
 801d48e:	463a      	mov	r2, r7
 801d490:	2100      	movs	r1, #0
 801d492:	4638      	mov	r0, r7
 801d494:	f7fe fea0 	bl	801c1d8 <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d498:	4603      	mov	r3, r0
 801d49a:	b118      	cbz	r0, 801d4a4 <lfs_dir_commitcrc+0x8c>
 801d49c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d4a0:	f040 80a9 	bne.w	801d5f6 <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801d4a4:	ab07      	add	r3, sp, #28
 801d4a6:	4a59      	ldr	r2, [pc, #356]	@ (801d60c <lfs_dir_commitcrc+0x1f4>)
 801d4a8:	4631      	mov	r1, r6
 801d4aa:	4638      	mov	r0, r7
 801d4ac:	f7ff ff4e 	bl	801d34c <lfs_dir_commitattr>
                if (err) {
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	b348      	cbz	r0, 801d508 <lfs_dir_commitcrc+0xf0>
 801d4b4:	e09f      	b.n	801d5f6 <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d4b6:	2300      	movs	r3, #0
 801d4b8:	463a      	mov	r2, r7
 801d4ba:	4651      	mov	r1, sl
 801d4bc:	4638      	mov	r0, r7
 801d4be:	f7fe fd81 	bl	801bfc4 <lfs_bd_sync>
            if (err) {
 801d4c2:	4603      	mov	r3, r0
 801d4c4:	2800      	cmp	r0, #0
 801d4c6:	f040 8096 	bne.w	801d5f6 <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801d4ca:	6874      	ldr	r4, [r6, #4]
 801d4cc:	4544      	cmp	r4, r8
 801d4ce:	d268      	bcs.n	801d5a2 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801d4d0:	eba8 0304 	sub.w	r3, r8, r4
 801d4d4:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801d4d6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d4da:	4293      	cmp	r3, r2
 801d4dc:	bf94      	ite	ls
 801d4de:	18e4      	addls	r4, r4, r3
 801d4e0:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801d4e2:	3404      	adds	r4, #4
        if (noff < end) {
 801d4e4:	4544      	cmp	r4, r8
 801d4e6:	d204      	bcs.n	801d4f2 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801d4e8:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801d4ec:	429c      	cmp	r4, r3
 801d4ee:	bf28      	it	cs
 801d4f0:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801d4f2:	23ff      	movs	r3, #255	@ 0xff
 801d4f4:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801d4f8:	4544      	cmp	r4, r8
 801d4fa:	d305      	bcc.n	801d508 <lfs_dir_commitcrc+0xf0>
 801d4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d4fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d500:	6a1b      	ldr	r3, [r3, #32]
 801d502:	1ad2      	subs	r2, r2, r3
 801d504:	42a2      	cmp	r2, r4
 801d506:	d2a3      	bcs.n	801d450 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801d508:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801d50c:	43d2      	mvns	r2, r2
 801d50e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801d512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801d516:	6873      	ldr	r3, [r6, #4]
 801d518:	1ae5      	subs	r5, r4, r3
 801d51a:	3d04      	subs	r5, #4
 801d51c:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801d520:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801d524:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801d528:	68b3      	ldr	r3, [r6, #8]
 801d52a:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801d52c:	ba1b      	rev	r3, r3
 801d52e:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801d530:	f10d 091c 	add.w	r9, sp, #28
 801d534:	2204      	movs	r2, #4
 801d536:	4649      	mov	r1, r9
 801d538:	68f0      	ldr	r0, [r6, #12]
 801d53a:	f002 fbe1 	bl	801fd00 <lfs_crc>
 801d53e:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801d540:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801d542:	f107 0a10 	add.w	sl, r7, #16
 801d546:	2308      	movs	r3, #8
 801d548:	9303      	str	r3, [sp, #12]
 801d54a:	f8cd 9008 	str.w	r9, [sp, #8]
 801d54e:	6873      	ldr	r3, [r6, #4]
 801d550:	9301      	str	r3, [sp, #4]
 801d552:	6833      	ldr	r3, [r6, #0]
 801d554:	9300      	str	r3, [sp, #0]
 801d556:	2300      	movs	r3, #0
 801d558:	463a      	mov	r2, r7
 801d55a:	4651      	mov	r1, sl
 801d55c:	4638      	mov	r0, r7
 801d55e:	f7fe fcb7 	bl	801bed0 <lfs_bd_prog>
        if (err) {
 801d562:	4603      	mov	r3, r0
 801d564:	2800      	cmp	r0, #0
 801d566:	d146      	bne.n	801d5f6 <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801d568:	f1bb 0f00 	cmp.w	fp, #0
 801d56c:	d104      	bne.n	801d578 <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801d56e:	6873      	ldr	r3, [r6, #4]
 801d570:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801d574:	68f3      	ldr	r3, [r6, #12]
 801d576:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801d578:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801d57a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d57e:	43db      	mvns	r3, r3
 801d580:	061b      	lsls	r3, r3, #24
 801d582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801d586:	406b      	eors	r3, r5
 801d588:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801d58a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d58e:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801d590:	4544      	cmp	r4, r8
 801d592:	d290      	bcs.n	801d4b6 <lfs_dir_commitcrc+0x9e>
 801d594:	697b      	ldr	r3, [r7, #20]
 801d596:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d598:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d59a:	4413      	add	r3, r2
 801d59c:	42a3      	cmp	r3, r4
 801d59e:	d894      	bhi.n	801d4ca <lfs_dir_commitcrc+0xb2>
 801d5a0:	e789      	b.n	801d4b6 <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801d5a2:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801d5a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d5a8:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801d5aa:	aa09      	add	r2, sp, #36	@ 0x24
 801d5ac:	9203      	str	r2, [sp, #12]
 801d5ae:	ebab 0203 	sub.w	r2, fp, r3
 801d5b2:	9202      	str	r2, [sp, #8]
 801d5b4:	9301      	str	r3, [sp, #4]
 801d5b6:	6833      	ldr	r3, [r6, #0]
 801d5b8:	9300      	str	r3, [sp, #0]
 801d5ba:	f10b 0304 	add.w	r3, fp, #4
 801d5be:	463a      	mov	r2, r7
 801d5c0:	2100      	movs	r1, #0
 801d5c2:	4638      	mov	r0, r7
 801d5c4:	f7fe fe08 	bl	801c1d8 <lfs_bd_crc>
    if (err) {
 801d5c8:	4603      	mov	r3, r0
 801d5ca:	b9a0      	cbnz	r0, 801d5f6 <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801d5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5ce:	9a05      	ldr	r2, [sp, #20]
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d114      	bne.n	801d5fe <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801d5d4:	ab09      	add	r3, sp, #36	@ 0x24
 801d5d6:	9303      	str	r3, [sp, #12]
 801d5d8:	2304      	movs	r3, #4
 801d5da:	9302      	str	r3, [sp, #8]
 801d5dc:	f8cd b004 	str.w	fp, [sp, #4]
 801d5e0:	6832      	ldr	r2, [r6, #0]
 801d5e2:	9200      	str	r2, [sp, #0]
 801d5e4:	463a      	mov	r2, r7
 801d5e6:	2100      	movs	r1, #0
 801d5e8:	4638      	mov	r0, r7
 801d5ea:	f7fe fdf5 	bl	801c1d8 <lfs_bd_crc>
    if (err) {
 801d5ee:	4603      	mov	r3, r0
 801d5f0:	b908      	cbnz	r0, 801d5f6 <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801d5f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d5f4:	b932      	cbnz	r2, 801d604 <lfs_dir_commitcrc+0x1ec>
}
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	b00b      	add	sp, #44	@ 0x2c
 801d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801d5fe:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d602:	e7f8      	b.n	801d5f6 <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801d604:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d608:	e7f5      	b.n	801d5f6 <lfs_dir_commitcrc+0x1de>
 801d60a:	bf00      	nop
 801d60c:	5ffffc08 	.word	0x5ffffc08

0801d610 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d614:	b09b      	sub	sp, #108	@ 0x6c
 801d616:	4605      	mov	r5, r0
 801d618:	460c      	mov	r4, r1
 801d61a:	4616      	mov	r6, r2
 801d61c:	461f      	mov	r7, r3
 801d61e:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801d622:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801d626:	f7fd fe7f 	bl	801b328 <lfs_dir_needsrelocation>
    dir->rev += 1;
 801d62a:	68a3      	ldr	r3, [r4, #8]
 801d62c:	3301      	adds	r3, #1
 801d62e:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801d630:	4681      	mov	r9, r0
 801d632:	2800      	cmp	r0, #0
 801d634:	d034      	beq.n	801d6a0 <lfs_dir_compact+0x90>
 801d636:	2300      	movs	r3, #0
 801d638:	9314      	str	r3, [sp, #80]	@ 0x50
 801d63a:	2301      	movs	r3, #1
 801d63c:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d63e:	6823      	ldr	r3, [r4, #0]
 801d640:	b373      	cbz	r3, 801d6a0 <lfs_dir_compact+0x90>
 801d642:	6862      	ldr	r2, [r4, #4]
 801d644:	2a01      	cmp	r2, #1
 801d646:	d02b      	beq.n	801d6a0 <lfs_dir_compact+0x90>
 801d648:	2b01      	cmp	r3, #1
 801d64a:	d029      	beq.n	801d6a0 <lfs_dir_compact+0x90>
 801d64c:	b342      	cbz	r2, 801d6a0 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801d64e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d652:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801d654:	f1b9 0f00 	cmp.w	r9, #0
 801d658:	f000 810d 	beq.w	801d876 <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d65c:	2300      	movs	r3, #0
 801d65e:	9318      	str	r3, [sp, #96]	@ 0x60
 801d660:	2301      	movs	r3, #1
 801d662:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d664:	6823      	ldr	r3, [r4, #0]
 801d666:	2b00      	cmp	r3, #0
 801d668:	f000 810f 	beq.w	801d88a <lfs_dir_compact+0x27a>
 801d66c:	6862      	ldr	r2, [r4, #4]
 801d66e:	2a01      	cmp	r2, #1
 801d670:	f000 810b 	beq.w	801d88a <lfs_dir_compact+0x27a>
 801d674:	2b01      	cmp	r3, #1
 801d676:	f000 8108 	beq.w	801d88a <lfs_dir_compact+0x27a>
 801d67a:	2a00      	cmp	r2, #0
 801d67c:	f000 8105 	beq.w	801d88a <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801d680:	1d21      	adds	r1, r4, #4
 801d682:	4628      	mov	r0, r5
 801d684:	f7ff f9d0 	bl	801ca28 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801d688:	4603      	mov	r3, r0
 801d68a:	b330      	cbz	r0, 801d6da <lfs_dir_compact+0xca>
 801d68c:	f110 0f1c 	cmn.w	r0, #28
 801d690:	d11f      	bne.n	801d6d2 <lfs_dir_compact+0xc2>
 801d692:	f1b9 0f00 	cmp.w	r9, #0
 801d696:	d01c      	beq.n	801d6d2 <lfs_dir_compact+0xc2>
        relocated = true;
 801d698:	46cb      	mov	fp, r9
        tired = false;
 801d69a:	f04f 0900 	mov.w	r9, #0
 801d69e:	e001      	b.n	801d6a4 <lfs_dir_compact+0x94>
    bool relocated = false;
 801d6a0:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801d6a4:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801d6a6:	930e      	str	r3, [sp, #56]	@ 0x38
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d6b0:	9210      	str	r2, [sp, #64]	@ 0x40
 801d6b2:	9211      	str	r2, [sp, #68]	@ 0x44
 801d6b4:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801d6b6:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d6b8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d6ba:	b19b      	cbz	r3, 801d6e4 <lfs_dir_compact+0xd4>
 801d6bc:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801d6be:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801d6c0:	6861      	ldr	r1, [r4, #4]
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	f7fd fe8e 	bl	801b3e4 <lfs_bd_erase>
            if (err) {
 801d6c8:	4603      	mov	r3, r0
 801d6ca:	b170      	cbz	r0, 801d6ea <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801d6cc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d6d0:	d0bd      	beq.n	801d64e <lfs_dir_compact+0x3e>
}
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	b01b      	add	sp, #108	@ 0x6c
 801d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801d6da:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801d6de:	f04f 0b01 	mov.w	fp, #1
 801d6e2:	e7df      	b.n	801d6a4 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d6e4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d6e6:	3b08      	subs	r3, #8
 801d6e8:	e7e9      	b.n	801d6be <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801d6ea:	2304      	movs	r3, #4
 801d6ec:	f104 0208 	add.w	r2, r4, #8
 801d6f0:	a90e      	add	r1, sp, #56	@ 0x38
 801d6f2:	4628      	mov	r0, r5
 801d6f4:	f7ff fe0a 	bl	801d30c <lfs_dir_commitprog>
            if (err) {
 801d6f8:	4603      	mov	r3, r0
 801d6fa:	b118      	cbz	r0, 801d704 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801d6fc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d700:	d1e7      	bne.n	801d6d2 <lfs_dir_compact+0xc2>
 801d702:	e7a4      	b.n	801d64e <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d704:	9516      	str	r5, [sp, #88]	@ 0x58
 801d706:	ab0e      	add	r3, sp, #56	@ 0x38
 801d708:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801d70a:	ab16      	add	r3, sp, #88	@ 0x58
 801d70c:	9308      	str	r3, [sp, #32]
 801d70e:	4b65      	ldr	r3, [pc, #404]	@ (801d8a4 <lfs_dir_compact+0x294>)
 801d710:	9307      	str	r3, [sp, #28]
 801d712:	f1c8 0300 	rsb	r3, r8, #0
 801d716:	b21b      	sxth	r3, r3
 801d718:	9306      	str	r3, [sp, #24]
 801d71a:	f8cd a014 	str.w	sl, [sp, #20]
 801d71e:	f8cd 8010 	str.w	r8, [sp, #16]
 801d722:	2200      	movs	r2, #0
 801d724:	9203      	str	r2, [sp, #12]
 801d726:	4b60      	ldr	r3, [pc, #384]	@ (801d8a8 <lfs_dir_compact+0x298>)
 801d728:	9302      	str	r3, [sp, #8]
 801d72a:	9701      	str	r7, [sp, #4]
 801d72c:	9600      	str	r6, [sp, #0]
 801d72e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d732:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801d734:	4628      	mov	r0, r5
 801d736:	f7fe f911 	bl	801b95c <lfs_dir_traverse>
            if (err) {
 801d73a:	4603      	mov	r3, r0
 801d73c:	b118      	cbz	r0, 801d746 <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801d73e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d742:	d1c6      	bne.n	801d6d2 <lfs_dir_compact+0xc2>
 801d744:	e783      	b.n	801d64e <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d746:	69a2      	ldr	r2, [r4, #24]
 801d748:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d74c:	d02c      	beq.n	801d7a8 <lfs_dir_compact+0x198>
 801d74e:	69e2      	ldr	r2, [r4, #28]
 801d750:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d754:	d026      	beq.n	801d7a4 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801d756:	f013 0f01 	tst.w	r3, #1
 801d75a:	d027      	beq.n	801d7ac <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801d75c:	2300      	movs	r3, #0
 801d75e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d760:	930c      	str	r3, [sp, #48]	@ 0x30
 801d762:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801d764:	f1bb 0f00 	cmp.w	fp, #0
 801d768:	d033      	beq.n	801d7d2 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801d76a:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801d76e:	a80b      	add	r0, sp, #44	@ 0x2c
 801d770:	f7fd fd10 	bl	801b194 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d776:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d77a:	f023 0303 	bic.w	r3, r3, #3
 801d77e:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d780:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d782:	4621      	mov	r1, r4
 801d784:	4628      	mov	r0, r5
 801d786:	f7fe f859 	bl	801b83c <lfs_dir_getgstate>
            if (err) {
 801d78a:	4603      	mov	r3, r0
 801d78c:	2800      	cmp	r0, #0
 801d78e:	d1a0      	bne.n	801d6d2 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801d790:	2b02      	cmp	r3, #2
 801d792:	dc29      	bgt.n	801d7e8 <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801d794:	aa1a      	add	r2, sp, #104	@ 0x68
 801d796:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d79a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801d79e:	bb92      	cbnz	r2, 801d806 <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801d7a0:	3301      	adds	r3, #1
 801d7a2:	e7f5      	b.n	801d790 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d7a4:	2301      	movs	r3, #1
 801d7a6:	e7d6      	b.n	801d756 <lfs_dir_compact+0x146>
 801d7a8:	2301      	movs	r3, #1
 801d7aa:	e7d4      	b.n	801d756 <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801d7ac:	7de2      	ldrb	r2, [r4, #23]
 801d7ae:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801d7b2:	f104 0318 	add.w	r3, r4, #24
 801d7b6:	493d      	ldr	r1, [pc, #244]	@ (801d8ac <lfs_dir_compact+0x29c>)
 801d7b8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801d7bc:	a90e      	add	r1, sp, #56	@ 0x38
 801d7be:	4628      	mov	r0, r5
 801d7c0:	f7ff fdc4 	bl	801d34c <lfs_dir_commitattr>
                if (err) {
 801d7c4:	4603      	mov	r3, r0
 801d7c6:	2800      	cmp	r0, #0
 801d7c8:	d0c8      	beq.n	801d75c <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801d7ca:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d7ce:	d180      	bne.n	801d6d2 <lfs_dir_compact+0xc2>
 801d7d0:	e73d      	b.n	801d64e <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801d7d2:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801d7d6:	a80b      	add	r0, sp, #44	@ 0x2c
 801d7d8:	f7fd fcdc 	bl	801b194 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801d7dc:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801d7e0:	a80b      	add	r0, sp, #44	@ 0x2c
 801d7e2:	f7fd fcd7 	bl	801b194 <lfs_gstate_xor>
 801d7e6:	e7c0      	b.n	801d76a <lfs_dir_compact+0x15a>
    return true;
 801d7e8:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801d7ea:	b973      	cbnz	r3, 801d80a <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801d7ec:	ab0b      	add	r3, sp, #44	@ 0x2c
 801d7ee:	4a30      	ldr	r2, [pc, #192]	@ (801d8b0 <lfs_dir_compact+0x2a0>)
 801d7f0:	a90e      	add	r1, sp, #56	@ 0x38
 801d7f2:	4628      	mov	r0, r5
 801d7f4:	f7ff fdaa 	bl	801d34c <lfs_dir_commitattr>
                if (err) {
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	b130      	cbz	r0, 801d80a <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801d7fc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d800:	f47f af67 	bne.w	801d6d2 <lfs_dir_compact+0xc2>
 801d804:	e723      	b.n	801d64e <lfs_dir_compact+0x3e>
            return false;
 801d806:	2300      	movs	r3, #0
 801d808:	e7ef      	b.n	801d7ea <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801d80a:	a90e      	add	r1, sp, #56	@ 0x38
 801d80c:	4628      	mov	r0, r5
 801d80e:	f7ff fe03 	bl	801d418 <lfs_dir_commitcrc>
            if (err) {
 801d812:	4603      	mov	r3, r0
 801d814:	b120      	cbz	r0, 801d820 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801d816:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d81a:	f47f af5a 	bne.w	801d6d2 <lfs_dir_compact+0xc2>
 801d81e:	e716      	b.n	801d64e <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d822:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d824:	6a12      	ldr	r2, [r2, #32]
 801d826:	fbb3 f1f2 	udiv	r1, r3, r2
 801d82a:	fb02 3311 	mls	r3, r2, r1, r3
 801d82e:	b9db      	cbnz	r3, 801d868 <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801d830:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801d832:	6862      	ldr	r2, [r4, #4]
 801d834:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801d836:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801d838:	ebaa 0808 	sub.w	r8, sl, r8
 801d83c:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801d840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d842:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801d844:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d846:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801d848:	2200      	movs	r2, #0
 801d84a:	64aa      	str	r2, [r5, #72]	@ 0x48
 801d84c:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801d84e:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801d850:	f1bb 0f00 	cmp.w	fp, #0
 801d854:	d106      	bne.n	801d864 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801d856:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801d85a:	3530      	adds	r5, #48	@ 0x30
 801d85c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801d864:	465b      	mov	r3, fp
 801d866:	e734      	b.n	801d6d2 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d868:	4b12      	ldr	r3, [pc, #72]	@ (801d8b4 <lfs_dir_compact+0x2a4>)
 801d86a:	4a13      	ldr	r2, [pc, #76]	@ (801d8b8 <lfs_dir_compact+0x2a8>)
 801d86c:	f640 0106 	movw	r1, #2054	@ 0x806
 801d870:	4812      	ldr	r0, [pc, #72]	@ (801d8bc <lfs_dir_compact+0x2ac>)
 801d872:	f00c fcab 	bl	802a1cc <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801d876:	4b12      	ldr	r3, [pc, #72]	@ (801d8c0 <lfs_dir_compact+0x2b0>)
 801d878:	9300      	str	r3, [sp, #0]
 801d87a:	6863      	ldr	r3, [r4, #4]
 801d87c:	f640 0218 	movw	r2, #2072	@ 0x818
 801d880:	490e      	ldr	r1, [pc, #56]	@ (801d8bc <lfs_dir_compact+0x2ac>)
 801d882:	4810      	ldr	r0, [pc, #64]	@ (801d8c4 <lfs_dir_compact+0x2b4>)
 801d884:	f00c fcd6 	bl	802a234 <printf>
 801d888:	e6e8      	b.n	801d65c <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801d88a:	4b0d      	ldr	r3, [pc, #52]	@ (801d8c0 <lfs_dir_compact+0x2b0>)
 801d88c:	9300      	str	r3, [sp, #0]
 801d88e:	6863      	ldr	r3, [r4, #4]
 801d890:	f640 021d 	movw	r2, #2077	@ 0x81d
 801d894:	4909      	ldr	r1, [pc, #36]	@ (801d8bc <lfs_dir_compact+0x2ac>)
 801d896:	480c      	ldr	r0, [pc, #48]	@ (801d8c8 <lfs_dir_compact+0x2b8>)
 801d898:	f00c fccc 	bl	802a234 <printf>
            return LFS_ERR_NOSPC;
 801d89c:	f06f 031b 	mvn.w	r3, #27
 801d8a0:	e717      	b.n	801d6d2 <lfs_dir_compact+0xc2>
 801d8a2:	bf00      	nop
 801d8a4:	0801d407 	.word	0x0801d407
 801d8a8:	400ffc00 	.word	0x400ffc00
 801d8ac:	000ffc08 	.word	0x000ffc08
 801d8b0:	7ffffc0c 	.word	0x7ffffc0c
 801d8b4:	08039760 	.word	0x08039760
 801d8b8:	0803a194 	.word	0x0803a194
 801d8bc:	080394c4 	.word	0x080394c4
 801d8c0:	08036fac 	.word	0x08036fac
 801d8c4:	080396dc 	.word	0x080396dc
 801d8c8:	08039788 	.word	0x08039788

0801d8cc <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801d8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d8d0:	b08d      	sub	sp, #52	@ 0x34
 801d8d2:	4605      	mov	r5, r0
 801d8d4:	460c      	mov	r4, r1
 801d8d6:	4691      	mov	r9, r2
 801d8d8:	461e      	mov	r6, r3
 801d8da:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801d8de:	a904      	add	r1, sp, #16
 801d8e0:	f7ff f8fa 	bl	801cad8 <lfs_dir_alloc>
    if (err) {
 801d8e4:	4607      	mov	r7, r0
 801d8e6:	b118      	cbz	r0, 801d8f0 <lfs_dir_split+0x24>
}
 801d8e8:	4638      	mov	r0, r7
 801d8ea:	b00d      	add	sp, #52	@ 0x34
 801d8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801d8f0:	7de3      	ldrb	r3, [r4, #23]
 801d8f2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801d8f6:	69a3      	ldr	r3, [r4, #24]
 801d8f8:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801d8fa:	69e3      	ldr	r3, [r4, #28]
 801d8fc:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801d8fe:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d902:	9302      	str	r3, [sp, #8]
 801d904:	f8cd 8004 	str.w	r8, [sp, #4]
 801d908:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d90a:	9300      	str	r3, [sp, #0]
 801d90c:	4633      	mov	r3, r6
 801d90e:	464a      	mov	r2, r9
 801d910:	a904      	add	r1, sp, #16
 801d912:	4628      	mov	r0, r5
 801d914:	f7ff fe7c 	bl	801d610 <lfs_dir_compact>
    if (res < 0) {
 801d918:	2800      	cmp	r0, #0
 801d91a:	db17      	blt.n	801d94c <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801d91c:	9904      	ldr	r1, [sp, #16]
 801d91e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801d920:	9a05      	ldr	r2, [sp, #20]
 801d922:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801d924:	2301      	movs	r3, #1
 801d926:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d928:	6823      	ldr	r3, [r4, #0]
 801d92a:	6a28      	ldr	r0, [r5, #32]
 801d92c:	4283      	cmp	r3, r0
 801d92e:	d007      	beq.n	801d940 <lfs_dir_split+0x74>
 801d930:	6866      	ldr	r6, [r4, #4]
 801d932:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801d934:	42a6      	cmp	r6, r4
 801d936:	d003      	beq.n	801d940 <lfs_dir_split+0x74>
 801d938:	42a3      	cmp	r3, r4
 801d93a:	d001      	beq.n	801d940 <lfs_dir_split+0x74>
 801d93c:	42b0      	cmp	r0, r6
 801d93e:	d1d3      	bne.n	801d8e8 <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801d940:	f1b8 0f00 	cmp.w	r8, #0
 801d944:	d1d0      	bne.n	801d8e8 <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801d946:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801d948:	626a      	str	r2, [r5, #36]	@ 0x24
 801d94a:	e7cd      	b.n	801d8e8 <lfs_dir_split+0x1c>
        return res;
 801d94c:	4607      	mov	r7, r0
 801d94e:	e7cb      	b.n	801d8e8 <lfs_dir_split+0x1c>

0801d950 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d954:	b091      	sub	sp, #68	@ 0x44
 801d956:	4607      	mov	r7, r0
 801d958:	4615      	mov	r5, r2
 801d95a:	4699      	mov	r9, r3
 801d95c:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801d960:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801d964:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801d968:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d96a:	e04c      	b.n	801da06 <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801d96c:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801d96e:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d970:	4403      	add	r3, r0
 801d972:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d974:	fbb3 f1f0 	udiv	r1, r3, r0
 801d978:	fb00 3111 	mls	r1, r0, r1, r3
 801d97c:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801d97e:	4293      	cmp	r3, r2
 801d980:	bf28      	it	cs
 801d982:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801d984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d986:	429a      	cmp	r2, r3
 801d988:	d92d      	bls.n	801d9e6 <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801d98a:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801d98e:	eba6 0804 	sub.w	r8, r6, r4
 801d992:	f1b8 0f01 	cmp.w	r8, #1
 801d996:	d926      	bls.n	801d9e6 <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801d998:	2200      	movs	r2, #0
 801d99a:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801d99c:	b2a1      	uxth	r1, r4
 801d99e:	ab0d      	add	r3, sp, #52	@ 0x34
 801d9a0:	9308      	str	r3, [sp, #32]
 801d9a2:	4b4d      	ldr	r3, [pc, #308]	@ (801dad8 <lfs_dir_splittingcompact+0x188>)
 801d9a4:	9307      	str	r3, [sp, #28]
 801d9a6:	424b      	negs	r3, r1
 801d9a8:	b21b      	sxth	r3, r3
 801d9aa:	9306      	str	r3, [sp, #24]
 801d9ac:	9605      	str	r6, [sp, #20]
 801d9ae:	9104      	str	r1, [sp, #16]
 801d9b0:	9203      	str	r2, [sp, #12]
 801d9b2:	4b4a      	ldr	r3, [pc, #296]	@ (801dadc <lfs_dir_splittingcompact+0x18c>)
 801d9b4:	9302      	str	r3, [sp, #8]
 801d9b6:	f8cd 9004 	str.w	r9, [sp, #4]
 801d9ba:	9500      	str	r5, [sp, #0]
 801d9bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d9c0:	4651      	mov	r1, sl
 801d9c2:	4638      	mov	r0, r7
 801d9c4:	f7fd ffca 	bl	801b95c <lfs_dir_traverse>
            if (err) {
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	2800      	cmp	r0, #0
 801d9cc:	d15b      	bne.n	801da86 <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801d9ce:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801d9d2:	d8da      	bhi.n	801d98a <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801d9d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801d9d6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801d9d8:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801d9dc:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801d9de:	2800      	cmp	r0, #0
 801d9e0:	d0c4      	beq.n	801d96c <lfs_dir_splittingcompact+0x1c>
 801d9e2:	0843      	lsrs	r3, r0, #1
 801d9e4:	e7c3      	b.n	801d96e <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801d9e6:	455c      	cmp	r4, fp
 801d9e8:	d022      	beq.n	801da30 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d9ea:	b2a4      	uxth	r4, r4
 801d9ec:	9602      	str	r6, [sp, #8]
 801d9ee:	9401      	str	r4, [sp, #4]
 801d9f0:	f8cd a000 	str.w	sl, [sp]
 801d9f4:	464b      	mov	r3, r9
 801d9f6:	462a      	mov	r2, r5
 801d9f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d9fa:	4638      	mov	r0, r7
 801d9fc:	f7ff ff66 	bl	801d8cc <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801da00:	4603      	mov	r3, r0
 801da02:	b910      	cbnz	r0, 801da0a <lfs_dir_splittingcompact+0xba>
            end = split;
 801da04:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801da06:	465c      	mov	r4, fp
        while (end - split > 1) {
 801da08:	e7c1      	b.n	801d98e <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801da0a:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801da0e:	f110 0f1c 	cmn.w	r0, #28
 801da12:	d138      	bne.n	801da86 <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801da14:	4b32      	ldr	r3, [pc, #200]	@ (801dae0 <lfs_dir_splittingcompact+0x190>)
 801da16:	9301      	str	r3, [sp, #4]
 801da18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801da1c:	9300      	str	r3, [sp, #0]
 801da1e:	f8d8 3000 	ldr.w	r3, [r8]
 801da22:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801da26:	492f      	ldr	r1, [pc, #188]	@ (801dae4 <lfs_dir_splittingcompact+0x194>)
 801da28:	482f      	ldr	r0, [pc, #188]	@ (801dae8 <lfs_dir_splittingcompact+0x198>)
 801da2a:	f00c fc03 	bl	802a234 <printf>
            break;
 801da2e:	e001      	b.n	801da34 <lfs_dir_splittingcompact+0xe4>
 801da30:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801da34:	4641      	mov	r1, r8
 801da36:	4638      	mov	r0, r7
 801da38:	f7fd fc76 	bl	801b328 <lfs_dir_needsrelocation>
 801da3c:	b1b8      	cbz	r0, 801da6e <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801da3e:	2300      	movs	r3, #0
 801da40:	930e      	str	r3, [sp, #56]	@ 0x38
 801da42:	2301      	movs	r3, #1
 801da44:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801da46:	f8d8 2000 	ldr.w	r2, [r8]
 801da4a:	b132      	cbz	r2, 801da5a <lfs_dir_splittingcompact+0x10a>
 801da4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801da50:	2b01      	cmp	r3, #1
 801da52:	d002      	beq.n	801da5a <lfs_dir_splittingcompact+0x10a>
 801da54:	2a01      	cmp	r2, #1
 801da56:	d000      	beq.n	801da5a <lfs_dir_splittingcompact+0x10a>
 801da58:	b94b      	cbnz	r3, 801da6e <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801da5a:	4638      	mov	r0, r7
 801da5c:	f7ff fbe4 	bl	801d228 <lfs_fs_size_>
        if (size < 0) {
 801da60:	1e03      	subs	r3, r0, #0
 801da62:	db10      	blt.n	801da86 <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801da64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801da66:	1ad3      	subs	r3, r2, r3
 801da68:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801da6c:	d80f      	bhi.n	801da8e <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801da6e:	9602      	str	r6, [sp, #8]
 801da70:	f8cd b004 	str.w	fp, [sp, #4]
 801da74:	f8cd a000 	str.w	sl, [sp]
 801da78:	464b      	mov	r3, r9
 801da7a:	462a      	mov	r2, r5
 801da7c:	4641      	mov	r1, r8
 801da7e:	4638      	mov	r0, r7
 801da80:	f7ff fdc6 	bl	801d610 <lfs_dir_compact>
 801da84:	4603      	mov	r3, r0
}
 801da86:	4618      	mov	r0, r3
 801da88:	b011      	add	sp, #68	@ 0x44
 801da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801da8e:	4b14      	ldr	r3, [pc, #80]	@ (801dae0 <lfs_dir_splittingcompact+0x190>)
 801da90:	9300      	str	r3, [sp, #0]
 801da92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801da96:	f640 0286 	movw	r2, #2182	@ 0x886
 801da9a:	4912      	ldr	r1, [pc, #72]	@ (801dae4 <lfs_dir_splittingcompact+0x194>)
 801da9c:	4813      	ldr	r0, [pc, #76]	@ (801daec <lfs_dir_splittingcompact+0x19c>)
 801da9e:	f00c fbc9 	bl	802a234 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801daa2:	9602      	str	r6, [sp, #8]
 801daa4:	f8cd b004 	str.w	fp, [sp, #4]
 801daa8:	f8cd a000 	str.w	sl, [sp]
 801daac:	464b      	mov	r3, r9
 801daae:	462a      	mov	r2, r5
 801dab0:	4641      	mov	r1, r8
 801dab2:	4638      	mov	r0, r7
 801dab4:	f7ff ff0a 	bl	801d8cc <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801dab8:	4603      	mov	r3, r0
 801daba:	b150      	cbz	r0, 801dad2 <lfs_dir_splittingcompact+0x182>
 801dabc:	f110 0f1c 	cmn.w	r0, #28
 801dac0:	d1e1      	bne.n	801da86 <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801dac2:	4b07      	ldr	r3, [pc, #28]	@ (801dae0 <lfs_dir_splittingcompact+0x190>)
 801dac4:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801dac8:	4906      	ldr	r1, [pc, #24]	@ (801dae4 <lfs_dir_splittingcompact+0x194>)
 801daca:	4809      	ldr	r0, [pc, #36]	@ (801daf0 <lfs_dir_splittingcompact+0x1a0>)
 801dacc:	f00c fbb2 	bl	802a234 <printf>
 801dad0:	e7cd      	b.n	801da6e <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801dad2:	2601      	movs	r6, #1
 801dad4:	e7cb      	b.n	801da6e <lfs_dir_splittingcompact+0x11e>
 801dad6:	bf00      	nop
 801dad8:	0801b30d 	.word	0x0801b30d
 801dadc:	400ffc00 	.word	0x400ffc00
 801dae0:	08036fac 	.word	0x08036fac
 801dae4:	080394c4 	.word	0x080394c4
 801dae8:	080397c0 	.word	0x080397c0
 801daec:	080397f0 	.word	0x080397f0
 801daf0:	08039820 	.word	0x08039820

0801daf4 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daf8:	b09b      	sub	sp, #108	@ 0x6c
 801dafa:	4607      	mov	r7, r0
 801dafc:	460e      	mov	r6, r1
 801dafe:	4691      	mov	r9, r2
 801db00:	461d      	mov	r5, r3
 801db02:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801db06:	2300      	movs	r3, #0
    bool hasdelete = false;
 801db08:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801db0a:	e003      	b.n	801db14 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801db0c:	8ab2      	ldrh	r2, [r6, #20]
 801db0e:	3201      	adds	r2, #1
 801db10:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801db12:	3301      	adds	r3, #1
 801db14:	4543      	cmp	r3, r8
 801db16:	da2d      	bge.n	801db74 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801db18:	00d8      	lsls	r0, r3, #3
 801db1a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801db1e:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801db22:	0d11      	lsrs	r1, r2, #20
 801db24:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801db28:	f240 4e01 	movw	lr, #1025	@ 0x401
 801db2c:	4572      	cmp	r2, lr
 801db2e:	d0ed      	beq.n	801db0c <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801db30:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801db34:	4572      	cmp	r2, lr
 801db36:	d00f      	beq.n	801db58 <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801db38:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801db3c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801db40:	d1e7      	bne.n	801db12 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801db42:	6862      	ldr	r2, [r4, #4]
 801db44:	6812      	ldr	r2, [r2, #0]
 801db46:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801db48:	6862      	ldr	r2, [r4, #4]
 801db4a:	6852      	ldr	r2, [r2, #4]
 801db4c:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801db4e:	582a      	ldr	r2, [r5, r0]
 801db50:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801db54:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801db56:	e7dc      	b.n	801db12 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801db58:	8ab2      	ldrh	r2, [r6, #20]
 801db5a:	b122      	cbz	r2, 801db66 <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801db5c:	3a01      	subs	r2, #1
 801db5e:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801db60:	f04f 0c01 	mov.w	ip, #1
 801db64:	e7d5      	b.n	801db12 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801db66:	4ba0      	ldr	r3, [pc, #640]	@ (801dde8 <lfs_dir_relocatingcommit+0x2f4>)
 801db68:	4aa0      	ldr	r2, [pc, #640]	@ (801ddec <lfs_dir_relocatingcommit+0x2f8>)
 801db6a:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801db6e:	48a0      	ldr	r0, [pc, #640]	@ (801ddf0 <lfs_dir_relocatingcommit+0x2fc>)
 801db70:	f00c fb2c 	bl	802a1cc <__assert_func>
    if (hasdelete && dir->count == 0) {
 801db74:	f1bc 0f00 	cmp.w	ip, #0
 801db78:	d01b      	beq.n	801dbb2 <lfs_dir_relocatingcommit+0xbe>
 801db7a:	8ab3      	ldrh	r3, [r6, #20]
 801db7c:	b9cb      	cbnz	r3, 801dbb2 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801db7e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db80:	b15b      	cbz	r3, 801db9a <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801db82:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801db84:	4631      	mov	r1, r6
 801db86:	4638      	mov	r0, r7
 801db88:	f7ff fb5e 	bl	801d248 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801db8c:	4682      	mov	sl, r0
 801db8e:	b158      	cbz	r0, 801dba8 <lfs_dir_relocatingcommit+0xb4>
 801db90:	f110 0f02 	cmn.w	r0, #2
 801db94:	f040 8159 	bne.w	801de4a <lfs_dir_relocatingcommit+0x356>
 801db98:	e00b      	b.n	801dbb2 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801db9a:	4b96      	ldr	r3, [pc, #600]	@ (801ddf4 <lfs_dir_relocatingcommit+0x300>)
 801db9c:	4a93      	ldr	r2, [pc, #588]	@ (801ddec <lfs_dir_relocatingcommit+0x2f8>)
 801db9e:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801dba2:	4893      	ldr	r0, [pc, #588]	@ (801ddf0 <lfs_dir_relocatingcommit+0x2fc>)
 801dba4:	f00c fb12 	bl	802a1cc <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801dba8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dbaa:	7ddb      	ldrb	r3, [r3, #23]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	f040 80bf 	bne.w	801dd30 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801dbb2:	7db4      	ldrb	r4, [r6, #22]
 801dbb4:	2c00      	cmp	r4, #0
 801dbb6:	d02e      	beq.n	801dc16 <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801dbb8:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801dbba:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801dbbc:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801dbbe:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801dbc0:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801dbc2:	9212      	str	r2, [sp, #72]	@ 0x48
 801dbc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dbc8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dbca:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801dbcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801dbce:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d03c      	beq.n	801dc4e <lfs_dir_relocatingcommit+0x15a>
 801dbd4:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801dbd6:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801dbd8:	9718      	str	r7, [sp, #96]	@ 0x60
 801dbda:	ab10      	add	r3, sp, #64	@ 0x40
 801dbdc:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801dbde:	ab18      	add	r3, sp, #96	@ 0x60
 801dbe0:	9308      	str	r3, [sp, #32]
 801dbe2:	4b85      	ldr	r3, [pc, #532]	@ (801ddf8 <lfs_dir_relocatingcommit+0x304>)
 801dbe4:	9307      	str	r3, [sp, #28]
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	9306      	str	r3, [sp, #24]
 801dbea:	9305      	str	r3, [sp, #20]
 801dbec:	9304      	str	r3, [sp, #16]
 801dbee:	9303      	str	r3, [sp, #12]
 801dbf0:	9302      	str	r3, [sp, #8]
 801dbf2:	f8cd 8004 	str.w	r8, [sp, #4]
 801dbf6:	9500      	str	r5, [sp, #0]
 801dbf8:	6933      	ldr	r3, [r6, #16]
 801dbfa:	68f2      	ldr	r2, [r6, #12]
 801dbfc:	4631      	mov	r1, r6
 801dbfe:	4638      	mov	r0, r7
 801dc00:	f7fd feac 	bl	801b95c <lfs_dir_traverse>
        if (err) {
 801dc04:	4682      	mov	sl, r0
 801dc06:	b328      	cbz	r0, 801dc54 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801dc08:	f110 0f1c 	cmn.w	r0, #28
 801dc0c:	d003      	beq.n	801dc16 <lfs_dir_relocatingcommit+0x122>
 801dc0e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dc12:	f040 811a 	bne.w	801de4a <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801dc16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc1a:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801dc1c:	8ab3      	ldrh	r3, [r6, #20]
 801dc1e:	9302      	str	r3, [sp, #8]
 801dc20:	2300      	movs	r3, #0
 801dc22:	9301      	str	r3, [sp, #4]
 801dc24:	9600      	str	r6, [sp, #0]
 801dc26:	4643      	mov	r3, r8
 801dc28:	462a      	mov	r2, r5
 801dc2a:	4631      	mov	r1, r6
 801dc2c:	4638      	mov	r0, r7
 801dc2e:	f7ff fe8f 	bl	801d950 <lfs_dir_splittingcompact>
    if (state < 0) {
 801dc32:	1e01      	subs	r1, r0, #0
 801dc34:	f2c0 8106 	blt.w	801de44 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801dc38:	f8d9 b000 	ldr.w	fp, [r9]
 801dc3c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801dc40:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801dc44:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801dc46:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801dc48:	4692      	mov	sl, r2
 801dc4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801dc4c:	e0db      	b.n	801de06 <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801dc4e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801dc50:	3b08      	subs	r3, #8
 801dc52:	e7c0      	b.n	801dbd6 <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801dc54:	2300      	movs	r3, #0
 801dc56:	930d      	str	r3, [sp, #52]	@ 0x34
 801dc58:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc5a:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801dc5c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801dc60:	a80d      	add	r0, sp, #52	@ 0x34
 801dc62:	f7fd fa97 	bl	801b194 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801dc66:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801dc6a:	a80d      	add	r0, sp, #52	@ 0x34
 801dc6c:	f7fd fa92 	bl	801b194 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801dc70:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801dc74:	a80d      	add	r0, sp, #52	@ 0x34
 801dc76:	f7fd fa8d 	bl	801b194 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801dc7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc7c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801dc80:	f023 0303 	bic.w	r3, r3, #3
 801dc84:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801dc86:	e001      	b.n	801dc8c <lfs_dir_relocatingcommit+0x198>
 801dc88:	f10a 0a01 	add.w	sl, sl, #1
 801dc8c:	f1ba 0f02 	cmp.w	sl, #2
 801dc90:	dc07      	bgt.n	801dca2 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801dc92:	ab1a      	add	r3, sp, #104	@ 0x68
 801dc94:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801dc98:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d0f3      	beq.n	801dc88 <lfs_dir_relocatingcommit+0x194>
            return false;
 801dca0:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801dca2:	b9c4      	cbnz	r4, 801dcd6 <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801dca4:	aa0d      	add	r2, sp, #52	@ 0x34
 801dca6:	4631      	mov	r1, r6
 801dca8:	4638      	mov	r0, r7
 801dcaa:	f7fd fdc7 	bl	801b83c <lfs_dir_getgstate>
            if (err) {
 801dcae:	4682      	mov	sl, r0
 801dcb0:	2800      	cmp	r0, #0
 801dcb2:	f040 80ca 	bne.w	801de4a <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801dcb6:	ab0d      	add	r3, sp, #52	@ 0x34
 801dcb8:	4a50      	ldr	r2, [pc, #320]	@ (801ddfc <lfs_dir_relocatingcommit+0x308>)
 801dcba:	a910      	add	r1, sp, #64	@ 0x40
 801dcbc:	4638      	mov	r0, r7
 801dcbe:	f7ff fb45 	bl	801d34c <lfs_dir_commitattr>
            if (err) {
 801dcc2:	4682      	mov	sl, r0
 801dcc4:	b138      	cbz	r0, 801dcd6 <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801dcc6:	f110 0f1c 	cmn.w	r0, #28
 801dcca:	d0a4      	beq.n	801dc16 <lfs_dir_relocatingcommit+0x122>
 801dccc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dcd0:	f040 80bb 	bne.w	801de4a <lfs_dir_relocatingcommit+0x356>
 801dcd4:	e79f      	b.n	801dc16 <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801dcd6:	a910      	add	r1, sp, #64	@ 0x40
 801dcd8:	4638      	mov	r0, r7
 801dcda:	f7ff fb9d 	bl	801d418 <lfs_dir_commitcrc>
        if (err) {
 801dcde:	4682      	mov	sl, r0
 801dce0:	b138      	cbz	r0, 801dcf2 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801dce2:	f110 0f1c 	cmn.w	r0, #28
 801dce6:	d096      	beq.n	801dc16 <lfs_dir_relocatingcommit+0x122>
 801dce8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801dcec:	f040 80ad 	bne.w	801de4a <lfs_dir_relocatingcommit+0x356>
 801dcf0:	e791      	b.n	801dc16 <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801dcf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dcf4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801dcf6:	6a11      	ldr	r1, [r2, #32]
 801dcf8:	fbb3 f2f1 	udiv	r2, r3, r1
 801dcfc:	fb01 3212 	mls	r2, r1, r2, r3
 801dd00:	b97a      	cbnz	r2, 801dd22 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801dd02:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801dd04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd06:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801dd08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801dd0c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801dd10:	ca07      	ldmia	r2, {r0, r1, r2}
 801dd12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801dd16:	2200      	movs	r2, #0
 801dd18:	64ba      	str	r2, [r7, #72]	@ 0x48
 801dd1a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801dd1c:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801dd1e:	4651      	mov	r1, sl
 801dd20:	e78a      	b.n	801dc38 <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801dd22:	4b37      	ldr	r3, [pc, #220]	@ (801de00 <lfs_dir_relocatingcommit+0x30c>)
 801dd24:	4a31      	ldr	r2, [pc, #196]	@ (801ddec <lfs_dir_relocatingcommit+0x2f8>)
 801dd26:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801dd2a:	4831      	ldr	r0, [pc, #196]	@ (801ddf0 <lfs_dir_relocatingcommit+0x2fc>)
 801dd2c:	f00c fa4e 	bl	802a1cc <__assert_func>
            state = LFS_OK_DROPPED;
 801dd30:	2102      	movs	r1, #2
 801dd32:	e781      	b.n	801dc38 <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801dd34:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801dd38:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dd3c:	4584      	cmp	ip, r0
 801dd3e:	d10e      	bne.n	801dd5e <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801dd40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dd44:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801dd46:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801dd48:	3301      	adds	r3, #1
 801dd4a:	4543      	cmp	r3, r8
 801dd4c:	da34      	bge.n	801ddb8 <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dd4e:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801dd52:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dd56:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801dd5a:	4282      	cmp	r2, r0
 801dd5c:	d0ea      	beq.n	801dd34 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dd5e:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801dd62:	4282      	cmp	r2, r0
 801dd64:	d011      	beq.n	801dd8a <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801dd66:	f240 4001 	movw	r0, #1025	@ 0x401
 801dd6a:	4282      	cmp	r2, r0
 801dd6c:	d1ec      	bne.n	801dd48 <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801dd6e:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801dd70:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801dd74:	428a      	cmp	r2, r1
 801dd76:	d3e7      	bcc.n	801dd48 <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801dd78:	3201      	adds	r2, #1
 801dd7a:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801dd7c:	79a2      	ldrb	r2, [r4, #6]
 801dd7e:	2a02      	cmp	r2, #2
 801dd80:	d1e2      	bne.n	801dd48 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801dd82:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801dd84:	3201      	adds	r2, #1
 801dd86:	62a2      	str	r2, [r4, #40]	@ 0x28
 801dd88:	e7de      	b.n	801dd48 <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801dd8a:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801dd8c:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801dd90:	4560      	cmp	r0, ip
 801dd92:	d9e8      	bls.n	801dd66 <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801dd94:	3801      	subs	r0, #1
 801dd96:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801dd98:	79a2      	ldrb	r2, [r4, #6]
 801dd9a:	2a02      	cmp	r2, #2
 801dd9c:	d1d4      	bne.n	801dd48 <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801dd9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801dda0:	3a01      	subs	r2, #1
 801dda2:	62a2      	str	r2, [r4, #40]	@ 0x28
 801dda4:	e7d0      	b.n	801dd48 <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801dda6:	f104 0220 	add.w	r2, r4, #32
 801ddaa:	f104 0108 	add.w	r1, r4, #8
 801ddae:	4638      	mov	r0, r7
 801ddb0:	f7fe fd24 	bl	801c7fc <lfs_dir_fetch>
                if (err) {
 801ddb4:	2800      	cmp	r0, #0
 801ddb6:	d147      	bne.n	801de48 <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801ddb8:	88a3      	ldrh	r3, [r4, #4]
 801ddba:	8ba1      	ldrh	r1, [r4, #28]
 801ddbc:	428b      	cmp	r3, r1
 801ddbe:	d321      	bcc.n	801de04 <lfs_dir_relocatingcommit+0x310>
 801ddc0:	7fe2      	ldrb	r2, [r4, #31]
 801ddc2:	b1fa      	cbz	r2, 801de04 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ddc4:	6a22      	ldr	r2, [r4, #32]
 801ddc6:	6a38      	ldr	r0, [r7, #32]
 801ddc8:	4282      	cmp	r2, r0
 801ddca:	d0ec      	beq.n	801dda6 <lfs_dir_relocatingcommit+0x2b2>
 801ddcc:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801ddd0:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801ddd4:	45e6      	cmp	lr, ip
 801ddd6:	d0e6      	beq.n	801dda6 <lfs_dir_relocatingcommit+0x2b2>
 801ddd8:	4562      	cmp	r2, ip
 801ddda:	d0e4      	beq.n	801dda6 <lfs_dir_relocatingcommit+0x2b2>
 801dddc:	4570      	cmp	r0, lr
 801ddde:	d0e2      	beq.n	801dda6 <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801dde0:	1a5b      	subs	r3, r3, r1
 801dde2:	80a3      	strh	r3, [r4, #4]
 801dde4:	e7df      	b.n	801dda6 <lfs_dir_relocatingcommit+0x2b2>
 801dde6:	bf00      	nop
 801dde8:	0803984c 	.word	0x0803984c
 801ddec:	0803a1c4 	.word	0x0803a1c4
 801ddf0:	080394c4 	.word	0x080394c4
 801ddf4:	0803985c 	.word	0x0803985c
 801ddf8:	0801d407 	.word	0x0801d407
 801ddfc:	7ffffc0c 	.word	0x7ffffc0c
 801de00:	08039760 	.word	0x08039760
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801de04:	6824      	ldr	r4, [r4, #0]
 801de06:	b1d4      	cbz	r4, 801de3e <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801de08:	68a3      	ldr	r3, [r4, #8]
 801de0a:	459b      	cmp	fp, r3
 801de0c:	d006      	beq.n	801de1c <lfs_dir_relocatingcommit+0x328>
 801de0e:	68e2      	ldr	r2, [r4, #12]
 801de10:	4592      	cmp	sl, r2
 801de12:	d003      	beq.n	801de1c <lfs_dir_relocatingcommit+0x328>
 801de14:	459a      	cmp	sl, r3
 801de16:	d001      	beq.n	801de1c <lfs_dir_relocatingcommit+0x328>
 801de18:	4593      	cmp	fp, r2
 801de1a:	d1f3      	bne.n	801de04 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801de1c:	f104 0c08 	add.w	ip, r4, #8
 801de20:	46b6      	mov	lr, r6
 801de22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801de26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801de2a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801de2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801de32:	f104 0308 	add.w	r3, r4, #8
 801de36:	454b      	cmp	r3, r9
 801de38:	d0be      	beq.n	801ddb8 <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801de3a:	2300      	movs	r3, #0
 801de3c:	e785      	b.n	801dd4a <lfs_dir_relocatingcommit+0x256>
    return state;
 801de3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de40:	468a      	mov	sl, r1
 801de42:	e002      	b.n	801de4a <lfs_dir_relocatingcommit+0x356>
        return state;
 801de44:	468a      	mov	sl, r1
 801de46:	e000      	b.n	801de4a <lfs_dir_relocatingcommit+0x356>
 801de48:	4682      	mov	sl, r0
}
 801de4a:	4650      	mov	r0, sl
 801de4c:	b01b      	add	sp, #108	@ 0x6c
 801de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de52:	bf00      	nop

0801de54 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801de54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de58:	b0a3      	sub	sp, #140	@ 0x8c
 801de5a:	4605      	mov	r5, r0
 801de5c:	460e      	mov	r6, r1
 801de5e:	4690      	mov	r8, r2
 801de60:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801de62:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801de64:	e003      	b.n	801de6e <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801de66:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801de68:	2b01      	cmp	r3, #1
 801de6a:	d012      	beq.n	801de92 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801de6c:	6824      	ldr	r4, [r4, #0]
 801de6e:	b34c      	cbz	r4, 801dec4 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801de70:	f104 0108 	add.w	r1, r4, #8
 801de74:	42b1      	cmp	r1, r6
 801de76:	d0f9      	beq.n	801de6c <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801de78:	68a1      	ldr	r1, [r4, #8]
 801de7a:	6833      	ldr	r3, [r6, #0]
 801de7c:	428b      	cmp	r3, r1
 801de7e:	d0f2      	beq.n	801de66 <lfs_dir_orphaningcommit+0x12>
 801de80:	68e0      	ldr	r0, [r4, #12]
 801de82:	6872      	ldr	r2, [r6, #4]
 801de84:	4282      	cmp	r2, r0
 801de86:	d0ee      	beq.n	801de66 <lfs_dir_orphaningcommit+0x12>
 801de88:	428a      	cmp	r2, r1
 801de8a:	d0ec      	beq.n	801de66 <lfs_dir_orphaningcommit+0x12>
 801de8c:	4298      	cmp	r0, r3
 801de8e:	d1ed      	bne.n	801de6c <lfs_dir_orphaningcommit+0x18>
 801de90:	e7e9      	b.n	801de66 <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801de92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801de94:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801de98:	d0e8      	beq.n	801de6c <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801de9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801de9c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801de9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dea0:	429a      	cmp	r2, r3
 801dea2:	d9e3      	bls.n	801de6c <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801dea4:	4621      	mov	r1, r4
 801dea6:	4628      	mov	r0, r5
 801dea8:	f7fe feee 	bl	801cc88 <lfs_file_outline>
            if (err) {
 801deac:	4607      	mov	r7, r0
 801deae:	2800      	cmp	r0, #0
 801deb0:	f040 81bc 	bne.w	801e22c <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801deb4:	4621      	mov	r1, r4
 801deb6:	4628      	mov	r0, r5
 801deb8:	f7ff f866 	bl	801cf88 <lfs_file_flush>
            if (err) {
 801debc:	4607      	mov	r7, r0
 801debe:	2800      	cmp	r0, #0
 801dec0:	d0d4      	beq.n	801de6c <lfs_dir_orphaningcommit+0x18>
 801dec2:	e1b3      	b.n	801e22c <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801dec4:	6833      	ldr	r3, [r6, #0]
 801dec6:	9316      	str	r3, [sp, #88]	@ 0x58
 801dec8:	6873      	ldr	r3, [r6, #4]
 801deca:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801decc:	ac0e      	add	r4, sp, #56	@ 0x38
 801dece:	4637      	mov	r7, r6
 801ded0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801ded2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ded4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801ded8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801dedc:	ab06      	add	r3, sp, #24
 801dede:	9301      	str	r3, [sp, #4]
 801dee0:	f8cd 9000 	str.w	r9, [sp]
 801dee4:	4643      	mov	r3, r8
 801dee6:	4632      	mov	r2, r6
 801dee8:	a90e      	add	r1, sp, #56	@ 0x38
 801deea:	4628      	mov	r0, r5
 801deec:	f7ff fe02 	bl	801daf4 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801def0:	1e07      	subs	r7, r0, #0
 801def2:	f2c0 819b 	blt.w	801e22c <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801def6:	6833      	ldr	r3, [r6, #0]
 801def8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801defa:	429a      	cmp	r2, r3
 801defc:	d007      	beq.n	801df0e <lfs_dir_orphaningcommit+0xba>
 801defe:	6870      	ldr	r0, [r6, #4]
 801df00:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801df02:	4281      	cmp	r1, r0
 801df04:	d003      	beq.n	801df0e <lfs_dir_orphaningcommit+0xba>
 801df06:	4299      	cmp	r1, r3
 801df08:	d001      	beq.n	801df0e <lfs_dir_orphaningcommit+0xba>
 801df0a:	4290      	cmp	r0, r2
 801df0c:	d109      	bne.n	801df22 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801df0e:	4634      	mov	r4, r6
 801df10:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801df14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801df18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df1a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801df1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801df22:	2f02      	cmp	r7, #2
 801df24:	d001      	beq.n	801df2a <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801df26:	2600      	movs	r6, #0
 801df28:	e0b8      	b.n	801e09c <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801df2a:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801df2e:	4631      	mov	r1, r6
 801df30:	4628      	mov	r0, r5
 801df32:	f7fd fc83 	bl	801b83c <lfs_dir_getgstate>
        if (err) {
 801df36:	4607      	mov	r7, r0
 801df38:	2800      	cmp	r0, #0
 801df3a:	f040 8177 	bne.w	801e22c <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801df3e:	9b06      	ldr	r3, [sp, #24]
 801df40:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801df42:	9b07      	ldr	r3, [sp, #28]
 801df44:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801df46:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801df4a:	7df2      	ldrb	r2, [r6, #23]
 801df4c:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801df50:	4ba2      	ldr	r3, [pc, #648]	@ (801e1dc <lfs_dir_orphaningcommit+0x388>)
 801df52:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801df56:	9318      	str	r3, [sp, #96]	@ 0x60
 801df58:	9119      	str	r1, [sp, #100]	@ 0x64
 801df5a:	2300      	movs	r3, #0
 801df5c:	9301      	str	r3, [sp, #4]
 801df5e:	2301      	movs	r3, #1
 801df60:	9300      	str	r3, [sp, #0]
 801df62:	ab18      	add	r3, sp, #96	@ 0x60
 801df64:	aa16      	add	r2, sp, #88	@ 0x58
 801df66:	a906      	add	r1, sp, #24
 801df68:	4628      	mov	r0, r5
 801df6a:	f7ff fdc3 	bl	801daf4 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801df6e:	1e07      	subs	r7, r0, #0
 801df70:	f2c0 815c 	blt.w	801e22c <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801df74:	ac0e      	add	r4, sp, #56	@ 0x38
 801df76:	ae06      	add	r6, sp, #24
 801df78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801df7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df7c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801df80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801df84:	e7cf      	b.n	801df26 <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801df86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df88:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801df8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801df8c:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801df8e:	799a      	ldrb	r2, [r3, #6]
 801df90:	2a02      	cmp	r2, #2
 801df92:	d00d      	beq.n	801dfb0 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801df94:	681b      	ldr	r3, [r3, #0]
 801df96:	b1db      	cbz	r3, 801dfd0 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801df98:	689a      	ldr	r2, [r3, #8]
 801df9a:	4291      	cmp	r1, r2
 801df9c:	d0f3      	beq.n	801df86 <lfs_dir_orphaningcommit+0x132>
 801df9e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801dfa0:	68dc      	ldr	r4, [r3, #12]
 801dfa2:	4284      	cmp	r4, r0
 801dfa4:	d0ef      	beq.n	801df86 <lfs_dir_orphaningcommit+0x132>
 801dfa6:	428c      	cmp	r4, r1
 801dfa8:	d0ed      	beq.n	801df86 <lfs_dir_orphaningcommit+0x132>
 801dfaa:	4290      	cmp	r0, r2
 801dfac:	d1ef      	bne.n	801df8e <lfs_dir_orphaningcommit+0x13a>
 801dfae:	e7ea      	b.n	801df86 <lfs_dir_orphaningcommit+0x132>
 801dfb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dfb2:	428a      	cmp	r2, r1
 801dfb4:	d007      	beq.n	801dfc6 <lfs_dir_orphaningcommit+0x172>
 801dfb6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dfb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801dfba:	42a0      	cmp	r0, r4
 801dfbc:	d003      	beq.n	801dfc6 <lfs_dir_orphaningcommit+0x172>
 801dfbe:	4288      	cmp	r0, r1
 801dfc0:	d001      	beq.n	801dfc6 <lfs_dir_orphaningcommit+0x172>
 801dfc2:	4294      	cmp	r4, r2
 801dfc4:	d1e6      	bne.n	801df94 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801dfc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dfc8:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801dfca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dfcc:	631a      	str	r2, [r3, #48]	@ 0x30
 801dfce:	e7e1      	b.n	801df94 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801dfd0:	aa06      	add	r2, sp, #24
 801dfd2:	a916      	add	r1, sp, #88	@ 0x58
 801dfd4:	4628      	mov	r0, r5
 801dfd6:	f7fe fba5 	bl	801c724 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801dfda:	1e04      	subs	r4, r0, #0
 801dfdc:	f280 8082 	bge.w	801e0e4 <lfs_dir_orphaningcommit+0x290>
 801dfe0:	f114 0f02 	cmn.w	r4, #2
 801dfe4:	f040 8128 	bne.w	801e238 <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801dfe8:	f114 0802 	adds.w	r8, r4, #2
 801dfec:	bf18      	it	ne
 801dfee:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801dff2:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801dff4:	aa06      	add	r2, sp, #24
 801dff6:	a916      	add	r1, sp, #88	@ 0x58
 801dff8:	4628      	mov	r0, r5
 801dffa:	f7ff f925 	bl	801d248 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801dffe:	4603      	mov	r3, r0
 801e000:	b118      	cbz	r0, 801e00a <lfs_dir_orphaningcommit+0x1b6>
 801e002:	f110 0f02 	cmn.w	r0, #2
 801e006:	f040 8119 	bne.w	801e23c <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801e00a:	f114 0f02 	cmn.w	r4, #2
 801e00e:	f000 80d6 	beq.w	801e1be <lfs_dir_orphaningcommit+0x36a>
 801e012:	f113 0f02 	cmn.w	r3, #2
 801e016:	f000 80cb 	beq.w	801e1b0 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801e01a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801e01c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801e020:	2b00      	cmp	r3, #0
 801e022:	f040 80d1 	bne.w	801e1c8 <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e026:	a906      	add	r1, sp, #24
 801e028:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e02c:	f7fd f8c4 	bl	801b1b8 <lfs_gstate_hasmovehere>
 801e030:	2800      	cmp	r0, #0
 801e032:	f040 80e1 	bne.w	801e1f8 <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801e036:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801e03a:	9b06      	ldr	r3, [sp, #24]
 801e03c:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801e03e:	9b07      	ldr	r3, [sp, #28]
 801e040:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e042:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e046:	429c      	cmp	r4, r3
 801e048:	f000 80ec 	beq.w	801e224 <lfs_dir_orphaningcommit+0x3d0>
 801e04c:	02a3      	lsls	r3, r4, #10
 801e04e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e052:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e056:	931e      	str	r3, [sp, #120]	@ 0x78
 801e058:	2100      	movs	r1, #0
 801e05a:	911f      	str	r1, [sp, #124]	@ 0x7c
 801e05c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801e060:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e064:	4b5d      	ldr	r3, [pc, #372]	@ (801e1dc <lfs_dir_orphaningcommit+0x388>)
 801e066:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e06a:	9320      	str	r3, [sp, #128]	@ 0x80
 801e06c:	ab0e      	add	r3, sp, #56	@ 0x38
 801e06e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e070:	9101      	str	r1, [sp, #4]
 801e072:	2302      	movs	r3, #2
 801e074:	9300      	str	r3, [sp, #0]
 801e076:	ab1e      	add	r3, sp, #120	@ 0x78
 801e078:	aa16      	add	r2, sp, #88	@ 0x58
 801e07a:	a906      	add	r1, sp, #24
 801e07c:	4628      	mov	r0, r5
 801e07e:	f7ff fd39 	bl	801daf4 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801e082:	1e07      	subs	r7, r0, #0
 801e084:	f2c0 80d2 	blt.w	801e22c <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801e088:	ac0e      	add	r4, sp, #56	@ 0x38
 801e08a:	f10d 0c18 	add.w	ip, sp, #24
 801e08e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e094:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801e098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801e09c:	2f01      	cmp	r7, #1
 801e09e:	f040 80c3 	bne.w	801e228 <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801e0a2:	4b4f      	ldr	r3, [pc, #316]	@ (801e1e0 <lfs_dir_orphaningcommit+0x38c>)
 801e0a4:	9303      	str	r3, [sp, #12]
 801e0a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0a8:	9302      	str	r3, [sp, #8]
 801e0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e0ac:	9301      	str	r3, [sp, #4]
 801e0ae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e0b0:	9300      	str	r3, [sp, #0]
 801e0b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e0b4:	f640 128c 	movw	r2, #2444	@ 0x98c
 801e0b8:	494a      	ldr	r1, [pc, #296]	@ (801e1e4 <lfs_dir_orphaningcommit+0x390>)
 801e0ba:	484b      	ldr	r0, [pc, #300]	@ (801e1e8 <lfs_dir_orphaningcommit+0x394>)
 801e0bc:	f00c f8ba 	bl	802a234 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e0c0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e0c2:	6a2b      	ldr	r3, [r5, #32]
 801e0c4:	428b      	cmp	r3, r1
 801e0c6:	d007      	beq.n	801e0d8 <lfs_dir_orphaningcommit+0x284>
 801e0c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801e0ca:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801e0cc:	4282      	cmp	r2, r0
 801e0ce:	d003      	beq.n	801e0d8 <lfs_dir_orphaningcommit+0x284>
 801e0d0:	428a      	cmp	r2, r1
 801e0d2:	d001      	beq.n	801e0d8 <lfs_dir_orphaningcommit+0x284>
 801e0d4:	4298      	cmp	r0, r3
 801e0d6:	d103      	bne.n	801e0e0 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801e0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e0da:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801e0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0de:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801e0e0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e0e2:	e758      	b.n	801df96 <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801e0e4:	f114 0802 	adds.w	r8, r4, #2
 801e0e8:	bf18      	it	ne
 801e0ea:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801e0ee:	2101      	movs	r1, #1
 801e0f0:	4628      	mov	r0, r5
 801e0f2:	f7fd f997 	bl	801b424 <lfs_fs_preporphans>
            if (err) {
 801e0f6:	4607      	mov	r7, r0
 801e0f8:	2800      	cmp	r0, #0
 801e0fa:	f040 8097 	bne.w	801e22c <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e0fe:	a906      	add	r1, sp, #24
 801e100:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e104:	f7fd f858 	bl	801b1b8 <lfs_gstate_hasmovehere>
 801e108:	2800      	cmp	r0, #0
 801e10a:	d131      	bne.n	801e170 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e10c:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801e10e:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801e112:	9b06      	ldr	r3, [sp, #24]
 801e114:	9304      	str	r3, [sp, #16]
 801e116:	9b07      	ldr	r3, [sp, #28]
 801e118:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801e11a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e11e:	429f      	cmp	r7, r3
 801e120:	d044      	beq.n	801e1ac <lfs_dir_orphaningcommit+0x358>
 801e122:	02bb      	lsls	r3, r7, #10
 801e124:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e128:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e12c:	931a      	str	r3, [sp, #104]	@ 0x68
 801e12e:	2300      	movs	r3, #0
 801e130:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e132:	921c      	str	r2, [sp, #112]	@ 0x70
 801e134:	aa0e      	add	r2, sp, #56	@ 0x38
 801e136:	921d      	str	r2, [sp, #116]	@ 0x74
 801e138:	9301      	str	r3, [sp, #4]
 801e13a:	2302      	movs	r3, #2
 801e13c:	9300      	str	r3, [sp, #0]
 801e13e:	ab1a      	add	r3, sp, #104	@ 0x68
 801e140:	aa04      	add	r2, sp, #16
 801e142:	a906      	add	r1, sp, #24
 801e144:	4628      	mov	r0, r5
 801e146:	f7ff fcd5 	bl	801daf4 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801e14a:	1e07      	subs	r7, r0, #0
 801e14c:	db6e      	blt.n	801e22c <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801e14e:	2f01      	cmp	r7, #1
 801e150:	f47f af50 	bne.w	801dff4 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801e154:	9b04      	ldr	r3, [sp, #16]
 801e156:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801e158:	9b05      	ldr	r3, [sp, #20]
 801e15a:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801e15c:	ac0e      	add	r4, sp, #56	@ 0x38
 801e15e:	ae06      	add	r6, sp, #24
 801e160:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e164:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801e168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801e16c:	2601      	movs	r6, #1
 801e16e:	e795      	b.n	801e09c <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801e170:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e172:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801e176:	4b1a      	ldr	r3, [pc, #104]	@ (801e1e0 <lfs_dir_orphaningcommit+0x38c>)
 801e178:	9302      	str	r3, [sp, #8]
 801e17a:	9701      	str	r7, [sp, #4]
 801e17c:	9b07      	ldr	r3, [sp, #28]
 801e17e:	9300      	str	r3, [sp, #0]
 801e180:	9b06      	ldr	r3, [sp, #24]
 801e182:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801e186:	4917      	ldr	r1, [pc, #92]	@ (801e1e4 <lfs_dir_orphaningcommit+0x390>)
 801e188:	4818      	ldr	r0, [pc, #96]	@ (801e1ec <lfs_dir_orphaningcommit+0x398>)
 801e18a:	f00c f853 	bl	802a234 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e18e:	2200      	movs	r2, #0
 801e190:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e194:	4628      	mov	r0, r5
 801e196:	f7fd f8f5 	bl	801b384 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801e19a:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801e19e:	42bb      	cmp	r3, r7
 801e1a0:	d902      	bls.n	801e1a8 <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801e1a2:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801e1a6:	e7b4      	b.n	801e112 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801e1a8:	4622      	mov	r2, r4
 801e1aa:	e7b2      	b.n	801e112 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	e7bd      	b.n	801e12c <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801e1b0:	4b0f      	ldr	r3, [pc, #60]	@ (801e1f0 <lfs_dir_orphaningcommit+0x39c>)
 801e1b2:	4a10      	ldr	r2, [pc, #64]	@ (801e1f4 <lfs_dir_orphaningcommit+0x3a0>)
 801e1b4:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801e1b8:	480a      	ldr	r0, [pc, #40]	@ (801e1e4 <lfs_dir_orphaningcommit+0x390>)
 801e1ba:	f00c f807 	bl	802a1cc <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801e1be:	f113 0f02 	cmn.w	r3, #2
 801e1c2:	f47f af2a 	bne.w	801e01a <lfs_dir_orphaningcommit+0x1c6>
 801e1c6:	e769      	b.n	801e09c <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801e1c8:	f1c8 0100 	rsb	r1, r8, #0
 801e1cc:	4628      	mov	r0, r5
 801e1ce:	f7fd f929 	bl	801b424 <lfs_fs_preporphans>
                if (err) {
 801e1d2:	4607      	mov	r7, r0
 801e1d4:	2800      	cmp	r0, #0
 801e1d6:	f43f af26 	beq.w	801e026 <lfs_dir_orphaningcommit+0x1d2>
 801e1da:	e027      	b.n	801e22c <lfs_dir_orphaningcommit+0x3d8>
 801e1dc:	000ffc08 	.word	0x000ffc08
 801e1e0:	08036fac 	.word	0x08036fac
 801e1e4:	080394c4 	.word	0x080394c4
 801e1e8:	08039864 	.word	0x08039864
 801e1ec:	080398a0 	.word	0x080398a0
 801e1f0:	080398e4 	.word	0x080398e4
 801e1f4:	0803a220 	.word	0x0803a220
                moveid = lfs_tag_id(lfs->gstate.tag);
 801e1f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e1fa:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801e1fe:	4b10      	ldr	r3, [pc, #64]	@ (801e240 <lfs_dir_orphaningcommit+0x3ec>)
 801e200:	9302      	str	r3, [sp, #8]
 801e202:	9401      	str	r4, [sp, #4]
 801e204:	9b07      	ldr	r3, [sp, #28]
 801e206:	9300      	str	r3, [sp, #0]
 801e208:	9b06      	ldr	r3, [sp, #24]
 801e20a:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801e20e:	490d      	ldr	r1, [pc, #52]	@ (801e244 <lfs_dir_orphaningcommit+0x3f0>)
 801e210:	480d      	ldr	r0, [pc, #52]	@ (801e248 <lfs_dir_orphaningcommit+0x3f4>)
 801e212:	f00c f80f 	bl	802a234 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e216:	2200      	movs	r2, #0
 801e218:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e21c:	4628      	mov	r0, r5
 801e21e:	f7fd f8b1 	bl	801b384 <lfs_fs_prepmove>
 801e222:	e70a      	b.n	801e03a <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801e224:	2300      	movs	r3, #0
 801e226:	e716      	b.n	801e056 <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801e228:	b926      	cbnz	r6, 801e234 <lfs_dir_orphaningcommit+0x3e0>
 801e22a:	2700      	movs	r7, #0
}
 801e22c:	4638      	mov	r0, r7
 801e22e:	b023      	add	sp, #140	@ 0x8c
 801e230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801e234:	2703      	movs	r7, #3
 801e236:	e7f9      	b.n	801e22c <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801e238:	4627      	mov	r7, r4
 801e23a:	e7f7      	b.n	801e22c <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801e23c:	4607      	mov	r7, r0
 801e23e:	e7f5      	b.n	801e22c <lfs_dir_orphaningcommit+0x3d8>
 801e240:	08036fac 	.word	0x08036fac
 801e244:	080394c4 	.word	0x080394c4
 801e248:	080398a0 	.word	0x080398a0

0801e24c <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801e24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e250:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801e252:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801e254:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801e258:	2b00      	cmp	r3, #0
 801e25a:	f000 80ea 	beq.w	801e432 <lfs_fs_deorphan+0x1e6>
 801e25e:	4605      	mov	r5, r0
 801e260:	460f      	mov	r7, r1
    int pass = 0;
 801e262:	2600      	movs	r6, #0
    while (pass < 2) {
 801e264:	2e01      	cmp	r6, #1
 801e266:	f300 80db 	bgt.w	801e420 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801e26a:	2220      	movs	r2, #32
 801e26c:	2100      	movs	r1, #0
 801e26e:	a806      	add	r0, sp, #24
 801e270:	f00e fcfe 	bl	802cc70 <memset>
 801e274:	2301      	movs	r3, #1
 801e276:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801e27a:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801e27c:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801e280:	e0bd      	b.n	801e3fe <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801e282:	aa16      	add	r2, sp, #88	@ 0x58
 801e284:	a90c      	add	r1, sp, #48	@ 0x30
 801e286:	4628      	mov	r0, r5
 801e288:	f7fe fa4c 	bl	801c724 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e28c:	1e04      	subs	r4, r0, #0
 801e28e:	db39      	blt.n	801e304 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801e290:	b916      	cbnz	r6, 801e298 <lfs_fs_deorphan+0x4c>
 801e292:	f114 0f02 	cmn.w	r4, #2
 801e296:	d139      	bne.n	801e30c <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801e298:	2e01      	cmp	r6, #1
 801e29a:	f040 80a4 	bne.w	801e3e6 <lfs_fs_deorphan+0x19a>
 801e29e:	f114 0f02 	cmn.w	r4, #2
 801e2a2:	f040 80a0 	bne.w	801e3e6 <lfs_fs_deorphan+0x19a>
 801e2a6:	2f00      	cmp	r7, #0
 801e2a8:	f000 809d 	beq.w	801e3e6 <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801e2ac:	4b63      	ldr	r3, [pc, #396]	@ (801e43c <lfs_fs_deorphan+0x1f0>)
 801e2ae:	9301      	str	r3, [sp, #4]
 801e2b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2b2:	9300      	str	r3, [sp, #0]
 801e2b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2b6:	f241 329c 	movw	r2, #5020	@ 0x139c
 801e2ba:	4961      	ldr	r1, [pc, #388]	@ (801e440 <lfs_fs_deorphan+0x1f4>)
 801e2bc:	4861      	ldr	r0, [pc, #388]	@ (801e444 <lfs_fs_deorphan+0x1f8>)
 801e2be:	f00b ffb9 	bl	802a234 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801e2c2:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801e2c6:	a90e      	add	r1, sp, #56	@ 0x38
 801e2c8:	4628      	mov	r0, r5
 801e2ca:	f7fd fab7 	bl	801b83c <lfs_dir_getgstate>
                    if (err) {
 801e2ce:	4604      	mov	r4, r0
 801e2d0:	2800      	cmp	r0, #0
 801e2d2:	f040 80af 	bne.w	801e434 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e2d6:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801e2da:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e2de:	4b5a      	ldr	r3, [pc, #360]	@ (801e448 <lfs_fs_deorphan+0x1fc>)
 801e2e0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e2e4:	9322      	str	r3, [sp, #136]	@ 0x88
 801e2e6:	ab14      	add	r3, sp, #80	@ 0x50
 801e2e8:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e2ea:	2301      	movs	r3, #1
 801e2ec:	aa22      	add	r2, sp, #136	@ 0x88
 801e2ee:	a906      	add	r1, sp, #24
 801e2f0:	4628      	mov	r0, r5
 801e2f2:	f7ff fdaf 	bl	801de54 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801e2f6:	1e04      	subs	r4, r0, #0
 801e2f8:	f2c0 809c 	blt.w	801e434 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801e2fc:	2c03      	cmp	r4, #3
 801e2fe:	d17e      	bne.n	801e3fe <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801e300:	46b8      	mov	r8, r7
                    continue;
 801e302:	e07c      	b.n	801e3fe <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801e304:	f114 0f02 	cmn.w	r4, #2
 801e308:	d0c2      	beq.n	801e290 <lfs_fs_deorphan+0x44>
 801e30a:	e093      	b.n	801e434 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801e30c:	ab04      	add	r3, sp, #16
 801e30e:	9300      	str	r3, [sp, #0]
 801e310:	4623      	mov	r3, r4
 801e312:	4a4e      	ldr	r2, [pc, #312]	@ (801e44c <lfs_fs_deorphan+0x200>)
 801e314:	a916      	add	r1, sp, #88	@ 0x58
 801e316:	4628      	mov	r0, r5
 801e318:	f7fd fa82 	bl	801b820 <lfs_dir_get>
                    if (state < 0) {
 801e31c:	2800      	cmp	r0, #0
 801e31e:	db50      	blt.n	801e3c2 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801e320:	a90c      	add	r1, sp, #48	@ 0x30
 801e322:	a804      	add	r0, sp, #16
 801e324:	f7fc ff12 	bl	801b14c <lfs_pair_issync>
 801e328:	2800      	cmp	r0, #0
 801e32a:	d1b5      	bne.n	801e298 <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801e32c:	4b43      	ldr	r3, [pc, #268]	@ (801e43c <lfs_fs_deorphan+0x1f0>)
 801e32e:	9303      	str	r3, [sp, #12]
 801e330:	9b05      	ldr	r3, [sp, #20]
 801e332:	9302      	str	r3, [sp, #8]
 801e334:	9b04      	ldr	r3, [sp, #16]
 801e336:	9301      	str	r3, [sp, #4]
 801e338:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e33a:	9300      	str	r3, [sp, #0]
 801e33c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e33e:	f241 3271 	movw	r2, #4977	@ 0x1371
 801e342:	493f      	ldr	r1, [pc, #252]	@ (801e440 <lfs_fs_deorphan+0x1f4>)
 801e344:	4842      	ldr	r0, [pc, #264]	@ (801e450 <lfs_fs_deorphan+0x204>)
 801e346:	f00b ff75 	bl	802a234 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801e34a:	a906      	add	r1, sp, #24
 801e34c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801e350:	f7fc ff32 	bl	801b1b8 <lfs_gstate_hasmovehere>
 801e354:	b9a0      	cbnz	r0, 801e380 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e356:	2300      	movs	r3, #0
 801e358:	931e      	str	r3, [sp, #120]	@ 0x78
 801e35a:	2300      	movs	r3, #0
 801e35c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e35e:	4b3d      	ldr	r3, [pc, #244]	@ (801e454 <lfs_fs_deorphan+0x208>)
 801e360:	9320      	str	r3, [sp, #128]	@ 0x80
 801e362:	ab04      	add	r3, sp, #16
 801e364:	9321      	str	r3, [sp, #132]	@ 0x84
 801e366:	2302      	movs	r3, #2
 801e368:	aa1e      	add	r2, sp, #120	@ 0x78
 801e36a:	a906      	add	r1, sp, #24
 801e36c:	4628      	mov	r0, r5
 801e36e:	f7ff fd71 	bl	801de54 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801e372:	1e04      	subs	r4, r0, #0
 801e374:	db5e      	blt.n	801e434 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801e376:	2c03      	cmp	r4, #3
 801e378:	d141      	bne.n	801e3fe <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801e37a:	f04f 0801 	mov.w	r8, #1
                        continue;
 801e37e:	e03e      	b.n	801e3fe <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801e380:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801e382:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801e386:	4b2d      	ldr	r3, [pc, #180]	@ (801e43c <lfs_fs_deorphan+0x1f0>)
 801e388:	9302      	str	r3, [sp, #8]
 801e38a:	9401      	str	r4, [sp, #4]
 801e38c:	9b07      	ldr	r3, [sp, #28]
 801e38e:	9300      	str	r3, [sp, #0]
 801e390:	9b06      	ldr	r3, [sp, #24]
 801e392:	f241 327c 	movw	r2, #4988	@ 0x137c
 801e396:	492a      	ldr	r1, [pc, #168]	@ (801e440 <lfs_fs_deorphan+0x1f4>)
 801e398:	482f      	ldr	r0, [pc, #188]	@ (801e458 <lfs_fs_deorphan+0x20c>)
 801e39a:	f00b ff4b 	bl	802a234 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e39e:	2200      	movs	r2, #0
 801e3a0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e3a4:	4628      	mov	r0, r5
 801e3a6:	f7fc ffed 	bl	801b384 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801e3aa:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e3ae:	429c      	cmp	r4, r3
 801e3b0:	d005      	beq.n	801e3be <lfs_fs_deorphan+0x172>
 801e3b2:	02a3      	lsls	r3, r4, #10
 801e3b4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e3b8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e3bc:	e7cc      	b.n	801e358 <lfs_fs_deorphan+0x10c>
 801e3be:	2300      	movs	r3, #0
 801e3c0:	e7ca      	b.n	801e358 <lfs_fs_deorphan+0x10c>
                        return state;
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	e036      	b.n	801e434 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e3c6:	2301      	movs	r3, #1
 801e3c8:	e000      	b.n	801e3cc <lfs_fs_deorphan+0x180>
 801e3ca:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801e3cc:	bb0b      	cbnz	r3, 801e412 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801e3ce:	aa0c      	add	r2, sp, #48	@ 0x30
 801e3d0:	a90e      	add	r1, sp, #56	@ 0x38
 801e3d2:	4628      	mov	r0, r5
 801e3d4:	f7fe fa12 	bl	801c7fc <lfs_dir_fetch>
            if (err) {
 801e3d8:	4604      	mov	r4, r0
 801e3da:	bb58      	cbnz	r0, 801e434 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801e3dc:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	f43f af4e 	beq.w	801e282 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801e3e6:	f10d 0c18 	add.w	ip, sp, #24
 801e3ea:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801e3ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e3f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e3f6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e3fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e3fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e404:	d0e1      	beq.n	801e3ca <lfs_fs_deorphan+0x17e>
 801e406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e40c:	d0db      	beq.n	801e3c6 <lfs_fs_deorphan+0x17a>
 801e40e:	2300      	movs	r3, #0
 801e410:	e7dc      	b.n	801e3cc <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801e412:	f1b8 0f00 	cmp.w	r8, #0
 801e416:	d101      	bne.n	801e41c <lfs_fs_deorphan+0x1d0>
 801e418:	3601      	adds	r6, #1
 801e41a:	e723      	b.n	801e264 <lfs_fs_deorphan+0x18>
 801e41c:	2600      	movs	r6, #0
 801e41e:	e721      	b.n	801e264 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801e420:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801e424:	4249      	negs	r1, r1
 801e426:	b249      	sxtb	r1, r1
 801e428:	4628      	mov	r0, r5
 801e42a:	f7fc fffb 	bl	801b424 <lfs_fs_preporphans>
 801e42e:	4604      	mov	r4, r0
 801e430:	e000      	b.n	801e434 <lfs_fs_deorphan+0x1e8>
        return 0;
 801e432:	2400      	movs	r4, #0
}
 801e434:	4620      	mov	r0, r4
 801e436:	b024      	add	sp, #144	@ 0x90
 801e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e43c:	08036fac 	.word	0x08036fac
 801e440:	080394c4 	.word	0x080394c4
 801e444:	08039998 	.word	0x08039998
 801e448:	000ffc08 	.word	0x000ffc08
 801e44c:	7ffffc00 	.word	0x7ffffc00
 801e450:	0803990c 	.word	0x0803990c
 801e454:	600ffc08 	.word	0x600ffc08
 801e458:	08039950 	.word	0x08039950

0801e45c <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e45c:	b510      	push	{r4, lr}
 801e45e:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801e460:	f7ff fcf8 	bl	801de54 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801e464:	2800      	cmp	r0, #0
 801e466:	db00      	blt.n	801e46a <lfs_dir_commit+0xe>
    if (orphans) {
 801e468:	b900      	cbnz	r0, 801e46c <lfs_dir_commit+0x10>
}
 801e46a:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801e46c:	2100      	movs	r1, #0
 801e46e:	4620      	mov	r0, r4
 801e470:	f7ff feec 	bl	801e24c <lfs_fs_deorphan>
        if (err) {
 801e474:	e7f9      	b.n	801e46a <lfs_dir_commit+0xe>
	...

0801e478 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801e478:	b530      	push	{r4, r5, lr}
 801e47a:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801e47c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801e47e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801e482:	d103      	bne.n	801e48c <lfs_fs_desuperblock+0x14>
        return 0;
 801e484:	2500      	movs	r5, #0
}
 801e486:	4628      	mov	r0, r5
 801e488:	b013      	add	sp, #76	@ 0x4c
 801e48a:	bd30      	pop	{r4, r5, pc}
 801e48c:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801e48e:	4b1a      	ldr	r3, [pc, #104]	@ (801e4f8 <lfs_fs_desuperblock+0x80>)
 801e490:	9301      	str	r3, [sp, #4]
 801e492:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e494:	9300      	str	r3, [sp, #0]
 801e496:	6a03      	ldr	r3, [r0, #32]
 801e498:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801e49c:	4917      	ldr	r1, [pc, #92]	@ (801e4fc <lfs_fs_desuperblock+0x84>)
 801e49e:	4818      	ldr	r0, [pc, #96]	@ (801e500 <lfs_fs_desuperblock+0x88>)
 801e4a0:	f00b fec8 	bl	802a234 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801e4a4:	f104 0220 	add.w	r2, r4, #32
 801e4a8:	a908      	add	r1, sp, #32
 801e4aa:	4620      	mov	r0, r4
 801e4ac:	f7fe f9a6 	bl	801c7fc <lfs_dir_fetch>
    if (err) {
 801e4b0:	4605      	mov	r5, r0
 801e4b2:	2800      	cmp	r0, #0
 801e4b4:	d1e7      	bne.n	801e486 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801e4b6:	4620      	mov	r0, r4
 801e4b8:	f7fc feb6 	bl	801b228 <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801e4bc:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801e4be:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801e4c2:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801e4c4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801e4c6:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801e4c8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801e4ca:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801e4cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801e4ce:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801e4d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801e4d2:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e4d4:	4b0b      	ldr	r3, [pc, #44]	@ (801e504 <lfs_fs_desuperblock+0x8c>)
 801e4d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4d8:	ab02      	add	r3, sp, #8
 801e4da:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4dc:	2301      	movs	r3, #1
 801e4de:	aa10      	add	r2, sp, #64	@ 0x40
 801e4e0:	a908      	add	r1, sp, #32
 801e4e2:	4620      	mov	r0, r4
 801e4e4:	f7ff ffba 	bl	801e45c <lfs_dir_commit>
    if (err) {
 801e4e8:	4605      	mov	r5, r0
 801e4ea:	2800      	cmp	r0, #0
 801e4ec:	d1cb      	bne.n	801e486 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801e4ee:	2100      	movs	r1, #0
 801e4f0:	4620      	mov	r0, r4
 801e4f2:	f7fc ff40 	bl	801b376 <lfs_fs_prepsuperblock>
    return 0;
 801e4f6:	e7c6      	b.n	801e486 <lfs_fs_desuperblock+0xe>
 801e4f8:	08036fac 	.word	0x08036fac
 801e4fc:	080394c4 	.word	0x080394c4
 801e500:	080399c8 	.word	0x080399c8
 801e504:	20100018 	.word	0x20100018

0801e508 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801e508:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801e50a:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801e50c:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801e510:	d101      	bne.n	801e516 <lfs_fs_demove+0xe>
        return 0;
 801e512:	2000      	movs	r0, #0
}
 801e514:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801e516:	b530      	push	{r4, r5, lr}
 801e518:	b08f      	sub	sp, #60	@ 0x3c
 801e51a:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801e51c:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801e520:	4a1d      	ldr	r2, [pc, #116]	@ (801e598 <lfs_fs_demove+0x90>)
 801e522:	9202      	str	r2, [sp, #8]
 801e524:	9301      	str	r3, [sp, #4]
 801e526:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e528:	9300      	str	r3, [sp, #0]
 801e52a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e52c:	f241 3224 	movw	r2, #4900	@ 0x1324
 801e530:	491a      	ldr	r1, [pc, #104]	@ (801e59c <lfs_fs_demove+0x94>)
 801e532:	481b      	ldr	r0, [pc, #108]	@ (801e5a0 <lfs_fs_demove+0x98>)
 801e534:	f00b fe7e 	bl	802a234 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e538:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801e53a:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e53e:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801e542:	4293      	cmp	r3, r2
 801e544:	d108      	bne.n	801e558 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801e546:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801e54a:	a904      	add	r1, sp, #16
 801e54c:	4620      	mov	r0, r4
 801e54e:	f7fe f955 	bl	801c7fc <lfs_dir_fetch>
    if (err) {
 801e552:	b140      	cbz	r0, 801e566 <lfs_fs_demove+0x5e>
}
 801e554:	b00f      	add	sp, #60	@ 0x3c
 801e556:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e558:	4b12      	ldr	r3, [pc, #72]	@ (801e5a4 <lfs_fs_demove+0x9c>)
 801e55a:	4a13      	ldr	r2, [pc, #76]	@ (801e5a8 <lfs_fs_demove+0xa0>)
 801e55c:	f241 312b 	movw	r1, #4907	@ 0x132b
 801e560:	480e      	ldr	r0, [pc, #56]	@ (801e59c <lfs_fs_demove+0x94>)
 801e562:	f00b fe33 	bl	802a1cc <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801e566:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801e568:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e56c:	2200      	movs	r2, #0
 801e56e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e572:	4620      	mov	r0, r4
 801e574:	f7fc ff06 	bl	801b384 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801e578:	02ab      	lsls	r3, r5, #10
 801e57a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e57e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e582:	930c      	str	r3, [sp, #48]	@ 0x30
 801e584:	2300      	movs	r3, #0
 801e586:	930d      	str	r3, [sp, #52]	@ 0x34
 801e588:	2301      	movs	r3, #1
 801e58a:	aa0c      	add	r2, sp, #48	@ 0x30
 801e58c:	a904      	add	r1, sp, #16
 801e58e:	4620      	mov	r0, r4
 801e590:	f7ff ff64 	bl	801e45c <lfs_dir_commit>
    if (err) {
 801e594:	e7de      	b.n	801e554 <lfs_fs_demove+0x4c>
 801e596:	bf00      	nop
 801e598:	08036fac 	.word	0x08036fac
 801e59c:	080394c4 	.word	0x080394c4
 801e5a0:	080399fc 	.word	0x080399fc
 801e5a4:	08039a30 	.word	0x08039a30
 801e5a8:	0803a184 	.word	0x0803a184

0801e5ac <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801e5ac:	b510      	push	{r4, lr}
 801e5ae:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801e5b0:	f7ff ff62 	bl	801e478 <lfs_fs_desuperblock>
    if (err) {
 801e5b4:	4603      	mov	r3, r0
 801e5b6:	b108      	cbz	r0, 801e5bc <lfs_fs_forceconsistency+0x10>
}
 801e5b8:	4618      	mov	r0, r3
 801e5ba:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801e5bc:	4620      	mov	r0, r4
 801e5be:	f7ff ffa3 	bl	801e508 <lfs_fs_demove>
    if (err) {
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	2800      	cmp	r0, #0
 801e5c6:	d1f7      	bne.n	801e5b8 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801e5c8:	2101      	movs	r1, #1
 801e5ca:	4620      	mov	r0, r4
 801e5cc:	f7ff fe3e 	bl	801e24c <lfs_fs_deorphan>
 801e5d0:	4603      	mov	r3, r0
    if (err) {
 801e5d2:	e7f1      	b.n	801e5b8 <lfs_fs_forceconsistency+0xc>

0801e5d4 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801e5d4:	b570      	push	{r4, r5, r6, lr}
 801e5d6:	b082      	sub	sp, #8
 801e5d8:	4605      	mov	r5, r0
 801e5da:	460e      	mov	r6, r1
 801e5dc:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801e5de:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801e5e2:	4621      	mov	r1, r4
 801e5e4:	f7fd f92a 	bl	801b83c <lfs_dir_getgstate>
    if (err) {
 801e5e8:	b108      	cbz	r0, 801e5ee <lfs_dir_drop+0x1a>
}
 801e5ea:	b002      	add	sp, #8
 801e5ec:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801e5ee:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801e5f2:	7de2      	ldrb	r2, [r4, #23]
 801e5f4:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e5f8:	4b05      	ldr	r3, [pc, #20]	@ (801e610 <lfs_dir_drop+0x3c>)
 801e5fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e5fe:	9300      	str	r3, [sp, #0]
 801e600:	9101      	str	r1, [sp, #4]
 801e602:	2301      	movs	r3, #1
 801e604:	466a      	mov	r2, sp
 801e606:	4631      	mov	r1, r6
 801e608:	4628      	mov	r0, r5
 801e60a:	f7ff ff27 	bl	801e45c <lfs_dir_commit>
    if (err) {
 801e60e:	e7ec      	b.n	801e5ea <lfs_dir_drop+0x16>
 801e610:	000ffc08 	.word	0x000ffc08

0801e614 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801e614:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e616:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801e61a:	d001      	beq.n	801e620 <lfs_file_sync_+0xc>
        return 0;
 801e61c:	2000      	movs	r0, #0
}
 801e61e:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801e620:	b530      	push	{r4, r5, lr}
 801e622:	b087      	sub	sp, #28
 801e624:	4605      	mov	r5, r0
 801e626:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801e628:	f7fe fcae 	bl	801cf88 <lfs_file_flush>
    if (err) {
 801e62c:	2800      	cmp	r0, #0
 801e62e:	d136      	bne.n	801e69e <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801e630:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e632:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801e636:	d036      	beq.n	801e6a6 <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e638:	68a2      	ldr	r2, [r4, #8]
 801e63a:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e63e:	d036      	beq.n	801e6ae <lfs_file_sync_+0x9a>
 801e640:	68e2      	ldr	r2, [r4, #12]
 801e642:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e646:	d030      	beq.n	801e6aa <lfs_file_sync_+0x96>
 801e648:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801e64a:	f012 0f01 	tst.w	r2, #1
 801e64e:	d12a      	bne.n	801e6a6 <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801e650:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e654:	d02d      	beq.n	801e6b2 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801e656:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e658:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e65c:	d033      	beq.n	801e6c6 <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801e65e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801e660:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801e662:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801e666:	88a3      	ldrh	r3, [r4, #4]
 801e668:	029b      	lsls	r3, r3, #10
 801e66a:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801e66e:	4302      	orrs	r2, r0
 801e670:	9202      	str	r2, [sp, #8]
 801e672:	9103      	str	r1, [sp, #12]
 801e674:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e676:	6891      	ldr	r1, [r2, #8]
 801e678:	430b      	orrs	r3, r1
 801e67a:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801e67e:	9304      	str	r3, [sp, #16]
 801e680:	6853      	ldr	r3, [r2, #4]
 801e682:	9305      	str	r3, [sp, #20]
 801e684:	2302      	movs	r3, #2
 801e686:	aa02      	add	r2, sp, #8
 801e688:	f104 0108 	add.w	r1, r4, #8
 801e68c:	4628      	mov	r0, r5
 801e68e:	f7ff fee5 	bl	801e45c <lfs_dir_commit>
        if (err) {
 801e692:	bb20      	cbnz	r0, 801e6de <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801e694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e69a:	6323      	str	r3, [r4, #48]	@ 0x30
 801e69c:	e003      	b.n	801e6a6 <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801e69e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e6a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e6a4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e6a6:	b007      	add	sp, #28
 801e6a8:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e6aa:	2201      	movs	r2, #1
 801e6ac:	e7cd      	b.n	801e64a <lfs_file_sync_+0x36>
 801e6ae:	2201      	movs	r2, #1
 801e6b0:	e7cb      	b.n	801e64a <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	462a      	mov	r2, r5
 801e6b6:	f105 0110 	add.w	r1, r5, #16
 801e6ba:	4628      	mov	r0, r5
 801e6bc:	f7fd fc82 	bl	801bfc4 <lfs_bd_sync>
            if (err) {
 801e6c0:	2800      	cmp	r0, #0
 801e6c2:	d0c8      	beq.n	801e656 <lfs_file_sync_+0x42>
 801e6c4:	e7ef      	b.n	801e6a6 <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801e6c6:	466b      	mov	r3, sp
 801e6c8:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801e6cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e6d0:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801e6d4:	2008      	movs	r0, #8
            buffer = &ctz;
 801e6d6:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801e6d8:	f240 2202 	movw	r2, #514	@ 0x202
 801e6dc:	e7c3      	b.n	801e666 <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801e6de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e6e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e6e4:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801e6e6:	e7de      	b.n	801e6a6 <lfs_file_sync_+0x92>

0801e6e8 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801e6e8:	b510      	push	{r4, lr}
 801e6ea:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801e6ec:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801e6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e6f0:	b13b      	cbz	r3, 801e702 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801e6f2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e6f6:	b143      	cbz	r3, 801e70a <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801e6f8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e6fc:	b14b      	cbz	r3, 801e712 <lfs_deinit+0x2a>
}
 801e6fe:	2000      	movs	r0, #0
 801e700:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801e702:	68c0      	ldr	r0, [r0, #12]
 801e704:	f7fc faea 	bl	801acdc <vPortFree>
#else
    (void)p;
#endif
}
 801e708:	e7f3      	b.n	801e6f2 <lfs_deinit+0xa>
    free(p);
 801e70a:	69e0      	ldr	r0, [r4, #28]
 801e70c:	f7fc fae6 	bl	801acdc <vPortFree>
}
 801e710:	e7f2      	b.n	801e6f8 <lfs_deinit+0x10>
    free(p);
 801e712:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e714:	f7fc fae2 	bl	801acdc <vPortFree>
}
 801e718:	e7f1      	b.n	801e6fe <lfs_deinit+0x16>
	...

0801e71c <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801e71c:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801e71e:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801e720:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801e722:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e724:	69cb      	ldr	r3, [r1, #28]
 801e726:	2b00      	cmp	r3, #0
 801e728:	f000 80b1 	beq.w	801e88e <lfs_init+0x172>
 801e72c:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e72e:	6a0a      	ldr	r2, [r1, #32]
 801e730:	2a00      	cmp	r2, #0
 801e732:	f000 80b3 	beq.w	801e89c <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e736:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801e738:	2800      	cmp	r0, #0
 801e73a:	f000 80b6 	beq.w	801e8aa <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e73e:	fbb0 fcf3 	udiv	ip, r0, r3
 801e742:	fb03 031c 	mls	r3, r3, ip, r0
 801e746:	2b00      	cmp	r3, #0
 801e748:	f040 80b6 	bne.w	801e8b8 <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e74c:	fbb0 f3f2 	udiv	r3, r0, r2
 801e750:	fb02 0313 	mls	r3, r2, r3, r0
 801e754:	2b00      	cmp	r3, #0
 801e756:	f040 80b6 	bne.w	801e8c6 <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e75a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801e75c:	fbb2 f3f0 	udiv	r3, r2, r0
 801e760:	fb00 2313 	mls	r3, r0, r3, r2
 801e764:	2b00      	cmp	r3, #0
 801e766:	f040 80b5 	bne.w	801e8d4 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e76a:	2a7f      	cmp	r2, #127	@ 0x7f
 801e76c:	f240 80b9 	bls.w	801e8e2 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e770:	f1a2 0c08 	sub.w	ip, r2, #8
 801e774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e778:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801e77c:	3b01      	subs	r3, #1
 801e77e:	fab3 f383 	clz	r3, r3
 801e782:	f1c3 0320 	rsb	r3, r3, #32
 801e786:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801e78a:	f0c0 80b1 	bcc.w	801e8f0 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e78e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801e790:	2b00      	cmp	r3, #0
 801e792:	f000 80b4 	beq.w	801e8fe <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e796:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801e798:	b11b      	cbz	r3, 801e7a2 <lfs_init+0x86>
 801e79a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801e79e:	f0c0 80b5 	bcc.w	801e90c <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e7a6:	d002      	beq.n	801e7ae <lfs_init+0x92>
 801e7a8:	429a      	cmp	r2, r3
 801e7aa:	f0c0 80b6 	bcc.w	801e91a <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801e7ae:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	f000 80b9 	beq.w	801e928 <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801e7b6:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801e7b8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e7ba:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	f000 80bf 	beq.w	801e940 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801e7c2:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801e7c4:	4621      	mov	r1, r4
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	f7fc fe5c 	bl	801b484 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801e7cc:	f104 0110 	add.w	r1, r4, #16
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	f7fc fe57 	bl	801b484 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e7d6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e7d8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801e7da:	2800      	cmp	r0, #0
 801e7dc:	f000 80b8 	beq.w	801e950 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801e7e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	f000 80bb 	beq.w	801e95e <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801e7e8:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e7ea:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e7ec:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801e7ee:	2bff      	cmp	r3, #255	@ 0xff
 801e7f0:	f200 80bc 	bhi.w	801e96c <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801e7f4:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801e7f6:	b90b      	cbnz	r3, 801e7fc <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801e7f8:	23ff      	movs	r3, #255	@ 0xff
 801e7fa:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e7fc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f2c0 80bb 	blt.w	801e97a <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801e804:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801e806:	b913      	cbnz	r3, 801e80e <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801e808:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e80c:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e80e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801e810:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801e814:	428b      	cmp	r3, r1
 801e816:	f200 80b7 	bhi.w	801e988 <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801e81a:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801e81c:	b913      	cbnz	r3, 801e824 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801e81e:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e822:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e824:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801e826:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801e828:	4288      	cmp	r0, r1
 801e82a:	f200 80b4 	bhi.w	801e996 <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e82e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801e830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e834:	d003      	beq.n	801e83e <lfs_init+0x122>
 801e836:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801e838:	42ab      	cmp	r3, r5
 801e83a:	f200 80b3 	bhi.w	801e9a4 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e83e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e842:	d003      	beq.n	801e84c <lfs_init+0x130>
 801e844:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801e846:	42ab      	cmp	r3, r5
 801e848:	f200 80b3 	bhi.w	801e9b2 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e84c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e850:	d006      	beq.n	801e860 <lfs_init+0x144>
 801e852:	2800      	cmp	r0, #0
 801e854:	f000 80b4 	beq.w	801e9c0 <lfs_init+0x2a4>
 801e858:	08c1      	lsrs	r1, r0, #3
 801e85a:	428b      	cmp	r3, r1
 801e85c:	f200 80b2 	bhi.w	801e9c4 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801e860:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801e862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e866:	f000 80b4 	beq.w	801e9d2 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	f040 80b3 	bne.w	801e9d6 <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801e870:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801e872:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801e874:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801e876:	2b00      	cmp	r3, #0
 801e878:	f000 80be 	beq.w	801e9f8 <lfs_init+0x2dc>
 801e87c:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801e87e:	4283      	cmp	r3, r0
 801e880:	bf28      	it	cs
 801e882:	4603      	movcs	r3, r0
 801e884:	428b      	cmp	r3, r1
 801e886:	bf28      	it	cs
 801e888:	460b      	movcs	r3, r1
 801e88a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801e88c:	e0a3      	b.n	801e9d6 <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e88e:	4b5c      	ldr	r3, [pc, #368]	@ (801ea00 <lfs_init+0x2e4>)
 801e890:	4a5c      	ldr	r2, [pc, #368]	@ (801ea04 <lfs_init+0x2e8>)
 801e892:	f241 0152 	movw	r1, #4178	@ 0x1052
 801e896:	485c      	ldr	r0, [pc, #368]	@ (801ea08 <lfs_init+0x2ec>)
 801e898:	f00b fc98 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e89c:	4b5b      	ldr	r3, [pc, #364]	@ (801ea0c <lfs_init+0x2f0>)
 801e89e:	4a59      	ldr	r2, [pc, #356]	@ (801ea04 <lfs_init+0x2e8>)
 801e8a0:	f241 0153 	movw	r1, #4179	@ 0x1053
 801e8a4:	4858      	ldr	r0, [pc, #352]	@ (801ea08 <lfs_init+0x2ec>)
 801e8a6:	f00b fc91 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e8aa:	4b59      	ldr	r3, [pc, #356]	@ (801ea10 <lfs_init+0x2f4>)
 801e8ac:	4a55      	ldr	r2, [pc, #340]	@ (801ea04 <lfs_init+0x2e8>)
 801e8ae:	f241 0154 	movw	r1, #4180	@ 0x1054
 801e8b2:	4855      	ldr	r0, [pc, #340]	@ (801ea08 <lfs_init+0x2ec>)
 801e8b4:	f00b fc8a 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e8b8:	4b56      	ldr	r3, [pc, #344]	@ (801ea14 <lfs_init+0x2f8>)
 801e8ba:	4a52      	ldr	r2, [pc, #328]	@ (801ea04 <lfs_init+0x2e8>)
 801e8bc:	f241 0158 	movw	r1, #4184	@ 0x1058
 801e8c0:	4851      	ldr	r0, [pc, #324]	@ (801ea08 <lfs_init+0x2ec>)
 801e8c2:	f00b fc83 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e8c6:	4b54      	ldr	r3, [pc, #336]	@ (801ea18 <lfs_init+0x2fc>)
 801e8c8:	4a4e      	ldr	r2, [pc, #312]	@ (801ea04 <lfs_init+0x2e8>)
 801e8ca:	f241 0159 	movw	r1, #4185	@ 0x1059
 801e8ce:	484e      	ldr	r0, [pc, #312]	@ (801ea08 <lfs_init+0x2ec>)
 801e8d0:	f00b fc7c 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e8d4:	4b51      	ldr	r3, [pc, #324]	@ (801ea1c <lfs_init+0x300>)
 801e8d6:	4a4b      	ldr	r2, [pc, #300]	@ (801ea04 <lfs_init+0x2e8>)
 801e8d8:	f241 015a 	movw	r1, #4186	@ 0x105a
 801e8dc:	484a      	ldr	r0, [pc, #296]	@ (801ea08 <lfs_init+0x2ec>)
 801e8de:	f00b fc75 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e8e2:	4b4f      	ldr	r3, [pc, #316]	@ (801ea20 <lfs_init+0x304>)
 801e8e4:	4a47      	ldr	r2, [pc, #284]	@ (801ea04 <lfs_init+0x2e8>)
 801e8e6:	f241 015d 	movw	r1, #4189	@ 0x105d
 801e8ea:	4847      	ldr	r0, [pc, #284]	@ (801ea08 <lfs_init+0x2ec>)
 801e8ec:	f00b fc6e 	bl	802a1cc <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e8f0:	4b4c      	ldr	r3, [pc, #304]	@ (801ea24 <lfs_init+0x308>)
 801e8f2:	4a44      	ldr	r2, [pc, #272]	@ (801ea04 <lfs_init+0x2e8>)
 801e8f4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801e8f8:	4843      	ldr	r0, [pc, #268]	@ (801ea08 <lfs_init+0x2ec>)
 801e8fa:	f00b fc67 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e8fe:	4b4a      	ldr	r3, [pc, #296]	@ (801ea28 <lfs_init+0x30c>)
 801e900:	4a40      	ldr	r2, [pc, #256]	@ (801ea04 <lfs_init+0x2e8>)
 801e902:	f241 0169 	movw	r1, #4201	@ 0x1069
 801e906:	4840      	ldr	r0, [pc, #256]	@ (801ea08 <lfs_init+0x2ec>)
 801e908:	f00b fc60 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e90c:	4b47      	ldr	r3, [pc, #284]	@ (801ea2c <lfs_init+0x310>)
 801e90e:	4a3d      	ldr	r2, [pc, #244]	@ (801ea04 <lfs_init+0x2e8>)
 801e910:	f241 016f 	movw	r1, #4207	@ 0x106f
 801e914:	483c      	ldr	r0, [pc, #240]	@ (801ea08 <lfs_init+0x2ec>)
 801e916:	f00b fc59 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e91a:	4b45      	ldr	r3, [pc, #276]	@ (801ea30 <lfs_init+0x314>)
 801e91c:	4a39      	ldr	r2, [pc, #228]	@ (801ea04 <lfs_init+0x2e8>)
 801e91e:	f241 0171 	movw	r1, #4209	@ 0x1071
 801e922:	4839      	ldr	r0, [pc, #228]	@ (801ea08 <lfs_init+0x2ec>)
 801e924:	f00b fc52 	bl	802a1cc <__assert_func>
    return malloc(size);
 801e928:	f7fc f956 	bl	801abd8 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e92c:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801e92e:	2800      	cmp	r0, #0
 801e930:	f47f af42 	bne.w	801e7b8 <lfs_init+0x9c>
    lfs_deinit(lfs);
 801e934:	4620      	mov	r0, r4
 801e936:	f7ff fed7 	bl	801e6e8 <lfs_deinit>
    return err;
 801e93a:	f06f 000b 	mvn.w	r0, #11
 801e93e:	e05a      	b.n	801e9f6 <lfs_init+0x2da>
 801e940:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801e942:	f7fc f949 	bl	801abd8 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e946:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801e948:	2800      	cmp	r0, #0
 801e94a:	f47f af3b 	bne.w	801e7c4 <lfs_init+0xa8>
 801e94e:	e7f1      	b.n	801e934 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e950:	4b38      	ldr	r3, [pc, #224]	@ (801ea34 <lfs_init+0x318>)
 801e952:	4a2c      	ldr	r2, [pc, #176]	@ (801ea04 <lfs_init+0x2e8>)
 801e954:	f241 0190 	movw	r1, #4240	@ 0x1090
 801e958:	482b      	ldr	r0, [pc, #172]	@ (801ea08 <lfs_init+0x2ec>)
 801e95a:	f00b fc37 	bl	802a1cc <__assert_func>
 801e95e:	f7fc f93b 	bl	801abd8 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801e962:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801e964:	2800      	cmp	r0, #0
 801e966:	f47f af40 	bne.w	801e7ea <lfs_init+0xce>
 801e96a:	e7e3      	b.n	801e934 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e96c:	4b32      	ldr	r3, [pc, #200]	@ (801ea38 <lfs_init+0x31c>)
 801e96e:	4a25      	ldr	r2, [pc, #148]	@ (801ea04 <lfs_init+0x2e8>)
 801e970:	f241 019c 	movw	r1, #4252	@ 0x109c
 801e974:	4824      	ldr	r0, [pc, #144]	@ (801ea08 <lfs_init+0x2ec>)
 801e976:	f00b fc29 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e97a:	4b30      	ldr	r3, [pc, #192]	@ (801ea3c <lfs_init+0x320>)
 801e97c:	4a21      	ldr	r2, [pc, #132]	@ (801ea04 <lfs_init+0x2e8>)
 801e97e:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801e982:	4821      	ldr	r0, [pc, #132]	@ (801ea08 <lfs_init+0x2ec>)
 801e984:	f00b fc22 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e988:	4b2d      	ldr	r3, [pc, #180]	@ (801ea40 <lfs_init+0x324>)
 801e98a:	4a1e      	ldr	r2, [pc, #120]	@ (801ea04 <lfs_init+0x2e8>)
 801e98c:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801e990:	481d      	ldr	r0, [pc, #116]	@ (801ea08 <lfs_init+0x2ec>)
 801e992:	f00b fc1b 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e996:	4b2b      	ldr	r3, [pc, #172]	@ (801ea44 <lfs_init+0x328>)
 801e998:	4a1a      	ldr	r2, [pc, #104]	@ (801ea04 <lfs_init+0x2e8>)
 801e99a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801e99e:	481a      	ldr	r0, [pc, #104]	@ (801ea08 <lfs_init+0x2ec>)
 801e9a0:	f00b fc14 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e9a4:	4b28      	ldr	r3, [pc, #160]	@ (801ea48 <lfs_init+0x32c>)
 801e9a6:	4a17      	ldr	r2, [pc, #92]	@ (801ea04 <lfs_init+0x2e8>)
 801e9a8:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801e9ac:	4816      	ldr	r0, [pc, #88]	@ (801ea08 <lfs_init+0x2ec>)
 801e9ae:	f00b fc0d 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e9b2:	4b26      	ldr	r3, [pc, #152]	@ (801ea4c <lfs_init+0x330>)
 801e9b4:	4a13      	ldr	r2, [pc, #76]	@ (801ea04 <lfs_init+0x2e8>)
 801e9b6:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801e9ba:	4813      	ldr	r0, [pc, #76]	@ (801ea08 <lfs_init+0x2ec>)
 801e9bc:	f00b fc06 	bl	802a1cc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e9c0:	08c9      	lsrs	r1, r1, #3
 801e9c2:	e74a      	b.n	801e85a <lfs_init+0x13e>
 801e9c4:	4b22      	ldr	r3, [pc, #136]	@ (801ea50 <lfs_init+0x334>)
 801e9c6:	4a0f      	ldr	r2, [pc, #60]	@ (801ea04 <lfs_init+0x2e8>)
 801e9c8:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801e9cc:	480e      	ldr	r0, [pc, #56]	@ (801ea08 <lfs_init+0x2ec>)
 801e9ce:	f00b fbfd 	bl	802a1cc <__assert_func>
        lfs->inline_max = 0;
 801e9d2:	2300      	movs	r3, #0
 801e9d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801e9d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e9da:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801e9dc:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801e9de:	2000      	movs	r0, #0
 801e9e0:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801e9e2:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801e9e4:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801e9e6:	6420      	str	r0, [r4, #64]	@ 0x40
 801e9e8:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801e9ea:	6320      	str	r0, [r4, #48]	@ 0x30
 801e9ec:	6360      	str	r0, [r4, #52]	@ 0x34
 801e9ee:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801e9f0:	64a0      	str	r0, [r4, #72]	@ 0x48
 801e9f2:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801e9f4:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801e9f6:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801e9f8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801e9fa:	08db      	lsrs	r3, r3, #3
 801e9fc:	e73f      	b.n	801e87e <lfs_init+0x162>
 801e9fe:	bf00      	nop
 801ea00:	08039a64 	.word	0x08039a64
 801ea04:	0803a244 	.word	0x0803a244
 801ea08:	080394c4 	.word	0x080394c4
 801ea0c:	08039a80 	.word	0x08039a80
 801ea10:	08039a9c 	.word	0x08039a9c
 801ea14:	08039ab8 	.word	0x08039ab8
 801ea18:	08039ae8 	.word	0x08039ae8
 801ea1c:	08039b18 	.word	0x08039b18
 801ea20:	08039b4c 	.word	0x08039b4c
 801ea24:	08039b68 	.word	0x08039b68
 801ea28:	08039bb4 	.word	0x08039bb4
 801ea2c:	08039bd0 	.word	0x08039bd0
 801ea30:	08039c24 	.word	0x08039c24
 801ea34:	08039c84 	.word	0x08039c84
 801ea38:	08039ca4 	.word	0x08039ca4
 801ea3c:	08039cc0 	.word	0x08039cc0
 801ea40:	08039ce4 	.word	0x08039ce4
 801ea44:	08039d00 	.word	0x08039d00
 801ea48:	08039d30 	.word	0x08039d30
 801ea4c:	08039d88 	.word	0x08039d88
 801ea50:	08039dd8 	.word	0x08039dd8

0801ea54 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801ea54:	b570      	push	{r4, r5, r6, lr}
 801ea56:	b096      	sub	sp, #88	@ 0x58
 801ea58:	4604      	mov	r4, r0
 801ea5a:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801ea5c:	f7ff fe5e 	bl	801e71c <lfs_init>
        if (err) {
 801ea60:	4606      	mov	r6, r0
 801ea62:	b9f0      	cbnz	r0, 801eaa2 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801ea64:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801ea66:	b1fb      	cbz	r3, 801eaa8 <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801ea68:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ea6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ea6c:	2100      	movs	r1, #0
 801ea6e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801ea70:	f00e f8fe 	bl	802cc70 <memset>
        lfs->lookahead.start = 0;
 801ea74:	2200      	movs	r2, #0
 801ea76:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801ea78:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801ea7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ea7c:	00db      	lsls	r3, r3, #3
 801ea7e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801ea80:	428b      	cmp	r3, r1
 801ea82:	bf28      	it	cs
 801ea84:	460b      	movcs	r3, r1
 801ea86:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801ea88:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801ea8a:	4620      	mov	r0, r4
 801ea8c:	f7fc fbda 	bl	801b244 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801ea90:	a906      	add	r1, sp, #24
 801ea92:	4620      	mov	r0, r4
 801ea94:	f7fe f820 	bl	801cad8 <lfs_dir_alloc>
        if (err) {
 801ea98:	4606      	mov	r6, r0
 801ea9a:	b160      	cbz	r0, 801eab6 <lfs_format_+0x62>
    lfs_deinit(lfs);
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	f7ff fe23 	bl	801e6e8 <lfs_deinit>
}
 801eaa2:	4630      	mov	r0, r6
 801eaa4:	b016      	add	sp, #88	@ 0x58
 801eaa6:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801eaa8:	4b20      	ldr	r3, [pc, #128]	@ (801eb2c <lfs_format_+0xd8>)
 801eaaa:	4a21      	ldr	r2, [pc, #132]	@ (801eb30 <lfs_format_+0xdc>)
 801eaac:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801eab0:	4820      	ldr	r0, [pc, #128]	@ (801eb34 <lfs_format_+0xe0>)
 801eab2:	f00b fb8b 	bl	802a1cc <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801eab6:	4620      	mov	r0, r4
 801eab8:	f7fc fbb6 	bl	801b228 <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801eabc:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801eabe:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801eac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801eac2:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801eac4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801eac6:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801eac8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801eaca:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801eacc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801eace:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801ead0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801ead2:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801ead4:	4b18      	ldr	r3, [pc, #96]	@ (801eb38 <lfs_format_+0xe4>)
 801ead6:	930e      	str	r3, [sp, #56]	@ 0x38
 801ead8:	2300      	movs	r3, #0
 801eada:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eadc:	4b17      	ldr	r3, [pc, #92]	@ (801eb3c <lfs_format_+0xe8>)
 801eade:	9310      	str	r3, [sp, #64]	@ 0x40
 801eae0:	4b17      	ldr	r3, [pc, #92]	@ (801eb40 <lfs_format_+0xec>)
 801eae2:	9311      	str	r3, [sp, #68]	@ 0x44
 801eae4:	4b17      	ldr	r3, [pc, #92]	@ (801eb44 <lfs_format_+0xf0>)
 801eae6:	9312      	str	r3, [sp, #72]	@ 0x48
 801eae8:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801eaec:	2303      	movs	r3, #3
 801eaee:	aa0e      	add	r2, sp, #56	@ 0x38
 801eaf0:	a906      	add	r1, sp, #24
 801eaf2:	4620      	mov	r0, r4
 801eaf4:	f7ff fcb2 	bl	801e45c <lfs_dir_commit>
        if (err) {
 801eaf8:	4606      	mov	r6, r0
 801eafa:	2800      	cmp	r0, #0
 801eafc:	d1ce      	bne.n	801ea9c <lfs_format_+0x48>
        root.erased = false;
 801eafe:	2200      	movs	r2, #0
 801eb00:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801eb04:	4613      	mov	r3, r2
 801eb06:	a906      	add	r1, sp, #24
 801eb08:	4620      	mov	r0, r4
 801eb0a:	f7ff fca7 	bl	801e45c <lfs_dir_commit>
        if (err) {
 801eb0e:	4606      	mov	r6, r0
 801eb10:	2800      	cmp	r0, #0
 801eb12:	d1c3      	bne.n	801ea9c <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801eb14:	2300      	movs	r3, #0
 801eb16:	9314      	str	r3, [sp, #80]	@ 0x50
 801eb18:	2301      	movs	r3, #1
 801eb1a:	9315      	str	r3, [sp, #84]	@ 0x54
 801eb1c:	aa14      	add	r2, sp, #80	@ 0x50
 801eb1e:	a906      	add	r1, sp, #24
 801eb20:	4620      	mov	r0, r4
 801eb22:	f7fd fe6b 	bl	801c7fc <lfs_dir_fetch>
 801eb26:	4606      	mov	r6, r0
        if (err) {
 801eb28:	e7b8      	b.n	801ea9c <lfs_format_+0x48>
 801eb2a:	bf00      	nop
 801eb2c:	08039e68 	.word	0x08039e68
 801eb30:	0803a250 	.word	0x0803a250
 801eb34:	080394c4 	.word	0x080394c4
 801eb38:	40100000 	.word	0x40100000
 801eb3c:	0ff00008 	.word	0x0ff00008
 801eb40:	08039e80 	.word	0x08039e80
 801eb44:	20100018 	.word	0x20100018

0801eb48 <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801eb48:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801eb4a:	f7ff fdcd 	bl	801e6e8 <lfs_deinit>
}
 801eb4e:	bd08      	pop	{r3, pc}

0801eb50 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb54:	b09b      	sub	sp, #108	@ 0x6c
 801eb56:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801eb58:	f7ff fde0 	bl	801e71c <lfs_init>
    if (err) {
 801eb5c:	9005      	str	r0, [sp, #20]
 801eb5e:	b9d8      	cbnz	r0, 801eb98 <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801eb60:	2220      	movs	r2, #32
 801eb62:	2100      	movs	r1, #0
 801eb64:	a80f      	add	r0, sp, #60	@ 0x3c
 801eb66:	f00e f883 	bl	802cc70 <memset>
 801eb6a:	2501      	movs	r5, #1
 801eb6c:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801eb6e:	4aa1      	ldr	r2, [pc, #644]	@ (801edf4 <lfs_mount_+0x2a4>)
 801eb70:	ab0d      	add	r3, sp, #52	@ 0x34
 801eb72:	e892 0003 	ldmia.w	r2, {r0, r1}
 801eb76:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801eb7a:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801eb7c:	e073      	b.n	801ec66 <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801eb7e:	4b9e      	ldr	r3, [pc, #632]	@ (801edf8 <lfs_mount_+0x2a8>)
 801eb80:	f241 123d 	movw	r2, #4413	@ 0x113d
 801eb84:	499d      	ldr	r1, [pc, #628]	@ (801edfc <lfs_mount_+0x2ac>)
 801eb86:	489e      	ldr	r0, [pc, #632]	@ (801ee00 <lfs_mount_+0x2b0>)
 801eb88:	f00b fb54 	bl	802a234 <printf>
            err = LFS_ERR_CORRUPT;
 801eb8c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801eb90:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801eb92:	4620      	mov	r0, r4
 801eb94:	f7ff ffd8 	bl	801eb48 <lfs_unmount_>
}
 801eb98:	9805      	ldr	r0, [sp, #20]
 801eb9a:	b01b      	add	sp, #108	@ 0x6c
 801eb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801eba0:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801eba2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eba4:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801eba6:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801eba8:	2500      	movs	r5, #0
 801ebaa:	e075      	b.n	801ec98 <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801ebac:	4620      	mov	r0, r4
 801ebae:	f7fc fb44 	bl	801b23a <lfs_fs_disk_version_minor>
 801ebb2:	4b91      	ldr	r3, [pc, #580]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ebb4:	9303      	str	r3, [sp, #12]
 801ebb6:	9002      	str	r0, [sp, #8]
 801ebb8:	f8cd 9004 	str.w	r9, [sp, #4]
 801ebbc:	b2bf      	uxth	r7, r7
 801ebbe:	9700      	str	r7, [sp, #0]
 801ebc0:	4643      	mov	r3, r8
 801ebc2:	f241 126b 	movw	r2, #4459	@ 0x116b
 801ebc6:	498d      	ldr	r1, [pc, #564]	@ (801edfc <lfs_mount_+0x2ac>)
 801ebc8:	488e      	ldr	r0, [pc, #568]	@ (801ee04 <lfs_mount_+0x2b4>)
 801ebca:	f00b fb33 	bl	802a234 <printf>
                err = LFS_ERR_INVAL;
 801ebce:	f06f 0315 	mvn.w	r3, #21
 801ebd2:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801ebd4:	e7dd      	b.n	801eb92 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801ebd6:	4b88      	ldr	r3, [pc, #544]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ebd8:	9303      	str	r3, [sp, #12]
 801ebda:	9002      	str	r0, [sp, #8]
 801ebdc:	f8cd 9004 	str.w	r9, [sp, #4]
 801ebe0:	b2bf      	uxth	r7, r7
 801ebe2:	9700      	str	r7, [sp, #0]
 801ebe4:	4643      	mov	r3, r8
 801ebe6:	f241 127a 	movw	r2, #4474	@ 0x117a
 801ebea:	4984      	ldr	r1, [pc, #528]	@ (801edfc <lfs_mount_+0x2ac>)
 801ebec:	4886      	ldr	r0, [pc, #536]	@ (801ee08 <lfs_mount_+0x2b8>)
 801ebee:	f00b fb21 	bl	802a234 <printf>
                needssuperblock = true;
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	9304      	str	r3, [sp, #16]
 801ebf6:	e08f      	b.n	801ed18 <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801ebf8:	497f      	ldr	r1, [pc, #508]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ebfa:	9101      	str	r1, [sp, #4]
 801ebfc:	9200      	str	r2, [sp, #0]
 801ebfe:	f241 1289 	movw	r2, #4489	@ 0x1189
 801ec02:	497e      	ldr	r1, [pc, #504]	@ (801edfc <lfs_mount_+0x2ac>)
 801ec04:	4881      	ldr	r0, [pc, #516]	@ (801ee0c <lfs_mount_+0x2bc>)
 801ec06:	f00b fb15 	bl	802a234 <printf>
                    err = LFS_ERR_INVAL;
 801ec0a:	f06f 0315 	mvn.w	r3, #21
 801ec0e:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801ec10:	e7bf      	b.n	801eb92 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801ec12:	4979      	ldr	r1, [pc, #484]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ec14:	9101      	str	r1, [sp, #4]
 801ec16:	9200      	str	r2, [sp, #0]
 801ec18:	f241 1294 	movw	r2, #4500	@ 0x1194
 801ec1c:	4977      	ldr	r1, [pc, #476]	@ (801edfc <lfs_mount_+0x2ac>)
 801ec1e:	487c      	ldr	r0, [pc, #496]	@ (801ee10 <lfs_mount_+0x2c0>)
 801ec20:	f00b fb08 	bl	802a234 <printf>
                    err = LFS_ERR_INVAL;
 801ec24:	f06f 0315 	mvn.w	r3, #21
 801ec28:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801ec2a:	e7b2      	b.n	801eb92 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801ec2c:	4972      	ldr	r1, [pc, #456]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ec2e:	9101      	str	r1, [sp, #4]
 801ec30:	9200      	str	r2, [sp, #0]
 801ec32:	f241 129f 	movw	r2, #4511	@ 0x119f
 801ec36:	4971      	ldr	r1, [pc, #452]	@ (801edfc <lfs_mount_+0x2ac>)
 801ec38:	4876      	ldr	r0, [pc, #472]	@ (801ee14 <lfs_mount_+0x2c4>)
 801ec3a:	f00b fafb 	bl	802a234 <printf>
                    err = LFS_ERR_INVAL;
 801ec3e:	f06f 0315 	mvn.w	r3, #21
 801ec42:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801ec44:	e7a5      	b.n	801eb92 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801ec46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec48:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801ec4a:	9b08      	ldr	r3, [sp, #32]
 801ec4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ec4e:	4293      	cmp	r3, r2
 801ec50:	f040 8096 	bne.w	801ed80 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801ec54:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801ec58:	a90f      	add	r1, sp, #60	@ 0x3c
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f7fc fdee 	bl	801b83c <lfs_dir_getgstate>
        if (err) {
 801ec60:	2800      	cmp	r0, #0
 801ec62:	f040 809e 	bne.w	801eda2 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ec66:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801ec68:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801ec6c:	f000 809d 	beq.w	801edaa <lfs_mount_+0x25a>
 801ec70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ec72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec76:	f000 8096 	beq.w	801eda6 <lfs_mount_+0x256>
 801ec7a:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801ec7c:	f013 0301 	ands.w	r3, r3, #1
 801ec80:	f040 8095 	bne.w	801edae <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801ec84:	a90d      	add	r1, sp, #52	@ 0x34
 801ec86:	a815      	add	r0, sp, #84	@ 0x54
 801ec88:	f7fc fa60 	bl	801b14c <lfs_pair_issync>
 801ec8c:	9004      	str	r0, [sp, #16]
 801ec8e:	2800      	cmp	r0, #0
 801ec90:	f47f af75 	bne.w	801eb7e <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801ec94:	42b5      	cmp	r5, r6
 801ec96:	d083      	beq.n	801eba0 <lfs_mount_+0x50>
        tortoise_i += 1;
 801ec98:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801ec9a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ec9c:	4b5e      	ldr	r3, [pc, #376]	@ (801ee18 <lfs_mount_+0x2c8>)
 801ec9e:	9318      	str	r3, [sp, #96]	@ 0x60
 801eca0:	2308      	movs	r3, #8
 801eca2:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801eca4:	ab17      	add	r3, sp, #92	@ 0x5c
 801eca6:	9303      	str	r3, [sp, #12]
 801eca8:	4b5c      	ldr	r3, [pc, #368]	@ (801ee1c <lfs_mount_+0x2cc>)
 801ecaa:	9302      	str	r3, [sp, #8]
 801ecac:	2300      	movs	r3, #0
 801ecae:	9301      	str	r3, [sp, #4]
 801ecb0:	4b5b      	ldr	r3, [pc, #364]	@ (801ee20 <lfs_mount_+0x2d0>)
 801ecb2:	9300      	str	r3, [sp, #0]
 801ecb4:	4b5b      	ldr	r3, [pc, #364]	@ (801ee24 <lfs_mount_+0x2d4>)
 801ecb6:	aa15      	add	r2, sp, #84	@ 0x54
 801ecb8:	a90f      	add	r1, sp, #60	@ 0x3c
 801ecba:	4620      	mov	r0, r4
 801ecbc:	f7fd fabe 	bl	801c23c <lfs_dir_fetchmatch>
        if (tag < 0) {
 801ecc0:	2800      	cmp	r0, #0
 801ecc2:	db6c      	blt.n	801ed9e <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801ecc4:	2800      	cmp	r0, #0
 801ecc6:	d0c5      	beq.n	801ec54 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ecc8:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801eccc:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801ecd0:	d0c0      	beq.n	801ec54 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801ecd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ecd4:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801ecd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ecd8:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801ecda:	ab07      	add	r3, sp, #28
 801ecdc:	9300      	str	r3, [sp, #0]
 801ecde:	4b52      	ldr	r3, [pc, #328]	@ (801ee28 <lfs_mount_+0x2d8>)
 801ece0:	4a50      	ldr	r2, [pc, #320]	@ (801ee24 <lfs_mount_+0x2d4>)
 801ece2:	a90f      	add	r1, sp, #60	@ 0x3c
 801ece4:	4620      	mov	r0, r4
 801ece6:	f7fc fd9b 	bl	801b820 <lfs_dir_get>
            if (tag < 0) {
 801ecea:	2800      	cmp	r0, #0
 801ecec:	db55      	blt.n	801ed9a <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801ecee:	9f07      	ldr	r7, [sp, #28]
 801ecf0:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801ecf4:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	f7fc fa99 	bl	801b230 <lfs_fs_disk_version_major>
 801ecfe:	4681      	mov	r9, r0
 801ed00:	4540      	cmp	r0, r8
 801ed02:	f47f af53 	bne.w	801ebac <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801ed06:	4620      	mov	r0, r4
 801ed08:	f7fc fa97 	bl	801b23a <lfs_fs_disk_version_minor>
 801ed0c:	4550      	cmp	r0, sl
 801ed0e:	f4ff af4d 	bcc.w	801ebac <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801ed12:	4550      	cmp	r0, sl
 801ed14:	f63f af5f 	bhi.w	801ebd6 <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801ed18:	9904      	ldr	r1, [sp, #16]
 801ed1a:	4620      	mov	r0, r4
 801ed1c:	f7fc fb2b 	bl	801b376 <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801ed20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed22:	b123      	cbz	r3, 801ed2e <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801ed24:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801ed26:	4293      	cmp	r3, r2
 801ed28:	f63f af66 	bhi.w	801ebf8 <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801ed2c:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801ed2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed30:	b123      	cbz	r3, 801ed3c <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801ed32:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801ed34:	4293      	cmp	r3, r2
 801ed36:	f63f af6c 	bhi.w	801ec12 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801ed3a:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801ed3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed3e:	b14b      	cbz	r3, 801ed54 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801ed40:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ed42:	4293      	cmp	r3, r2
 801ed44:	f63f af72 	bhi.w	801ec2c <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801ed48:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801ed4a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801ed4c:	4293      	cmp	r3, r2
 801ed4e:	bf28      	it	cs
 801ed50:	4613      	movcs	r3, r2
 801ed52:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801ed54:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801ed56:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801ed58:	2900      	cmp	r1, #0
 801ed5a:	f43f af74 	beq.w	801ec46 <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801ed5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed60:	4299      	cmp	r1, r3
 801ed62:	f43f af70 	beq.w	801ec46 <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801ed66:	4a24      	ldr	r2, [pc, #144]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ed68:	9201      	str	r2, [sp, #4]
 801ed6a:	9100      	str	r1, [sp, #0]
 801ed6c:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801ed70:	4922      	ldr	r1, [pc, #136]	@ (801edfc <lfs_mount_+0x2ac>)
 801ed72:	482e      	ldr	r0, [pc, #184]	@ (801ee2c <lfs_mount_+0x2dc>)
 801ed74:	f00b fa5e 	bl	802a234 <printf>
                err = LFS_ERR_INVAL;
 801ed78:	f06f 0315 	mvn.w	r3, #21
 801ed7c:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801ed7e:	e708      	b.n	801eb92 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801ed80:	491d      	ldr	r1, [pc, #116]	@ (801edf8 <lfs_mount_+0x2a8>)
 801ed82:	9101      	str	r1, [sp, #4]
 801ed84:	9200      	str	r2, [sp, #0]
 801ed86:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801ed8a:	491c      	ldr	r1, [pc, #112]	@ (801edfc <lfs_mount_+0x2ac>)
 801ed8c:	4828      	ldr	r0, [pc, #160]	@ (801ee30 <lfs_mount_+0x2e0>)
 801ed8e:	f00b fa51 	bl	802a234 <printf>
                err = LFS_ERR_INVAL;
 801ed92:	f06f 0315 	mvn.w	r3, #21
 801ed96:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801ed98:	e6fb      	b.n	801eb92 <lfs_mount_+0x42>
                err = tag;
 801ed9a:	9005      	str	r0, [sp, #20]
 801ed9c:	e6f9      	b.n	801eb92 <lfs_mount_+0x42>
            err = tag;
 801ed9e:	9005      	str	r0, [sp, #20]
 801eda0:	e6f7      	b.n	801eb92 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801eda2:	9005      	str	r0, [sp, #20]
 801eda4:	e6f5      	b.n	801eb92 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801eda6:	2301      	movs	r3, #1
 801eda8:	e768      	b.n	801ec7c <lfs_mount_+0x12c>
 801edaa:	2301      	movs	r3, #1
 801edac:	e766      	b.n	801ec7c <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801edae:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801edb2:	9a05      	ldr	r2, [sp, #20]
 801edb4:	2a02      	cmp	r2, #2
 801edb6:	dc05      	bgt.n	801edc4 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801edb8:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801edbc:	b909      	cbnz	r1, 801edc2 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801edbe:	3201      	adds	r2, #1
 801edc0:	e7f8      	b.n	801edb4 <lfs_mount_+0x264>
            return false;
 801edc2:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801edc4:	b3b3      	cbz	r3, 801ee34 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801edc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801edc8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801edcc:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801edce:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801edd2:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801edd6:	ca07      	ldmia	r2, {r0, r1, r2}
 801edd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801eddc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801edde:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801ede0:	fbb3 f1f2 	udiv	r1, r3, r2
 801ede4:	fb02 3311 	mls	r3, r2, r1, r3
 801ede8:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801edea:	4620      	mov	r0, r4
 801edec:	f7fc fa2d 	bl	801b24a <lfs_alloc_drop>
    return 0;
 801edf0:	e6d2      	b.n	801eb98 <lfs_mount_+0x48>
 801edf2:	bf00      	nop
 801edf4:	08035fb4 	.word	0x08035fb4
 801edf8:	08036fac 	.word	0x08036fac
 801edfc:	080394c4 	.word	0x080394c4
 801ee00:	08039684 	.word	0x08039684
 801ee04:	08039e8c 	.word	0x08039e8c
 801ee08:	08039ec4 	.word	0x08039ec4
 801ee0c:	08039f04 	.word	0x08039f04
 801ee10:	08039f38 	.word	0x08039f38
 801ee14:	08039f6c 	.word	0x08039f6c
 801ee18:	08039e80 	.word	0x08039e80
 801ee1c:	0801bffd 	.word	0x0801bffd
 801ee20:	0ff00008 	.word	0x0ff00008
 801ee24:	7ffffc00 	.word	0x7ffffc00
 801ee28:	20100018 	.word	0x20100018
 801ee2c:	08039fa0 	.word	0x08039fa0
 801ee30:	08039fd4 	.word	0x08039fd4
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801ee34:	4b06      	ldr	r3, [pc, #24]	@ (801ee50 <lfs_mount_+0x300>)
 801ee36:	9302      	str	r3, [sp, #8]
 801ee38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ee3a:	9301      	str	r3, [sp, #4]
 801ee3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ee3e:	9300      	str	r3, [sp, #0]
 801ee40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ee42:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801ee46:	4903      	ldr	r1, [pc, #12]	@ (801ee54 <lfs_mount_+0x304>)
 801ee48:	4803      	ldr	r0, [pc, #12]	@ (801ee58 <lfs_mount_+0x308>)
 801ee4a:	f00b f9f3 	bl	802a234 <printf>
 801ee4e:	e7ba      	b.n	801edc6 <lfs_mount_+0x276>
 801ee50:	08036fac 	.word	0x08036fac
 801ee54:	080394c4 	.word	0x080394c4
 801ee58:	0803a004 	.word	0x0803a004

0801ee5c <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801ee5c:	b570      	push	{r4, r5, r6, lr}
 801ee5e:	4606      	mov	r6, r0
 801ee60:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801ee62:	f7ff fbd7 	bl	801e614 <lfs_file_sync_>
 801ee66:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801ee68:	4621      	mov	r1, r4
 801ee6a:	4630      	mov	r0, r6
 801ee6c:	f7fc f9cd 	bl	801b20a <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801ee70:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	b10b      	cbz	r3, 801ee7a <lfs_file_close_+0x1e>
}
 801ee76:	4628      	mov	r0, r5
 801ee78:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801ee7a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801ee7c:	f7fb ff2e 	bl	801acdc <vPortFree>
    return err;
 801ee80:	e7f9      	b.n	801ee76 <lfs_file_close_+0x1a>
	...

0801ee84 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801ee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee88:	b08d      	sub	sp, #52	@ 0x34
 801ee8a:	4682      	mov	sl, r0
 801ee8c:	4688      	mov	r8, r1
 801ee8e:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801ee90:	6812      	ldr	r2, [r2, #0]
 801ee92:	9205      	str	r2, [sp, #20]
    if (id) {
 801ee94:	9306      	str	r3, [sp, #24]
 801ee96:	b11b      	cbz	r3, 801eea0 <lfs_dir_find+0x1c>
 801ee98:	461a      	mov	r2, r3
        *id = 0x3ff;
 801ee9a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ee9e:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801eea0:	f8da 3020 	ldr.w	r3, [sl, #32]
 801eea4:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801eea8:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801eeac:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801eeb0:	4e4d      	ldr	r6, [pc, #308]	@ (801efe8 <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801eeb2:	4d4e      	ldr	r5, [pc, #312]	@ (801efec <lfs_dir_find+0x168>)
 801eeb4:	4629      	mov	r1, r5
 801eeb6:	9f05      	ldr	r7, [sp, #20]
 801eeb8:	4638      	mov	r0, r7
 801eeba:	f00d ff49 	bl	802cd50 <strspn>
 801eebe:	4604      	mov	r4, r0
 801eec0:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801eec4:	4629      	mov	r1, r5
 801eec6:	4648      	mov	r0, r9
 801eec8:	f00d fef6 	bl	802ccb8 <strcspn>
 801eecc:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801eece:	2801      	cmp	r0, #1
 801eed0:	d00a      	beq.n	801eee8 <lfs_dir_find+0x64>
 801eed2:	2d02      	cmp	r5, #2
 801eed4:	d00c      	beq.n	801eef0 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801eed6:	eb09 0305 	add.w	r3, r9, r5
 801eeda:	9305      	str	r3, [sp, #20]
 801eedc:	469b      	mov	fp, r3
        int depth = 1;
 801eede:	2701      	movs	r7, #1
 801eee0:	e013      	b.n	801ef0a <lfs_dir_find+0x86>
 801eee2:	46b2      	mov	sl, r6
 801eee4:	4606      	mov	r6, r0
 801eee6:	e7e4      	b.n	801eeb2 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801eee8:	5d3b      	ldrb	r3, [r7, r4]
 801eeea:	2b2e      	cmp	r3, #46	@ 0x2e
 801eeec:	d1f1      	bne.n	801eed2 <lfs_dir_find+0x4e>
 801eeee:	e006      	b.n	801eefe <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801eef0:	2202      	movs	r2, #2
 801eef2:	493f      	ldr	r1, [pc, #252]	@ (801eff0 <lfs_dir_find+0x16c>)
 801eef4:	4648      	mov	r0, r9
 801eef6:	f00d fe27 	bl	802cb48 <memcmp>
 801eefa:	2800      	cmp	r0, #0
 801eefc:	d1eb      	bne.n	801eed6 <lfs_dir_find+0x52>
            name += namelen;
 801eefe:	eb09 0305 	add.w	r3, r9, r5
 801ef02:	9305      	str	r3, [sp, #20]
            goto nextname;
 801ef04:	e7d5      	b.n	801eeb2 <lfs_dir_find+0x2e>
                depth += 1;
 801ef06:	3701      	adds	r7, #1
            suffix += sufflen;
 801ef08:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801ef0a:	4c38      	ldr	r4, [pc, #224]	@ (801efec <lfs_dir_find+0x168>)
 801ef0c:	4621      	mov	r1, r4
 801ef0e:	4658      	mov	r0, fp
 801ef10:	f00d ff1e 	bl	802cd50 <strspn>
 801ef14:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801ef16:	4621      	mov	r1, r4
 801ef18:	4658      	mov	r0, fp
 801ef1a:	f00d fecd 	bl	802ccb8 <strcspn>
            if (sufflen == 0) {
 801ef1e:	4604      	mov	r4, r0
 801ef20:	b170      	cbz	r0, 801ef40 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801ef22:	2802      	cmp	r0, #2
 801ef24:	d1ef      	bne.n	801ef06 <lfs_dir_find+0x82>
 801ef26:	2202      	movs	r2, #2
 801ef28:	4931      	ldr	r1, [pc, #196]	@ (801eff0 <lfs_dir_find+0x16c>)
 801ef2a:	4658      	mov	r0, fp
 801ef2c:	f00d fe0c 	bl	802cb48 <memcmp>
 801ef30:	2800      	cmp	r0, #0
 801ef32:	d1e8      	bne.n	801ef06 <lfs_dir_find+0x82>
                if (depth == 0) {
 801ef34:	3f01      	subs	r7, #1
 801ef36:	d1e7      	bne.n	801ef08 <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801ef38:	eb0b 0304 	add.w	r3, fp, r4
 801ef3c:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801ef3e:	e7b8      	b.n	801eeb2 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801ef40:	f899 3000 	ldrb.w	r3, [r9]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d04a      	beq.n	801efde <lfs_dir_find+0x15a>
        *path = name;
 801ef48:	9b07      	ldr	r3, [sp, #28]
 801ef4a:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801ef4e:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801ef52:	2b02      	cmp	r3, #2
 801ef54:	d13f      	bne.n	801efd6 <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801ef56:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801ef5a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef5e:	429e      	cmp	r6, r3
 801ef60:	d102      	bne.n	801ef68 <lfs_dir_find+0xe4>
 801ef62:	464c      	mov	r4, r9
 801ef64:	4656      	mov	r6, sl
 801ef66:	e029      	b.n	801efbc <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801ef68:	02b6      	lsls	r6, r6, #10
 801ef6a:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ef6e:	9300      	str	r3, [sp, #0]
 801ef70:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801ef74:	f043 0308 	orr.w	r3, r3, #8
 801ef78:	4a1e      	ldr	r2, [pc, #120]	@ (801eff4 <lfs_dir_find+0x170>)
 801ef7a:	4641      	mov	r1, r8
 801ef7c:	4650      	mov	r0, sl
 801ef7e:	f7fc fc4f 	bl	801b820 <lfs_dir_get>
            if (res < 0) {
 801ef82:	1e06      	subs	r6, r0, #0
 801ef84:	db2b      	blt.n	801efde <lfs_dir_find+0x15a>
 801ef86:	464c      	mov	r4, r9
 801ef88:	4656      	mov	r6, sl
 801ef8a:	e017      	b.n	801efbc <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ef8c:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801ef8e:	9609      	str	r6, [sp, #36]	@ 0x24
 801ef90:	940a      	str	r4, [sp, #40]	@ 0x28
 801ef92:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ef94:	aa09      	add	r2, sp, #36	@ 0x24
 801ef96:	9203      	str	r2, [sp, #12]
 801ef98:	4a17      	ldr	r2, [pc, #92]	@ (801eff8 <lfs_dir_find+0x174>)
 801ef9a:	9202      	str	r2, [sp, #8]
 801ef9c:	9301      	str	r3, [sp, #4]
 801ef9e:	9500      	str	r5, [sp, #0]
 801efa0:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801efa4:	463a      	mov	r2, r7
 801efa6:	4641      	mov	r1, r8
 801efa8:	4630      	mov	r0, r6
 801efaa:	f7fd f947 	bl	801c23c <lfs_dir_fetchmatch>
            if (tag < 0) {
 801efae:	2800      	cmp	r0, #0
 801efb0:	db14      	blt.n	801efdc <lfs_dir_find+0x158>
            if (tag) {
 801efb2:	2800      	cmp	r0, #0
 801efb4:	d195      	bne.n	801eee2 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801efb6:	f898 3017 	ldrb.w	r3, [r8, #23]
 801efba:	b14b      	cbz	r3, 801efd0 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801efbc:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801efc0:	212f      	movs	r1, #47	@ 0x2f
 801efc2:	4620      	mov	r0, r4
 801efc4:	f00d fe6b 	bl	802cc9e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801efc8:	2800      	cmp	r0, #0
 801efca:	d0df      	beq.n	801ef8c <lfs_dir_find+0x108>
 801efcc:	2300      	movs	r3, #0
 801efce:	e7de      	b.n	801ef8e <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801efd0:	f06f 0601 	mvn.w	r6, #1
 801efd4:	e003      	b.n	801efde <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801efd6:	f06f 0613 	mvn.w	r6, #19
 801efda:	e000      	b.n	801efde <lfs_dir_find+0x15a>
 801efdc:	4606      	mov	r6, r0
}
 801efde:	4630      	mov	r0, r6
 801efe0:	b00d      	add	sp, #52	@ 0x34
 801efe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efe6:	bf00      	nop
 801efe8:	002ffc00 	.word	0x002ffc00
 801efec:	0803a87c 	.word	0x0803a87c
 801eff0:	0803a03c 	.word	0x0803a03c
 801eff4:	700ffc00 	.word	0x700ffc00
 801eff8:	0801bffd 	.word	0x0801bffd

0801effc <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801effc:	b570      	push	{r4, r5, r6, lr}
 801effe:	b09a      	sub	sp, #104	@ 0x68
 801f000:	4604      	mov	r4, r0
 801f002:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801f004:	f7ff fad2 	bl	801e5ac <lfs_fs_forceconsistency>
    if (err) {
 801f008:	4603      	mov	r3, r0
 801f00a:	b110      	cbz	r0, 801f012 <lfs_remove_+0x16>
}
 801f00c:	4618      	mov	r0, r3
 801f00e:	b01a      	add	sp, #104	@ 0x68
 801f010:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f012:	2300      	movs	r3, #0
 801f014:	aa03      	add	r2, sp, #12
 801f016:	a910      	add	r1, sp, #64	@ 0x40
 801f018:	4620      	mov	r0, r4
 801f01a:	f7ff ff33 	bl	801ee84 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801f01e:	1e03      	subs	r3, r0, #0
 801f020:	dbf4      	blt.n	801f00c <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801f022:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801f026:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f02a:	4295      	cmp	r5, r2
 801f02c:	d031      	beq.n	801f092 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801f02e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f030:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801f032:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801f036:	2e02      	cmp	r6, #2
 801f038:	d02e      	beq.n	801f098 <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801f03a:	02ad      	lsls	r5, r5, #10
 801f03c:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801f040:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801f044:	9518      	str	r5, [sp, #96]	@ 0x60
 801f046:	2300      	movs	r3, #0
 801f048:	9319      	str	r3, [sp, #100]	@ 0x64
 801f04a:	2301      	movs	r3, #1
 801f04c:	aa18      	add	r2, sp, #96	@ 0x60
 801f04e:	a910      	add	r1, sp, #64	@ 0x40
 801f050:	4620      	mov	r0, r4
 801f052:	f7ff fa03 	bl	801e45c <lfs_dir_commit>
    if (err) {
 801f056:	4603      	mov	r3, r0
 801f058:	2800      	cmp	r0, #0
 801f05a:	d142      	bne.n	801f0e2 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801f05c:	9a06      	ldr	r2, [sp, #24]
 801f05e:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801f060:	2e02      	cmp	r6, #2
 801f062:	d1d3      	bne.n	801f00c <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801f064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f068:	4620      	mov	r0, r4
 801f06a:	f7fc f9db 	bl	801b424 <lfs_fs_preporphans>
        if (err) {
 801f06e:	4603      	mov	r3, r0
 801f070:	2800      	cmp	r0, #0
 801f072:	d1cb      	bne.n	801f00c <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801f074:	aa10      	add	r2, sp, #64	@ 0x40
 801f076:	a908      	add	r1, sp, #32
 801f078:	4620      	mov	r0, r4
 801f07a:	f7fe f8e5 	bl	801d248 <lfs_fs_pred>
        if (err) {
 801f07e:	4603      	mov	r3, r0
 801f080:	2800      	cmp	r0, #0
 801f082:	d1c3      	bne.n	801f00c <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801f084:	aa08      	add	r2, sp, #32
 801f086:	a910      	add	r1, sp, #64	@ 0x40
 801f088:	4620      	mov	r0, r4
 801f08a:	f7ff faa3 	bl	801e5d4 <lfs_dir_drop>
 801f08e:	4603      	mov	r3, r0
        if (err) {
 801f090:	e7bc      	b.n	801f00c <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801f092:	f06f 0315 	mvn.w	r3, #21
 801f096:	e7b9      	b.n	801f00c <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801f098:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f09a:	aa04      	add	r2, sp, #16
 801f09c:	9200      	str	r2, [sp, #0]
 801f09e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f0a2:	f043 0308 	orr.w	r3, r3, #8
 801f0a6:	4a10      	ldr	r2, [pc, #64]	@ (801f0e8 <lfs_remove_+0xec>)
 801f0a8:	a910      	add	r1, sp, #64	@ 0x40
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	f7fc fbb8 	bl	801b820 <lfs_dir_get>
        if (res < 0) {
 801f0b0:	1e03      	subs	r3, r0, #0
 801f0b2:	dbab      	blt.n	801f00c <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801f0b4:	aa04      	add	r2, sp, #16
 801f0b6:	a908      	add	r1, sp, #32
 801f0b8:	4620      	mov	r0, r4
 801f0ba:	f7fd fb9f 	bl	801c7fc <lfs_dir_fetch>
        if (err) {
 801f0be:	4603      	mov	r3, r0
 801f0c0:	2800      	cmp	r0, #0
 801f0c2:	d1a3      	bne.n	801f00c <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f0c4:	2101      	movs	r1, #1
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	f7fc f9ac 	bl	801b424 <lfs_fs_preporphans>
        if (err) {
 801f0cc:	4603      	mov	r3, r0
 801f0ce:	2800      	cmp	r0, #0
 801f0d0:	d19c      	bne.n	801f00c <lfs_remove_+0x10>
        dir.type = 0;
 801f0d2:	2300      	movs	r3, #0
 801f0d4:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801f0d8:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801f0dc:	ab06      	add	r3, sp, #24
 801f0de:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f0e0:	e7ab      	b.n	801f03a <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801f0e2:	9a06      	ldr	r2, [sp, #24]
 801f0e4:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801f0e6:	e791      	b.n	801f00c <lfs_remove_+0x10>
 801f0e8:	700ffc00 	.word	0x700ffc00

0801f0ec <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0ee:	b087      	sub	sp, #28
 801f0f0:	4607      	mov	r7, r0
 801f0f2:	460d      	mov	r5, r1
 801f0f4:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801f0f6:	f101 0608 	add.w	r6, r1, #8
 801f0fa:	2300      	movs	r3, #0
 801f0fc:	aa03      	add	r2, sp, #12
 801f0fe:	4631      	mov	r1, r6
 801f100:	f7ff fec0 	bl	801ee84 <lfs_dir_find>
    if (tag < 0) {
 801f104:	1e04      	subs	r4, r0, #0
 801f106:	db14      	blt.n	801f132 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801f108:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801f10c:	2b02      	cmp	r3, #2
 801f10e:	d130      	bne.n	801f172 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801f110:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801f114:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f118:	429c      	cmp	r4, r3
 801f11a:	d10d      	bne.n	801f138 <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801f11c:	6a3b      	ldr	r3, [r7, #32]
 801f11e:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801f120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f122:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801f124:	aa04      	add	r2, sp, #16
 801f126:	4631      	mov	r1, r6
 801f128:	4638      	mov	r0, r7
 801f12a:	f7fd fb67 	bl	801c7fc <lfs_dir_fetch>
    if (err) {
 801f12e:	4604      	mov	r4, r0
 801f130:	b188      	cbz	r0, 801f156 <lfs_dir_open_+0x6a>
}
 801f132:	4620      	mov	r0, r4
 801f134:	b007      	add	sp, #28
 801f136:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801f138:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f13a:	ab04      	add	r3, sp, #16
 801f13c:	9300      	str	r3, [sp, #0]
 801f13e:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801f142:	f043 0308 	orr.w	r3, r3, #8
 801f146:	4a0c      	ldr	r2, [pc, #48]	@ (801f178 <lfs_dir_open_+0x8c>)
 801f148:	4631      	mov	r1, r6
 801f14a:	4638      	mov	r0, r7
 801f14c:	f7fc fb68 	bl	801b820 <lfs_dir_get>
        if (res < 0) {
 801f150:	1e04      	subs	r4, r0, #0
 801f152:	dae7      	bge.n	801f124 <lfs_dir_open_+0x38>
 801f154:	e7ed      	b.n	801f132 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801f156:	68ab      	ldr	r3, [r5, #8]
 801f158:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801f15a:	68eb      	ldr	r3, [r5, #12]
 801f15c:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801f15e:	2300      	movs	r3, #0
 801f160:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801f162:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801f164:	2302      	movs	r3, #2
 801f166:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801f168:	4629      	mov	r1, r5
 801f16a:	4638      	mov	r0, r7
 801f16c:	f7fc f858 	bl	801b220 <lfs_mlist_append>
    return 0;
 801f170:	e7df      	b.n	801f132 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801f172:	f06f 0413 	mvn.w	r4, #19
 801f176:	e7dc      	b.n	801f132 <lfs_dir_open_+0x46>
 801f178:	700ffc00 	.word	0x700ffc00

0801f17c <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f180:	b0ad      	sub	sp, #180	@ 0xb4
 801f182:	4604      	mov	r4, r0
 801f184:	9103      	str	r1, [sp, #12]
 801f186:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801f188:	f7ff fa10 	bl	801e5ac <lfs_fs_forceconsistency>
    if (err) {
 801f18c:	4606      	mov	r6, r0
 801f18e:	b118      	cbz	r0, 801f198 <lfs_rename_+0x1c>
}
 801f190:	4630      	mov	r0, r6
 801f192:	b02d      	add	sp, #180	@ 0xb4
 801f194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801f198:	2300      	movs	r3, #0
 801f19a:	aa03      	add	r2, sp, #12
 801f19c:	a922      	add	r1, sp, #136	@ 0x88
 801f19e:	4620      	mov	r0, r4
 801f1a0:	f7ff fe70 	bl	801ee84 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801f1a4:	2800      	cmp	r0, #0
 801f1a6:	f2c0 809e 	blt.w	801f2e6 <lfs_rename_+0x16a>
 801f1aa:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801f1ac:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801f1b0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f1b4:	429d      	cmp	r5, r3
 801f1b6:	f000 8094 	beq.w	801f2e2 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801f1ba:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801f1be:	aa02      	add	r2, sp, #8
 801f1c0:	a91a      	add	r1, sp, #104	@ 0x68
 801f1c2:	4620      	mov	r0, r4
 801f1c4:	f7ff fe5e 	bl	801ee84 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f1c8:	f1b0 0900 	subs.w	r9, r0, #0
 801f1cc:	f2c0 808d 	blt.w	801f2ea <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801f1d0:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f1d4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f1d8:	429a      	cmp	r2, r3
 801f1da:	f000 8086 	beq.w	801f2ea <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801f1de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f1e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f1e2:	429a      	cmp	r2, r3
 801f1e4:	d008      	beq.n	801f1f8 <lfs_rename_+0x7c>
 801f1e6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f1e8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801f1ea:	4281      	cmp	r1, r0
 801f1ec:	d004      	beq.n	801f1f8 <lfs_rename_+0x7c>
 801f1ee:	4299      	cmp	r1, r3
 801f1f0:	d002      	beq.n	801f1f8 <lfs_rename_+0x7c>
 801f1f2:	4290      	cmp	r0, r2
 801f1f4:	d000      	beq.n	801f1f8 <lfs_rename_+0x7c>
 801f1f6:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801f1f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f1fa:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801f1fc:	f119 0f02 	cmn.w	r9, #2
 801f200:	f000 8085 	beq.w	801f30e <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801f204:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801f208:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801f20c:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801f210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801f214:	2b00      	cmp	r3, #0
 801f216:	f040 808a 	bne.w	801f32e <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801f21a:	b91e      	cbnz	r6, 801f224 <lfs_rename_+0xa8>
 801f21c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f220:	42ab      	cmp	r3, r5
 801f222:	d0b5      	beq.n	801f190 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f224:	2a02      	cmp	r2, #2
 801f226:	f000 808a 	beq.w	801f33e <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f22a:	46aa      	mov	sl, r5
    if (!samepair) {
 801f22c:	b126      	cbz	r6, 801f238 <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801f22e:	aa22      	add	r2, sp, #136	@ 0x88
 801f230:	4651      	mov	r1, sl
 801f232:	4620      	mov	r0, r4
 801f234:	f7fc f8a6 	bl	801b384 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f238:	f119 0f02 	cmn.w	r9, #2
 801f23c:	f000 80b4 	beq.w	801f3a8 <lfs_rename_+0x22c>
 801f240:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f244:	029b      	lsls	r3, r3, #10
 801f246:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f24a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f24e:	9305      	str	r3, [sp, #20]
 801f250:	2200      	movs	r2, #0
 801f252:	9206      	str	r2, [sp, #24]
 801f254:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801f258:	02bf      	lsls	r7, r7, #10
 801f25a:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801f25e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f262:	9307      	str	r3, [sp, #28]
 801f264:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801f266:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f26a:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801f26e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801f272:	4658      	mov	r0, fp
 801f274:	f7f1 f814 	bl	80102a0 <strlen>
 801f278:	ea48 0000 	orr.w	r0, r8, r0
 801f27c:	9009      	str	r0, [sp, #36]	@ 0x24
 801f27e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801f282:	432f      	orrs	r7, r5
 801f284:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801f288:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801f28c:	970b      	str	r7, [sp, #44]	@ 0x2c
 801f28e:	ab22      	add	r3, sp, #136	@ 0x88
 801f290:	930c      	str	r3, [sp, #48]	@ 0x30
 801f292:	2e00      	cmp	r6, #0
 801f294:	f040 808a 	bne.w	801f3ac <lfs_rename_+0x230>
 801f298:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801f29c:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801f2a0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f2a4:	930d      	str	r3, [sp, #52]	@ 0x34
 801f2a6:	2300      	movs	r3, #0
 801f2a8:	930e      	str	r3, [sp, #56]	@ 0x38
 801f2aa:	2305      	movs	r3, #5
 801f2ac:	aa05      	add	r2, sp, #20
 801f2ae:	a91a      	add	r1, sp, #104	@ 0x68
 801f2b0:	4620      	mov	r0, r4
 801f2b2:	f7ff f8d3 	bl	801e45c <lfs_dir_commit>
    if (err) {
 801f2b6:	4607      	mov	r7, r0
 801f2b8:	2800      	cmp	r0, #0
 801f2ba:	d179      	bne.n	801f3b0 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f2bc:	b126      	cbz	r6, 801f2c8 <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801f2be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801f2c0:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801f2c2:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801f2c6:	d177      	bne.n	801f3b8 <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801f2c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2ca:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801f2cc:	f119 0f02 	cmn.w	r9, #2
 801f2d0:	f000 80a9 	beq.w	801f426 <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801f2d4:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801f2d8:	2802      	cmp	r0, #2
 801f2da:	f000 8088 	beq.w	801f3ee <lfs_rename_+0x272>
    return 0;
 801f2de:	463e      	mov	r6, r7
 801f2e0:	e756      	b.n	801f190 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801f2e2:	f06f 0015 	mvn.w	r0, #21
 801f2e6:	4606      	mov	r6, r0
 801f2e8:	e752      	b.n	801f190 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801f2ea:	f119 0f02 	cmn.w	r9, #2
 801f2ee:	d106      	bne.n	801f2fe <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801f2f0:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801f2f4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f2f8:	429a      	cmp	r2, r3
 801f2fa:	f47f af70 	bne.w	801f1de <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801f2fe:	f1b9 0f00 	cmp.w	r9, #0
 801f302:	db02      	blt.n	801f30a <lfs_rename_+0x18e>
 801f304:	f06f 0615 	mvn.w	r6, #21
 801f308:	e742      	b.n	801f190 <lfs_rename_+0x14>
 801f30a:	464e      	mov	r6, r9
 801f30c:	e740      	b.n	801f190 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801f30e:	9802      	ldr	r0, [sp, #8]
 801f310:	f7f0 ffc6 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f314:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f316:	4283      	cmp	r3, r0
 801f318:	f0c0 8082 	bcc.w	801f420 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801f31c:	2e00      	cmp	r6, #0
 801f31e:	d141      	bne.n	801f3a4 <lfs_rename_+0x228>
 801f320:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f324:	42ab      	cmp	r3, r5
 801f326:	d83b      	bhi.n	801f3a0 <lfs_rename_+0x224>
            newoldid += 1;
 801f328:	f105 0a01 	add.w	sl, r5, #1
 801f32c:	e77e      	b.n	801f22c <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801f32e:	2a02      	cmp	r2, #2
 801f330:	d002      	beq.n	801f338 <lfs_rename_+0x1bc>
 801f332:	f06f 0613 	mvn.w	r6, #19
 801f336:	e72b      	b.n	801f190 <lfs_rename_+0x14>
 801f338:	f06f 0614 	mvn.w	r6, #20
 801f33c:	e728      	b.n	801f190 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801f33e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801f342:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801f344:	aa05      	add	r2, sp, #20
 801f346:	9200      	str	r2, [sp, #0]
 801f348:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f34c:	f043 0308 	orr.w	r3, r3, #8
 801f350:	4a36      	ldr	r2, [pc, #216]	@ (801f42c <lfs_rename_+0x2b0>)
 801f352:	a91a      	add	r1, sp, #104	@ 0x68
 801f354:	4620      	mov	r0, r4
 801f356:	f7fc fa63 	bl	801b820 <lfs_dir_get>
        if (res < 0) {
 801f35a:	2800      	cmp	r0, #0
 801f35c:	db1a      	blt.n	801f394 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801f35e:	aa05      	add	r2, sp, #20
 801f360:	a911      	add	r1, sp, #68	@ 0x44
 801f362:	4620      	mov	r0, r4
 801f364:	f7fd fa4a 	bl	801c7fc <lfs_dir_fetch>
        if (err) {
 801f368:	b9b0      	cbnz	r0, 801f398 <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801f36a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f36c:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801f370:	d002      	beq.n	801f378 <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801f372:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801f376:	e70b      	b.n	801f190 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801f378:	2101      	movs	r1, #1
 801f37a:	4620      	mov	r0, r4
 801f37c:	f7fc f852 	bl	801b424 <lfs_fs_preporphans>
        if (err) {
 801f380:	b960      	cbnz	r0, 801f39c <lfs_rename_+0x220>
        prevdir.type = 0;
 801f382:	2300      	movs	r3, #0
 801f384:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801f388:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801f38c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801f38e:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f390:	46aa      	mov	sl, r5
 801f392:	e74b      	b.n	801f22c <lfs_rename_+0xb0>
            return (int)res;
 801f394:	4606      	mov	r6, r0
 801f396:	e6fb      	b.n	801f190 <lfs_rename_+0x14>
            return err;
 801f398:	4606      	mov	r6, r0
 801f39a:	e6f9      	b.n	801f190 <lfs_rename_+0x14>
            return err;
 801f39c:	4606      	mov	r6, r0
 801f39e:	e6f7      	b.n	801f190 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801f3a0:	46aa      	mov	sl, r5
 801f3a2:	e743      	b.n	801f22c <lfs_rename_+0xb0>
 801f3a4:	46aa      	mov	sl, r5
 801f3a6:	e742      	b.n	801f22e <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801f3a8:	2300      	movs	r3, #0
 801f3aa:	e750      	b.n	801f24e <lfs_rename_+0xd2>
 801f3ac:	2300      	movs	r3, #0
 801f3ae:	e779      	b.n	801f2a4 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801f3b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f3b2:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801f3b4:	4606      	mov	r6, r0
 801f3b6:	e6eb      	b.n	801f190 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801f3b8:	2200      	movs	r2, #0
 801f3ba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801f3be:	4620      	mov	r0, r4
 801f3c0:	f7fb ffe0 	bl	801b384 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801f3c4:	02ab      	lsls	r3, r5, #10
 801f3c6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801f3ca:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801f3ce:	932a      	str	r3, [sp, #168]	@ 0xa8
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	932b      	str	r3, [sp, #172]	@ 0xac
 801f3d4:	2301      	movs	r3, #1
 801f3d6:	aa2a      	add	r2, sp, #168	@ 0xa8
 801f3d8:	a922      	add	r1, sp, #136	@ 0x88
 801f3da:	4620      	mov	r0, r4
 801f3dc:	f7ff f83e 	bl	801e45c <lfs_dir_commit>
        if (err) {
 801f3e0:	4606      	mov	r6, r0
 801f3e2:	2800      	cmp	r0, #0
 801f3e4:	f43f af70 	beq.w	801f2c8 <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801f3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f3ea:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801f3ec:	e6d0      	b.n	801f190 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801f3ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f3f2:	4620      	mov	r0, r4
 801f3f4:	f7fc f816 	bl	801b424 <lfs_fs_preporphans>
        if (err) {
 801f3f8:	4606      	mov	r6, r0
 801f3fa:	2800      	cmp	r0, #0
 801f3fc:	f47f aec8 	bne.w	801f190 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801f400:	aa1a      	add	r2, sp, #104	@ 0x68
 801f402:	a911      	add	r1, sp, #68	@ 0x44
 801f404:	4620      	mov	r0, r4
 801f406:	f7fd ff1f 	bl	801d248 <lfs_fs_pred>
        if (err) {
 801f40a:	4606      	mov	r6, r0
 801f40c:	2800      	cmp	r0, #0
 801f40e:	f47f aebf 	bne.w	801f190 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801f412:	aa11      	add	r2, sp, #68	@ 0x44
 801f414:	a91a      	add	r1, sp, #104	@ 0x68
 801f416:	4620      	mov	r0, r4
 801f418:	f7ff f8dc 	bl	801e5d4 <lfs_dir_drop>
 801f41c:	4606      	mov	r6, r0
        if (err) {
 801f41e:	e6b7      	b.n	801f190 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801f420:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f424:	e6b4      	b.n	801f190 <lfs_rename_+0x14>
    return 0;
 801f426:	463e      	mov	r6, r7
 801f428:	e6b2      	b.n	801f190 <lfs_rename_+0x14>
 801f42a:	bf00      	nop
 801f42c:	700ffc00 	.word	0x700ffc00

0801f430 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801f430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f434:	b08b      	sub	sp, #44	@ 0x2c
 801f436:	4607      	mov	r7, r0
 801f438:	460c      	mov	r4, r1
 801f43a:	9203      	str	r2, [sp, #12]
 801f43c:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f43e:	f013 0f02 	tst.w	r3, #2
 801f442:	d005      	beq.n	801f450 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801f444:	f7ff f8b2 	bl	801e5ac <lfs_fs_forceconsistency>
        if (err) {
 801f448:	4606      	mov	r6, r0
 801f44a:	2800      	cmp	r0, #0
 801f44c:	f040 8109 	bne.w	801f662 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801f450:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f452:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801f454:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801f456:	2300      	movs	r3, #0
 801f458:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801f45a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801f45c:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801f45e:	f104 0808 	add.w	r8, r4, #8
 801f462:	1d23      	adds	r3, r4, #4
 801f464:	aa03      	add	r2, sp, #12
 801f466:	4641      	mov	r1, r8
 801f468:	4638      	mov	r0, r7
 801f46a:	f7ff fd0b 	bl	801ee84 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801f46e:	1e06      	subs	r6, r0, #0
 801f470:	da09      	bge.n	801f486 <lfs_file_opencfg_+0x56>
 801f472:	f116 0f02 	cmn.w	r6, #2
 801f476:	f040 80ec 	bne.w	801f652 <lfs_file_opencfg_+0x222>
 801f47a:	88a2      	ldrh	r2, [r4, #4]
 801f47c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f480:	429a      	cmp	r2, r3
 801f482:	f000 80e6 	beq.w	801f652 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801f486:	2301      	movs	r3, #1
 801f488:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801f48a:	4621      	mov	r1, r4
 801f48c:	4638      	mov	r0, r7
 801f48e:	f7fb fec7 	bl	801b220 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801f492:	f116 0f02 	cmn.w	r6, #2
 801f496:	d019      	beq.n	801f4cc <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801f498:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801f49c:	f040 80d7 	bne.w	801f64e <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801f4a0:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801f4a4:	2e01      	cmp	r6, #1
 801f4a6:	f040 80e0 	bne.w	801f66a <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801f4aa:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801f4ae:	d042      	beq.n	801f536 <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801f4b0:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801f4b4:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801f4b8:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801f4bc:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801f4c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f4c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f4c6:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f4c8:	2500      	movs	r5, #0
 801f4ca:	e064      	b.n	801f596 <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801f4cc:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801f4d0:	f000 80bf 	beq.w	801f652 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801f4d4:	9d03      	ldr	r5, [sp, #12]
 801f4d6:	4628      	mov	r0, r5
 801f4d8:	f7f0 fee2 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f4dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f4de:	4283      	cmp	r3, r0
 801f4e0:	d202      	bcs.n	801f4e8 <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801f4e2:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f4e6:	e0b4      	b.n	801f652 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f4e8:	88a3      	ldrh	r3, [r4, #4]
 801f4ea:	029b      	lsls	r3, r3, #10
 801f4ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f4f0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f4f4:	9204      	str	r2, [sp, #16]
 801f4f6:	2200      	movs	r2, #0
 801f4f8:	9205      	str	r2, [sp, #20]
 801f4fa:	4318      	orrs	r0, r3
 801f4fc:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801f500:	9006      	str	r0, [sp, #24]
 801f502:	9507      	str	r5, [sp, #28]
 801f504:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f508:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f50c:	9308      	str	r3, [sp, #32]
 801f50e:	9209      	str	r2, [sp, #36]	@ 0x24
 801f510:	2303      	movs	r3, #3
 801f512:	aa04      	add	r2, sp, #16
 801f514:	4641      	mov	r1, r8
 801f516:	4638      	mov	r0, r7
 801f518:	f7fe ffa0 	bl	801e45c <lfs_dir_commit>
 801f51c:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f51e:	f110 0f1c 	cmn.w	r0, #28
 801f522:	d005      	beq.n	801f530 <lfs_file_opencfg_+0x100>
        if (err) {
 801f524:	2800      	cmp	r0, #0
 801f526:	f040 8094 	bne.w	801f652 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801f52a:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801f680 <lfs_file_opencfg_+0x250>
 801f52e:	e7cb      	b.n	801f4c8 <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f530:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801f534:	e08d      	b.n	801f652 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801f536:	88a3      	ldrh	r3, [r4, #4]
 801f538:	029b      	lsls	r3, r3, #10
 801f53a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f53e:	9200      	str	r2, [sp, #0]
 801f540:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f544:	f043 0308 	orr.w	r3, r3, #8
 801f548:	4a4b      	ldr	r2, [pc, #300]	@ (801f678 <lfs_file_opencfg_+0x248>)
 801f54a:	4641      	mov	r1, r8
 801f54c:	4638      	mov	r0, r7
 801f54e:	f7fc f967 	bl	801b820 <lfs_dir_get>
        if (tag < 0) {
 801f552:	f1b0 0900 	subs.w	r9, r0, #0
 801f556:	dab7      	bge.n	801f4c8 <lfs_file_opencfg_+0x98>
            err = tag;
 801f558:	464e      	mov	r6, r9
 801f55a:	e07a      	b.n	801f652 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801f55c:	685b      	ldr	r3, [r3, #4]
 801f55e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f562:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f566:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801f56a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801f56e:	88a3      	ldrh	r3, [r4, #4]
 801f570:	029b      	lsls	r3, r3, #10
 801f572:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f576:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f578:	6849      	ldr	r1, [r1, #4]
 801f57a:	9100      	str	r1, [sp, #0]
 801f57c:	4313      	orrs	r3, r2
 801f57e:	4a3f      	ldr	r2, [pc, #252]	@ (801f67c <lfs_file_opencfg_+0x24c>)
 801f580:	4641      	mov	r1, r8
 801f582:	4638      	mov	r0, r7
 801f584:	f7fc f94c 	bl	801b820 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801f588:	1e06      	subs	r6, r0, #0
 801f58a:	da0c      	bge.n	801f5a6 <lfs_file_opencfg_+0x176>
 801f58c:	f116 0f02 	cmn.w	r6, #2
 801f590:	d009      	beq.n	801f5a6 <lfs_file_opencfg_+0x176>
 801f592:	e05e      	b.n	801f652 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f594:	3501      	adds	r5, #1
 801f596:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f598:	689a      	ldr	r2, [r3, #8]
 801f59a:	42aa      	cmp	r2, r5
 801f59c:	d915      	bls.n	801f5ca <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801f59e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f5a0:	f012 0f01 	tst.w	r2, #1
 801f5a4:	d1da      	bne.n	801f55c <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f5a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f5a8:	f013 0f02 	tst.w	r3, #2
 801f5ac:	d0f2      	beq.n	801f594 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801f5ae:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f5b0:	6852      	ldr	r2, [r2, #4]
 801f5b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f5b6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f5ba:	6891      	ldr	r1, [r2, #8]
 801f5bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f5be:	4291      	cmp	r1, r2
 801f5c0:	d856      	bhi.n	801f670 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801f5c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f5c6:	6323      	str	r3, [r4, #48]	@ 0x30
 801f5c8:	e7e4      	b.n	801f594 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	b16b      	cbz	r3, 801f5ea <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801f5ce:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801f5d0:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801f5d4:	4638      	mov	r0, r7
 801f5d6:	f7fb ff55 	bl	801b484 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801f5da:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f5de:	f240 2301 	movw	r3, #513	@ 0x201
 801f5e2:	429a      	cmp	r2, r3
 801f5e4:	d00b      	beq.n	801f5fe <lfs_file_opencfg_+0x1ce>
    return 0;
 801f5e6:	2600      	movs	r6, #0
 801f5e8:	e03b      	b.n	801f662 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f5ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801f5ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801f5ee:	f7fb faf3 	bl	801abd8 <pvPortMalloc>
 801f5f2:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801f5f4:	2800      	cmp	r0, #0
 801f5f6:	d1eb      	bne.n	801f5d0 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801f5f8:	f06f 060b 	mvn.w	r6, #11
 801f5fc:	e029      	b.n	801f652 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801f5fe:	f06f 0101 	mvn.w	r1, #1
 801f602:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801f604:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801f608:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801f60a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f60c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f610:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801f612:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801f614:	2300      	movs	r3, #0
 801f616:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801f618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f61c:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801f61e:	b90a      	cbnz	r2, 801f624 <lfs_file_opencfg_+0x1f4>
    return 0;
 801f620:	2600      	movs	r6, #0
 801f622:	e01e      	b.n	801f662 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801f624:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801f626:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801f62a:	4293      	cmp	r3, r2
 801f62c:	bf28      	it	cs
 801f62e:	4613      	movcs	r3, r2
 801f630:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801f634:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f636:	9200      	str	r2, [sp, #0]
 801f638:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f63c:	4a0e      	ldr	r2, [pc, #56]	@ (801f678 <lfs_file_opencfg_+0x248>)
 801f63e:	4641      	mov	r1, r8
 801f640:	4638      	mov	r0, r7
 801f642:	f7fc f8ed 	bl	801b820 <lfs_dir_get>
            if (res < 0) {
 801f646:	1e06      	subs	r6, r0, #0
 801f648:	db03      	blt.n	801f652 <lfs_file_opencfg_+0x222>
    return 0;
 801f64a:	2600      	movs	r6, #0
 801f64c:	e009      	b.n	801f662 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801f64e:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801f652:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f654:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f658:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801f65a:	4621      	mov	r1, r4
 801f65c:	4638      	mov	r0, r7
 801f65e:	f7ff fbfd 	bl	801ee5c <lfs_file_close_>
}
 801f662:	4630      	mov	r0, r6
 801f664:	b00b      	add	sp, #44	@ 0x2c
 801f666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801f66a:	f06f 0614 	mvn.w	r6, #20
 801f66e:	e7f0      	b.n	801f652 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801f670:	f06f 061b 	mvn.w	r6, #27
 801f674:	e7ed      	b.n	801f652 <lfs_file_opencfg_+0x222>
 801f676:	bf00      	nop
 801f678:	700ffc00 	.word	0x700ffc00
 801f67c:	7ffffc00 	.word	0x7ffffc00
 801f680:	20100000 	.word	0x20100000

0801f684 <lfs_file_open_>:
        const char *path, int flags) {
 801f684:	b510      	push	{r4, lr}
 801f686:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801f688:	4c02      	ldr	r4, [pc, #8]	@ (801f694 <lfs_file_open_+0x10>)
 801f68a:	9400      	str	r4, [sp, #0]
 801f68c:	f7ff fed0 	bl	801f430 <lfs_file_opencfg_>
}
 801f690:	b002      	add	sp, #8
 801f692:	bd10      	pop	{r4, pc}
 801f694:	0803a168 	.word	0x0803a168

0801f698 <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801f698:	b530      	push	{r4, r5, lr}
 801f69a:	b0ab      	sub	sp, #172	@ 0xac
 801f69c:	4604      	mov	r4, r0
 801f69e:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801f6a0:	f7fe ff84 	bl	801e5ac <lfs_fs_forceconsistency>
    if (err) {
 801f6a4:	4603      	mov	r3, r0
 801f6a6:	b110      	cbz	r0, 801f6ae <lfs_mkdir_+0x16>
}
 801f6a8:	4618      	mov	r0, r3
 801f6aa:	b02b      	add	sp, #172	@ 0xac
 801f6ac:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801f6ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f6b0:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801f6b2:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801f6b6:	aa01      	add	r2, sp, #4
 801f6b8:	a91e      	add	r1, sp, #120	@ 0x78
 801f6ba:	4620      	mov	r0, r4
 801f6bc:	f7ff fbe2 	bl	801ee84 <lfs_dir_find>
 801f6c0:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801f6c2:	f110 0f02 	cmn.w	r0, #2
 801f6c6:	d12f      	bne.n	801f728 <lfs_mkdir_+0x90>
 801f6c8:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801f6cc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f6d0:	4291      	cmp	r1, r2
 801f6d2:	d029      	beq.n	801f728 <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801f6d4:	9801      	ldr	r0, [sp, #4]
 801f6d6:	f7f0 fde3 	bl	80102a0 <strlen>
 801f6da:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801f6dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f6de:	4283      	cmp	r3, r0
 801f6e0:	f0c0 8089 	bcc.w	801f7f6 <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801f6e4:	4620      	mov	r0, r4
 801f6e6:	f7fb fdad 	bl	801b244 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801f6ea:	a913      	add	r1, sp, #76	@ 0x4c
 801f6ec:	4620      	mov	r0, r4
 801f6ee:	f7fd f9f3 	bl	801cad8 <lfs_dir_alloc>
    if (err) {
 801f6f2:	4603      	mov	r3, r0
 801f6f4:	2800      	cmp	r0, #0
 801f6f6:	d1d7      	bne.n	801f6a8 <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801f6f8:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801f6fc:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801f700:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f708:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f70c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801f710:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801f714:	b16b      	cbz	r3, 801f732 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801f716:	aa11      	add	r2, sp, #68	@ 0x44
 801f718:	a90b      	add	r1, sp, #44	@ 0x2c
 801f71a:	4620      	mov	r0, r4
 801f71c:	f7fd f86e 	bl	801c7fc <lfs_dir_fetch>
        if (err) {
 801f720:	4603      	mov	r3, r0
 801f722:	2800      	cmp	r0, #0
 801f724:	d0f4      	beq.n	801f710 <lfs_mkdir_+0x78>
 801f726:	e7bf      	b.n	801f6a8 <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801f728:	2b00      	cmp	r3, #0
 801f72a:	dbbd      	blt.n	801f6a8 <lfs_mkdir_+0x10>
 801f72c:	f06f 0310 	mvn.w	r3, #16
 801f730:	e7ba      	b.n	801f6a8 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801f732:	4b32      	ldr	r3, [pc, #200]	@ (801f7fc <lfs_mkdir_+0x164>)
 801f734:	9326      	str	r3, [sp, #152]	@ 0x98
 801f736:	ab11      	add	r3, sp, #68	@ 0x44
 801f738:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f73a:	2301      	movs	r3, #1
 801f73c:	aa26      	add	r2, sp, #152	@ 0x98
 801f73e:	a913      	add	r1, sp, #76	@ 0x4c
 801f740:	4620      	mov	r0, r4
 801f742:	f7fe fe8b 	bl	801e45c <lfs_dir_commit>
    if (err) {
 801f746:	4603      	mov	r3, r0
 801f748:	2800      	cmp	r0, #0
 801f74a:	d1ad      	bne.n	801f6a8 <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801f74c:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f750:	bb33      	cbnz	r3, 801f7a0 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f752:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801f756:	029b      	lsls	r3, r3, #10
 801f758:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f75c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f760:	9203      	str	r2, [sp, #12]
 801f762:	2200      	movs	r2, #0
 801f764:	9204      	str	r2, [sp, #16]
 801f766:	431d      	orrs	r5, r3
 801f768:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801f76c:	9505      	str	r5, [sp, #20]
 801f76e:	9a01      	ldr	r2, [sp, #4]
 801f770:	9206      	str	r2, [sp, #24]
 801f772:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f776:	f043 0308 	orr.w	r3, r3, #8
 801f77a:	9307      	str	r3, [sp, #28]
 801f77c:	ab13      	add	r3, sp, #76	@ 0x4c
 801f77e:	9308      	str	r3, [sp, #32]
 801f780:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f784:	2b00      	cmp	r3, #0
 801f786:	d134      	bne.n	801f7f2 <lfs_mkdir_+0x15a>
 801f788:	4b1c      	ldr	r3, [pc, #112]	@ (801f7fc <lfs_mkdir_+0x164>)
 801f78a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f78c:	ab13      	add	r3, sp, #76	@ 0x4c
 801f78e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f790:	2304      	movs	r3, #4
 801f792:	aa03      	add	r2, sp, #12
 801f794:	a91e      	add	r1, sp, #120	@ 0x78
 801f796:	4620      	mov	r0, r4
 801f798:	f7fe fe60 	bl	801e45c <lfs_dir_commit>
 801f79c:	4603      	mov	r3, r0
    if (err) {
 801f79e:	e783      	b.n	801f6a8 <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f7a0:	2101      	movs	r1, #1
 801f7a2:	4620      	mov	r0, r4
 801f7a4:	f7fb fe3e 	bl	801b424 <lfs_fs_preporphans>
        if (err) {
 801f7a8:	4603      	mov	r3, r0
 801f7aa:	2800      	cmp	r0, #0
 801f7ac:	f47f af7c 	bne.w	801f6a8 <lfs_mkdir_+0x10>
        cwd.type = 0;
 801f7b0:	2300      	movs	r3, #0
 801f7b2:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801f7b6:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801f7ba:	ab1c      	add	r3, sp, #112	@ 0x70
 801f7bc:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801f7be:	4b0f      	ldr	r3, [pc, #60]	@ (801f7fc <lfs_mkdir_+0x164>)
 801f7c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f7c2:	ab13      	add	r3, sp, #76	@ 0x4c
 801f7c4:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f7c6:	2301      	movs	r3, #1
 801f7c8:	aa28      	add	r2, sp, #160	@ 0xa0
 801f7ca:	a90b      	add	r1, sp, #44	@ 0x2c
 801f7cc:	4620      	mov	r0, r4
 801f7ce:	f7fe fe45 	bl	801e45c <lfs_dir_commit>
        if (err) {
 801f7d2:	4603      	mov	r3, r0
 801f7d4:	b110      	cbz	r0, 801f7dc <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801f7d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f7d8:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801f7da:	e765      	b.n	801f6a8 <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801f7dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f7de:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801f7e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f7e4:	4620      	mov	r0, r4
 801f7e6:	f7fb fe1d 	bl	801b424 <lfs_fs_preporphans>
        if (err) {
 801f7ea:	4603      	mov	r3, r0
 801f7ec:	2800      	cmp	r0, #0
 801f7ee:	d0b0      	beq.n	801f752 <lfs_mkdir_+0xba>
 801f7f0:	e75a      	b.n	801f6a8 <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f7f2:	2300      	movs	r3, #0
 801f7f4:	e7c9      	b.n	801f78a <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801f7f6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801f7fa:	e755      	b.n	801f6a8 <lfs_mkdir_+0x10>
 801f7fc:	600ffc08 	.word	0x600ffc08

0801f800 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801f800:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f802:	b085      	sub	sp, #20
 801f804:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801f806:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f80a:	429a      	cmp	r2, r3
 801f80c:	d02b      	beq.n	801f866 <lfs_dir_getinfo+0x66>
 801f80e:	4604      	mov	r4, r0
 801f810:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f812:	0297      	lsls	r7, r2, #10
 801f814:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801f816:	3301      	adds	r3, #1
 801f818:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f81c:	9100      	str	r1, [sp, #0]
 801f81e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801f822:	4a19      	ldr	r2, [pc, #100]	@ (801f888 <lfs_dir_getinfo+0x88>)
 801f824:	4631      	mov	r1, r6
 801f826:	f7fb fffb 	bl	801b820 <lfs_dir_get>
    if (tag < 0) {
 801f82a:	2800      	cmp	r0, #0
 801f82c:	db21      	blt.n	801f872 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f82e:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801f832:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f834:	ab02      	add	r3, sp, #8
 801f836:	9300      	str	r3, [sp, #0]
 801f838:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801f83c:	f043 0308 	orr.w	r3, r3, #8
 801f840:	4a12      	ldr	r2, [pc, #72]	@ (801f88c <lfs_dir_getinfo+0x8c>)
 801f842:	4631      	mov	r1, r6
 801f844:	4620      	mov	r0, r4
 801f846:	f7fb ffeb 	bl	801b820 <lfs_dir_get>
    if (tag < 0) {
 801f84a:	2800      	cmp	r0, #0
 801f84c:	db11      	blt.n	801f872 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f84e:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801f852:	f240 2202 	movw	r2, #514	@ 0x202
 801f856:	4293      	cmp	r3, r2
 801f858:	d00d      	beq.n	801f876 <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f85a:	f240 2201 	movw	r2, #513	@ 0x201
 801f85e:	4293      	cmp	r3, r2
 801f860:	d00d      	beq.n	801f87e <lfs_dir_getinfo+0x7e>
    return 0;
 801f862:	2000      	movs	r0, #0
 801f864:	e005      	b.n	801f872 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801f866:	4b0a      	ldr	r3, [pc, #40]	@ (801f890 <lfs_dir_getinfo+0x90>)
 801f868:	881b      	ldrh	r3, [r3, #0]
 801f86a:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801f86c:	2302      	movs	r3, #2
 801f86e:	702b      	strb	r3, [r5, #0]
        return 0;
 801f870:	2000      	movs	r0, #0
}
 801f872:	b005      	add	sp, #20
 801f874:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801f876:	9b03      	ldr	r3, [sp, #12]
 801f878:	606b      	str	r3, [r5, #4]
    return 0;
 801f87a:	2000      	movs	r0, #0
 801f87c:	e7f9      	b.n	801f872 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801f87e:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801f882:	6068      	str	r0, [r5, #4]
    return 0;
 801f884:	2000      	movs	r0, #0
 801f886:	e7f4      	b.n	801f872 <lfs_dir_getinfo+0x72>
 801f888:	780ffc00 	.word	0x780ffc00
 801f88c:	700ffc00 	.word	0x700ffc00
 801f890:	0803a87c 	.word	0x0803a87c

0801f894 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f894:	b530      	push	{r4, r5, lr}
 801f896:	b08b      	sub	sp, #44	@ 0x2c
 801f898:	4604      	mov	r4, r0
 801f89a:	9101      	str	r1, [sp, #4]
 801f89c:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f89e:	2300      	movs	r3, #0
 801f8a0:	aa01      	add	r2, sp, #4
 801f8a2:	a902      	add	r1, sp, #8
 801f8a4:	f7ff faee 	bl	801ee84 <lfs_dir_find>
    if (tag < 0) {
 801f8a8:	2800      	cmp	r0, #0
 801f8aa:	db06      	blt.n	801f8ba <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801f8ac:	462b      	mov	r3, r5
 801f8ae:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801f8b2:	a902      	add	r1, sp, #8
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	f7ff ffa3 	bl	801f800 <lfs_dir_getinfo>
}
 801f8ba:	b00b      	add	sp, #44	@ 0x2c
 801f8bc:	bd30      	pop	{r4, r5, pc}
	...

0801f8c0 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f8c0:	b570      	push	{r4, r5, r6, lr}
 801f8c2:	4605      	mov	r5, r0
 801f8c4:	460c      	mov	r4, r1
 801f8c6:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801f8c8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801f8cc:	2100      	movs	r1, #0
 801f8ce:	4630      	mov	r0, r6
 801f8d0:	f00d f9ce 	bl	802cc70 <memset>
    if (dir->pos == 0) {
 801f8d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f8d6:	b183      	cbz	r3, 801f8fa <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801f8d8:	2b01      	cmp	r3, #1
 801f8da:	d11f      	bne.n	801f91c <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801f8dc:	4633      	mov	r3, r6
 801f8de:	2202      	movs	r2, #2
 801f8e0:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801f8e4:	4a22      	ldr	r2, [pc, #136]	@ (801f970 <lfs_dir_read_+0xb0>)
 801f8e6:	8811      	ldrh	r1, [r2, #0]
 801f8e8:	7892      	ldrb	r2, [r2, #2]
 801f8ea:	8131      	strh	r1, [r6, #8]
 801f8ec:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801f8ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f8f0:	3301      	adds	r3, #1
 801f8f2:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f8f4:	f04f 0c01 	mov.w	ip, #1
 801f8f8:	e034      	b.n	801f964 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801f8fa:	2302      	movs	r3, #2
 801f8fc:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801f8fe:	4b1d      	ldr	r3, [pc, #116]	@ (801f974 <lfs_dir_read_+0xb4>)
 801f900:	881b      	ldrh	r3, [r3, #0]
 801f902:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801f904:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f906:	3301      	adds	r3, #1
 801f908:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f90a:	f04f 0c01 	mov.w	ip, #1
 801f90e:	e029      	b.n	801f964 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801f910:	88a1      	ldrh	r1, [r4, #4]
 801f912:	3101      	adds	r1, #1
 801f914:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801f916:	f11c 0f02 	cmn.w	ip, #2
 801f91a:	d11e      	bne.n	801f95a <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801f91c:	88a3      	ldrh	r3, [r4, #4]
 801f91e:	8ba1      	ldrh	r1, [r4, #28]
 801f920:	428b      	cmp	r3, r1
 801f922:	d10c      	bne.n	801f93e <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801f924:	7fe3      	ldrb	r3, [r4, #31]
 801f926:	b1fb      	cbz	r3, 801f968 <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801f928:	f104 0220 	add.w	r2, r4, #32
 801f92c:	f104 0108 	add.w	r1, r4, #8
 801f930:	4628      	mov	r0, r5
 801f932:	f7fc ff63 	bl	801c7fc <lfs_dir_fetch>
            if (err) {
 801f936:	4684      	mov	ip, r0
 801f938:	b9a0      	cbnz	r0, 801f964 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801f93a:	2300      	movs	r3, #0
 801f93c:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801f93e:	4633      	mov	r3, r6
 801f940:	88a2      	ldrh	r2, [r4, #4]
 801f942:	f104 0108 	add.w	r1, r4, #8
 801f946:	4628      	mov	r0, r5
 801f948:	f7ff ff5a 	bl	801f800 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801f94c:	4684      	mov	ip, r0
 801f94e:	2800      	cmp	r0, #0
 801f950:	d0de      	beq.n	801f910 <lfs_dir_read_+0x50>
 801f952:	f110 0f02 	cmn.w	r0, #2
 801f956:	d0db      	beq.n	801f910 <lfs_dir_read_+0x50>
 801f958:	e004      	b.n	801f964 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801f95a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f95c:	3301      	adds	r3, #1
 801f95e:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801f960:	f04f 0c01 	mov.w	ip, #1
}
 801f964:	4660      	mov	r0, ip
 801f966:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801f968:	f04f 0c00 	mov.w	ip, #0
 801f96c:	e7fa      	b.n	801f964 <lfs_dir_read_+0xa4>
 801f96e:	bf00      	nop
 801f970:	0803a03c 	.word	0x0803a03c
 801f974:	080363e0 	.word	0x080363e0

0801f978 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801f978:	b570      	push	{r4, r5, r6, lr}
 801f97a:	4605      	mov	r5, r0
 801f97c:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f97e:	694b      	ldr	r3, [r1, #20]
 801f980:	4608      	mov	r0, r1
 801f982:	4798      	blx	r3
    if (err) {
 801f984:	4606      	mov	r6, r0
 801f986:	b108      	cbz	r0, 801f98c <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f988:	4630      	mov	r0, r6
 801f98a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801f98c:	4621      	mov	r1, r4
 801f98e:	4628      	mov	r0, r5
 801f990:	f7ff f860 	bl	801ea54 <lfs_format_>
 801f994:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f996:	69a3      	ldr	r3, [r4, #24]
 801f998:	4620      	mov	r0, r4
 801f99a:	4798      	blx	r3
    return err;
 801f99c:	e7f4      	b.n	801f988 <lfs_format+0x10>

0801f99e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801f99e:	b570      	push	{r4, r5, r6, lr}
 801f9a0:	4605      	mov	r5, r0
 801f9a2:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f9a4:	694b      	ldr	r3, [r1, #20]
 801f9a6:	4608      	mov	r0, r1
 801f9a8:	4798      	blx	r3
    if (err) {
 801f9aa:	4606      	mov	r6, r0
 801f9ac:	b108      	cbz	r0, 801f9b2 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f9ae:	4630      	mov	r0, r6
 801f9b0:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801f9b2:	4621      	mov	r1, r4
 801f9b4:	4628      	mov	r0, r5
 801f9b6:	f7ff f8cb 	bl	801eb50 <lfs_mount_>
 801f9ba:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f9bc:	69a3      	ldr	r3, [r4, #24]
 801f9be:	4620      	mov	r0, r4
 801f9c0:	4798      	blx	r3
    return err;
 801f9c2:	e7f4      	b.n	801f9ae <lfs_mount+0x10>

0801f9c4 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801f9c4:	b570      	push	{r4, r5, r6, lr}
 801f9c6:	4604      	mov	r4, r0
 801f9c8:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f9ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f9cc:	6943      	ldr	r3, [r0, #20]
 801f9ce:	4798      	blx	r3
    if (err) {
 801f9d0:	4606      	mov	r6, r0
 801f9d2:	b108      	cbz	r0, 801f9d8 <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f9d4:	4630      	mov	r0, r6
 801f9d6:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801f9d8:	4629      	mov	r1, r5
 801f9da:	4620      	mov	r0, r4
 801f9dc:	f7ff fb0e 	bl	801effc <lfs_remove_>
 801f9e0:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f9e2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f9e4:	6983      	ldr	r3, [r0, #24]
 801f9e6:	4798      	blx	r3
    return err;
 801f9e8:	e7f4      	b.n	801f9d4 <lfs_remove+0x10>

0801f9ea <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9ec:	4604      	mov	r4, r0
 801f9ee:	460d      	mov	r5, r1
 801f9f0:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f9f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f9f4:	6943      	ldr	r3, [r0, #20]
 801f9f6:	4798      	blx	r3
    if (err) {
 801f9f8:	4607      	mov	r7, r0
 801f9fa:	b108      	cbz	r0, 801fa00 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f9fc:	4638      	mov	r0, r7
 801f9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801fa00:	4632      	mov	r2, r6
 801fa02:	4629      	mov	r1, r5
 801fa04:	4620      	mov	r0, r4
 801fa06:	f7ff fbb9 	bl	801f17c <lfs_rename_>
 801fa0a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fa0c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa0e:	6983      	ldr	r3, [r0, #24]
 801fa10:	4798      	blx	r3
    return err;
 801fa12:	e7f3      	b.n	801f9fc <lfs_rename+0x12>

0801fa14 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa16:	4604      	mov	r4, r0
 801fa18:	460d      	mov	r5, r1
 801fa1a:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fa1c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fa1e:	6943      	ldr	r3, [r0, #20]
 801fa20:	4798      	blx	r3
    if (err) {
 801fa22:	4607      	mov	r7, r0
 801fa24:	b108      	cbz	r0, 801fa2a <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fa26:	4638      	mov	r0, r7
 801fa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801fa2a:	4632      	mov	r2, r6
 801fa2c:	4629      	mov	r1, r5
 801fa2e:	4620      	mov	r0, r4
 801fa30:	f7ff ff30 	bl	801f894 <lfs_stat_>
 801fa34:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fa36:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa38:	6983      	ldr	r3, [r0, #24]
 801fa3a:	4798      	blx	r3
    return err;
 801fa3c:	e7f3      	b.n	801fa26 <lfs_stat+0x12>
	...

0801fa40 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801fa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa44:	4604      	mov	r4, r0
 801fa46:	460d      	mov	r5, r1
 801fa48:	4616      	mov	r6, r2
 801fa4a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801fa4c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fa4e:	6942      	ldr	r2, [r0, #20]
 801fa50:	4790      	blx	r2
    if (err) {
 801fa52:	4607      	mov	r7, r0
 801fa54:	b110      	cbz	r0, 801fa5c <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fa56:	4638      	mov	r0, r7
 801fa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fa5c:	4629      	mov	r1, r5
 801fa5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fa60:	f7fb fbc7 	bl	801b1f2 <lfs_mlist_isopen>
 801fa64:	b950      	cbnz	r0, 801fa7c <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801fa66:	4643      	mov	r3, r8
 801fa68:	4632      	mov	r2, r6
 801fa6a:	4629      	mov	r1, r5
 801fa6c:	4620      	mov	r0, r4
 801fa6e:	f7ff fe09 	bl	801f684 <lfs_file_open_>
 801fa72:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fa74:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fa76:	6983      	ldr	r3, [r0, #24]
 801fa78:	4798      	blx	r3
    return err;
 801fa7a:	e7ec      	b.n	801fa56 <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fa7c:	4b03      	ldr	r3, [pc, #12]	@ (801fa8c <lfs_file_open+0x4c>)
 801fa7e:	4a04      	ldr	r2, [pc, #16]	@ (801fa90 <lfs_file_open+0x50>)
 801fa80:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801fa84:	4803      	ldr	r0, [pc, #12]	@ (801fa94 <lfs_file_open+0x54>)
 801fa86:	f00a fba1 	bl	802a1cc <__assert_func>
 801fa8a:	bf00      	nop
 801fa8c:	0803a040 	.word	0x0803a040
 801fa90:	0803a174 	.word	0x0803a174
 801fa94:	080394c4 	.word	0x080394c4

0801fa98 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801fa98:	b570      	push	{r4, r5, r6, lr}
 801fa9a:	4604      	mov	r4, r0
 801fa9c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fa9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801faa0:	6943      	ldr	r3, [r0, #20]
 801faa2:	4798      	blx	r3
    if (err) {
 801faa4:	4606      	mov	r6, r0
 801faa6:	b108      	cbz	r0, 801faac <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801faa8:	4630      	mov	r0, r6
 801faaa:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801faac:	4629      	mov	r1, r5
 801faae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fab0:	f7fb fb9f 	bl	801b1f2 <lfs_mlist_isopen>
 801fab4:	b140      	cbz	r0, 801fac8 <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801fab6:	4629      	mov	r1, r5
 801fab8:	4620      	mov	r0, r4
 801faba:	f7ff f9cf 	bl	801ee5c <lfs_file_close_>
 801fabe:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fac0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fac2:	6983      	ldr	r3, [r0, #24]
 801fac4:	4798      	blx	r3
    return err;
 801fac6:	e7ef      	b.n	801faa8 <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fac8:	4b03      	ldr	r3, [pc, #12]	@ (801fad8 <lfs_file_close+0x40>)
 801faca:	4a04      	ldr	r2, [pc, #16]	@ (801fadc <lfs_file_close+0x44>)
 801facc:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801fad0:	4803      	ldr	r0, [pc, #12]	@ (801fae0 <lfs_file_close+0x48>)
 801fad2:	f00a fb7b 	bl	802a1cc <__assert_func>
 801fad6:	bf00      	nop
 801fad8:	0803a078 	.word	0x0803a078
 801fadc:	0803a158 	.word	0x0803a158
 801fae0:	080394c4 	.word	0x080394c4

0801fae4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801fae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fae8:	4604      	mov	r4, r0
 801faea:	460d      	mov	r5, r1
 801faec:	4616      	mov	r6, r2
 801faee:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801faf0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801faf2:	6942      	ldr	r2, [r0, #20]
 801faf4:	4790      	blx	r2
    if (err) {
 801faf6:	4607      	mov	r7, r0
 801faf8:	b110      	cbz	r0, 801fb00 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801fafa:	4638      	mov	r0, r7
 801fafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fb00:	4629      	mov	r1, r5
 801fb02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fb04:	f7fb fb75 	bl	801b1f2 <lfs_mlist_isopen>
 801fb08:	b150      	cbz	r0, 801fb20 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801fb0a:	4643      	mov	r3, r8
 801fb0c:	4632      	mov	r2, r6
 801fb0e:	4629      	mov	r1, r5
 801fb10:	4620      	mov	r0, r4
 801fb12:	f7fd fac1 	bl	801d098 <lfs_file_read_>
 801fb16:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fb18:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fb1a:	6983      	ldr	r3, [r0, #24]
 801fb1c:	4798      	blx	r3
    return res;
 801fb1e:	e7ec      	b.n	801fafa <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fb20:	4b03      	ldr	r3, [pc, #12]	@ (801fb30 <lfs_file_read+0x4c>)
 801fb22:	4a04      	ldr	r2, [pc, #16]	@ (801fb34 <lfs_file_read+0x50>)
 801fb24:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801fb28:	4803      	ldr	r0, [pc, #12]	@ (801fb38 <lfs_file_read+0x54>)
 801fb2a:	f00a fb4f 	bl	802a1cc <__assert_func>
 801fb2e:	bf00      	nop
 801fb30:	0803a078 	.word	0x0803a078
 801fb34:	0803a148 	.word	0x0803a148
 801fb38:	080394c4 	.word	0x080394c4

0801fb3c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb40:	4604      	mov	r4, r0
 801fb42:	460d      	mov	r5, r1
 801fb44:	4616      	mov	r6, r2
 801fb46:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801fb48:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fb4a:	6942      	ldr	r2, [r0, #20]
 801fb4c:	4790      	blx	r2
    if (err) {
 801fb4e:	4607      	mov	r7, r0
 801fb50:	b110      	cbz	r0, 801fb58 <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801fb52:	4638      	mov	r0, r7
 801fb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fb58:	4629      	mov	r1, r5
 801fb5a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fb5c:	f7fb fb49 	bl	801b1f2 <lfs_mlist_isopen>
 801fb60:	b150      	cbz	r0, 801fb78 <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801fb62:	4643      	mov	r3, r8
 801fb64:	4632      	mov	r2, r6
 801fb66:	4629      	mov	r1, r5
 801fb68:	4620      	mov	r0, r4
 801fb6a:	f7fd fb05 	bl	801d178 <lfs_file_write_>
 801fb6e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fb70:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fb72:	6983      	ldr	r3, [r0, #24]
 801fb74:	4798      	blx	r3
    return res;
 801fb76:	e7ec      	b.n	801fb52 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fb78:	4b03      	ldr	r3, [pc, #12]	@ (801fb88 <lfs_file_write+0x4c>)
 801fb7a:	4a04      	ldr	r2, [pc, #16]	@ (801fb8c <lfs_file_write+0x50>)
 801fb7c:	f641 0105 	movw	r1, #6149	@ 0x1805
 801fb80:	4803      	ldr	r0, [pc, #12]	@ (801fb90 <lfs_file_write+0x54>)
 801fb82:	f00a fb23 	bl	802a1cc <__assert_func>
 801fb86:	bf00      	nop
 801fb88:	0803a078 	.word	0x0803a078
 801fb8c:	0803a128 	.word	0x0803a128
 801fb90:	080394c4 	.word	0x080394c4

0801fb94 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb98:	4604      	mov	r4, r0
 801fb9a:	460d      	mov	r5, r1
 801fb9c:	4616      	mov	r6, r2
 801fb9e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801fba0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fba2:	6942      	ldr	r2, [r0, #20]
 801fba4:	4790      	blx	r2
    if (err) {
 801fba6:	4607      	mov	r7, r0
 801fba8:	b110      	cbz	r0, 801fbb0 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801fbaa:	4638      	mov	r0, r7
 801fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fbb0:	4629      	mov	r1, r5
 801fbb2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fbb4:	f7fb fb1d 	bl	801b1f2 <lfs_mlist_isopen>
 801fbb8:	b150      	cbz	r0, 801fbd0 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801fbba:	4643      	mov	r3, r8
 801fbbc:	4632      	mov	r2, r6
 801fbbe:	4629      	mov	r1, r5
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	f7fd fa8d 	bl	801d0e0 <lfs_file_seek_>
 801fbc6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fbc8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fbca:	6983      	ldr	r3, [r0, #24]
 801fbcc:	4798      	blx	r3
    return res;
 801fbce:	e7ec      	b.n	801fbaa <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fbd0:	4b03      	ldr	r3, [pc, #12]	@ (801fbe0 <lfs_file_seek+0x4c>)
 801fbd2:	4a04      	ldr	r2, [pc, #16]	@ (801fbe4 <lfs_file_seek+0x50>)
 801fbd4:	f641 0117 	movw	r1, #6167	@ 0x1817
 801fbd8:	4803      	ldr	r0, [pc, #12]	@ (801fbe8 <lfs_file_seek+0x54>)
 801fbda:	f00a faf7 	bl	802a1cc <__assert_func>
 801fbde:	bf00      	nop
 801fbe0:	0803a078 	.word	0x0803a078
 801fbe4:	0803a108 	.word	0x0803a108
 801fbe8:	080394c4 	.word	0x080394c4

0801fbec <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801fbec:	b570      	push	{r4, r5, r6, lr}
 801fbee:	4604      	mov	r4, r0
 801fbf0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fbf2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fbf4:	6943      	ldr	r3, [r0, #20]
 801fbf6:	4798      	blx	r3
    if (err) {
 801fbf8:	4606      	mov	r6, r0
 801fbfa:	b108      	cbz	r0, 801fc00 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801fbfc:	4630      	mov	r0, r6
 801fbfe:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fc00:	4629      	mov	r1, r5
 801fc02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fc04:	f7fb faf5 	bl	801b1f2 <lfs_mlist_isopen>
 801fc08:	b140      	cbz	r0, 801fc1c <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801fc0a:	4629      	mov	r1, r5
 801fc0c:	4620      	mov	r0, r4
 801fc0e:	f7fb fba4 	bl	801b35a <lfs_file_tell_>
 801fc12:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fc14:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fc16:	6983      	ldr	r3, [r0, #24]
 801fc18:	4798      	blx	r3
    return res;
 801fc1a:	e7ef      	b.n	801fbfc <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801fc1c:	4b03      	ldr	r3, [pc, #12]	@ (801fc2c <lfs_file_tell+0x40>)
 801fc1e:	4a04      	ldr	r2, [pc, #16]	@ (801fc30 <lfs_file_tell+0x44>)
 801fc20:	f641 0138 	movw	r1, #6200	@ 0x1838
 801fc24:	4803      	ldr	r0, [pc, #12]	@ (801fc34 <lfs_file_tell+0x48>)
 801fc26:	f00a fad1 	bl	802a1cc <__assert_func>
 801fc2a:	bf00      	nop
 801fc2c:	0803a078 	.word	0x0803a078
 801fc30:	0803a0f8 	.word	0x0803a0f8
 801fc34:	080394c4 	.word	0x080394c4

0801fc38 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801fc38:	b570      	push	{r4, r5, r6, lr}
 801fc3a:	4604      	mov	r4, r0
 801fc3c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fc3e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fc40:	6943      	ldr	r3, [r0, #20]
 801fc42:	4798      	blx	r3
    if (err) {
 801fc44:	4606      	mov	r6, r0
 801fc46:	b108      	cbz	r0, 801fc4c <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fc48:	4630      	mov	r0, r6
 801fc4a:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801fc4c:	4629      	mov	r1, r5
 801fc4e:	4620      	mov	r0, r4
 801fc50:	f7ff fd22 	bl	801f698 <lfs_mkdir_>
 801fc54:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fc56:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fc58:	6983      	ldr	r3, [r0, #24]
 801fc5a:	4798      	blx	r3
    return err;
 801fc5c:	e7f4      	b.n	801fc48 <lfs_mkdir+0x10>
	...

0801fc60 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801fc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc62:	4604      	mov	r4, r0
 801fc64:	460f      	mov	r7, r1
 801fc66:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801fc68:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fc6a:	6943      	ldr	r3, [r0, #20]
 801fc6c:	4798      	blx	r3
    if (err) {
 801fc6e:	4606      	mov	r6, r0
 801fc70:	b108      	cbz	r0, 801fc76 <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fc72:	4630      	mov	r0, r6
 801fc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801fc76:	4639      	mov	r1, r7
 801fc78:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fc7a:	f7fb faba 	bl	801b1f2 <lfs_mlist_isopen>
 801fc7e:	b948      	cbnz	r0, 801fc94 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801fc80:	462a      	mov	r2, r5
 801fc82:	4639      	mov	r1, r7
 801fc84:	4620      	mov	r0, r4
 801fc86:	f7ff fa31 	bl	801f0ec <lfs_dir_open_>
 801fc8a:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fc8c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fc8e:	6983      	ldr	r3, [r0, #24]
 801fc90:	4798      	blx	r3
    return err;
 801fc92:	e7ee      	b.n	801fc72 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801fc94:	4b03      	ldr	r3, [pc, #12]	@ (801fca4 <lfs_dir_open+0x44>)
 801fc96:	4a04      	ldr	r2, [pc, #16]	@ (801fca8 <lfs_dir_open+0x48>)
 801fc98:	f641 0174 	movw	r1, #6260	@ 0x1874
 801fc9c:	4803      	ldr	r0, [pc, #12]	@ (801fcac <lfs_dir_open+0x4c>)
 801fc9e:	f00a fa95 	bl	802a1cc <__assert_func>
 801fca2:	bf00      	nop
 801fca4:	0803a0b0 	.word	0x0803a0b0
 801fca8:	0803a0e8 	.word	0x0803a0e8
 801fcac:	080394c4 	.word	0x080394c4

0801fcb0 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801fcb0:	b570      	push	{r4, r5, r6, lr}
 801fcb2:	4604      	mov	r4, r0
 801fcb4:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801fcb6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fcb8:	6943      	ldr	r3, [r0, #20]
 801fcba:	4798      	blx	r3
    if (err) {
 801fcbc:	4606      	mov	r6, r0
 801fcbe:	b108      	cbz	r0, 801fcc4 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fcc0:	4630      	mov	r0, r6
 801fcc2:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801fcc4:	4629      	mov	r1, r5
 801fcc6:	4620      	mov	r0, r4
 801fcc8:	f7fb fb42 	bl	801b350 <lfs_dir_close_>
 801fccc:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801fcce:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fcd0:	6983      	ldr	r3, [r0, #24]
 801fcd2:	4798      	blx	r3
    return err;
 801fcd4:	e7f4      	b.n	801fcc0 <lfs_dir_close+0x10>

0801fcd6 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801fcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcd8:	4604      	mov	r4, r0
 801fcda:	460d      	mov	r5, r1
 801fcdc:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801fcde:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801fce0:	6943      	ldr	r3, [r0, #20]
 801fce2:	4798      	blx	r3
    if (err) {
 801fce4:	4607      	mov	r7, r0
 801fce6:	b108      	cbz	r0, 801fcec <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801fce8:	4638      	mov	r0, r7
 801fcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801fcec:	4632      	mov	r2, r6
 801fcee:	4629      	mov	r1, r5
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f7ff fde5 	bl	801f8c0 <lfs_dir_read_>
 801fcf6:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801fcf8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801fcfa:	6983      	ldr	r3, [r0, #24]
 801fcfc:	4798      	blx	r3
    return err;
 801fcfe:	e7f3      	b.n	801fce8 <lfs_dir_read+0x12>

0801fd00 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801fd00:	f04f 0c00 	mov.w	ip, #0
 801fd04:	4594      	cmp	ip, r2
 801fd06:	d218      	bcs.n	801fd3a <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801fd08:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801fd0a:	f811 300c 	ldrb.w	r3, [r1, ip]
 801fd0e:	ea83 0e00 	eor.w	lr, r3, r0
 801fd12:	f00e 0e0f 	and.w	lr, lr, #15
 801fd16:	4c09      	ldr	r4, [pc, #36]	@ (801fd3c <lfs_crc+0x3c>)
 801fd18:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801fd1c:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801fd20:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801fd24:	f003 030f 	and.w	r3, r3, #15
 801fd28:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fd2c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801fd30:	f10c 0c01 	add.w	ip, ip, #1
 801fd34:	4594      	cmp	ip, r2
 801fd36:	d3e8      	bcc.n	801fd0a <lfs_crc+0xa>
    }

    return crc;
}
 801fd38:	bd30      	pop	{r4, r5, pc}
 801fd3a:	4770      	bx	lr
 801fd3c:	0803a25c 	.word	0x0803a25c

0801fd40 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801fd40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801fd44:	2b19      	cmp	r3, #25
 801fd46:	d913      	bls.n	801fd70 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801fd48:	283d      	cmp	r0, #61	@ 0x3d
 801fd4a:	dc18      	bgt.n	801fd7e <mg_base64_decode_single+0x3e>
 801fd4c:	282b      	cmp	r0, #43	@ 0x2b
 801fd4e:	db20      	blt.n	801fd92 <mg_base64_decode_single+0x52>
 801fd50:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801fd54:	2b12      	cmp	r3, #18
 801fd56:	d80f      	bhi.n	801fd78 <mg_base64_decode_single+0x38>
 801fd58:	e8df f003 	tbb	[pc, r3]
 801fd5c:	0e0e0e0c 	.word	0x0e0e0e0c
 801fd60:	1717171e 	.word	0x1717171e
 801fd64:	17171717 	.word	0x17171717
 801fd68:	0e171717 	.word	0x0e171717
 801fd6c:	0e0e      	.short	0x0e0e
 801fd6e:	19          	.byte	0x19
 801fd6f:	00          	.byte	0x00
    return c - 'A';
 801fd70:	4618      	mov	r0, r3
 801fd72:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801fd74:	203e      	movs	r0, #62	@ 0x3e
 801fd76:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801fd78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fd7c:	4770      	bx	lr
 801fd7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801fd82:	2b19      	cmp	r3, #25
 801fd84:	d80a      	bhi.n	801fd9c <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801fd86:	3847      	subs	r0, #71	@ 0x47
 801fd88:	4770      	bx	lr
    return c + 52 - '0';
 801fd8a:	3004      	adds	r0, #4
 801fd8c:	4770      	bx	lr
    return 64;
 801fd8e:	2040      	movs	r0, #64	@ 0x40
 801fd90:	4770      	bx	lr
    return -1;
 801fd92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fd96:	4770      	bx	lr
    return 63;
 801fd98:	203f      	movs	r0, #63	@ 0x3f
 801fd9a:	4770      	bx	lr
    return -1;
 801fd9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801fda0:	4770      	bx	lr

0801fda2 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801fda2:	3830      	subs	r0, #48	@ 0x30
}
 801fda4:	2809      	cmp	r0, #9
 801fda6:	bf8c      	ite	hi
 801fda8:	2000      	movhi	r0, #0
 801fdaa:	2001      	movls	r0, #1
 801fdac:	4770      	bx	lr
	...

0801fdb0 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801fdb0:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801fdb2:	2365      	movs	r3, #101	@ 0x65
 801fdb4:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801fdb6:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801fdb8:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801fdbc:	dc2c      	bgt.n	801fe18 <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801fdbe:	2909      	cmp	r1, #9
 801fdc0:	dc03      	bgt.n	801fdca <addexp+0x1a>
 801fdc2:	2330      	movs	r3, #48	@ 0x30
 801fdc4:	7083      	strb	r3, [r0, #2]
 801fdc6:	2303      	movs	r3, #3
 801fdc8:	e000      	b.n	801fdcc <addexp+0x1c>
  buf[n++] = (char) sign;
 801fdca:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801fdcc:	2963      	cmp	r1, #99	@ 0x63
 801fdce:	dd0d      	ble.n	801fdec <addexp+0x3c>
 801fdd0:	4812      	ldr	r0, [pc, #72]	@ (801fe1c <addexp+0x6c>)
 801fdd2:	fb80 2001 	smull	r2, r0, r0, r1
 801fdd6:	17ca      	asrs	r2, r1, #31
 801fdd8:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801fddc:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fde0:	f80c 0003 	strb.w	r0, [ip, r3]
 801fde4:	2064      	movs	r0, #100	@ 0x64
 801fde6:	fb00 1112 	mls	r1, r0, r2, r1
 801fdea:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801fdec:	2909      	cmp	r1, #9
 801fdee:	dd0e      	ble.n	801fe0e <addexp+0x5e>
 801fdf0:	480b      	ldr	r0, [pc, #44]	@ (801fe20 <addexp+0x70>)
 801fdf2:	fb80 2001 	smull	r2, r0, r0, r1
 801fdf6:	17ca      	asrs	r2, r1, #31
 801fdf8:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801fdfc:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fe00:	f80c 0003 	strb.w	r0, [ip, r3]
 801fe04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fe08:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801fe0c:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801fe0e:	1c58      	adds	r0, r3, #1
 801fe10:	3130      	adds	r1, #48	@ 0x30
 801fe12:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801fe16:	4770      	bx	lr
  if (e > 400) return 0;
 801fe18:	2000      	movs	r0, #0
}
 801fe1a:	4770      	bx	lr
 801fe1c:	51eb851f 	.word	0x51eb851f
 801fe20:	66666667 	.word	0x66666667

0801fe24 <xisinf>:

static int xisinf(double x) {
 801fe24:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801fe28:	4611      	mov	r1, r2
 801fe2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fe2e:	4a05      	ldr	r2, [pc, #20]	@ (801fe44 <xisinf+0x20>)
 801fe30:	4293      	cmp	r3, r2
 801fe32:	d001      	beq.n	801fe38 <xisinf+0x14>
 801fe34:	2000      	movs	r0, #0
 801fe36:	4770      	bx	lr
 801fe38:	b109      	cbz	r1, 801fe3e <xisinf+0x1a>
 801fe3a:	2000      	movs	r0, #0
 801fe3c:	4770      	bx	lr
 801fe3e:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801fe40:	4770      	bx	lr
 801fe42:	bf00      	nop
 801fe44:	7ff00000 	.word	0x7ff00000

0801fe48 <xisnan>:

static int xisnan(double x) {
 801fe48:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801fe4c:	4602      	mov	r2, r0
 801fe4e:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801fe52:	2a00      	cmp	r2, #0
 801fe54:	bf18      	it	ne
 801fe56:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801fe58:	4b02      	ldr	r3, [pc, #8]	@ (801fe64 <xisnan+0x1c>)
 801fe5a:	4298      	cmp	r0, r3
 801fe5c:	bf94      	ite	ls
 801fe5e:	2000      	movls	r0, #0
 801fe60:	2001      	movhi	r0, #1
 801fe62:	4770      	bx	lr
 801fe64:	7ff00000 	.word	0x7ff00000

0801fe68 <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe6c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801fe70:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801fe74:	4694      	mov	ip, r2
 801fe76:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fe78:	b15c      	cbz	r4, 801fe92 <mg_lld+0x2a>
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	db01      	blt.n	801fe82 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801fe7e:	2500      	movs	r5, #0
 801fe80:	e008      	b.n	801fe94 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fe82:	242d      	movs	r4, #45	@ 0x2d
 801fe84:	7004      	strb	r4, [r0, #0]
 801fe86:	f1d2 0c00 	rsbs	ip, r2, #0
 801fe8a:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801fe8e:	2501      	movs	r5, #1
 801fe90:	e000      	b.n	801fe94 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801fe92:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801fe94:	b909      	cbnz	r1, 801fe9a <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801fe96:	2400      	movs	r4, #0
 801fe98:	e02f      	b.n	801fefa <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801fe9a:	2400      	movs	r4, #0
 801fe9c:	ea5c 010e 	orrs.w	r1, ip, lr
 801fea0:	d05a      	beq.n	801ff58 <mg_lld+0xf0>
 801fea2:	f00c 060f 	and.w	r6, ip, #15
 801fea6:	1929      	adds	r1, r5, r4
 801fea8:	4f38      	ldr	r7, [pc, #224]	@ (801ff8c <mg_lld+0x124>)
 801feaa:	5dbe      	ldrb	r6, [r7, r6]
 801feac:	5446      	strb	r6, [r0, r1]
 801feae:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801feb2:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801feb6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801feba:	3401      	adds	r4, #1
 801febc:	e7ee      	b.n	801fe9c <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801febe:	2601      	movs	r6, #1
 801fec0:	e022      	b.n	801ff08 <mg_lld+0xa0>
 801fec2:	4421      	add	r1, r4
 801fec4:	4f32      	ldr	r7, [pc, #200]	@ (801ff90 <mg_lld+0x128>)
 801fec6:	fba7 4801 	umull	r4, r8, r7, r1
 801feca:	f028 0403 	bic.w	r4, r8, #3
 801fece:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801fed2:	1b09      	subs	r1, r1, r4
 801fed4:	ebbc 0101 	subs.w	r1, ip, r1
 801fed8:	f16e 0e00 	sbc.w	lr, lr, #0
 801fedc:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801fee0:	fb01 f404 	mul.w	r4, r1, r4
 801fee4:	fb07 440e 	mla	r4, r7, lr, r4
 801fee8:	fba1 1707 	umull	r1, r7, r1, r7
 801feec:	443c      	add	r4, r7
 801feee:	0849      	lsrs	r1, r1, #1
 801fef0:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801fef4:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801fef8:	4634      	mov	r4, r6
 801fefa:	ea5c 010e 	orrs.w	r1, ip, lr
 801fefe:	d02b      	beq.n	801ff58 <mg_lld+0xf0>
 801ff00:	2600      	movs	r6, #0
 801ff02:	eb1c 010e 	adds.w	r1, ip, lr
 801ff06:	d2da      	bcs.n	801febe <mg_lld+0x56>
 801ff08:	4431      	add	r1, r6
 801ff0a:	4f21      	ldr	r7, [pc, #132]	@ (801ff90 <mg_lld+0x128>)
 801ff0c:	fba7 6801 	umull	r6, r8, r7, r1
 801ff10:	f028 0603 	bic.w	r6, r8, #3
 801ff14:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801ff18:	1b89      	subs	r1, r1, r6
 801ff1a:	ebbc 0101 	subs.w	r1, ip, r1
 801ff1e:	f16e 0800 	sbc.w	r8, lr, #0
 801ff22:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801ff26:	fb01 f606 	mul.w	r6, r1, r6
 801ff2a:	fb07 6608 	mla	r6, r7, r8, r6
 801ff2e:	fba1 1707 	umull	r1, r7, r1, r7
 801ff32:	443e      	add	r6, r7
 801ff34:	0849      	lsrs	r1, r1, #1
 801ff36:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801ff3a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801ff3e:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801ff42:	1c66      	adds	r6, r4, #1
 801ff44:	442c      	add	r4, r5
 801ff46:	4f11      	ldr	r7, [pc, #68]	@ (801ff8c <mg_lld+0x124>)
 801ff48:	5c79      	ldrb	r1, [r7, r1]
 801ff4a:	5501      	strb	r1, [r0, r4]
 801ff4c:	2400      	movs	r4, #0
 801ff4e:	eb1c 010e 	adds.w	r1, ip, lr
 801ff52:	d3b6      	bcc.n	801fec2 <mg_lld+0x5a>
 801ff54:	2401      	movs	r4, #1
 801ff56:	e7b4      	b.n	801fec2 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801ff58:	2600      	movs	r6, #0
 801ff5a:	e00c      	b.n	801ff76 <mg_lld+0x10e>
    char t = buf[s + i];
 801ff5c:	19af      	adds	r7, r5, r6
 801ff5e:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801ff62:	1929      	adds	r1, r5, r4
 801ff64:	1b89      	subs	r1, r1, r6
 801ff66:	3901      	subs	r1, #1
 801ff68:	f810 e001 	ldrb.w	lr, [r0, r1]
 801ff6c:	f800 e007 	strb.w	lr, [r0, r7]
 801ff70:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801ff74:	3601      	adds	r6, #1
 801ff76:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801ff7a:	d3ef      	bcc.n	801ff5c <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801ff7c:	4313      	orrs	r3, r2
 801ff7e:	d102      	bne.n	801ff86 <mg_lld+0x11e>
 801ff80:	2330      	movs	r3, #48	@ 0x30
 801ff82:	5503      	strb	r3, [r0, r4]
 801ff84:	3401      	adds	r4, #1
  return n + s;
}
 801ff86:	1928      	adds	r0, r5, r4
 801ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff8c:	0803a29c 	.word	0x0803a29c
 801ff90:	cccccccd 	.word	0xcccccccd

0801ff94 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801ff94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff98:	4680      	mov	r8, r0
 801ff9a:	460f      	mov	r7, r1
 801ff9c:	4616      	mov	r6, r2
 801ff9e:	461d      	mov	r5, r3
  size_t i = 0;
 801ffa0:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801ffa2:	e002      	b.n	801ffaa <scpy+0x16>
 801ffa4:	3401      	adds	r4, #1
 801ffa6:	4639      	mov	r1, r7
 801ffa8:	47c0      	blx	r8
 801ffaa:	42ac      	cmp	r4, r5
 801ffac:	d202      	bcs.n	801ffb4 <scpy+0x20>
 801ffae:	5d30      	ldrb	r0, [r6, r4]
 801ffb0:	2800      	cmp	r0, #0
 801ffb2:	d1f7      	bne.n	801ffa4 <scpy+0x10>
  return i;
}
 801ffb4:	4620      	mov	r0, r4
 801ffb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ffba <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801ffba:	2000      	movs	r0, #0
 801ffbc:	4770      	bx	lr

0801ffbe <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801ffbe:	4770      	bx	lr

0801ffc0 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801ffc0:	2000      	movs	r0, #0
 801ffc2:	4770      	bx	lr

0801ffc4 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801ffc4:	4770      	bx	lr

0801ffc6 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801ffc6:	2000      	movs	r0, #0
 801ffc8:	4770      	bx	lr

0801ffca <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801ffca:	2000      	movs	r0, #0
 801ffcc:	4770      	bx	lr

0801ffce <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801ffce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ffd2:	4770      	bx	lr

0801ffd4 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801ffd4:	2000      	movs	r0, #0
 801ffd6:	4770      	bx	lr

0801ffd8 <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801ffd8:	2000      	movs	r0, #0
 801ffda:	4770      	bx	lr

0801ffdc <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801ffdc:	2000      	movs	r0, #0
 801ffde:	4770      	bx	lr

0801ffe0 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801ffe0:	b530      	push	{r4, r5, lr}
 801ffe2:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801ffe4:	4614      	mov	r4, r2
 801ffe6:	b94a      	cbnz	r2, 801fffc <mg_ncasecmp+0x1c>
  int diff = 0;
 801ffe8:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801ffea:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801ffec:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801fff0:	1a18      	subs	r0, r3, r0
 801fff2:	d1fa      	bne.n	801ffea <mg_ncasecmp+0xa>
 801fff4:	2a00      	cmp	r2, #0
 801fff6:	d0f8      	beq.n	801ffea <mg_ncasecmp+0xa>
 801fff8:	3c01      	subs	r4, #1
 801fffa:	d0f6      	beq.n	801ffea <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801fffc:	f89e 2000 	ldrb.w	r2, [lr]
 8020000:	f10e 0e01 	add.w	lr, lr, #1
 8020004:	4613      	mov	r3, r2
 8020006:	f891 c000 	ldrb.w	ip, [r1]
 802000a:	3101      	adds	r1, #1
 802000c:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 802000e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8020012:	2d19      	cmp	r5, #25
 8020014:	d801      	bhi.n	802001a <mg_ncasecmp+0x3a>
 8020016:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 802001a:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 802001e:	2d19      	cmp	r5, #25
 8020020:	d8e6      	bhi.n	801fff0 <mg_ncasecmp+0x10>
 8020022:	e7e3      	b.n	801ffec <mg_ncasecmp+0xc>

08020024 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020024:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020028:	2b09      	cmp	r3, #9
 802002a:	d908      	bls.n	802003e <isx+0x1a>
 802002c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020030:	2b05      	cmp	r3, #5
 8020032:	d906      	bls.n	8020042 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 8020034:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8020036:	2805      	cmp	r0, #5
 8020038:	d805      	bhi.n	8020046 <isx+0x22>
 802003a:	2001      	movs	r0, #1
 802003c:	4770      	bx	lr
 802003e:	2001      	movs	r0, #1
 8020040:	4770      	bx	lr
 8020042:	2001      	movs	r0, #1
 8020044:	4770      	bx	lr
 8020046:	2000      	movs	r0, #0
}
 8020048:	4770      	bx	lr

0802004a <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 802004a:	280a      	cmp	r0, #10
 802004c:	d007      	beq.n	802005e <isok+0x14>
 802004e:	280d      	cmp	r0, #13
 8020050:	d007      	beq.n	8020062 <isok+0x18>
 8020052:	2809      	cmp	r0, #9
 8020054:	d007      	beq.n	8020066 <isok+0x1c>
 8020056:	281f      	cmp	r0, #31
 8020058:	d907      	bls.n	802006a <isok+0x20>
 802005a:	2001      	movs	r0, #1
 802005c:	4770      	bx	lr
 802005e:	2001      	movs	r0, #1
 8020060:	4770      	bx	lr
 8020062:	2001      	movs	r0, #1
 8020064:	4770      	bx	lr
 8020066:	2001      	movs	r0, #1
 8020068:	4770      	bx	lr
 802006a:	2000      	movs	r0, #0
}
 802006c:	4770      	bx	lr

0802006e <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 802006e:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 8020072:	2880      	cmp	r0, #128	@ 0x80
 8020074:	bf14      	ite	ne
 8020076:	2000      	movne	r0, #0
 8020078:	2001      	moveq	r0, #1
 802007a:	4770      	bx	lr

0802007c <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 802007c:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 802007e:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 8020080:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8020082:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 8020086:	b2db      	uxtb	r3, r3
 8020088:	2b5c      	cmp	r3, #92	@ 0x5c
 802008a:	d936      	bls.n	80200fa <clen+0x7e>
 802008c:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 802008e:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 8020092:	2bc0      	cmp	r3, #192	@ 0xc0
 8020094:	d009      	beq.n	80200aa <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8020096:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 802009a:	2be0      	cmp	r3, #224	@ 0xe0
 802009c:	d00e      	beq.n	80200bc <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 802009e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80200a2:	2df0      	cmp	r5, #240	@ 0xf0
 80200a4:	d018      	beq.n	80200d8 <clen+0x5c>
    return 4;
  return 0;
 80200a6:	2000      	movs	r0, #0
}
 80200a8:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 80200aa:	2e01      	cmp	r6, #1
 80200ac:	ddf3      	ble.n	8020096 <clen+0x1a>
 80200ae:	7840      	ldrb	r0, [r0, #1]
 80200b0:	f7ff ffdd 	bl	802006e <vcb>
 80200b4:	2800      	cmp	r0, #0
 80200b6:	d0ee      	beq.n	8020096 <clen+0x1a>
 80200b8:	2002      	movs	r0, #2
 80200ba:	e7f5      	b.n	80200a8 <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 80200bc:	2e02      	cmp	r6, #2
 80200be:	ddee      	ble.n	802009e <clen+0x22>
 80200c0:	7860      	ldrb	r0, [r4, #1]
 80200c2:	f7ff ffd4 	bl	802006e <vcb>
 80200c6:	2800      	cmp	r0, #0
 80200c8:	d0e9      	beq.n	802009e <clen+0x22>
 80200ca:	78a0      	ldrb	r0, [r4, #2]
 80200cc:	f7ff ffcf 	bl	802006e <vcb>
 80200d0:	2800      	cmp	r0, #0
 80200d2:	d0e4      	beq.n	802009e <clen+0x22>
 80200d4:	2003      	movs	r0, #3
 80200d6:	e7e7      	b.n	80200a8 <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80200d8:	2e03      	cmp	r6, #3
 80200da:	dd10      	ble.n	80200fe <clen+0x82>
 80200dc:	7860      	ldrb	r0, [r4, #1]
 80200de:	f7ff ffc6 	bl	802006e <vcb>
 80200e2:	b170      	cbz	r0, 8020102 <clen+0x86>
 80200e4:	78a0      	ldrb	r0, [r4, #2]
 80200e6:	f7ff ffc2 	bl	802006e <vcb>
 80200ea:	b160      	cbz	r0, 8020106 <clen+0x8a>
 80200ec:	78e0      	ldrb	r0, [r4, #3]
 80200ee:	f7ff ffbe 	bl	802006e <vcb>
 80200f2:	2800      	cmp	r0, #0
 80200f4:	d0d8      	beq.n	80200a8 <clen+0x2c>
    return 4;
 80200f6:	2004      	movs	r0, #4
 80200f8:	e7d6      	b.n	80200a8 <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 80200fa:	2001      	movs	r0, #1
 80200fc:	e7d4      	b.n	80200a8 <clen+0x2c>
  return 0;
 80200fe:	2000      	movs	r0, #0
 8020100:	e7d2      	b.n	80200a8 <clen+0x2c>
 8020102:	2000      	movs	r0, #0
 8020104:	e7d0      	b.n	80200a8 <clen+0x2c>
 8020106:	2000      	movs	r0, #0
 8020108:	e7ce      	b.n	80200a8 <clen+0x2c>

0802010a <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 802010a:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 802010c:	e003      	b.n	8020116 <skiptorn+0xc>
 802010e:	3001      	adds	r0, #1
 8020110:	6853      	ldr	r3, [r2, #4]
 8020112:	3301      	adds	r3, #1
 8020114:	6053      	str	r3, [r2, #4]
 8020116:	4288      	cmp	r0, r1
 8020118:	d204      	bcs.n	8020124 <skiptorn+0x1a>
 802011a:	7803      	ldrb	r3, [r0, #0]
 802011c:	2b0a      	cmp	r3, #10
 802011e:	d001      	beq.n	8020124 <skiptorn+0x1a>
 8020120:	2b0d      	cmp	r3, #13
 8020122:	d1f4      	bne.n	802010e <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020124:	4288      	cmp	r0, r1
 8020126:	d212      	bcs.n	802014e <skiptorn+0x44>
 8020128:	7803      	ldrb	r3, [r0, #0]
 802012a:	2b0d      	cmp	r3, #13
 802012c:	d008      	beq.n	8020140 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802012e:	2b0d      	cmp	r3, #13
 8020130:	d00b      	beq.n	802014a <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8020132:	4288      	cmp	r0, r1
 8020134:	d20d      	bcs.n	8020152 <skiptorn+0x48>
 8020136:	f810 3b01 	ldrb.w	r3, [r0], #1
 802013a:	2b0a      	cmp	r3, #10
 802013c:	d10b      	bne.n	8020156 <skiptorn+0x4c>
  return s;
}
 802013e:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8020140:	7842      	ldrb	r2, [r0, #1]
 8020142:	2a0a      	cmp	r2, #10
 8020144:	d0f3      	beq.n	802012e <skiptorn+0x24>
 8020146:	2000      	movs	r0, #0
 8020148:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 802014a:	3001      	adds	r0, #1
 802014c:	e7f1      	b.n	8020132 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 802014e:	2000      	movs	r0, #0
 8020150:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8020152:	2000      	movs	r0, #0
 8020154:	4770      	bx	lr
 8020156:	2000      	movs	r0, #0
 8020158:	e7f1      	b.n	802013e <skiptorn+0x34>

0802015a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 802015a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802015e:	b084      	sub	sp, #16
 8020160:	4604      	mov	r4, r0
 8020162:	460d      	mov	r5, r1
 8020164:	4690      	mov	r8, r2
 8020166:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8020168:	2600      	movs	r6, #0
 802016a:	e04d      	b.n	8020208 <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802016c:	7863      	ldrb	r3, [r4, #1]
 802016e:	2b0a      	cmp	r3, #10
 8020170:	d158      	bne.n	8020224 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 8020172:	2001      	movs	r0, #1
 8020174:	e01e      	b.n	80201b4 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8020176:	4414      	add	r4, r2
 8020178:	9b01      	ldr	r3, [sp, #4]
 802017a:	4413      	add	r3, r2
 802017c:	9301      	str	r3, [sp, #4]
 802017e:	42ac      	cmp	r4, r5
 8020180:	d209      	bcs.n	8020196 <mg_http_parse_headers+0x3c>
 8020182:	7823      	ldrb	r3, [r4, #0]
 8020184:	2b3a      	cmp	r3, #58	@ 0x3a
 8020186:	d006      	beq.n	8020196 <mg_http_parse_headers+0x3c>
 8020188:	4629      	mov	r1, r5
 802018a:	4620      	mov	r0, r4
 802018c:	f7ff ff76 	bl	802007c <clen>
 8020190:	4602      	mov	r2, r0
 8020192:	2800      	cmp	r0, #0
 8020194:	d1ef      	bne.n	8020176 <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 8020196:	9b01      	ldr	r3, [sp, #4]
 8020198:	b15b      	cbz	r3, 80201b2 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 802019a:	42ac      	cmp	r4, r5
 802019c:	d209      	bcs.n	80201b2 <mg_http_parse_headers+0x58>
 802019e:	4629      	mov	r1, r5
 80201a0:	4620      	mov	r0, r4
 80201a2:	f7ff ff6b 	bl	802007c <clen>
 80201a6:	b120      	cbz	r0, 80201b2 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 80201a8:	4620      	mov	r0, r4
 80201aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80201b0:	d004      	beq.n	80201bc <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 80201b2:	2000      	movs	r0, #0
}
 80201b4:	b004      	add	sp, #16
 80201b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 80201ba:	3001      	adds	r0, #1
 80201bc:	42a8      	cmp	r0, r5
 80201be:	d204      	bcs.n	80201ca <mg_http_parse_headers+0x70>
 80201c0:	7803      	ldrb	r3, [r0, #0]
 80201c2:	2b20      	cmp	r3, #32
 80201c4:	d0f9      	beq.n	80201ba <mg_http_parse_headers+0x60>
 80201c6:	2b09      	cmp	r3, #9
 80201c8:	d0f7      	beq.n	80201ba <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 80201ca:	aa02      	add	r2, sp, #8
 80201cc:	4629      	mov	r1, r5
 80201ce:	f7ff ff9c 	bl	802010a <skiptorn>
 80201d2:	4604      	mov	r4, r0
 80201d4:	b908      	cbnz	r0, 80201da <mg_http_parse_headers+0x80>
 80201d6:	e7ec      	b.n	80201b2 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 80201d8:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80201da:	9803      	ldr	r0, [sp, #12]
 80201dc:	b130      	cbz	r0, 80201ec <mg_http_parse_headers+0x92>
 80201de:	3801      	subs	r0, #1
 80201e0:	9b02      	ldr	r3, [sp, #8]
 80201e2:	5c1b      	ldrb	r3, [r3, r0]
 80201e4:	2b20      	cmp	r3, #32
 80201e6:	d0f7      	beq.n	80201d8 <mg_http_parse_headers+0x7e>
 80201e8:	2b09      	cmp	r3, #9
 80201ea:	d0f5      	beq.n	80201d8 <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80201ec:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 80201f0:	466a      	mov	r2, sp
 80201f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80201f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80201fa:	3308      	adds	r3, #8
 80201fc:	aa04      	add	r2, sp, #16
 80201fe:	e912 0003 	ldmdb	r2, {r0, r1}
 8020202:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8020206:	3601      	adds	r6, #1
 8020208:	42be      	cmp	r6, r7
 802020a:	d20d      	bcs.n	8020228 <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 802020c:	2300      	movs	r3, #0
 802020e:	9300      	str	r3, [sp, #0]
 8020210:	9301      	str	r3, [sp, #4]
 8020212:	9302      	str	r3, [sp, #8]
 8020214:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 8020216:	42ac      	cmp	r4, r5
 8020218:	d2cb      	bcs.n	80201b2 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 802021a:	7823      	ldrb	r3, [r4, #0]
 802021c:	2b0a      	cmp	r3, #10
 802021e:	d0a8      	beq.n	8020172 <mg_http_parse_headers+0x18>
 8020220:	2b0d      	cmp	r3, #13
 8020222:	d0a3      	beq.n	802016c <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 8020224:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8020226:	e7aa      	b.n	802017e <mg_http_parse_headers+0x24>
  return true;
 8020228:	2001      	movs	r0, #1
 802022a:	e7c3      	b.n	80201b4 <mg_http_parse_headers+0x5a>

0802022c <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 802022c:	3864      	subs	r0, #100	@ 0x64
 802022e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8020232:	4298      	cmp	r0, r3
 8020234:	f200 8272 	bhi.w	802071c <mg_http_status_code_str+0x4f0>
 8020238:	e8df f010 	tbh	[pc, r0, lsl #1]
 802023c:	027201f4 	.word	0x027201f4
 8020240:	027001f6 	.word	0x027001f6
 8020244:	02700270 	.word	0x02700270
 8020248:	02700270 	.word	0x02700270
 802024c:	02700270 	.word	0x02700270
 8020250:	02700270 	.word	0x02700270
 8020254:	02700270 	.word	0x02700270
 8020258:	02700270 	.word	0x02700270
 802025c:	02700270 	.word	0x02700270
 8020260:	02700270 	.word	0x02700270
 8020264:	02700270 	.word	0x02700270
 8020268:	02700270 	.word	0x02700270
 802026c:	02700270 	.word	0x02700270
 8020270:	02700270 	.word	0x02700270
 8020274:	02700270 	.word	0x02700270
 8020278:	02700270 	.word	0x02700270
 802027c:	02700270 	.word	0x02700270
 8020280:	02700270 	.word	0x02700270
 8020284:	02700270 	.word	0x02700270
 8020288:	02700270 	.word	0x02700270
 802028c:	02700270 	.word	0x02700270
 8020290:	02700270 	.word	0x02700270
 8020294:	02700270 	.word	0x02700270
 8020298:	02700270 	.word	0x02700270
 802029c:	02700270 	.word	0x02700270
 80202a0:	02700270 	.word	0x02700270
 80202a4:	02700270 	.word	0x02700270
 80202a8:	02700270 	.word	0x02700270
 80202ac:	02700270 	.word	0x02700270
 80202b0:	02700270 	.word	0x02700270
 80202b4:	02700270 	.word	0x02700270
 80202b8:	02700270 	.word	0x02700270
 80202bc:	02700270 	.word	0x02700270
 80202c0:	02700270 	.word	0x02700270
 80202c4:	02700270 	.word	0x02700270
 80202c8:	02700270 	.word	0x02700270
 80202cc:	02700270 	.word	0x02700270
 80202d0:	02700270 	.word	0x02700270
 80202d4:	02700270 	.word	0x02700270
 80202d8:	02700270 	.word	0x02700270
 80202dc:	02700270 	.word	0x02700270
 80202e0:	02700270 	.word	0x02700270
 80202e4:	02700270 	.word	0x02700270
 80202e8:	02700270 	.word	0x02700270
 80202ec:	02700270 	.word	0x02700270
 80202f0:	02700270 	.word	0x02700270
 80202f4:	02700270 	.word	0x02700270
 80202f8:	02700270 	.word	0x02700270
 80202fc:	02700270 	.word	0x02700270
 8020300:	02700270 	.word	0x02700270
 8020304:	01fa01f8 	.word	0x01fa01f8
 8020308:	01fe01fc 	.word	0x01fe01fc
 802030c:	02020200 	.word	0x02020200
 8020310:	02060204 	.word	0x02060204
 8020314:	02700208 	.word	0x02700208
 8020318:	02700270 	.word	0x02700270
 802031c:	02700270 	.word	0x02700270
 8020320:	02700270 	.word	0x02700270
 8020324:	02700270 	.word	0x02700270
 8020328:	02700270 	.word	0x02700270
 802032c:	02700270 	.word	0x02700270
 8020330:	02700270 	.word	0x02700270
 8020334:	02700270 	.word	0x02700270
 8020338:	0270020a 	.word	0x0270020a
 802033c:	02700270 	.word	0x02700270
 8020340:	02700270 	.word	0x02700270
 8020344:	02700270 	.word	0x02700270
 8020348:	02700270 	.word	0x02700270
 802034c:	02700270 	.word	0x02700270
 8020350:	02700270 	.word	0x02700270
 8020354:	02700270 	.word	0x02700270
 8020358:	02700270 	.word	0x02700270
 802035c:	02700270 	.word	0x02700270
 8020360:	02700270 	.word	0x02700270
 8020364:	02700270 	.word	0x02700270
 8020368:	02700270 	.word	0x02700270
 802036c:	02700270 	.word	0x02700270
 8020370:	02700270 	.word	0x02700270
 8020374:	02700270 	.word	0x02700270
 8020378:	02700270 	.word	0x02700270
 802037c:	02700270 	.word	0x02700270
 8020380:	02700270 	.word	0x02700270
 8020384:	02700270 	.word	0x02700270
 8020388:	02700270 	.word	0x02700270
 802038c:	02700270 	.word	0x02700270
 8020390:	02700270 	.word	0x02700270
 8020394:	02700270 	.word	0x02700270
 8020398:	02700270 	.word	0x02700270
 802039c:	02700270 	.word	0x02700270
 80203a0:	02700270 	.word	0x02700270
 80203a4:	02700270 	.word	0x02700270
 80203a8:	02700270 	.word	0x02700270
 80203ac:	02700270 	.word	0x02700270
 80203b0:	02700270 	.word	0x02700270
 80203b4:	02700270 	.word	0x02700270
 80203b8:	02700270 	.word	0x02700270
 80203bc:	02700270 	.word	0x02700270
 80203c0:	02700270 	.word	0x02700270
 80203c4:	02700270 	.word	0x02700270
 80203c8:	02700270 	.word	0x02700270
 80203cc:	020e020c 	.word	0x020e020c
 80203d0:	02120210 	.word	0x02120210
 80203d4:	02160214 	.word	0x02160214
 80203d8:	02180270 	.word	0x02180270
 80203dc:	0270021a 	.word	0x0270021a
 80203e0:	02700270 	.word	0x02700270
 80203e4:	02700270 	.word	0x02700270
 80203e8:	02700270 	.word	0x02700270
 80203ec:	02700270 	.word	0x02700270
 80203f0:	02700270 	.word	0x02700270
 80203f4:	02700270 	.word	0x02700270
 80203f8:	02700270 	.word	0x02700270
 80203fc:	02700270 	.word	0x02700270
 8020400:	02700270 	.word	0x02700270
 8020404:	02700270 	.word	0x02700270
 8020408:	02700270 	.word	0x02700270
 802040c:	02700270 	.word	0x02700270
 8020410:	02700270 	.word	0x02700270
 8020414:	02700270 	.word	0x02700270
 8020418:	02700270 	.word	0x02700270
 802041c:	02700270 	.word	0x02700270
 8020420:	02700270 	.word	0x02700270
 8020424:	02700270 	.word	0x02700270
 8020428:	02700270 	.word	0x02700270
 802042c:	02700270 	.word	0x02700270
 8020430:	02700270 	.word	0x02700270
 8020434:	02700270 	.word	0x02700270
 8020438:	02700270 	.word	0x02700270
 802043c:	02700270 	.word	0x02700270
 8020440:	02700270 	.word	0x02700270
 8020444:	02700270 	.word	0x02700270
 8020448:	02700270 	.word	0x02700270
 802044c:	02700270 	.word	0x02700270
 8020450:	02700270 	.word	0x02700270
 8020454:	02700270 	.word	0x02700270
 8020458:	02700270 	.word	0x02700270
 802045c:	02700270 	.word	0x02700270
 8020460:	02700270 	.word	0x02700270
 8020464:	02700270 	.word	0x02700270
 8020468:	02700270 	.word	0x02700270
 802046c:	02700270 	.word	0x02700270
 8020470:	02700270 	.word	0x02700270
 8020474:	02700270 	.word	0x02700270
 8020478:	02700270 	.word	0x02700270
 802047c:	02700270 	.word	0x02700270
 8020480:	02700270 	.word	0x02700270
 8020484:	02700270 	.word	0x02700270
 8020488:	02700270 	.word	0x02700270
 802048c:	02700270 	.word	0x02700270
 8020490:	02700270 	.word	0x02700270
 8020494:	021e021c 	.word	0x021e021c
 8020498:	02220220 	.word	0x02220220
 802049c:	02260224 	.word	0x02260224
 80204a0:	022a0228 	.word	0x022a0228
 80204a4:	022e022c 	.word	0x022e022c
 80204a8:	02320230 	.word	0x02320230
 80204ac:	02360234 	.word	0x02360234
 80204b0:	023a0238 	.word	0x023a0238
 80204b4:	023e023c 	.word	0x023e023c
 80204b8:	02700240 	.word	0x02700240
 80204bc:	02420270 	.word	0x02420270
 80204c0:	02460244 	.word	0x02460244
 80204c4:	02700248 	.word	0x02700248
 80204c8:	0270024a 	.word	0x0270024a
 80204cc:	024e024c 	.word	0x024e024c
 80204d0:	02500270 	.word	0x02500270
 80204d4:	02700270 	.word	0x02700270
 80204d8:	02700270 	.word	0x02700270
 80204dc:	02700270 	.word	0x02700270
 80204e0:	02700270 	.word	0x02700270
 80204e4:	02700270 	.word	0x02700270
 80204e8:	02700270 	.word	0x02700270
 80204ec:	02700252 	.word	0x02700252
 80204f0:	02700270 	.word	0x02700270
 80204f4:	02700270 	.word	0x02700270
 80204f8:	02540270 	.word	0x02540270
 80204fc:	02700270 	.word	0x02700270
 8020500:	02700270 	.word	0x02700270
 8020504:	02700270 	.word	0x02700270
 8020508:	02700270 	.word	0x02700270
 802050c:	02700270 	.word	0x02700270
 8020510:	02700270 	.word	0x02700270
 8020514:	02700270 	.word	0x02700270
 8020518:	02700270 	.word	0x02700270
 802051c:	02700270 	.word	0x02700270
 8020520:	02700270 	.word	0x02700270
 8020524:	02700270 	.word	0x02700270
 8020528:	02700270 	.word	0x02700270
 802052c:	02700270 	.word	0x02700270
 8020530:	02700270 	.word	0x02700270
 8020534:	02700270 	.word	0x02700270
 8020538:	02700270 	.word	0x02700270
 802053c:	02700270 	.word	0x02700270
 8020540:	02700270 	.word	0x02700270
 8020544:	02700270 	.word	0x02700270
 8020548:	02700270 	.word	0x02700270
 802054c:	02700270 	.word	0x02700270
 8020550:	02700270 	.word	0x02700270
 8020554:	02700270 	.word	0x02700270
 8020558:	02560270 	.word	0x02560270
 802055c:	025a0258 	.word	0x025a0258
 8020560:	025e025c 	.word	0x025e025c
 8020564:	02620260 	.word	0x02620260
 8020568:	02660264 	.word	0x02660264
 802056c:	02700268 	.word	0x02700268
 8020570:	026c026a 	.word	0x026c026a
 8020574:	02700270 	.word	0x02700270
 8020578:	02700270 	.word	0x02700270
 802057c:	02700270 	.word	0x02700270
 8020580:	02700270 	.word	0x02700270
 8020584:	02700270 	.word	0x02700270
 8020588:	02700270 	.word	0x02700270
 802058c:	02700270 	.word	0x02700270
 8020590:	02700270 	.word	0x02700270
 8020594:	02700270 	.word	0x02700270
 8020598:	02700270 	.word	0x02700270
 802059c:	02700270 	.word	0x02700270
 80205a0:	02700270 	.word	0x02700270
 80205a4:	02700270 	.word	0x02700270
 80205a8:	02700270 	.word	0x02700270
 80205ac:	02700270 	.word	0x02700270
 80205b0:	02700270 	.word	0x02700270
 80205b4:	02700270 	.word	0x02700270
 80205b8:	02700270 	.word	0x02700270
 80205bc:	02700270 	.word	0x02700270
 80205c0:	02700270 	.word	0x02700270
 80205c4:	02700270 	.word	0x02700270
 80205c8:	02700270 	.word	0x02700270
 80205cc:	02700270 	.word	0x02700270
 80205d0:	02700270 	.word	0x02700270
 80205d4:	02700270 	.word	0x02700270
 80205d8:	02700270 	.word	0x02700270
 80205dc:	02700270 	.word	0x02700270
 80205e0:	02700270 	.word	0x02700270
 80205e4:	02700270 	.word	0x02700270
 80205e8:	02700270 	.word	0x02700270
 80205ec:	02700270 	.word	0x02700270
 80205f0:	02700270 	.word	0x02700270
 80205f4:	02700270 	.word	0x02700270
 80205f8:	02700270 	.word	0x02700270
 80205fc:	02700270 	.word	0x02700270
 8020600:	02700270 	.word	0x02700270
 8020604:	02700270 	.word	0x02700270
 8020608:	02700270 	.word	0x02700270
 802060c:	02700270 	.word	0x02700270
 8020610:	02700270 	.word	0x02700270
 8020614:	02700270 	.word	0x02700270
 8020618:	02700270 	.word	0x02700270
 802061c:	02700270 	.word	0x02700270
 8020620:	026e0270 	.word	0x026e0270
 8020624:	483f      	ldr	r0, [pc, #252]	@ (8020724 <mg_http_status_code_str+0x4f8>)
 8020626:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 8020628:	483f      	ldr	r0, [pc, #252]	@ (8020728 <mg_http_status_code_str+0x4fc>)
 802062a:	4770      	bx	lr
    case 200: return "OK";
 802062c:	483f      	ldr	r0, [pc, #252]	@ (802072c <mg_http_status_code_str+0x500>)
 802062e:	4770      	bx	lr
    case 201: return "Created";
 8020630:	483f      	ldr	r0, [pc, #252]	@ (8020730 <mg_http_status_code_str+0x504>)
 8020632:	4770      	bx	lr
    case 202: return "Accepted";
 8020634:	483f      	ldr	r0, [pc, #252]	@ (8020734 <mg_http_status_code_str+0x508>)
 8020636:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 8020638:	483f      	ldr	r0, [pc, #252]	@ (8020738 <mg_http_status_code_str+0x50c>)
 802063a:	4770      	bx	lr
    case 204: return "No Content";
 802063c:	483f      	ldr	r0, [pc, #252]	@ (802073c <mg_http_status_code_str+0x510>)
 802063e:	4770      	bx	lr
    case 205: return "Reset Content";
 8020640:	483f      	ldr	r0, [pc, #252]	@ (8020740 <mg_http_status_code_str+0x514>)
 8020642:	4770      	bx	lr
    case 206: return "Partial Content";
 8020644:	483f      	ldr	r0, [pc, #252]	@ (8020744 <mg_http_status_code_str+0x518>)
 8020646:	4770      	bx	lr
    case 207: return "Multi-Status";
 8020648:	483f      	ldr	r0, [pc, #252]	@ (8020748 <mg_http_status_code_str+0x51c>)
 802064a:	4770      	bx	lr
    case 208: return "Already Reported";
 802064c:	483f      	ldr	r0, [pc, #252]	@ (802074c <mg_http_status_code_str+0x520>)
 802064e:	4770      	bx	lr
    case 226: return "IM Used";
 8020650:	483f      	ldr	r0, [pc, #252]	@ (8020750 <mg_http_status_code_str+0x524>)
 8020652:	4770      	bx	lr
    case 300: return "Multiple Choices";
 8020654:	483f      	ldr	r0, [pc, #252]	@ (8020754 <mg_http_status_code_str+0x528>)
 8020656:	4770      	bx	lr
    case 301: return "Moved Permanently";
 8020658:	483f      	ldr	r0, [pc, #252]	@ (8020758 <mg_http_status_code_str+0x52c>)
 802065a:	4770      	bx	lr
    case 302: return "Found";
 802065c:	483f      	ldr	r0, [pc, #252]	@ (802075c <mg_http_status_code_str+0x530>)
 802065e:	4770      	bx	lr
    case 303: return "See Other";
 8020660:	483f      	ldr	r0, [pc, #252]	@ (8020760 <mg_http_status_code_str+0x534>)
 8020662:	4770      	bx	lr
    case 304: return "Not Modified";
 8020664:	483f      	ldr	r0, [pc, #252]	@ (8020764 <mg_http_status_code_str+0x538>)
 8020666:	4770      	bx	lr
    case 305: return "Use Proxy";
 8020668:	483f      	ldr	r0, [pc, #252]	@ (8020768 <mg_http_status_code_str+0x53c>)
 802066a:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 802066c:	483f      	ldr	r0, [pc, #252]	@ (802076c <mg_http_status_code_str+0x540>)
 802066e:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 8020670:	483f      	ldr	r0, [pc, #252]	@ (8020770 <mg_http_status_code_str+0x544>)
 8020672:	4770      	bx	lr
    case 400: return "Bad Request";
 8020674:	483f      	ldr	r0, [pc, #252]	@ (8020774 <mg_http_status_code_str+0x548>)
 8020676:	4770      	bx	lr
    case 401: return "Unauthorized";
 8020678:	483f      	ldr	r0, [pc, #252]	@ (8020778 <mg_http_status_code_str+0x54c>)
 802067a:	4770      	bx	lr
    case 402: return "Payment Required";
 802067c:	483f      	ldr	r0, [pc, #252]	@ (802077c <mg_http_status_code_str+0x550>)
 802067e:	4770      	bx	lr
    case 403: return "Forbidden";
 8020680:	483f      	ldr	r0, [pc, #252]	@ (8020780 <mg_http_status_code_str+0x554>)
 8020682:	4770      	bx	lr
    case 404: return "Not Found";
 8020684:	483f      	ldr	r0, [pc, #252]	@ (8020784 <mg_http_status_code_str+0x558>)
 8020686:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 8020688:	483f      	ldr	r0, [pc, #252]	@ (8020788 <mg_http_status_code_str+0x55c>)
 802068a:	4770      	bx	lr
    case 406: return "Not Acceptable";
 802068c:	483f      	ldr	r0, [pc, #252]	@ (802078c <mg_http_status_code_str+0x560>)
 802068e:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 8020690:	483f      	ldr	r0, [pc, #252]	@ (8020790 <mg_http_status_code_str+0x564>)
 8020692:	4770      	bx	lr
    case 408: return "Request Timeout";
 8020694:	483f      	ldr	r0, [pc, #252]	@ (8020794 <mg_http_status_code_str+0x568>)
 8020696:	4770      	bx	lr
    case 409: return "Conflict";
 8020698:	483f      	ldr	r0, [pc, #252]	@ (8020798 <mg_http_status_code_str+0x56c>)
 802069a:	4770      	bx	lr
    case 410: return "Gone";
 802069c:	483f      	ldr	r0, [pc, #252]	@ (802079c <mg_http_status_code_str+0x570>)
 802069e:	4770      	bx	lr
    case 411: return "Length Required";
 80206a0:	483f      	ldr	r0, [pc, #252]	@ (80207a0 <mg_http_status_code_str+0x574>)
 80206a2:	4770      	bx	lr
    case 412: return "Precondition Failed";
 80206a4:	483f      	ldr	r0, [pc, #252]	@ (80207a4 <mg_http_status_code_str+0x578>)
 80206a6:	4770      	bx	lr
    case 413: return "Payload Too Large";
 80206a8:	483f      	ldr	r0, [pc, #252]	@ (80207a8 <mg_http_status_code_str+0x57c>)
 80206aa:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 80206ac:	483f      	ldr	r0, [pc, #252]	@ (80207ac <mg_http_status_code_str+0x580>)
 80206ae:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 80206b0:	483f      	ldr	r0, [pc, #252]	@ (80207b0 <mg_http_status_code_str+0x584>)
 80206b2:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 80206b4:	483f      	ldr	r0, [pc, #252]	@ (80207b4 <mg_http_status_code_str+0x588>)
 80206b6:	4770      	bx	lr
    case 417: return "Expectation Failed";
 80206b8:	483f      	ldr	r0, [pc, #252]	@ (80207b8 <mg_http_status_code_str+0x58c>)
 80206ba:	4770      	bx	lr
    case 418: return "I'm a teapot";
 80206bc:	483f      	ldr	r0, [pc, #252]	@ (80207bc <mg_http_status_code_str+0x590>)
 80206be:	4770      	bx	lr
    case 421: return "Misdirected Request";
 80206c0:	483f      	ldr	r0, [pc, #252]	@ (80207c0 <mg_http_status_code_str+0x594>)
 80206c2:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 80206c4:	483f      	ldr	r0, [pc, #252]	@ (80207c4 <mg_http_status_code_str+0x598>)
 80206c6:	4770      	bx	lr
    case 423: return "Locked";
 80206c8:	483f      	ldr	r0, [pc, #252]	@ (80207c8 <mg_http_status_code_str+0x59c>)
 80206ca:	4770      	bx	lr
    case 424: return "Failed Dependency";
 80206cc:	483f      	ldr	r0, [pc, #252]	@ (80207cc <mg_http_status_code_str+0x5a0>)
 80206ce:	4770      	bx	lr
    case 426: return "Upgrade Required";
 80206d0:	483f      	ldr	r0, [pc, #252]	@ (80207d0 <mg_http_status_code_str+0x5a4>)
 80206d2:	4770      	bx	lr
    case 428: return "Precondition Required";
 80206d4:	483f      	ldr	r0, [pc, #252]	@ (80207d4 <mg_http_status_code_str+0x5a8>)
 80206d6:	4770      	bx	lr
    case 429: return "Too Many Requests";
 80206d8:	483f      	ldr	r0, [pc, #252]	@ (80207d8 <mg_http_status_code_str+0x5ac>)
 80206da:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 80206dc:	483f      	ldr	r0, [pc, #252]	@ (80207dc <mg_http_status_code_str+0x5b0>)
 80206de:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 80206e0:	483f      	ldr	r0, [pc, #252]	@ (80207e0 <mg_http_status_code_str+0x5b4>)
 80206e2:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 80206e4:	483f      	ldr	r0, [pc, #252]	@ (80207e4 <mg_http_status_code_str+0x5b8>)
 80206e6:	4770      	bx	lr
    case 499: return "Client Closed Request";
 80206e8:	483f      	ldr	r0, [pc, #252]	@ (80207e8 <mg_http_status_code_str+0x5bc>)
 80206ea:	4770      	bx	lr
    case 500: return "Internal Server Error";
 80206ec:	483f      	ldr	r0, [pc, #252]	@ (80207ec <mg_http_status_code_str+0x5c0>)
 80206ee:	4770      	bx	lr
    case 501: return "Not Implemented";
 80206f0:	483f      	ldr	r0, [pc, #252]	@ (80207f0 <mg_http_status_code_str+0x5c4>)
 80206f2:	4770      	bx	lr
    case 502: return "Bad Gateway";
 80206f4:	483f      	ldr	r0, [pc, #252]	@ (80207f4 <mg_http_status_code_str+0x5c8>)
 80206f6:	4770      	bx	lr
    case 503: return "Service Unavailable";
 80206f8:	483f      	ldr	r0, [pc, #252]	@ (80207f8 <mg_http_status_code_str+0x5cc>)
 80206fa:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 80206fc:	483f      	ldr	r0, [pc, #252]	@ (80207fc <mg_http_status_code_str+0x5d0>)
 80206fe:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8020700:	483f      	ldr	r0, [pc, #252]	@ (8020800 <mg_http_status_code_str+0x5d4>)
 8020702:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8020704:	483f      	ldr	r0, [pc, #252]	@ (8020804 <mg_http_status_code_str+0x5d8>)
 8020706:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 8020708:	483f      	ldr	r0, [pc, #252]	@ (8020808 <mg_http_status_code_str+0x5dc>)
 802070a:	4770      	bx	lr
    case 508: return "Loop Detected";
 802070c:	483f      	ldr	r0, [pc, #252]	@ (802080c <mg_http_status_code_str+0x5e0>)
 802070e:	4770      	bx	lr
    case 510: return "Not Extended";
 8020710:	483f      	ldr	r0, [pc, #252]	@ (8020810 <mg_http_status_code_str+0x5e4>)
 8020712:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8020714:	483f      	ldr	r0, [pc, #252]	@ (8020814 <mg_http_status_code_str+0x5e8>)
 8020716:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 8020718:	483f      	ldr	r0, [pc, #252]	@ (8020818 <mg_http_status_code_str+0x5ec>)
 802071a:	4770      	bx	lr
    default: return "";
 802071c:	483f      	ldr	r0, [pc, #252]	@ (802081c <mg_http_status_code_str+0x5f0>)
 802071e:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8020720:	483f      	ldr	r0, [pc, #252]	@ (8020820 <mg_http_status_code_str+0x5f4>)
  }
}
 8020722:	4770      	bx	lr
 8020724:	0803a2b0 	.word	0x0803a2b0
 8020728:	0803a2d0 	.word	0x0803a2d0
 802072c:	0803a2dc 	.word	0x0803a2dc
 8020730:	0803a2e0 	.word	0x0803a2e0
 8020734:	0803a2e8 	.word	0x0803a2e8
 8020738:	0803a2f4 	.word	0x0803a2f4
 802073c:	0803a314 	.word	0x0803a314
 8020740:	0803a320 	.word	0x0803a320
 8020744:	0803a330 	.word	0x0803a330
 8020748:	0803a340 	.word	0x0803a340
 802074c:	0803a350 	.word	0x0803a350
 8020750:	0803a364 	.word	0x0803a364
 8020754:	0803a36c 	.word	0x0803a36c
 8020758:	0803a380 	.word	0x0803a380
 802075c:	0803a424 	.word	0x0803a424
 8020760:	0803a394 	.word	0x0803a394
 8020764:	0803a3a0 	.word	0x0803a3a0
 8020768:	0803a3b0 	.word	0x0803a3b0
 802076c:	0803a3bc 	.word	0x0803a3bc
 8020770:	0803a3d0 	.word	0x0803a3d0
 8020774:	0803a3e4 	.word	0x0803a3e4
 8020778:	0803a3f0 	.word	0x0803a3f0
 802077c:	0803a400 	.word	0x0803a400
 8020780:	0803a414 	.word	0x0803a414
 8020784:	0803a420 	.word	0x0803a420
 8020788:	0803a42c 	.word	0x0803a42c
 802078c:	0803a440 	.word	0x0803a440
 8020790:	0803a450 	.word	0x0803a450
 8020794:	0803a470 	.word	0x0803a470
 8020798:	0803a480 	.word	0x0803a480
 802079c:	0803a48c 	.word	0x0803a48c
 80207a0:	0803a494 	.word	0x0803a494
 80207a4:	0803a4a4 	.word	0x0803a4a4
 80207a8:	0803a4b8 	.word	0x0803a4b8
 80207ac:	0803a4cc 	.word	0x0803a4cc
 80207b0:	0803a4e4 	.word	0x0803a4e4
 80207b4:	0803a4fc 	.word	0x0803a4fc
 80207b8:	0803a51c 	.word	0x0803a51c
 80207bc:	0803a530 	.word	0x0803a530
 80207c0:	0803a540 	.word	0x0803a540
 80207c4:	0803a554 	.word	0x0803a554
 80207c8:	0803a56c 	.word	0x0803a56c
 80207cc:	0803a574 	.word	0x0803a574
 80207d0:	0803a588 	.word	0x0803a588
 80207d4:	0803a59c 	.word	0x0803a59c
 80207d8:	0803a5b4 	.word	0x0803a5b4
 80207dc:	0803a5c8 	.word	0x0803a5c8
 80207e0:	0803a5e8 	.word	0x0803a5e8
 80207e4:	0803a60c 	.word	0x0803a60c
 80207e8:	0803a62c 	.word	0x0803a62c
 80207ec:	0803a644 	.word	0x0803a644
 80207f0:	0803a65c 	.word	0x0803a65c
 80207f4:	0803a66c 	.word	0x0803a66c
 80207f8:	0803a678 	.word	0x0803a678
 80207fc:	0803a68c 	.word	0x0803a68c
 8020800:	0803a69c 	.word	0x0803a69c
 8020804:	0803a6b8 	.word	0x0803a6b8
 8020808:	0803a6d0 	.word	0x0803a6d0
 802080c:	0803a6e8 	.word	0x0803a6e8
 8020810:	0803a6f8 	.word	0x0803a6f8
 8020814:	0803a708 	.word	0x0803a708
 8020818:	0803a728 	.word	0x0803a728
 802081c:	08036fac 	.word	0x08036fac
 8020820:	0803a2bc 	.word	0x0803a2bc

08020824 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8020824:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 8020828:	2b09      	cmp	r3, #9
 802082a:	d91c      	bls.n	8020866 <mg_is_url_safe+0x42>
 802082c:	285f      	cmp	r0, #95	@ 0x5f
 802082e:	d01c      	beq.n	802086a <mg_is_url_safe+0x46>
 8020830:	dc0d      	bgt.n	802084e <mg_is_url_safe+0x2a>
 8020832:	282e      	cmp	r0, #46	@ 0x2e
 8020834:	d01b      	beq.n	802086e <mg_is_url_safe+0x4a>
 8020836:	dd04      	ble.n	8020842 <mg_is_url_safe+0x1e>
 8020838:	3841      	subs	r0, #65	@ 0x41
 802083a:	2819      	cmp	r0, #25
 802083c:	d805      	bhi.n	802084a <mg_is_url_safe+0x26>
 802083e:	2001      	movs	r0, #1
 8020840:	4770      	bx	lr
 8020842:	282d      	cmp	r0, #45	@ 0x2d
 8020844:	d115      	bne.n	8020872 <mg_is_url_safe+0x4e>
 8020846:	2001      	movs	r0, #1
 8020848:	4770      	bx	lr
 802084a:	2000      	movs	r0, #0
 802084c:	4770      	bx	lr
 802084e:	287a      	cmp	r0, #122	@ 0x7a
 8020850:	dd03      	ble.n	802085a <mg_is_url_safe+0x36>
 8020852:	287e      	cmp	r0, #126	@ 0x7e
 8020854:	d10f      	bne.n	8020876 <mg_is_url_safe+0x52>
 8020856:	2001      	movs	r0, #1
 8020858:	4770      	bx	lr
 802085a:	2861      	cmp	r0, #97	@ 0x61
 802085c:	da01      	bge.n	8020862 <mg_is_url_safe+0x3e>
 802085e:	2000      	movs	r0, #0
 8020860:	4770      	bx	lr
 8020862:	2001      	movs	r0, #1
 8020864:	4770      	bx	lr
 8020866:	2001      	movs	r0, #1
 8020868:	4770      	bx	lr
 802086a:	2001      	movs	r0, #1
 802086c:	4770      	bx	lr
 802086e:	2001      	movs	r0, #1
 8020870:	4770      	bx	lr
 8020872:	2000      	movs	r0, #0
 8020874:	4770      	bx	lr
 8020876:	2000      	movs	r0, #0
}
 8020878:	4770      	bx	lr

0802087a <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802087a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802087e:	2b09      	cmp	r3, #9
 8020880:	d908      	bls.n	8020894 <is_hex_digit+0x1a>
 8020882:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020886:	2b05      	cmp	r3, #5
 8020888:	d906      	bls.n	8020898 <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 802088a:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802088c:	2805      	cmp	r0, #5
 802088e:	d805      	bhi.n	802089c <is_hex_digit+0x22>
 8020890:	2001      	movs	r0, #1
 8020892:	4770      	bx	lr
 8020894:	2001      	movs	r0, #1
 8020896:	4770      	bx	lr
 8020898:	2001      	movs	r0, #1
 802089a:	4770      	bx	lr
 802089c:	2000      	movs	r0, #0
}
 802089e:	4770      	bx	lr

080208a0 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 80208a0:	b129      	cbz	r1, 80208ae <roundup+0xe>
 80208a2:	4408      	add	r0, r1
 80208a4:	3801      	subs	r0, #1
 80208a6:	fbb0 f0f1 	udiv	r0, r0, r1
 80208aa:	fb01 f000 	mul.w	r0, r1, r0
}
 80208ae:	4770      	bx	lr

080208b0 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 80208b0:	b108      	cbz	r0, 80208b6 <escapeseq+0x6>
 80208b2:	4802      	ldr	r0, [pc, #8]	@ (80208bc <escapeseq+0xc>)
 80208b4:	4770      	bx	lr
 80208b6:	4802      	ldr	r0, [pc, #8]	@ (80208c0 <escapeseq+0x10>)
}
 80208b8:	4770      	bx	lr
 80208ba:	bf00      	nop
 80208bc:	0803a748 	.word	0x0803a748
 80208c0:	0803a750 	.word	0x0803a750

080208c4 <json_esc>:

static char json_esc(int c, int esc) {
 80208c4:	b570      	push	{r4, r5, r6, lr}
 80208c6:	4604      	mov	r4, r0
 80208c8:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 80208ca:	4608      	mov	r0, r1
 80208cc:	f7ff fff0 	bl	80208b0 <escapeseq>
 80208d0:	4606      	mov	r6, r0
 80208d2:	fab5 f085 	clz	r0, r5
 80208d6:	0940      	lsrs	r0, r0, #5
 80208d8:	f7ff ffea 	bl	80208b0 <escapeseq>
 80208dc:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 80208de:	4633      	mov	r3, r6
 80208e0:	e000      	b.n	80208e4 <json_esc+0x20>
 80208e2:	3301      	adds	r3, #1
 80208e4:	7818      	ldrb	r0, [r3, #0]
 80208e6:	b118      	cbz	r0, 80208f0 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 80208e8:	42a0      	cmp	r0, r4
 80208ea:	d1fa      	bne.n	80208e2 <json_esc+0x1e>
 80208ec:	1b9b      	subs	r3, r3, r6
 80208ee:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 80208f0:	bd70      	pop	{r4, r5, r6, pc}

080208f2 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 80208f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208f6:	4607      	mov	r7, r0
 80208f8:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 80208fa:	2400      	movs	r4, #0
 80208fc:	e003      	b.n	8020906 <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 80208fe:	b1d5      	cbz	r5, 8020936 <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020900:	2d22      	cmp	r5, #34	@ 0x22
 8020902:	d015      	beq.n	8020930 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020904:	3401      	adds	r4, #1
 8020906:	42b4      	cmp	r4, r6
 8020908:	da10      	bge.n	802092c <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802090a:	4623      	mov	r3, r4
 802090c:	5d3d      	ldrb	r5, [r7, r4]
 802090e:	2d5c      	cmp	r5, #92	@ 0x5c
 8020910:	d1f5      	bne.n	80208fe <mg_pass_string+0xc>
 8020912:	f104 0801 	add.w	r8, r4, #1
 8020916:	45b0      	cmp	r8, r6
 8020918:	daf1      	bge.n	80208fe <mg_pass_string+0xc>
 802091a:	443b      	add	r3, r7
 802091c:	2101      	movs	r1, #1
 802091e:	7858      	ldrb	r0, [r3, #1]
 8020920:	f7ff ffd0 	bl	80208c4 <json_esc>
 8020924:	2800      	cmp	r0, #0
 8020926:	d0ea      	beq.n	80208fe <mg_pass_string+0xc>
      i++;
 8020928:	4644      	mov	r4, r8
 802092a:	e7eb      	b.n	8020904 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 802092c:	f06f 0401 	mvn.w	r4, #1
}
 8020930:	4620      	mov	r0, r4
 8020932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 8020936:	f06f 0401 	mvn.w	r4, #1
 802093a:	e7f9      	b.n	8020930 <mg_pass_string+0x3e>
 802093c:	0000      	movs	r0, r0
	...

08020940 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8020940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020944:	ed2d 8b02 	vpush	{d8}
 8020948:	b085      	sub	sp, #20
 802094a:	4681      	mov	r9, r0
 802094c:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 802094e:	f1b1 0800 	subs.w	r8, r1, #0
 8020952:	dd49      	ble.n	80209e8 <mg_atod+0xa8>
 8020954:	7803      	ldrb	r3, [r0, #0]
 8020956:	2b2d      	cmp	r3, #45	@ 0x2d
 8020958:	d04c      	beq.n	80209f4 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 802095a:	2b2b      	cmp	r3, #43	@ 0x2b
 802095c:	d04e      	beq.n	80209fc <mg_atod+0xbc>
  int i = 0, sign = 1;
 802095e:	f04f 0a01 	mov.w	sl, #1
 8020962:	2400      	movs	r4, #0
 8020964:	e043      	b.n	80209ee <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 8020966:	2200      	movs	r2, #0
 8020968:	4b71      	ldr	r3, [pc, #452]	@ (8020b30 <mg_atod+0x1f0>)
 802096a:	4630      	mov	r0, r6
 802096c:	4639      	mov	r1, r7
 802096e:	f7ef fe5b 	bl	8010628 <__aeabi_dmul>
 8020972:	4606      	mov	r6, r0
 8020974:	460f      	mov	r7, r1
    d += p[i] - '0';
 8020976:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 802097a:	f7ef fdeb 	bl	8010554 <__aeabi_i2d>
 802097e:	4632      	mov	r2, r6
 8020980:	463b      	mov	r3, r7
 8020982:	f7ef fc9b 	bl	80102bc <__adddf3>
 8020986:	4606      	mov	r6, r0
 8020988:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802098a:	3401      	adds	r4, #1
 802098c:	4544      	cmp	r4, r8
 802098e:	da05      	bge.n	802099c <mg_atod+0x5c>
 8020990:	f819 5004 	ldrb.w	r5, [r9, r4]
 8020994:	2d2f      	cmp	r5, #47	@ 0x2f
 8020996:	d901      	bls.n	802099c <mg_atod+0x5c>
 8020998:	2d39      	cmp	r5, #57	@ 0x39
 802099a:	d9e4      	bls.n	8020966 <mg_atod+0x26>
  }
  d *= sign;
 802099c:	4650      	mov	r0, sl
 802099e:	f7ef fdd9 	bl	8010554 <__aeabi_i2d>
 80209a2:	4602      	mov	r2, r0
 80209a4:	460b      	mov	r3, r1
 80209a6:	ec43 2b18 	vmov	d8, r2, r3
 80209aa:	4632      	mov	r2, r6
 80209ac:	463b      	mov	r3, r7
 80209ae:	f7ef fe3b 	bl	8010628 <__aeabi_dmul>
 80209b2:	4606      	mov	r6, r0
 80209b4:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 80209b6:	4544      	cmp	r4, r8
 80209b8:	da03      	bge.n	80209c2 <mg_atod+0x82>
 80209ba:	f819 3004 	ldrb.w	r3, [r9, r4]
 80209be:	2b2e      	cmp	r3, #46	@ 0x2e
 80209c0:	d020      	beq.n	8020a04 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80209c2:	4544      	cmp	r4, r8
 80209c4:	f280 80a1 	bge.w	8020b0a <mg_atod+0x1ca>
 80209c8:	f819 3004 	ldrb.w	r3, [r9, r4]
 80209cc:	2b65      	cmp	r3, #101	@ 0x65
 80209ce:	d002      	beq.n	80209d6 <mg_atod+0x96>
 80209d0:	2b45      	cmp	r3, #69	@ 0x45
 80209d2:	f040 809a 	bne.w	8020b0a <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 80209d6:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 80209d8:	4598      	cmp	r8, r3
 80209da:	dd58      	ble.n	8020a8e <mg_atod+0x14e>
 80209dc:	f819 2003 	ldrb.w	r2, [r9, r3]
 80209e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80209e2:	d051      	beq.n	8020a88 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 80209e4:	2200      	movs	r2, #0
 80209e6:	e053      	b.n	8020a90 <mg_atod+0x150>
  int i = 0, sign = 1;
 80209e8:	f04f 0a01 	mov.w	sl, #1
 80209ec:	2400      	movs	r4, #0
    i++;
 80209ee:	2600      	movs	r6, #0
 80209f0:	2700      	movs	r7, #0
 80209f2:	e7cb      	b.n	802098c <mg_atod+0x4c>
    sign = -1, i++;
 80209f4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80209f8:	2401      	movs	r4, #1
 80209fa:	e7f8      	b.n	80209ee <mg_atod+0xae>
  int i = 0, sign = 1;
 80209fc:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020a00:	4654      	mov	r4, sl
 8020a02:	e7f4      	b.n	80209ee <mg_atod+0xae>
    i++;
 8020a04:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020a06:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 8020a0a:	e9db ab00 	ldrd	sl, fp, [fp]
 8020a0e:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020b28 <mg_atod+0x1e8>
 8020a12:	ec53 2b17 	vmov	r2, r3, d7
 8020a16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020a1a:	464f      	mov	r7, r9
 8020a1c:	4645      	mov	r5, r8
 8020a1e:	4690      	mov	r8, r2
 8020a20:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020a22:	e017      	b.n	8020a54 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020a24:	3830      	subs	r0, #48	@ 0x30
 8020a26:	f7ef fd95 	bl	8010554 <__aeabi_i2d>
 8020a2a:	4652      	mov	r2, sl
 8020a2c:	465b      	mov	r3, fp
 8020a2e:	f7ef fdfb 	bl	8010628 <__aeabi_dmul>
 8020a32:	4602      	mov	r2, r0
 8020a34:	460b      	mov	r3, r1
 8020a36:	4640      	mov	r0, r8
 8020a38:	4649      	mov	r1, r9
 8020a3a:	f7ef fc3f 	bl	80102bc <__adddf3>
 8020a3e:	4680      	mov	r8, r0
 8020a40:	4689      	mov	r9, r1
      base /= 10.0;
 8020a42:	2200      	movs	r2, #0
 8020a44:	4b3a      	ldr	r3, [pc, #232]	@ (8020b30 <mg_atod+0x1f0>)
 8020a46:	4650      	mov	r0, sl
 8020a48:	4659      	mov	r1, fp
 8020a4a:	f7ef ff17 	bl	801087c <__aeabi_ddiv>
 8020a4e:	4682      	mov	sl, r0
 8020a50:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020a52:	3401      	adds	r4, #1
 8020a54:	42ac      	cmp	r4, r5
 8020a56:	da04      	bge.n	8020a62 <mg_atod+0x122>
 8020a58:	5d38      	ldrb	r0, [r7, r4]
 8020a5a:	282f      	cmp	r0, #47	@ 0x2f
 8020a5c:	d901      	bls.n	8020a62 <mg_atod+0x122>
 8020a5e:	2839      	cmp	r0, #57	@ 0x39
 8020a60:	d9e0      	bls.n	8020a24 <mg_atod+0xe4>
    d += frac * sign;
 8020a62:	4642      	mov	r2, r8
 8020a64:	464b      	mov	r3, r9
 8020a66:	46b9      	mov	r9, r7
 8020a68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020a6c:	46a8      	mov	r8, r5
 8020a6e:	ec51 0b18 	vmov	r0, r1, d8
 8020a72:	f7ef fdd9 	bl	8010628 <__aeabi_dmul>
 8020a76:	4602      	mov	r2, r0
 8020a78:	460b      	mov	r3, r1
 8020a7a:	4630      	mov	r0, r6
 8020a7c:	4639      	mov	r1, r7
 8020a7e:	f7ef fc1d 	bl	80102bc <__adddf3>
 8020a82:	4606      	mov	r6, r0
 8020a84:	460f      	mov	r7, r1
 8020a86:	e79c      	b.n	80209c2 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020a88:	1ca3      	adds	r3, r4, #2
 8020a8a:	2201      	movs	r2, #1
 8020a8c:	e000      	b.n	8020a90 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 8020a8e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 8020a90:	4543      	cmp	r3, r8
 8020a92:	da03      	bge.n	8020a9c <mg_atod+0x15c>
 8020a94:	f819 1003 	ldrb.w	r1, [r9, r3]
 8020a98:	292b      	cmp	r1, #43	@ 0x2b
 8020a9a:	d013      	beq.n	8020ac4 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020a9c:	461c      	mov	r4, r3
 8020a9e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8020aa0:	4544      	cmp	r4, r8
 8020aa2:	da11      	bge.n	8020ac8 <mg_atod+0x188>
 8020aa4:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020aa8:	2b2f      	cmp	r3, #47	@ 0x2f
 8020aaa:	d90d      	bls.n	8020ac8 <mg_atod+0x188>
 8020aac:	2b39      	cmp	r3, #57	@ 0x39
 8020aae:	d80b      	bhi.n	8020ac8 <mg_atod+0x188>
 8020ab0:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 8020ab4:	da08      	bge.n	8020ac8 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 8020ab6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8020aba:	3401      	adds	r4, #1
 8020abc:	3b30      	subs	r3, #48	@ 0x30
 8020abe:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020ac2:	e7ed      	b.n	8020aa0 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 8020ac4:	3301      	adds	r3, #1
 8020ac6:	e7e9      	b.n	8020a9c <mg_atod+0x15c>
    if (minus) exp = -exp;
 8020ac8:	b102      	cbz	r2, 8020acc <mg_atod+0x18c>
 8020aca:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 8020acc:	f04f 0800 	mov.w	r8, #0
 8020ad0:	e009      	b.n	8020ae6 <mg_atod+0x1a6>
 8020ad2:	2200      	movs	r2, #0
 8020ad4:	4b16      	ldr	r3, [pc, #88]	@ (8020b30 <mg_atod+0x1f0>)
 8020ad6:	4630      	mov	r0, r6
 8020ad8:	4639      	mov	r1, r7
 8020ada:	f7ef fda5 	bl	8010628 <__aeabi_dmul>
 8020ade:	4606      	mov	r6, r0
 8020ae0:	460f      	mov	r7, r1
 8020ae2:	f108 0801 	add.w	r8, r8, #1
 8020ae6:	45a8      	cmp	r8, r5
 8020ae8:	dbf3      	blt.n	8020ad2 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8020aea:	f04f 0800 	mov.w	r8, #0
 8020aee:	e009      	b.n	8020b04 <mg_atod+0x1c4>
 8020af0:	2200      	movs	r2, #0
 8020af2:	4b0f      	ldr	r3, [pc, #60]	@ (8020b30 <mg_atod+0x1f0>)
 8020af4:	4630      	mov	r0, r6
 8020af6:	4639      	mov	r1, r7
 8020af8:	f7ef fec0 	bl	801087c <__aeabi_ddiv>
 8020afc:	4606      	mov	r6, r0
 8020afe:	460f      	mov	r7, r1
 8020b00:	f108 0801 	add.w	r8, r8, #1
 8020b04:	426b      	negs	r3, r5
 8020b06:	4543      	cmp	r3, r8
 8020b08:	dcf2      	bgt.n	8020af0 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 8020b0a:	9b01      	ldr	r3, [sp, #4]
 8020b0c:	b103      	cbz	r3, 8020b10 <mg_atod+0x1d0>
 8020b0e:	601c      	str	r4, [r3, #0]
  return d;
}
 8020b10:	ec47 6b10 	vmov	d0, r6, r7
 8020b14:	b005      	add	sp, #20
 8020b16:	ecbd 8b02 	vpop	{d8}
 8020b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b1e:	bf00      	nop
 8020b20:	9999999a 	.word	0x9999999a
 8020b24:	3fb99999 	.word	0x3fb99999
	...
 8020b30:	40240000 	.word	0x40240000

08020b34 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020b34:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020b36:	4b03      	ldr	r3, [pc, #12]	@ (8020b44 <logc+0x10>)
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	4a03      	ldr	r2, [pc, #12]	@ (8020b48 <logc+0x14>)
 8020b3c:	6811      	ldr	r1, [r2, #0]
 8020b3e:	4798      	blx	r3
}
 8020b40:	bd08      	pop	{r3, pc}
 8020b42:	bf00      	nop
 8020b44:	20000128 	.word	0x20000128
 8020b48:	20019f28 	.word	0x20019f28

08020b4c <logs>:

static void logs(const char *buf, size_t len) {
 8020b4c:	b570      	push	{r4, r5, r6, lr}
 8020b4e:	4606      	mov	r6, r0
 8020b50:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8020b52:	2400      	movs	r4, #0
 8020b54:	e003      	b.n	8020b5e <logs+0x12>
 8020b56:	5d30      	ldrb	r0, [r6, r4]
 8020b58:	f7ff ffec 	bl	8020b34 <logc>
 8020b5c:	3401      	adds	r4, #1
 8020b5e:	42ac      	cmp	r4, r5
 8020b60:	d3f9      	bcc.n	8020b56 <logs+0xa>
}
 8020b62:	bd70      	pop	{r4, r5, r6, pc}

08020b64 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8020b64:	2809      	cmp	r0, #9
 8020b66:	d803      	bhi.n	8020b70 <nibble+0xc>
 8020b68:	b2c0      	uxtb	r0, r0
 8020b6a:	3030      	adds	r0, #48	@ 0x30
 8020b6c:	b2c0      	uxtb	r0, r0
 8020b6e:	4770      	bx	lr
 8020b70:	b2c0      	uxtb	r0, r0
 8020b72:	3057      	adds	r0, #87	@ 0x57
 8020b74:	b2c0      	uxtb	r0, r0
}
 8020b76:	4770      	bx	lr

08020b78 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8020b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b7c:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 8020b7e:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8020b80:	6883      	ldr	r3, [r0, #8]
 8020b82:	68c2      	ldr	r2, [r0, #12]
 8020b84:	4053      	eors	r3, r2
 8020b86:	4033      	ands	r3, r6
 8020b88:	4053      	eors	r3, r2
 8020b8a:	f8d1 a000 	ldr.w	sl, [r1]
 8020b8e:	4453      	add	r3, sl
 8020b90:	6802      	ldr	r2, [r0, #0]
 8020b92:	4413      	add	r3, r2
 8020b94:	4ae0      	ldr	r2, [pc, #896]	@ (8020f18 <mg_md5_transform+0x3a0>)
 8020b96:	441a      	add	r2, r3
 8020b98:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 8020b9c:	6883      	ldr	r3, [r0, #8]
 8020b9e:	ea86 0503 	eor.w	r5, r6, r3
 8020ba2:	4015      	ands	r5, r2
 8020ba4:	405d      	eors	r5, r3
 8020ba6:	684b      	ldr	r3, [r1, #4]
 8020ba8:	9301      	str	r3, [sp, #4]
 8020baa:	441d      	add	r5, r3
 8020bac:	68c4      	ldr	r4, [r0, #12]
 8020bae:	4425      	add	r5, r4
 8020bb0:	4bda      	ldr	r3, [pc, #872]	@ (8020f1c <mg_md5_transform+0x3a4>)
 8020bb2:	442b      	add	r3, r5
 8020bb4:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8020bb8:	ea86 0502 	eor.w	r5, r6, r2
 8020bbc:	401d      	ands	r5, r3
 8020bbe:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020bc0:	4075      	eors	r5, r6
 8020bc2:	688c      	ldr	r4, [r1, #8]
 8020bc4:	4425      	add	r5, r4
 8020bc6:	6886      	ldr	r6, [r0, #8]
 8020bc8:	4435      	add	r5, r6
 8020bca:	4ed5      	ldr	r6, [pc, #852]	@ (8020f20 <mg_md5_transform+0x3a8>)
 8020bcc:	442e      	add	r6, r5
 8020bce:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 8020bd2:	ea82 0703 	eor.w	r7, r2, r3
 8020bd6:	ea07 070c 	and.w	r7, r7, ip
 8020bda:	4057      	eors	r7, r2
 8020bdc:	68cd      	ldr	r5, [r1, #12]
 8020bde:	950a      	str	r5, [sp, #40]	@ 0x28
 8020be0:	442f      	add	r7, r5
 8020be2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020be4:	4437      	add	r7, r6
 8020be6:	4dcf      	ldr	r5, [pc, #828]	@ (8020f24 <mg_md5_transform+0x3ac>)
 8020be8:	443d      	add	r5, r7
 8020bea:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 8020bee:	ea83 070c 	eor.w	r7, r3, ip
 8020bf2:	402f      	ands	r7, r5
 8020bf4:	405f      	eors	r7, r3
 8020bf6:	690e      	ldr	r6, [r1, #16]
 8020bf8:	9602      	str	r6, [sp, #8]
 8020bfa:	4437      	add	r7, r6
 8020bfc:	4417      	add	r7, r2
 8020bfe:	4aca      	ldr	r2, [pc, #808]	@ (8020f28 <mg_md5_transform+0x3b0>)
 8020c00:	443a      	add	r2, r7
 8020c02:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8020c06:	ea8c 0705 	eor.w	r7, ip, r5
 8020c0a:	4017      	ands	r7, r2
 8020c0c:	ea87 070c 	eor.w	r7, r7, ip
 8020c10:	694e      	ldr	r6, [r1, #20]
 8020c12:	9603      	str	r6, [sp, #12]
 8020c14:	4437      	add	r7, r6
 8020c16:	441f      	add	r7, r3
 8020c18:	4bc4      	ldr	r3, [pc, #784]	@ (8020f2c <mg_md5_transform+0x3b4>)
 8020c1a:	443b      	add	r3, r7
 8020c1c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8020c20:	ea85 0702 	eor.w	r7, r5, r2
 8020c24:	401f      	ands	r7, r3
 8020c26:	406f      	eors	r7, r5
 8020c28:	698e      	ldr	r6, [r1, #24]
 8020c2a:	9604      	str	r6, [sp, #16]
 8020c2c:	4437      	add	r7, r6
 8020c2e:	eb0c 0607 	add.w	r6, ip, r7
 8020c32:	4fbf      	ldr	r7, [pc, #764]	@ (8020f30 <mg_md5_transform+0x3b8>)
 8020c34:	4437      	add	r7, r6
 8020c36:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 8020c3a:	ea82 0603 	eor.w	r6, r2, r3
 8020c3e:	ea06 060c 	and.w	r6, r6, ip
 8020c42:	4056      	eors	r6, r2
 8020c44:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8020c48:	444e      	add	r6, r9
 8020c4a:	4435      	add	r5, r6
 8020c4c:	4fb9      	ldr	r7, [pc, #740]	@ (8020f34 <mg_md5_transform+0x3bc>)
 8020c4e:	442f      	add	r7, r5
 8020c50:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 8020c54:	ea83 050c 	eor.w	r5, r3, ip
 8020c58:	403d      	ands	r5, r7
 8020c5a:	405d      	eors	r5, r3
 8020c5c:	6a0e      	ldr	r6, [r1, #32]
 8020c5e:	9605      	str	r6, [sp, #20]
 8020c60:	4435      	add	r5, r6
 8020c62:	442a      	add	r2, r5
 8020c64:	4eb4      	ldr	r6, [pc, #720]	@ (8020f38 <mg_md5_transform+0x3c0>)
 8020c66:	4416      	add	r6, r2
 8020c68:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 8020c6c:	ea8c 0207 	eor.w	r2, ip, r7
 8020c70:	4032      	ands	r2, r6
 8020c72:	ea82 020c 	eor.w	r2, r2, ip
 8020c76:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8020c78:	9506      	str	r5, [sp, #24]
 8020c7a:	442a      	add	r2, r5
 8020c7c:	4413      	add	r3, r2
 8020c7e:	4daf      	ldr	r5, [pc, #700]	@ (8020f3c <mg_md5_transform+0x3c4>)
 8020c80:	441d      	add	r5, r3
 8020c82:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8020c86:	ea87 0306 	eor.w	r3, r7, r6
 8020c8a:	402b      	ands	r3, r5
 8020c8c:	407b      	eors	r3, r7
 8020c8e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8020c90:	9207      	str	r2, [sp, #28]
 8020c92:	4413      	add	r3, r2
 8020c94:	4463      	add	r3, ip
 8020c96:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 8020c9a:	3b4f      	subs	r3, #79	@ 0x4f
 8020c9c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8020ca0:	ea86 0c05 	eor.w	ip, r6, r5
 8020ca4:	ea0c 0c03 	and.w	ip, ip, r3
 8020ca8:	ea8c 0c06 	eor.w	ip, ip, r6
 8020cac:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8020cae:	9208      	str	r2, [sp, #32]
 8020cb0:	4494      	add	ip, r2
 8020cb2:	4467      	add	r7, ip
 8020cb4:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8020f60 <mg_md5_transform+0x3e8>
 8020cb8:	44be      	add	lr, r7
 8020cba:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 8020cbe:	ea85 0c03 	eor.w	ip, r5, r3
 8020cc2:	ea0c 0c0e 	and.w	ip, ip, lr
 8020cc6:	ea8c 0c05 	eor.w	ip, ip, r5
 8020cca:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8020ccc:	44bc      	add	ip, r7
 8020cce:	4466      	add	r6, ip
 8020cd0:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8020f64 <mg_md5_transform+0x3ec>
 8020cd4:	44b4      	add	ip, r6
 8020cd6:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 8020cda:	ea83 080e 	eor.w	r8, r3, lr
 8020cde:	ea08 080c 	and.w	r8, r8, ip
 8020ce2:	ea88 0803 	eor.w	r8, r8, r3
 8020ce6:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 8020ce8:	44b0      	add	r8, r6
 8020cea:	44a8      	add	r8, r5
 8020cec:	4d94      	ldr	r5, [pc, #592]	@ (8020f40 <mg_md5_transform+0x3c8>)
 8020cee:	4445      	add	r5, r8
 8020cf0:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8020cf4:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020cf8:	ea0b 0b05 	and.w	fp, fp, r5
 8020cfc:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020d00:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 8020d04:	44c3      	add	fp, r8
 8020d06:	449b      	add	fp, r3
 8020d08:	4b8e      	ldr	r3, [pc, #568]	@ (8020f44 <mg_md5_transform+0x3cc>)
 8020d0a:	445b      	add	r3, fp
 8020d0c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8020d10:	ea8c 0b05 	eor.w	fp, ip, r5
 8020d14:	ea0b 0b03 	and.w	fp, fp, r3
 8020d18:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020d1c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8020d1e:	9109      	str	r1, [sp, #36]	@ 0x24
 8020d20:	448b      	add	fp, r1
 8020d22:	44f3      	add	fp, lr
 8020d24:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8020f68 <mg_md5_transform+0x3f0>
 8020d28:	44de      	add	lr, fp
 8020d2a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 8020d2e:	ea83 0b0e 	eor.w	fp, r3, lr
 8020d32:	ea0b 0b05 	and.w	fp, fp, r5
 8020d36:	ea8b 0b03 	eor.w	fp, fp, r3
 8020d3a:	9a01      	ldr	r2, [sp, #4]
 8020d3c:	4493      	add	fp, r2
 8020d3e:	44e3      	add	fp, ip
 8020d40:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020f6c <mg_md5_transform+0x3f4>
 8020d44:	44dc      	add	ip, fp
 8020d46:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 8020d4a:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020d4e:	ea0b 0b03 	and.w	fp, fp, r3
 8020d52:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020d56:	9a04      	ldr	r2, [sp, #16]
 8020d58:	4493      	add	fp, r2
 8020d5a:	44ab      	add	fp, r5
 8020d5c:	4d7a      	ldr	r5, [pc, #488]	@ (8020f48 <mg_md5_transform+0x3d0>)
 8020d5e:	445d      	add	r5, fp
 8020d60:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8020d64:	ea8c 0b05 	eor.w	fp, ip, r5
 8020d68:	ea0b 0b0e 	and.w	fp, fp, lr
 8020d6c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020d70:	9908      	ldr	r1, [sp, #32]
 8020d72:	448b      	add	fp, r1
 8020d74:	445b      	add	r3, fp
 8020d76:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8020f70 <mg_md5_transform+0x3f8>
 8020d7a:	449b      	add	fp, r3
 8020d7c:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8020d80:	ea85 030b 	eor.w	r3, r5, fp
 8020d84:	ea03 030c 	and.w	r3, r3, ip
 8020d88:	406b      	eors	r3, r5
 8020d8a:	4453      	add	r3, sl
 8020d8c:	4473      	add	r3, lr
 8020d8e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8020f74 <mg_md5_transform+0x3fc>
 8020d92:	449e      	add	lr, r3
 8020d94:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8020d98:	ea8b 030e 	eor.w	r3, fp, lr
 8020d9c:	402b      	ands	r3, r5
 8020d9e:	ea83 030b 	eor.w	r3, r3, fp
 8020da2:	9a03      	ldr	r2, [sp, #12]
 8020da4:	4413      	add	r3, r2
 8020da6:	449c      	add	ip, r3
 8020da8:	4b68      	ldr	r3, [pc, #416]	@ (8020f4c <mg_md5_transform+0x3d4>)
 8020daa:	4463      	add	r3, ip
 8020dac:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8020db0:	ea8e 0c03 	eor.w	ip, lr, r3
 8020db4:	ea0c 0c0b 	and.w	ip, ip, fp
 8020db8:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020dbc:	9a07      	ldr	r2, [sp, #28]
 8020dbe:	4494      	add	ip, r2
 8020dc0:	4465      	add	r5, ip
 8020dc2:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020f78 <mg_md5_transform+0x400>
 8020dc6:	44ac      	add	ip, r5
 8020dc8:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 8020dcc:	ea83 050c 	eor.w	r5, r3, ip
 8020dd0:	ea05 050e 	and.w	r5, r5, lr
 8020dd4:	405d      	eors	r5, r3
 8020dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020dd8:	440d      	add	r5, r1
 8020dda:	445d      	add	r5, fp
 8020ddc:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8020f7c <mg_md5_transform+0x404>
 8020de0:	44ab      	add	fp, r5
 8020de2:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 8020de6:	ea8c 050b 	eor.w	r5, ip, fp
 8020dea:	401d      	ands	r5, r3
 8020dec:	ea85 050c 	eor.w	r5, r5, ip
 8020df0:	9a02      	ldr	r2, [sp, #8]
 8020df2:	4415      	add	r5, r2
 8020df4:	44ae      	add	lr, r5
 8020df6:	4d56      	ldr	r5, [pc, #344]	@ (8020f50 <mg_md5_transform+0x3d8>)
 8020df8:	4475      	add	r5, lr
 8020dfa:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 8020dfe:	ea8b 0e05 	eor.w	lr, fp, r5
 8020e02:	ea0e 0e0c 	and.w	lr, lr, ip
 8020e06:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020e0a:	9906      	ldr	r1, [sp, #24]
 8020e0c:	448e      	add	lr, r1
 8020e0e:	4473      	add	r3, lr
 8020e10:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8020f80 <mg_md5_transform+0x408>
 8020e14:	449e      	add	lr, r3
 8020e16:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8020e1a:	ea85 030e 	eor.w	r3, r5, lr
 8020e1e:	ea03 030b 	and.w	r3, r3, fp
 8020e22:	406b      	eors	r3, r5
 8020e24:	4443      	add	r3, r8
 8020e26:	4463      	add	r3, ip
 8020e28:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8020f84 <mg_md5_transform+0x40c>
 8020e2c:	449c      	add	ip, r3
 8020e2e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8020e32:	ea8e 030c 	eor.w	r3, lr, ip
 8020e36:	402b      	ands	r3, r5
 8020e38:	ea83 030e 	eor.w	r3, r3, lr
 8020e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e3e:	4413      	add	r3, r2
 8020e40:	449b      	add	fp, r3
 8020e42:	4b44      	ldr	r3, [pc, #272]	@ (8020f54 <mg_md5_transform+0x3dc>)
 8020e44:	445b      	add	r3, fp
 8020e46:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 8020e4a:	ea8c 0b03 	eor.w	fp, ip, r3
 8020e4e:	ea0b 0b0e 	and.w	fp, fp, lr
 8020e52:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020e56:	9905      	ldr	r1, [sp, #20]
 8020e58:	448b      	add	fp, r1
 8020e5a:	445d      	add	r5, fp
 8020e5c:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8020f88 <mg_md5_transform+0x410>
 8020e60:	44ab      	add	fp, r5
 8020e62:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8020e66:	ea83 050b 	eor.w	r5, r3, fp
 8020e6a:	ea05 050c 	and.w	r5, r5, ip
 8020e6e:	405d      	eors	r5, r3
 8020e70:	4435      	add	r5, r6
 8020e72:	4475      	add	r5, lr
 8020e74:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8020f8c <mg_md5_transform+0x414>
 8020e78:	44ae      	add	lr, r5
 8020e7a:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 8020e7e:	ea8b 050e 	eor.w	r5, fp, lr
 8020e82:	401d      	ands	r5, r3
 8020e84:	ea85 050b 	eor.w	r5, r5, fp
 8020e88:	4425      	add	r5, r4
 8020e8a:	44ac      	add	ip, r5
 8020e8c:	4d32      	ldr	r5, [pc, #200]	@ (8020f58 <mg_md5_transform+0x3e0>)
 8020e8e:	4465      	add	r5, ip
 8020e90:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8020e94:	ea8e 0c05 	eor.w	ip, lr, r5
 8020e98:	ea0c 0c0b 	and.w	ip, ip, fp
 8020e9c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020ea0:	44cc      	add	ip, r9
 8020ea2:	4463      	add	r3, ip
 8020ea4:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8020f90 <mg_md5_transform+0x418>
 8020ea8:	449c      	add	ip, r3
 8020eaa:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 8020eae:	ea85 030c 	eor.w	r3, r5, ip
 8020eb2:	ea03 030e 	and.w	r3, r3, lr
 8020eb6:	406b      	eors	r3, r5
 8020eb8:	443b      	add	r3, r7
 8020eba:	445b      	add	r3, fp
 8020ebc:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8020f94 <mg_md5_transform+0x41c>
 8020ec0:	449b      	add	fp, r3
 8020ec2:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8020ec6:	ea8c 030b 	eor.w	r3, ip, fp
 8020eca:	406b      	eors	r3, r5
 8020ecc:	9a03      	ldr	r2, [sp, #12]
 8020ece:	4413      	add	r3, r2
 8020ed0:	4473      	add	r3, lr
 8020ed2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8020ed6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 8020eda:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 8020ede:	ea8b 0e03 	eor.w	lr, fp, r3
 8020ee2:	ea8e 0e0c 	eor.w	lr, lr, ip
 8020ee6:	448e      	add	lr, r1
 8020ee8:	44ae      	add	lr, r5
 8020eea:	4d1c      	ldr	r5, [pc, #112]	@ (8020f5c <mg_md5_transform+0x3e4>)
 8020eec:	4475      	add	r5, lr
 8020eee:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8020ef2:	ea83 0e05 	eor.w	lr, r3, r5
 8020ef6:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020efa:	9908      	ldr	r1, [sp, #32]
 8020efc:	448e      	add	lr, r1
 8020efe:	44f4      	add	ip, lr
 8020f00:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8020f98 <mg_md5_transform+0x420>
 8020f04:	44e6      	add	lr, ip
 8020f06:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 8020f0a:	ea85 0c0e 	eor.w	ip, r5, lr
 8020f0e:	ea8c 0c03 	eor.w	ip, ip, r3
 8020f12:	44c4      	add	ip, r8
 8020f14:	44e3      	add	fp, ip
 8020f16:	e041      	b.n	8020f9c <mg_md5_transform+0x424>
 8020f18:	d76aa478 	.word	0xd76aa478
 8020f1c:	e8c7b756 	.word	0xe8c7b756
 8020f20:	242070db 	.word	0x242070db
 8020f24:	c1bdceee 	.word	0xc1bdceee
 8020f28:	f57c0faf 	.word	0xf57c0faf
 8020f2c:	4787c62a 	.word	0x4787c62a
 8020f30:	a8304613 	.word	0xa8304613
 8020f34:	fd469501 	.word	0xfd469501
 8020f38:	698098d8 	.word	0x698098d8
 8020f3c:	8b44f7af 	.word	0x8b44f7af
 8020f40:	fd987193 	.word	0xfd987193
 8020f44:	a679438e 	.word	0xa679438e
 8020f48:	c040b340 	.word	0xc040b340
 8020f4c:	d62f105d 	.word	0xd62f105d
 8020f50:	e7d3fbc8 	.word	0xe7d3fbc8
 8020f54:	f4d50d87 	.word	0xf4d50d87
 8020f58:	fcefa3f8 	.word	0xfcefa3f8
 8020f5c:	8771f681 	.word	0x8771f681
 8020f60:	895cd7be 	.word	0x895cd7be
 8020f64:	6b901122 	.word	0x6b901122
 8020f68:	49b40821 	.word	0x49b40821
 8020f6c:	f61e2562 	.word	0xf61e2562
 8020f70:	265e5a51 	.word	0x265e5a51
 8020f74:	e9b6c7aa 	.word	0xe9b6c7aa
 8020f78:	02441453 	.word	0x02441453
 8020f7c:	d8a1e681 	.word	0xd8a1e681
 8020f80:	21e1cde6 	.word	0x21e1cde6
 8020f84:	c33707d6 	.word	0xc33707d6
 8020f88:	455a14ed 	.word	0x455a14ed
 8020f8c:	a9e3e905 	.word	0xa9e3e905
 8020f90:	676f02d9 	.word	0x676f02d9
 8020f94:	8d2a4c8a 	.word	0x8d2a4c8a
 8020f98:	6d9d6122 	.word	0x6d9d6122
 8020f9c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8021264 <mg_md5_transform+0x6ec>
 8020fa0:	44dc      	add	ip, fp
 8020fa2:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8020fa6:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020faa:	ea8b 0b05 	eor.w	fp, fp, r5
 8020fae:	9a01      	ldr	r2, [sp, #4]
 8020fb0:	4493      	add	fp, r2
 8020fb2:	449b      	add	fp, r3
 8020fb4:	4b99      	ldr	r3, [pc, #612]	@ (802121c <mg_md5_transform+0x6a4>)
 8020fb6:	445b      	add	r3, fp
 8020fb8:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 8020fbc:	ea8c 0b03 	eor.w	fp, ip, r3
 8020fc0:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020fc4:	9a02      	ldr	r2, [sp, #8]
 8020fc6:	4493      	add	fp, r2
 8020fc8:	445d      	add	r5, fp
 8020fca:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8021268 <mg_md5_transform+0x6f0>
 8020fce:	44ab      	add	fp, r5
 8020fd0:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8020fd4:	ea83 050b 	eor.w	r5, r3, fp
 8020fd8:	ea85 050c 	eor.w	r5, r5, ip
 8020fdc:	444d      	add	r5, r9
 8020fde:	44ae      	add	lr, r5
 8020fe0:	4d8f      	ldr	r5, [pc, #572]	@ (8021220 <mg_md5_transform+0x6a8>)
 8020fe2:	4475      	add	r5, lr
 8020fe4:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8020fe8:	ea8b 0e05 	eor.w	lr, fp, r5
 8020fec:	ea8e 0e03 	eor.w	lr, lr, r3
 8020ff0:	9a07      	ldr	r2, [sp, #28]
 8020ff2:	4496      	add	lr, r2
 8020ff4:	44e6      	add	lr, ip
 8020ff6:	f8df c274 	ldr.w	ip, [pc, #628]	@ 802126c <mg_md5_transform+0x6f4>
 8020ffa:	44f4      	add	ip, lr
 8020ffc:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8021000:	ea85 0e0c 	eor.w	lr, r5, ip
 8021004:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021008:	44b6      	add	lr, r6
 802100a:	4473      	add	r3, lr
 802100c:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8021270 <mg_md5_transform+0x6f8>
 8021010:	449e      	add	lr, r3
 8021012:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8021016:	ea8c 030e 	eor.w	r3, ip, lr
 802101a:	406b      	eors	r3, r5
 802101c:	4453      	add	r3, sl
 802101e:	449b      	add	fp, r3
 8021020:	4b80      	ldr	r3, [pc, #512]	@ (8021224 <mg_md5_transform+0x6ac>)
 8021022:	445b      	add	r3, fp
 8021024:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8021028:	ea8e 0b03 	eor.w	fp, lr, r3
 802102c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8021030:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021032:	4493      	add	fp, r2
 8021034:	445d      	add	r5, fp
 8021036:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8021274 <mg_md5_transform+0x6fc>
 802103a:	44ab      	add	fp, r5
 802103c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8021040:	ea83 050b 	eor.w	r5, r3, fp
 8021044:	ea85 050e 	eor.w	r5, r5, lr
 8021048:	9904      	ldr	r1, [sp, #16]
 802104a:	440d      	add	r5, r1
 802104c:	4465      	add	r5, ip
 802104e:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8021278 <mg_md5_transform+0x700>
 8021052:	44ac      	add	ip, r5
 8021054:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8021058:	ea8b 050c 	eor.w	r5, fp, ip
 802105c:	405d      	eors	r5, r3
 802105e:	9906      	ldr	r1, [sp, #24]
 8021060:	440d      	add	r5, r1
 8021062:	44ae      	add	lr, r5
 8021064:	4d70      	ldr	r5, [pc, #448]	@ (8021228 <mg_md5_transform+0x6b0>)
 8021066:	4475      	add	r5, lr
 8021068:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 802106c:	ea8c 0e05 	eor.w	lr, ip, r5
 8021070:	ea8e 0e0b 	eor.w	lr, lr, fp
 8021074:	44be      	add	lr, r7
 8021076:	4473      	add	r3, lr
 8021078:	f8df e200 	ldr.w	lr, [pc, #512]	@ 802127c <mg_md5_transform+0x704>
 802107c:	449e      	add	lr, r3
 802107e:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8021082:	ea85 030e 	eor.w	r3, r5, lr
 8021086:	ea83 030c 	eor.w	r3, r3, ip
 802108a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802108c:	440b      	add	r3, r1
 802108e:	445b      	add	r3, fp
 8021090:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8021280 <mg_md5_transform+0x708>
 8021094:	449b      	add	fp, r3
 8021096:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 802109a:	ea8e 030b 	eor.w	r3, lr, fp
 802109e:	406b      	eors	r3, r5
 80210a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80210a2:	4423      	add	r3, r4
 80210a4:	449c      	add	ip, r3
 80210a6:	4b61      	ldr	r3, [pc, #388]	@ (802122c <mg_md5_transform+0x6b4>)
 80210a8:	4463      	add	r3, ip
 80210aa:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 80210ae:	ea63 0c0e 	orn	ip, r3, lr
 80210b2:	ea8c 0c0b 	eor.w	ip, ip, fp
 80210b6:	44e2      	add	sl, ip
 80210b8:	44aa      	add	sl, r5
 80210ba:	4d5d      	ldr	r5, [pc, #372]	@ (8021230 <mg_md5_transform+0x6b8>)
 80210bc:	4455      	add	r5, sl
 80210be:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 80210c2:	ea65 0c0b 	orn	ip, r5, fp
 80210c6:	ea8c 0c03 	eor.w	ip, ip, r3
 80210ca:	44e1      	add	r9, ip
 80210cc:	44f1      	add	r9, lr
 80210ce:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8021284 <mg_md5_transform+0x70c>
 80210d2:	44cc      	add	ip, r9
 80210d4:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 80210d8:	ea6c 0e03 	orn	lr, ip, r3
 80210dc:	ea8e 0e05 	eor.w	lr, lr, r5
 80210e0:	44f0      	add	r8, lr
 80210e2:	44d8      	add	r8, fp
 80210e4:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8021288 <mg_md5_transform+0x710>
 80210e8:	44c6      	add	lr, r8
 80210ea:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 80210ee:	ea6e 0805 	orn	r8, lr, r5
 80210f2:	ea88 080c 	eor.w	r8, r8, ip
 80210f6:	9c03      	ldr	r4, [sp, #12]
 80210f8:	44a0      	add	r8, r4
 80210fa:	4498      	add	r8, r3
 80210fc:	4b4d      	ldr	r3, [pc, #308]	@ (8021234 <mg_md5_transform+0x6bc>)
 80210fe:	4443      	add	r3, r8
 8021100:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8021104:	ea63 080c 	orn	r8, r3, ip
 8021108:	ea88 080e 	eor.w	r8, r8, lr
 802110c:	4447      	add	r7, r8
 802110e:	442f      	add	r7, r5
 8021110:	4d49      	ldr	r5, [pc, #292]	@ (8021238 <mg_md5_transform+0x6c0>)
 8021112:	443d      	add	r5, r7
 8021114:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8021118:	ea65 070e 	orn	r7, r5, lr
 802111c:	405f      	eors	r7, r3
 802111e:	4417      	add	r7, r2
 8021120:	44bc      	add	ip, r7
 8021122:	4f46      	ldr	r7, [pc, #280]	@ (802123c <mg_md5_transform+0x6c4>)
 8021124:	4467      	add	r7, ip
 8021126:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 802112a:	ea67 0c03 	orn	ip, r7, r3
 802112e:	ea8c 0c05 	eor.w	ip, ip, r5
 8021132:	9a07      	ldr	r2, [sp, #28]
 8021134:	4462      	add	r2, ip
 8021136:	4472      	add	r2, lr
 8021138:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 802113c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8021140:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8021144:	ea62 0c05 	orn	ip, r2, r5
 8021148:	ea8c 0c07 	eor.w	ip, ip, r7
 802114c:	9c01      	ldr	r4, [sp, #4]
 802114e:	44a4      	add	ip, r4
 8021150:	449c      	add	ip, r3
 8021152:	4b3b      	ldr	r3, [pc, #236]	@ (8021240 <mg_md5_transform+0x6c8>)
 8021154:	4463      	add	r3, ip
 8021156:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 802115a:	ea63 0c07 	orn	ip, r3, r7
 802115e:	ea8c 0c02 	eor.w	ip, ip, r2
 8021162:	9905      	ldr	r1, [sp, #20]
 8021164:	448c      	add	ip, r1
 8021166:	44ac      	add	ip, r5
 8021168:	4d36      	ldr	r5, [pc, #216]	@ (8021244 <mg_md5_transform+0x6cc>)
 802116a:	4465      	add	r5, ip
 802116c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8021170:	ea65 0c02 	orn	ip, r5, r2
 8021174:	ea8c 0c03 	eor.w	ip, ip, r3
 8021178:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802117a:	4461      	add	r1, ip
 802117c:	440f      	add	r7, r1
 802117e:	4932      	ldr	r1, [pc, #200]	@ (8021248 <mg_md5_transform+0x6d0>)
 8021180:	4439      	add	r1, r7
 8021182:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8021186:	ea61 0703 	orn	r7, r1, r3
 802118a:	406f      	eors	r7, r5
 802118c:	9c04      	ldr	r4, [sp, #16]
 802118e:	4427      	add	r7, r4
 8021190:	4417      	add	r7, r2
 8021192:	4a2e      	ldr	r2, [pc, #184]	@ (802124c <mg_md5_transform+0x6d4>)
 8021194:	443a      	add	r2, r7
 8021196:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802119a:	ea62 0705 	orn	r7, r2, r5
 802119e:	404f      	eors	r7, r1
 80211a0:	443e      	add	r6, r7
 80211a2:	4433      	add	r3, r6
 80211a4:	4e2a      	ldr	r6, [pc, #168]	@ (8021250 <mg_md5_transform+0x6d8>)
 80211a6:	441e      	add	r6, r3
 80211a8:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 80211ac:	ea66 0301 	orn	r3, r6, r1
 80211b0:	4053      	eors	r3, r2
 80211b2:	9f02      	ldr	r7, [sp, #8]
 80211b4:	443b      	add	r3, r7
 80211b6:	441d      	add	r5, r3
 80211b8:	4b26      	ldr	r3, [pc, #152]	@ (8021254 <mg_md5_transform+0x6dc>)
 80211ba:	442b      	add	r3, r5
 80211bc:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 80211c0:	ea63 0502 	orn	r5, r3, r2
 80211c4:	4075      	eors	r5, r6
 80211c6:	9f08      	ldr	r7, [sp, #32]
 80211c8:	443d      	add	r5, r7
 80211ca:	440d      	add	r5, r1
 80211cc:	4922      	ldr	r1, [pc, #136]	@ (8021258 <mg_md5_transform+0x6e0>)
 80211ce:	4429      	add	r1, r5
 80211d0:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 80211d4:	ea61 0506 	orn	r5, r1, r6
 80211d8:	405d      	eors	r5, r3
 80211da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80211dc:	4425      	add	r5, r4
 80211de:	442a      	add	r2, r5
 80211e0:	4d1e      	ldr	r5, [pc, #120]	@ (802125c <mg_md5_transform+0x6e4>)
 80211e2:	4415      	add	r5, r2
 80211e4:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 80211e8:	ea65 0203 	orn	r2, r5, r3
 80211ec:	404a      	eors	r2, r1
 80211ee:	9c06      	ldr	r4, [sp, #24]
 80211f0:	4422      	add	r2, r4
 80211f2:	4432      	add	r2, r6
 80211f4:	4e1a      	ldr	r6, [pc, #104]	@ (8021260 <mg_md5_transform+0x6e8>)
 80211f6:	4416      	add	r6, r2
 80211f8:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 80211fc:	6802      	ldr	r2, [r0, #0]
 80211fe:	4413      	add	r3, r2
 8021200:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8021202:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021204:	4434      	add	r4, r6
 8021206:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8021208:	6883      	ldr	r3, [r0, #8]
 802120a:	441d      	add	r5, r3
 802120c:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 802120e:	68c3      	ldr	r3, [r0, #12]
 8021210:	4419      	add	r1, r3
 8021212:	60c1      	str	r1, [r0, #12]
}
 8021214:	b00d      	add	sp, #52	@ 0x34
 8021216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802121a:	bf00      	nop
 802121c:	a4beea44 	.word	0xa4beea44
 8021220:	f6bb4b60 	.word	0xf6bb4b60
 8021224:	eaa127fa 	.word	0xeaa127fa
 8021228:	d9d4d039 	.word	0xd9d4d039
 802122c:	c4ac5665 	.word	0xc4ac5665
 8021230:	f4292244 	.word	0xf4292244
 8021234:	fc93a039 	.word	0xfc93a039
 8021238:	655b59c3 	.word	0x655b59c3
 802123c:	8f0ccc92 	.word	0x8f0ccc92
 8021240:	85845dd1 	.word	0x85845dd1
 8021244:	6fa87e4f 	.word	0x6fa87e4f
 8021248:	fe2ce6e0 	.word	0xfe2ce6e0
 802124c:	a3014314 	.word	0xa3014314
 8021250:	4e0811a1 	.word	0x4e0811a1
 8021254:	f7537e82 	.word	0xf7537e82
 8021258:	bd3af235 	.word	0xbd3af235
 802125c:	2ad7d2bb 	.word	0x2ad7d2bb
 8021260:	eb86d391 	.word	0xeb86d391
 8021264:	fde5380c 	.word	0xfde5380c
 8021268:	4bdecfa9 	.word	0x4bdecfa9
 802126c:	bebfbc70 	.word	0xbebfbc70
 8021270:	289b7ec6 	.word	0x289b7ec6
 8021274:	d4ef3085 	.word	0xd4ef3085
 8021278:	04881d05 	.word	0x04881d05
 802127c:	e6db99e5 	.word	0xe6db99e5
 8021280:	1fa27cf8 	.word	0x1fa27cf8
 8021284:	432aff97 	.word	0x432aff97
 8021288:	ab9423a7 	.word	0xab9423a7

0802128c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 802128c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 802128e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8021290:	3001      	adds	r0, #1
 8021292:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8021294:	2a7f      	cmp	r2, #127	@ 0x7f
 8021296:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 802129a:	d8f9      	bhi.n	8021290 <varint_size+0x4>
  return bytes_needed;
}
 802129c:	4770      	bx	lr

0802129e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802129e:	b500      	push	{lr}
 80212a0:	4686      	mov	lr, r0
  size_t len = 0;
 80212a2:	2300      	movs	r3, #0
 80212a4:	e007      	b.n	80212b6 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 80212a6:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 80212aa:	1c58      	adds	r0, r3, #1
 80212ac:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 80212b0:	2a7f      	cmp	r2, #127	@ 0x7f
 80212b2:	d907      	bls.n	80212c4 <encode_varint+0x26>
    buf[len++] = b;
 80212b4:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 80212b6:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 80212ba:	460a      	mov	r2, r1
 80212bc:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 80212be:	2a7f      	cmp	r2, #127	@ 0x7f
 80212c0:	d9f3      	bls.n	80212aa <encode_varint+0xc>
 80212c2:	e7f0      	b.n	80212a6 <encode_varint+0x8>

  return len;
}
 80212c4:	f85d fb04 	ldr.w	pc, [sp], #4

080212c8 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 80212c8:	2300      	movs	r3, #0
 80212ca:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 80212cc:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80212d0:	2b03      	cmp	r3, #3
 80212d2:	d81d      	bhi.n	8021310 <decode_varint+0x48>
 80212d4:	428b      	cmp	r3, r1
 80212d6:	d219      	bcs.n	802130c <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80212d8:	b530      	push	{r4, r5, lr}
 80212da:	e003      	b.n	80212e4 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80212dc:	1c58      	adds	r0, r3, #1
 80212de:	e012      	b.n	8021306 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80212e0:	428b      	cmp	r3, r1
 80212e2:	d211      	bcs.n	8021308 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 80212e4:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 80212e8:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 80212ec:	6815      	ldr	r5, [r2, #0]
 80212ee:	fb0c 5404 	mla	r4, ip, r4, r5
 80212f2:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 80212f4:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80212f8:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 80212fc:	d0ee      	beq.n	80212dc <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80212fe:	3301      	adds	r3, #1
 8021300:	2b03      	cmp	r3, #3
 8021302:	d9ed      	bls.n	80212e0 <decode_varint+0x18>
  }

  return 0;
 8021304:	2000      	movs	r0, #0
}
 8021306:	bd30      	pop	{r4, r5, pc}
  return 0;
 8021308:	2000      	movs	r0, #0
 802130a:	e7fc      	b.n	8021306 <decode_varint+0x3e>
 802130c:	2000      	movs	r0, #0
 802130e:	4770      	bx	lr
 8021310:	2000      	movs	r0, #0
}
 8021312:	4770      	bx	lr

08021314 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8021314:	2300      	movs	r3, #0
 8021316:	2b1a      	cmp	r3, #26
 8021318:	d80b      	bhi.n	8021332 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 802131a:	4a07      	ldr	r2, [pc, #28]	@ (8021338 <mqtt_prop_type_by_id+0x24>)
 802131c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8021320:	4282      	cmp	r2, r0
 8021322:	d001      	beq.n	8021328 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8021324:	3301      	adds	r3, #1
 8021326:	e7f6      	b.n	8021316 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8021328:	4a03      	ldr	r2, [pc, #12]	@ (8021338 <mqtt_prop_type_by_id+0x24>)
 802132a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802132e:	7858      	ldrb	r0, [r3, #1]
 8021330:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8021332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8021336:	4770      	bx	lr
 8021338:	0803bb10 	.word	0x0803bb10

0802133c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802133c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021340:	4606      	mov	r6, r0
 8021342:	4688      	mov	r8, r1
  size_t i, size = 0;
 8021344:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8021346:	462c      	mov	r4, r5
 8021348:	e005      	b.n	8021356 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 802134a:	697d      	ldr	r5, [r7, #20]
 802134c:	68fb      	ldr	r3, [r7, #12]
 802134e:	441d      	add	r5, r3
 8021350:	444d      	add	r5, r9
 8021352:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8021354:	3401      	adds	r4, #1
 8021356:	4544      	cmp	r4, r8
 8021358:	d231      	bcs.n	80213be <get_properties_length+0x82>
    size++;  // identifier
 802135a:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802135e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8021362:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8021366:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 802136a:	f7ff ffd3 	bl	8021314 <mqtt_prop_type_by_id>
 802136e:	2806      	cmp	r0, #6
 8021370:	d824      	bhi.n	80213bc <get_properties_length+0x80>
 8021372:	a301      	add	r3, pc, #4	@ (adr r3, 8021378 <get_properties_length+0x3c>)
 8021374:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8021378:	080213b9 	.word	0x080213b9
 802137c:	08021395 	.word	0x08021395
 8021380:	0802134b 	.word	0x0802134b
 8021384:	0802139d 	.word	0x0802139d
 8021388:	080213a5 	.word	0x080213a5
 802138c:	080213b1 	.word	0x080213b1
 8021390:	080213b5 	.word	0x080213b5
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8021394:	697d      	ldr	r5, [r7, #20]
 8021396:	444d      	add	r5, r9
 8021398:	3502      	adds	r5, #2
        break;
 802139a:	e7db      	b.n	8021354 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802139c:	697d      	ldr	r5, [r7, #20]
 802139e:	444d      	add	r5, r9
 80213a0:	3502      	adds	r5, #2
        break;
 80213a2:	e7d7      	b.n	8021354 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 80213a4:	6878      	ldr	r0, [r7, #4]
 80213a6:	f7ff ff71 	bl	802128c <varint_size>
 80213aa:	eb00 0509 	add.w	r5, r0, r9
        break;
 80213ae:	e7d1      	b.n	8021354 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 80213b0:	3505      	adds	r5, #5
        break;
 80213b2:	e7cf      	b.n	8021354 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 80213b4:	3503      	adds	r5, #3
        break;
 80213b6:	e7cd      	b.n	8021354 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 80213b8:	3502      	adds	r5, #2
        break;
 80213ba:	e7cb      	b.n	8021354 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80213bc:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 80213be:	4628      	mov	r0, r5
 80213c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080213c4 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80213c4:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 80213c6:	f7ff ffb9 	bl	802133c <get_properties_length>
 80213ca:	4604      	mov	r4, r0
  size += varint_size(size);
 80213cc:	f7ff ff5e 	bl	802128c <varint_size>
  return size;
}
 80213d0:	4420      	add	r0, r4
 80213d2:	bd10      	pop	{r4, pc}

080213d4 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80213d4:	b410      	push	{r4}
 80213d6:	b085      	sub	sp, #20
 80213d8:	466b      	mov	r3, sp
 80213da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 80213de:	2300      	movs	r3, #0
 80213e0:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 80213e2:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 80213e4:	9901      	ldr	r1, [sp, #4]
 80213e6:	4299      	cmp	r1, r3
 80213e8:	d92c      	bls.n	8021444 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80213ea:	9c00      	ldr	r4, [sp, #0]
 80213ec:	5ce1      	ldrb	r1, [r4, r3]
 80213ee:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 80213f2:	b2c0      	uxtb	r0, r0
 80213f4:	2809      	cmp	r0, #9
 80213f6:	d812      	bhi.n	802141e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80213f8:	f10c 0010 	add.w	r0, ip, #16
 80213fc:	4468      	add	r0, sp
 80213fe:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8021402:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021406:	3930      	subs	r1, #48	@ 0x30
 8021408:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 802140c:	29ff      	cmp	r1, #255	@ 0xff
 802140e:	dc28      	bgt.n	8021462 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8021410:	f10c 0010 	add.w	r0, ip, #16
 8021414:	4468      	add	r0, sp
 8021416:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 802141a:	3301      	adds	r3, #1
 802141c:	e7e2      	b.n	80213e4 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 802141e:	292e      	cmp	r1, #46	@ 0x2e
 8021420:	d121      	bne.n	8021466 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021422:	f1bc 0f02 	cmp.w	ip, #2
 8021426:	d820      	bhi.n	802146a <mg_aton4+0x96>
 8021428:	b923      	cbnz	r3, 8021434 <mg_aton4+0x60>
 802142a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 802142c:	b005      	add	sp, #20
 802142e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021432:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021434:	441c      	add	r4, r3
 8021436:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802143a:	292e      	cmp	r1, #46	@ 0x2e
 802143c:	d017      	beq.n	802146e <mg_aton4+0x9a>
      num_dots++;
 802143e:	f10c 0c01 	add.w	ip, ip, #1
 8021442:	e7ea      	b.n	802141a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8021444:	f1bc 0f03 	cmp.w	ip, #3
 8021448:	d113      	bne.n	8021472 <mg_aton4+0x9e>
 802144a:	9900      	ldr	r1, [sp, #0]
 802144c:	4419      	add	r1, r3
 802144e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8021452:	2b2e      	cmp	r3, #46	@ 0x2e
 8021454:	d00f      	beq.n	8021476 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 8021456:	9b03      	ldr	r3, [sp, #12]
 8021458:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 802145a:	2300      	movs	r3, #0
 802145c:	74d3      	strb	r3, [r2, #19]
  return true;
 802145e:	2001      	movs	r0, #1
 8021460:	e7e4      	b.n	802142c <mg_aton4+0x58>
      if (octet > 255) return false;
 8021462:	2000      	movs	r0, #0
 8021464:	e7e2      	b.n	802142c <mg_aton4+0x58>
      return false;
 8021466:	2000      	movs	r0, #0
 8021468:	e7e0      	b.n	802142c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802146a:	2000      	movs	r0, #0
 802146c:	e7de      	b.n	802142c <mg_aton4+0x58>
 802146e:	2000      	movs	r0, #0
 8021470:	e7dc      	b.n	802142c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8021472:	2000      	movs	r0, #0
 8021474:	e7da      	b.n	802142c <mg_aton4+0x58>
 8021476:	2000      	movs	r0, #0
 8021478:	e7d8      	b.n	802142c <mg_aton4+0x58>

0802147a <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802147a:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802147c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802147e:	b103      	cbz	r3, 8021482 <mg_tcpip_call+0x8>
 8021480:	4798      	blx	r3
}
 8021482:	bd08      	pop	{r3, pc}

08021484 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8021484:	2300      	movs	r3, #0
 8021486:	e005      	b.n	8021494 <csumup+0x10>
 8021488:	f811 c003 	ldrb.w	ip, [r1, r3]
 802148c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8021490:	4460      	add	r0, ip
 8021492:	3301      	adds	r3, #1
 8021494:	4293      	cmp	r3, r2
 8021496:	d205      	bcs.n	80214a4 <csumup+0x20>
 8021498:	f013 0f01 	tst.w	r3, #1
 802149c:	d0f4      	beq.n	8021488 <csumup+0x4>
 802149e:	f811 c003 	ldrb.w	ip, [r1, r3]
 80214a2:	e7f5      	b.n	8021490 <csumup+0xc>
  return sum;
}
 80214a4:	4770      	bx	lr

080214a6 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 80214a6:	b538      	push	{r3, r4, r5, lr}
 80214a8:	4604      	mov	r4, r0
 80214aa:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 80214ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80214ae:	685b      	ldr	r3, [r3, #4]
 80214b0:	4602      	mov	r2, r0
 80214b2:	6940      	ldr	r0, [r0, #20]
 80214b4:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 80214b6:	4285      	cmp	r5, r0
 80214b8:	d000      	beq.n	80214bc <ether_output+0x16>
  return n;
}
 80214ba:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 80214bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80214be:	3301      	adds	r3, #1
 80214c0:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 80214c2:	e7fa      	b.n	80214ba <ether_output+0x14>

080214c4 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80214c4:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80214c8:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80214cc:	d106      	bne.n	80214dc <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80214ce:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80214d0:	b132      	cbz	r2, 80214e0 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80214d2:	f013 0f90 	tst.w	r3, #144	@ 0x90
 80214d6:	d005      	beq.n	80214e4 <can_write+0x20>
 80214d8:	2000      	movs	r0, #0
 80214da:	4770      	bx	lr
 80214dc:	2000      	movs	r0, #0
 80214de:	4770      	bx	lr
 80214e0:	2000      	movs	r0, #0
 80214e2:	4770      	bx	lr
 80214e4:	2001      	movs	r0, #1
}
 80214e6:	4770      	bx	lr

080214e8 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 80214e8:	b410      	push	{r4}
 80214ea:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80214ec:	460c      	mov	r4, r1
 80214ee:	b109      	cbz	r1, 80214f4 <mg_esc+0xc>
 80214f0:	4b0b      	ldr	r3, [pc, #44]	@ (8021520 <mg_esc+0x38>)
 80214f2:	e007      	b.n	8021504 <mg_esc+0x1c>
 80214f4:	4b0b      	ldr	r3, [pc, #44]	@ (8021524 <mg_esc+0x3c>)
 80214f6:	e005      	b.n	8021504 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80214f8:	4a0a      	ldr	r2, [pc, #40]	@ (8021524 <mg_esc+0x3c>)
 80214fa:	1a9b      	subs	r3, r3, r2
 80214fc:	4a08      	ldr	r2, [pc, #32]	@ (8021520 <mg_esc+0x38>)
 80214fe:	5cd0      	ldrb	r0, [r2, r3]
 8021500:	e00a      	b.n	8021518 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8021502:	3301      	adds	r3, #1
 8021504:	7818      	ldrb	r0, [r3, #0]
 8021506:	b138      	cbz	r0, 8021518 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021508:	4290      	cmp	r0, r2
 802150a:	d1fa      	bne.n	8021502 <mg_esc+0x1a>
 802150c:	2c00      	cmp	r4, #0
 802150e:	d0f3      	beq.n	80214f8 <mg_esc+0x10>
 8021510:	4a03      	ldr	r2, [pc, #12]	@ (8021520 <mg_esc+0x38>)
 8021512:	1a9b      	subs	r3, r3, r2
 8021514:	4a03      	ldr	r2, [pc, #12]	@ (8021524 <mg_esc+0x3c>)
 8021516:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021518:	f85d 4b04 	ldr.w	r4, [sp], #4
 802151c:	4770      	bx	lr
 802151e:	bf00      	nop
 8021520:	0803a748 	.word	0x0803a748
 8021524:	0803a750 	.word	0x0803a750

08021528 <mg_escape>:

static char mg_escape(int c) {
 8021528:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 802152a:	2101      	movs	r1, #1
 802152c:	f7ff ffdc 	bl	80214e8 <mg_esc>
}
 8021530:	bd08      	pop	{r3, pc}

08021532 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8021532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021536:	4607      	mov	r7, r0
 8021538:	460e      	mov	r6, r1
 802153a:	4692      	mov	sl, r2
 802153c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 802153e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8021542:	465c      	mov	r4, fp
 8021544:	e003      	b.n	802154e <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 8021546:	4631      	mov	r1, r6
 8021548:	4628      	mov	r0, r5
 802154a:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 802154c:	3401      	adds	r4, #1
 802154e:	454c      	cmp	r4, r9
 8021550:	d211      	bcs.n	8021576 <qcpy+0x44>
 8021552:	f81a 5004 	ldrb.w	r5, [sl, r4]
 8021556:	b175      	cbz	r5, 8021576 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8021558:	4628      	mov	r0, r5
 802155a:	f7ff ffe5 	bl	8021528 <mg_escape>
    if (c) {
 802155e:	4680      	mov	r8, r0
 8021560:	2800      	cmp	r0, #0
 8021562:	d0f0      	beq.n	8021546 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8021564:	4631      	mov	r1, r6
 8021566:	205c      	movs	r0, #92	@ 0x5c
 8021568:	47b8      	blx	r7
 802156a:	4631      	mov	r1, r6
 802156c:	4640      	mov	r0, r8
 802156e:	47b8      	blx	r7
 8021570:	f10b 0b01 	add.w	fp, fp, #1
 8021574:	e7ea      	b.n	802154c <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8021576:	eb04 000b 	add.w	r0, r4, fp
 802157a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021580 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8021580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021584:	4607      	mov	r7, r0
 8021586:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8021588:	6811      	ldr	r1, [r2, #0]
 802158a:	1d0b      	adds	r3, r1, #4
 802158c:	6013      	str	r3, [r2, #0]
 802158e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021592:	f101 0308 	add.w	r3, r1, #8
 8021596:	6013      	str	r3, [r2, #0]
 8021598:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 802159c:	2400      	movs	r4, #0
 802159e:	e00e      	b.n	80215be <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 80215a0:	f818 3004 	ldrb.w	r3, [r8, r4]
 80215a4:	091b      	lsrs	r3, r3, #4
 80215a6:	4d09      	ldr	r5, [pc, #36]	@ (80215cc <mg_print_hex+0x4c>)
 80215a8:	4631      	mov	r1, r6
 80215aa:	5ce8      	ldrb	r0, [r5, r3]
 80215ac:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 80215ae:	f818 3004 	ldrb.w	r3, [r8, r4]
 80215b2:	f003 030f 	and.w	r3, r3, #15
 80215b6:	4631      	mov	r1, r6
 80215b8:	5ce8      	ldrb	r0, [r5, r3]
 80215ba:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 80215bc:	3401      	adds	r4, #1
 80215be:	454c      	cmp	r4, r9
 80215c0:	d3ee      	bcc.n	80215a0 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 80215c2:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80215c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215ca:	bf00      	nop
 80215cc:	0803a29c 	.word	0x0803a29c

080215d0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80215d0:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80215d2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80215d6:	ea4f 2332 	mov.w	r3, r2, ror #8
 80215da:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80215de:	ea4f 6232 	mov.w	r2, r2, ror #24
 80215e2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80215e6:	ea43 0002 	orr.w	r0, r3, r2
 80215ea:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 80215ee:	4770      	bx	lr

080215f0 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80215f0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80215f4:	b2db      	uxtb	r3, r3
 80215f6:	2b19      	cmp	r3, #25
 80215f8:	d800      	bhi.n	80215fc <mg_tolc+0xc>
 80215fa:	3020      	adds	r0, #32
}
 80215fc:	4770      	bx	lr

080215fe <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 80215fe:	28ff      	cmp	r0, #255	@ 0xff
 8021600:	bf8c      	ite	hi
 8021602:	2000      	movhi	r0, #0
 8021604:	2001      	movls	r0, #1
 8021606:	4770      	bx	lr

08021608 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8021608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802160c:	b082      	sub	sp, #8
 802160e:	4605      	mov	r5, r0
 8021610:	9e08      	ldr	r6, [sp, #32]
 8021612:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021614:	0a10      	lsrs	r0, r2, #8
 8021616:	f88d 0004 	strb.w	r0, [sp, #4]
 802161a:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 802161e:	00c9      	lsls	r1, r1, #3
 8021620:	b249      	sxtb	r1, r1
 8021622:	4698      	mov	r8, r3
 8021624:	b143      	cbz	r3, 8021638 <w5500_txn+0x30>
 8021626:	2304      	movs	r3, #4
 8021628:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 802162a:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 802162e:	686b      	ldr	r3, [r5, #4]
 8021630:	6828      	ldr	r0, [r5, #0]
 8021632:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021634:	2400      	movs	r4, #0
 8021636:	e00a      	b.n	802164e <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021638:	2300      	movs	r3, #0
 802163a:	e7f5      	b.n	8021628 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802163c:	68eb      	ldr	r3, [r5, #12]
 802163e:	f104 0208 	add.w	r2, r4, #8
 8021642:	446a      	add	r2, sp
 8021644:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8021648:	6828      	ldr	r0, [r5, #0]
 802164a:	4798      	blx	r3
 802164c:	3401      	adds	r4, #1
 802164e:	2c02      	cmp	r4, #2
 8021650:	d9f4      	bls.n	802163c <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8021652:	2400      	movs	r4, #0
 8021654:	e000      	b.n	8021658 <w5500_txn+0x50>
 8021656:	3401      	adds	r4, #1
 8021658:	42bc      	cmp	r4, r7
 802165a:	d208      	bcs.n	802166e <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 802165c:	68eb      	ldr	r3, [r5, #12]
 802165e:	5d31      	ldrb	r1, [r6, r4]
 8021660:	6828      	ldr	r0, [r5, #0]
 8021662:	4798      	blx	r3
    if (!wr) p[i] = r;
 8021664:	f1b8 0f00 	cmp.w	r8, #0
 8021668:	d1f5      	bne.n	8021656 <w5500_txn+0x4e>
 802166a:	5530      	strb	r0, [r6, r4]
 802166c:	e7f3      	b.n	8021656 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 802166e:	68ab      	ldr	r3, [r5, #8]
 8021670:	6828      	ldr	r0, [r5, #0]
 8021672:	4798      	blx	r3
}
 8021674:	b002      	add	sp, #8
 8021676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802167a <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 802167a:	b510      	push	{r4, lr}
 802167c:	b082      	sub	sp, #8
 802167e:	9c04      	ldr	r4, [sp, #16]
 8021680:	9401      	str	r4, [sp, #4]
 8021682:	9300      	str	r3, [sp, #0]
 8021684:	2301      	movs	r3, #1
 8021686:	f7ff ffbf 	bl	8021608 <w5500_txn>
 802168a:	b002      	add	sp, #8
 802168c:	bd10      	pop	{r4, pc}

0802168e <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 802168e:	b500      	push	{lr}
 8021690:	b085      	sub	sp, #20
 8021692:	f88d 300f 	strb.w	r3, [sp, #15]
 8021696:	2301      	movs	r3, #1
 8021698:	9300      	str	r3, [sp, #0]
 802169a:	f10d 030f 	add.w	r3, sp, #15
 802169e:	f7ff ffec 	bl	802167a <w5500_wn>
 80216a2:	b005      	add	sp, #20
 80216a4:	f85d fb04 	ldr.w	pc, [sp], #4

080216a8 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 80216a8:	b500      	push	{lr}
 80216aa:	b085      	sub	sp, #20
 80216ac:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80216b0:	f88d c00c 	strb.w	ip, [sp, #12]
 80216b4:	f88d 300d 	strb.w	r3, [sp, #13]
 80216b8:	2302      	movs	r3, #2
 80216ba:	9300      	str	r3, [sp, #0]
 80216bc:	ab03      	add	r3, sp, #12
 80216be:	f7ff ffdc 	bl	802167a <w5500_wn>
 80216c2:	b005      	add	sp, #20
 80216c4:	f85d fb04 	ldr.w	pc, [sp], #4

080216c8 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 80216c8:	b510      	push	{r4, lr}
 80216ca:	b082      	sub	sp, #8
 80216cc:	9c04      	ldr	r4, [sp, #16]
 80216ce:	9401      	str	r4, [sp, #4]
 80216d0:	9300      	str	r3, [sp, #0]
 80216d2:	2300      	movs	r3, #0
 80216d4:	f7ff ff98 	bl	8021608 <w5500_txn>
 80216d8:	b002      	add	sp, #8
 80216da:	bd10      	pop	{r4, pc}

080216dc <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 80216dc:	b500      	push	{lr}
 80216de:	b085      	sub	sp, #20
 80216e0:	2300      	movs	r3, #0
 80216e2:	f88d 300f 	strb.w	r3, [sp, #15]
 80216e6:	2301      	movs	r3, #1
 80216e8:	9300      	str	r3, [sp, #0]
 80216ea:	f10d 030f 	add.w	r3, sp, #15
 80216ee:	f7ff ffeb 	bl	80216c8 <w5500_rn>
 80216f2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80216f6:	b005      	add	sp, #20
 80216f8:	f85d fb04 	ldr.w	pc, [sp], #4

080216fc <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 80216fc:	b500      	push	{lr}
 80216fe:	b085      	sub	sp, #20
 8021700:	2300      	movs	r3, #0
 8021702:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021706:	2302      	movs	r3, #2
 8021708:	9300      	str	r3, [sp, #0]
 802170a:	ab03      	add	r3, sp, #12
 802170c:	f7ff ffdc 	bl	80216c8 <w5500_rn>
 8021710:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021714:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8021718:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 802171c:	b005      	add	sp, #20
 802171e:	f85d fb04 	ldr.w	pc, [sp], #4

08021722 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021726:	b083      	sub	sp, #12
 8021728:	4606      	mov	r6, r0
 802172a:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 802172c:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802172e:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8021730:	4604      	mov	r4, r0
 8021732:	2226      	movs	r2, #38	@ 0x26
 8021734:	2101      	movs	r1, #1
 8021736:	4628      	mov	r0, r5
 8021738:	f7ff ffe0 	bl	80216fc <w5500_r2>
 802173c:	4284      	cmp	r4, r0
 802173e:	d3f7      	bcc.n	8021730 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8021740:	b91c      	cbnz	r4, 802174a <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8021742:	4620      	mov	r0, r4
 8021744:	b003      	add	sp, #12
 8021746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 802174a:	2228      	movs	r2, #40	@ 0x28
 802174c:	2101      	movs	r1, #1
 802174e:	4628      	mov	r0, r5
 8021750:	f7ff ffd4 	bl	80216fc <w5500_r2>
 8021754:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8021756:	4602      	mov	r2, r0
 8021758:	2103      	movs	r1, #3
 802175a:	4628      	mov	r0, r5
 802175c:	f7ff ffce 	bl	80216fc <w5500_r2>
 8021760:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8021762:	fa1f f188 	uxth.w	r1, r8
 8021766:	3102      	adds	r1, #2
 8021768:	4288      	cmp	r0, r1
 802176a:	dc0e      	bgt.n	802178a <w5500_rx+0x68>
 802176c:	2801      	cmp	r0, #1
 802176e:	d801      	bhi.n	8021774 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021770:	2400      	movs	r4, #0
 8021772:	e00b      	b.n	802178c <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8021774:	1e84      	subs	r4, r0, #2
 8021776:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8021778:	1cba      	adds	r2, r7, #2
 802177a:	9400      	str	r4, [sp, #0]
 802177c:	4633      	mov	r3, r6
 802177e:	b292      	uxth	r2, r2
 8021780:	2103      	movs	r1, #3
 8021782:	4628      	mov	r0, r5
 8021784:	f7ff ffa0 	bl	80216c8 <w5500_rn>
 8021788:	e000      	b.n	802178c <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802178a:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 802178c:	eb07 0309 	add.w	r3, r7, r9
 8021790:	b29b      	uxth	r3, r3
 8021792:	2228      	movs	r2, #40	@ 0x28
 8021794:	2101      	movs	r1, #1
 8021796:	4628      	mov	r0, r5
 8021798:	f7ff ff86 	bl	80216a8 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 802179c:	2340      	movs	r3, #64	@ 0x40
 802179e:	2201      	movs	r2, #1
 80217a0:	4611      	mov	r1, r2
 80217a2:	4628      	mov	r0, r5
 80217a4:	f7ff ff73 	bl	802168e <w5500_w1>
 80217a8:	e7cb      	b.n	8021742 <w5500_rx+0x20>

080217aa <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 80217aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217ae:	b082      	sub	sp, #8
 80217b0:	4680      	mov	r8, r0
 80217b2:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80217b4:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 80217b6:	b28f      	uxth	r7, r1
 80217b8:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 80217ba:	e004      	b.n	80217c6 <w5500_tx+0x1c>
 80217bc:	2220      	movs	r2, #32
 80217be:	2101      	movs	r1, #1
 80217c0:	4630      	mov	r0, r6
 80217c2:	f7ff ff9b 	bl	80216fc <w5500_r2>
 80217c6:	42b8      	cmp	r0, r7
 80217c8:	d3f8      	bcc.n	80217bc <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 80217ca:	2224      	movs	r2, #36	@ 0x24
 80217cc:	2101      	movs	r1, #1
 80217ce:	4630      	mov	r0, r6
 80217d0:	f7ff ff94 	bl	80216fc <w5500_r2>
 80217d4:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 80217d6:	b2ad      	uxth	r5, r5
 80217d8:	9500      	str	r5, [sp, #0]
 80217da:	4643      	mov	r3, r8
 80217dc:	4602      	mov	r2, r0
 80217de:	2102      	movs	r1, #2
 80217e0:	4630      	mov	r0, r6
 80217e2:	f7ff ff4a 	bl	802167a <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 80217e6:	193b      	adds	r3, r7, r4
 80217e8:	b29b      	uxth	r3, r3
 80217ea:	2224      	movs	r2, #36	@ 0x24
 80217ec:	2101      	movs	r1, #1
 80217ee:	4630      	mov	r0, r6
 80217f0:	f7ff ff5a 	bl	80216a8 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 80217f4:	2320      	movs	r3, #32
 80217f6:	2201      	movs	r2, #1
 80217f8:	4611      	mov	r1, r2
 80217fa:	4630      	mov	r0, r6
 80217fc:	f7ff ff47 	bl	802168e <w5500_w1>
  for (i = 0; i < 40; i++) {
 8021800:	2400      	movs	r4, #0
 8021802:	e004      	b.n	802180e <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8021804:	f015 0f18 	tst.w	r5, #24
 8021808:	d116      	bne.n	8021838 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 802180a:	3401      	adds	r4, #1
 802180c:	b2a4      	uxth	r4, r4
 802180e:	2c27      	cmp	r4, #39	@ 0x27
 8021810:	d812      	bhi.n	8021838 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8021812:	2202      	movs	r2, #2
 8021814:	2101      	movs	r1, #1
 8021816:	4630      	mov	r0, r6
 8021818:	f7ff ff60 	bl	80216dc <w5500_r1>
    if (ir == 0) continue;
 802181c:	4605      	mov	r5, r0
 802181e:	2800      	cmp	r0, #0
 8021820:	d0f3      	beq.n	802180a <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8021822:	4603      	mov	r3, r0
 8021824:	2202      	movs	r2, #2
 8021826:	2101      	movs	r1, #1
 8021828:	4630      	mov	r0, r6
 802182a:	f7ff ff30 	bl	802168e <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 802182e:	f015 0f08 	tst.w	r5, #8
 8021832:	d0e7      	beq.n	8021804 <w5500_tx+0x5a>
 8021834:	2700      	movs	r7, #0
 8021836:	e7e5      	b.n	8021804 <w5500_tx+0x5a>
  }
  return len;
}
 8021838:	4638      	mov	r0, r7
 802183a:	b002      	add	sp, #8
 802183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021840 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8021840:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021842:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8021844:	68a3      	ldr	r3, [r4, #8]
 8021846:	6820      	ldr	r0, [r4, #0]
 8021848:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 802184a:	2380      	movs	r3, #128	@ 0x80
 802184c:	2200      	movs	r2, #0
 802184e:	4611      	mov	r1, r2
 8021850:	4620      	mov	r0, r4
 8021852:	f7ff ff1c 	bl	802168e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8021856:	2300      	movs	r3, #0
 8021858:	222e      	movs	r2, #46	@ 0x2e
 802185a:	4619      	mov	r1, r3
 802185c:	4620      	mov	r0, r4
 802185e:	f7ff ff16 	bl	802168e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8021862:	23f8      	movs	r3, #248	@ 0xf8
 8021864:	222e      	movs	r2, #46	@ 0x2e
 8021866:	2100      	movs	r1, #0
 8021868:	4620      	mov	r0, r4
 802186a:	f7ff ff10 	bl	802168e <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 802186e:	2310      	movs	r3, #16
 8021870:	221e      	movs	r2, #30
 8021872:	2101      	movs	r1, #1
 8021874:	4620      	mov	r0, r4
 8021876:	f7ff ff0a 	bl	802168e <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 802187a:	2310      	movs	r3, #16
 802187c:	221f      	movs	r2, #31
 802187e:	2101      	movs	r1, #1
 8021880:	4620      	mov	r0, r4
 8021882:	f7ff ff04 	bl	802168e <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8021886:	2304      	movs	r3, #4
 8021888:	2200      	movs	r2, #0
 802188a:	2101      	movs	r1, #1
 802188c:	4620      	mov	r0, r4
 802188e:	f7ff fefe 	bl	802168e <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8021892:	2301      	movs	r3, #1
 8021894:	461a      	mov	r2, r3
 8021896:	4619      	mov	r1, r3
 8021898:	4620      	mov	r0, r4
 802189a:	f7ff fef8 	bl	802168e <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 802189e:	2203      	movs	r2, #3
 80218a0:	2101      	movs	r1, #1
 80218a2:	4620      	mov	r0, r4
 80218a4:	f7ff ff1a 	bl	80216dc <w5500_r1>
}
 80218a8:	2842      	cmp	r0, #66	@ 0x42
 80218aa:	bf14      	ite	ne
 80218ac:	2000      	movne	r0, #0
 80218ae:	2001      	moveq	r0, #1
 80218b0:	bd10      	pop	{r4, pc}

080218b2 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 80218b2:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 80218b4:	222e      	movs	r2, #46	@ 0x2e
 80218b6:	2100      	movs	r1, #0
 80218b8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80218ba:	f7ff ff0f 	bl	80216dc <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 80218be:	f000 0001 	and.w	r0, r0, #1
 80218c2:	bd08      	pop	{r3, pc}

080218c4 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 80218c4:	b508      	push	{r3, lr}
 80218c6:	4602      	mov	r2, r0
 80218c8:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 80218ca:	e000      	b.n	80218ce <mg_dns_free+0xa>
 80218cc:	461a      	mov	r2, r3
 80218ce:	6813      	ldr	r3, [r2, #0]
 80218d0:	4283      	cmp	r3, r0
 80218d2:	d1fb      	bne.n	80218cc <mg_dns_free+0x8>
 80218d4:	6803      	ldr	r3, [r0, #0]
 80218d6:	6013      	str	r3, [r2, #0]
  free(d);
 80218d8:	f7f9 fa00 	bl	801acdc <vPortFree>
}
 80218dc:	bd08      	pop	{r3, pc}

080218de <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 80218de:	b082      	sub	sp, #8
 80218e0:	ab02      	add	r3, sp, #8
 80218e2:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 80218e6:	b111      	cbz	r1, 80218ee <mg_atone+0x10>
 80218e8:	2000      	movs	r0, #0
}
 80218ea:	b002      	add	sp, #8
 80218ec:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 80218ee:	6011      	str	r1, [r2, #0]
 80218f0:	6051      	str	r1, [r2, #4]
 80218f2:	6091      	str	r1, [r2, #8]
 80218f4:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 80218f6:	74d1      	strb	r1, [r2, #19]
  return true;
 80218f8:	2001      	movs	r0, #1
 80218fa:	e7f6      	b.n	80218ea <mg_atone+0xc>

080218fc <urlparse>:
static struct url urlparse(const char *url) {
 80218fc:	b510      	push	{r4, lr}
 80218fe:	b088      	sub	sp, #32
 8021900:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021902:	2200      	movs	r2, #0
 8021904:	9201      	str	r2, [sp, #4]
 8021906:	9202      	str	r2, [sp, #8]
 8021908:	9203      	str	r2, [sp, #12]
 802190a:	9204      	str	r2, [sp, #16]
 802190c:	9205      	str	r2, [sp, #20]
 802190e:	9206      	str	r2, [sp, #24]
 8021910:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021912:	e00f      	b.n	8021934 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021914:	b19a      	cbz	r2, 802193e <urlparse+0x42>
 8021916:	9804      	ldr	r0, [sp, #16]
 8021918:	b988      	cbnz	r0, 802193e <urlparse+0x42>
 802191a:	1888      	adds	r0, r1, r2
 802191c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021920:	282f      	cmp	r0, #47	@ 0x2f
 8021922:	d10c      	bne.n	802193e <urlparse+0x42>
      u.host = i + 1;
 8021924:	1c53      	adds	r3, r2, #1
 8021926:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021928:	2300      	movs	r3, #0
 802192a:	9305      	str	r3, [sp, #20]
 802192c:	e001      	b.n	8021932 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 802192e:	2300      	movs	r3, #0
 8021930:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8021932:	3201      	adds	r2, #1
 8021934:	5c8b      	ldrb	r3, [r1, r2]
 8021936:	2b00      	cmp	r3, #0
 8021938:	d02c      	beq.n	8021994 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 802193a:	2b2f      	cmp	r3, #47	@ 0x2f
 802193c:	d0ea      	beq.n	8021914 <urlparse+0x18>
    } else if (url[i] == ']') {
 802193e:	2b5d      	cmp	r3, #93	@ 0x5d
 8021940:	d0f5      	beq.n	802192e <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021942:	2b3a      	cmp	r3, #58	@ 0x3a
 8021944:	d00b      	beq.n	802195e <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021946:	2b40      	cmp	r3, #64	@ 0x40
 8021948:	d012      	beq.n	8021970 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 802194a:	2b2f      	cmp	r3, #47	@ 0x2f
 802194c:	d1f1      	bne.n	8021932 <urlparse+0x36>
 802194e:	9b04      	ldr	r3, [sp, #16]
 8021950:	2b00      	cmp	r3, #0
 8021952:	d0ee      	beq.n	8021932 <urlparse+0x36>
 8021954:	9b06      	ldr	r3, [sp, #24]
 8021956:	2b00      	cmp	r3, #0
 8021958:	d1eb      	bne.n	8021932 <urlparse+0x36>
      u.uri = i;
 802195a:	9206      	str	r2, [sp, #24]
 802195c:	e7e9      	b.n	8021932 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 802195e:	9805      	ldr	r0, [sp, #20]
 8021960:	2800      	cmp	r0, #0
 8021962:	d1f0      	bne.n	8021946 <urlparse+0x4a>
 8021964:	9806      	ldr	r0, [sp, #24]
 8021966:	2800      	cmp	r0, #0
 8021968:	d1ed      	bne.n	8021946 <urlparse+0x4a>
      u.port = i + 1;
 802196a:	1c53      	adds	r3, r2, #1
 802196c:	9305      	str	r3, [sp, #20]
 802196e:	e7e0      	b.n	8021932 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021970:	9802      	ldr	r0, [sp, #8]
 8021972:	2800      	cmp	r0, #0
 8021974:	d1e9      	bne.n	802194a <urlparse+0x4e>
 8021976:	9803      	ldr	r0, [sp, #12]
 8021978:	2800      	cmp	r0, #0
 802197a:	d1e6      	bne.n	802194a <urlparse+0x4e>
 802197c:	9806      	ldr	r0, [sp, #24]
 802197e:	2800      	cmp	r0, #0
 8021980:	d1e3      	bne.n	802194a <urlparse+0x4e>
      u.user = u.host;
 8021982:	9b04      	ldr	r3, [sp, #16]
 8021984:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8021986:	9b05      	ldr	r3, [sp, #20]
 8021988:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 802198a:	1c53      	adds	r3, r2, #1
 802198c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 802198e:	2300      	movs	r3, #0
 8021990:	9305      	str	r3, [sp, #20]
 8021992:	e7ce      	b.n	8021932 <urlparse+0x36>
  u.end = i;
 8021994:	9207      	str	r2, [sp, #28]
  return u;
 8021996:	46a4      	mov	ip, r4
 8021998:	f10d 0e04 	add.w	lr, sp, #4
 802199c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80219a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80219a4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80219a8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 80219ac:	4620      	mov	r0, r4
 80219ae:	b008      	add	sp, #32
 80219b0:	bd10      	pop	{r4, pc}

080219b2 <mg_dns_parse_name_depth>:
                                      int depth) {
 80219b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219b6:	b085      	sub	sp, #20
 80219b8:	4681      	mov	r9, r0
 80219ba:	4688      	mov	r8, r1
 80219bc:	4693      	mov	fp, r2
 80219be:	469a      	mov	sl, r3
 80219c0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80219c2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 80219c4:	b11f      	cbz	r7, 80219ce <mg_dns_parse_name_depth+0x1c>
 80219c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80219c8:	b90b      	cbnz	r3, 80219ce <mg_dns_parse_name_depth+0x1c>
 80219ca:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 80219ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80219d0:	2b05      	cmp	r3, #5
 80219d2:	dc4f      	bgt.n	8021a74 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 80219d4:	2600      	movs	r6, #0
 80219d6:	e02f      	b.n	8021a38 <mg_dns_parse_name_depth+0x86>
      i++;
 80219d8:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80219da:	2f00      	cmp	r7, #0
 80219dc:	d04b      	beq.n	8021a76 <mg_dns_parse_name_depth+0xc4>
 80219de:	3f01      	subs	r7, #1
 80219e0:	2300      	movs	r3, #0
 80219e2:	f80a 3007 	strb.w	r3, [sl, r7]
 80219e6:	e046      	b.n	8021a76 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80219e8:	0222      	lsls	r2, r4, #8
 80219ea:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 80219ee:	f819 3001 	ldrb.w	r3, [r9, r1]
 80219f2:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80219f4:	1c53      	adds	r3, r2, #1
 80219f6:	4543      	cmp	r3, r8
 80219f8:	d203      	bcs.n	8021a02 <mg_dns_parse_name_depth+0x50>
 80219fa:	f819 3002 	ldrb.w	r3, [r9, r2]
 80219fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8021a00:	d901      	bls.n	8021a06 <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021a02:	3602      	adds	r6, #2
      break;
 8021a04:	e7e9      	b.n	80219da <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8021a06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021a08:	3301      	adds	r3, #1
 8021a0a:	9302      	str	r3, [sp, #8]
 8021a0c:	9501      	str	r5, [sp, #4]
 8021a0e:	9700      	str	r7, [sp, #0]
 8021a10:	4653      	mov	r3, sl
 8021a12:	4641      	mov	r1, r8
 8021a14:	4648      	mov	r0, r9
 8021a16:	f7ff ffcc 	bl	80219b2 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021a1a:	2800      	cmp	r0, #0
 8021a1c:	d1f1      	bne.n	8021a02 <mg_dns_parse_name_depth+0x50>
        return 0;
 8021a1e:	4606      	mov	r6, r0
 8021a20:	e029      	b.n	8021a76 <mg_dns_parse_name_depth+0xc4>
 8021a22:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021a24:	1905      	adds	r5, r0, r4
 8021a26:	42bd      	cmp	r5, r7
 8021a28:	d31e      	bcc.n	8021a68 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8021a2a:	4426      	add	r6, r4
 8021a2c:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8021a2e:	42bd      	cmp	r5, r7
 8021a30:	d202      	bcs.n	8021a38 <mg_dns_parse_name_depth+0x86>
 8021a32:	2300      	movs	r3, #0
 8021a34:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8021a38:	eb06 030b 	add.w	r3, r6, fp
 8021a3c:	1c59      	adds	r1, r3, #1
 8021a3e:	4541      	cmp	r1, r8
 8021a40:	d2cb      	bcs.n	80219da <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8021a42:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 8021a46:	2c00      	cmp	r4, #0
 8021a48:	d0c6      	beq.n	80219d8 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 8021a4a:	2c3f      	cmp	r4, #63	@ 0x3f
 8021a4c:	d8cc      	bhi.n	80219e8 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 8021a4e:	4423      	add	r3, r4
 8021a50:	3301      	adds	r3, #1
 8021a52:	4543      	cmp	r3, r8
 8021a54:	d213      	bcs.n	8021a7e <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 8021a56:	2d00      	cmp	r5, #0
 8021a58:	d0e3      	beq.n	8021a22 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 8021a5a:	42bd      	cmp	r5, r7
 8021a5c:	d202      	bcs.n	8021a64 <mg_dns_parse_name_depth+0xb2>
 8021a5e:	232e      	movs	r3, #46	@ 0x2e
 8021a60:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8021a64:	1c68      	adds	r0, r5, #1
 8021a66:	e7dd      	b.n	8021a24 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021a68:	4622      	mov	r2, r4
 8021a6a:	4449      	add	r1, r9
 8021a6c:	4450      	add	r0, sl
 8021a6e:	f00c fb3b 	bl	802e0e8 <memcpy>
 8021a72:	e7da      	b.n	8021a2a <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8021a74:	2600      	movs	r6, #0
}
 8021a76:	4630      	mov	r0, r6
 8021a78:	b005      	add	sp, #20
 8021a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 8021a7e:	2600      	movs	r6, #0
 8021a80:	e7f9      	b.n	8021a76 <mg_dns_parse_name_depth+0xc4>

08021a82 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8021a82:	b510      	push	{r4, lr}
 8021a84:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8021a86:	2400      	movs	r4, #0
 8021a88:	9402      	str	r4, [sp, #8]
 8021a8a:	9401      	str	r4, [sp, #4]
 8021a8c:	9c06      	ldr	r4, [sp, #24]
 8021a8e:	9400      	str	r4, [sp, #0]
 8021a90:	f7ff ff8f 	bl	80219b2 <mg_dns_parse_name_depth>
}
 8021a94:	b004      	add	sp, #16
 8021a96:	bd10      	pop	{r4, pc}

08021a98 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8021a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a9c:	b09f      	sub	sp, #124	@ 0x7c
 8021a9e:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8021aa0:	460c      	mov	r4, r1
 8021aa2:	af0e      	add	r7, sp, #56	@ 0x38
 8021aa4:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8021aa8:	463e      	mov	r6, r7
 8021aaa:	6820      	ldr	r0, [r4, #0]
 8021aac:	6861      	ldr	r1, [r4, #4]
 8021aae:	68a2      	ldr	r2, [r4, #8]
 8021ab0:	68e3      	ldr	r3, [r4, #12]
 8021ab2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021ab4:	3410      	adds	r4, #16
 8021ab6:	4637      	mov	r7, r6
 8021ab8:	42ac      	cmp	r4, r5
 8021aba:	d1f5      	bne.n	8021aa8 <mg_sha1_transform+0x10>
  a = state[0];
 8021abc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021abe:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8021ac0:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8021ac2:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8021ac4:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8021ac8:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 8021acc:	ea84 0608 	eor.w	r6, r4, r8
 8021ad0:	403e      	ands	r6, r7
 8021ad2:	ea86 0608 	eor.w	r6, r6, r8
 8021ad6:	2100      	movs	r1, #0
 8021ad8:	a80e      	add	r0, sp, #56	@ 0x38
 8021ada:	f7ff fd79 	bl	80215d0 <blk0>
 8021ade:	1833      	adds	r3, r6, r0
 8021ae0:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8021ae4:	4ee4      	ldr	r6, [pc, #912]	@ (8021e78 <mg_sha1_transform+0x3e0>)
 8021ae6:	4433      	add	r3, r6
 8021ae8:	4499      	add	r9, r3
 8021aea:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 8021aee:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8021af2:	402f      	ands	r7, r5
 8021af4:	4067      	eors	r7, r4
 8021af6:	2101      	movs	r1, #1
 8021af8:	a80e      	add	r0, sp, #56	@ 0x38
 8021afa:	f7ff fd69 	bl	80215d0 <blk0>
 8021afe:	4407      	add	r7, r0
 8021b00:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8021b04:	4437      	add	r7, r6
 8021b06:	4447      	add	r7, r8
 8021b08:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 8021b0c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021b10:	ea05 0509 	and.w	r5, r5, r9
 8021b14:	ea85 050a 	eor.w	r5, r5, sl
 8021b18:	2102      	movs	r1, #2
 8021b1a:	a80e      	add	r0, sp, #56	@ 0x38
 8021b1c:	f7ff fd58 	bl	80215d0 <blk0>
 8021b20:	4405      	add	r5, r0
 8021b22:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021b26:	4435      	add	r5, r6
 8021b28:	442c      	add	r4, r5
 8021b2a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8021b2e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021b32:	ea09 0907 	and.w	r9, r9, r7
 8021b36:	ea89 0908 	eor.w	r9, r9, r8
 8021b3a:	2103      	movs	r1, #3
 8021b3c:	a80e      	add	r0, sp, #56	@ 0x38
 8021b3e:	f7ff fd47 	bl	80215d0 <blk0>
 8021b42:	4481      	add	r9, r0
 8021b44:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021b48:	44b1      	add	r9, r6
 8021b4a:	44ca      	add	sl, r9
 8021b4c:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8021b50:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8021b54:	4027      	ands	r7, r4
 8021b56:	406f      	eors	r7, r5
 8021b58:	2104      	movs	r1, #4
 8021b5a:	a80e      	add	r0, sp, #56	@ 0x38
 8021b5c:	f7ff fd38 	bl	80215d0 <blk0>
 8021b60:	4407      	add	r7, r0
 8021b62:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8021b66:	4437      	add	r7, r6
 8021b68:	44b8      	add	r8, r7
 8021b6a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 8021b6e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021b72:	ea04 040a 	and.w	r4, r4, sl
 8021b76:	ea84 0409 	eor.w	r4, r4, r9
 8021b7a:	2105      	movs	r1, #5
 8021b7c:	a80e      	add	r0, sp, #56	@ 0x38
 8021b7e:	f7ff fd27 	bl	80215d0 <blk0>
 8021b82:	4404      	add	r4, r0
 8021b84:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021b88:	4434      	add	r4, r6
 8021b8a:	4425      	add	r5, r4
 8021b8c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8021b90:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8021b94:	ea0a 0a08 	and.w	sl, sl, r8
 8021b98:	ea8a 0a07 	eor.w	sl, sl, r7
 8021b9c:	2106      	movs	r1, #6
 8021b9e:	a80e      	add	r0, sp, #56	@ 0x38
 8021ba0:	f7ff fd16 	bl	80215d0 <blk0>
 8021ba4:	4482      	add	sl, r0
 8021ba6:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8021baa:	44b2      	add	sl, r6
 8021bac:	44d1      	add	r9, sl
 8021bae:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 8021bb2:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8021bb6:	ea08 0805 	and.w	r8, r8, r5
 8021bba:	ea88 0804 	eor.w	r8, r8, r4
 8021bbe:	2107      	movs	r1, #7
 8021bc0:	a80e      	add	r0, sp, #56	@ 0x38
 8021bc2:	f7ff fd05 	bl	80215d0 <blk0>
 8021bc6:	4480      	add	r8, r0
 8021bc8:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8021bcc:	44b0      	add	r8, r6
 8021bce:	4447      	add	r7, r8
 8021bd0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 8021bd4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021bd8:	ea05 0509 	and.w	r5, r5, r9
 8021bdc:	ea85 050a 	eor.w	r5, r5, sl
 8021be0:	2108      	movs	r1, #8
 8021be2:	a80e      	add	r0, sp, #56	@ 0x38
 8021be4:	f7ff fcf4 	bl	80215d0 <blk0>
 8021be8:	4405      	add	r5, r0
 8021bea:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021bee:	4435      	add	r5, r6
 8021bf0:	442c      	add	r4, r5
 8021bf2:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8021bf6:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021bfa:	ea09 0907 	and.w	r9, r9, r7
 8021bfe:	ea89 0908 	eor.w	r9, r9, r8
 8021c02:	2109      	movs	r1, #9
 8021c04:	a80e      	add	r0, sp, #56	@ 0x38
 8021c06:	f7ff fce3 	bl	80215d0 <blk0>
 8021c0a:	4481      	add	r9, r0
 8021c0c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021c10:	44b1      	add	r9, r6
 8021c12:	44ca      	add	sl, r9
 8021c14:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8021c18:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8021c1c:	4027      	ands	r7, r4
 8021c1e:	406f      	eors	r7, r5
 8021c20:	210a      	movs	r1, #10
 8021c22:	a80e      	add	r0, sp, #56	@ 0x38
 8021c24:	f7ff fcd4 	bl	80215d0 <blk0>
 8021c28:	4407      	add	r7, r0
 8021c2a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8021c2e:	4437      	add	r7, r6
 8021c30:	44b8      	add	r8, r7
 8021c32:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 8021c36:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021c3a:	ea04 040a 	and.w	r4, r4, sl
 8021c3e:	ea84 0409 	eor.w	r4, r4, r9
 8021c42:	210b      	movs	r1, #11
 8021c44:	a80e      	add	r0, sp, #56	@ 0x38
 8021c46:	f7ff fcc3 	bl	80215d0 <blk0>
 8021c4a:	4404      	add	r4, r0
 8021c4c:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021c50:	4434      	add	r4, r6
 8021c52:	4425      	add	r5, r4
 8021c54:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 8021c58:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8021c5c:	ea0a 0a08 	and.w	sl, sl, r8
 8021c60:	ea8a 0a07 	eor.w	sl, sl, r7
 8021c64:	210c      	movs	r1, #12
 8021c66:	a80e      	add	r0, sp, #56	@ 0x38
 8021c68:	f7ff fcb2 	bl	80215d0 <blk0>
 8021c6c:	4482      	add	sl, r0
 8021c6e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8021c72:	44b2      	add	sl, r6
 8021c74:	44d1      	add	r9, sl
 8021c76:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 8021c7a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8021c7e:	ea08 0805 	and.w	r8, r8, r5
 8021c82:	ea88 0804 	eor.w	r8, r8, r4
 8021c86:	210d      	movs	r1, #13
 8021c88:	a80e      	add	r0, sp, #56	@ 0x38
 8021c8a:	f7ff fca1 	bl	80215d0 <blk0>
 8021c8e:	4480      	add	r8, r0
 8021c90:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8021c94:	44b0      	add	r8, r6
 8021c96:	4447      	add	r7, r8
 8021c98:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 8021c9c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021ca0:	ea05 0509 	and.w	r5, r5, r9
 8021ca4:	ea85 050a 	eor.w	r5, r5, sl
 8021ca8:	210e      	movs	r1, #14
 8021caa:	a80e      	add	r0, sp, #56	@ 0x38
 8021cac:	f7ff fc90 	bl	80215d0 <blk0>
 8021cb0:	4405      	add	r5, r0
 8021cb2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021cb6:	4435      	add	r5, r6
 8021cb8:	442c      	add	r4, r5
 8021cba:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 8021cbe:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021cc2:	ea09 0907 	and.w	r9, r9, r7
 8021cc6:	ea89 0908 	eor.w	r9, r9, r8
 8021cca:	210f      	movs	r1, #15
 8021ccc:	a80e      	add	r0, sp, #56	@ 0x38
 8021cce:	f7ff fc7f 	bl	80215d0 <blk0>
 8021cd2:	4481      	add	r9, r0
 8021cd4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021cd8:	44b1      	add	r9, r6
 8021cda:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 8021cde:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 8021ce2:	4023      	ands	r3, r4
 8021ce4:	ea83 0205 	eor.w	r2, r3, r5
 8021ce8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021cea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021cec:	4043      	eors	r3, r0
 8021cee:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021cf0:	ea83 0c00 	eor.w	ip, r3, r0
 8021cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021cf6:	ea8c 0303 	eor.w	r3, ip, r3
 8021cfa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021cfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8021d00:	9300      	str	r3, [sp, #0]
 8021d02:	18d3      	adds	r3, r2, r3
 8021d04:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8021d08:	4433      	add	r3, r6
 8021d0a:	eb08 0203 	add.w	r2, r8, r3
 8021d0e:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8021d12:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8021d16:	ea0c 0c01 	and.w	ip, ip, r1
 8021d1a:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021d1e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021d20:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021d22:	ea83 0e04 	eor.w	lr, r3, r4
 8021d26:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8021d2a:	ea8e 0e09 	eor.w	lr, lr, r9
 8021d2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d30:	ea8e 0e03 	eor.w	lr, lr, r3
 8021d34:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8021d38:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021d3a:	9401      	str	r4, [sp, #4]
 8021d3c:	44a4      	add	ip, r4
 8021d3e:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8021d42:	44b4      	add	ip, r6
 8021d44:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 8021d46:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 8021d4a:	4015      	ands	r5, r2
 8021d4c:	ea85 0508 	eor.w	r5, r5, r8
 8021d50:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8021d52:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021d54:	ea84 0e03 	eor.w	lr, r4, r3
 8021d58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021d5a:	ea8e 0e03 	eor.w	lr, lr, r3
 8021d5e:	ea80 000e 	eor.w	r0, r0, lr
 8021d62:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021d66:	9010      	str	r0, [sp, #64]	@ 0x40
 8021d68:	9002      	str	r0, [sp, #8]
 8021d6a:	4405      	add	r5, r0
 8021d6c:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8021d70:	4435      	add	r5, r6
 8021d72:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8021d76:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8021d7a:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021d7e:	ea00 000c 	and.w	r0, r0, ip
 8021d82:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8021d86:	9f00      	ldr	r7, [sp, #0]
 8021d88:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8021d8a:	4067      	eors	r7, r4
 8021d8c:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8021d90:	ea87 070e 	eor.w	r7, r7, lr
 8021d94:	ea89 0907 	eor.w	r9, r9, r7
 8021d98:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021d9c:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8021da0:	4448      	add	r0, r9
 8021da2:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8021da6:	4430      	add	r0, r6
 8021da8:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8021dac:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8021db0:	4050      	eors	r0, r2
 8021db2:	9e01      	ldr	r6, [sp, #4]
 8021db4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021db6:	ea86 0807 	eor.w	r8, r6, r7
 8021dba:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8021dbe:	ea88 080a 	eor.w	r8, r8, sl
 8021dc2:	ea83 0808 	eor.w	r8, r3, r8
 8021dc6:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8021dca:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021dce:	4440      	add	r0, r8
 8021dd0:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021dd4:	4b29      	ldr	r3, [pc, #164]	@ (8021e7c <mg_sha1_transform+0x3e4>)
 8021dd6:	4418      	add	r0, r3
 8021dd8:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 8021ddc:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021de0:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8021de4:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8021de6:	9f02      	ldr	r7, [sp, #8]
 8021de8:	4077      	eors	r7, r6
 8021dea:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8021dec:	4077      	eors	r7, r6
 8021dee:	ea8e 0707 	eor.w	r7, lr, r7
 8021df2:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021df6:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021df8:	9703      	str	r7, [sp, #12]
 8021dfa:	4439      	add	r1, r7
 8021dfc:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021e00:	4419      	add	r1, r3
 8021e02:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8021e04:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8021e08:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8021e0c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021e0e:	ea87 0e09 	eor.w	lr, r7, r9
 8021e12:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8021e14:	ea87 0e0e 	eor.w	lr, r7, lr
 8021e18:	ea8a 0e0e 	eor.w	lr, sl, lr
 8021e1c:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021e20:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021e24:	4471      	add	r1, lr
 8021e26:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8021e2a:	4419      	add	r1, r3
 8021e2c:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8021e30:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8021e34:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8021e38:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021e3a:	ea87 0c08 	eor.w	ip, r7, r8
 8021e3e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021e40:	ea87 0c0c 	eor.w	ip, r7, ip
 8021e44:	ea86 0c0c 	eor.w	ip, r6, ip
 8021e48:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021e4c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021e50:	44e3      	add	fp, ip
 8021e52:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8021e56:	449b      	add	fp, r3
 8021e58:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8021e5c:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8021e60:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8021e64:	9d00      	ldr	r5, [sp, #0]
 8021e66:	9e03      	ldr	r6, [sp, #12]
 8021e68:	406e      	eors	r6, r5
 8021e6a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8021e6c:	406e      	eors	r6, r5
 8021e6e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021e70:	406e      	eors	r6, r5
 8021e72:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021e76:	e003      	b.n	8021e80 <mg_sha1_transform+0x3e8>
 8021e78:	5a827999 	.word	0x5a827999
 8021e7c:	6ed9eba1 	.word	0x6ed9eba1
 8021e80:	9716      	str	r7, [sp, #88]	@ 0x58
 8021e82:	9704      	str	r7, [sp, #16]
 8021e84:	44ba      	add	sl, r7
 8021e86:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8021e8a:	449a      	add	sl, r3
 8021e8c:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8021e90:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8021e94:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8021e98:	9e01      	ldr	r6, [sp, #4]
 8021e9a:	ea86 040e 	eor.w	r4, r6, lr
 8021e9e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021ea0:	407c      	eors	r4, r7
 8021ea2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021ea4:	407c      	eors	r4, r7
 8021ea6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021eaa:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021eac:	9405      	str	r4, [sp, #20]
 8021eae:	4425      	add	r5, r4
 8021eb0:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021eb4:	441d      	add	r5, r3
 8021eb6:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8021eba:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8021ebe:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021ec2:	9e02      	ldr	r6, [sp, #8]
 8021ec4:	ea86 000c 	eor.w	r0, r6, ip
 8021ec8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021eca:	4078      	eors	r0, r7
 8021ecc:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021ece:	4078      	eors	r0, r7
 8021ed0:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021ed4:	4606      	mov	r6, r0
 8021ed6:	9018      	str	r0, [sp, #96]	@ 0x60
 8021ed8:	4404      	add	r4, r0
 8021eda:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021ede:	441c      	add	r4, r3
 8021ee0:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8021ee4:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021ee8:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8021eec:	9f04      	ldr	r7, [sp, #16]
 8021eee:	ea89 0207 	eor.w	r2, r9, r7
 8021ef2:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021ef4:	407a      	eors	r2, r7
 8021ef6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021ef8:	407a      	eors	r2, r7
 8021efa:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021efe:	9219      	str	r2, [sp, #100]	@ 0x64
 8021f00:	9206      	str	r2, [sp, #24]
 8021f02:	4410      	add	r0, r2
 8021f04:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021f08:	4418      	add	r0, r3
 8021f0a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8021f0e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021f12:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021f16:	9a05      	ldr	r2, [sp, #20]
 8021f18:	ea88 0202 	eor.w	r2, r8, r2
 8021f1c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021f1e:	407a      	eors	r2, r7
 8021f20:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021f22:	407a      	eors	r2, r7
 8021f24:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021f28:	921a      	str	r2, [sp, #104]	@ 0x68
 8021f2a:	9207      	str	r2, [sp, #28]
 8021f2c:	4411      	add	r1, r2
 8021f2e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021f32:	4419      	add	r1, r3
 8021f34:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8021f38:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021f3c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021f40:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021f42:	9f03      	ldr	r7, [sp, #12]
 8021f44:	ea87 0b06 	eor.w	fp, r7, r6
 8021f48:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021f4a:	ea87 0b0b 	eor.w	fp, r7, fp
 8021f4e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021f50:	ea87 0b0b 	eor.w	fp, r7, fp
 8021f54:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021f58:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8021f5c:	f8cd b020 	str.w	fp, [sp, #32]
 8021f60:	445a      	add	r2, fp
 8021f62:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021f66:	441a      	add	r2, r3
 8021f68:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8021f6c:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8021f70:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8021f74:	9e06      	ldr	r6, [sp, #24]
 8021f76:	ea8e 0b06 	eor.w	fp, lr, r6
 8021f7a:	9e00      	ldr	r6, [sp, #0]
 8021f7c:	ea86 0b0b 	eor.w	fp, r6, fp
 8021f80:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021f82:	ea87 0b0b 	eor.w	fp, r7, fp
 8021f86:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021f8a:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8021f8e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8021f92:	44da      	add	sl, fp
 8021f94:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8021f98:	449a      	add	sl, r3
 8021f9a:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8021f9e:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021fa2:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021fa6:	9e07      	ldr	r6, [sp, #28]
 8021fa8:	ea8c 0b06 	eor.w	fp, ip, r6
 8021fac:	9e01      	ldr	r6, [sp, #4]
 8021fae:	ea86 0b0b 	eor.w	fp, r6, fp
 8021fb2:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021fb4:	ea87 0b0b 	eor.w	fp, r7, fp
 8021fb8:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021fbc:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8021fc0:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8021fc4:	445d      	add	r5, fp
 8021fc6:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021fca:	441d      	add	r5, r3
 8021fcc:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8021fd0:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8021fd4:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021fd8:	9e08      	ldr	r6, [sp, #32]
 8021fda:	9f04      	ldr	r7, [sp, #16]
 8021fdc:	ea87 0b06 	eor.w	fp, r7, r6
 8021fe0:	9e02      	ldr	r6, [sp, #8]
 8021fe2:	ea86 0b0b 	eor.w	fp, r6, fp
 8021fe6:	9e00      	ldr	r6, [sp, #0]
 8021fe8:	ea86 0b0b 	eor.w	fp, r6, fp
 8021fec:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021ff0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021ff4:	f8cd b000 	str.w	fp, [sp]
 8021ff8:	445c      	add	r4, fp
 8021ffa:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021ffe:	441c      	add	r4, r3
 8022000:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8022004:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8022008:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 802200c:	9e05      	ldr	r6, [sp, #20]
 802200e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022010:	ea86 0b07 	eor.w	fp, r6, r7
 8022014:	ea89 0b0b 	eor.w	fp, r9, fp
 8022018:	9e01      	ldr	r6, [sp, #4]
 802201a:	ea86 0b0b 	eor.w	fp, r6, fp
 802201e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022022:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8022026:	f8cd b004 	str.w	fp, [sp, #4]
 802202a:	4458      	add	r0, fp
 802202c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022030:	4418      	add	r0, r3
 8022032:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8022036:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 802203a:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 802203e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022040:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022042:	ea86 0b07 	eor.w	fp, r6, r7
 8022046:	ea88 0b0b 	eor.w	fp, r8, fp
 802204a:	9e02      	ldr	r6, [sp, #8]
 802204c:	ea86 0b0b 	eor.w	fp, r6, fp
 8022050:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022054:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8022058:	f8cd b008 	str.w	fp, [sp, #8]
 802205c:	4459      	add	r1, fp
 802205e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022062:	4419      	add	r1, r3
 8022064:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8022068:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 802206c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8022070:	9e06      	ldr	r6, [sp, #24]
 8022072:	9f00      	ldr	r7, [sp, #0]
 8022074:	ea86 0b07 	eor.w	fp, r6, r7
 8022078:	9e03      	ldr	r6, [sp, #12]
 802207a:	ea86 0b0b 	eor.w	fp, r6, fp
 802207e:	ea89 090b 	eor.w	r9, r9, fp
 8022082:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8022086:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 802208a:	445a      	add	r2, fp
 802208c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022090:	441a      	add	r2, r3
 8022092:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8022096:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 802209a:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 802209e:	9e07      	ldr	r6, [sp, #28]
 80220a0:	9f01      	ldr	r7, [sp, #4]
 80220a2:	ea86 0a07 	eor.w	sl, r6, r7
 80220a6:	ea8e 0a0a 	eor.w	sl, lr, sl
 80220aa:	ea88 080a 	eor.w	r8, r8, sl
 80220ae:	ea4f 7af8 	mov.w	sl, r8, ror #31
 80220b2:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 80220b6:	44d1      	add	r9, sl
 80220b8:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 80220bc:	4499      	add	r9, r3
 80220be:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 80220c2:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 80220c6:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 80220ca:	9e08      	ldr	r6, [sp, #32]
 80220cc:	9f02      	ldr	r7, [sp, #8]
 80220ce:	ea86 0907 	eor.w	r9, r6, r7
 80220d2:	ea8c 0909 	eor.w	r9, ip, r9
 80220d6:	9e03      	ldr	r6, [sp, #12]
 80220d8:	ea86 0709 	eor.w	r7, r6, r9
 80220dc:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80220e0:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80220e4:	444d      	add	r5, r9
 80220e6:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 80220ea:	441d      	add	r5, r3
 80220ec:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 80220f0:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 80220f4:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80220f8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80220fa:	ea87 070b 	eor.w	r7, r7, fp
 80220fe:	9e04      	ldr	r6, [sp, #16]
 8022100:	4077      	eors	r7, r6
 8022102:	ea8e 0e07 	eor.w	lr, lr, r7
 8022106:	ea4f 7efe 	mov.w	lr, lr, ror #31
 802210a:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 802210e:	4474      	add	r4, lr
 8022110:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022114:	441c      	add	r4, r3
 8022116:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 802211a:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 802211e:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8022122:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022124:	ea87 070a 	eor.w	r7, r7, sl
 8022128:	9e05      	ldr	r6, [sp, #20]
 802212a:	4077      	eors	r7, r6
 802212c:	ea8c 0c07 	eor.w	ip, ip, r7
 8022130:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8022134:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8022138:	f8cd c00c 	str.w	ip, [sp, #12]
 802213c:	4460      	add	r0, ip
 802213e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8022142:	4418      	add	r0, r3
 8022144:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8022148:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 802214c:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8022150:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 8022154:	4319      	orrs	r1, r3
 8022156:	9b00      	ldr	r3, [sp, #0]
 8022158:	ea83 0309 	eor.w	r3, r3, r9
 802215c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802215e:	4073      	eors	r3, r6
 8022160:	9e04      	ldr	r6, [sp, #16]
 8022162:	405e      	eors	r6, r3
 8022164:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8022168:	9316      	str	r3, [sp, #88]	@ 0x58
 802216a:	9304      	str	r3, [sp, #16]
 802216c:	4419      	add	r1, r3
 802216e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8022172:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8022176:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 802217a:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802217e:	311c      	adds	r1, #28
 8022180:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8022184:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8022188:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 802218c:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8022190:	4332      	orrs	r2, r6
 8022192:	9b01      	ldr	r3, [sp, #4]
 8022194:	ea83 060e 	eor.w	r6, r3, lr
 8022198:	9b06      	ldr	r3, [sp, #24]
 802219a:	405e      	eors	r6, r3
 802219c:	9f05      	ldr	r7, [sp, #20]
 802219e:	407e      	eors	r6, r7
 80221a0:	ea4f 77f6 	mov.w	r7, r6, ror #31
 80221a4:	9717      	str	r7, [sp, #92]	@ 0x5c
 80221a6:	9705      	str	r7, [sp, #20]
 80221a8:	443a      	add	r2, r7
 80221aa:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80221ae:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80221b2:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80221b6:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80221ba:	321c      	adds	r2, #28
 80221bc:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 80221c0:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 80221c4:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 80221c8:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 80221cc:	433e      	orrs	r6, r7
 80221ce:	9f02      	ldr	r7, [sp, #8]
 80221d0:	4663      	mov	r3, ip
 80221d2:	405f      	eors	r7, r3
 80221d4:	9b07      	ldr	r3, [sp, #28]
 80221d6:	405f      	eors	r7, r3
 80221d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80221da:	405f      	eors	r7, r3
 80221dc:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80221e0:	9718      	str	r7, [sp, #96]	@ 0x60
 80221e2:	970b      	str	r7, [sp, #44]	@ 0x2c
 80221e4:	443e      	add	r6, r7
 80221e6:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80221ea:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80221ee:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80221f2:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80221f6:	361c      	adds	r6, #28
 80221f8:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 80221fc:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8022200:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 8022204:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8022208:	432f      	orrs	r7, r5
 802220a:	9d04      	ldr	r5, [sp, #16]
 802220c:	ea8b 0505 	eor.w	r5, fp, r5
 8022210:	9b08      	ldr	r3, [sp, #32]
 8022212:	405d      	eors	r5, r3
 8022214:	9b06      	ldr	r3, [sp, #24]
 8022216:	405d      	eors	r5, r3
 8022218:	ea4f 75f5 	mov.w	r5, r5, ror #31
 802221c:	9519      	str	r5, [sp, #100]	@ 0x64
 802221e:	9506      	str	r5, [sp, #24]
 8022220:	442f      	add	r7, r5
 8022222:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 8022226:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 802222a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 802222e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8022232:	371c      	adds	r7, #28
 8022234:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8022238:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 802223c:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8022240:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 8022244:	ea4c 0c04 	orr.w	ip, ip, r4
 8022248:	9c05      	ldr	r4, [sp, #20]
 802224a:	ea8a 0404 	eor.w	r4, sl, r4
 802224e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022250:	406c      	eors	r4, r5
 8022252:	9b07      	ldr	r3, [sp, #28]
 8022254:	405c      	eors	r4, r3
 8022256:	ea4f 74f4 	mov.w	r4, r4, ror #31
 802225a:	941a      	str	r4, [sp, #104]	@ 0x68
 802225c:	9407      	str	r4, [sp, #28]
 802225e:	44a4      	add	ip, r4
 8022260:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 8022264:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8022268:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 802226c:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8022270:	f10c 0c1c 	add.w	ip, ip, #28
 8022274:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8022278:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 802227c:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8022280:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8022284:	4320      	orrs	r0, r4
 8022286:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022288:	ea89 0404 	eor.w	r4, r9, r4
 802228c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802228e:	406c      	eors	r4, r5
 8022290:	9b08      	ldr	r3, [sp, #32]
 8022292:	405c      	eors	r4, r3
 8022294:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8022298:	941b      	str	r4, [sp, #108]	@ 0x6c
 802229a:	9408      	str	r4, [sp, #32]
 802229c:	4420      	add	r0, r4
 802229e:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 80222a2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80222a6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80222aa:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80222ae:	301c      	adds	r0, #28
 80222b0:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 80222b4:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 80222b8:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 80222bc:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 80222c0:	430d      	orrs	r5, r1
 80222c2:	9906      	ldr	r1, [sp, #24]
 80222c4:	ea8e 0101 	eor.w	r1, lr, r1
 80222c8:	9c00      	ldr	r4, [sp, #0]
 80222ca:	4061      	eors	r1, r4
 80222cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222ce:	4059      	eors	r1, r3
 80222d0:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80222d4:	911c      	str	r1, [sp, #112]	@ 0x70
 80222d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80222d8:	440d      	add	r5, r1
 80222da:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80222de:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80222e2:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80222e6:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80222ea:	351c      	adds	r5, #28
 80222ec:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 80222f0:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 80222f4:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 80222f8:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 80222fc:	4314      	orrs	r4, r2
 80222fe:	9903      	ldr	r1, [sp, #12]
 8022300:	9a07      	ldr	r2, [sp, #28]
 8022302:	404a      	eors	r2, r1
 8022304:	9901      	ldr	r1, [sp, #4]
 8022306:	404a      	eors	r2, r1
 8022308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802230a:	405a      	eors	r2, r3
 802230c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022310:	921d      	str	r2, [sp, #116]	@ 0x74
 8022312:	920a      	str	r2, [sp, #40]	@ 0x28
 8022314:	4414      	add	r4, r2
 8022316:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802231a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802231e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022322:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022326:	341c      	adds	r4, #28
 8022328:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 802232c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022330:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 8022334:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8022338:	4311      	orrs	r1, r2
 802233a:	9a04      	ldr	r2, [sp, #16]
 802233c:	9e08      	ldr	r6, [sp, #32]
 802233e:	4072      	eors	r2, r6
 8022340:	9e02      	ldr	r6, [sp, #8]
 8022342:	4072      	eors	r2, r6
 8022344:	9b00      	ldr	r3, [sp, #0]
 8022346:	405a      	eors	r2, r3
 8022348:	ea4f 76f2 	mov.w	r6, r2, ror #31
 802234c:	960e      	str	r6, [sp, #56]	@ 0x38
 802234e:	9600      	str	r6, [sp, #0]
 8022350:	4431      	add	r1, r6
 8022352:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8022356:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802235a:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 802235e:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8022362:	311c      	adds	r1, #28
 8022364:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8022368:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 802236c:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8022370:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 8022374:	4332      	orrs	r2, r6
 8022376:	9f05      	ldr	r7, [sp, #20]
 8022378:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802237a:	407e      	eors	r6, r7
 802237c:	ea8b 0606 	eor.w	r6, fp, r6
 8022380:	9b01      	ldr	r3, [sp, #4]
 8022382:	405e      	eors	r6, r3
 8022384:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8022388:	930f      	str	r3, [sp, #60]	@ 0x3c
 802238a:	9301      	str	r3, [sp, #4]
 802238c:	441a      	add	r2, r3
 802238e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8022392:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8022396:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802239a:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 802239e:	321c      	adds	r2, #28
 80223a0:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 80223a4:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 80223a8:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 80223ac:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 80223b0:	433e      	orrs	r6, r7
 80223b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80223b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223b6:	405f      	eors	r7, r3
 80223b8:	ea8a 0707 	eor.w	r7, sl, r7
 80223bc:	9b02      	ldr	r3, [sp, #8]
 80223be:	405f      	eors	r7, r3
 80223c0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80223c4:	9710      	str	r7, [sp, #64]	@ 0x40
 80223c6:	9702      	str	r7, [sp, #8]
 80223c8:	443e      	add	r6, r7
 80223ca:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80223ce:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80223d2:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80223d6:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80223da:	361c      	adds	r6, #28
 80223dc:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 80223e0:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80223e4:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80223e8:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 80223ec:	4338      	orrs	r0, r7
 80223ee:	9b06      	ldr	r3, [sp, #24]
 80223f0:	9f00      	ldr	r7, [sp, #0]
 80223f2:	405f      	eors	r7, r3
 80223f4:	ea89 0707 	eor.w	r7, r9, r7
 80223f8:	ea8b 0b07 	eor.w	fp, fp, r7
 80223fc:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 8022400:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8022404:	4460      	add	r0, ip
 8022406:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 802240a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802240e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022412:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022416:	301c      	adds	r0, #28
 8022418:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 802241c:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8022420:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 8022424:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8022428:	433d      	orrs	r5, r7
 802242a:	9f07      	ldr	r7, [sp, #28]
 802242c:	9b01      	ldr	r3, [sp, #4]
 802242e:	405f      	eors	r7, r3
 8022430:	ea8e 0707 	eor.w	r7, lr, r7
 8022434:	ea8a 0a07 	eor.w	sl, sl, r7
 8022438:	ea4f 78fa 	mov.w	r8, sl, ror #31
 802243c:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8022440:	4445      	add	r5, r8
 8022442:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8022446:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 802244a:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 802244e:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8022452:	351c      	adds	r5, #28
 8022454:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8022458:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 802245c:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8022460:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 8022464:	433c      	orrs	r4, r7
 8022466:	9b08      	ldr	r3, [sp, #32]
 8022468:	9f02      	ldr	r7, [sp, #8]
 802246a:	405f      	eors	r7, r3
 802246c:	9b03      	ldr	r3, [sp, #12]
 802246e:	405f      	eors	r7, r3
 8022470:	ea89 0707 	eor.w	r7, r9, r7
 8022474:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8022478:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 802247c:	444c      	add	r4, r9
 802247e:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022482:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8022486:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 802248a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 802248e:	341c      	adds	r4, #28
 8022490:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 8022494:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8022498:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 802249c:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 80224a0:	4339      	orrs	r1, r7
 80224a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80224a4:	ea83 070c 	eor.w	r7, r3, ip
 80224a8:	9b04      	ldr	r3, [sp, #16]
 80224aa:	405f      	eors	r7, r3
 80224ac:	ea8e 0707 	eor.w	r7, lr, r7
 80224b0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80224b4:	9714      	str	r7, [sp, #80]	@ 0x50
 80224b6:	970c      	str	r7, [sp, #48]	@ 0x30
 80224b8:	4439      	add	r1, r7
 80224ba:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80224be:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80224c2:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80224c6:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80224ca:	311c      	adds	r1, #28
 80224cc:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 80224d0:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80224d4:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80224d8:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 80224dc:	433a      	orrs	r2, r7
 80224de:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80224e0:	ea87 0708 	eor.w	r7, r7, r8
 80224e4:	9b05      	ldr	r3, [sp, #20]
 80224e6:	405f      	eors	r7, r3
 80224e8:	9b03      	ldr	r3, [sp, #12]
 80224ea:	405f      	eors	r7, r3
 80224ec:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 80224f0:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 80224f4:	445a      	add	r2, fp
 80224f6:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80224fa:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80224fe:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022502:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8022506:	321c      	adds	r2, #28
 8022508:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 802250c:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8022510:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8022514:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8022518:	4337      	orrs	r7, r6
 802251a:	9e00      	ldr	r6, [sp, #0]
 802251c:	ea86 0609 	eor.w	r6, r6, r9
 8022520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022522:	405e      	eors	r6, r3
 8022524:	9b04      	ldr	r3, [sp, #16]
 8022526:	405e      	eors	r6, r3
 8022528:	ea4f 7af6 	mov.w	sl, r6, ror #31
 802252c:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8022530:	4457      	add	r7, sl
 8022532:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 8022536:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 802253a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 802253e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8022542:	371c      	adds	r7, #28
 8022544:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8022548:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 802254c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8022550:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 8022554:	4330      	orrs	r0, r6
 8022556:	9e01      	ldr	r6, [sp, #4]
 8022558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802255a:	405e      	eors	r6, r3
 802255c:	9b06      	ldr	r3, [sp, #24]
 802255e:	405e      	eors	r6, r3
 8022560:	9b05      	ldr	r3, [sp, #20]
 8022562:	405e      	eors	r6, r3
 8022564:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022568:	9617      	str	r6, [sp, #92]	@ 0x5c
 802256a:	9603      	str	r6, [sp, #12]
 802256c:	4430      	add	r0, r6
 802256e:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8022572:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022576:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802257a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802257e:	301c      	adds	r0, #28
 8022580:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8022584:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8022588:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 802258c:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8022590:	432e      	orrs	r6, r5
 8022592:	9d02      	ldr	r5, [sp, #8]
 8022594:	ea85 050b 	eor.w	r5, r5, fp
 8022598:	9b07      	ldr	r3, [sp, #28]
 802259a:	405d      	eors	r5, r3
 802259c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802259e:	405d      	eors	r5, r3
 80225a0:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80225a4:	9518      	str	r5, [sp, #96]	@ 0x60
 80225a6:	9504      	str	r5, [sp, #16]
 80225a8:	442e      	add	r6, r5
 80225aa:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 80225ae:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80225b2:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80225b6:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80225ba:	361c      	adds	r6, #28
 80225bc:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 80225c0:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 80225c4:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80225c8:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 80225cc:	432c      	orrs	r4, r5
 80225ce:	ea8c 050a 	eor.w	r5, ip, sl
 80225d2:	9b08      	ldr	r3, [sp, #32]
 80225d4:	405d      	eors	r5, r3
 80225d6:	9b06      	ldr	r3, [sp, #24]
 80225d8:	405d      	eors	r5, r3
 80225da:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80225de:	9519      	str	r5, [sp, #100]	@ 0x64
 80225e0:	9505      	str	r5, [sp, #20]
 80225e2:	442c      	add	r4, r5
 80225e4:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 80225e8:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80225ec:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80225f0:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80225f4:	341c      	adds	r4, #28
 80225f6:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 80225fa:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 80225fe:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8022602:	9d03      	ldr	r5, [sp, #12]
 8022604:	ea88 0305 	eor.w	r3, r8, r5
 8022608:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802260a:	406b      	eors	r3, r5
 802260c:	9d07      	ldr	r5, [sp, #28]
 802260e:	406b      	eors	r3, r5
 8022610:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022614:	931a      	str	r3, [sp, #104]	@ 0x68
 8022616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022618:	4419      	add	r1, r3
 802261a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802261e:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 8022a1c <mg_sha1_transform+0xf84>
 8022622:	4471      	add	r1, lr
 8022624:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8022628:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 802262c:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8022630:	9b04      	ldr	r3, [sp, #16]
 8022632:	ea89 0303 	eor.w	r3, r9, r3
 8022636:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022638:	406b      	eors	r3, r5
 802263a:	9d08      	ldr	r5, [sp, #32]
 802263c:	406b      	eors	r3, r5
 802263e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022642:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022644:	9306      	str	r3, [sp, #24]
 8022646:	441a      	add	r2, r3
 8022648:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802264c:	4472      	add	r2, lr
 802264e:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8022652:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8022656:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 802265a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802265c:	9d05      	ldr	r5, [sp, #20]
 802265e:	406f      	eors	r7, r5
 8022660:	9d00      	ldr	r5, [sp, #0]
 8022662:	406f      	eors	r7, r5
 8022664:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022666:	406f      	eors	r7, r5
 8022668:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802266c:	971c      	str	r7, [sp, #112]	@ 0x70
 802266e:	9707      	str	r7, [sp, #28]
 8022670:	443b      	add	r3, r7
 8022672:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8022676:	4473      	add	r3, lr
 8022678:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 802267c:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8022680:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8022684:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022686:	ea8b 0707 	eor.w	r7, fp, r7
 802268a:	9d01      	ldr	r5, [sp, #4]
 802268c:	406f      	eors	r7, r5
 802268e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022690:	406f      	eors	r7, r5
 8022692:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8022696:	971d      	str	r7, [sp, #116]	@ 0x74
 8022698:	9708      	str	r7, [sp, #32]
 802269a:	4438      	add	r0, r7
 802269c:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 80226a0:	4470      	add	r0, lr
 80226a2:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 80226a6:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 80226aa:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 80226ae:	9e06      	ldr	r6, [sp, #24]
 80226b0:	ea8a 0606 	eor.w	r6, sl, r6
 80226b4:	9d02      	ldr	r5, [sp, #8]
 80226b6:	406e      	eors	r6, r5
 80226b8:	9d00      	ldr	r5, [sp, #0]
 80226ba:	406e      	eors	r6, r5
 80226bc:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80226c0:	960e      	str	r6, [sp, #56]	@ 0x38
 80226c2:	9600      	str	r6, [sp, #0]
 80226c4:	4437      	add	r7, r6
 80226c6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 80226ca:	4477      	add	r7, lr
 80226cc:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 80226d0:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 80226d4:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 80226d8:	9c03      	ldr	r4, [sp, #12]
 80226da:	9d07      	ldr	r5, [sp, #28]
 80226dc:	406c      	eors	r4, r5
 80226de:	ea8c 0404 	eor.w	r4, ip, r4
 80226e2:	9d01      	ldr	r5, [sp, #4]
 80226e4:	406c      	eors	r4, r5
 80226e6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80226ea:	940f      	str	r4, [sp, #60]	@ 0x3c
 80226ec:	9401      	str	r4, [sp, #4]
 80226ee:	4426      	add	r6, r4
 80226f0:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 80226f4:	4476      	add	r6, lr
 80226f6:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 80226fa:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 80226fe:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8022702:	9904      	ldr	r1, [sp, #16]
 8022704:	9c08      	ldr	r4, [sp, #32]
 8022706:	4061      	eors	r1, r4
 8022708:	ea88 0101 	eor.w	r1, r8, r1
 802270c:	9c02      	ldr	r4, [sp, #8]
 802270e:	4061      	eors	r1, r4
 8022710:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022714:	9110      	str	r1, [sp, #64]	@ 0x40
 8022716:	440d      	add	r5, r1
 8022718:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 802271c:	4475      	add	r5, lr
 802271e:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8022722:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022726:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 802272a:	9a05      	ldr	r2, [sp, #20]
 802272c:	9c00      	ldr	r4, [sp, #0]
 802272e:	4062      	eors	r2, r4
 8022730:	ea89 0202 	eor.w	r2, r9, r2
 8022734:	ea8c 0202 	eor.w	r2, ip, r2
 8022738:	ea4f 72f2 	mov.w	r2, r2, ror #31
 802273c:	9211      	str	r2, [sp, #68]	@ 0x44
 802273e:	4496      	add	lr, r2
 8022740:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8022744:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022748:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 802274c:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022750:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022754:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8022758:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 802275c:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022762:	9c01      	ldr	r4, [sp, #4]
 8022764:	4063      	eors	r3, r4
 8022766:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022768:	4063      	eors	r3, r4
 802276a:	ea88 0303 	eor.w	r3, r8, r3
 802276e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022772:	9312      	str	r3, [sp, #72]	@ 0x48
 8022774:	449c      	add	ip, r3
 8022776:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 802277a:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 802277e:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022782:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022786:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 802278a:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 802278e:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8022792:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8022796:	9806      	ldr	r0, [sp, #24]
 8022798:	4048      	eors	r0, r1
 802279a:	ea8b 0000 	eor.w	r0, fp, r0
 802279e:	ea89 0000 	eor.w	r0, r9, r0
 80227a2:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80227a6:	9013      	str	r0, [sp, #76]	@ 0x4c
 80227a8:	4480      	add	r8, r0
 80227aa:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 80227ae:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 80227b2:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 80227b6:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 80227ba:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 80227be:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 80227c2:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 80227c6:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 80227ca:	9702      	str	r7, [sp, #8]
 80227cc:	9f07      	ldr	r7, [sp, #28]
 80227ce:	ea87 0902 	eor.w	r9, r7, r2
 80227d2:	ea8a 0909 	eor.w	r9, sl, r9
 80227d6:	ea84 0909 	eor.w	r9, r4, r9
 80227da:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80227de:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80227e2:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80227e6:	9c02      	ldr	r4, [sp, #8]
 80227e8:	444c      	add	r4, r9
 80227ea:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 80227ee:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 80227f2:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 80227f6:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 80227fa:	3756      	adds	r7, #86	@ 0x56
 80227fc:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8022800:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022804:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022808:	9c08      	ldr	r4, [sp, #32]
 802280a:	ea84 0903 	eor.w	r9, r4, r3
 802280e:	9c03      	ldr	r4, [sp, #12]
 8022810:	ea84 0909 	eor.w	r9, r4, r9
 8022814:	ea8b 0909 	eor.w	r9, fp, r9
 8022818:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802281c:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8022820:	444e      	add	r6, r9
 8022822:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022826:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 802282a:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 802282e:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022832:	3656      	adds	r6, #86	@ 0x56
 8022834:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8022838:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 802283c:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8022840:	9c00      	ldr	r4, [sp, #0]
 8022842:	ea84 0b00 	eor.w	fp, r4, r0
 8022846:	9c04      	ldr	r4, [sp, #16]
 8022848:	ea84 0b0b 	eor.w	fp, r4, fp
 802284c:	ea8a 0b0b 	eor.w	fp, sl, fp
 8022850:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022854:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8022858:	445d      	add	r5, fp
 802285a:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 802285e:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8022862:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8022866:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 802286a:	3556      	adds	r5, #86	@ 0x56
 802286c:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8022870:	9602      	str	r6, [sp, #8]
 8022872:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022876:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 802287a:	9c01      	ldr	r4, [sp, #4]
 802287c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802287e:	ea84 0a06 	eor.w	sl, r4, r6
 8022882:	9c05      	ldr	r4, [sp, #20]
 8022884:	ea84 0a0a 	eor.w	sl, r4, sl
 8022888:	9c03      	ldr	r4, [sp, #12]
 802288a:	ea84 0a0a 	eor.w	sl, r4, sl
 802288e:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8022892:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8022896:	44d6      	add	lr, sl
 8022898:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 802289c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 80228a0:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 80228a4:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 80228a8:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 80228ac:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 80228b0:	9e02      	ldr	r6, [sp, #8]
 80228b2:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 80228b6:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80228ba:	ea81 0109 	eor.w	r1, r1, r9
 80228be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80228c0:	4071      	eors	r1, r6
 80228c2:	9c04      	ldr	r4, [sp, #16]
 80228c4:	4061      	eors	r1, r4
 80228c6:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80228ca:	9118      	str	r1, [sp, #96]	@ 0x60
 80228cc:	448c      	add	ip, r1
 80228ce:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 80228d2:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 80228d6:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 80228da:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 80228de:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 80228e2:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 80228e6:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 80228ea:	9c02      	ldr	r4, [sp, #8]
 80228ec:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 80228f0:	ea82 020b 	eor.w	r2, r2, fp
 80228f4:	9c06      	ldr	r4, [sp, #24]
 80228f6:	4062      	eors	r2, r4
 80228f8:	9c05      	ldr	r4, [sp, #20]
 80228fa:	4062      	eors	r2, r4
 80228fc:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022900:	9219      	str	r2, [sp, #100]	@ 0x64
 8022902:	4490      	add	r8, r2
 8022904:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022908:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 802290c:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022910:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022914:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022918:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 802291c:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022920:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022924:	ea83 030a 	eor.w	r3, r3, sl
 8022928:	9c07      	ldr	r4, [sp, #28]
 802292a:	4063      	eors	r3, r4
 802292c:	4073      	eors	r3, r6
 802292e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022932:	931a      	str	r3, [sp, #104]	@ 0x68
 8022934:	441f      	add	r7, r3
 8022936:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 802293a:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 802293e:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022942:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8022946:	3756      	adds	r7, #86	@ 0x56
 8022948:	9e02      	ldr	r6, [sp, #8]
 802294a:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 802294e:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022952:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022956:	4048      	eors	r0, r1
 8022958:	9908      	ldr	r1, [sp, #32]
 802295a:	4048      	eors	r0, r1
 802295c:	9c06      	ldr	r4, [sp, #24]
 802295e:	4060      	eors	r0, r4
 8022960:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022964:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022966:	4406      	add	r6, r0
 8022968:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 802296c:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8022970:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8022974:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022978:	3656      	adds	r6, #86	@ 0x56
 802297a:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 802297e:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8022982:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8022986:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022988:	406a      	eors	r2, r5
 802298a:	9d00      	ldr	r5, [sp, #0]
 802298c:	406a      	eors	r2, r5
 802298e:	9c07      	ldr	r4, [sp, #28]
 8022990:	4062      	eors	r2, r4
 8022992:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022996:	921c      	str	r2, [sp, #112]	@ 0x70
 8022998:	4411      	add	r1, r2
 802299a:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 802299e:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 80229a2:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 80229a6:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 80229aa:	3156      	adds	r1, #86	@ 0x56
 80229ac:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 80229b0:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 80229b4:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 80229b8:	ea89 0903 	eor.w	r9, r9, r3
 80229bc:	9b01      	ldr	r3, [sp, #4]
 80229be:	ea83 0909 	eor.w	r9, r3, r9
 80229c2:	9c08      	ldr	r4, [sp, #32]
 80229c4:	ea84 0309 	eor.w	r3, r4, r9
 80229c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80229cc:	931d      	str	r3, [sp, #116]	@ 0x74
 80229ce:	4413      	add	r3, r2
 80229d0:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80229d4:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 80229d8:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 80229dc:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 80229e0:	3356      	adds	r3, #86	@ 0x56
 80229e2:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 80229e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80229e8:	6802      	ldr	r2, [r0, #0]
 80229ea:	441a      	add	r2, r3
 80229ec:	6002      	str	r2, [r0, #0]
  state[1] += b;
 80229ee:	6843      	ldr	r3, [r0, #4]
 80229f0:	440b      	add	r3, r1
 80229f2:	6043      	str	r3, [r0, #4]
  state[2] += c;
 80229f4:	6883      	ldr	r3, [r0, #8]
 80229f6:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 80229fa:	6083      	str	r3, [r0, #8]
  state[3] += d;
 80229fc:	68c3      	ldr	r3, [r0, #12]
 80229fe:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8022a02:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8022a04:	6903      	ldr	r3, [r0, #16]
 8022a06:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8022a0a:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 8022a0c:	2240      	movs	r2, #64	@ 0x40
 8022a0e:	2100      	movs	r1, #0
 8022a10:	a80e      	add	r0, sp, #56	@ 0x38
 8022a12:	f00a f92d 	bl	802cc70 <memset>
}
 8022a16:	b01f      	add	sp, #124	@ 0x7c
 8022a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a1c:	ca62c1d6 	.word	0xca62c1d6

08022a20 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022a20:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8022a22:	fb01 f400 	mul.w	r4, r1, r0
 8022a26:	4620      	mov	r0, r4
 8022a28:	f7f8 f8d6 	bl	801abd8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8022a2c:	4605      	mov	r5, r0
 8022a2e:	b118      	cbz	r0, 8022a38 <mg_calloc+0x18>
 8022a30:	4622      	mov	r2, r4
 8022a32:	2100      	movs	r1, #0
 8022a34:	f00a f91c 	bl	802cc70 <memset>
}
 8022a38:	4628      	mov	r0, r5
 8022a3a:	bd38      	pop	{r3, r4, r5, pc}

08022a3c <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8022a3c:	b570      	push	{r4, r5, r6, lr}
 8022a3e:	4605      	mov	r5, r0
 8022a40:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 8022a42:	6811      	ldr	r1, [r2, #0]
 8022a44:	1d0c      	adds	r4, r1, #4
 8022a46:	6014      	str	r4, [r2, #0]
 8022a48:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 8022a4a:	f101 0408 	add.w	r4, r1, #8
 8022a4e:	6014      	str	r4, [r2, #0]
 8022a50:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8022a52:	b923      	cbnz	r3, 8022a5e <mg_print_esc+0x22>
 8022a54:	b11c      	cbz	r4, 8022a5e <mg_print_esc+0x22>
 8022a56:	4620      	mov	r0, r4
 8022a58:	f7ed fc22 	bl	80102a0 <strlen>
 8022a5c:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 8022a5e:	4622      	mov	r2, r4
 8022a60:	4631      	mov	r1, r6
 8022a62:	4628      	mov	r0, r5
 8022a64:	f7fe fd65 	bl	8021532 <qcpy>
}
 8022a68:	bd70      	pop	{r4, r5, r6, pc}

08022a6a <getpeer>:
                                     bool lsn) {
 8022a6a:	b570      	push	{r4, r5, r6, lr}
 8022a6c:	460d      	mov	r5, r1
 8022a6e:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8022a70:	6804      	ldr	r4, [r0, #0]
 8022a72:	e000      	b.n	8022a76 <getpeer+0xc>
 8022a74:	6824      	ldr	r4, [r4, #0]
 8022a76:	b364      	cbz	r4, 8022ad2 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8022a78:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8022a7c:	f013 0f10 	tst.w	r3, #16
 8022a80:	d008      	beq.n	8022a94 <getpeer+0x2a>
 8022a82:	69a8      	ldr	r0, [r5, #24]
 8022a84:	b130      	cbz	r0, 8022a94 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8022a86:	2204      	movs	r2, #4
 8022a88:	f104 011c 	add.w	r1, r4, #28
 8022a8c:	300e      	adds	r0, #14
 8022a8e:	f00a f85b 	bl	802cb48 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8022a92:	b1f0      	cbz	r0, 8022ad2 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8022a94:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022a98:	f013 0301 	ands.w	r3, r3, #1
 8022a9c:	d005      	beq.n	8022aaa <getpeer+0x40>
 8022a9e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8022aa0:	b11a      	cbz	r2, 8022aaa <getpeer+0x40>
 8022aa2:	8b21      	ldrh	r1, [r4, #24]
 8022aa4:	8852      	ldrh	r2, [r2, #2]
 8022aa6:	4291      	cmp	r1, r2
 8022aa8:	d013      	beq.n	8022ad2 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d1e2      	bne.n	8022a74 <getpeer+0xa>
 8022aae:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8022ab0:	2b00      	cmp	r3, #0
 8022ab2:	d0df      	beq.n	8022a74 <getpeer+0xa>
 8022ab4:	8b21      	ldrh	r1, [r4, #24]
 8022ab6:	885a      	ldrh	r2, [r3, #2]
 8022ab8:	4291      	cmp	r1, r2
 8022aba:	d1db      	bne.n	8022a74 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022abc:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8022ac0:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8022ac4:	42b2      	cmp	r2, r6
 8022ac6:	d1d5      	bne.n	8022a74 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8022ac8:	b91e      	cbnz	r6, 8022ad2 <getpeer+0x68>
 8022aca:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8022acc:	881b      	ldrh	r3, [r3, #0]
 8022ace:	429a      	cmp	r2, r3
 8022ad0:	d1d0      	bne.n	8022a74 <getpeer+0xa>
}
 8022ad2:	4620      	mov	r0, r4
 8022ad4:	bd70      	pop	{r4, r5, r6, pc}

08022ad6 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8022ad6:	b508      	push	{r3, lr}
  putchar(c);
 8022ad8:	f009 fb24 	bl	802c124 <putchar>
}
 8022adc:	bd08      	pop	{r3, pc}

08022ade <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 8022ade:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8022ae2:	6802      	ldr	r2, [r0, #0]
 8022ae4:	6883      	ldr	r3, [r0, #8]
}
 8022ae6:	58d0      	ldr	r0, [r2, r3]
 8022ae8:	4770      	bx	lr
	...

08022aec <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 8022aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022af0:	b08b      	sub	sp, #44	@ 0x2c
 8022af2:	4604      	mov	r4, r0
 8022af4:	460e      	mov	r6, r1
 8022af6:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8022af8:	2320      	movs	r3, #32
 8022afa:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8022afc:	ab09      	add	r3, sp, #36	@ 0x24
 8022afe:	9303      	str	r3, [sp, #12]
 8022b00:	ab04      	add	r3, sp, #16
 8022b02:	9302      	str	r3, [sp, #8]
 8022b04:	ab05      	add	r3, sp, #20
 8022b06:	9301      	str	r3, [sp, #4]
 8022b08:	ab06      	add	r3, sp, #24
 8022b0a:	9300      	str	r3, [sp, #0]
 8022b0c:	ab07      	add	r3, sp, #28
 8022b0e:	aa08      	add	r2, sp, #32
 8022b10:	4928      	ldr	r1, [pc, #160]	@ (8022bb4 <parse_net+0xc8>)
 8022b12:	f009 fd0b 	bl	802c52c <sscanf>
 8022b16:	2805      	cmp	r0, #5
 8022b18:	d133      	bne.n	8022b82 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022b1a:	9c08      	ldr	r4, [sp, #32]
 8022b1c:	4620      	mov	r0, r4
 8022b1e:	f7fe fd6e 	bl	80215fe <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022b22:	4603      	mov	r3, r0
 8022b24:	2800      	cmp	r0, #0
 8022b26:	d03b      	beq.n	8022ba0 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022b28:	9f07      	ldr	r7, [sp, #28]
 8022b2a:	4638      	mov	r0, r7
 8022b2c:	f7fe fd67 	bl	80215fe <isbyte>
 8022b30:	4603      	mov	r3, r0
 8022b32:	2800      	cmp	r0, #0
 8022b34:	d034      	beq.n	8022ba0 <parse_net+0xb4>
 8022b36:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8022b3a:	4648      	mov	r0, r9
 8022b3c:	f7fe fd5f 	bl	80215fe <isbyte>
 8022b40:	4603      	mov	r3, r0
 8022b42:	b368      	cbz	r0, 8022ba0 <parse_net+0xb4>
 8022b44:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022b48:	4640      	mov	r0, r8
 8022b4a:	f7fe fd58 	bl	80215fe <isbyte>
 8022b4e:	4603      	mov	r3, r0
 8022b50:	b330      	cbz	r0, 8022ba0 <parse_net+0xb4>
 8022b52:	9b04      	ldr	r3, [sp, #16]
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	db29      	blt.n	8022bac <parse_net+0xc0>
 8022b58:	2b20      	cmp	r3, #32
 8022b5a:	dc29      	bgt.n	8022bb0 <parse_net+0xc4>
    len = n;
 8022b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 8022b5e:	043a      	lsls	r2, r7, #16
 8022b60:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8022b64:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8022b68:	ea42 0208 	orr.w	r2, r2, r8
 8022b6c:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022b6e:	9a04      	ldr	r2, [sp, #16]
 8022b70:	b1d2      	cbz	r2, 8022ba8 <parse_net+0xbc>
 8022b72:	f1c2 0220 	rsb	r2, r2, #32
 8022b76:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8022b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8022b7e:	602a      	str	r2, [r5, #0]
 8022b80:	e00e      	b.n	8022ba0 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022b82:	ab09      	add	r3, sp, #36	@ 0x24
 8022b84:	9302      	str	r3, [sp, #8]
 8022b86:	ab05      	add	r3, sp, #20
 8022b88:	9301      	str	r3, [sp, #4]
 8022b8a:	ab06      	add	r3, sp, #24
 8022b8c:	9300      	str	r3, [sp, #0]
 8022b8e:	ab07      	add	r3, sp, #28
 8022b90:	aa08      	add	r2, sp, #32
 8022b92:	4909      	ldr	r1, [pc, #36]	@ (8022bb8 <parse_net+0xcc>)
 8022b94:	4620      	mov	r0, r4
 8022b96:	f009 fcc9 	bl	802c52c <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 8022b9a:	2804      	cmp	r0, #4
 8022b9c:	d0bd      	beq.n	8022b1a <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 8022b9e:	2300      	movs	r3, #0
}
 8022ba0:	4618      	mov	r0, r3
 8022ba2:	b00b      	add	sp, #44	@ 0x2c
 8022ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 8022ba8:	2200      	movs	r2, #0
 8022baa:	e7e8      	b.n	8022b7e <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 8022bac:	2300      	movs	r3, #0
 8022bae:	e7f7      	b.n	8022ba0 <parse_net+0xb4>
 8022bb0:	2300      	movs	r3, #0
  return len;
 8022bb2:	e7f5      	b.n	8022ba0 <parse_net+0xb4>
 8022bb4:	0803a758 	.word	0x0803a758
 8022bb8:	0803a76c 	.word	0x0803a76c

08022bbc <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8022bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bc0:	4691      	mov	r9, r2
 8022bc2:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022bc4:	4604      	mov	r4, r0
 8022bc6:	b150      	cbz	r0, 8022bde <mg_base64_decode+0x22>
 8022bc8:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 8022bcc:	0889      	lsrs	r1, r1, #2
 8022bce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022bd2:	3101      	adds	r1, #1
 8022bd4:	4559      	cmp	r1, fp
 8022bd6:	d847      	bhi.n	8022c68 <mg_base64_decode+0xac>
  size_t len = 0;
 8022bd8:	f04f 0800 	mov.w	r8, #0
 8022bdc:	e003      	b.n	8022be6 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8022bde:	4682      	mov	sl, r0
 8022be0:	e7f4      	b.n	8022bcc <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022be2:	4690      	mov	r8, r2
    src += 4;
 8022be4:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8022be6:	2c00      	cmp	r4, #0
 8022be8:	d03a      	beq.n	8022c60 <mg_base64_decode+0xa4>
 8022bea:	1ce3      	adds	r3, r4, #3
 8022bec:	4553      	cmp	r3, sl
 8022bee:	d237      	bcs.n	8022c60 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8022bf0:	7820      	ldrb	r0, [r4, #0]
 8022bf2:	f7fd f8a5 	bl	801fd40 <mg_base64_decode_single>
 8022bf6:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8022bf8:	7860      	ldrb	r0, [r4, #1]
 8022bfa:	f7fd f8a1 	bl	801fd40 <mg_base64_decode_single>
 8022bfe:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8022c00:	78a0      	ldrb	r0, [r4, #2]
 8022c02:	f7fd f89d 	bl	801fd40 <mg_base64_decode_single>
 8022c06:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8022c08:	78e0      	ldrb	r0, [r4, #3]
 8022c0a:	f7fd f899 	bl	801fd40 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8022c0e:	2e40      	cmp	r6, #64	@ 0x40
 8022c10:	d02a      	beq.n	8022c68 <mg_base64_decode+0xac>
 8022c12:	2e00      	cmp	r6, #0
 8022c14:	db28      	blt.n	8022c68 <mg_base64_decode+0xac>
 8022c16:	2d40      	cmp	r5, #64	@ 0x40
 8022c18:	d026      	beq.n	8022c68 <mg_base64_decode+0xac>
 8022c1a:	2d00      	cmp	r5, #0
 8022c1c:	db24      	blt.n	8022c68 <mg_base64_decode+0xac>
 8022c1e:	2f00      	cmp	r7, #0
 8022c20:	db22      	blt.n	8022c68 <mg_base64_decode+0xac>
 8022c22:	2800      	cmp	r0, #0
 8022c24:	db20      	blt.n	8022c68 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022c26:	112b      	asrs	r3, r5, #4
 8022c28:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 8022c2c:	f108 0201 	add.w	r2, r8, #1
 8022c30:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 8022c34:	78a3      	ldrb	r3, [r4, #2]
 8022c36:	2b3d      	cmp	r3, #61	@ 0x3d
 8022c38:	d0d3      	beq.n	8022be2 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8022c3a:	10bb      	asrs	r3, r7, #2
 8022c3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8022c40:	f108 0102 	add.w	r1, r8, #2
 8022c44:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8022c48:	78e3      	ldrb	r3, [r4, #3]
 8022c4a:	2b3d      	cmp	r3, #61	@ 0x3d
 8022c4c:	d006      	beq.n	8022c5c <mg_base64_decode+0xa0>
 8022c4e:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 8022c52:	f108 0803 	add.w	r8, r8, #3
 8022c56:	f809 0001 	strb.w	r0, [r9, r1]
 8022c5a:	e7c3      	b.n	8022be4 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8022c5c:	4688      	mov	r8, r1
 8022c5e:	e7c1      	b.n	8022be4 <mg_base64_decode+0x28>
  dst[len] = '\0';
 8022c60:	2300      	movs	r3, #0
 8022c62:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 8022c66:	e006      	b.n	8022c76 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 8022c68:	f1bb 0f00 	cmp.w	fp, #0
 8022c6c:	d006      	beq.n	8022c7c <mg_base64_decode+0xc0>
 8022c6e:	f04f 0800 	mov.w	r8, #0
 8022c72:	f889 8000 	strb.w	r8, [r9]
}
 8022c76:	4640      	mov	r0, r8
 8022c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 8022c7c:	46d8      	mov	r8, fp
 8022c7e:	e7fa      	b.n	8022c76 <mg_base64_decode+0xba>

08022c80 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8022c80:	b570      	push	{r4, r5, r6, lr}
 8022c82:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8022c84:	6843      	ldr	r3, [r0, #4]
 8022c86:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 8022c8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8022c8c:	e000      	b.n	8022c90 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 8022c8e:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8022c90:	b139      	cbz	r1, 8022ca2 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8022c92:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 8022c94:	684b      	ldr	r3, [r1, #4]
 8022c96:	42ab      	cmp	r3, r5
 8022c98:	d1f9      	bne.n	8022c8e <mg_resolve_cancel+0xe>
 8022c9a:	4630      	mov	r0, r6
 8022c9c:	f7fe fe12 	bl	80218c4 <mg_dns_free>
 8022ca0:	e7f5      	b.n	8022c8e <mg_resolve_cancel+0xe>
}
 8022ca2:	bd70      	pop	{r4, r5, r6, pc}

08022ca4 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 8022ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ca6:	b083      	sub	sp, #12
 8022ca8:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8022caa:	1886      	adds	r6, r0, r2
 8022cac:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 8022cae:	f04f 0c00 	mov.w	ip, #0
 8022cb2:	f8c4 c000 	str.w	ip, [r4]
 8022cb6:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022cba:	290b      	cmp	r1, #11
 8022cbc:	d934      	bls.n	8022d28 <mg_dns_parse_rr+0x84>
 8022cbe:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022cc0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022cc4:	d833      	bhi.n	8022d2e <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 8022cc6:	42be      	cmp	r6, r7
 8022cc8:	d301      	bcc.n	8022cce <mg_dns_parse_rr+0x2a>
 8022cca:	2000      	movs	r0, #0
 8022ccc:	e02d      	b.n	8022d2a <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8022cce:	4663      	mov	r3, ip
 8022cd0:	f8cd c000 	str.w	ip, [sp]
 8022cd4:	f7fe fed5 	bl	8021a82 <mg_dns_parse_name>
 8022cd8:	b283      	uxth	r3, r0
 8022cda:	8023      	strh	r3, [r4, #0]
 8022cdc:	b34b      	cbz	r3, 8022d32 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 8022cde:	3304      	adds	r3, #4
 8022ce0:	441e      	add	r6, r3
  if (s > e) return 0;
 8022ce2:	42b7      	cmp	r7, r6
 8022ce4:	d327      	bcc.n	8022d36 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8022ce6:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 8022cea:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8022cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022cf2:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022cf4:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8022cf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022cfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022d00:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8022d02:	b975      	cbnz	r5, 8022d22 <mg_dns_parse_rr+0x7e>
  s += 6;
 8022d04:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 8022d06:	429f      	cmp	r7, r3
 8022d08:	d317      	bcc.n	8022d3a <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022d0a:	7931      	ldrb	r1, [r6, #4]
 8022d0c:	7972      	ldrb	r2, [r6, #5]
 8022d0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022d12:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8022d14:	4413      	add	r3, r2
 8022d16:	42bb      	cmp	r3, r7
 8022d18:	d811      	bhi.n	8022d3e <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 8022d1a:	fa12 f080 	uxtah	r0, r2, r0
 8022d1e:	300a      	adds	r0, #10
 8022d20:	e003      	b.n	8022d2a <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8022d22:	b280      	uxth	r0, r0
 8022d24:	3004      	adds	r0, #4
 8022d26:	e000      	b.n	8022d2a <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022d28:	2000      	movs	r0, #0
}
 8022d2a:	b003      	add	sp, #12
 8022d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022d2e:	2000      	movs	r0, #0
 8022d30:	e7fb      	b.n	8022d2a <mg_dns_parse_rr+0x86>
    return 0;
 8022d32:	2000      	movs	r0, #0
 8022d34:	e7f9      	b.n	8022d2a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022d36:	2000      	movs	r0, #0
 8022d38:	e7f7      	b.n	8022d2a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022d3a:	2000      	movs	r0, #0
 8022d3c:	e7f5      	b.n	8022d2a <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 8022d3e:	2000      	movs	r0, #0
 8022d40:	e7f3      	b.n	8022d2a <mg_dns_parse_rr+0x86>

08022d42 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8022d42:	b570      	push	{r4, r5, r6, lr}
 8022d44:	4604      	mov	r4, r0
 8022d46:	460d      	mov	r5, r1
 8022d48:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8022d4a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8022d4e:	b103      	cbz	r3, 8022d52 <mg_call+0x10>
 8022d50:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8022d52:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022d54:	b11b      	cbz	r3, 8022d5e <mg_call+0x1c>
 8022d56:	4632      	mov	r2, r6
 8022d58:	4629      	mov	r1, r5
 8022d5a:	4620      	mov	r0, r4
 8022d5c:	4798      	blx	r3
}
 8022d5e:	bd70      	pop	{r4, r5, r6, pc}

08022d60 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8022d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d62:	4604      	mov	r4, r0
 8022d64:	460d      	mov	r5, r1
 8022d66:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8022d68:	2108      	movs	r1, #8
 8022d6a:	2001      	movs	r0, #1
 8022d6c:	f7ff fe58 	bl	8022a20 <mg_calloc>
  if (fd != NULL) {
 8022d70:	4607      	mov	r7, r0
 8022d72:	b138      	cbz	r0, 8022d84 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8022d74:	68a3      	ldr	r3, [r4, #8]
 8022d76:	4631      	mov	r1, r6
 8022d78:	4628      	mov	r0, r5
 8022d7a:	4798      	blx	r3
 8022d7c:	4605      	mov	r5, r0
 8022d7e:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8022d80:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8022d82:	b108      	cbz	r0, 8022d88 <mg_fs_open+0x28>
}
 8022d84:	4638      	mov	r0, r7
 8022d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8022d88:	4638      	mov	r0, r7
 8022d8a:	f7f7 ffa7 	bl	801acdc <vPortFree>
      fd = NULL;
 8022d8e:	462f      	mov	r7, r5
  return fd;
 8022d90:	e7f8      	b.n	8022d84 <mg_fs_open+0x24>

08022d92 <mg_fs_close>:
  if (fd != NULL) {
 8022d92:	b148      	cbz	r0, 8022da8 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 8022d94:	b510      	push	{r4, lr}
 8022d96:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 8022d98:	6843      	ldr	r3, [r0, #4]
 8022d9a:	68db      	ldr	r3, [r3, #12]
 8022d9c:	6800      	ldr	r0, [r0, #0]
 8022d9e:	4798      	blx	r3
    free(fd);
 8022da0:	4620      	mov	r0, r4
 8022da2:	f7f7 ff9b 	bl	801acdc <vPortFree>
}
 8022da6:	bd10      	pop	{r4, pc}
 8022da8:	4770      	bx	lr
	...

08022dac <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 8022dac:	b510      	push	{r4, lr}
 8022dae:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8022db0:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022db4:	f7ff ffed 	bl	8022d92 <mg_fs_close>
  c->pfn_data = NULL;
 8022db8:	2200      	movs	r2, #0
 8022dba:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 8022dbe:	4b05      	ldr	r3, [pc, #20]	@ (8022dd4 <restore_http_cb+0x28>)
 8022dc0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 8022dc4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8022dc8:	f362 13c7 	bfi	r3, r2, #7, #1
 8022dcc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8022dd0:	bd10      	pop	{r4, pc}
 8022dd2:	bf00      	nop
 8022dd4:	080266fd 	.word	0x080266fd

08022dd8 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8022dd8:	b470      	push	{r4, r5, r6}
 8022dda:	b083      	sub	sp, #12
 8022ddc:	ab02      	add	r3, sp, #8
 8022dde:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8022de2:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022de4:	e000      	b.n	8022de8 <mg_to_size_t+0x10>
 8022de6:	3301      	adds	r3, #1
 8022de8:	9c01      	ldr	r4, [sp, #4]
 8022dea:	429c      	cmp	r4, r3
 8022dec:	d905      	bls.n	8022dfa <mg_to_size_t+0x22>
 8022dee:	9900      	ldr	r1, [sp, #0]
 8022df0:	5cc9      	ldrb	r1, [r1, r3]
 8022df2:	2920      	cmp	r1, #32
 8022df4:	d0f7      	beq.n	8022de6 <mg_to_size_t+0xe>
 8022df6:	2909      	cmp	r1, #9
 8022df8:	d0f5      	beq.n	8022de6 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8022dfa:	429c      	cmp	r4, r3
 8022dfc:	d906      	bls.n	8022e0c <mg_to_size_t+0x34>
 8022dfe:	9900      	ldr	r1, [sp, #0]
 8022e00:	5cc9      	ldrb	r1, [r1, r3]
 8022e02:	292d      	cmp	r1, #45	@ 0x2d
 8022e04:	d02c      	beq.n	8022e60 <mg_to_size_t+0x88>
 8022e06:	2500      	movs	r5, #0
 8022e08:	4628      	mov	r0, r5
 8022e0a:	e001      	b.n	8022e10 <mg_to_size_t+0x38>
 8022e0c:	2500      	movs	r5, #0
 8022e0e:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022e10:	429c      	cmp	r4, r3
 8022e12:	d917      	bls.n	8022e44 <mg_to_size_t+0x6c>
 8022e14:	9900      	ldr	r1, [sp, #0]
 8022e16:	5cc9      	ldrb	r1, [r1, r3]
 8022e18:	292f      	cmp	r1, #47	@ 0x2f
 8022e1a:	d913      	bls.n	8022e44 <mg_to_size_t+0x6c>
 8022e1c:	2939      	cmp	r1, #57	@ 0x39
 8022e1e:	d811      	bhi.n	8022e44 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8022e20:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8022e22:	4e15      	ldr	r6, [pc, #84]	@ (8022e78 <mg_to_size_t+0xa0>)
 8022e24:	42b0      	cmp	r0, r6
 8022e26:	d81d      	bhi.n	8022e64 <mg_to_size_t+0x8c>
    result *= 10;
 8022e28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022e2c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8022e30:	43ce      	mvns	r6, r1
 8022e32:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8022e36:	d317      	bcc.n	8022e68 <mg_to_size_t+0x90>
    result += digit;
 8022e38:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8022e3c:	3301      	adds	r3, #1
 8022e3e:	3501      	adds	r5, #1
 8022e40:	e7e6      	b.n	8022e10 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022e42:	3301      	adds	r3, #1
 8022e44:	429c      	cmp	r4, r3
 8022e46:	d905      	bls.n	8022e54 <mg_to_size_t+0x7c>
 8022e48:	9900      	ldr	r1, [sp, #0]
 8022e4a:	5cc9      	ldrb	r1, [r1, r3]
 8022e4c:	2920      	cmp	r1, #32
 8022e4e:	d0f8      	beq.n	8022e42 <mg_to_size_t+0x6a>
 8022e50:	2909      	cmp	r1, #9
 8022e52:	d0f6      	beq.n	8022e42 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022e54:	b155      	cbz	r5, 8022e6c <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8022e56:	429c      	cmp	r4, r3
 8022e58:	d10c      	bne.n	8022e74 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8022e5a:	6010      	str	r0, [r2, #0]
  return true;
 8022e5c:	2001      	movs	r0, #1
 8022e5e:	e006      	b.n	8022e6e <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8022e60:	2000      	movs	r0, #0
 8022e62:	e004      	b.n	8022e6e <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8022e64:	2000      	movs	r0, #0
 8022e66:	e002      	b.n	8022e6e <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8022e68:	2000      	movs	r0, #0
 8022e6a:	e000      	b.n	8022e6e <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022e6c:	2000      	movs	r0, #0
}
 8022e6e:	b003      	add	sp, #12
 8022e70:	bc70      	pop	{r4, r5, r6}
 8022e72:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8022e74:	2000      	movs	r0, #0
 8022e76:	e7fa      	b.n	8022e6e <mg_to_size_t+0x96>
 8022e78:	19999999 	.word	0x19999999

08022e7c <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8022e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e7e:	4606      	mov	r6, r0
 8022e80:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8022e82:	2400      	movs	r4, #0
 8022e84:	e007      	b.n	8022e96 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022e86:	1933      	adds	r3, r6, r4
 8022e88:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022e8c:	2b0a      	cmp	r3, #10
 8022e8e:	d10d      	bne.n	8022eac <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8022e90:	1c60      	adds	r0, r4, #1
 8022e92:	e01b      	b.n	8022ecc <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8022e94:	3401      	adds	r4, #1
 8022e96:	42bc      	cmp	r4, r7
 8022e98:	d217      	bcs.n	8022eca <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8022e9a:	5d35      	ldrb	r5, [r6, r4]
 8022e9c:	4628      	mov	r0, r5
 8022e9e:	f7fd f8d4 	bl	802004a <isok>
 8022ea2:	b1a0      	cbz	r0, 8022ece <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022ea4:	2c00      	cmp	r4, #0
 8022ea6:	d0f5      	beq.n	8022e94 <mg_http_get_request_len+0x18>
 8022ea8:	2d0a      	cmp	r5, #10
 8022eaa:	d0ec      	beq.n	8022e86 <mg_http_get_request_len+0xa>
 8022eac:	2c03      	cmp	r4, #3
 8022eae:	d9f1      	bls.n	8022e94 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8022eb0:	2d0a      	cmp	r5, #10
 8022eb2:	d1ef      	bne.n	8022e94 <mg_http_get_request_len+0x18>
 8022eb4:	1933      	adds	r3, r6, r4
 8022eb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022eba:	2b0d      	cmp	r3, #13
 8022ebc:	d1ea      	bne.n	8022e94 <mg_http_get_request_len+0x18>
 8022ebe:	1933      	adds	r3, r6, r4
 8022ec0:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8022ec4:	2b0a      	cmp	r3, #10
 8022ec6:	d1e5      	bne.n	8022e94 <mg_http_get_request_len+0x18>
 8022ec8:	e7e2      	b.n	8022e90 <mg_http_get_request_len+0x14>
  return 0;
 8022eca:	2000      	movs	r0, #0
}
 8022ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8022ece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022ed2:	e7fb      	b.n	8022ecc <mg_http_get_request_len+0x50>

08022ed4 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8022ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ed8:	4605      	mov	r5, r0
 8022eda:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8022edc:	4608      	mov	r0, r1
 8022ede:	f7ed f9df 	bl	80102a0 <strlen>
 8022ee2:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8022ee4:	2400      	movs	r4, #0
 8022ee6:	e000      	b.n	8022eea <mg_http_get_header+0x16>
 8022ee8:	3401      	adds	r4, #1
 8022eea:	2c1d      	cmp	r4, #29
 8022eec:	d819      	bhi.n	8022f22 <mg_http_get_header+0x4e>
 8022eee:	1ca3      	adds	r3, r4, #2
 8022ef0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8022ef4:	685a      	ldr	r2, [r3, #4]
 8022ef6:	b17a      	cbz	r2, 8022f18 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8022ef8:	0123      	lsls	r3, r4, #4
 8022efa:	3328      	adds	r3, #40	@ 0x28
 8022efc:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8022f00:	42b2      	cmp	r2, r6
 8022f02:	d1f1      	bne.n	8022ee8 <mg_http_get_header+0x14>
 8022f04:	1ca3      	adds	r3, r4, #2
 8022f06:	011b      	lsls	r3, r3, #4
 8022f08:	4632      	mov	r2, r6
 8022f0a:	4639      	mov	r1, r7
 8022f0c:	58e8      	ldr	r0, [r5, r3]
 8022f0e:	f7fd f867 	bl	801ffe0 <mg_ncasecmp>
 8022f12:	2800      	cmp	r0, #0
 8022f14:	d1e8      	bne.n	8022ee8 <mg_http_get_header+0x14>
 8022f16:	e001      	b.n	8022f1c <mg_http_get_header+0x48>
  return NULL;
 8022f18:	f04f 0800 	mov.w	r8, #0
}
 8022f1c:	4640      	mov	r0, r8
 8022f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8022f22:	f04f 0800 	mov.w	r8, #0
 8022f26:	e7f9      	b.n	8022f1c <mg_http_get_header+0x48>

08022f28 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8022f28:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8022f2a:	6880      	ldr	r0, [r0, #8]
 8022f2c:	f007 f96c 	bl	802a208 <atoi>
}
 8022f30:	bd08      	pop	{r3, pc}
	...

08022f34 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8022f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f38:	b095      	sub	sp, #84	@ 0x54
 8022f3a:	ac08      	add	r4, sp, #32
 8022f3c:	e884 0003 	stmia.w	r4, {r0, r1}
 8022f40:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8022f42:	4606      	mov	r6, r0
  int len = (int) json.len;
 8022f44:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8022f46:	469a      	mov	sl, r3
 8022f48:	b113      	cbz	r3, 8022f50 <mg_json_get+0x1c>
 8022f4a:	2300      	movs	r3, #0
 8022f4c:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8022f50:	9b02      	ldr	r3, [sp, #8]
 8022f52:	781b      	ldrb	r3, [r3, #0]
 8022f54:	2b24      	cmp	r3, #36	@ 0x24
 8022f56:	f040 8232 	bne.w	80233be <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8022f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022f5e:	9303      	str	r3, [sp, #12]
 8022f60:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8022f62:	2301      	movs	r3, #1
 8022f64:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8022f66:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8022f6a:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8022f6c:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8022f70:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8022f72:	465b      	mov	r3, fp
 8022f74:	f8cd a018 	str.w	sl, [sp, #24]
 8022f78:	e190      	b.n	802329c <mg_json_get+0x368>
        if (depth == ed) j = i;
 8022f7a:	455f      	cmp	r7, fp
 8022f7c:	d029      	beq.n	8022fd2 <mg_json_get+0x9e>
        if (c == '{') {
 8022f7e:	2d7b      	cmp	r5, #123	@ 0x7b
 8022f80:	d029      	beq.n	8022fd6 <mg_json_get+0xa2>
        } else if (c == '[') {
 8022f82:	2d5b      	cmp	r5, #91	@ 0x5b
 8022f84:	d047      	beq.n	8023016 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022f86:	2d5d      	cmp	r5, #93	@ 0x5d
 8022f88:	d07a      	beq.n	8023080 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022f8a:	2d74      	cmp	r5, #116	@ 0x74
 8022f8c:	f000 80a4 	beq.w	80230d8 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022f90:	2d6e      	cmp	r5, #110	@ 0x6e
 8022f92:	f000 80b0 	beq.w	80230f6 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022f96:	2d66      	cmp	r5, #102	@ 0x66
 8022f98:	f000 80bc 	beq.w	8023114 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8022f9c:	2d2d      	cmp	r5, #45	@ 0x2d
 8022f9e:	d005      	beq.n	8022fac <mg_json_get+0x78>
 8022fa0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022fa4:	b2db      	uxtb	r3, r3
 8022fa6:	2b09      	cmp	r3, #9
 8022fa8:	f200 80c3 	bhi.w	8023132 <mg_json_get+0x1fe>
          int numlen = 0;
 8022fac:	2300      	movs	r3, #0
 8022fae:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8022fb0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022fb2:	eba8 0104 	sub.w	r1, r8, r4
 8022fb6:	4648      	mov	r0, r9
 8022fb8:	f7fd fcc2 	bl	8020940 <mg_atod>
          i += numlen - 1;
 8022fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022fbe:	3b01      	subs	r3, #1
 8022fc0:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8022fc2:	455f      	cmp	r7, fp
 8022fc4:	f000 80c6 	beq.w	8023154 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8022fc8:	455f      	cmp	r7, fp
 8022fca:	f000 80da 	beq.w	8023182 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8022fce:	2303      	movs	r3, #3
 8022fd0:	e163      	b.n	802329a <mg_json_get+0x366>
        if (depth == ed) j = i;
 8022fd2:	9405      	str	r4, [sp, #20]
 8022fd4:	e7d3      	b.n	8022f7e <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022fd6:	2f1d      	cmp	r7, #29
 8022fd8:	f300 81f4 	bgt.w	80233c4 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022fdc:	455f      	cmp	r7, fp
 8022fde:	d007      	beq.n	8022ff0 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8022fe0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022fe4:	446b      	add	r3, sp
 8022fe6:	f803 5c20 	strb.w	r5, [r3, #-32]
 8022fea:	3701      	adds	r7, #1
          expecting = S_KEY;
 8022fec:	2301      	movs	r3, #1
          break;
 8022fee:	e154      	b.n	802329a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022ff0:	9b02      	ldr	r3, [sp, #8]
 8022ff2:	9a04      	ldr	r2, [sp, #16]
 8022ff4:	5c9b      	ldrb	r3, [r3, r2]
 8022ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8022ff8:	d1f2      	bne.n	8022fe0 <mg_json_get+0xac>
 8022ffa:	9b01      	ldr	r3, [sp, #4]
 8022ffc:	9a03      	ldr	r2, [sp, #12]
 8022ffe:	4293      	cmp	r3, r2
 8023000:	d1ee      	bne.n	8022fe0 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8023002:	f10b 0b01 	add.w	fp, fp, #1
 8023006:	9b04      	ldr	r3, [sp, #16]
 8023008:	3301      	adds	r3, #1
 802300a:	9304      	str	r3, [sp, #16]
 802300c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023010:	9303      	str	r3, [sp, #12]
 8023012:	9301      	str	r3, [sp, #4]
 8023014:	e7e4      	b.n	8022fe0 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8023016:	2f1d      	cmp	r7, #29
 8023018:	f300 81d7 	bgt.w	80233ca <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802301c:	455f      	cmp	r7, fp
 802301e:	d006      	beq.n	802302e <mg_json_get+0xfa>
          nesting[depth++] = c;
 8023020:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023024:	446a      	add	r2, sp
 8023026:	f802 5c20 	strb.w	r5, [r2, #-32]
 802302a:	3701      	adds	r7, #1
          break;
 802302c:	e135      	b.n	802329a <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 802302e:	9a02      	ldr	r2, [sp, #8]
 8023030:	9904      	ldr	r1, [sp, #16]
 8023032:	5c52      	ldrb	r2, [r2, r1]
 8023034:	2a5b      	cmp	r2, #91	@ 0x5b
 8023036:	d1f3      	bne.n	8023020 <mg_json_get+0xec>
 8023038:	9a01      	ldr	r2, [sp, #4]
 802303a:	9903      	ldr	r1, [sp, #12]
 802303c:	428a      	cmp	r2, r1
 802303e:	d1ef      	bne.n	8023020 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8023040:	f10b 0b01 	add.w	fp, fp, #1
 8023044:	9804      	ldr	r0, [sp, #16]
 8023046:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8023048:	2100      	movs	r1, #0
 802304a:	f8dd c008 	ldr.w	ip, [sp, #8]
 802304e:	e005      	b.n	802305c <mg_json_get+0x128>
              ei *= 10;
 8023050:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8023054:	3a30      	subs	r2, #48	@ 0x30
 8023056:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802305a:	3001      	adds	r0, #1
 802305c:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8023060:	2a5d      	cmp	r2, #93	@ 0x5d
 8023062:	d001      	beq.n	8023068 <mg_json_get+0x134>
 8023064:	2a00      	cmp	r2, #0
 8023066:	d1f3      	bne.n	8023050 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8023068:	9004      	str	r0, [sp, #16]
 802306a:	9103      	str	r1, [sp, #12]
 802306c:	b12a      	cbz	r2, 802307a <mg_json_get+0x146>
 802306e:	4602      	mov	r2, r0
 8023070:	3201      	adds	r2, #1
 8023072:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8023074:	2200      	movs	r2, #0
 8023076:	9201      	str	r2, [sp, #4]
 8023078:	e7d2      	b.n	8023020 <mg_json_get+0xec>
 802307a:	2200      	movs	r2, #0
 802307c:	9201      	str	r2, [sp, #4]
 802307e:	e7cf      	b.n	8023020 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8023080:	2f00      	cmp	r7, #0
 8023082:	dd82      	ble.n	8022f8a <mg_json_get+0x56>
          MG_EOO(']');
 8023084:	455f      	cmp	r7, fp
 8023086:	d020      	beq.n	80230ca <mg_json_get+0x196>
 8023088:	3f01      	subs	r7, #1
 802308a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802308e:	446b      	add	r3, sp
 8023090:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8023094:	3302      	adds	r3, #2
 8023096:	429d      	cmp	r5, r3
 8023098:	f040 819a 	bne.w	80233d0 <mg_json_get+0x49c>
 802309c:	455f      	cmp	r7, fp
 802309e:	d190      	bne.n	8022fc2 <mg_json_get+0x8e>
 80230a0:	9b02      	ldr	r3, [sp, #8]
 80230a2:	9a04      	ldr	r2, [sp, #16]
 80230a4:	5c9b      	ldrb	r3, [r3, r2]
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	d18b      	bne.n	8022fc2 <mg_json_get+0x8e>
 80230aa:	9b01      	ldr	r3, [sp, #4]
 80230ac:	9a03      	ldr	r2, [sp, #12]
 80230ae:	4293      	cmp	r3, r2
 80230b0:	d187      	bne.n	8022fc2 <mg_json_get+0x8e>
 80230b2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80230b6:	f1ba 0f00 	cmp.w	sl, #0
 80230ba:	d004      	beq.n	80230c6 <mg_json_get+0x192>
 80230bc:	9b05      	ldr	r3, [sp, #20]
 80230be:	1ae3      	subs	r3, r4, r3
 80230c0:	3301      	adds	r3, #1
 80230c2:	f8ca 3000 	str.w	r3, [sl]
 80230c6:	9d05      	ldr	r5, [sp, #20]
 80230c8:	e175      	b.n	80233b6 <mg_json_get+0x482>
 80230ca:	9b01      	ldr	r3, [sp, #4]
 80230cc:	9a03      	ldr	r2, [sp, #12]
 80230ce:	4293      	cmp	r3, r2
 80230d0:	d0da      	beq.n	8023088 <mg_json_get+0x154>
 80230d2:	f06f 0502 	mvn.w	r5, #2
 80230d6:	e16e      	b.n	80233b6 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80230d8:	1ce3      	adds	r3, r4, #3
 80230da:	9307      	str	r3, [sp, #28]
 80230dc:	4543      	cmp	r3, r8
 80230de:	f6bf af57 	bge.w	8022f90 <mg_json_get+0x5c>
 80230e2:	2204      	movs	r2, #4
 80230e4:	49a3      	ldr	r1, [pc, #652]	@ (8023374 <mg_json_get+0x440>)
 80230e6:	4648      	mov	r0, r9
 80230e8:	f009 fd2e 	bl	802cb48 <memcmp>
 80230ec:	2800      	cmp	r0, #0
 80230ee:	f47f af4f 	bne.w	8022f90 <mg_json_get+0x5c>
          i += 3;
 80230f2:	9c07      	ldr	r4, [sp, #28]
 80230f4:	e765      	b.n	8022fc2 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80230f6:	1ce3      	adds	r3, r4, #3
 80230f8:	9307      	str	r3, [sp, #28]
 80230fa:	4543      	cmp	r3, r8
 80230fc:	f6bf af4b 	bge.w	8022f96 <mg_json_get+0x62>
 8023100:	2204      	movs	r2, #4
 8023102:	499d      	ldr	r1, [pc, #628]	@ (8023378 <mg_json_get+0x444>)
 8023104:	4648      	mov	r0, r9
 8023106:	f009 fd1f 	bl	802cb48 <memcmp>
 802310a:	2800      	cmp	r0, #0
 802310c:	f47f af43 	bne.w	8022f96 <mg_json_get+0x62>
          i += 3;
 8023110:	9c07      	ldr	r4, [sp, #28]
 8023112:	e756      	b.n	8022fc2 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8023114:	1d23      	adds	r3, r4, #4
 8023116:	9307      	str	r3, [sp, #28]
 8023118:	4543      	cmp	r3, r8
 802311a:	f6bf af3f 	bge.w	8022f9c <mg_json_get+0x68>
 802311e:	2205      	movs	r2, #5
 8023120:	4996      	ldr	r1, [pc, #600]	@ (802337c <mg_json_get+0x448>)
 8023122:	4648      	mov	r0, r9
 8023124:	f009 fd10 	bl	802cb48 <memcmp>
 8023128:	2800      	cmp	r0, #0
 802312a:	f47f af37 	bne.w	8022f9c <mg_json_get+0x68>
          i += 4;
 802312e:	9c07      	ldr	r4, [sp, #28]
 8023130:	e747      	b.n	8022fc2 <mg_json_get+0x8e>
        } else if (c == '"') {
 8023132:	2d22      	cmp	r5, #34	@ 0x22
 8023134:	f040 814f 	bne.w	80233d6 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8023138:	f10a 0001 	add.w	r0, sl, #1
 802313c:	eba8 0104 	sub.w	r1, r8, r4
 8023140:	3901      	subs	r1, #1
 8023142:	4430      	add	r0, r6
 8023144:	f7fd fbd5 	bl	80208f2 <mg_pass_string>
          if (n < 0) return n;
 8023148:	1e05      	subs	r5, r0, #0
 802314a:	f2c0 8134 	blt.w	80233b6 <mg_json_get+0x482>
          i += n + 1;
 802314e:	3501      	adds	r5, #1
 8023150:	442c      	add	r4, r5
 8023152:	e736      	b.n	8022fc2 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8023154:	9b02      	ldr	r3, [sp, #8]
 8023156:	9a04      	ldr	r2, [sp, #16]
 8023158:	5c9b      	ldrb	r3, [r3, r2]
 802315a:	2b00      	cmp	r3, #0
 802315c:	f47f af34 	bne.w	8022fc8 <mg_json_get+0x94>
 8023160:	9b01      	ldr	r3, [sp, #4]
 8023162:	9a03      	ldr	r2, [sp, #12]
 8023164:	4293      	cmp	r3, r2
 8023166:	f47f af2f 	bne.w	8022fc8 <mg_json_get+0x94>
 802316a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802316e:	f1ba 0f00 	cmp.w	sl, #0
 8023172:	d004      	beq.n	802317e <mg_json_get+0x24a>
 8023174:	9b05      	ldr	r3, [sp, #20]
 8023176:	1ae3      	subs	r3, r4, r3
 8023178:	3301      	adds	r3, #1
 802317a:	f8ca 3000 	str.w	r3, [sl]
 802317e:	9d05      	ldr	r5, [sp, #20]
 8023180:	e119      	b.n	80233b6 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8023182:	9b03      	ldr	r3, [sp, #12]
 8023184:	2b00      	cmp	r3, #0
 8023186:	f2c0 8110 	blt.w	80233aa <mg_json_get+0x476>
 802318a:	9b01      	ldr	r3, [sp, #4]
 802318c:	3301      	adds	r3, #1
 802318e:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8023190:	2303      	movs	r3, #3
 8023192:	e082      	b.n	802329a <mg_json_get+0x366>
        if (c == '"') {
 8023194:	2d22      	cmp	r5, #34	@ 0x22
 8023196:	d014      	beq.n	80231c2 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8023198:	2d7d      	cmp	r5, #125	@ 0x7d
 802319a:	f040 8125 	bne.w	80233e8 <mg_json_get+0x4b4>
          MG_EOO('}');
 802319e:	455f      	cmp	r7, fp
 80231a0:	d053      	beq.n	802324a <mg_json_get+0x316>
 80231a2:	3f01      	subs	r7, #1
 80231a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80231a8:	446b      	add	r3, sp
 80231aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80231ae:	3302      	adds	r3, #2
 80231b0:	429d      	cmp	r5, r3
 80231b2:	f040 811c 	bne.w	80233ee <mg_json_get+0x4ba>
 80231b6:	455f      	cmp	r7, fp
 80231b8:	d04e      	beq.n	8023258 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 80231ba:	455f      	cmp	r7, fp
 80231bc:	d061      	beq.n	8023282 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 80231be:	2303      	movs	r3, #3
 80231c0:	e06b      	b.n	802329a <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80231c2:	f104 0901 	add.w	r9, r4, #1
 80231c6:	44b1      	add	r9, r6
 80231c8:	eba8 0104 	sub.w	r1, r8, r4
 80231cc:	3901      	subs	r1, #1
 80231ce:	4648      	mov	r0, r9
 80231d0:	f7fd fb8f 	bl	80208f2 <mg_pass_string>
          if (n < 0) return n;
 80231d4:	1e05      	subs	r5, r0, #0
 80231d6:	f2c0 80ee 	blt.w	80233b6 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80231da:	1c63      	adds	r3, r4, #1
 80231dc:	442b      	add	r3, r5
 80231de:	4543      	cmp	r3, r8
 80231e0:	f280 80fc 	bge.w	80233dc <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80231e4:	455f      	cmp	r7, fp
 80231e6:	f2c0 80fc 	blt.w	80233e2 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80231ea:	d005      	beq.n	80231f8 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 80231ec:	455f      	cmp	r7, fp
 80231ee:	d00d      	beq.n	802320c <mg_json_get+0x2d8>
          i += n + 1;
 80231f0:	3501      	adds	r5, #1
 80231f2:	442c      	add	r4, r5
          expecting = S_COLON;
 80231f4:	2302      	movs	r3, #2
 80231f6:	e050      	b.n	802329a <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80231f8:	9b02      	ldr	r3, [sp, #8]
 80231fa:	9a04      	ldr	r2, [sp, #16]
 80231fc:	4413      	add	r3, r2
 80231fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023202:	2b2e      	cmp	r3, #46	@ 0x2e
 8023204:	d0f2      	beq.n	80231ec <mg_json_get+0x2b8>
 8023206:	f06f 0502 	mvn.w	r5, #2
 802320a:	e0d4      	b.n	80233b6 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 802320c:	9b02      	ldr	r3, [sp, #8]
 802320e:	9a04      	ldr	r2, [sp, #16]
 8023210:	4413      	add	r3, r2
 8023212:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8023216:	2b2e      	cmp	r3, #46	@ 0x2e
 8023218:	d1ea      	bne.n	80231f0 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802321a:	462a      	mov	r2, r5
 802321c:	9b02      	ldr	r3, [sp, #8]
 802321e:	9904      	ldr	r1, [sp, #16]
 8023220:	1859      	adds	r1, r3, r1
 8023222:	4648      	mov	r0, r9
 8023224:	f009 fd59 	bl	802ccda <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8023228:	2800      	cmp	r0, #0
 802322a:	d1e1      	bne.n	80231f0 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802322c:	9904      	ldr	r1, [sp, #16]
 802322e:	194b      	adds	r3, r1, r5
 8023230:	9a02      	ldr	r2, [sp, #8]
 8023232:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8023234:	b12a      	cbz	r2, 8023242 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8023236:	2a2e      	cmp	r2, #46	@ 0x2e
 8023238:	d005      	beq.n	8023246 <mg_json_get+0x312>
 802323a:	2a5b      	cmp	r2, #91	@ 0x5b
 802323c:	d1d8      	bne.n	80231f0 <mg_json_get+0x2bc>
            pos += n;
 802323e:	9304      	str	r3, [sp, #16]
 8023240:	e7d6      	b.n	80231f0 <mg_json_get+0x2bc>
 8023242:	9304      	str	r3, [sp, #16]
 8023244:	e7d4      	b.n	80231f0 <mg_json_get+0x2bc>
 8023246:	9304      	str	r3, [sp, #16]
 8023248:	e7d2      	b.n	80231f0 <mg_json_get+0x2bc>
          MG_EOO('}');
 802324a:	9b01      	ldr	r3, [sp, #4]
 802324c:	9a03      	ldr	r2, [sp, #12]
 802324e:	4293      	cmp	r3, r2
 8023250:	d0a7      	beq.n	80231a2 <mg_json_get+0x26e>
 8023252:	f06f 0502 	mvn.w	r5, #2
 8023256:	e0ae      	b.n	80233b6 <mg_json_get+0x482>
 8023258:	9b02      	ldr	r3, [sp, #8]
 802325a:	9a04      	ldr	r2, [sp, #16]
 802325c:	5c9b      	ldrb	r3, [r3, r2]
 802325e:	2b00      	cmp	r3, #0
 8023260:	d1ab      	bne.n	80231ba <mg_json_get+0x286>
 8023262:	9b01      	ldr	r3, [sp, #4]
 8023264:	9a03      	ldr	r2, [sp, #12]
 8023266:	4293      	cmp	r3, r2
 8023268:	d1a7      	bne.n	80231ba <mg_json_get+0x286>
 802326a:	f8dd a018 	ldr.w	sl, [sp, #24]
 802326e:	f1ba 0f00 	cmp.w	sl, #0
 8023272:	d004      	beq.n	802327e <mg_json_get+0x34a>
 8023274:	9b05      	ldr	r3, [sp, #20]
 8023276:	1ae3      	subs	r3, r4, r3
 8023278:	3301      	adds	r3, #1
 802327a:	f8ca 3000 	str.w	r3, [sl]
 802327e:	9d05      	ldr	r5, [sp, #20]
 8023280:	e099      	b.n	80233b6 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8023282:	9b03      	ldr	r3, [sp, #12]
 8023284:	2b00      	cmp	r3, #0
 8023286:	f2c0 8092 	blt.w	80233ae <mg_json_get+0x47a>
 802328a:	9b01      	ldr	r3, [sp, #4]
 802328c:	3301      	adds	r3, #1
 802328e:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8023290:	2303      	movs	r3, #3
 8023292:	e002      	b.n	802329a <mg_json_get+0x366>
        if (c == ':') {
 8023294:	2d3a      	cmp	r5, #58	@ 0x3a
 8023296:	d11d      	bne.n	80232d4 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8023298:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802329a:	3401      	adds	r4, #1
 802329c:	4544      	cmp	r4, r8
 802329e:	f280 8088 	bge.w	80233b2 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 80232a2:	46a2      	mov	sl, r4
 80232a4:	eb06 0904 	add.w	r9, r6, r4
 80232a8:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80232aa:	2d20      	cmp	r5, #32
 80232ac:	d0f5      	beq.n	802329a <mg_json_get+0x366>
 80232ae:	2d09      	cmp	r5, #9
 80232b0:	d0f3      	beq.n	802329a <mg_json_get+0x366>
 80232b2:	2d0a      	cmp	r5, #10
 80232b4:	d0f1      	beq.n	802329a <mg_json_get+0x366>
 80232b6:	2d0d      	cmp	r5, #13
 80232b8:	d0ef      	beq.n	802329a <mg_json_get+0x366>
    switch (expecting) {
 80232ba:	2b03      	cmp	r3, #3
 80232bc:	d8ed      	bhi.n	802329a <mg_json_get+0x366>
 80232be:	a201      	add	r2, pc, #4	@ (adr r2, 80232c4 <mg_json_get+0x390>)
 80232c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80232c4:	08022f7b 	.word	0x08022f7b
 80232c8:	08023195 	.word	0x08023195
 80232cc:	08023295 	.word	0x08023295
 80232d0:	080232db 	.word	0x080232db
          return MG_JSON_INVALID;
 80232d4:	f06f 0501 	mvn.w	r5, #1
 80232d8:	e06d      	b.n	80233b6 <mg_json_get+0x482>
        if (depth <= 0) {
 80232da:	2f00      	cmp	r7, #0
 80232dc:	f340 808a 	ble.w	80233f4 <mg_json_get+0x4c0>
        } else if (c == ',') {
 80232e0:	2d2c      	cmp	r5, #44	@ 0x2c
 80232e2:	d01e      	beq.n	8023322 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 80232e4:	2d5d      	cmp	r5, #93	@ 0x5d
 80232e6:	d002      	beq.n	80232ee <mg_json_get+0x3ba>
 80232e8:	2d7d      	cmp	r5, #125	@ 0x7d
 80232ea:	f040 8086 	bne.w	80233fa <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80232ee:	455f      	cmp	r7, fp
 80232f0:	d021      	beq.n	8023336 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80232f2:	455f      	cmp	r7, fp
 80232f4:	d02b      	beq.n	802334e <mg_json_get+0x41a>
          MG_EOO('O');
 80232f6:	455f      	cmp	r7, fp
 80232f8:	d035      	beq.n	8023366 <mg_json_get+0x432>
 80232fa:	3f01      	subs	r7, #1
 80232fc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8023300:	446a      	add	r2, sp
 8023302:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8023306:	3202      	adds	r2, #2
 8023308:	4295      	cmp	r5, r2
 802330a:	d179      	bne.n	8023400 <mg_json_get+0x4cc>
 802330c:	455f      	cmp	r7, fp
 802330e:	d037      	beq.n	8023380 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8023310:	455f      	cmp	r7, fp
 8023312:	d1c2      	bne.n	802329a <mg_json_get+0x366>
 8023314:	9a03      	ldr	r2, [sp, #12]
 8023316:	2a00      	cmp	r2, #0
 8023318:	dbbf      	blt.n	802329a <mg_json_get+0x366>
 802331a:	9a01      	ldr	r2, [sp, #4]
 802331c:	3201      	adds	r2, #1
 802331e:	9201      	str	r2, [sp, #4]
 8023320:	e7bb      	b.n	802329a <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8023322:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8023326:	446b      	add	r3, sp
 8023328:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 802332c:	2b7b      	cmp	r3, #123	@ 0x7b
 802332e:	bf14      	ite	ne
 8023330:	2300      	movne	r3, #0
 8023332:	2301      	moveq	r3, #1
 8023334:	e7b1      	b.n	802329a <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8023336:	2d7d      	cmp	r5, #125	@ 0x7d
 8023338:	d1db      	bne.n	80232f2 <mg_json_get+0x3be>
 802333a:	9a02      	ldr	r2, [sp, #8]
 802333c:	9904      	ldr	r1, [sp, #16]
 802333e:	440a      	add	r2, r1
 8023340:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8023344:	2a2e      	cmp	r2, #46	@ 0x2e
 8023346:	d1d4      	bne.n	80232f2 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 8023348:	f06f 0502 	mvn.w	r5, #2
 802334c:	e033      	b.n	80233b6 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 802334e:	2d5d      	cmp	r5, #93	@ 0x5d
 8023350:	d1d1      	bne.n	80232f6 <mg_json_get+0x3c2>
 8023352:	9a02      	ldr	r2, [sp, #8]
 8023354:	9904      	ldr	r1, [sp, #16]
 8023356:	440a      	add	r2, r1
 8023358:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802335c:	2a2c      	cmp	r2, #44	@ 0x2c
 802335e:	d1ca      	bne.n	80232f6 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8023360:	f06f 0502 	mvn.w	r5, #2
 8023364:	e027      	b.n	80233b6 <mg_json_get+0x482>
          MG_EOO('O');
 8023366:	9a01      	ldr	r2, [sp, #4]
 8023368:	9903      	ldr	r1, [sp, #12]
 802336a:	428a      	cmp	r2, r1
 802336c:	d0c5      	beq.n	80232fa <mg_json_get+0x3c6>
 802336e:	f06f 0502 	mvn.w	r5, #2
 8023372:	e020      	b.n	80233b6 <mg_json_get+0x482>
 8023374:	080370fc 	.word	0x080370fc
 8023378:	0803a77c 	.word	0x0803a77c
 802337c:	08037104 	.word	0x08037104
 8023380:	9a02      	ldr	r2, [sp, #8]
 8023382:	9904      	ldr	r1, [sp, #16]
 8023384:	5c52      	ldrb	r2, [r2, r1]
 8023386:	2a00      	cmp	r2, #0
 8023388:	d1c2      	bne.n	8023310 <mg_json_get+0x3dc>
 802338a:	9a01      	ldr	r2, [sp, #4]
 802338c:	9903      	ldr	r1, [sp, #12]
 802338e:	428a      	cmp	r2, r1
 8023390:	d1be      	bne.n	8023310 <mg_json_get+0x3dc>
 8023392:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023396:	f1ba 0f00 	cmp.w	sl, #0
 802339a:	d004      	beq.n	80233a6 <mg_json_get+0x472>
 802339c:	9b05      	ldr	r3, [sp, #20]
 802339e:	1ae3      	subs	r3, r4, r3
 80233a0:	3301      	adds	r3, #1
 80233a2:	f8ca 3000 	str.w	r3, [sl]
 80233a6:	9d05      	ldr	r5, [sp, #20]
 80233a8:	e005      	b.n	80233b6 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 80233aa:	2303      	movs	r3, #3
 80233ac:	e775      	b.n	802329a <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 80233ae:	2303      	movs	r3, #3
 80233b0:	e773      	b.n	802329a <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 80233b2:	f06f 0502 	mvn.w	r5, #2
}
 80233b6:	4628      	mov	r0, r5
 80233b8:	b015      	add	sp, #84	@ 0x54
 80233ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 80233be:	f06f 0501 	mvn.w	r5, #1
 80233c2:	e7f8      	b.n	80233b6 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80233c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80233c8:	e7f5      	b.n	80233b6 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80233ca:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80233ce:	e7f2      	b.n	80233b6 <mg_json_get+0x482>
          MG_EOO(']');
 80233d0:	f06f 0501 	mvn.w	r5, #1
 80233d4:	e7ef      	b.n	80233b6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80233d6:	f06f 0501 	mvn.w	r5, #1
 80233da:	e7ec      	b.n	80233b6 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80233dc:	f06f 0502 	mvn.w	r5, #2
 80233e0:	e7e9      	b.n	80233b6 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80233e2:	f06f 0502 	mvn.w	r5, #2
 80233e6:	e7e6      	b.n	80233b6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80233e8:	f06f 0501 	mvn.w	r5, #1
 80233ec:	e7e3      	b.n	80233b6 <mg_json_get+0x482>
          MG_EOO('}');
 80233ee:	f06f 0501 	mvn.w	r5, #1
 80233f2:	e7e0      	b.n	80233b6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80233f4:	f06f 0501 	mvn.w	r5, #1
 80233f8:	e7dd      	b.n	80233b6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80233fa:	f06f 0501 	mvn.w	r5, #1
 80233fe:	e7da      	b.n	80233b6 <mg_json_get+0x482>
          MG_EOO('O');
 8023400:	f06f 0501 	mvn.w	r5, #1
 8023404:	e7d7      	b.n	80233b6 <mg_json_get+0x482>
 8023406:	bf00      	nop

08023408 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8023408:	b510      	push	{r4, lr}
 802340a:	b084      	sub	sp, #16
 802340c:	46ec      	mov	ip, sp
 802340e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8023412:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023414:	ab03      	add	r3, sp, #12
 8023416:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802341a:	f7ff fd8b 	bl	8022f34 <mg_json_get>
 802341e:	1e02      	subs	r2, r0, #0
 8023420:	db11      	blt.n	8023446 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8023422:	9b00      	ldr	r3, [sp, #0]
 8023424:	1898      	adds	r0, r3, r2
 8023426:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023428:	2a2d      	cmp	r2, #45	@ 0x2d
 802342a:	d003      	beq.n	8023434 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802342c:	3a30      	subs	r2, #48	@ 0x30
 802342e:	b2d2      	uxtb	r2, r2
 8023430:	2a09      	cmp	r2, #9
 8023432:	d80b      	bhi.n	802344c <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8023434:	b164      	cbz	r4, 8023450 <mg_json_get_num+0x48>
 8023436:	2200      	movs	r2, #0
 8023438:	9903      	ldr	r1, [sp, #12]
 802343a:	f7fd fa81 	bl	8020940 <mg_atod>
 802343e:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 8023442:	2001      	movs	r0, #1
 8023444:	e000      	b.n	8023448 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 8023446:	2000      	movs	r0, #0
}
 8023448:	b004      	add	sp, #16
 802344a:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 802344c:	2000      	movs	r0, #0
 802344e:	e7fb      	b.n	8023448 <mg_json_get_num+0x40>
    found = 1;
 8023450:	2001      	movs	r0, #1
 8023452:	e7f9      	b.n	8023448 <mg_json_get_num+0x40>

08023454 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8023454:	b510      	push	{r4, lr}
 8023456:	b082      	sub	sp, #8
 8023458:	46ec      	mov	ip, sp
 802345a:	e88c 0003 	stmia.w	ip, {r0, r1}
 802345e:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8023460:	2300      	movs	r3, #0
 8023462:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8023466:	f7ff fd65 	bl	8022f34 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802346a:	2800      	cmp	r0, #0
 802346c:	db0f      	blt.n	802348e <mg_json_get_bool+0x3a>
 802346e:	9b00      	ldr	r3, [sp, #0]
 8023470:	5c1b      	ldrb	r3, [r3, r0]
 8023472:	2b74      	cmp	r3, #116	@ 0x74
 8023474:	d003      	beq.n	802347e <mg_json_get_bool+0x2a>
 8023476:	2b66      	cmp	r3, #102	@ 0x66
 8023478:	d001      	beq.n	802347e <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 802347a:	2000      	movs	r0, #0
 802347c:	e008      	b.n	8023490 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 802347e:	b14c      	cbz	r4, 8023494 <mg_json_get_bool+0x40>
 8023480:	2b74      	cmp	r3, #116	@ 0x74
 8023482:	bf14      	ite	ne
 8023484:	2300      	movne	r3, #0
 8023486:	2301      	moveq	r3, #1
 8023488:	7023      	strb	r3, [r4, #0]
    found = 1;
 802348a:	2001      	movs	r0, #1
 802348c:	e000      	b.n	8023490 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 802348e:	2000      	movs	r0, #0
}
 8023490:	b002      	add	sp, #8
 8023492:	bd10      	pop	{r4, pc}
    found = 1;
 8023494:	2001      	movs	r0, #1
 8023496:	e7fb      	b.n	8023490 <mg_json_get_bool+0x3c>

08023498 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 8023498:	b5f0      	push	{r4, r5, r6, r7, lr}
 802349a:	b085      	sub	sp, #20
 802349c:	4606      	mov	r6, r0
 802349e:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 80234a0:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 80234a2:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 80234a4:	e038      	b.n	8023518 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80234a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80234aa:	f7fd fb5b 	bl	8020b64 <nibble>
 80234ae:	f7fd fb41 	bl	8020b34 <logc>
 80234b2:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80234b6:	f7fd fb55 	bl	8020b64 <nibble>
 80234ba:	f7fd fb3b 	bl	8020b34 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80234be:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80234c2:	f7fd fb4f 	bl	8020b64 <nibble>
 80234c6:	f7fd fb35 	bl	8020b34 <logc>
 80234ca:	2030      	movs	r0, #48	@ 0x30
 80234cc:	f7fd fb32 	bl	8020b34 <logc>
 80234d0:	2103      	movs	r1, #3
 80234d2:	4829      	ldr	r0, [pc, #164]	@ (8023578 <mg_hexdump+0xe0>)
 80234d4:	f7fd fb3a 	bl	8020b4c <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80234d8:	5d70      	ldrb	r0, [r6, r5]
 80234da:	0900      	lsrs	r0, r0, #4
 80234dc:	f7fd fb42 	bl	8020b64 <nibble>
 80234e0:	f7fd fb28 	bl	8020b34 <logc>
 80234e4:	5d70      	ldrb	r0, [r6, r5]
 80234e6:	f000 000f 	and.w	r0, r0, #15
 80234ea:	f7fd fb3b 	bl	8020b64 <nibble>
 80234ee:	f7fd fb21 	bl	8020b34 <logc>
    logc(' ');                                         // Space after hex number
 80234f2:	2020      	movs	r0, #32
 80234f4:	f7fd fb1e 	bl	8020b34 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80234f8:	5d72      	ldrb	r2, [r6, r5]
 80234fa:	f1a2 0320 	sub.w	r3, r2, #32
 80234fe:	b2db      	uxtb	r3, r3
 8023500:	2b5e      	cmp	r3, #94	@ 0x5e
 8023502:	d900      	bls.n	8023506 <mg_hexdump+0x6e>
 8023504:	222e      	movs	r2, #46	@ 0x2e
 8023506:	1c63      	adds	r3, r4, #1
 8023508:	f104 0110 	add.w	r1, r4, #16
 802350c:	eb0d 0401 	add.w	r4, sp, r1
 8023510:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8023514:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023516:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8023518:	42bd      	cmp	r5, r7
 802351a:	d21e      	bcs.n	802355a <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802351c:	f015 0f0f 	tst.w	r5, #15
 8023520:	d1da      	bne.n	80234d8 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8023522:	2d00      	cmp	r5, #0
 8023524:	d0bf      	beq.n	80234a6 <mg_hexdump+0xe>
 8023526:	2102      	movs	r1, #2
 8023528:	4814      	ldr	r0, [pc, #80]	@ (802357c <mg_hexdump+0xe4>)
 802352a:	f7fd fb0f 	bl	8020b4c <logs>
 802352e:	2110      	movs	r1, #16
 8023530:	4668      	mov	r0, sp
 8023532:	f7fd fb0b 	bl	8020b4c <logs>
 8023536:	200a      	movs	r0, #10
 8023538:	f7fd fafc 	bl	8020b34 <logc>
 802353c:	2400      	movs	r4, #0
 802353e:	e7b2      	b.n	80234a6 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8023540:	2103      	movs	r1, #3
 8023542:	480d      	ldr	r0, [pc, #52]	@ (8023578 <mg_hexdump+0xe0>)
 8023544:	f7fd fb02 	bl	8020b4c <logs>
 8023548:	1c63      	adds	r3, r4, #1
 802354a:	f104 0210 	add.w	r2, r4, #16
 802354e:	eb0d 0402 	add.w	r4, sp, r2
 8023552:	2220      	movs	r2, #32
 8023554:	f804 2c10 	strb.w	r2, [r4, #-16]
 8023558:	b2dc      	uxtb	r4, r3
 802355a:	2c0f      	cmp	r4, #15
 802355c:	d9f0      	bls.n	8023540 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 802355e:	2102      	movs	r1, #2
 8023560:	4806      	ldr	r0, [pc, #24]	@ (802357c <mg_hexdump+0xe4>)
 8023562:	f7fd faf3 	bl	8020b4c <logs>
 8023566:	2110      	movs	r1, #16
 8023568:	4668      	mov	r0, sp
 802356a:	f7fd faef 	bl	8020b4c <logs>
 802356e:	200a      	movs	r0, #10
 8023570:	f7fd fae0 	bl	8020b34 <logc>
}
 8023574:	b005      	add	sp, #20
 8023576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023578:	0803a788 	.word	0x0803a788
 802357c:	0803a784 	.word	0x0803a784

08023580 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8023580:	4b09      	ldr	r3, [pc, #36]	@ (80235a8 <mg_md5_init+0x28>)
 8023582:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8023584:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8023588:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802358a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802358e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023592:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8023596:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 8023598:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 802359c:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 802359e:	2300      	movs	r3, #0
 80235a0:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 80235a2:	6143      	str	r3, [r0, #20]
}
 80235a4:	4770      	bx	lr
 80235a6:	bf00      	nop
 80235a8:	67452301 	.word	0x67452301

080235ac <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 80235ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80235b0:	4606      	mov	r6, r0
 80235b2:	460c      	mov	r4, r1
 80235b4:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80235b6:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80235b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80235bc:	6102      	str	r2, [r0, #16]
 80235be:	429a      	cmp	r2, r3
 80235c0:	d202      	bcs.n	80235c8 <mg_md5_update+0x1c>
 80235c2:	6942      	ldr	r2, [r0, #20]
 80235c4:	3201      	adds	r2, #1
 80235c6:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80235c8:	6972      	ldr	r2, [r6, #20]
 80235ca:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80235ce:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80235d0:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80235d4:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80235d8:	d035      	beq.n	8023646 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80235da:	f106 0918 	add.w	r9, r6, #24
 80235de:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80235e2:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80235e6:	4545      	cmp	r5, r8
 80235e8:	d30b      	bcc.n	8023602 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80235ea:	4642      	mov	r2, r8
 80235ec:	4621      	mov	r1, r4
 80235ee:	f00a fd7b 	bl	802e0e8 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80235f2:	4649      	mov	r1, r9
 80235f4:	4630      	mov	r0, r6
 80235f6:	f7fd fabf 	bl	8020b78 <mg_md5_transform>
    buf += t;
 80235fa:	4444      	add	r4, r8
    len -= t;
 80235fc:	3f40      	subs	r7, #64	@ 0x40
 80235fe:	443d      	add	r5, r7
 8023600:	e021      	b.n	8023646 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8023602:	462a      	mov	r2, r5
 8023604:	4621      	mov	r1, r4
 8023606:	f00a fd6f 	bl	802e0e8 <memcpy>
      return;
 802360a:	e024      	b.n	8023656 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 802360c:	f106 0118 	add.w	r1, r6, #24
 8023610:	4623      	mov	r3, r4
 8023612:	468c      	mov	ip, r1
 8023614:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8023618:	681f      	ldr	r7, [r3, #0]
 802361a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 802361e:	6898      	ldr	r0, [r3, #8]
 8023620:	68da      	ldr	r2, [r3, #12]
 8023622:	f8cc 7000 	str.w	r7, [ip]
 8023626:	f8cc e004 	str.w	lr, [ip, #4]
 802362a:	f8cc 0008 	str.w	r0, [ip, #8]
 802362e:	f8cc 200c 	str.w	r2, [ip, #12]
 8023632:	3310      	adds	r3, #16
 8023634:	f10c 0c10 	add.w	ip, ip, #16
 8023638:	4543      	cmp	r3, r8
 802363a:	d1ed      	bne.n	8023618 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802363c:	4630      	mov	r0, r6
 802363e:	f7fd fa9b 	bl	8020b78 <mg_md5_transform>
    buf += 64;
 8023642:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8023644:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8023646:	2d3f      	cmp	r5, #63	@ 0x3f
 8023648:	d8e0      	bhi.n	802360c <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 802364a:	462a      	mov	r2, r5
 802364c:	4621      	mov	r1, r4
 802364e:	f106 0018 	add.w	r0, r6, #24
 8023652:	f00a fd49 	bl	802e0e8 <memcpy>
}
 8023656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802365a <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 802365a:	b570      	push	{r4, r5, r6, lr}
 802365c:	4604      	mov	r4, r0
 802365e:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8023660:	6903      	ldr	r3, [r0, #16]
 8023662:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8023666:	f100 0618 	add.w	r6, r0, #24
 802366a:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 802366c:	3001      	adds	r0, #1
 802366e:	2280      	movs	r2, #128	@ 0x80
 8023670:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8023672:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8023676:	2a07      	cmp	r2, #7
 8023678:	d821      	bhi.n	80236be <mg_md5_final+0x64>
    memset(p, 0, count);
 802367a:	2100      	movs	r1, #0
 802367c:	f009 faf8 	bl	802cc70 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023680:	4631      	mov	r1, r6
 8023682:	4620      	mov	r0, r4
 8023684:	f7fd fa78 	bl	8020b78 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8023688:	2238      	movs	r2, #56	@ 0x38
 802368a:	2100      	movs	r1, #0
 802368c:	4630      	mov	r0, r6
 802368e:	f009 faef 	bl	802cc70 <memset>
  a[14] = ctx->bits[0];
 8023692:	6923      	ldr	r3, [r4, #16]
 8023694:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8023696:	6963      	ldr	r3, [r4, #20]
 8023698:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802369a:	4631      	mov	r1, r6
 802369c:	4620      	mov	r0, r4
 802369e:	f7fd fa6b 	bl	8020b78 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 80236a2:	6820      	ldr	r0, [r4, #0]
 80236a4:	6861      	ldr	r1, [r4, #4]
 80236a6:	68a2      	ldr	r2, [r4, #8]
 80236a8:	68e3      	ldr	r3, [r4, #12]
 80236aa:	6028      	str	r0, [r5, #0]
 80236ac:	6069      	str	r1, [r5, #4]
 80236ae:	60aa      	str	r2, [r5, #8]
 80236b0:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 80236b2:	2258      	movs	r2, #88	@ 0x58
 80236b4:	2100      	movs	r1, #0
 80236b6:	4620      	mov	r0, r4
 80236b8:	f009 fada 	bl	802cc70 <memset>
}
 80236bc:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 80236be:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 80236c2:	2100      	movs	r1, #0
 80236c4:	f009 fad4 	bl	802cc70 <memset>
 80236c8:	e7e3      	b.n	8023692 <mg_md5_final+0x38>

080236ca <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 80236ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80236ce:	4604      	mov	r4, r0
 80236d0:	460d      	mov	r5, r1
 80236d2:	4617      	mov	r7, r2
 80236d4:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 80236d6:	2228      	movs	r2, #40	@ 0x28
 80236d8:	2100      	movs	r1, #0
 80236da:	4618      	mov	r0, r3
 80236dc:	f009 fac8 	bl	802cc70 <memset>
  m->dgram.buf = (char *) buf;
 80236e0:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 80236e2:	2d01      	cmp	r5, #1
 80236e4:	f240 8088 	bls.w	80237f8 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 80236e8:	7820      	ldrb	r0, [r4, #0]
 80236ea:	0900      	lsrs	r0, r0, #4
 80236ec:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 80236ee:	46a4      	mov	ip, r4
 80236f0:	f81c 9b01 	ldrb.w	r9, [ip], #1
 80236f4:	f3c9 0941 	ubfx	r9, r9, #1, #2
 80236f8:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 80236fc:	2300      	movs	r3, #0
 80236fe:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8023700:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8023702:	ebac 0e04 	sub.w	lr, ip, r4
 8023706:	45ae      	cmp	lr, r5
 8023708:	d211      	bcs.n	802372e <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 802370a:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 802370e:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8023712:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8023716:	fa0e fe08 	lsl.w	lr, lr, r8
 802371a:	4471      	add	r1, lr
    len_len++;
 802371c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 802371e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023722:	d004      	beq.n	802372e <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8023724:	2b03      	cmp	r3, #3
 8023726:	d9ec      	bls.n	8023702 <mg_mqtt_parse+0x38>
 8023728:	2002      	movs	r0, #2
}
 802372a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 802372e:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023732:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023736:	d161      	bne.n	80237fc <mg_mqtt_parse+0x132>
 8023738:	4425      	add	r5, r4
 802373a:	4545      	cmp	r5, r8
 802373c:	d360      	bcc.n	8023800 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 802373e:	eba8 0304 	sub.w	r3, r8, r4
 8023742:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8023744:	2803      	cmp	r0, #3
 8023746:	d01c      	beq.n	8023782 <mg_mqtt_parse+0xb8>
 8023748:	d80a      	bhi.n	8023760 <mg_mqtt_parse+0x96>
 802374a:	2802      	cmp	r0, #2
 802374c:	d106      	bne.n	802375c <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 802374e:	2901      	cmp	r1, #1
 8023750:	dd5a      	ble.n	8023808 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8023752:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023756:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8023758:	2000      	movs	r0, #0
      break;
 802375a:	e7e6      	b.n	802372a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 802375c:	2000      	movs	r0, #0
 802375e:	e7e4      	b.n	802372a <mg_mqtt_parse+0x60>
 8023760:	3804      	subs	r0, #4
 8023762:	b2c0      	uxtb	r0, r0
 8023764:	2807      	cmp	r0, #7
 8023766:	d84d      	bhi.n	8023804 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023768:	f10c 0302 	add.w	r3, ip, #2
 802376c:	4543      	cmp	r3, r8
 802376e:	d84d      	bhi.n	802380c <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023770:	f89c 2000 	ldrb.w	r2, [ip]
 8023774:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023778:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802377c:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 802377e:	2000      	movs	r0, #0
      break;
 8023780:	e7d3      	b.n	802372a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023782:	f10c 0202 	add.w	r2, ip, #2
 8023786:	4542      	cmp	r2, r8
 8023788:	d842      	bhi.n	8023810 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802378a:	f89c 1000 	ldrb.w	r1, [ip]
 802378e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023792:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8023796:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8023798:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 802379a:	3302      	adds	r3, #2
 802379c:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 80237a0:	45a8      	cmp	r8, r5
 80237a2:	d337      	bcc.n	8023814 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 80237a4:	f1b9 0f00 	cmp.w	r9, #0
 80237a8:	d008      	beq.n	80237bc <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 80237aa:	1caa      	adds	r2, r5, #2
 80237ac:	4542      	cmp	r2, r8
 80237ae:	d833      	bhi.n	8023818 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80237b0:	7829      	ldrb	r1, [r5, #0]
 80237b2:	786b      	ldrb	r3, [r5, #1]
 80237b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80237b8:	8333      	strh	r3, [r6, #24]
        p += 2;
 80237ba:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 80237bc:	4545      	cmp	r5, r8
 80237be:	d82d      	bhi.n	802381c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 80237c0:	2f05      	cmp	r7, #5
 80237c2:	d007      	beq.n	80237d4 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 80237c4:	4545      	cmp	r5, r8
 80237c6:	d82d      	bhi.n	8023824 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 80237c8:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 80237ca:	eba8 0505 	sub.w	r5, r8, r5
 80237ce:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 80237d0:	2000      	movs	r0, #0
      break;
 80237d2:	e7aa      	b.n	802372a <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 80237d4:	1cab      	adds	r3, r5, #2
 80237d6:	4543      	cmp	r3, r8
 80237d8:	d2f4      	bcs.n	80237c4 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 80237da:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 80237de:	eba8 0105 	sub.w	r1, r8, r5
 80237e2:	4628      	mov	r0, r5
 80237e4:	f7fd fd70 	bl	80212c8 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 80237e8:	b1d0      	cbz	r0, 8023820 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 80237ea:	182b      	adds	r3, r5, r0
 80237ec:	1b1b      	subs	r3, r3, r4
 80237ee:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 80237f0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80237f2:	4403      	add	r3, r0
 80237f4:	441d      	add	r5, r3
 80237f6:	e7e5      	b.n	80237c4 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 80237f8:	2001      	movs	r0, #1
 80237fa:	e796      	b.n	802372a <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 80237fc:	2001      	movs	r0, #1
 80237fe:	e794      	b.n	802372a <mg_mqtt_parse+0x60>
 8023800:	2001      	movs	r0, #1
 8023802:	e792      	b.n	802372a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023804:	2000      	movs	r0, #0
 8023806:	e790      	b.n	802372a <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8023808:	2002      	movs	r0, #2
 802380a:	e78e      	b.n	802372a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 802380c:	2002      	movs	r0, #2
 802380e:	e78c      	b.n	802372a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023810:	2002      	movs	r0, #2
 8023812:	e78a      	b.n	802372a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023814:	2002      	movs	r0, #2
 8023816:	e788      	b.n	802372a <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023818:	2002      	movs	r0, #2
 802381a:	e786      	b.n	802372a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 802381c:	2002      	movs	r0, #2
 802381e:	e784      	b.n	802372a <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8023820:	2002      	movs	r0, #2
 8023822:	e782      	b.n	802372a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023824:	2002      	movs	r0, #2
 8023826:	e780      	b.n	802372a <mg_mqtt_parse+0x60>

08023828 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8023828:	b510      	push	{r4, lr}
 802382a:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 802382c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802382e:	31b0      	adds	r1, #176	@ 0xb0
 8023830:	2001      	movs	r0, #1
 8023832:	f7ff f8f5 	bl	8022a20 <mg_calloc>
  if (c != NULL) {
 8023836:	4603      	mov	r3, r0
 8023838:	b148      	cbz	r0, 802384e <mg_alloc_conn+0x26>
    c->mgr = mgr;
 802383a:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 802383c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023840:	6742      	str	r2, [r0, #116]	@ 0x74
 8023842:	6442      	str	r2, [r0, #68]	@ 0x44
 8023844:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8023846:	69e2      	ldr	r2, [r4, #28]
 8023848:	3201      	adds	r2, #1
 802384a:	61e2      	str	r2, [r4, #28]
 802384c:	6342      	str	r2, [r0, #52]	@ 0x34
}
 802384e:	4618      	mov	r0, r3
 8023850:	bd10      	pop	{r4, pc}
	...

08023854 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8023854:	b510      	push	{r4, lr}
 8023856:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8023858:	2248      	movs	r2, #72	@ 0x48
 802385a:	2100      	movs	r1, #0
 802385c:	f009 fa08 	bl	802cc70 <memset>
  mgr->epoll_fd = -1;
 8023860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023864:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8023866:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8023868:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802386c:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 802386e:	4b02      	ldr	r3, [pc, #8]	@ (8023878 <mg_mgr_init+0x24>)
 8023870:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8023872:	4b02      	ldr	r3, [pc, #8]	@ (802387c <mg_mgr_init+0x28>)
 8023874:	60e3      	str	r3, [r4, #12]
}
 8023876:	bd10      	pop	{r4, pc}
 8023878:	0803a78c 	.word	0x0803a78c
 802387c:	0803a7a0 	.word	0x0803a7a0

08023880 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8023880:	b40c      	push	{r2, r3}
 8023882:	b500      	push	{lr}
 8023884:	b083      	sub	sp, #12
 8023886:	ab04      	add	r3, sp, #16
 8023888:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 802388c:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 802388e:	ab01      	add	r3, sp, #4
 8023890:	f000 fcde 	bl	8024250 <mg_vsnprintf>
}
 8023894:	b003      	add	sp, #12
 8023896:	f85d eb04 	ldr.w	lr, [sp], #4
 802389a:	b002      	add	sp, #8
 802389c:	4770      	bx	lr
	...

080238a0 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80238a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238a4:	b093      	sub	sp, #76	@ 0x4c
 80238a6:	9005      	str	r0, [sp, #20]
 80238a8:	9106      	str	r1, [sp, #24]
 80238aa:	ec51 0b10 	vmov	r0, r1, d0
 80238ae:	ed8d 0b02 	vstr	d0, [sp, #8]
 80238b2:	4690      	mov	r8, r2
 80238b4:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80238b6:	2200      	movs	r2, #0
 80238b8:	2300      	movs	r3, #0
 80238ba:	f7ed f91d 	bl	8010af8 <__aeabi_dcmpeq>
 80238be:	b9c8      	cbnz	r0, 80238f4 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80238c0:	ed9d 0b02 	vldr	d0, [sp, #8]
 80238c4:	f7fc faae 	bl	801fe24 <xisinf>
 80238c8:	b9d8      	cbnz	r0, 8023902 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80238ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 80238ce:	f7fc fabb 	bl	801fe48 <xisnan>
 80238d2:	4606      	mov	r6, r0
 80238d4:	bb28      	cbnz	r0, 8023922 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80238d6:	2200      	movs	r2, #0
 80238d8:	2300      	movs	r3, #0
 80238da:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80238de:	4620      	mov	r0, r4
 80238e0:	4629      	mov	r1, r5
 80238e2:	f7ed f913 	bl	8010b0c <__aeabi_dcmplt>
 80238e6:	bb18      	cbnz	r0, 8023930 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 80238e8:	4637      	mov	r7, r6
  mul = 1.0;
 80238ea:	2400      	movs	r4, #0
 80238ec:	4dba      	ldr	r5, [pc, #744]	@ (8023bd8 <mg_dtoa+0x338>)
 80238ee:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80238f2:	e02f      	b.n	8023954 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80238f4:	4bb9      	ldr	r3, [pc, #740]	@ (8023bdc <mg_dtoa+0x33c>)
 80238f6:	4aba      	ldr	r2, [pc, #744]	@ (8023be0 <mg_dtoa+0x340>)
 80238f8:	9906      	ldr	r1, [sp, #24]
 80238fa:	9805      	ldr	r0, [sp, #20]
 80238fc:	f7ff ffc0 	bl	8023880 <mg_snprintf>
 8023900:	e1d3      	b.n	8023caa <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023902:	2200      	movs	r2, #0
 8023904:	2300      	movs	r3, #0
 8023906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802390a:	f7ed f91d 	bl	8010b48 <__aeabi_dcmpgt>
 802390e:	b130      	cbz	r0, 802391e <mg_dtoa+0x7e>
 8023910:	4bb4      	ldr	r3, [pc, #720]	@ (8023be4 <mg_dtoa+0x344>)
 8023912:	4ab3      	ldr	r2, [pc, #716]	@ (8023be0 <mg_dtoa+0x340>)
 8023914:	9906      	ldr	r1, [sp, #24]
 8023916:	9805      	ldr	r0, [sp, #20]
 8023918:	f7ff ffb2 	bl	8023880 <mg_snprintf>
 802391c:	e1c5      	b.n	8023caa <mg_dtoa+0x40a>
 802391e:	4bb2      	ldr	r3, [pc, #712]	@ (8023be8 <mg_dtoa+0x348>)
 8023920:	e7f7      	b.n	8023912 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023922:	4bb2      	ldr	r3, [pc, #712]	@ (8023bec <mg_dtoa+0x34c>)
 8023924:	4aae      	ldr	r2, [pc, #696]	@ (8023be0 <mg_dtoa+0x340>)
 8023926:	9906      	ldr	r1, [sp, #24]
 8023928:	9805      	ldr	r0, [sp, #20]
 802392a:	f7ff ffa9 	bl	8023880 <mg_snprintf>
 802392e:	e1bc      	b.n	8023caa <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023930:	4622      	mov	r2, r4
 8023932:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8023936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802393a:	232d      	movs	r3, #45	@ 0x2d
 802393c:	f88d 3020 	strb.w	r3, [sp, #32]
 8023940:	2701      	movs	r7, #1
 8023942:	e7d2      	b.n	80238ea <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023944:	2200      	movs	r2, #0
 8023946:	4baa      	ldr	r3, [pc, #680]	@ (8023bf0 <mg_dtoa+0x350>)
 8023948:	4620      	mov	r0, r4
 802394a:	4629      	mov	r1, r5
 802394c:	f7ec fe6c 	bl	8010628 <__aeabi_dmul>
 8023950:	4604      	mov	r4, r0
 8023952:	460d      	mov	r5, r1
 8023954:	2200      	movs	r2, #0
 8023956:	4ba6      	ldr	r3, [pc, #664]	@ (8023bf0 <mg_dtoa+0x350>)
 8023958:	4650      	mov	r0, sl
 802395a:	4659      	mov	r1, fp
 802395c:	f7ed f8ea 	bl	8010b34 <__aeabi_dcmpge>
 8023960:	b1b0      	cbz	r0, 8023990 <mg_dtoa+0xf0>
 8023962:	4622      	mov	r2, r4
 8023964:	462b      	mov	r3, r5
 8023966:	4650      	mov	r0, sl
 8023968:	4659      	mov	r1, fp
 802396a:	f7ec ff87 	bl	801087c <__aeabi_ddiv>
 802396e:	2200      	movs	r2, #0
 8023970:	4b9f      	ldr	r3, [pc, #636]	@ (8023bf0 <mg_dtoa+0x350>)
 8023972:	f7ed f8df 	bl	8010b34 <__aeabi_dcmpge>
 8023976:	2800      	cmp	r0, #0
 8023978:	d1e4      	bne.n	8023944 <mg_dtoa+0xa4>
 802397a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 802397e:	e007      	b.n	8023990 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8023980:	2200      	movs	r2, #0
 8023982:	4b9b      	ldr	r3, [pc, #620]	@ (8023bf0 <mg_dtoa+0x350>)
 8023984:	4620      	mov	r0, r4
 8023986:	4629      	mov	r1, r5
 8023988:	f7ec ff78 	bl	801087c <__aeabi_ddiv>
 802398c:	4604      	mov	r4, r0
 802398e:	460d      	mov	r5, r1
 8023990:	2200      	movs	r2, #0
 8023992:	4b91      	ldr	r3, [pc, #580]	@ (8023bd8 <mg_dtoa+0x338>)
 8023994:	4650      	mov	r0, sl
 8023996:	4659      	mov	r1, fp
 8023998:	f7ed f8c2 	bl	8010b20 <__aeabi_dcmple>
 802399c:	b158      	cbz	r0, 80239b6 <mg_dtoa+0x116>
 802399e:	4622      	mov	r2, r4
 80239a0:	462b      	mov	r3, r5
 80239a2:	4650      	mov	r0, sl
 80239a4:	4659      	mov	r1, fp
 80239a6:	f7ec ff69 	bl	801087c <__aeabi_ddiv>
 80239aa:	2200      	movs	r2, #0
 80239ac:	4b8a      	ldr	r3, [pc, #552]	@ (8023bd8 <mg_dtoa+0x338>)
 80239ae:	f7ed f8b7 	bl	8010b20 <__aeabi_dcmple>
 80239b2:	2800      	cmp	r0, #0
 80239b4:	d1e4      	bne.n	8023980 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80239b6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80239ba:	2200      	movs	r2, #0
 80239bc:	4b8d      	ldr	r3, [pc, #564]	@ (8023bf4 <mg_dtoa+0x354>)
 80239be:	4620      	mov	r0, r4
 80239c0:	4629      	mov	r1, r5
 80239c2:	f7ec fe31 	bl	8010628 <__aeabi_dmul>
 80239c6:	4634      	mov	r4, r6
 80239c8:	e004      	b.n	80239d4 <mg_dtoa+0x134>
 80239ca:	2200      	movs	r2, #0
 80239cc:	4b88      	ldr	r3, [pc, #544]	@ (8023bf0 <mg_dtoa+0x350>)
 80239ce:	f7ec ff55 	bl	801087c <__aeabi_ddiv>
 80239d2:	3401      	adds	r4, #1
 80239d4:	4544      	cmp	r4, r8
 80239d6:	dbf8      	blt.n	80239ca <mg_dtoa+0x12a>
  d += t;
 80239d8:	4602      	mov	r2, r0
 80239da:	460b      	mov	r3, r1
 80239dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80239e0:	f7ec fc6c 	bl	80102bc <__adddf3>
 80239e4:	4682      	mov	sl, r0
 80239e6:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 80239e8:	46b1      	mov	r9, r6
  mul = 1.0;
 80239ea:	2400      	movs	r4, #0
 80239ec:	4d7a      	ldr	r5, [pc, #488]	@ (8023bd8 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80239ee:	e009      	b.n	8023a04 <mg_dtoa+0x164>
 80239f0:	2200      	movs	r2, #0
 80239f2:	4b7f      	ldr	r3, [pc, #508]	@ (8023bf0 <mg_dtoa+0x350>)
 80239f4:	4620      	mov	r0, r4
 80239f6:	4629      	mov	r1, r5
 80239f8:	f7ec fe16 	bl	8010628 <__aeabi_dmul>
 80239fc:	4604      	mov	r4, r0
 80239fe:	460d      	mov	r5, r1
 8023a00:	f109 0901 	add.w	r9, r9, #1
 8023a04:	2200      	movs	r2, #0
 8023a06:	4b7a      	ldr	r3, [pc, #488]	@ (8023bf0 <mg_dtoa+0x350>)
 8023a08:	4650      	mov	r0, sl
 8023a0a:	4659      	mov	r1, fp
 8023a0c:	f7ed f892 	bl	8010b34 <__aeabi_dcmpge>
 8023a10:	b1b0      	cbz	r0, 8023a40 <mg_dtoa+0x1a0>
 8023a12:	4622      	mov	r2, r4
 8023a14:	462b      	mov	r3, r5
 8023a16:	4650      	mov	r0, sl
 8023a18:	4659      	mov	r1, fp
 8023a1a:	f7ec ff2f 	bl	801087c <__aeabi_ddiv>
 8023a1e:	2200      	movs	r2, #0
 8023a20:	4b73      	ldr	r3, [pc, #460]	@ (8023bf0 <mg_dtoa+0x350>)
 8023a22:	f7ed f887 	bl	8010b34 <__aeabi_dcmpge>
 8023a26:	2800      	cmp	r0, #0
 8023a28:	d1e2      	bne.n	80239f0 <mg_dtoa+0x150>
 8023a2a:	e009      	b.n	8023a40 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8023a2c:	2200      	movs	r2, #0
 8023a2e:	4b70      	ldr	r3, [pc, #448]	@ (8023bf0 <mg_dtoa+0x350>)
 8023a30:	4620      	mov	r0, r4
 8023a32:	4629      	mov	r1, r5
 8023a34:	f7ec ff22 	bl	801087c <__aeabi_ddiv>
 8023a38:	4604      	mov	r4, r0
 8023a3a:	460d      	mov	r5, r1
 8023a3c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8023a40:	2200      	movs	r2, #0
 8023a42:	4b65      	ldr	r3, [pc, #404]	@ (8023bd8 <mg_dtoa+0x338>)
 8023a44:	4650      	mov	r0, sl
 8023a46:	4659      	mov	r1, fp
 8023a48:	f7ed f860 	bl	8010b0c <__aeabi_dcmplt>
 8023a4c:	b158      	cbz	r0, 8023a66 <mg_dtoa+0x1c6>
 8023a4e:	4622      	mov	r2, r4
 8023a50:	462b      	mov	r3, r5
 8023a52:	4650      	mov	r0, sl
 8023a54:	4659      	mov	r1, fp
 8023a56:	f7ec ff11 	bl	801087c <__aeabi_ddiv>
 8023a5a:	2200      	movs	r2, #0
 8023a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8023bd8 <mg_dtoa+0x338>)
 8023a5e:	f7ed f855 	bl	8010b0c <__aeabi_dcmplt>
 8023a62:	2800      	cmp	r0, #0
 8023a64:	d1e2      	bne.n	8023a2c <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8023a66:	45c1      	cmp	r9, r8
 8023a68:	db02      	blt.n	8023a70 <mg_dtoa+0x1d0>
 8023a6a:	f1b8 0f01 	cmp.w	r8, #1
 8023a6e:	dc25      	bgt.n	8023abc <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8023a70:	f1c8 0300 	rsb	r3, r8, #0
 8023a74:	454b      	cmp	r3, r9
 8023a76:	db5e      	blt.n	8023b36 <mg_dtoa+0x296>
 8023a78:	f1b8 0f01 	cmp.w	r8, #1
 8023a7c:	dd5b      	ble.n	8023b36 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023a7e:	4622      	mov	r2, r4
 8023a80:	462b      	mov	r3, r5
 8023a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023a86:	f7ec fef9 	bl	801087c <__aeabi_ddiv>
 8023a8a:	ad08      	add	r5, sp, #32
 8023a8c:	9b07      	ldr	r3, [sp, #28]
 8023a8e:	4642      	mov	r2, r8
 8023a90:	ec41 0b10 	vmov	d0, r0, r1
 8023a94:	2128      	movs	r1, #40	@ 0x28
 8023a96:	4628      	mov	r0, r5
 8023a98:	f7ff ff02 	bl	80238a0 <mg_dtoa>
 8023a9c:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8023a9e:	1838      	adds	r0, r7, r0
 8023aa0:	222d      	movs	r2, #45	@ 0x2d
 8023aa2:	f1c9 0100 	rsb	r1, r9, #0
 8023aa6:	4428      	add	r0, r5
 8023aa8:	f7fc f982 	bl	801fdb0 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023aac:	9500      	str	r5, [sp, #0]
 8023aae:	1823      	adds	r3, r4, r0
 8023ab0:	4a51      	ldr	r2, [pc, #324]	@ (8023bf8 <mg_dtoa+0x358>)
 8023ab2:	9906      	ldr	r1, [sp, #24]
 8023ab4:	9805      	ldr	r0, [sp, #20]
 8023ab6:	f7ff fee3 	bl	8023880 <mg_snprintf>
 8023aba:	e0f6      	b.n	8023caa <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8023abc:	4622      	mov	r2, r4
 8023abe:	462b      	mov	r3, r5
 8023ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ac4:	f7ec feda 	bl	801087c <__aeabi_ddiv>
 8023ac8:	ad08      	add	r5, sp, #32
 8023aca:	9b07      	ldr	r3, [sp, #28]
 8023acc:	4642      	mov	r2, r8
 8023ace:	ec41 0b10 	vmov	d0, r0, r1
 8023ad2:	2128      	movs	r1, #40	@ 0x28
 8023ad4:	4628      	mov	r0, r5
 8023ad6:	f7ff fee3 	bl	80238a0 <mg_dtoa>
 8023ada:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8023adc:	1838      	adds	r0, r7, r0
 8023ade:	222b      	movs	r2, #43	@ 0x2b
 8023ae0:	4649      	mov	r1, r9
 8023ae2:	4428      	add	r0, r5
 8023ae4:	f7fc f964 	bl	801fdb0 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8023ae8:	9500      	str	r5, [sp, #0]
 8023aea:	1823      	adds	r3, r4, r0
 8023aec:	4a42      	ldr	r2, [pc, #264]	@ (8023bf8 <mg_dtoa+0x358>)
 8023aee:	9906      	ldr	r1, [sp, #24]
 8023af0:	9805      	ldr	r0, [sp, #20]
 8023af2:	f7ff fec5 	bl	8023880 <mg_snprintf>
 8023af6:	e0d8      	b.n	8023caa <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023af8:	3601      	adds	r6, #1
 8023afa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023afe:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023b02:	eb0d 0902 	add.w	r9, sp, r2
 8023b06:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8023b0a:	f7ec fd23 	bl	8010554 <__aeabi_i2d>
 8023b0e:	4622      	mov	r2, r4
 8023b10:	462b      	mov	r3, r5
 8023b12:	f7ec fd89 	bl	8010628 <__aeabi_dmul>
 8023b16:	4602      	mov	r2, r0
 8023b18:	460b      	mov	r3, r1
 8023b1a:	4650      	mov	r0, sl
 8023b1c:	4659      	mov	r1, fp
 8023b1e:	f7ec fbcb 	bl	80102b8 <__aeabi_dsub>
 8023b22:	4682      	mov	sl, r0
 8023b24:	468b      	mov	fp, r1
      t /= 10.0;
 8023b26:	2200      	movs	r2, #0
 8023b28:	4b31      	ldr	r3, [pc, #196]	@ (8023bf0 <mg_dtoa+0x350>)
 8023b2a:	4620      	mov	r0, r4
 8023b2c:	4629      	mov	r1, r5
 8023b2e:	f7ec fea5 	bl	801087c <__aeabi_ddiv>
 8023b32:	4604      	mov	r4, r0
 8023b34:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8023b36:	2200      	movs	r2, #0
 8023b38:	4b27      	ldr	r3, [pc, #156]	@ (8023bd8 <mg_dtoa+0x338>)
 8023b3a:	4620      	mov	r0, r4
 8023b3c:	4629      	mov	r1, r5
 8023b3e:	f7ec fff9 	bl	8010b34 <__aeabi_dcmpge>
 8023b42:	b188      	cbz	r0, 8023b68 <mg_dtoa+0x2c8>
 8023b44:	eb07 0906 	add.w	r9, r7, r6
 8023b48:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8023b4c:	dc0c      	bgt.n	8023b68 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8023b4e:	4622      	mov	r2, r4
 8023b50:	462b      	mov	r3, r5
 8023b52:	4650      	mov	r0, sl
 8023b54:	4659      	mov	r1, fp
 8023b56:	f7ec fe91 	bl	801087c <__aeabi_ddiv>
 8023b5a:	f7ed f815 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023b5e:	2e00      	cmp	r6, #0
 8023b60:	dcca      	bgt.n	8023af8 <mg_dtoa+0x258>
 8023b62:	2800      	cmp	r0, #0
 8023b64:	dcc8      	bgt.n	8023af8 <mg_dtoa+0x258>
 8023b66:	e7d0      	b.n	8023b0a <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8023b68:	b9ce      	cbnz	r6, 8023b9e <mg_dtoa+0x2fe>
 8023b6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023b6e:	446b      	add	r3, sp
 8023b70:	2230      	movs	r2, #48	@ 0x30
 8023b72:	f803 2c28 	strb.w	r2, [r3, #-40]
 8023b76:	3701      	adds	r7, #1
 8023b78:	e011      	b.n	8023b9e <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8023b7a:	f106 0901 	add.w	r9, r6, #1
 8023b7e:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8023b82:	eb0d 0603 	add.w	r6, sp, r3
 8023b86:	2330      	movs	r3, #48	@ 0x30
 8023b88:	f806 3c28 	strb.w	r3, [r6, #-40]
 8023b8c:	2200      	movs	r2, #0
 8023b8e:	4b18      	ldr	r3, [pc, #96]	@ (8023bf0 <mg_dtoa+0x350>)
 8023b90:	4620      	mov	r0, r4
 8023b92:	4629      	mov	r1, r5
 8023b94:	f7ec fe72 	bl	801087c <__aeabi_ddiv>
 8023b98:	4604      	mov	r4, r0
 8023b9a:	460d      	mov	r5, r1
 8023b9c:	464e      	mov	r6, r9
 8023b9e:	2200      	movs	r2, #0
 8023ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8023bd8 <mg_dtoa+0x338>)
 8023ba2:	4620      	mov	r0, r4
 8023ba4:	4629      	mov	r1, r5
 8023ba6:	f7ec ffc5 	bl	8010b34 <__aeabi_dcmpge>
 8023baa:	b110      	cbz	r0, 8023bb2 <mg_dtoa+0x312>
 8023bac:	19f3      	adds	r3, r6, r7
 8023bae:	2b27      	cmp	r3, #39	@ 0x27
 8023bb0:	dde3      	ble.n	8023b7a <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8023bb2:	19f3      	adds	r3, r6, r7
 8023bb4:	2b27      	cmp	r3, #39	@ 0x27
 8023bb6:	dc05      	bgt.n	8023bc4 <mg_dtoa+0x324>
 8023bb8:	3701      	adds	r7, #1
 8023bba:	3348      	adds	r3, #72	@ 0x48
 8023bbc:	446b      	add	r3, sp
 8023bbe:	222e      	movs	r2, #46	@ 0x2e
 8023bc0:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8023bc4:	a502      	add	r5, pc, #8	@ (adr r5, 8023bd0 <mg_dtoa+0x330>)
 8023bc6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023bca:	e03e      	b.n	8023c4a <mg_dtoa+0x3aa>
 8023bcc:	f3af 8000 	nop.w
 8023bd0:	9999999a 	.word	0x9999999a
 8023bd4:	3fb99999 	.word	0x3fb99999
 8023bd8:	3ff00000 	.word	0x3ff00000
 8023bdc:	08039ab4 	.word	0x08039ab4
 8023be0:	0803b398 	.word	0x0803b398
 8023be4:	0803a7c0 	.word	0x0803a7c0
 8023be8:	0803a7c4 	.word	0x0803a7c4
 8023bec:	0803a7cc 	.word	0x0803a7cc
 8023bf0:	40240000 	.word	0x40240000
 8023bf4:	40140000 	.word	0x40140000
 8023bf8:	0803a7d0 	.word	0x0803a7d0
      int ch = (int) (d / t);
 8023bfc:	4622      	mov	r2, r4
 8023bfe:	462b      	mov	r3, r5
 8023c00:	4650      	mov	r0, sl
 8023c02:	4659      	mov	r1, fp
 8023c04:	f7ec fe3a 	bl	801087c <__aeabi_ddiv>
 8023c08:	f7ec ffbe 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8023c0c:	3601      	adds	r6, #1
 8023c0e:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023c12:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023c16:	eb0d 0902 	add.w	r9, sp, r2
 8023c1a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8023c1e:	f7ec fc99 	bl	8010554 <__aeabi_i2d>
 8023c22:	4622      	mov	r2, r4
 8023c24:	462b      	mov	r3, r5
 8023c26:	f7ec fcff 	bl	8010628 <__aeabi_dmul>
 8023c2a:	4602      	mov	r2, r0
 8023c2c:	460b      	mov	r3, r1
 8023c2e:	4650      	mov	r0, sl
 8023c30:	4659      	mov	r1, fp
 8023c32:	f7ec fb41 	bl	80102b8 <__aeabi_dsub>
 8023c36:	4682      	mov	sl, r0
 8023c38:	468b      	mov	fp, r1
      t /= 10.0;
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8023cb4 <mg_dtoa+0x414>)
 8023c3e:	4620      	mov	r0, r4
 8023c40:	4629      	mov	r1, r5
 8023c42:	f7ec fe1b 	bl	801087c <__aeabi_ddiv>
 8023c46:	4604      	mov	r4, r0
 8023c48:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8023c4a:	eb07 0906 	add.w	r9, r7, r6
 8023c4e:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8023c52:	dc03      	bgt.n	8023c5c <mg_dtoa+0x3bc>
 8023c54:	4546      	cmp	r6, r8
 8023c56:	dbd1      	blt.n	8023bfc <mg_dtoa+0x35c>
 8023c58:	9a07      	ldr	r2, [sp, #28]
 8023c5a:	e000      	b.n	8023c5e <mg_dtoa+0x3be>
 8023c5c:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8023c5e:	b152      	cbz	r2, 8023c76 <mg_dtoa+0x3d6>
 8023c60:	2e00      	cmp	r6, #0
 8023c62:	dd08      	ble.n	8023c76 <mg_dtoa+0x3d6>
 8023c64:	19bb      	adds	r3, r7, r6
 8023c66:	3347      	adds	r3, #71	@ 0x47
 8023c68:	446b      	add	r3, sp
 8023c6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8023c6e:	2b30      	cmp	r3, #48	@ 0x30
 8023c70:	d101      	bne.n	8023c76 <mg_dtoa+0x3d6>
 8023c72:	3e01      	subs	r6, #1
 8023c74:	e7f3      	b.n	8023c5e <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8023c76:	2e00      	cmp	r6, #0
 8023c78:	dd06      	ble.n	8023c88 <mg_dtoa+0x3e8>
 8023c7a:	19bb      	adds	r3, r7, r6
 8023c7c:	3347      	adds	r3, #71	@ 0x47
 8023c7e:	446b      	add	r3, sp
 8023c80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8023c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8023c86:	d013      	beq.n	8023cb0 <mg_dtoa+0x410>
  n += s;
 8023c88:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8023c8a:	2f27      	cmp	r7, #39	@ 0x27
 8023c8c:	dd00      	ble.n	8023c90 <mg_dtoa+0x3f0>
 8023c8e:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8023c90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8023c94:	eb0d 0703 	add.w	r7, sp, r3
 8023c98:	2300      	movs	r3, #0
 8023c9a:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8023c9e:	ab08      	add	r3, sp, #32
 8023ca0:	4a05      	ldr	r2, [pc, #20]	@ (8023cb8 <mg_dtoa+0x418>)
 8023ca2:	9906      	ldr	r1, [sp, #24]
 8023ca4:	9805      	ldr	r0, [sp, #20]
 8023ca6:	f7ff fdeb 	bl	8023880 <mg_snprintf>
}
 8023caa:	b013      	add	sp, #76	@ 0x4c
 8023cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8023cb0:	3e01      	subs	r6, #1
 8023cb2:	e7e9      	b.n	8023c88 <mg_dtoa+0x3e8>
 8023cb4:	40240000 	.word	0x40240000
 8023cb8:	0803b398 	.word	0x0803b398

08023cbc <mg_vxprintf>:
                   va_list *ap) {
 8023cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cc0:	b093      	sub	sp, #76	@ 0x4c
 8023cc2:	4681      	mov	r9, r0
 8023cc4:	468a      	mov	sl, r1
 8023cc6:	4693      	mov	fp, r2
 8023cc8:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 8023cca:	2700      	movs	r7, #0
 8023ccc:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 8023cce:	e1bc      	b.n	802404a <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023cd0:	2320      	movs	r3, #32
 8023cd2:	f88d 301f 	strb.w	r3, [sp, #31]
 8023cd6:	1c66      	adds	r6, r4, #1
 8023cd8:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 8023cdc:	2d23      	cmp	r5, #35	@ 0x23
 8023cde:	d00c      	beq.n	8023cfa <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023ce0:	2300      	movs	r3, #0
 8023ce2:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 8023ce4:	2d2d      	cmp	r5, #45	@ 0x2d
 8023ce6:	d10e      	bne.n	8023d06 <mg_vxprintf+0x4a>
 8023ce8:	3601      	adds	r6, #1
 8023cea:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023cee:	2301      	movs	r3, #1
 8023cf0:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8023cf2:	2d30      	cmp	r5, #48	@ 0x30
 8023cf4:	d00a      	beq.n	8023d0c <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8023cf6:	2400      	movs	r4, #0
 8023cf8:	e017      	b.n	8023d2a <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 8023cfa:	1ca6      	adds	r6, r4, #2
 8023cfc:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023d00:	2301      	movs	r3, #1
 8023d02:	9302      	str	r3, [sp, #8]
 8023d04:	e7ee      	b.n	8023ce4 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023d06:	2300      	movs	r3, #0
 8023d08:	9304      	str	r3, [sp, #16]
 8023d0a:	e7f2      	b.n	8023cf2 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8023d0c:	2330      	movs	r3, #48	@ 0x30
 8023d0e:	f88d 301f 	strb.w	r3, [sp, #31]
 8023d12:	3601      	adds	r6, #1
 8023d14:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023d18:	e7ed      	b.n	8023cf6 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8023d1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8023d1e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8023d22:	3c30      	subs	r4, #48	@ 0x30
 8023d24:	3601      	adds	r6, #1
 8023d26:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023d2a:	4628      	mov	r0, r5
 8023d2c:	f7fc f839 	bl	801fda2 <is_digit>
 8023d30:	4601      	mov	r1, r0
 8023d32:	2800      	cmp	r0, #0
 8023d34:	d1f1      	bne.n	8023d1a <mg_vxprintf+0x5e>
      if (c == '.') {
 8023d36:	2d2e      	cmp	r5, #46	@ 0x2e
 8023d38:	d002      	beq.n	8023d40 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023d3a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8023d3e:	e026      	b.n	8023d8e <mg_vxprintf+0xd2>
        c = fmt[++i];
 8023d40:	1c73      	adds	r3, r6, #1
 8023d42:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8023d46:	2d2a      	cmp	r5, #42	@ 0x2a
 8023d48:	d119      	bne.n	8023d7e <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8023d4a:	9803      	ldr	r0, [sp, #12]
 8023d4c:	6803      	ldr	r3, [r0, #0]
 8023d4e:	1d1a      	adds	r2, r3, #4
 8023d50:	6002      	str	r2, [r0, #0]
 8023d52:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8023d56:	3602      	adds	r6, #2
 8023d58:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023d5c:	e017      	b.n	8023d8e <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8023d5e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8023d62:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8023d66:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8023d6a:	3601      	adds	r6, #1
 8023d6c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023d70:	4628      	mov	r0, r5
 8023d72:	f7fc f816 	bl	801fda2 <is_digit>
 8023d76:	2800      	cmp	r0, #0
 8023d78:	d1f1      	bne.n	8023d5e <mg_vxprintf+0xa2>
 8023d7a:	9905      	ldr	r1, [sp, #20]
 8023d7c:	e007      	b.n	8023d8e <mg_vxprintf+0xd2>
          pr = 0;
 8023d7e:	f04f 0800 	mov.w	r8, #0
 8023d82:	461e      	mov	r6, r3
 8023d84:	9005      	str	r0, [sp, #20]
 8023d86:	e7f3      	b.n	8023d70 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8023d88:	3601      	adds	r6, #1
 8023d8a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023d8e:	2d68      	cmp	r5, #104	@ 0x68
 8023d90:	d0fa      	beq.n	8023d88 <mg_vxprintf+0xcc>
      if (c == 'l') {
 8023d92:	2d6c      	cmp	r5, #108	@ 0x6c
 8023d94:	d05f      	beq.n	8023e56 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023d96:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8023d98:	2d70      	cmp	r5, #112	@ 0x70
 8023d9a:	d069      	beq.n	8023e70 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023d9c:	2d64      	cmp	r5, #100	@ 0x64
 8023d9e:	d06a      	beq.n	8023e76 <mg_vxprintf+0x1ba>
 8023da0:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 8023da4:	2b53      	cmp	r3, #83	@ 0x53
 8023da6:	f200 81bc 	bhi.w	8024122 <mg_vxprintf+0x466>
 8023daa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023dae:	01b5      	.short	0x01b5
 8023db0:	01ba01ba 	.word	0x01ba01ba
 8023db4:	01ba01ba 	.word	0x01ba01ba
 8023db8:	01ba01ba 	.word	0x01ba01ba
 8023dbc:	01ba01ba 	.word	0x01ba01ba
 8023dc0:	01ba01ba 	.word	0x01ba01ba
 8023dc4:	01ba01ba 	.word	0x01ba01ba
 8023dc8:	01ba01ba 	.word	0x01ba01ba
 8023dcc:	01ba01ba 	.word	0x01ba01ba
 8023dd0:	01ba01ba 	.word	0x01ba01ba
 8023dd4:	01ba01ba 	.word	0x01ba01ba
 8023dd8:	01ba01ba 	.word	0x01ba01ba
 8023ddc:	01ba01ba 	.word	0x01ba01ba
 8023de0:	01ba01ba 	.word	0x01ba01ba
 8023de4:	01ba01ba 	.word	0x01ba01ba
 8023de8:	01ba01ba 	.word	0x01ba01ba
 8023dec:	01ba01ba 	.word	0x01ba01ba
 8023df0:	01ba01ba 	.word	0x01ba01ba
 8023df4:	01ba01ba 	.word	0x01ba01ba
 8023df8:	01ba01ba 	.word	0x01ba01ba
 8023dfc:	014101ba 	.word	0x014101ba
 8023e00:	01ba01ba 	.word	0x01ba01ba
 8023e04:	01ba01ba 	.word	0x01ba01ba
 8023e08:	01ba01ba 	.word	0x01ba01ba
 8023e0c:	01ba01ba 	.word	0x01ba01ba
 8023e10:	01ba01ba 	.word	0x01ba01ba
 8023e14:	01ba0065 	.word	0x01ba0065
 8023e18:	01ba01ba 	.word	0x01ba01ba
 8023e1c:	01ba01ba 	.word	0x01ba01ba
 8023e20:	01ba01ba 	.word	0x01ba01ba
 8023e24:	01ba01ba 	.word	0x01ba01ba
 8023e28:	016801ba 	.word	0x016801ba
 8023e2c:	01ba01ba 	.word	0x01ba01ba
 8023e30:	00650065 	.word	0x00650065
 8023e34:	01ba01ba 	.word	0x01ba01ba
 8023e38:	01ba01ba 	.word	0x01ba01ba
 8023e3c:	015a01ba 	.word	0x015a01ba
 8023e40:	01ba01ba 	.word	0x01ba01ba
 8023e44:	01ba0065 	.word	0x01ba0065
 8023e48:	017101ba 	.word	0x017101ba
 8023e4c:	006501ba 	.word	0x006501ba
 8023e50:	01ba01ba 	.word	0x01ba01ba
 8023e54:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8023e56:	1c73      	adds	r3, r6, #1
 8023e58:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8023e5c:	2d6c      	cmp	r5, #108	@ 0x6c
 8023e5e:	d002      	beq.n	8023e66 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8023e60:	461e      	mov	r6, r3
 8023e62:	2201      	movs	r2, #1
 8023e64:	e798      	b.n	8023d98 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8023e66:	3602      	adds	r6, #2
 8023e68:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023e6c:	2202      	movs	r2, #2
 8023e6e:	e793      	b.n	8023d98 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8023e70:	2201      	movs	r2, #1
 8023e72:	9202      	str	r2, [sp, #8]
 8023e74:	e792      	b.n	8023d9c <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023e76:	2101      	movs	r1, #1
 8023e78:	2d58      	cmp	r5, #88	@ 0x58
 8023e7a:	d027      	beq.n	8023ecc <mg_vxprintf+0x210>
 8023e7c:	2d70      	cmp	r5, #112	@ 0x70
 8023e7e:	d021      	beq.n	8023ec4 <mg_vxprintf+0x208>
 8023e80:	2300      	movs	r3, #0
 8023e82:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8023e84:	9b02      	ldr	r3, [sp, #8]
 8023e86:	b10b      	cbz	r3, 8023e8c <mg_vxprintf+0x1d0>
 8023e88:	2302      	movs	r3, #2
 8023e8a:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8023e8c:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8023e90:	b2db      	uxtb	r3, r3
 8023e92:	2b01      	cmp	r3, #1
 8023e94:	d91c      	bls.n	8023ed0 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8023e96:	2a02      	cmp	r2, #2
 8023e98:	d037      	beq.n	8023f0a <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8023e9a:	2a01      	cmp	r2, #1
 8023e9c:	d046      	beq.n	8023f2c <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8023e9e:	9b03      	ldr	r3, [sp, #12]
 8023ea0:	f8d3 c000 	ldr.w	ip, [r3]
 8023ea4:	f10c 0204 	add.w	r2, ip, #4
 8023ea8:	601a      	str	r2, [r3, #0]
 8023eaa:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023eae:	2d64      	cmp	r5, #100	@ 0x64
 8023eb0:	d052      	beq.n	8023f58 <mg_vxprintf+0x29c>
 8023eb2:	461a      	mov	r2, r3
 8023eb4:	2300      	movs	r3, #0
 8023eb6:	9001      	str	r0, [sp, #4]
 8023eb8:	9100      	str	r1, [sp, #0]
 8023eba:	a808      	add	r0, sp, #32
 8023ebc:	f7fb ffd4 	bl	801fe68 <mg_lld>
 8023ec0:	4605      	mov	r5, r0
 8023ec2:	e01c      	b.n	8023efe <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023ec4:	2301      	movs	r3, #1
 8023ec6:	e7dc      	b.n	8023e82 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023ec8:	2301      	movs	r3, #1
 8023eca:	e7da      	b.n	8023e82 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023ecc:	2301      	movs	r3, #1
 8023ece:	e7d8      	b.n	8023e82 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8023ed0:	9903      	ldr	r1, [sp, #12]
 8023ed2:	680b      	ldr	r3, [r1, #0]
 8023ed4:	3307      	adds	r3, #7
 8023ed6:	f023 0307 	bic.w	r3, r3, #7
 8023eda:	f103 0208 	add.w	r2, r3, #8
 8023ede:	600a      	str	r2, [r1, #0]
 8023ee0:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8023ee4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023ee8:	d00c      	beq.n	8023f04 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8023eea:	2d67      	cmp	r5, #103	@ 0x67
 8023eec:	bf14      	ite	ne
 8023eee:	2300      	movne	r3, #0
 8023ef0:	2301      	moveq	r3, #1
 8023ef2:	4642      	mov	r2, r8
 8023ef4:	2128      	movs	r1, #40	@ 0x28
 8023ef6:	a808      	add	r0, sp, #32
 8023ef8:	f7ff fcd2 	bl	80238a0 <mg_dtoa>
 8023efc:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8023efe:	2300      	movs	r3, #0
 8023f00:	9a02      	ldr	r2, [sp, #8]
 8023f02:	e02e      	b.n	8023f62 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8023f04:	f04f 0806 	mov.w	r8, #6
 8023f08:	e7ef      	b.n	8023eea <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8023f0a:	9d03      	ldr	r5, [sp, #12]
 8023f0c:	682b      	ldr	r3, [r5, #0]
 8023f0e:	3307      	adds	r3, #7
 8023f10:	f023 0307 	bic.w	r3, r3, #7
 8023f14:	f103 0208 	add.w	r2, r3, #8
 8023f18:	602a      	str	r2, [r5, #0]
 8023f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8023f1e:	9001      	str	r0, [sp, #4]
 8023f20:	9100      	str	r1, [sp, #0]
 8023f22:	a808      	add	r0, sp, #32
 8023f24:	f7fb ffa0 	bl	801fe68 <mg_lld>
 8023f28:	4605      	mov	r5, r0
 8023f2a:	e7e8      	b.n	8023efe <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8023f2c:	9b03      	ldr	r3, [sp, #12]
 8023f2e:	f8d3 c000 	ldr.w	ip, [r3]
 8023f32:	f10c 0204 	add.w	r2, ip, #4
 8023f36:	601a      	str	r2, [r3, #0]
 8023f38:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8023f3c:	2d64      	cmp	r5, #100	@ 0x64
 8023f3e:	d008      	beq.n	8023f52 <mg_vxprintf+0x296>
 8023f40:	461a      	mov	r2, r3
 8023f42:	2300      	movs	r3, #0
 8023f44:	9001      	str	r0, [sp, #4]
 8023f46:	9100      	str	r1, [sp, #0]
 8023f48:	a808      	add	r0, sp, #32
 8023f4a:	f7fb ff8d 	bl	801fe68 <mg_lld>
 8023f4e:	4605      	mov	r5, r0
 8023f50:	e7d5      	b.n	8023efe <mg_vxprintf+0x242>
 8023f52:	461a      	mov	r2, r3
 8023f54:	17db      	asrs	r3, r3, #31
 8023f56:	e7f5      	b.n	8023f44 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023f58:	461a      	mov	r2, r3
 8023f5a:	17db      	asrs	r3, r3, #31
 8023f5c:	e7ab      	b.n	8023eb6 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8023f5e:	3c01      	subs	r4, #1
 8023f60:	3301      	adds	r3, #1
 8023f62:	4293      	cmp	r3, r2
 8023f64:	d225      	bcs.n	8023fb2 <mg_vxprintf+0x2f6>
 8023f66:	2c00      	cmp	r4, #0
 8023f68:	d1f9      	bne.n	8023f5e <mg_vxprintf+0x2a2>
 8023f6a:	46a0      	mov	r8, r4
 8023f6c:	9605      	str	r6, [sp, #20]
 8023f6e:	9e04      	ldr	r6, [sp, #16]
 8023f70:	e009      	b.n	8023f86 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023f72:	2301      	movs	r3, #1
 8023f74:	f10d 021f 	add.w	r2, sp, #31
 8023f78:	4651      	mov	r1, sl
 8023f7a:	4648      	mov	r0, r9
 8023f7c:	f7fc f80a 	bl	801ff94 <scpy>
 8023f80:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8023f82:	f108 0801 	add.w	r8, r8, #1
 8023f86:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023f8a:	2b20      	cmp	r3, #32
 8023f8c:	d106      	bne.n	8023f9c <mg_vxprintf+0x2e0>
 8023f8e:	b92e      	cbnz	r6, 8023f9c <mg_vxprintf+0x2e0>
 8023f90:	42a5      	cmp	r5, r4
 8023f92:	d203      	bcs.n	8023f9c <mg_vxprintf+0x2e0>
 8023f94:	eb08 0305 	add.w	r3, r8, r5
 8023f98:	42a3      	cmp	r3, r4
 8023f9a:	d3ea      	bcc.n	8023f72 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8023f9c:	9e05      	ldr	r6, [sp, #20]
 8023f9e:	9b02      	ldr	r3, [sp, #8]
 8023fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8024150 <mg_vxprintf+0x494>)
 8023fa2:	4651      	mov	r1, sl
 8023fa4:	4648      	mov	r0, r9
 8023fa6:	f7fb fff5 	bl	801ff94 <scpy>
 8023faa:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023fae:	2700      	movs	r7, #0
 8023fb0:	e00d      	b.n	8023fce <mg_vxprintf+0x312>
 8023fb2:	f04f 0800 	mov.w	r8, #0
 8023fb6:	9605      	str	r6, [sp, #20]
 8023fb8:	9e04      	ldr	r6, [sp, #16]
 8023fba:	e7e4      	b.n	8023f86 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023fbc:	2301      	movs	r3, #1
 8023fbe:	f10d 021f 	add.w	r2, sp, #31
 8023fc2:	4651      	mov	r1, sl
 8023fc4:	4648      	mov	r0, r9
 8023fc6:	f7fb ffe5 	bl	801ff94 <scpy>
 8023fca:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023fcc:	3701      	adds	r7, #1
 8023fce:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023fd2:	2b30      	cmp	r3, #48	@ 0x30
 8023fd4:	d104      	bne.n	8023fe0 <mg_vxprintf+0x324>
 8023fd6:	42a5      	cmp	r5, r4
 8023fd8:	d202      	bcs.n	8023fe0 <mg_vxprintf+0x324>
 8023fda:	197b      	adds	r3, r7, r5
 8023fdc:	42a3      	cmp	r3, r4
 8023fde:	d3ed      	bcc.n	8023fbc <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8023fe0:	462b      	mov	r3, r5
 8023fe2:	aa08      	add	r2, sp, #32
 8023fe4:	4651      	mov	r1, sl
 8023fe6:	4648      	mov	r0, r9
 8023fe8:	f7fb ffd4 	bl	801ff94 <scpy>
 8023fec:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023ff0:	f04f 0800 	mov.w	r8, #0
 8023ff4:	9602      	str	r6, [sp, #8]
 8023ff6:	9e04      	ldr	r6, [sp, #16]
 8023ff8:	e009      	b.n	802400e <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8023ffa:	2301      	movs	r3, #1
 8023ffc:	f10d 021f 	add.w	r2, sp, #31
 8024000:	4651      	mov	r1, sl
 8024002:	4648      	mov	r0, r9
 8024004:	f7fb ffc6 	bl	801ff94 <scpy>
 8024008:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 802400a:	f108 0801 	add.w	r8, r8, #1
 802400e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8024012:	2b20      	cmp	r3, #32
 8024014:	f040 808d 	bne.w	8024132 <mg_vxprintf+0x476>
 8024018:	2e00      	cmp	r6, #0
 802401a:	f000 808c 	beq.w	8024136 <mg_vxprintf+0x47a>
 802401e:	42a5      	cmp	r5, r4
 8024020:	f080 808b 	bcs.w	802413a <mg_vxprintf+0x47e>
 8024024:	eb08 0305 	add.w	r3, r8, r5
 8024028:	42a3      	cmp	r3, r4
 802402a:	d3e6      	bcc.n	8023ffa <mg_vxprintf+0x33e>
 802402c:	9e02      	ldr	r6, [sp, #8]
 802402e:	e00b      	b.n	8024048 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8024030:	9903      	ldr	r1, [sp, #12]
 8024032:	680b      	ldr	r3, [r1, #0]
 8024034:	1d1a      	adds	r2, r3, #4
 8024036:	600a      	str	r2, [r1, #0]
 8024038:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 802403a:	9a03      	ldr	r2, [sp, #12]
 802403c:	4651      	mov	r1, sl
 802403e:	4648      	mov	r0, r9
 8024040:	47a0      	blx	r4
 8024042:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8024044:	2d6d      	cmp	r5, #109	@ 0x6d
 8024046:	d015      	beq.n	8024074 <mg_vxprintf+0x3b8>
      i++;
 8024048:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 802404a:	f81b 0004 	ldrb.w	r0, [fp, r4]
 802404e:	2800      	cmp	r0, #0
 8024050:	d079      	beq.n	8024146 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8024052:	2825      	cmp	r0, #37	@ 0x25
 8024054:	f43f ae3c 	beq.w	8023cd0 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8024058:	4651      	mov	r1, sl
 802405a:	47c8      	blx	r9
 802405c:	3701      	adds	r7, #1
 802405e:	3401      	adds	r4, #1
 8024060:	e7f3      	b.n	802404a <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8024062:	9903      	ldr	r1, [sp, #12]
 8024064:	680b      	ldr	r3, [r1, #0]
 8024066:	1d1a      	adds	r2, r3, #4
 8024068:	600a      	str	r2, [r1, #0]
 802406a:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 802406c:	4651      	mov	r1, sl
 802406e:	2022      	movs	r0, #34	@ 0x22
 8024070:	47c8      	blx	r9
 8024072:	e7e2      	b.n	802403a <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8024074:	3702      	adds	r7, #2
 8024076:	4651      	mov	r1, sl
 8024078:	2022      	movs	r0, #34	@ 0x22
 802407a:	47c8      	blx	r9
 802407c:	e7e4      	b.n	8024048 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 802407e:	9903      	ldr	r1, [sp, #12]
 8024080:	680b      	ldr	r3, [r1, #0]
 8024082:	1d1a      	adds	r2, r3, #4
 8024084:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8024086:	4651      	mov	r1, sl
 8024088:	7818      	ldrb	r0, [r3, #0]
 802408a:	47c8      	blx	r9
        n++;
 802408c:	3701      	adds	r7, #1
 802408e:	e7db      	b.n	8024048 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8024090:	9903      	ldr	r1, [sp, #12]
 8024092:	680b      	ldr	r3, [r1, #0]
 8024094:	1d1a      	adds	r2, r3, #4
 8024096:	600a      	str	r2, [r1, #0]
 8024098:	681b      	ldr	r3, [r3, #0]
 802409a:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 802409c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80240a0:	d003      	beq.n	80240aa <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80240a2:	2500      	movs	r5, #0
 80240a4:	9605      	str	r6, [sp, #20]
 80240a6:	9e04      	ldr	r6, [sp, #16]
 80240a8:	e011      	b.n	80240ce <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80240aa:	4618      	mov	r0, r3
 80240ac:	b11b      	cbz	r3, 80240b6 <mg_vxprintf+0x3fa>
 80240ae:	f7ec f8f7 	bl	80102a0 <strlen>
 80240b2:	4680      	mov	r8, r0
 80240b4:	e7f5      	b.n	80240a2 <mg_vxprintf+0x3e6>
 80240b6:	f04f 0800 	mov.w	r8, #0
 80240ba:	e7f2      	b.n	80240a2 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 80240bc:	2301      	movs	r3, #1
 80240be:	f10d 021f 	add.w	r2, sp, #31
 80240c2:	4651      	mov	r1, sl
 80240c4:	4648      	mov	r0, r9
 80240c6:	f7fb ff65 	bl	801ff94 <scpy>
 80240ca:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80240cc:	3501      	adds	r5, #1
 80240ce:	b92e      	cbnz	r6, 80240dc <mg_vxprintf+0x420>
 80240d0:	4544      	cmp	r4, r8
 80240d2:	d903      	bls.n	80240dc <mg_vxprintf+0x420>
 80240d4:	eb05 0308 	add.w	r3, r5, r8
 80240d8:	42a3      	cmp	r3, r4
 80240da:	d3ef      	bcc.n	80240bc <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 80240dc:	9e05      	ldr	r6, [sp, #20]
 80240de:	4643      	mov	r3, r8
 80240e0:	9a02      	ldr	r2, [sp, #8]
 80240e2:	4651      	mov	r1, sl
 80240e4:	4648      	mov	r0, r9
 80240e6:	f7fb ff55 	bl	801ff94 <scpy>
 80240ea:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80240ec:	2500      	movs	r5, #0
 80240ee:	9602      	str	r6, [sp, #8]
 80240f0:	9e04      	ldr	r6, [sp, #16]
 80240f2:	e008      	b.n	8024106 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 80240f4:	2301      	movs	r3, #1
 80240f6:	f10d 021f 	add.w	r2, sp, #31
 80240fa:	4651      	mov	r1, sl
 80240fc:	4648      	mov	r0, r9
 80240fe:	f7fb ff49 	bl	801ff94 <scpy>
 8024102:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8024104:	3501      	adds	r5, #1
 8024106:	b1d6      	cbz	r6, 802413e <mg_vxprintf+0x482>
 8024108:	4544      	cmp	r4, r8
 802410a:	d91a      	bls.n	8024142 <mg_vxprintf+0x486>
 802410c:	eb05 0308 	add.w	r3, r5, r8
 8024110:	42a3      	cmp	r3, r4
 8024112:	d3ef      	bcc.n	80240f4 <mg_vxprintf+0x438>
 8024114:	9e02      	ldr	r6, [sp, #8]
 8024116:	e797      	b.n	8024048 <mg_vxprintf+0x38c>
        out('%', param);
 8024118:	4651      	mov	r1, sl
 802411a:	2025      	movs	r0, #37	@ 0x25
 802411c:	47c8      	blx	r9
        n++;
 802411e:	3701      	adds	r7, #1
 8024120:	e792      	b.n	8024048 <mg_vxprintf+0x38c>
        out('%', param);
 8024122:	4651      	mov	r1, sl
 8024124:	2025      	movs	r0, #37	@ 0x25
 8024126:	47c8      	blx	r9
        out(c, param);
 8024128:	4651      	mov	r1, sl
 802412a:	4628      	mov	r0, r5
 802412c:	47c8      	blx	r9
        n += 2;
 802412e:	3702      	adds	r7, #2
 8024130:	e78a      	b.n	8024048 <mg_vxprintf+0x38c>
 8024132:	9e02      	ldr	r6, [sp, #8]
 8024134:	e788      	b.n	8024048 <mg_vxprintf+0x38c>
 8024136:	9e02      	ldr	r6, [sp, #8]
 8024138:	e786      	b.n	8024048 <mg_vxprintf+0x38c>
 802413a:	9e02      	ldr	r6, [sp, #8]
 802413c:	e784      	b.n	8024048 <mg_vxprintf+0x38c>
 802413e:	9e02      	ldr	r6, [sp, #8]
 8024140:	e782      	b.n	8024048 <mg_vxprintf+0x38c>
 8024142:	9e02      	ldr	r6, [sp, #8]
 8024144:	e780      	b.n	8024048 <mg_vxprintf+0x38c>
}
 8024146:	4638      	mov	r0, r7
 8024148:	b013      	add	sp, #76	@ 0x4c
 802414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802414e:	bf00      	nop
 8024150:	0803a7d8 	.word	0x0803a7d8

08024154 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8024154:	b40c      	push	{r2, r3}
 8024156:	b500      	push	{lr}
 8024158:	b083      	sub	sp, #12
 802415a:	ab04      	add	r3, sp, #16
 802415c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8024160:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8024162:	ab01      	add	r3, sp, #4
 8024164:	f7ff fdaa 	bl	8023cbc <mg_vxprintf>
}
 8024168:	b003      	add	sp, #12
 802416a:	f85d eb04 	ldr.w	lr, [sp], #4
 802416e:	b002      	add	sp, #8
 8024170:	4770      	bx	lr
	...

08024174 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8024174:	b530      	push	{r4, r5, lr}
 8024176:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8024178:	7853      	ldrb	r3, [r2, #1]
 802417a:	7894      	ldrb	r4, [r2, #2]
 802417c:	78d5      	ldrb	r5, [r2, #3]
 802417e:	9502      	str	r5, [sp, #8]
 8024180:	9401      	str	r4, [sp, #4]
 8024182:	9300      	str	r3, [sp, #0]
 8024184:	7813      	ldrb	r3, [r2, #0]
 8024186:	4a02      	ldr	r2, [pc, #8]	@ (8024190 <print_ip4+0x1c>)
 8024188:	f7ff ffe4 	bl	8024154 <mg_xprintf>
}
 802418c:	b005      	add	sp, #20
 802418e:	bd30      	pop	{r4, r5, pc}
 8024190:	0803a7dc 	.word	0x0803a7dc

08024194 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8024194:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8024196:	6813      	ldr	r3, [r2, #0]
 8024198:	1d1c      	adds	r4, r3, #4
 802419a:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 802419c:	681a      	ldr	r2, [r3, #0]
 802419e:	f7ff ffe9 	bl	8024174 <print_ip4>
}
 80241a2:	bd10      	pop	{r4, pc}

080241a4 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80241a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241a6:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 80241a8:	6813      	ldr	r3, [r2, #0]
 80241aa:	1d1c      	adds	r4, r3, #4
 80241ac:	6014      	str	r4, [r2, #0]
 80241ae:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80241b0:	7813      	ldrb	r3, [r2, #0]
 80241b2:	7854      	ldrb	r4, [r2, #1]
 80241b4:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 80241b6:	78d6      	ldrb	r6, [r2, #3]
 80241b8:	7917      	ldrb	r7, [r2, #4]
 80241ba:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80241bc:	9204      	str	r2, [sp, #16]
 80241be:	9703      	str	r7, [sp, #12]
 80241c0:	9602      	str	r6, [sp, #8]
 80241c2:	9501      	str	r5, [sp, #4]
 80241c4:	9400      	str	r4, [sp, #0]
 80241c6:	4a02      	ldr	r2, [pc, #8]	@ (80241d0 <mg_print_mac+0x2c>)
 80241c8:	f7ff ffc4 	bl	8024154 <mg_xprintf>
}
 80241cc:	b007      	add	sp, #28
 80241ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241d0:	0803a7e8 	.word	0x0803a7e8

080241d4 <mg_log>:
void mg_log(const char *fmt, ...) {
 80241d4:	b40f      	push	{r0, r1, r2, r3}
 80241d6:	b500      	push	{lr}
 80241d8:	b083      	sub	sp, #12
 80241da:	ab04      	add	r3, sp, #16
 80241dc:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80241e0:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80241e2:	ab01      	add	r3, sp, #4
 80241e4:	4907      	ldr	r1, [pc, #28]	@ (8024204 <mg_log+0x30>)
 80241e6:	6809      	ldr	r1, [r1, #0]
 80241e8:	4807      	ldr	r0, [pc, #28]	@ (8024208 <mg_log+0x34>)
 80241ea:	6800      	ldr	r0, [r0, #0]
 80241ec:	f7ff fd66 	bl	8023cbc <mg_vxprintf>
  logs("\r\n", 2);
 80241f0:	2102      	movs	r1, #2
 80241f2:	4806      	ldr	r0, [pc, #24]	@ (802420c <mg_log+0x38>)
 80241f4:	f7fc fcaa 	bl	8020b4c <logs>
}
 80241f8:	b003      	add	sp, #12
 80241fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80241fe:	b004      	add	sp, #16
 8024200:	4770      	bx	lr
 8024202:	bf00      	nop
 8024204:	20019f28 	.word	0x20019f28
 8024208:	20000128 	.word	0x20000128
 802420c:	0803b1fc 	.word	0x0803b1fc

08024210 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8024210:	b538      	push	{r3, r4, r5, lr}
 8024212:	4604      	mov	r4, r0
 8024214:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8024216:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8024218:	460a      	mov	r2, r1
 802421a:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 802421e:	4803      	ldr	r0, [pc, #12]	@ (802422c <mg_vprintf+0x1c>)
 8024220:	f7ff fd4c 	bl	8023cbc <mg_vxprintf>
  return c->send.len - old;
 8024224:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8024226:	1b40      	subs	r0, r0, r5
 8024228:	bd38      	pop	{r3, r4, r5, pc}
 802422a:	bf00      	nop
 802422c:	08027347 	.word	0x08027347

08024230 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8024230:	b40e      	push	{r1, r2, r3}
 8024232:	b500      	push	{lr}
 8024234:	b082      	sub	sp, #8
 8024236:	ab03      	add	r3, sp, #12
 8024238:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 802423c:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 802423e:	aa01      	add	r2, sp, #4
 8024240:	f7ff ffe6 	bl	8024210 <mg_vprintf>
}
 8024244:	b002      	add	sp, #8
 8024246:	f85d eb04 	ldr.w	lr, [sp], #4
 802424a:	b003      	add	sp, #12
 802424c:	4770      	bx	lr
	...

08024250 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8024250:	b530      	push	{r4, r5, lr}
 8024252:	b085      	sub	sp, #20
 8024254:	4605      	mov	r5, r0
 8024256:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8024258:	9000      	str	r0, [sp, #0]
 802425a:	9101      	str	r1, [sp, #4]
 802425c:	2100      	movs	r1, #0
 802425e:	9102      	str	r1, [sp, #8]
 8024260:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8024262:	4669      	mov	r1, sp
 8024264:	4804      	ldr	r0, [pc, #16]	@ (8024278 <mg_vsnprintf+0x28>)
 8024266:	f7ff fd29 	bl	8023cbc <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 802426a:	4284      	cmp	r4, r0
 802426c:	d901      	bls.n	8024272 <mg_vsnprintf+0x22>
 802426e:	2300      	movs	r3, #0
 8024270:	542b      	strb	r3, [r5, r0]
}
 8024272:	b005      	add	sp, #20
 8024274:	bd30      	pop	{r4, r5, pc}
 8024276:	bf00      	nop
 8024278:	08027351 	.word	0x08027351

0802427c <mg_http_reply>:
                   const char *fmt, ...) {
 802427c:	b408      	push	{r3}
 802427e:	b570      	push	{r4, r5, r6, lr}
 8024280:	b085      	sub	sp, #20
 8024282:	4604      	mov	r4, r0
 8024284:	460e      	mov	r6, r1
 8024286:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8024288:	4608      	mov	r0, r1
 802428a:	f7fb ffcf 	bl	802022c <mg_http_status_code_str>
 802428e:	4603      	mov	r3, r0
 8024290:	b1ed      	cbz	r5, 80242ce <mg_http_reply+0x52>
 8024292:	9500      	str	r5, [sp, #0]
 8024294:	4632      	mov	r2, r6
 8024296:	4916      	ldr	r1, [pc, #88]	@ (80242f0 <mg_http_reply+0x74>)
 8024298:	4620      	mov	r0, r4
 802429a:	f7ff ffc9 	bl	8024230 <mg_printf>
  len = c->send.len;
 802429e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 80242a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80242a2:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80242a4:	ab03      	add	r3, sp, #12
 80242a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80242a8:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 80242ac:	4811      	ldr	r0, [pc, #68]	@ (80242f4 <mg_http_reply+0x78>)
 80242ae:	f7ff fd05 	bl	8023cbc <mg_vxprintf>
  if (c->send.len > 16) {
 80242b2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80242b4:	2b10      	cmp	r3, #16
 80242b6:	d80c      	bhi.n	80242d2 <mg_http_reply+0x56>
  c->is_resp = 0;
 80242b8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80242bc:	f36f 13c7 	bfc	r3, #7, #1
 80242c0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80242c4:	b005      	add	sp, #20
 80242c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80242ca:	b001      	add	sp, #4
 80242cc:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80242ce:	4d0a      	ldr	r5, [pc, #40]	@ (80242f8 <mg_http_reply+0x7c>)
 80242d0:	e7df      	b.n	8024292 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80242d2:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80242d4:	f1a5 000f 	sub.w	r0, r5, #15
 80242d8:	1b5b      	subs	r3, r3, r5
 80242da:	4a08      	ldr	r2, [pc, #32]	@ (80242fc <mg_http_reply+0x80>)
 80242dc:	210b      	movs	r1, #11
 80242de:	4430      	add	r0, r6
 80242e0:	f7ff face 	bl	8023880 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80242e4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80242e6:	4405      	add	r5, r0
 80242e8:	3d0f      	subs	r5, #15
 80242ea:	2220      	movs	r2, #32
 80242ec:	555a      	strb	r2, [r3, r5]
 80242ee:	e7e3      	b.n	80242b8 <mg_http_reply+0x3c>
 80242f0:	0803a808 	.word	0x0803a808
 80242f4:	08027347 	.word	0x08027347
 80242f8:	08036fac 	.word	0x08036fac
 80242fc:	0803a83c 	.word	0x0803a83c

08024300 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8024300:	b510      	push	{r4, lr}
 8024302:	b084      	sub	sp, #16
 8024304:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8024306:	9202      	str	r2, [sp, #8]
 8024308:	2300      	movs	r3, #0
 802430a:	9303      	str	r3, [sp, #12]
 802430c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024310:	e9cd 2300 	strd	r2, r3, [sp]
 8024314:	4a02      	ldr	r2, [pc, #8]	@ (8024320 <mg_http_etag+0x20>)
 8024316:	f7ff fab3 	bl	8023880 <mg_snprintf>
}
 802431a:	4620      	mov	r0, r4
 802431c:	b004      	add	sp, #16
 802431e:	bd10      	pop	{r4, pc}
 8024320:	0803a844 	.word	0x0803a844

08024324 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8024324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024328:	b083      	sub	sp, #12
 802432a:	4607      	mov	r7, r0
 802432c:	4689      	mov	r9, r1
 802432e:	4692      	mov	sl, r2
 8024330:	4698      	mov	r8, r3
  size_t i, n = 0;
 8024332:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 8024334:	462c      	mov	r4, r5
 8024336:	e00c      	b.n	8024352 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8024338:	f8cd b004 	str.w	fp, [sp, #4]
 802433c:	2301      	movs	r3, #1
 802433e:	9300      	str	r3, [sp, #0]
 8024340:	4b16      	ldr	r3, [pc, #88]	@ (802439c <mg_url_encode+0x78>)
 8024342:	4a17      	ldr	r2, [pc, #92]	@ (80243a0 <mg_url_encode+0x7c>)
 8024344:	2104      	movs	r1, #4
 8024346:	eb0a 0005 	add.w	r0, sl, r5
 802434a:	f7ff fa99 	bl	8023880 <mg_snprintf>
      n += 3;
 802434e:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8024350:	3401      	adds	r4, #1
 8024352:	454c      	cmp	r4, r9
 8024354:	d20e      	bcs.n	8024374 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 8024356:	eb07 0b04 	add.w	fp, r7, r4
 802435a:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 802435c:	1d2b      	adds	r3, r5, #4
 802435e:	4543      	cmp	r3, r8
 8024360:	d216      	bcs.n	8024390 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 8024362:	4630      	mov	r0, r6
 8024364:	f7fc fa5e 	bl	8020824 <mg_is_url_safe>
 8024368:	2800      	cmp	r0, #0
 802436a:	d0e5      	beq.n	8024338 <mg_url_encode+0x14>
      buf[n++] = s[i];
 802436c:	f80a 6005 	strb.w	r6, [sl, r5]
 8024370:	3501      	adds	r5, #1
 8024372:	e7ed      	b.n	8024350 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8024374:	f1b8 0f00 	cmp.w	r8, #0
 8024378:	d00b      	beq.n	8024392 <mg_url_encode+0x6e>
 802437a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802437e:	45a8      	cmp	r8, r5
 8024380:	d902      	bls.n	8024388 <mg_url_encode+0x64>
 8024382:	2300      	movs	r3, #0
 8024384:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8024388:	2300      	movs	r3, #0
 802438a:	f80a 3008 	strb.w	r3, [sl, r8]
 802438e:	e000      	b.n	8024392 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8024390:	2500      	movs	r5, #0
}
 8024392:	4628      	mov	r0, r5
 8024394:	b003      	add	sp, #12
 8024396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802439a:	bf00      	nop
 802439c:	08021581 	.word	0x08021581
 80243a0:	0803a850 	.word	0x0803a850

080243a4 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 80243a4:	b510      	push	{r4, lr}
 80243a6:	b084      	sub	sp, #16
 80243a8:	4602      	mov	r2, r0
 80243aa:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 80243ac:	2400      	movs	r4, #0
 80243ae:	9400      	str	r4, [sp, #0]
 80243b0:	9401      	str	r4, [sp, #4]
 80243b2:	9402      	str	r4, [sp, #8]
 80243b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80243b8:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80243ba:	4669      	mov	r1, sp
 80243bc:	4802      	ldr	r0, [pc, #8]	@ (80243c8 <mg_vmprintf+0x24>)
 80243be:	f7ff fc7d 	bl	8023cbc <mg_vxprintf>
}
 80243c2:	9800      	ldr	r0, [sp, #0]
 80243c4:	b004      	add	sp, #16
 80243c6:	bd10      	pop	{r4, pc}
 80243c8:	08027347 	.word	0x08027347

080243cc <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 80243cc:	b40f      	push	{r0, r1, r2, r3}
 80243ce:	b500      	push	{lr}
 80243d0:	b083      	sub	sp, #12
 80243d2:	ab04      	add	r3, sp, #16
 80243d4:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 80243d8:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 80243da:	a901      	add	r1, sp, #4
 80243dc:	f7ff ffe2 	bl	80243a4 <mg_vmprintf>
}
 80243e0:	b003      	add	sp, #12
 80243e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80243e6:	b004      	add	sp, #16
 80243e8:	4770      	bx	lr

080243ea <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80243ea:	b538      	push	{r3, r4, r5, lr}
 80243ec:	4604      	mov	r4, r0
 80243ee:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 80243f0:	6882      	ldr	r2, [r0, #8]
 80243f2:	68c3      	ldr	r3, [r0, #12]
 80243f4:	429a      	cmp	r2, r3
 80243f6:	d107      	bne.n	8024408 <mg_queue_next+0x1e>
  size_t len = 0;
 80243f8:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80243fa:	b125      	cbz	r5, 8024406 <mg_queue_next+0x1c>
 80243fc:	6823      	ldr	r3, [r4, #0]
 80243fe:	68a2      	ldr	r2, [r4, #8]
 8024400:	3204      	adds	r2, #4
 8024402:	4413      	add	r3, r2
 8024404:	602b      	str	r3, [r5, #0]
}
 8024406:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8024408:	f7fe fb69 	bl	8022ade <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 802440c:	2800      	cmp	r0, #0
 802440e:	d1f4      	bne.n	80243fa <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8024410:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8024412:	68e2      	ldr	r2, [r4, #12]
 8024414:	68a3      	ldr	r3, [r4, #8]
 8024416:	429a      	cmp	r2, r3
 8024418:	d9ef      	bls.n	80243fa <mg_queue_next+0x10>
 802441a:	4620      	mov	r0, r4
 802441c:	f7fe fb5f 	bl	8022ade <mg_queue_read_len>
 8024420:	e7eb      	b.n	80243fa <mg_queue_next+0x10>

08024422 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 8024422:	6883      	ldr	r3, [r0, #8]
 8024424:	440b      	add	r3, r1
 8024426:	3304      	adds	r3, #4
 8024428:	6083      	str	r3, [r0, #8]
}
 802442a:	4770      	bx	lr

0802442c <mg_sha1_init>:
  context->state[0] = 0x67452301;
 802442c:	4b0a      	ldr	r3, [pc, #40]	@ (8024458 <mg_sha1_init+0x2c>)
 802442e:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8024430:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8024434:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 8024436:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802443a:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 802443e:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8024442:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 8024444:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8024448:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 802444a:	4b04      	ldr	r3, [pc, #16]	@ (802445c <mg_sha1_init+0x30>)
 802444c:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 802444e:	2300      	movs	r3, #0
 8024450:	6183      	str	r3, [r0, #24]
 8024452:	6143      	str	r3, [r0, #20]
}
 8024454:	4770      	bx	lr
 8024456:	bf00      	nop
 8024458:	67452301 	.word	0x67452301
 802445c:	c3d2e1f0 	.word	0xc3d2e1f0

08024460 <mg_sha1_update>:
                    size_t len) {
 8024460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024462:	4604      	mov	r4, r0
 8024464:	460f      	mov	r7, r1
 8024466:	4616      	mov	r6, r2
  j = context->count[0];
 8024468:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 802446a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802446e:	6142      	str	r2, [r0, #20]
 8024470:	429a      	cmp	r2, r3
 8024472:	d202      	bcs.n	802447a <mg_sha1_update+0x1a>
 8024474:	6982      	ldr	r2, [r0, #24]
 8024476:	3201      	adds	r2, #1
 8024478:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 802447a:	69a2      	ldr	r2, [r4, #24]
 802447c:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8024480:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 8024482:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 8024486:	18f2      	adds	r2, r6, r3
 8024488:	2a3f      	cmp	r2, #63	@ 0x3f
 802448a:	d808      	bhi.n	802449e <mg_sha1_update+0x3e>
    i = 0;
 802448c:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 802448e:	3318      	adds	r3, #24
 8024490:	18e0      	adds	r0, r4, r3
 8024492:	1b72      	subs	r2, r6, r5
 8024494:	1979      	adds	r1, r7, r5
 8024496:	3004      	adds	r0, #4
 8024498:	f009 fe26 	bl	802e0e8 <memcpy>
}
 802449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 802449e:	f103 0018 	add.w	r0, r3, #24
 80244a2:	4420      	add	r0, r4
 80244a4:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 80244a8:	462a      	mov	r2, r5
 80244aa:	4639      	mov	r1, r7
 80244ac:	3004      	adds	r0, #4
 80244ae:	f009 fe1b 	bl	802e0e8 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80244b2:	f104 011c 	add.w	r1, r4, #28
 80244b6:	4620      	mov	r0, r4
 80244b8:	f7fd faee 	bl	8021a98 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80244bc:	e004      	b.n	80244c8 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 80244be:	1979      	adds	r1, r7, r5
 80244c0:	4620      	mov	r0, r4
 80244c2:	f7fd fae9 	bl	8021a98 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80244c6:	3540      	adds	r5, #64	@ 0x40
 80244c8:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 80244cc:	42b3      	cmp	r3, r6
 80244ce:	d3f6      	bcc.n	80244be <mg_sha1_update+0x5e>
    j = 0;
 80244d0:	2300      	movs	r3, #0
 80244d2:	e7dc      	b.n	802448e <mg_sha1_update+0x2e>

080244d4 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80244d4:	b570      	push	{r4, r5, r6, lr}
 80244d6:	b084      	sub	sp, #16
 80244d8:	4606      	mov	r6, r0
 80244da:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 80244dc:	2300      	movs	r3, #0
 80244de:	e013      	b.n	8024508 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80244e0:	2b03      	cmp	r3, #3
 80244e2:	bf8c      	ite	hi
 80244e4:	2200      	movhi	r2, #0
 80244e6:	2201      	movls	r2, #1
 80244e8:	3204      	adds	r2, #4
 80244ea:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80244ee:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 80244f0:	43da      	mvns	r2, r3
 80244f2:	f002 0203 	and.w	r2, r2, #3
 80244f6:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80244f8:	fa21 f202 	lsr.w	r2, r1, r2
 80244fc:	f103 0110 	add.w	r1, r3, #16
 8024500:	4469      	add	r1, sp
 8024502:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8024506:	3301      	adds	r3, #1
 8024508:	2b07      	cmp	r3, #7
 802450a:	d9e9      	bls.n	80244e0 <mg_sha1_final+0xc>
  c = 0200;
 802450c:	2380      	movs	r3, #128	@ 0x80
 802450e:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8024512:	2201      	movs	r2, #1
 8024514:	f10d 0107 	add.w	r1, sp, #7
 8024518:	4628      	mov	r0, r5
 802451a:	f7ff ffa1 	bl	8024460 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802451e:	e008      	b.n	8024532 <mg_sha1_final+0x5e>
    c = 0000;
 8024520:	2300      	movs	r3, #0
 8024522:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8024526:	2201      	movs	r2, #1
 8024528:	f10d 0107 	add.w	r1, sp, #7
 802452c:	4628      	mov	r0, r5
 802452e:	f7ff ff97 	bl	8024460 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8024532:	696b      	ldr	r3, [r5, #20]
 8024534:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8024538:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 802453c:	d1f0      	bne.n	8024520 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 802453e:	2208      	movs	r2, #8
 8024540:	eb0d 0102 	add.w	r1, sp, r2
 8024544:	4628      	mov	r0, r5
 8024546:	f7ff ff8b 	bl	8024460 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 802454a:	2300      	movs	r3, #0
 802454c:	e00a      	b.n	8024564 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 802454e:	089a      	lsrs	r2, r3, #2
 8024550:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8024554:	43da      	mvns	r2, r3
 8024556:	f002 0203 	and.w	r2, r2, #3
 802455a:	00d2      	lsls	r2, r2, #3
 802455c:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8024560:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 8024562:	3301      	adds	r3, #1
 8024564:	2b13      	cmp	r3, #19
 8024566:	d9f2      	bls.n	802454e <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8024568:	225c      	movs	r2, #92	@ 0x5c
 802456a:	2100      	movs	r1, #0
 802456c:	4628      	mov	r0, r5
 802456e:	f008 fb7f 	bl	802cc70 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8024572:	2300      	movs	r3, #0
 8024574:	9302      	str	r3, [sp, #8]
 8024576:	9303      	str	r3, [sp, #12]
}
 8024578:	b004      	add	sp, #16
 802457a:	bd70      	pop	{r4, r5, r6, pc}

0802457c <mg_http_serve_ssi>:
                       const char *fullpath) {
 802457c:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 802457e:	4b03      	ldr	r3, [pc, #12]	@ (802458c <mg_http_serve_ssi+0x10>)
 8024580:	2200      	movs	r2, #0
 8024582:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8024586:	f7ff fe79 	bl	802427c <mg_http_reply>
}
 802458a:	bd08      	pop	{r3, pc}
 802458c:	0803a858 	.word	0x0803a858

08024590 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8024590:	b510      	push	{r4, lr}
 8024592:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8024594:	6001      	str	r1, [r0, #0]
 8024596:	b129      	cbz	r1, 80245a4 <mg_str_s+0x14>
 8024598:	4608      	mov	r0, r1
 802459a:	f7eb fe81 	bl	80102a0 <strlen>
 802459e:	6060      	str	r0, [r4, #4]
}
 80245a0:	4620      	mov	r0, r4
 80245a2:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80245a4:	2000      	movs	r0, #0
 80245a6:	e7fa      	b.n	802459e <mg_str_s+0xe>

080245a8 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 80245a8:	6001      	str	r1, [r0, #0]
 80245aa:	6042      	str	r2, [r0, #4]
}
 80245ac:	4770      	bx	lr

080245ae <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 80245ae:	b510      	push	{r4, lr}
 80245b0:	b082      	sub	sp, #8
 80245b2:	4604      	mov	r4, r0
 80245b4:	ab02      	add	r3, sp, #8
 80245b6:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 80245ba:	2a01      	cmp	r2, #1
 80245bc:	d902      	bls.n	80245c4 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80245be:	780b      	ldrb	r3, [r1, #0]
 80245c0:	2b22      	cmp	r3, #34	@ 0x22
 80245c2:	d007      	beq.n	80245d4 <stripquotes+0x26>
             : s;
 80245c4:	ab02      	add	r3, sp, #8
 80245c6:	e913 0003 	ldmdb	r3, {r0, r1}
 80245ca:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80245ce:	4620      	mov	r0, r4
 80245d0:	b002      	add	sp, #8
 80245d2:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80245d4:	188b      	adds	r3, r1, r2
 80245d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80245da:	2b22      	cmp	r3, #34	@ 0x22
 80245dc:	d1f2      	bne.n	80245c4 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 80245de:	3a02      	subs	r2, #2
 80245e0:	3101      	adds	r1, #1
 80245e2:	f7ff ffe1 	bl	80245a8 <mg_str_n>
             : s;
 80245e6:	e7f2      	b.n	80245ce <stripquotes+0x20>

080245e8 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 80245e8:	b082      	sub	sp, #8
 80245ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245ee:	b084      	sub	sp, #16
 80245f0:	4680      	mov	r8, r0
 80245f2:	4668      	mov	r0, sp
 80245f4:	e880 0006 	stmia.w	r0, {r1, r2}
 80245f8:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 80245fa:	2400      	movs	r4, #0
 80245fc:	e01f      	b.n	802463e <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 80245fe:	2201      	movs	r2, #1
 8024600:	e037      	b.n	8024672 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024602:	7818      	ldrb	r0, [r3, #0]
 8024604:	283b      	cmp	r0, #59	@ 0x3b
 8024606:	d00d      	beq.n	8024624 <mg_http_get_header_var+0x3c>
 8024608:	2820      	cmp	r0, #32
 802460a:	d00b      	beq.n	8024624 <mg_http_get_header_var+0x3c>
 802460c:	282c      	cmp	r0, #44	@ 0x2c
 802460e:	d009      	beq.n	8024624 <mg_http_get_header_var+0x3c>
        p++;
 8024610:	3301      	adds	r3, #1
      while (p < x &&
 8024612:	42bb      	cmp	r3, r7
 8024614:	d206      	bcs.n	8024624 <mg_http_get_header_var+0x3c>
 8024616:	2a00      	cmp	r2, #0
 8024618:	d0f3      	beq.n	8024602 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 802461a:	428b      	cmp	r3, r1
 802461c:	d0f8      	beq.n	8024610 <mg_http_get_header_var+0x28>
 802461e:	7818      	ldrb	r0, [r3, #0]
 8024620:	2822      	cmp	r0, #34	@ 0x22
 8024622:	d1f5      	bne.n	8024610 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8024624:	1a5b      	subs	r3, r3, r1
 8024626:	ac02      	add	r4, sp, #8
 8024628:	441a      	add	r2, r3
 802462a:	4620      	mov	r0, r4
 802462c:	f7ff ffbc 	bl	80245a8 <mg_str_n>
 8024630:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024634:	4640      	mov	r0, r8
 8024636:	f7ff ffba 	bl	80245ae <stripquotes>
 802463a:	e021      	b.n	8024680 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802463c:	3401      	adds	r4, #1
 802463e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024640:	b1ca      	cbz	r2, 8024676 <mg_http_get_header_var+0x8e>
 8024642:	1915      	adds	r5, r2, r4
 8024644:	1cab      	adds	r3, r5, #2
 8024646:	9f01      	ldr	r7, [sp, #4]
 8024648:	42bb      	cmp	r3, r7
 802464a:	d214      	bcs.n	8024676 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 802464c:	9e00      	ldr	r6, [sp, #0]
 802464e:	5d73      	ldrb	r3, [r6, r5]
 8024650:	2b3d      	cmp	r3, #61	@ 0x3d
 8024652:	d1f3      	bne.n	802463c <mg_http_get_header_var+0x54>
 8024654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024656:	1930      	adds	r0, r6, r4
 8024658:	f008 fa76 	bl	802cb48 <memcmp>
 802465c:	4602      	mov	r2, r0
 802465e:	2800      	cmp	r0, #0
 8024660:	d1ec      	bne.n	802463c <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024662:	3501      	adds	r5, #1
 8024664:	1971      	adds	r1, r6, r5
 8024666:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8024668:	42b9      	cmp	r1, r7
 802466a:	d202      	bcs.n	8024672 <mg_http_get_header_var+0x8a>
 802466c:	5d73      	ldrb	r3, [r6, r5]
 802466e:	2b22      	cmp	r3, #34	@ 0x22
 8024670:	d0c5      	beq.n	80245fe <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024672:	460b      	mov	r3, r1
      while (p < x &&
 8024674:	e7cd      	b.n	8024612 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8024676:	2200      	movs	r2, #0
 8024678:	4611      	mov	r1, r2
 802467a:	4640      	mov	r0, r8
 802467c:	f7ff ff94 	bl	80245a8 <mg_str_n>
}
 8024680:	4640      	mov	r0, r8
 8024682:	b004      	add	sp, #16
 8024684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024688:	b002      	add	sp, #8
 802468a:	4770      	bx	lr

0802468c <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 802468c:	b530      	push	{r4, r5, lr}
 802468e:	b085      	sub	sp, #20
 8024690:	466b      	mov	r3, sp
 8024692:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8024696:	290d      	cmp	r1, #13
 8024698:	d930      	bls.n	80246fc <mg_v4mapped+0x70>
 802469a:	4614      	mov	r4, r2
 802469c:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 802469e:	4601      	mov	r1, r0
 80246a0:	7802      	ldrb	r2, [r0, #0]
 80246a2:	2a3a      	cmp	r2, #58	@ 0x3a
 80246a4:	d12d      	bne.n	8024702 <mg_v4mapped+0x76>
 80246a6:	7842      	ldrb	r2, [r0, #1]
 80246a8:	2a3a      	cmp	r2, #58	@ 0x3a
 80246aa:	d12c      	bne.n	8024706 <mg_v4mapped+0x7a>
 80246ac:	7982      	ldrb	r2, [r0, #6]
 80246ae:	2a3a      	cmp	r2, #58	@ 0x3a
 80246b0:	d12b      	bne.n	802470a <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 80246b2:	2202      	movs	r2, #2
 80246b4:	e000      	b.n	80246b8 <mg_v4mapped+0x2c>
 80246b6:	3201      	adds	r2, #1
 80246b8:	2a05      	cmp	r2, #5
 80246ba:	dc06      	bgt.n	80246ca <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 80246bc:	5c88      	ldrb	r0, [r1, r2]
 80246be:	2866      	cmp	r0, #102	@ 0x66
 80246c0:	d0f9      	beq.n	80246b6 <mg_v4mapped+0x2a>
 80246c2:	2846      	cmp	r0, #70	@ 0x46
 80246c4:	d0f7      	beq.n	80246b6 <mg_v4mapped+0x2a>
 80246c6:	2000      	movs	r0, #0
 80246c8:	e019      	b.n	80246fe <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 80246ca:	ad02      	add	r5, sp, #8
 80246cc:	1fda      	subs	r2, r3, #7
 80246ce:	3107      	adds	r1, #7
 80246d0:	4628      	mov	r0, r5
 80246d2:	f7ff ff69 	bl	80245a8 <mg_str_n>
 80246d6:	4622      	mov	r2, r4
 80246d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80246dc:	f7fc fe7a 	bl	80213d4 <mg_aton4>
 80246e0:	b168      	cbz	r0, 80246fe <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 80246e2:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 80246e4:	2300      	movs	r3, #0
 80246e6:	6023      	str	r3, [r4, #0]
 80246e8:	6063      	str	r3, [r4, #4]
 80246ea:	60a3      	str	r3, [r4, #8]
 80246ec:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 80246ee:	23ff      	movs	r3, #255	@ 0xff
 80246f0:	72e3      	strb	r3, [r4, #11]
 80246f2:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80246f4:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 80246f6:	2301      	movs	r3, #1
 80246f8:	74e3      	strb	r3, [r4, #19]
  return true;
 80246fa:	e000      	b.n	80246fe <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 80246fc:	2000      	movs	r0, #0
}
 80246fe:	b005      	add	sp, #20
 8024700:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024702:	2000      	movs	r0, #0
 8024704:	e7fb      	b.n	80246fe <mg_v4mapped+0x72>
 8024706:	2000      	movs	r0, #0
 8024708:	e7f9      	b.n	80246fe <mg_v4mapped+0x72>
 802470a:	2000      	movs	r0, #0
 802470c:	e7f7      	b.n	80246fe <mg_v4mapped+0x72>

0802470e <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 802470e:	b530      	push	{r4, r5, lr}
 8024710:	b083      	sub	sp, #12
 8024712:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8024714:	6803      	ldr	r3, [r0, #0]
 8024716:	6842      	ldr	r2, [r0, #4]
 8024718:	441a      	add	r2, r3
 802471a:	466d      	mov	r5, sp
 802471c:	1a52      	subs	r2, r2, r1
 802471e:	4628      	mov	r0, r5
 8024720:	f7ff ff42 	bl	80245a8 <mg_str_n>
 8024724:	3408      	adds	r4, #8
 8024726:	e895 0003 	ldmia.w	r5, {r0, r1}
 802472a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802472e:	b003      	add	sp, #12
 8024730:	bd30      	pop	{r4, r5, pc}

08024732 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8024732:	b084      	sub	sp, #16
 8024734:	f10d 0c10 	add.w	ip, sp, #16
 8024738:	e90c 0003 	stmdb	ip, {r0, r1}
 802473c:	4669      	mov	r1, sp
 802473e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024742:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8024744:	9a03      	ldr	r2, [sp, #12]
 8024746:	429a      	cmp	r2, r3
 8024748:	d90b      	bls.n	8024762 <mg_strcmp+0x30>
 802474a:	9901      	ldr	r1, [sp, #4]
 802474c:	4299      	cmp	r1, r3
 802474e:	d908      	bls.n	8024762 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8024750:	9a02      	ldr	r2, [sp, #8]
 8024752:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8024754:	9a00      	ldr	r2, [sp, #0]
 8024756:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8024758:	4291      	cmp	r1, r2
 802475a:	db09      	blt.n	8024770 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 802475c:	dc0c      	bgt.n	8024778 <mg_strcmp+0x46>
    i++;
 802475e:	3301      	adds	r3, #1
 8024760:	e7f0      	b.n	8024744 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8024762:	429a      	cmp	r2, r3
 8024764:	d80a      	bhi.n	802477c <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8024766:	9a01      	ldr	r2, [sp, #4]
 8024768:	429a      	cmp	r2, r3
 802476a:	d809      	bhi.n	8024780 <mg_strcmp+0x4e>
  return 0;
 802476c:	2000      	movs	r0, #0
 802476e:	e001      	b.n	8024774 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8024770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024774:	b004      	add	sp, #16
 8024776:	4770      	bx	lr
    if (c1 > c2) return 1;
 8024778:	2001      	movs	r0, #1
 802477a:	e7fb      	b.n	8024774 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 802477c:	2001      	movs	r0, #1
 802477e:	e7f9      	b.n	8024774 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8024780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024784:	e7f6      	b.n	8024774 <mg_strcmp+0x42>

08024786 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8024786:	b530      	push	{r4, r5, lr}
 8024788:	b085      	sub	sp, #20
 802478a:	ac04      	add	r4, sp, #16
 802478c:	e904 0003 	stmdb	r4, {r0, r1}
 8024790:	4669      	mov	r1, sp
 8024792:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024796:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8024798:	9b03      	ldr	r3, [sp, #12]
 802479a:	42a3      	cmp	r3, r4
 802479c:	d910      	bls.n	80247c0 <mg_strcasecmp+0x3a>
 802479e:	9a01      	ldr	r2, [sp, #4]
 80247a0:	42a2      	cmp	r2, r4
 80247a2:	d90d      	bls.n	80247c0 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 80247a4:	9b02      	ldr	r3, [sp, #8]
 80247a6:	5d18      	ldrb	r0, [r3, r4]
 80247a8:	f7fc ff22 	bl	80215f0 <mg_tolc>
 80247ac:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 80247ae:	9b00      	ldr	r3, [sp, #0]
 80247b0:	5d18      	ldrb	r0, [r3, r4]
 80247b2:	f7fc ff1d 	bl	80215f0 <mg_tolc>
    if (c1 < c2) return -1;
 80247b6:	4285      	cmp	r5, r0
 80247b8:	db09      	blt.n	80247ce <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 80247ba:	dc0c      	bgt.n	80247d6 <mg_strcasecmp+0x50>
    i++;
 80247bc:	3401      	adds	r4, #1
 80247be:	e7eb      	b.n	8024798 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 80247c0:	42a3      	cmp	r3, r4
 80247c2:	d80a      	bhi.n	80247da <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 80247c4:	9b01      	ldr	r3, [sp, #4]
 80247c6:	42a3      	cmp	r3, r4
 80247c8:	d809      	bhi.n	80247de <mg_strcasecmp+0x58>
  return 0;
 80247ca:	2000      	movs	r0, #0
 80247cc:	e001      	b.n	80247d2 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 80247ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80247d2:	b005      	add	sp, #20
 80247d4:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 80247d6:	2001      	movs	r0, #1
 80247d8:	e7fb      	b.n	80247d2 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 80247da:	2001      	movs	r0, #1
 80247dc:	e7f9      	b.n	80247d2 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 80247de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80247e2:	e7f6      	b.n	80247d2 <mg_strcasecmp+0x4c>

080247e4 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80247e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80247e8:	b086      	sub	sp, #24
 80247ea:	4604      	mov	r4, r0
 80247ec:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80247ee:	f7fe fb45 	bl	8022e7c <mg_http_get_request_len>
 80247f2:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80247f4:	b1d4      	cbz	r4, 802482c <mg_http_parse+0x48>
 80247f6:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 80247f8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80247fc:	2100      	movs	r1, #0
 80247fe:	4630      	mov	r0, r6
 8024800:	f008 fa36 	bl	802cc70 <memset>
  if (req_len <= 0) return req_len;
 8024804:	2f00      	cmp	r7, #0
 8024806:	f340 808d 	ble.w	8024924 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 802480a:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 802480e:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8024812:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8024816:	46b8      	mov	r8, r7
 8024818:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 802481c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024820:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8024824:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8024828:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 802482a:	e005      	b.n	8024838 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 802482c:	4625      	mov	r5, r4
 802482e:	e7e3      	b.n	80247f8 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024830:	4414      	add	r4, r2
 8024832:	6873      	ldr	r3, [r6, #4]
 8024834:	4413      	add	r3, r2
 8024836:	6073      	str	r3, [r6, #4]
 8024838:	42ac      	cmp	r4, r5
 802483a:	d208      	bcs.n	802484e <mg_http_parse+0x6a>
 802483c:	4629      	mov	r1, r5
 802483e:	4620      	mov	r0, r4
 8024840:	f7fb fc1c 	bl	802007c <clen>
 8024844:	4602      	mov	r2, r0
 8024846:	2800      	cmp	r0, #0
 8024848:	d1f2      	bne.n	8024830 <mg_http_parse+0x4c>
 802484a:	e000      	b.n	802484e <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 802484c:	3401      	adds	r4, #1
 802484e:	42ac      	cmp	r4, r5
 8024850:	d202      	bcs.n	8024858 <mg_http_parse+0x74>
 8024852:	7823      	ldrb	r3, [r4, #0]
 8024854:	2b20      	cmp	r3, #32
 8024856:	d0f9      	beq.n	802484c <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8024858:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 802485a:	e003      	b.n	8024864 <mg_http_parse+0x80>
 802485c:	4414      	add	r4, r2
 802485e:	68f3      	ldr	r3, [r6, #12]
 8024860:	4413      	add	r3, r2
 8024862:	60f3      	str	r3, [r6, #12]
 8024864:	42ac      	cmp	r4, r5
 8024866:	d208      	bcs.n	802487a <mg_http_parse+0x96>
 8024868:	4629      	mov	r1, r5
 802486a:	4620      	mov	r0, r4
 802486c:	f7fb fc06 	bl	802007c <clen>
 8024870:	4602      	mov	r2, r0
 8024872:	2800      	cmp	r0, #0
 8024874:	d1f2      	bne.n	802485c <mg_http_parse+0x78>
 8024876:	e000      	b.n	802487a <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8024878:	3401      	adds	r4, #1
 802487a:	42ac      	cmp	r4, r5
 802487c:	d202      	bcs.n	8024884 <mg_http_parse+0xa0>
 802487e:	7823      	ldrb	r3, [r4, #0]
 8024880:	2b20      	cmp	r3, #32
 8024882:	d0f9      	beq.n	8024878 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024884:	f106 0218 	add.w	r2, r6, #24
 8024888:	4629      	mov	r1, r5
 802488a:	4620      	mov	r0, r4
 802488c:	f7fb fc3d 	bl	802010a <skiptorn>
 8024890:	4682      	mov	sl, r0
 8024892:	2800      	cmp	r0, #0
 8024894:	f000 8082 	beq.w	802499c <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8024898:	f8d6 9008 	ldr.w	r9, [r6, #8]
 802489c:	68f4      	ldr	r4, [r6, #12]
 802489e:	4622      	mov	r2, r4
 80248a0:	213f      	movs	r1, #63	@ 0x3f
 80248a2:	4648      	mov	r0, r9
 80248a4:	f7eb fcac 	bl	8010200 <memchr>
 80248a8:	b138      	cbz	r0, 80248ba <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 80248aa:	1c42      	adds	r2, r0, #1
 80248ac:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 80248ae:	444c      	add	r4, r9
 80248b0:	1aa4      	subs	r4, r4, r2
 80248b2:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 80248b4:	eba0 0309 	sub.w	r3, r0, r9
 80248b8:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80248ba:	6873      	ldr	r3, [r6, #4]
 80248bc:	2b00      	cmp	r3, #0
 80248be:	d06f      	beq.n	80249a0 <mg_http_parse+0x1bc>
 80248c0:	68f3      	ldr	r3, [r6, #12]
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	d06f      	beq.n	80249a6 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 80248c6:	231e      	movs	r3, #30
 80248c8:	f106 0220 	add.w	r2, r6, #32
 80248cc:	4629      	mov	r1, r5
 80248ce:	4650      	mov	r0, sl
 80248d0:	f7fb fc43 	bl	802015a <mg_http_parse_headers>
 80248d4:	2800      	cmp	r0, #0
 80248d6:	d069      	beq.n	80249ac <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80248d8:	4939      	ldr	r1, [pc, #228]	@ (80249c0 <mg_http_parse+0x1dc>)
 80248da:	4630      	mov	r0, r6
 80248dc:	f7fe fafa 	bl	8022ed4 <mg_http_get_header>
 80248e0:	b160      	cbz	r0, 80248fc <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80248e2:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 80248e6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80248ea:	f7fe fa75 	bl	8022dd8 <mg_to_size_t>
 80248ee:	2800      	cmp	r0, #0
 80248f0:	d05f      	beq.n	80249b2 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 80248f2:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 80248f6:	4443      	add	r3, r8
 80248f8:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 80248fc:	2205      	movs	r2, #5
 80248fe:	4931      	ldr	r1, [pc, #196]	@ (80249c4 <mg_http_parse+0x1e0>)
 8024900:	6830      	ldr	r0, [r6, #0]
 8024902:	f7fb fb6d 	bl	801ffe0 <mg_ncasecmp>
 8024906:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024908:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 802490c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024910:	d00c      	beq.n	802492c <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024912:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802491a:	d029      	beq.n	8024970 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 802491c:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8024920:	4598      	cmp	r8, r3
 8024922:	d849      	bhi.n	80249b8 <mg_http_parse+0x1d4>
}
 8024924:	4638      	mov	r0, r7
 8024926:	b006      	add	sp, #24
 8024928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 802492c:	2800      	cmp	r0, #0
 802492e:	d0f0      	beq.n	8024912 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024930:	466d      	mov	r5, sp
 8024932:	4925      	ldr	r1, [pc, #148]	@ (80249c8 <mg_http_parse+0x1e4>)
 8024934:	4628      	mov	r0, r5
 8024936:	f7ff fe2b 	bl	8024590 <mg_str_s>
 802493a:	e895 000c 	ldmia.w	r5, {r2, r3}
 802493e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024942:	f7ff ff20 	bl	8024786 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024946:	2800      	cmp	r0, #0
 8024948:	d0e3      	beq.n	8024912 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 802494a:	ad02      	add	r5, sp, #8
 802494c:	491f      	ldr	r1, [pc, #124]	@ (80249cc <mg_http_parse+0x1e8>)
 802494e:	4628      	mov	r0, r5
 8024950:	f7ff fe1e 	bl	8024590 <mg_str_s>
 8024954:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024958:	e896 0003 	ldmia.w	r6, {r0, r1}
 802495c:	f7ff ff13 	bl	8024786 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024960:	2800      	cmp	r0, #0
 8024962:	d0d6      	beq.n	8024912 <mg_http_parse+0x12e>
    hm->body.len = 0;
 8024964:	2300      	movs	r3, #0
 8024966:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 802496a:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802496e:	e7d0      	b.n	8024912 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024970:	2c00      	cmp	r4, #0
 8024972:	d1d3      	bne.n	802491c <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8024974:	ac04      	add	r4, sp, #16
 8024976:	4916      	ldr	r1, [pc, #88]	@ (80249d0 <mg_http_parse+0x1ec>)
 8024978:	4620      	mov	r0, r4
 802497a:	f7ff fe09 	bl	8024590 <mg_str_s>
 802497e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8024982:	f106 0108 	add.w	r1, r6, #8
 8024986:	c903      	ldmia	r1, {r0, r1}
 8024988:	f7ff fefd 	bl	8024786 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802498c:	2800      	cmp	r0, #0
 802498e:	d1c5      	bne.n	802491c <mg_http_parse+0x138>
    hm->body.len = 0;
 8024990:	2300      	movs	r3, #0
 8024992:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8024996:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802499a:	e7bf      	b.n	802491c <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 802499c:	2700      	movs	r7, #0
 802499e:	e7c1      	b.n	8024924 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80249a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80249a4:	e7be      	b.n	8024924 <mg_http_parse+0x140>
 80249a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80249aa:	e7bb      	b.n	8024924 <mg_http_parse+0x140>
    return -1;  // error when parsing
 80249ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80249b0:	e7b8      	b.n	8024924 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80249b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80249b6:	e7b5      	b.n	8024924 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80249b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80249bc:	e7b2      	b.n	8024924 <mg_http_parse+0x140>
 80249be:	bf00      	nop
 80249c0:	0803a868 	.word	0x0803a868
 80249c4:	0803a878 	.word	0x0803a878
 80249c8:	080377d4 	.word	0x080377d4
 80249cc:	08036a88 	.word	0x08036a88
 80249d0:	0803a880 	.word	0x0803a880

080249d4 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80249d4:	b530      	push	{r4, r5, lr}
 80249d6:	b085      	sub	sp, #20
 80249d8:	ac04      	add	r4, sp, #16
 80249da:	e904 0003 	stmdb	r4, {r0, r1}
 80249de:	4669      	mov	r1, sp
 80249e0:	e881 000c 	stmia.w	r1, {r2, r3}
 80249e4:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 80249e6:	b110      	cbz	r0, 80249ee <mg_match+0x1a>
 80249e8:	2300      	movs	r3, #0
 80249ea:	6003      	str	r3, [r0, #0]
 80249ec:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 80249ee:	2400      	movs	r4, #0
 80249f0:	46a4      	mov	ip, r4
 80249f2:	4621      	mov	r1, r4
 80249f4:	4623      	mov	r3, r4
 80249f6:	e028      	b.n	8024a4a <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 80249f8:	9a02      	ldr	r2, [sp, #8]
 80249fa:	440a      	add	r2, r1
 80249fc:	6002      	str	r2, [r0, #0]
 80249fe:	2201      	movs	r2, #1
 8024a00:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8024a02:	2200      	movs	r2, #0
 8024a04:	6082      	str	r2, [r0, #8]
 8024a06:	60c2      	str	r2, [r0, #12]
 8024a08:	3008      	adds	r0, #8
      i++, j++;
 8024a0a:	3301      	adds	r3, #1
 8024a0c:	3101      	adds	r1, #1
 8024a0e:	e01c      	b.n	8024a4a <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024a10:	429a      	cmp	r2, r3
 8024a12:	d905      	bls.n	8024a20 <mg_match+0x4c>
 8024a14:	9a00      	ldr	r2, [sp, #0]
 8024a16:	5cd2      	ldrb	r2, [r2, r3]
 8024a18:	2a2a      	cmp	r2, #42	@ 0x2a
 8024a1a:	d045      	beq.n	8024aa8 <mg_match+0xd4>
 8024a1c:	2a23      	cmp	r2, #35	@ 0x23
 8024a1e:	d043      	beq.n	8024aa8 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8024a20:	2c00      	cmp	r4, #0
 8024a22:	d065      	beq.n	8024af0 <mg_match+0x11c>
 8024a24:	9b03      	ldr	r3, [sp, #12]
 8024a26:	42a3      	cmp	r3, r4
 8024a28:	d365      	bcc.n	8024af6 <mg_match+0x122>
 8024a2a:	9b00      	ldr	r3, [sp, #0]
 8024a2c:	f813 300c 	ldrb.w	r3, [r3, ip]
 8024a30:	2b23      	cmp	r3, #35	@ 0x23
 8024a32:	d003      	beq.n	8024a3c <mg_match+0x68>
 8024a34:	9b02      	ldr	r3, [sp, #8]
 8024a36:	5c5b      	ldrb	r3, [r3, r1]
 8024a38:	2b2f      	cmp	r3, #47	@ 0x2f
 8024a3a:	d05e      	beq.n	8024afa <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024a3c:	2800      	cmp	r0, #0
 8024a3e:	d046      	beq.n	8024ace <mg_match+0xfa>
 8024a40:	6803      	ldr	r3, [r0, #0]
 8024a42:	2b00      	cmp	r3, #0
 8024a44:	d03c      	beq.n	8024ac0 <mg_match+0xec>
      i = ni, j = nj;
 8024a46:	4621      	mov	r1, r4
 8024a48:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8024a4a:	9a01      	ldr	r2, [sp, #4]
 8024a4c:	429a      	cmp	r2, r3
 8024a4e:	d802      	bhi.n	8024a56 <mg_match+0x82>
 8024a50:	9d03      	ldr	r5, [sp, #12]
 8024a52:	428d      	cmp	r5, r1
 8024a54:	d941      	bls.n	8024ada <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8024a56:	429a      	cmp	r2, r3
 8024a58:	d9da      	bls.n	8024a10 <mg_match+0x3c>
 8024a5a:	9d03      	ldr	r5, [sp, #12]
 8024a5c:	428d      	cmp	r5, r1
 8024a5e:	d9d7      	bls.n	8024a10 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8024a60:	9d00      	ldr	r5, [sp, #0]
 8024a62:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8024a66:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024a6a:	d009      	beq.n	8024a80 <mg_match+0xac>
        (p.buf[i] == '?' ||
 8024a6c:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8024a70:	d0ce      	beq.n	8024a10 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8024a72:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8024a76:	d0cb      	beq.n	8024a10 <mg_match+0x3c>
 8024a78:	9d02      	ldr	r5, [sp, #8]
 8024a7a:	5c6d      	ldrb	r5, [r5, r1]
 8024a7c:	45ae      	cmp	lr, r5
 8024a7e:	d1c7      	bne.n	8024a10 <mg_match+0x3c>
      if (caps == NULL) {
 8024a80:	2800      	cmp	r0, #0
 8024a82:	d0c2      	beq.n	8024a0a <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8024a84:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024a88:	d0b6      	beq.n	80249f8 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8024a8a:	6802      	ldr	r2, [r0, #0]
 8024a8c:	2a00      	cmp	r2, #0
 8024a8e:	d0bc      	beq.n	8024a0a <mg_match+0x36>
 8024a90:	6845      	ldr	r5, [r0, #4]
 8024a92:	2d00      	cmp	r5, #0
 8024a94:	d1b9      	bne.n	8024a0a <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8024a96:	9d02      	ldr	r5, [sp, #8]
 8024a98:	440d      	add	r5, r1
 8024a9a:	1aad      	subs	r5, r5, r2
 8024a9c:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8024a9e:	2200      	movs	r2, #0
 8024aa0:	60c2      	str	r2, [r0, #12]
 8024aa2:	6082      	str	r2, [r0, #8]
 8024aa4:	3008      	adds	r0, #8
 8024aa6:	e7b0      	b.n	8024a0a <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024aa8:	b108      	cbz	r0, 8024aae <mg_match+0xda>
 8024aaa:	6802      	ldr	r2, [r0, #0]
 8024aac:	b11a      	cbz	r2, 8024ab6 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8024aae:	1c4c      	adds	r4, r1, #1
 8024ab0:	469c      	mov	ip, r3
 8024ab2:	3301      	adds	r3, #1
 8024ab4:	e7c9      	b.n	8024a4a <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8024ab6:	6042      	str	r2, [r0, #4]
 8024ab8:	9a02      	ldr	r2, [sp, #8]
 8024aba:	440a      	add	r2, r1
 8024abc:	6002      	str	r2, [r0, #0]
 8024abe:	e7f6      	b.n	8024aae <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8024ac0:	6843      	ldr	r3, [r0, #4]
 8024ac2:	b93b      	cbnz	r3, 8024ad4 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8024ac4:	3808      	subs	r0, #8
 8024ac6:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8024ac8:	4621      	mov	r1, r4
 8024aca:	4663      	mov	r3, ip
 8024acc:	e7bd      	b.n	8024a4a <mg_match+0x76>
 8024ace:	4621      	mov	r1, r4
 8024ad0:	4663      	mov	r3, ip
 8024ad2:	e7ba      	b.n	8024a4a <mg_match+0x76>
 8024ad4:	4621      	mov	r1, r4
 8024ad6:	4663      	mov	r3, ip
 8024ad8:	e7b7      	b.n	8024a4a <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8024ada:	b180      	cbz	r0, 8024afe <mg_match+0x12a>
 8024adc:	6803      	ldr	r3, [r0, #0]
 8024ade:	b183      	cbz	r3, 8024b02 <mg_match+0x12e>
 8024ae0:	6842      	ldr	r2, [r0, #4]
 8024ae2:	b982      	cbnz	r2, 8024b06 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8024ae4:	9a02      	ldr	r2, [sp, #8]
 8024ae6:	440a      	add	r2, r1
 8024ae8:	1ad3      	subs	r3, r2, r3
 8024aea:	6043      	str	r3, [r0, #4]
  return true;
 8024aec:	2001      	movs	r0, #1
 8024aee:	e000      	b.n	8024af2 <mg_match+0x11e>
      return false;
 8024af0:	2000      	movs	r0, #0
}
 8024af2:	b005      	add	sp, #20
 8024af4:	bd30      	pop	{r4, r5, pc}
      return false;
 8024af6:	2000      	movs	r0, #0
 8024af8:	e7fb      	b.n	8024af2 <mg_match+0x11e>
 8024afa:	2000      	movs	r0, #0
 8024afc:	e7f9      	b.n	8024af2 <mg_match+0x11e>
  return true;
 8024afe:	2001      	movs	r0, #1
 8024b00:	e7f7      	b.n	8024af2 <mg_match+0x11e>
 8024b02:	2001      	movs	r0, #1
 8024b04:	e7f5      	b.n	8024af2 <mg_match+0x11e>
 8024b06:	2001      	movs	r0, #1
 8024b08:	e7f3      	b.n	8024af2 <mg_match+0x11e>

08024b0a <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8024b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024b0e:	b085      	sub	sp, #20
 8024b10:	ac04      	add	r4, sp, #16
 8024b12:	e904 0003 	stmdb	r4, {r0, r1}
 8024b16:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8024b1a:	b379      	cbz	r1, 8024b7c <mg_span+0x72>
 8024b1c:	4690      	mov	r8, r2
 8024b1e:	461f      	mov	r7, r3
 8024b20:	460d      	mov	r5, r1
 8024b22:	9e02      	ldr	r6, [sp, #8]
 8024b24:	b366      	cbz	r6, 8024b80 <mg_span+0x76>
    size_t len = 0;
 8024b26:	2400      	movs	r4, #0
 8024b28:	e000      	b.n	8024b2c <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8024b2a:	3401      	adds	r4, #1
 8024b2c:	42a5      	cmp	r5, r4
 8024b2e:	d902      	bls.n	8024b36 <mg_span+0x2c>
 8024b30:	5d31      	ldrb	r1, [r6, r4]
 8024b32:	4281      	cmp	r1, r0
 8024b34:	d1f9      	bne.n	8024b2a <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8024b36:	f1b8 0f00 	cmp.w	r8, #0
 8024b3a:	d009      	beq.n	8024b50 <mg_span+0x46>
 8024b3c:	46e9      	mov	r9, sp
 8024b3e:	4622      	mov	r2, r4
 8024b40:	4631      	mov	r1, r6
 8024b42:	4648      	mov	r0, r9
 8024b44:	f7ff fd30 	bl	80245a8 <mg_str_n>
 8024b48:	e899 0003 	ldmia.w	r9, {r0, r1}
 8024b4c:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8024b50:	b187      	cbz	r7, 8024b74 <mg_span+0x6a>
 8024b52:	46e8      	mov	r8, sp
 8024b54:	1b2a      	subs	r2, r5, r4
 8024b56:	1931      	adds	r1, r6, r4
 8024b58:	4640      	mov	r0, r8
 8024b5a:	f7ff fd25 	bl	80245a8 <mg_str_n>
 8024b5e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024b62:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8024b66:	42a5      	cmp	r5, r4
 8024b68:	d904      	bls.n	8024b74 <mg_span+0x6a>
 8024b6a:	4603      	mov	r3, r0
 8024b6c:	3301      	adds	r3, #1
 8024b6e:	603b      	str	r3, [r7, #0]
 8024b70:	1e4b      	subs	r3, r1, #1
 8024b72:	607b      	str	r3, [r7, #4]
    return true;
 8024b74:	2001      	movs	r0, #1
}
 8024b76:	b005      	add	sp, #20
 8024b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8024b7c:	2000      	movs	r0, #0
 8024b7e:	e7fa      	b.n	8024b76 <mg_span+0x6c>
 8024b80:	2000      	movs	r0, #0
 8024b82:	e7f8      	b.n	8024b76 <mg_span+0x6c>

08024b84 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8024b84:	b082      	sub	sp, #8
 8024b86:	b510      	push	{r4, lr}
 8024b88:	b08a      	sub	sp, #40	@ 0x28
 8024b8a:	4604      	mov	r4, r0
 8024b8c:	f10d 0c08 	add.w	ip, sp, #8
 8024b90:	e88c 0006 	stmia.w	ip, {r1, r2}
 8024b94:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8024b96:	2200      	movs	r2, #0
 8024b98:	4611      	mov	r1, r2
 8024b9a:	f7ff fd05 	bl	80245a8 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8024b9e:	ab02      	add	r3, sp, #8
 8024ba0:	2226      	movs	r2, #38	@ 0x26
 8024ba2:	9200      	str	r2, [sp, #0]
 8024ba4:	aa08      	add	r2, sp, #32
 8024ba6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024baa:	f7ff ffae 	bl	8024b0a <mg_span>
 8024bae:	b1c8      	cbz	r0, 8024be4 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024bb0:	233d      	movs	r3, #61	@ 0x3d
 8024bb2:	9300      	str	r3, [sp, #0]
 8024bb4:	ab04      	add	r3, sp, #16
 8024bb6:	aa06      	add	r2, sp, #24
 8024bb8:	a90a      	add	r1, sp, #40	@ 0x28
 8024bba:	e911 0003 	ldmdb	r1, {r0, r1}
 8024bbe:	f7ff ffa4 	bl	8024b0a <mg_span>
 8024bc2:	2800      	cmp	r0, #0
 8024bc4:	d0eb      	beq.n	8024b9e <mg_http_var+0x1a>
 8024bc6:	9a07      	ldr	r2, [sp, #28]
 8024bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024bca:	4293      	cmp	r3, r2
 8024bcc:	d1e7      	bne.n	8024b9e <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8024bce:	9906      	ldr	r1, [sp, #24]
 8024bd0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024bd2:	f7fb fa05 	bl	801ffe0 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8024bd6:	2800      	cmp	r0, #0
 8024bd8:	d1e1      	bne.n	8024b9e <mg_http_var+0x1a>
      result = v;
 8024bda:	ab04      	add	r3, sp, #16
 8024bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024be0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8024be4:	4620      	mov	r0, r4
 8024be6:	b00a      	add	sp, #40	@ 0x28
 8024be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024bec:	b002      	add	sp, #8
 8024bee:	4770      	bx	lr

08024bf0 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8024bf0:	b530      	push	{r4, r5, lr}
 8024bf2:	b08d      	sub	sp, #52	@ 0x34
 8024bf4:	4604      	mov	r4, r0
 8024bf6:	a802      	add	r0, sp, #8
 8024bf8:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8024bfc:	4619      	mov	r1, r3
 8024bfe:	a804      	add	r0, sp, #16
 8024c00:	f7ff fcc6 	bl	8024590 <mg_str_s>
  size_t i = 0;
 8024c04:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8024c06:	e000      	b.n	8024c0a <guess_content_type+0x1a>
 8024c08:	3301      	adds	r3, #1
 8024c0a:	9803      	ldr	r0, [sp, #12]
 8024c0c:	4298      	cmp	r0, r3
 8024c0e:	d906      	bls.n	8024c1e <guess_content_type+0x2e>
 8024c10:	1ac1      	subs	r1, r0, r3
 8024c12:	9a02      	ldr	r2, [sp, #8]
 8024c14:	440a      	add	r2, r1
 8024c16:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8024c1a:	2a2e      	cmp	r2, #46	@ 0x2e
 8024c1c:	d1f4      	bne.n	8024c08 <guess_content_type+0x18>
  path.buf += path.len - i;
 8024c1e:	1ac0      	subs	r0, r0, r3
 8024c20:	9a02      	ldr	r2, [sp, #8]
 8024c22:	4402      	add	r2, r0
 8024c24:	9202      	str	r2, [sp, #8]
  path.len = i;
 8024c26:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8024c28:	ab04      	add	r3, sp, #16
 8024c2a:	222c      	movs	r2, #44	@ 0x2c
 8024c2c:	9200      	str	r2, [sp, #0]
 8024c2e:	aa0a      	add	r2, sp, #40	@ 0x28
 8024c30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024c34:	f7ff ff69 	bl	8024b0a <mg_span>
 8024c38:	b1c0      	cbz	r0, 8024c6c <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8024c3a:	233d      	movs	r3, #61	@ 0x3d
 8024c3c:	9300      	str	r3, [sp, #0]
 8024c3e:	ab06      	add	r3, sp, #24
 8024c40:	aa08      	add	r2, sp, #32
 8024c42:	a90c      	add	r1, sp, #48	@ 0x30
 8024c44:	e911 0003 	ldmdb	r1, {r0, r1}
 8024c48:	f7ff ff5f 	bl	8024b0a <mg_span>
 8024c4c:	2800      	cmp	r0, #0
 8024c4e:	d0eb      	beq.n	8024c28 <guess_content_type+0x38>
 8024c50:	ab08      	add	r3, sp, #32
 8024c52:	cb0c      	ldmia	r3, {r2, r3}
 8024c54:	a902      	add	r1, sp, #8
 8024c56:	c903      	ldmia	r1, {r0, r1}
 8024c58:	f7ff fd6b 	bl	8024732 <mg_strcmp>
 8024c5c:	2800      	cmp	r0, #0
 8024c5e:	d1e3      	bne.n	8024c28 <guess_content_type+0x38>
 8024c60:	ab06      	add	r3, sp, #24
 8024c62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024c66:	e884 0003 	stmia.w	r4, {r0, r1}
 8024c6a:	e01c      	b.n	8024ca6 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8024c6c:	2500      	movs	r5, #0
 8024c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8024cac <guess_content_type+0xbc>)
 8024c70:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8024c74:	b19b      	cbz	r3, 8024c9e <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8024c76:	4b0d      	ldr	r3, [pc, #52]	@ (8024cac <guess_content_type+0xbc>)
 8024c78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024c7c:	cb0c      	ldmia	r3, {r2, r3}
 8024c7e:	a902      	add	r1, sp, #8
 8024c80:	c903      	ldmia	r1, {r0, r1}
 8024c82:	f7ff fd56 	bl	8024732 <mg_strcmp>
 8024c86:	b108      	cbz	r0, 8024c8c <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8024c88:	3502      	adds	r5, #2
 8024c8a:	e7f0      	b.n	8024c6e <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8024c8c:	3501      	adds	r5, #1
 8024c8e:	4b07      	ldr	r3, [pc, #28]	@ (8024cac <guess_content_type+0xbc>)
 8024c90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024c94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024c98:	e884 0003 	stmia.w	r4, {r0, r1}
 8024c9c:	e003      	b.n	8024ca6 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8024c9e:	4904      	ldr	r1, [pc, #16]	@ (8024cb0 <guess_content_type+0xc0>)
 8024ca0:	4620      	mov	r0, r4
 8024ca2:	f7ff fc75 	bl	8024590 <mg_str_s>
}
 8024ca6:	4620      	mov	r0, r4
 8024ca8:	b00d      	add	sp, #52	@ 0x34
 8024caa:	bd30      	pop	{r4, r5, pc}
 8024cac:	0803bd70 	.word	0x0803bd70
 8024cb0:	0803a884 	.word	0x0803a884

08024cb4 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8024cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024cb6:	b087      	sub	sp, #28
 8024cb8:	4604      	mov	r4, r0
 8024cba:	460e      	mov	r6, r1
 8024cbc:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 8024cbe:	2500      	movs	r5, #0
 8024cc0:	1da8      	adds	r0, r5, #6
 8024cc2:	6863      	ldr	r3, [r4, #4]
 8024cc4:	4298      	cmp	r0, r3
 8024cc6:	d23c      	bcs.n	8024d42 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8024cc8:	6821      	ldr	r1, [r4, #0]
 8024cca:	1b5b      	subs	r3, r3, r5
 8024ccc:	1f9a      	subs	r2, r3, #6
 8024cce:	4401      	add	r1, r0
 8024cd0:	a804      	add	r0, sp, #16
 8024cd2:	f7ff fc69 	bl	80245a8 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8024cd6:	6820      	ldr	r0, [r4, #0]
 8024cd8:	2206      	movs	r2, #6
 8024cda:	491b      	ldr	r1, [pc, #108]	@ (8024d48 <getrange+0x94>)
 8024cdc:	4428      	add	r0, r5
 8024cde:	f007 ff33 	bl	802cb48 <memcmp>
 8024ce2:	b108      	cbz	r0, 8024ce8 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 8024ce4:	3501      	adds	r5, #1
 8024ce6:	e7eb      	b.n	8024cc0 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 8024ce8:	ab04      	add	r3, sp, #16
 8024cea:	222d      	movs	r2, #45	@ 0x2d
 8024cec:	9200      	str	r2, [sp, #0]
 8024cee:	aa02      	add	r2, sp, #8
 8024cf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024cf4:	f7ff ff09 	bl	8024b0a <mg_span>
 8024cf8:	b1c0      	cbz	r0, 8024d2c <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 8024cfa:	4632      	mov	r2, r6
 8024cfc:	ab02      	add	r3, sp, #8
 8024cfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024d02:	f7fe f869 	bl	8022dd8 <mg_to_size_t>
 8024d06:	b928      	cbnz	r0, 8024d14 <getrange+0x60>
  size_t i, numparsed = 0;
 8024d08:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024d0a:	9b05      	ldr	r3, [sp, #20]
 8024d0c:	b923      	cbnz	r3, 8024d18 <getrange+0x64>
}
 8024d0e:	4620      	mov	r0, r4
 8024d10:	b007      	add	sp, #28
 8024d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8024d14:	2401      	movs	r4, #1
 8024d16:	e7f8      	b.n	8024d0a <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024d18:	463a      	mov	r2, r7
 8024d1a:	ab06      	add	r3, sp, #24
 8024d1c:	e913 0003 	ldmdb	r3, {r0, r1}
 8024d20:	f7fe f85a 	bl	8022dd8 <mg_to_size_t>
 8024d24:	2800      	cmp	r0, #0
 8024d26:	d0f2      	beq.n	8024d0e <getrange+0x5a>
 8024d28:	3401      	adds	r4, #1
 8024d2a:	e7f0      	b.n	8024d0e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024d2c:	4632      	mov	r2, r6
 8024d2e:	ab06      	add	r3, sp, #24
 8024d30:	e913 0003 	ldmdb	r3, {r0, r1}
 8024d34:	f7fe f850 	bl	8022dd8 <mg_to_size_t>
 8024d38:	b908      	cbnz	r0, 8024d3e <getrange+0x8a>
  size_t i, numparsed = 0;
 8024d3a:	2400      	movs	r4, #0
 8024d3c:	e7e7      	b.n	8024d0e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024d3e:	2401      	movs	r4, #1
    break;
 8024d40:	e7e5      	b.n	8024d0e <getrange+0x5a>
  size_t i, numparsed = 0;
 8024d42:	2400      	movs	r4, #0
 8024d44:	e7e3      	b.n	8024d0e <getrange+0x5a>
 8024d46:	bf00      	nop
 8024d48:	0803a8a0 	.word	0x0803a8a0

08024d4c <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8024d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d50:	b0e7      	sub	sp, #412	@ 0x19c
 8024d52:	4607      	mov	r7, r0
 8024d54:	4688      	mov	r8, r1
 8024d56:	4614      	mov	r4, r2
 8024d58:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024d5a:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8024d5e:	f1b9 0f00 	cmp.w	r9, #0
 8024d62:	d036      	beq.n	8024dd2 <mg_http_serve_file+0x86>
  size_t size = 0;
 8024d64:	2300      	movs	r3, #0
 8024d66:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8024d68:	2200      	movs	r2, #0
 8024d6a:	2300      	movs	r3, #0
 8024d6c:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8024d70:	ae5e      	add	r6, sp, #376	@ 0x178
 8024d72:	4621      	mov	r1, r4
 8024d74:	4630      	mov	r0, r6
 8024d76:	f7ff fc0b 	bl	8024590 <mg_str_s>
 8024d7a:	68eb      	ldr	r3, [r5, #12]
 8024d7c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8024d80:	a828      	add	r0, sp, #160	@ 0xa0
 8024d82:	f7ff ff35 	bl	8024bf0 <guess_content_type>
  if (path != NULL) {
 8024d86:	2c00      	cmp	r4, #0
 8024d88:	d053      	beq.n	8024e32 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8024d8a:	4995      	ldr	r1, [pc, #596]	@ (8024fe0 <mg_http_serve_file+0x294>)
 8024d8c:	4640      	mov	r0, r8
 8024d8e:	f7fe f8a1 	bl	8022ed4 <mg_http_get_header>
    if (ae != NULL) {
 8024d92:	4606      	mov	r6, r0
 8024d94:	2800      	cmp	r0, #0
 8024d96:	d042      	beq.n	8024e1e <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8024d98:	6802      	ldr	r2, [r0, #0]
 8024d9a:	6841      	ldr	r1, [r0, #4]
 8024d9c:	4891      	ldr	r0, [pc, #580]	@ (8024fe4 <mg_http_serve_file+0x298>)
 8024d9e:	f7ff fb15 	bl	80243cc <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8024da2:	4683      	mov	fp, r0
 8024da4:	b1d8      	cbz	r0, 8024dde <mg_http_serve_file+0x92>
 8024da6:	4990      	ldr	r1, [pc, #576]	@ (8024fe8 <mg_http_serve_file+0x29c>)
 8024da8:	f007 ffe2 	bl	802cd70 <strstr>
 8024dac:	4606      	mov	r6, r0
 8024dae:	b1d0      	cbz	r0, 8024de6 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8024db0:	4623      	mov	r3, r4
 8024db2:	4a8e      	ldr	r2, [pc, #568]	@ (8024fec <mg_http_serve_file+0x2a0>)
 8024db4:	2180      	movs	r1, #128	@ 0x80
 8024db6:	a82e      	add	r0, sp, #184	@ 0xb8
 8024db8:	f7fe fd62 	bl	8023880 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8024dbc:	2201      	movs	r2, #1
 8024dbe:	a92e      	add	r1, sp, #184	@ 0xb8
 8024dc0:	4648      	mov	r0, r9
 8024dc2:	f7fd ffcd 	bl	8022d60 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 8024dc6:	4606      	mov	r6, r0
 8024dc8:	b130      	cbz	r0, 8024dd8 <mg_http_serve_file+0x8c>
 8024dca:	f04f 0a01 	mov.w	sl, #1
 8024dce:	ac2e      	add	r4, sp, #184	@ 0xb8
 8024dd0:	e00b      	b.n	8024dea <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024dd2:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8025014 <mg_http_serve_file+0x2c8>
 8024dd6:	e7c5      	b.n	8024d64 <mg_http_serve_file+0x18>
  bool gzip = false;
 8024dd8:	f04f 0a00 	mov.w	sl, #0
 8024ddc:	e005      	b.n	8024dea <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 8024dde:	4606      	mov	r6, r0
  bool gzip = false;
 8024de0:	f04f 0a00 	mov.w	sl, #0
 8024de4:	e001      	b.n	8024dea <mg_http_serve_file+0x9e>
 8024de6:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 8024dea:	4658      	mov	r0, fp
 8024dec:	f7f5 ff76 	bl	801acdc <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024df0:	b1c6      	cbz	r6, 8024e24 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8024df2:	b316      	cbz	r6, 8024e3a <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024df4:	f8d9 3000 	ldr.w	r3, [r9]
 8024df8:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024dfa:	a92d      	add	r1, sp, #180	@ 0xb4
 8024dfc:	4620      	mov	r0, r4
 8024dfe:	4798      	blx	r3
 8024e00:	2800      	cmp	r0, #0
 8024e02:	d137      	bne.n	8024e74 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8024e04:	4b7a      	ldr	r3, [pc, #488]	@ (8024ff0 <mg_http_serve_file+0x2a4>)
 8024e06:	68aa      	ldr	r2, [r5, #8]
 8024e08:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8024e0c:	4638      	mov	r0, r7
 8024e0e:	f7ff fa35 	bl	802427c <mg_http_reply>
    mg_fs_close(fd);
 8024e12:	4630      	mov	r0, r6
 8024e14:	f7fd ffbd 	bl	8022d92 <mg_fs_close>
}
 8024e18:	b067      	add	sp, #412	@ 0x19c
 8024e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8024e1e:	f04f 0a00 	mov.w	sl, #0
 8024e22:	e7e5      	b.n	8024df0 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024e24:	2201      	movs	r2, #1
 8024e26:	4621      	mov	r1, r4
 8024e28:	4648      	mov	r0, r9
 8024e2a:	f7fd ff99 	bl	8022d60 <mg_fs_open>
 8024e2e:	4606      	mov	r6, r0
 8024e30:	e7df      	b.n	8024df2 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8024e32:	4626      	mov	r6, r4
  bool gzip = false;
 8024e34:	f04f 0a00 	mov.w	sl, #0
 8024e38:	e7db      	b.n	8024df2 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8024e3a:	6929      	ldr	r1, [r5, #16]
 8024e3c:	b1b9      	cbz	r1, 8024e6e <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8024e3e:	2201      	movs	r2, #1
 8024e40:	4648      	mov	r0, r9
 8024e42:	f7fd ff8d 	bl	8022d60 <mg_fs_open>
 8024e46:	4606      	mov	r6, r0
    path = opts->page404;
 8024e48:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8024e4a:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8024e4e:	4621      	mov	r1, r4
 8024e50:	4658      	mov	r0, fp
 8024e52:	f7ff fb9d 	bl	8024590 <mg_str_s>
 8024e56:	68eb      	ldr	r3, [r5, #12]
 8024e58:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8024e5c:	a80a      	add	r0, sp, #40	@ 0x28
 8024e5e:	f7ff fec7 	bl	8024bf0 <guess_content_type>
 8024e62:	ab28      	add	r3, sp, #160	@ 0xa0
 8024e64:	aa0a      	add	r2, sp, #40	@ 0x28
 8024e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024e6a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024e6e:	2e00      	cmp	r6, #0
 8024e70:	d1c0      	bne.n	8024df4 <mg_http_serve_file+0xa8>
 8024e72:	e7c7      	b.n	8024e04 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024e74:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8024e78:	e9cd 2300 	strd	r2, r3, [sp]
 8024e7c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024e7e:	2140      	movs	r1, #64	@ 0x40
 8024e80:	a84e      	add	r0, sp, #312	@ 0x138
 8024e82:	f7ff fa3d 	bl	8024300 <mg_http_etag>
 8024e86:	b190      	cbz	r0, 8024eae <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024e88:	495a      	ldr	r1, [pc, #360]	@ (8024ff4 <mg_http_serve_file+0x2a8>)
 8024e8a:	4640      	mov	r0, r8
 8024e8c:	f7fe f822 	bl	8022ed4 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024e90:	4604      	mov	r4, r0
 8024e92:	b160      	cbz	r0, 8024eae <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8024e94:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8024e98:	a94e      	add	r1, sp, #312	@ 0x138
 8024e9a:	4658      	mov	r0, fp
 8024e9c:	f7ff fb78 	bl	8024590 <mg_str_s>
 8024ea0:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8024ea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024ea8:	f7ff fc6d 	bl	8024786 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024eac:	b340      	cbz	r0, 8024f00 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8024eae:	f04f 0b00 	mov.w	fp, #0
 8024eb2:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8024eb6:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8024eba:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8024ebc:	494e      	ldr	r1, [pc, #312]	@ (8024ff8 <mg_http_serve_file+0x2ac>)
 8024ebe:	4640      	mov	r0, r8
 8024ec0:	f7fe f808 	bl	8022ed4 <mg_http_get_header>
    range[0] = '\0';
 8024ec4:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8024ec8:	2800      	cmp	r0, #0
 8024eca:	d040      	beq.n	8024f4e <mg_http_serve_file+0x202>
 8024ecc:	aa0e      	add	r2, sp, #56	@ 0x38
 8024ece:	a90d      	add	r1, sp, #52	@ 0x34
 8024ed0:	f7ff fef0 	bl	8024cb4 <getrange>
 8024ed4:	2800      	cmp	r0, #0
 8024ed6:	dd70      	ble.n	8024fba <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8024ed8:	2801      	cmp	r0, #1
 8024eda:	d01c      	beq.n	8024f16 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8024edc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ee0:	429a      	cmp	r2, r3
 8024ee2:	d801      	bhi.n	8024ee8 <mg_http_serve_file+0x19c>
 8024ee4:	42a3      	cmp	r3, r4
 8024ee6:	d319      	bcc.n	8024f1c <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024ee8:	2400      	movs	r4, #0
 8024eea:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8024eec:	9300      	str	r3, [sp, #0]
 8024eee:	9401      	str	r4, [sp, #4]
 8024ef0:	4a42      	ldr	r2, [pc, #264]	@ (8024ffc <mg_http_serve_file+0x2b0>)
 8024ef2:	2164      	movs	r1, #100	@ 0x64
 8024ef4:	a80f      	add	r0, sp, #60	@ 0x3c
 8024ef6:	f7fe fcc3 	bl	8023880 <mg_snprintf>
        status = 416;
 8024efa:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024efe:	e028      	b.n	8024f52 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8024f00:	4630      	mov	r0, r6
 8024f02:	f7fd ff46 	bl	8022d92 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8024f06:	4b3e      	ldr	r3, [pc, #248]	@ (8025000 <mg_http_serve_file+0x2b4>)
 8024f08:	68aa      	ldr	r2, [r5, #8]
 8024f0a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8024f0e:	4638      	mov	r0, r7
 8024f10:	f7ff f9b4 	bl	802427c <mg_http_reply>
 8024f14:	e780      	b.n	8024e18 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8024f16:	1e63      	subs	r3, r4, #1
 8024f18:	930e      	str	r3, [sp, #56]	@ 0x38
 8024f1a:	e7df      	b.n	8024edc <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8024f1c:	1a9b      	subs	r3, r3, r2
 8024f1e:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8024f20:	1911      	adds	r1, r2, r4
 8024f22:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8024f24:	2300      	movs	r3, #0
 8024f26:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8024f28:	9004      	str	r0, [sp, #16]
 8024f2a:	9305      	str	r3, [sp, #20]
 8024f2c:	9102      	str	r1, [sp, #8]
 8024f2e:	9303      	str	r3, [sp, #12]
 8024f30:	9200      	str	r2, [sp, #0]
 8024f32:	9301      	str	r3, [sp, #4]
 8024f34:	4a33      	ldr	r2, [pc, #204]	@ (8025004 <mg_http_serve_file+0x2b8>)
 8024f36:	2164      	movs	r1, #100	@ 0x64
 8024f38:	a80f      	add	r0, sp, #60	@ 0x3c
 8024f3a:	f7fe fca1 	bl	8023880 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8024f3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8024f42:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024f44:	6830      	ldr	r0, [r6, #0]
 8024f46:	4798      	blx	r3
        status = 206;
 8024f48:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8024f4c:	e001      	b.n	8024f52 <mg_http_serve_file+0x206>
    int n, status = 200;
 8024f4e:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8024f52:	4648      	mov	r0, r9
 8024f54:	f7fb f96a 	bl	802022c <mg_http_status_code_str>
 8024f58:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8024f5a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8024f5c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024f5e:	46a4      	mov	ip, r4
 8024f60:	f1ba 0f00 	cmp.w	sl, #0
 8024f64:	d02c      	beq.n	8024fc0 <mg_http_serve_file+0x274>
 8024f66:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8025018 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8024f6a:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8024f6c:	b35a      	cbz	r2, 8024fc6 <mg_http_serve_file+0x27a>
 8024f6e:	9208      	str	r2, [sp, #32]
 8024f70:	aa0f      	add	r2, sp, #60	@ 0x3c
 8024f72:	9207      	str	r2, [sp, #28]
 8024f74:	f8cd e018 	str.w	lr, [sp, #24]
 8024f78:	f8cd c010 	str.w	ip, [sp, #16]
 8024f7c:	2200      	movs	r2, #0
 8024f7e:	9205      	str	r2, [sp, #20]
 8024f80:	aa4e      	add	r2, sp, #312	@ 0x138
 8024f82:	9202      	str	r2, [sp, #8]
 8024f84:	9001      	str	r0, [sp, #4]
 8024f86:	9100      	str	r1, [sp, #0]
 8024f88:	464a      	mov	r2, r9
 8024f8a:	491f      	ldr	r1, [pc, #124]	@ (8025008 <mg_http_serve_file+0x2bc>)
 8024f8c:	4638      	mov	r0, r7
 8024f8e:	f7ff f94f 	bl	8024230 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8024f92:	ad64      	add	r5, sp, #400	@ 0x190
 8024f94:	491d      	ldr	r1, [pc, #116]	@ (802500c <mg_http_serve_file+0x2c0>)
 8024f96:	4628      	mov	r0, r5
 8024f98:	f7ff fafa 	bl	8024590 <mg_str_s>
 8024f9c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024fa0:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024fa4:	f7ff fbef 	bl	8024786 <mg_strcasecmp>
 8024fa8:	b178      	cbz	r0, 8024fca <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8024faa:	4b19      	ldr	r3, [pc, #100]	@ (8025010 <mg_http_serve_file+0x2c4>)
 8024fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8024fb0:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8024fb4:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8024fb8:	e72e      	b.n	8024e18 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8024fba:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8024fbe:	e7c8      	b.n	8024f52 <mg_http_serve_file+0x206>
    mg_printf(c,
 8024fc0:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8025000 <mg_http_serve_file+0x2b4>
 8024fc4:	e7d1      	b.n	8024f6a <mg_http_serve_file+0x21e>
 8024fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8025000 <mg_http_serve_file+0x2b4>)
 8024fc8:	e7d1      	b.n	8024f6e <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8024fca:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8024fce:	f36f 13c7 	bfc	r3, #7, #1
 8024fd2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8024fd6:	4630      	mov	r0, r6
 8024fd8:	f7fd fedb 	bl	8022d92 <mg_fs_close>
 8024fdc:	e71c      	b.n	8024e18 <mg_http_serve_file+0xcc>
 8024fde:	bf00      	nop
 8024fe0:	0803a8c4 	.word	0x0803a8c4
 8024fe4:	0803a7d0 	.word	0x0803a7d0
 8024fe8:	0803bc84 	.word	0x0803bc84
 8024fec:	0803a8d4 	.word	0x0803a8d4
 8024ff0:	0803a8dc 	.word	0x0803a8dc
 8024ff4:	0803a8e8 	.word	0x0803a8e8
 8024ff8:	0803a8f8 	.word	0x0803a8f8
 8024ffc:	0803a900 	.word	0x0803a900
 8025000:	08036fac 	.word	0x08036fac
 8025004:	0803a920 	.word	0x0803a920
 8025008:	0803a948 	.word	0x0803a948
 802500c:	0803a998 	.word	0x0803a998
 8025010:	0802719d 	.word	0x0802719d
 8025014:	20000130 	.word	0x20000130
 8025018:	0803a8a8 	.word	0x0803a8a8

0802501c <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025020:	b083      	sub	sp, #12
 8025022:	ac02      	add	r4, sp, #8
 8025024:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8025028:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802502a:	3901      	subs	r1, #1
 802502c:	2907      	cmp	r1, #7
 802502e:	f200 8128 	bhi.w	8025282 <mg_str_to_num+0x266>
 8025032:	e8df f011 	tbh	[pc, r1, lsl #1]
 8025036:	0008      	.short	0x0008
 8025038:	01260020 	.word	0x01260020
 802503c:	0126000c 	.word	0x0126000c
 8025040:	01260126 	.word	0x01260126
 8025044:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8025046:	20ff      	movs	r0, #255	@ 0xff
 8025048:	f04f 0e00 	mov.w	lr, #0
 802504c:	e003      	b.n	8025056 <mg_str_to_num+0x3a>
 802504e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025052:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8025056:	b9e2      	cbnz	r2, 8025092 <mg_str_to_num+0x76>
 8025058:	9901      	ldr	r1, [sp, #4]
 802505a:	2901      	cmp	r1, #1
 802505c:	d926      	bls.n	80250ac <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 802505e:	9a00      	ldr	r2, [sp, #0]
 8025060:	7811      	ldrb	r1, [r2, #0]
 8025062:	2930      	cmp	r1, #48	@ 0x30
 8025064:	d00c      	beq.n	8025080 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8025066:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 802506a:	220a      	movs	r2, #10
 802506c:	e013      	b.n	8025096 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802506e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025072:	4686      	mov	lr, r0
 8025074:	e7ef      	b.n	8025056 <mg_str_to_num+0x3a>
 8025076:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 802507a:	f04f 0e00 	mov.w	lr, #0
 802507e:	e7ea      	b.n	8025056 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8025080:	7852      	ldrb	r2, [r2, #1]
 8025082:	2a62      	cmp	r2, #98	@ 0x62
 8025084:	d015      	beq.n	80250b2 <mg_str_to_num+0x96>
 8025086:	2a78      	cmp	r2, #120	@ 0x78
 8025088:	d017      	beq.n	80250ba <mg_str_to_num+0x9e>
      i++;
 802508a:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802508e:	220a      	movs	r2, #10
 8025090:	e001      	b.n	8025096 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8025092:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8025096:	2a0a      	cmp	r2, #10
 8025098:	d044      	beq.n	8025124 <mg_str_to_num+0x108>
 802509a:	2a10      	cmp	r2, #16
 802509c:	f000 80d4 	beq.w	8025248 <mg_str_to_num+0x22c>
 80250a0:	2a02      	cmp	r2, #2
 80250a2:	d00e      	beq.n	80250c2 <mg_str_to_num+0xa6>
 80250a4:	2000      	movs	r0, #0
}
 80250a6:	b003      	add	sp, #12
 80250a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 80250ac:	f04f 0c00 	mov.w	ip, #0
 80250b0:	e7f1      	b.n	8025096 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80250b2:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80250b6:	4662      	mov	r2, ip
 80250b8:	e7ed      	b.n	8025096 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80250ba:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80250be:	2210      	movs	r2, #16
 80250c0:	e7e9      	b.n	8025096 <mg_str_to_num+0x7a>
  switch (base) {
 80250c2:	2200      	movs	r2, #0
 80250c4:	4611      	mov	r1, r2
 80250c6:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80250c8:	9d01      	ldr	r5, [sp, #4]
 80250ca:	4565      	cmp	r5, ip
 80250cc:	f240 80c0 	bls.w	8025250 <mg_str_to_num+0x234>
 80250d0:	9d00      	ldr	r5, [sp, #0]
 80250d2:	f815 600c 	ldrb.w	r6, [r5, ip]
 80250d6:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80250da:	b2ff      	uxtb	r7, r7
 80250dc:	2f01      	cmp	r7, #1
 80250de:	f200 80b7 	bhi.w	8025250 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80250e2:	3e30      	subs	r6, #48	@ 0x30
 80250e4:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 80250e8:	ea4f 0950 	mov.w	r9, r0, lsr #1
 80250ec:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 80250f0:	ea4f 075e 	mov.w	r7, lr, lsr #1
 80250f4:	4591      	cmp	r9, r2
 80250f6:	418f      	sbcs	r7, r1
 80250f8:	f0c0 80c5 	bcc.w	8025286 <mg_str_to_num+0x26a>
        result *= 2;
 80250fc:	1892      	adds	r2, r2, r2
 80250fe:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8025100:	ebb0 0a06 	subs.w	sl, r0, r6
 8025104:	eb6e 0708 	sbc.w	r7, lr, r8
 8025108:	4592      	cmp	sl, r2
 802510a:	418f      	sbcs	r7, r1
 802510c:	f0c0 80bd 	bcc.w	802528a <mg_str_to_num+0x26e>
        result += digit;
 8025110:	18b2      	adds	r2, r6, r2
 8025112:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8025116:	f10c 0c01 	add.w	ip, ip, #1
 802511a:	3401      	adds	r4, #1
 802511c:	e7d4      	b.n	80250c8 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 802511e:	f04f 0901 	mov.w	r9, #1
 8025122:	e017      	b.n	8025154 <mg_str_to_num+0x138>
  switch (base) {
 8025124:	2200      	movs	r2, #0
 8025126:	4611      	mov	r1, r2
 8025128:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 802512a:	9d01      	ldr	r5, [sp, #4]
 802512c:	4565      	cmp	r5, ip
 802512e:	f240 808f 	bls.w	8025250 <mg_str_to_num+0x234>
 8025132:	9d00      	ldr	r5, [sp, #0]
 8025134:	f815 700c 	ldrb.w	r7, [r5, ip]
 8025138:	2f2f      	cmp	r7, #47	@ 0x2f
 802513a:	f240 8089 	bls.w	8025250 <mg_str_to_num+0x234>
 802513e:	2f39      	cmp	r7, #57	@ 0x39
 8025140:	f200 8086 	bhi.w	8025250 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8025144:	3f30      	subs	r7, #48	@ 0x30
 8025146:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 802514a:	f04f 0900 	mov.w	r9, #0
 802514e:	eb10 060e 	adds.w	r6, r0, lr
 8025152:	d2e4      	bcs.n	802511e <mg_str_to_num+0x102>
 8025154:	444e      	add	r6, r9
 8025156:	4d54      	ldr	r5, [pc, #336]	@ (80252a8 <mg_str_to_num+0x28c>)
 8025158:	fba5 9b06 	umull	r9, fp, r5, r6
 802515c:	f02b 0903 	bic.w	r9, fp, #3
 8025160:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8025164:	eba6 0609 	sub.w	r6, r6, r9
 8025168:	1b86      	subs	r6, r0, r6
 802516a:	f16e 0b00 	sbc.w	fp, lr, #0
 802516e:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8025172:	fb09 f906 	mul.w	r9, r9, r6
 8025176:	fb05 990b 	mla	r9, r5, fp, r9
 802517a:	fba6 6a05 	umull	r6, sl, r6, r5
 802517e:	44d1      	add	r9, sl
 8025180:	0876      	lsrs	r6, r6, #1
 8025182:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8025186:	ea4f 0959 	mov.w	r9, r9, lsr #1
 802518a:	4296      	cmp	r6, r2
 802518c:	eb79 0901 	sbcs.w	r9, r9, r1
 8025190:	d37d      	bcc.n	802528e <mg_str_to_num+0x272>
        result *= 10;
 8025192:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8025196:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 802519a:	0096      	lsls	r6, r2, #2
 802519c:	18b2      	adds	r2, r6, r2
 802519e:	eb41 0909 	adc.w	r9, r1, r9
 80251a2:	1892      	adds	r2, r2, r2
 80251a4:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 80251a8:	ebb0 0a07 	subs.w	sl, r0, r7
 80251ac:	eb6e 0108 	sbc.w	r1, lr, r8
 80251b0:	4592      	cmp	sl, r2
 80251b2:	eb71 0109 	sbcs.w	r1, r1, r9
 80251b6:	d36c      	bcc.n	8025292 <mg_str_to_num+0x276>
        result += digit;
 80251b8:	18ba      	adds	r2, r7, r2
 80251ba:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 80251be:	f10c 0c01 	add.w	ip, ip, #1
 80251c2:	3401      	adds	r4, #1
 80251c4:	e7b1      	b.n	802512a <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80251c6:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 80251ca:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80251cc:	2f05      	cmp	r7, #5
 80251ce:	d832      	bhi.n	8025236 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80251d0:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80251d2:	46b0      	mov	r8, r6
 80251d4:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 80251d6:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80251da:	bf08      	it	eq
 80251dc:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 80251e0:	d036      	beq.n	8025250 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 80251e2:	ea4f 1910 	mov.w	r9, r0, lsr #4
 80251e6:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 80251ea:	ea4f 171e 	mov.w	r7, lr, lsr #4
 80251ee:	4591      	cmp	r9, r2
 80251f0:	418f      	sbcs	r7, r1
 80251f2:	d350      	bcc.n	8025296 <mg_str_to_num+0x27a>
        result *= 16;
 80251f4:	0109      	lsls	r1, r1, #4
 80251f6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80251fa:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 80251fc:	ebb0 0908 	subs.w	r9, r0, r8
 8025200:	eb6e 0706 	sbc.w	r7, lr, r6
 8025204:	4591      	cmp	r9, r2
 8025206:	418f      	sbcs	r7, r1
 8025208:	d347      	bcc.n	802529a <mg_str_to_num+0x27e>
        result += digit;
 802520a:	eb18 0202 	adds.w	r2, r8, r2
 802520e:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8025212:	f10c 0c01 	add.w	ip, ip, #1
 8025216:	3401      	adds	r4, #1
      while (i < str.len) {
 8025218:	9d01      	ldr	r5, [sp, #4]
 802521a:	4565      	cmp	r5, ip
 802521c:	d918      	bls.n	8025250 <mg_str_to_num+0x234>
        char c = str.buf[i];
 802521e:	9d00      	ldr	r5, [sp, #0]
 8025220:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8025224:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8025228:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802522a:	2f09      	cmp	r7, #9
 802522c:	d8cb      	bhi.n	80251c6 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802522e:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8025230:	46b0      	mov	r8, r6
 8025232:	17f6      	asrs	r6, r6, #31
 8025234:	e7cf      	b.n	80251d6 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025236:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 802523a:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 802523c:	2f05      	cmp	r7, #5
 802523e:	d807      	bhi.n	8025250 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8025240:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8025242:	46b0      	mov	r8, r6
 8025244:	17f6      	asrs	r6, r6, #31
 8025246:	e7c6      	b.n	80251d6 <mg_str_to_num+0x1ba>
  switch (base) {
 8025248:	2200      	movs	r2, #0
 802524a:	4611      	mov	r1, r2
 802524c:	4614      	mov	r4, r2
 802524e:	e7e3      	b.n	8025218 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8025250:	b32c      	cbz	r4, 802529e <mg_str_to_num+0x282>
  if (i != str.len) return false;
 8025252:	9801      	ldr	r0, [sp, #4]
 8025254:	4560      	cmp	r0, ip
 8025256:	d124      	bne.n	80252a2 <mg_str_to_num+0x286>
  if (val_len == 1) {
 8025258:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802525a:	2801      	cmp	r0, #1
 802525c:	d009      	beq.n	8025272 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 802525e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025260:	2802      	cmp	r0, #2
 8025262:	d008      	beq.n	8025276 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8025264:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025266:	2804      	cmp	r0, #4
 8025268:	d008      	beq.n	802527c <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 802526a:	601a      	str	r2, [r3, #0]
 802526c:	6059      	str	r1, [r3, #4]
  return true;
 802526e:	2001      	movs	r0, #1
 8025270:	e719      	b.n	80250a6 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 8025272:	701a      	strb	r2, [r3, #0]
 8025274:	e717      	b.n	80250a6 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8025276:	801a      	strh	r2, [r3, #0]
  return true;
 8025278:	2001      	movs	r0, #1
 802527a:	e714      	b.n	80250a6 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 802527c:	601a      	str	r2, [r3, #0]
  return true;
 802527e:	2001      	movs	r0, #1
 8025280:	e711      	b.n	80250a6 <mg_str_to_num+0x8a>
  switch (base) {
 8025282:	2000      	movs	r0, #0
 8025284:	e70f      	b.n	80250a6 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8025286:	2000      	movs	r0, #0
 8025288:	e70d      	b.n	80250a6 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802528a:	2000      	movs	r0, #0
 802528c:	e70b      	b.n	80250a6 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 802528e:	2000      	movs	r0, #0
 8025290:	e709      	b.n	80250a6 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8025292:	2000      	movs	r0, #0
 8025294:	e707      	b.n	80250a6 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8025296:	2000      	movs	r0, #0
 8025298:	e705      	b.n	80250a6 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802529a:	2000      	movs	r0, #0
 802529c:	e703      	b.n	80250a6 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 802529e:	2000      	movs	r0, #0
 80252a0:	e701      	b.n	80250a6 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 80252a2:	2000      	movs	r0, #0
 80252a4:	e6ff      	b.n	80250a6 <mg_str_to_num+0x8a>
 80252a6:	bf00      	nop
 80252a8:	cccccccd 	.word	0xcccccccd

080252ac <mg_url_decode>:
                  int is_form_url_encoded) {
 80252ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252b0:	b087      	sub	sp, #28
 80252b2:	4606      	mov	r6, r0
 80252b4:	460f      	mov	r7, r1
 80252b6:	4693      	mov	fp, r2
 80252b8:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80252ba:	2400      	movs	r4, #0
 80252bc:	4623      	mov	r3, r4
 80252be:	e027      	b.n	8025310 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80252c0:	f103 0802 	add.w	r8, r3, #2
 80252c4:	45b8      	cmp	r8, r7
 80252c6:	d241      	bcs.n	802534c <mg_url_decode+0xa0>
 80252c8:	3301      	adds	r3, #1
 80252ca:	18f2      	adds	r2, r6, r3
 80252cc:	9203      	str	r2, [sp, #12]
 80252ce:	5cf0      	ldrb	r0, [r6, r3]
 80252d0:	f7fa fea8 	bl	8020024 <isx>
 80252d4:	2800      	cmp	r0, #0
 80252d6:	d03c      	beq.n	8025352 <mg_url_decode+0xa6>
 80252d8:	f816 0008 	ldrb.w	r0, [r6, r8]
 80252dc:	f7fa fea2 	bl	8020024 <isx>
 80252e0:	2800      	cmp	r0, #0
 80252e2:	d039      	beq.n	8025358 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80252e4:	f10d 0a10 	add.w	sl, sp, #16
 80252e8:	2202      	movs	r2, #2
 80252ea:	9903      	ldr	r1, [sp, #12]
 80252ec:	4650      	mov	r0, sl
 80252ee:	f7ff f95b 	bl	80245a8 <mg_str_n>
 80252f2:	2301      	movs	r3, #1
 80252f4:	9300      	str	r3, [sp, #0]
 80252f6:	eb0b 0304 	add.w	r3, fp, r4
 80252fa:	2210      	movs	r2, #16
 80252fc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025300:	f7ff fe8c 	bl	802501c <mg_str_to_num>
        i += 2;
 8025304:	4643      	mov	r3, r8
 8025306:	e001      	b.n	802530c <mg_url_decode+0x60>
      dst[j] = src[i];
 8025308:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 802530c:	3301      	adds	r3, #1
 802530e:	462c      	mov	r4, r5
 8025310:	42bb      	cmp	r3, r7
 8025312:	d20e      	bcs.n	8025332 <mg_url_decode+0x86>
 8025314:	1c65      	adds	r5, r4, #1
 8025316:	454d      	cmp	r5, r9
 8025318:	d20b      	bcs.n	8025332 <mg_url_decode+0x86>
    if (src[i] == '%') {
 802531a:	5cf2      	ldrb	r2, [r6, r3]
 802531c:	2a25      	cmp	r2, #37	@ 0x25
 802531e:	d0cf      	beq.n	80252c0 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8025320:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025322:	2900      	cmp	r1, #0
 8025324:	d0f0      	beq.n	8025308 <mg_url_decode+0x5c>
 8025326:	2a2b      	cmp	r2, #43	@ 0x2b
 8025328:	d1ee      	bne.n	8025308 <mg_url_decode+0x5c>
      dst[j] = ' ';
 802532a:	2220      	movs	r2, #32
 802532c:	f80b 2004 	strb.w	r2, [fp, r4]
 8025330:	e7ec      	b.n	802530c <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8025332:	454c      	cmp	r4, r9
 8025334:	d202      	bcs.n	802533c <mg_url_decode+0x90>
 8025336:	2200      	movs	r2, #0
 8025338:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 802533c:	42bb      	cmp	r3, r7
 802533e:	d30e      	bcc.n	802535e <mg_url_decode+0xb2>
 8025340:	454c      	cmp	r4, r9
 8025342:	d20f      	bcs.n	8025364 <mg_url_decode+0xb8>
 8025344:	4620      	mov	r0, r4
}
 8025346:	b007      	add	sp, #28
 8025348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 802534c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025350:	e7f9      	b.n	8025346 <mg_url_decode+0x9a>
 8025352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025356:	e7f6      	b.n	8025346 <mg_url_decode+0x9a>
 8025358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802535c:	e7f3      	b.n	8025346 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 802535e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025362:	e7f0      	b.n	8025346 <mg_url_decode+0x9a>
 8025364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025368:	e7ed      	b.n	8025346 <mg_url_decode+0x9a>

0802536a <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 802536a:	b352      	cbz	r2, 80253c2 <mg_http_get_var+0x58>
                    size_t dst_len) {
 802536c:	b570      	push	{r4, r5, r6, lr}
 802536e:	b086      	sub	sp, #24
 8025370:	4604      	mov	r4, r0
 8025372:	461d      	mov	r5, r3
 8025374:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8025376:	b10b      	cbz	r3, 802537c <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8025378:	2300      	movs	r3, #0
 802537a:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 802537c:	b325      	cbz	r5, 80253c8 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 802537e:	6823      	ldr	r3, [r4, #0]
 8025380:	b32b      	cbz	r3, 80253ce <mg_http_get_var+0x64>
 8025382:	b339      	cbz	r1, 80253d4 <mg_http_get_var+0x6a>
 8025384:	6863      	ldr	r3, [r4, #4]
 8025386:	b343      	cbz	r3, 80253da <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8025388:	a804      	add	r0, sp, #16
 802538a:	f7ff f901 	bl	8024590 <mg_str_s>
 802538e:	9b05      	ldr	r3, [sp, #20]
 8025390:	9300      	str	r3, [sp, #0]
 8025392:	9b04      	ldr	r3, [sp, #16]
 8025394:	e894 0006 	ldmia.w	r4, {r1, r2}
 8025398:	a802      	add	r0, sp, #8
 802539a:	f7ff fbf3 	bl	8024b84 <mg_http_var>
    if (v.buf == NULL) {
 802539e:	9802      	ldr	r0, [sp, #8]
 80253a0:	b158      	cbz	r0, 80253ba <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80253a2:	2301      	movs	r3, #1
 80253a4:	9300      	str	r3, [sp, #0]
 80253a6:	462b      	mov	r3, r5
 80253a8:	4632      	mov	r2, r6
 80253aa:	9903      	ldr	r1, [sp, #12]
 80253ac:	f7ff ff7e 	bl	80252ac <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 80253b0:	2800      	cmp	r0, #0
 80253b2:	da04      	bge.n	80253be <mg_http_get_var+0x54>
 80253b4:	f06f 0002 	mvn.w	r0, #2
 80253b8:	e001      	b.n	80253be <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 80253ba:	f06f 0003 	mvn.w	r0, #3
}
 80253be:	b006      	add	sp, #24
 80253c0:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 80253c2:	f06f 0001 	mvn.w	r0, #1
}
 80253c6:	4770      	bx	lr
    len = -2;  // Bad destination
 80253c8:	f06f 0001 	mvn.w	r0, #1
 80253cc:	e7f7      	b.n	80253be <mg_http_get_var+0x54>
    len = -1;  // Bad source
 80253ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80253d2:	e7f4      	b.n	80253be <mg_http_get_var+0x54>
 80253d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80253d8:	e7f1      	b.n	80253be <mg_http_get_var+0x54>
 80253da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 80253de:	e7ee      	b.n	80253be <mg_http_get_var+0x54>

080253e0 <mg_http_creds>:
                   char *pass, size_t passlen) {
 80253e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80253e4:	b0c4      	sub	sp, #272	@ 0x110
 80253e6:	4606      	mov	r6, r0
 80253e8:	460d      	mov	r5, r1
 80253ea:	4617      	mov	r7, r2
 80253ec:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 80253ee:	493f      	ldr	r1, [pc, #252]	@ (80254ec <mg_http_creds+0x10c>)
 80253f0:	f7fd fd70 	bl	8022ed4 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 80253f4:	2300      	movs	r3, #0
 80253f6:	7023      	strb	r3, [r4, #0]
 80253f8:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80253fa:	b1c8      	cbz	r0, 8025430 <mg_http_creds+0x50>
 80253fc:	4680      	mov	r8, r0
 80253fe:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8025402:	f1b9 0f06 	cmp.w	r9, #6
 8025406:	d907      	bls.n	8025418 <mg_http_creds+0x38>
 8025408:	f8d0 a000 	ldr.w	sl, [r0]
 802540c:	2206      	movs	r2, #6
 802540e:	4938      	ldr	r1, [pc, #224]	@ (80254f0 <mg_http_creds+0x110>)
 8025410:	4650      	mov	r0, sl
 8025412:	f007 fb99 	bl	802cb48 <memcmp>
 8025416:	b328      	cbz	r0, 8025464 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8025418:	f1b9 0f07 	cmp.w	r9, #7
 802541c:	d908      	bls.n	8025430 <mg_http_creds+0x50>
 802541e:	f8d8 5000 	ldr.w	r5, [r8]
 8025422:	2207      	movs	r2, #7
 8025424:	4933      	ldr	r1, [pc, #204]	@ (80254f4 <mg_http_creds+0x114>)
 8025426:	4628      	mov	r0, r5
 8025428:	f007 fb8e 	bl	802cb48 <memcmp>
 802542c:	2800      	cmp	r0, #0
 802542e:	d043      	beq.n	80254b8 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8025430:	4931      	ldr	r1, [pc, #196]	@ (80254f8 <mg_http_creds+0x118>)
 8025432:	4630      	mov	r0, r6
 8025434:	f7fd fd4e 	bl	8022ed4 <mg_http_get_header>
 8025438:	4605      	mov	r5, r0
 802543a:	2800      	cmp	r0, #0
 802543c:	d04e      	beq.n	80254dc <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 802543e:	220c      	movs	r2, #12
 8025440:	492e      	ldr	r1, [pc, #184]	@ (80254fc <mg_http_creds+0x11c>)
 8025442:	a842      	add	r0, sp, #264	@ 0x108
 8025444:	f7ff f8b0 	bl	80245a8 <mg_str_n>
 8025448:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802544a:	9300      	str	r3, [sp, #0]
 802544c:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802544e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8025452:	a802      	add	r0, sp, #8
 8025454:	f7ff f8c8 	bl	80245e8 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8025458:	9b03      	ldr	r3, [sp, #12]
 802545a:	2b00      	cmp	r3, #0
 802545c:	d136      	bne.n	80254cc <mg_http_creds+0xec>
}
 802545e:	b044      	add	sp, #272	@ 0x110
 8025460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8025464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025468:	aa02      	add	r2, sp, #8
 802546a:	f1a9 0106 	sub.w	r1, r9, #6
 802546e:	f10a 0006 	add.w	r0, sl, #6
 8025472:	f7fd fba3 	bl	8022bbc <mg_base64_decode>
 8025476:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8025478:	4602      	mov	r2, r0
 802547a:	213a      	movs	r1, #58	@ 0x3a
 802547c:	a802      	add	r0, sp, #8
 802547e:	f7ea febf 	bl	8010200 <memchr>
    if (p != NULL) {
 8025482:	4680      	mov	r8, r0
 8025484:	2800      	cmp	r0, #0
 8025486:	d0ea      	beq.n	802545e <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8025488:	ab02      	add	r3, sp, #8
 802548a:	eba0 0a03 	sub.w	sl, r0, r3
 802548e:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8025500 <mg_http_creds+0x120>
 8025492:	9300      	str	r3, [sp, #0]
 8025494:	4653      	mov	r3, sl
 8025496:	464a      	mov	r2, r9
 8025498:	4639      	mov	r1, r7
 802549a:	4628      	mov	r0, r5
 802549c:	f7fe f9f0 	bl	8023880 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 80254a0:	eba6 030a 	sub.w	r3, r6, sl
 80254a4:	f108 0201 	add.w	r2, r8, #1
 80254a8:	9200      	str	r2, [sp, #0]
 80254aa:	3b01      	subs	r3, #1
 80254ac:	464a      	mov	r2, r9
 80254ae:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80254b0:	4620      	mov	r0, r4
 80254b2:	f7fe f9e5 	bl	8023880 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80254b6:	e7d2      	b.n	802545e <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 80254b8:	3507      	adds	r5, #7
 80254ba:	9500      	str	r5, [sp, #0]
 80254bc:	f1a9 0307 	sub.w	r3, r9, #7
 80254c0:	4a0f      	ldr	r2, [pc, #60]	@ (8025500 <mg_http_creds+0x120>)
 80254c2:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80254c4:	4620      	mov	r0, r4
 80254c6:	f7fe f9db 	bl	8023880 <mg_snprintf>
 80254ca:	e7c8      	b.n	802545e <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80254cc:	9a02      	ldr	r2, [sp, #8]
 80254ce:	9200      	str	r2, [sp, #0]
 80254d0:	4a0b      	ldr	r2, [pc, #44]	@ (8025500 <mg_http_creds+0x120>)
 80254d2:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80254d4:	4620      	mov	r0, r4
 80254d6:	f7fe f9d3 	bl	8023880 <mg_snprintf>
 80254da:	e7c0      	b.n	802545e <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80254dc:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80254de:	4622      	mov	r2, r4
 80254e0:	4906      	ldr	r1, [pc, #24]	@ (80254fc <mg_http_creds+0x11c>)
 80254e2:	f106 0010 	add.w	r0, r6, #16
 80254e6:	f7ff ff40 	bl	802536a <mg_http_get_var>
}
 80254ea:	e7b8      	b.n	802545e <mg_http_creds+0x7e>
 80254ec:	0803a9a0 	.word	0x0803a9a0
 80254f0:	0803a9b0 	.word	0x0803a9b0
 80254f4:	0803a9b8 	.word	0x0803a9b8
 80254f8:	0803a9c0 	.word	0x0803a9c0
 80254fc:	08036d38 	.word	0x08036d38
 8025500:	0803a7d0 	.word	0x0803a7d0

08025504 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8025504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025508:	b0ae      	sub	sp, #184	@ 0xb8
 802550a:	4604      	mov	r4, r0
 802550c:	460d      	mov	r5, r1
 802550e:	4616      	mov	r6, r2
 8025510:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025512:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025516:	f1b8 0f00 	cmp.w	r8, #0
 802551a:	d04f      	beq.n	80255bc <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 802551c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802551e:	952b      	str	r5, [sp, #172]	@ 0xac
 8025520:	962c      	str	r6, [sp, #176]	@ 0xb0
 8025522:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8025524:	2300      	movs	r3, #0
 8025526:	9300      	str	r3, [sp, #0]
 8025528:	2380      	movs	r3, #128	@ 0x80
 802552a:	aa07      	add	r2, sp, #28
 802552c:	68e9      	ldr	r1, [r5, #12]
 802552e:	68a8      	ldr	r0, [r5, #8]
 8025530:	f7ff febc 	bl	80252ac <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025534:	1e02      	subs	r2, r0, #0
 8025536:	dd44      	ble.n	80255c2 <listdir+0xbe>
 8025538:	a907      	add	r1, sp, #28
 802553a:	a805      	add	r0, sp, #20
 802553c:	f7ff f834 	bl	80245a8 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8025540:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 8025542:	2a00      	cmp	r2, #0
 8025544:	d044      	beq.n	80255d0 <listdir+0xcc>
 8025546:	4923      	ldr	r1, [pc, #140]	@ (80255d4 <listdir+0xd0>)
 8025548:	4620      	mov	r0, r4
 802554a:	f7fe fe71 	bl	8024230 <mg_printf>
  off = c->send.len;  // Start of body
 802554e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8025550:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 8025552:	9b05      	ldr	r3, [sp, #20]
 8025554:	9303      	str	r3, [sp, #12]
 8025556:	9202      	str	r2, [sp, #8]
 8025558:	491f      	ldr	r1, [pc, #124]	@ (80255d8 <listdir+0xd4>)
 802555a:	9101      	str	r1, [sp, #4]
 802555c:	491f      	ldr	r1, [pc, #124]	@ (80255dc <listdir+0xd8>)
 802555e:	9100      	str	r1, [sp, #0]
 8025560:	491f      	ldr	r1, [pc, #124]	@ (80255e0 <listdir+0xdc>)
 8025562:	4620      	mov	r0, r4
 8025564:	f7fe fe64 	bl	8024230 <mg_printf>
  mg_printf(c, "%s",
 8025568:	4a1e      	ldr	r2, [pc, #120]	@ (80255e4 <listdir+0xe0>)
 802556a:	491f      	ldr	r1, [pc, #124]	@ (80255e8 <listdir+0xe4>)
 802556c:	4620      	mov	r0, r4
 802556e:	f7fe fe5f 	bl	8024230 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 8025572:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025576:	aa2a      	add	r2, sp, #168	@ 0xa8
 8025578:	491c      	ldr	r1, [pc, #112]	@ (80255ec <listdir+0xe8>)
 802557a:	4638      	mov	r0, r7
 802557c:	4798      	blx	r3
  mg_printf(c,
 802557e:	4a1c      	ldr	r2, [pc, #112]	@ (80255f0 <listdir+0xec>)
 8025580:	491c      	ldr	r1, [pc, #112]	@ (80255f4 <listdir+0xf0>)
 8025582:	4620      	mov	r0, r4
 8025584:	f7fe fe54 	bl	8024230 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8025588:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802558a:	1b5b      	subs	r3, r3, r5
 802558c:	4a1a      	ldr	r2, [pc, #104]	@ (80255f8 <listdir+0xf4>)
 802558e:	210a      	movs	r1, #10
 8025590:	a827      	add	r0, sp, #156	@ 0x9c
 8025592:	f7fe f975 	bl	8023880 <mg_snprintf>
 8025596:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8025598:	280a      	cmp	r0, #10
 802559a:	d900      	bls.n	802559e <listdir+0x9a>
 802559c:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 802559e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80255a0:	3d0c      	subs	r5, #12
 80255a2:	a927      	add	r1, sp, #156	@ 0x9c
 80255a4:	4428      	add	r0, r5
 80255a6:	f008 fd9f 	bl	802e0e8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 80255aa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80255ae:	f36f 13c7 	bfc	r3, #7, #1
 80255b2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80255b6:	b02e      	add	sp, #184	@ 0xb8
 80255b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80255bc:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8025600 <listdir+0xfc>
 80255c0:	e7ac      	b.n	802551c <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80255c2:	ab05      	add	r3, sp, #20
 80255c4:	3508      	adds	r5, #8
 80255c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80255ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80255ce:	e7b7      	b.n	8025540 <listdir+0x3c>
  mg_printf(c,
 80255d0:	4a0a      	ldr	r2, [pc, #40]	@ (80255fc <listdir+0xf8>)
 80255d2:	e7b8      	b.n	8025546 <listdir+0x42>
 80255d4:	0803a9c8 	.word	0x0803a9c8
 80255d8:	0803aba8 	.word	0x0803aba8
 80255dc:	0803ad6c 	.word	0x0803ad6c
 80255e0:	0803aa20 	.word	0x0803aa20
 80255e4:	0803af34 	.word	0x0803af34
 80255e8:	0803b398 	.word	0x0803b398
 80255ec:	08026dad 	.word	0x08026dad
 80255f0:	08038894 	.word	0x08038894
 80255f4:	0803af84 	.word	0x0803af84
 80255f8:	0803b648 	.word	0x0803b648
 80255fc:	08036fac 	.word	0x08036fac
 8025600:	20000130 	.word	0x20000130

08025604 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8025604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025608:	b087      	sub	sp, #28
 802560a:	461f      	mov	r7, r3
  int i = 0, n = 0;
 802560c:	2300      	movs	r3, #0
 802560e:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8025610:	2902      	cmp	r1, #2
 8025612:	dd42      	ble.n	802569a <skip_chunk+0x96>
 8025614:	4606      	mov	r6, r0
 8025616:	460d      	mov	r5, r1
 8025618:	4690      	mov	r8, r2
  int i = 0, n = 0;
 802561a:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 802561c:	42ac      	cmp	r4, r5
 802561e:	da05      	bge.n	802562c <skip_chunk+0x28>
 8025620:	5d30      	ldrb	r0, [r6, r4]
 8025622:	f7fb f92a 	bl	802087a <is_hex_digit>
 8025626:	b108      	cbz	r0, 802562c <skip_chunk+0x28>
 8025628:	3401      	adds	r4, #1
 802562a:	e7f7      	b.n	802561c <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 802562c:	2c00      	cmp	r4, #0
 802562e:	d036      	beq.n	802569e <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025630:	2c08      	cmp	r4, #8
 8025632:	dc37      	bgt.n	80256a4 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025634:	42ac      	cmp	r4, r5
 8025636:	da38      	bge.n	80256aa <skip_chunk+0xa6>
 8025638:	4622      	mov	r2, r4
 802563a:	5d33      	ldrb	r3, [r6, r4]
 802563c:	2b0d      	cmp	r3, #13
 802563e:	d137      	bne.n	80256b0 <skip_chunk+0xac>
 8025640:	1933      	adds	r3, r6, r4
 8025642:	785b      	ldrb	r3, [r3, #1]
 8025644:	2b0a      	cmp	r3, #10
 8025646:	d136      	bne.n	80256b6 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8025648:	f10d 0910 	add.w	r9, sp, #16
 802564c:	4631      	mov	r1, r6
 802564e:	4648      	mov	r0, r9
 8025650:	f7fe ffaa 	bl	80245a8 <mg_str_n>
 8025654:	2304      	movs	r3, #4
 8025656:	9300      	str	r3, [sp, #0]
 8025658:	ab03      	add	r3, sp, #12
 802565a:	2210      	movs	r2, #16
 802565c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025660:	f7ff fcdc 	bl	802501c <mg_str_to_num>
 8025664:	b350      	cbz	r0, 80256bc <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025666:	9b03      	ldr	r3, [sp, #12]
 8025668:	2b00      	cmp	r3, #0
 802566a:	db2a      	blt.n	80256c2 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 802566c:	1b2d      	subs	r5, r5, r4
 802566e:	3d03      	subs	r5, #3
 8025670:	42ab      	cmp	r3, r5
 8025672:	da29      	bge.n	80256c8 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8025674:	4423      	add	r3, r4
 8025676:	18f2      	adds	r2, r6, r3
 8025678:	7892      	ldrb	r2, [r2, #2]
 802567a:	2a0d      	cmp	r2, #13
 802567c:	d126      	bne.n	80256cc <skip_chunk+0xc8>
 802567e:	441e      	add	r6, r3
 8025680:	78f3      	ldrb	r3, [r6, #3]
 8025682:	2b0a      	cmp	r3, #10
 8025684:	d125      	bne.n	80256d2 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8025686:	3402      	adds	r4, #2
 8025688:	f8c8 4000 	str.w	r4, [r8]
 802568c:	9b03      	ldr	r3, [sp, #12]
 802568e:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8025690:	441c      	add	r4, r3
 8025692:	1ca0      	adds	r0, r4, #2
}
 8025694:	b007      	add	sp, #28
 8025696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 802569a:	2000      	movs	r0, #0
 802569c:	e7fa      	b.n	8025694 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 802569e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256a2:	e7f7      	b.n	8025694 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80256a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256a8:	e7f4      	b.n	8025694 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80256aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256ae:	e7f1      	b.n	8025694 <skip_chunk+0x90>
 80256b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256b4:	e7ee      	b.n	8025694 <skip_chunk+0x90>
 80256b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256ba:	e7eb      	b.n	8025694 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 80256bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256c0:	e7e8      	b.n	8025694 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80256c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256c6:	e7e5      	b.n	8025694 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80256c8:	2000      	movs	r0, #0
 80256ca:	e7e3      	b.n	8025694 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80256cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256d0:	e7e0      	b.n	8025694 <skip_chunk+0x90>
 80256d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80256d6:	e7dd      	b.n	8025694 <skip_chunk+0x90>

080256d8 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 80256d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256dc:	b086      	sub	sp, #24
 80256de:	ac02      	add	r4, sp, #8
 80256e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80256e4:	4617      	mov	r7, r2
 80256e6:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80256e8:	2400      	movs	r4, #0
 80256ea:	4621      	mov	r1, r4
 80256ec:	e01c      	b.n	8025728 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80256ee:	f101 0805 	add.w	r8, r1, #5
 80256f2:	45a8      	cmp	r8, r5
 80256f4:	d221      	bcs.n	802573a <mg_json_unescape+0x62>
 80256f6:	185a      	adds	r2, r3, r1
 80256f8:	7852      	ldrb	r2, [r2, #1]
 80256fa:	2a75      	cmp	r2, #117	@ 0x75
 80256fc:	d11d      	bne.n	802573a <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 80256fe:	3102      	adds	r1, #2
 8025700:	ad04      	add	r5, sp, #16
 8025702:	2204      	movs	r2, #4
 8025704:	4419      	add	r1, r3
 8025706:	4628      	mov	r0, r5
 8025708:	f7fe ff4e 	bl	80245a8 <mg_str_n>
 802570c:	2301      	movs	r3, #1
 802570e:	9300      	str	r3, [sp, #0]
 8025710:	193b      	adds	r3, r7, r4
 8025712:	2210      	movs	r2, #16
 8025714:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025718:	f7ff fc80 	bl	802501c <mg_str_to_num>
 802571c:	b308      	cbz	r0, 8025762 <mg_json_unescape+0x8a>
      i += 5;
 802571e:	4641      	mov	r1, r8
 8025720:	e000      	b.n	8025724 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8025722:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025724:	3101      	adds	r1, #1
 8025726:	3401      	adds	r4, #1
 8025728:	9d03      	ldr	r5, [sp, #12]
 802572a:	428d      	cmp	r5, r1
 802572c:	d914      	bls.n	8025758 <mg_json_unescape+0x80>
 802572e:	42b4      	cmp	r4, r6
 8025730:	d212      	bcs.n	8025758 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025732:	9b02      	ldr	r3, [sp, #8]
 8025734:	5c58      	ldrb	r0, [r3, r1]
 8025736:	285c      	cmp	r0, #92	@ 0x5c
 8025738:	d0d9      	beq.n	80256ee <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802573a:	285c      	cmp	r0, #92	@ 0x5c
 802573c:	d1f1      	bne.n	8025722 <mg_json_unescape+0x4a>
 802573e:	f101 0801 	add.w	r8, r1, #1
 8025742:	45a8      	cmp	r8, r5
 8025744:	d2ed      	bcs.n	8025722 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8025746:	2100      	movs	r1, #0
 8025748:	f813 0008 	ldrb.w	r0, [r3, r8]
 802574c:	f7fb f8ba 	bl	80208c4 <json_esc>
      if (c == 0) return false;
 8025750:	b150      	cbz	r0, 8025768 <mg_json_unescape+0x90>
      to[j] = c;
 8025752:	5538      	strb	r0, [r7, r4]
      i++;
 8025754:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8025756:	e7e5      	b.n	8025724 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8025758:	42b4      	cmp	r4, r6
 802575a:	d207      	bcs.n	802576c <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 802575c:	2300      	movs	r3, #0
 802575e:	553b      	strb	r3, [r7, r4]
  return true;
 8025760:	2001      	movs	r0, #1
}
 8025762:	b006      	add	sp, #24
 8025764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8025768:	2000      	movs	r0, #0
 802576a:	e7fa      	b.n	8025762 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 802576c:	2000      	movs	r0, #0
 802576e:	e7f8      	b.n	8025762 <mg_json_unescape+0x8a>

08025770 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8025770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025772:	b087      	sub	sp, #28
 8025774:	46ec      	mov	ip, sp
 8025776:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 802577a:	2300      	movs	r3, #0
 802577c:	9303      	str	r3, [sp, #12]
 802577e:	ab03      	add	r3, sp, #12
 8025780:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8025784:	f7fd fbd6 	bl	8022f34 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8025788:	1e04      	subs	r4, r0, #0
 802578a:	db25      	blt.n	80257d8 <mg_json_get_str+0x68>
 802578c:	9903      	ldr	r1, [sp, #12]
 802578e:	2901      	cmp	r1, #1
 8025790:	dd24      	ble.n	80257dc <mg_json_get_str+0x6c>
 8025792:	9e00      	ldr	r6, [sp, #0]
 8025794:	5d33      	ldrb	r3, [r6, r4]
 8025796:	2b22      	cmp	r3, #34	@ 0x22
 8025798:	d003      	beq.n	80257a2 <mg_json_get_str+0x32>
  char *result = NULL;
 802579a:	2500      	movs	r5, #0
}
 802579c:	4628      	mov	r0, r5
 802579e:	b007      	add	sp, #28
 80257a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80257a2:	2001      	movs	r0, #1
 80257a4:	f7fd f93c 	bl	8022a20 <mg_calloc>
 80257a8:	4605      	mov	r5, r0
 80257aa:	2800      	cmp	r0, #0
 80257ac:	d0f6      	beq.n	802579c <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 80257ae:	1c61      	adds	r1, r4, #1
 80257b0:	9f03      	ldr	r7, [sp, #12]
 80257b2:	ac04      	add	r4, sp, #16
 80257b4:	1eba      	subs	r2, r7, #2
 80257b6:	4431      	add	r1, r6
 80257b8:	4620      	mov	r0, r4
 80257ba:	f7fe fef5 	bl	80245a8 <mg_str_n>
 80257be:	463b      	mov	r3, r7
 80257c0:	462a      	mov	r2, r5
 80257c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80257c6:	f7ff ff87 	bl	80256d8 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80257ca:	2800      	cmp	r0, #0
 80257cc:	d1e6      	bne.n	802579c <mg_json_get_str+0x2c>
      free(result);
 80257ce:	4628      	mov	r0, r5
 80257d0:	f7f5 fa84 	bl	801acdc <vPortFree>
      result = NULL;
 80257d4:	2500      	movs	r5, #0
 80257d6:	e7e1      	b.n	802579c <mg_json_get_str+0x2c>
  char *result = NULL;
 80257d8:	2500      	movs	r5, #0
 80257da:	e7df      	b.n	802579c <mg_json_get_str+0x2c>
 80257dc:	2500      	movs	r5, #0
 80257de:	e7dd      	b.n	802579c <mg_json_get_str+0x2c>

080257e0 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80257e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80257e4:	b08a      	sub	sp, #40	@ 0x28
 80257e6:	ab02      	add	r3, sp, #8
 80257e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80257ec:	4617      	mov	r7, r2
  addr->scope_id = 0;
 80257ee:	2300      	movs	r3, #0
 80257f0:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 80257f2:	2902      	cmp	r1, #2
 80257f4:	d904      	bls.n	8025800 <mg_aton6+0x20>
 80257f6:	460b      	mov	r3, r1
 80257f8:	4602      	mov	r2, r0
 80257fa:	7801      	ldrb	r1, [r0, #0]
 80257fc:	295b      	cmp	r1, #91	@ 0x5b
 80257fe:	d00f      	beq.n	8025820 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8025800:	463a      	mov	r2, r7
 8025802:	ab02      	add	r3, sp, #8
 8025804:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025808:	f7fe ff40 	bl	802468c <mg_v4mapped>
 802580c:	4680      	mov	r8, r0
 802580e:	2800      	cmp	r0, #0
 8025810:	f040 8087 	bne.w	8025922 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8025814:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8025818:	2600      	movs	r6, #0
 802581a:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 802581c:	4634      	mov	r4, r6
 802581e:	e020      	b.n	8025862 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025820:	3201      	adds	r2, #1
 8025822:	9202      	str	r2, [sp, #8]
 8025824:	3b02      	subs	r3, #2
 8025826:	9303      	str	r3, [sp, #12]
 8025828:	e7ea      	b.n	8025800 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 802582a:	2300      	movs	r3, #0
 802582c:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 802582e:	1ceb      	adds	r3, r5, #3
 8025830:	42a3      	cmp	r3, r4
 8025832:	d376      	bcc.n	8025922 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8025834:	1b62      	subs	r2, r4, r5
 8025836:	f10d 0a18 	add.w	sl, sp, #24
 802583a:	3201      	adds	r2, #1
 802583c:	4429      	add	r1, r5
 802583e:	4650      	mov	r0, sl
 8025840:	f7fe feb2 	bl	80245a8 <mg_str_n>
 8025844:	2304      	movs	r3, #4
 8025846:	9300      	str	r3, [sp, #0]
 8025848:	ab05      	add	r3, sp, #20
 802584a:	2210      	movs	r2, #16
 802584c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025850:	f7ff fbe4 	bl	802501c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8025854:	9b05      	ldr	r3, [sp, #20]
 8025856:	f3c3 2207 	ubfx	r2, r3, #8, #8
 802585a:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 802585c:	1c72      	adds	r2, r6, #1
 802585e:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8025860:	3401      	adds	r4, #1
 8025862:	9803      	ldr	r0, [sp, #12]
 8025864:	42a0      	cmp	r0, r4
 8025866:	d941      	bls.n	80258ec <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8025868:	9902      	ldr	r1, [sp, #8]
 802586a:	5d0a      	ldrb	r2, [r1, r4]
 802586c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8025870:	b2db      	uxtb	r3, r3
 8025872:	2b09      	cmp	r3, #9
 8025874:	d9d9      	bls.n	802582a <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025876:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 802587a:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802587c:	2b05      	cmp	r3, #5
 802587e:	d9d4      	bls.n	802582a <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8025880:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8025884:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025886:	2b05      	cmp	r3, #5
 8025888:	d9cf      	bls.n	802582a <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 802588a:	2a3a      	cmp	r2, #58	@ 0x3a
 802588c:	d119      	bne.n	80258c2 <mg_aton6+0xe2>
      j = i + 1;
 802588e:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8025890:	b12c      	cbz	r4, 802589e <mg_aton6+0xbe>
 8025892:	190b      	adds	r3, r1, r4
 8025894:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025898:	2b3a      	cmp	r3, #58	@ 0x3a
 802589a:	d007      	beq.n	80258ac <mg_aton6+0xcc>
        n += 2;
 802589c:	3602      	adds	r6, #2
      if (n > 14) return false;
 802589e:	2e0e      	cmp	r6, #14
 80258a0:	d83f      	bhi.n	8025922 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 80258a2:	1c73      	adds	r3, r6, #1
 80258a4:	2200      	movs	r2, #0
 80258a6:	54fa      	strb	r2, [r7, r3]
 80258a8:	55ba      	strb	r2, [r7, r6]
 80258aa:	e7d9      	b.n	8025860 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 80258ac:	2c01      	cmp	r4, #1
 80258ae:	d906      	bls.n	80258be <mg_aton6+0xde>
 80258b0:	4421      	add	r1, r4
 80258b2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80258b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80258b8:	d033      	beq.n	8025922 <mg_aton6+0x142>
        dc = n;  // Double colon
 80258ba:	46b1      	mov	r9, r6
 80258bc:	e7ef      	b.n	802589e <mg_aton6+0xbe>
 80258be:	46b1      	mov	r9, r6
 80258c0:	e7ed      	b.n	802589e <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 80258c2:	2a25      	cmp	r2, #37	@ 0x25
 80258c4:	d12d      	bne.n	8025922 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 80258c6:	1c63      	adds	r3, r4, #1
 80258c8:	1b02      	subs	r2, r0, r4
 80258ca:	ac08      	add	r4, sp, #32
 80258cc:	3a01      	subs	r2, #1
 80258ce:	4419      	add	r1, r3
 80258d0:	4620      	mov	r0, r4
 80258d2:	f7fe fe69 	bl	80245a8 <mg_str_n>
 80258d6:	2301      	movs	r3, #1
 80258d8:	9300      	str	r3, [sp, #0]
 80258da:	f107 0312 	add.w	r3, r7, #18
 80258de:	220a      	movs	r2, #10
 80258e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80258e4:	f7ff fb9a 	bl	802501c <mg_str_to_num>
 80258e8:	4680      	mov	r8, r0
 80258ea:	e01a      	b.n	8025922 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 80258ec:	2e0d      	cmp	r6, #13
 80258ee:	d814      	bhi.n	802591a <mg_aton6+0x13a>
 80258f0:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 80258f4:	d015      	beq.n	8025922 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 80258f6:	eba9 0006 	sub.w	r0, r9, r6
 80258fa:	300e      	adds	r0, #14
 80258fc:	eb07 0409 	add.w	r4, r7, r9
 8025900:	eba6 0209 	sub.w	r2, r6, r9
 8025904:	3202      	adds	r2, #2
 8025906:	4621      	mov	r1, r4
 8025908:	4438      	add	r0, r7
 802590a:	f007 f997 	bl	802cc3c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 802590e:	f1c6 020e 	rsb	r2, r6, #14
 8025912:	2100      	movs	r1, #0
 8025914:	4620      	mov	r0, r4
 8025916:	f007 f9ab 	bl	802cc70 <memset>
  addr->is_ip6 = true;
 802591a:	f04f 0801 	mov.w	r8, #1
 802591e:	f887 8013 	strb.w	r8, [r7, #19]
}
 8025922:	4640      	mov	r0, r8
 8025924:	b00a      	add	sp, #40	@ 0x28
 8025926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802592a <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 802592a:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 802592c:	2400      	movs	r4, #0
 802592e:	600c      	str	r4, [r1, #0]
 8025930:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8025934:	2200      	movs	r2, #0
 8025936:	2300      	movs	r3, #0
 8025938:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 802593c:	9b01      	ldr	r3, [sp, #4]
 802593e:	618b      	str	r3, [r1, #24]
 8025940:	9b02      	ldr	r3, [sp, #8]
 8025942:	61cb      	str	r3, [r1, #28]
 8025944:	9b03      	ldr	r3, [sp, #12]
 8025946:	620b      	str	r3, [r1, #32]
 8025948:	6803      	ldr	r3, [r0, #0]
 802594a:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 802594c:	6001      	str	r1, [r0, #0]
}
 802594e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025952:	4770      	bx	lr

08025954 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8025954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025956:	b085      	sub	sp, #20
 8025958:	4604      	mov	r4, r0
 802595a:	4616      	mov	r6, r2
 802595c:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 802595e:	2128      	movs	r1, #40	@ 0x28
 8025960:	2001      	movs	r0, #1
 8025962:	f7fd f85d 	bl	8022a20 <mg_calloc>
  if (t != NULL) {
 8025966:	4607      	mov	r7, r0
 8025968:	b180      	cbz	r0, 802598c <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 802596a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802596c:	9302      	str	r3, [sp, #8]
 802596e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025970:	9301      	str	r3, [sp, #4]
 8025972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025974:	9300      	str	r3, [sp, #0]
 8025976:	4632      	mov	r2, r6
 8025978:	462b      	mov	r3, r5
 802597a:	4601      	mov	r1, r0
 802597c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8025980:	f7ff ffd3 	bl	802592a <mg_timer_init>
    t->id = mgr->timerid++;
 8025984:	6a23      	ldr	r3, [r4, #32]
 8025986:	1c5a      	adds	r2, r3, #1
 8025988:	6222      	str	r2, [r4, #32]
 802598a:	603b      	str	r3, [r7, #0]
}
 802598c:	4638      	mov	r0, r7
 802598e:	b005      	add	sp, #20
 8025990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025992:	0000      	movs	r0, r0
 8025994:	0000      	movs	r0, r0
	...

08025998 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8025998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802599c:	4698      	mov	r8, r3
 802599e:	9906      	ldr	r1, [sp, #24]
 80259a0:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80259a2:	188e      	adds	r6, r1, r2
 80259a4:	eb43 0504 	adc.w	r5, r3, r4
 80259a8:	6847      	ldr	r7, [r0, #4]
 80259aa:	6803      	ldr	r3, [r0, #0]
 80259ac:	429e      	cmp	r6, r3
 80259ae:	eb75 0707 	sbcs.w	r7, r5, r7
 80259b2:	d203      	bcs.n	80259bc <mg_timer_expired+0x24>
 80259b4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80259f8 <mg_timer_expired+0x60>
 80259b8:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80259bc:	6847      	ldr	r7, [r0, #4]
 80259be:	6803      	ldr	r3, [r0, #0]
 80259c0:	431f      	orrs	r7, r3
 80259c2:	d101      	bne.n	80259c8 <mg_timer_expired+0x30>
 80259c4:	6006      	str	r6, [r0, #0]
 80259c6:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 80259c8:	6807      	ldr	r7, [r0, #0]
 80259ca:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80259ce:	42b9      	cmp	r1, r7
 80259d0:	eb74 0e0c 	sbcs.w	lr, r4, ip
 80259d4:	d30e      	bcc.n	80259f4 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80259d6:	1bc9      	subs	r1, r1, r7
 80259d8:	eb64 040c 	sbc.w	r4, r4, ip
 80259dc:	428a      	cmp	r2, r1
 80259de:	eb78 0404 	sbcs.w	r4, r8, r4
 80259e2:	d302      	bcc.n	80259ea <mg_timer_expired+0x52>
 80259e4:	18be      	adds	r6, r7, r2
 80259e6:	eb4c 0508 	adc.w	r5, ip, r8
 80259ea:	6006      	str	r6, [r0, #0]
 80259ec:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 80259ee:	2001      	movs	r0, #1
}
 80259f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 80259f4:	2000      	movs	r0, #0
 80259f6:	e7fb      	b.n	80259f0 <mg_timer_expired+0x58>
	...

08025a00 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a04:	b082      	sub	sp, #8
 8025a06:	4617      	mov	r7, r2
 8025a08:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8025a0a:	6804      	ldr	r4, [r0, #0]
 8025a0c:	e019      	b.n	8025a42 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025a0e:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025a10:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8025a14:	9700      	str	r7, [sp, #0]
 8025a16:	9601      	str	r6, [sp, #4]
 8025a18:	f104 0010 	add.w	r0, r4, #16
 8025a1c:	f7ff ffbc 	bl	8025998 <mg_timer_expired>
    tmp = t->next;
 8025a20:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8025a24:	b905      	cbnz	r5, 8025a28 <mg_timer_poll+0x28>
 8025a26:	b158      	cbz	r0, 8025a40 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8025a28:	69a3      	ldr	r3, [r4, #24]
 8025a2a:	f003 0305 	and.w	r3, r3, #5
 8025a2e:	2b04      	cmp	r3, #4
 8025a30:	d002      	beq.n	8025a38 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8025a32:	69e3      	ldr	r3, [r4, #28]
 8025a34:	6a20      	ldr	r0, [r4, #32]
 8025a36:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8025a38:	69a1      	ldr	r1, [r4, #24]
 8025a3a:	f041 0104 	orr.w	r1, r1, #4
 8025a3e:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025a40:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 8025a42:	b164      	cbz	r4, 8025a5e <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025a44:	6923      	ldr	r3, [r4, #16]
 8025a46:	6962      	ldr	r2, [r4, #20]
 8025a48:	4313      	orrs	r3, r2
 8025a4a:	d1e0      	bne.n	8025a0e <mg_timer_poll+0xe>
 8025a4c:	69a3      	ldr	r3, [r4, #24]
 8025a4e:	f003 0306 	and.w	r3, r3, #6
 8025a52:	2b02      	cmp	r3, #2
 8025a54:	d001      	beq.n	8025a5a <mg_timer_poll+0x5a>
 8025a56:	2500      	movs	r5, #0
 8025a58:	e7da      	b.n	8025a10 <mg_timer_poll+0x10>
 8025a5a:	2501      	movs	r5, #1
 8025a5c:	e7d8      	b.n	8025a10 <mg_timer_poll+0x10>
}
 8025a5e:	b002      	add	sp, #8
 8025a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025a64 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025a64:	b118      	cbz	r0, 8025a6e <mg_tls_recv+0xa>
 8025a66:	b121      	cbz	r1, 8025a72 <mg_tls_recv+0xe>
 8025a68:	b92a      	cbnz	r2, 8025a76 <mg_tls_recv+0x12>
 8025a6a:	2000      	movs	r0, #0
 8025a6c:	4770      	bx	lr
 8025a6e:	2000      	movs	r0, #0
 8025a70:	4770      	bx	lr
 8025a72:	2000      	movs	r0, #0
 8025a74:	4770      	bx	lr
 8025a76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025a7a:	4770      	bx	lr

08025a7c <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025a7c:	b118      	cbz	r0, 8025a86 <mg_tls_send+0xa>
 8025a7e:	b121      	cbz	r1, 8025a8a <mg_tls_send+0xe>
 8025a80:	b92a      	cbnz	r2, 8025a8e <mg_tls_send+0x12>
 8025a82:	2000      	movs	r0, #0
 8025a84:	4770      	bx	lr
 8025a86:	2000      	movs	r0, #0
 8025a88:	4770      	bx	lr
 8025a8a:	2000      	movs	r0, #0
 8025a8c:	4770      	bx	lr
 8025a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8025a92:	4770      	bx	lr

08025a94 <mg_tls_pending>:
}
 8025a94:	2000      	movs	r0, #0
 8025a96:	4770      	bx	lr

08025a98 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8025a98:	b510      	push	{r4, lr}
 8025a9a:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025a9c:	2204      	movs	r2, #4
 8025a9e:	4918      	ldr	r1, [pc, #96]	@ (8025b00 <mg_url_is_ssl+0x68>)
 8025aa0:	f007 f91b 	bl	802ccda <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025aa4:	b1f8      	cbz	r0, 8025ae6 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025aa6:	2206      	movs	r2, #6
 8025aa8:	4916      	ldr	r1, [pc, #88]	@ (8025b04 <mg_url_is_ssl+0x6c>)
 8025aaa:	4620      	mov	r0, r4
 8025aac:	f007 f915 	bl	802ccda <strncmp>
 8025ab0:	b1d8      	cbz	r0, 8025aea <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025ab2:	2206      	movs	r2, #6
 8025ab4:	4914      	ldr	r1, [pc, #80]	@ (8025b08 <mg_url_is_ssl+0x70>)
 8025ab6:	4620      	mov	r0, r4
 8025ab8:	f007 f90f 	bl	802ccda <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8025abc:	b1b8      	cbz	r0, 8025aee <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025abe:	2204      	movs	r2, #4
 8025ac0:	4912      	ldr	r1, [pc, #72]	@ (8025b0c <mg_url_is_ssl+0x74>)
 8025ac2:	4620      	mov	r0, r4
 8025ac4:	f007 f909 	bl	802ccda <strncmp>
 8025ac8:	b198      	cbz	r0, 8025af2 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025aca:	2204      	movs	r2, #4
 8025acc:	4910      	ldr	r1, [pc, #64]	@ (8025b10 <mg_url_is_ssl+0x78>)
 8025ace:	4620      	mov	r0, r4
 8025ad0:	f007 f903 	bl	802ccda <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8025ad4:	b178      	cbz	r0, 8025af6 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025ad6:	2205      	movs	r2, #5
 8025ad8:	490e      	ldr	r1, [pc, #56]	@ (8025b14 <mg_url_is_ssl+0x7c>)
 8025ada:	4620      	mov	r0, r4
 8025adc:	f007 f8fd 	bl	802ccda <strncmp>
 8025ae0:	b958      	cbnz	r0, 8025afa <mg_url_is_ssl+0x62>
 8025ae2:	2001      	movs	r0, #1
 8025ae4:	e000      	b.n	8025ae8 <mg_url_is_ssl+0x50>
 8025ae6:	2001      	movs	r0, #1
}
 8025ae8:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8025aea:	2001      	movs	r0, #1
 8025aec:	e7fc      	b.n	8025ae8 <mg_url_is_ssl+0x50>
 8025aee:	2001      	movs	r0, #1
 8025af0:	e7fa      	b.n	8025ae8 <mg_url_is_ssl+0x50>
 8025af2:	2001      	movs	r0, #1
 8025af4:	e7f8      	b.n	8025ae8 <mg_url_is_ssl+0x50>
 8025af6:	2001      	movs	r0, #1
 8025af8:	e7f6      	b.n	8025ae8 <mg_url_is_ssl+0x50>
 8025afa:	2000      	movs	r0, #0
 8025afc:	e7f4      	b.n	8025ae8 <mg_url_is_ssl+0x50>
 8025afe:	bf00      	nop
 8025b00:	0803aff8 	.word	0x0803aff8
 8025b04:	0803b000 	.word	0x0803b000
 8025b08:	0803b008 	.word	0x0803b008
 8025b0c:	0803b010 	.word	0x0803b010
 8025b10:	0803b018 	.word	0x0803b018
 8025b14:	0803b020 	.word	0x0803b020

08025b18 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8025b18:	b530      	push	{r4, r5, lr}
 8025b1a:	b089      	sub	sp, #36	@ 0x24
 8025b1c:	4604      	mov	r4, r0
 8025b1e:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8025b20:	a801      	add	r0, sp, #4
 8025b22:	f7fb feeb 	bl	80218fc <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8025b26:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8025b28:	b152      	cbz	r2, 8025b40 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8025b2a:	9b04      	ldr	r3, [sp, #16]
 8025b2c:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8025b2e:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8025b30:	9904      	ldr	r1, [sp, #16]
 8025b32:	4429      	add	r1, r5
 8025b34:	4620      	mov	r0, r4
 8025b36:	f7fe fd37 	bl	80245a8 <mg_str_n>
}
 8025b3a:	4620      	mov	r0, r4
 8025b3c:	b009      	add	sp, #36	@ 0x24
 8025b3e:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8025b40:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8025b42:	b112      	cbz	r2, 8025b4a <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8025b44:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8025b46:	1ad2      	subs	r2, r2, r3
 8025b48:	e7f2      	b.n	8025b30 <mg_url_host+0x18>
 8025b4a:	9a07      	ldr	r2, [sp, #28]
 8025b4c:	9b04      	ldr	r3, [sp, #16]
 8025b4e:	1ad2      	subs	r2, r2, r3
 8025b50:	e7ee      	b.n	8025b30 <mg_url_host+0x18>
	...

08025b54 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8025b54:	b530      	push	{r4, r5, lr}
 8025b56:	b089      	sub	sp, #36	@ 0x24
 8025b58:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8025b5a:	4601      	mov	r1, r0
 8025b5c:	a801      	add	r0, sp, #4
 8025b5e:	f7fb fecd 	bl	80218fc <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025b62:	2205      	movs	r2, #5
 8025b64:	491d      	ldr	r1, [pc, #116]	@ (8025bdc <mg_url_port+0x88>)
 8025b66:	4620      	mov	r0, r4
 8025b68:	f007 f8b7 	bl	802ccda <strncmp>
 8025b6c:	b138      	cbz	r0, 8025b7e <mg_url_port+0x2a>
 8025b6e:	2203      	movs	r2, #3
 8025b70:	491b      	ldr	r1, [pc, #108]	@ (8025be0 <mg_url_port+0x8c>)
 8025b72:	4620      	mov	r0, r4
 8025b74:	f007 f8b1 	bl	802ccda <strncmp>
 8025b78:	b188      	cbz	r0, 8025b9e <mg_url_port+0x4a>
  unsigned short port = 0;
 8025b7a:	2500      	movs	r5, #0
 8025b7c:	e000      	b.n	8025b80 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025b7e:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8025b80:	2204      	movs	r2, #4
 8025b82:	4918      	ldr	r1, [pc, #96]	@ (8025be4 <mg_url_port+0x90>)
 8025b84:	4620      	mov	r0, r4
 8025b86:	f007 f8a8 	bl	802ccda <strncmp>
 8025b8a:	b150      	cbz	r0, 8025ba2 <mg_url_port+0x4e>
 8025b8c:	2206      	movs	r2, #6
 8025b8e:	4916      	ldr	r1, [pc, #88]	@ (8025be8 <mg_url_port+0x94>)
 8025b90:	4620      	mov	r0, r4
 8025b92:	f007 f8a2 	bl	802ccda <strncmp>
 8025b96:	b930      	cbnz	r0, 8025ba6 <mg_url_port+0x52>
    port = 443;
 8025b98:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8025b9c:	e003      	b.n	8025ba6 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025b9e:	2550      	movs	r5, #80	@ 0x50
 8025ba0:	e7ee      	b.n	8025b80 <mg_url_port+0x2c>
    port = 443;
 8025ba2:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8025ba6:	2205      	movs	r2, #5
 8025ba8:	4910      	ldr	r1, [pc, #64]	@ (8025bec <mg_url_port+0x98>)
 8025baa:	4620      	mov	r0, r4
 8025bac:	f007 f895 	bl	802ccda <strncmp>
 8025bb0:	b908      	cbnz	r0, 8025bb6 <mg_url_port+0x62>
 8025bb2:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8025bb6:	2206      	movs	r2, #6
 8025bb8:	490d      	ldr	r1, [pc, #52]	@ (8025bf0 <mg_url_port+0x9c>)
 8025bba:	4620      	mov	r0, r4
 8025bbc:	f007 f88d 	bl	802ccda <strncmp>
 8025bc0:	b908      	cbnz	r0, 8025bc6 <mg_url_port+0x72>
 8025bc2:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025bc6:	9805      	ldr	r0, [sp, #20]
 8025bc8:	b910      	cbnz	r0, 8025bd0 <mg_url_port+0x7c>
}
 8025bca:	4628      	mov	r0, r5
 8025bcc:	b009      	add	sp, #36	@ 0x24
 8025bce:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8025bd0:	4420      	add	r0, r4
 8025bd2:	f004 fb19 	bl	802a208 <atoi>
 8025bd6:	b285      	uxth	r5, r0
 8025bd8:	e7f7      	b.n	8025bca <mg_url_port+0x76>
 8025bda:	bf00      	nop
 8025bdc:	0803b028 	.word	0x0803b028
 8025be0:	0803b030 	.word	0x0803b030
 8025be4:	0803aff8 	.word	0x0803aff8
 8025be8:	0803b000 	.word	0x0803b000
 8025bec:	0803b034 	.word	0x0803b034
 8025bf0:	0803b008 	.word	0x0803b008

08025bf4 <mg_bzero>:
  if (buf != NULL) {
 8025bf4:	4603      	mov	r3, r0
 8025bf6:	b920      	cbnz	r0, 8025c02 <mg_bzero+0xe>
 8025bf8:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8025bfa:	2100      	movs	r1, #0
 8025bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8025c00:	4611      	mov	r1, r2
 8025c02:	1e4a      	subs	r2, r1, #1
 8025c04:	2900      	cmp	r1, #0
 8025c06:	d1f8      	bne.n	8025bfa <mg_bzero+0x6>
}
 8025c08:	4770      	bx	lr

08025c0a <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8025c0a:	b538      	push	{r3, r4, r5, lr}
 8025c0c:	4605      	mov	r5, r0
 8025c0e:	4608      	mov	r0, r1
 8025c10:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8025c12:	68aa      	ldr	r2, [r5, #8]
 8025c14:	428a      	cmp	r2, r1
 8025c16:	d200      	bcs.n	8025c1a <mg_iobuf_del+0x10>
 8025c18:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 8025c1a:	1903      	adds	r3, r0, r4
 8025c1c:	429a      	cmp	r2, r3
 8025c1e:	d200      	bcs.n	8025c22 <mg_iobuf_del+0x18>
 8025c20:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8025c22:	682b      	ldr	r3, [r5, #0]
 8025c24:	b133      	cbz	r3, 8025c34 <mg_iobuf_del+0x2a>
 8025c26:	1901      	adds	r1, r0, r4
 8025c28:	1a12      	subs	r2, r2, r0
 8025c2a:	1b12      	subs	r2, r2, r4
 8025c2c:	4419      	add	r1, r3
 8025c2e:	4418      	add	r0, r3
 8025c30:	f007 f804 	bl	802cc3c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8025c34:	682b      	ldr	r3, [r5, #0]
 8025c36:	b12b      	cbz	r3, 8025c44 <mg_iobuf_del+0x3a>
 8025c38:	68a8      	ldr	r0, [r5, #8]
 8025c3a:	1b00      	subs	r0, r0, r4
 8025c3c:	4621      	mov	r1, r4
 8025c3e:	4418      	add	r0, r3
 8025c40:	f7ff ffd8 	bl	8025bf4 <mg_bzero>
  io->len -= len;
 8025c44:	68ab      	ldr	r3, [r5, #8]
 8025c46:	1b1b      	subs	r3, r3, r4
 8025c48:	60ab      	str	r3, [r5, #8]
}
 8025c4a:	4620      	mov	r0, r4
 8025c4c:	bd38      	pop	{r3, r4, r5, pc}

08025c4e <mg_random>:
void mg_random(void *buf, size_t len) {
 8025c4e:	b538      	push	{r3, r4, r5, lr}
 8025c50:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8025c52:	e006      	b.n	8025c62 <mg_random+0x14>
 8025c54:	f006 fac6 	bl	802c1e4 <rand>
 8025c58:	4623      	mov	r3, r4
 8025c5a:	f803 0b01 	strb.w	r0, [r3], #1
 8025c5e:	461c      	mov	r4, r3
 8025c60:	4629      	mov	r1, r5
 8025c62:	1e4d      	subs	r5, r1, #1
 8025c64:	2900      	cmp	r1, #0
 8025c66:	d1f5      	bne.n	8025c54 <mg_random+0x6>
}
 8025c68:	bd38      	pop	{r3, r4, r5, pc}
	...

08025c6c <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 8025c6c:	b570      	push	{r4, r5, r6, lr}
 8025c6e:	4604      	mov	r4, r0
 8025c70:	460d      	mov	r5, r1
  mg_random(buf, len);
 8025c72:	f7ff ffec 	bl	8025c4e <mg_random>
  for (i = 0; i < len; i++) {
 8025c76:	2100      	movs	r1, #0
 8025c78:	e00a      	b.n	8025c90 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025c7a:	2b33      	cmp	r3, #51	@ 0x33
 8025c7c:	d802      	bhi.n	8025c84 <mg_random_str+0x18>
 8025c7e:	3327      	adds	r3, #39	@ 0x27
 8025c80:	b2db      	uxtb	r3, r3
 8025c82:	e003      	b.n	8025c8c <mg_random_str+0x20>
 8025c84:	3b04      	subs	r3, #4
 8025c86:	b2db      	uxtb	r3, r3
 8025c88:	e000      	b.n	8025c8c <mg_random_str+0x20>
 8025c8a:	2300      	movs	r3, #0
 8025c8c:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 8025c8e:	3101      	adds	r1, #1
 8025c90:	42a9      	cmp	r1, r5
 8025c92:	d213      	bcs.n	8025cbc <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8025c94:	1860      	adds	r0, r4, r1
 8025c96:	5c63      	ldrb	r3, [r4, r1]
 8025c98:	085a      	lsrs	r2, r3, #1
 8025c9a:	4e09      	ldr	r6, [pc, #36]	@ (8025cc0 <mg_random_str+0x54>)
 8025c9c:	fba6 6202 	umull	r6, r2, r6, r2
 8025ca0:	0912      	lsrs	r2, r2, #4
 8025ca2:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8025ca6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8025caa:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025cac:	1e6a      	subs	r2, r5, #1
 8025cae:	428a      	cmp	r2, r1
 8025cb0:	d0eb      	beq.n	8025c8a <mg_random_str+0x1e>
 8025cb2:	2b19      	cmp	r3, #25
 8025cb4:	d8e1      	bhi.n	8025c7a <mg_random_str+0xe>
 8025cb6:	3361      	adds	r3, #97	@ 0x61
 8025cb8:	b2db      	uxtb	r3, r3
 8025cba:	e7e7      	b.n	8025c8c <mg_random_str+0x20>
}
 8025cbc:	4620      	mov	r0, r4
 8025cbe:	bd70      	pop	{r4, r5, r6, pc}
 8025cc0:	84210843 	.word	0x84210843

08025cc4 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 8025cc4:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 8025cc6:	2300      	movs	r3, #0
 8025cc8:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025cca:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025ccc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8025cd0:	021b      	lsls	r3, r3, #8
 8025cd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8025cd6:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8025cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 8025cde:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8025ce2:	b002      	add	sp, #8
 8025ce4:	4770      	bx	lr
	...

08025ce8 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8025ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025cea:	b085      	sub	sp, #20
 8025cec:	466c      	mov	r4, sp
 8025cee:	e884 0003 	stmia.w	r4, {r0, r1}
 8025cf2:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8025cf4:	480b      	ldr	r0, [pc, #44]	@ (8025d24 <mg_atonl+0x3c>)
 8025cf6:	f7ff ffe5 	bl	8025cc4 <mg_ntohl>
 8025cfa:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025cfc:	ae02      	add	r6, sp, #8
 8025cfe:	490a      	ldr	r1, [pc, #40]	@ (8025d28 <mg_atonl+0x40>)
 8025d00:	4630      	mov	r0, r6
 8025d02:	f7fe fc45 	bl	8024590 <mg_str_s>
 8025d06:	e896 000c 	ldmia.w	r6, {r2, r3}
 8025d0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025d0e:	f7fe fd3a 	bl	8024786 <mg_strcasecmp>
 8025d12:	b928      	cbnz	r0, 8025d20 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8025d14:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8025d16:	2300      	movs	r3, #0
 8025d18:	74eb      	strb	r3, [r5, #19]
  return true;
 8025d1a:	2001      	movs	r0, #1
}
 8025d1c:	b005      	add	sp, #20
 8025d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025d20:	2000      	movs	r0, #0
 8025d22:	e7fb      	b.n	8025d1c <mg_atonl+0x34>
 8025d24:	7f000001 	.word	0x7f000001
 8025d28:	0803b03c 	.word	0x0803b03c

08025d2c <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8025d2c:	b510      	push	{r4, lr}
 8025d2e:	b082      	sub	sp, #8
 8025d30:	466b      	mov	r3, sp
 8025d32:	e883 0003 	stmia.w	r3, {r0, r1}
 8025d36:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025d38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025d3c:	f7fb fdcf 	bl	80218de <mg_atone>
 8025d40:	b110      	cbz	r0, 8025d48 <mg_aton+0x1c>
 8025d42:	2001      	movs	r0, #1
}
 8025d44:	b002      	add	sp, #8
 8025d46:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025d48:	4622      	mov	r2, r4
 8025d4a:	ab02      	add	r3, sp, #8
 8025d4c:	e913 0003 	ldmdb	r3, {r0, r1}
 8025d50:	f7ff ffca 	bl	8025ce8 <mg_atonl>
 8025d54:	b108      	cbz	r0, 8025d5a <mg_aton+0x2e>
 8025d56:	2001      	movs	r0, #1
 8025d58:	e7f4      	b.n	8025d44 <mg_aton+0x18>
 8025d5a:	4622      	mov	r2, r4
 8025d5c:	ab02      	add	r3, sp, #8
 8025d5e:	e913 0003 	ldmdb	r3, {r0, r1}
 8025d62:	f7fb fb37 	bl	80213d4 <mg_aton4>
 8025d66:	b108      	cbz	r0, 8025d6c <mg_aton+0x40>
 8025d68:	2001      	movs	r0, #1
 8025d6a:	e7eb      	b.n	8025d44 <mg_aton+0x18>
         mg_aton6(str, addr);
 8025d6c:	4622      	mov	r2, r4
 8025d6e:	ab02      	add	r3, sp, #8
 8025d70:	e913 0003 	ldmdb	r3, {r0, r1}
 8025d74:	f7ff fd34 	bl	80257e0 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025d78:	2800      	cmp	r0, #0
 8025d7a:	d0e3      	beq.n	8025d44 <mg_aton+0x18>
 8025d7c:	2001      	movs	r0, #1
 8025d7e:	e7e1      	b.n	8025d44 <mg_aton+0x18>

08025d80 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8025d80:	b570      	push	{r4, r5, r6, lr}
 8025d82:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8025d84:	6800      	ldr	r0, [r0, #0]
 8025d86:	f7ff ff9d 	bl	8025cc4 <mg_ntohl>
 8025d8a:	4606      	mov	r6, r0
 8025d8c:	6860      	ldr	r0, [r4, #4]
 8025d8e:	f7ff ff99 	bl	8025cc4 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 8025d92:	b12e      	cbz	r6, 8025da0 <gettimestamp+0x20>
 8025d94:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8025d98:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8025d9c:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8025da0:	0ef5      	lsrs	r5, r6, #27
 8025da2:	0174      	lsls	r4, r6, #5
 8025da4:	1ba4      	subs	r4, r4, r6
 8025da6:	f165 0500 	sbc.w	r5, r5, #0
 8025daa:	00ad      	lsls	r5, r5, #2
 8025dac:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 8025db0:	00a4      	lsls	r4, r4, #2
 8025db2:	19a4      	adds	r4, r4, r6
 8025db4:	f145 0500 	adc.w	r5, r5, #0
 8025db8:	00ed      	lsls	r5, r5, #3
 8025dba:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8025dbe:	00e4      	lsls	r4, r4, #3
 8025dc0:	f7ea fbb8 	bl	8010534 <__aeabi_ui2d>
 8025dc4:	a309      	add	r3, pc, #36	@ (adr r3, 8025dec <gettimestamp+0x6c>)
 8025dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dca:	f7ea fd57 	bl	801087c <__aeabi_ddiv>
 8025dce:	2200      	movs	r2, #0
 8025dd0:	4b05      	ldr	r3, [pc, #20]	@ (8025de8 <gettimestamp+0x68>)
 8025dd2:	f7ea fc29 	bl	8010628 <__aeabi_dmul>
 8025dd6:	f7ea ffeb 	bl	8010db0 <__aeabi_d2lz>
 8025dda:	1820      	adds	r0, r4, r0
}
 8025ddc:	eb45 0101 	adc.w	r1, r5, r1
 8025de0:	bd70      	pop	{r4, r5, r6, pc}
 8025de2:	bf00      	nop
 8025de4:	f3af 8000 	nop.w
 8025de8:	408f4000 	.word	0x408f4000
 8025dec:	ffe00000 	.word	0xffe00000
 8025df0:	41efffff 	.word	0x41efffff

08025df4 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8025df4:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8025df6:	2300      	movs	r3, #0
 8025df8:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025dfc:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8025e00:	b2c3      	uxtb	r3, r0
 8025e02:	021b      	lsls	r3, r3, #8
}
 8025e04:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8025e08:	b002      	add	sp, #8
 8025e0a:	4770      	bx	lr

08025e0c <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8025e0c:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8025e0e:	e001      	b.n	8025e14 <csumfin+0x8>
 8025e10:	fa13 f080 	uxtah	r0, r3, r0
 8025e14:	0c03      	lsrs	r3, r0, #16
 8025e16:	d1fb      	bne.n	8025e10 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8025e18:	43c0      	mvns	r0, r0
 8025e1a:	b280      	uxth	r0, r0
 8025e1c:	f7ff ffea 	bl	8025df4 <mg_ntohs>
}
 8025e20:	bd08      	pop	{r3, pc}

08025e22 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8025e22:	b508      	push	{r3, lr}
 8025e24:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8025e26:	4601      	mov	r1, r0
 8025e28:	2000      	movs	r0, #0
 8025e2a:	f7fb fb2b 	bl	8021484 <csumup>
  return csumfin(sum);
 8025e2e:	f7ff ffed 	bl	8025e0c <csumfin>
}
 8025e32:	bd08      	pop	{r3, pc}

08025e34 <tx_ip>:
                        size_t plen) {
 8025e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e36:	4617      	mov	r7, r2
 8025e38:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025e3a:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8025e3c:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8025e3e:	680b      	ldr	r3, [r1, #0]
 8025e40:	f845 3b0e 	str.w	r3, [r5], #14
 8025e44:	888b      	ldrh	r3, [r1, #4]
 8025e46:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8025e48:	6803      	ldr	r3, [r0, #0]
 8025e4a:	f8c4 3006 	str.w	r3, [r4, #6]
 8025e4e:	8883      	ldrh	r3, [r0, #4]
 8025e50:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8025e52:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025e56:	f7ff ffcd 	bl	8025df4 <mg_ntohs>
 8025e5a:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8025e5c:	2100      	movs	r1, #0
 8025e5e:	f8c4 100e 	str.w	r1, [r4, #14]
 8025e62:	6069      	str	r1, [r5, #4]
 8025e64:	60a9      	str	r1, [r5, #8]
 8025e66:	60e9      	str	r1, [r5, #12]
 8025e68:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8025e6a:	2345      	movs	r3, #69	@ 0x45
 8025e6c:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8025e6e:	2340      	movs	r3, #64	@ 0x40
 8025e70:	7523      	strb	r3, [r4, #20]
 8025e72:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8025e74:	9807      	ldr	r0, [sp, #28]
 8025e76:	3014      	adds	r0, #20
 8025e78:	b280      	uxth	r0, r0
 8025e7a:	f7ff ffbb 	bl	8025df4 <mg_ntohs>
 8025e7e:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8025e80:	2340      	movs	r3, #64	@ 0x40
 8025e82:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8025e84:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8025e86:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8025e8a:	9b06      	ldr	r3, [sp, #24]
 8025e8c:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8025e90:	2114      	movs	r1, #20
 8025e92:	4628      	mov	r0, r5
 8025e94:	f7ff ffc5 	bl	8025e22 <ipcsum>
 8025e98:	8320      	strh	r0, [r4, #24]
}
 8025e9a:	4628      	mov	r0, r5
 8025e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025e9e <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025e9e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025ea0:	781b      	ldrb	r3, [r3, #0]
 8025ea2:	2b08      	cmp	r3, #8
 8025ea4:	d000      	beq.n	8025ea8 <rx_icmp+0xa>
 8025ea6:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025eac:	b083      	sub	sp, #12
 8025eae:	4605      	mov	r5, r0
 8025eb0:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025eb2:	69ca      	ldr	r2, [r1, #28]
 8025eb4:	b11a      	cbz	r2, 8025ebe <rx_icmp+0x20>
 8025eb6:	6911      	ldr	r1, [r2, #16]
 8025eb8:	6883      	ldr	r3, [r0, #8]
 8025eba:	4299      	cmp	r1, r3
 8025ebc:	d002      	beq.n	8025ec4 <rx_icmp+0x26>
}
 8025ebe:	b003      	add	sp, #12
 8025ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025ec4:	6986      	ldr	r6, [r0, #24]
 8025ec6:	3e26      	subs	r6, #38	@ 0x26
 8025ec8:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8025eca:	428e      	cmp	r6, r1
 8025ecc:	d300      	bcc.n	8025ed0 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025ece:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8025ed0:	6921      	ldr	r1, [r4, #16]
 8025ed2:	f106 0804 	add.w	r8, r6, #4
 8025ed6:	f8cd 8004 	str.w	r8, [sp, #4]
 8025eda:	68d2      	ldr	r2, [r2, #12]
 8025edc:	9200      	str	r2, [sp, #0]
 8025ede:	2201      	movs	r2, #1
 8025ee0:	3106      	adds	r1, #6
 8025ee2:	4628      	mov	r0, r5
 8025ee4:	f7ff ffa6 	bl	8025e34 <tx_ip>
 8025ee8:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8025eea:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8025eee:	2300      	movs	r3, #0
 8025ef0:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8025ef2:	4632      	mov	r2, r6
 8025ef4:	68a1      	ldr	r1, [r4, #8]
 8025ef6:	3018      	adds	r0, #24
 8025ef8:	f008 f8f6 	bl	802e0e8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8025efc:	4641      	mov	r1, r8
 8025efe:	4648      	mov	r0, r9
 8025f00:	f7ff ff8f 	bl	8025e22 <ipcsum>
 8025f04:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8025f06:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8025f0a:	4628      	mov	r0, r5
 8025f0c:	f7fb facb 	bl	80214a6 <ether_output>
}
 8025f10:	e7d5      	b.n	8025ebe <rx_icmp+0x20>

08025f12 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025f12:	b538      	push	{r3, r4, r5, lr}
 8025f14:	4605      	mov	r5, r0
 8025f16:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8025f18:	6a09      	ldr	r1, [r1, #32]
 8025f1a:	798b      	ldrb	r3, [r1, #6]
 8025f1c:	2b01      	cmp	r3, #1
 8025f1e:	d00e      	beq.n	8025f3e <rx_ip6+0x2c>
 8025f20:	2b3a      	cmp	r3, #58	@ 0x3a
 8025f22:	d00c      	beq.n	8025f3e <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8025f24:	2b11      	cmp	r3, #17
 8025f26:	d110      	bne.n	8025f4a <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8025f28:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8025f2e:	68e3      	ldr	r3, [r4, #12]
 8025f30:	2b07      	cmp	r3, #7
 8025f32:	d90a      	bls.n	8025f4a <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8025f34:	3130      	adds	r1, #48	@ 0x30
 8025f36:	4620      	mov	r0, r4
 8025f38:	f7fe fbe9 	bl	802470e <mkpay>
 8025f3c:	e005      	b.n	8025f4a <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8025f3e:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025f42:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8025f44:	68e3      	ldr	r3, [r4, #12]
 8025f46:	2b03      	cmp	r3, #3
 8025f48:	d800      	bhi.n	8025f4c <rx_ip6+0x3a>
}
 8025f4a:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8025f4c:	312c      	adds	r1, #44	@ 0x2c
 8025f4e:	4620      	mov	r0, r4
 8025f50:	f7fe fbdd 	bl	802470e <mkpay>
    rx_icmp(ifp, pkt);
 8025f54:	4621      	mov	r1, r4
 8025f56:	4628      	mov	r0, r5
 8025f58:	f7ff ffa1 	bl	8025e9e <rx_icmp>
 8025f5c:	e7f5      	b.n	8025f4a <rx_ip6+0x38>

08025f5e <tx_udp>:
                   const void *buf, size_t len) {
 8025f5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f62:	b083      	sub	sp, #12
 8025f64:	4606      	mov	r6, r0
 8025f66:	4698      	mov	r8, r3
 8025f68:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025f6a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8025f6c:	f105 0308 	add.w	r3, r5, #8
 8025f70:	9301      	str	r3, [sp, #4]
 8025f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025f74:	9300      	str	r3, [sp, #0]
 8025f76:	4613      	mov	r3, r2
 8025f78:	2211      	movs	r2, #17
 8025f7a:	f7ff ff5b 	bl	8025e34 <tx_ip>
 8025f7e:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8025f80:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8025f84:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8025f88:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8025f8c:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8025f8e:	f105 0008 	add.w	r0, r5, #8
 8025f92:	b280      	uxth	r0, r0
 8025f94:	f7ff ff2e 	bl	8025df4 <mg_ntohs>
 8025f98:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8025f9a:	2000      	movs	r0, #0
 8025f9c:	76a0      	strb	r0, [r4, #26]
 8025f9e:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8025fa0:	2208      	movs	r2, #8
 8025fa2:	4649      	mov	r1, r9
 8025fa4:	f7fb fa6e 	bl	8021484 <csumup>
  cs = csumup(cs, buf, len);
 8025fa8:	462a      	mov	r2, r5
 8025faa:	4639      	mov	r1, r7
 8025fac:	f7fb fa6a 	bl	8021484 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8025fb0:	2204      	movs	r2, #4
 8025fb2:	f104 010c 	add.w	r1, r4, #12
 8025fb6:	f7fb fa65 	bl	8021484 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8025fba:	2204      	movs	r2, #4
 8025fbc:	f104 0110 	add.w	r1, r4, #16
 8025fc0:	f7fb fa60 	bl	8021484 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8025fc4:	7a63      	ldrb	r3, [r4, #9]
 8025fc6:	442b      	add	r3, r5
 8025fc8:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8025fca:	3008      	adds	r0, #8
 8025fcc:	f7ff ff1e 	bl	8025e0c <csumfin>
 8025fd0:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8025fd2:	462a      	mov	r2, r5
 8025fd4:	4639      	mov	r1, r7
 8025fd6:	f104 001c 	add.w	r0, r4, #28
 8025fda:	f006 fe2f 	bl	802cc3c <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8025fde:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8025fe2:	4630      	mov	r0, r6
 8025fe4:	f7fb fa5f 	bl	80214a6 <ether_output>
}
 8025fe8:	b003      	add	sp, #12
 8025fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025fee <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8025fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ff0:	4605      	mov	r5, r0
 8025ff2:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025ff4:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8025ff6:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8025ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025ffc:	f846 3b0e 	str.w	r3, [r6], #14
 8026000:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8026002:	6803      	ldr	r3, [r0, #0]
 8026004:	f8c4 3006 	str.w	r3, [r4, #6]
 8026008:	8883      	ldrh	r3, [r0, #4]
 802600a:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 802600c:	f640 0006 	movw	r0, #2054	@ 0x806
 8026010:	f7ff fef0 	bl	8025df4 <mg_ntohs>
 8026014:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8026016:	2300      	movs	r3, #0
 8026018:	f8c4 300e 	str.w	r3, [r4, #14]
 802601c:	6073      	str	r3, [r6, #4]
 802601e:	60b3      	str	r3, [r6, #8]
 8026020:	60f3      	str	r3, [r6, #12]
 8026022:	6133      	str	r3, [r6, #16]
 8026024:	6173      	str	r3, [r6, #20]
 8026026:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8026028:	2001      	movs	r0, #1
 802602a:	f7ff fee3 	bl	8025df4 <mg_ntohs>
 802602e:	4606      	mov	r6, r0
 8026030:	81e0      	strh	r0, [r4, #14]
 8026032:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8026036:	f7ff fedd 	bl	8025df4 <mg_ntohs>
 802603a:	8220      	strh	r0, [r4, #16]
 802603c:	2306      	movs	r3, #6
 802603e:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8026040:	2304      	movs	r3, #4
 8026042:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8026044:	82a6      	strh	r6, [r4, #20]
 8026046:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 802604a:	68ab      	ldr	r3, [r5, #8]
 802604c:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 802604e:	682b      	ldr	r3, [r5, #0]
 8026050:	f8c4 3016 	str.w	r3, [r4, #22]
 8026054:	88ab      	ldrh	r3, [r5, #4]
 8026056:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8026058:	212a      	movs	r1, #42	@ 0x2a
 802605a:	4628      	mov	r0, r5
 802605c:	f7fb fa23 	bl	80214a6 <ether_output>
}
 8026060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026062 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8026062:	b510      	push	{r4, lr}
 8026064:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8026066:	4608      	mov	r0, r1
 8026068:	f7ff fd74 	bl	8025b54 <mg_url_port>
 802606c:	f7ff fec2 	bl	8025df4 <mg_ntohs>
 8026070:	8320      	strh	r0, [r4, #24]
}
 8026072:	2001      	movs	r0, #1
 8026074:	bd10      	pop	{r4, pc}
	...

08026078 <tx_dhcp>:
                    bool ciaddr) {
 8026078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802607c:	b0c8      	sub	sp, #288	@ 0x120
 802607e:	4604      	mov	r4, r0
 8026080:	460e      	mov	r6, r1
 8026082:	4615      	mov	r5, r2
 8026084:	4698      	mov	r8, r3
 8026086:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802608a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 802608e:	4917      	ldr	r1, [pc, #92]	@ (80260ec <tx_dhcp+0x74>)
 8026090:	a804      	add	r0, sp, #16
 8026092:	f008 f829 	bl	802e0e8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8026096:	4816      	ldr	r0, [pc, #88]	@ (80260f0 <tx_dhcp+0x78>)
 8026098:	f7ff fe14 	bl	8025cc4 <mg_ntohl>
 802609c:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 802609e:	6820      	ldr	r0, [r4, #0]
 80260a0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80260a2:	88a3      	ldrh	r3, [r4, #4]
 80260a4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 80260a8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80260ac:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 80260ae:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 80260b0:	994e      	ldr	r1, [sp, #312]	@ 0x138
 80260b2:	a840      	add	r0, sp, #256	@ 0x100
 80260b4:	f008 f818 	bl	802e0e8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 80260b8:	b107      	cbz	r7, 80260bc <tx_dhcp+0x44>
 80260ba:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 80260bc:	2044      	movs	r0, #68	@ 0x44
 80260be:	f7ff fe99 	bl	8025df4 <mg_ntohs>
 80260c2:	4607      	mov	r7, r0
 80260c4:	2043      	movs	r0, #67	@ 0x43
 80260c6:	f7ff fe95 	bl	8025df4 <mg_ntohs>
 80260ca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80260ce:	9303      	str	r3, [sp, #12]
 80260d0:	ab04      	add	r3, sp, #16
 80260d2:	9302      	str	r3, [sp, #8]
 80260d4:	9001      	str	r0, [sp, #4]
 80260d6:	f8cd 8000 	str.w	r8, [sp]
 80260da:	463b      	mov	r3, r7
 80260dc:	462a      	mov	r2, r5
 80260de:	4631      	mov	r1, r6
 80260e0:	4620      	mov	r0, r4
 80260e2:	f7ff ff3c 	bl	8025f5e <tx_udp>
}
 80260e6:	b048      	add	sp, #288	@ 0x120
 80260e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260ec:	08035fbc 	.word	0x08035fbc
 80260f0:	63825363 	.word	0x63825363

080260f4 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80260f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80260f8:	b0d0      	sub	sp, #320	@ 0x140
 80260fa:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 80260fc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80260fe:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8026102:	6809      	ldr	r1, [r1, #0]
 8026104:	686a      	ldr	r2, [r5, #4]
 8026106:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 802610a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 802610e:	4543      	cmp	r3, r8
 8026110:	d827      	bhi.n	8026162 <rx_dhcp_server+0x6e>
 8026112:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8026114:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8026118:	495e      	ldr	r1, [pc, #376]	@ (8026294 <rx_dhcp_server+0x1a0>)
 802611a:	a80c      	add	r0, sp, #48	@ 0x30
 802611c:	f007 ffe4 	bl	802e0e8 <memcpy>
  res.yiaddr = ifp->ip;
 8026120:	68b3      	ldr	r3, [r6, #8]
 8026122:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8026124:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8026128:	3301      	adds	r3, #1
 802612a:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 802612e:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8026130:	e002      	b.n	8026138 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8026132:	7863      	ldrb	r3, [r4, #1]
 8026134:	3302      	adds	r3, #2
 8026136:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8026138:	1c63      	adds	r3, r4, #1
 802613a:	4543      	cmp	r3, r8
 802613c:	d20c      	bcs.n	8026158 <rx_dhcp_server+0x64>
 802613e:	7823      	ldrb	r3, [r4, #0]
 8026140:	2bff      	cmp	r3, #255	@ 0xff
 8026142:	d009      	beq.n	8026158 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8026144:	2b35      	cmp	r3, #53	@ 0x35
 8026146:	d1f4      	bne.n	8026132 <rx_dhcp_server+0x3e>
 8026148:	7863      	ldrb	r3, [r4, #1]
 802614a:	2b01      	cmp	r3, #1
 802614c:	d1f1      	bne.n	8026132 <rx_dhcp_server+0x3e>
 802614e:	1ca3      	adds	r3, r4, #2
 8026150:	4543      	cmp	r3, r8
 8026152:	d2ee      	bcs.n	8026132 <rx_dhcp_server+0x3e>
      op = p[2];
 8026154:	78a7      	ldrb	r7, [r4, #2]
 8026156:	e7ec      	b.n	8026132 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8026158:	2f01      	cmp	r7, #1
 802615a:	f000 808a 	beq.w	8026272 <rx_dhcp_server+0x17e>
 802615e:	2f03      	cmp	r7, #3
 8026160:	d002      	beq.n	8026168 <rx_dhcp_server+0x74>
}
 8026162:	b050      	add	sp, #320	@ 0x140
 8026164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8026168:	2205      	movs	r2, #5
    uint8_t opts[] = {
 802616a:	2335      	movs	r3, #53	@ 0x35
 802616c:	f88d 3014 	strb.w	r3, [sp, #20]
 8026170:	2301      	movs	r3, #1
 8026172:	f88d 3015 	strb.w	r3, [sp, #21]
 8026176:	f88d 2016 	strb.w	r2, [sp, #22]
 802617a:	f88d 3017 	strb.w	r3, [sp, #23]
 802617e:	2204      	movs	r2, #4
 8026180:	f88d 2018 	strb.w	r2, [sp, #24]
 8026184:	2300      	movs	r3, #0
 8026186:	f88d 3019 	strb.w	r3, [sp, #25]
 802618a:	f88d 301a 	strb.w	r3, [sp, #26]
 802618e:	f88d 301b 	strb.w	r3, [sp, #27]
 8026192:	f88d 301c 	strb.w	r3, [sp, #28]
 8026196:	2136      	movs	r1, #54	@ 0x36
 8026198:	f88d 101d 	strb.w	r1, [sp, #29]
 802619c:	f88d 201e 	strb.w	r2, [sp, #30]
 80261a0:	f88d 301f 	strb.w	r3, [sp, #31]
 80261a4:	f88d 3020 	strb.w	r3, [sp, #32]
 80261a8:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80261ac:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 80261b0:	230c      	movs	r3, #12
 80261b2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80261b6:	2303      	movs	r3, #3
 80261b8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80261bc:	236d      	movs	r3, #109	@ 0x6d
 80261be:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 80261c2:	2369      	movs	r3, #105	@ 0x69
 80261c4:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 80261c8:	2370      	movs	r3, #112	@ 0x70
 80261ca:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80261ce:	2333      	movs	r3, #51	@ 0x33
 80261d0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80261d4:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 80261d8:	23ff      	movs	r3, #255	@ 0xff
 80261da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80261de:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80261e2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80261e6:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 80261ea:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80261ee:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 80261f2:	f8de 001c 	ldr.w	r0, [lr, #28]
 80261f6:	9013      	str	r0, [sp, #76]	@ 0x4c
 80261f8:	f8be 3020 	ldrh.w	r3, [lr, #32]
 80261fc:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8026200:	68f3      	ldr	r3, [r6, #12]
 8026202:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8026206:	68b3      	ldr	r3, [r6, #8]
 8026208:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 802620c:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8026210:	ac05      	add	r4, sp, #20
 8026212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026218:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802621c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8026220:	f82c 2b02 	strh.w	r2, [ip], #2
 8026224:	0c12      	lsrs	r2, r2, #16
 8026226:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 802622a:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 802622e:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8026230:	f8de 3004 	ldr.w	r3, [lr, #4]
 8026234:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 8026236:	7fb3      	ldrb	r3, [r6, #30]
 8026238:	b9eb      	cbnz	r3, 8026276 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802623a:	692c      	ldr	r4, [r5, #16]
 802623c:	3406      	adds	r4, #6
 802623e:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8026242:	2043      	movs	r0, #67	@ 0x43
 8026244:	f7ff fdd6 	bl	8025df4 <mg_ntohs>
 8026248:	4605      	mov	r5, r0
 802624a:	2f01      	cmp	r7, #1
 802624c:	d01e      	beq.n	802628c <rx_dhcp_server+0x198>
 802624e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026250:	2044      	movs	r0, #68	@ 0x44
 8026252:	f7ff fdcf 	bl	8025df4 <mg_ntohs>
 8026256:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802625a:	9303      	str	r3, [sp, #12]
 802625c:	ab0c      	add	r3, sp, #48	@ 0x30
 802625e:	9302      	str	r3, [sp, #8]
 8026260:	9001      	str	r0, [sp, #4]
 8026262:	9700      	str	r7, [sp, #0]
 8026264:	462b      	mov	r3, r5
 8026266:	4642      	mov	r2, r8
 8026268:	4621      	mov	r1, r4
 802626a:	4630      	mov	r0, r6
 802626c:	f7ff fe77 	bl	8025f5e <tx_udp>
 8026270:	e777      	b.n	8026162 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8026272:	2202      	movs	r2, #2
 8026274:	e779      	b.n	802616a <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 8026276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026278:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 802627a:	692b      	ldr	r3, [r5, #16]
 802627c:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8026280:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8026284:	895b      	ldrh	r3, [r3, #10]
 8026286:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 802628a:	e7d6      	b.n	802623a <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 802628c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026290:	e7de      	b.n	8026250 <rx_dhcp_server+0x15c>
 8026292:	bf00      	nop
 8026294:	080360cc 	.word	0x080360cc

08026298 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8026298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802629c:	b08b      	sub	sp, #44	@ 0x2c
 802629e:	4605      	mov	r5, r0
 80262a0:	9108      	str	r1, [sp, #32]
 80262a2:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80262a4:	8810      	ldrh	r0, [r2, #0]
 80262a6:	f7ff fda5 	bl	8025df4 <mg_ntohs>
 80262aa:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80262ac:	8860      	ldrh	r0, [r4, #2]
 80262ae:	f7ff fda1 	bl	8025df4 <mg_ntohs>
 80262b2:	4606      	mov	r6, r0
 80262b4:	88a0      	ldrh	r0, [r4, #4]
 80262b6:	f7ff fd9d 	bl	8025df4 <mg_ntohs>
 80262ba:	4607      	mov	r7, r0
 80262bc:	88e0      	ldrh	r0, [r4, #6]
 80262be:	f7ff fd99 	bl	8025df4 <mg_ntohs>
 80262c2:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80262c4:	8920      	ldrh	r0, [r4, #8]
 80262c6:	f7ff fd95 	bl	8025df4 <mg_ntohs>
 80262ca:	4681      	mov	r9, r0
 80262cc:	8960      	ldrh	r0, [r4, #10]
 80262ce:	f7ff fd91 	bl	8025df4 <mg_ntohs>
 80262d2:	4682      	mov	sl, r0
 80262d4:	89a0      	ldrh	r0, [r4, #12]
 80262d6:	f7ff fd8d 	bl	8025df4 <mg_ntohs>
 80262da:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 80262dc:	89e0      	ldrh	r0, [r4, #14]
 80262de:	f7ff fd89 	bl	8025df4 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80262e2:	9006      	str	r0, [sp, #24]
 80262e4:	f8cd b014 	str.w	fp, [sp, #20]
 80262e8:	f8cd a010 	str.w	sl, [sp, #16]
 80262ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80262f0:	f8cd 8008 	str.w	r8, [sp, #8]
 80262f4:	9701      	str	r7, [sp, #4]
 80262f6:	9600      	str	r6, [sp, #0]
 80262f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262fa:	4a04      	ldr	r2, [pc, #16]	@ (802630c <print_ip6+0x74>)
 80262fc:	9908      	ldr	r1, [sp, #32]
 80262fe:	4628      	mov	r0, r5
 8026300:	f7fd ff28 	bl	8024154 <mg_xprintf>
}
 8026304:	b00b      	add	sp, #44	@ 0x2c
 8026306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802630a:	bf00      	nop
 802630c:	0803b048 	.word	0x0803b048

08026310 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8026310:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8026312:	6813      	ldr	r3, [r2, #0]
 8026314:	1d1c      	adds	r4, r3, #4
 8026316:	6014      	str	r4, [r2, #0]
 8026318:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802631a:	7cd3      	ldrb	r3, [r2, #19]
 802631c:	b913      	cbnz	r3, 8026324 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802631e:	f7fd ff29 	bl	8024174 <print_ip4>
}
 8026322:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8026324:	f7ff ffb8 	bl	8026298 <print_ip6>
 8026328:	e7fb      	b.n	8026322 <mg_print_ip+0x12>
	...

0802632c <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 802632c:	b570      	push	{r4, r5, r6, lr}
 802632e:	b082      	sub	sp, #8
 8026330:	4604      	mov	r4, r0
 8026332:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8026334:	6813      	ldr	r3, [r2, #0]
 8026336:	1d19      	adds	r1, r3, #4
 8026338:	6011      	str	r1, [r2, #0]
 802633a:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 802633c:	8a30      	ldrh	r0, [r6, #16]
 802633e:	f7ff fd59 	bl	8025df4 <mg_ntohs>
 8026342:	9001      	str	r0, [sp, #4]
 8026344:	9600      	str	r6, [sp, #0]
 8026346:	4b04      	ldr	r3, [pc, #16]	@ (8026358 <mg_print_ip_port+0x2c>)
 8026348:	4a04      	ldr	r2, [pc, #16]	@ (802635c <mg_print_ip_port+0x30>)
 802634a:	4629      	mov	r1, r5
 802634c:	4620      	mov	r0, r4
 802634e:	f7fd ff01 	bl	8024154 <mg_xprintf>
}
 8026352:	b002      	add	sp, #8
 8026354:	bd70      	pop	{r4, r5, r6, pc}
 8026356:	bf00      	nop
 8026358:	08026311 	.word	0x08026311
 802635c:	0803b064 	.word	0x0803b064

08026360 <mg_crc32>:
  crc = ~crc;
 8026360:	43c0      	mvns	r0, r0
  while (len--) {
 8026362:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8026366:	b1e2      	cbz	r2, 80263a2 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8026368:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 802636a:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 802636e:	ea83 0200 	eor.w	r2, r3, r0
 8026372:	f002 020f 	and.w	r2, r2, #15
 8026376:	4c0c      	ldr	r4, [pc, #48]	@ (80263a8 <mg_crc32+0x48>)
 8026378:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802637c:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8026380:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8026384:	f003 030f 	and.w	r3, r3, #15
 8026388:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802638c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8026390:	4662      	mov	r2, ip
 8026392:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8026396:	2a00      	cmp	r2, #0
 8026398:	d1e7      	bne.n	802636a <mg_crc32+0xa>
}
 802639a:	43c0      	mvns	r0, r0
 802639c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263a0:	4770      	bx	lr
 80263a2:	43c0      	mvns	r0, r0
 80263a4:	4770      	bx	lr
 80263a6:	bf00      	nop
 80263a8:	0803b8f8 	.word	0x0803b8f8

080263ac <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 80263ac:	b530      	push	{r4, r5, lr}
 80263ae:	b089      	sub	sp, #36	@ 0x24
 80263b0:	ab02      	add	r3, sp, #8
 80263b2:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 80263b6:	bb19      	cbnz	r1, 8026400 <mg_check_ip_acl+0x54>
 80263b8:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 80263ba:	7cd3      	ldrb	r3, [r2, #19]
 80263bc:	bb73      	cbnz	r3, 802641c <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 80263be:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 80263c0:	ab02      	add	r3, sp, #8
 80263c2:	222c      	movs	r2, #44	@ 0x2c
 80263c4:	9200      	str	r2, [sp, #0]
 80263c6:	aa06      	add	r2, sp, #24
 80263c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80263cc:	f7fe fb9d 	bl	8024b0a <mg_span>
 80263d0:	b1f0      	cbz	r0, 8026410 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 80263d2:	9806      	ldr	r0, [sp, #24]
 80263d4:	7803      	ldrb	r3, [r0, #0]
 80263d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80263d8:	d001      	beq.n	80263de <mg_check_ip_acl+0x32>
 80263da:	2b2d      	cmp	r3, #45	@ 0x2d
 80263dc:	d112      	bne.n	8026404 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 80263de:	aa05      	add	r2, sp, #20
 80263e0:	a904      	add	r1, sp, #16
 80263e2:	3001      	adds	r0, #1
 80263e4:	f7fc fb82 	bl	8022aec <parse_net>
 80263e8:	b178      	cbz	r0, 802640a <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 80263ea:	4620      	mov	r0, r4
 80263ec:	f7ff fc6a 	bl	8025cc4 <mg_ntohl>
 80263f0:	9b05      	ldr	r3, [sp, #20]
 80263f2:	4018      	ands	r0, r3
 80263f4:	9b04      	ldr	r3, [sp, #16]
 80263f6:	4298      	cmp	r0, r3
 80263f8:	d1e2      	bne.n	80263c0 <mg_check_ip_acl+0x14>
 80263fa:	9b06      	ldr	r3, [sp, #24]
 80263fc:	781d      	ldrb	r5, [r3, #0]
 80263fe:	e7df      	b.n	80263c0 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026400:	252d      	movs	r5, #45	@ 0x2d
 8026402:	e7da      	b.n	80263ba <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026408:	e006      	b.n	8026418 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802640a:	f06f 0001 	mvn.w	r0, #1
 802640e:	e003      	b.n	8026418 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8026410:	2d2b      	cmp	r5, #43	@ 0x2b
 8026412:	bf14      	ite	ne
 8026414:	2000      	movne	r0, #0
 8026416:	2001      	moveq	r0, #1
}
 8026418:	b009      	add	sp, #36	@ 0x24
 802641a:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 802641c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026420:	e7fa      	b.n	8026418 <mg_check_ip_acl+0x6c>

08026422 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8026422:	b082      	sub	sp, #8
 8026424:	ab02      	add	r3, sp, #8
 8026426:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802642a:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802642c:	7803      	ldrb	r3, [r0, #0]
 802642e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026430:	d106      	bne.n	8026440 <mg_path_is_sane+0x1e>
 8026432:	7843      	ldrb	r3, [r0, #1]
 8026434:	2b2e      	cmp	r3, #46	@ 0x2e
 8026436:	d103      	bne.n	8026440 <mg_path_is_sane+0x1e>
 8026438:	2000      	movs	r0, #0
 802643a:	e015      	b.n	8026468 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 802643c:	3201      	adds	r2, #1
 802643e:	3901      	subs	r1, #1
 8026440:	7813      	ldrb	r3, [r2, #0]
 8026442:	b183      	cbz	r3, 8026466 <mg_path_is_sane+0x44>
 8026444:	b169      	cbz	r1, 8026462 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8026446:	2b2f      	cmp	r3, #47	@ 0x2f
 8026448:	d001      	beq.n	802644e <mg_path_is_sane+0x2c>
 802644a:	2b5c      	cmp	r3, #92	@ 0x5c
 802644c:	d1f6      	bne.n	802643c <mg_path_is_sane+0x1a>
 802644e:	2901      	cmp	r1, #1
 8026450:	d9f4      	bls.n	802643c <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8026452:	7853      	ldrb	r3, [r2, #1]
 8026454:	2b2e      	cmp	r3, #46	@ 0x2e
 8026456:	d1f1      	bne.n	802643c <mg_path_is_sane+0x1a>
 8026458:	7893      	ldrb	r3, [r2, #2]
 802645a:	2b2e      	cmp	r3, #46	@ 0x2e
 802645c:	d1ee      	bne.n	802643c <mg_path_is_sane+0x1a>
 802645e:	2000      	movs	r0, #0
 8026460:	e002      	b.n	8026468 <mg_path_is_sane+0x46>
  return true;
 8026462:	2001      	movs	r0, #1
 8026464:	e000      	b.n	8026468 <mg_path_is_sane+0x46>
 8026466:	2001      	movs	r0, #1
}
 8026468:	b002      	add	sp, #8
 802646a:	4770      	bx	lr

0802646c <mg_millis>:
uint64_t mg_millis(void) {
 802646c:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 802646e:	f7f3 fc09 	bl	8019c84 <xTaskGetTickCount>
}
 8026472:	2100      	movs	r1, #0
 8026474:	bd08      	pop	{r3, pc}
	...

08026478 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8026478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802647c:	b092      	sub	sp, #72	@ 0x48
 802647e:	4605      	mov	r5, r0
 8026480:	460c      	mov	r4, r1
 8026482:	4616      	mov	r6, r2
 8026484:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8026486:	212f      	movs	r1, #47	@ 0x2f
 8026488:	4620      	mov	r0, r4
 802648a:	f006 fc4b 	bl	802cd24 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802648e:	4680      	mov	r8, r0
 8026490:	b1a8      	cbz	r0, 80264be <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8026492:	f7ff ffeb 	bl	802646c <mg_millis>
 8026496:	f1b8 0f00 	cmp.w	r8, #0
 802649a:	d001      	beq.n	80264a0 <mg_log_prefix+0x28>
 802649c:	f108 0401 	add.w	r4, r8, #1
 80264a0:	9705      	str	r7, [sp, #20]
 80264a2:	9604      	str	r6, [sp, #16]
 80264a4:	9403      	str	r4, [sp, #12]
 80264a6:	9502      	str	r5, [sp, #8]
 80264a8:	9000      	str	r0, [sp, #0]
 80264aa:	9101      	str	r1, [sp, #4]
 80264ac:	4a0f      	ldr	r2, [pc, #60]	@ (80264ec <mg_log_prefix+0x74>)
 80264ae:	2129      	movs	r1, #41	@ 0x29
 80264b0:	a807      	add	r0, sp, #28
 80264b2:	f7fd f9e5 	bl	8023880 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80264b6:	2827      	cmp	r0, #39	@ 0x27
 80264b8:	d90e      	bls.n	80264d8 <mg_log_prefix+0x60>
 80264ba:	2027      	movs	r0, #39	@ 0x27
 80264bc:	e00c      	b.n	80264d8 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 80264be:	215c      	movs	r1, #92	@ 0x5c
 80264c0:	4620      	mov	r0, r4
 80264c2:	f006 fc2f 	bl	802cd24 <strrchr>
 80264c6:	4680      	mov	r8, r0
 80264c8:	e7e3      	b.n	8026492 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 80264ca:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 80264ce:	446b      	add	r3, sp
 80264d0:	2220      	movs	r2, #32
 80264d2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80264d6:	3001      	adds	r0, #1
 80264d8:	2828      	cmp	r0, #40	@ 0x28
 80264da:	d9f6      	bls.n	80264ca <mg_log_prefix+0x52>
  logs(buf, n - 1);
 80264dc:	1e41      	subs	r1, r0, #1
 80264de:	a807      	add	r0, sp, #28
 80264e0:	f7fa fb34 	bl	8020b4c <logs>
}
 80264e4:	b012      	add	sp, #72	@ 0x48
 80264e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264ea:	bf00      	nop
 80264ec:	0803b06c 	.word	0x0803b06c

080264f0 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80264f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80264f4:	b084      	sub	sp, #16
 80264f6:	4605      	mov	r5, r0
 80264f8:	460e      	mov	r6, r1
 80264fa:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 80264fc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8026500:	2100      	movs	r1, #0
 8026502:	4640      	mov	r0, r8
 8026504:	f006 fbb4 	bl	802cc70 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026508:	2e0b      	cmp	r6, #11
 802650a:	f240 808b 	bls.w	8026624 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802650e:	88a8      	ldrh	r0, [r5, #4]
 8026510:	f7ff fc70 	bl	8025df4 <mg_ntohs>
 8026514:	2801      	cmp	r0, #1
 8026516:	f200 8089 	bhi.w	802662c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802651a:	88e8      	ldrh	r0, [r5, #6]
 802651c:	f7ff fc6a 	bl	8025df4 <mg_ntohs>
 8026520:	4604      	mov	r4, r0
 8026522:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8026524:	280a      	cmp	r0, #10
 8026526:	d905      	bls.n	8026534 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026528:	4b43      	ldr	r3, [pc, #268]	@ (8026638 <mg_dns_parse+0x148>)
 802652a:	681b      	ldr	r3, [r3, #0]
 802652c:	2b02      	cmp	r3, #2
 802652e:	dc1a      	bgt.n	8026566 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8026530:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 8026534:	8828      	ldrh	r0, [r5, #0]
 8026536:	f7ff fc5d 	bl	8025df4 <mg_ntohs>
 802653a:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 802653e:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8026540:	2700      	movs	r7, #0
 8026542:	88a8      	ldrh	r0, [r5, #4]
 8026544:	f7ff fc56 	bl	8025df4 <mg_ntohs>
 8026548:	42b8      	cmp	r0, r7
 802654a:	d91a      	bls.n	8026582 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 802654c:	ab02      	add	r3, sp, #8
 802654e:	9300      	str	r3, [sp, #0]
 8026550:	2301      	movs	r3, #1
 8026552:	4622      	mov	r2, r4
 8026554:	4631      	mov	r1, r6
 8026556:	4628      	mov	r0, r5
 8026558:	f7fc fba4 	bl	8022ca4 <mg_dns_parse_rr>
 802655c:	2800      	cmp	r0, #0
 802655e:	d067      	beq.n	8026630 <mg_dns_parse+0x140>
    ofs += n;
 8026560:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8026562:	3701      	adds	r7, #1
 8026564:	e7ed      	b.n	8026542 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026566:	4b35      	ldr	r3, [pc, #212]	@ (802663c <mg_dns_parse+0x14c>)
 8026568:	f240 4293 	movw	r2, #1171	@ 0x493
 802656c:	4934      	ldr	r1, [pc, #208]	@ (8026640 <mg_dns_parse+0x150>)
 802656e:	2003      	movs	r0, #3
 8026570:	f7ff ff82 	bl	8026478 <mg_log_prefix>
 8026574:	4621      	mov	r1, r4
 8026576:	4833      	ldr	r0, [pc, #204]	@ (8026644 <mg_dns_parse+0x154>)
 8026578:	f7fd fe2c 	bl	80241d4 <mg_log>
    num_answers = 10;  // Sanity cap
 802657c:	f04f 090a 	mov.w	r9, #10
 8026580:	e7d8      	b.n	8026534 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8026582:	2700      	movs	r7, #0
 8026584:	e013      	b.n	80265ae <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8026586:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802658a:	2a01      	cmp	r2, #1
 802658c:	d12a      	bne.n	80265e4 <mg_dns_parse+0xf4>
 802658e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8026592:	2a01      	cmp	r2, #1
 8026594:	d126      	bne.n	80265e4 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8026596:	2300      	movs	r3, #0
 8026598:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802659c:	3c04      	subs	r4, #4
 802659e:	592b      	ldr	r3, [r5, r4]
 80265a0:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 80265a4:	2001      	movs	r0, #1
 80265a6:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 80265aa:	e03c      	b.n	8026626 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 80265ac:	3701      	adds	r7, #1
 80265ae:	454f      	cmp	r7, r9
 80265b0:	d236      	bcs.n	8026620 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80265b2:	ab02      	add	r3, sp, #8
 80265b4:	9300      	str	r3, [sp, #0]
 80265b6:	2300      	movs	r3, #0
 80265b8:	4622      	mov	r2, r4
 80265ba:	4631      	mov	r1, r6
 80265bc:	4628      	mov	r0, r5
 80265be:	f7fc fb71 	bl	8022ca4 <mg_dns_parse_rr>
 80265c2:	4682      	mov	sl, r0
 80265c4:	b3b0      	cbz	r0, 8026634 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80265c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80265ca:	9300      	str	r3, [sp, #0]
 80265cc:	f108 0318 	add.w	r3, r8, #24
 80265d0:	4622      	mov	r2, r4
 80265d2:	4631      	mov	r1, r6
 80265d4:	4628      	mov	r0, r5
 80265d6:	f7fb fa54 	bl	8021a82 <mg_dns_parse_name>
    ofs += n;
 80265da:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80265dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80265e0:	2b04      	cmp	r3, #4
 80265e2:	d0d0      	beq.n	8026586 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80265e4:	2b10      	cmp	r3, #16
 80265e6:	d1e1      	bne.n	80265ac <mg_dns_parse+0xbc>
 80265e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80265ec:	2b1c      	cmp	r3, #28
 80265ee:	d1dd      	bne.n	80265ac <mg_dns_parse+0xbc>
 80265f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80265f4:	2b01      	cmp	r3, #1
 80265f6:	d1d9      	bne.n	80265ac <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 80265f8:	2001      	movs	r0, #1
 80265fa:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 80265fe:	3c10      	subs	r4, #16
 8026600:	192b      	adds	r3, r5, r4
 8026602:	592c      	ldr	r4, [r5, r4]
 8026604:	6859      	ldr	r1, [r3, #4]
 8026606:	689a      	ldr	r2, [r3, #8]
 8026608:	68db      	ldr	r3, [r3, #12]
 802660a:	f8c8 4004 	str.w	r4, [r8, #4]
 802660e:	f8c8 1008 	str.w	r1, [r8, #8]
 8026612:	f8c8 200c 	str.w	r2, [r8, #12]
 8026616:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802661a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802661e:	e002      	b.n	8026626 <mg_dns_parse+0x136>
  return true;
 8026620:	2001      	movs	r0, #1
 8026622:	e000      	b.n	8026626 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026624:	2000      	movs	r0, #0
}
 8026626:	b004      	add	sp, #16
 8026628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802662c:	2000      	movs	r0, #0
 802662e:	e7fa      	b.n	8026626 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8026630:	2000      	movs	r0, #0
 8026632:	e7f8      	b.n	8026626 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026634:	2000      	movs	r0, #0
 8026636:	e7f6      	b.n	8026626 <mg_dns_parse+0x136>
 8026638:	2000012c 	.word	0x2000012c
 802663c:	0803baf8 	.word	0x0803baf8
 8026640:	0803b080 	.word	0x0803b080
 8026644:	0803b0b0 	.word	0x0803b0b0

08026648 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8026648:	b40e      	push	{r1, r2, r3}
 802664a:	b510      	push	{r4, lr}
 802664c:	b093      	sub	sp, #76	@ 0x4c
 802664e:	4604      	mov	r4, r0
 8026650:	ab15      	add	r3, sp, #84	@ 0x54
 8026652:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8026656:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8026658:	ab01      	add	r3, sp, #4
 802665a:	2140      	movs	r1, #64	@ 0x40
 802665c:	a802      	add	r0, sp, #8
 802665e:	f7fd fdf7 	bl	8024250 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8026662:	4b11      	ldr	r3, [pc, #68]	@ (80266a8 <mg_error+0x60>)
 8026664:	681b      	ldr	r3, [r3, #0]
 8026666:	2b00      	cmp	r3, #0
 8026668:	dc0f      	bgt.n	802668a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 802666a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802666e:	f043 0320 	orr.w	r3, r3, #32
 8026672:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8026676:	aa02      	add	r2, sp, #8
 8026678:	2100      	movs	r1, #0
 802667a:	4620      	mov	r0, r4
 802667c:	f7fc fb61 	bl	8022d42 <mg_call>
}
 8026680:	b013      	add	sp, #76	@ 0x4c
 8026682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026686:	b003      	add	sp, #12
 8026688:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 802668a:	4b08      	ldr	r3, [pc, #32]	@ (80266ac <mg_error+0x64>)
 802668c:	f240 5253 	movw	r2, #1363	@ 0x553
 8026690:	4907      	ldr	r1, [pc, #28]	@ (80266b0 <mg_error+0x68>)
 8026692:	2001      	movs	r0, #1
 8026694:	f7ff fef0 	bl	8026478 <mg_log_prefix>
 8026698:	ab02      	add	r3, sp, #8
 802669a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802669c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802669e:	4805      	ldr	r0, [pc, #20]	@ (80266b4 <mg_error+0x6c>)
 80266a0:	f7fd fd98 	bl	80241d4 <mg_log>
 80266a4:	e7e1      	b.n	802666a <mg_error+0x22>
 80266a6:	bf00      	nop
 80266a8:	2000012c 	.word	0x2000012c
 80266ac:	0803bad4 	.word	0x0803bad4
 80266b0:	0803b080 	.word	0x0803b080
 80266b4:	0803b0dc 	.word	0x0803b0dc

080266b8 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 80266b8:	b570      	push	{r4, r5, r6, lr}
 80266ba:	b082      	sub	sp, #8
 80266bc:	4606      	mov	r6, r0
 80266be:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 80266c0:	6809      	ldr	r1, [r1, #0]
 80266c2:	68a5      	ldr	r5, [r4, #8]
 80266c4:	6862      	ldr	r2, [r4, #4]
 80266c6:	1b52      	subs	r2, r2, r5
 80266c8:	4429      	add	r1, r5
 80266ca:	f7ff f9cb 	bl	8025a64 <mg_tls_recv>
 80266ce:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 80266d0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80266d4:	d003      	beq.n	80266de <handle_tls_recv+0x26>
  } else if (n > 0) {
 80266d6:	2800      	cmp	r0, #0
 80266d8:	dc06      	bgt.n	80266e8 <handle_tls_recv+0x30>
}
 80266da:	b002      	add	sp, #8
 80266dc:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 80266de:	4906      	ldr	r1, [pc, #24]	@ (80266f8 <handle_tls_recv+0x40>)
 80266e0:	4630      	mov	r0, r6
 80266e2:	f7ff ffb1 	bl	8026648 <mg_error>
 80266e6:	e7f8      	b.n	80266da <handle_tls_recv+0x22>
    io->len += (size_t) n;
 80266e8:	4405      	add	r5, r0
 80266ea:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 80266ec:	aa01      	add	r2, sp, #4
 80266ee:	2107      	movs	r1, #7
 80266f0:	4630      	mov	r0, r6
 80266f2:	f7fc fb26 	bl	8022d42 <mg_call>
}
 80266f6:	e7f0      	b.n	80266da <handle_tls_recv+0x22>
 80266f8:	0803b0e8 	.word	0x0803b0e8

080266fc <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 80266fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026700:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8026704:	4607      	mov	r7, r0
 8026706:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8026708:	2907      	cmp	r1, #7
 802670a:	f000 80e3 	beq.w	80268d4 <http_cb+0x1d8>
 802670e:	2909      	cmp	r1, #9
 8026710:	f000 814a 	beq.w	80269a8 <http_cb+0x2ac>
 8026714:	2902      	cmp	r1, #2
 8026716:	f040 80d9 	bne.w	80268cc <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 802671a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 802671e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8026722:	f023 030b 	bic.w	r3, r3, #11
 8026726:	04db      	lsls	r3, r3, #19
 8026728:	0cdb      	lsrs	r3, r3, #19
 802672a:	2b04      	cmp	r3, #4
 802672c:	f040 80ce 	bne.w	80268cc <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8026730:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026732:	2b00      	cmp	r3, #0
 8026734:	f000 80ca 	beq.w	80268cc <http_cb+0x1d0>
 8026738:	f04f 0900 	mov.w	r9, #0
 802673c:	e0cc      	b.n	80268d8 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802673e:	4b9f      	ldr	r3, [pc, #636]	@ (80269bc <http_cb+0x2c0>)
 8026740:	681b      	ldr	r3, [r3, #0]
 8026742:	2b00      	cmp	r3, #0
 8026744:	dc11      	bgt.n	802676a <http_cb+0x6e>
        c->is_draining = 1;
 8026746:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802674a:	f043 0310 	orr.w	r3, r3, #16
 802674e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8026752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026754:	eba3 0109 	sub.w	r1, r3, r9
 8026758:	2910      	cmp	r1, #16
 802675a:	bf28      	it	cs
 802675c:	2110      	movcs	r1, #16
 802675e:	4620      	mov	r0, r4
 8026760:	f7fc fe9a 	bl	8023498 <mg_hexdump>
        c->recv.len = 0;
 8026764:	2300      	movs	r3, #0
 8026766:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8026768:	e0b0      	b.n	80268cc <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802676a:	4b95      	ldr	r3, [pc, #596]	@ (80269c0 <http_cb+0x2c4>)
 802676c:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8026770:	4994      	ldr	r1, [pc, #592]	@ (80269c4 <http_cb+0x2c8>)
 8026772:	2001      	movs	r0, #1
 8026774:	f7ff fe80 	bl	8026478 <mg_log_prefix>
 8026778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802677a:	4893      	ldr	r0, [pc, #588]	@ (80269c8 <http_cb+0x2cc>)
 802677c:	f7fd fd2a 	bl	80241d4 <mg_log>
 8026780:	e7e1      	b.n	8026746 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8026782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026784:	eba3 0309 	sub.w	r3, r3, r9
 8026788:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 802678a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 802678c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 802678e:	1a52      	subs	r2, r2, r1
 8026790:	1a9b      	subs	r3, r3, r2
 8026792:	9383      	str	r3, [sp, #524]	@ 0x20c
 8026794:	e0bf      	b.n	8026916 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8026796:	ad88      	add	r5, sp, #544	@ 0x220
 8026798:	498c      	ldr	r1, [pc, #560]	@ (80269cc <http_cb+0x2d0>)
 802679a:	4628      	mov	r0, r5
 802679c:	f7fd fef8 	bl	8024590 <mg_str_s>
 80267a0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80267a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80267a8:	f7fd ffed 	bl	8024786 <mg_strcasecmp>
 80267ac:	4604      	mov	r4, r0
 80267ae:	b950      	cbnz	r0, 80267c6 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 80267b0:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 80267b2:	eb08 0309 	add.w	r3, r8, r9
 80267b6:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 80267b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80267ba:	eba3 0309 	sub.w	r3, r3, r9
 80267be:	eba3 0b08 	sub.w	fp, r3, r8
 80267c2:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80267c4:	e04a      	b.n	802685c <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 80267c6:	4982      	ldr	r1, [pc, #520]	@ (80269d0 <http_cb+0x2d4>)
 80267c8:	4638      	mov	r0, r7
 80267ca:	f7ff ff3d 	bl	8026648 <mg_error>
          return;
 80267ce:	e07d      	b.n	80268cc <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80267d0:	2205      	movs	r2, #5
 80267d2:	4980      	ldr	r1, [pc, #512]	@ (80269d4 <http_cb+0x2d8>)
 80267d4:	9802      	ldr	r0, [sp, #8]
 80267d6:	f7f9 fc03 	bl	801ffe0 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80267da:	2800      	cmp	r0, #0
 80267dc:	d032      	beq.n	8026844 <http_cb+0x148>
 80267de:	ac8a      	add	r4, sp, #552	@ 0x228
 80267e0:	497d      	ldr	r1, [pc, #500]	@ (80269d8 <http_cb+0x2dc>)
 80267e2:	4620      	mov	r0, r4
 80267e4:	f7fd fed4 	bl	8024590 <mg_str_s>
 80267e8:	a902      	add	r1, sp, #8
 80267ea:	e894 000c 	ldmia.w	r4, {r2, r3}
 80267ee:	c903      	ldmia	r1, {r0, r1}
 80267f0:	f7fd ffc9 	bl	8024786 <mg_strcasecmp>
 80267f4:	b9c0      	cbnz	r0, 8026828 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 80267f6:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 80267f8:	4a78      	ldr	r2, [pc, #480]	@ (80269dc <http_cb+0x2e0>)
 80267fa:	4613      	mov	r3, r2
 80267fc:	f240 119b 	movw	r1, #411	@ 0x19b
 8026800:	4638      	mov	r0, r7
 8026802:	f7fd fd3b 	bl	802427c <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8026806:	4b6d      	ldr	r3, [pc, #436]	@ (80269bc <http_cb+0x2c0>)
 8026808:	681b      	ldr	r3, [r3, #0]
 802680a:	2b00      	cmp	r3, #0
 802680c:	f340 8092 	ble.w	8026934 <http_cb+0x238>
 8026810:	4b6b      	ldr	r3, [pc, #428]	@ (80269c0 <http_cb+0x2c4>)
 8026812:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8026816:	496b      	ldr	r1, [pc, #428]	@ (80269c4 <http_cb+0x2c8>)
 8026818:	2001      	movs	r0, #1
 802681a:	f7ff fe2d 	bl	8026478 <mg_log_prefix>
 802681e:	4970      	ldr	r1, [pc, #448]	@ (80269e0 <http_cb+0x2e4>)
 8026820:	4870      	ldr	r0, [pc, #448]	@ (80269e4 <http_cb+0x2e8>)
 8026822:	f7fd fcd7 	bl	80241d4 <mg_log>
      if (is_chunked) {
 8026826:	e085      	b.n	8026934 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8026828:	ac8c      	add	r4, sp, #560	@ 0x230
 802682a:	496f      	ldr	r1, [pc, #444]	@ (80269e8 <http_cb+0x2ec>)
 802682c:	4620      	mov	r0, r4
 802682e:	f7fd feaf 	bl	8024590 <mg_str_s>
 8026832:	a902      	add	r1, sp, #8
 8026834:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026838:	c903      	ldmia	r1, {r0, r1}
 802683a:	f7fd ffa4 	bl	8024786 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802683e:	2800      	cmp	r0, #0
 8026840:	d178      	bne.n	8026934 <http_cb+0x238>
 8026842:	e7d8      	b.n	80267f6 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8026844:	a802      	add	r0, sp, #8
 8026846:	f7fc fb6f 	bl	8022f28 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 802684a:	28c7      	cmp	r0, #199	@ 0xc7
 802684c:	dd72      	ble.n	8026934 <http_cb+0x238>
 802684e:	28cc      	cmp	r0, #204	@ 0xcc
 8026850:	d070      	beq.n	8026934 <http_cb+0x238>
 8026852:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8026856:	d1cf      	bne.n	80267f8 <http_cb+0xfc>
 8026858:	e06c      	b.n	8026934 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 802685a:	4406      	add	r6, r0
 802685c:	ab01      	add	r3, sp, #4
 802685e:	466a      	mov	r2, sp
 8026860:	ebab 0106 	sub.w	r1, fp, r6
 8026864:	19a8      	adds	r0, r5, r6
 8026866:	f7fe fecd 	bl	8025604 <skip_chunk>
 802686a:	2800      	cmp	r0, #0
 802686c:	dd02      	ble.n	8026874 <http_cb+0x178>
 802686e:	9b01      	ldr	r3, [sp, #4]
 8026870:	2b00      	cmp	r3, #0
 8026872:	d1f2      	bne.n	802685a <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8026874:	b338      	cbz	r0, 80268c6 <http_cb+0x1ca>
        if (cl < 0) {
 8026876:	2800      	cmp	r0, #0
 8026878:	db21      	blt.n	80268be <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 802687a:	2300      	movs	r3, #0
 802687c:	9383      	str	r3, [sp, #524]	@ 0x20c
 802687e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8026882:	ab01      	add	r3, sp, #4
 8026884:	466a      	mov	r2, sp
 8026886:	ebab 0104 	sub.w	r1, fp, r4
 802688a:	1928      	adds	r0, r5, r4
 802688c:	f7fe feba 	bl	8025604 <skip_chunk>
 8026890:	1e06      	subs	r6, r0, #0
 8026892:	dd11      	ble.n	80268b8 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8026894:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8026896:	9900      	ldr	r1, [sp, #0]
 8026898:	4421      	add	r1, r4
 802689a:	9a01      	ldr	r2, [sp, #4]
 802689c:	4429      	add	r1, r5
 802689e:	4428      	add	r0, r5
 80268a0:	f006 f9cc 	bl	802cc3c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 80268a4:	4434      	add	r4, r6
 80268a6:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80268a8:	9b01      	ldr	r3, [sp, #4]
 80268aa:	441a      	add	r2, r3
 80268ac:	9283      	str	r2, [sp, #524]	@ 0x20c
 80268ae:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 80268b0:	441a      	add	r2, r3
 80268b2:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 80268b4:	2b00      	cmp	r3, #0
 80268b6:	d1e4      	bne.n	8026882 <http_cb+0x186>
        ofs += (size_t) (n + o);
 80268b8:	4444      	add	r4, r8
 80268ba:	44a1      	add	r9, r4
 80268bc:	e044      	b.n	8026948 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 80268be:	494b      	ldr	r1, [pc, #300]	@ (80269ec <http_cb+0x2f0>)
 80268c0:	4638      	mov	r0, r7
 80268c2:	f7ff fec1 	bl	8026648 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80268c6:	f1b9 0f00 	cmp.w	r9, #0
 80268ca:	d170      	bne.n	80269ae <http_cb+0x2b2>
}
 80268cc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 80268d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268d4:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80268d8:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 80268dc:	2b00      	cmp	r3, #0
 80268de:	dbf2      	blt.n	80268c6 <http_cb+0x1ca>
 80268e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80268e2:	4549      	cmp	r1, r9
 80268e4:	d9ef      	bls.n	80268c6 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 80268e6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80268e8:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80268ea:	aa02      	add	r2, sp, #8
 80268ec:	eba1 0109 	sub.w	r1, r1, r9
 80268f0:	4620      	mov	r0, r4
 80268f2:	f7fd ff77 	bl	80247e4 <mg_http_parse>
      if (n < 0) {
 80268f6:	f1b0 0800 	subs.w	r8, r0, #0
 80268fa:	f6ff af20 	blt.w	802673e <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 80268fe:	f1b8 0f00 	cmp.w	r8, #0
 8026902:	d0e0      	beq.n	80268c6 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8026904:	aa02      	add	r2, sp, #8
 8026906:	210a      	movs	r1, #10
 8026908:	4638      	mov	r0, r7
 802690a:	f7fc fa1a 	bl	8022d42 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802690e:	f1ba 0f09 	cmp.w	sl, #9
 8026912:	f43f af36 	beq.w	8026782 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8026916:	4936      	ldr	r1, [pc, #216]	@ (80269f0 <http_cb+0x2f4>)
 8026918:	a802      	add	r0, sp, #8
 802691a:	f7fc fadb 	bl	8022ed4 <mg_http_get_header>
 802691e:	4604      	mov	r4, r0
 8026920:	2800      	cmp	r0, #0
 8026922:	f47f af38 	bne.w	8026796 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8026926:	4933      	ldr	r1, [pc, #204]	@ (80269f4 <http_cb+0x2f8>)
 8026928:	a802      	add	r0, sp, #8
 802692a:	f7fc fad3 	bl	8022ed4 <mg_http_get_header>
 802692e:	2800      	cmp	r0, #0
 8026930:	f43f af4e 	beq.w	80267d0 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8026934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026936:	eba3 0309 	sub.w	r3, r3, r9
 802693a:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 802693e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026940:	429a      	cmp	r2, r3
 8026942:	d8c0      	bhi.n	80268c6 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8026944:	4490      	add	r8, r2
 8026946:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8026948:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802694c:	f013 0f04 	tst.w	r3, #4
 8026950:	d005      	beq.n	802695e <http_cb+0x262>
 8026952:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802695a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 802695e:	aa02      	add	r2, sp, #8
 8026960:	210b      	movs	r1, #11
 8026962:	4638      	mov	r0, r7
 8026964:	f7fc f9ed 	bl	8022d42 <mg_call>
      if (c->is_accepted) {
 8026968:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802696c:	f013 0f04 	tst.w	r3, #4
 8026970:	d0b2      	beq.n	80268d8 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8026972:	4921      	ldr	r1, [pc, #132]	@ (80269f8 <http_cb+0x2fc>)
 8026974:	a802      	add	r0, sp, #8
 8026976:	f7fc faad 	bl	8022ed4 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802697a:	4605      	mov	r5, r0
 802697c:	2800      	cmp	r0, #0
 802697e:	d0ab      	beq.n	80268d8 <http_cb+0x1dc>
 8026980:	ac8e      	add	r4, sp, #568	@ 0x238
 8026982:	491e      	ldr	r1, [pc, #120]	@ (80269fc <http_cb+0x300>)
 8026984:	4620      	mov	r0, r4
 8026986:	f7fd fe03 	bl	8024590 <mg_str_s>
 802698a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802698e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026992:	f7fd fef8 	bl	8024786 <mg_strcasecmp>
 8026996:	2800      	cmp	r0, #0
 8026998:	d19e      	bne.n	80268d8 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 802699a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802699e:	f043 0310 	orr.w	r3, r3, #16
 80269a2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 80269a6:	e78e      	b.n	80268c6 <http_cb+0x1ca>
 80269a8:	f04f 0900 	mov.w	r9, #0
 80269ac:	e794      	b.n	80268d8 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80269ae:	464a      	mov	r2, r9
 80269b0:	2100      	movs	r1, #0
 80269b2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80269b6:	f7ff f928 	bl	8025c0a <mg_iobuf_del>
 80269ba:	e787      	b.n	80268cc <http_cb+0x1d0>
 80269bc:	2000012c 	.word	0x2000012c
 80269c0:	0803bacc 	.word	0x0803bacc
 80269c4:	0803b080 	.word	0x0803b080
 80269c8:	0803b0f8 	.word	0x0803b0f8
 80269cc:	0803b110 	.word	0x0803b110
 80269d0:	0803b118 	.word	0x0803b118
 80269d4:	0803a878 	.word	0x0803a878
 80269d8:	08036a88 	.word	0x08036a88
 80269dc:	08036fac 	.word	0x08036fac
 80269e0:	0803b144 	.word	0x0803b144
 80269e4:	0803b398 	.word	0x0803b398
 80269e8:	080377d4 	.word	0x080377d4
 80269ec:	0803b168 	.word	0x0803b168
 80269f0:	0803b120 	.word	0x0803b120
 80269f4:	0803b134 	.word	0x0803b134
 80269f8:	0803b178 	.word	0x0803b178
 80269fc:	0803b184 	.word	0x0803b184

08026a00 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026a00:	b082      	sub	sp, #8
 8026a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a06:	b086      	sub	sp, #24
 8026a08:	4681      	mov	r9, r0
 8026a0a:	460e      	mov	r6, r1
 8026a0c:	4690      	mov	r8, r2
 8026a0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026a10:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026a12:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026a14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026a16:	9300      	str	r3, [sp, #0]
 8026a18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8026bd8 <uri_to_path2+0x1d8>)
 8026a1c:	4639      	mov	r1, r7
 8026a1e:	4628      	mov	r0, r5
 8026a20:	f7fc ff2e 	bl	8023880 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026a24:	1c83      	adds	r3, r0, #2
 8026a26:	42bb      	cmp	r3, r7
 8026a28:	d227      	bcs.n	8026a7a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 8026a2a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 8026a2e:	2300      	movs	r3, #0
 8026a30:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8026a34:	b150      	cbz	r0, 8026a4c <uri_to_path2+0x4c>
 8026a36:	182b      	adds	r3, r5, r0
 8026a38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026a3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8026a3e:	d005      	beq.n	8026a4c <uri_to_path2+0x4c>
 8026a40:	1c43      	adds	r3, r0, #1
 8026a42:	222f      	movs	r2, #47	@ 0x2f
 8026a44:	542a      	strb	r2, [r5, r0]
 8026a46:	2200      	movs	r2, #0
 8026a48:	54ea      	strb	r2, [r5, r3]
 8026a4a:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 8026a4c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026a4e:	68f1      	ldr	r1, [r6, #12]
 8026a50:	428c      	cmp	r4, r1
 8026a52:	d31c      	bcc.n	8026a8e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8026a54:	2300      	movs	r3, #0
 8026a56:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8026a5a:	ac02      	add	r4, sp, #8
 8026a5c:	463a      	mov	r2, r7
 8026a5e:	4629      	mov	r1, r5
 8026a60:	4620      	mov	r0, r4
 8026a62:	f7fd fda1 	bl	80245a8 <mg_str_n>
 8026a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026a6a:	f7ff fcda 	bl	8026422 <mg_path_is_sane>
 8026a6e:	b1c0      	cbz	r0, 8026aa2 <uri_to_path2+0xa2>
  n = strlen(path);
 8026a70:	4628      	mov	r0, r5
 8026a72:	f7e9 fc15 	bl	80102a0 <strlen>
 8026a76:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026a78:	e020      	b.n	8026abc <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8026a7a:	4b58      	ldr	r3, [pc, #352]	@ (8026bdc <uri_to_path2+0x1dc>)
 8026a7c:	4a58      	ldr	r2, [pc, #352]	@ (8026be0 <uri_to_path2+0x1e0>)
 8026a7e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026a82:	4648      	mov	r0, r9
 8026a84:	f7fd fbfa 	bl	802427c <mg_http_reply>
    return -1;
 8026a88:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026a8c:	e046      	b.n	8026b1c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8026a8e:	2300      	movs	r3, #0
 8026a90:	9300      	str	r3, [sp, #0]
 8026a92:	1a3b      	subs	r3, r7, r0
 8026a94:	182a      	adds	r2, r5, r0
 8026a96:	1b09      	subs	r1, r1, r4
 8026a98:	68b0      	ldr	r0, [r6, #8]
 8026a9a:	4420      	add	r0, r4
 8026a9c:	f7fe fc06 	bl	80252ac <mg_url_decode>
 8026aa0:	e7d8      	b.n	8026a54 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8026aa2:	4b50      	ldr	r3, [pc, #320]	@ (8026be4 <uri_to_path2+0x1e4>)
 8026aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8026be0 <uri_to_path2+0x1e0>)
 8026aa6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026aaa:	4648      	mov	r0, r9
 8026aac:	f7fd fbe6 	bl	802427c <mg_http_reply>
    return -1;
 8026ab0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026ab4:	e032      	b.n	8026b1c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026ab6:	2200      	movs	r2, #0
 8026ab8:	54ea      	strb	r2, [r5, r3]
 8026aba:	461c      	mov	r4, r3
 8026abc:	2c01      	cmp	r4, #1
 8026abe:	d905      	bls.n	8026acc <uri_to_path2+0xcc>
 8026ac0:	1e63      	subs	r3, r4, #1
 8026ac2:	f815 c003 	ldrb.w	ip, [r5, r3]
 8026ac6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8026aca:	d0f4      	beq.n	8026ab6 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8026acc:	f10d 0a10 	add.w	sl, sp, #16
 8026ad0:	4945      	ldr	r1, [pc, #276]	@ (8026be8 <uri_to_path2+0x1e8>)
 8026ad2:	4650      	mov	r0, sl
 8026ad4:	f7fd fd5c 	bl	8024590 <mg_str_s>
 8026ad8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8026adc:	f106 0108 	add.w	r1, r6, #8
 8026ae0:	c903      	ldmia	r1, {r0, r1}
 8026ae2:	f7fd fe26 	bl	8024732 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8026ae6:	b1f8      	cbz	r0, 8026b28 <uri_to_path2+0x128>
 8026ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8026aec:	2200      	movs	r2, #0
 8026aee:	4611      	mov	r1, r2
 8026af0:	4628      	mov	r0, r5
 8026af2:	4798      	blx	r3
 8026af4:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026af6:	4b3d      	ldr	r3, [pc, #244]	@ (8026bec <uri_to_path2+0x1ec>)
 8026af8:	681b      	ldr	r3, [r3, #0]
 8026afa:	2b03      	cmp	r3, #3
 8026afc:	dc17      	bgt.n	8026b2e <uri_to_path2+0x12e>
  if (flags == 0) {
 8026afe:	f1ba 0f00 	cmp.w	sl, #0
 8026b02:	d00b      	beq.n	8026b1c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026b04:	f01a 0104 	ands.w	r1, sl, #4
 8026b08:	d007      	beq.n	8026b1a <uri_to_path2+0x11a>
 8026b0a:	68f2      	ldr	r2, [r6, #12]
 8026b0c:	b12a      	cbz	r2, 8026b1a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8026b0e:	68b3      	ldr	r3, [r6, #8]
 8026b10:	1898      	adds	r0, r3, r2
 8026b12:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026b16:	282f      	cmp	r0, #47	@ 0x2f
 8026b18:	d11b      	bne.n	8026b52 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 8026b1a:	bb39      	cbnz	r1, 8026b6c <uri_to_path2+0x16c>
}
 8026b1c:	4650      	mov	r0, sl
 8026b1e:	b006      	add	sp, #24
 8026b20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b24:	b002      	add	sp, #8
 8026b26:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026b28:	f04f 0a04 	mov.w	sl, #4
 8026b2c:	e7e3      	b.n	8026af6 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026b2e:	4b30      	ldr	r3, [pc, #192]	@ (8026bf0 <uri_to_path2+0x1f0>)
 8026b30:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8026b34:	492f      	ldr	r1, [pc, #188]	@ (8026bf4 <uri_to_path2+0x1f4>)
 8026b36:	2004      	movs	r0, #4
 8026b38:	f7ff fc9e 	bl	8026478 <mg_log_prefix>
 8026b3c:	f8cd a004 	str.w	sl, [sp, #4]
 8026b40:	9500      	str	r5, [sp, #0]
 8026b42:	68b3      	ldr	r3, [r6, #8]
 8026b44:	68f2      	ldr	r2, [r6, #12]
 8026b46:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 8026b4a:	482b      	ldr	r0, [pc, #172]	@ (8026bf8 <uri_to_path2+0x1f8>)
 8026b4c:	f7fd fb42 	bl	80241d4 <mg_log>
 8026b50:	e7d5      	b.n	8026afe <uri_to_path2+0xfe>
    mg_printf(c,
 8026b52:	492a      	ldr	r1, [pc, #168]	@ (8026bfc <uri_to_path2+0x1fc>)
 8026b54:	4648      	mov	r0, r9
 8026b56:	f7fd fb6b 	bl	8024230 <mg_printf>
    c->is_resp = 0;
 8026b5a:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 8026b5e:	f36f 13c7 	bfc	r3, #7, #1
 8026b62:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8026b66:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8026b6a:	e7d7      	b.n	8026b1c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026b6c:	192e      	adds	r6, r5, r4
 8026b6e:	1b3f      	subs	r7, r7, r4
 8026b70:	4a23      	ldr	r2, [pc, #140]	@ (8026c00 <uri_to_path2+0x200>)
 8026b72:	4639      	mov	r1, r7
 8026b74:	4630      	mov	r0, r6
 8026b76:	f7fc fe83 	bl	8023880 <mg_snprintf>
 8026b7a:	b130      	cbz	r0, 8026b8a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8026b80:	2200      	movs	r2, #0
 8026b82:	4611      	mov	r1, r2
 8026b84:	4628      	mov	r0, r5
 8026b86:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026b88:	bb08      	cbnz	r0, 8026bce <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8026b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8026c04 <uri_to_path2+0x204>)
 8026b8c:	4639      	mov	r1, r7
 8026b8e:	4630      	mov	r0, r6
 8026b90:	f7fc fe76 	bl	8023880 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026b94:	b130      	cbz	r0, 8026ba4 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026b96:	f8d8 3000 	ldr.w	r3, [r8]
 8026b9a:	2200      	movs	r2, #0
 8026b9c:	4611      	mov	r1, r2
 8026b9e:	4628      	mov	r0, r5
 8026ba0:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8026ba2:	b9b0      	cbnz	r0, 8026bd2 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8026ba4:	4a18      	ldr	r2, [pc, #96]	@ (8026c08 <uri_to_path2+0x208>)
 8026ba6:	4639      	mov	r1, r7
 8026ba8:	4630      	mov	r0, r6
 8026baa:	f7fc fe69 	bl	8023880 <mg_snprintf>
 8026bae:	b158      	cbz	r0, 8026bc8 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8026bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8026bb4:	2200      	movs	r2, #0
 8026bb6:	4611      	mov	r1, r2
 8026bb8:	4628      	mov	r0, r5
 8026bba:	4798      	blx	r3
                    0 &&
 8026bbc:	b120      	cbz	r0, 8026bc8 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8026bbe:	340b      	adds	r4, #11
 8026bc0:	2200      	movs	r2, #0
 8026bc2:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8026bc4:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8026bc6:	e7a9      	b.n	8026b1c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8026bc8:	2300      	movs	r3, #0
 8026bca:	7033      	strb	r3, [r6, #0]
 8026bcc:	e7a6      	b.n	8026b1c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8026bce:	4682      	mov	sl, r0
 8026bd0:	e7a4      	b.n	8026b1c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8026bd2:	4682      	mov	sl, r0
 8026bd4:	e7a2      	b.n	8026b1c <uri_to_path2+0x11c>
 8026bd6:	bf00      	nop
 8026bd8:	0803a7d0 	.word	0x0803a7d0
 8026bdc:	0803b18c 	.word	0x0803b18c
 8026be0:	08036fac 	.word	0x08036fac
 8026be4:	0803b1a0 	.word	0x0803b1a0
 8026be8:	0803a87c 	.word	0x0803a87c
 8026bec:	2000012c 	.word	0x2000012c
 8026bf0:	0803babc 	.word	0x0803babc
 8026bf4:	0803b080 	.word	0x0803b080
 8026bf8:	0803b1b0 	.word	0x0803b1b0
 8026bfc:	0803b1c4 	.word	0x0803b1c4
 8026c00:	0803b200 	.word	0x0803b200
 8026c04:	0803b20c 	.word	0x0803b20c
 8026c08:	0803b21c 	.word	0x0803b21c

08026c0c <uri_to_path>:
                       size_t path_size) {
 8026c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c10:	b096      	sub	sp, #88	@ 0x58
 8026c12:	4606      	mov	r6, r0
 8026c14:	460d      	mov	r5, r1
 8026c16:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026c18:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8026c1c:	f1b8 0f00 	cmp.w	r8, #0
 8026c20:	d069      	beq.n	8026cf6 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8026c22:	6811      	ldr	r1, [r2, #0]
 8026c24:	a80c      	add	r0, sp, #48	@ 0x30
 8026c26:	f7fd fcb3 	bl	8024590 <mg_str_s>
 8026c2a:	2300      	movs	r3, #0
 8026c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8026c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026c30:	ab08      	add	r3, sp, #32
 8026c32:	aa0a      	add	r2, sp, #40	@ 0x28
 8026c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026c38:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8026c3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8026c3e:	222c      	movs	r2, #44	@ 0x2c
 8026c40:	9200      	str	r2, [sp, #0]
 8026c42:	aa0e      	add	r2, sp, #56	@ 0x38
 8026c44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026c48:	f7fd ff5f 	bl	8024b0a <mg_span>
 8026c4c:	2800      	cmp	r0, #0
 8026c4e:	d055      	beq.n	8026cfc <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8026c50:	233d      	movs	r3, #61	@ 0x3d
 8026c52:	9300      	str	r3, [sp, #0]
 8026c54:	ab10      	add	r3, sp, #64	@ 0x40
 8026c56:	aa12      	add	r2, sp, #72	@ 0x48
 8026c58:	ac0e      	add	r4, sp, #56	@ 0x38
 8026c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026c5e:	f7fd ff54 	bl	8024b0a <mg_span>
 8026c62:	b978      	cbnz	r0, 8026c84 <uri_to_path+0x78>
 8026c64:	ab12      	add	r3, sp, #72	@ 0x48
 8026c66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8026c6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8026c6e:	ac06      	add	r4, sp, #24
 8026c70:	2200      	movs	r2, #0
 8026c72:	4611      	mov	r1, r2
 8026c74:	4620      	mov	r0, r4
 8026c76:	f7fd fc97 	bl	80245a8 <mg_str_n>
 8026c7a:	ab10      	add	r3, sp, #64	@ 0x40
 8026c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026c80:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8026c84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c86:	b9c3      	cbnz	r3, 8026cba <uri_to_path+0xae>
 8026c88:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 8026c8c:	ac12      	add	r4, sp, #72	@ 0x48
 8026c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026c92:	e889 0003 	stmia.w	r9, {r0, r1}
 8026c96:	f10d 0a18 	add.w	sl, sp, #24
 8026c9a:	4922      	ldr	r1, [pc, #136]	@ (8026d24 <uri_to_path+0x118>)
 8026c9c:	4650      	mov	r0, sl
 8026c9e:	f7fd fc77 	bl	8024590 <mg_str_s>
 8026ca2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8026ca6:	e884 0003 	stmia.w	r4, {r0, r1}
 8026caa:	ab0a      	add	r3, sp, #40	@ 0x28
 8026cac:	e883 0003 	stmia.w	r3, {r0, r1}
 8026cb0:	ab08      	add	r3, sp, #32
 8026cb2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026cb6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8026cba:	68eb      	ldr	r3, [r5, #12]
 8026cbc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026cbe:	4293      	cmp	r3, r2
 8026cc0:	d3bc      	bcc.n	8026c3c <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8026cc2:	ac14      	add	r4, sp, #80	@ 0x50
 8026cc4:	68a9      	ldr	r1, [r5, #8]
 8026cc6:	4620      	mov	r0, r4
 8026cc8:	f7fd fc6e 	bl	80245a8 <mg_str_n>
 8026ccc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026cd0:	a912      	add	r1, sp, #72	@ 0x48
 8026cd2:	c903      	ldmia	r1, {r0, r1}
 8026cd4:	f7fd fd2d 	bl	8024732 <mg_strcmp>
 8026cd8:	2800      	cmp	r0, #0
 8026cda:	d1af      	bne.n	8026c3c <uri_to_path+0x30>
    u = k, p = v;
 8026cdc:	ab0a      	add	r3, sp, #40	@ 0x28
 8026cde:	aa12      	add	r2, sp, #72	@ 0x48
 8026ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026ce4:	e883 0003 	stmia.w	r3, {r0, r1}
 8026ce8:	ab08      	add	r3, sp, #32
 8026cea:	aa10      	add	r2, sp, #64	@ 0x40
 8026cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026cf0:	e883 0003 	stmia.w	r3, {r0, r1}
 8026cf4:	e7a2      	b.n	8026c3c <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026cf6:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8026d28 <uri_to_path+0x11c>
 8026cfa:	e792      	b.n	8026c22 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8026cfc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026cfe:	9304      	str	r3, [sp, #16]
 8026d00:	9703      	str	r7, [sp, #12]
 8026d02:	ab01      	add	r3, sp, #4
 8026d04:	aa08      	add	r2, sp, #32
 8026d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026d0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8026d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d10:	9300      	str	r3, [sp, #0]
 8026d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d14:	4642      	mov	r2, r8
 8026d16:	4629      	mov	r1, r5
 8026d18:	4630      	mov	r0, r6
 8026d1a:	f7ff fe71 	bl	8026a00 <uri_to_path2>
}
 8026d1e:	b016      	add	sp, #88	@ 0x58
 8026d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d24:	0803a87c 	.word	0x0803a87c
 8026d28:	20000130 	.word	0x20000130

08026d2c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 8026d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026d30:	b0a7      	sub	sp, #156	@ 0x9c
 8026d32:	4607      	mov	r7, r0
 8026d34:	460e      	mov	r6, r1
 8026d36:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8026d38:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8026d3c:	2380      	movs	r3, #128	@ 0x80
 8026d3e:	9300      	str	r3, [sp, #0]
 8026d40:	ab02      	add	r3, sp, #8
 8026d42:	f7ff ff63 	bl	8026c0c <uri_to_path>
  if (flags < 0) {
 8026d46:	2800      	cmp	r0, #0
 8026d48:	db20      	blt.n	8026d8c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 8026d4a:	f010 0f04 	tst.w	r0, #4
 8026d4e:	d120      	bne.n	8026d92 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8026d50:	b1b0      	cbz	r0, 8026d80 <mg_http_serve_dir+0x54>
 8026d52:	f1b8 0f00 	cmp.w	r8, #0
 8026d56:	d013      	beq.n	8026d80 <mg_http_serve_dir+0x54>
 8026d58:	ac22      	add	r4, sp, #136	@ 0x88
 8026d5a:	a902      	add	r1, sp, #8
 8026d5c:	4620      	mov	r0, r4
 8026d5e:	f7fd fc17 	bl	8024590 <mg_str_s>
 8026d62:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8026d66:	4641      	mov	r1, r8
 8026d68:	4648      	mov	r0, r9
 8026d6a:	f7fd fc11 	bl	8024590 <mg_str_s>
 8026d6e:	2300      	movs	r3, #0
 8026d70:	9300      	str	r3, [sp, #0]
 8026d72:	e899 000c 	ldmia.w	r9, {r2, r3}
 8026d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026d7a:	f7fd fe2b 	bl	80249d4 <mg_match>
 8026d7e:	b978      	cbnz	r0, 8026da0 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8026d80:	462b      	mov	r3, r5
 8026d82:	aa02      	add	r2, sp, #8
 8026d84:	4631      	mov	r1, r6
 8026d86:	4638      	mov	r0, r7
 8026d88:	f7fd ffe0 	bl	8024d4c <mg_http_serve_file>
}
 8026d8c:	b027      	add	sp, #156	@ 0x9c
 8026d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8026d92:	ab02      	add	r3, sp, #8
 8026d94:	462a      	mov	r2, r5
 8026d96:	4631      	mov	r1, r6
 8026d98:	4638      	mov	r0, r7
 8026d9a:	f7fe fbb3 	bl	8025504 <listdir>
 8026d9e:	e7f5      	b.n	8026d8c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8026da0:	aa02      	add	r2, sp, #8
 8026da2:	6829      	ldr	r1, [r5, #0]
 8026da4:	4638      	mov	r0, r7
 8026da6:	f7fd fbe9 	bl	802457c <mg_http_serve_ssi>
 8026daa:	e7ef      	b.n	8026d8c <mg_http_serve_dir+0x60>

08026dac <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 8026dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026dae:	b0c3      	sub	sp, #268	@ 0x10c
 8026db0:	4605      	mov	r5, r0
 8026db2:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026db4:	688b      	ldr	r3, [r1, #8]
 8026db6:	695e      	ldr	r6, [r3, #20]
 8026db8:	b1b6      	cbz	r6, 8026de8 <printdirentry+0x3c>
  size_t size = 0;
 8026dba:	2300      	movs	r3, #0
 8026dbc:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 8026dbe:	2200      	movs	r2, #0
 8026dc0:	2300      	movs	r3, #0
 8026dc2:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8026dc6:	9501      	str	r5, [sp, #4]
 8026dc8:	232f      	movs	r3, #47	@ 0x2f
 8026dca:	9300      	str	r3, [sp, #0]
 8026dcc:	68e3      	ldr	r3, [r4, #12]
 8026dce:	4a3c      	ldr	r2, [pc, #240]	@ (8026ec0 <printdirentry+0x114>)
 8026dd0:	2180      	movs	r1, #128	@ 0x80
 8026dd2:	a81e      	add	r0, sp, #120	@ 0x78
 8026dd4:	f7fc fd54 	bl	8023880 <mg_snprintf>
 8026dd8:	2880      	cmp	r0, #128	@ 0x80
 8026dda:	d913      	bls.n	8026e04 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 8026ddc:	4b39      	ldr	r3, [pc, #228]	@ (8026ec4 <printdirentry+0x118>)
 8026dde:	681b      	ldr	r3, [r3, #0]
 8026de0:	2b00      	cmp	r3, #0
 8026de2:	dc03      	bgt.n	8026dec <printdirentry+0x40>
}
 8026de4:	b043      	add	sp, #268	@ 0x10c
 8026de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026de8:	4e37      	ldr	r6, [pc, #220]	@ (8026ec8 <printdirentry+0x11c>)
 8026dea:	e7e6      	b.n	8026dba <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 8026dec:	4b37      	ldr	r3, [pc, #220]	@ (8026ecc <printdirentry+0x120>)
 8026dee:	f640 3248 	movw	r2, #2888	@ 0xb48
 8026df2:	4937      	ldr	r1, [pc, #220]	@ (8026ed0 <printdirentry+0x124>)
 8026df4:	2001      	movs	r0, #1
 8026df6:	f7ff fb3f 	bl	8026478 <mg_log_prefix>
 8026dfa:	4629      	mov	r1, r5
 8026dfc:	4835      	ldr	r0, [pc, #212]	@ (8026ed4 <printdirentry+0x128>)
 8026dfe:	f7fd f9e9 	bl	80241d4 <mg_log>
 8026e02:	e7ef      	b.n	8026de4 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8026e04:	6833      	ldr	r3, [r6, #0]
 8026e06:	aa3e      	add	r2, sp, #248	@ 0xf8
 8026e08:	a941      	add	r1, sp, #260	@ 0x104
 8026e0a:	a81e      	add	r0, sp, #120	@ 0x78
 8026e0c:	4798      	blx	r3
 8026e0e:	b9a8      	cbnz	r0, 8026e3c <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8026e10:	4b2c      	ldr	r3, [pc, #176]	@ (8026ec4 <printdirentry+0x118>)
 8026e12:	681b      	ldr	r3, [r3, #0]
 8026e14:	2b00      	cmp	r3, #0
 8026e16:	dde5      	ble.n	8026de4 <printdirentry+0x38>
 8026e18:	4b2c      	ldr	r3, [pc, #176]	@ (8026ecc <printdirentry+0x120>)
 8026e1a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8026e1e:	492c      	ldr	r1, [pc, #176]	@ (8026ed0 <printdirentry+0x124>)
 8026e20:	2001      	movs	r0, #1
 8026e22:	f7ff fb29 	bl	8026478 <mg_log_prefix>
 8026e26:	6823      	ldr	r3, [r4, #0]
 8026e28:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8026e2a:	f007 f925 	bl	802e078 <__errno>
 8026e2e:	6803      	ldr	r3, [r0, #0]
 8026e30:	aa1e      	add	r2, sp, #120	@ 0x78
 8026e32:	4621      	mov	r1, r4
 8026e34:	4828      	ldr	r0, [pc, #160]	@ (8026ed8 <printdirentry+0x12c>)
 8026e36:	f7fd f9cd 	bl	80241d4 <mg_log>
 8026e3a:	e7d3      	b.n	8026de4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026e3c:	f010 0604 	ands.w	r6, r0, #4
 8026e40:	d02d      	beq.n	8026e9e <printdirentry+0xf2>
 8026e42:	4f26      	ldr	r7, [pc, #152]	@ (8026edc <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8026e44:	2e00      	cmp	r6, #0
 8026e46:	d02c      	beq.n	8026ea2 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8026e48:	4b25      	ldr	r3, [pc, #148]	@ (8026ee0 <printdirentry+0x134>)
 8026e4a:	4a26      	ldr	r2, [pc, #152]	@ (8026ee4 <printdirentry+0x138>)
 8026e4c:	2128      	movs	r1, #40	@ 0x28
 8026e4e:	a814      	add	r0, sp, #80	@ 0x50
 8026e50:	f7fc fd16 	bl	8023880 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8026e54:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8026e56:	4a24      	ldr	r2, [pc, #144]	@ (8026ee8 <printdirentry+0x13c>)
 8026e58:	2128      	movs	r1, #40	@ 0x28
 8026e5a:	eb0d 0001 	add.w	r0, sp, r1
 8026e5e:	f7fc fd0f 	bl	8023880 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8026e62:	4628      	mov	r0, r5
 8026e64:	f7e9 fa1c 	bl	80102a0 <strlen>
 8026e68:	4601      	mov	r1, r0
 8026e6a:	2380      	movs	r3, #128	@ 0x80
 8026e6c:	aa1e      	add	r2, sp, #120	@ 0x78
 8026e6e:	4628      	mov	r0, r5
 8026e70:	f7fd fa58 	bl	8024324 <mg_url_encode>
 8026e74:	4602      	mov	r2, r0
    mg_printf(d->c,
 8026e76:	6820      	ldr	r0, [r4, #0]
 8026e78:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8026e7a:	b9e6      	cbnz	r6, 8026eb6 <printdirentry+0x10a>
 8026e7c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026e7e:	2400      	movs	r4, #0
 8026e80:	ae14      	add	r6, sp, #80	@ 0x50
 8026e82:	9608      	str	r6, [sp, #32]
 8026e84:	9306      	str	r3, [sp, #24]
 8026e86:	9407      	str	r4, [sp, #28]
 8026e88:	ab0a      	add	r3, sp, #40	@ 0x28
 8026e8a:	9304      	str	r3, [sp, #16]
 8026e8c:	9103      	str	r1, [sp, #12]
 8026e8e:	9702      	str	r7, [sp, #8]
 8026e90:	9501      	str	r5, [sp, #4]
 8026e92:	9700      	str	r7, [sp, #0]
 8026e94:	ab1e      	add	r3, sp, #120	@ 0x78
 8026e96:	4915      	ldr	r1, [pc, #84]	@ (8026eec <printdirentry+0x140>)
 8026e98:	f7fd f9ca 	bl	8024230 <mg_printf>
}
 8026e9c:	e7a2      	b.n	8026de4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026e9e:	4f14      	ldr	r7, [pc, #80]	@ (8026ef0 <printdirentry+0x144>)
 8026ea0:	e7d0      	b.n	8026e44 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8026ea2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026ea4:	9300      	str	r3, [sp, #0]
 8026ea6:	2300      	movs	r3, #0
 8026ea8:	9301      	str	r3, [sp, #4]
 8026eaa:	4a12      	ldr	r2, [pc, #72]	@ (8026ef4 <printdirentry+0x148>)
 8026eac:	2128      	movs	r1, #40	@ 0x28
 8026eae:	a814      	add	r0, sp, #80	@ 0x50
 8026eb0:	f7fc fce6 	bl	8023880 <mg_snprintf>
 8026eb4:	e7ce      	b.n	8026e54 <printdirentry+0xa8>
    mg_printf(d->c,
 8026eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026eba:	461c      	mov	r4, r3
 8026ebc:	e7e0      	b.n	8026e80 <printdirentry+0xd4>
 8026ebe:	bf00      	nop
 8026ec0:	0803b22c 	.word	0x0803b22c
 8026ec4:	2000012c 	.word	0x2000012c
 8026ec8:	20000130 	.word	0x20000130
 8026ecc:	0803baac 	.word	0x0803baac
 8026ed0:	0803b080 	.word	0x0803b080
 8026ed4:	0803b234 	.word	0x0803b234
 8026ed8:	0803b244 	.word	0x0803b244
 8026edc:	0803a87c 	.word	0x0803a87c
 8026ee0:	0803b258 	.word	0x0803b258
 8026ee4:	0803b398 	.word	0x0803b398
 8026ee8:	0803b648 	.word	0x0803b648
 8026eec:	0803b268 	.word	0x0803b268
 8026ef0:	08036fac 	.word	0x08036fac
 8026ef4:	0803b260 	.word	0x0803b260

08026ef8 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8026ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026efc:	b0ca      	sub	sp, #296	@ 0x128
 8026efe:	4607      	mov	r7, r0
 8026f00:	460d      	mov	r5, r1
 8026f02:	4616      	mov	r6, r2
 8026f04:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8026f06:	2330      	movs	r3, #48	@ 0x30
 8026f08:	9343      	str	r3, [sp, #268]	@ 0x10c
 8026f0a:	2400      	movs	r4, #0
 8026f0c:	9444      	str	r4, [sp, #272]	@ 0x110
 8026f0e:	9445      	str	r4, [sp, #276]	@ 0x114
 8026f10:	9446      	str	r4, [sp, #280]	@ 0x118
 8026f12:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8026f14:	f101 0a10 	add.w	sl, r1, #16
 8026f18:	2314      	movs	r3, #20
 8026f1a:	aa43      	add	r2, sp, #268	@ 0x10c
 8026f1c:	4964      	ldr	r1, [pc, #400]	@ (80270b0 <mg_http_upload+0x1b8>)
 8026f1e:	4650      	mov	r0, sl
 8026f20:	f7fe fa23 	bl	802536a <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8026f24:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8026f28:	2380      	movs	r3, #128	@ 0x80
 8026f2a:	464a      	mov	r2, r9
 8026f2c:	4961      	ldr	r1, [pc, #388]	@ (80270b4 <mg_http_upload+0x1bc>)
 8026f2e:	4650      	mov	r0, sl
 8026f30:	f7fe fa1b 	bl	802536a <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8026f34:	4622      	mov	r2, r4
 8026f36:	4621      	mov	r1, r4
 8026f38:	a843      	add	r0, sp, #268	@ 0x10c
 8026f3a:	f005 fa1f 	bl	802c37c <strtol>
 8026f3e:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8026f40:	f8cd 9004 	str.w	r9, [sp, #4]
 8026f44:	232f      	movs	r3, #47	@ 0x2f
 8026f46:	9300      	str	r3, [sp, #0]
 8026f48:	4643      	mov	r3, r8
 8026f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80270b8 <mg_http_upload+0x1c0>)
 8026f4c:	2180      	movs	r1, #128	@ 0x80
 8026f4e:	a803      	add	r0, sp, #12
 8026f50:	f7fc fc96 	bl	8023880 <mg_snprintf>
  if (hm->body.len == 0) {
 8026f54:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8026f58:	f1b8 0f00 	cmp.w	r8, #0
 8026f5c:	d047      	beq.n	8026fee <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8026f5e:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8026f62:	2b00      	cmp	r3, #0
 8026f64:	d04c      	beq.n	8027000 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8026f66:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8026f6a:	a923      	add	r1, sp, #140	@ 0x8c
 8026f6c:	4648      	mov	r0, r9
 8026f6e:	f7fd fb0f 	bl	8024590 <mg_str_s>
 8026f72:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026f76:	f7ff fa54 	bl	8026422 <mg_path_is_sane>
 8026f7a:	2800      	cmp	r0, #0
 8026f7c:	d04a      	beq.n	8027014 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8026f7e:	2c00      	cmp	r4, #0
 8026f80:	db54      	blt.n	802702c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8026f82:	44a0      	add	r8, r4
 8026f84:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8026f86:	4598      	cmp	r8, r3
 8026f88:	d85a      	bhi.n	8027040 <mg_http_upload+0x148>
    size_t current_size = 0;
 8026f8a:	2300      	movs	r3, #0
 8026f8c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80270bc <mg_http_upload+0x1c4>)
 8026f90:	681b      	ldr	r3, [r3, #0]
 8026f92:	2b02      	cmp	r3, #2
 8026f94:	dc61      	bgt.n	802705a <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8026f96:	b914      	cbnz	r4, 8026f9e <mg_http_upload+0xa6>
 8026f98:	6a33      	ldr	r3, [r6, #32]
 8026f9a:	a803      	add	r0, sp, #12
 8026f9c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8026f9e:	6833      	ldr	r3, [r6, #0]
 8026fa0:	2200      	movs	r2, #0
 8026fa2:	a902      	add	r1, sp, #8
 8026fa4:	a803      	add	r0, sp, #12
 8026fa6:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8026fa8:	2c00      	cmp	r4, #0
 8026faa:	dd02      	ble.n	8026fb2 <mg_http_upload+0xba>
 8026fac:	9b02      	ldr	r3, [sp, #8]
 8026fae:	429c      	cmp	r4, r3
 8026fb0:	d162      	bne.n	8027078 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8026fb2:	2202      	movs	r2, #2
 8026fb4:	a903      	add	r1, sp, #12
 8026fb6:	4630      	mov	r0, r6
 8026fb8:	f7fb fed2 	bl	8022d60 <mg_fs_open>
 8026fbc:	4680      	mov	r8, r0
 8026fbe:	2800      	cmp	r0, #0
 8026fc0:	d066      	beq.n	8027090 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8026fc2:	6973      	ldr	r3, [r6, #20]
 8026fc4:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026fc8:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8026fcc:	6800      	ldr	r0, [r0, #0]
 8026fce:	4798      	blx	r3
 8026fd0:	4404      	add	r4, r0
      mg_fs_close(fd);
 8026fd2:	4640      	mov	r0, r8
 8026fd4:	f7fb fedd 	bl	8022d92 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8026fd8:	9400      	str	r4, [sp, #0]
 8026fda:	4b39      	ldr	r3, [pc, #228]	@ (80270c0 <mg_http_upload+0x1c8>)
 8026fdc:	4a39      	ldr	r2, [pc, #228]	@ (80270c4 <mg_http_upload+0x1cc>)
 8026fde:	21c8      	movs	r1, #200	@ 0xc8
 8026fe0:	4638      	mov	r0, r7
 8026fe2:	f7fd f94b 	bl	802427c <mg_http_reply>
}
 8026fe6:	4620      	mov	r0, r4
 8026fe8:	b04a      	add	sp, #296	@ 0x128
 8026fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8026fee:	2400      	movs	r4, #0
 8026ff0:	9400      	str	r4, [sp, #0]
 8026ff2:	4b33      	ldr	r3, [pc, #204]	@ (80270c0 <mg_http_upload+0x1c8>)
 8026ff4:	4a33      	ldr	r2, [pc, #204]	@ (80270c4 <mg_http_upload+0x1cc>)
 8026ff6:	21c8      	movs	r1, #200	@ 0xc8
 8026ff8:	4638      	mov	r0, r7
 8026ffa:	f7fd f93f 	bl	802427c <mg_http_reply>
 8026ffe:	e7f2      	b.n	8026fe6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8027000:	4b31      	ldr	r3, [pc, #196]	@ (80270c8 <mg_http_upload+0x1d0>)
 8027002:	4a32      	ldr	r2, [pc, #200]	@ (80270cc <mg_http_upload+0x1d4>)
 8027004:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027008:	4638      	mov	r0, r7
 802700a:	f7fd f937 	bl	802427c <mg_http_reply>
    res = -1;
 802700e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8027012:	e7e8      	b.n	8026fe6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8027014:	ab23      	add	r3, sp, #140	@ 0x8c
 8027016:	9300      	str	r3, [sp, #0]
 8027018:	4b2d      	ldr	r3, [pc, #180]	@ (80270d0 <mg_http_upload+0x1d8>)
 802701a:	4a2c      	ldr	r2, [pc, #176]	@ (80270cc <mg_http_upload+0x1d4>)
 802701c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027020:	4638      	mov	r0, r7
 8027022:	f7fd f92b 	bl	802427c <mg_http_reply>
    res = -2;
 8027026:	f06f 0401 	mvn.w	r4, #1
 802702a:	e7dc      	b.n	8026fe6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 802702c:	4b29      	ldr	r3, [pc, #164]	@ (80270d4 <mg_http_upload+0x1dc>)
 802702e:	4a27      	ldr	r2, [pc, #156]	@ (80270cc <mg_http_upload+0x1d4>)
 8027030:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027034:	4638      	mov	r0, r7
 8027036:	f7fd f921 	bl	802427c <mg_http_reply>
    res = -3;
 802703a:	f06f 0402 	mvn.w	r4, #2
 802703e:	e7d2      	b.n	8026fe6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8027040:	9301      	str	r3, [sp, #4]
 8027042:	ab03      	add	r3, sp, #12
 8027044:	9300      	str	r3, [sp, #0]
 8027046:	4b24      	ldr	r3, [pc, #144]	@ (80270d8 <mg_http_upload+0x1e0>)
 8027048:	4a20      	ldr	r2, [pc, #128]	@ (80270cc <mg_http_upload+0x1d4>)
 802704a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802704e:	4638      	mov	r0, r7
 8027050:	f7fd f914 	bl	802427c <mg_http_reply>
    res = -4;
 8027054:	f06f 0403 	mvn.w	r4, #3
 8027058:	e7c5      	b.n	8026fe6 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802705a:	4b20      	ldr	r3, [pc, #128]	@ (80270dc <mg_http_upload+0x1e4>)
 802705c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8027060:	491f      	ldr	r1, [pc, #124]	@ (80270e0 <mg_http_upload+0x1e8>)
 8027062:	2003      	movs	r0, #3
 8027064:	f7ff fa08 	bl	8026478 <mg_log_prefix>
 8027068:	4623      	mov	r3, r4
 802706a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 802706e:	a903      	add	r1, sp, #12
 8027070:	481c      	ldr	r0, [pc, #112]	@ (80270e4 <mg_http_upload+0x1ec>)
 8027072:	f7fd f8af 	bl	80241d4 <mg_log>
 8027076:	e78e      	b.n	8026f96 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8027078:	ab03      	add	r3, sp, #12
 802707a:	9300      	str	r3, [sp, #0]
 802707c:	4b1a      	ldr	r3, [pc, #104]	@ (80270e8 <mg_http_upload+0x1f0>)
 802707e:	4a13      	ldr	r2, [pc, #76]	@ (80270cc <mg_http_upload+0x1d4>)
 8027080:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027084:	4638      	mov	r0, r7
 8027086:	f7fd f8f9 	bl	802427c <mg_http_reply>
      res = -5;
 802708a:	f06f 0404 	mvn.w	r4, #4
 802708e:	e7aa      	b.n	8026fe6 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8027090:	f006 fff2 	bl	802e078 <__errno>
 8027094:	6803      	ldr	r3, [r0, #0]
 8027096:	9301      	str	r3, [sp, #4]
 8027098:	ab03      	add	r3, sp, #12
 802709a:	9300      	str	r3, [sp, #0]
 802709c:	4b13      	ldr	r3, [pc, #76]	@ (80270ec <mg_http_upload+0x1f4>)
 802709e:	4a0b      	ldr	r2, [pc, #44]	@ (80270cc <mg_http_upload+0x1d4>)
 80270a0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80270a4:	4638      	mov	r0, r7
 80270a6:	f7fd f8e9 	bl	802427c <mg_http_reply>
      res = -6;
 80270aa:	f06f 0405 	mvn.w	r4, #5
 80270ae:	e79a      	b.n	8026fe6 <mg_http_upload+0xee>
 80270b0:	0803b2c0 	.word	0x0803b2c0
 80270b4:	0803b2e8 	.word	0x0803b2e8
 80270b8:	0803b22c 	.word	0x0803b22c
 80270bc:	2000012c 	.word	0x2000012c
 80270c0:	0803b2c8 	.word	0x0803b2c8
 80270c4:	0803692c 	.word	0x0803692c
 80270c8:	0803b2cc 	.word	0x0803b2cc
 80270cc:	08036fac 	.word	0x08036fac
 80270d0:	0803b2dc 	.word	0x0803b2dc
 80270d4:	0803b2f0 	.word	0x0803b2f0
 80270d8:	0803b300 	.word	0x0803b300
 80270dc:	0803ba9c 	.word	0x0803ba9c
 80270e0:	0803b080 	.word	0x0803b080
 80270e4:	0803b31c 	.word	0x0803b31c
 80270e8:	0803b334 	.word	0x0803b334
 80270ec:	0803b348 	.word	0x0803b348

080270f0 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80270f0:	b570      	push	{r4, r5, r6, lr}
 80270f2:	b082      	sub	sp, #8
 80270f4:	4604      	mov	r4, r0
 80270f6:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 80270f8:	68e1      	ldr	r1, [r4, #12]
 80270fa:	f7f9 fbd1 	bl	80208a0 <roundup>
  if (new_size == 0) {
 80270fe:	b130      	cbz	r0, 802710e <mg_iobuf_resize+0x1e>
 8027100:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8027102:	6863      	ldr	r3, [r4, #4]
 8027104:	4283      	cmp	r3, r0
 8027106:	d10f      	bne.n	8027128 <mg_iobuf_resize+0x38>
  int ok = 1;
 8027108:	2001      	movs	r0, #1
}
 802710a:	b002      	add	sp, #8
 802710c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 802710e:	6861      	ldr	r1, [r4, #4]
 8027110:	6820      	ldr	r0, [r4, #0]
 8027112:	f7fe fd6f 	bl	8025bf4 <mg_bzero>
    free(io->buf);
 8027116:	6820      	ldr	r0, [r4, #0]
 8027118:	f7f3 fde0 	bl	801acdc <vPortFree>
    io->buf = NULL;
 802711c:	2300      	movs	r3, #0
 802711e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8027120:	6063      	str	r3, [r4, #4]
 8027122:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8027124:	2001      	movs	r0, #1
 8027126:	e7f0      	b.n	802710a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8027128:	4601      	mov	r1, r0
 802712a:	2001      	movs	r0, #1
 802712c:	f7fb fc78 	bl	8022a20 <mg_calloc>
    if (p != NULL) {
 8027130:	4606      	mov	r6, r0
 8027132:	b198      	cbz	r0, 802715c <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8027134:	68a2      	ldr	r2, [r4, #8]
 8027136:	42aa      	cmp	r2, r5
 8027138:	bf28      	it	cs
 802713a:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 802713c:	b11a      	cbz	r2, 8027146 <mg_iobuf_resize+0x56>
 802713e:	6821      	ldr	r1, [r4, #0]
 8027140:	b109      	cbz	r1, 8027146 <mg_iobuf_resize+0x56>
 8027142:	f005 fd7b 	bl	802cc3c <memmove>
      mg_bzero(io->buf, io->size);
 8027146:	6861      	ldr	r1, [r4, #4]
 8027148:	6820      	ldr	r0, [r4, #0]
 802714a:	f7fe fd53 	bl	8025bf4 <mg_bzero>
      free(io->buf);
 802714e:	6820      	ldr	r0, [r4, #0]
 8027150:	f7f3 fdc4 	bl	801acdc <vPortFree>
      io->buf = (unsigned char *) p;
 8027154:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8027156:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8027158:	2001      	movs	r0, #1
 802715a:	e7d6      	b.n	802710a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 802715c:	4b0b      	ldr	r3, [pc, #44]	@ (802718c <mg_iobuf_resize+0x9c>)
 802715e:	681b      	ldr	r3, [r3, #0]
 8027160:	2b00      	cmp	r3, #0
 8027162:	dc01      	bgt.n	8027168 <mg_iobuf_resize+0x78>
      ok = 0;
 8027164:	2000      	movs	r0, #0
  return ok;
 8027166:	e7d0      	b.n	802710a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8027168:	4b09      	ldr	r3, [pc, #36]	@ (8027190 <mg_iobuf_resize+0xa0>)
 802716a:	f640 5244 	movw	r2, #3396	@ 0xd44
 802716e:	4909      	ldr	r1, [pc, #36]	@ (8027194 <mg_iobuf_resize+0xa4>)
 8027170:	2001      	movs	r0, #1
 8027172:	f7ff f981 	bl	8026478 <mg_log_prefix>
 8027176:	2600      	movs	r6, #0
 8027178:	9500      	str	r5, [sp, #0]
 802717a:	9601      	str	r6, [sp, #4]
 802717c:	6862      	ldr	r2, [r4, #4]
 802717e:	4633      	mov	r3, r6
 8027180:	4805      	ldr	r0, [pc, #20]	@ (8027198 <mg_iobuf_resize+0xa8>)
 8027182:	f7fd f827 	bl	80241d4 <mg_log>
      ok = 0;
 8027186:	4630      	mov	r0, r6
 8027188:	e7bf      	b.n	802710a <mg_iobuf_resize+0x1a>
 802718a:	bf00      	nop
 802718c:	2000012c 	.word	0x2000012c
 8027190:	0803ba8c 	.word	0x0803ba8c
 8027194:	0803b080 	.word	0x0803b080
 8027198:	0803b358 	.word	0x0803b358

0802719c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 802719c:	b538      	push	{r3, r4, r5, lr}
 802719e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80271a0:	2908      	cmp	r1, #8
 80271a2:	d004      	beq.n	80271ae <static_cb+0x12>
 80271a4:	2902      	cmp	r1, #2
 80271a6:	d002      	beq.n	80271ae <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 80271a8:	2909      	cmp	r1, #9
 80271aa:	d02b      	beq.n	8027204 <static_cb+0x68>
}
 80271ac:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 80271ae:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80271b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80271b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80271b8:	d31d      	bcc.n	80271f6 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80271ba:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80271bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80271be:	4299      	cmp	r1, r3
 80271c0:	d2f4      	bcs.n	80271ac <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80271c2:	1a5b      	subs	r3, r3, r1
 80271c4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 80271c8:	429a      	cmp	r2, r3
 80271ca:	d300      	bcc.n	80271ce <static_cb+0x32>
 80271cc:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80271ce:	686b      	ldr	r3, [r5, #4]
 80271d0:	691b      	ldr	r3, [r3, #16]
 80271d2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80271d4:	4401      	add	r1, r0
 80271d6:	6828      	ldr	r0, [r5, #0]
 80271d8:	4798      	blx	r3
    c->send.len += n;
 80271da:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80271dc:	4403      	add	r3, r0
 80271de:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 80271e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80271e4:	1a1b      	subs	r3, r3, r0
 80271e6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 80271ea:	2800      	cmp	r0, #0
 80271ec:	d1de      	bne.n	80271ac <static_cb+0x10>
 80271ee:	4620      	mov	r0, r4
 80271f0:	f7fb fddc 	bl	8022dac <restore_http_cb>
 80271f4:	e7da      	b.n	80271ac <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80271f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80271fa:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80271fe:	f7ff ff77 	bl	80270f0 <mg_iobuf_resize>
 8027202:	e7da      	b.n	80271ba <static_cb+0x1e>
    restore_http_cb(c);
 8027204:	f7fb fdd2 	bl	8022dac <restore_http_cb>
  (void) ev_data;
 8027208:	e7d0      	b.n	80271ac <static_cb+0x10>

0802720a <mg_iobuf_add>:
                    size_t len) {
 802720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802720e:	4604      	mov	r4, r0
 8027210:	460f      	mov	r7, r1
 8027212:	4690      	mov	r8, r2
 8027214:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8027216:	6880      	ldr	r0, [r0, #8]
 8027218:	68e1      	ldr	r1, [r4, #12]
 802721a:	4418      	add	r0, r3
 802721c:	f7f9 fb40 	bl	80208a0 <roundup>
 8027220:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8027222:	4601      	mov	r1, r0
 8027224:	4620      	mov	r0, r4
 8027226:	f7ff ff63 	bl	80270f0 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 802722a:	6863      	ldr	r3, [r4, #4]
 802722c:	42b3      	cmp	r3, r6
 802722e:	d000      	beq.n	8027232 <mg_iobuf_add+0x28>
 8027230:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8027232:	68a2      	ldr	r2, [r4, #8]
 8027234:	42ba      	cmp	r2, r7
 8027236:	d812      	bhi.n	802725e <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8027238:	f1b8 0f00 	cmp.w	r8, #0
 802723c:	d005      	beq.n	802724a <mg_iobuf_add+0x40>
 802723e:	6820      	ldr	r0, [r4, #0]
 8027240:	462a      	mov	r2, r5
 8027242:	4641      	mov	r1, r8
 8027244:	4438      	add	r0, r7
 8027246:	f005 fcf9 	bl	802cc3c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 802724a:	68a3      	ldr	r3, [r4, #8]
 802724c:	42bb      	cmp	r3, r7
 802724e:	d200      	bcs.n	8027252 <mg_iobuf_add+0x48>
 8027250:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8027252:	68a3      	ldr	r3, [r4, #8]
 8027254:	442b      	add	r3, r5
 8027256:	60a3      	str	r3, [r4, #8]
}
 8027258:	4628      	mov	r0, r5
 802725a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 802725e:	6823      	ldr	r3, [r4, #0]
 8027260:	19e8      	adds	r0, r5, r7
 8027262:	1bd2      	subs	r2, r2, r7
 8027264:	19d9      	adds	r1, r3, r7
 8027266:	4418      	add	r0, r3
 8027268:	f005 fce8 	bl	802cc3c <memmove>
 802726c:	e7e4      	b.n	8027238 <mg_iobuf_add+0x2e>

0802726e <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 802726e:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8027270:	2100      	movs	r1, #0
 8027272:	f7ff ff3d 	bl	80270f0 <mg_iobuf_resize>
}
 8027276:	bd08      	pop	{r3, pc}

08027278 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8027278:	b538      	push	{r3, r4, r5, lr}
 802727a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 802727c:	2201      	movs	r2, #1
 802727e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8027280:	f7fb fbf3 	bl	8022a6a <getpeer>
  if (c == NULL) {
 8027284:	b368      	cbz	r0, 80272e2 <rx_udp+0x6a>
 8027286:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8027288:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802728a:	881b      	ldrh	r3, [r3, #0]
 802728c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802728e:	69e3      	ldr	r3, [r4, #28]
 8027290:	68db      	ldr	r3, [r3, #12]
 8027292:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027294:	6923      	ldr	r3, [r4, #16]
 8027296:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802729a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802729e:	895b      	ldrh	r3, [r3, #10]
 80272a0:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80272a4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80272a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80272aa:	d21b      	bcs.n	80272e4 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80272ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80272ae:	1ad2      	subs	r2, r2, r3
 80272b0:	68e1      	ldr	r1, [r4, #12]
 80272b2:	428a      	cmp	r2, r1
 80272b4:	d204      	bcs.n	80272c0 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 80272b6:	4419      	add	r1, r3
 80272b8:	3038      	adds	r0, #56	@ 0x38
 80272ba:	f7ff ff19 	bl	80270f0 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80272be:	b1a8      	cbz	r0, 80272ec <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 80272c0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80272c2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80272c4:	68e2      	ldr	r2, [r4, #12]
 80272c6:	68a1      	ldr	r1, [r4, #8]
 80272c8:	4418      	add	r0, r3
 80272ca:	f006 ff0d 	bl	802e0e8 <memcpy>
      c->recv.len += pkt->pay.len;
 80272ce:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80272d0:	4622      	mov	r2, r4
 80272d2:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 80272d6:	440b      	add	r3, r1
 80272d8:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80272da:	2107      	movs	r1, #7
 80272dc:	4628      	mov	r0, r5
 80272de:	f7fb fd30 	bl	8022d42 <mg_call>
}
 80272e2:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 80272e4:	4904      	ldr	r1, [pc, #16]	@ (80272f8 <rx_udp+0x80>)
 80272e6:	f7ff f9af 	bl	8026648 <mg_error>
 80272ea:	e7fa      	b.n	80272e2 <rx_udp+0x6a>
      mg_error(c, "oom");
 80272ec:	4903      	ldr	r1, [pc, #12]	@ (80272fc <rx_udp+0x84>)
 80272ee:	4628      	mov	r0, r5
 80272f0:	f7ff f9aa 	bl	8026648 <mg_error>
 80272f4:	e7f5      	b.n	80272e2 <rx_udp+0x6a>
 80272f6:	bf00      	nop
 80272f8:	0803b364 	.word	0x0803b364
 80272fc:	0803b380 	.word	0x0803b380

08027300 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8027300:	b538      	push	{r3, r4, r5, lr}
 8027302:	4605      	mov	r5, r0
 8027304:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8027306:	b122      	cbz	r2, 8027312 <mg_pfn_iobuf_private+0x12>
 8027308:	6889      	ldr	r1, [r1, #8]
 802730a:	3102      	adds	r1, #2
 802730c:	6863      	ldr	r3, [r4, #4]
 802730e:	4299      	cmp	r1, r3
 8027310:	d80d      	bhi.n	802732e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8027312:	68a3      	ldr	r3, [r4, #8]
 8027314:	1c99      	adds	r1, r3, #2
 8027316:	6862      	ldr	r2, [r4, #4]
 8027318:	4291      	cmp	r1, r2
 802731a:	d80c      	bhi.n	8027336 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802731c:	6822      	ldr	r2, [r4, #0]
 802731e:	1c59      	adds	r1, r3, #1
 8027320:	60a1      	str	r1, [r4, #8]
 8027322:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8027324:	6822      	ldr	r2, [r4, #0]
 8027326:	68a3      	ldr	r3, [r4, #8]
 8027328:	2100      	movs	r1, #0
 802732a:	54d1      	strb	r1, [r2, r3]
}
 802732c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 802732e:	4620      	mov	r0, r4
 8027330:	f7ff fede 	bl	80270f0 <mg_iobuf_resize>
 8027334:	e7ed      	b.n	8027312 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8027336:	4293      	cmp	r3, r2
 8027338:	d2f8      	bcs.n	802732c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 802733a:	6822      	ldr	r2, [r4, #0]
 802733c:	1c59      	adds	r1, r3, #1
 802733e:	60a1      	str	r1, [r4, #8]
 8027340:	2100      	movs	r1, #0
 8027342:	54d1      	strb	r1, [r2, r3]
}
 8027344:	e7f2      	b.n	802732c <mg_pfn_iobuf_private+0x2c>

08027346 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 8027346:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 8027348:	2201      	movs	r2, #1
 802734a:	f7ff ffd9 	bl	8027300 <mg_pfn_iobuf_private>
}
 802734e:	bd08      	pop	{r3, pc}

08027350 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8027350:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8027352:	2200      	movs	r2, #0
 8027354:	f7ff ffd4 	bl	8027300 <mg_pfn_iobuf_private>
}
 8027358:	bd08      	pop	{r3, pc}
	...

0802735c <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 802735c:	b510      	push	{r4, lr}
 802735e:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 8027360:	f7fb fc8e 	bl	8022c80 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8027364:	6862      	ldr	r2, [r4, #4]
 8027366:	e000      	b.n	802736a <mg_close_conn+0xe>
 8027368:	461a      	mov	r2, r3
 802736a:	6813      	ldr	r3, [r2, #0]
 802736c:	42a3      	cmp	r3, r4
 802736e:	d1fb      	bne.n	8027368 <mg_close_conn+0xc>
 8027370:	6823      	ldr	r3, [r4, #0]
 8027372:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8027374:	6863      	ldr	r3, [r4, #4]
 8027376:	689a      	ldr	r2, [r3, #8]
 8027378:	42a2      	cmp	r2, r4
 802737a:	d020      	beq.n	80273be <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 802737c:	6863      	ldr	r3, [r4, #4]
 802737e:	691a      	ldr	r2, [r3, #16]
 8027380:	42a2      	cmp	r2, r4
 8027382:	d01f      	beq.n	80273c4 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8027384:	2200      	movs	r2, #0
 8027386:	2109      	movs	r1, #9
 8027388:	4620      	mov	r0, r4
 802738a:	f7fb fcda 	bl	8022d42 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802738e:	4b15      	ldr	r3, [pc, #84]	@ (80273e4 <mg_close_conn+0x88>)
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	2b02      	cmp	r3, #2
 8027394:	dc19      	bgt.n	80273ca <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8027396:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802739a:	f7ff ff68 	bl	802726e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802739e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80273a2:	f7ff ff64 	bl	802726e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 80273a6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80273aa:	f7ff ff60 	bl	802726e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 80273ae:	21b0      	movs	r1, #176	@ 0xb0
 80273b0:	4620      	mov	r0, r4
 80273b2:	f7fe fc1f 	bl	8025bf4 <mg_bzero>
  free(c);
 80273b6:	4620      	mov	r0, r4
 80273b8:	f7f3 fc90 	bl	801acdc <vPortFree>
}
 80273bc:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80273be:	2200      	movs	r2, #0
 80273c0:	609a      	str	r2, [r3, #8]
 80273c2:	e7db      	b.n	802737c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80273c4:	2200      	movs	r2, #0
 80273c6:	611a      	str	r2, [r3, #16]
 80273c8:	e7dc      	b.n	8027384 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 80273ca:	4b07      	ldr	r3, [pc, #28]	@ (80273e8 <mg_close_conn+0x8c>)
 80273cc:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 80273d0:	4906      	ldr	r1, [pc, #24]	@ (80273ec <mg_close_conn+0x90>)
 80273d2:	2003      	movs	r0, #3
 80273d4:	f7ff f850 	bl	8026478 <mg_log_prefix>
 80273d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80273da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80273dc:	4804      	ldr	r0, [pc, #16]	@ (80273f0 <mg_close_conn+0x94>)
 80273de:	f7fc fef9 	bl	80241d4 <mg_log>
 80273e2:	e7d8      	b.n	8027396 <mg_close_conn+0x3a>
 80273e4:	2000012c 	.word	0x2000012c
 80273e8:	0803ba68 	.word	0x0803ba68
 80273ec:	0803b080 	.word	0x0803b080
 80273f0:	0803b384 	.word	0x0803b384

080273f4 <close_conn>:
static void close_conn(struct mg_connection *c) {
 80273f4:	b510      	push	{r4, lr}
 80273f6:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 80273f8:	30d0      	adds	r0, #208	@ 0xd0
 80273fa:	f7ff ff38 	bl	802726e <mg_iobuf_free>
  mg_close_conn(c);
 80273fe:	4620      	mov	r0, r4
 8027400:	f7ff ffac 	bl	802735c <mg_close_conn>
}
 8027404:	bd10      	pop	{r4, pc}
	...

08027408 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8027408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802740c:	4606      	mov	r6, r0
 802740e:	460d      	mov	r5, r1
 8027410:	4690      	mov	r8, r2
 8027412:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027414:	f7fc fa08 	bl	8023828 <mg_alloc_conn>
 8027418:	4604      	mov	r4, r0
 802741a:	2800      	cmp	r0, #0
 802741c:	d03f      	beq.n	802749e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802741e:	4629      	mov	r1, r5
 8027420:	f7fe fe1f 	bl	8026062 <mg_open_listener>
 8027424:	2800      	cmp	r0, #0
 8027426:	d04d      	beq.n	80274c4 <mg_listen+0xbc>
    c->is_listening = 1;
 8027428:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802742c:	f043 0301 	orr.w	r3, r3, #1
 8027430:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8027434:	2204      	movs	r2, #4
 8027436:	492f      	ldr	r1, [pc, #188]	@ (80274f4 <mg_listen+0xec>)
 8027438:	4628      	mov	r0, r5
 802743a:	f005 fc4e 	bl	802ccda <strncmp>
 802743e:	fab0 f080 	clz	r0, r0
 8027442:	0940      	lsrs	r0, r0, #5
 8027444:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027448:	f360 0300 	bfi	r3, r0, #0, #1
 802744c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8027450:	6833      	ldr	r3, [r6, #0]
 8027452:	6023      	str	r3, [r4, #0]
 8027454:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 8027456:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 802745a:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 802745c:	2200      	movs	r2, #0
 802745e:	2101      	movs	r1, #1
 8027460:	4620      	mov	r0, r4
 8027462:	f7fb fc6e 	bl	8022d42 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8027466:	4628      	mov	r0, r5
 8027468:	f7fe fb16 	bl	8025a98 <mg_url_is_ssl>
 802746c:	b128      	cbz	r0, 802747a <mg_listen+0x72>
 802746e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027476:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802747a:	4b1f      	ldr	r3, [pc, #124]	@ (80274f8 <mg_listen+0xf0>)
 802747c:	681b      	ldr	r3, [r3, #0]
 802747e:	2b02      	cmp	r3, #2
 8027480:	dd11      	ble.n	80274a6 <mg_listen+0x9e>
 8027482:	4b1e      	ldr	r3, [pc, #120]	@ (80274fc <mg_listen+0xf4>)
 8027484:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8027488:	491d      	ldr	r1, [pc, #116]	@ (8027500 <mg_listen+0xf8>)
 802748a:	2003      	movs	r0, #3
 802748c:	f7fe fff4 	bl	8026478 <mg_log_prefix>
 8027490:	462b      	mov	r3, r5
 8027492:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8027494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027496:	481b      	ldr	r0, [pc, #108]	@ (8027504 <mg_listen+0xfc>)
 8027498:	f7fc fe9c 	bl	80241d4 <mg_log>
  return c;
 802749c:	e003      	b.n	80274a6 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802749e:	4b16      	ldr	r3, [pc, #88]	@ (80274f8 <mg_listen+0xf0>)
 80274a0:	681b      	ldr	r3, [r3, #0]
 80274a2:	2b00      	cmp	r3, #0
 80274a4:	dc02      	bgt.n	80274ac <mg_listen+0xa4>
}
 80274a6:	4620      	mov	r0, r4
 80274a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 80274ac:	4b13      	ldr	r3, [pc, #76]	@ (80274fc <mg_listen+0xf4>)
 80274ae:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 80274b2:	4913      	ldr	r1, [pc, #76]	@ (8027500 <mg_listen+0xf8>)
 80274b4:	2001      	movs	r0, #1
 80274b6:	f7fe ffdf 	bl	8026478 <mg_log_prefix>
 80274ba:	4629      	mov	r1, r5
 80274bc:	4812      	ldr	r0, [pc, #72]	@ (8027508 <mg_listen+0x100>)
 80274be:	f7fc fe89 	bl	80241d4 <mg_log>
 80274c2:	e7f0      	b.n	80274a6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80274c4:	4b0c      	ldr	r3, [pc, #48]	@ (80274f8 <mg_listen+0xf0>)
 80274c6:	681b      	ldr	r3, [r3, #0]
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	dc04      	bgt.n	80274d6 <mg_listen+0xce>
    free(c);
 80274cc:	4620      	mov	r0, r4
 80274ce:	f7f3 fc05 	bl	801acdc <vPortFree>
    c = NULL;
 80274d2:	2400      	movs	r4, #0
 80274d4:	e7e7      	b.n	80274a6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80274d6:	4b09      	ldr	r3, [pc, #36]	@ (80274fc <mg_listen+0xf4>)
 80274d8:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 80274dc:	4908      	ldr	r1, [pc, #32]	@ (8027500 <mg_listen+0xf8>)
 80274de:	2001      	movs	r0, #1
 80274e0:	f7fe ffca 	bl	8026478 <mg_log_prefix>
 80274e4:	f006 fdc8 	bl	802e078 <__errno>
 80274e8:	6802      	ldr	r2, [r0, #0]
 80274ea:	4629      	mov	r1, r5
 80274ec:	4807      	ldr	r0, [pc, #28]	@ (802750c <mg_listen+0x104>)
 80274ee:	f7fc fe71 	bl	80241d4 <mg_log>
 80274f2:	e7eb      	b.n	80274cc <mg_listen+0xc4>
 80274f4:	0803b3b4 	.word	0x0803b3b4
 80274f8:	2000012c 	.word	0x2000012c
 80274fc:	0803ba50 	.word	0x0803ba50
 8027500:	0803b080 	.word	0x0803b080
 8027504:	0803b0dc 	.word	0x0803b0dc
 8027508:	0803b394 	.word	0x0803b394
 802750c:	0803b39c 	.word	0x0803b39c

08027510 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8027510:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8027512:	f7ff ff79 	bl	8027408 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8027516:	b110      	cbz	r0, 802751e <mg_http_listen+0xe>
 8027518:	4b01      	ldr	r3, [pc, #4]	@ (8027520 <mg_http_listen+0x10>)
 802751a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802751e:	bd08      	pop	{r3, pc}
 8027520:	080266fd 	.word	0x080266fd

08027524 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8027524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027528:	4605      	mov	r5, r0
 802752a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802752c:	6843      	ldr	r3, [r0, #4]
 802752e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027530:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027534:	f013 0301 	ands.w	r3, r3, #1
 8027538:	d02c      	beq.n	8027594 <trim_len+0x70>
 802753a:	2608      	movs	r6, #8
  size_t max_headers_len =
 802753c:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027540:	bb53      	cbnz	r3, 8027598 <trim_len+0x74>
 8027542:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 8027544:	eb08 0304 	add.w	r3, r8, r4
 8027548:	69ba      	ldr	r2, [r7, #24]
 802754a:	4293      	cmp	r3, r2
 802754c:	d901      	bls.n	8027552 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 802754e:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 8027552:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8027556:	42b3      	cmp	r3, r6
 8027558:	d205      	bcs.n	8027566 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802755a:	4b1c      	ldr	r3, [pc, #112]	@ (80275cc <trim_len+0xa8>)
 802755c:	681b      	ldr	r3, [r3, #0]
 802755e:	2b00      	cmp	r3, #0
 8027560:	dc1c      	bgt.n	802759c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 8027562:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8027566:	eb04 0308 	add.w	r3, r4, r8
 802756a:	3b0e      	subs	r3, #14
 802756c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8027570:	4293      	cmp	r3, r2
 8027572:	d90c      	bls.n	802758e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8027574:	eba2 0208 	sub.w	r2, r2, r8
 8027578:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 802757c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027580:	f013 0f01 	tst.w	r3, #1
 8027584:	d003      	beq.n	802758e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027586:	4b11      	ldr	r3, [pc, #68]	@ (80275cc <trim_len+0xa8>)
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	2b00      	cmp	r3, #0
 802758c:	dc12      	bgt.n	80275b4 <trim_len+0x90>
}
 802758e:	4620      	mov	r0, r4
 8027590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027594:	263c      	movs	r6, #60	@ 0x3c
 8027596:	e7d1      	b.n	802753c <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027598:	2644      	movs	r6, #68	@ 0x44
 802759a:	e7d3      	b.n	8027544 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802759c:	4b0c      	ldr	r3, [pc, #48]	@ (80275d0 <trim_len+0xac>)
 802759e:	f241 528c 	movw	r2, #5516	@ 0x158c
 80275a2:	490c      	ldr	r1, [pc, #48]	@ (80275d4 <trim_len+0xb0>)
 80275a4:	2001      	movs	r0, #1
 80275a6:	f7fe ff67 	bl	8026478 <mg_log_prefix>
 80275aa:	4631      	mov	r1, r6
 80275ac:	480a      	ldr	r0, [pc, #40]	@ (80275d8 <trim_len+0xb4>)
 80275ae:	f7fc fe11 	bl	80241d4 <mg_log>
 80275b2:	e7d6      	b.n	8027562 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80275b4:	4b06      	ldr	r3, [pc, #24]	@ (80275d0 <trim_len+0xac>)
 80275b6:	f241 5293 	movw	r2, #5523	@ 0x1593
 80275ba:	4906      	ldr	r1, [pc, #24]	@ (80275d4 <trim_len+0xb0>)
 80275bc:	2001      	movs	r0, #1
 80275be:	f7fe ff5b 	bl	8026478 <mg_log_prefix>
 80275c2:	4806      	ldr	r0, [pc, #24]	@ (80275dc <trim_len+0xb8>)
 80275c4:	f7fc fe06 	bl	80241d4 <mg_log>
 80275c8:	e7e1      	b.n	802758e <trim_len+0x6a>
 80275ca:	bf00      	nop
 80275cc:	2000012c 	.word	0x2000012c
 80275d0:	0803ba44 	.word	0x0803ba44
 80275d4:	0803b080 	.word	0x0803b080
 80275d8:	0803b3bc 	.word	0x0803b3bc
 80275dc:	0803b3e8 	.word	0x0803b3e8

080275e0 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 80275e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80275e2:	b085      	sub	sp, #20
 80275e4:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80275e6:	6843      	ldr	r3, [r0, #4]
 80275e8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80275ea:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 80275ec:	68ab      	ldr	r3, [r5, #8]
 80275ee:	b123      	cbz	r3, 80275fa <mg_send+0x1a>
 80275f0:	460e      	mov	r6, r1
 80275f2:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80275f6:	2b03      	cmp	r3, #3
 80275f8:	d006      	beq.n	8027608 <mg_send+0x28>
    mg_error(c, "net down");
 80275fa:	4913      	ldr	r1, [pc, #76]	@ (8027648 <mg_send+0x68>)
 80275fc:	4620      	mov	r0, r4
 80275fe:	f7ff f823 	bl	8026648 <mg_error>
  bool res = false;
 8027602:	2000      	movs	r0, #0
}
 8027604:	b005      	add	sp, #20
 8027606:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8027608:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802760c:	f013 0f01 	tst.w	r3, #1
 8027610:	d010      	beq.n	8027634 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8027612:	4611      	mov	r1, r2
 8027614:	f7ff ff86 	bl	8027524 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8027618:	68aa      	ldr	r2, [r5, #8]
 802761a:	9003      	str	r0, [sp, #12]
 802761c:	9602      	str	r6, [sp, #8]
 802761e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027620:	9301      	str	r3, [sp, #4]
 8027622:	9700      	str	r7, [sp, #0]
 8027624:	8b23      	ldrh	r3, [r4, #24]
 8027626:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 802762a:	4628      	mov	r0, r5
 802762c:	f7fe fc97 	bl	8025f5e <tx_udp>
    res = true;
 8027630:	2001      	movs	r0, #1
 8027632:	e7e7      	b.n	8027604 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8027634:	4613      	mov	r3, r2
 8027636:	460a      	mov	r2, r1
 8027638:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 802763a:	3048      	adds	r0, #72	@ 0x48
 802763c:	f7ff fde5 	bl	802720a <mg_iobuf_add>
 8027640:	3800      	subs	r0, #0
 8027642:	bf18      	it	ne
 8027644:	2001      	movne	r0, #1
 8027646:	e7dd      	b.n	8027604 <mg_send+0x24>
 8027648:	0803b414 	.word	0x0803b414

0802764c <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 802764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802764e:	b0c5      	sub	sp, #276	@ 0x114
 8027650:	4606      	mov	r6, r0
 8027652:	460d      	mov	r5, r1
 8027654:	4614      	mov	r4, r2
 8027656:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8027658:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 802765c:	2100      	movs	r1, #0
 802765e:	a801      	add	r0, sp, #4
 8027660:	f005 fb06 	bl	802cc70 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8027664:	4620      	mov	r0, r4
 8027666:	f7fe fbc5 	bl	8025df4 <mg_ntohs>
 802766a:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 802766e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8027672:	f7fe fbbf 	bl	8025df4 <mg_ntohs>
 8027676:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 802767a:	2001      	movs	r0, #1
 802767c:	f7fe fbba 	bl	8025df4 <mg_ntohs>
 8027680:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027684:	f04f 0c00 	mov.w	ip, #0
 8027688:	4664      	mov	r4, ip
 802768a:	e015      	b.n	80276b8 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 802768c:	eba4 020c 	sub.w	r2, r4, ip
 8027690:	ab01      	add	r3, sp, #4
 8027692:	4463      	add	r3, ip
 8027694:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8027696:	f10c 0309 	add.w	r3, ip, #9
 802769a:	aa01      	add	r2, sp, #4
 802769c:	18d0      	adds	r0, r2, r3
 802769e:	6829      	ldr	r1, [r5, #0]
 80276a0:	eba4 020c 	sub.w	r2, r4, ip
 80276a4:	4461      	add	r1, ip
 80276a6:	3004      	adds	r0, #4
 80276a8:	f006 fd1e 	bl	802e0e8 <memcpy>
      n = i + 1;
 80276ac:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 80276b0:	686a      	ldr	r2, [r5, #4]
 80276b2:	42a2      	cmp	r2, r4
 80276b4:	d90a      	bls.n	80276cc <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80276b6:	3401      	adds	r4, #1
 80276b8:	2cfa      	cmp	r4, #250	@ 0xfa
 80276ba:	d807      	bhi.n	80276cc <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 80276bc:	682b      	ldr	r3, [r5, #0]
 80276be:	5d1a      	ldrb	r2, [r3, r4]
 80276c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80276c2:	d0e3      	beq.n	802768c <mg_dns_send+0x40>
 80276c4:	686b      	ldr	r3, [r5, #4]
 80276c6:	42a3      	cmp	r3, r4
 80276c8:	d8f2      	bhi.n	80276b0 <mg_dns_send+0x64>
 80276ca:	e7df      	b.n	802768c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80276cc:	f10c 0308 	add.w	r3, ip, #8
 80276d0:	aa01      	add	r2, sp, #4
 80276d2:	4413      	add	r3, r2
 80276d4:	4a0a      	ldr	r2, [pc, #40]	@ (8027700 <mg_dns_send+0xb4>)
 80276d6:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 80276da:	6058      	str	r0, [r3, #4]
 80276dc:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 80276e0:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80276e2:	b12f      	cbz	r7, 80276f0 <mg_dns_send+0xa4>
 80276e4:	f10c 0302 	add.w	r3, ip, #2
 80276e8:	aa01      	add	r2, sp, #4
 80276ea:	4413      	add	r3, r2
 80276ec:	221c      	movs	r2, #28
 80276ee:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80276f0:	f10c 0211 	add.w	r2, ip, #17
 80276f4:	a901      	add	r1, sp, #4
 80276f6:	4630      	mov	r0, r6
 80276f8:	f7ff ff72 	bl	80275e0 <mg_send>
}
 80276fc:	b045      	add	sp, #276	@ 0x114
 80276fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027700:	08035fbc 	.word	0x08035fbc

08027704 <mg_mqtt_send_header>:
                         uint32_t len) {
 8027704:	b500      	push	{lr}
 8027706:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8027708:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802770c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8027710:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8027714:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8027718:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 802771a:	2b7f      	cmp	r3, #127	@ 0x7f
 802771c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8027720:	d90e      	bls.n	8027740 <mg_mqtt_send_header+0x3c>
 8027722:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8027726:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802772a:	f10d 0105 	add.w	r1, sp, #5
 802772e:	428a      	cmp	r2, r1
 8027730:	d3f0      	bcc.n	8027714 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8027732:	4669      	mov	r1, sp
 8027734:	1a52      	subs	r2, r2, r1
 8027736:	f7ff ff53 	bl	80275e0 <mg_send>
}
 802773a:	b003      	add	sp, #12
 802773c:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8027740:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8027742:	e7f6      	b.n	8027732 <mg_mqtt_send_header+0x2e>

08027744 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8027744:	b500      	push	{lr}
 8027746:	b083      	sub	sp, #12
 8027748:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 802774a:	2204      	movs	r2, #4
 802774c:	eb0d 0102 	add.w	r1, sp, r2
 8027750:	f7ff ff46 	bl	80275e0 <mg_send>
}
 8027754:	b003      	add	sp, #12
 8027756:	f85d fb04 	ldr.w	pc, [sp], #4

0802775a <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 802775a:	b500      	push	{lr}
 802775c:	b083      	sub	sp, #12
 802775e:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8027762:	2202      	movs	r2, #2
 8027764:	f10d 0106 	add.w	r1, sp, #6
 8027768:	f7ff ff3a 	bl	80275e0 <mg_send>
}
 802776c:	b003      	add	sp, #12
 802776e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08027774 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8027774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027778:	b083      	sub	sp, #12
 802777a:	4606      	mov	r6, r0
 802777c:	460f      	mov	r7, r1
 802777e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8027780:	4611      	mov	r1, r2
 8027782:	4638      	mov	r0, r7
 8027784:	f7f9 fdda 	bl	802133c <get_properties_length>
 8027788:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802778a:	2500      	movs	r5, #0
 802778c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 802778e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8027790:	4668      	mov	r0, sp
 8027792:	f7f9 fd84 	bl	802129e <encode_varint>
 8027796:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8027798:	4669      	mov	r1, sp
 802779a:	4630      	mov	r0, r6
 802779c:	f7ff ff20 	bl	80275e0 <mg_send>
  for (i = 0; i < nprops; i++) {
 80277a0:	e018      	b.n	80277d4 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 80277a2:	89a0      	ldrh	r0, [r4, #12]
 80277a4:	f7fe fb26 	bl	8025df4 <mg_ntohs>
 80277a8:	4601      	mov	r1, r0
 80277aa:	4630      	mov	r0, r6
 80277ac:	f7ff ffd5 	bl	802775a <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80277b0:	68e2      	ldr	r2, [r4, #12]
 80277b2:	68a1      	ldr	r1, [r4, #8]
 80277b4:	4630      	mov	r0, r6
 80277b6:	f7ff ff13 	bl	80275e0 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80277ba:	8aa0      	ldrh	r0, [r4, #20]
 80277bc:	f7fe fb1a 	bl	8025df4 <mg_ntohs>
 80277c0:	4601      	mov	r1, r0
 80277c2:	4630      	mov	r0, r6
 80277c4:	f7ff ffc9 	bl	802775a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80277c8:	6962      	ldr	r2, [r4, #20]
 80277ca:	6921      	ldr	r1, [r4, #16]
 80277cc:	4630      	mov	r0, r6
 80277ce:	f7ff ff07 	bl	80275e0 <mg_send>
  for (i = 0; i < nprops; i++) {
 80277d2:	3501      	adds	r5, #1
 80277d4:	454d      	cmp	r5, r9
 80277d6:	d25b      	bcs.n	8027890 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 80277d8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80277dc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80277e0:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80277e4:	2201      	movs	r2, #1
 80277e6:	4621      	mov	r1, r4
 80277e8:	4630      	mov	r0, r6
 80277ea:	f7ff fef9 	bl	80275e0 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80277ee:	f817 0008 	ldrb.w	r0, [r7, r8]
 80277f2:	f7f9 fd8f 	bl	8021314 <mqtt_prop_type_by_id>
 80277f6:	2806      	cmp	r0, #6
 80277f8:	d8eb      	bhi.n	80277d2 <mg_send_mqtt_properties+0x5e>
 80277fa:	a301      	add	r3, pc, #4	@ (adr r3, 8027800 <mg_send_mqtt_properties+0x8c>)
 80277fc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8027800:	0802781d 	.word	0x0802781d
 8027804:	08027849 	.word	0x08027849
 8027808:	080277a3 	.word	0x080277a3
 802780c:	08027863 	.word	0x08027863
 8027810:	0802787d 	.word	0x0802787d
 8027814:	08027839 	.word	0x08027839
 8027818:	08027829 	.word	0x08027829
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802781c:	2201      	movs	r2, #1
 802781e:	1d21      	adds	r1, r4, #4
 8027820:	4630      	mov	r0, r6
 8027822:	f7ff fedd 	bl	80275e0 <mg_send>
        break;
 8027826:	e7d4      	b.n	80277d2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8027828:	88a0      	ldrh	r0, [r4, #4]
 802782a:	f7fe fae3 	bl	8025df4 <mg_ntohs>
 802782e:	4601      	mov	r1, r0
 8027830:	4630      	mov	r0, r6
 8027832:	f7ff ff92 	bl	802775a <mg_send_u16>
        break;
 8027836:	e7cc      	b.n	80277d2 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8027838:	6860      	ldr	r0, [r4, #4]
 802783a:	f7fe fa43 	bl	8025cc4 <mg_ntohl>
 802783e:	4601      	mov	r1, r0
 8027840:	4630      	mov	r0, r6
 8027842:	f7ff ff7f 	bl	8027744 <mg_send_u32>
        break;
 8027846:	e7c4      	b.n	80277d2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027848:	8aa0      	ldrh	r0, [r4, #20]
 802784a:	f7fe fad3 	bl	8025df4 <mg_ntohs>
 802784e:	4601      	mov	r1, r0
 8027850:	4630      	mov	r0, r6
 8027852:	f7ff ff82 	bl	802775a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027856:	6962      	ldr	r2, [r4, #20]
 8027858:	6921      	ldr	r1, [r4, #16]
 802785a:	4630      	mov	r0, r6
 802785c:	f7ff fec0 	bl	80275e0 <mg_send>
        break;
 8027860:	e7b7      	b.n	80277d2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027862:	8aa0      	ldrh	r0, [r4, #20]
 8027864:	f7fe fac6 	bl	8025df4 <mg_ntohs>
 8027868:	4601      	mov	r1, r0
 802786a:	4630      	mov	r0, r6
 802786c:	f7ff ff75 	bl	802775a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027870:	6962      	ldr	r2, [r4, #20]
 8027872:	6921      	ldr	r1, [r4, #16]
 8027874:	4630      	mov	r0, r6
 8027876:	f7ff feb3 	bl	80275e0 <mg_send>
        break;
 802787a:	e7aa      	b.n	80277d2 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 802787c:	6861      	ldr	r1, [r4, #4]
 802787e:	a801      	add	r0, sp, #4
 8027880:	f7f9 fd0d 	bl	802129e <encode_varint>
 8027884:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8027886:	a901      	add	r1, sp, #4
 8027888:	4630      	mov	r0, r6
 802788a:	f7ff fea9 	bl	80275e0 <mg_send>
        break;
 802788e:	e7a0      	b.n	80277d2 <mg_send_mqtt_properties+0x5e>
}
 8027890:	b003      	add	sp, #12
 8027892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027896:	bf00      	nop

08027898 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027898:	b5f0      	push	{r4, r5, r6, r7, lr}
 802789a:	b08b      	sub	sp, #44	@ 0x2c
 802789c:	4605      	mov	r5, r0
 802789e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 80278a0:	ab02      	add	r3, sp, #8
 80278a2:	f101 0210 	add.w	r2, r1, #16
 80278a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80278aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80278ae:	2300      	movs	r3, #0
 80278b0:	f88d 3000 	strb.w	r3, [sp]
 80278b4:	2204      	movs	r2, #4
 80278b6:	f88d 2001 	strb.w	r2, [sp, #1]
 80278ba:	224d      	movs	r2, #77	@ 0x4d
 80278bc:	f88d 2002 	strb.w	r2, [sp, #2]
 80278c0:	2251      	movs	r2, #81	@ 0x51
 80278c2:	f88d 2003 	strb.w	r2, [sp, #3]
 80278c6:	2254      	movs	r2, #84	@ 0x54
 80278c8:	f88d 2004 	strb.w	r2, [sp, #4]
 80278cc:	f88d 2005 	strb.w	r2, [sp, #5]
 80278d0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 80278d4:	f88d 2006 	strb.w	r2, [sp, #6]
 80278d8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 80278dc:	2900      	cmp	r1, #0
 80278de:	f000 809f 	beq.w	8027a20 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80278e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80278e6:	b913      	cbnz	r3, 80278ee <mg_mqtt_login+0x56>
 80278e8:	2304      	movs	r3, #4
 80278ea:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 80278ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80278f2:	2b05      	cmp	r3, #5
 80278f4:	bf14      	ite	ne
 80278f6:	2300      	movne	r3, #0
 80278f8:	2301      	moveq	r3, #1
 80278fa:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 80278fe:	f363 0282 	bfi	r2, r3, #2, #1
 8027902:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8027906:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802790a:	00d2      	lsls	r2, r2, #3
 802790c:	f002 0218 	and.w	r2, r2, #24
 8027910:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8027914:	6863      	ldr	r3, [r4, #4]
 8027916:	2b00      	cmp	r3, #0
 8027918:	f000 808e 	beq.w	8027a38 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 802791c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 802791e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8027922:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8027926:	68e2      	ldr	r2, [r4, #12]
 8027928:	b13a      	cbz	r2, 802793a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 802792a:	441a      	add	r2, r3
 802792c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 802792e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8027936:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 802793a:	69e2      	ldr	r2, [r4, #28]
 802793c:	b14a      	cbz	r2, 8027952 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 802793e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8027940:	440a      	add	r2, r1
 8027942:	441a      	add	r2, r3
 8027944:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8027946:	f89d 2007 	ldrb.w	r2, [sp, #7]
 802794a:	f042 0204 	orr.w	r2, r2, #4
 802794e:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8027952:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8027956:	b90a      	cbnz	r2, 802795c <mg_mqtt_login+0xc4>
 8027958:	9a03      	ldr	r2, [sp, #12]
 802795a:	b92a      	cbnz	r2, 8027968 <mg_mqtt_login+0xd0>
 802795c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027960:	f042 0202 	orr.w	r2, r2, #2
 8027964:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8027968:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 802796c:	b12a      	cbz	r2, 802797a <mg_mqtt_login+0xe2>
 802796e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027972:	f042 0220 	orr.w	r2, r2, #32
 8027976:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 802797a:	9f03      	ldr	r7, [sp, #12]
 802797c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 802797e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027982:	f013 0f04 	tst.w	r3, #4
 8027986:	d159      	bne.n	8027a3c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8027988:	4633      	mov	r3, r6
 802798a:	2200      	movs	r2, #0
 802798c:	2101      	movs	r1, #1
 802798e:	4628      	mov	r0, r5
 8027990:	f7ff feb8 	bl	8027704 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8027994:	2208      	movs	r2, #8
 8027996:	4669      	mov	r1, sp
 8027998:	4628      	mov	r0, r5
 802799a:	f7ff fe21 	bl	80275e0 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 802799e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80279a0:	f7fe fa28 	bl	8025df4 <mg_ntohs>
 80279a4:	4601      	mov	r1, r0
 80279a6:	4628      	mov	r0, r5
 80279a8:	f7ff fed7 	bl	802775a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80279ac:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80279b0:	f013 0f04 	tst.w	r3, #4
 80279b4:	d152      	bne.n	8027a5c <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 80279b6:	b2b8      	uxth	r0, r7
 80279b8:	f7fe fa1c 	bl	8025df4 <mg_ntohs>
 80279bc:	4601      	mov	r1, r0
 80279be:	4628      	mov	r0, r5
 80279c0:	f7ff fecb 	bl	802775a <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 80279c4:	463a      	mov	r2, r7
 80279c6:	9902      	ldr	r1, [sp, #8]
 80279c8:	4628      	mov	r0, r5
 80279ca:	f7ff fe09 	bl	80275e0 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 80279ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80279d2:	f013 0f04 	tst.w	r3, #4
 80279d6:	d01c      	beq.n	8027a12 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 80279d8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80279dc:	f013 0f04 	tst.w	r3, #4
 80279e0:	d142      	bne.n	8027a68 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80279e2:	8ba0      	ldrh	r0, [r4, #28]
 80279e4:	f7fe fa06 	bl	8025df4 <mg_ntohs>
 80279e8:	4601      	mov	r1, r0
 80279ea:	4628      	mov	r0, r5
 80279ec:	f7ff feb5 	bl	802775a <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 80279f0:	69e2      	ldr	r2, [r4, #28]
 80279f2:	69a1      	ldr	r1, [r4, #24]
 80279f4:	4628      	mov	r0, r5
 80279f6:	f7ff fdf3 	bl	80275e0 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 80279fa:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80279fc:	f7fe f9fa 	bl	8025df4 <mg_ntohs>
 8027a00:	4601      	mov	r1, r0
 8027a02:	4628      	mov	r0, r5
 8027a04:	f7ff fea9 	bl	802775a <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027a08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8027a0a:	6a21      	ldr	r1, [r4, #32]
 8027a0c:	4628      	mov	r0, r5
 8027a0e:	f7ff fde7 	bl	80275e0 <mg_send>
  if (opts->user.len > 0) {
 8027a12:	6860      	ldr	r0, [r4, #4]
 8027a14:	bb70      	cbnz	r0, 8027a74 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027a16:	68e0      	ldr	r0, [r4, #12]
 8027a18:	2800      	cmp	r0, #0
 8027a1a:	d138      	bne.n	8027a8e <mg_mqtt_login+0x1f6>
}
 8027a1c:	b00b      	add	sp, #44	@ 0x2c
 8027a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027a20:	2114      	movs	r1, #20
 8027a22:	a804      	add	r0, sp, #16
 8027a24:	f7fe f922 	bl	8025c6c <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027a28:	2300      	movs	r3, #0
 8027a2a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 8027a2e:	a904      	add	r1, sp, #16
 8027a30:	a802      	add	r0, sp, #8
 8027a32:	f7fc fdad 	bl	8024590 <mg_str_s>
 8027a36:	e754      	b.n	80278e2 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8027a38:	230c      	movs	r3, #12
 8027a3a:	e774      	b.n	8027926 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 8027a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027a3e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027a40:	f7f9 fcc0 	bl	80213c4 <get_props_size>
 8027a44:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8027a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8027a4a:	f013 0f04 	tst.w	r3, #4
 8027a4e:	d09b      	beq.n	8027988 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8027a50:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8027a52:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027a54:	f7f9 fcb6 	bl	80213c4 <get_props_size>
 8027a58:	4406      	add	r6, r0
 8027a5a:	e795      	b.n	8027988 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027a5c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8027a5e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027a60:	4628      	mov	r0, r5
 8027a62:	f7ff fe87 	bl	8027774 <mg_send_mqtt_properties>
 8027a66:	e7a6      	b.n	80279b6 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8027a68:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8027a6a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8027a6c:	4628      	mov	r0, r5
 8027a6e:	f7ff fe81 	bl	8027774 <mg_send_mqtt_properties>
 8027a72:	e7b6      	b.n	80279e2 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8027a74:	b280      	uxth	r0, r0
 8027a76:	f7fe f9bd 	bl	8025df4 <mg_ntohs>
 8027a7a:	4601      	mov	r1, r0
 8027a7c:	4628      	mov	r0, r5
 8027a7e:	f7ff fe6c 	bl	802775a <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8027a82:	6862      	ldr	r2, [r4, #4]
 8027a84:	6821      	ldr	r1, [r4, #0]
 8027a86:	4628      	mov	r0, r5
 8027a88:	f7ff fdaa 	bl	80275e0 <mg_send>
 8027a8c:	e7c3      	b.n	8027a16 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8027a8e:	b280      	uxth	r0, r0
 8027a90:	f7fe f9b0 	bl	8025df4 <mg_ntohs>
 8027a94:	4601      	mov	r1, r0
 8027a96:	4628      	mov	r0, r5
 8027a98:	f7ff fe5f 	bl	802775a <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8027a9c:	68e2      	ldr	r2, [r4, #12]
 8027a9e:	68a1      	ldr	r1, [r4, #8]
 8027aa0:	4628      	mov	r0, r5
 8027aa2:	f7ff fd9d 	bl	80275e0 <mg_send>
}
 8027aa6:	e7b9      	b.n	8027a1c <mg_mqtt_login+0x184>

08027aa8 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027aa8:	b530      	push	{r4, r5, lr}
 8027aaa:	b083      	sub	sp, #12
 8027aac:	4604      	mov	r4, r0
 8027aae:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8027ab0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027ab4:	f003 0303 	and.w	r3, r3, #3
 8027ab8:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8027abc:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027ac0:	f013 0f04 	tst.w	r3, #4
 8027ac4:	d133      	bne.n	8027b2e <mg_mqtt_sub+0x86>
 8027ac6:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8027ac8:	69eb      	ldr	r3, [r5, #28]
 8027aca:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8027acc:	3305      	adds	r3, #5
 8027ace:	2202      	movs	r2, #2
 8027ad0:	2108      	movs	r1, #8
 8027ad2:	4620      	mov	r0, r4
 8027ad4:	f7ff fe16 	bl	8027704 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027ad8:	6862      	ldr	r2, [r4, #4]
 8027ada:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027adc:	3301      	adds	r3, #1
 8027ade:	b29b      	uxth	r3, r3
 8027ae0:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027ae2:	b91b      	cbnz	r3, 8027aec <mg_mqtt_sub+0x44>
 8027ae4:	6862      	ldr	r2, [r4, #4]
 8027ae6:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027ae8:	3301      	adds	r3, #1
 8027aea:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8027aec:	6863      	ldr	r3, [r4, #4]
 8027aee:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027af0:	f7fe f980 	bl	8025df4 <mg_ntohs>
 8027af4:	4601      	mov	r1, r0
 8027af6:	4620      	mov	r0, r4
 8027af8:	f7ff fe2f 	bl	802775a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027afc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027b00:	f013 0f04 	tst.w	r3, #4
 8027b04:	d118      	bne.n	8027b38 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027b06:	8ba8      	ldrh	r0, [r5, #28]
 8027b08:	f7fe f974 	bl	8025df4 <mg_ntohs>
 8027b0c:	4601      	mov	r1, r0
 8027b0e:	4620      	mov	r0, r4
 8027b10:	f7ff fe23 	bl	802775a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027b14:	69ea      	ldr	r2, [r5, #28]
 8027b16:	69a9      	ldr	r1, [r5, #24]
 8027b18:	4620      	mov	r0, r4
 8027b1a:	f7ff fd61 	bl	80275e0 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8027b1e:	2201      	movs	r2, #1
 8027b20:	f10d 0107 	add.w	r1, sp, #7
 8027b24:	4620      	mov	r0, r4
 8027b26:	f7ff fd5b 	bl	80275e0 <mg_send>
}
 8027b2a:	b003      	add	sp, #12
 8027b2c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8027b2e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027b30:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8027b32:	f7f9 fc47 	bl	80213c4 <get_props_size>
 8027b36:	e7c7      	b.n	8027ac8 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027b38:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8027b3a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8027b3c:	4620      	mov	r0, r4
 8027b3e:	f7ff fe19 	bl	8027774 <mg_send_mqtt_properties>
 8027b42:	e7e0      	b.n	8027b06 <mg_mqtt_sub+0x5e>

08027b44 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b48:	b083      	sub	sp, #12
 8027b4a:	4605      	mov	r5, r0
 8027b4c:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 8027b4e:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027b52:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027b56:	005b      	lsls	r3, r3, #1
 8027b58:	f003 0306 	and.w	r3, r3, #6
 8027b5c:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8027b60:	2a00      	cmp	r2, #0
 8027b62:	d057      	beq.n	8027c14 <mg_mqtt_pub+0xd0>
 8027b64:	2201      	movs	r2, #1
 8027b66:	ea43 0a02 	orr.w	sl, r3, r2
 8027b6a:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 8027b6c:	69e7      	ldr	r7, [r4, #28]
 8027b6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027b70:	441f      	add	r7, r3
 8027b72:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027b76:	4b3a      	ldr	r3, [pc, #232]	@ (8027c60 <mg_mqtt_pub+0x11c>)
 8027b78:	681b      	ldr	r3, [r3, #0]
 8027b7a:	2b02      	cmp	r3, #2
 8027b7c:	dc4c      	bgt.n	8027c18 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 8027b7e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8027b82:	f1bb 0f00 	cmp.w	fp, #0
 8027b86:	d001      	beq.n	8027b8c <mg_mqtt_pub+0x48>
 8027b88:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8027b8c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027b90:	f013 0f04 	tst.w	r3, #4
 8027b94:	d152      	bne.n	8027c3c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8027b96:	f1bb 0f00 	cmp.w	fp, #0
 8027b9a:	d004      	beq.n	8027ba6 <mg_mqtt_pub+0x62>
 8027b9c:	f1b8 0f00 	cmp.w	r8, #0
 8027ba0:	d001      	beq.n	8027ba6 <mg_mqtt_pub+0x62>
 8027ba2:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8027ba6:	464b      	mov	r3, r9
 8027ba8:	4632      	mov	r2, r6
 8027baa:	2103      	movs	r1, #3
 8027bac:	4628      	mov	r0, r5
 8027bae:	f7ff fda9 	bl	8027704 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027bb2:	8ba0      	ldrh	r0, [r4, #28]
 8027bb4:	f7fe f91e 	bl	8025df4 <mg_ntohs>
 8027bb8:	4601      	mov	r1, r0
 8027bba:	4628      	mov	r0, r5
 8027bbc:	f7ff fdcd 	bl	802775a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027bc0:	69e2      	ldr	r2, [r4, #28]
 8027bc2:	69a1      	ldr	r1, [r4, #24]
 8027bc4:	4628      	mov	r0, r5
 8027bc6:	f7ff fd0b 	bl	80275e0 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8027bca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8027bce:	b1b3      	cbz	r3, 8027bfe <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8027bd0:	f1b8 0f00 	cmp.w	r8, #0
 8027bd4:	d10c      	bne.n	8027bf0 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8027bd6:	686a      	ldr	r2, [r5, #4]
 8027bd8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027bda:	3301      	adds	r3, #1
 8027bdc:	b29b      	uxth	r3, r3
 8027bde:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8027be0:	b91b      	cbnz	r3, 8027bea <mg_mqtt_pub+0xa6>
 8027be2:	686a      	ldr	r2, [r5, #4]
 8027be4:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8027be6:	3301      	adds	r3, #1
 8027be8:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8027bea:	686b      	ldr	r3, [r5, #4]
 8027bec:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8027bf0:	4640      	mov	r0, r8
 8027bf2:	f7fe f8ff 	bl	8025df4 <mg_ntohs>
 8027bf6:	4601      	mov	r1, r0
 8027bf8:	4628      	mov	r0, r5
 8027bfa:	f7ff fdae 	bl	802775a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027bfe:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027c02:	f013 0f04 	tst.w	r3, #4
 8027c06:	d11f      	bne.n	8027c48 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027c08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8027c0a:	bb1a      	cbnz	r2, 8027c54 <mg_mqtt_pub+0x110>
}
 8027c0c:	4640      	mov	r0, r8
 8027c0e:	b003      	add	sp, #12
 8027c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027c14:	2200      	movs	r2, #0
 8027c16:	e7a6      	b.n	8027b66 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027c18:	4b12      	ldr	r3, [pc, #72]	@ (8027c64 <mg_mqtt_pub+0x120>)
 8027c1a:	f241 123c 	movw	r2, #4412	@ 0x113c
 8027c1e:	4912      	ldr	r1, [pc, #72]	@ (8027c68 <mg_mqtt_pub+0x124>)
 8027c20:	2003      	movs	r0, #3
 8027c22:	f7fe fc29 	bl	8026478 <mg_log_prefix>
 8027c26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027c28:	6a22      	ldr	r2, [r4, #32]
 8027c2a:	9201      	str	r2, [sp, #4]
 8027c2c:	9300      	str	r3, [sp, #0]
 8027c2e:	69a3      	ldr	r3, [r4, #24]
 8027c30:	69e2      	ldr	r2, [r4, #28]
 8027c32:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8027c34:	480d      	ldr	r0, [pc, #52]	@ (8027c6c <mg_mqtt_pub+0x128>)
 8027c36:	f7fc facd 	bl	80241d4 <mg_log>
 8027c3a:	e7a0      	b.n	8027b7e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8027c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027c3e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027c40:	f7f9 fbc0 	bl	80213c4 <get_props_size>
 8027c44:	4481      	add	r9, r0
 8027c46:	e7a6      	b.n	8027b96 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027c48:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8027c4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027c4c:	4628      	mov	r0, r5
 8027c4e:	f7ff fd91 	bl	8027774 <mg_send_mqtt_properties>
 8027c52:	e7d9      	b.n	8027c08 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027c54:	6a21      	ldr	r1, [r4, #32]
 8027c56:	4628      	mov	r0, r5
 8027c58:	f7ff fcc2 	bl	80275e0 <mg_send>
 8027c5c:	e7d6      	b.n	8027c0c <mg_mqtt_pub+0xc8>
 8027c5e:	bf00      	nop
 8027c60:	2000012c 	.word	0x2000012c
 8027c64:	0803ba80 	.word	0x0803ba80
 8027c68:	0803b080 	.word	0x0803b080
 8027c6c:	0803b420 	.word	0x0803b420

08027c70 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027c70:	b530      	push	{r4, r5, lr}
 8027c72:	b08f      	sub	sp, #60	@ 0x3c
 8027c74:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8027c76:	2907      	cmp	r1, #7
 8027c78:	f000 808f 	beq.w	8027d9a <mqtt_cb+0x12a>
}
 8027c7c:	b00f      	add	sp, #60	@ 0x3c
 8027c7e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027c80:	2204      	movs	r2, #4
 8027c82:	e091      	b.n	8027da8 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8027c84:	4b73      	ldr	r3, [pc, #460]	@ (8027e54 <mqtt_cb+0x1e4>)
 8027c86:	681b      	ldr	r3, [r3, #0]
 8027c88:	2b00      	cmp	r3, #0
 8027c8a:	dc06      	bgt.n	8027c9a <mqtt_cb+0x2a>
        c->is_closing = 1;
 8027c8c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027c90:	f043 0320 	orr.w	r3, r3, #32
 8027c94:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8027c98:	e7f0      	b.n	8027c7c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8027c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8027e58 <mqtt_cb+0x1e8>)
 8027c9c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8027ca0:	496e      	ldr	r1, [pc, #440]	@ (8027e5c <mqtt_cb+0x1ec>)
 8027ca2:	2001      	movs	r0, #1
 8027ca4:	f7fe fbe8 	bl	8026478 <mg_log_prefix>
 8027ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027caa:	486d      	ldr	r0, [pc, #436]	@ (8027e60 <mqtt_cb+0x1f0>)
 8027cac:	f7fc fa92 	bl	80241d4 <mg_log>
 8027cb0:	e7ec      	b.n	8027c8c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027cb2:	4b69      	ldr	r3, [pc, #420]	@ (8027e58 <mqtt_cb+0x1e8>)
 8027cb4:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8027cb8:	4968      	ldr	r1, [pc, #416]	@ (8027e5c <mqtt_cb+0x1ec>)
 8027cba:	2004      	movs	r0, #4
 8027cbc:	f7fe fbdc 	bl	8026478 <mg_log_prefix>
 8027cc0:	9b06      	ldr	r3, [sp, #24]
 8027cc2:	9301      	str	r3, [sp, #4]
 8027cc4:	9b07      	ldr	r3, [sp, #28]
 8027cc6:	9300      	str	r3, [sp, #0]
 8027cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cca:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8027cce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027cd0:	4864      	ldr	r0, [pc, #400]	@ (8027e64 <mqtt_cb+0x1f4>)
 8027cd2:	f7fc fa7f 	bl	80241d4 <mg_log>
 8027cd6:	e077      	b.n	8027dc8 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8027cd8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8027cda:	2111      	movs	r1, #17
 8027cdc:	4620      	mov	r0, r4
 8027cde:	f7fb f830 	bl	8022d42 <mg_call>
            if (mm.ack == 0) {
 8027ce2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8027ce6:	b97b      	cbnz	r3, 8027d08 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8027ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8027e54 <mqtt_cb+0x1e4>)
 8027cea:	681b      	ldr	r3, [r3, #0]
 8027cec:	2b02      	cmp	r3, #2
 8027cee:	dd49      	ble.n	8027d84 <mqtt_cb+0x114>
 8027cf0:	4b59      	ldr	r3, [pc, #356]	@ (8027e58 <mqtt_cb+0x1e8>)
 8027cf2:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8027cf6:	4959      	ldr	r1, [pc, #356]	@ (8027e5c <mqtt_cb+0x1ec>)
 8027cf8:	2003      	movs	r0, #3
 8027cfa:	f7fe fbbd 	bl	8026478 <mg_log_prefix>
 8027cfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027d00:	4859      	ldr	r0, [pc, #356]	@ (8027e68 <mqtt_cb+0x1f8>)
 8027d02:	f7fc fa67 	bl	80241d4 <mg_log>
 8027d06:	e03d      	b.n	8027d84 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027d08:	4b52      	ldr	r3, [pc, #328]	@ (8027e54 <mqtt_cb+0x1e4>)
 8027d0a:	681b      	ldr	r3, [r3, #0]
 8027d0c:	2b00      	cmp	r3, #0
 8027d0e:	dc06      	bgt.n	8027d1e <mqtt_cb+0xae>
              c->is_closing = 1;
 8027d10:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027d14:	f043 0320 	orr.w	r3, r3, #32
 8027d18:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8027d1c:	e032      	b.n	8027d84 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8027e58 <mqtt_cb+0x1e8>)
 8027d20:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8027d24:	494d      	ldr	r1, [pc, #308]	@ (8027e5c <mqtt_cb+0x1ec>)
 8027d26:	2001      	movs	r0, #1
 8027d28:	f7fe fba6 	bl	8026478 <mg_log_prefix>
 8027d2c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8027d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027d32:	484e      	ldr	r0, [pc, #312]	@ (8027e6c <mqtt_cb+0x1fc>)
 8027d34:	f7fc fa4e 	bl	80241d4 <mg_log>
 8027d38:	e7ea      	b.n	8027d10 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 8027d3a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8027d3e:	b1e5      	cbz	r5, 8027d7a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8027d40:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027d44:	f7fe f856 	bl	8025df4 <mg_ntohs>
 8027d48:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8027d4c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027d50:	f013 0f04 	tst.w	r3, #4
 8027d54:	d14a      	bne.n	8027dec <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8027d56:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8027d58:	2d02      	cmp	r5, #2
 8027d5a:	d049      	beq.n	8027df0 <mqtt_cb+0x180>
 8027d5c:	2104      	movs	r1, #4
 8027d5e:	2200      	movs	r2, #0
 8027d60:	4620      	mov	r0, r4
 8027d62:	f7ff fccf 	bl	8027704 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8027d66:	2202      	movs	r2, #2
 8027d68:	a903      	add	r1, sp, #12
 8027d6a:	4620      	mov	r0, r4
 8027d6c:	f7ff fc38 	bl	80275e0 <mg_send>
              if (c->is_mqtt5) {
 8027d70:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027d74:	f013 0f04 	tst.w	r3, #4
 8027d78:	d13c      	bne.n	8027df4 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 8027d7a:	aa04      	add	r2, sp, #16
 8027d7c:	2110      	movs	r1, #16
 8027d7e:	4620      	mov	r0, r4
 8027d80:	f7fa ffdf 	bl	8022d42 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8027d84:	aa04      	add	r2, sp, #16
 8027d86:	210f      	movs	r1, #15
 8027d88:	4620      	mov	r0, r4
 8027d8a:	f7fa ffda 	bl	8022d42 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8027d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027d90:	2100      	movs	r1, #0
 8027d92:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8027d96:	f7fd ff38 	bl	8025c0a <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027d9a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027d9e:	f013 0f04 	tst.w	r3, #4
 8027da2:	f43f af6d 	beq.w	8027c80 <mqtt_cb+0x10>
 8027da6:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8027da8:	ab04      	add	r3, sp, #16
 8027daa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8027dac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027dae:	f7fb fc8c 	bl	80236ca <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8027db2:	2802      	cmp	r0, #2
 8027db4:	f43f af66 	beq.w	8027c84 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8027db8:	2800      	cmp	r0, #0
 8027dba:	f47f af5f 	bne.w	8027c7c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027dbe:	4b25      	ldr	r3, [pc, #148]	@ (8027e54 <mqtt_cb+0x1e4>)
 8027dc0:	681b      	ldr	r3, [r3, #0]
 8027dc2:	2b03      	cmp	r3, #3
 8027dc4:	f73f af75 	bgt.w	8027cb2 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8027dc8:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8027dcc:	3b02      	subs	r3, #2
 8027dce:	2b04      	cmp	r3, #4
 8027dd0:	d8d8      	bhi.n	8027d84 <mqtt_cb+0x114>
 8027dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8027dd8 <mqtt_cb+0x168>)
 8027dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027dd8:	08027cd9 	.word	0x08027cd9
 8027ddc:	08027d3b 	.word	0x08027d3b
 8027de0:	08027d85 	.word	0x08027d85
 8027de4:	08027e09 	.word	0x08027e09
 8027de8:	08027e2f 	.word	0x08027e2f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 8027dec:	2304      	movs	r3, #4
 8027dee:	e7b3      	b.n	8027d58 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8027df0:	2105      	movs	r1, #5
 8027df2:	e7b4      	b.n	8027d5e <mqtt_cb+0xee>
                uint16_t zero = 0;
 8027df4:	2300      	movs	r3, #0
 8027df6:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8027dfa:	2202      	movs	r2, #2
 8027dfc:	f10d 010e 	add.w	r1, sp, #14
 8027e00:	4620      	mov	r0, r4
 8027e02:	f7ff fbed 	bl	80275e0 <mg_send>
 8027e06:	e7b8      	b.n	8027d7a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8027e08:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027e0c:	f7fd fff2 	bl	8025df4 <mg_ntohs>
 8027e10:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8027e14:	2302      	movs	r3, #2
 8027e16:	461a      	mov	r2, r3
 8027e18:	2106      	movs	r1, #6
 8027e1a:	4620      	mov	r0, r4
 8027e1c:	f7ff fc72 	bl	8027704 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8027e20:	2202      	movs	r2, #2
 8027e22:	f10d 010e 	add.w	r1, sp, #14
 8027e26:	4620      	mov	r0, r4
 8027e28:	f7ff fbda 	bl	80275e0 <mg_send>
            break;
 8027e2c:	e7aa      	b.n	8027d84 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8027e2e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027e32:	f7fd ffdf 	bl	8025df4 <mg_ntohs>
 8027e36:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8027e3a:	2302      	movs	r3, #2
 8027e3c:	2200      	movs	r2, #0
 8027e3e:	2107      	movs	r1, #7
 8027e40:	4620      	mov	r0, r4
 8027e42:	f7ff fc5f 	bl	8027704 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8027e46:	2202      	movs	r2, #2
 8027e48:	f10d 010e 	add.w	r1, sp, #14
 8027e4c:	4620      	mov	r0, r4
 8027e4e:	f7ff fbc7 	bl	80275e0 <mg_send>
            break;
 8027e52:	e797      	b.n	8027d84 <mqtt_cb+0x114>
 8027e54:	2000012c 	.word	0x2000012c
 8027e58:	0803ba78 	.word	0x0803ba78
 8027e5c:	0803b080 	.word	0x0803b080
 8027e60:	0803b438 	.word	0x0803b438
 8027e64:	0803b454 	.word	0x0803b454
 8027e68:	0803b474 	.word	0x0803b474
 8027e6c:	0803b484 	.word	0x0803b484

08027e70 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8027e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027e74:	b088      	sub	sp, #32
 8027e76:	4605      	mov	r5, r0
 8027e78:	469a      	mov	sl, r3
 8027e7a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8027e7c:	f107 0614 	add.w	r6, r7, #20
 8027e80:	9601      	str	r6, [sp, #4]
 8027e82:	9200      	str	r2, [sp, #0]
 8027e84:	6883      	ldr	r3, [r0, #8]
 8027e86:	2206      	movs	r2, #6
 8027e88:	f7fd ffd4 	bl	8025e34 <tx_ip>
 8027e8c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8027e8e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8027e92:	2200      	movs	r2, #0
 8027e94:	6142      	str	r2, [r0, #20]
 8027e96:	6182      	str	r2, [r0, #24]
 8027e98:	61c2      	str	r2, [r0, #28]
 8027e9a:	6202      	str	r2, [r0, #32]
 8027e9c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027e9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027ea0:	b10b      	cbz	r3, 8027ea6 <tx_tcp+0x36>
 8027ea2:	2f00      	cmp	r7, #0
 8027ea4:	d147      	bne.n	8027f36 <tx_tcp+0xc6>
  tcp->sport = sport;
 8027ea6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8027eaa:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8027eac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8027eb0:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8027eb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027eb4:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8027eb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027eb8:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8027eba:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8027ebe:	f241 7070 	movw	r0, #6000	@ 0x1770
 8027ec2:	f7fd ff97 	bl	8025df4 <mg_ntohs>
 8027ec6:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8027ec8:	2350      	movs	r3, #80	@ 0x50
 8027eca:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8027ece:	b2bb      	uxth	r3, r7
 8027ed0:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8027ed2:	2000      	movs	r0, #0
 8027ed4:	f88d 001c 	strb.w	r0, [sp, #28]
 8027ed8:	7a62      	ldrb	r2, [r4, #9]
 8027eda:	f88d 201d 	strb.w	r2, [sp, #29]
 8027ede:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8027ee2:	f88d 201e 	strb.w	r2, [sp, #30]
 8027ee6:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8027eea:	b2b2      	uxth	r2, r6
 8027eec:	4649      	mov	r1, r9
 8027eee:	f7f9 fac9 	bl	8021484 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8027ef2:	f104 060c 	add.w	r6, r4, #12
 8027ef6:	2204      	movs	r2, #4
 8027ef8:	4631      	mov	r1, r6
 8027efa:	f7f9 fac3 	bl	8021484 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8027efe:	f104 0810 	add.w	r8, r4, #16
 8027f02:	2204      	movs	r2, #4
 8027f04:	4641      	mov	r1, r8
 8027f06:	f7f9 fabd 	bl	8021484 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8027f0a:	2204      	movs	r2, #4
 8027f0c:	a907      	add	r1, sp, #28
 8027f0e:	f7f9 fab9 	bl	8021484 <csumup>
  tcp->csum = csumfin(cs);
 8027f12:	f7fd ff7b 	bl	8025e0c <csumfin>
 8027f16:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027f18:	4b18      	ldr	r3, [pc, #96]	@ (8027f7c <tx_tcp+0x10c>)
 8027f1a:	681b      	ldr	r3, [r3, #0]
 8027f1c:	2b03      	cmp	r3, #3
 8027f1e:	dc10      	bgt.n	8027f42 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8027f20:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027f24:	696b      	ldr	r3, [r5, #20]
 8027f26:	1ac9      	subs	r1, r1, r3
 8027f28:	4439      	add	r1, r7
 8027f2a:	4628      	mov	r0, r5
 8027f2c:	f7f9 fabb 	bl	80214a6 <ether_output>
}
 8027f30:	b008      	add	sp, #32
 8027f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027f36:	463a      	mov	r2, r7
 8027f38:	4619      	mov	r1, r3
 8027f3a:	3028      	adds	r0, #40	@ 0x28
 8027f3c:	f004 fe7e 	bl	802cc3c <memmove>
 8027f40:	e7b1      	b.n	8027ea6 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027f42:	4b0f      	ldr	r3, [pc, #60]	@ (8027f80 <tx_tcp+0x110>)
 8027f44:	f241 5254 	movw	r2, #5460	@ 0x1554
 8027f48:	490e      	ldr	r1, [pc, #56]	@ (8027f84 <tx_tcp+0x114>)
 8027f4a:	2004      	movs	r0, #4
 8027f4c:	f7fe fa94 	bl	8026478 <mg_log_prefix>
 8027f50:	8aa0      	ldrh	r0, [r4, #20]
 8027f52:	f7fd ff4f 	bl	8025df4 <mg_ntohs>
 8027f56:	4681      	mov	r9, r0
 8027f58:	8ae0      	ldrh	r0, [r4, #22]
 8027f5a:	f7fd ff4b 	bl	8025df4 <mg_ntohs>
 8027f5e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8027f62:	4909      	ldr	r1, [pc, #36]	@ (8027f88 <tx_tcp+0x118>)
 8027f64:	9704      	str	r7, [sp, #16]
 8027f66:	9303      	str	r3, [sp, #12]
 8027f68:	9002      	str	r0, [sp, #8]
 8027f6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8027f6e:	9100      	str	r1, [sp, #0]
 8027f70:	464b      	mov	r3, r9
 8027f72:	4632      	mov	r2, r6
 8027f74:	4805      	ldr	r0, [pc, #20]	@ (8027f8c <tx_tcp+0x11c>)
 8027f76:	f7fc f92d 	bl	80241d4 <mg_log>
 8027f7a:	e7d1      	b.n	8027f20 <tx_tcp+0xb0>
 8027f7c:	2000012c 	.word	0x2000012c
 8027f80:	0803ba3c 	.word	0x0803ba3c
 8027f84:	0803b080 	.word	0x0803b080
 8027f88:	08024195 	.word	0x08024195
 8027f8c:	0803b4a4 	.word	0x0803b4a4

08027f90 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8027f90:	b530      	push	{r4, r5, lr}
 8027f92:	b087      	sub	sp, #28
 8027f94:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8027f96:	8b05      	ldrh	r5, [r0, #24]
 8027f98:	4628      	mov	r0, r5
 8027f9a:	f7fd ff2b 	bl	8025df4 <mg_ntohs>
 8027f9e:	f7fd fe91 	bl	8025cc4 <mg_ntohl>
 8027fa2:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027fa4:	6863      	ldr	r3, [r4, #4]
 8027fa6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8027fa8:	2300      	movs	r3, #0
 8027faa:	9305      	str	r3, [sp, #20]
 8027fac:	9304      	str	r3, [sp, #16]
 8027fae:	9303      	str	r3, [sp, #12]
 8027fb0:	9202      	str	r2, [sp, #8]
 8027fb2:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027fb4:	9301      	str	r3, [sp, #4]
 8027fb6:	9500      	str	r5, [sp, #0]
 8027fb8:	2302      	movs	r3, #2
 8027fba:	69e2      	ldr	r2, [r4, #28]
 8027fbc:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027fc0:	f7ff ff56 	bl	8027e70 <tx_tcp>
}
 8027fc4:	b007      	add	sp, #28
 8027fc6:	bd30      	pop	{r4, r5, pc}

08027fc8 <tx_tcp_pkt>:
                         size_t len) {
 8027fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fcc:	b087      	sub	sp, #28
 8027fce:	4605      	mov	r5, r0
 8027fd0:	4617      	mov	r7, r2
 8027fd2:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8027fd4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8027fd6:	7b5c      	ldrb	r4, [r3, #13]
 8027fd8:	f014 0403 	ands.w	r4, r4, #3
 8027fdc:	bf18      	it	ne
 8027fde:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027fe0:	690e      	ldr	r6, [r1, #16]
 8027fe2:	3606      	adds	r6, #6
 8027fe4:	69ca      	ldr	r2, [r1, #28]
 8027fe6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8027fea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8027fee:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8027ff2:	6858      	ldr	r0, [r3, #4]
 8027ff4:	f7fd fe66 	bl	8025cc4 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027ff8:	4420      	add	r0, r4
 8027ffa:	f7fd fe63 	bl	8025cc4 <mg_ntohl>
 8027ffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028000:	9305      	str	r3, [sp, #20]
 8028002:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028004:	9304      	str	r3, [sp, #16]
 8028006:	9003      	str	r0, [sp, #12]
 8028008:	f8cd 8008 	str.w	r8, [sp, #8]
 802800c:	f8cd b004 	str.w	fp, [sp, #4]
 8028010:	f8cd a000 	str.w	sl, [sp]
 8028014:	463b      	mov	r3, r7
 8028016:	464a      	mov	r2, r9
 8028018:	4631      	mov	r1, r6
 802801a:	4628      	mov	r0, r5
 802801c:	f7ff ff28 	bl	8027e70 <tx_tcp>
}
 8028020:	b007      	add	sp, #28
 8028022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028028 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8028028:	b530      	push	{r4, r5, lr}
 802802a:	b083      	sub	sp, #12
 802802c:	4604      	mov	r4, r0
 802802e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8028030:	6843      	ldr	r3, [r0, #4]
 8028032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8028034:	2901      	cmp	r1, #1
 8028036:	d01a      	beq.n	802806e <settmout+0x46>
 8028038:	2903      	cmp	r1, #3
 802803a:	d01a      	beq.n	8028072 <settmout+0x4a>
 802803c:	2904      	cmp	r1, #4
 802803e:	d01b      	beq.n	8028078 <settmout+0x50>
 8028040:	2902      	cmp	r1, #2
 8028042:	d012      	beq.n	802806a <settmout+0x42>
 8028044:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8028048:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 802804a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 802804c:	185b      	adds	r3, r3, r1
 802804e:	f142 0200 	adc.w	r2, r2, #0
 8028052:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8028056:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 802805a:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802805e:	4b10      	ldr	r3, [pc, #64]	@ (80280a0 <settmout+0x78>)
 8028060:	681b      	ldr	r3, [r3, #0]
 8028062:	2b03      	cmp	r3, #3
 8028064:	dc0b      	bgt.n	802807e <settmout+0x56>
}
 8028066:	b003      	add	sp, #12
 8028068:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 802806a:	2364      	movs	r3, #100	@ 0x64
 802806c:	e7ec      	b.n	8028048 <settmout+0x20>
 802806e:	2396      	movs	r3, #150	@ 0x96
 8028070:	e7ea      	b.n	8028048 <settmout+0x20>
 8028072:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8028076:	e7e7      	b.n	8028048 <settmout+0x20>
 8028078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802807c:	e7e4      	b.n	8028048 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 802807e:	4b09      	ldr	r3, [pc, #36]	@ (80280a4 <settmout+0x7c>)
 8028080:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8028084:	4908      	ldr	r1, [pc, #32]	@ (80280a8 <settmout+0x80>)
 8028086:	2004      	movs	r0, #4
 8028088:	f7fe f9f6 	bl	8026478 <mg_log_prefix>
 802808c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8028090:	e9cd 2300 	strd	r2, r3, [sp]
 8028094:	462a      	mov	r2, r5
 8028096:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028098:	4804      	ldr	r0, [pc, #16]	@ (80280ac <settmout+0x84>)
 802809a:	f7fc f89b 	bl	80241d4 <mg_log>
}
 802809e:	e7e2      	b.n	8028066 <settmout+0x3e>
 80280a0:	2000012c 	.word	0x2000012c
 80280a4:	0803ba30 	.word	0x0803ba30
 80280a8:	0803b080 	.word	0x0803b080
 80280ac:	0803b4c8 	.word	0x0803b4c8

080280b0 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 80280b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280b4:	b089      	sub	sp, #36	@ 0x24
 80280b6:	4604      	mov	r4, r0
 80280b8:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80280ba:	6843      	ldr	r3, [r0, #4]
 80280bc:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 80280be:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 80280c2:	4611      	mov	r1, r2
 80280c4:	f7ff fa2e 	bl	8027524 <trim_len>
 80280c8:	4605      	mov	r5, r0
  if (c->is_udp) {
 80280ca:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80280ce:	f013 0f01 	tst.w	r3, #1
 80280d2:	d010      	beq.n	80280f6 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 80280d4:	68ba      	ldr	r2, [r7, #8]
 80280d6:	9003      	str	r0, [sp, #12]
 80280d8:	9602      	str	r6, [sp, #8]
 80280da:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80280dc:	9301      	str	r3, [sp, #4]
 80280de:	f8cd 8000 	str.w	r8, [sp]
 80280e2:	8b23      	ldrh	r3, [r4, #24]
 80280e4:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80280e8:	4638      	mov	r0, r7
 80280ea:	f7fd ff38 	bl	8025f5e <tx_udp>
  return (long) len;
 80280ee:	4628      	mov	r0, r5
}
 80280f0:	b009      	add	sp, #36	@ 0x24
 80280f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 80280f6:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 80280fa:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 80280fe:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028102:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028106:	f7fd fddd 	bl	8025cc4 <mg_ntohl>
 802810a:	9007      	str	r0, [sp, #28]
 802810c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028110:	f7fd fdd8 	bl	8025cc4 <mg_ntohl>
 8028114:	9505      	str	r5, [sp, #20]
 8028116:	9604      	str	r6, [sp, #16]
 8028118:	9003      	str	r0, [sp, #12]
 802811a:	9b07      	ldr	r3, [sp, #28]
 802811c:	9302      	str	r3, [sp, #8]
 802811e:	f8cd b004 	str.w	fp, [sp, #4]
 8028122:	f8cd a000 	str.w	sl, [sp]
 8028126:	2318      	movs	r3, #24
 8028128:	4642      	mov	r2, r8
 802812a:	4649      	mov	r1, r9
 802812c:	4638      	mov	r0, r7
 802812e:	f7ff fe9f 	bl	8027e70 <tx_tcp>
    if (sent == 0) {
 8028132:	b180      	cbz	r0, 8028156 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8028134:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028138:	d010      	beq.n	802815c <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 802813a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 802813e:	442b      	add	r3, r5
 8028140:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028144:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028148:	2b01      	cmp	r3, #1
 802814a:	d1d0      	bne.n	80280ee <mg_io_send+0x3e>
 802814c:	2100      	movs	r1, #0
 802814e:	4620      	mov	r0, r4
 8028150:	f7ff ff6a 	bl	8028028 <settmout>
 8028154:	e7cb      	b.n	80280ee <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8028156:	f06f 0001 	mvn.w	r0, #1
 802815a:	e7c9      	b.n	80280f0 <mg_io_send+0x40>
      return MG_IO_ERR;
 802815c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028160:	e7c6      	b.n	80280f0 <mg_io_send+0x40>
	...

08028164 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8028164:	b510      	push	{r4, lr}
 8028166:	b082      	sub	sp, #8
 8028168:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 802816a:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 802816e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028172:	d00b      	beq.n	802818c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8028174:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8028176:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028178:	f7fd fc80 	bl	8025a7c <mg_tls_send>
 802817c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 802817e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8028182:	d008      	beq.n	8028196 <write_conn+0x32>
  } else if (len > 0) {
 8028184:	2800      	cmp	r0, #0
 8028186:	dc0b      	bgt.n	80281a0 <write_conn+0x3c>
}
 8028188:	b002      	add	sp, #8
 802818a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 802818c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 802818e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8028190:	f7ff ff8e 	bl	80280b0 <mg_io_send>
 8028194:	e7f2      	b.n	802817c <write_conn+0x18>
    mg_error(c, "tx err");
 8028196:	4908      	ldr	r1, [pc, #32]	@ (80281b8 <write_conn+0x54>)
 8028198:	4620      	mov	r0, r4
 802819a:	f7fe fa55 	bl	8026648 <mg_error>
 802819e:	e7f3      	b.n	8028188 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 80281a0:	4602      	mov	r2, r0
 80281a2:	2100      	movs	r1, #0
 80281a4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80281a8:	f7fd fd2f 	bl	8025c0a <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 80281ac:	aa01      	add	r2, sp, #4
 80281ae:	2108      	movs	r1, #8
 80281b0:	4620      	mov	r0, r4
 80281b2:	f7fa fdc6 	bl	8022d42 <mg_call>
}
 80281b6:	e7e7      	b.n	8028188 <write_conn+0x24>
 80281b8:	0803b4d8 	.word	0x0803b4d8

080281bc <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 80281bc:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 80281c0:	f240 1221 	movw	r2, #289	@ 0x121
 80281c4:	421a      	tst	r2, r3
 80281c6:	d000      	beq.n	80281ca <init_closure+0xe>
 80281c8:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 80281ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80281ce:	b086      	sub	sp, #24
 80281d0:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 80281d2:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 80281d4:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80281d6:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 80281da:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 80281de:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 80281e2:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 80281e6:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 80281ea:	f7fd fd6b 	bl	8025cc4 <mg_ntohl>
 80281ee:	4605      	mov	r5, r0
 80281f0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80281f4:	f7fd fd66 	bl	8025cc4 <mg_ntohl>
 80281f8:	2300      	movs	r3, #0
 80281fa:	9305      	str	r3, [sp, #20]
 80281fc:	9304      	str	r3, [sp, #16]
 80281fe:	9003      	str	r0, [sp, #12]
 8028200:	9502      	str	r5, [sp, #8]
 8028202:	f8cd a004 	str.w	sl, [sp, #4]
 8028206:	f8cd 9000 	str.w	r9, [sp]
 802820a:	2311      	movs	r3, #17
 802820c:	4642      	mov	r2, r8
 802820e:	4639      	mov	r1, r7
 8028210:	4630      	mov	r0, r6
 8028212:	f7ff fe2d 	bl	8027e70 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8028216:	2104      	movs	r1, #4
 8028218:	4620      	mov	r0, r4
 802821a:	f7ff ff05 	bl	8028028 <settmout>
}
 802821e:	b006      	add	sp, #24
 8028220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08028224 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8028224:	b530      	push	{r4, r5, lr}
 8028226:	b085      	sub	sp, #20
 8028228:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802822a:	6843      	ldr	r3, [r0, #4]
 802822c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802822e:	69c3      	ldr	r3, [r0, #28]
 8028230:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8028232:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028236:	f36f 03c3 	bfc	r3, #3, #1
 802823a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 802823e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8028242:	2b00      	cmp	r3, #0
 8028244:	db03      	blt.n	802824e <mg_connect_resolved+0x2a>
 8028246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802824a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 802824e:	68ab      	ldr	r3, [r5, #8]
 8028250:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8028252:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8028256:	1c43      	adds	r3, r0, #1
 8028258:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 802825c:	f7fd fdca 	bl	8025df4 <mg_ntohs>
 8028260:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8028262:	4b51      	ldr	r3, [pc, #324]	@ (80283a8 <mg_connect_resolved+0x184>)
 8028264:	681b      	ldr	r3, [r3, #0]
 8028266:	2b02      	cmp	r3, #2
 8028268:	dc36      	bgt.n	80282d8 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 802826a:	2200      	movs	r2, #0
 802826c:	2103      	movs	r1, #3
 802826e:	4620      	mov	r0, r4
 8028270:	f7fa fd67 	bl	8022d42 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8028274:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028278:	f013 0301 	ands.w	r3, r3, #1
 802827c:	d009      	beq.n	8028292 <mg_connect_resolved+0x6e>
 802827e:	9903      	ldr	r1, [sp, #12]
 8028280:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8028284:	d03b      	beq.n	80282fe <mg_connect_resolved+0xda>
 8028286:	68aa      	ldr	r2, [r5, #8]
 8028288:	68e8      	ldr	r0, [r5, #12]
 802828a:	ea62 0200 	orn	r2, r2, r0
 802828e:	4291      	cmp	r1, r2
 8028290:	d035      	beq.n	80282fe <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8028292:	68aa      	ldr	r2, [r5, #8]
 8028294:	2a00      	cmp	r2, #0
 8028296:	d046      	beq.n	8028326 <mg_connect_resolved+0x102>
 8028298:	9903      	ldr	r1, [sp, #12]
 802829a:	68e8      	ldr	r0, [r5, #12]
 802829c:	404a      	eors	r2, r1
 802829e:	4202      	tst	r2, r0
 80282a0:	d141      	bne.n	8028326 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 80282a2:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80282a4:	4291      	cmp	r1, r2
 80282a6:	d03e      	beq.n	8028326 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 80282a8:	4b3f      	ldr	r3, [pc, #252]	@ (80283a8 <mg_connect_resolved+0x184>)
 80282aa:	681b      	ldr	r3, [r3, #0]
 80282ac:	2b02      	cmp	r3, #2
 80282ae:	dc2e      	bgt.n	802830e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 80282b0:	9903      	ldr	r1, [sp, #12]
 80282b2:	4628      	mov	r0, r5
 80282b4:	f7fd fe9b 	bl	8025fee <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 80282b8:	2102      	movs	r1, #2
 80282ba:	4620      	mov	r0, r4
 80282bc:	f7ff feb4 	bl	8028028 <settmout>
    c->is_arplooking = 1;
 80282c0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80282c4:	f043 0310 	orr.w	r3, r3, #16
 80282c8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 80282cc:	b2db      	uxtb	r3, r3
 80282ce:	f043 0320 	orr.w	r3, r3, #32
 80282d2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 80282d6:	e018      	b.n	802830a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80282d8:	4b34      	ldr	r3, [pc, #208]	@ (80283ac <mg_connect_resolved+0x188>)
 80282da:	f241 724f 	movw	r2, #5967	@ 0x174f
 80282de:	4934      	ldr	r1, [pc, #208]	@ (80283b0 <mg_connect_resolved+0x18c>)
 80282e0:	2003      	movs	r0, #3
 80282e2:	f7fe f8c9 	bl	8026478 <mg_log_prefix>
 80282e6:	4a33      	ldr	r2, [pc, #204]	@ (80283b4 <mg_connect_resolved+0x190>)
 80282e8:	f104 031c 	add.w	r3, r4, #28
 80282ec:	9301      	str	r3, [sp, #4]
 80282ee:	9200      	str	r2, [sp, #0]
 80282f0:	f104 0308 	add.w	r3, r4, #8
 80282f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80282f6:	4830      	ldr	r0, [pc, #192]	@ (80283b8 <mg_connect_resolved+0x194>)
 80282f8:	f7fb ff6c 	bl	80241d4 <mg_log>
 80282fc:	e7b5      	b.n	802826a <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 80282fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028302:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8028306:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802830a:	b005      	add	sp, #20
 802830c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802830e:	4b27      	ldr	r3, [pc, #156]	@ (80283ac <mg_connect_resolved+0x188>)
 8028310:	f241 7258 	movw	r2, #5976	@ 0x1758
 8028314:	4926      	ldr	r1, [pc, #152]	@ (80283b0 <mg_connect_resolved+0x18c>)
 8028316:	2003      	movs	r0, #3
 8028318:	f7fe f8ae 	bl	8026478 <mg_log_prefix>
 802831c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802831e:	4827      	ldr	r0, [pc, #156]	@ (80283bc <mg_connect_resolved+0x198>)
 8028320:	f7fb ff58 	bl	80241d4 <mg_log>
 8028324:	e7c4      	b.n	80282b0 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8028326:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802832a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 802832e:	2ae0      	cmp	r2, #224	@ 0xe0
 8028330:	d00e      	beq.n	8028350 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8028332:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8028336:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 802833a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 802833e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8028342:	b31b      	cbz	r3, 802838c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8028344:	2200      	movs	r2, #0
 8028346:	2104      	movs	r1, #4
 8028348:	4620      	mov	r0, r4
 802834a:	f7fa fcfa 	bl	8022d42 <mg_call>
 802834e:	e7dc      	b.n	802830a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8028350:	4b1b      	ldr	r3, [pc, #108]	@ (80283c0 <mg_connect_resolved+0x19c>)
 8028352:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8028356:	f8ad 3008 	strh.w	r3, [sp, #8]
 802835a:	0c1b      	lsrs	r3, r3, #16
 802835c:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 8028360:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8028364:	b2db      	uxtb	r3, r3
 8028366:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 802836a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 802836e:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8028372:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8028376:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 802837a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 802837e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8028382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028386:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802838a:	e7be      	b.n	802830a <mg_connect_resolved+0xe6>
      send_syn(c);
 802838c:	4620      	mov	r0, r4
 802838e:	f7ff fdff 	bl	8027f90 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8028392:	2103      	movs	r1, #3
 8028394:	4620      	mov	r0, r4
 8028396:	f7ff fe47 	bl	8028028 <settmout>
      c->is_connecting = 1;
 802839a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802839e:	f043 0320 	orr.w	r3, r3, #32
 80283a2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 80283a6:	e7b0      	b.n	802830a <mg_connect_resolved+0xe6>
 80283a8:	2000012c 	.word	0x2000012c
 80283ac:	0803ba0c 	.word	0x0803ba0c
 80283b0:	0803b080 	.word	0x0803b080
 80283b4:	0802632d 	.word	0x0802632d
 80283b8:	0803b4e0 	.word	0x0803b4e0
 80283bc:	0803b4f0 	.word	0x0803b4f0
 80283c0:	08035fbc 	.word	0x08035fbc

080283c4 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80283c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80283c6:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80283c8:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 80283ca:	2902      	cmp	r1, #2
 80283cc:	d009      	beq.n	80283e2 <dns_cb+0x1e>
 80283ce:	4604      	mov	r4, r0
 80283d0:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 80283d4:	2907      	cmp	r1, #7
 80283d6:	d016      	beq.n	8028406 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 80283d8:	2909      	cmp	r1, #9
 80283da:	f000 809a 	beq.w	8028512 <dns_cb+0x14e>
}
 80283de:	b049      	add	sp, #292	@ 0x124
 80283e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 80283e2:	6816      	ldr	r6, [r2, #0]
 80283e4:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 80283e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80283e8:	e000      	b.n	80283ec <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80283ea:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 80283ec:	2b00      	cmp	r3, #0
 80283ee:	d0f6      	beq.n	80283de <dns_cb+0x1a>
      tmp = d->next;
 80283f0:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80283f2:	6899      	ldr	r1, [r3, #8]
 80283f4:	68da      	ldr	r2, [r3, #12]
 80283f6:	42b1      	cmp	r1, r6
 80283f8:	41aa      	sbcs	r2, r5
 80283fa:	d2f6      	bcs.n	80283ea <dns_cb+0x26>
 80283fc:	494c      	ldr	r1, [pc, #304]	@ (8028530 <dns_cb+0x16c>)
 80283fe:	6858      	ldr	r0, [r3, #4]
 8028400:	f7fe f922 	bl	8026648 <mg_error>
 8028404:	e7f1      	b.n	80283ea <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8028406:	aa02      	add	r2, sp, #8
 8028408:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802840a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802840c:	f7fe f870 	bl	80264f0 <mg_dns_parse>
 8028410:	b9c8      	cbnz	r0, 8028446 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8028412:	4b48      	ldr	r3, [pc, #288]	@ (8028534 <dns_cb+0x170>)
 8028414:	681b      	ldr	r3, [r3, #0]
 8028416:	2b00      	cmp	r3, #0
 8028418:	dc0a      	bgt.n	8028430 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802841a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802841c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802841e:	f7fb f83b 	bl	8023498 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028422:	4b44      	ldr	r3, [pc, #272]	@ (8028534 <dns_cb+0x170>)
 8028424:	681b      	ldr	r3, [r3, #0]
 8028426:	2b00      	cmp	r3, #0
 8028428:	dc68      	bgt.n	80284fc <dns_cb+0x138>
    c->recv.len = 0;
 802842a:	2300      	movs	r3, #0
 802842c:	6423      	str	r3, [r4, #64]	@ 0x40
 802842e:	e7d6      	b.n	80283de <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8028430:	4b41      	ldr	r3, [pc, #260]	@ (8028538 <dns_cb+0x174>)
 8028432:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8028436:	4941      	ldr	r1, [pc, #260]	@ (802853c <dns_cb+0x178>)
 8028438:	2001      	movs	r0, #1
 802843a:	f7fe f81d 	bl	8026478 <mg_log_prefix>
 802843e:	4840      	ldr	r0, [pc, #256]	@ (8028540 <dns_cb+0x17c>)
 8028440:	f7fb fec8 	bl	80241d4 <mg_log>
 8028444:	e7e9      	b.n	802841a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 8028446:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 8028448:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 802844a:	e008      	b.n	802845e <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 802844c:	6868      	ldr	r0, [r5, #4]
 802844e:	f7ff fee9 	bl	8028224 <mg_connect_resolved>
        mg_dns_free(head, d);
 8028452:	4629      	mov	r1, r5
 8028454:	4630      	mov	r0, r6
 8028456:	f7f9 fa35 	bl	80218c4 <mg_dns_free>
        resolved = 1;
 802845a:	2101      	movs	r1, #1
 802845c:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 802845e:	2d00      	cmp	r5, #0
 8028460:	d049      	beq.n	80284f6 <dns_cb+0x132>
        tmp = d->next;
 8028462:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 8028464:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8028468:	8a2b      	ldrh	r3, [r5, #16]
 802846a:	429a      	cmp	r2, r3
 802846c:	d1f6      	bne.n	802845c <dns_cb+0x98>
        if (d->c->is_resolving) {
 802846e:	6868      	ldr	r0, [r5, #4]
 8028470:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028474:	f013 0f08 	tst.w	r3, #8
 8028478:	d02c      	beq.n	80284d4 <dns_cb+0x110>
          if (dm.resolved) {
 802847a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 802847e:	b323      	cbz	r3, 80284ca <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8028480:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8028482:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8028486:	686b      	ldr	r3, [r5, #4]
 8028488:	f103 0c1c 	add.w	ip, r3, #28
 802848c:	f10d 0e0c 	add.w	lr, sp, #12
 8028490:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8028494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8028498:	f8de 3000 	ldr.w	r3, [lr]
 802849c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 80284a0:	4b24      	ldr	r3, [pc, #144]	@ (8028534 <dns_cb+0x170>)
 80284a2:	681b      	ldr	r3, [r3, #0]
 80284a4:	2b02      	cmp	r3, #2
 80284a6:	ddd1      	ble.n	802844c <dns_cb+0x88>
 80284a8:	4b23      	ldr	r3, [pc, #140]	@ (8028538 <dns_cb+0x174>)
 80284aa:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80284ae:	4923      	ldr	r1, [pc, #140]	@ (802853c <dns_cb+0x178>)
 80284b0:	2003      	movs	r0, #3
 80284b2:	f7fd ffe1 	bl	8026478 <mg_log_prefix>
 80284b6:	686b      	ldr	r3, [r5, #4]
 80284b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80284ba:	331c      	adds	r3, #28
 80284bc:	9300      	str	r3, [sp, #0]
 80284be:	4b21      	ldr	r3, [pc, #132]	@ (8028544 <dns_cb+0x180>)
 80284c0:	aa08      	add	r2, sp, #32
 80284c2:	4821      	ldr	r0, [pc, #132]	@ (8028548 <dns_cb+0x184>)
 80284c4:	f7fb fe86 	bl	80241d4 <mg_log>
 80284c8:	e7c0      	b.n	802844c <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 80284ca:	aa08      	add	r2, sp, #32
 80284cc:	491f      	ldr	r1, [pc, #124]	@ (802854c <dns_cb+0x188>)
 80284ce:	f7fe f8bb 	bl	8026648 <mg_error>
 80284d2:	e7be      	b.n	8028452 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 80284d4:	4b17      	ldr	r3, [pc, #92]	@ (8028534 <dns_cb+0x170>)
 80284d6:	681b      	ldr	r3, [r3, #0]
 80284d8:	2b00      	cmp	r3, #0
 80284da:	ddba      	ble.n	8028452 <dns_cb+0x8e>
 80284dc:	4b16      	ldr	r3, [pc, #88]	@ (8028538 <dns_cb+0x174>)
 80284de:	f240 42da 	movw	r2, #1242	@ 0x4da
 80284e2:	4916      	ldr	r1, [pc, #88]	@ (802853c <dns_cb+0x178>)
 80284e4:	2001      	movs	r0, #1
 80284e6:	f7fd ffc7 	bl	8026478 <mg_log_prefix>
 80284ea:	686b      	ldr	r3, [r5, #4]
 80284ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80284ee:	4818      	ldr	r0, [pc, #96]	@ (8028550 <dns_cb+0x18c>)
 80284f0:	f7fb fe70 	bl	80241d4 <mg_log>
 80284f4:	e7ad      	b.n	8028452 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80284f6:	2900      	cmp	r1, #0
 80284f8:	d197      	bne.n	802842a <dns_cb+0x66>
 80284fa:	e792      	b.n	8028422 <dns_cb+0x5e>
 80284fc:	4b0e      	ldr	r3, [pc, #56]	@ (8028538 <dns_cb+0x174>)
 80284fe:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8028502:	490e      	ldr	r1, [pc, #56]	@ (802853c <dns_cb+0x178>)
 8028504:	2001      	movs	r0, #1
 8028506:	f7fd ffb7 	bl	8026478 <mg_log_prefix>
 802850a:	4812      	ldr	r0, [pc, #72]	@ (8028554 <dns_cb+0x190>)
 802850c:	f7fb fe62 	bl	80241d4 <mg_log>
 8028510:	e78b      	b.n	802842a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8028512:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8028514:	2c00      	cmp	r4, #0
 8028516:	f43f af62 	beq.w	80283de <dns_cb+0x1a>
      tmp = d->next;
 802851a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802851c:	490e      	ldr	r1, [pc, #56]	@ (8028558 <dns_cb+0x194>)
 802851e:	6860      	ldr	r0, [r4, #4]
 8028520:	f7fe f892 	bl	8026648 <mg_error>
      mg_dns_free(head, d);
 8028524:	4621      	mov	r1, r4
 8028526:	4630      	mov	r0, r6
 8028528:	f7f9 f9cc 	bl	80218c4 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802852c:	462c      	mov	r4, r5
 802852e:	e7f1      	b.n	8028514 <dns_cb+0x150>
 8028530:	0803b504 	.word	0x0803b504
 8028534:	2000012c 	.word	0x2000012c
 8028538:	0803bae0 	.word	0x0803bae0
 802853c:	0803b080 	.word	0x0803b080
 8028540:	0803b510 	.word	0x0803b510
 8028544:	08026311 	.word	0x08026311
 8028548:	0803b52c 	.word	0x0803b52c
 802854c:	0803b53c 	.word	0x0803b53c
 8028550:	0803b554 	.word	0x0803b554
 8028554:	0803b56c 	.word	0x0803b56c
 8028558:	0803b57c 	.word	0x0803b57c

0802855c <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 802855c:	b510      	push	{r4, lr}
 802855e:	b086      	sub	sp, #24
 8028560:	4604      	mov	r4, r0
  uint8_t opts[] = {
 8028562:	4a12      	ldr	r2, [pc, #72]	@ (80285ac <tx_dhcp_discover+0x50>)
 8028564:	ab04      	add	r3, sp, #16
 8028566:	e892 0003 	ldmia.w	r2, {r0, r1}
 802856a:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802856e:	2200      	movs	r2, #0
 8028570:	9202      	str	r2, [sp, #8]
 8028572:	2108      	movs	r1, #8
 8028574:	9101      	str	r1, [sp, #4]
 8028576:	9300      	str	r3, [sp, #0]
 8028578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802857c:	490c      	ldr	r1, [pc, #48]	@ (80285b0 <tx_dhcp_discover+0x54>)
 802857e:	4620      	mov	r0, r4
 8028580:	f7fd fd7a 	bl	8026078 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028584:	4b0b      	ldr	r3, [pc, #44]	@ (80285b4 <tx_dhcp_discover+0x58>)
 8028586:	681b      	ldr	r3, [r3, #0]
 8028588:	2b02      	cmp	r3, #2
 802858a:	dc01      	bgt.n	8028590 <tx_dhcp_discover+0x34>
}
 802858c:	b006      	add	sp, #24
 802858e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028590:	4b09      	ldr	r3, [pc, #36]	@ (80285b8 <tx_dhcp_discover+0x5c>)
 8028592:	f241 4270 	movw	r2, #5232	@ 0x1470
 8028596:	4909      	ldr	r1, [pc, #36]	@ (80285bc <tx_dhcp_discover+0x60>)
 8028598:	2003      	movs	r0, #3
 802859a:	f7fd ff6d 	bl	8026478 <mg_log_prefix>
 802859e:	4622      	mov	r2, r4
 80285a0:	4907      	ldr	r1, [pc, #28]	@ (80285c0 <tx_dhcp_discover+0x64>)
 80285a2:	4808      	ldr	r0, [pc, #32]	@ (80285c4 <tx_dhcp_discover+0x68>)
 80285a4:	f7fb fe16 	bl	80241d4 <mg_log>
}
 80285a8:	e7f0      	b.n	802858c <tx_dhcp_discover+0x30>
 80285aa:	bf00      	nop
 80285ac:	0803b5a8 	.word	0x0803b5a8
 80285b0:	0803bb08 	.word	0x0803bb08
 80285b4:	2000012c 	.word	0x2000012c
 80285b8:	0803b9dc 	.word	0x0803b9dc
 80285bc:	0803b080 	.word	0x0803b080
 80285c0:	080241a5 	.word	0x080241a5
 80285c4:	0803b588 	.word	0x0803b588

080285c8 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 80285c8:	b510      	push	{r4, lr}
 80285ca:	b086      	sub	sp, #24
  uint8_t opts[] = {
 80285cc:	4c0d      	ldr	r4, [pc, #52]	@ (8028604 <tx_dhcp_request_re+0x3c>)
 80285ce:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 80285d0:	2401      	movs	r4, #1
 80285d2:	9402      	str	r4, [sp, #8]
 80285d4:	2404      	movs	r4, #4
 80285d6:	9401      	str	r4, [sp, #4]
 80285d8:	ac05      	add	r4, sp, #20
 80285da:	9400      	str	r4, [sp, #0]
 80285dc:	f7fd fd4c 	bl	8026078 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 80285e0:	4b09      	ldr	r3, [pc, #36]	@ (8028608 <tx_dhcp_request_re+0x40>)
 80285e2:	681b      	ldr	r3, [r3, #0]
 80285e4:	2b02      	cmp	r3, #2
 80285e6:	dc01      	bgt.n	80285ec <tx_dhcp_request_re+0x24>
}
 80285e8:	b006      	add	sp, #24
 80285ea:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 80285ec:	4b07      	ldr	r3, [pc, #28]	@ (802860c <tx_dhcp_request_re+0x44>)
 80285ee:	f241 4266 	movw	r2, #5222	@ 0x1466
 80285f2:	4907      	ldr	r1, [pc, #28]	@ (8028610 <tx_dhcp_request_re+0x48>)
 80285f4:	2003      	movs	r0, #3
 80285f6:	f7fd ff3f 	bl	8026478 <mg_log_prefix>
 80285fa:	4806      	ldr	r0, [pc, #24]	@ (8028614 <tx_dhcp_request_re+0x4c>)
 80285fc:	f7fb fdea 	bl	80241d4 <mg_log>
}
 8028600:	e7f2      	b.n	80285e8 <tx_dhcp_request_re+0x20>
 8028602:	bf00      	nop
 8028604:	ff030135 	.word	0xff030135
 8028608:	2000012c 	.word	0x2000012c
 802860c:	0803b9b8 	.word	0x0803b9b8
 8028610:	0803b080 	.word	0x0803b080
 8028614:	0803b5b4 	.word	0x0803b5b4

08028618 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028618:	b5f0      	push	{r4, r5, r6, r7, lr}
 802861a:	b083      	sub	sp, #12
 802861c:	4604      	mov	r4, r0
 802861e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028620:	698e      	ldr	r6, [r1, #24]
 8028622:	88f7      	ldrh	r7, [r6, #6]
 8028624:	2001      	movs	r0, #1
 8028626:	f7fd fbe5 	bl	8025df4 <mg_ntohs>
 802862a:	4287      	cmp	r7, r0
 802862c:	d006      	beq.n	802863c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 802862e:	2002      	movs	r0, #2
 8028630:	f7fd fbe0 	bl	8025df4 <mg_ntohs>
 8028634:	4287      	cmp	r7, r0
 8028636:	d05a      	beq.n	80286ee <rx_arp+0xd6>
}
 8028638:	b003      	add	sp, #12
 802863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802863c:	69b2      	ldr	r2, [r6, #24]
 802863e:	68a3      	ldr	r3, [r4, #8]
 8028640:	429a      	cmp	r2, r3
 8028642:	d1f4      	bne.n	802862e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8028644:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8028646:	692b      	ldr	r3, [r5, #16]
 8028648:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802864c:	6032      	str	r2, [r6, #0]
 802864e:	895b      	ldrh	r3, [r3, #10]
 8028650:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8028652:	6823      	ldr	r3, [r4, #0]
 8028654:	f8c6 3006 	str.w	r3, [r6, #6]
 8028658:	88a3      	ldrh	r3, [r4, #4]
 802865a:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 802865c:	f640 0006 	movw	r0, #2054	@ 0x806
 8028660:	f7fd fbc8 	bl	8025df4 <mg_ntohs>
 8028664:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8028666:	69ab      	ldr	r3, [r5, #24]
 8028668:	6818      	ldr	r0, [r3, #0]
 802866a:	6859      	ldr	r1, [r3, #4]
 802866c:	689a      	ldr	r2, [r3, #8]
 802866e:	68df      	ldr	r7, [r3, #12]
 8028670:	f8c6 000e 	str.w	r0, [r6, #14]
 8028674:	f8c6 1012 	str.w	r1, [r6, #18]
 8028678:	f8c6 2016 	str.w	r2, [r6, #22]
 802867c:	f8c6 701a 	str.w	r7, [r6, #26]
 8028680:	6918      	ldr	r0, [r3, #16]
 8028682:	6959      	ldr	r1, [r3, #20]
 8028684:	699a      	ldr	r2, [r3, #24]
 8028686:	f8c6 001e 	str.w	r0, [r6, #30]
 802868a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 802868e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8028692:	2002      	movs	r0, #2
 8028694:	f7fd fbae 	bl	8025df4 <mg_ntohs>
 8028698:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 802869a:	69ab      	ldr	r3, [r5, #24]
 802869c:	689a      	ldr	r2, [r3, #8]
 802869e:	6232      	str	r2, [r6, #32]
 80286a0:	899b      	ldrh	r3, [r3, #12]
 80286a2:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 80286a4:	6823      	ldr	r3, [r4, #0]
 80286a6:	f8c6 3016 	str.w	r3, [r6, #22]
 80286aa:	88a3      	ldrh	r3, [r4, #4]
 80286ac:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 80286ae:	69ab      	ldr	r3, [r5, #24]
 80286b0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80286b4:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 80286b8:	68a3      	ldr	r3, [r4, #8]
 80286ba:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80286bc:	4b32      	ldr	r3, [pc, #200]	@ (8028788 <rx_arp+0x170>)
 80286be:	681b      	ldr	r3, [r3, #0]
 80286c0:	2b02      	cmp	r3, #2
 80286c2:	dc04      	bgt.n	80286ce <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 80286c4:	212a      	movs	r1, #42	@ 0x2a
 80286c6:	4620      	mov	r0, r4
 80286c8:	f7f8 feed 	bl	80214a6 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80286cc:	e7b4      	b.n	8028638 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80286ce:	4b2f      	ldr	r3, [pc, #188]	@ (802878c <rx_arp+0x174>)
 80286d0:	f241 4292 	movw	r2, #5266	@ 0x1492
 80286d4:	492e      	ldr	r1, [pc, #184]	@ (8028790 <rx_arp+0x178>)
 80286d6:	2003      	movs	r0, #3
 80286d8:	f7fd fece 	bl	8026478 <mg_log_prefix>
 80286dc:	9400      	str	r4, [sp, #0]
 80286de:	4b2d      	ldr	r3, [pc, #180]	@ (8028794 <rx_arp+0x17c>)
 80286e0:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 80286e4:	492c      	ldr	r1, [pc, #176]	@ (8028798 <rx_arp+0x180>)
 80286e6:	482d      	ldr	r0, [pc, #180]	@ (802879c <rx_arp+0x184>)
 80286e8:	f7fb fd74 	bl	80241d4 <mg_log>
 80286ec:	e7ea      	b.n	80286c4 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80286ee:	2206      	movs	r2, #6
 80286f0:	4621      	mov	r1, r4
 80286f2:	f106 0012 	add.w	r0, r6, #18
 80286f6:	f004 fa27 	bl	802cb48 <memcmp>
 80286fa:	2800      	cmp	r0, #0
 80286fc:	d19c      	bne.n	8028638 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 80286fe:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8028702:	6923      	ldr	r3, [r4, #16]
 8028704:	429a      	cmp	r2, r3
 8028706:	d026      	beq.n	8028756 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028708:	2200      	movs	r2, #0
 802870a:	4629      	mov	r1, r5
 802870c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802870e:	f7fa f9ac 	bl	8022a6a <getpeer>
      if (c != NULL && c->is_arplooking) {
 8028712:	4604      	mov	r4, r0
 8028714:	2800      	cmp	r0, #0
 8028716:	d08f      	beq.n	8028638 <rx_arp+0x20>
 8028718:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802871c:	f013 0f10 	tst.w	r3, #16
 8028720:	d08a      	beq.n	8028638 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8028722:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8028726:	68b3      	ldr	r3, [r6, #8]
 8028728:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 802872c:	89b3      	ldrh	r3, [r6, #12]
 802872e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028732:	4b15      	ldr	r3, [pc, #84]	@ (8028788 <rx_arp+0x170>)
 8028734:	681b      	ldr	r3, [r3, #0]
 8028736:	2b02      	cmp	r3, #2
 8028738:	dc14      	bgt.n	8028764 <rx_arp+0x14c>
        c->is_arplooking = 0;
 802873a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802873e:	f36f 1304 	bfc	r3, #4, #1
 8028742:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8028746:	4620      	mov	r0, r4
 8028748:	f7ff fc22 	bl	8027f90 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 802874c:	2103      	movs	r1, #3
 802874e:	4620      	mov	r0, r4
 8028750:	f7ff fc6a 	bl	8028028 <settmout>
 8028754:	e770      	b.n	8028638 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8028756:	68b3      	ldr	r3, [r6, #8]
 8028758:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 802875c:	89b3      	ldrh	r3, [r6, #12]
 802875e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8028762:	e769      	b.n	8028638 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028764:	4b09      	ldr	r3, [pc, #36]	@ (802878c <rx_arp+0x174>)
 8028766:	f241 429f 	movw	r2, #5279	@ 0x149f
 802876a:	4909      	ldr	r1, [pc, #36]	@ (8028790 <rx_arp+0x178>)
 802876c:	2003      	movs	r0, #3
 802876e:	f7fd fe83 	bl	8026478 <mg_log_prefix>
 8028772:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028774:	9501      	str	r5, [sp, #4]
 8028776:	4b07      	ldr	r3, [pc, #28]	@ (8028794 <rx_arp+0x17c>)
 8028778:	9300      	str	r3, [sp, #0]
 802877a:	f104 031c 	add.w	r3, r4, #28
 802877e:	4a06      	ldr	r2, [pc, #24]	@ (8028798 <rx_arp+0x180>)
 8028780:	4807      	ldr	r0, [pc, #28]	@ (80287a0 <rx_arp+0x188>)
 8028782:	f7fb fd27 	bl	80241d4 <mg_log>
 8028786:	e7d8      	b.n	802873a <rx_arp+0x122>
 8028788:	2000012c 	.word	0x2000012c
 802878c:	0803b9a4 	.word	0x0803b9a4
 8028790:	0803b080 	.word	0x0803b080
 8028794:	080241a5 	.word	0x080241a5
 8028798:	08024195 	.word	0x08024195
 802879c:	0803b5c4 	.word	0x0803b5c4
 80287a0:	0803b5dc 	.word	0x0803b5dc

080287a4 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 80287a4:	b570      	push	{r4, r5, r6, lr}
 80287a6:	b08c      	sub	sp, #48	@ 0x30
 80287a8:	4686      	mov	lr, r0
 80287aa:	460d      	mov	r5, r1
 80287ac:	4616      	mov	r6, r2
  uint8_t opts[] = {
 80287ae:	f10d 0c14 	add.w	ip, sp, #20
 80287b2:	4c22      	ldr	r4, [pc, #136]	@ (802883c <tx_dhcp_request_sel+0x98>)
 80287b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80287b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80287ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80287be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80287c2:	f82c 2b02 	strh.w	r2, [ip], #2
 80287c6:	0c12      	lsrs	r2, r2, #16
 80287c8:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 80287cc:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 80287d0:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 80287d2:	f89e 301f 	ldrb.w	r3, [lr, #31]
 80287d6:	b323      	cbz	r3, 8028822 <tx_dhcp_request_sel+0x7e>
 80287d8:	2306      	movs	r3, #6
 80287da:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80287de:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 80287e0:	f89e 2020 	ldrb.w	r2, [lr, #32]
 80287e4:	b132      	cbz	r2, 80287f4 <tx_dhcp_request_sel+0x50>
 80287e6:	1c5a      	adds	r2, r3, #1
 80287e8:	3348      	adds	r3, #72	@ 0x48
 80287ea:	446b      	add	r3, sp
 80287ec:	212a      	movs	r1, #42	@ 0x2a
 80287ee:	f803 1c1c 	strb.w	r1, [r3, #-28]
 80287f2:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 80287f4:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 80287f8:	441a      	add	r2, r3
 80287fa:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 80287fe:	2200      	movs	r2, #0
 8028800:	9202      	str	r2, [sp, #8]
 8028802:	3319      	adds	r3, #25
 8028804:	9301      	str	r3, [sp, #4]
 8028806:	ab05      	add	r3, sp, #20
 8028808:	9300      	str	r3, [sp, #0]
 802880a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802880e:	490c      	ldr	r1, [pc, #48]	@ (8028840 <tx_dhcp_request_sel+0x9c>)
 8028810:	4670      	mov	r0, lr
 8028812:	f7fd fc31 	bl	8026078 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028816:	4b0b      	ldr	r3, [pc, #44]	@ (8028844 <tx_dhcp_request_sel+0xa0>)
 8028818:	681b      	ldr	r3, [r3, #0]
 802881a:	2b02      	cmp	r3, #2
 802881c:	dc03      	bgt.n	8028826 <tx_dhcp_request_sel+0x82>
}
 802881e:	b00c      	add	sp, #48	@ 0x30
 8028820:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8028822:	2300      	movs	r3, #0
 8028824:	e7dc      	b.n	80287e0 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8028826:	4b08      	ldr	r3, [pc, #32]	@ (8028848 <tx_dhcp_request_sel+0xa4>)
 8028828:	f241 425b 	movw	r2, #5211	@ 0x145b
 802882c:	4907      	ldr	r1, [pc, #28]	@ (802884c <tx_dhcp_request_sel+0xa8>)
 802882e:	2003      	movs	r0, #3
 8028830:	f7fd fe22 	bl	8026478 <mg_log_prefix>
 8028834:	4806      	ldr	r0, [pc, #24]	@ (8028850 <tx_dhcp_request_sel+0xac>)
 8028836:	f7fb fccd 	bl	80241d4 <mg_log>
}
 802883a:	e7f0      	b.n	802881e <tx_dhcp_request_sel+0x7a>
 802883c:	080361e8 	.word	0x080361e8
 8028840:	0803bb08 	.word	0x0803bb08
 8028844:	2000012c 	.word	0x2000012c
 8028848:	0803b978 	.word	0x0803b978
 802884c:	0803b080 	.word	0x0803b080
 8028850:	0803b5b4 	.word	0x0803b5b4

08028854 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8028854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028858:	b089      	sub	sp, #36	@ 0x24
 802885a:	4604      	mov	r4, r0
 802885c:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802885e:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028862:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028866:	d049      	beq.n	80288fc <read_conn+0xa8>
 8028868:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 802886c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 802886e:	6878      	ldr	r0, [r7, #4]
 8028870:	f7fd fa28 	bl	8025cc4 <mg_ntohl>
 8028874:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028876:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8028878:	7b7b      	ldrb	r3, [r7, #13]
 802887a:	f013 0f01 	tst.w	r3, #1
 802887e:	d053      	beq.n	8028928 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8028880:	68eb      	ldr	r3, [r5, #12]
 8028882:	4403      	add	r3, r0
 8028884:	3301      	adds	r3, #1
 8028886:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802888a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802888e:	f013 0f10 	tst.w	r3, #16
 8028892:	d003      	beq.n	802889c <read_conn+0x48>
 8028894:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028898:	2b04      	cmp	r3, #4
 802889a:	d032      	beq.n	8028902 <read_conn+0xae>
      c->is_draining = 1;
 802889c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80288a0:	f043 0310 	orr.w	r3, r3, #16
 80288a4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 80288a8:	2104      	movs	r1, #4
 80288aa:	4620      	mov	r0, r4
 80288ac:	f7ff fbbc 	bl	8028028 <settmout>
      flags |= TH_FIN;
 80288b0:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 80288b4:	6863      	ldr	r3, [r4, #4]
 80288b6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80288b8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80288bc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80288c0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80288c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80288c8:	f7fd f9fc 	bl	8025cc4 <mg_ntohl>
 80288cc:	4605      	mov	r5, r0
 80288ce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80288d2:	f7fd f9f7 	bl	8025cc4 <mg_ntohl>
 80288d6:	2300      	movs	r3, #0
 80288d8:	9305      	str	r3, [sp, #20]
 80288da:	4b9b      	ldr	r3, [pc, #620]	@ (8028b48 <read_conn+0x2f4>)
 80288dc:	9304      	str	r3, [sp, #16]
 80288de:	9003      	str	r0, [sp, #12]
 80288e0:	9502      	str	r5, [sp, #8]
 80288e2:	f8cd a004 	str.w	sl, [sp, #4]
 80288e6:	f8cd 9000 	str.w	r9, [sp]
 80288ea:	465b      	mov	r3, fp
 80288ec:	4632      	mov	r2, r6
 80288ee:	4641      	mov	r1, r8
 80288f0:	4638      	mov	r0, r7
 80288f2:	f7ff fabd 	bl	8027e70 <tx_tcp>
}
 80288f6:	b009      	add	sp, #36	@ 0x24
 80288f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 80288fc:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8028900:	e7b4      	b.n	802886c <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8028902:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8028906:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028908:	6898      	ldr	r0, [r3, #8]
 802890a:	f7fd f9db 	bl	8025cc4 <mg_ntohl>
 802890e:	4287      	cmp	r7, r0
 8028910:	d004      	beq.n	802891c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8028912:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028916:	f04f 0b10 	mov.w	fp, #16
 802891a:	e7cb      	b.n	80288b4 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 802891c:	3701      	adds	r7, #1
 802891e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028922:	f04f 0b10 	mov.w	fp, #16
 8028926:	e7c5      	b.n	80288b4 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8028928:	68eb      	ldr	r3, [r5, #12]
 802892a:	2b00      	cmp	r3, #0
 802892c:	d0e3      	beq.n	80288f6 <read_conn+0xa2>
  } else if (seq != s->ack) {
 802892e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028932:	4282      	cmp	r2, r0
 8028934:	d046      	beq.n	80289c4 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028936:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8028938:	42aa      	cmp	r2, r5
 802893a:	d025      	beq.n	8028988 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 802893c:	4b83      	ldr	r3, [pc, #524]	@ (8028b4c <read_conn+0x2f8>)
 802893e:	681b      	ldr	r3, [r3, #0]
 8028940:	2b03      	cmp	r3, #3
 8028942:	dc30      	bgt.n	80289a6 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028944:	6863      	ldr	r3, [r4, #4]
 8028946:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028948:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802894c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028950:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028954:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028958:	f7fd f9b4 	bl	8025cc4 <mg_ntohl>
 802895c:	4605      	mov	r5, r0
 802895e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028962:	f7fd f9af 	bl	8025cc4 <mg_ntohl>
 8028966:	2300      	movs	r3, #0
 8028968:	9305      	str	r3, [sp, #20]
 802896a:	4b77      	ldr	r3, [pc, #476]	@ (8028b48 <read_conn+0x2f4>)
 802896c:	9304      	str	r3, [sp, #16]
 802896e:	9003      	str	r0, [sp, #12]
 8028970:	9502      	str	r5, [sp, #8]
 8028972:	f8cd a004 	str.w	sl, [sp, #4]
 8028976:	f8cd 9000 	str.w	r9, [sp]
 802897a:	2310      	movs	r3, #16
 802897c:	4632      	mov	r2, r6
 802897e:	4641      	mov	r1, r8
 8028980:	4638      	mov	r0, r7
 8028982:	f7ff fa75 	bl	8027e70 <tx_tcp>
 8028986:	e7b6      	b.n	80288f6 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8028988:	4b70      	ldr	r3, [pc, #448]	@ (8028b4c <read_conn+0x2f8>)
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	2b03      	cmp	r3, #3
 802898e:	ddb2      	ble.n	80288f6 <read_conn+0xa2>
 8028990:	4b6f      	ldr	r3, [pc, #444]	@ (8028b50 <read_conn+0x2fc>)
 8028992:	f241 52da 	movw	r2, #5594	@ 0x15da
 8028996:	496f      	ldr	r1, [pc, #444]	@ (8028b54 <read_conn+0x300>)
 8028998:	2004      	movs	r0, #4
 802899a:	f7fd fd6d 	bl	8026478 <mg_log_prefix>
 802899e:	486e      	ldr	r0, [pc, #440]	@ (8028b58 <read_conn+0x304>)
 80289a0:	f7fb fc18 	bl	80241d4 <mg_log>
 80289a4:	e7a7      	b.n	80288f6 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80289a6:	4b6a      	ldr	r3, [pc, #424]	@ (8028b50 <read_conn+0x2fc>)
 80289a8:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 80289ac:	4969      	ldr	r1, [pc, #420]	@ (8028b54 <read_conn+0x300>)
 80289ae:	2004      	movs	r0, #4
 80289b0:	f7fd fd62 	bl	8026478 <mg_log_prefix>
 80289b4:	462b      	mov	r3, r5
 80289b6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80289ba:	4641      	mov	r1, r8
 80289bc:	4867      	ldr	r0, [pc, #412]	@ (8028b5c <read_conn+0x308>)
 80289be:	f7fb fc09 	bl	80241d4 <mg_log>
 80289c2:	e7bf      	b.n	8028944 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 80289c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80289c8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80289cc:	1a52      	subs	r2, r2, r1
 80289ce:	4293      	cmp	r3, r2
 80289d0:	d905      	bls.n	80289de <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80289d2:	4419      	add	r1, r3
 80289d4:	4648      	mov	r0, r9
 80289d6:	f7fe fb8b 	bl	80270f0 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 80289da:	2800      	cmp	r0, #0
 80289dc:	d05c      	beq.n	8028a98 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 80289de:	f8d9 0000 	ldr.w	r0, [r9]
 80289e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80289e6:	68ea      	ldr	r2, [r5, #12]
 80289e8:	68a9      	ldr	r1, [r5, #8]
 80289ea:	4418      	add	r0, r3
 80289ec:	f005 fb7c 	bl	802e0e8 <memcpy>
    io->len += pkt->pay.len;
 80289f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80289f4:	68ea      	ldr	r2, [r5, #12]
 80289f6:	4413      	add	r3, r2
 80289f8:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 80289fc:	4b53      	ldr	r3, [pc, #332]	@ (8028b4c <read_conn+0x2f8>)
 80289fe:	681b      	ldr	r3, [r3, #0]
 8028a00:	2b03      	cmp	r3, #3
 8028a02:	dc4e      	bgt.n	8028aa2 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028a04:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028a06:	6858      	ldr	r0, [r3, #4]
 8028a08:	f7fd f95c 	bl	8025cc4 <mg_ntohl>
 8028a0c:	68eb      	ldr	r3, [r5, #12]
 8028a0e:	4418      	add	r0, r3
 8028a10:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028a14:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028a18:	68ea      	ldr	r2, [r5, #12]
 8028a1a:	4413      	add	r3, r2
 8028a1c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028a20:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028a24:	4293      	cmp	r3, r2
 8028a26:	d95e      	bls.n	8028ae6 <read_conn+0x292>
 8028a28:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8028a2c:	4298      	cmp	r0, r3
 8028a2e:	d05a      	beq.n	8028ae6 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028a30:	4b46      	ldr	r3, [pc, #280]	@ (8028b4c <read_conn+0x2f8>)
 8028a32:	681b      	ldr	r3, [r3, #0]
 8028a34:	2b03      	cmp	r3, #3
 8028a36:	dc48      	bgt.n	8028aca <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028a38:	6863      	ldr	r3, [r4, #4]
 8028a3a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8028a3e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028a42:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028a46:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028a4a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028a4e:	f7fd f939 	bl	8025cc4 <mg_ntohl>
 8028a52:	9007      	str	r0, [sp, #28]
 8028a54:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028a58:	f7fd f934 	bl	8025cc4 <mg_ntohl>
 8028a5c:	2700      	movs	r7, #0
 8028a5e:	9705      	str	r7, [sp, #20]
 8028a60:	9704      	str	r7, [sp, #16]
 8028a62:	9003      	str	r0, [sp, #12]
 8028a64:	9b07      	ldr	r3, [sp, #28]
 8028a66:	9302      	str	r3, [sp, #8]
 8028a68:	f8cd b004 	str.w	fp, [sp, #4]
 8028a6c:	f8cd a000 	str.w	sl, [sp]
 8028a70:	2310      	movs	r3, #16
 8028a72:	4632      	mov	r2, r6
 8028a74:	4641      	mov	r1, r8
 8028a76:	4648      	mov	r0, r9
 8028a78:	f7ff f9fa 	bl	8027e70 <tx_tcp>
      s->unacked = 0;
 8028a7c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8028a80:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028a84:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028a88:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028a8c:	b37b      	cbz	r3, 8028aee <read_conn+0x29a>
 8028a8e:	4639      	mov	r1, r7
 8028a90:	4620      	mov	r0, r4
 8028a92:	f7ff fac9 	bl	8028028 <settmout>
 8028a96:	e02a      	b.n	8028aee <read_conn+0x29a>
    mg_error(c, "oom");
 8028a98:	4931      	ldr	r1, [pc, #196]	@ (8028b60 <read_conn+0x30c>)
 8028a9a:	4620      	mov	r0, r4
 8028a9c:	f7fd fdd4 	bl	8026648 <mg_error>
 8028aa0:	e729      	b.n	80288f6 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8028aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8028b50 <read_conn+0x2fc>)
 8028aa4:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8028aa8:	492a      	ldr	r1, [pc, #168]	@ (8028b54 <read_conn+0x300>)
 8028aaa:	2004      	movs	r0, #4
 8028aac:	f7fd fce4 	bl	8026478 <mg_log_prefix>
 8028ab0:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8028ab2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028ab4:	6858      	ldr	r0, [r3, #4]
 8028ab6:	f7fd f905 	bl	8025cc4 <mg_ntohl>
 8028aba:	4602      	mov	r2, r0
 8028abc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028ac0:	4639      	mov	r1, r7
 8028ac2:	4828      	ldr	r0, [pc, #160]	@ (8028b64 <read_conn+0x310>)
 8028ac4:	f7fb fb86 	bl	80241d4 <mg_log>
 8028ac8:	e79c      	b.n	8028a04 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028aca:	4b21      	ldr	r3, [pc, #132]	@ (8028b50 <read_conn+0x2fc>)
 8028acc:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8028ad0:	4920      	ldr	r1, [pc, #128]	@ (8028b54 <read_conn+0x300>)
 8028ad2:	2004      	movs	r0, #4
 8028ad4:	f7fd fcd0 	bl	8026478 <mg_log_prefix>
 8028ad8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8028adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028ade:	4822      	ldr	r0, [pc, #136]	@ (8028b68 <read_conn+0x314>)
 8028ae0:	f7fb fb78 	bl	80241d4 <mg_log>
 8028ae4:	e7a8      	b.n	8028a38 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028ae6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028aea:	2b01      	cmp	r3, #1
 8028aec:	d11b      	bne.n	8028b26 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 8028aee:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028af2:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028af6:	2ac0      	cmp	r2, #192	@ 0xc0
 8028af8:	f43f aefd 	beq.w	80288f6 <read_conn+0xa2>
    } else if (c->is_tls) {
 8028afc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028b00:	d01b      	beq.n	8028b3a <read_conn+0x2e6>
      io = &c->recv;
 8028b02:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028b06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028b08:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8028b0a:	1a5b      	subs	r3, r3, r1
 8028b0c:	68ea      	ldr	r2, [r5, #12]
 8028b0e:	4293      	cmp	r3, r2
 8028b10:	d204      	bcs.n	8028b1c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028b12:	4411      	add	r1, r2
 8028b14:	4630      	mov	r0, r6
 8028b16:	f7fe faeb 	bl	80270f0 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 8028b1a:	b148      	cbz	r0, 8028b30 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 8028b1c:	4631      	mov	r1, r6
 8028b1e:	4620      	mov	r0, r4
 8028b20:	f7fd fdca 	bl	80266b8 <handle_tls_recv>
 8028b24:	e6e7      	b.n	80288f6 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028b26:	2101      	movs	r1, #1
 8028b28:	4620      	mov	r0, r4
 8028b2a:	f7ff fa7d 	bl	8028028 <settmout>
 8028b2e:	e7de      	b.n	8028aee <read_conn+0x29a>
        mg_error(c, "oom");
 8028b30:	490b      	ldr	r1, [pc, #44]	@ (8028b60 <read_conn+0x30c>)
 8028b32:	4620      	mov	r0, r4
 8028b34:	f7fd fd88 	bl	8026648 <mg_error>
 8028b38:	e6dd      	b.n	80288f6 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8028b3a:	f105 020c 	add.w	r2, r5, #12
 8028b3e:	2107      	movs	r1, #7
 8028b40:	4620      	mov	r0, r4
 8028b42:	f7fa f8fe 	bl	8022d42 <mg_call>
}
 8028b46:	e6d6      	b.n	80288f6 <read_conn+0xa2>
 8028b48:	08036fac 	.word	0x08036fac
 8028b4c:	2000012c 	.word	0x2000012c
 8028b50:	0803b96c 	.word	0x0803b96c
 8028b54:	0803b080 	.word	0x0803b080
 8028b58:	0803b5f8 	.word	0x0803b5f8
 8028b5c:	0803b610 	.word	0x0803b610
 8028b60:	0803b380 	.word	0x0803b380
 8028b64:	0803b628 	.word	0x0803b628
 8028b68:	0803b63c 	.word	0x0803b63c

08028b6c <accept_conn>:
                                         struct pkt *pkt) {
 8028b6c:	b570      	push	{r4, r5, r6, lr}
 8028b6e:	4605      	mov	r5, r0
 8028b70:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8028b72:	6840      	ldr	r0, [r0, #4]
 8028b74:	f7fa fe58 	bl	8023828 <mg_alloc_conn>
  if (c == NULL) {
 8028b78:	4604      	mov	r4, r0
 8028b7a:	2800      	cmp	r0, #0
 8028b7c:	d058      	beq.n	8028c30 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8028b7e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028b80:	6898      	ldr	r0, [r3, #8]
 8028b82:	f7fd f89f 	bl	8025cc4 <mg_ntohl>
 8028b86:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 8028b8a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028b8c:	6858      	ldr	r0, [r3, #4]
 8028b8e:	f7fd f899 	bl	8025cc4 <mg_ntohl>
 8028b92:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8028b96:	6933      	ldr	r3, [r6, #16]
 8028b98:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8028b9c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8028ba0:	895b      	ldrh	r3, [r3, #10]
 8028ba2:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8028ba6:	2100      	movs	r1, #0
 8028ba8:	4620      	mov	r0, r4
 8028baa:	f7ff fa3d 	bl	8028028 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8028bae:	69f3      	ldr	r3, [r6, #28]
 8028bb0:	68db      	ldr	r3, [r3, #12]
 8028bb2:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8028bb4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028bb6:	881b      	ldrh	r3, [r3, #0]
 8028bb8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8028bba:	4b2c      	ldr	r3, [pc, #176]	@ (8028c6c <accept_conn+0x100>)
 8028bbc:	681b      	ldr	r3, [r3, #0]
 8028bbe:	2b02      	cmp	r3, #2
 8028bc0:	dc45      	bgt.n	8028c4e <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8028bc2:	686b      	ldr	r3, [r5, #4]
 8028bc4:	681b      	ldr	r3, [r3, #0]
 8028bc6:	6023      	str	r3, [r4, #0]
 8028bc8:	686b      	ldr	r3, [r5, #4]
 8028bca:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 8028bcc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028bd0:	f043 0304 	orr.w	r3, r3, #4
 8028bd4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8028bd8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8028bdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8028be0:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8028be4:	f363 02c3 	bfi	r2, r3, #3, #1
 8028be8:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8028bec:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8028bf0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8028bf4:	f104 0608 	add.w	r6, r4, #8
 8028bf8:	f105 0c08 	add.w	ip, r5, #8
 8028bfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8028c00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8028c02:	f8dc 3000 	ldr.w	r3, [ip]
 8028c06:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8028c08:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8028c0c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8028c10:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8028c12:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8028c14:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8028c16:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8028c18:	2200      	movs	r2, #0
 8028c1a:	2101      	movs	r1, #1
 8028c1c:	4620      	mov	r0, r4
 8028c1e:	f7fa f890 	bl	8022d42 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8028c22:	2200      	movs	r2, #0
 8028c24:	2105      	movs	r1, #5
 8028c26:	4620      	mov	r0, r4
 8028c28:	f7fa f88b 	bl	8022d42 <mg_call>
}
 8028c2c:	4620      	mov	r0, r4
 8028c2e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8028c30:	4b0e      	ldr	r3, [pc, #56]	@ (8028c6c <accept_conn+0x100>)
 8028c32:	681b      	ldr	r3, [r3, #0]
 8028c34:	2b00      	cmp	r3, #0
 8028c36:	ddf9      	ble.n	8028c2c <accept_conn+0xc0>
 8028c38:	4b0d      	ldr	r3, [pc, #52]	@ (8028c70 <accept_conn+0x104>)
 8028c3a:	f241 5268 	movw	r2, #5480	@ 0x1568
 8028c3e:	490d      	ldr	r1, [pc, #52]	@ (8028c74 <accept_conn+0x108>)
 8028c40:	2001      	movs	r0, #1
 8028c42:	f7fd fc19 	bl	8026478 <mg_log_prefix>
 8028c46:	480c      	ldr	r0, [pc, #48]	@ (8028c78 <accept_conn+0x10c>)
 8028c48:	f7fb fac4 	bl	80241d4 <mg_log>
    return NULL;
 8028c4c:	e7ee      	b.n	8028c2c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8028c4e:	4b08      	ldr	r3, [pc, #32]	@ (8028c70 <accept_conn+0x104>)
 8028c50:	f241 5271 	movw	r2, #5489	@ 0x1571
 8028c54:	4907      	ldr	r1, [pc, #28]	@ (8028c74 <accept_conn+0x108>)
 8028c56:	2003      	movs	r0, #3
 8028c58:	f7fd fc0e 	bl	8026478 <mg_log_prefix>
 8028c5c:	f104 031c 	add.w	r3, r4, #28
 8028c60:	4a06      	ldr	r2, [pc, #24]	@ (8028c7c <accept_conn+0x110>)
 8028c62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c64:	4806      	ldr	r0, [pc, #24]	@ (8028c80 <accept_conn+0x114>)
 8028c66:	f7fb fab5 	bl	80241d4 <mg_log>
 8028c6a:	e7aa      	b.n	8028bc2 <accept_conn+0x56>
 8028c6c:	2000012c 	.word	0x2000012c
 8028c70:	0803b960 	.word	0x0803b960
 8028c74:	0803b080 	.word	0x0803b080
 8028c78:	0803b6a8 	.word	0x0803b6a8
 8028c7c:	0802632d 	.word	0x0802632d
 8028c80:	0803b64c 	.word	0x0803b64c

08028c84 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028c88:	b083      	sub	sp, #12
 8028c8a:	4606      	mov	r6, r0
 8028c8c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028c8e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8028c90:	2200      	movs	r2, #0
 8028c92:	4638      	mov	r0, r7
 8028c94:	f7f9 fee9 	bl	8022a6a <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8028c98:	4605      	mov	r5, r0
 8028c9a:	b380      	cbz	r0, 8028cfe <rx_tcp+0x7a>
 8028c9c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8028ca0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028ca4:	f013 0f20 	tst.w	r3, #32
 8028ca8:	d02b      	beq.n	8028d02 <rx_tcp+0x7e>
 8028caa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028cac:	7b5a      	ldrb	r2, [r3, #13]
 8028cae:	2a12      	cmp	r2, #18
 8028cb0:	d126      	bne.n	8028d00 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8028cb2:	6898      	ldr	r0, [r3, #8]
 8028cb4:	f7fd f806 	bl	8025cc4 <mg_ntohl>
 8028cb8:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 8028cbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028cbe:	6858      	ldr	r0, [r3, #4]
 8028cc0:	f7fd f800 	bl	8025cc4 <mg_ntohl>
 8028cc4:	3001      	adds	r0, #1
 8028cc6:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8028cca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028ccc:	689b      	ldr	r3, [r3, #8]
 8028cce:	2700      	movs	r7, #0
 8028cd0:	9701      	str	r7, [sp, #4]
 8028cd2:	9700      	str	r7, [sp, #0]
 8028cd4:	2210      	movs	r2, #16
 8028cd6:	4621      	mov	r1, r4
 8028cd8:	4630      	mov	r0, r6
 8028cda:	f7ff f975 	bl	8027fc8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8028cde:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028ce2:	f367 1345 	bfi	r3, r7, #5, #1
 8028ce6:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8028cea:	4639      	mov	r1, r7
 8028cec:	4628      	mov	r0, r5
 8028cee:	f7ff f99b 	bl	8028028 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8028cf2:	463a      	mov	r2, r7
 8028cf4:	2104      	movs	r1, #4
 8028cf6:	4628      	mov	r0, r5
 8028cf8:	f7fa f823 	bl	8022d42 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8028cfc:	e01b      	b.n	8028d36 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8028cfe:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8028d00:	b385      	cbz	r5, 8028d64 <rx_tcp+0xe0>
 8028d02:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028d06:	f013 0f20 	tst.w	r3, #32
 8028d0a:	d004      	beq.n	8028d16 <rx_tcp+0x92>
 8028d0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028d0e:	7b5a      	ldrb	r2, [r3, #13]
 8028d10:	2a10      	cmp	r2, #16
 8028d12:	d113      	bne.n	8028d3c <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8028d14:	b335      	cbz	r5, 8028d64 <rx_tcp+0xe0>
 8028d16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028d18:	7b5b      	ldrb	r3, [r3, #13]
 8028d1a:	f013 0f04 	tst.w	r3, #4
 8028d1e:	d117      	bne.n	8028d50 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8028d20:	b305      	cbz	r5, 8028d64 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8028d22:	2300      	movs	r3, #0
 8028d24:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8028d28:	f898 301e 	ldrb.w	r3, [r8, #30]
 8028d2c:	b1ab      	cbz	r3, 8028d5a <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8028d2e:	4621      	mov	r1, r4
 8028d30:	4628      	mov	r0, r5
 8028d32:	f7ff fd8f 	bl	8028854 <read_conn>
}
 8028d36:	b003      	add	sp, #12
 8028d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028d3c:	689b      	ldr	r3, [r3, #8]
 8028d3e:	2200      	movs	r2, #0
 8028d40:	9201      	str	r2, [sp, #4]
 8028d42:	9200      	str	r2, [sp, #0]
 8028d44:	2214      	movs	r2, #20
 8028d46:	4621      	mov	r1, r4
 8028d48:	4630      	mov	r0, r6
 8028d4a:	f7ff f93d 	bl	8027fc8 <tx_tcp_pkt>
 8028d4e:	e7f2      	b.n	8028d36 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028d50:	4934      	ldr	r1, [pc, #208]	@ (8028e24 <rx_tcp+0x1a0>)
 8028d52:	4628      	mov	r0, r5
 8028d54:	f7fd fc78 	bl	8026648 <mg_error>
 8028d58:	e7ed      	b.n	8028d36 <rx_tcp+0xb2>
      settmout(c,
 8028d5a:	2100      	movs	r1, #0
 8028d5c:	4628      	mov	r0, r5
 8028d5e:	f7ff f963 	bl	8028028 <settmout>
 8028d62:	e7e4      	b.n	8028d2e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8028d64:	2201      	movs	r2, #1
 8028d66:	4621      	mov	r1, r4
 8028d68:	4638      	mov	r0, r7
 8028d6a:	f7f9 fe7e 	bl	8022a6a <getpeer>
 8028d6e:	4607      	mov	r7, r0
 8028d70:	b168      	cbz	r0, 8028d8e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8028d72:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8028d74:	7b6b      	ldrb	r3, [r5, #13]
 8028d76:	f013 0f04 	tst.w	r3, #4
 8028d7a:	d013      	beq.n	8028da4 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028d7c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028d80:	f013 0f04 	tst.w	r3, #4
 8028d84:	d0d7      	beq.n	8028d36 <rx_tcp+0xb2>
 8028d86:	4927      	ldr	r1, [pc, #156]	@ (8028e24 <rx_tcp+0x1a0>)
 8028d88:	f7fd fc5e 	bl	8026648 <mg_error>
 8028d8c:	e7d3      	b.n	8028d36 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028d8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028d90:	689b      	ldr	r3, [r3, #8]
 8028d92:	2200      	movs	r2, #0
 8028d94:	9201      	str	r2, [sp, #4]
 8028d96:	9200      	str	r2, [sp, #0]
 8028d98:	2214      	movs	r2, #20
 8028d9a:	4621      	mov	r1, r4
 8028d9c:	4630      	mov	r0, r6
 8028d9e:	f7ff f913 	bl	8027fc8 <tx_tcp_pkt>
 8028da2:	e7c8      	b.n	8028d36 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8028da4:	f013 0f02 	tst.w	r3, #2
 8028da8:	d11d      	bne.n	8028de6 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 8028daa:	f013 0f01 	tst.w	r3, #1
 8028dae:	d129      	bne.n	8028e04 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8028db0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8028db4:	4648      	mov	r0, r9
 8028db6:	f7fc ff85 	bl	8025cc4 <mg_ntohl>
 8028dba:	4680      	mov	r8, r0
 8028dbc:	8828      	ldrh	r0, [r5, #0]
 8028dbe:	f7fd f819 	bl	8025df4 <mg_ntohs>
 8028dc2:	1c43      	adds	r3, r0, #1
 8028dc4:	4598      	cmp	r8, r3
 8028dc6:	d027      	beq.n	8028e18 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8028dc8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8028dcc:	f013 0f04 	tst.w	r3, #4
 8028dd0:	d1b1      	bne.n	8028d36 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028dd2:	2300      	movs	r3, #0
 8028dd4:	9301      	str	r3, [sp, #4]
 8028dd6:	9300      	str	r3, [sp, #0]
 8028dd8:	464b      	mov	r3, r9
 8028dda:	2214      	movs	r2, #20
 8028ddc:	4621      	mov	r1, r4
 8028dde:	4630      	mov	r0, r6
 8028de0:	f7ff f8f2 	bl	8027fc8 <tx_tcp_pkt>
}
 8028de4:	e7a7      	b.n	8028d36 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8028de6:	8828      	ldrh	r0, [r5, #0]
 8028de8:	f7fd f804 	bl	8025df4 <mg_ntohs>
 8028dec:	f7fc ff6a 	bl	8025cc4 <mg_ntohl>
 8028df0:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8028df2:	2200      	movs	r2, #0
 8028df4:	9201      	str	r2, [sp, #4]
 8028df6:	9200      	str	r2, [sp, #0]
 8028df8:	2212      	movs	r2, #18
 8028dfa:	4621      	mov	r1, r4
 8028dfc:	4630      	mov	r0, r6
 8028dfe:	f7ff f8e3 	bl	8027fc8 <tx_tcp_pkt>
 8028e02:	e798      	b.n	8028d36 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028e04:	68ab      	ldr	r3, [r5, #8]
 8028e06:	2200      	movs	r2, #0
 8028e08:	9201      	str	r2, [sp, #4]
 8028e0a:	9200      	str	r2, [sp, #0]
 8028e0c:	2211      	movs	r2, #17
 8028e0e:	4621      	mov	r1, r4
 8028e10:	4630      	mov	r0, r6
 8028e12:	f7ff f8d9 	bl	8027fc8 <tx_tcp_pkt>
 8028e16:	e78e      	b.n	8028d36 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8028e18:	4621      	mov	r1, r4
 8028e1a:	4638      	mov	r0, r7
 8028e1c:	f7ff fea6 	bl	8028b6c <accept_conn>
 8028e20:	e789      	b.n	8028d36 <rx_tcp+0xb2>
 8028e22:	bf00      	nop
 8028e24:	0803b65c 	.word	0x0803b65c

08028e28 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8028e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e2c:	b082      	sub	sp, #8
 8028e2e:	4604      	mov	r4, r0
 8028e30:	4688      	mov	r8, r1
 8028e32:	4617      	mov	r7, r2
 8028e34:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8028e36:	6819      	ldr	r1, [r3, #0]
 8028e38:	2900      	cmp	r1, #0
 8028e3a:	d037      	beq.n	8028eac <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8028e3c:	685b      	ldr	r3, [r3, #4]
 8028e3e:	2b00      	cmp	r3, #0
 8028e40:	d038      	beq.n	8028eb4 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8028e42:	686b      	ldr	r3, [r5, #4]
 8028e44:	2b00      	cmp	r3, #0
 8028e46:	d040      	beq.n	8028eca <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8028e48:	2118      	movs	r1, #24
 8028e4a:	2001      	movs	r0, #1
 8028e4c:	f7f9 fde8 	bl	8022a20 <mg_calloc>
 8028e50:	4606      	mov	r6, r0
 8028e52:	2800      	cmp	r0, #0
 8028e54:	d03e      	beq.n	8028ed4 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8028e56:	6863      	ldr	r3, [r4, #4]
 8028e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028e5a:	2b00      	cmp	r3, #0
 8028e5c:	d03f      	beq.n	8028ede <mg_sendnsreq+0xb6>
 8028e5e:	8a1b      	ldrh	r3, [r3, #16]
 8028e60:	3301      	adds	r3, #1
 8028e62:	b29b      	uxth	r3, r3
 8028e64:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8028e66:	6863      	ldr	r3, [r4, #4]
 8028e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028e6a:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8028e6c:	6863      	ldr	r3, [r4, #4]
 8028e6e:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8028e70:	f7fd fafc 	bl	802646c <mg_millis>
 8028e74:	19c0      	adds	r0, r0, r7
 8028e76:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8028e7a:	60b0      	str	r0, [r6, #8]
 8028e7c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8028e7e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8028e80:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028e84:	f043 0308 	orr.w	r3, r3, #8
 8028e88:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028e8c:	4b21      	ldr	r3, [pc, #132]	@ (8028f14 <mg_sendnsreq+0xec>)
 8028e8e:	681b      	ldr	r3, [r3, #0]
 8028e90:	2b03      	cmp	r3, #3
 8028e92:	dc26      	bgt.n	8028ee2 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8028e94:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028e98:	8a32      	ldrh	r2, [r6, #16]
 8028e9a:	4641      	mov	r1, r8
 8028e9c:	6868      	ldr	r0, [r5, #4]
 8028e9e:	f7fe fbd5 	bl	802764c <mg_dns_send>
 8028ea2:	2800      	cmp	r0, #0
 8028ea4:	d031      	beq.n	8028f0a <mg_sendnsreq+0xe2>
}
 8028ea6:	b002      	add	sp, #8
 8028ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8028eac:	491a      	ldr	r1, [pc, #104]	@ (8028f18 <mg_sendnsreq+0xf0>)
 8028eae:	f7fd fbcb 	bl	8026648 <mg_error>
 8028eb2:	e7c6      	b.n	8028e42 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8028eb4:	461a      	mov	r2, r3
 8028eb6:	6840      	ldr	r0, [r0, #4]
 8028eb8:	f000 f866 	bl	8028f88 <mg_connect>
 8028ebc:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8028ebe:	2800      	cmp	r0, #0
 8028ec0:	d0bf      	beq.n	8028e42 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8028ec2:	4b16      	ldr	r3, [pc, #88]	@ (8028f1c <mg_sendnsreq+0xf4>)
 8028ec4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8028ec8:	e7bb      	b.n	8028e42 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8028eca:	4915      	ldr	r1, [pc, #84]	@ (8028f20 <mg_sendnsreq+0xf8>)
 8028ecc:	4620      	mov	r0, r4
 8028ece:	f7fd fbbb 	bl	8026648 <mg_error>
 8028ed2:	e7e8      	b.n	8028ea6 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8028ed4:	4913      	ldr	r1, [pc, #76]	@ (8028f24 <mg_sendnsreq+0xfc>)
 8028ed6:	4620      	mov	r0, r4
 8028ed8:	f7fd fbb6 	bl	8026648 <mg_error>
 8028edc:	e7e3      	b.n	8028ea6 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028ede:	2301      	movs	r3, #1
 8028ee0:	e7c0      	b.n	8028e64 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028ee2:	4b11      	ldr	r3, [pc, #68]	@ (8028f28 <mg_sendnsreq+0x100>)
 8028ee4:	f240 521e 	movw	r2, #1310	@ 0x51e
 8028ee8:	4910      	ldr	r1, [pc, #64]	@ (8028f2c <mg_sendnsreq+0x104>)
 8028eea:	2004      	movs	r0, #4
 8028eec:	f7fd fac4 	bl	8026478 <mg_log_prefix>
 8028ef0:	8a33      	ldrh	r3, [r6, #16]
 8028ef2:	9301      	str	r3, [sp, #4]
 8028ef4:	682b      	ldr	r3, [r5, #0]
 8028ef6:	9300      	str	r3, [sp, #0]
 8028ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8028efc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8028f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028f02:	480b      	ldr	r0, [pc, #44]	@ (8028f30 <mg_sendnsreq+0x108>)
 8028f04:	f7fb f966 	bl	80241d4 <mg_log>
 8028f08:	e7c4      	b.n	8028e94 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8028f0a:	490a      	ldr	r1, [pc, #40]	@ (8028f34 <mg_sendnsreq+0x10c>)
 8028f0c:	6868      	ldr	r0, [r5, #4]
 8028f0e:	f7fd fb9b 	bl	8026648 <mg_error>
}
 8028f12:	e7c8      	b.n	8028ea6 <mg_sendnsreq+0x7e>
 8028f14:	2000012c 	.word	0x2000012c
 8028f18:	0803b668 	.word	0x0803b668
 8028f1c:	080283c5 	.word	0x080283c5
 8028f20:	0803b694 	.word	0x0803b694
 8028f24:	0803b6a0 	.word	0x0803b6a0
 8028f28:	0803bae8 	.word	0x0803bae8
 8028f2c:	0803b080 	.word	0x0803b080
 8028f30:	0803b6ac 	.word	0x0803b6ac
 8028f34:	0803b6d0 	.word	0x0803b6d0

08028f38 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8028f38:	b570      	push	{r4, r5, r6, lr}
 8028f3a:	b084      	sub	sp, #16
 8028f3c:	4604      	mov	r4, r0
 8028f3e:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8028f40:	ad02      	add	r5, sp, #8
 8028f42:	4628      	mov	r0, r5
 8028f44:	f7fc fde8 	bl	8025b18 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8028f48:	4630      	mov	r0, r6
 8028f4a:	f7fc fe03 	bl	8025b54 <mg_url_port>
 8028f4e:	f7fc ff51 	bl	8025df4 <mg_ntohs>
 8028f52:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8028f54:	f104 021c 	add.w	r2, r4, #28
 8028f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028f5c:	f7fc fee6 	bl	8025d2c <mg_aton>
 8028f60:	b960      	cbnz	r0, 8028f7c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028f62:	6862      	ldr	r2, [r4, #4]
 8028f64:	7e11      	ldrb	r1, [r2, #24]
 8028f66:	b169      	cbz	r1, 8028f84 <mg_resolve+0x4c>
 8028f68:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8028f6c:	6952      	ldr	r2, [r2, #20]
 8028f6e:	9100      	str	r1, [sp, #0]
 8028f70:	a902      	add	r1, sp, #8
 8028f72:	4620      	mov	r0, r4
 8028f74:	f7ff ff58 	bl	8028e28 <mg_sendnsreq>
}
 8028f78:	b004      	add	sp, #16
 8028f7a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8028f7c:	4620      	mov	r0, r4
 8028f7e:	f7ff f951 	bl	8028224 <mg_connect_resolved>
 8028f82:	e7f9      	b.n	8028f78 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028f84:	1d13      	adds	r3, r2, #4
 8028f86:	e7f1      	b.n	8028f6c <mg_resolve+0x34>

08028f88 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8028f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8028f8c:	b129      	cbz	r1, 8028f9a <mg_connect+0x12>
 8028f8e:	4680      	mov	r8, r0
 8028f90:	4617      	mov	r7, r2
 8028f92:	461e      	mov	r6, r3
 8028f94:	460d      	mov	r5, r1
 8028f96:	780b      	ldrb	r3, [r1, #0]
 8028f98:	b99b      	cbnz	r3, 8028fc2 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8028f9a:	4b30      	ldr	r3, [pc, #192]	@ (802905c <mg_connect+0xd4>)
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	dc03      	bgt.n	8028faa <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8028fa2:	2400      	movs	r4, #0
}
 8028fa4:	4620      	mov	r0, r4
 8028fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8028faa:	4b2d      	ldr	r3, [pc, #180]	@ (8029060 <mg_connect+0xd8>)
 8028fac:	f241 22be 	movw	r2, #4798	@ 0x12be
 8028fb0:	492c      	ldr	r1, [pc, #176]	@ (8029064 <mg_connect+0xdc>)
 8028fb2:	2001      	movs	r0, #1
 8028fb4:	f7fd fa60 	bl	8026478 <mg_log_prefix>
 8028fb8:	482b      	ldr	r0, [pc, #172]	@ (8029068 <mg_connect+0xe0>)
 8028fba:	f7fb f90b 	bl	80241d4 <mg_log>
  struct mg_connection *c = NULL;
 8028fbe:	2400      	movs	r4, #0
 8028fc0:	e7f0      	b.n	8028fa4 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8028fc2:	f7fa fc31 	bl	8023828 <mg_alloc_conn>
 8028fc6:	4604      	mov	r4, r0
 8028fc8:	b358      	cbz	r0, 8029022 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8028fca:	f8d8 3000 	ldr.w	r3, [r8]
 8028fce:	6003      	str	r3, [r0, #0]
 8028fd0:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8028fd4:	2204      	movs	r2, #4
 8028fd6:	4925      	ldr	r1, [pc, #148]	@ (802906c <mg_connect+0xe4>)
 8028fd8:	4628      	mov	r0, r5
 8028fda:	f003 fe7e 	bl	802ccda <strncmp>
 8028fde:	fab0 f080 	clz	r0, r0
 8028fe2:	0940      	lsrs	r0, r0, #5
 8028fe4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028fe8:	f360 0300 	bfi	r3, r0, #0, #1
 8028fec:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8028ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028ff4:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8028ff6:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8028ff8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028ffc:	f043 0302 	orr.w	r3, r3, #2
 8029000:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8029004:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8029006:	4b15      	ldr	r3, [pc, #84]	@ (802905c <mg_connect+0xd4>)
 8029008:	681b      	ldr	r3, [r3, #0]
 802900a:	2b02      	cmp	r3, #2
 802900c:	dc18      	bgt.n	8029040 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802900e:	462a      	mov	r2, r5
 8029010:	2101      	movs	r1, #1
 8029012:	4620      	mov	r0, r4
 8029014:	f7f9 fe95 	bl	8022d42 <mg_call>
    mg_resolve(c, url);
 8029018:	4629      	mov	r1, r5
 802901a:	4620      	mov	r0, r4
 802901c:	f7ff ff8c 	bl	8028f38 <mg_resolve>
 8029020:	e7c0      	b.n	8028fa4 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8029022:	4b0e      	ldr	r3, [pc, #56]	@ (802905c <mg_connect+0xd4>)
 8029024:	681b      	ldr	r3, [r3, #0]
 8029026:	2b00      	cmp	r3, #0
 8029028:	ddbc      	ble.n	8028fa4 <mg_connect+0x1c>
 802902a:	4b0d      	ldr	r3, [pc, #52]	@ (8029060 <mg_connect+0xd8>)
 802902c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8029030:	490c      	ldr	r1, [pc, #48]	@ (8029064 <mg_connect+0xdc>)
 8029032:	2001      	movs	r0, #1
 8029034:	f7fd fa20 	bl	8026478 <mg_log_prefix>
 8029038:	480d      	ldr	r0, [pc, #52]	@ (8029070 <mg_connect+0xe8>)
 802903a:	f7fb f8cb 	bl	80241d4 <mg_log>
 802903e:	e7b1      	b.n	8028fa4 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8029040:	4b07      	ldr	r3, [pc, #28]	@ (8029060 <mg_connect+0xd8>)
 8029042:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8029046:	4907      	ldr	r1, [pc, #28]	@ (8029064 <mg_connect+0xdc>)
 8029048:	2003      	movs	r0, #3
 802904a:	f7fd fa15 	bl	8026478 <mg_log_prefix>
 802904e:	462b      	mov	r3, r5
 8029050:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8029052:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029054:	4807      	ldr	r0, [pc, #28]	@ (8029074 <mg_connect+0xec>)
 8029056:	f7fb f8bd 	bl	80241d4 <mg_log>
 802905a:	e7d8      	b.n	802900e <mg_connect+0x86>
 802905c:	2000012c 	.word	0x2000012c
 8029060:	0803ba5c 	.word	0x0803ba5c
 8029064:	0803b080 	.word	0x0803b080
 8029068:	0803b6dc 	.word	0x0803b6dc
 802906c:	0803b3b4 	.word	0x0803b3b4
 8029070:	0803b6a8 	.word	0x0803b6a8
 8029074:	0803b0dc 	.word	0x0803b0dc

08029078 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8029078:	b530      	push	{r4, r5, lr}
 802907a:	b091      	sub	sp, #68	@ 0x44
 802907c:	4614      	mov	r4, r2
 802907e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8029080:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029082:	f7ff ff81 	bl	8028f88 <mg_connect>
  if (c != NULL) {
 8029086:	4605      	mov	r5, r0
 8029088:	b160      	cbz	r0, 80290a4 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 802908a:	2240      	movs	r2, #64	@ 0x40
 802908c:	2100      	movs	r1, #0
 802908e:	4668      	mov	r0, sp
 8029090:	f003 fdee 	bl	802cc70 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8029094:	b14c      	cbz	r4, 80290aa <mg_mqtt_connect+0x32>
 8029096:	4621      	mov	r1, r4
 8029098:	4628      	mov	r0, r5
 802909a:	f7fe fbfd 	bl	8027898 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802909e:	4b04      	ldr	r3, [pc, #16]	@ (80290b0 <mg_mqtt_connect+0x38>)
 80290a0:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 80290a4:	4628      	mov	r0, r5
 80290a6:	b011      	add	sp, #68	@ 0x44
 80290a8:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 80290aa:	466c      	mov	r4, sp
 80290ac:	e7f3      	b.n	8029096 <mg_mqtt_connect+0x1e>
 80290ae:	bf00      	nop
 80290b0:	08027c71 	.word	0x08027c71

080290b4 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80290b4:	b538      	push	{r3, r4, r5, lr}
 80290b6:	4605      	mov	r5, r0
 80290b8:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80290ba:	680b      	ldr	r3, [r1, #0]
 80290bc:	b90b      	cbnz	r3, 80290c2 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80290be:	888b      	ldrh	r3, [r1, #4]
 80290c0:	b1a3      	cbz	r3, 80290ec <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80290c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	b34b      	cbz	r3, 802911c <mg_tcpip_init+0x68>
 80290c8:	4620      	mov	r0, r4
 80290ca:	4798      	blx	r3
 80290cc:	bb30      	cbnz	r0, 802911c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 80290ce:	4b3b      	ldr	r3, [pc, #236]	@ (80291bc <mg_tcpip_init+0x108>)
 80290d0:	681b      	ldr	r3, [r3, #0]
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	dd5f      	ble.n	8029196 <mg_tcpip_init+0xe2>
 80290d6:	4b3a      	ldr	r3, [pc, #232]	@ (80291c0 <mg_tcpip_init+0x10c>)
 80290d8:	f241 7223 	movw	r2, #5923	@ 0x1723
 80290dc:	4939      	ldr	r1, [pc, #228]	@ (80291c4 <mg_tcpip_init+0x110>)
 80290de:	2001      	movs	r0, #1
 80290e0:	f7fd f9ca 	bl	8026478 <mg_log_prefix>
 80290e4:	4838      	ldr	r0, [pc, #224]	@ (80291c8 <mg_tcpip_init+0x114>)
 80290e6:	f7fb f875 	bl	80241d4 <mg_log>
 80290ea:	e054      	b.n	8029196 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80290ec:	4608      	mov	r0, r1
 80290ee:	2302      	movs	r3, #2
 80290f0:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80290f4:	2105      	movs	r1, #5
 80290f6:	f7fc fdaa 	bl	8025c4e <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 80290fa:	4b30      	ldr	r3, [pc, #192]	@ (80291bc <mg_tcpip_init+0x108>)
 80290fc:	681b      	ldr	r3, [r3, #0]
 80290fe:	2b01      	cmp	r3, #1
 8029100:	dddf      	ble.n	80290c2 <mg_tcpip_init+0xe>
 8029102:	4b2f      	ldr	r3, [pc, #188]	@ (80291c0 <mg_tcpip_init+0x10c>)
 8029104:	f241 721f 	movw	r2, #5919	@ 0x171f
 8029108:	492e      	ldr	r1, [pc, #184]	@ (80291c4 <mg_tcpip_init+0x110>)
 802910a:	2002      	movs	r0, #2
 802910c:	f7fd f9b4 	bl	8026478 <mg_log_prefix>
 8029110:	4622      	mov	r2, r4
 8029112:	492e      	ldr	r1, [pc, #184]	@ (80291cc <mg_tcpip_init+0x118>)
 8029114:	482e      	ldr	r0, [pc, #184]	@ (80291d0 <mg_tcpip_init+0x11c>)
 8029116:	f7fb f85d 	bl	80241d4 <mg_log>
 802911a:	e7d2      	b.n	80290c2 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 802911c:	f240 6104 	movw	r1, #1540	@ 0x604
 8029120:	2001      	movs	r0, #1
 8029122:	f7f9 fc7d 	bl	8022a20 <mg_calloc>
 8029126:	6160      	str	r0, [r4, #20]
 8029128:	f240 6304 	movw	r3, #1540	@ 0x604
 802912c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 802912e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8029130:	b92b      	cbnz	r3, 802913e <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029132:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8029134:	689b      	ldr	r3, [r3, #8]
 8029136:	b37b      	cbz	r3, 8029198 <mg_tcpip_init+0xe4>
 8029138:	f240 6304 	movw	r3, #1540	@ 0x604
 802913c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 802913e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8029140:	2001      	movs	r0, #1
 8029142:	f7f9 fc6d 	bl	8022a20 <mg_calloc>
 8029146:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8029148:	f7fd f990 	bl	802646c <mg_millis>
 802914c:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8029150:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8029152:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8029154:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8029158:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 802915c:	2330      	movs	r3, #48	@ 0x30
 802915e:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8029160:	68a3      	ldr	r3, [r4, #8]
 8029162:	b90b      	cbnz	r3, 8029168 <mg_tcpip_init+0xb4>
 8029164:	2301      	movs	r3, #1
 8029166:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8029168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802916c:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8029170:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8029174:	2102      	movs	r1, #2
 8029176:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802917a:	f7fc fd68 	bl	8025c4e <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 802917e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8029182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8029186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802918a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802918e:	6963      	ldr	r3, [r4, #20]
 8029190:	b12b      	cbz	r3, 802919e <mg_tcpip_init+0xea>
 8029192:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029194:	b11b      	cbz	r3, 802919e <mg_tcpip_init+0xea>
}
 8029196:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8029198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802919c:	e7ce      	b.n	802913c <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802919e:	4b07      	ldr	r3, [pc, #28]	@ (80291bc <mg_tcpip_init+0x108>)
 80291a0:	681b      	ldr	r3, [r3, #0]
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	ddf7      	ble.n	8029196 <mg_tcpip_init+0xe2>
 80291a6:	4b06      	ldr	r3, [pc, #24]	@ (80291c0 <mg_tcpip_init+0x10c>)
 80291a8:	f241 7234 	movw	r2, #5940	@ 0x1734
 80291ac:	4905      	ldr	r1, [pc, #20]	@ (80291c4 <mg_tcpip_init+0x110>)
 80291ae:	2001      	movs	r0, #1
 80291b0:	f7fd f962 	bl	8026478 <mg_log_prefix>
 80291b4:	4807      	ldr	r0, [pc, #28]	@ (80291d4 <mg_tcpip_init+0x120>)
 80291b6:	f7fb f80d 	bl	80241d4 <mg_log>
}
 80291ba:	e7ec      	b.n	8029196 <mg_tcpip_init+0xe2>
 80291bc:	2000012c 	.word	0x2000012c
 80291c0:	0803ba20 	.word	0x0803ba20
 80291c4:	0803b080 	.word	0x0803b080
 80291c8:	0803b70c 	.word	0x0803b70c
 80291cc:	080241a5 	.word	0x080241a5
 80291d0:	0803b6e8 	.word	0x0803b6e8
 80291d4:	0803b6a8 	.word	0x0803b6a8

080291d8 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 80291d8:	b510      	push	{r4, lr}
 80291da:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 80291dc:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 80291e0:	2b03      	cmp	r3, #3
 80291e2:	d011      	beq.n	8029208 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 80291e4:	2b01      	cmp	r3, #1
 80291e6:	d04f      	beq.n	8029288 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 80291e8:	b9f3      	cbnz	r3, 8029228 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 80291ea:	4b31      	ldr	r3, [pc, #196]	@ (80292b0 <onstatechange+0xd8>)
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	2b00      	cmp	r3, #0
 80291f0:	dd1a      	ble.n	8029228 <onstatechange+0x50>
 80291f2:	4b30      	ldr	r3, [pc, #192]	@ (80292b4 <onstatechange+0xdc>)
 80291f4:	f241 4209 	movw	r2, #5129	@ 0x1409
 80291f8:	492f      	ldr	r1, [pc, #188]	@ (80292b8 <onstatechange+0xe0>)
 80291fa:	2001      	movs	r0, #1
 80291fc:	f7fd f93c 	bl	8026478 <mg_log_prefix>
 8029200:	482e      	ldr	r0, [pc, #184]	@ (80292bc <onstatechange+0xe4>)
 8029202:	f7fa ffe7 	bl	80241d4 <mg_log>
 8029206:	e00f      	b.n	8029228 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8029208:	4b29      	ldr	r3, [pc, #164]	@ (80292b0 <onstatechange+0xd8>)
 802920a:	681b      	ldr	r3, [r3, #0]
 802920c:	2b01      	cmp	r3, #1
 802920e:	dc12      	bgt.n	8029236 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029210:	4b27      	ldr	r3, [pc, #156]	@ (80292b0 <onstatechange+0xd8>)
 8029212:	681b      	ldr	r3, [r3, #0]
 8029214:	2b01      	cmp	r3, #1
 8029216:	dc1c      	bgt.n	8029252 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8029218:	4b25      	ldr	r3, [pc, #148]	@ (80292b0 <onstatechange+0xd8>)
 802921a:	681b      	ldr	r3, [r3, #0]
 802921c:	2b01      	cmp	r3, #1
 802921e:	dc26      	bgt.n	802926e <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8029220:	6921      	ldr	r1, [r4, #16]
 8029222:	4620      	mov	r0, r4
 8029224:	f7fc fee3 	bl	8025fee <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8029228:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 802922c:	2100      	movs	r1, #0
 802922e:	4620      	mov	r0, r4
 8029230:	f7f8 f923 	bl	802147a <mg_tcpip_call>
}
 8029234:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8029236:	4b1f      	ldr	r3, [pc, #124]	@ (80292b4 <onstatechange+0xdc>)
 8029238:	f241 4201 	movw	r2, #5121	@ 0x1401
 802923c:	491e      	ldr	r1, [pc, #120]	@ (80292b8 <onstatechange+0xe0>)
 802923e:	2002      	movs	r0, #2
 8029240:	f7fd f91a 	bl	8026478 <mg_log_prefix>
 8029244:	f104 0208 	add.w	r2, r4, #8
 8029248:	491d      	ldr	r1, [pc, #116]	@ (80292c0 <onstatechange+0xe8>)
 802924a:	481e      	ldr	r0, [pc, #120]	@ (80292c4 <onstatechange+0xec>)
 802924c:	f7fa ffc2 	bl	80241d4 <mg_log>
 8029250:	e7de      	b.n	8029210 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8029252:	4b18      	ldr	r3, [pc, #96]	@ (80292b4 <onstatechange+0xdc>)
 8029254:	f241 4202 	movw	r2, #5122	@ 0x1402
 8029258:	4917      	ldr	r1, [pc, #92]	@ (80292b8 <onstatechange+0xe0>)
 802925a:	2002      	movs	r0, #2
 802925c:	f7fd f90c 	bl	8026478 <mg_log_prefix>
 8029260:	f104 0210 	add.w	r2, r4, #16
 8029264:	4916      	ldr	r1, [pc, #88]	@ (80292c0 <onstatechange+0xe8>)
 8029266:	4818      	ldr	r0, [pc, #96]	@ (80292c8 <onstatechange+0xf0>)
 8029268:	f7fa ffb4 	bl	80241d4 <mg_log>
 802926c:	e7d4      	b.n	8029218 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 802926e:	4b11      	ldr	r3, [pc, #68]	@ (80292b4 <onstatechange+0xdc>)
 8029270:	f241 4203 	movw	r2, #5123	@ 0x1403
 8029274:	4910      	ldr	r1, [pc, #64]	@ (80292b8 <onstatechange+0xe0>)
 8029276:	2002      	movs	r0, #2
 8029278:	f7fd f8fe 	bl	8026478 <mg_log_prefix>
 802927c:	4622      	mov	r2, r4
 802927e:	4913      	ldr	r1, [pc, #76]	@ (80292cc <onstatechange+0xf4>)
 8029280:	4813      	ldr	r0, [pc, #76]	@ (80292d0 <onstatechange+0xf8>)
 8029282:	f7fa ffa7 	bl	80241d4 <mg_log>
 8029286:	e7cb      	b.n	8029220 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8029288:	4b09      	ldr	r3, [pc, #36]	@ (80292b0 <onstatechange+0xd8>)
 802928a:	681b      	ldr	r3, [r3, #0]
 802928c:	2b00      	cmp	r3, #0
 802928e:	dc04      	bgt.n	802929a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8029290:	f7fd f8ec 	bl	802646c <mg_millis>
 8029294:	f002 ff9c 	bl	802c1d0 <srand>
 8029298:	e7c6      	b.n	8029228 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802929a:	4b06      	ldr	r3, [pc, #24]	@ (80292b4 <onstatechange+0xdc>)
 802929c:	f241 4206 	movw	r2, #5126	@ 0x1406
 80292a0:	4905      	ldr	r1, [pc, #20]	@ (80292b8 <onstatechange+0xe0>)
 80292a2:	2001      	movs	r0, #1
 80292a4:	f7fd f8e8 	bl	8026478 <mg_log_prefix>
 80292a8:	480a      	ldr	r0, [pc, #40]	@ (80292d4 <onstatechange+0xfc>)
 80292aa:	f7fa ff93 	bl	80241d4 <mg_log>
 80292ae:	e7ef      	b.n	8029290 <onstatechange+0xb8>
 80292b0:	2000012c 	.word	0x2000012c
 80292b4:	0803b9cc 	.word	0x0803b9cc
 80292b8:	0803b080 	.word	0x0803b080
 80292bc:	0803b758 	.word	0x0803b758
 80292c0:	08024195 	.word	0x08024195
 80292c4:	0803b720 	.word	0x0803b720
 80292c8:	0803b730 	.word	0x0803b730
 80292cc:	080241a5 	.word	0x080241a5
 80292d0:	0803b740 	.word	0x0803b740
 80292d4:	0803b750 	.word	0x0803b750

080292d8 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80292d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292dc:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80292de:	2300      	movs	r3, #0
 80292e0:	9305      	str	r3, [sp, #20]
 80292e2:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 80292e4:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 80292e8:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80292ec:	680e      	ldr	r6, [r1, #0]
 80292ee:	684b      	ldr	r3, [r1, #4]
 80292f0:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80292f2:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 80292f6:	42b3      	cmp	r3, r6
 80292f8:	d87b      	bhi.n	80293f2 <rx_dhcp_client+0x11a>
 80292fa:	4605      	mov	r5, r0
 80292fc:	460f      	mov	r7, r1
 80292fe:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8029302:	2204      	movs	r2, #4
 8029304:	1c81      	adds	r1, r0, #2
 8029306:	eb08 0002 	add.w	r0, r8, r2
 802930a:	f003 fc1d 	bl	802cb48 <memcmp>
 802930e:	2800      	cmp	r0, #0
 8029310:	d16f      	bne.n	80293f2 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8029312:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8029316:	4648      	mov	r0, r9
 8029318:	f8cd 9004 	str.w	r9, [sp, #4]
 802931c:	f8cd 9000 	str.w	r9, [sp]
 8029320:	46cb      	mov	fp, r9
 8029322:	e026      	b.n	8029372 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8029324:	7862      	ldrb	r2, [r4, #1]
 8029326:	2a04      	cmp	r2, #4
 8029328:	d12b      	bne.n	8029382 <rx_dhcp_client+0xaa>
 802932a:	1da2      	adds	r2, r4, #6
 802932c:	42b2      	cmp	r2, r6
 802932e:	d228      	bcs.n	8029382 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8029330:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029334:	9301      	str	r3, [sp, #4]
 8029336:	e019      	b.n	802936c <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029338:	7862      	ldrb	r2, [r4, #1]
 802933a:	2a04      	cmp	r2, #4
 802933c:	d123      	bne.n	8029386 <rx_dhcp_client+0xae>
 802933e:	1da2      	adds	r2, r4, #6
 8029340:	42b2      	cmp	r2, r6
 8029342:	d220      	bcs.n	8029386 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 8029344:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 8029348:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802934c:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 802934e:	e00d      	b.n	802936c <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029350:	7862      	ldrb	r2, [r4, #1]
 8029352:	2a04      	cmp	r2, #4
 8029354:	d11b      	bne.n	802938e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 8029356:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029358:	42b2      	cmp	r2, r6
 802935a:	d218      	bcs.n	802938e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 802935c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8029360:	9305      	str	r3, [sp, #20]
 8029362:	e003      	b.n	802936c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8029364:	2b33      	cmp	r3, #51	@ 0x33
 8029366:	d022      	beq.n	80293ae <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8029368:	2b35      	cmp	r3, #53	@ 0x35
 802936a:	d02b      	beq.n	80293c4 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 802936c:	7863      	ldrb	r3, [r4, #1]
 802936e:	3302      	adds	r3, #2
 8029370:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8029372:	1c63      	adds	r3, r4, #1
 8029374:	42b3      	cmp	r3, r6
 8029376:	d22e      	bcs.n	80293d6 <rx_dhcp_client+0xfe>
 8029378:	7823      	ldrb	r3, [r4, #0]
 802937a:	2bff      	cmp	r3, #255	@ 0xff
 802937c:	d02b      	beq.n	80293d6 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 802937e:	2b01      	cmp	r3, #1
 8029380:	d0d0      	beq.n	8029324 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8029382:	2b03      	cmp	r3, #3
 8029384:	d0d8      	beq.n	8029338 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8029386:	7fea      	ldrb	r2, [r5, #31]
 8029388:	b10a      	cbz	r2, 802938e <rx_dhcp_client+0xb6>
 802938a:	2b06      	cmp	r3, #6
 802938c:	d0e0      	beq.n	8029350 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802938e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8029392:	2a00      	cmp	r2, #0
 8029394:	d0e6      	beq.n	8029364 <rx_dhcp_client+0x8c>
 8029396:	2b2a      	cmp	r3, #42	@ 0x2a
 8029398:	d1e4      	bne.n	8029364 <rx_dhcp_client+0x8c>
 802939a:	7862      	ldrb	r2, [r4, #1]
 802939c:	2a04      	cmp	r2, #4
 802939e:	d1e1      	bne.n	8029364 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 80293a0:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80293a2:	42b2      	cmp	r2, r6
 80293a4:	d2de      	bcs.n	8029364 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 80293a6:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80293aa:	9304      	str	r3, [sp, #16]
 80293ac:	e7de      	b.n	802936c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80293ae:	7862      	ldrb	r2, [r4, #1]
 80293b0:	2a04      	cmp	r2, #4
 80293b2:	d1d9      	bne.n	8029368 <rx_dhcp_client+0x90>
 80293b4:	1da2      	adds	r2, r4, #6
 80293b6:	42b2      	cmp	r2, r6
 80293b8:	d2d6      	bcs.n	8029368 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 80293ba:	f8d4 0002 	ldr.w	r0, [r4, #2]
 80293be:	f7fc fc81 	bl	8025cc4 <mg_ntohl>
 80293c2:	e7d3      	b.n	802936c <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80293c4:	7863      	ldrb	r3, [r4, #1]
 80293c6:	2b01      	cmp	r3, #1
 80293c8:	d1d0      	bne.n	802936c <rx_dhcp_client+0x94>
 80293ca:	1da3      	adds	r3, r4, #6
 80293cc:	42b3      	cmp	r3, r6
 80293ce:	d2cd      	bcs.n	802936c <rx_dhcp_client+0x94>
      msgtype = p[2];
 80293d0:	f894 9002 	ldrb.w	r9, [r4, #2]
 80293d4:	e7ca      	b.n	802936c <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80293d6:	f1b9 0f06 	cmp.w	r9, #6
 80293da:	d00d      	beq.n	80293f8 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80293dc:	f1b9 0f02 	cmp.w	r9, #2
 80293e0:	d013      	beq.n	802940a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 80293e2:	f1b9 0f05 	cmp.w	r9, #5
 80293e6:	d028      	beq.n	802943a <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 80293e8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80293ec:	4553      	cmp	r3, sl
 80293ee:	f040 80b4 	bne.w	802955a <rx_dhcp_client+0x282>
}
 80293f2:	b007      	add	sp, #28
 80293f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80293f8:	68ab      	ldr	r3, [r5, #8]
 80293fa:	455b      	cmp	r3, fp
 80293fc:	d1ee      	bne.n	80293dc <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 80293fe:	2301      	movs	r3, #1
 8029400:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029404:	2300      	movs	r3, #0
 8029406:	60ab      	str	r3, [r5, #8]
 8029408:	e7ee      	b.n	80293e8 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802940a:	f1ba 0f01 	cmp.w	sl, #1
 802940e:	d1e8      	bne.n	80293e2 <rx_dhcp_client+0x10a>
 8029410:	f1bb 0f00 	cmp.w	fp, #0
 8029414:	d0e5      	beq.n	80293e2 <rx_dhcp_client+0x10a>
 8029416:	9b00      	ldr	r3, [sp, #0]
 8029418:	2b00      	cmp	r3, #0
 802941a:	d0e2      	beq.n	80293e2 <rx_dhcp_client+0x10a>
 802941c:	2800      	cmp	r0, #0
 802941e:	d0e0      	beq.n	80293e2 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029420:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8029424:	b90a      	cbnz	r2, 802942a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029426:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8029428:	68da      	ldr	r2, [r3, #12]
 802942a:	4659      	mov	r1, fp
 802942c:	4628      	mov	r0, r5
 802942e:	f7ff f9b9 	bl	80287a4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8029432:	2302      	movs	r3, #2
 8029434:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029438:	e7d6      	b.n	80293e8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802943a:	f1ba 0f02 	cmp.w	sl, #2
 802943e:	d02a      	beq.n	8029496 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8029440:	f1ba 0f03 	cmp.w	sl, #3
 8029444:	d1d0      	bne.n	80293e8 <rx_dhcp_client+0x110>
 8029446:	68ab      	ldr	r3, [r5, #8]
 8029448:	455b      	cmp	r3, fp
 802944a:	d1cd      	bne.n	80293e8 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 802944c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802944e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8029450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029454:	4604      	mov	r4, r0
 8029456:	fb00 f202 	mul.w	r2, r0, r2
 802945a:	189b      	adds	r3, r3, r2
 802945c:	f141 0100 	adc.w	r1, r1, #0
 8029460:	662b      	str	r3, [r5, #96]	@ 0x60
 8029462:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029464:	4b3f      	ldr	r3, [pc, #252]	@ (8029564 <rx_dhcp_client+0x28c>)
 8029466:	681b      	ldr	r3, [r3, #0]
 8029468:	2b01      	cmp	r3, #1
 802946a:	ddbd      	ble.n	80293e8 <rx_dhcp_client+0x110>
 802946c:	4b3e      	ldr	r3, [pc, #248]	@ (8029568 <rx_dhcp_client+0x290>)
 802946e:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 8029472:	493e      	ldr	r1, [pc, #248]	@ (802956c <rx_dhcp_client+0x294>)
 8029474:	2002      	movs	r0, #2
 8029476:	f7fc ffff 	bl	8026478 <mg_log_prefix>
 802947a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802947e:	2300      	movs	r3, #0
 8029480:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8029484:	f7e7 fc68 	bl	8010d58 <__aeabi_uldivmod>
 8029488:	4602      	mov	r2, r0
 802948a:	460b      	mov	r3, r1
 802948c:	4621      	mov	r1, r4
 802948e:	4838      	ldr	r0, [pc, #224]	@ (8029570 <rx_dhcp_client+0x298>)
 8029490:	f7fa fea0 	bl	80241d4 <mg_log>
 8029494:	e7a8      	b.n	80293e8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029496:	f1bb 0f00 	cmp.w	fp, #0
 802949a:	d0d1      	beq.n	8029440 <rx_dhcp_client+0x168>
 802949c:	9b00      	ldr	r3, [sp, #0]
 802949e:	2b00      	cmp	r3, #0
 80294a0:	d0ce      	beq.n	8029440 <rx_dhcp_client+0x168>
 80294a2:	4604      	mov	r4, r0
 80294a4:	2800      	cmp	r0, #0
 80294a6:	d0cb      	beq.n	8029440 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 80294a8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80294aa:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80294ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80294b0:	fb00 f202 	mul.w	r2, r0, r2
 80294b4:	189b      	adds	r3, r3, r2
 80294b6:	f141 0100 	adc.w	r1, r1, #0
 80294ba:	662b      	str	r3, [r5, #96]	@ 0x60
 80294bc:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80294be:	4b29      	ldr	r3, [pc, #164]	@ (8029564 <rx_dhcp_client+0x28c>)
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	2b01      	cmp	r3, #1
 80294c4:	dc2e      	bgt.n	8029524 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80294c6:	693b      	ldr	r3, [r7, #16]
 80294c8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80294cc:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 80294d0:	895b      	ldrh	r3, [r3, #10]
 80294d2:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 80294d6:	f8c5 b008 	str.w	fp, [r5, #8]
 80294da:	9b00      	ldr	r3, [sp, #0]
 80294dc:	612b      	str	r3, [r5, #16]
 80294de:	9b01      	ldr	r3, [sp, #4]
 80294e0:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 80294e2:	2303      	movs	r3, #3
 80294e4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 80294e8:	2108      	movs	r1, #8
 80294ea:	eb0d 0001 	add.w	r0, sp, r1
 80294ee:	f7fc fbae 	bl	8025c4e <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 80294f2:	9c02      	ldr	r4, [sp, #8]
 80294f4:	f7fc ffba 	bl	802646c <mg_millis>
 80294f8:	4420      	add	r0, r4
 80294fa:	f002 fe69 	bl	802c1d0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 80294fe:	7feb      	ldrb	r3, [r5, #31]
 8029500:	b10b      	cbz	r3, 8029506 <rx_dhcp_client+0x22e>
 8029502:	9b05      	ldr	r3, [sp, #20]
 8029504:	bb1b      	cbnz	r3, 802954e <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8029506:	f895 3020 	ldrb.w	r3, [r5, #32]
 802950a:	2b00      	cmp	r3, #0
 802950c:	f43f af6c 	beq.w	80293e8 <rx_dhcp_client+0x110>
 8029510:	9b04      	ldr	r3, [sp, #16]
 8029512:	2b00      	cmp	r3, #0
 8029514:	f43f af68 	beq.w	80293e8 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8029518:	aa04      	add	r2, sp, #16
 802951a:	2102      	movs	r1, #2
 802951c:	4628      	mov	r0, r5
 802951e:	f7f7 ffac 	bl	802147a <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029522:	e761      	b.n	80293e8 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029524:	4b10      	ldr	r3, [pc, #64]	@ (8029568 <rx_dhcp_client+0x290>)
 8029526:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802952a:	4910      	ldr	r1, [pc, #64]	@ (802956c <rx_dhcp_client+0x294>)
 802952c:	2002      	movs	r0, #2
 802952e:	f7fc ffa3 	bl	8026478 <mg_log_prefix>
 8029532:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029536:	2300      	movs	r3, #0
 8029538:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802953c:	f7e7 fc0c 	bl	8010d58 <__aeabi_uldivmod>
 8029540:	4602      	mov	r2, r0
 8029542:	460b      	mov	r3, r1
 8029544:	4621      	mov	r1, r4
 8029546:	480a      	ldr	r0, [pc, #40]	@ (8029570 <rx_dhcp_client+0x298>)
 8029548:	f7fa fe44 	bl	80241d4 <mg_log>
 802954c:	e7bb      	b.n	80294c6 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802954e:	aa05      	add	r2, sp, #20
 8029550:	2101      	movs	r1, #1
 8029552:	4628      	mov	r0, r5
 8029554:	f7f7 ff91 	bl	802147a <mg_tcpip_call>
 8029558:	e7d5      	b.n	8029506 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 802955a:	4628      	mov	r0, r5
 802955c:	f7ff fe3c 	bl	80291d8 <onstatechange>
 8029560:	e747      	b.n	80293f2 <rx_dhcp_client+0x11a>
 8029562:	bf00      	nop
 8029564:	2000012c 	.word	0x2000012c
 8029568:	0803b98c 	.word	0x0803b98c
 802956c:	0803b080 	.word	0x0803b080
 8029570:	0803b764 	.word	0x0803b764

08029574 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029578:	b084      	sub	sp, #16
 802957a:	4605      	mov	r5, r0
 802957c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802957e:	69c9      	ldr	r1, [r1, #28]
 8029580:	88cb      	ldrh	r3, [r1, #6]
 8029582:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8029586:	b29b      	uxth	r3, r3
 8029588:	b1c3      	cbz	r3, 80295bc <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802958a:	7a4b      	ldrb	r3, [r1, #9]
 802958c:	2b11      	cmp	r3, #17
 802958e:	d00e      	beq.n	80295ae <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8029590:	7a4b      	ldrb	r3, [r1, #9]
 8029592:	2b06      	cmp	r3, #6
 8029594:	d00f      	beq.n	80295b6 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8029596:	2200      	movs	r2, #0
 8029598:	4621      	mov	r1, r4
 802959a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802959c:	f7f9 fa65 	bl	8022a6a <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 80295a0:	b110      	cbz	r0, 80295a8 <rx_ip+0x34>
 80295a2:	4963      	ldr	r1, [pc, #396]	@ (8029730 <rx_ip+0x1bc>)
 80295a4:	f7fd f850 	bl	8026648 <mg_error>
}
 80295a8:	b004      	add	sp, #16
 80295aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80295ae:	f101 0314 	add.w	r3, r1, #20
 80295b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80295b4:	e7ec      	b.n	8029590 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80295b6:	3114      	adds	r1, #20
 80295b8:	62a1      	str	r1, [r4, #40]	@ 0x28
 80295ba:	e7ec      	b.n	8029596 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 80295bc:	7a4b      	ldrb	r3, [r1, #9]
 80295be:	2b01      	cmp	r3, #1
 80295c0:	d024      	beq.n	802960c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 80295c2:	2b11      	cmp	r3, #17
 80295c4:	d031      	beq.n	802962a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 80295c6:	2b06      	cmp	r3, #6
 80295c8:	d1ee      	bne.n	80295a8 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80295ca:	f101 0314 	add.w	r3, r1, #20
 80295ce:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80295d0:	68e3      	ldr	r3, [r4, #12]
 80295d2:	2b13      	cmp	r3, #19
 80295d4:	d9e8      	bls.n	80295a8 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 80295d6:	3128      	adds	r1, #40	@ 0x28
 80295d8:	4620      	mov	r0, r4
 80295da:	f7fb f898 	bl	802470e <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 80295de:	69e3      	ldr	r3, [r4, #28]
 80295e0:	8858      	ldrh	r0, [r3, #2]
 80295e2:	f7fc fc07 	bl	8025df4 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 80295e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80295e8:	7b1b      	ldrb	r3, [r3, #12]
 80295ea:	091b      	lsrs	r3, r3, #4
 80295ec:	3305      	adds	r3, #5
 80295ee:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 80295f0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80295f4:	d301      	bcc.n	80295fa <rx_ip+0x86>
 80295f6:	1a80      	subs	r0, r0, r2
 80295f8:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80295fa:	4b4e      	ldr	r3, [pc, #312]	@ (8029734 <rx_ip+0x1c0>)
 80295fc:	681b      	ldr	r3, [r3, #0]
 80295fe:	2b03      	cmp	r3, #3
 8029600:	dc74      	bgt.n	80296ec <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8029602:	4621      	mov	r1, r4
 8029604:	4628      	mov	r0, r5
 8029606:	f7ff fb3d 	bl	8028c84 <rx_tcp>
 802960a:	e7cd      	b.n	80295a8 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802960c:	f101 0314 	add.w	r3, r1, #20
 8029610:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8029612:	68e3      	ldr	r3, [r4, #12]
 8029614:	2b03      	cmp	r3, #3
 8029616:	d9c7      	bls.n	80295a8 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8029618:	3118      	adds	r1, #24
 802961a:	4620      	mov	r0, r4
 802961c:	f7fb f877 	bl	802470e <mkpay>
    rx_icmp(ifp, pkt);
 8029620:	4621      	mov	r1, r4
 8029622:	4628      	mov	r0, r5
 8029624:	f7fc fc3b 	bl	8025e9e <rx_icmp>
 8029628:	e7be      	b.n	80295a8 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802962a:	f101 0314 	add.w	r3, r1, #20
 802962e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8029630:	68e3      	ldr	r3, [r4, #12]
 8029632:	2b07      	cmp	r3, #7
 8029634:	d9b8      	bls.n	80295a8 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8029636:	311c      	adds	r1, #28
 8029638:	4620      	mov	r0, r4
 802963a:	f7fb f868 	bl	802470e <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802963e:	4b3d      	ldr	r3, [pc, #244]	@ (8029734 <rx_ip+0x1c0>)
 8029640:	681b      	ldr	r3, [r3, #0]
 8029642:	2b03      	cmp	r3, #3
 8029644:	dc16      	bgt.n	8029674 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8029646:	7f2b      	ldrb	r3, [r5, #28]
 8029648:	b133      	cbz	r3, 8029658 <rx_ip+0xe4>
 802964a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802964c:	8877      	ldrh	r7, [r6, #2]
 802964e:	2044      	movs	r0, #68	@ 0x44
 8029650:	f7fc fbd0 	bl	8025df4 <mg_ntohs>
 8029654:	4287      	cmp	r7, r0
 8029656:	d02f      	beq.n	80296b8 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8029658:	7f6b      	ldrb	r3, [r5, #29]
 802965a:	b133      	cbz	r3, 802966a <rx_ip+0xf6>
 802965c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802965e:	8877      	ldrh	r7, [r6, #2]
 8029660:	2043      	movs	r0, #67	@ 0x43
 8029662:	f7fc fbc7 	bl	8025df4 <mg_ntohs>
 8029666:	4287      	cmp	r7, r0
 8029668:	d033      	beq.n	80296d2 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 802966a:	4621      	mov	r1, r4
 802966c:	4628      	mov	r0, r5
 802966e:	f7fd fe03 	bl	8027278 <rx_udp>
 8029672:	e799      	b.n	80295a8 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029674:	4b30      	ldr	r3, [pc, #192]	@ (8029738 <rx_ip+0x1c4>)
 8029676:	f241 6255 	movw	r2, #5717	@ 0x1655
 802967a:	4930      	ldr	r1, [pc, #192]	@ (802973c <rx_ip+0x1c8>)
 802967c:	2004      	movs	r0, #4
 802967e:	f7fc fefb 	bl	8026478 <mg_log_prefix>
 8029682:	69e7      	ldr	r7, [r4, #28]
 8029684:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8029688:	f8b8 0000 	ldrh.w	r0, [r8]
 802968c:	f7fc fbb2 	bl	8025df4 <mg_ntohs>
 8029690:	4606      	mov	r6, r0
 8029692:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8029696:	f7fc fbad 	bl	8025df4 <mg_ntohs>
 802969a:	68e3      	ldr	r3, [r4, #12]
 802969c:	4928      	ldr	r1, [pc, #160]	@ (8029740 <rx_ip+0x1cc>)
 802969e:	9303      	str	r3, [sp, #12]
 80296a0:	9002      	str	r0, [sp, #8]
 80296a2:	f107 0310 	add.w	r3, r7, #16
 80296a6:	9301      	str	r3, [sp, #4]
 80296a8:	9100      	str	r1, [sp, #0]
 80296aa:	4633      	mov	r3, r6
 80296ac:	f107 020c 	add.w	r2, r7, #12
 80296b0:	4824      	ldr	r0, [pc, #144]	@ (8029744 <rx_ip+0x1d0>)
 80296b2:	f7fa fd8f 	bl	80241d4 <mg_log>
 80296b6:	e7c6      	b.n	8029646 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80296b8:	f106 0308 	add.w	r3, r6, #8
 80296bc:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80296be:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 80296c2:	4620      	mov	r0, r4
 80296c4:	f7fb f823 	bl	802470e <mkpay>
      rx_dhcp_client(ifp, pkt);
 80296c8:	4621      	mov	r1, r4
 80296ca:	4628      	mov	r0, r5
 80296cc:	f7ff fe04 	bl	80292d8 <rx_dhcp_client>
 80296d0:	e76a      	b.n	80295a8 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80296d2:	f106 0308 	add.w	r3, r6, #8
 80296d6:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80296d8:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 80296dc:	4620      	mov	r0, r4
 80296de:	f7fb f816 	bl	802470e <mkpay>
      rx_dhcp_server(ifp, pkt);
 80296e2:	4621      	mov	r1, r4
 80296e4:	4628      	mov	r0, r5
 80296e6:	f7fc fd05 	bl	80260f4 <rx_dhcp_server>
 80296ea:	e75d      	b.n	80295a8 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80296ec:	4b12      	ldr	r3, [pc, #72]	@ (8029738 <rx_ip+0x1c4>)
 80296ee:	f241 626a 	movw	r2, #5738	@ 0x166a
 80296f2:	4912      	ldr	r1, [pc, #72]	@ (802973c <rx_ip+0x1c8>)
 80296f4:	2004      	movs	r0, #4
 80296f6:	f7fc febf 	bl	8026478 <mg_log_prefix>
 80296fa:	69e7      	ldr	r7, [r4, #28]
 80296fc:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8029700:	f8b8 0000 	ldrh.w	r0, [r8]
 8029704:	f7fc fb76 	bl	8025df4 <mg_ntohs>
 8029708:	4606      	mov	r6, r0
 802970a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802970e:	f7fc fb71 	bl	8025df4 <mg_ntohs>
 8029712:	68e3      	ldr	r3, [r4, #12]
 8029714:	490a      	ldr	r1, [pc, #40]	@ (8029740 <rx_ip+0x1cc>)
 8029716:	9303      	str	r3, [sp, #12]
 8029718:	9002      	str	r0, [sp, #8]
 802971a:	f107 0310 	add.w	r3, r7, #16
 802971e:	9301      	str	r3, [sp, #4]
 8029720:	9100      	str	r1, [sp, #0]
 8029722:	4633      	mov	r3, r6
 8029724:	f107 020c 	add.w	r2, r7, #12
 8029728:	4807      	ldr	r0, [pc, #28]	@ (8029748 <rx_ip+0x1d4>)
 802972a:	f7fa fd53 	bl	80241d4 <mg_log>
 802972e:	e768      	b.n	8029602 <rx_ip+0x8e>
 8029730:	0803b77c 	.word	0x0803b77c
 8029734:	2000012c 	.word	0x2000012c
 8029738:	0803b99c 	.word	0x0803b99c
 802973c:	0803b080 	.word	0x0803b080
 8029740:	08024195 	.word	0x08024195
 8029744:	0803b798 	.word	0x0803b798
 8029748:	0803b7b4 	.word	0x0803b7b4

0802974c <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 802974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029750:	b08e      	sub	sp, #56	@ 0x38
 8029752:	4606      	mov	r6, r0
 8029754:	460c      	mov	r4, r1
 8029756:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8029758:	2234      	movs	r2, #52	@ 0x34
 802975a:	2100      	movs	r1, #0
 802975c:	a801      	add	r0, sp, #4
 802975e:	f003 fa87 	bl	802cc70 <memset>
  pkt.raw.buf = (char *) buf;
 8029762:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8029764:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8029766:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8029768:	2d0d      	cmp	r5, #13
 802976a:	d93f      	bls.n	80297ec <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 802976c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8029770:	b15b      	cbz	r3, 802978a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029772:	2206      	movs	r2, #6
 8029774:	4631      	mov	r1, r6
 8029776:	4620      	mov	r0, r4
 8029778:	f003 f9e6 	bl	802cb48 <memcmp>
  if (ifp->enable_mac_check &&
 802977c:	b128      	cbz	r0, 802978a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 802977e:	2206      	movs	r2, #6
 8029780:	4945      	ldr	r1, [pc, #276]	@ (8029898 <mg_tcpip_rx+0x14c>)
 8029782:	4620      	mov	r0, r4
 8029784:	f003 f9e0 	bl	802cb48 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029788:	bb80      	cbnz	r0, 80297ec <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802978a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 802978e:	b18b      	cbz	r3, 80297b4 <mg_tcpip_rx+0x68>
 8029790:	2d04      	cmp	r5, #4
 8029792:	d92e      	bls.n	80297f2 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8029794:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8029798:	4642      	mov	r2, r8
 802979a:	4621      	mov	r1, r4
 802979c:	2000      	movs	r0, #0
 802979e:	f7fc fddf 	bl	8026360 <mg_crc32>
 80297a2:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80297a4:	2204      	movs	r2, #4
 80297a6:	4669      	mov	r1, sp
 80297a8:	eb04 0008 	add.w	r0, r4, r8
 80297ac:	f003 f9cc 	bl	802cb48 <memcmp>
 80297b0:	b108      	cbz	r0, 80297b6 <mg_tcpip_rx+0x6a>
 80297b2:	e01b      	b.n	80297ec <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 80297b4:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 80297b6:	89a7      	ldrh	r7, [r4, #12]
 80297b8:	f640 0006 	movw	r0, #2054	@ 0x806
 80297bc:	f7fc fb1a 	bl	8025df4 <mg_ntohs>
 80297c0:	4287      	cmp	r7, r0
 80297c2:	d018      	beq.n	80297f6 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 80297c4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 80297c8:	f7fc fb14 	bl	8025df4 <mg_ntohs>
 80297cc:	4287      	cmp	r7, r0
 80297ce:	d01b      	beq.n	8029808 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 80297d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80297d4:	f7fc fb0e 	bl	8025df4 <mg_ntohs>
 80297d8:	4287      	cmp	r7, r0
 80297da:	d028      	beq.n	802982e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80297dc:	4b2f      	ldr	r3, [pc, #188]	@ (802989c <mg_tcpip_rx+0x150>)
 80297de:	681b      	ldr	r3, [r3, #0]
 80297e0:	2b02      	cmp	r3, #2
 80297e2:	dc41      	bgt.n	8029868 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80297e4:	4b2d      	ldr	r3, [pc, #180]	@ (802989c <mg_tcpip_rx+0x150>)
 80297e6:	681b      	ldr	r3, [r3, #0]
 80297e8:	2b03      	cmp	r3, #3
 80297ea:	dc4d      	bgt.n	8029888 <mg_tcpip_rx+0x13c>
}
 80297ec:	b00e      	add	sp, #56	@ 0x38
 80297ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 80297f2:	46a8      	mov	r8, r5
 80297f4:	e7df      	b.n	80297b6 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 80297f6:	340e      	adds	r4, #14
 80297f8:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 80297fa:	2d29      	cmp	r5, #41	@ 0x29
 80297fc:	d9f6      	bls.n	80297ec <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 80297fe:	a901      	add	r1, sp, #4
 8029800:	4630      	mov	r0, r6
 8029802:	f7fe ff09 	bl	8028618 <rx_arp>
 8029806:	e7f1      	b.n	80297ec <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8029808:	f104 030e 	add.w	r3, r4, #14
 802980c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802980e:	2d35      	cmp	r5, #53	@ 0x35
 8029810:	d9ec      	bls.n	80297ec <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8029812:	7ba3      	ldrb	r3, [r4, #14]
 8029814:	091b      	lsrs	r3, r3, #4
 8029816:	2b06      	cmp	r3, #6
 8029818:	d1e8      	bne.n	80297ec <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802981a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802981e:	a801      	add	r0, sp, #4
 8029820:	f7fa ff75 	bl	802470e <mkpay>
    rx_ip6(ifp, &pkt);
 8029824:	a901      	add	r1, sp, #4
 8029826:	4630      	mov	r0, r6
 8029828:	f7fc fb73 	bl	8025f12 <rx_ip6>
 802982c:	e7de      	b.n	80297ec <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802982e:	f104 030e 	add.w	r3, r4, #14
 8029832:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029834:	2d21      	cmp	r5, #33	@ 0x21
 8029836:	d9d9      	bls.n	80297ec <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8029838:	8a20      	ldrh	r0, [r4, #16]
 802983a:	f7fc fadb 	bl	8025df4 <mg_ntohs>
 802983e:	300e      	adds	r0, #14
 8029840:	42a8      	cmp	r0, r5
 8029842:	d200      	bcs.n	8029846 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8029844:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029846:	9b02      	ldr	r3, [sp, #8]
 8029848:	2b21      	cmp	r3, #33	@ 0x21
 802984a:	d9cf      	bls.n	80297ec <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802984c:	7ba3      	ldrb	r3, [r4, #14]
 802984e:	091b      	lsrs	r3, r3, #4
 8029850:	2b04      	cmp	r3, #4
 8029852:	d1cb      	bne.n	80297ec <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8029854:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8029858:	a801      	add	r0, sp, #4
 802985a:	f7fa ff58 	bl	802470e <mkpay>
    rx_ip(ifp, &pkt);
 802985e:	a901      	add	r1, sp, #4
 8029860:	4630      	mov	r0, r6
 8029862:	f7ff fe87 	bl	8029574 <rx_ip>
 8029866:	e7c1      	b.n	80297ec <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8029868:	4b0d      	ldr	r3, [pc, #52]	@ (80298a0 <mg_tcpip_rx+0x154>)
 802986a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 802986e:	490d      	ldr	r1, [pc, #52]	@ (80298a4 <mg_tcpip_rx+0x158>)
 8029870:	2003      	movs	r0, #3
 8029872:	f7fc fe01 	bl	8026478 <mg_log_prefix>
 8029876:	9b05      	ldr	r3, [sp, #20]
 8029878:	8998      	ldrh	r0, [r3, #12]
 802987a:	f7fc fabb 	bl	8025df4 <mg_ntohs>
 802987e:	4601      	mov	r1, r0
 8029880:	4809      	ldr	r0, [pc, #36]	@ (80298a8 <mg_tcpip_rx+0x15c>)
 8029882:	f7fa fca7 	bl	80241d4 <mg_log>
 8029886:	e7ad      	b.n	80297e4 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029888:	4641      	mov	r1, r8
 802988a:	2920      	cmp	r1, #32
 802988c:	bf28      	it	cs
 802988e:	2120      	movcs	r1, #32
 8029890:	4620      	mov	r0, r4
 8029892:	f7f9 fe01 	bl	8023498 <mg_hexdump>
 8029896:	e7a9      	b.n	80297ec <mg_tcpip_rx+0xa0>
 8029898:	0803bb08 	.word	0x0803bb08
 802989c:	2000012c 	.word	0x2000012c
 80298a0:	0803b9ac 	.word	0x0803b9ac
 80298a4:	0803b080 	.word	0x0803b080
 80298a8:	0803b7d0 	.word	0x0803b7d0

080298ac <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 80298ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298b0:	b08b      	sub	sp, #44	@ 0x2c
 80298b2:	4605      	mov	r5, r0
 80298b4:	4616      	mov	r6, r2
 80298b6:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80298b8:	9200      	str	r2, [sp, #0]
 80298ba:	9301      	str	r3, [sp, #4]
 80298bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80298c0:	2300      	movs	r3, #0
 80298c2:	3058      	adds	r0, #88	@ 0x58
 80298c4:	f7fc f868 	bl	8025998 <mg_timer_expired>
  ifp->now = now;
 80298c8:	652e      	str	r6, [r5, #80]	@ 0x50
 80298ca:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 80298cc:	4604      	mov	r4, r0
 80298ce:	b318      	cbz	r0, 8029918 <mg_tcpip_poll+0x6c>
 80298d0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80298d2:	68db      	ldr	r3, [r3, #12]
 80298d4:	b303      	cbz	r3, 8029918 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 80298d6:	4628      	mov	r0, r5
 80298d8:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 80298da:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80298de:	3b00      	subs	r3, #0
 80298e0:	bf18      	it	ne
 80298e2:	2301      	movne	r3, #1
    if (up != current) {
 80298e4:	4298      	cmp	r0, r3
 80298e6:	d010      	beq.n	802990a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80298e8:	b120      	cbz	r0, 80298f4 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 80298ea:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80298ec:	2b00      	cmp	r3, #0
 80298ee:	d06e      	beq.n	80299ce <mg_tcpip_poll+0x122>
 80298f0:	2301      	movs	r3, #1
 80298f2:	e000      	b.n	80298f6 <mg_tcpip_poll+0x4a>
 80298f4:	2300      	movs	r3, #0
 80298f6:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 80298fa:	b918      	cbnz	r0, 8029904 <mg_tcpip_poll+0x58>
 80298fc:	7f2b      	ldrb	r3, [r5, #28]
 80298fe:	b10b      	cbz	r3, 8029904 <mg_tcpip_poll+0x58>
 8029900:	2300      	movs	r3, #0
 8029902:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029904:	4628      	mov	r0, r5
 8029906:	f7ff fc67 	bl	80291d8 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802990a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802990e:	b91b      	cbnz	r3, 8029918 <mg_tcpip_poll+0x6c>
 8029910:	4ba8      	ldr	r3, [pc, #672]	@ (8029bb4 <mg_tcpip_poll+0x308>)
 8029912:	681b      	ldr	r3, [r3, #0]
 8029914:	2b00      	cmp	r3, #0
 8029916:	dc5c      	bgt.n	80299d2 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8029918:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802991c:	2b00      	cmp	r3, #0
 802991e:	f000 8146 	beq.w	8029bae <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029922:	2b01      	cmp	r3, #1
 8029924:	d060      	beq.n	80299e8 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029926:	2c00      	cmp	r4, #0
 8029928:	d05f      	beq.n	80299ea <mg_tcpip_poll+0x13e>
 802992a:	2b03      	cmp	r3, #3
 802992c:	d15d      	bne.n	80299ea <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802992e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8029930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029932:	ea52 0103 	orrs.w	r1, r2, r3
 8029936:	d058      	beq.n	80299ea <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8029938:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 802993a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802993c:	4290      	cmp	r0, r2
 802993e:	eb71 0403 	sbcs.w	r4, r1, r3
 8029942:	d262      	bcs.n	8029a0a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8029944:	4c9c      	ldr	r4, [pc, #624]	@ (8029bb8 <mg_tcpip_poll+0x30c>)
 8029946:	1904      	adds	r4, r0, r4
 8029948:	f141 0c00 	adc.w	ip, r1, #0
 802994c:	42a2      	cmp	r2, r4
 802994e:	eb73 030c 	sbcs.w	r3, r3, ip
 8029952:	d24a      	bcs.n	80299ea <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029954:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029958:	2300      	movs	r3, #0
 802995a:	f7e7 f9fd 	bl	8010d58 <__aeabi_uldivmod>
 802995e:	4602      	mov	r2, r0
 8029960:	2000      	movs	r0, #0
 8029962:	1853      	adds	r3, r2, r1
 8029964:	d25a      	bcs.n	8029a1c <mg_tcpip_poll+0x170>
 8029966:	4403      	add	r3, r0
 8029968:	4894      	ldr	r0, [pc, #592]	@ (8029bbc <mg_tcpip_poll+0x310>)
 802996a:	fba0 4003 	umull	r4, r0, r0, r3
 802996e:	08c0      	lsrs	r0, r0, #3
 8029970:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8029974:	1a1b      	subs	r3, r3, r0
 8029976:	1ad3      	subs	r3, r2, r3
 8029978:	f161 0c00 	sbc.w	ip, r1, #0
 802997c:	4c90      	ldr	r4, [pc, #576]	@ (8029bc0 <mg_tcpip_poll+0x314>)
 802997e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8029982:	fb03 f000 	mul.w	r0, r3, r0
 8029986:	fb04 000c 	mla	r0, r4, ip, r0
 802998a:	fba3 3404 	umull	r3, r4, r3, r4
 802998e:	4420      	add	r0, r4
 8029990:	089b      	lsrs	r3, r3, #2
 8029992:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8029996:	0880      	lsrs	r0, r0, #2
 8029998:	0104      	lsls	r4, r0, #4
 802999a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 802999e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 80299a2:	ebbc 0c03 	subs.w	ip, ip, r3
 80299a6:	eb64 0300 	sbc.w	r3, r4, r0
 80299aa:	009b      	lsls	r3, r3, #2
 80299ac:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80299b0:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80299b4:	1a12      	subs	r2, r2, r0
 80299b6:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80299ba:	430a      	orrs	r2, r1
 80299bc:	d115      	bne.n	80299ea <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 80299be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80299c2:	68aa      	ldr	r2, [r5, #8]
 80299c4:	497f      	ldr	r1, [pc, #508]	@ (8029bc4 <mg_tcpip_poll+0x318>)
 80299c6:	4628      	mov	r0, r5
 80299c8:	f7fe fdfe 	bl	80285c8 <tx_dhcp_request_re>
 80299cc:	e00d      	b.n	80299ea <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80299ce:	2303      	movs	r3, #3
 80299d0:	e791      	b.n	80298f6 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80299d2:	4b7d      	ldr	r3, [pc, #500]	@ (8029bc8 <mg_tcpip_poll+0x31c>)
 80299d4:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 80299d8:	497c      	ldr	r1, [pc, #496]	@ (8029bcc <mg_tcpip_poll+0x320>)
 80299da:	2001      	movs	r0, #1
 80299dc:	f7fc fd4c 	bl	8026478 <mg_log_prefix>
 80299e0:	487b      	ldr	r0, [pc, #492]	@ (8029bd0 <mg_tcpip_poll+0x324>)
 80299e2:	f7fa fbf7 	bl	80241d4 <mg_log>
 80299e6:	e797      	b.n	8029918 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 80299e8:	b95c      	cbnz	r4, 8029a02 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80299ea:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80299ec:	689b      	ldr	r3, [r3, #8]
 80299ee:	b1fb      	cbz	r3, 8029a30 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 80299f0:	462a      	mov	r2, r5
 80299f2:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80299f4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80299f6:	4798      	blx	r3
    if (len > 0) {
 80299f8:	4602      	mov	r2, r0
 80299fa:	b988      	cbnz	r0, 8029a20 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80299fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80299fe:	681c      	ldr	r4, [r3, #0]
 8029a00:	e0a3      	b.n	8029b4a <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029a02:	4628      	mov	r0, r5
 8029a04:	f7fe fdaa 	bl	802855c <tx_dhcp_discover>
 8029a08:	e7ef      	b.n	80299ea <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8029a0a:	2301      	movs	r3, #1
 8029a0c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029a10:	2300      	movs	r3, #0
 8029a12:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029a14:	4628      	mov	r0, r5
 8029a16:	f7ff fbdf 	bl	80291d8 <onstatechange>
 8029a1a:	e7e6      	b.n	80299ea <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029a1c:	2001      	movs	r0, #1
 8029a1e:	e7a2      	b.n	8029966 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029a20:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029a22:	3301      	adds	r3, #1
 8029a24:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029a26:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029a28:	4628      	mov	r0, r5
 8029a2a:	f7ff fe8f 	bl	802974c <mg_tcpip_rx>
 8029a2e:	e7e5      	b.n	80299fc <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8029a30:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8029a34:	a909      	add	r1, sp, #36	@ 0x24
 8029a36:	4620      	mov	r0, r4
 8029a38:	f7fa fcd7 	bl	80243ea <mg_queue_next>
    if (len > 0) {
 8029a3c:	4680      	mov	r8, r0
 8029a3e:	2800      	cmp	r0, #0
 8029a40:	d0dc      	beq.n	80299fc <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8029a42:	4602      	mov	r2, r0
 8029a44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029a46:	4628      	mov	r0, r5
 8029a48:	f7ff fe80 	bl	802974c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8029a4c:	4641      	mov	r1, r8
 8029a4e:	4620      	mov	r0, r4
 8029a50:	f7fa fce7 	bl	8024422 <mg_queue_del>
 8029a54:	e7d2      	b.n	80299fc <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029a56:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8029a5a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8029a5e:	4291      	cmp	r1, r2
 8029a60:	f000 8088 	beq.w	8029b74 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029a64:	4b53      	ldr	r3, [pc, #332]	@ (8029bb4 <mg_tcpip_poll+0x308>)
 8029a66:	681b      	ldr	r3, [r3, #0]
 8029a68:	2b03      	cmp	r3, #3
 8029a6a:	dc23      	bgt.n	8029ab4 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029a6c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029a70:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029a74:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029a78:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8029a7c:	f7fc f922 	bl	8025cc4 <mg_ntohl>
 8029a80:	9007      	str	r0, [sp, #28]
 8029a82:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029a86:	f7fc f91d 	bl	8025cc4 <mg_ntohl>
 8029a8a:	2300      	movs	r3, #0
 8029a8c:	9305      	str	r3, [sp, #20]
 8029a8e:	9304      	str	r3, [sp, #16]
 8029a90:	9003      	str	r0, [sp, #12]
 8029a92:	9b07      	ldr	r3, [sp, #28]
 8029a94:	9302      	str	r3, [sp, #8]
 8029a96:	f8cd b004 	str.w	fp, [sp, #4]
 8029a9a:	f8cd a000 	str.w	sl, [sp]
 8029a9e:	2310      	movs	r3, #16
 8029aa0:	4642      	mov	r2, r8
 8029aa2:	4649      	mov	r1, r9
 8029aa4:	4628      	mov	r0, r5
 8029aa6:	f7fe f9e3 	bl	8027e70 <tx_tcp>
        s->acked = s->ack;
 8029aaa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029aae:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8029ab2:	e045      	b.n	8029b40 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029ab4:	4b44      	ldr	r3, [pc, #272]	@ (8029bc8 <mg_tcpip_poll+0x31c>)
 8029ab6:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8029aba:	4944      	ldr	r1, [pc, #272]	@ (8029bcc <mg_tcpip_poll+0x320>)
 8029abc:	2004      	movs	r0, #4
 8029abe:	f7fc fcdb 	bl	8026478 <mg_log_prefix>
 8029ac2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8029ac6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8029aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029acc:	4841      	ldr	r0, [pc, #260]	@ (8029bd4 <mg_tcpip_poll+0x328>)
 8029ace:	f7fa fb81 	bl	80241d4 <mg_log>
 8029ad2:	e7cb      	b.n	8029a6c <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8029ad4:	4940      	ldr	r1, [pc, #256]	@ (8029bd8 <mg_tcpip_poll+0x32c>)
 8029ad6:	4620      	mov	r0, r4
 8029ad8:	f7fc fdb6 	bl	8026648 <mg_error>
 8029adc:	e030      	b.n	8029b40 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 8029ade:	493f      	ldr	r1, [pc, #252]	@ (8029bdc <mg_tcpip_poll+0x330>)
 8029ae0:	4620      	mov	r0, r4
 8029ae2:	f7fc fdb1 	bl	8026648 <mg_error>
 8029ae6:	e02b      	b.n	8029b40 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8029ae8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029aec:	f043 0320 	orr.w	r3, r3, #32
 8029af0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029af4:	e028      	b.n	8029b48 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029af6:	493a      	ldr	r1, [pc, #232]	@ (8029be0 <mg_tcpip_poll+0x334>)
 8029af8:	4620      	mov	r0, r4
 8029afa:	f7fc fda5 	bl	8026648 <mg_error>
 8029afe:	e01f      	b.n	8029b40 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029b00:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029b04:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029b08:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8029b0c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029b10:	3801      	subs	r0, #1
 8029b12:	f7fc f8d7 	bl	8025cc4 <mg_ntohl>
 8029b16:	9007      	str	r0, [sp, #28]
 8029b18:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029b1c:	f7fc f8d2 	bl	8025cc4 <mg_ntohl>
 8029b20:	2300      	movs	r3, #0
 8029b22:	9305      	str	r3, [sp, #20]
 8029b24:	9304      	str	r3, [sp, #16]
 8029b26:	9003      	str	r0, [sp, #12]
 8029b28:	9b07      	ldr	r3, [sp, #28]
 8029b2a:	9302      	str	r3, [sp, #8]
 8029b2c:	f8cd b004 	str.w	fp, [sp, #4]
 8029b30:	f8cd a000 	str.w	sl, [sp]
 8029b34:	2310      	movs	r3, #16
 8029b36:	4642      	mov	r2, r8
 8029b38:	4649      	mov	r1, r9
 8029b3a:	4628      	mov	r0, r5
 8029b3c:	f7fe f998 	bl	8027e70 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8029b40:	2100      	movs	r1, #0
 8029b42:	4620      	mov	r0, r4
 8029b44:	f7fe fa70 	bl	8028028 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029b48:	6824      	ldr	r4, [r4, #0]
 8029b4a:	b384      	cbz	r4, 8029bae <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8029b4c:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8029b50:	f240 1209 	movw	r2, #265	@ 0x109
 8029b54:	421a      	tst	r2, r3
 8029b56:	d1f7      	bne.n	8029b48 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029b58:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 8029b5c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8029b60:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8029b64:	42b2      	cmp	r2, r6
 8029b66:	41bb      	sbcs	r3, r7
 8029b68:	d2ee      	bcs.n	8029b48 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029b6a:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029b6e:	2b01      	cmp	r3, #1
 8029b70:	f43f af71 	beq.w	8029a56 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8029b74:	2b02      	cmp	r3, #2
 8029b76:	d0ad      	beq.n	8029ad4 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8029b78:	2b03      	cmp	r3, #3
 8029b7a:	d0b0      	beq.n	8029ade <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8029b7c:	2b04      	cmp	r3, #4
 8029b7e:	d0b3      	beq.n	8029ae8 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8029b80:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8029b84:	1c5a      	adds	r2, r3, #1
 8029b86:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 8029b8a:	2b02      	cmp	r3, #2
 8029b8c:	d8b3      	bhi.n	8029af6 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 8029b8e:	4b09      	ldr	r3, [pc, #36]	@ (8029bb4 <mg_tcpip_poll+0x308>)
 8029b90:	681b      	ldr	r3, [r3, #0]
 8029b92:	2b03      	cmp	r3, #3
 8029b94:	ddb4      	ble.n	8029b00 <mg_tcpip_poll+0x254>
 8029b96:	4b0c      	ldr	r3, [pc, #48]	@ (8029bc8 <mg_tcpip_poll+0x31c>)
 8029b98:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8029b9c:	490b      	ldr	r1, [pc, #44]	@ (8029bcc <mg_tcpip_poll+0x320>)
 8029b9e:	2004      	movs	r0, #4
 8029ba0:	f7fc fc6a 	bl	8026478 <mg_log_prefix>
 8029ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029ba6:	480f      	ldr	r0, [pc, #60]	@ (8029be4 <mg_tcpip_poll+0x338>)
 8029ba8:	f7fa fb14 	bl	80241d4 <mg_log>
 8029bac:	e7a8      	b.n	8029b00 <mg_tcpip_poll+0x254>
}
 8029bae:	b00b      	add	sp, #44	@ 0x2c
 8029bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029bb4:	2000012c 	.word	0x2000012c
 8029bb8:	001b7740 	.word	0x001b7740
 8029bbc:	88888889 	.word	0x88888889
 8029bc0:	eeeeeeef 	.word	0xeeeeeeef
 8029bc4:	0803bb08 	.word	0x0803bb08
 8029bc8:	0803b9f0 	.word	0x0803b9f0
 8029bcc:	0803b080 	.word	0x0803b080
 8029bd0:	0803b7e4 	.word	0x0803b7e4
 8029bd4:	0803b7f4 	.word	0x0803b7f4
 8029bd8:	0803b804 	.word	0x0803b804
 8029bdc:	0803b810 	.word	0x0803b810
 8029be0:	0803b828 	.word	0x0803b828
 8029be4:	0803b824 	.word	0x0803b824

08029be8 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8029be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029bea:	b087      	sub	sp, #28
 8029bec:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8029bee:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8029bf0:	f7fc fc3c 	bl	802646c <mg_millis>
 8029bf4:	4602      	mov	r2, r0
 8029bf6:	460b      	mov	r3, r1
 8029bf8:	9004      	str	r0, [sp, #16]
 8029bfa:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 8029bfc:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029c00:	f7fb fefe 	bl	8025a00 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8029c04:	2d00      	cmp	r5, #0
 8029c06:	d078      	beq.n	8029cfa <mg_mgr_poll+0x112>
 8029c08:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8029c0a:	2b00      	cmp	r3, #0
 8029c0c:	d075      	beq.n	8029cfa <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 8029c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029c12:	4628      	mov	r0, r5
 8029c14:	f7ff fe4a 	bl	80298ac <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029c18:	6824      	ldr	r4, [r4, #0]
 8029c1a:	e040      	b.n	8029c9e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8029c1c:	4b38      	ldr	r3, [pc, #224]	@ (8029d00 <mg_mgr_poll+0x118>)
 8029c1e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8029c22:	4938      	ldr	r1, [pc, #224]	@ (8029d04 <mg_mgr_poll+0x11c>)
 8029c24:	2004      	movs	r0, #4
 8029c26:	f7fc fc27 	bl	8026478 <mg_log_prefix>
 8029c2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029c2c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8029c30:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8029c34:	d019      	beq.n	8029c6a <mg_mgr_poll+0x82>
 8029c36:	2254      	movs	r2, #84	@ 0x54
 8029c38:	f010 0f20 	tst.w	r0, #32
 8029c3c:	d017      	beq.n	8029c6e <mg_mgr_poll+0x86>
 8029c3e:	2343      	movs	r3, #67	@ 0x43
 8029c40:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8029c44:	d115      	bne.n	8029c72 <mg_mgr_poll+0x8a>
 8029c46:	2668      	movs	r6, #104	@ 0x68
 8029c48:	f010 0f08 	tst.w	r0, #8
 8029c4c:	d013      	beq.n	8029c76 <mg_mgr_poll+0x8e>
 8029c4e:	2752      	movs	r7, #82	@ 0x52
 8029c50:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 8029c54:	f010 0f20 	tst.w	r0, #32
 8029c58:	d00f      	beq.n	8029c7a <mg_mgr_poll+0x92>
 8029c5a:	2043      	movs	r0, #67	@ 0x43
 8029c5c:	9002      	str	r0, [sp, #8]
 8029c5e:	9701      	str	r7, [sp, #4]
 8029c60:	9600      	str	r6, [sp, #0]
 8029c62:	4829      	ldr	r0, [pc, #164]	@ (8029d08 <mg_mgr_poll+0x120>)
 8029c64:	f7fa fab6 	bl	80241d4 <mg_log>
 8029c68:	e024      	b.n	8029cb4 <mg_mgr_poll+0xcc>
 8029c6a:	2274      	movs	r2, #116	@ 0x74
 8029c6c:	e7e4      	b.n	8029c38 <mg_mgr_poll+0x50>
 8029c6e:	2363      	movs	r3, #99	@ 0x63
 8029c70:	e7e6      	b.n	8029c40 <mg_mgr_poll+0x58>
 8029c72:	2648      	movs	r6, #72	@ 0x48
 8029c74:	e7e8      	b.n	8029c48 <mg_mgr_poll+0x60>
 8029c76:	2772      	movs	r7, #114	@ 0x72
 8029c78:	e7ea      	b.n	8029c50 <mg_mgr_poll+0x68>
 8029c7a:	2063      	movs	r0, #99	@ 0x63
 8029c7c:	e7ee      	b.n	8029c5c <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8029c7e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8029c82:	4620      	mov	r0, r4
 8029c84:	f7fc fd18 	bl	80266b8 <handle_tls_recv>
 8029c88:	e01e      	b.n	8029cc8 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 8029c8a:	4620      	mov	r0, r4
 8029c8c:	f7fe fa6a 	bl	8028164 <write_conn>
 8029c90:	e01f      	b.n	8029cd2 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 8029c92:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029c96:	f013 0f20 	tst.w	r3, #32
 8029c9a:	d12a      	bne.n	8029cf2 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8029c9c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029c9e:	b364      	cbz	r4, 8029cfa <mg_mgr_poll+0x112>
    tmp = c->next;
 8029ca0:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8029ca2:	aa04      	add	r2, sp, #16
 8029ca4:	2102      	movs	r1, #2
 8029ca6:	4620      	mov	r0, r4
 8029ca8:	f7f9 f84b 	bl	8022d42 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8029cac:	4b17      	ldr	r3, [pc, #92]	@ (8029d0c <mg_mgr_poll+0x124>)
 8029cae:	681b      	ldr	r3, [r3, #0]
 8029cb0:	2b03      	cmp	r3, #3
 8029cb2:	dcb3      	bgt.n	8029c1c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8029cb4:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029cb8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8029cbc:	d004      	beq.n	8029cc8 <mg_mgr_poll+0xe0>
 8029cbe:	4620      	mov	r0, r4
 8029cc0:	f7fb fee8 	bl	8025a94 <mg_tls_pending>
 8029cc4:	2800      	cmp	r0, #0
 8029cc6:	d1da      	bne.n	8029c7e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8029cc8:	4620      	mov	r0, r4
 8029cca:	f7f7 fbfb 	bl	80214c4 <can_write>
 8029cce:	2800      	cmp	r0, #0
 8029cd0:	d1db      	bne.n	8029c8a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8029cd2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029cd6:	f013 0f10 	tst.w	r3, #16
 8029cda:	d0da      	beq.n	8029c92 <mg_mgr_poll+0xaa>
 8029cdc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029cde:	2b00      	cmp	r3, #0
 8029ce0:	d1d7      	bne.n	8029c92 <mg_mgr_poll+0xaa>
 8029ce2:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029ce6:	2b04      	cmp	r3, #4
 8029ce8:	d0d3      	beq.n	8029c92 <mg_mgr_poll+0xaa>
      init_closure(c);
 8029cea:	4620      	mov	r0, r4
 8029cec:	f7fe fa66 	bl	80281bc <init_closure>
 8029cf0:	e7cf      	b.n	8029c92 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8029cf2:	4620      	mov	r0, r4
 8029cf4:	f7fd fb7e 	bl	80273f4 <close_conn>
 8029cf8:	e7d0      	b.n	8029c9c <mg_mgr_poll+0xb4>
}
 8029cfa:	b007      	add	sp, #28
 8029cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029cfe:	bf00      	nop
 8029d00:	0803ba00 	.word	0x0803ba00
 8029d04:	0803b080 	.word	0x0803b080
 8029d08:	0803b834 	.word	0x0803b834
 8029d0c:	2000012c 	.word	0x2000012c

08029d10 <mg_now>:
uint64_t mg_now(void) {
 8029d10:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8029d12:	f7fc fbab 	bl	802646c <mg_millis>
 8029d16:	4a03      	ldr	r2, [pc, #12]	@ (8029d24 <mg_now+0x14>)
 8029d18:	6813      	ldr	r3, [r2, #0]
 8029d1a:	6852      	ldr	r2, [r2, #4]
 8029d1c:	18c0      	adds	r0, r0, r3
}
 8029d1e:	eb42 0101 	adc.w	r1, r2, r1
 8029d22:	bd08      	pop	{r3, pc}
 8029d24:	20019f20 	.word	0x20019f20

08029d28 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8029d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d2c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 8029d2e:	460a      	mov	r2, r1
 8029d30:	b129      	cbz	r1, 8029d3e <mg_sntp_parse+0x16>
 8029d32:	7801      	ldrb	r1, [r0, #0]
 8029d34:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029d38:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 8029d3c:	e001      	b.n	8029d42 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 8029d3e:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029d40:	461d      	mov	r5, r3
  if (len < 48) {
 8029d42:	2a2f      	cmp	r2, #47	@ 0x2f
 8029d44:	d817      	bhi.n	8029d76 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8029d46:	4b4b      	ldr	r3, [pc, #300]	@ (8029e74 <mg_sntp_parse+0x14c>)
 8029d48:	681b      	ldr	r3, [r3, #0]
 8029d4a:	2b00      	cmp	r3, #0
 8029d4c:	dc04      	bgt.n	8029d58 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 8029d4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029d52:	4601      	mov	r1, r0
}
 8029d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8029d58:	4b47      	ldr	r3, [pc, #284]	@ (8029e78 <mg_sntp_parse+0x150>)
 8029d5a:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 8029d5e:	4947      	ldr	r1, [pc, #284]	@ (8029e7c <mg_sntp_parse+0x154>)
 8029d60:	2001      	movs	r0, #1
 8029d62:	f7fc fb89 	bl	8026478 <mg_log_prefix>
 8029d66:	4946      	ldr	r1, [pc, #280]	@ (8029e80 <mg_sntp_parse+0x158>)
 8029d68:	4846      	ldr	r0, [pc, #280]	@ (8029e84 <mg_sntp_parse+0x15c>)
 8029d6a:	f7fa fa33 	bl	80241d4 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029d6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029d72:	4601      	mov	r1, r0
 8029d74:	e7ee      	b.n	8029d54 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8029d76:	3b04      	subs	r3, #4
 8029d78:	2b01      	cmp	r3, #1
 8029d7a:	d916      	bls.n	8029daa <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 8029d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8029e74 <mg_sntp_parse+0x14c>)
 8029d7e:	681b      	ldr	r3, [r3, #0]
 8029d80:	2b00      	cmp	r3, #0
 8029d82:	dc03      	bgt.n	8029d8c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8029d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029d88:	4601      	mov	r1, r0
 8029d8a:	e7e3      	b.n	8029d54 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 8029d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8029e78 <mg_sntp_parse+0x150>)
 8029d8e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8029d92:	493a      	ldr	r1, [pc, #232]	@ (8029e7c <mg_sntp_parse+0x154>)
 8029d94:	2001      	movs	r0, #1
 8029d96:	f7fc fb6f 	bl	8026478 <mg_log_prefix>
 8029d9a:	493b      	ldr	r1, [pc, #236]	@ (8029e88 <mg_sntp_parse+0x160>)
 8029d9c:	4839      	ldr	r0, [pc, #228]	@ (8029e84 <mg_sntp_parse+0x15c>)
 8029d9e:	f7fa fa19 	bl	80241d4 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029da2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029da6:	4601      	mov	r1, r0
 8029da8:	e7d4      	b.n	8029d54 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 8029daa:	7863      	ldrb	r3, [r4, #1]
 8029dac:	b9b3      	cbnz	r3, 8029ddc <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8029dae:	4b31      	ldr	r3, [pc, #196]	@ (8029e74 <mg_sntp_parse+0x14c>)
 8029db0:	681b      	ldr	r3, [r3, #0]
 8029db2:	2b00      	cmp	r3, #0
 8029db4:	dc03      	bgt.n	8029dbe <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8029db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029dba:	4601      	mov	r1, r0
 8029dbc:	e7ca      	b.n	8029d54 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8029dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8029e78 <mg_sntp_parse+0x150>)
 8029dc0:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8029dc4:	492d      	ldr	r1, [pc, #180]	@ (8029e7c <mg_sntp_parse+0x154>)
 8029dc6:	2001      	movs	r0, #1
 8029dc8:	f7fc fb56 	bl	8026478 <mg_log_prefix>
 8029dcc:	492f      	ldr	r1, [pc, #188]	@ (8029e8c <mg_sntp_parse+0x164>)
 8029dce:	482d      	ldr	r0, [pc, #180]	@ (8029e84 <mg_sntp_parse+0x15c>)
 8029dd0:	f7fa fa00 	bl	80241d4 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029dd8:	4601      	mov	r1, r0
 8029dda:	e7bb      	b.n	8029d54 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 8029ddc:	1eeb      	subs	r3, r5, #3
 8029dde:	2b01      	cmp	r3, #1
 8029de0:	d907      	bls.n	8029df2 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8029de2:	4b24      	ldr	r3, [pc, #144]	@ (8029e74 <mg_sntp_parse+0x14c>)
 8029de4:	681b      	ldr	r3, [r3, #0]
 8029de6:	2b00      	cmp	r3, #0
 8029de8:	dc35      	bgt.n	8029e56 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 8029dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029dee:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8029df0:	e7b0      	b.n	8029d54 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8029df2:	f104 0018 	add.w	r0, r4, #24
 8029df6:	f7fb ffc3 	bl	8025d80 <gettimestamp>
 8029dfa:	4606      	mov	r6, r0
 8029dfc:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8029dfe:	f104 0020 	add.w	r0, r4, #32
 8029e02:	f7fb ffbd 	bl	8025d80 <gettimestamp>
 8029e06:	4680      	mov	r8, r0
 8029e08:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8029e0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8029e0e:	f7fb ffb7 	bl	8025d80 <gettimestamp>
 8029e12:	4607      	mov	r7, r0
 8029e14:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8029e16:	f7fc fb29 	bl	802646c <mg_millis>
 8029e1a:	4605      	mov	r5, r0
 8029e1c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8029e1e:	1b86      	subs	r6, r0, r6
 8029e20:	eb61 020a 	sbc.w	r2, r1, sl
 8029e24:	ebb7 0808 	subs.w	r8, r7, r8
 8029e28:	eb64 0909 	sbc.w	r9, r4, r9
 8029e2c:	ebb6 0608 	subs.w	r6, r6, r8
 8029e30:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8029e34:	0fd3      	lsrs	r3, r2, #31
 8029e36:	199b      	adds	r3, r3, r6
 8029e38:	f142 0200 	adc.w	r2, r2, #0
 8029e3c:	085b      	lsrs	r3, r3, #1
 8029e3e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8029e42:	19d8      	adds	r0, r3, r7
 8029e44:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8029e48:	1b45      	subs	r5, r0, r5
 8029e4a:	eb61 030c 	sbc.w	r3, r1, ip
 8029e4e:	4a10      	ldr	r2, [pc, #64]	@ (8029e90 <mg_sntp_parse+0x168>)
 8029e50:	6015      	str	r5, [r2, #0]
 8029e52:	6053      	str	r3, [r2, #4]
 8029e54:	e77e      	b.n	8029d54 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8029e56:	4b08      	ldr	r3, [pc, #32]	@ (8029e78 <mg_sntp_parse+0x150>)
 8029e58:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8029e5c:	4907      	ldr	r1, [pc, #28]	@ (8029e7c <mg_sntp_parse+0x154>)
 8029e5e:	2001      	movs	r0, #1
 8029e60:	f7fc fb0a 	bl	8026478 <mg_log_prefix>
 8029e64:	4629      	mov	r1, r5
 8029e66:	480b      	ldr	r0, [pc, #44]	@ (8029e94 <mg_sntp_parse+0x16c>)
 8029e68:	f7fa f9b4 	bl	80241d4 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029e70:	4601      	mov	r1, r0
 8029e72:	e76f      	b.n	8029d54 <mg_sntp_parse+0x2c>
 8029e74:	2000012c 	.word	0x2000012c
 8029e78:	0803b950 	.word	0x0803b950
 8029e7c:	0803b080 	.word	0x0803b080
 8029e80:	0803b848 	.word	0x0803b848
 8029e84:	0803b398 	.word	0x0803b398
 8029e88:	0803b858 	.word	0x0803b858
 8029e8c:	0803b86c 	.word	0x0803b86c
 8029e90:	20019f20 	.word	0x20019f20
 8029e94:	0803b888 	.word	0x0803b888

08029e98 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8029e98:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8029e9c:	b08c      	sub	sp, #48	@ 0x30
 8029e9e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8029ea0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029ea4:	f013 0f08 	tst.w	r3, #8
 8029ea8:	d012      	beq.n	8029ed0 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8029eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8029f58 <mg_sntp_request+0xc0>)
 8029eac:	681b      	ldr	r3, [r3, #0]
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	dc02      	bgt.n	8029eb8 <mg_sntp_request+0x20>
}
 8029eb2:	b00c      	add	sp, #48	@ 0x30
 8029eb4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8029eb8:	4b28      	ldr	r3, [pc, #160]	@ (8029f5c <mg_sntp_request+0xc4>)
 8029eba:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8029ebe:	4928      	ldr	r1, [pc, #160]	@ (8029f60 <mg_sntp_request+0xc8>)
 8029ec0:	2001      	movs	r0, #1
 8029ec2:	f7fc fad9 	bl	8026478 <mg_log_prefix>
 8029ec6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029ec8:	4826      	ldr	r0, [pc, #152]	@ (8029f64 <mg_sntp_request+0xcc>)
 8029eca:	f7fa f983 	bl	80241d4 <mg_log>
 8029ece:	e7f0      	b.n	8029eb2 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8029ed0:	f7fc facc 	bl	802646c <mg_millis>
 8029ed4:	4606      	mov	r6, r0
 8029ed6:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8029ed8:	2100      	movs	r1, #0
 8029eda:	9100      	str	r1, [sp, #0]
 8029edc:	222c      	movs	r2, #44	@ 0x2c
 8029ede:	a801      	add	r0, sp, #4
 8029ee0:	f002 fec6 	bl	802cc70 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8029ee4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029ee8:	2300      	movs	r3, #0
 8029eea:	4630      	mov	r0, r6
 8029eec:	4629      	mov	r1, r5
 8029eee:	f7e6 fee3 	bl	8010cb8 <__aeabi_ldivmod>
 8029ef2:	4610      	mov	r0, r2
 8029ef4:	4619      	mov	r1, r3
 8029ef6:	f7e6 fb69 	bl	80105cc <__aeabi_l2d>
 8029efa:	2200      	movs	r2, #0
 8029efc:	4b1a      	ldr	r3, [pc, #104]	@ (8029f68 <mg_sntp_request+0xd0>)
 8029efe:	f7e6 fcbd 	bl	801087c <__aeabi_ddiv>
 8029f02:	a313      	add	r3, pc, #76	@ (adr r3, 8029f50 <mg_sntp_request+0xb8>)
 8029f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029f08:	f7e6 fb8e 	bl	8010628 <__aeabi_dmul>
 8029f0c:	4680      	mov	r8, r0
 8029f0e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8029f10:	2323      	movs	r3, #35	@ 0x23
 8029f12:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8029f16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029f1a:	2300      	movs	r3, #0
 8029f1c:	4630      	mov	r0, r6
 8029f1e:	4629      	mov	r1, r5
 8029f20:	f7e6 feca 	bl	8010cb8 <__aeabi_ldivmod>
 8029f24:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8029f28:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8029f2c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8029f30:	f7fb fec8 	bl	8025cc4 <mg_ntohl>
 8029f34:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8029f36:	4640      	mov	r0, r8
 8029f38:	4649      	mov	r1, r9
 8029f3a:	f7e6 fe4d 	bl	8010bd8 <__aeabi_d2uiz>
 8029f3e:	f7fb fec1 	bl	8025cc4 <mg_ntohl>
 8029f42:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8029f44:	2230      	movs	r2, #48	@ 0x30
 8029f46:	4669      	mov	r1, sp
 8029f48:	4620      	mov	r0, r4
 8029f4a:	f7fd fb49 	bl	80275e0 <mg_send>
}
 8029f4e:	e7b0      	b.n	8029eb2 <mg_sntp_request+0x1a>
 8029f50:	ffe00000 	.word	0xffe00000
 8029f54:	41efffff 	.word	0x41efffff
 8029f58:	2000012c 	.word	0x2000012c
 8029f5c:	0803b940 	.word	0x0803b940
 8029f60:	0803b080 	.word	0x0803b080
 8029f64:	0803b8a0 	.word	0x0803b8a0
 8029f68:	408f4000 	.word	0x408f4000

08029f6c <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029f6c:	b570      	push	{r4, r5, r6, lr}
 8029f6e:	b082      	sub	sp, #8
 8029f70:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8029f72:	3901      	subs	r1, #1
 8029f74:	2906      	cmp	r1, #6
 8029f76:	d810      	bhi.n	8029f9a <sntp_cb+0x2e>
 8029f78:	e8df f001 	tbb	[pc, r1]
 8029f7c:	110f4604 	.word	0x110f4604
 8029f80:	0f0f      	.short	0x0f0f
 8029f82:	14          	.byte	0x14
 8029f83:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8029f84:	f7fc fa72 	bl	802646c <mg_millis>
 8029f88:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8029f8c:	18c0      	adds	r0, r0, r3
 8029f8e:	f141 0100 	adc.w	r1, r1, #0
 8029f92:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029f96:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8029f9a:	b002      	add	sp, #8
 8029f9c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8029f9e:	f7ff ff7b 	bl	8029e98 <mg_sntp_request>
 8029fa2:	e7fa      	b.n	8029f9a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8029fa4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8029fa6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8029fa8:	f7ff febe 	bl	8029d28 <mg_sntp_parse>
 8029fac:	4605      	mov	r5, r0
 8029fae:	460e      	mov	r6, r1
 8029fb0:	9000      	str	r0, [sp, #0]
 8029fb2:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8029fb4:	2801      	cmp	r0, #1
 8029fb6:	f171 0300 	sbcs.w	r3, r1, #0
 8029fba:	da06      	bge.n	8029fca <sntp_cb+0x5e>
    c->is_closing = 1;
 8029fbc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029fc0:	f043 0320 	orr.w	r3, r3, #32
 8029fc4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8029fc8:	e7e7      	b.n	8029f9a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8029fca:	f7fc fa4f 	bl	802646c <mg_millis>
 8029fce:	1a2d      	subs	r5, r5, r0
 8029fd0:	eb66 0601 	sbc.w	r6, r6, r1
 8029fd4:	4b14      	ldr	r3, [pc, #80]	@ (802a028 <sntp_cb+0xbc>)
 8029fd6:	601d      	str	r5, [r3, #0]
 8029fd8:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8029fda:	466a      	mov	r2, sp
 8029fdc:	2112      	movs	r1, #18
 8029fde:	4620      	mov	r0, r4
 8029fe0:	f7f8 feaf 	bl	8022d42 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8029fe4:	4b11      	ldr	r3, [pc, #68]	@ (802a02c <sntp_cb+0xc0>)
 8029fe6:	681b      	ldr	r3, [r3, #0]
 8029fe8:	2b02      	cmp	r3, #2
 8029fea:	dde7      	ble.n	8029fbc <sntp_cb+0x50>
 8029fec:	4b10      	ldr	r3, [pc, #64]	@ (802a030 <sntp_cb+0xc4>)
 8029fee:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8029ff2:	4910      	ldr	r1, [pc, #64]	@ (802a034 <sntp_cb+0xc8>)
 8029ff4:	2003      	movs	r0, #3
 8029ff6:	f7fc fa3f 	bl	8026478 <mg_log_prefix>
 8029ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029ffe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a000:	480d      	ldr	r0, [pc, #52]	@ (802a038 <sntp_cb+0xcc>)
 802a002:	f7fa f8e7 	bl	80241d4 <mg_log>
 802a006:	e7d9      	b.n	8029fbc <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 802a008:	f7fc fa30 	bl	802646c <mg_millis>
 802a00c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 802a010:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 802a014:	4282      	cmp	r2, r0
 802a016:	418b      	sbcs	r3, r1
 802a018:	d2bf      	bcs.n	8029f9a <sntp_cb+0x2e>
 802a01a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802a01e:	f043 0320 	orr.w	r3, r3, #32
 802a022:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 802a026:	e7b8      	b.n	8029f9a <sntp_cb+0x2e>
 802a028:	20019f20 	.word	0x20019f20
 802a02c:	2000012c 	.word	0x2000012c
 802a030:	0803b938 	.word	0x0803b938
 802a034:	0803b080 	.word	0x0803b080
 802a038:	0803b8b8 	.word	0x0803b8b8

0802a03c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 802a03c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 802a03e:	460d      	mov	r5, r1
 802a040:	b169      	cbz	r1, 802a05e <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 802a042:	4629      	mov	r1, r5
 802a044:	f7fe ffa0 	bl	8028f88 <mg_connect>
 802a048:	4604      	mov	r4, r0
 802a04a:	b130      	cbz	r0, 802a05a <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 802a04c:	4b05      	ldr	r3, [pc, #20]	@ (802a064 <mg_sntp_connect+0x28>)
 802a04e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 802a052:	462a      	mov	r2, r5
 802a054:	2101      	movs	r1, #1
 802a056:	f7ff ff89 	bl	8029f6c <sntp_cb>
}
 802a05a:	4620      	mov	r0, r4
 802a05c:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 802a05e:	4d02      	ldr	r5, [pc, #8]	@ (802a068 <mg_sntp_connect+0x2c>)
 802a060:	e7ef      	b.n	802a042 <mg_sntp_connect+0x6>
 802a062:	bf00      	nop
 802a064:	08029f6d 	.word	0x08029f6d
 802a068:	0803b8dc 	.word	0x0803b8dc

0802a06c <has_mqtt_prefix>:
 802a06c:	b508      	push	{r3, lr}
 802a06e:	2207      	movs	r2, #7
 802a070:	4903      	ldr	r1, [pc, #12]	@ (802a080 <has_mqtt_prefix+0x14>)
 802a072:	f002 fe32 	bl	802ccda <strncmp>
 802a076:	fab0 f080 	clz	r0, r0
 802a07a:	0940      	lsrs	r0, r0, #5
 802a07c:	bd08      	pop	{r3, pc}
 802a07e:	bf00      	nop
 802a080:	0803bf58 	.word	0x0803bf58

0802a084 <is_valid_ip_or_domain>:
 802a084:	b570      	push	{r4, r5, r6, lr}
 802a086:	4604      	mov	r4, r0
 802a088:	2200      	movs	r2, #0
 802a08a:	4610      	mov	r0, r2
 802a08c:	e001      	b.n	802a092 <is_valid_ip_or_domain+0xe>
 802a08e:	3001      	adds	r0, #1
 802a090:	3201      	adds	r2, #1
 802a092:	5ca3      	ldrb	r3, [r4, r2]
 802a094:	b143      	cbz	r3, 802a0a8 <is_valid_ip_or_domain+0x24>
 802a096:	2b2e      	cmp	r3, #46	@ 0x2e
 802a098:	d0f9      	beq.n	802a08e <is_valid_ip_or_domain+0xa>
 802a09a:	491d      	ldr	r1, [pc, #116]	@ (802a110 <is_valid_ip_or_domain+0x8c>)
 802a09c:	5ccb      	ldrb	r3, [r1, r3]
 802a09e:	f013 0f04 	tst.w	r3, #4
 802a0a2:	d1f5      	bne.n	802a090 <is_valid_ip_or_domain+0xc>
 802a0a4:	2500      	movs	r5, #0
 802a0a6:	e000      	b.n	802a0aa <is_valid_ip_or_domain+0x26>
 802a0a8:	2501      	movs	r5, #1
 802a0aa:	b335      	cbz	r5, 802a0fa <is_valid_ip_or_domain+0x76>
 802a0ac:	2803      	cmp	r0, #3
 802a0ae:	d013      	beq.n	802a0d8 <is_valid_ip_or_domain+0x54>
 802a0b0:	2200      	movs	r2, #0
 802a0b2:	4615      	mov	r5, r2
 802a0b4:	e014      	b.n	802a0e0 <is_valid_ip_or_domain+0x5c>
 802a0b6:	3601      	adds	r6, #1
 802a0b8:	2e03      	cmp	r6, #3
 802a0ba:	dc24      	bgt.n	802a106 <is_valid_ip_or_domain+0x82>
 802a0bc:	4620      	mov	r0, r4
 802a0be:	f000 f8a3 	bl	802a208 <atoi>
 802a0c2:	28ff      	cmp	r0, #255	@ 0xff
 802a0c4:	d821      	bhi.n	802a10a <is_valid_ip_or_domain+0x86>
 802a0c6:	212e      	movs	r1, #46	@ 0x2e
 802a0c8:	4620      	mov	r0, r4
 802a0ca:	f002 fde8 	bl	802cc9e <strchr>
 802a0ce:	4604      	mov	r4, r0
 802a0d0:	2800      	cmp	r0, #0
 802a0d2:	d0f0      	beq.n	802a0b6 <is_valid_ip_or_domain+0x32>
 802a0d4:	3401      	adds	r4, #1
 802a0d6:	e7ee      	b.n	802a0b6 <is_valid_ip_or_domain+0x32>
 802a0d8:	2600      	movs	r6, #0
 802a0da:	e7ed      	b.n	802a0b8 <is_valid_ip_or_domain+0x34>
 802a0dc:	3501      	adds	r5, #1
 802a0de:	3201      	adds	r2, #1
 802a0e0:	5ca3      	ldrb	r3, [r4, r2]
 802a0e2:	b163      	cbz	r3, 802a0fe <is_valid_ip_or_domain+0x7a>
 802a0e4:	2b2e      	cmp	r3, #46	@ 0x2e
 802a0e6:	d0f9      	beq.n	802a0dc <is_valid_ip_or_domain+0x58>
 802a0e8:	4909      	ldr	r1, [pc, #36]	@ (802a110 <is_valid_ip_or_domain+0x8c>)
 802a0ea:	5cc9      	ldrb	r1, [r1, r3]
 802a0ec:	f011 0f07 	tst.w	r1, #7
 802a0f0:	d1f5      	bne.n	802a0de <is_valid_ip_or_domain+0x5a>
 802a0f2:	2b2d      	cmp	r3, #45	@ 0x2d
 802a0f4:	d0f3      	beq.n	802a0de <is_valid_ip_or_domain+0x5a>
 802a0f6:	2500      	movs	r5, #0
 802a0f8:	e005      	b.n	802a106 <is_valid_ip_or_domain+0x82>
 802a0fa:	462a      	mov	r2, r5
 802a0fc:	e7f0      	b.n	802a0e0 <is_valid_ip_or_domain+0x5c>
 802a0fe:	2d00      	cmp	r5, #0
 802a100:	bfd4      	ite	le
 802a102:	2500      	movle	r5, #0
 802a104:	2501      	movgt	r5, #1
 802a106:	4628      	mov	r0, r5
 802a108:	bd70      	pop	{r4, r5, r6, pc}
 802a10a:	2500      	movs	r5, #0
 802a10c:	e7fb      	b.n	802a106 <is_valid_ip_or_domain+0x82>
 802a10e:	bf00      	nop
 802a110:	0803c3f9 	.word	0x0803c3f9

0802a114 <is_valid_port>:
 802a114:	b510      	push	{r4, lr}
 802a116:	4604      	mov	r4, r0
 802a118:	f000 f876 	bl	802a208 <atoi>
 802a11c:	3801      	subs	r0, #1
 802a11e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 802a122:	4298      	cmp	r0, r3
 802a124:	d80a      	bhi.n	802a13c <is_valid_port+0x28>
 802a126:	7823      	ldrb	r3, [r4, #0]
 802a128:	b133      	cbz	r3, 802a138 <is_valid_port+0x24>
 802a12a:	4a06      	ldr	r2, [pc, #24]	@ (802a144 <is_valid_port+0x30>)
 802a12c:	5cd3      	ldrb	r3, [r2, r3]
 802a12e:	f013 0f04 	tst.w	r3, #4
 802a132:	d005      	beq.n	802a140 <is_valid_port+0x2c>
 802a134:	3401      	adds	r4, #1
 802a136:	e7f6      	b.n	802a126 <is_valid_port+0x12>
 802a138:	2001      	movs	r0, #1
 802a13a:	e000      	b.n	802a13e <is_valid_port+0x2a>
 802a13c:	2000      	movs	r0, #0
 802a13e:	bd10      	pop	{r4, pc}
 802a140:	2000      	movs	r0, #0
 802a142:	e7fc      	b.n	802a13e <is_valid_port+0x2a>
 802a144:	0803c3f9 	.word	0x0803c3f9

0802a148 <is_valid_mqtt_url>:
 802a148:	b570      	push	{r4, r5, r6, lr}
 802a14a:	b0c0      	sub	sp, #256	@ 0x100
 802a14c:	4604      	mov	r4, r0
 802a14e:	f7ff ff8d 	bl	802a06c <has_mqtt_prefix>
 802a152:	b1d0      	cbz	r0, 802a18a <is_valid_mqtt_url+0x42>
 802a154:	3407      	adds	r4, #7
 802a156:	213a      	movs	r1, #58	@ 0x3a
 802a158:	4620      	mov	r0, r4
 802a15a:	f002 fda0 	bl	802cc9e <strchr>
 802a15e:	4606      	mov	r6, r0
 802a160:	b1c8      	cbz	r0, 802a196 <is_valid_mqtt_url+0x4e>
 802a162:	1b05      	subs	r5, r0, r4
 802a164:	462a      	mov	r2, r5
 802a166:	4621      	mov	r1, r4
 802a168:	4668      	mov	r0, sp
 802a16a:	f002 fdc8 	bl	802ccfe <strncpy>
 802a16e:	2300      	movs	r3, #0
 802a170:	f80d 3005 	strb.w	r3, [sp, r5]
 802a174:	4668      	mov	r0, sp
 802a176:	f7ff ff85 	bl	802a084 <is_valid_ip_or_domain>
 802a17a:	b190      	cbz	r0, 802a1a2 <is_valid_mqtt_url+0x5a>
 802a17c:	1c70      	adds	r0, r6, #1
 802a17e:	f7ff ffc9 	bl	802a114 <is_valid_port>
 802a182:	b1a0      	cbz	r0, 802a1ae <is_valid_mqtt_url+0x66>
 802a184:	2000      	movs	r0, #0
 802a186:	b040      	add	sp, #256	@ 0x100
 802a188:	bd70      	pop	{r4, r5, r6, pc}
 802a18a:	480c      	ldr	r0, [pc, #48]	@ (802a1bc <is_valid_mqtt_url+0x74>)
 802a18c:	f002 f818 	bl	802c1c0 <puts>
 802a190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802a194:	e7f7      	b.n	802a186 <is_valid_mqtt_url+0x3e>
 802a196:	480a      	ldr	r0, [pc, #40]	@ (802a1c0 <is_valid_mqtt_url+0x78>)
 802a198:	f002 f812 	bl	802c1c0 <puts>
 802a19c:	f06f 0001 	mvn.w	r0, #1
 802a1a0:	e7f1      	b.n	802a186 <is_valid_mqtt_url+0x3e>
 802a1a2:	4808      	ldr	r0, [pc, #32]	@ (802a1c4 <is_valid_mqtt_url+0x7c>)
 802a1a4:	f002 f80c 	bl	802c1c0 <puts>
 802a1a8:	f06f 0002 	mvn.w	r0, #2
 802a1ac:	e7eb      	b.n	802a186 <is_valid_mqtt_url+0x3e>
 802a1ae:	4806      	ldr	r0, [pc, #24]	@ (802a1c8 <is_valid_mqtt_url+0x80>)
 802a1b0:	f002 f806 	bl	802c1c0 <puts>
 802a1b4:	f06f 0003 	mvn.w	r0, #3
 802a1b8:	e7e5      	b.n	802a186 <is_valid_mqtt_url+0x3e>
 802a1ba:	bf00      	nop
 802a1bc:	0803bf60 	.word	0x0803bf60
 802a1c0:	0803bf8c 	.word	0x0803bf8c
 802a1c4:	0803bfc0 	.word	0x0803bfc0
 802a1c8:	0803bfe4 	.word	0x0803bfe4

0802a1cc <__assert_func>:
 802a1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a1ce:	4614      	mov	r4, r2
 802a1d0:	461a      	mov	r2, r3
 802a1d2:	4b09      	ldr	r3, [pc, #36]	@ (802a1f8 <__assert_func+0x2c>)
 802a1d4:	681b      	ldr	r3, [r3, #0]
 802a1d6:	4605      	mov	r5, r0
 802a1d8:	68d8      	ldr	r0, [r3, #12]
 802a1da:	b954      	cbnz	r4, 802a1f2 <__assert_func+0x26>
 802a1dc:	4b07      	ldr	r3, [pc, #28]	@ (802a1fc <__assert_func+0x30>)
 802a1de:	461c      	mov	r4, r3
 802a1e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a1e4:	9100      	str	r1, [sp, #0]
 802a1e6:	462b      	mov	r3, r5
 802a1e8:	4905      	ldr	r1, [pc, #20]	@ (802a200 <__assert_func+0x34>)
 802a1ea:	f000 f811 	bl	802a210 <fiprintf>
 802a1ee:	f003 ffdf 	bl	802e1b0 <abort>
 802a1f2:	4b04      	ldr	r3, [pc, #16]	@ (802a204 <__assert_func+0x38>)
 802a1f4:	e7f4      	b.n	802a1e0 <__assert_func+0x14>
 802a1f6:	bf00      	nop
 802a1f8:	200002d8 	.word	0x200002d8
 802a1fc:	0803c03a 	.word	0x0803c03a
 802a200:	0803c00c 	.word	0x0803c00c
 802a204:	0803bfff 	.word	0x0803bfff

0802a208 <atoi>:
 802a208:	220a      	movs	r2, #10
 802a20a:	2100      	movs	r1, #0
 802a20c:	f002 b8b6 	b.w	802c37c <strtol>

0802a210 <fiprintf>:
 802a210:	b40e      	push	{r1, r2, r3}
 802a212:	b503      	push	{r0, r1, lr}
 802a214:	4601      	mov	r1, r0
 802a216:	ab03      	add	r3, sp, #12
 802a218:	4805      	ldr	r0, [pc, #20]	@ (802a230 <fiprintf+0x20>)
 802a21a:	f853 2b04 	ldr.w	r2, [r3], #4
 802a21e:	6800      	ldr	r0, [r0, #0]
 802a220:	9301      	str	r3, [sp, #4]
 802a222:	f001 fab7 	bl	802b794 <_vfiprintf_r>
 802a226:	b002      	add	sp, #8
 802a228:	f85d eb04 	ldr.w	lr, [sp], #4
 802a22c:	b003      	add	sp, #12
 802a22e:	4770      	bx	lr
 802a230:	200002d8 	.word	0x200002d8

0802a234 <printf>:
 802a234:	b40f      	push	{r0, r1, r2, r3}
 802a236:	b507      	push	{r0, r1, r2, lr}
 802a238:	4906      	ldr	r1, [pc, #24]	@ (802a254 <printf+0x20>)
 802a23a:	ab04      	add	r3, sp, #16
 802a23c:	6808      	ldr	r0, [r1, #0]
 802a23e:	f853 2b04 	ldr.w	r2, [r3], #4
 802a242:	6881      	ldr	r1, [r0, #8]
 802a244:	9301      	str	r3, [sp, #4]
 802a246:	f000 f807 	bl	802a258 <_vfprintf_r>
 802a24a:	b003      	add	sp, #12
 802a24c:	f85d eb04 	ldr.w	lr, [sp], #4
 802a250:	b004      	add	sp, #16
 802a252:	4770      	bx	lr
 802a254:	200002d8 	.word	0x200002d8

0802a258 <_vfprintf_r>:
 802a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a25c:	b0d3      	sub	sp, #332	@ 0x14c
 802a25e:	468b      	mov	fp, r1
 802a260:	4690      	mov	r8, r2
 802a262:	461c      	mov	r4, r3
 802a264:	461e      	mov	r6, r3
 802a266:	9003      	str	r0, [sp, #12]
 802a268:	f003 fe90 	bl	802df8c <_localeconv_r>
 802a26c:	6803      	ldr	r3, [r0, #0]
 802a26e:	9316      	str	r3, [sp, #88]	@ 0x58
 802a270:	4618      	mov	r0, r3
 802a272:	f7e6 f815 	bl	80102a0 <strlen>
 802a276:	9b03      	ldr	r3, [sp, #12]
 802a278:	900d      	str	r0, [sp, #52]	@ 0x34
 802a27a:	b123      	cbz	r3, 802a286 <_vfprintf_r+0x2e>
 802a27c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a27e:	b913      	cbnz	r3, 802a286 <_vfprintf_r+0x2e>
 802a280:	9803      	ldr	r0, [sp, #12]
 802a282:	f002 fa4f 	bl	802c724 <__sinit>
 802a286:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a28a:	07da      	lsls	r2, r3, #31
 802a28c:	d407      	bmi.n	802a29e <_vfprintf_r+0x46>
 802a28e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a292:	059b      	lsls	r3, r3, #22
 802a294:	d403      	bmi.n	802a29e <_vfprintf_r+0x46>
 802a296:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a29a:	f003 ff22 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 802a29e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a2a2:	049f      	lsls	r7, r3, #18
 802a2a4:	d409      	bmi.n	802a2ba <_vfprintf_r+0x62>
 802a2a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a2aa:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a2ae:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a2b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802a2b6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802a2ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a2be:	071d      	lsls	r5, r3, #28
 802a2c0:	d502      	bpl.n	802a2c8 <_vfprintf_r+0x70>
 802a2c2:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a2c6:	b9c3      	cbnz	r3, 802a2fa <_vfprintf_r+0xa2>
 802a2c8:	9803      	ldr	r0, [sp, #12]
 802a2ca:	4659      	mov	r1, fp
 802a2cc:	f002 fbe6 	bl	802ca9c <__swsetup_r>
 802a2d0:	b198      	cbz	r0, 802a2fa <_vfprintf_r+0xa2>
 802a2d2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a2d6:	07d8      	lsls	r0, r3, #31
 802a2d8:	d506      	bpl.n	802a2e8 <_vfprintf_r+0x90>
 802a2da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a2de:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a2e0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a2e2:	b053      	add	sp, #332	@ 0x14c
 802a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a2e8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a2ec:	0599      	lsls	r1, r3, #22
 802a2ee:	d4f4      	bmi.n	802a2da <_vfprintf_r+0x82>
 802a2f0:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a2f4:	f003 fef7 	bl	802e0e6 <__retarget_lock_release_recursive>
 802a2f8:	e7ef      	b.n	802a2da <_vfprintf_r+0x82>
 802a2fa:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802a2fe:	f003 021a 	and.w	r2, r3, #26
 802a302:	2a0a      	cmp	r2, #10
 802a304:	d116      	bne.n	802a334 <_vfprintf_r+0xdc>
 802a306:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802a30a:	2a00      	cmp	r2, #0
 802a30c:	db12      	blt.n	802a334 <_vfprintf_r+0xdc>
 802a30e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 802a312:	07d2      	lsls	r2, r2, #31
 802a314:	d405      	bmi.n	802a322 <_vfprintf_r+0xca>
 802a316:	059b      	lsls	r3, r3, #22
 802a318:	d403      	bmi.n	802a322 <_vfprintf_r+0xca>
 802a31a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a31e:	f003 fee2 	bl	802e0e6 <__retarget_lock_release_recursive>
 802a322:	9803      	ldr	r0, [sp, #12]
 802a324:	4623      	mov	r3, r4
 802a326:	4642      	mov	r2, r8
 802a328:	4659      	mov	r1, fp
 802a32a:	b053      	add	sp, #332	@ 0x14c
 802a32c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a330:	f001 b9be 	b.w	802b6b0 <__sbprintf>
 802a334:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802a580 <_vfprintf_r+0x328>
 802a338:	2300      	movs	r3, #0
 802a33a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802a33e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a342:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802a346:	ac29      	add	r4, sp, #164	@ 0xa4
 802a348:	9426      	str	r4, [sp, #152]	@ 0x98
 802a34a:	9304      	str	r3, [sp, #16]
 802a34c:	9309      	str	r3, [sp, #36]	@ 0x24
 802a34e:	9312      	str	r3, [sp, #72]	@ 0x48
 802a350:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a352:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a354:	4643      	mov	r3, r8
 802a356:	461d      	mov	r5, r3
 802a358:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a35c:	b10a      	cbz	r2, 802a362 <_vfprintf_r+0x10a>
 802a35e:	2a25      	cmp	r2, #37	@ 0x25
 802a360:	d1f9      	bne.n	802a356 <_vfprintf_r+0xfe>
 802a362:	ebb5 0708 	subs.w	r7, r5, r8
 802a366:	d00d      	beq.n	802a384 <_vfprintf_r+0x12c>
 802a368:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a36a:	443b      	add	r3, r7
 802a36c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a36e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a370:	3301      	adds	r3, #1
 802a372:	2b07      	cmp	r3, #7
 802a374:	e9c4 8700 	strd	r8, r7, [r4]
 802a378:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a37a:	dc75      	bgt.n	802a468 <_vfprintf_r+0x210>
 802a37c:	3408      	adds	r4, #8
 802a37e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a380:	443b      	add	r3, r7
 802a382:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a384:	782b      	ldrb	r3, [r5, #0]
 802a386:	2b00      	cmp	r3, #0
 802a388:	f001 814f 	beq.w	802b62a <_vfprintf_r+0x13d2>
 802a38c:	2200      	movs	r2, #0
 802a38e:	1c6b      	adds	r3, r5, #1
 802a390:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a394:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802a398:	920e      	str	r2, [sp, #56]	@ 0x38
 802a39a:	4615      	mov	r5, r2
 802a39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a3a0:	9206      	str	r2, [sp, #24]
 802a3a2:	930c      	str	r3, [sp, #48]	@ 0x30
 802a3a4:	9b06      	ldr	r3, [sp, #24]
 802a3a6:	3b20      	subs	r3, #32
 802a3a8:	2b5a      	cmp	r3, #90	@ 0x5a
 802a3aa:	f200 85aa 	bhi.w	802af02 <_vfprintf_r+0xcaa>
 802a3ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a3b2:	009d      	.short	0x009d
 802a3b4:	05a805a8 	.word	0x05a805a8
 802a3b8:	05a800a5 	.word	0x05a800a5
 802a3bc:	05a805a8 	.word	0x05a805a8
 802a3c0:	05a80085 	.word	0x05a80085
 802a3c4:	00a805a8 	.word	0x00a805a8
 802a3c8:	05a800b2 	.word	0x05a800b2
 802a3cc:	00b400af 	.word	0x00b400af
 802a3d0:	00ce05a8 	.word	0x00ce05a8
 802a3d4:	00d100d1 	.word	0x00d100d1
 802a3d8:	00d100d1 	.word	0x00d100d1
 802a3dc:	00d100d1 	.word	0x00d100d1
 802a3e0:	00d100d1 	.word	0x00d100d1
 802a3e4:	05a800d1 	.word	0x05a800d1
 802a3e8:	05a805a8 	.word	0x05a805a8
 802a3ec:	05a805a8 	.word	0x05a805a8
 802a3f0:	05a805a8 	.word	0x05a805a8
 802a3f4:	05a80146 	.word	0x05a80146
 802a3f8:	011a0107 	.word	0x011a0107
 802a3fc:	01460146 	.word	0x01460146
 802a400:	05a80146 	.word	0x05a80146
 802a404:	05a805a8 	.word	0x05a805a8
 802a408:	00e205a8 	.word	0x00e205a8
 802a40c:	05a805a8 	.word	0x05a805a8
 802a410:	05a804a3 	.word	0x05a804a3
 802a414:	05a805a8 	.word	0x05a805a8
 802a418:	05a804ed 	.word	0x05a804ed
 802a41c:	05a8050e 	.word	0x05a8050e
 802a420:	053005a8 	.word	0x053005a8
 802a424:	05a805a8 	.word	0x05a805a8
 802a428:	05a805a8 	.word	0x05a805a8
 802a42c:	05a805a8 	.word	0x05a805a8
 802a430:	05a805a8 	.word	0x05a805a8
 802a434:	05a80146 	.word	0x05a80146
 802a438:	011c0107 	.word	0x011c0107
 802a43c:	01460146 	.word	0x01460146
 802a440:	00ed0146 	.word	0x00ed0146
 802a444:	0101011c 	.word	0x0101011c
 802a448:	00fa05a8 	.word	0x00fa05a8
 802a44c:	048705a8 	.word	0x048705a8
 802a450:	04dc04a5 	.word	0x04dc04a5
 802a454:	05a80101 	.word	0x05a80101
 802a458:	009b04ed 	.word	0x009b04ed
 802a45c:	05a80510 	.word	0x05a80510
 802a460:	006505a8 	.word	0x006505a8
 802a464:	009b05a8 	.word	0x009b05a8
 802a468:	9803      	ldr	r0, [sp, #12]
 802a46a:	aa26      	add	r2, sp, #152	@ 0x98
 802a46c:	4659      	mov	r1, fp
 802a46e:	f001 f95f 	bl	802b730 <__sprint_r>
 802a472:	2800      	cmp	r0, #0
 802a474:	f040 814d 	bne.w	802a712 <_vfprintf_r+0x4ba>
 802a478:	ac29      	add	r4, sp, #164	@ 0xa4
 802a47a:	e780      	b.n	802a37e <_vfprintf_r+0x126>
 802a47c:	4b42      	ldr	r3, [pc, #264]	@ (802a588 <_vfprintf_r+0x330>)
 802a47e:	9319      	str	r3, [sp, #100]	@ 0x64
 802a480:	f015 0320 	ands.w	r3, r5, #32
 802a484:	f000 84c8 	beq.w	802ae18 <_vfprintf_r+0xbc0>
 802a488:	3607      	adds	r6, #7
 802a48a:	f026 0307 	bic.w	r3, r6, #7
 802a48e:	461a      	mov	r2, r3
 802a490:	685f      	ldr	r7, [r3, #4]
 802a492:	f852 6b08 	ldr.w	r6, [r2], #8
 802a496:	9207      	str	r2, [sp, #28]
 802a498:	07eb      	lsls	r3, r5, #31
 802a49a:	d50a      	bpl.n	802a4b2 <_vfprintf_r+0x25a>
 802a49c:	ea56 0307 	orrs.w	r3, r6, r7
 802a4a0:	d007      	beq.n	802a4b2 <_vfprintf_r+0x25a>
 802a4a2:	2330      	movs	r3, #48	@ 0x30
 802a4a4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a4a8:	9b06      	ldr	r3, [sp, #24]
 802a4aa:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a4ae:	f045 0502 	orr.w	r5, r5, #2
 802a4b2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a4b6:	2302      	movs	r3, #2
 802a4b8:	f000 bc2e 	b.w	802ad18 <_vfprintf_r+0xac0>
 802a4bc:	9803      	ldr	r0, [sp, #12]
 802a4be:	f003 fd65 	bl	802df8c <_localeconv_r>
 802a4c2:	6843      	ldr	r3, [r0, #4]
 802a4c4:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a4c6:	4618      	mov	r0, r3
 802a4c8:	f7e5 feea 	bl	80102a0 <strlen>
 802a4cc:	9012      	str	r0, [sp, #72]	@ 0x48
 802a4ce:	9803      	ldr	r0, [sp, #12]
 802a4d0:	f003 fd5c 	bl	802df8c <_localeconv_r>
 802a4d4:	6883      	ldr	r3, [r0, #8]
 802a4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 802a4d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a4da:	b12b      	cbz	r3, 802a4e8 <_vfprintf_r+0x290>
 802a4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a4de:	b11b      	cbz	r3, 802a4e8 <_vfprintf_r+0x290>
 802a4e0:	781b      	ldrb	r3, [r3, #0]
 802a4e2:	b10b      	cbz	r3, 802a4e8 <_vfprintf_r+0x290>
 802a4e4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a4e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a4ea:	e757      	b.n	802a39c <_vfprintf_r+0x144>
 802a4ec:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a4f0:	2b00      	cmp	r3, #0
 802a4f2:	d1f9      	bne.n	802a4e8 <_vfprintf_r+0x290>
 802a4f4:	2320      	movs	r3, #32
 802a4f6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a4fa:	e7f5      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a4fc:	f045 0501 	orr.w	r5, r5, #1
 802a500:	e7f2      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a502:	f856 3b04 	ldr.w	r3, [r6], #4
 802a506:	930e      	str	r3, [sp, #56]	@ 0x38
 802a508:	2b00      	cmp	r3, #0
 802a50a:	daed      	bge.n	802a4e8 <_vfprintf_r+0x290>
 802a50c:	425b      	negs	r3, r3
 802a50e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a510:	f045 0504 	orr.w	r5, r5, #4
 802a514:	e7e8      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a516:	232b      	movs	r3, #43	@ 0x2b
 802a518:	e7ed      	b.n	802a4f6 <_vfprintf_r+0x29e>
 802a51a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a520:	9206      	str	r2, [sp, #24]
 802a522:	2a2a      	cmp	r2, #42	@ 0x2a
 802a524:	d10f      	bne.n	802a546 <_vfprintf_r+0x2ee>
 802a526:	f856 2b04 	ldr.w	r2, [r6], #4
 802a52a:	930c      	str	r3, [sp, #48]	@ 0x30
 802a52c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802a530:	e7da      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a532:	fb01 2909 	mla	r9, r1, r9, r2
 802a536:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a53a:	9206      	str	r2, [sp, #24]
 802a53c:	9a06      	ldr	r2, [sp, #24]
 802a53e:	3a30      	subs	r2, #48	@ 0x30
 802a540:	2a09      	cmp	r2, #9
 802a542:	d9f6      	bls.n	802a532 <_vfprintf_r+0x2da>
 802a544:	e72d      	b.n	802a3a2 <_vfprintf_r+0x14a>
 802a546:	f04f 0900 	mov.w	r9, #0
 802a54a:	210a      	movs	r1, #10
 802a54c:	e7f6      	b.n	802a53c <_vfprintf_r+0x2e4>
 802a54e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a552:	e7c9      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a554:	2200      	movs	r2, #0
 802a556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a558:	920e      	str	r2, [sp, #56]	@ 0x38
 802a55a:	210a      	movs	r1, #10
 802a55c:	9a06      	ldr	r2, [sp, #24]
 802a55e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a560:	3a30      	subs	r2, #48	@ 0x30
 802a562:	fb01 2200 	mla	r2, r1, r0, r2
 802a566:	920e      	str	r2, [sp, #56]	@ 0x38
 802a568:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a56c:	9206      	str	r2, [sp, #24]
 802a56e:	3a30      	subs	r2, #48	@ 0x30
 802a570:	2a09      	cmp	r2, #9
 802a572:	d9f3      	bls.n	802a55c <_vfprintf_r+0x304>
 802a574:	e715      	b.n	802a3a2 <_vfprintf_r+0x14a>
 802a576:	f045 0508 	orr.w	r5, r5, #8
 802a57a:	e7b5      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a57c:	f3af 8000 	nop.w
	...
 802a588:	0803c04b 	.word	0x0803c04b
 802a58c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a58e:	781b      	ldrb	r3, [r3, #0]
 802a590:	2b68      	cmp	r3, #104	@ 0x68
 802a592:	bf01      	itttt	eq
 802a594:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a596:	3301      	addeq	r3, #1
 802a598:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a59a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a59e:	bf18      	it	ne
 802a5a0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a5a4:	e7a0      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a5a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a5a8:	781b      	ldrb	r3, [r3, #0]
 802a5aa:	2b6c      	cmp	r3, #108	@ 0x6c
 802a5ac:	d105      	bne.n	802a5ba <_vfprintf_r+0x362>
 802a5ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a5b0:	3301      	adds	r3, #1
 802a5b2:	930c      	str	r3, [sp, #48]	@ 0x30
 802a5b4:	f045 0520 	orr.w	r5, r5, #32
 802a5b8:	e796      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a5ba:	f045 0510 	orr.w	r5, r5, #16
 802a5be:	e793      	b.n	802a4e8 <_vfprintf_r+0x290>
 802a5c0:	4632      	mov	r2, r6
 802a5c2:	f852 3b04 	ldr.w	r3, [r2], #4
 802a5c6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a5ca:	2300      	movs	r3, #0
 802a5cc:	9207      	str	r2, [sp, #28]
 802a5ce:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a5d2:	469a      	mov	sl, r3
 802a5d4:	f04f 0901 	mov.w	r9, #1
 802a5d8:	9310      	str	r3, [sp, #64]	@ 0x40
 802a5da:	461f      	mov	r7, r3
 802a5dc:	9308      	str	r3, [sp, #32]
 802a5de:	461e      	mov	r6, r3
 802a5e0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a5e4:	e1da      	b.n	802a99c <_vfprintf_r+0x744>
 802a5e6:	f045 0510 	orr.w	r5, r5, #16
 802a5ea:	06af      	lsls	r7, r5, #26
 802a5ec:	d512      	bpl.n	802a614 <_vfprintf_r+0x3bc>
 802a5ee:	3607      	adds	r6, #7
 802a5f0:	f026 0307 	bic.w	r3, r6, #7
 802a5f4:	461a      	mov	r2, r3
 802a5f6:	685f      	ldr	r7, [r3, #4]
 802a5f8:	f852 6b08 	ldr.w	r6, [r2], #8
 802a5fc:	9207      	str	r2, [sp, #28]
 802a5fe:	2f00      	cmp	r7, #0
 802a600:	da06      	bge.n	802a610 <_vfprintf_r+0x3b8>
 802a602:	4276      	negs	r6, r6
 802a604:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a608:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a60c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a610:	2301      	movs	r3, #1
 802a612:	e384      	b.n	802ad1e <_vfprintf_r+0xac6>
 802a614:	4633      	mov	r3, r6
 802a616:	06ee      	lsls	r6, r5, #27
 802a618:	f853 7b04 	ldr.w	r7, [r3], #4
 802a61c:	9307      	str	r3, [sp, #28]
 802a61e:	d502      	bpl.n	802a626 <_vfprintf_r+0x3ce>
 802a620:	463e      	mov	r6, r7
 802a622:	17ff      	asrs	r7, r7, #31
 802a624:	e7eb      	b.n	802a5fe <_vfprintf_r+0x3a6>
 802a626:	0668      	lsls	r0, r5, #25
 802a628:	d503      	bpl.n	802a632 <_vfprintf_r+0x3da>
 802a62a:	b23e      	sxth	r6, r7
 802a62c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a630:	e7e5      	b.n	802a5fe <_vfprintf_r+0x3a6>
 802a632:	05a9      	lsls	r1, r5, #22
 802a634:	d5f4      	bpl.n	802a620 <_vfprintf_r+0x3c8>
 802a636:	b27e      	sxtb	r6, r7
 802a638:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a63c:	e7df      	b.n	802a5fe <_vfprintf_r+0x3a6>
 802a63e:	3607      	adds	r6, #7
 802a640:	f026 0307 	bic.w	r3, r6, #7
 802a644:	ecb3 7b02 	vldmia	r3!, {d7}
 802a648:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a64c:	9307      	str	r3, [sp, #28]
 802a64e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a650:	931a      	str	r3, [sp, #104]	@ 0x68
 802a652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a658:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a65a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a65e:	4b85      	ldr	r3, [pc, #532]	@ (802a874 <_vfprintf_r+0x61c>)
 802a660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a664:	f7e6 fa7a 	bl	8010b5c <__aeabi_dcmpun>
 802a668:	bb10      	cbnz	r0, 802a6b0 <_vfprintf_r+0x458>
 802a66a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a66e:	4b81      	ldr	r3, [pc, #516]	@ (802a874 <_vfprintf_r+0x61c>)
 802a670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a674:	f7e6 fa54 	bl	8010b20 <__aeabi_dcmple>
 802a678:	b9d0      	cbnz	r0, 802a6b0 <_vfprintf_r+0x458>
 802a67a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a67e:	2200      	movs	r2, #0
 802a680:	2300      	movs	r3, #0
 802a682:	f7e6 fa43 	bl	8010b0c <__aeabi_dcmplt>
 802a686:	b110      	cbz	r0, 802a68e <_vfprintf_r+0x436>
 802a688:	232d      	movs	r3, #45	@ 0x2d
 802a68a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a68e:	4a7a      	ldr	r2, [pc, #488]	@ (802a878 <_vfprintf_r+0x620>)
 802a690:	4b7a      	ldr	r3, [pc, #488]	@ (802a87c <_vfprintf_r+0x624>)
 802a692:	9906      	ldr	r1, [sp, #24]
 802a694:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a698:	2947      	cmp	r1, #71	@ 0x47
 802a69a:	bfd4      	ite	le
 802a69c:	4690      	movle	r8, r2
 802a69e:	4698      	movgt	r8, r3
 802a6a0:	f04f 0a00 	mov.w	sl, #0
 802a6a4:	f04f 0903 	mov.w	r9, #3
 802a6a8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a6ac:	f000 bff8 	b.w	802b6a0 <_vfprintf_r+0x1448>
 802a6b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a6b4:	4610      	mov	r0, r2
 802a6b6:	4619      	mov	r1, r3
 802a6b8:	f7e6 fa50 	bl	8010b5c <__aeabi_dcmpun>
 802a6bc:	4682      	mov	sl, r0
 802a6be:	b140      	cbz	r0, 802a6d2 <_vfprintf_r+0x47a>
 802a6c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a6c2:	4a6f      	ldr	r2, [pc, #444]	@ (802a880 <_vfprintf_r+0x628>)
 802a6c4:	2b00      	cmp	r3, #0
 802a6c6:	bfbc      	itt	lt
 802a6c8:	232d      	movlt	r3, #45	@ 0x2d
 802a6ca:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a6ce:	4b6d      	ldr	r3, [pc, #436]	@ (802a884 <_vfprintf_r+0x62c>)
 802a6d0:	e7df      	b.n	802a692 <_vfprintf_r+0x43a>
 802a6d2:	9b06      	ldr	r3, [sp, #24]
 802a6d4:	2b61      	cmp	r3, #97	@ 0x61
 802a6d6:	d02e      	beq.n	802a736 <_vfprintf_r+0x4de>
 802a6d8:	2b41      	cmp	r3, #65	@ 0x41
 802a6da:	d12e      	bne.n	802a73a <_vfprintf_r+0x4e2>
 802a6dc:	2358      	movs	r3, #88	@ 0x58
 802a6de:	2230      	movs	r2, #48	@ 0x30
 802a6e0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802a6e4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a6e8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a6ec:	f045 0502 	orr.w	r5, r5, #2
 802a6f0:	f340 80ae 	ble.w	802a850 <_vfprintf_r+0x5f8>
 802a6f4:	9803      	ldr	r0, [sp, #12]
 802a6f6:	f109 0101 	add.w	r1, r9, #1
 802a6fa:	f004 fd0f 	bl	802f11c <_malloc_r>
 802a6fe:	4680      	mov	r8, r0
 802a700:	2800      	cmp	r0, #0
 802a702:	f040 80aa 	bne.w	802a85a <_vfprintf_r+0x602>
 802a706:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a70e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a712:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a716:	07d9      	lsls	r1, r3, #31
 802a718:	d407      	bmi.n	802a72a <_vfprintf_r+0x4d2>
 802a71a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a71e:	059a      	lsls	r2, r3, #22
 802a720:	d403      	bmi.n	802a72a <_vfprintf_r+0x4d2>
 802a722:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a726:	f003 fcde 	bl	802e0e6 <__retarget_lock_release_recursive>
 802a72a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a72e:	065b      	lsls	r3, r3, #25
 802a730:	f57f add6 	bpl.w	802a2e0 <_vfprintf_r+0x88>
 802a734:	e5d1      	b.n	802a2da <_vfprintf_r+0x82>
 802a736:	2378      	movs	r3, #120	@ 0x78
 802a738:	e7d1      	b.n	802a6de <_vfprintf_r+0x486>
 802a73a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a73e:	f000 808e 	beq.w	802a85e <_vfprintf_r+0x606>
 802a742:	9b06      	ldr	r3, [sp, #24]
 802a744:	f023 0320 	bic.w	r3, r3, #32
 802a748:	2b47      	cmp	r3, #71	@ 0x47
 802a74a:	d105      	bne.n	802a758 <_vfprintf_r+0x500>
 802a74c:	f1b9 0f00 	cmp.w	r9, #0
 802a750:	d102      	bne.n	802a758 <_vfprintf_r+0x500>
 802a752:	46ca      	mov	sl, r9
 802a754:	f04f 0901 	mov.w	r9, #1
 802a758:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a75c:	9311      	str	r3, [sp, #68]	@ 0x44
 802a75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a760:	2b00      	cmp	r3, #0
 802a762:	da7f      	bge.n	802a864 <_vfprintf_r+0x60c>
 802a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a766:	9314      	str	r3, [sp, #80]	@ 0x50
 802a768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a76a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a76e:	9315      	str	r3, [sp, #84]	@ 0x54
 802a770:	232d      	movs	r3, #45	@ 0x2d
 802a772:	931c      	str	r3, [sp, #112]	@ 0x70
 802a774:	9b06      	ldr	r3, [sp, #24]
 802a776:	f023 0320 	bic.w	r3, r3, #32
 802a77a:	2b41      	cmp	r3, #65	@ 0x41
 802a77c:	9308      	str	r3, [sp, #32]
 802a77e:	f040 81e7 	bne.w	802ab50 <_vfprintf_r+0x8f8>
 802a782:	a820      	add	r0, sp, #128	@ 0x80
 802a784:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a788:	f003 fcd2 	bl	802e130 <frexp>
 802a78c:	2200      	movs	r2, #0
 802a78e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a792:	ec51 0b10 	vmov	r0, r1, d0
 802a796:	f7e5 ff47 	bl	8010628 <__aeabi_dmul>
 802a79a:	4602      	mov	r2, r0
 802a79c:	460b      	mov	r3, r1
 802a79e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a7a2:	2200      	movs	r2, #0
 802a7a4:	2300      	movs	r3, #0
 802a7a6:	f7e6 f9a7 	bl	8010af8 <__aeabi_dcmpeq>
 802a7aa:	b108      	cbz	r0, 802a7b0 <_vfprintf_r+0x558>
 802a7ac:	2301      	movs	r3, #1
 802a7ae:	9320      	str	r3, [sp, #128]	@ 0x80
 802a7b0:	4a35      	ldr	r2, [pc, #212]	@ (802a888 <_vfprintf_r+0x630>)
 802a7b2:	4b36      	ldr	r3, [pc, #216]	@ (802a88c <_vfprintf_r+0x634>)
 802a7b4:	9906      	ldr	r1, [sp, #24]
 802a7b6:	2961      	cmp	r1, #97	@ 0x61
 802a7b8:	bf18      	it	ne
 802a7ba:	461a      	movne	r2, r3
 802a7bc:	9210      	str	r2, [sp, #64]	@ 0x40
 802a7be:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802a7c2:	4646      	mov	r6, r8
 802a7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a7c8:	4b31      	ldr	r3, [pc, #196]	@ (802a890 <_vfprintf_r+0x638>)
 802a7ca:	2200      	movs	r2, #0
 802a7cc:	f7e5 ff2c 	bl	8010628 <__aeabi_dmul>
 802a7d0:	4602      	mov	r2, r0
 802a7d2:	460b      	mov	r3, r1
 802a7d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a7d8:	f7e6 f9d6 	bl	8010b88 <__aeabi_d2iz>
 802a7dc:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a7de:	f7e5 feb9 	bl	8010554 <__aeabi_i2d>
 802a7e2:	4602      	mov	r2, r0
 802a7e4:	460b      	mov	r3, r1
 802a7e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a7ea:	f7e5 fd65 	bl	80102b8 <__aeabi_dsub>
 802a7ee:	4602      	mov	r2, r0
 802a7f0:	460b      	mov	r3, r1
 802a7f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a7f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a7f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a7fa:	5c9b      	ldrb	r3, [r3, r2]
 802a7fc:	f806 3b01 	strb.w	r3, [r6], #1
 802a800:	1c7a      	adds	r2, r7, #1
 802a802:	d006      	beq.n	802a812 <_vfprintf_r+0x5ba>
 802a804:	1e7b      	subs	r3, r7, #1
 802a806:	931d      	str	r3, [sp, #116]	@ 0x74
 802a808:	2200      	movs	r2, #0
 802a80a:	2300      	movs	r3, #0
 802a80c:	f7e6 f974 	bl	8010af8 <__aeabi_dcmpeq>
 802a810:	b370      	cbz	r0, 802a870 <_vfprintf_r+0x618>
 802a812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a816:	4b1f      	ldr	r3, [pc, #124]	@ (802a894 <_vfprintf_r+0x63c>)
 802a818:	2200      	movs	r2, #0
 802a81a:	f7e6 f995 	bl	8010b48 <__aeabi_dcmpgt>
 802a81e:	2800      	cmp	r0, #0
 802a820:	d13a      	bne.n	802a898 <_vfprintf_r+0x640>
 802a822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a826:	4b1b      	ldr	r3, [pc, #108]	@ (802a894 <_vfprintf_r+0x63c>)
 802a828:	2200      	movs	r2, #0
 802a82a:	f7e6 f965 	bl	8010af8 <__aeabi_dcmpeq>
 802a82e:	b110      	cbz	r0, 802a836 <_vfprintf_r+0x5de>
 802a830:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a832:	07db      	lsls	r3, r3, #31
 802a834:	d430      	bmi.n	802a898 <_vfprintf_r+0x640>
 802a836:	4633      	mov	r3, r6
 802a838:	19f1      	adds	r1, r6, r7
 802a83a:	2030      	movs	r0, #48	@ 0x30
 802a83c:	1aca      	subs	r2, r1, r3
 802a83e:	2a00      	cmp	r2, #0
 802a840:	f280 8183 	bge.w	802ab4a <_vfprintf_r+0x8f2>
 802a844:	1c7b      	adds	r3, r7, #1
 802a846:	3701      	adds	r7, #1
 802a848:	bfb8      	it	lt
 802a84a:	2300      	movlt	r3, #0
 802a84c:	441e      	add	r6, r3
 802a84e:	e037      	b.n	802a8c0 <_vfprintf_r+0x668>
 802a850:	f04f 0a00 	mov.w	sl, #0
 802a854:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a858:	e77e      	b.n	802a758 <_vfprintf_r+0x500>
 802a85a:	4682      	mov	sl, r0
 802a85c:	e77c      	b.n	802a758 <_vfprintf_r+0x500>
 802a85e:	f04f 0906 	mov.w	r9, #6
 802a862:	e779      	b.n	802a758 <_vfprintf_r+0x500>
 802a864:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a868:	2300      	movs	r3, #0
 802a86a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a86e:	e780      	b.n	802a772 <_vfprintf_r+0x51a>
 802a870:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a872:	e7a7      	b.n	802a7c4 <_vfprintf_r+0x56c>
 802a874:	7fefffff 	.word	0x7fefffff
 802a878:	0803c03b 	.word	0x0803c03b
 802a87c:	0803c03f 	.word	0x0803c03f
 802a880:	0803c043 	.word	0x0803c043
 802a884:	0803c047 	.word	0x0803c047
 802a888:	0803c04b 	.word	0x0803c04b
 802a88c:	0803c05c 	.word	0x0803c05c
 802a890:	40300000 	.word	0x40300000
 802a894:	3fe00000 	.word	0x3fe00000
 802a898:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a89a:	9624      	str	r6, [sp, #144]	@ 0x90
 802a89c:	7bd9      	ldrb	r1, [r3, #15]
 802a89e:	2030      	movs	r0, #48	@ 0x30
 802a8a0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a8a2:	1e53      	subs	r3, r2, #1
 802a8a4:	9324      	str	r3, [sp, #144]	@ 0x90
 802a8a6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a8aa:	428b      	cmp	r3, r1
 802a8ac:	f000 814a 	beq.w	802ab44 <_vfprintf_r+0x8ec>
 802a8b0:	2b39      	cmp	r3, #57	@ 0x39
 802a8b2:	bf0b      	itete	eq
 802a8b4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a8b6:	3301      	addne	r3, #1
 802a8b8:	7a9b      	ldrbeq	r3, [r3, #10]
 802a8ba:	b2db      	uxtbne	r3, r3
 802a8bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a8c0:	eba6 0308 	sub.w	r3, r6, r8
 802a8c4:	9304      	str	r3, [sp, #16]
 802a8c6:	9b08      	ldr	r3, [sp, #32]
 802a8c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a8ca:	2b47      	cmp	r3, #71	@ 0x47
 802a8cc:	f040 8189 	bne.w	802abe2 <_vfprintf_r+0x98a>
 802a8d0:	1cf1      	adds	r1, r6, #3
 802a8d2:	db02      	blt.n	802a8da <_vfprintf_r+0x682>
 802a8d4:	45b1      	cmp	r9, r6
 802a8d6:	f280 81a7 	bge.w	802ac28 <_vfprintf_r+0x9d0>
 802a8da:	9b06      	ldr	r3, [sp, #24]
 802a8dc:	3b02      	subs	r3, #2
 802a8de:	9306      	str	r3, [sp, #24]
 802a8e0:	9906      	ldr	r1, [sp, #24]
 802a8e2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a8e6:	f021 0120 	bic.w	r1, r1, #32
 802a8ea:	2941      	cmp	r1, #65	@ 0x41
 802a8ec:	bf08      	it	eq
 802a8ee:	320f      	addeq	r2, #15
 802a8f0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a8f4:	bf06      	itte	eq
 802a8f6:	b2d2      	uxtbeq	r2, r2
 802a8f8:	2101      	moveq	r1, #1
 802a8fa:	2100      	movne	r1, #0
 802a8fc:	2b00      	cmp	r3, #0
 802a8fe:	9320      	str	r3, [sp, #128]	@ 0x80
 802a900:	bfb8      	it	lt
 802a902:	f1c6 0301 	rsblt	r3, r6, #1
 802a906:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a90a:	bfb4      	ite	lt
 802a90c:	222d      	movlt	r2, #45	@ 0x2d
 802a90e:	222b      	movge	r2, #43	@ 0x2b
 802a910:	2b09      	cmp	r3, #9
 802a912:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a916:	f340 817a 	ble.w	802ac0e <_vfprintf_r+0x9b6>
 802a91a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a91e:	270a      	movs	r7, #10
 802a920:	4602      	mov	r2, r0
 802a922:	fbb3 f6f7 	udiv	r6, r3, r7
 802a926:	fb07 3116 	mls	r1, r7, r6, r3
 802a92a:	3130      	adds	r1, #48	@ 0x30
 802a92c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a930:	4619      	mov	r1, r3
 802a932:	2963      	cmp	r1, #99	@ 0x63
 802a934:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a938:	4633      	mov	r3, r6
 802a93a:	dcf1      	bgt.n	802a920 <_vfprintf_r+0x6c8>
 802a93c:	3330      	adds	r3, #48	@ 0x30
 802a93e:	1e91      	subs	r1, r2, #2
 802a940:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a944:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a948:	460b      	mov	r3, r1
 802a94a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a94e:	4283      	cmp	r3, r0
 802a950:	f0c0 8158 	bcc.w	802ac04 <_vfprintf_r+0x9ac>
 802a954:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a958:	1a9b      	subs	r3, r3, r2
 802a95a:	4281      	cmp	r1, r0
 802a95c:	bf88      	it	hi
 802a95e:	2300      	movhi	r3, #0
 802a960:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a964:	441a      	add	r2, r3
 802a966:	ab22      	add	r3, sp, #136	@ 0x88
 802a968:	1ad3      	subs	r3, r2, r3
 802a96a:	9a04      	ldr	r2, [sp, #16]
 802a96c:	9318      	str	r3, [sp, #96]	@ 0x60
 802a96e:	2a01      	cmp	r2, #1
 802a970:	eb03 0902 	add.w	r9, r3, r2
 802a974:	dc01      	bgt.n	802a97a <_vfprintf_r+0x722>
 802a976:	07ea      	lsls	r2, r5, #31
 802a978:	d501      	bpl.n	802a97e <_vfprintf_r+0x726>
 802a97a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a97c:	4499      	add	r9, r3
 802a97e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a982:	2700      	movs	r7, #0
 802a984:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a988:	9311      	str	r3, [sp, #68]	@ 0x44
 802a98a:	9708      	str	r7, [sp, #32]
 802a98c:	463e      	mov	r6, r7
 802a98e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a990:	2b00      	cmp	r3, #0
 802a992:	f040 8191 	bne.w	802acb8 <_vfprintf_r+0xa60>
 802a996:	2300      	movs	r3, #0
 802a998:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a99a:	9310      	str	r3, [sp, #64]	@ 0x40
 802a99c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a99e:	454b      	cmp	r3, r9
 802a9a0:	bfb8      	it	lt
 802a9a2:	464b      	movlt	r3, r9
 802a9a4:	9311      	str	r3, [sp, #68]	@ 0x44
 802a9a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a9aa:	b113      	cbz	r3, 802a9b2 <_vfprintf_r+0x75a>
 802a9ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a9ae:	3301      	adds	r3, #1
 802a9b0:	9311      	str	r3, [sp, #68]	@ 0x44
 802a9b2:	f015 0302 	ands.w	r3, r5, #2
 802a9b6:	931c      	str	r3, [sp, #112]	@ 0x70
 802a9b8:	bf1e      	ittt	ne
 802a9ba:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a9bc:	3302      	addne	r3, #2
 802a9be:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a9c0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a9c4:	931d      	str	r3, [sp, #116]	@ 0x74
 802a9c6:	d122      	bne.n	802aa0e <_vfprintf_r+0x7b6>
 802a9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a9ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a9cc:	1a9b      	subs	r3, r3, r2
 802a9ce:	2b00      	cmp	r3, #0
 802a9d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a9d2:	dd1c      	ble.n	802aa0e <_vfprintf_r+0x7b6>
 802a9d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a9d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a9da:	2810      	cmp	r0, #16
 802a9dc:	489f      	ldr	r0, [pc, #636]	@ (802ac5c <_vfprintf_r+0xa04>)
 802a9de:	6020      	str	r0, [r4, #0]
 802a9e0:	f102 0201 	add.w	r2, r2, #1
 802a9e4:	f104 0108 	add.w	r1, r4, #8
 802a9e8:	f300 8297 	bgt.w	802af1a <_vfprintf_r+0xcc2>
 802a9ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a9ee:	6060      	str	r0, [r4, #4]
 802a9f0:	4403      	add	r3, r0
 802a9f2:	2a07      	cmp	r2, #7
 802a9f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a9f8:	f340 82a4 	ble.w	802af44 <_vfprintf_r+0xcec>
 802a9fc:	9803      	ldr	r0, [sp, #12]
 802a9fe:	aa26      	add	r2, sp, #152	@ 0x98
 802aa00:	4659      	mov	r1, fp
 802aa02:	f000 fe95 	bl	802b730 <__sprint_r>
 802aa06:	2800      	cmp	r0, #0
 802aa08:	f040 85ed 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802aa0c:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa0e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802aa12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aa14:	b16a      	cbz	r2, 802aa32 <_vfprintf_r+0x7da>
 802aa16:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802aa1a:	6022      	str	r2, [r4, #0]
 802aa1c:	2201      	movs	r2, #1
 802aa1e:	4413      	add	r3, r2
 802aa20:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aa22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aa24:	6062      	str	r2, [r4, #4]
 802aa26:	4413      	add	r3, r2
 802aa28:	2b07      	cmp	r3, #7
 802aa2a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aa2c:	f300 828c 	bgt.w	802af48 <_vfprintf_r+0xcf0>
 802aa30:	3408      	adds	r4, #8
 802aa32:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802aa34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aa36:	b162      	cbz	r2, 802aa52 <_vfprintf_r+0x7fa>
 802aa38:	aa1f      	add	r2, sp, #124	@ 0x7c
 802aa3a:	6022      	str	r2, [r4, #0]
 802aa3c:	2202      	movs	r2, #2
 802aa3e:	4413      	add	r3, r2
 802aa40:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aa42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aa44:	6062      	str	r2, [r4, #4]
 802aa46:	3301      	adds	r3, #1
 802aa48:	2b07      	cmp	r3, #7
 802aa4a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aa4c:	f300 8286 	bgt.w	802af5c <_vfprintf_r+0xd04>
 802aa50:	3408      	adds	r4, #8
 802aa52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802aa54:	2b80      	cmp	r3, #128	@ 0x80
 802aa56:	d122      	bne.n	802aa9e <_vfprintf_r+0x846>
 802aa58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802aa5a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802aa5c:	1a9b      	subs	r3, r3, r2
 802aa5e:	2b00      	cmp	r3, #0
 802aa60:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aa62:	dd1c      	ble.n	802aa9e <_vfprintf_r+0x846>
 802aa64:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802aa66:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802aa6a:	2810      	cmp	r0, #16
 802aa6c:	487c      	ldr	r0, [pc, #496]	@ (802ac60 <_vfprintf_r+0xa08>)
 802aa6e:	6020      	str	r0, [r4, #0]
 802aa70:	f102 0201 	add.w	r2, r2, #1
 802aa74:	f104 0108 	add.w	r1, r4, #8
 802aa78:	f300 827a 	bgt.w	802af70 <_vfprintf_r+0xd18>
 802aa7c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802aa7e:	6060      	str	r0, [r4, #4]
 802aa80:	4403      	add	r3, r0
 802aa82:	2a07      	cmp	r2, #7
 802aa84:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aa88:	f340 8287 	ble.w	802af9a <_vfprintf_r+0xd42>
 802aa8c:	9803      	ldr	r0, [sp, #12]
 802aa8e:	aa26      	add	r2, sp, #152	@ 0x98
 802aa90:	4659      	mov	r1, fp
 802aa92:	f000 fe4d 	bl	802b730 <__sprint_r>
 802aa96:	2800      	cmp	r0, #0
 802aa98:	f040 85a5 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802aa9c:	ac29      	add	r4, sp, #164	@ 0xa4
 802aa9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aaa0:	eba3 0309 	sub.w	r3, r3, r9
 802aaa4:	2b00      	cmp	r3, #0
 802aaa6:	9310      	str	r3, [sp, #64]	@ 0x40
 802aaa8:	dd1c      	ble.n	802aae4 <_vfprintf_r+0x88c>
 802aaaa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802aaac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802aab0:	2810      	cmp	r0, #16
 802aab2:	486b      	ldr	r0, [pc, #428]	@ (802ac60 <_vfprintf_r+0xa08>)
 802aab4:	6020      	str	r0, [r4, #0]
 802aab6:	f102 0201 	add.w	r2, r2, #1
 802aaba:	f104 0108 	add.w	r1, r4, #8
 802aabe:	f300 826e 	bgt.w	802af9e <_vfprintf_r+0xd46>
 802aac2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802aac4:	6060      	str	r0, [r4, #4]
 802aac6:	4403      	add	r3, r0
 802aac8:	2a07      	cmp	r2, #7
 802aaca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802aace:	f340 827b 	ble.w	802afc8 <_vfprintf_r+0xd70>
 802aad2:	9803      	ldr	r0, [sp, #12]
 802aad4:	aa26      	add	r2, sp, #152	@ 0x98
 802aad6:	4659      	mov	r1, fp
 802aad8:	f000 fe2a 	bl	802b730 <__sprint_r>
 802aadc:	2800      	cmp	r0, #0
 802aade:	f040 8582 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802aae2:	ac29      	add	r4, sp, #164	@ 0xa4
 802aae4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aae6:	9310      	str	r3, [sp, #64]	@ 0x40
 802aae8:	05e8      	lsls	r0, r5, #23
 802aaea:	f100 8273 	bmi.w	802afd4 <_vfprintf_r+0xd7c>
 802aaee:	444b      	add	r3, r9
 802aaf0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aaf2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aaf4:	3301      	adds	r3, #1
 802aaf6:	2b07      	cmp	r3, #7
 802aaf8:	e9c4 8900 	strd	r8, r9, [r4]
 802aafc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aafe:	f300 82af 	bgt.w	802b060 <_vfprintf_r+0xe08>
 802ab02:	3408      	adds	r4, #8
 802ab04:	0768      	lsls	r0, r5, #29
 802ab06:	f100 8550 	bmi.w	802b5aa <_vfprintf_r+0x1352>
 802ab0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802ab0e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802ab10:	428a      	cmp	r2, r1
 802ab12:	bfac      	ite	ge
 802ab14:	189b      	addge	r3, r3, r2
 802ab16:	185b      	addlt	r3, r3, r1
 802ab18:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ab1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab1c:	b13b      	cbz	r3, 802ab2e <_vfprintf_r+0x8d6>
 802ab1e:	9803      	ldr	r0, [sp, #12]
 802ab20:	aa26      	add	r2, sp, #152	@ 0x98
 802ab22:	4659      	mov	r1, fp
 802ab24:	f000 fe04 	bl	802b730 <__sprint_r>
 802ab28:	2800      	cmp	r0, #0
 802ab2a:	f040 855c 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802ab2e:	2300      	movs	r3, #0
 802ab30:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ab32:	f1ba 0f00 	cmp.w	sl, #0
 802ab36:	f040 8572 	bne.w	802b61e <_vfprintf_r+0x13c6>
 802ab3a:	9e07      	ldr	r6, [sp, #28]
 802ab3c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ab3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802ab42:	e407      	b.n	802a354 <_vfprintf_r+0xfc>
 802ab44:	f802 0c01 	strb.w	r0, [r2, #-1]
 802ab48:	e6aa      	b.n	802a8a0 <_vfprintf_r+0x648>
 802ab4a:	f803 0b01 	strb.w	r0, [r3], #1
 802ab4e:	e675      	b.n	802a83c <_vfprintf_r+0x5e4>
 802ab50:	9b08      	ldr	r3, [sp, #32]
 802ab52:	2b46      	cmp	r3, #70	@ 0x46
 802ab54:	d005      	beq.n	802ab62 <_vfprintf_r+0x90a>
 802ab56:	2b45      	cmp	r3, #69	@ 0x45
 802ab58:	d11a      	bne.n	802ab90 <_vfprintf_r+0x938>
 802ab5a:	f109 0601 	add.w	r6, r9, #1
 802ab5e:	2102      	movs	r1, #2
 802ab60:	e001      	b.n	802ab66 <_vfprintf_r+0x90e>
 802ab62:	464e      	mov	r6, r9
 802ab64:	2103      	movs	r1, #3
 802ab66:	ab24      	add	r3, sp, #144	@ 0x90
 802ab68:	9301      	str	r3, [sp, #4]
 802ab6a:	ab21      	add	r3, sp, #132	@ 0x84
 802ab6c:	9300      	str	r3, [sp, #0]
 802ab6e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802ab72:	ab20      	add	r3, sp, #128	@ 0x80
 802ab74:	9803      	ldr	r0, [sp, #12]
 802ab76:	4632      	mov	r2, r6
 802ab78:	f003 fbb6 	bl	802e2e8 <_dtoa_r>
 802ab7c:	9b08      	ldr	r3, [sp, #32]
 802ab7e:	2b47      	cmp	r3, #71	@ 0x47
 802ab80:	4680      	mov	r8, r0
 802ab82:	d119      	bne.n	802abb8 <_vfprintf_r+0x960>
 802ab84:	07e8      	lsls	r0, r5, #31
 802ab86:	d405      	bmi.n	802ab94 <_vfprintf_r+0x93c>
 802ab88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ab8a:	eba3 0308 	sub.w	r3, r3, r8
 802ab8e:	e699      	b.n	802a8c4 <_vfprintf_r+0x66c>
 802ab90:	464e      	mov	r6, r9
 802ab92:	e7e4      	b.n	802ab5e <_vfprintf_r+0x906>
 802ab94:	eb08 0706 	add.w	r7, r8, r6
 802ab98:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802ab9c:	2200      	movs	r2, #0
 802ab9e:	2300      	movs	r3, #0
 802aba0:	f7e5 ffaa 	bl	8010af8 <__aeabi_dcmpeq>
 802aba4:	b100      	cbz	r0, 802aba8 <_vfprintf_r+0x950>
 802aba6:	9724      	str	r7, [sp, #144]	@ 0x90
 802aba8:	2230      	movs	r2, #48	@ 0x30
 802abaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802abac:	429f      	cmp	r7, r3
 802abae:	d9eb      	bls.n	802ab88 <_vfprintf_r+0x930>
 802abb0:	1c59      	adds	r1, r3, #1
 802abb2:	9124      	str	r1, [sp, #144]	@ 0x90
 802abb4:	701a      	strb	r2, [r3, #0]
 802abb6:	e7f8      	b.n	802abaa <_vfprintf_r+0x952>
 802abb8:	9b08      	ldr	r3, [sp, #32]
 802abba:	2b46      	cmp	r3, #70	@ 0x46
 802abbc:	eb00 0706 	add.w	r7, r0, r6
 802abc0:	d1ea      	bne.n	802ab98 <_vfprintf_r+0x940>
 802abc2:	7803      	ldrb	r3, [r0, #0]
 802abc4:	2b30      	cmp	r3, #48	@ 0x30
 802abc6:	d109      	bne.n	802abdc <_vfprintf_r+0x984>
 802abc8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802abcc:	2200      	movs	r2, #0
 802abce:	2300      	movs	r3, #0
 802abd0:	f7e5 ff92 	bl	8010af8 <__aeabi_dcmpeq>
 802abd4:	b910      	cbnz	r0, 802abdc <_vfprintf_r+0x984>
 802abd6:	f1c6 0601 	rsb	r6, r6, #1
 802abda:	9620      	str	r6, [sp, #128]	@ 0x80
 802abdc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802abde:	441f      	add	r7, r3
 802abe0:	e7da      	b.n	802ab98 <_vfprintf_r+0x940>
 802abe2:	9b08      	ldr	r3, [sp, #32]
 802abe4:	2b46      	cmp	r3, #70	@ 0x46
 802abe6:	f47f ae7b 	bne.w	802a8e0 <_vfprintf_r+0x688>
 802abea:	f005 0301 	and.w	r3, r5, #1
 802abee:	2e00      	cmp	r6, #0
 802abf0:	ea43 0309 	orr.w	r3, r3, r9
 802abf4:	dd25      	ble.n	802ac42 <_vfprintf_r+0x9ea>
 802abf6:	b37b      	cbz	r3, 802ac58 <_vfprintf_r+0xa00>
 802abf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802abfa:	18f3      	adds	r3, r6, r3
 802abfc:	4499      	add	r9, r3
 802abfe:	2366      	movs	r3, #102	@ 0x66
 802ac00:	9306      	str	r3, [sp, #24]
 802ac02:	e033      	b.n	802ac6c <_vfprintf_r+0xa14>
 802ac04:	f813 7b01 	ldrb.w	r7, [r3], #1
 802ac08:	f806 7f01 	strb.w	r7, [r6, #1]!
 802ac0c:	e69f      	b.n	802a94e <_vfprintf_r+0x6f6>
 802ac0e:	b941      	cbnz	r1, 802ac22 <_vfprintf_r+0x9ca>
 802ac10:	2230      	movs	r2, #48	@ 0x30
 802ac12:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802ac16:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802ac1a:	3330      	adds	r3, #48	@ 0x30
 802ac1c:	f802 3b01 	strb.w	r3, [r2], #1
 802ac20:	e6a1      	b.n	802a966 <_vfprintf_r+0x70e>
 802ac22:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802ac26:	e7f8      	b.n	802ac1a <_vfprintf_r+0x9c2>
 802ac28:	9b04      	ldr	r3, [sp, #16]
 802ac2a:	42b3      	cmp	r3, r6
 802ac2c:	dd0d      	ble.n	802ac4a <_vfprintf_r+0x9f2>
 802ac2e:	9b04      	ldr	r3, [sp, #16]
 802ac30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ac32:	2e00      	cmp	r6, #0
 802ac34:	eb03 0902 	add.w	r9, r3, r2
 802ac38:	dc0c      	bgt.n	802ac54 <_vfprintf_r+0x9fc>
 802ac3a:	f1c6 0301 	rsb	r3, r6, #1
 802ac3e:	4499      	add	r9, r3
 802ac40:	e008      	b.n	802ac54 <_vfprintf_r+0x9fc>
 802ac42:	b17b      	cbz	r3, 802ac64 <_vfprintf_r+0xa0c>
 802ac44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ac46:	3301      	adds	r3, #1
 802ac48:	e7d8      	b.n	802abfc <_vfprintf_r+0x9a4>
 802ac4a:	07eb      	lsls	r3, r5, #31
 802ac4c:	d521      	bpl.n	802ac92 <_vfprintf_r+0xa3a>
 802ac4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ac50:	eb06 0903 	add.w	r9, r6, r3
 802ac54:	2367      	movs	r3, #103	@ 0x67
 802ac56:	e7d3      	b.n	802ac00 <_vfprintf_r+0x9a8>
 802ac58:	46b1      	mov	r9, r6
 802ac5a:	e7d0      	b.n	802abfe <_vfprintf_r+0x9a6>
 802ac5c:	0803c07f 	.word	0x0803c07f
 802ac60:	0803c06f 	.word	0x0803c06f
 802ac64:	2366      	movs	r3, #102	@ 0x66
 802ac66:	9306      	str	r3, [sp, #24]
 802ac68:	f04f 0901 	mov.w	r9, #1
 802ac6c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802ac70:	9308      	str	r3, [sp, #32]
 802ac72:	d01f      	beq.n	802acb4 <_vfprintf_r+0xa5c>
 802ac74:	2700      	movs	r7, #0
 802ac76:	2e00      	cmp	r6, #0
 802ac78:	9708      	str	r7, [sp, #32]
 802ac7a:	f77f ae88 	ble.w	802a98e <_vfprintf_r+0x736>
 802ac7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac80:	781b      	ldrb	r3, [r3, #0]
 802ac82:	2bff      	cmp	r3, #255	@ 0xff
 802ac84:	d107      	bne.n	802ac96 <_vfprintf_r+0xa3e>
 802ac86:	9b08      	ldr	r3, [sp, #32]
 802ac88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802ac8a:	443b      	add	r3, r7
 802ac8c:	fb02 9903 	mla	r9, r2, r3, r9
 802ac90:	e67d      	b.n	802a98e <_vfprintf_r+0x736>
 802ac92:	46b1      	mov	r9, r6
 802ac94:	e7de      	b.n	802ac54 <_vfprintf_r+0x9fc>
 802ac96:	42b3      	cmp	r3, r6
 802ac98:	daf5      	bge.n	802ac86 <_vfprintf_r+0xa2e>
 802ac9a:	1af6      	subs	r6, r6, r3
 802ac9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac9e:	785b      	ldrb	r3, [r3, #1]
 802aca0:	b133      	cbz	r3, 802acb0 <_vfprintf_r+0xa58>
 802aca2:	9b08      	ldr	r3, [sp, #32]
 802aca4:	3301      	adds	r3, #1
 802aca6:	9308      	str	r3, [sp, #32]
 802aca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802acaa:	3301      	adds	r3, #1
 802acac:	9309      	str	r3, [sp, #36]	@ 0x24
 802acae:	e7e6      	b.n	802ac7e <_vfprintf_r+0xa26>
 802acb0:	3701      	adds	r7, #1
 802acb2:	e7e4      	b.n	802ac7e <_vfprintf_r+0xa26>
 802acb4:	9f08      	ldr	r7, [sp, #32]
 802acb6:	e66a      	b.n	802a98e <_vfprintf_r+0x736>
 802acb8:	232d      	movs	r3, #45	@ 0x2d
 802acba:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802acbe:	e66a      	b.n	802a996 <_vfprintf_r+0x73e>
 802acc0:	06af      	lsls	r7, r5, #26
 802acc2:	d507      	bpl.n	802acd4 <_vfprintf_r+0xa7c>
 802acc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802acc6:	6833      	ldr	r3, [r6, #0]
 802acc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802acca:	17d2      	asrs	r2, r2, #31
 802accc:	e9c3 1200 	strd	r1, r2, [r3]
 802acd0:	3604      	adds	r6, #4
 802acd2:	e734      	b.n	802ab3e <_vfprintf_r+0x8e6>
 802acd4:	06e8      	lsls	r0, r5, #27
 802acd6:	d503      	bpl.n	802ace0 <_vfprintf_r+0xa88>
 802acd8:	6833      	ldr	r3, [r6, #0]
 802acda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802acdc:	601a      	str	r2, [r3, #0]
 802acde:	e7f7      	b.n	802acd0 <_vfprintf_r+0xa78>
 802ace0:	0669      	lsls	r1, r5, #25
 802ace2:	d503      	bpl.n	802acec <_vfprintf_r+0xa94>
 802ace4:	6833      	ldr	r3, [r6, #0]
 802ace6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802ace8:	801a      	strh	r2, [r3, #0]
 802acea:	e7f1      	b.n	802acd0 <_vfprintf_r+0xa78>
 802acec:	05aa      	lsls	r2, r5, #22
 802acee:	d5f3      	bpl.n	802acd8 <_vfprintf_r+0xa80>
 802acf0:	6833      	ldr	r3, [r6, #0]
 802acf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802acf4:	701a      	strb	r2, [r3, #0]
 802acf6:	e7eb      	b.n	802acd0 <_vfprintf_r+0xa78>
 802acf8:	f045 0510 	orr.w	r5, r5, #16
 802acfc:	f015 0320 	ands.w	r3, r5, #32
 802ad00:	d020      	beq.n	802ad44 <_vfprintf_r+0xaec>
 802ad02:	3607      	adds	r6, #7
 802ad04:	f026 0307 	bic.w	r3, r6, #7
 802ad08:	461a      	mov	r2, r3
 802ad0a:	685f      	ldr	r7, [r3, #4]
 802ad0c:	f852 6b08 	ldr.w	r6, [r2], #8
 802ad10:	9207      	str	r2, [sp, #28]
 802ad12:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802ad16:	2300      	movs	r3, #0
 802ad18:	2200      	movs	r2, #0
 802ad1a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802ad1e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802ad22:	f000 8491 	beq.w	802b648 <_vfprintf_r+0x13f0>
 802ad26:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802ad2a:	9208      	str	r2, [sp, #32]
 802ad2c:	ea56 0207 	orrs.w	r2, r6, r7
 802ad30:	f040 848f 	bne.w	802b652 <_vfprintf_r+0x13fa>
 802ad34:	f1b9 0f00 	cmp.w	r9, #0
 802ad38:	f000 80db 	beq.w	802aef2 <_vfprintf_r+0xc9a>
 802ad3c:	2b01      	cmp	r3, #1
 802ad3e:	f040 848b 	bne.w	802b658 <_vfprintf_r+0x1400>
 802ad42:	e083      	b.n	802ae4c <_vfprintf_r+0xbf4>
 802ad44:	4632      	mov	r2, r6
 802ad46:	f015 0710 	ands.w	r7, r5, #16
 802ad4a:	f852 6b04 	ldr.w	r6, [r2], #4
 802ad4e:	9207      	str	r2, [sp, #28]
 802ad50:	d001      	beq.n	802ad56 <_vfprintf_r+0xafe>
 802ad52:	461f      	mov	r7, r3
 802ad54:	e7dd      	b.n	802ad12 <_vfprintf_r+0xaba>
 802ad56:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ad5a:	d001      	beq.n	802ad60 <_vfprintf_r+0xb08>
 802ad5c:	b2b6      	uxth	r6, r6
 802ad5e:	e7d8      	b.n	802ad12 <_vfprintf_r+0xaba>
 802ad60:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ad64:	d0d5      	beq.n	802ad12 <_vfprintf_r+0xaba>
 802ad66:	b2f6      	uxtb	r6, r6
 802ad68:	e7f3      	b.n	802ad52 <_vfprintf_r+0xafa>
 802ad6a:	4633      	mov	r3, r6
 802ad6c:	2278      	movs	r2, #120	@ 0x78
 802ad6e:	f853 6b04 	ldr.w	r6, [r3], #4
 802ad72:	9307      	str	r3, [sp, #28]
 802ad74:	f647 0330 	movw	r3, #30768	@ 0x7830
 802ad78:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802ad7c:	4b93      	ldr	r3, [pc, #588]	@ (802afcc <_vfprintf_r+0xd74>)
 802ad7e:	9319      	str	r3, [sp, #100]	@ 0x64
 802ad80:	2700      	movs	r7, #0
 802ad82:	f045 0502 	orr.w	r5, r5, #2
 802ad86:	2302      	movs	r3, #2
 802ad88:	9206      	str	r2, [sp, #24]
 802ad8a:	e7c5      	b.n	802ad18 <_vfprintf_r+0xac0>
 802ad8c:	4633      	mov	r3, r6
 802ad8e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802ad92:	f853 8b04 	ldr.w	r8, [r3], #4
 802ad96:	9307      	str	r3, [sp, #28]
 802ad98:	f04f 0600 	mov.w	r6, #0
 802ad9c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802ada0:	d00f      	beq.n	802adc2 <_vfprintf_r+0xb6a>
 802ada2:	464a      	mov	r2, r9
 802ada4:	4631      	mov	r1, r6
 802ada6:	4640      	mov	r0, r8
 802ada8:	f7e5 fa2a 	bl	8010200 <memchr>
 802adac:	4682      	mov	sl, r0
 802adae:	2800      	cmp	r0, #0
 802adb0:	f43f ac7a 	beq.w	802a6a8 <_vfprintf_r+0x450>
 802adb4:	eba0 0908 	sub.w	r9, r0, r8
 802adb8:	46b2      	mov	sl, r6
 802adba:	9610      	str	r6, [sp, #64]	@ 0x40
 802adbc:	4637      	mov	r7, r6
 802adbe:	9608      	str	r6, [sp, #32]
 802adc0:	e5ec      	b.n	802a99c <_vfprintf_r+0x744>
 802adc2:	4640      	mov	r0, r8
 802adc4:	f7e5 fa6c 	bl	80102a0 <strlen>
 802adc8:	46b2      	mov	sl, r6
 802adca:	4681      	mov	r9, r0
 802adcc:	e46c      	b.n	802a6a8 <_vfprintf_r+0x450>
 802adce:	f045 0510 	orr.w	r5, r5, #16
 802add2:	f015 0320 	ands.w	r3, r5, #32
 802add6:	d009      	beq.n	802adec <_vfprintf_r+0xb94>
 802add8:	3607      	adds	r6, #7
 802adda:	f026 0307 	bic.w	r3, r6, #7
 802adde:	461a      	mov	r2, r3
 802ade0:	685f      	ldr	r7, [r3, #4]
 802ade2:	f852 6b08 	ldr.w	r6, [r2], #8
 802ade6:	9207      	str	r2, [sp, #28]
 802ade8:	2301      	movs	r3, #1
 802adea:	e795      	b.n	802ad18 <_vfprintf_r+0xac0>
 802adec:	4632      	mov	r2, r6
 802adee:	f015 0710 	ands.w	r7, r5, #16
 802adf2:	f852 6b04 	ldr.w	r6, [r2], #4
 802adf6:	9207      	str	r2, [sp, #28]
 802adf8:	d001      	beq.n	802adfe <_vfprintf_r+0xba6>
 802adfa:	461f      	mov	r7, r3
 802adfc:	e7f4      	b.n	802ade8 <_vfprintf_r+0xb90>
 802adfe:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ae02:	d001      	beq.n	802ae08 <_vfprintf_r+0xbb0>
 802ae04:	b2b6      	uxth	r6, r6
 802ae06:	e7ef      	b.n	802ade8 <_vfprintf_r+0xb90>
 802ae08:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ae0c:	d0ec      	beq.n	802ade8 <_vfprintf_r+0xb90>
 802ae0e:	b2f6      	uxtb	r6, r6
 802ae10:	e7f3      	b.n	802adfa <_vfprintf_r+0xba2>
 802ae12:	4b6f      	ldr	r3, [pc, #444]	@ (802afd0 <_vfprintf_r+0xd78>)
 802ae14:	f7ff bb33 	b.w	802a47e <_vfprintf_r+0x226>
 802ae18:	4632      	mov	r2, r6
 802ae1a:	f015 0710 	ands.w	r7, r5, #16
 802ae1e:	f852 6b04 	ldr.w	r6, [r2], #4
 802ae22:	9207      	str	r2, [sp, #28]
 802ae24:	d002      	beq.n	802ae2c <_vfprintf_r+0xbd4>
 802ae26:	461f      	mov	r7, r3
 802ae28:	f7ff bb36 	b.w	802a498 <_vfprintf_r+0x240>
 802ae2c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ae30:	d002      	beq.n	802ae38 <_vfprintf_r+0xbe0>
 802ae32:	b2b6      	uxth	r6, r6
 802ae34:	f7ff bb30 	b.w	802a498 <_vfprintf_r+0x240>
 802ae38:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ae3c:	f43f ab2c 	beq.w	802a498 <_vfprintf_r+0x240>
 802ae40:	b2f6      	uxtb	r6, r6
 802ae42:	e7f0      	b.n	802ae26 <_vfprintf_r+0xbce>
 802ae44:	2e0a      	cmp	r6, #10
 802ae46:	f177 0300 	sbcs.w	r3, r7, #0
 802ae4a:	d207      	bcs.n	802ae5c <_vfprintf_r+0xc04>
 802ae4c:	3630      	adds	r6, #48	@ 0x30
 802ae4e:	b2f6      	uxtb	r6, r6
 802ae50:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802ae54:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802ae58:	f000 bc1a 	b.w	802b690 <_vfprintf_r+0x1438>
 802ae5c:	2300      	movs	r3, #0
 802ae5e:	9304      	str	r3, [sp, #16]
 802ae60:	9b08      	ldr	r3, [sp, #32]
 802ae62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802ae66:	ad52      	add	r5, sp, #328	@ 0x148
 802ae68:	9310      	str	r3, [sp, #64]	@ 0x40
 802ae6a:	220a      	movs	r2, #10
 802ae6c:	2300      	movs	r3, #0
 802ae6e:	4630      	mov	r0, r6
 802ae70:	4639      	mov	r1, r7
 802ae72:	f7e5 ff71 	bl	8010d58 <__aeabi_uldivmod>
 802ae76:	9b04      	ldr	r3, [sp, #16]
 802ae78:	9011      	str	r0, [sp, #68]	@ 0x44
 802ae7a:	3301      	adds	r3, #1
 802ae7c:	9304      	str	r3, [sp, #16]
 802ae7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae80:	3230      	adds	r2, #48	@ 0x30
 802ae82:	468a      	mov	sl, r1
 802ae84:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802ae88:	f805 2c01 	strb.w	r2, [r5, #-1]
 802ae8c:	b1d3      	cbz	r3, 802aec4 <_vfprintf_r+0xc6c>
 802ae8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae90:	9a04      	ldr	r2, [sp, #16]
 802ae92:	781b      	ldrb	r3, [r3, #0]
 802ae94:	429a      	cmp	r2, r3
 802ae96:	d115      	bne.n	802aec4 <_vfprintf_r+0xc6c>
 802ae98:	2aff      	cmp	r2, #255	@ 0xff
 802ae9a:	d013      	beq.n	802aec4 <_vfprintf_r+0xc6c>
 802ae9c:	2e0a      	cmp	r6, #10
 802ae9e:	f177 0300 	sbcs.w	r3, r7, #0
 802aea2:	d30f      	bcc.n	802aec4 <_vfprintf_r+0xc6c>
 802aea4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802aea6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802aea8:	eba8 0803 	sub.w	r8, r8, r3
 802aeac:	461a      	mov	r2, r3
 802aeae:	4640      	mov	r0, r8
 802aeb0:	f001 ff25 	bl	802ccfe <strncpy>
 802aeb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aeb6:	785b      	ldrb	r3, [r3, #1]
 802aeb8:	b11b      	cbz	r3, 802aec2 <_vfprintf_r+0xc6a>
 802aeba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aebc:	3301      	adds	r3, #1
 802aebe:	9309      	str	r3, [sp, #36]	@ 0x24
 802aec0:	2300      	movs	r3, #0
 802aec2:	9304      	str	r3, [sp, #16]
 802aec4:	2e0a      	cmp	r6, #10
 802aec6:	f177 0700 	sbcs.w	r7, r7, #0
 802aeca:	f0c0 83e1 	bcc.w	802b690 <_vfprintf_r+0x1438>
 802aece:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802aed0:	4657      	mov	r7, sl
 802aed2:	4645      	mov	r5, r8
 802aed4:	e7c9      	b.n	802ae6a <_vfprintf_r+0xc12>
 802aed6:	f006 030f 	and.w	r3, r6, #15
 802aeda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802aedc:	0936      	lsrs	r6, r6, #4
 802aede:	5cd3      	ldrb	r3, [r2, r3]
 802aee0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802aee4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802aee8:	093f      	lsrs	r7, r7, #4
 802aeea:	ea56 0307 	orrs.w	r3, r6, r7
 802aeee:	d1f2      	bne.n	802aed6 <_vfprintf_r+0xc7e>
 802aef0:	e3ce      	b.n	802b690 <_vfprintf_r+0x1438>
 802aef2:	b91b      	cbnz	r3, 802aefc <_vfprintf_r+0xca4>
 802aef4:	07ed      	lsls	r5, r5, #31
 802aef6:	d501      	bpl.n	802aefc <_vfprintf_r+0xca4>
 802aef8:	2630      	movs	r6, #48	@ 0x30
 802aefa:	e7a9      	b.n	802ae50 <_vfprintf_r+0xbf8>
 802aefc:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802af00:	e3c6      	b.n	802b690 <_vfprintf_r+0x1438>
 802af02:	9b06      	ldr	r3, [sp, #24]
 802af04:	2b00      	cmp	r3, #0
 802af06:	f000 8390 	beq.w	802b62a <_vfprintf_r+0x13d2>
 802af0a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802af0e:	2300      	movs	r3, #0
 802af10:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802af14:	9607      	str	r6, [sp, #28]
 802af16:	f7ff bb5c 	b.w	802a5d2 <_vfprintf_r+0x37a>
 802af1a:	2010      	movs	r0, #16
 802af1c:	4403      	add	r3, r0
 802af1e:	2a07      	cmp	r2, #7
 802af20:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af24:	6060      	str	r0, [r4, #4]
 802af26:	dd08      	ble.n	802af3a <_vfprintf_r+0xce2>
 802af28:	9803      	ldr	r0, [sp, #12]
 802af2a:	aa26      	add	r2, sp, #152	@ 0x98
 802af2c:	4659      	mov	r1, fp
 802af2e:	f000 fbff 	bl	802b730 <__sprint_r>
 802af32:	2800      	cmp	r0, #0
 802af34:	f040 8357 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802af38:	a929      	add	r1, sp, #164	@ 0xa4
 802af3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802af3c:	3b10      	subs	r3, #16
 802af3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 802af40:	460c      	mov	r4, r1
 802af42:	e547      	b.n	802a9d4 <_vfprintf_r+0x77c>
 802af44:	460c      	mov	r4, r1
 802af46:	e562      	b.n	802aa0e <_vfprintf_r+0x7b6>
 802af48:	9803      	ldr	r0, [sp, #12]
 802af4a:	aa26      	add	r2, sp, #152	@ 0x98
 802af4c:	4659      	mov	r1, fp
 802af4e:	f000 fbef 	bl	802b730 <__sprint_r>
 802af52:	2800      	cmp	r0, #0
 802af54:	f040 8347 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802af58:	ac29      	add	r4, sp, #164	@ 0xa4
 802af5a:	e56a      	b.n	802aa32 <_vfprintf_r+0x7da>
 802af5c:	9803      	ldr	r0, [sp, #12]
 802af5e:	aa26      	add	r2, sp, #152	@ 0x98
 802af60:	4659      	mov	r1, fp
 802af62:	f000 fbe5 	bl	802b730 <__sprint_r>
 802af66:	2800      	cmp	r0, #0
 802af68:	f040 833d 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802af6c:	ac29      	add	r4, sp, #164	@ 0xa4
 802af6e:	e570      	b.n	802aa52 <_vfprintf_r+0x7fa>
 802af70:	2010      	movs	r0, #16
 802af72:	4403      	add	r3, r0
 802af74:	2a07      	cmp	r2, #7
 802af76:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af7a:	6060      	str	r0, [r4, #4]
 802af7c:	dd08      	ble.n	802af90 <_vfprintf_r+0xd38>
 802af7e:	9803      	ldr	r0, [sp, #12]
 802af80:	aa26      	add	r2, sp, #152	@ 0x98
 802af82:	4659      	mov	r1, fp
 802af84:	f000 fbd4 	bl	802b730 <__sprint_r>
 802af88:	2800      	cmp	r0, #0
 802af8a:	f040 832c 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802af8e:	a929      	add	r1, sp, #164	@ 0xa4
 802af90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802af92:	3b10      	subs	r3, #16
 802af94:	9313      	str	r3, [sp, #76]	@ 0x4c
 802af96:	460c      	mov	r4, r1
 802af98:	e564      	b.n	802aa64 <_vfprintf_r+0x80c>
 802af9a:	460c      	mov	r4, r1
 802af9c:	e57f      	b.n	802aa9e <_vfprintf_r+0x846>
 802af9e:	2010      	movs	r0, #16
 802afa0:	4403      	add	r3, r0
 802afa2:	2a07      	cmp	r2, #7
 802afa4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802afa8:	6060      	str	r0, [r4, #4]
 802afaa:	dd08      	ble.n	802afbe <_vfprintf_r+0xd66>
 802afac:	9803      	ldr	r0, [sp, #12]
 802afae:	aa26      	add	r2, sp, #152	@ 0x98
 802afb0:	4659      	mov	r1, fp
 802afb2:	f000 fbbd 	bl	802b730 <__sprint_r>
 802afb6:	2800      	cmp	r0, #0
 802afb8:	f040 8315 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802afbc:	a929      	add	r1, sp, #164	@ 0xa4
 802afbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802afc0:	3b10      	subs	r3, #16
 802afc2:	9310      	str	r3, [sp, #64]	@ 0x40
 802afc4:	460c      	mov	r4, r1
 802afc6:	e570      	b.n	802aaaa <_vfprintf_r+0x852>
 802afc8:	460c      	mov	r4, r1
 802afca:	e58b      	b.n	802aae4 <_vfprintf_r+0x88c>
 802afcc:	0803c04b 	.word	0x0803c04b
 802afd0:	0803c05c 	.word	0x0803c05c
 802afd4:	9b06      	ldr	r3, [sp, #24]
 802afd6:	2b65      	cmp	r3, #101	@ 0x65
 802afd8:	f340 8245 	ble.w	802b466 <_vfprintf_r+0x120e>
 802afdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802afe0:	2200      	movs	r2, #0
 802afe2:	2300      	movs	r3, #0
 802afe4:	f7e5 fd88 	bl	8010af8 <__aeabi_dcmpeq>
 802afe8:	2800      	cmp	r0, #0
 802afea:	d06a      	beq.n	802b0c2 <_vfprintf_r+0xe6a>
 802afec:	4b73      	ldr	r3, [pc, #460]	@ (802b1bc <_vfprintf_r+0xf64>)
 802afee:	6023      	str	r3, [r4, #0]
 802aff0:	2301      	movs	r3, #1
 802aff2:	6063      	str	r3, [r4, #4]
 802aff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aff6:	3301      	adds	r3, #1
 802aff8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802affa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802affc:	3301      	adds	r3, #1
 802affe:	2b07      	cmp	r3, #7
 802b000:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b002:	dc37      	bgt.n	802b074 <_vfprintf_r+0xe1c>
 802b004:	3408      	adds	r4, #8
 802b006:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b008:	9a04      	ldr	r2, [sp, #16]
 802b00a:	4293      	cmp	r3, r2
 802b00c:	db02      	blt.n	802b014 <_vfprintf_r+0xdbc>
 802b00e:	07e9      	lsls	r1, r5, #31
 802b010:	f57f ad78 	bpl.w	802ab04 <_vfprintf_r+0x8ac>
 802b014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b016:	6023      	str	r3, [r4, #0]
 802b018:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b01a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b01c:	6063      	str	r3, [r4, #4]
 802b01e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b020:	4413      	add	r3, r2
 802b022:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b024:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b026:	3301      	adds	r3, #1
 802b028:	2b07      	cmp	r3, #7
 802b02a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b02c:	dc2c      	bgt.n	802b088 <_vfprintf_r+0xe30>
 802b02e:	3408      	adds	r4, #8
 802b030:	9b04      	ldr	r3, [sp, #16]
 802b032:	1e5e      	subs	r6, r3, #1
 802b034:	2e00      	cmp	r6, #0
 802b036:	f77f ad65 	ble.w	802ab04 <_vfprintf_r+0x8ac>
 802b03a:	4f61      	ldr	r7, [pc, #388]	@ (802b1c0 <_vfprintf_r+0xf68>)
 802b03c:	f04f 0810 	mov.w	r8, #16
 802b040:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b044:	2e10      	cmp	r6, #16
 802b046:	f103 0301 	add.w	r3, r3, #1
 802b04a:	f104 0108 	add.w	r1, r4, #8
 802b04e:	6027      	str	r7, [r4, #0]
 802b050:	dc24      	bgt.n	802b09c <_vfprintf_r+0xe44>
 802b052:	6066      	str	r6, [r4, #4]
 802b054:	2b07      	cmp	r3, #7
 802b056:	4416      	add	r6, r2
 802b058:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b05c:	f340 82a2 	ble.w	802b5a4 <_vfprintf_r+0x134c>
 802b060:	9803      	ldr	r0, [sp, #12]
 802b062:	aa26      	add	r2, sp, #152	@ 0x98
 802b064:	4659      	mov	r1, fp
 802b066:	f000 fb63 	bl	802b730 <__sprint_r>
 802b06a:	2800      	cmp	r0, #0
 802b06c:	f040 82bb 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b070:	ac29      	add	r4, sp, #164	@ 0xa4
 802b072:	e547      	b.n	802ab04 <_vfprintf_r+0x8ac>
 802b074:	9803      	ldr	r0, [sp, #12]
 802b076:	aa26      	add	r2, sp, #152	@ 0x98
 802b078:	4659      	mov	r1, fp
 802b07a:	f000 fb59 	bl	802b730 <__sprint_r>
 802b07e:	2800      	cmp	r0, #0
 802b080:	f040 82b1 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b084:	ac29      	add	r4, sp, #164	@ 0xa4
 802b086:	e7be      	b.n	802b006 <_vfprintf_r+0xdae>
 802b088:	9803      	ldr	r0, [sp, #12]
 802b08a:	aa26      	add	r2, sp, #152	@ 0x98
 802b08c:	4659      	mov	r1, fp
 802b08e:	f000 fb4f 	bl	802b730 <__sprint_r>
 802b092:	2800      	cmp	r0, #0
 802b094:	f040 82a7 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b098:	ac29      	add	r4, sp, #164	@ 0xa4
 802b09a:	e7c9      	b.n	802b030 <_vfprintf_r+0xdd8>
 802b09c:	3210      	adds	r2, #16
 802b09e:	2b07      	cmp	r3, #7
 802b0a0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b0a4:	f8c4 8004 	str.w	r8, [r4, #4]
 802b0a8:	dd08      	ble.n	802b0bc <_vfprintf_r+0xe64>
 802b0aa:	9803      	ldr	r0, [sp, #12]
 802b0ac:	aa26      	add	r2, sp, #152	@ 0x98
 802b0ae:	4659      	mov	r1, fp
 802b0b0:	f000 fb3e 	bl	802b730 <__sprint_r>
 802b0b4:	2800      	cmp	r0, #0
 802b0b6:	f040 8296 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b0ba:	a929      	add	r1, sp, #164	@ 0xa4
 802b0bc:	3e10      	subs	r6, #16
 802b0be:	460c      	mov	r4, r1
 802b0c0:	e7be      	b.n	802b040 <_vfprintf_r+0xde8>
 802b0c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b0c4:	2b00      	cmp	r3, #0
 802b0c6:	dc7d      	bgt.n	802b1c4 <_vfprintf_r+0xf6c>
 802b0c8:	4b3c      	ldr	r3, [pc, #240]	@ (802b1bc <_vfprintf_r+0xf64>)
 802b0ca:	6023      	str	r3, [r4, #0]
 802b0cc:	2301      	movs	r3, #1
 802b0ce:	6063      	str	r3, [r4, #4]
 802b0d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b0d2:	3301      	adds	r3, #1
 802b0d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0d8:	3301      	adds	r3, #1
 802b0da:	2b07      	cmp	r3, #7
 802b0dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0de:	dc46      	bgt.n	802b16e <_vfprintf_r+0xf16>
 802b0e0:	3408      	adds	r4, #8
 802b0e2:	9904      	ldr	r1, [sp, #16]
 802b0e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b0e6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b0e8:	430b      	orrs	r3, r1
 802b0ea:	f005 0101 	and.w	r1, r5, #1
 802b0ee:	430b      	orrs	r3, r1
 802b0f0:	f43f ad08 	beq.w	802ab04 <_vfprintf_r+0x8ac>
 802b0f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b0f6:	6023      	str	r3, [r4, #0]
 802b0f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b0fa:	6063      	str	r3, [r4, #4]
 802b0fc:	441a      	add	r2, r3
 802b0fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b100:	9228      	str	r2, [sp, #160]	@ 0xa0
 802b102:	3301      	adds	r3, #1
 802b104:	2b07      	cmp	r3, #7
 802b106:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b108:	dc3b      	bgt.n	802b182 <_vfprintf_r+0xf2a>
 802b10a:	f104 0308 	add.w	r3, r4, #8
 802b10e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b110:	2e00      	cmp	r6, #0
 802b112:	da1b      	bge.n	802b14c <_vfprintf_r+0xef4>
 802b114:	4f2a      	ldr	r7, [pc, #168]	@ (802b1c0 <_vfprintf_r+0xf68>)
 802b116:	4276      	negs	r6, r6
 802b118:	461a      	mov	r2, r3
 802b11a:	2410      	movs	r4, #16
 802b11c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802b120:	2e10      	cmp	r6, #16
 802b122:	f101 0101 	add.w	r1, r1, #1
 802b126:	f103 0308 	add.w	r3, r3, #8
 802b12a:	6017      	str	r7, [r2, #0]
 802b12c:	dc33      	bgt.n	802b196 <_vfprintf_r+0xf3e>
 802b12e:	6056      	str	r6, [r2, #4]
 802b130:	2907      	cmp	r1, #7
 802b132:	4406      	add	r6, r0
 802b134:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802b138:	dd08      	ble.n	802b14c <_vfprintf_r+0xef4>
 802b13a:	9803      	ldr	r0, [sp, #12]
 802b13c:	aa26      	add	r2, sp, #152	@ 0x98
 802b13e:	4659      	mov	r1, fp
 802b140:	f000 faf6 	bl	802b730 <__sprint_r>
 802b144:	2800      	cmp	r0, #0
 802b146:	f040 824e 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b14a:	ab29      	add	r3, sp, #164	@ 0xa4
 802b14c:	9a04      	ldr	r2, [sp, #16]
 802b14e:	9904      	ldr	r1, [sp, #16]
 802b150:	605a      	str	r2, [r3, #4]
 802b152:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802b154:	f8c3 8000 	str.w	r8, [r3]
 802b158:	440a      	add	r2, r1
 802b15a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802b15c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b15e:	3201      	adds	r2, #1
 802b160:	2a07      	cmp	r2, #7
 802b162:	9227      	str	r2, [sp, #156]	@ 0x9c
 802b164:	f73f af7c 	bgt.w	802b060 <_vfprintf_r+0xe08>
 802b168:	f103 0408 	add.w	r4, r3, #8
 802b16c:	e4ca      	b.n	802ab04 <_vfprintf_r+0x8ac>
 802b16e:	9803      	ldr	r0, [sp, #12]
 802b170:	aa26      	add	r2, sp, #152	@ 0x98
 802b172:	4659      	mov	r1, fp
 802b174:	f000 fadc 	bl	802b730 <__sprint_r>
 802b178:	2800      	cmp	r0, #0
 802b17a:	f040 8234 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b17e:	ac29      	add	r4, sp, #164	@ 0xa4
 802b180:	e7af      	b.n	802b0e2 <_vfprintf_r+0xe8a>
 802b182:	9803      	ldr	r0, [sp, #12]
 802b184:	aa26      	add	r2, sp, #152	@ 0x98
 802b186:	4659      	mov	r1, fp
 802b188:	f000 fad2 	bl	802b730 <__sprint_r>
 802b18c:	2800      	cmp	r0, #0
 802b18e:	f040 822a 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b192:	ab29      	add	r3, sp, #164	@ 0xa4
 802b194:	e7bb      	b.n	802b10e <_vfprintf_r+0xeb6>
 802b196:	3010      	adds	r0, #16
 802b198:	2907      	cmp	r1, #7
 802b19a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802b19e:	6054      	str	r4, [r2, #4]
 802b1a0:	dd08      	ble.n	802b1b4 <_vfprintf_r+0xf5c>
 802b1a2:	9803      	ldr	r0, [sp, #12]
 802b1a4:	aa26      	add	r2, sp, #152	@ 0x98
 802b1a6:	4659      	mov	r1, fp
 802b1a8:	f000 fac2 	bl	802b730 <__sprint_r>
 802b1ac:	2800      	cmp	r0, #0
 802b1ae:	f040 821a 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b1b2:	ab29      	add	r3, sp, #164	@ 0xa4
 802b1b4:	3e10      	subs	r6, #16
 802b1b6:	461a      	mov	r2, r3
 802b1b8:	e7b0      	b.n	802b11c <_vfprintf_r+0xec4>
 802b1ba:	bf00      	nop
 802b1bc:	0803c06d 	.word	0x0803c06d
 802b1c0:	0803c06f 	.word	0x0803c06f
 802b1c4:	9b04      	ldr	r3, [sp, #16]
 802b1c6:	4443      	add	r3, r8
 802b1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b1ca:	9b04      	ldr	r3, [sp, #16]
 802b1cc:	42b3      	cmp	r3, r6
 802b1ce:	bfa8      	it	ge
 802b1d0:	4633      	movge	r3, r6
 802b1d2:	2b00      	cmp	r3, #0
 802b1d4:	4699      	mov	r9, r3
 802b1d6:	dd0b      	ble.n	802b1f0 <_vfprintf_r+0xf98>
 802b1d8:	e9c4 8300 	strd	r8, r3, [r4]
 802b1dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b1de:	444b      	add	r3, r9
 802b1e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b1e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b1e4:	3301      	adds	r3, #1
 802b1e6:	2b07      	cmp	r3, #7
 802b1e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b1ea:	f300 8089 	bgt.w	802b300 <_vfprintf_r+0x10a8>
 802b1ee:	3408      	adds	r4, #8
 802b1f0:	f1b9 0f00 	cmp.w	r9, #0
 802b1f4:	bfac      	ite	ge
 802b1f6:	eba6 0309 	subge.w	r3, r6, r9
 802b1fa:	4633      	movlt	r3, r6
 802b1fc:	2b00      	cmp	r3, #0
 802b1fe:	9306      	str	r3, [sp, #24]
 802b200:	dd1c      	ble.n	802b23c <_vfprintf_r+0xfe4>
 802b202:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802b568 <_vfprintf_r+0x1310>
 802b206:	9806      	ldr	r0, [sp, #24]
 802b208:	f8c4 9000 	str.w	r9, [r4]
 802b20c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802b210:	2810      	cmp	r0, #16
 802b212:	f102 0201 	add.w	r2, r2, #1
 802b216:	f104 0108 	add.w	r1, r4, #8
 802b21a:	dc7b      	bgt.n	802b314 <_vfprintf_r+0x10bc>
 802b21c:	4403      	add	r3, r0
 802b21e:	2a07      	cmp	r2, #7
 802b220:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b224:	6060      	str	r0, [r4, #4]
 802b226:	f340 808a 	ble.w	802b33e <_vfprintf_r+0x10e6>
 802b22a:	9803      	ldr	r0, [sp, #12]
 802b22c:	aa26      	add	r2, sp, #152	@ 0x98
 802b22e:	4659      	mov	r1, fp
 802b230:	f000 fa7e 	bl	802b730 <__sprint_r>
 802b234:	2800      	cmp	r0, #0
 802b236:	f040 81d6 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b23a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b23c:	056a      	lsls	r2, r5, #21
 802b23e:	44b0      	add	r8, r6
 802b240:	d508      	bpl.n	802b254 <_vfprintf_r+0xffc>
 802b242:	9b08      	ldr	r3, [sp, #32]
 802b244:	2b00      	cmp	r3, #0
 802b246:	d17c      	bne.n	802b342 <_vfprintf_r+0x10ea>
 802b248:	2f00      	cmp	r7, #0
 802b24a:	d17c      	bne.n	802b346 <_vfprintf_r+0x10ee>
 802b24c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b24e:	4598      	cmp	r8, r3
 802b250:	bf28      	it	cs
 802b252:	4698      	movcs	r8, r3
 802b254:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b256:	9a04      	ldr	r2, [sp, #16]
 802b258:	4293      	cmp	r3, r2
 802b25a:	db01      	blt.n	802b260 <_vfprintf_r+0x1008>
 802b25c:	07eb      	lsls	r3, r5, #31
 802b25e:	d50e      	bpl.n	802b27e <_vfprintf_r+0x1026>
 802b260:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b262:	6023      	str	r3, [r4, #0]
 802b264:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b266:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b268:	6063      	str	r3, [r4, #4]
 802b26a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b26c:	4413      	add	r3, r2
 802b26e:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b270:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b272:	3301      	adds	r3, #1
 802b274:	2b07      	cmp	r3, #7
 802b276:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b278:	f300 80e1 	bgt.w	802b43e <_vfprintf_r+0x11e6>
 802b27c:	3408      	adds	r4, #8
 802b27e:	9b04      	ldr	r3, [sp, #16]
 802b280:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802b282:	1bdf      	subs	r7, r3, r7
 802b284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b286:	eba3 0308 	sub.w	r3, r3, r8
 802b28a:	429f      	cmp	r7, r3
 802b28c:	bfa8      	it	ge
 802b28e:	461f      	movge	r7, r3
 802b290:	2f00      	cmp	r7, #0
 802b292:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b294:	dd0a      	ble.n	802b2ac <_vfprintf_r+0x1054>
 802b296:	443b      	add	r3, r7
 802b298:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b29a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b29c:	3301      	adds	r3, #1
 802b29e:	2b07      	cmp	r3, #7
 802b2a0:	e9c4 8700 	strd	r8, r7, [r4]
 802b2a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b2a6:	f300 80d4 	bgt.w	802b452 <_vfprintf_r+0x11fa>
 802b2aa:	3408      	adds	r4, #8
 802b2ac:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b2ae:	9b04      	ldr	r3, [sp, #16]
 802b2b0:	2f00      	cmp	r7, #0
 802b2b2:	eba3 0606 	sub.w	r6, r3, r6
 802b2b6:	bfa8      	it	ge
 802b2b8:	1bf6      	subge	r6, r6, r7
 802b2ba:	2e00      	cmp	r6, #0
 802b2bc:	f77f ac22 	ble.w	802ab04 <_vfprintf_r+0x8ac>
 802b2c0:	4fa9      	ldr	r7, [pc, #676]	@ (802b568 <_vfprintf_r+0x1310>)
 802b2c2:	f04f 0810 	mov.w	r8, #16
 802b2c6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b2ca:	2e10      	cmp	r6, #16
 802b2cc:	f103 0301 	add.w	r3, r3, #1
 802b2d0:	f104 0108 	add.w	r1, r4, #8
 802b2d4:	6027      	str	r7, [r4, #0]
 802b2d6:	f77f aebc 	ble.w	802b052 <_vfprintf_r+0xdfa>
 802b2da:	3210      	adds	r2, #16
 802b2dc:	2b07      	cmp	r3, #7
 802b2de:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b2e2:	f8c4 8004 	str.w	r8, [r4, #4]
 802b2e6:	dd08      	ble.n	802b2fa <_vfprintf_r+0x10a2>
 802b2e8:	9803      	ldr	r0, [sp, #12]
 802b2ea:	aa26      	add	r2, sp, #152	@ 0x98
 802b2ec:	4659      	mov	r1, fp
 802b2ee:	f000 fa1f 	bl	802b730 <__sprint_r>
 802b2f2:	2800      	cmp	r0, #0
 802b2f4:	f040 8177 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b2f8:	a929      	add	r1, sp, #164	@ 0xa4
 802b2fa:	3e10      	subs	r6, #16
 802b2fc:	460c      	mov	r4, r1
 802b2fe:	e7e2      	b.n	802b2c6 <_vfprintf_r+0x106e>
 802b300:	9803      	ldr	r0, [sp, #12]
 802b302:	aa26      	add	r2, sp, #152	@ 0x98
 802b304:	4659      	mov	r1, fp
 802b306:	f000 fa13 	bl	802b730 <__sprint_r>
 802b30a:	2800      	cmp	r0, #0
 802b30c:	f040 816b 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b310:	ac29      	add	r4, sp, #164	@ 0xa4
 802b312:	e76d      	b.n	802b1f0 <_vfprintf_r+0xf98>
 802b314:	2010      	movs	r0, #16
 802b316:	4403      	add	r3, r0
 802b318:	2a07      	cmp	r2, #7
 802b31a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b31e:	6060      	str	r0, [r4, #4]
 802b320:	dd08      	ble.n	802b334 <_vfprintf_r+0x10dc>
 802b322:	9803      	ldr	r0, [sp, #12]
 802b324:	aa26      	add	r2, sp, #152	@ 0x98
 802b326:	4659      	mov	r1, fp
 802b328:	f000 fa02 	bl	802b730 <__sprint_r>
 802b32c:	2800      	cmp	r0, #0
 802b32e:	f040 815a 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b332:	a929      	add	r1, sp, #164	@ 0xa4
 802b334:	9b06      	ldr	r3, [sp, #24]
 802b336:	3b10      	subs	r3, #16
 802b338:	9306      	str	r3, [sp, #24]
 802b33a:	460c      	mov	r4, r1
 802b33c:	e763      	b.n	802b206 <_vfprintf_r+0xfae>
 802b33e:	460c      	mov	r4, r1
 802b340:	e77c      	b.n	802b23c <_vfprintf_r+0xfe4>
 802b342:	2f00      	cmp	r7, #0
 802b344:	d04b      	beq.n	802b3de <_vfprintf_r+0x1186>
 802b346:	3f01      	subs	r7, #1
 802b348:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b34a:	6023      	str	r3, [r4, #0]
 802b34c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b34e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b350:	6063      	str	r3, [r4, #4]
 802b352:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b354:	4413      	add	r3, r2
 802b356:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b358:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b35a:	3301      	adds	r3, #1
 802b35c:	2b07      	cmp	r3, #7
 802b35e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b360:	dc44      	bgt.n	802b3ec <_vfprintf_r+0x1194>
 802b362:	3408      	adds	r4, #8
 802b364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b366:	f893 9000 	ldrb.w	r9, [r3]
 802b36a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b36c:	eba3 0308 	sub.w	r3, r3, r8
 802b370:	4599      	cmp	r9, r3
 802b372:	bfa8      	it	ge
 802b374:	4699      	movge	r9, r3
 802b376:	f1b9 0f00 	cmp.w	r9, #0
 802b37a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b37c:	dd09      	ble.n	802b392 <_vfprintf_r+0x113a>
 802b37e:	444b      	add	r3, r9
 802b380:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b382:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b384:	3301      	adds	r3, #1
 802b386:	2b07      	cmp	r3, #7
 802b388:	e9c4 8900 	strd	r8, r9, [r4]
 802b38c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b38e:	dc37      	bgt.n	802b400 <_vfprintf_r+0x11a8>
 802b390:	3408      	adds	r4, #8
 802b392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b394:	781e      	ldrb	r6, [r3, #0]
 802b396:	f1b9 0f00 	cmp.w	r9, #0
 802b39a:	bfa8      	it	ge
 802b39c:	eba6 0609 	subge.w	r6, r6, r9
 802b3a0:	2e00      	cmp	r6, #0
 802b3a2:	dd18      	ble.n	802b3d6 <_vfprintf_r+0x117e>
 802b3a4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b3a8:	486f      	ldr	r0, [pc, #444]	@ (802b568 <_vfprintf_r+0x1310>)
 802b3aa:	6020      	str	r0, [r4, #0]
 802b3ac:	2e10      	cmp	r6, #16
 802b3ae:	f103 0301 	add.w	r3, r3, #1
 802b3b2:	f104 0108 	add.w	r1, r4, #8
 802b3b6:	dc2d      	bgt.n	802b414 <_vfprintf_r+0x11bc>
 802b3b8:	6066      	str	r6, [r4, #4]
 802b3ba:	2b07      	cmp	r3, #7
 802b3bc:	4416      	add	r6, r2
 802b3be:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b3c2:	dd3a      	ble.n	802b43a <_vfprintf_r+0x11e2>
 802b3c4:	9803      	ldr	r0, [sp, #12]
 802b3c6:	aa26      	add	r2, sp, #152	@ 0x98
 802b3c8:	4659      	mov	r1, fp
 802b3ca:	f000 f9b1 	bl	802b730 <__sprint_r>
 802b3ce:	2800      	cmp	r0, #0
 802b3d0:	f040 8109 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b3d4:	ac29      	add	r4, sp, #164	@ 0xa4
 802b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b3d8:	781b      	ldrb	r3, [r3, #0]
 802b3da:	4498      	add	r8, r3
 802b3dc:	e731      	b.n	802b242 <_vfprintf_r+0xfea>
 802b3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b3e0:	3b01      	subs	r3, #1
 802b3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b3e4:	9b08      	ldr	r3, [sp, #32]
 802b3e6:	3b01      	subs	r3, #1
 802b3e8:	9308      	str	r3, [sp, #32]
 802b3ea:	e7ad      	b.n	802b348 <_vfprintf_r+0x10f0>
 802b3ec:	9803      	ldr	r0, [sp, #12]
 802b3ee:	aa26      	add	r2, sp, #152	@ 0x98
 802b3f0:	4659      	mov	r1, fp
 802b3f2:	f000 f99d 	bl	802b730 <__sprint_r>
 802b3f6:	2800      	cmp	r0, #0
 802b3f8:	f040 80f5 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b3fc:	ac29      	add	r4, sp, #164	@ 0xa4
 802b3fe:	e7b1      	b.n	802b364 <_vfprintf_r+0x110c>
 802b400:	9803      	ldr	r0, [sp, #12]
 802b402:	aa26      	add	r2, sp, #152	@ 0x98
 802b404:	4659      	mov	r1, fp
 802b406:	f000 f993 	bl	802b730 <__sprint_r>
 802b40a:	2800      	cmp	r0, #0
 802b40c:	f040 80eb 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b410:	ac29      	add	r4, sp, #164	@ 0xa4
 802b412:	e7be      	b.n	802b392 <_vfprintf_r+0x113a>
 802b414:	2010      	movs	r0, #16
 802b416:	4402      	add	r2, r0
 802b418:	2b07      	cmp	r3, #7
 802b41a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b41e:	6060      	str	r0, [r4, #4]
 802b420:	dd08      	ble.n	802b434 <_vfprintf_r+0x11dc>
 802b422:	9803      	ldr	r0, [sp, #12]
 802b424:	aa26      	add	r2, sp, #152	@ 0x98
 802b426:	4659      	mov	r1, fp
 802b428:	f000 f982 	bl	802b730 <__sprint_r>
 802b42c:	2800      	cmp	r0, #0
 802b42e:	f040 80da 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b432:	a929      	add	r1, sp, #164	@ 0xa4
 802b434:	3e10      	subs	r6, #16
 802b436:	460c      	mov	r4, r1
 802b438:	e7b4      	b.n	802b3a4 <_vfprintf_r+0x114c>
 802b43a:	460c      	mov	r4, r1
 802b43c:	e7cb      	b.n	802b3d6 <_vfprintf_r+0x117e>
 802b43e:	9803      	ldr	r0, [sp, #12]
 802b440:	aa26      	add	r2, sp, #152	@ 0x98
 802b442:	4659      	mov	r1, fp
 802b444:	f000 f974 	bl	802b730 <__sprint_r>
 802b448:	2800      	cmp	r0, #0
 802b44a:	f040 80cc 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b44e:	ac29      	add	r4, sp, #164	@ 0xa4
 802b450:	e715      	b.n	802b27e <_vfprintf_r+0x1026>
 802b452:	9803      	ldr	r0, [sp, #12]
 802b454:	aa26      	add	r2, sp, #152	@ 0x98
 802b456:	4659      	mov	r1, fp
 802b458:	f000 f96a 	bl	802b730 <__sprint_r>
 802b45c:	2800      	cmp	r0, #0
 802b45e:	f040 80c2 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b462:	ac29      	add	r4, sp, #164	@ 0xa4
 802b464:	e722      	b.n	802b2ac <_vfprintf_r+0x1054>
 802b466:	9904      	ldr	r1, [sp, #16]
 802b468:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b46a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b46c:	2901      	cmp	r1, #1
 802b46e:	f103 0301 	add.w	r3, r3, #1
 802b472:	f102 0201 	add.w	r2, r2, #1
 802b476:	f104 0608 	add.w	r6, r4, #8
 802b47a:	dc02      	bgt.n	802b482 <_vfprintf_r+0x122a>
 802b47c:	07ef      	lsls	r7, r5, #31
 802b47e:	f140 8086 	bpl.w	802b58e <_vfprintf_r+0x1336>
 802b482:	2101      	movs	r1, #1
 802b484:	2a07      	cmp	r2, #7
 802b486:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b48a:	f8c4 8000 	str.w	r8, [r4]
 802b48e:	6061      	str	r1, [r4, #4]
 802b490:	dd08      	ble.n	802b4a4 <_vfprintf_r+0x124c>
 802b492:	9803      	ldr	r0, [sp, #12]
 802b494:	aa26      	add	r2, sp, #152	@ 0x98
 802b496:	4659      	mov	r1, fp
 802b498:	f000 f94a 	bl	802b730 <__sprint_r>
 802b49c:	2800      	cmp	r0, #0
 802b49e:	f040 80a2 	bne.w	802b5e6 <_vfprintf_r+0x138e>
 802b4a2:	ae29      	add	r6, sp, #164	@ 0xa4
 802b4a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b4a6:	6033      	str	r3, [r6, #0]
 802b4a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b4aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b4ac:	6073      	str	r3, [r6, #4]
 802b4ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b4b0:	4413      	add	r3, r2
 802b4b2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b4b4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b4b6:	3301      	adds	r3, #1
 802b4b8:	2b07      	cmp	r3, #7
 802b4ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b4bc:	dc33      	bgt.n	802b526 <_vfprintf_r+0x12ce>
 802b4be:	3608      	adds	r6, #8
 802b4c0:	9b04      	ldr	r3, [sp, #16]
 802b4c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b4c6:	1e5c      	subs	r4, r3, #1
 802b4c8:	2200      	movs	r2, #0
 802b4ca:	2300      	movs	r3, #0
 802b4cc:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802b4d0:	f7e5 fb12 	bl	8010af8 <__aeabi_dcmpeq>
 802b4d4:	2800      	cmp	r0, #0
 802b4d6:	d12f      	bne.n	802b538 <_vfprintf_r+0x12e0>
 802b4d8:	f108 0201 	add.w	r2, r8, #1
 802b4dc:	e9c6 2400 	strd	r2, r4, [r6]
 802b4e0:	9a04      	ldr	r2, [sp, #16]
 802b4e2:	f109 0301 	add.w	r3, r9, #1
 802b4e6:	3f01      	subs	r7, #1
 802b4e8:	4417      	add	r7, r2
 802b4ea:	2b07      	cmp	r3, #7
 802b4ec:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b4f0:	dd56      	ble.n	802b5a0 <_vfprintf_r+0x1348>
 802b4f2:	9803      	ldr	r0, [sp, #12]
 802b4f4:	aa26      	add	r2, sp, #152	@ 0x98
 802b4f6:	4659      	mov	r1, fp
 802b4f8:	f000 f91a 	bl	802b730 <__sprint_r>
 802b4fc:	2800      	cmp	r0, #0
 802b4fe:	d172      	bne.n	802b5e6 <_vfprintf_r+0x138e>
 802b500:	ae29      	add	r6, sp, #164	@ 0xa4
 802b502:	ab22      	add	r3, sp, #136	@ 0x88
 802b504:	6033      	str	r3, [r6, #0]
 802b506:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b508:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b50a:	6073      	str	r3, [r6, #4]
 802b50c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b50e:	4413      	add	r3, r2
 802b510:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b512:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b514:	3301      	adds	r3, #1
 802b516:	2b07      	cmp	r3, #7
 802b518:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b51a:	f73f ada1 	bgt.w	802b060 <_vfprintf_r+0xe08>
 802b51e:	f106 0408 	add.w	r4, r6, #8
 802b522:	f7ff baef 	b.w	802ab04 <_vfprintf_r+0x8ac>
 802b526:	9803      	ldr	r0, [sp, #12]
 802b528:	aa26      	add	r2, sp, #152	@ 0x98
 802b52a:	4659      	mov	r1, fp
 802b52c:	f000 f900 	bl	802b730 <__sprint_r>
 802b530:	2800      	cmp	r0, #0
 802b532:	d158      	bne.n	802b5e6 <_vfprintf_r+0x138e>
 802b534:	ae29      	add	r6, sp, #164	@ 0xa4
 802b536:	e7c3      	b.n	802b4c0 <_vfprintf_r+0x1268>
 802b538:	9b04      	ldr	r3, [sp, #16]
 802b53a:	2b01      	cmp	r3, #1
 802b53c:	dde1      	ble.n	802b502 <_vfprintf_r+0x12aa>
 802b53e:	4f0a      	ldr	r7, [pc, #40]	@ (802b568 <_vfprintf_r+0x1310>)
 802b540:	f04f 0810 	mov.w	r8, #16
 802b544:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b548:	2c10      	cmp	r4, #16
 802b54a:	f103 0301 	add.w	r3, r3, #1
 802b54e:	f106 0108 	add.w	r1, r6, #8
 802b552:	6037      	str	r7, [r6, #0]
 802b554:	dc0a      	bgt.n	802b56c <_vfprintf_r+0x1314>
 802b556:	6074      	str	r4, [r6, #4]
 802b558:	2b07      	cmp	r3, #7
 802b55a:	4414      	add	r4, r2
 802b55c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b560:	dcc7      	bgt.n	802b4f2 <_vfprintf_r+0x129a>
 802b562:	460e      	mov	r6, r1
 802b564:	e7cd      	b.n	802b502 <_vfprintf_r+0x12aa>
 802b566:	bf00      	nop
 802b568:	0803c06f 	.word	0x0803c06f
 802b56c:	3210      	adds	r2, #16
 802b56e:	2b07      	cmp	r3, #7
 802b570:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b574:	f8c6 8004 	str.w	r8, [r6, #4]
 802b578:	dd06      	ble.n	802b588 <_vfprintf_r+0x1330>
 802b57a:	9803      	ldr	r0, [sp, #12]
 802b57c:	aa26      	add	r2, sp, #152	@ 0x98
 802b57e:	4659      	mov	r1, fp
 802b580:	f000 f8d6 	bl	802b730 <__sprint_r>
 802b584:	bb78      	cbnz	r0, 802b5e6 <_vfprintf_r+0x138e>
 802b586:	a929      	add	r1, sp, #164	@ 0xa4
 802b588:	3c10      	subs	r4, #16
 802b58a:	460e      	mov	r6, r1
 802b58c:	e7da      	b.n	802b544 <_vfprintf_r+0x12ec>
 802b58e:	2101      	movs	r1, #1
 802b590:	2a07      	cmp	r2, #7
 802b592:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b596:	f8c4 8000 	str.w	r8, [r4]
 802b59a:	6061      	str	r1, [r4, #4]
 802b59c:	ddb1      	ble.n	802b502 <_vfprintf_r+0x12aa>
 802b59e:	e7a8      	b.n	802b4f2 <_vfprintf_r+0x129a>
 802b5a0:	3608      	adds	r6, #8
 802b5a2:	e7ae      	b.n	802b502 <_vfprintf_r+0x12aa>
 802b5a4:	460c      	mov	r4, r1
 802b5a6:	f7ff baad 	b.w	802ab04 <_vfprintf_r+0x8ac>
 802b5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b5ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b5ae:	1a9d      	subs	r5, r3, r2
 802b5b0:	2d00      	cmp	r5, #0
 802b5b2:	f77f aaaa 	ble.w	802ab0a <_vfprintf_r+0x8b2>
 802b5b6:	4e3d      	ldr	r6, [pc, #244]	@ (802b6ac <_vfprintf_r+0x1454>)
 802b5b8:	2710      	movs	r7, #16
 802b5ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b5be:	2d10      	cmp	r5, #16
 802b5c0:	f103 0301 	add.w	r3, r3, #1
 802b5c4:	6026      	str	r6, [r4, #0]
 802b5c6:	dc18      	bgt.n	802b5fa <_vfprintf_r+0x13a2>
 802b5c8:	6065      	str	r5, [r4, #4]
 802b5ca:	2b07      	cmp	r3, #7
 802b5cc:	4415      	add	r5, r2
 802b5ce:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802b5d2:	f77f aa9a 	ble.w	802ab0a <_vfprintf_r+0x8b2>
 802b5d6:	9803      	ldr	r0, [sp, #12]
 802b5d8:	aa26      	add	r2, sp, #152	@ 0x98
 802b5da:	4659      	mov	r1, fp
 802b5dc:	f000 f8a8 	bl	802b730 <__sprint_r>
 802b5e0:	2800      	cmp	r0, #0
 802b5e2:	f43f aa92 	beq.w	802ab0a <_vfprintf_r+0x8b2>
 802b5e6:	f1ba 0f00 	cmp.w	sl, #0
 802b5ea:	f43f a892 	beq.w	802a712 <_vfprintf_r+0x4ba>
 802b5ee:	9803      	ldr	r0, [sp, #12]
 802b5f0:	4651      	mov	r1, sl
 802b5f2:	f003 fc7b 	bl	802eeec <_free_r>
 802b5f6:	f7ff b88c 	b.w	802a712 <_vfprintf_r+0x4ba>
 802b5fa:	3210      	adds	r2, #16
 802b5fc:	2b07      	cmp	r3, #7
 802b5fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b602:	6067      	str	r7, [r4, #4]
 802b604:	dc02      	bgt.n	802b60c <_vfprintf_r+0x13b4>
 802b606:	3408      	adds	r4, #8
 802b608:	3d10      	subs	r5, #16
 802b60a:	e7d6      	b.n	802b5ba <_vfprintf_r+0x1362>
 802b60c:	9803      	ldr	r0, [sp, #12]
 802b60e:	aa26      	add	r2, sp, #152	@ 0x98
 802b610:	4659      	mov	r1, fp
 802b612:	f000 f88d 	bl	802b730 <__sprint_r>
 802b616:	2800      	cmp	r0, #0
 802b618:	d1e5      	bne.n	802b5e6 <_vfprintf_r+0x138e>
 802b61a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b61c:	e7f4      	b.n	802b608 <_vfprintf_r+0x13b0>
 802b61e:	9803      	ldr	r0, [sp, #12]
 802b620:	4651      	mov	r1, sl
 802b622:	f003 fc63 	bl	802eeec <_free_r>
 802b626:	f7ff ba88 	b.w	802ab3a <_vfprintf_r+0x8e2>
 802b62a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b62c:	b91b      	cbnz	r3, 802b636 <_vfprintf_r+0x13de>
 802b62e:	2300      	movs	r3, #0
 802b630:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b632:	f7ff b86e 	b.w	802a712 <_vfprintf_r+0x4ba>
 802b636:	9803      	ldr	r0, [sp, #12]
 802b638:	aa26      	add	r2, sp, #152	@ 0x98
 802b63a:	4659      	mov	r1, fp
 802b63c:	f000 f878 	bl	802b730 <__sprint_r>
 802b640:	2800      	cmp	r0, #0
 802b642:	d0f4      	beq.n	802b62e <_vfprintf_r+0x13d6>
 802b644:	f7ff b865 	b.w	802a712 <_vfprintf_r+0x4ba>
 802b648:	ea56 0207 	orrs.w	r2, r6, r7
 802b64c:	9508      	str	r5, [sp, #32]
 802b64e:	f43f ab75 	beq.w	802ad3c <_vfprintf_r+0xae4>
 802b652:	2b01      	cmp	r3, #1
 802b654:	f43f abf6 	beq.w	802ae44 <_vfprintf_r+0xbec>
 802b658:	2b02      	cmp	r3, #2
 802b65a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802b65e:	f43f ac3a 	beq.w	802aed6 <_vfprintf_r+0xc7e>
 802b662:	f006 0307 	and.w	r3, r6, #7
 802b666:	08f6      	lsrs	r6, r6, #3
 802b668:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b66c:	08ff      	lsrs	r7, r7, #3
 802b66e:	3330      	adds	r3, #48	@ 0x30
 802b670:	ea56 0107 	orrs.w	r1, r6, r7
 802b674:	4642      	mov	r2, r8
 802b676:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802b67a:	d1f2      	bne.n	802b662 <_vfprintf_r+0x140a>
 802b67c:	9908      	ldr	r1, [sp, #32]
 802b67e:	07ce      	lsls	r6, r1, #31
 802b680:	d506      	bpl.n	802b690 <_vfprintf_r+0x1438>
 802b682:	2b30      	cmp	r3, #48	@ 0x30
 802b684:	d004      	beq.n	802b690 <_vfprintf_r+0x1438>
 802b686:	2330      	movs	r3, #48	@ 0x30
 802b688:	f808 3c01 	strb.w	r3, [r8, #-1]
 802b68c:	f1a2 0802 	sub.w	r8, r2, #2
 802b690:	ab52      	add	r3, sp, #328	@ 0x148
 802b692:	9d08      	ldr	r5, [sp, #32]
 802b694:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802b698:	f04f 0a00 	mov.w	sl, #0
 802b69c:	eba3 0908 	sub.w	r9, r3, r8
 802b6a0:	4657      	mov	r7, sl
 802b6a2:	f8cd a020 	str.w	sl, [sp, #32]
 802b6a6:	4656      	mov	r6, sl
 802b6a8:	f7ff b978 	b.w	802a99c <_vfprintf_r+0x744>
 802b6ac:	0803c07f 	.word	0x0803c07f

0802b6b0 <__sbprintf>:
 802b6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b6b2:	461f      	mov	r7, r3
 802b6b4:	898b      	ldrh	r3, [r1, #12]
 802b6b6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802b6ba:	f023 0302 	bic.w	r3, r3, #2
 802b6be:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b6c2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b6c4:	9319      	str	r3, [sp, #100]	@ 0x64
 802b6c6:	89cb      	ldrh	r3, [r1, #14]
 802b6c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b6cc:	69cb      	ldr	r3, [r1, #28]
 802b6ce:	9307      	str	r3, [sp, #28]
 802b6d0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802b6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b6d4:	ab1a      	add	r3, sp, #104	@ 0x68
 802b6d6:	9300      	str	r3, [sp, #0]
 802b6d8:	9304      	str	r3, [sp, #16]
 802b6da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b6de:	4615      	mov	r5, r2
 802b6e0:	4606      	mov	r6, r0
 802b6e2:	9302      	str	r3, [sp, #8]
 802b6e4:	9305      	str	r3, [sp, #20]
 802b6e6:	a816      	add	r0, sp, #88	@ 0x58
 802b6e8:	2300      	movs	r3, #0
 802b6ea:	460c      	mov	r4, r1
 802b6ec:	9306      	str	r3, [sp, #24]
 802b6ee:	f002 fcf5 	bl	802e0dc <__retarget_lock_init_recursive>
 802b6f2:	462a      	mov	r2, r5
 802b6f4:	463b      	mov	r3, r7
 802b6f6:	4669      	mov	r1, sp
 802b6f8:	4630      	mov	r0, r6
 802b6fa:	f7fe fdad 	bl	802a258 <_vfprintf_r>
 802b6fe:	1e05      	subs	r5, r0, #0
 802b700:	db07      	blt.n	802b712 <__sbprintf+0x62>
 802b702:	4669      	mov	r1, sp
 802b704:	4630      	mov	r0, r6
 802b706:	f000 fecb 	bl	802c4a0 <_fflush_r>
 802b70a:	2800      	cmp	r0, #0
 802b70c:	bf18      	it	ne
 802b70e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b712:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802b716:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b718:	065b      	lsls	r3, r3, #25
 802b71a:	bf42      	ittt	mi
 802b71c:	89a3      	ldrhmi	r3, [r4, #12]
 802b71e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802b722:	81a3      	strhmi	r3, [r4, #12]
 802b724:	f002 fcdb 	bl	802e0de <__retarget_lock_close_recursive>
 802b728:	4628      	mov	r0, r5
 802b72a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b730 <__sprint_r>:
 802b730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b734:	6893      	ldr	r3, [r2, #8]
 802b736:	4680      	mov	r8, r0
 802b738:	460e      	mov	r6, r1
 802b73a:	4614      	mov	r4, r2
 802b73c:	b343      	cbz	r3, 802b790 <__sprint_r+0x60>
 802b73e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b740:	049d      	lsls	r5, r3, #18
 802b742:	d522      	bpl.n	802b78a <__sprint_r+0x5a>
 802b744:	6815      	ldr	r5, [r2, #0]
 802b746:	68a0      	ldr	r0, [r4, #8]
 802b748:	3508      	adds	r5, #8
 802b74a:	b928      	cbnz	r0, 802b758 <__sprint_r+0x28>
 802b74c:	2300      	movs	r3, #0
 802b74e:	60a3      	str	r3, [r4, #8]
 802b750:	2300      	movs	r3, #0
 802b752:	6063      	str	r3, [r4, #4]
 802b754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b758:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802b75c:	f04f 0900 	mov.w	r9, #0
 802b760:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802b764:	45ca      	cmp	sl, r9
 802b766:	dc05      	bgt.n	802b774 <__sprint_r+0x44>
 802b768:	68a3      	ldr	r3, [r4, #8]
 802b76a:	f027 0703 	bic.w	r7, r7, #3
 802b76e:	1bdb      	subs	r3, r3, r7
 802b770:	60a3      	str	r3, [r4, #8]
 802b772:	e7e8      	b.n	802b746 <__sprint_r+0x16>
 802b774:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802b778:	4632      	mov	r2, r6
 802b77a:	4640      	mov	r0, r8
 802b77c:	f001 fa35 	bl	802cbea <_fputwc_r>
 802b780:	1c43      	adds	r3, r0, #1
 802b782:	d0e3      	beq.n	802b74c <__sprint_r+0x1c>
 802b784:	f109 0901 	add.w	r9, r9, #1
 802b788:	e7ec      	b.n	802b764 <__sprint_r+0x34>
 802b78a:	f001 f81d 	bl	802c7c8 <__sfvwrite_r>
 802b78e:	e7dd      	b.n	802b74c <__sprint_r+0x1c>
 802b790:	4618      	mov	r0, r3
 802b792:	e7dd      	b.n	802b750 <__sprint_r+0x20>

0802b794 <_vfiprintf_r>:
 802b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b798:	b0bb      	sub	sp, #236	@ 0xec
 802b79a:	460f      	mov	r7, r1
 802b79c:	4693      	mov	fp, r2
 802b79e:	461c      	mov	r4, r3
 802b7a0:	461d      	mov	r5, r3
 802b7a2:	9000      	str	r0, [sp, #0]
 802b7a4:	b118      	cbz	r0, 802b7ae <_vfiprintf_r+0x1a>
 802b7a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b7a8:	b90b      	cbnz	r3, 802b7ae <_vfiprintf_r+0x1a>
 802b7aa:	f000 ffbb 	bl	802c724 <__sinit>
 802b7ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b7b0:	07db      	lsls	r3, r3, #31
 802b7b2:	d405      	bmi.n	802b7c0 <_vfiprintf_r+0x2c>
 802b7b4:	89bb      	ldrh	r3, [r7, #12]
 802b7b6:	059e      	lsls	r6, r3, #22
 802b7b8:	d402      	bmi.n	802b7c0 <_vfiprintf_r+0x2c>
 802b7ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b7bc:	f002 fc91 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 802b7c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b7c4:	0498      	lsls	r0, r3, #18
 802b7c6:	d406      	bmi.n	802b7d6 <_vfiprintf_r+0x42>
 802b7c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b7cc:	81bb      	strh	r3, [r7, #12]
 802b7ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b7d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b7d4:	667b      	str	r3, [r7, #100]	@ 0x64
 802b7d6:	89bb      	ldrh	r3, [r7, #12]
 802b7d8:	0719      	lsls	r1, r3, #28
 802b7da:	d501      	bpl.n	802b7e0 <_vfiprintf_r+0x4c>
 802b7dc:	693b      	ldr	r3, [r7, #16]
 802b7de:	b9ab      	cbnz	r3, 802b80c <_vfiprintf_r+0x78>
 802b7e0:	9800      	ldr	r0, [sp, #0]
 802b7e2:	4639      	mov	r1, r7
 802b7e4:	f001 f95a 	bl	802ca9c <__swsetup_r>
 802b7e8:	b180      	cbz	r0, 802b80c <_vfiprintf_r+0x78>
 802b7ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b7ec:	07da      	lsls	r2, r3, #31
 802b7ee:	d506      	bpl.n	802b7fe <_vfiprintf_r+0x6a>
 802b7f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b7f4:	9303      	str	r3, [sp, #12]
 802b7f6:	9803      	ldr	r0, [sp, #12]
 802b7f8:	b03b      	add	sp, #236	@ 0xec
 802b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7fe:	89bb      	ldrh	r3, [r7, #12]
 802b800:	059b      	lsls	r3, r3, #22
 802b802:	d4f5      	bmi.n	802b7f0 <_vfiprintf_r+0x5c>
 802b804:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b806:	f002 fc6e 	bl	802e0e6 <__retarget_lock_release_recursive>
 802b80a:	e7f1      	b.n	802b7f0 <_vfiprintf_r+0x5c>
 802b80c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b810:	f003 021a 	and.w	r2, r3, #26
 802b814:	2a0a      	cmp	r2, #10
 802b816:	d114      	bne.n	802b842 <_vfiprintf_r+0xae>
 802b818:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802b81c:	2a00      	cmp	r2, #0
 802b81e:	db10      	blt.n	802b842 <_vfiprintf_r+0xae>
 802b820:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802b822:	07d6      	lsls	r6, r2, #31
 802b824:	d404      	bmi.n	802b830 <_vfiprintf_r+0x9c>
 802b826:	059d      	lsls	r5, r3, #22
 802b828:	d402      	bmi.n	802b830 <_vfiprintf_r+0x9c>
 802b82a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b82c:	f002 fc5b 	bl	802e0e6 <__retarget_lock_release_recursive>
 802b830:	9800      	ldr	r0, [sp, #0]
 802b832:	4623      	mov	r3, r4
 802b834:	465a      	mov	r2, fp
 802b836:	4639      	mov	r1, r7
 802b838:	b03b      	add	sp, #236	@ 0xec
 802b83a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b83e:	f000 bc31 	b.w	802c0a4 <__sbprintf>
 802b842:	2300      	movs	r3, #0
 802b844:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802b848:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802b84c:	ae11      	add	r6, sp, #68	@ 0x44
 802b84e:	960e      	str	r6, [sp, #56]	@ 0x38
 802b850:	9307      	str	r3, [sp, #28]
 802b852:	9309      	str	r3, [sp, #36]	@ 0x24
 802b854:	9303      	str	r3, [sp, #12]
 802b856:	465b      	mov	r3, fp
 802b858:	461c      	mov	r4, r3
 802b85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b85e:	b10a      	cbz	r2, 802b864 <_vfiprintf_r+0xd0>
 802b860:	2a25      	cmp	r2, #37	@ 0x25
 802b862:	d1f9      	bne.n	802b858 <_vfiprintf_r+0xc4>
 802b864:	ebb4 080b 	subs.w	r8, r4, fp
 802b868:	d00d      	beq.n	802b886 <_vfiprintf_r+0xf2>
 802b86a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b86c:	4443      	add	r3, r8
 802b86e:	9310      	str	r3, [sp, #64]	@ 0x40
 802b870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b872:	3301      	adds	r3, #1
 802b874:	2b07      	cmp	r3, #7
 802b876:	e9c6 b800 	strd	fp, r8, [r6]
 802b87a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b87c:	dc75      	bgt.n	802b96a <_vfiprintf_r+0x1d6>
 802b87e:	3608      	adds	r6, #8
 802b880:	9b03      	ldr	r3, [sp, #12]
 802b882:	4443      	add	r3, r8
 802b884:	9303      	str	r3, [sp, #12]
 802b886:	7823      	ldrb	r3, [r4, #0]
 802b888:	2b00      	cmp	r3, #0
 802b88a:	f000 83cd 	beq.w	802c028 <_vfiprintf_r+0x894>
 802b88e:	2300      	movs	r3, #0
 802b890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b894:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802b898:	3401      	adds	r4, #1
 802b89a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b89e:	469a      	mov	sl, r3
 802b8a0:	46a3      	mov	fp, r4
 802b8a2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802b8a6:	f1a3 0220 	sub.w	r2, r3, #32
 802b8aa:	2a5a      	cmp	r2, #90	@ 0x5a
 802b8ac:	f200 8316 	bhi.w	802bedc <_vfiprintf_r+0x748>
 802b8b0:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b8b4:	0314009a 	.word	0x0314009a
 802b8b8:	00a20314 	.word	0x00a20314
 802b8bc:	03140314 	.word	0x03140314
 802b8c0:	00820314 	.word	0x00820314
 802b8c4:	03140314 	.word	0x03140314
 802b8c8:	00af00a5 	.word	0x00af00a5
 802b8cc:	00ac0314 	.word	0x00ac0314
 802b8d0:	031400b1 	.word	0x031400b1
 802b8d4:	00d000cd 	.word	0x00d000cd
 802b8d8:	00d000d0 	.word	0x00d000d0
 802b8dc:	00d000d0 	.word	0x00d000d0
 802b8e0:	00d000d0 	.word	0x00d000d0
 802b8e4:	00d000d0 	.word	0x00d000d0
 802b8e8:	03140314 	.word	0x03140314
 802b8ec:	03140314 	.word	0x03140314
 802b8f0:	03140314 	.word	0x03140314
 802b8f4:	03140314 	.word	0x03140314
 802b8f8:	00f70314 	.word	0x00f70314
 802b8fc:	03140104 	.word	0x03140104
 802b900:	03140314 	.word	0x03140314
 802b904:	03140314 	.word	0x03140314
 802b908:	03140314 	.word	0x03140314
 802b90c:	03140314 	.word	0x03140314
 802b910:	01520314 	.word	0x01520314
 802b914:	03140314 	.word	0x03140314
 802b918:	019a0314 	.word	0x019a0314
 802b91c:	027a0314 	.word	0x027a0314
 802b920:	03140314 	.word	0x03140314
 802b924:	0314029a 	.word	0x0314029a
 802b928:	03140314 	.word	0x03140314
 802b92c:	03140314 	.word	0x03140314
 802b930:	03140314 	.word	0x03140314
 802b934:	03140314 	.word	0x03140314
 802b938:	00f70314 	.word	0x00f70314
 802b93c:	03140106 	.word	0x03140106
 802b940:	03140314 	.word	0x03140314
 802b944:	010600e0 	.word	0x010600e0
 802b948:	031400f1 	.word	0x031400f1
 802b94c:	031400eb 	.word	0x031400eb
 802b950:	01540132 	.word	0x01540132
 802b954:	00f10189 	.word	0x00f10189
 802b958:	019a0314 	.word	0x019a0314
 802b95c:	027c0098 	.word	0x027c0098
 802b960:	03140314 	.word	0x03140314
 802b964:	03140065 	.word	0x03140065
 802b968:	0098      	.short	0x0098
 802b96a:	9800      	ldr	r0, [sp, #0]
 802b96c:	aa0e      	add	r2, sp, #56	@ 0x38
 802b96e:	4639      	mov	r1, r7
 802b970:	f7ff fede 	bl	802b730 <__sprint_r>
 802b974:	2800      	cmp	r0, #0
 802b976:	f040 8336 	bne.w	802bfe6 <_vfiprintf_r+0x852>
 802b97a:	ae11      	add	r6, sp, #68	@ 0x44
 802b97c:	e780      	b.n	802b880 <_vfiprintf_r+0xec>
 802b97e:	4a99      	ldr	r2, [pc, #612]	@ (802bbe4 <_vfiprintf_r+0x450>)
 802b980:	9205      	str	r2, [sp, #20]
 802b982:	f01a 0220 	ands.w	r2, sl, #32
 802b986:	f000 8231 	beq.w	802bdec <_vfiprintf_r+0x658>
 802b98a:	3507      	adds	r5, #7
 802b98c:	f025 0507 	bic.w	r5, r5, #7
 802b990:	46a8      	mov	r8, r5
 802b992:	686d      	ldr	r5, [r5, #4]
 802b994:	f858 4b08 	ldr.w	r4, [r8], #8
 802b998:	f01a 0f01 	tst.w	sl, #1
 802b99c:	d009      	beq.n	802b9b2 <_vfiprintf_r+0x21e>
 802b99e:	ea54 0205 	orrs.w	r2, r4, r5
 802b9a2:	bf1f      	itttt	ne
 802b9a4:	2230      	movne	r2, #48	@ 0x30
 802b9a6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802b9aa:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802b9ae:	f04a 0a02 	orrne.w	sl, sl, #2
 802b9b2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b9b6:	e112      	b.n	802bbde <_vfiprintf_r+0x44a>
 802b9b8:	9800      	ldr	r0, [sp, #0]
 802b9ba:	f002 fae7 	bl	802df8c <_localeconv_r>
 802b9be:	6843      	ldr	r3, [r0, #4]
 802b9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 802b9c2:	4618      	mov	r0, r3
 802b9c4:	f7e4 fc6c 	bl	80102a0 <strlen>
 802b9c8:	9007      	str	r0, [sp, #28]
 802b9ca:	9800      	ldr	r0, [sp, #0]
 802b9cc:	f002 fade 	bl	802df8c <_localeconv_r>
 802b9d0:	6883      	ldr	r3, [r0, #8]
 802b9d2:	9306      	str	r3, [sp, #24]
 802b9d4:	9b07      	ldr	r3, [sp, #28]
 802b9d6:	b12b      	cbz	r3, 802b9e4 <_vfiprintf_r+0x250>
 802b9d8:	9b06      	ldr	r3, [sp, #24]
 802b9da:	b11b      	cbz	r3, 802b9e4 <_vfiprintf_r+0x250>
 802b9dc:	781b      	ldrb	r3, [r3, #0]
 802b9de:	b10b      	cbz	r3, 802b9e4 <_vfiprintf_r+0x250>
 802b9e0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802b9e4:	465c      	mov	r4, fp
 802b9e6:	e75b      	b.n	802b8a0 <_vfiprintf_r+0x10c>
 802b9e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b9ec:	2b00      	cmp	r3, #0
 802b9ee:	d1f9      	bne.n	802b9e4 <_vfiprintf_r+0x250>
 802b9f0:	2320      	movs	r3, #32
 802b9f2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b9f6:	e7f5      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802b9f8:	f04a 0a01 	orr.w	sl, sl, #1
 802b9fc:	e7f2      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802b9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 802ba02:	9302      	str	r3, [sp, #8]
 802ba04:	2b00      	cmp	r3, #0
 802ba06:	daed      	bge.n	802b9e4 <_vfiprintf_r+0x250>
 802ba08:	425b      	negs	r3, r3
 802ba0a:	9302      	str	r3, [sp, #8]
 802ba0c:	f04a 0a04 	orr.w	sl, sl, #4
 802ba10:	e7e8      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802ba12:	232b      	movs	r3, #43	@ 0x2b
 802ba14:	e7ed      	b.n	802b9f2 <_vfiprintf_r+0x25e>
 802ba16:	465a      	mov	r2, fp
 802ba18:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ba1c:	2b2a      	cmp	r3, #42	@ 0x2a
 802ba1e:	d112      	bne.n	802ba46 <_vfiprintf_r+0x2b2>
 802ba20:	f855 3b04 	ldr.w	r3, [r5], #4
 802ba24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ba28:	9301      	str	r3, [sp, #4]
 802ba2a:	4693      	mov	fp, r2
 802ba2c:	e7da      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802ba2e:	9b01      	ldr	r3, [sp, #4]
 802ba30:	fb00 1303 	mla	r3, r0, r3, r1
 802ba34:	9301      	str	r3, [sp, #4]
 802ba36:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ba3a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802ba3e:	2909      	cmp	r1, #9
 802ba40:	d9f5      	bls.n	802ba2e <_vfiprintf_r+0x29a>
 802ba42:	4693      	mov	fp, r2
 802ba44:	e72f      	b.n	802b8a6 <_vfiprintf_r+0x112>
 802ba46:	2100      	movs	r1, #0
 802ba48:	9101      	str	r1, [sp, #4]
 802ba4a:	200a      	movs	r0, #10
 802ba4c:	e7f5      	b.n	802ba3a <_vfiprintf_r+0x2a6>
 802ba4e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802ba52:	e7c7      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802ba54:	2100      	movs	r1, #0
 802ba56:	465a      	mov	r2, fp
 802ba58:	9102      	str	r1, [sp, #8]
 802ba5a:	200a      	movs	r0, #10
 802ba5c:	9902      	ldr	r1, [sp, #8]
 802ba5e:	3b30      	subs	r3, #48	@ 0x30
 802ba60:	fb00 3301 	mla	r3, r0, r1, r3
 802ba64:	9302      	str	r3, [sp, #8]
 802ba66:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ba6a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802ba6e:	2909      	cmp	r1, #9
 802ba70:	d9f4      	bls.n	802ba5c <_vfiprintf_r+0x2c8>
 802ba72:	e7e6      	b.n	802ba42 <_vfiprintf_r+0x2ae>
 802ba74:	f89b 3000 	ldrb.w	r3, [fp]
 802ba78:	2b68      	cmp	r3, #104	@ 0x68
 802ba7a:	bf06      	itte	eq
 802ba7c:	f10b 0b01 	addeq.w	fp, fp, #1
 802ba80:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802ba84:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802ba88:	e7ac      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802ba8a:	f89b 3000 	ldrb.w	r3, [fp]
 802ba8e:	2b6c      	cmp	r3, #108	@ 0x6c
 802ba90:	d104      	bne.n	802ba9c <_vfiprintf_r+0x308>
 802ba92:	f10b 0b01 	add.w	fp, fp, #1
 802ba96:	f04a 0a20 	orr.w	sl, sl, #32
 802ba9a:	e7a3      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802ba9c:	f04a 0a10 	orr.w	sl, sl, #16
 802baa0:	e7a0      	b.n	802b9e4 <_vfiprintf_r+0x250>
 802baa2:	46a8      	mov	r8, r5
 802baa4:	2400      	movs	r4, #0
 802baa6:	f858 3b04 	ldr.w	r3, [r8], #4
 802baaa:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802baae:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bab2:	2301      	movs	r3, #1
 802bab4:	9301      	str	r3, [sp, #4]
 802bab6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802baba:	e0ab      	b.n	802bc14 <_vfiprintf_r+0x480>
 802babc:	f04a 0a10 	orr.w	sl, sl, #16
 802bac0:	f01a 0f20 	tst.w	sl, #32
 802bac4:	d011      	beq.n	802baea <_vfiprintf_r+0x356>
 802bac6:	3507      	adds	r5, #7
 802bac8:	f025 0507 	bic.w	r5, r5, #7
 802bacc:	46a8      	mov	r8, r5
 802bace:	686d      	ldr	r5, [r5, #4]
 802bad0:	f858 4b08 	ldr.w	r4, [r8], #8
 802bad4:	2d00      	cmp	r5, #0
 802bad6:	da06      	bge.n	802bae6 <_vfiprintf_r+0x352>
 802bad8:	4264      	negs	r4, r4
 802bada:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802bade:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802bae2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802bae6:	2301      	movs	r3, #1
 802bae8:	e048      	b.n	802bb7c <_vfiprintf_r+0x3e8>
 802baea:	46a8      	mov	r8, r5
 802baec:	f01a 0f10 	tst.w	sl, #16
 802baf0:	f858 5b04 	ldr.w	r5, [r8], #4
 802baf4:	d002      	beq.n	802bafc <_vfiprintf_r+0x368>
 802baf6:	462c      	mov	r4, r5
 802baf8:	17ed      	asrs	r5, r5, #31
 802bafa:	e7eb      	b.n	802bad4 <_vfiprintf_r+0x340>
 802bafc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802bb00:	d003      	beq.n	802bb0a <_vfiprintf_r+0x376>
 802bb02:	b22c      	sxth	r4, r5
 802bb04:	f345 35c0 	sbfx	r5, r5, #15, #1
 802bb08:	e7e4      	b.n	802bad4 <_vfiprintf_r+0x340>
 802bb0a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802bb0e:	d0f2      	beq.n	802baf6 <_vfiprintf_r+0x362>
 802bb10:	b26c      	sxtb	r4, r5
 802bb12:	f345 15c0 	sbfx	r5, r5, #7, #1
 802bb16:	e7dd      	b.n	802bad4 <_vfiprintf_r+0x340>
 802bb18:	f01a 0f20 	tst.w	sl, #32
 802bb1c:	d007      	beq.n	802bb2e <_vfiprintf_r+0x39a>
 802bb1e:	9a03      	ldr	r2, [sp, #12]
 802bb20:	682b      	ldr	r3, [r5, #0]
 802bb22:	9903      	ldr	r1, [sp, #12]
 802bb24:	17d2      	asrs	r2, r2, #31
 802bb26:	e9c3 1200 	strd	r1, r2, [r3]
 802bb2a:	3504      	adds	r5, #4
 802bb2c:	e693      	b.n	802b856 <_vfiprintf_r+0xc2>
 802bb2e:	f01a 0f10 	tst.w	sl, #16
 802bb32:	d003      	beq.n	802bb3c <_vfiprintf_r+0x3a8>
 802bb34:	682b      	ldr	r3, [r5, #0]
 802bb36:	9a03      	ldr	r2, [sp, #12]
 802bb38:	601a      	str	r2, [r3, #0]
 802bb3a:	e7f6      	b.n	802bb2a <_vfiprintf_r+0x396>
 802bb3c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802bb40:	d003      	beq.n	802bb4a <_vfiprintf_r+0x3b6>
 802bb42:	682b      	ldr	r3, [r5, #0]
 802bb44:	9a03      	ldr	r2, [sp, #12]
 802bb46:	801a      	strh	r2, [r3, #0]
 802bb48:	e7ef      	b.n	802bb2a <_vfiprintf_r+0x396>
 802bb4a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802bb4e:	d0f1      	beq.n	802bb34 <_vfiprintf_r+0x3a0>
 802bb50:	682b      	ldr	r3, [r5, #0]
 802bb52:	9a03      	ldr	r2, [sp, #12]
 802bb54:	701a      	strb	r2, [r3, #0]
 802bb56:	e7e8      	b.n	802bb2a <_vfiprintf_r+0x396>
 802bb58:	f04a 0a10 	orr.w	sl, sl, #16
 802bb5c:	f01a 0320 	ands.w	r3, sl, #32
 802bb60:	d01f      	beq.n	802bba2 <_vfiprintf_r+0x40e>
 802bb62:	3507      	adds	r5, #7
 802bb64:	f025 0507 	bic.w	r5, r5, #7
 802bb68:	46a8      	mov	r8, r5
 802bb6a:	686d      	ldr	r5, [r5, #4]
 802bb6c:	f858 4b08 	ldr.w	r4, [r8], #8
 802bb70:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802bb74:	2300      	movs	r3, #0
 802bb76:	2200      	movs	r2, #0
 802bb78:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802bb7c:	9a01      	ldr	r2, [sp, #4]
 802bb7e:	3201      	adds	r2, #1
 802bb80:	f000 825f 	beq.w	802c042 <_vfiprintf_r+0x8ae>
 802bb84:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802bb88:	9204      	str	r2, [sp, #16]
 802bb8a:	ea54 0205 	orrs.w	r2, r4, r5
 802bb8e:	f040 825e 	bne.w	802c04e <_vfiprintf_r+0x8ba>
 802bb92:	9a01      	ldr	r2, [sp, #4]
 802bb94:	2a00      	cmp	r2, #0
 802bb96:	f000 8198 	beq.w	802beca <_vfiprintf_r+0x736>
 802bb9a:	2b01      	cmp	r3, #1
 802bb9c:	f040 825a 	bne.w	802c054 <_vfiprintf_r+0x8c0>
 802bba0:	e13b      	b.n	802be1a <_vfiprintf_r+0x686>
 802bba2:	46a8      	mov	r8, r5
 802bba4:	f01a 0510 	ands.w	r5, sl, #16
 802bba8:	f858 4b04 	ldr.w	r4, [r8], #4
 802bbac:	d001      	beq.n	802bbb2 <_vfiprintf_r+0x41e>
 802bbae:	461d      	mov	r5, r3
 802bbb0:	e7de      	b.n	802bb70 <_vfiprintf_r+0x3dc>
 802bbb2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802bbb6:	d001      	beq.n	802bbbc <_vfiprintf_r+0x428>
 802bbb8:	b2a4      	uxth	r4, r4
 802bbba:	e7d9      	b.n	802bb70 <_vfiprintf_r+0x3dc>
 802bbbc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bbc0:	d0d6      	beq.n	802bb70 <_vfiprintf_r+0x3dc>
 802bbc2:	b2e4      	uxtb	r4, r4
 802bbc4:	e7f3      	b.n	802bbae <_vfiprintf_r+0x41a>
 802bbc6:	46a8      	mov	r8, r5
 802bbc8:	f647 0330 	movw	r3, #30768	@ 0x7830
 802bbcc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802bbd0:	f858 4b04 	ldr.w	r4, [r8], #4
 802bbd4:	4b03      	ldr	r3, [pc, #12]	@ (802bbe4 <_vfiprintf_r+0x450>)
 802bbd6:	9305      	str	r3, [sp, #20]
 802bbd8:	2500      	movs	r5, #0
 802bbda:	f04a 0a02 	orr.w	sl, sl, #2
 802bbde:	2302      	movs	r3, #2
 802bbe0:	e7c9      	b.n	802bb76 <_vfiprintf_r+0x3e2>
 802bbe2:	bf00      	nop
 802bbe4:	0803c04b 	.word	0x0803c04b
 802bbe8:	9b01      	ldr	r3, [sp, #4]
 802bbea:	46a8      	mov	r8, r5
 802bbec:	1c5c      	adds	r4, r3, #1
 802bbee:	f04f 0500 	mov.w	r5, #0
 802bbf2:	f858 9b04 	ldr.w	r9, [r8], #4
 802bbf6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802bbfa:	f000 80d0 	beq.w	802bd9e <_vfiprintf_r+0x60a>
 802bbfe:	461a      	mov	r2, r3
 802bc00:	4629      	mov	r1, r5
 802bc02:	4648      	mov	r0, r9
 802bc04:	f7e4 fafc 	bl	8010200 <memchr>
 802bc08:	4604      	mov	r4, r0
 802bc0a:	b118      	cbz	r0, 802bc14 <_vfiprintf_r+0x480>
 802bc0c:	eba0 0309 	sub.w	r3, r0, r9
 802bc10:	9301      	str	r3, [sp, #4]
 802bc12:	462c      	mov	r4, r5
 802bc14:	9b01      	ldr	r3, [sp, #4]
 802bc16:	42a3      	cmp	r3, r4
 802bc18:	bfb8      	it	lt
 802bc1a:	4623      	movlt	r3, r4
 802bc1c:	9304      	str	r3, [sp, #16]
 802bc1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802bc22:	b113      	cbz	r3, 802bc2a <_vfiprintf_r+0x496>
 802bc24:	9b04      	ldr	r3, [sp, #16]
 802bc26:	3301      	adds	r3, #1
 802bc28:	9304      	str	r3, [sp, #16]
 802bc2a:	f01a 0302 	ands.w	r3, sl, #2
 802bc2e:	9308      	str	r3, [sp, #32]
 802bc30:	bf1e      	ittt	ne
 802bc32:	9b04      	ldrne	r3, [sp, #16]
 802bc34:	3302      	addne	r3, #2
 802bc36:	9304      	strne	r3, [sp, #16]
 802bc38:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802bc3c:	930a      	str	r3, [sp, #40]	@ 0x28
 802bc3e:	d11f      	bne.n	802bc80 <_vfiprintf_r+0x4ec>
 802bc40:	9b02      	ldr	r3, [sp, #8]
 802bc42:	9a04      	ldr	r2, [sp, #16]
 802bc44:	1a9d      	subs	r5, r3, r2
 802bc46:	2d00      	cmp	r5, #0
 802bc48:	dd1a      	ble.n	802bc80 <_vfiprintf_r+0x4ec>
 802bc4a:	4ba9      	ldr	r3, [pc, #676]	@ (802bef0 <_vfiprintf_r+0x75c>)
 802bc4c:	6033      	str	r3, [r6, #0]
 802bc4e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802bc52:	2d10      	cmp	r5, #16
 802bc54:	f102 0201 	add.w	r2, r2, #1
 802bc58:	f106 0008 	add.w	r0, r6, #8
 802bc5c:	f300 814e 	bgt.w	802befc <_vfiprintf_r+0x768>
 802bc60:	6075      	str	r5, [r6, #4]
 802bc62:	2a07      	cmp	r2, #7
 802bc64:	4465      	add	r5, ip
 802bc66:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802bc6a:	f340 815a 	ble.w	802bf22 <_vfiprintf_r+0x78e>
 802bc6e:	9800      	ldr	r0, [sp, #0]
 802bc70:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc72:	4639      	mov	r1, r7
 802bc74:	f7ff fd5c 	bl	802b730 <__sprint_r>
 802bc78:	2800      	cmp	r0, #0
 802bc7a:	f040 81b4 	bne.w	802bfe6 <_vfiprintf_r+0x852>
 802bc7e:	ae11      	add	r6, sp, #68	@ 0x44
 802bc80:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802bc84:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802bc88:	b161      	cbz	r1, 802bca4 <_vfiprintf_r+0x510>
 802bc8a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802bc8e:	3301      	adds	r3, #1
 802bc90:	6031      	str	r1, [r6, #0]
 802bc92:	2101      	movs	r1, #1
 802bc94:	440a      	add	r2, r1
 802bc96:	2b07      	cmp	r3, #7
 802bc98:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bc9c:	6071      	str	r1, [r6, #4]
 802bc9e:	f300 8142 	bgt.w	802bf26 <_vfiprintf_r+0x792>
 802bca2:	3608      	adds	r6, #8
 802bca4:	9908      	ldr	r1, [sp, #32]
 802bca6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802bcaa:	b159      	cbz	r1, 802bcc4 <_vfiprintf_r+0x530>
 802bcac:	a90d      	add	r1, sp, #52	@ 0x34
 802bcae:	3301      	adds	r3, #1
 802bcb0:	6031      	str	r1, [r6, #0]
 802bcb2:	2102      	movs	r1, #2
 802bcb4:	440a      	add	r2, r1
 802bcb6:	2b07      	cmp	r3, #7
 802bcb8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bcbc:	6071      	str	r1, [r6, #4]
 802bcbe:	f300 813b 	bgt.w	802bf38 <_vfiprintf_r+0x7a4>
 802bcc2:	3608      	adds	r6, #8
 802bcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bcc6:	2b80      	cmp	r3, #128	@ 0x80
 802bcc8:	d11f      	bne.n	802bd0a <_vfiprintf_r+0x576>
 802bcca:	9b02      	ldr	r3, [sp, #8]
 802bccc:	9a04      	ldr	r2, [sp, #16]
 802bcce:	1a9d      	subs	r5, r3, r2
 802bcd0:	2d00      	cmp	r5, #0
 802bcd2:	dd1a      	ble.n	802bd0a <_vfiprintf_r+0x576>
 802bcd4:	4b87      	ldr	r3, [pc, #540]	@ (802bef4 <_vfiprintf_r+0x760>)
 802bcd6:	6033      	str	r3, [r6, #0]
 802bcd8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802bcdc:	2d10      	cmp	r5, #16
 802bcde:	f102 0201 	add.w	r2, r2, #1
 802bce2:	f106 0008 	add.w	r0, r6, #8
 802bce6:	f300 8130 	bgt.w	802bf4a <_vfiprintf_r+0x7b6>
 802bcea:	6075      	str	r5, [r6, #4]
 802bcec:	2a07      	cmp	r2, #7
 802bcee:	4465      	add	r5, ip
 802bcf0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802bcf4:	f340 813c 	ble.w	802bf70 <_vfiprintf_r+0x7dc>
 802bcf8:	9800      	ldr	r0, [sp, #0]
 802bcfa:	aa0e      	add	r2, sp, #56	@ 0x38
 802bcfc:	4639      	mov	r1, r7
 802bcfe:	f7ff fd17 	bl	802b730 <__sprint_r>
 802bd02:	2800      	cmp	r0, #0
 802bd04:	f040 816f 	bne.w	802bfe6 <_vfiprintf_r+0x852>
 802bd08:	ae11      	add	r6, sp, #68	@ 0x44
 802bd0a:	9b01      	ldr	r3, [sp, #4]
 802bd0c:	1ae4      	subs	r4, r4, r3
 802bd0e:	2c00      	cmp	r4, #0
 802bd10:	dd1a      	ble.n	802bd48 <_vfiprintf_r+0x5b4>
 802bd12:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802bd16:	4877      	ldr	r0, [pc, #476]	@ (802bef4 <_vfiprintf_r+0x760>)
 802bd18:	6030      	str	r0, [r6, #0]
 802bd1a:	2c10      	cmp	r4, #16
 802bd1c:	f103 0301 	add.w	r3, r3, #1
 802bd20:	f106 0108 	add.w	r1, r6, #8
 802bd24:	f300 8126 	bgt.w	802bf74 <_vfiprintf_r+0x7e0>
 802bd28:	6074      	str	r4, [r6, #4]
 802bd2a:	2b07      	cmp	r3, #7
 802bd2c:	4414      	add	r4, r2
 802bd2e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802bd32:	f340 8130 	ble.w	802bf96 <_vfiprintf_r+0x802>
 802bd36:	9800      	ldr	r0, [sp, #0]
 802bd38:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd3a:	4639      	mov	r1, r7
 802bd3c:	f7ff fcf8 	bl	802b730 <__sprint_r>
 802bd40:	2800      	cmp	r0, #0
 802bd42:	f040 8150 	bne.w	802bfe6 <_vfiprintf_r+0x852>
 802bd46:	ae11      	add	r6, sp, #68	@ 0x44
 802bd48:	9b01      	ldr	r3, [sp, #4]
 802bd4a:	9a01      	ldr	r2, [sp, #4]
 802bd4c:	6073      	str	r3, [r6, #4]
 802bd4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bd50:	f8c6 9000 	str.w	r9, [r6]
 802bd54:	4413      	add	r3, r2
 802bd56:	9310      	str	r3, [sp, #64]	@ 0x40
 802bd58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bd5a:	3301      	adds	r3, #1
 802bd5c:	2b07      	cmp	r3, #7
 802bd5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bd60:	f300 811b 	bgt.w	802bf9a <_vfiprintf_r+0x806>
 802bd64:	f106 0308 	add.w	r3, r6, #8
 802bd68:	f01a 0f04 	tst.w	sl, #4
 802bd6c:	f040 811d 	bne.w	802bfaa <_vfiprintf_r+0x816>
 802bd70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bd74:	9904      	ldr	r1, [sp, #16]
 802bd76:	428a      	cmp	r2, r1
 802bd78:	bfac      	ite	ge
 802bd7a:	189b      	addge	r3, r3, r2
 802bd7c:	185b      	addlt	r3, r3, r1
 802bd7e:	9303      	str	r3, [sp, #12]
 802bd80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bd82:	b13b      	cbz	r3, 802bd94 <_vfiprintf_r+0x600>
 802bd84:	9800      	ldr	r0, [sp, #0]
 802bd86:	aa0e      	add	r2, sp, #56	@ 0x38
 802bd88:	4639      	mov	r1, r7
 802bd8a:	f7ff fcd1 	bl	802b730 <__sprint_r>
 802bd8e:	2800      	cmp	r0, #0
 802bd90:	f040 8129 	bne.w	802bfe6 <_vfiprintf_r+0x852>
 802bd94:	2300      	movs	r3, #0
 802bd96:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bd98:	4645      	mov	r5, r8
 802bd9a:	ae11      	add	r6, sp, #68	@ 0x44
 802bd9c:	e55b      	b.n	802b856 <_vfiprintf_r+0xc2>
 802bd9e:	4648      	mov	r0, r9
 802bda0:	f7e4 fa7e 	bl	80102a0 <strlen>
 802bda4:	9001      	str	r0, [sp, #4]
 802bda6:	e734      	b.n	802bc12 <_vfiprintf_r+0x47e>
 802bda8:	f04a 0a10 	orr.w	sl, sl, #16
 802bdac:	f01a 0320 	ands.w	r3, sl, #32
 802bdb0:	d008      	beq.n	802bdc4 <_vfiprintf_r+0x630>
 802bdb2:	3507      	adds	r5, #7
 802bdb4:	f025 0507 	bic.w	r5, r5, #7
 802bdb8:	46a8      	mov	r8, r5
 802bdba:	686d      	ldr	r5, [r5, #4]
 802bdbc:	f858 4b08 	ldr.w	r4, [r8], #8
 802bdc0:	2301      	movs	r3, #1
 802bdc2:	e6d8      	b.n	802bb76 <_vfiprintf_r+0x3e2>
 802bdc4:	46a8      	mov	r8, r5
 802bdc6:	f01a 0510 	ands.w	r5, sl, #16
 802bdca:	f858 4b04 	ldr.w	r4, [r8], #4
 802bdce:	d001      	beq.n	802bdd4 <_vfiprintf_r+0x640>
 802bdd0:	461d      	mov	r5, r3
 802bdd2:	e7f5      	b.n	802bdc0 <_vfiprintf_r+0x62c>
 802bdd4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802bdd8:	d001      	beq.n	802bdde <_vfiprintf_r+0x64a>
 802bdda:	b2a4      	uxth	r4, r4
 802bddc:	e7f0      	b.n	802bdc0 <_vfiprintf_r+0x62c>
 802bdde:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802bde2:	d0ed      	beq.n	802bdc0 <_vfiprintf_r+0x62c>
 802bde4:	b2e4      	uxtb	r4, r4
 802bde6:	e7f3      	b.n	802bdd0 <_vfiprintf_r+0x63c>
 802bde8:	4a43      	ldr	r2, [pc, #268]	@ (802bef8 <_vfiprintf_r+0x764>)
 802bdea:	e5c9      	b.n	802b980 <_vfiprintf_r+0x1ec>
 802bdec:	46a8      	mov	r8, r5
 802bdee:	f01a 0510 	ands.w	r5, sl, #16
 802bdf2:	f858 4b04 	ldr.w	r4, [r8], #4
 802bdf6:	d001      	beq.n	802bdfc <_vfiprintf_r+0x668>
 802bdf8:	4615      	mov	r5, r2
 802bdfa:	e5cd      	b.n	802b998 <_vfiprintf_r+0x204>
 802bdfc:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802be00:	d001      	beq.n	802be06 <_vfiprintf_r+0x672>
 802be02:	b2a4      	uxth	r4, r4
 802be04:	e5c8      	b.n	802b998 <_vfiprintf_r+0x204>
 802be06:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802be0a:	f43f adc5 	beq.w	802b998 <_vfiprintf_r+0x204>
 802be0e:	b2e4      	uxtb	r4, r4
 802be10:	e7f2      	b.n	802bdf8 <_vfiprintf_r+0x664>
 802be12:	2c0a      	cmp	r4, #10
 802be14:	f175 0300 	sbcs.w	r3, r5, #0
 802be18:	d206      	bcs.n	802be28 <_vfiprintf_r+0x694>
 802be1a:	3430      	adds	r4, #48	@ 0x30
 802be1c:	b2e4      	uxtb	r4, r4
 802be1e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802be22:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802be26:	e131      	b.n	802c08c <_vfiprintf_r+0x8f8>
 802be28:	ab3a      	add	r3, sp, #232	@ 0xe8
 802be2a:	9308      	str	r3, [sp, #32]
 802be2c:	9b04      	ldr	r3, [sp, #16]
 802be2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802be32:	f04f 0a00 	mov.w	sl, #0
 802be36:	930a      	str	r3, [sp, #40]	@ 0x28
 802be38:	220a      	movs	r2, #10
 802be3a:	2300      	movs	r3, #0
 802be3c:	4620      	mov	r0, r4
 802be3e:	4629      	mov	r1, r5
 802be40:	f7e4 ff8a 	bl	8010d58 <__aeabi_uldivmod>
 802be44:	460b      	mov	r3, r1
 802be46:	9908      	ldr	r1, [sp, #32]
 802be48:	900b      	str	r0, [sp, #44]	@ 0x2c
 802be4a:	3230      	adds	r2, #48	@ 0x30
 802be4c:	f801 2c01 	strb.w	r2, [r1, #-1]
 802be50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802be52:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802be56:	f10a 0a01 	add.w	sl, sl, #1
 802be5a:	b1e2      	cbz	r2, 802be96 <_vfiprintf_r+0x702>
 802be5c:	9a06      	ldr	r2, [sp, #24]
 802be5e:	7812      	ldrb	r2, [r2, #0]
 802be60:	4552      	cmp	r2, sl
 802be62:	d118      	bne.n	802be96 <_vfiprintf_r+0x702>
 802be64:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802be68:	d015      	beq.n	802be96 <_vfiprintf_r+0x702>
 802be6a:	2c0a      	cmp	r4, #10
 802be6c:	f175 0200 	sbcs.w	r2, r5, #0
 802be70:	d311      	bcc.n	802be96 <_vfiprintf_r+0x702>
 802be72:	9308      	str	r3, [sp, #32]
 802be74:	9b07      	ldr	r3, [sp, #28]
 802be76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802be78:	eba9 0903 	sub.w	r9, r9, r3
 802be7c:	461a      	mov	r2, r3
 802be7e:	4648      	mov	r0, r9
 802be80:	f000 ff3d 	bl	802ccfe <strncpy>
 802be84:	9b06      	ldr	r3, [sp, #24]
 802be86:	785a      	ldrb	r2, [r3, #1]
 802be88:	9b08      	ldr	r3, [sp, #32]
 802be8a:	b172      	cbz	r2, 802beaa <_vfiprintf_r+0x716>
 802be8c:	9a06      	ldr	r2, [sp, #24]
 802be8e:	3201      	adds	r2, #1
 802be90:	9206      	str	r2, [sp, #24]
 802be92:	f04f 0a00 	mov.w	sl, #0
 802be96:	2c0a      	cmp	r4, #10
 802be98:	f175 0500 	sbcs.w	r5, r5, #0
 802be9c:	f0c0 80f6 	bcc.w	802c08c <_vfiprintf_r+0x8f8>
 802bea0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802bea2:	f8cd 9020 	str.w	r9, [sp, #32]
 802bea6:	461d      	mov	r5, r3
 802bea8:	e7c6      	b.n	802be38 <_vfiprintf_r+0x6a4>
 802beaa:	4692      	mov	sl, r2
 802beac:	e7f3      	b.n	802be96 <_vfiprintf_r+0x702>
 802beae:	f004 030f 	and.w	r3, r4, #15
 802beb2:	9a05      	ldr	r2, [sp, #20]
 802beb4:	0924      	lsrs	r4, r4, #4
 802beb6:	5cd3      	ldrb	r3, [r2, r3]
 802beb8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bebc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802bec0:	092d      	lsrs	r5, r5, #4
 802bec2:	ea54 0305 	orrs.w	r3, r4, r5
 802bec6:	d1f2      	bne.n	802beae <_vfiprintf_r+0x71a>
 802bec8:	e0e0      	b.n	802c08c <_vfiprintf_r+0x8f8>
 802beca:	b923      	cbnz	r3, 802bed6 <_vfiprintf_r+0x742>
 802becc:	f01a 0f01 	tst.w	sl, #1
 802bed0:	d001      	beq.n	802bed6 <_vfiprintf_r+0x742>
 802bed2:	2430      	movs	r4, #48	@ 0x30
 802bed4:	e7a3      	b.n	802be1e <_vfiprintf_r+0x68a>
 802bed6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802beda:	e0d7      	b.n	802c08c <_vfiprintf_r+0x8f8>
 802bedc:	2b00      	cmp	r3, #0
 802bede:	f000 80a3 	beq.w	802c028 <_vfiprintf_r+0x894>
 802bee2:	2400      	movs	r4, #0
 802bee4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802bee8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802beec:	46a8      	mov	r8, r5
 802beee:	e5e0      	b.n	802bab2 <_vfiprintf_r+0x31e>
 802bef0:	0803c09f 	.word	0x0803c09f
 802bef4:	0803c08f 	.word	0x0803c08f
 802bef8:	0803c05c 	.word	0x0803c05c
 802befc:	2110      	movs	r1, #16
 802befe:	6071      	str	r1, [r6, #4]
 802bf00:	2a07      	cmp	r2, #7
 802bf02:	4461      	add	r1, ip
 802bf04:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bf08:	dd08      	ble.n	802bf1c <_vfiprintf_r+0x788>
 802bf0a:	9800      	ldr	r0, [sp, #0]
 802bf0c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf0e:	4639      	mov	r1, r7
 802bf10:	f7ff fc0e 	bl	802b730 <__sprint_r>
 802bf14:	2800      	cmp	r0, #0
 802bf16:	d166      	bne.n	802bfe6 <_vfiprintf_r+0x852>
 802bf18:	4b60      	ldr	r3, [pc, #384]	@ (802c09c <_vfiprintf_r+0x908>)
 802bf1a:	a811      	add	r0, sp, #68	@ 0x44
 802bf1c:	3d10      	subs	r5, #16
 802bf1e:	4606      	mov	r6, r0
 802bf20:	e694      	b.n	802bc4c <_vfiprintf_r+0x4b8>
 802bf22:	4606      	mov	r6, r0
 802bf24:	e6ac      	b.n	802bc80 <_vfiprintf_r+0x4ec>
 802bf26:	9800      	ldr	r0, [sp, #0]
 802bf28:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf2a:	4639      	mov	r1, r7
 802bf2c:	f7ff fc00 	bl	802b730 <__sprint_r>
 802bf30:	2800      	cmp	r0, #0
 802bf32:	d158      	bne.n	802bfe6 <_vfiprintf_r+0x852>
 802bf34:	ae11      	add	r6, sp, #68	@ 0x44
 802bf36:	e6b5      	b.n	802bca4 <_vfiprintf_r+0x510>
 802bf38:	9800      	ldr	r0, [sp, #0]
 802bf3a:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf3c:	4639      	mov	r1, r7
 802bf3e:	f7ff fbf7 	bl	802b730 <__sprint_r>
 802bf42:	2800      	cmp	r0, #0
 802bf44:	d14f      	bne.n	802bfe6 <_vfiprintf_r+0x852>
 802bf46:	ae11      	add	r6, sp, #68	@ 0x44
 802bf48:	e6bc      	b.n	802bcc4 <_vfiprintf_r+0x530>
 802bf4a:	2110      	movs	r1, #16
 802bf4c:	6071      	str	r1, [r6, #4]
 802bf4e:	2a07      	cmp	r2, #7
 802bf50:	4461      	add	r1, ip
 802bf52:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bf56:	dd08      	ble.n	802bf6a <_vfiprintf_r+0x7d6>
 802bf58:	9800      	ldr	r0, [sp, #0]
 802bf5a:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf5c:	4639      	mov	r1, r7
 802bf5e:	f7ff fbe7 	bl	802b730 <__sprint_r>
 802bf62:	2800      	cmp	r0, #0
 802bf64:	d13f      	bne.n	802bfe6 <_vfiprintf_r+0x852>
 802bf66:	4b4e      	ldr	r3, [pc, #312]	@ (802c0a0 <_vfiprintf_r+0x90c>)
 802bf68:	a811      	add	r0, sp, #68	@ 0x44
 802bf6a:	3d10      	subs	r5, #16
 802bf6c:	4606      	mov	r6, r0
 802bf6e:	e6b2      	b.n	802bcd6 <_vfiprintf_r+0x542>
 802bf70:	4606      	mov	r6, r0
 802bf72:	e6ca      	b.n	802bd0a <_vfiprintf_r+0x576>
 802bf74:	2010      	movs	r0, #16
 802bf76:	4402      	add	r2, r0
 802bf78:	2b07      	cmp	r3, #7
 802bf7a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bf7e:	6070      	str	r0, [r6, #4]
 802bf80:	dd06      	ble.n	802bf90 <_vfiprintf_r+0x7fc>
 802bf82:	9800      	ldr	r0, [sp, #0]
 802bf84:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf86:	4639      	mov	r1, r7
 802bf88:	f7ff fbd2 	bl	802b730 <__sprint_r>
 802bf8c:	bb58      	cbnz	r0, 802bfe6 <_vfiprintf_r+0x852>
 802bf8e:	a911      	add	r1, sp, #68	@ 0x44
 802bf90:	3c10      	subs	r4, #16
 802bf92:	460e      	mov	r6, r1
 802bf94:	e6bd      	b.n	802bd12 <_vfiprintf_r+0x57e>
 802bf96:	460e      	mov	r6, r1
 802bf98:	e6d6      	b.n	802bd48 <_vfiprintf_r+0x5b4>
 802bf9a:	9800      	ldr	r0, [sp, #0]
 802bf9c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bf9e:	4639      	mov	r1, r7
 802bfa0:	f7ff fbc6 	bl	802b730 <__sprint_r>
 802bfa4:	b9f8      	cbnz	r0, 802bfe6 <_vfiprintf_r+0x852>
 802bfa6:	ab11      	add	r3, sp, #68	@ 0x44
 802bfa8:	e6de      	b.n	802bd68 <_vfiprintf_r+0x5d4>
 802bfaa:	9a02      	ldr	r2, [sp, #8]
 802bfac:	9904      	ldr	r1, [sp, #16]
 802bfae:	1a54      	subs	r4, r2, r1
 802bfb0:	2c00      	cmp	r4, #0
 802bfb2:	f77f aedd 	ble.w	802bd70 <_vfiprintf_r+0x5dc>
 802bfb6:	4d39      	ldr	r5, [pc, #228]	@ (802c09c <_vfiprintf_r+0x908>)
 802bfb8:	2610      	movs	r6, #16
 802bfba:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802bfbe:	2c10      	cmp	r4, #16
 802bfc0:	f102 0201 	add.w	r2, r2, #1
 802bfc4:	601d      	str	r5, [r3, #0]
 802bfc6:	dc1d      	bgt.n	802c004 <_vfiprintf_r+0x870>
 802bfc8:	605c      	str	r4, [r3, #4]
 802bfca:	2a07      	cmp	r2, #7
 802bfcc:	440c      	add	r4, r1
 802bfce:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802bfd2:	f77f aecd 	ble.w	802bd70 <_vfiprintf_r+0x5dc>
 802bfd6:	9800      	ldr	r0, [sp, #0]
 802bfd8:	aa0e      	add	r2, sp, #56	@ 0x38
 802bfda:	4639      	mov	r1, r7
 802bfdc:	f7ff fba8 	bl	802b730 <__sprint_r>
 802bfe0:	2800      	cmp	r0, #0
 802bfe2:	f43f aec5 	beq.w	802bd70 <_vfiprintf_r+0x5dc>
 802bfe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bfe8:	07d9      	lsls	r1, r3, #31
 802bfea:	d405      	bmi.n	802bff8 <_vfiprintf_r+0x864>
 802bfec:	89bb      	ldrh	r3, [r7, #12]
 802bfee:	059a      	lsls	r2, r3, #22
 802bff0:	d402      	bmi.n	802bff8 <_vfiprintf_r+0x864>
 802bff2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bff4:	f002 f877 	bl	802e0e6 <__retarget_lock_release_recursive>
 802bff8:	89bb      	ldrh	r3, [r7, #12]
 802bffa:	065b      	lsls	r3, r3, #25
 802bffc:	f57f abfb 	bpl.w	802b7f6 <_vfiprintf_r+0x62>
 802c000:	f7ff bbf6 	b.w	802b7f0 <_vfiprintf_r+0x5c>
 802c004:	3110      	adds	r1, #16
 802c006:	2a07      	cmp	r2, #7
 802c008:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802c00c:	605e      	str	r6, [r3, #4]
 802c00e:	dc02      	bgt.n	802c016 <_vfiprintf_r+0x882>
 802c010:	3308      	adds	r3, #8
 802c012:	3c10      	subs	r4, #16
 802c014:	e7d1      	b.n	802bfba <_vfiprintf_r+0x826>
 802c016:	9800      	ldr	r0, [sp, #0]
 802c018:	aa0e      	add	r2, sp, #56	@ 0x38
 802c01a:	4639      	mov	r1, r7
 802c01c:	f7ff fb88 	bl	802b730 <__sprint_r>
 802c020:	2800      	cmp	r0, #0
 802c022:	d1e0      	bne.n	802bfe6 <_vfiprintf_r+0x852>
 802c024:	ab11      	add	r3, sp, #68	@ 0x44
 802c026:	e7f4      	b.n	802c012 <_vfiprintf_r+0x87e>
 802c028:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802c02a:	b913      	cbnz	r3, 802c032 <_vfiprintf_r+0x89e>
 802c02c:	2300      	movs	r3, #0
 802c02e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c030:	e7d9      	b.n	802bfe6 <_vfiprintf_r+0x852>
 802c032:	9800      	ldr	r0, [sp, #0]
 802c034:	aa0e      	add	r2, sp, #56	@ 0x38
 802c036:	4639      	mov	r1, r7
 802c038:	f7ff fb7a 	bl	802b730 <__sprint_r>
 802c03c:	2800      	cmp	r0, #0
 802c03e:	d0f5      	beq.n	802c02c <_vfiprintf_r+0x898>
 802c040:	e7d1      	b.n	802bfe6 <_vfiprintf_r+0x852>
 802c042:	ea54 0205 	orrs.w	r2, r4, r5
 802c046:	f8cd a010 	str.w	sl, [sp, #16]
 802c04a:	f43f ada6 	beq.w	802bb9a <_vfiprintf_r+0x406>
 802c04e:	2b01      	cmp	r3, #1
 802c050:	f43f aedf 	beq.w	802be12 <_vfiprintf_r+0x67e>
 802c054:	2b02      	cmp	r3, #2
 802c056:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802c05a:	f43f af28 	beq.w	802beae <_vfiprintf_r+0x71a>
 802c05e:	f004 0307 	and.w	r3, r4, #7
 802c062:	08e4      	lsrs	r4, r4, #3
 802c064:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802c068:	08ed      	lsrs	r5, r5, #3
 802c06a:	3330      	adds	r3, #48	@ 0x30
 802c06c:	ea54 0105 	orrs.w	r1, r4, r5
 802c070:	464a      	mov	r2, r9
 802c072:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802c076:	d1f2      	bne.n	802c05e <_vfiprintf_r+0x8ca>
 802c078:	9904      	ldr	r1, [sp, #16]
 802c07a:	07c8      	lsls	r0, r1, #31
 802c07c:	d506      	bpl.n	802c08c <_vfiprintf_r+0x8f8>
 802c07e:	2b30      	cmp	r3, #48	@ 0x30
 802c080:	d004      	beq.n	802c08c <_vfiprintf_r+0x8f8>
 802c082:	2330      	movs	r3, #48	@ 0x30
 802c084:	f809 3c01 	strb.w	r3, [r9, #-1]
 802c088:	f1a2 0902 	sub.w	r9, r2, #2
 802c08c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802c08e:	eba3 0309 	sub.w	r3, r3, r9
 802c092:	9c01      	ldr	r4, [sp, #4]
 802c094:	f8dd a010 	ldr.w	sl, [sp, #16]
 802c098:	9301      	str	r3, [sp, #4]
 802c09a:	e5bb      	b.n	802bc14 <_vfiprintf_r+0x480>
 802c09c:	0803c09f 	.word	0x0803c09f
 802c0a0:	0803c08f 	.word	0x0803c08f

0802c0a4 <__sbprintf>:
 802c0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c0a6:	461f      	mov	r7, r3
 802c0a8:	898b      	ldrh	r3, [r1, #12]
 802c0aa:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802c0ae:	f023 0302 	bic.w	r3, r3, #2
 802c0b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c0b6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802c0b8:	9319      	str	r3, [sp, #100]	@ 0x64
 802c0ba:	89cb      	ldrh	r3, [r1, #14]
 802c0bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c0c0:	69cb      	ldr	r3, [r1, #28]
 802c0c2:	9307      	str	r3, [sp, #28]
 802c0c4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802c0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 802c0c8:	ab1a      	add	r3, sp, #104	@ 0x68
 802c0ca:	9300      	str	r3, [sp, #0]
 802c0cc:	9304      	str	r3, [sp, #16]
 802c0ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c0d2:	4615      	mov	r5, r2
 802c0d4:	4606      	mov	r6, r0
 802c0d6:	9302      	str	r3, [sp, #8]
 802c0d8:	9305      	str	r3, [sp, #20]
 802c0da:	a816      	add	r0, sp, #88	@ 0x58
 802c0dc:	2300      	movs	r3, #0
 802c0de:	460c      	mov	r4, r1
 802c0e0:	9306      	str	r3, [sp, #24]
 802c0e2:	f001 fffb 	bl	802e0dc <__retarget_lock_init_recursive>
 802c0e6:	462a      	mov	r2, r5
 802c0e8:	463b      	mov	r3, r7
 802c0ea:	4669      	mov	r1, sp
 802c0ec:	4630      	mov	r0, r6
 802c0ee:	f7ff fb51 	bl	802b794 <_vfiprintf_r>
 802c0f2:	1e05      	subs	r5, r0, #0
 802c0f4:	db07      	blt.n	802c106 <__sbprintf+0x62>
 802c0f6:	4669      	mov	r1, sp
 802c0f8:	4630      	mov	r0, r6
 802c0fa:	f000 f9d1 	bl	802c4a0 <_fflush_r>
 802c0fe:	2800      	cmp	r0, #0
 802c100:	bf18      	it	ne
 802c102:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c106:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802c10a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802c10c:	065b      	lsls	r3, r3, #25
 802c10e:	bf42      	ittt	mi
 802c110:	89a3      	ldrhmi	r3, [r4, #12]
 802c112:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802c116:	81a3      	strhmi	r3, [r4, #12]
 802c118:	f001 ffe1 	bl	802e0de <__retarget_lock_close_recursive>
 802c11c:	4628      	mov	r0, r5
 802c11e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802c122:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c124 <putchar>:
 802c124:	4b02      	ldr	r3, [pc, #8]	@ (802c130 <putchar+0xc>)
 802c126:	4601      	mov	r1, r0
 802c128:	6818      	ldr	r0, [r3, #0]
 802c12a:	6882      	ldr	r2, [r0, #8]
 802c12c:	f007 bacc 	b.w	80336c8 <_putc_r>
 802c130:	200002d8 	.word	0x200002d8

0802c134 <_puts_r>:
 802c134:	b530      	push	{r4, r5, lr}
 802c136:	4605      	mov	r5, r0
 802c138:	b089      	sub	sp, #36	@ 0x24
 802c13a:	4608      	mov	r0, r1
 802c13c:	460c      	mov	r4, r1
 802c13e:	f7e4 f8af 	bl	80102a0 <strlen>
 802c142:	4b1e      	ldr	r3, [pc, #120]	@ (802c1bc <_puts_r+0x88>)
 802c144:	9306      	str	r3, [sp, #24]
 802c146:	2301      	movs	r3, #1
 802c148:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802c14c:	9307      	str	r3, [sp, #28]
 802c14e:	4418      	add	r0, r3
 802c150:	ab04      	add	r3, sp, #16
 802c152:	9301      	str	r3, [sp, #4]
 802c154:	2302      	movs	r3, #2
 802c156:	9302      	str	r3, [sp, #8]
 802c158:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802c15a:	68ac      	ldr	r4, [r5, #8]
 802c15c:	9003      	str	r0, [sp, #12]
 802c15e:	b913      	cbnz	r3, 802c166 <_puts_r+0x32>
 802c160:	4628      	mov	r0, r5
 802c162:	f000 fadf 	bl	802c724 <__sinit>
 802c166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c168:	07db      	lsls	r3, r3, #31
 802c16a:	d405      	bmi.n	802c178 <_puts_r+0x44>
 802c16c:	89a3      	ldrh	r3, [r4, #12]
 802c16e:	0598      	lsls	r0, r3, #22
 802c170:	d402      	bmi.n	802c178 <_puts_r+0x44>
 802c172:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c174:	f001 ffb5 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 802c178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c17c:	0499      	lsls	r1, r3, #18
 802c17e:	d406      	bmi.n	802c18e <_puts_r+0x5a>
 802c180:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c184:	81a3      	strh	r3, [r4, #12]
 802c186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c188:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802c18c:	6663      	str	r3, [r4, #100]	@ 0x64
 802c18e:	4628      	mov	r0, r5
 802c190:	aa01      	add	r2, sp, #4
 802c192:	4621      	mov	r1, r4
 802c194:	f000 fb18 	bl	802c7c8 <__sfvwrite_r>
 802c198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c19a:	2800      	cmp	r0, #0
 802c19c:	bf0c      	ite	eq
 802c19e:	250a      	moveq	r5, #10
 802c1a0:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802c1a4:	07da      	lsls	r2, r3, #31
 802c1a6:	d405      	bmi.n	802c1b4 <_puts_r+0x80>
 802c1a8:	89a3      	ldrh	r3, [r4, #12]
 802c1aa:	059b      	lsls	r3, r3, #22
 802c1ac:	d402      	bmi.n	802c1b4 <_puts_r+0x80>
 802c1ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c1b0:	f001 ff99 	bl	802e0e6 <__retarget_lock_release_recursive>
 802c1b4:	4628      	mov	r0, r5
 802c1b6:	b009      	add	sp, #36	@ 0x24
 802c1b8:	bd30      	pop	{r4, r5, pc}
 802c1ba:	bf00      	nop
 802c1bc:	0803c039 	.word	0x0803c039

0802c1c0 <puts>:
 802c1c0:	4b02      	ldr	r3, [pc, #8]	@ (802c1cc <puts+0xc>)
 802c1c2:	4601      	mov	r1, r0
 802c1c4:	6818      	ldr	r0, [r3, #0]
 802c1c6:	f7ff bfb5 	b.w	802c134 <_puts_r>
 802c1ca:	bf00      	nop
 802c1cc:	200002d8 	.word	0x200002d8

0802c1d0 <srand>:
 802c1d0:	4b03      	ldr	r3, [pc, #12]	@ (802c1e0 <srand+0x10>)
 802c1d2:	681b      	ldr	r3, [r3, #0]
 802c1d4:	2200      	movs	r2, #0
 802c1d6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802c1da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802c1de:	4770      	bx	lr
 802c1e0:	200002d8 	.word	0x200002d8

0802c1e4 <rand>:
 802c1e4:	4b0a      	ldr	r3, [pc, #40]	@ (802c210 <rand+0x2c>)
 802c1e6:	480b      	ldr	r0, [pc, #44]	@ (802c214 <rand+0x30>)
 802c1e8:	6819      	ldr	r1, [r3, #0]
 802c1ea:	4a0b      	ldr	r2, [pc, #44]	@ (802c218 <rand+0x34>)
 802c1ec:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802c1f0:	b510      	push	{r4, lr}
 802c1f2:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802c1f6:	4358      	muls	r0, r3
 802c1f8:	fb02 0004 	mla	r0, r2, r4, r0
 802c1fc:	fba3 3202 	umull	r3, r2, r3, r2
 802c200:	3301      	adds	r3, #1
 802c202:	eb40 0002 	adc.w	r0, r0, r2
 802c206:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802c20a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802c20e:	bd10      	pop	{r4, pc}
 802c210:	200002d8 	.word	0x200002d8
 802c214:	5851f42d 	.word	0x5851f42d
 802c218:	4c957f2d 	.word	0x4c957f2d

0802c21c <snprintf>:
 802c21c:	b40c      	push	{r2, r3}
 802c21e:	b530      	push	{r4, r5, lr}
 802c220:	4b17      	ldr	r3, [pc, #92]	@ (802c280 <snprintf+0x64>)
 802c222:	1e0c      	subs	r4, r1, #0
 802c224:	681d      	ldr	r5, [r3, #0]
 802c226:	b09d      	sub	sp, #116	@ 0x74
 802c228:	da08      	bge.n	802c23c <snprintf+0x20>
 802c22a:	238b      	movs	r3, #139	@ 0x8b
 802c22c:	602b      	str	r3, [r5, #0]
 802c22e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c232:	b01d      	add	sp, #116	@ 0x74
 802c234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c238:	b002      	add	sp, #8
 802c23a:	4770      	bx	lr
 802c23c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c240:	f8ad 3014 	strh.w	r3, [sp, #20]
 802c244:	bf14      	ite	ne
 802c246:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c24a:	4623      	moveq	r3, r4
 802c24c:	9304      	str	r3, [sp, #16]
 802c24e:	9307      	str	r3, [sp, #28]
 802c250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c254:	9002      	str	r0, [sp, #8]
 802c256:	9006      	str	r0, [sp, #24]
 802c258:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c25c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802c25e:	ab21      	add	r3, sp, #132	@ 0x84
 802c260:	a902      	add	r1, sp, #8
 802c262:	4628      	mov	r0, r5
 802c264:	9301      	str	r3, [sp, #4]
 802c266:	f004 fe7b 	bl	8030f60 <_svfprintf_r>
 802c26a:	1c43      	adds	r3, r0, #1
 802c26c:	bfbc      	itt	lt
 802c26e:	238b      	movlt	r3, #139	@ 0x8b
 802c270:	602b      	strlt	r3, [r5, #0]
 802c272:	2c00      	cmp	r4, #0
 802c274:	d0dd      	beq.n	802c232 <snprintf+0x16>
 802c276:	9b02      	ldr	r3, [sp, #8]
 802c278:	2200      	movs	r2, #0
 802c27a:	701a      	strb	r2, [r3, #0]
 802c27c:	e7d9      	b.n	802c232 <snprintf+0x16>
 802c27e:	bf00      	nop
 802c280:	200002d8 	.word	0x200002d8

0802c284 <_strtol_l.constprop.0>:
 802c284:	2b24      	cmp	r3, #36	@ 0x24
 802c286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c28a:	4686      	mov	lr, r0
 802c28c:	4690      	mov	r8, r2
 802c28e:	d801      	bhi.n	802c294 <_strtol_l.constprop.0+0x10>
 802c290:	2b01      	cmp	r3, #1
 802c292:	d106      	bne.n	802c2a2 <_strtol_l.constprop.0+0x1e>
 802c294:	f001 fef0 	bl	802e078 <__errno>
 802c298:	2316      	movs	r3, #22
 802c29a:	6003      	str	r3, [r0, #0]
 802c29c:	2000      	movs	r0, #0
 802c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c2a2:	4834      	ldr	r0, [pc, #208]	@ (802c374 <_strtol_l.constprop.0+0xf0>)
 802c2a4:	460d      	mov	r5, r1
 802c2a6:	462a      	mov	r2, r5
 802c2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c2ac:	5d06      	ldrb	r6, [r0, r4]
 802c2ae:	f016 0608 	ands.w	r6, r6, #8
 802c2b2:	d1f8      	bne.n	802c2a6 <_strtol_l.constprop.0+0x22>
 802c2b4:	2c2d      	cmp	r4, #45	@ 0x2d
 802c2b6:	d12d      	bne.n	802c314 <_strtol_l.constprop.0+0x90>
 802c2b8:	782c      	ldrb	r4, [r5, #0]
 802c2ba:	2601      	movs	r6, #1
 802c2bc:	1c95      	adds	r5, r2, #2
 802c2be:	f033 0210 	bics.w	r2, r3, #16
 802c2c2:	d109      	bne.n	802c2d8 <_strtol_l.constprop.0+0x54>
 802c2c4:	2c30      	cmp	r4, #48	@ 0x30
 802c2c6:	d12a      	bne.n	802c31e <_strtol_l.constprop.0+0x9a>
 802c2c8:	782a      	ldrb	r2, [r5, #0]
 802c2ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802c2ce:	2a58      	cmp	r2, #88	@ 0x58
 802c2d0:	d125      	bne.n	802c31e <_strtol_l.constprop.0+0x9a>
 802c2d2:	786c      	ldrb	r4, [r5, #1]
 802c2d4:	2310      	movs	r3, #16
 802c2d6:	3502      	adds	r5, #2
 802c2d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802c2dc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802c2e0:	2200      	movs	r2, #0
 802c2e2:	fbbc f9f3 	udiv	r9, ip, r3
 802c2e6:	4610      	mov	r0, r2
 802c2e8:	fb03 ca19 	mls	sl, r3, r9, ip
 802c2ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802c2f0:	2f09      	cmp	r7, #9
 802c2f2:	d81b      	bhi.n	802c32c <_strtol_l.constprop.0+0xa8>
 802c2f4:	463c      	mov	r4, r7
 802c2f6:	42a3      	cmp	r3, r4
 802c2f8:	dd27      	ble.n	802c34a <_strtol_l.constprop.0+0xc6>
 802c2fa:	1c57      	adds	r7, r2, #1
 802c2fc:	d007      	beq.n	802c30e <_strtol_l.constprop.0+0x8a>
 802c2fe:	4581      	cmp	r9, r0
 802c300:	d320      	bcc.n	802c344 <_strtol_l.constprop.0+0xc0>
 802c302:	d101      	bne.n	802c308 <_strtol_l.constprop.0+0x84>
 802c304:	45a2      	cmp	sl, r4
 802c306:	db1d      	blt.n	802c344 <_strtol_l.constprop.0+0xc0>
 802c308:	fb00 4003 	mla	r0, r0, r3, r4
 802c30c:	2201      	movs	r2, #1
 802c30e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802c312:	e7eb      	b.n	802c2ec <_strtol_l.constprop.0+0x68>
 802c314:	2c2b      	cmp	r4, #43	@ 0x2b
 802c316:	bf04      	itt	eq
 802c318:	782c      	ldrbeq	r4, [r5, #0]
 802c31a:	1c95      	addeq	r5, r2, #2
 802c31c:	e7cf      	b.n	802c2be <_strtol_l.constprop.0+0x3a>
 802c31e:	2b00      	cmp	r3, #0
 802c320:	d1da      	bne.n	802c2d8 <_strtol_l.constprop.0+0x54>
 802c322:	2c30      	cmp	r4, #48	@ 0x30
 802c324:	bf0c      	ite	eq
 802c326:	2308      	moveq	r3, #8
 802c328:	230a      	movne	r3, #10
 802c32a:	e7d5      	b.n	802c2d8 <_strtol_l.constprop.0+0x54>
 802c32c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802c330:	2f19      	cmp	r7, #25
 802c332:	d801      	bhi.n	802c338 <_strtol_l.constprop.0+0xb4>
 802c334:	3c37      	subs	r4, #55	@ 0x37
 802c336:	e7de      	b.n	802c2f6 <_strtol_l.constprop.0+0x72>
 802c338:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802c33c:	2f19      	cmp	r7, #25
 802c33e:	d804      	bhi.n	802c34a <_strtol_l.constprop.0+0xc6>
 802c340:	3c57      	subs	r4, #87	@ 0x57
 802c342:	e7d8      	b.n	802c2f6 <_strtol_l.constprop.0+0x72>
 802c344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802c348:	e7e1      	b.n	802c30e <_strtol_l.constprop.0+0x8a>
 802c34a:	1c53      	adds	r3, r2, #1
 802c34c:	d108      	bne.n	802c360 <_strtol_l.constprop.0+0xdc>
 802c34e:	2322      	movs	r3, #34	@ 0x22
 802c350:	f8ce 3000 	str.w	r3, [lr]
 802c354:	4660      	mov	r0, ip
 802c356:	f1b8 0f00 	cmp.w	r8, #0
 802c35a:	d0a0      	beq.n	802c29e <_strtol_l.constprop.0+0x1a>
 802c35c:	1e69      	subs	r1, r5, #1
 802c35e:	e006      	b.n	802c36e <_strtol_l.constprop.0+0xea>
 802c360:	b106      	cbz	r6, 802c364 <_strtol_l.constprop.0+0xe0>
 802c362:	4240      	negs	r0, r0
 802c364:	f1b8 0f00 	cmp.w	r8, #0
 802c368:	d099      	beq.n	802c29e <_strtol_l.constprop.0+0x1a>
 802c36a:	2a00      	cmp	r2, #0
 802c36c:	d1f6      	bne.n	802c35c <_strtol_l.constprop.0+0xd8>
 802c36e:	f8c8 1000 	str.w	r1, [r8]
 802c372:	e794      	b.n	802c29e <_strtol_l.constprop.0+0x1a>
 802c374:	0803c3f9 	.word	0x0803c3f9

0802c378 <_strtol_r>:
 802c378:	f7ff bf84 	b.w	802c284 <_strtol_l.constprop.0>

0802c37c <strtol>:
 802c37c:	4613      	mov	r3, r2
 802c37e:	460a      	mov	r2, r1
 802c380:	4601      	mov	r1, r0
 802c382:	4802      	ldr	r0, [pc, #8]	@ (802c38c <strtol+0x10>)
 802c384:	6800      	ldr	r0, [r0, #0]
 802c386:	f7ff bf7d 	b.w	802c284 <_strtol_l.constprop.0>
 802c38a:	bf00      	nop
 802c38c:	200002d8 	.word	0x200002d8

0802c390 <__sflush_r>:
 802c390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c394:	4605      	mov	r5, r0
 802c396:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802c39a:	0706      	lsls	r6, r0, #28
 802c39c:	460c      	mov	r4, r1
 802c39e:	d457      	bmi.n	802c450 <__sflush_r+0xc0>
 802c3a0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802c3a4:	818b      	strh	r3, [r1, #12]
 802c3a6:	684b      	ldr	r3, [r1, #4]
 802c3a8:	2b00      	cmp	r3, #0
 802c3aa:	dc02      	bgt.n	802c3b2 <__sflush_r+0x22>
 802c3ac:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802c3ae:	2b00      	cmp	r3, #0
 802c3b0:	dd4c      	ble.n	802c44c <__sflush_r+0xbc>
 802c3b2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c3b4:	2e00      	cmp	r6, #0
 802c3b6:	d049      	beq.n	802c44c <__sflush_r+0xbc>
 802c3b8:	2300      	movs	r3, #0
 802c3ba:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802c3be:	682f      	ldr	r7, [r5, #0]
 802c3c0:	69e1      	ldr	r1, [r4, #28]
 802c3c2:	602b      	str	r3, [r5, #0]
 802c3c4:	d034      	beq.n	802c430 <__sflush_r+0xa0>
 802c3c6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802c3c8:	89a3      	ldrh	r3, [r4, #12]
 802c3ca:	0759      	lsls	r1, r3, #29
 802c3cc:	d505      	bpl.n	802c3da <__sflush_r+0x4a>
 802c3ce:	6863      	ldr	r3, [r4, #4]
 802c3d0:	1ad2      	subs	r2, r2, r3
 802c3d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802c3d4:	b10b      	cbz	r3, 802c3da <__sflush_r+0x4a>
 802c3d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802c3d8:	1ad2      	subs	r2, r2, r3
 802c3da:	2300      	movs	r3, #0
 802c3dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c3de:	69e1      	ldr	r1, [r4, #28]
 802c3e0:	4628      	mov	r0, r5
 802c3e2:	47b0      	blx	r6
 802c3e4:	1c43      	adds	r3, r0, #1
 802c3e6:	d106      	bne.n	802c3f6 <__sflush_r+0x66>
 802c3e8:	682a      	ldr	r2, [r5, #0]
 802c3ea:	2a1d      	cmp	r2, #29
 802c3ec:	d848      	bhi.n	802c480 <__sflush_r+0xf0>
 802c3ee:	4b2b      	ldr	r3, [pc, #172]	@ (802c49c <__sflush_r+0x10c>)
 802c3f0:	4113      	asrs	r3, r2
 802c3f2:	07de      	lsls	r6, r3, #31
 802c3f4:	d444      	bmi.n	802c480 <__sflush_r+0xf0>
 802c3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c3fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c3fe:	81a2      	strh	r2, [r4, #12]
 802c400:	2200      	movs	r2, #0
 802c402:	6062      	str	r2, [r4, #4]
 802c404:	04d9      	lsls	r1, r3, #19
 802c406:	6922      	ldr	r2, [r4, #16]
 802c408:	6022      	str	r2, [r4, #0]
 802c40a:	d504      	bpl.n	802c416 <__sflush_r+0x86>
 802c40c:	1c42      	adds	r2, r0, #1
 802c40e:	d101      	bne.n	802c414 <__sflush_r+0x84>
 802c410:	682b      	ldr	r3, [r5, #0]
 802c412:	b903      	cbnz	r3, 802c416 <__sflush_r+0x86>
 802c414:	6520      	str	r0, [r4, #80]	@ 0x50
 802c416:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c418:	602f      	str	r7, [r5, #0]
 802c41a:	b1b9      	cbz	r1, 802c44c <__sflush_r+0xbc>
 802c41c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c420:	4299      	cmp	r1, r3
 802c422:	d002      	beq.n	802c42a <__sflush_r+0x9a>
 802c424:	4628      	mov	r0, r5
 802c426:	f002 fd61 	bl	802eeec <_free_r>
 802c42a:	2300      	movs	r3, #0
 802c42c:	6323      	str	r3, [r4, #48]	@ 0x30
 802c42e:	e00d      	b.n	802c44c <__sflush_r+0xbc>
 802c430:	2301      	movs	r3, #1
 802c432:	4628      	mov	r0, r5
 802c434:	47b0      	blx	r6
 802c436:	4602      	mov	r2, r0
 802c438:	1c50      	adds	r0, r2, #1
 802c43a:	d1c5      	bne.n	802c3c8 <__sflush_r+0x38>
 802c43c:	682b      	ldr	r3, [r5, #0]
 802c43e:	2b00      	cmp	r3, #0
 802c440:	d0c2      	beq.n	802c3c8 <__sflush_r+0x38>
 802c442:	2b1d      	cmp	r3, #29
 802c444:	d001      	beq.n	802c44a <__sflush_r+0xba>
 802c446:	2b16      	cmp	r3, #22
 802c448:	d11a      	bne.n	802c480 <__sflush_r+0xf0>
 802c44a:	602f      	str	r7, [r5, #0]
 802c44c:	2000      	movs	r0, #0
 802c44e:	e01e      	b.n	802c48e <__sflush_r+0xfe>
 802c450:	690f      	ldr	r7, [r1, #16]
 802c452:	2f00      	cmp	r7, #0
 802c454:	d0fa      	beq.n	802c44c <__sflush_r+0xbc>
 802c456:	0783      	lsls	r3, r0, #30
 802c458:	680e      	ldr	r6, [r1, #0]
 802c45a:	bf08      	it	eq
 802c45c:	694b      	ldreq	r3, [r1, #20]
 802c45e:	600f      	str	r7, [r1, #0]
 802c460:	bf18      	it	ne
 802c462:	2300      	movne	r3, #0
 802c464:	eba6 0807 	sub.w	r8, r6, r7
 802c468:	608b      	str	r3, [r1, #8]
 802c46a:	f1b8 0f00 	cmp.w	r8, #0
 802c46e:	dded      	ble.n	802c44c <__sflush_r+0xbc>
 802c470:	69e1      	ldr	r1, [r4, #28]
 802c472:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c474:	4643      	mov	r3, r8
 802c476:	463a      	mov	r2, r7
 802c478:	4628      	mov	r0, r5
 802c47a:	47b0      	blx	r6
 802c47c:	2800      	cmp	r0, #0
 802c47e:	dc08      	bgt.n	802c492 <__sflush_r+0x102>
 802c480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c488:	81a3      	strh	r3, [r4, #12]
 802c48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c492:	4407      	add	r7, r0
 802c494:	eba8 0800 	sub.w	r8, r8, r0
 802c498:	e7e7      	b.n	802c46a <__sflush_r+0xda>
 802c49a:	bf00      	nop
 802c49c:	dfbffffe 	.word	0xdfbffffe

0802c4a0 <_fflush_r>:
 802c4a0:	b538      	push	{r3, r4, r5, lr}
 802c4a2:	460c      	mov	r4, r1
 802c4a4:	4605      	mov	r5, r0
 802c4a6:	b118      	cbz	r0, 802c4b0 <_fflush_r+0x10>
 802c4a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c4aa:	b90b      	cbnz	r3, 802c4b0 <_fflush_r+0x10>
 802c4ac:	f000 f93a 	bl	802c724 <__sinit>
 802c4b0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c4b4:	b1b8      	cbz	r0, 802c4e6 <_fflush_r+0x46>
 802c4b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c4b8:	07db      	lsls	r3, r3, #31
 802c4ba:	d404      	bmi.n	802c4c6 <_fflush_r+0x26>
 802c4bc:	0581      	lsls	r1, r0, #22
 802c4be:	d402      	bmi.n	802c4c6 <_fflush_r+0x26>
 802c4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c4c2:	f001 fe0e 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 802c4c6:	4628      	mov	r0, r5
 802c4c8:	4621      	mov	r1, r4
 802c4ca:	f7ff ff61 	bl	802c390 <__sflush_r>
 802c4ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c4d0:	07da      	lsls	r2, r3, #31
 802c4d2:	4605      	mov	r5, r0
 802c4d4:	d405      	bmi.n	802c4e2 <_fflush_r+0x42>
 802c4d6:	89a3      	ldrh	r3, [r4, #12]
 802c4d8:	059b      	lsls	r3, r3, #22
 802c4da:	d402      	bmi.n	802c4e2 <_fflush_r+0x42>
 802c4dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c4de:	f001 fe02 	bl	802e0e6 <__retarget_lock_release_recursive>
 802c4e2:	4628      	mov	r0, r5
 802c4e4:	bd38      	pop	{r3, r4, r5, pc}
 802c4e6:	4605      	mov	r5, r0
 802c4e8:	e7fb      	b.n	802c4e2 <_fflush_r+0x42>
	...

0802c4ec <sprintf>:
 802c4ec:	b40e      	push	{r1, r2, r3}
 802c4ee:	b500      	push	{lr}
 802c4f0:	b09c      	sub	sp, #112	@ 0x70
 802c4f2:	ab1d      	add	r3, sp, #116	@ 0x74
 802c4f4:	9002      	str	r0, [sp, #8]
 802c4f6:	9006      	str	r0, [sp, #24]
 802c4f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c4fc:	4809      	ldr	r0, [pc, #36]	@ (802c524 <sprintf+0x38>)
 802c4fe:	9107      	str	r1, [sp, #28]
 802c500:	9104      	str	r1, [sp, #16]
 802c502:	4909      	ldr	r1, [pc, #36]	@ (802c528 <sprintf+0x3c>)
 802c504:	f853 2b04 	ldr.w	r2, [r3], #4
 802c508:	9105      	str	r1, [sp, #20]
 802c50a:	6800      	ldr	r0, [r0, #0]
 802c50c:	9301      	str	r3, [sp, #4]
 802c50e:	a902      	add	r1, sp, #8
 802c510:	f004 fd26 	bl	8030f60 <_svfprintf_r>
 802c514:	9b02      	ldr	r3, [sp, #8]
 802c516:	2200      	movs	r2, #0
 802c518:	701a      	strb	r2, [r3, #0]
 802c51a:	b01c      	add	sp, #112	@ 0x70
 802c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c520:	b003      	add	sp, #12
 802c522:	4770      	bx	lr
 802c524:	200002d8 	.word	0x200002d8
 802c528:	ffff0208 	.word	0xffff0208

0802c52c <sscanf>:
 802c52c:	b40e      	push	{r1, r2, r3}
 802c52e:	b530      	push	{r4, r5, lr}
 802c530:	b09c      	sub	sp, #112	@ 0x70
 802c532:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c534:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c538:	f854 5b04 	ldr.w	r5, [r4], #4
 802c53c:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c540:	9002      	str	r0, [sp, #8]
 802c542:	9006      	str	r0, [sp, #24]
 802c544:	f7e3 feac 	bl	80102a0 <strlen>
 802c548:	4b0b      	ldr	r3, [pc, #44]	@ (802c578 <sscanf+0x4c>)
 802c54a:	9003      	str	r0, [sp, #12]
 802c54c:	9007      	str	r0, [sp, #28]
 802c54e:	930a      	str	r3, [sp, #40]	@ 0x28
 802c550:	480a      	ldr	r0, [pc, #40]	@ (802c57c <sscanf+0x50>)
 802c552:	9401      	str	r4, [sp, #4]
 802c554:	2300      	movs	r3, #0
 802c556:	930e      	str	r3, [sp, #56]	@ 0x38
 802c558:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c55a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c55e:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c562:	462a      	mov	r2, r5
 802c564:	4623      	mov	r3, r4
 802c566:	a902      	add	r1, sp, #8
 802c568:	6800      	ldr	r0, [r0, #0]
 802c56a:	f005 ff3b 	bl	80323e4 <__ssvfscanf_r>
 802c56e:	b01c      	add	sp, #112	@ 0x70
 802c570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c574:	b003      	add	sp, #12
 802c576:	4770      	bx	lr
 802c578:	0802c5a3 	.word	0x0802c5a3
 802c57c:	200002d8 	.word	0x200002d8

0802c580 <__sread>:
 802c580:	b510      	push	{r4, lr}
 802c582:	460c      	mov	r4, r1
 802c584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c588:	f001 fd52 	bl	802e030 <_read_r>
 802c58c:	2800      	cmp	r0, #0
 802c58e:	bfab      	itete	ge
 802c590:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802c592:	89a3      	ldrhlt	r3, [r4, #12]
 802c594:	181b      	addge	r3, r3, r0
 802c596:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c59a:	bfac      	ite	ge
 802c59c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802c59e:	81a3      	strhlt	r3, [r4, #12]
 802c5a0:	bd10      	pop	{r4, pc}

0802c5a2 <__seofread>:
 802c5a2:	2000      	movs	r0, #0
 802c5a4:	4770      	bx	lr

0802c5a6 <__swrite>:
 802c5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c5aa:	461f      	mov	r7, r3
 802c5ac:	898b      	ldrh	r3, [r1, #12]
 802c5ae:	05db      	lsls	r3, r3, #23
 802c5b0:	4605      	mov	r5, r0
 802c5b2:	460c      	mov	r4, r1
 802c5b4:	4616      	mov	r6, r2
 802c5b6:	d505      	bpl.n	802c5c4 <__swrite+0x1e>
 802c5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c5bc:	2302      	movs	r3, #2
 802c5be:	2200      	movs	r2, #0
 802c5c0:	f001 fd24 	bl	802e00c <_lseek_r>
 802c5c4:	89a3      	ldrh	r3, [r4, #12]
 802c5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c5ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c5ce:	81a3      	strh	r3, [r4, #12]
 802c5d0:	4632      	mov	r2, r6
 802c5d2:	463b      	mov	r3, r7
 802c5d4:	4628      	mov	r0, r5
 802c5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c5da:	f001 bd3b 	b.w	802e054 <_write_r>

0802c5de <__sseek>:
 802c5de:	b510      	push	{r4, lr}
 802c5e0:	460c      	mov	r4, r1
 802c5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c5e6:	f001 fd11 	bl	802e00c <_lseek_r>
 802c5ea:	1c43      	adds	r3, r0, #1
 802c5ec:	89a3      	ldrh	r3, [r4, #12]
 802c5ee:	bf15      	itete	ne
 802c5f0:	6520      	strne	r0, [r4, #80]	@ 0x50
 802c5f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c5f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c5fa:	81a3      	strheq	r3, [r4, #12]
 802c5fc:	bf18      	it	ne
 802c5fe:	81a3      	strhne	r3, [r4, #12]
 802c600:	bd10      	pop	{r4, pc}

0802c602 <__sclose>:
 802c602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c606:	f001 bcc5 	b.w	802df94 <_close_r>
	...

0802c60c <std>:
 802c60c:	2300      	movs	r3, #0
 802c60e:	b510      	push	{r4, lr}
 802c610:	4604      	mov	r4, r0
 802c612:	e9c0 3300 	strd	r3, r3, [r0]
 802c616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c61a:	6083      	str	r3, [r0, #8]
 802c61c:	8181      	strh	r1, [r0, #12]
 802c61e:	6643      	str	r3, [r0, #100]	@ 0x64
 802c620:	81c2      	strh	r2, [r0, #14]
 802c622:	6183      	str	r3, [r0, #24]
 802c624:	4619      	mov	r1, r3
 802c626:	2208      	movs	r2, #8
 802c628:	305c      	adds	r0, #92	@ 0x5c
 802c62a:	f000 fb21 	bl	802cc70 <memset>
 802c62e:	4b0d      	ldr	r3, [pc, #52]	@ (802c664 <std+0x58>)
 802c630:	6223      	str	r3, [r4, #32]
 802c632:	4b0d      	ldr	r3, [pc, #52]	@ (802c668 <std+0x5c>)
 802c634:	6263      	str	r3, [r4, #36]	@ 0x24
 802c636:	4b0d      	ldr	r3, [pc, #52]	@ (802c66c <std+0x60>)
 802c638:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c63a:	4b0d      	ldr	r3, [pc, #52]	@ (802c670 <std+0x64>)
 802c63c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c63e:	4b0d      	ldr	r3, [pc, #52]	@ (802c674 <std+0x68>)
 802c640:	61e4      	str	r4, [r4, #28]
 802c642:	429c      	cmp	r4, r3
 802c644:	d006      	beq.n	802c654 <std+0x48>
 802c646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c64a:	4294      	cmp	r4, r2
 802c64c:	d002      	beq.n	802c654 <std+0x48>
 802c64e:	33d0      	adds	r3, #208	@ 0xd0
 802c650:	429c      	cmp	r4, r3
 802c652:	d105      	bne.n	802c660 <std+0x54>
 802c654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c65c:	f001 bd3e 	b.w	802e0dc <__retarget_lock_init_recursive>
 802c660:	bd10      	pop	{r4, pc}
 802c662:	bf00      	nop
 802c664:	0802c581 	.word	0x0802c581
 802c668:	0802c5a7 	.word	0x0802c5a7
 802c66c:	0802c5df 	.word	0x0802c5df
 802c670:	0802c603 	.word	0x0802c603
 802c674:	20019f2c 	.word	0x20019f2c

0802c678 <stdio_exit_handler>:
 802c678:	4a02      	ldr	r2, [pc, #8]	@ (802c684 <stdio_exit_handler+0xc>)
 802c67a:	4903      	ldr	r1, [pc, #12]	@ (802c688 <stdio_exit_handler+0x10>)
 802c67c:	4803      	ldr	r0, [pc, #12]	@ (802c68c <stdio_exit_handler+0x14>)
 802c67e:	f000 b9ef 	b.w	802ca60 <_fwalk_sglue>
 802c682:	bf00      	nop
 802c684:	20000158 	.word	0x20000158
 802c688:	08034021 	.word	0x08034021
 802c68c:	200002e0 	.word	0x200002e0

0802c690 <cleanup_stdio>:
 802c690:	6841      	ldr	r1, [r0, #4]
 802c692:	4b0c      	ldr	r3, [pc, #48]	@ (802c6c4 <cleanup_stdio+0x34>)
 802c694:	4299      	cmp	r1, r3
 802c696:	b510      	push	{r4, lr}
 802c698:	4604      	mov	r4, r0
 802c69a:	d001      	beq.n	802c6a0 <cleanup_stdio+0x10>
 802c69c:	f007 fcc0 	bl	8034020 <_fclose_r>
 802c6a0:	68a1      	ldr	r1, [r4, #8]
 802c6a2:	4b09      	ldr	r3, [pc, #36]	@ (802c6c8 <cleanup_stdio+0x38>)
 802c6a4:	4299      	cmp	r1, r3
 802c6a6:	d002      	beq.n	802c6ae <cleanup_stdio+0x1e>
 802c6a8:	4620      	mov	r0, r4
 802c6aa:	f007 fcb9 	bl	8034020 <_fclose_r>
 802c6ae:	68e1      	ldr	r1, [r4, #12]
 802c6b0:	4b06      	ldr	r3, [pc, #24]	@ (802c6cc <cleanup_stdio+0x3c>)
 802c6b2:	4299      	cmp	r1, r3
 802c6b4:	d004      	beq.n	802c6c0 <cleanup_stdio+0x30>
 802c6b6:	4620      	mov	r0, r4
 802c6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c6bc:	f007 bcb0 	b.w	8034020 <_fclose_r>
 802c6c0:	bd10      	pop	{r4, pc}
 802c6c2:	bf00      	nop
 802c6c4:	20019f2c 	.word	0x20019f2c
 802c6c8:	20019f94 	.word	0x20019f94
 802c6cc:	20019ffc 	.word	0x20019ffc

0802c6d0 <global_stdio_init.part.0>:
 802c6d0:	b510      	push	{r4, lr}
 802c6d2:	4b0b      	ldr	r3, [pc, #44]	@ (802c700 <global_stdio_init.part.0+0x30>)
 802c6d4:	4c0b      	ldr	r4, [pc, #44]	@ (802c704 <global_stdio_init.part.0+0x34>)
 802c6d6:	4a0c      	ldr	r2, [pc, #48]	@ (802c708 <global_stdio_init.part.0+0x38>)
 802c6d8:	601a      	str	r2, [r3, #0]
 802c6da:	4620      	mov	r0, r4
 802c6dc:	2200      	movs	r2, #0
 802c6de:	2104      	movs	r1, #4
 802c6e0:	f7ff ff94 	bl	802c60c <std>
 802c6e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c6e8:	2201      	movs	r2, #1
 802c6ea:	2109      	movs	r1, #9
 802c6ec:	f7ff ff8e 	bl	802c60c <std>
 802c6f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c6f4:	2202      	movs	r2, #2
 802c6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c6fa:	2112      	movs	r1, #18
 802c6fc:	f7ff bf86 	b.w	802c60c <std>
 802c700:	2001a064 	.word	0x2001a064
 802c704:	20019f2c 	.word	0x20019f2c
 802c708:	0802c679 	.word	0x0802c679

0802c70c <__sfp_lock_acquire>:
 802c70c:	4801      	ldr	r0, [pc, #4]	@ (802c714 <__sfp_lock_acquire+0x8>)
 802c70e:	f001 bce8 	b.w	802e0e2 <__retarget_lock_acquire_recursive>
 802c712:	bf00      	nop
 802c714:	2001a094 	.word	0x2001a094

0802c718 <__sfp_lock_release>:
 802c718:	4801      	ldr	r0, [pc, #4]	@ (802c720 <__sfp_lock_release+0x8>)
 802c71a:	f001 bce4 	b.w	802e0e6 <__retarget_lock_release_recursive>
 802c71e:	bf00      	nop
 802c720:	2001a094 	.word	0x2001a094

0802c724 <__sinit>:
 802c724:	b510      	push	{r4, lr}
 802c726:	4604      	mov	r4, r0
 802c728:	f7ff fff0 	bl	802c70c <__sfp_lock_acquire>
 802c72c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c72e:	b11b      	cbz	r3, 802c738 <__sinit+0x14>
 802c730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c734:	f7ff bff0 	b.w	802c718 <__sfp_lock_release>
 802c738:	4b04      	ldr	r3, [pc, #16]	@ (802c74c <__sinit+0x28>)
 802c73a:	6363      	str	r3, [r4, #52]	@ 0x34
 802c73c:	4b04      	ldr	r3, [pc, #16]	@ (802c750 <__sinit+0x2c>)
 802c73e:	681b      	ldr	r3, [r3, #0]
 802c740:	2b00      	cmp	r3, #0
 802c742:	d1f5      	bne.n	802c730 <__sinit+0xc>
 802c744:	f7ff ffc4 	bl	802c6d0 <global_stdio_init.part.0>
 802c748:	e7f2      	b.n	802c730 <__sinit+0xc>
 802c74a:	bf00      	nop
 802c74c:	0802c691 	.word	0x0802c691
 802c750:	2001a064 	.word	0x2001a064

0802c754 <_vsnprintf_r>:
 802c754:	b530      	push	{r4, r5, lr}
 802c756:	4614      	mov	r4, r2
 802c758:	2c00      	cmp	r4, #0
 802c75a:	b09b      	sub	sp, #108	@ 0x6c
 802c75c:	4605      	mov	r5, r0
 802c75e:	461a      	mov	r2, r3
 802c760:	da05      	bge.n	802c76e <_vsnprintf_r+0x1a>
 802c762:	238b      	movs	r3, #139	@ 0x8b
 802c764:	6003      	str	r3, [r0, #0]
 802c766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c76a:	b01b      	add	sp, #108	@ 0x6c
 802c76c:	bd30      	pop	{r4, r5, pc}
 802c76e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c772:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c776:	bf14      	ite	ne
 802c778:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c77c:	4623      	moveq	r3, r4
 802c77e:	9302      	str	r3, [sp, #8]
 802c780:	9305      	str	r3, [sp, #20]
 802c782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c786:	9100      	str	r1, [sp, #0]
 802c788:	9104      	str	r1, [sp, #16]
 802c78a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c78e:	4669      	mov	r1, sp
 802c790:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802c792:	f004 fbe5 	bl	8030f60 <_svfprintf_r>
 802c796:	1c43      	adds	r3, r0, #1
 802c798:	bfbc      	itt	lt
 802c79a:	238b      	movlt	r3, #139	@ 0x8b
 802c79c:	602b      	strlt	r3, [r5, #0]
 802c79e:	2c00      	cmp	r4, #0
 802c7a0:	d0e3      	beq.n	802c76a <_vsnprintf_r+0x16>
 802c7a2:	9b00      	ldr	r3, [sp, #0]
 802c7a4:	2200      	movs	r2, #0
 802c7a6:	701a      	strb	r2, [r3, #0]
 802c7a8:	e7df      	b.n	802c76a <_vsnprintf_r+0x16>
	...

0802c7ac <vsnprintf>:
 802c7ac:	b507      	push	{r0, r1, r2, lr}
 802c7ae:	9300      	str	r3, [sp, #0]
 802c7b0:	4613      	mov	r3, r2
 802c7b2:	460a      	mov	r2, r1
 802c7b4:	4601      	mov	r1, r0
 802c7b6:	4803      	ldr	r0, [pc, #12]	@ (802c7c4 <vsnprintf+0x18>)
 802c7b8:	6800      	ldr	r0, [r0, #0]
 802c7ba:	f7ff ffcb 	bl	802c754 <_vsnprintf_r>
 802c7be:	b003      	add	sp, #12
 802c7c0:	f85d fb04 	ldr.w	pc, [sp], #4
 802c7c4:	200002d8 	.word	0x200002d8

0802c7c8 <__sfvwrite_r>:
 802c7c8:	6893      	ldr	r3, [r2, #8]
 802c7ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c7ce:	4606      	mov	r6, r0
 802c7d0:	460c      	mov	r4, r1
 802c7d2:	4691      	mov	r9, r2
 802c7d4:	b91b      	cbnz	r3, 802c7de <__sfvwrite_r+0x16>
 802c7d6:	2000      	movs	r0, #0
 802c7d8:	b003      	add	sp, #12
 802c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c7de:	898b      	ldrh	r3, [r1, #12]
 802c7e0:	0718      	lsls	r0, r3, #28
 802c7e2:	d550      	bpl.n	802c886 <__sfvwrite_r+0xbe>
 802c7e4:	690b      	ldr	r3, [r1, #16]
 802c7e6:	2b00      	cmp	r3, #0
 802c7e8:	d04d      	beq.n	802c886 <__sfvwrite_r+0xbe>
 802c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c7ee:	f8d9 8000 	ldr.w	r8, [r9]
 802c7f2:	f013 0702 	ands.w	r7, r3, #2
 802c7f6:	d16b      	bne.n	802c8d0 <__sfvwrite_r+0x108>
 802c7f8:	f013 0301 	ands.w	r3, r3, #1
 802c7fc:	f000 809c 	beq.w	802c938 <__sfvwrite_r+0x170>
 802c800:	4638      	mov	r0, r7
 802c802:	46ba      	mov	sl, r7
 802c804:	46bb      	mov	fp, r7
 802c806:	f1bb 0f00 	cmp.w	fp, #0
 802c80a:	f000 8103 	beq.w	802ca14 <__sfvwrite_r+0x24c>
 802c80e:	b950      	cbnz	r0, 802c826 <__sfvwrite_r+0x5e>
 802c810:	465a      	mov	r2, fp
 802c812:	210a      	movs	r1, #10
 802c814:	4650      	mov	r0, sl
 802c816:	f7e3 fcf3 	bl	8010200 <memchr>
 802c81a:	2800      	cmp	r0, #0
 802c81c:	f000 8100 	beq.w	802ca20 <__sfvwrite_r+0x258>
 802c820:	3001      	adds	r0, #1
 802c822:	eba0 070a 	sub.w	r7, r0, sl
 802c826:	6820      	ldr	r0, [r4, #0]
 802c828:	6921      	ldr	r1, [r4, #16]
 802c82a:	68a5      	ldr	r5, [r4, #8]
 802c82c:	6963      	ldr	r3, [r4, #20]
 802c82e:	455f      	cmp	r7, fp
 802c830:	463a      	mov	r2, r7
 802c832:	bf28      	it	cs
 802c834:	465a      	movcs	r2, fp
 802c836:	4288      	cmp	r0, r1
 802c838:	f240 80f5 	bls.w	802ca26 <__sfvwrite_r+0x25e>
 802c83c:	441d      	add	r5, r3
 802c83e:	42aa      	cmp	r2, r5
 802c840:	f340 80f1 	ble.w	802ca26 <__sfvwrite_r+0x25e>
 802c844:	4651      	mov	r1, sl
 802c846:	462a      	mov	r2, r5
 802c848:	f000 f9f8 	bl	802cc3c <memmove>
 802c84c:	6823      	ldr	r3, [r4, #0]
 802c84e:	442b      	add	r3, r5
 802c850:	6023      	str	r3, [r4, #0]
 802c852:	4621      	mov	r1, r4
 802c854:	4630      	mov	r0, r6
 802c856:	f7ff fe23 	bl	802c4a0 <_fflush_r>
 802c85a:	2800      	cmp	r0, #0
 802c85c:	d167      	bne.n	802c92e <__sfvwrite_r+0x166>
 802c85e:	1b7f      	subs	r7, r7, r5
 802c860:	f040 80f9 	bne.w	802ca56 <__sfvwrite_r+0x28e>
 802c864:	4621      	mov	r1, r4
 802c866:	4630      	mov	r0, r6
 802c868:	f7ff fe1a 	bl	802c4a0 <_fflush_r>
 802c86c:	2800      	cmp	r0, #0
 802c86e:	d15e      	bne.n	802c92e <__sfvwrite_r+0x166>
 802c870:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c874:	1b5b      	subs	r3, r3, r5
 802c876:	44aa      	add	sl, r5
 802c878:	ebab 0b05 	sub.w	fp, fp, r5
 802c87c:	f8c9 3008 	str.w	r3, [r9, #8]
 802c880:	2b00      	cmp	r3, #0
 802c882:	d1c0      	bne.n	802c806 <__sfvwrite_r+0x3e>
 802c884:	e7a7      	b.n	802c7d6 <__sfvwrite_r+0xe>
 802c886:	4621      	mov	r1, r4
 802c888:	4630      	mov	r0, r6
 802c88a:	f000 f907 	bl	802ca9c <__swsetup_r>
 802c88e:	2800      	cmp	r0, #0
 802c890:	d0ab      	beq.n	802c7ea <__sfvwrite_r+0x22>
 802c892:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c896:	e79f      	b.n	802c7d8 <__sfvwrite_r+0x10>
 802c898:	e9d8 a500 	ldrd	sl, r5, [r8]
 802c89c:	f108 0808 	add.w	r8, r8, #8
 802c8a0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802c8a4:	69e1      	ldr	r1, [r4, #28]
 802c8a6:	2d00      	cmp	r5, #0
 802c8a8:	d0f6      	beq.n	802c898 <__sfvwrite_r+0xd0>
 802c8aa:	42bd      	cmp	r5, r7
 802c8ac:	462b      	mov	r3, r5
 802c8ae:	4652      	mov	r2, sl
 802c8b0:	bf28      	it	cs
 802c8b2:	463b      	movcs	r3, r7
 802c8b4:	4630      	mov	r0, r6
 802c8b6:	47d8      	blx	fp
 802c8b8:	2800      	cmp	r0, #0
 802c8ba:	dd38      	ble.n	802c92e <__sfvwrite_r+0x166>
 802c8bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c8c0:	1a1b      	subs	r3, r3, r0
 802c8c2:	4482      	add	sl, r0
 802c8c4:	1a2d      	subs	r5, r5, r0
 802c8c6:	f8c9 3008 	str.w	r3, [r9, #8]
 802c8ca:	2b00      	cmp	r3, #0
 802c8cc:	d1e8      	bne.n	802c8a0 <__sfvwrite_r+0xd8>
 802c8ce:	e782      	b.n	802c7d6 <__sfvwrite_r+0xe>
 802c8d0:	f04f 0a00 	mov.w	sl, #0
 802c8d4:	4f61      	ldr	r7, [pc, #388]	@ (802ca5c <__sfvwrite_r+0x294>)
 802c8d6:	4655      	mov	r5, sl
 802c8d8:	e7e2      	b.n	802c8a0 <__sfvwrite_r+0xd8>
 802c8da:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802c8de:	f108 0808 	add.w	r8, r8, #8
 802c8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c8e6:	6820      	ldr	r0, [r4, #0]
 802c8e8:	68a2      	ldr	r2, [r4, #8]
 802c8ea:	f1ba 0f00 	cmp.w	sl, #0
 802c8ee:	d0f4      	beq.n	802c8da <__sfvwrite_r+0x112>
 802c8f0:	0599      	lsls	r1, r3, #22
 802c8f2:	d563      	bpl.n	802c9bc <__sfvwrite_r+0x1f4>
 802c8f4:	4552      	cmp	r2, sl
 802c8f6:	d836      	bhi.n	802c966 <__sfvwrite_r+0x19e>
 802c8f8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802c8fc:	d033      	beq.n	802c966 <__sfvwrite_r+0x19e>
 802c8fe:	6921      	ldr	r1, [r4, #16]
 802c900:	6965      	ldr	r5, [r4, #20]
 802c902:	eba0 0b01 	sub.w	fp, r0, r1
 802c906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c90a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c90e:	f10b 0201 	add.w	r2, fp, #1
 802c912:	106d      	asrs	r5, r5, #1
 802c914:	4452      	add	r2, sl
 802c916:	4295      	cmp	r5, r2
 802c918:	bf38      	it	cc
 802c91a:	4615      	movcc	r5, r2
 802c91c:	055b      	lsls	r3, r3, #21
 802c91e:	d53d      	bpl.n	802c99c <__sfvwrite_r+0x1d4>
 802c920:	4629      	mov	r1, r5
 802c922:	4630      	mov	r0, r6
 802c924:	f002 fbfa 	bl	802f11c <_malloc_r>
 802c928:	b948      	cbnz	r0, 802c93e <__sfvwrite_r+0x176>
 802c92a:	230c      	movs	r3, #12
 802c92c:	6033      	str	r3, [r6, #0]
 802c92e:	89a3      	ldrh	r3, [r4, #12]
 802c930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c934:	81a3      	strh	r3, [r4, #12]
 802c936:	e7ac      	b.n	802c892 <__sfvwrite_r+0xca>
 802c938:	461f      	mov	r7, r3
 802c93a:	469a      	mov	sl, r3
 802c93c:	e7d1      	b.n	802c8e2 <__sfvwrite_r+0x11a>
 802c93e:	465a      	mov	r2, fp
 802c940:	6921      	ldr	r1, [r4, #16]
 802c942:	9001      	str	r0, [sp, #4]
 802c944:	f001 fbd0 	bl	802e0e8 <memcpy>
 802c948:	89a2      	ldrh	r2, [r4, #12]
 802c94a:	9b01      	ldr	r3, [sp, #4]
 802c94c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802c950:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802c954:	81a2      	strh	r2, [r4, #12]
 802c956:	6123      	str	r3, [r4, #16]
 802c958:	6165      	str	r5, [r4, #20]
 802c95a:	445b      	add	r3, fp
 802c95c:	eba5 050b 	sub.w	r5, r5, fp
 802c960:	6023      	str	r3, [r4, #0]
 802c962:	4652      	mov	r2, sl
 802c964:	60a5      	str	r5, [r4, #8]
 802c966:	4552      	cmp	r2, sl
 802c968:	bf28      	it	cs
 802c96a:	4652      	movcs	r2, sl
 802c96c:	6820      	ldr	r0, [r4, #0]
 802c96e:	9201      	str	r2, [sp, #4]
 802c970:	4639      	mov	r1, r7
 802c972:	f000 f963 	bl	802cc3c <memmove>
 802c976:	68a3      	ldr	r3, [r4, #8]
 802c978:	9a01      	ldr	r2, [sp, #4]
 802c97a:	1a9b      	subs	r3, r3, r2
 802c97c:	60a3      	str	r3, [r4, #8]
 802c97e:	6823      	ldr	r3, [r4, #0]
 802c980:	4413      	add	r3, r2
 802c982:	4655      	mov	r5, sl
 802c984:	6023      	str	r3, [r4, #0]
 802c986:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c98a:	1b5b      	subs	r3, r3, r5
 802c98c:	442f      	add	r7, r5
 802c98e:	ebaa 0a05 	sub.w	sl, sl, r5
 802c992:	f8c9 3008 	str.w	r3, [r9, #8]
 802c996:	2b00      	cmp	r3, #0
 802c998:	d1a3      	bne.n	802c8e2 <__sfvwrite_r+0x11a>
 802c99a:	e71c      	b.n	802c7d6 <__sfvwrite_r+0xe>
 802c99c:	462a      	mov	r2, r5
 802c99e:	4630      	mov	r0, r6
 802c9a0:	f007 fbcc 	bl	803413c <_realloc_r>
 802c9a4:	4603      	mov	r3, r0
 802c9a6:	2800      	cmp	r0, #0
 802c9a8:	d1d5      	bne.n	802c956 <__sfvwrite_r+0x18e>
 802c9aa:	6921      	ldr	r1, [r4, #16]
 802c9ac:	4630      	mov	r0, r6
 802c9ae:	f002 fa9d 	bl	802eeec <_free_r>
 802c9b2:	89a3      	ldrh	r3, [r4, #12]
 802c9b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802c9b8:	81a3      	strh	r3, [r4, #12]
 802c9ba:	e7b6      	b.n	802c92a <__sfvwrite_r+0x162>
 802c9bc:	6923      	ldr	r3, [r4, #16]
 802c9be:	4283      	cmp	r3, r0
 802c9c0:	d302      	bcc.n	802c9c8 <__sfvwrite_r+0x200>
 802c9c2:	6961      	ldr	r1, [r4, #20]
 802c9c4:	4551      	cmp	r1, sl
 802c9c6:	d915      	bls.n	802c9f4 <__sfvwrite_r+0x22c>
 802c9c8:	4552      	cmp	r2, sl
 802c9ca:	bf28      	it	cs
 802c9cc:	4652      	movcs	r2, sl
 802c9ce:	4639      	mov	r1, r7
 802c9d0:	4615      	mov	r5, r2
 802c9d2:	f000 f933 	bl	802cc3c <memmove>
 802c9d6:	68a3      	ldr	r3, [r4, #8]
 802c9d8:	6822      	ldr	r2, [r4, #0]
 802c9da:	1b5b      	subs	r3, r3, r5
 802c9dc:	442a      	add	r2, r5
 802c9de:	60a3      	str	r3, [r4, #8]
 802c9e0:	6022      	str	r2, [r4, #0]
 802c9e2:	2b00      	cmp	r3, #0
 802c9e4:	d1cf      	bne.n	802c986 <__sfvwrite_r+0x1be>
 802c9e6:	4621      	mov	r1, r4
 802c9e8:	4630      	mov	r0, r6
 802c9ea:	f7ff fd59 	bl	802c4a0 <_fflush_r>
 802c9ee:	2800      	cmp	r0, #0
 802c9f0:	d0c9      	beq.n	802c986 <__sfvwrite_r+0x1be>
 802c9f2:	e79c      	b.n	802c92e <__sfvwrite_r+0x166>
 802c9f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802c9f8:	4553      	cmp	r3, sl
 802c9fa:	bf28      	it	cs
 802c9fc:	4653      	movcs	r3, sl
 802c9fe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802ca00:	fb93 f3f1 	sdiv	r3, r3, r1
 802ca04:	463a      	mov	r2, r7
 802ca06:	434b      	muls	r3, r1
 802ca08:	4630      	mov	r0, r6
 802ca0a:	69e1      	ldr	r1, [r4, #28]
 802ca0c:	47a8      	blx	r5
 802ca0e:	1e05      	subs	r5, r0, #0
 802ca10:	dcb9      	bgt.n	802c986 <__sfvwrite_r+0x1be>
 802ca12:	e78c      	b.n	802c92e <__sfvwrite_r+0x166>
 802ca14:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802ca18:	2000      	movs	r0, #0
 802ca1a:	f108 0808 	add.w	r8, r8, #8
 802ca1e:	e6f2      	b.n	802c806 <__sfvwrite_r+0x3e>
 802ca20:	f10b 0701 	add.w	r7, fp, #1
 802ca24:	e6ff      	b.n	802c826 <__sfvwrite_r+0x5e>
 802ca26:	4293      	cmp	r3, r2
 802ca28:	dc08      	bgt.n	802ca3c <__sfvwrite_r+0x274>
 802ca2a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802ca2c:	69e1      	ldr	r1, [r4, #28]
 802ca2e:	4652      	mov	r2, sl
 802ca30:	4630      	mov	r0, r6
 802ca32:	47a8      	blx	r5
 802ca34:	1e05      	subs	r5, r0, #0
 802ca36:	f73f af12 	bgt.w	802c85e <__sfvwrite_r+0x96>
 802ca3a:	e778      	b.n	802c92e <__sfvwrite_r+0x166>
 802ca3c:	4651      	mov	r1, sl
 802ca3e:	9201      	str	r2, [sp, #4]
 802ca40:	f000 f8fc 	bl	802cc3c <memmove>
 802ca44:	9a01      	ldr	r2, [sp, #4]
 802ca46:	68a3      	ldr	r3, [r4, #8]
 802ca48:	1a9b      	subs	r3, r3, r2
 802ca4a:	60a3      	str	r3, [r4, #8]
 802ca4c:	6823      	ldr	r3, [r4, #0]
 802ca4e:	4413      	add	r3, r2
 802ca50:	6023      	str	r3, [r4, #0]
 802ca52:	4615      	mov	r5, r2
 802ca54:	e703      	b.n	802c85e <__sfvwrite_r+0x96>
 802ca56:	2001      	movs	r0, #1
 802ca58:	e70a      	b.n	802c870 <__sfvwrite_r+0xa8>
 802ca5a:	bf00      	nop
 802ca5c:	7ffffc00 	.word	0x7ffffc00

0802ca60 <_fwalk_sglue>:
 802ca60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ca64:	4607      	mov	r7, r0
 802ca66:	4688      	mov	r8, r1
 802ca68:	4614      	mov	r4, r2
 802ca6a:	2600      	movs	r6, #0
 802ca6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ca70:	f1b9 0901 	subs.w	r9, r9, #1
 802ca74:	d505      	bpl.n	802ca82 <_fwalk_sglue+0x22>
 802ca76:	6824      	ldr	r4, [r4, #0]
 802ca78:	2c00      	cmp	r4, #0
 802ca7a:	d1f7      	bne.n	802ca6c <_fwalk_sglue+0xc>
 802ca7c:	4630      	mov	r0, r6
 802ca7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ca82:	89ab      	ldrh	r3, [r5, #12]
 802ca84:	2b01      	cmp	r3, #1
 802ca86:	d907      	bls.n	802ca98 <_fwalk_sglue+0x38>
 802ca88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ca8c:	3301      	adds	r3, #1
 802ca8e:	d003      	beq.n	802ca98 <_fwalk_sglue+0x38>
 802ca90:	4629      	mov	r1, r5
 802ca92:	4638      	mov	r0, r7
 802ca94:	47c0      	blx	r8
 802ca96:	4306      	orrs	r6, r0
 802ca98:	3568      	adds	r5, #104	@ 0x68
 802ca9a:	e7e9      	b.n	802ca70 <_fwalk_sglue+0x10>

0802ca9c <__swsetup_r>:
 802ca9c:	b538      	push	{r3, r4, r5, lr}
 802ca9e:	4b29      	ldr	r3, [pc, #164]	@ (802cb44 <__swsetup_r+0xa8>)
 802caa0:	4605      	mov	r5, r0
 802caa2:	6818      	ldr	r0, [r3, #0]
 802caa4:	460c      	mov	r4, r1
 802caa6:	b118      	cbz	r0, 802cab0 <__swsetup_r+0x14>
 802caa8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802caaa:	b90b      	cbnz	r3, 802cab0 <__swsetup_r+0x14>
 802caac:	f7ff fe3a 	bl	802c724 <__sinit>
 802cab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cab4:	0719      	lsls	r1, r3, #28
 802cab6:	d422      	bmi.n	802cafe <__swsetup_r+0x62>
 802cab8:	06da      	lsls	r2, r3, #27
 802caba:	d407      	bmi.n	802cacc <__swsetup_r+0x30>
 802cabc:	2209      	movs	r2, #9
 802cabe:	602a      	str	r2, [r5, #0]
 802cac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cac4:	81a3      	strh	r3, [r4, #12]
 802cac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802caca:	e033      	b.n	802cb34 <__swsetup_r+0x98>
 802cacc:	0758      	lsls	r0, r3, #29
 802cace:	d512      	bpl.n	802caf6 <__swsetup_r+0x5a>
 802cad0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802cad2:	b141      	cbz	r1, 802cae6 <__swsetup_r+0x4a>
 802cad4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802cad8:	4299      	cmp	r1, r3
 802cada:	d002      	beq.n	802cae2 <__swsetup_r+0x46>
 802cadc:	4628      	mov	r0, r5
 802cade:	f002 fa05 	bl	802eeec <_free_r>
 802cae2:	2300      	movs	r3, #0
 802cae4:	6323      	str	r3, [r4, #48]	@ 0x30
 802cae6:	89a3      	ldrh	r3, [r4, #12]
 802cae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802caec:	81a3      	strh	r3, [r4, #12]
 802caee:	2300      	movs	r3, #0
 802caf0:	6063      	str	r3, [r4, #4]
 802caf2:	6923      	ldr	r3, [r4, #16]
 802caf4:	6023      	str	r3, [r4, #0]
 802caf6:	89a3      	ldrh	r3, [r4, #12]
 802caf8:	f043 0308 	orr.w	r3, r3, #8
 802cafc:	81a3      	strh	r3, [r4, #12]
 802cafe:	6923      	ldr	r3, [r4, #16]
 802cb00:	b94b      	cbnz	r3, 802cb16 <__swsetup_r+0x7a>
 802cb02:	89a3      	ldrh	r3, [r4, #12]
 802cb04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802cb08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802cb0c:	d003      	beq.n	802cb16 <__swsetup_r+0x7a>
 802cb0e:	4621      	mov	r1, r4
 802cb10:	4628      	mov	r0, r5
 802cb12:	f005 fc2b 	bl	803236c <__smakebuf_r>
 802cb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cb1a:	f013 0201 	ands.w	r2, r3, #1
 802cb1e:	d00a      	beq.n	802cb36 <__swsetup_r+0x9a>
 802cb20:	2200      	movs	r2, #0
 802cb22:	60a2      	str	r2, [r4, #8]
 802cb24:	6962      	ldr	r2, [r4, #20]
 802cb26:	4252      	negs	r2, r2
 802cb28:	61a2      	str	r2, [r4, #24]
 802cb2a:	6922      	ldr	r2, [r4, #16]
 802cb2c:	b942      	cbnz	r2, 802cb40 <__swsetup_r+0xa4>
 802cb2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802cb32:	d1c5      	bne.n	802cac0 <__swsetup_r+0x24>
 802cb34:	bd38      	pop	{r3, r4, r5, pc}
 802cb36:	0799      	lsls	r1, r3, #30
 802cb38:	bf58      	it	pl
 802cb3a:	6962      	ldrpl	r2, [r4, #20]
 802cb3c:	60a2      	str	r2, [r4, #8]
 802cb3e:	e7f4      	b.n	802cb2a <__swsetup_r+0x8e>
 802cb40:	2000      	movs	r0, #0
 802cb42:	e7f7      	b.n	802cb34 <__swsetup_r+0x98>
 802cb44:	200002d8 	.word	0x200002d8

0802cb48 <memcmp>:
 802cb48:	b510      	push	{r4, lr}
 802cb4a:	3901      	subs	r1, #1
 802cb4c:	4402      	add	r2, r0
 802cb4e:	4290      	cmp	r0, r2
 802cb50:	d101      	bne.n	802cb56 <memcmp+0xe>
 802cb52:	2000      	movs	r0, #0
 802cb54:	e005      	b.n	802cb62 <memcmp+0x1a>
 802cb56:	7803      	ldrb	r3, [r0, #0]
 802cb58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802cb5c:	42a3      	cmp	r3, r4
 802cb5e:	d001      	beq.n	802cb64 <memcmp+0x1c>
 802cb60:	1b18      	subs	r0, r3, r4
 802cb62:	bd10      	pop	{r4, pc}
 802cb64:	3001      	adds	r0, #1
 802cb66:	e7f2      	b.n	802cb4e <memcmp+0x6>

0802cb68 <__fputwc>:
 802cb68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802cb6c:	4680      	mov	r8, r0
 802cb6e:	460f      	mov	r7, r1
 802cb70:	4614      	mov	r4, r2
 802cb72:	f001 fa05 	bl	802df80 <__locale_mb_cur_max>
 802cb76:	2801      	cmp	r0, #1
 802cb78:	4605      	mov	r5, r0
 802cb7a:	d11b      	bne.n	802cbb4 <__fputwc+0x4c>
 802cb7c:	1e7b      	subs	r3, r7, #1
 802cb7e:	2bfe      	cmp	r3, #254	@ 0xfe
 802cb80:	d818      	bhi.n	802cbb4 <__fputwc+0x4c>
 802cb82:	f88d 7004 	strb.w	r7, [sp, #4]
 802cb86:	2600      	movs	r6, #0
 802cb88:	f10d 0904 	add.w	r9, sp, #4
 802cb8c:	42ae      	cmp	r6, r5
 802cb8e:	d021      	beq.n	802cbd4 <__fputwc+0x6c>
 802cb90:	68a3      	ldr	r3, [r4, #8]
 802cb92:	f816 1009 	ldrb.w	r1, [r6, r9]
 802cb96:	3b01      	subs	r3, #1
 802cb98:	2b00      	cmp	r3, #0
 802cb9a:	60a3      	str	r3, [r4, #8]
 802cb9c:	da04      	bge.n	802cba8 <__fputwc+0x40>
 802cb9e:	69a2      	ldr	r2, [r4, #24]
 802cba0:	4293      	cmp	r3, r2
 802cba2:	db1b      	blt.n	802cbdc <__fputwc+0x74>
 802cba4:	290a      	cmp	r1, #10
 802cba6:	d019      	beq.n	802cbdc <__fputwc+0x74>
 802cba8:	6823      	ldr	r3, [r4, #0]
 802cbaa:	1c5a      	adds	r2, r3, #1
 802cbac:	6022      	str	r2, [r4, #0]
 802cbae:	7019      	strb	r1, [r3, #0]
 802cbb0:	3601      	adds	r6, #1
 802cbb2:	e7eb      	b.n	802cb8c <__fputwc+0x24>
 802cbb4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802cbb8:	463a      	mov	r2, r7
 802cbba:	a901      	add	r1, sp, #4
 802cbbc:	4640      	mov	r0, r8
 802cbbe:	f001 faa1 	bl	802e104 <_wcrtomb_r>
 802cbc2:	1c43      	adds	r3, r0, #1
 802cbc4:	4605      	mov	r5, r0
 802cbc6:	d1de      	bne.n	802cb86 <__fputwc+0x1e>
 802cbc8:	89a3      	ldrh	r3, [r4, #12]
 802cbca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802cbce:	81a3      	strh	r3, [r4, #12]
 802cbd0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802cbd4:	4638      	mov	r0, r7
 802cbd6:	b003      	add	sp, #12
 802cbd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802cbdc:	4622      	mov	r2, r4
 802cbde:	4640      	mov	r0, r8
 802cbe0:	f008 fb1d 	bl	803521e <__swbuf_r>
 802cbe4:	3001      	adds	r0, #1
 802cbe6:	d1e3      	bne.n	802cbb0 <__fputwc+0x48>
 802cbe8:	e7f2      	b.n	802cbd0 <__fputwc+0x68>

0802cbea <_fputwc_r>:
 802cbea:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802cbec:	07db      	lsls	r3, r3, #31
 802cbee:	b570      	push	{r4, r5, r6, lr}
 802cbf0:	4605      	mov	r5, r0
 802cbf2:	460e      	mov	r6, r1
 802cbf4:	4614      	mov	r4, r2
 802cbf6:	d405      	bmi.n	802cc04 <_fputwc_r+0x1a>
 802cbf8:	8993      	ldrh	r3, [r2, #12]
 802cbfa:	0598      	lsls	r0, r3, #22
 802cbfc:	d402      	bmi.n	802cc04 <_fputwc_r+0x1a>
 802cbfe:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802cc00:	f001 fa6f 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 802cc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cc08:	0499      	lsls	r1, r3, #18
 802cc0a:	d406      	bmi.n	802cc1a <_fputwc_r+0x30>
 802cc0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802cc10:	81a3      	strh	r3, [r4, #12]
 802cc12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cc14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802cc18:	6663      	str	r3, [r4, #100]	@ 0x64
 802cc1a:	4622      	mov	r2, r4
 802cc1c:	4628      	mov	r0, r5
 802cc1e:	4631      	mov	r1, r6
 802cc20:	f7ff ffa2 	bl	802cb68 <__fputwc>
 802cc24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802cc26:	07da      	lsls	r2, r3, #31
 802cc28:	4605      	mov	r5, r0
 802cc2a:	d405      	bmi.n	802cc38 <_fputwc_r+0x4e>
 802cc2c:	89a3      	ldrh	r3, [r4, #12]
 802cc2e:	059b      	lsls	r3, r3, #22
 802cc30:	d402      	bmi.n	802cc38 <_fputwc_r+0x4e>
 802cc32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802cc34:	f001 fa57 	bl	802e0e6 <__retarget_lock_release_recursive>
 802cc38:	4628      	mov	r0, r5
 802cc3a:	bd70      	pop	{r4, r5, r6, pc}

0802cc3c <memmove>:
 802cc3c:	4288      	cmp	r0, r1
 802cc3e:	b510      	push	{r4, lr}
 802cc40:	eb01 0402 	add.w	r4, r1, r2
 802cc44:	d902      	bls.n	802cc4c <memmove+0x10>
 802cc46:	4284      	cmp	r4, r0
 802cc48:	4623      	mov	r3, r4
 802cc4a:	d807      	bhi.n	802cc5c <memmove+0x20>
 802cc4c:	1e43      	subs	r3, r0, #1
 802cc4e:	42a1      	cmp	r1, r4
 802cc50:	d008      	beq.n	802cc64 <memmove+0x28>
 802cc52:	f811 2b01 	ldrb.w	r2, [r1], #1
 802cc56:	f803 2f01 	strb.w	r2, [r3, #1]!
 802cc5a:	e7f8      	b.n	802cc4e <memmove+0x12>
 802cc5c:	4402      	add	r2, r0
 802cc5e:	4601      	mov	r1, r0
 802cc60:	428a      	cmp	r2, r1
 802cc62:	d100      	bne.n	802cc66 <memmove+0x2a>
 802cc64:	bd10      	pop	{r4, pc}
 802cc66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802cc6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802cc6e:	e7f7      	b.n	802cc60 <memmove+0x24>

0802cc70 <memset>:
 802cc70:	4402      	add	r2, r0
 802cc72:	4603      	mov	r3, r0
 802cc74:	4293      	cmp	r3, r2
 802cc76:	d100      	bne.n	802cc7a <memset+0xa>
 802cc78:	4770      	bx	lr
 802cc7a:	f803 1b01 	strb.w	r1, [r3], #1
 802cc7e:	e7f9      	b.n	802cc74 <memset+0x4>

0802cc80 <strcat>:
 802cc80:	b510      	push	{r4, lr}
 802cc82:	4602      	mov	r2, r0
 802cc84:	7814      	ldrb	r4, [r2, #0]
 802cc86:	4613      	mov	r3, r2
 802cc88:	3201      	adds	r2, #1
 802cc8a:	2c00      	cmp	r4, #0
 802cc8c:	d1fa      	bne.n	802cc84 <strcat+0x4>
 802cc8e:	3b01      	subs	r3, #1
 802cc90:	f811 2b01 	ldrb.w	r2, [r1], #1
 802cc94:	f803 2f01 	strb.w	r2, [r3, #1]!
 802cc98:	2a00      	cmp	r2, #0
 802cc9a:	d1f9      	bne.n	802cc90 <strcat+0x10>
 802cc9c:	bd10      	pop	{r4, pc}

0802cc9e <strchr>:
 802cc9e:	b2c9      	uxtb	r1, r1
 802cca0:	4603      	mov	r3, r0
 802cca2:	4618      	mov	r0, r3
 802cca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cca8:	b112      	cbz	r2, 802ccb0 <strchr+0x12>
 802ccaa:	428a      	cmp	r2, r1
 802ccac:	d1f9      	bne.n	802cca2 <strchr+0x4>
 802ccae:	4770      	bx	lr
 802ccb0:	2900      	cmp	r1, #0
 802ccb2:	bf18      	it	ne
 802ccb4:	2000      	movne	r0, #0
 802ccb6:	4770      	bx	lr

0802ccb8 <strcspn>:
 802ccb8:	b570      	push	{r4, r5, r6, lr}
 802ccba:	4603      	mov	r3, r0
 802ccbc:	461e      	mov	r6, r3
 802ccbe:	f813 4b01 	ldrb.w	r4, [r3], #1
 802ccc2:	b144      	cbz	r4, 802ccd6 <strcspn+0x1e>
 802ccc4:	1e4a      	subs	r2, r1, #1
 802ccc6:	e001      	b.n	802cccc <strcspn+0x14>
 802ccc8:	42a5      	cmp	r5, r4
 802ccca:	d004      	beq.n	802ccd6 <strcspn+0x1e>
 802cccc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802ccd0:	2d00      	cmp	r5, #0
 802ccd2:	d1f9      	bne.n	802ccc8 <strcspn+0x10>
 802ccd4:	e7f2      	b.n	802ccbc <strcspn+0x4>
 802ccd6:	1a30      	subs	r0, r6, r0
 802ccd8:	bd70      	pop	{r4, r5, r6, pc}

0802ccda <strncmp>:
 802ccda:	b510      	push	{r4, lr}
 802ccdc:	b16a      	cbz	r2, 802ccfa <strncmp+0x20>
 802ccde:	3901      	subs	r1, #1
 802cce0:	1884      	adds	r4, r0, r2
 802cce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cce6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802ccea:	429a      	cmp	r2, r3
 802ccec:	d103      	bne.n	802ccf6 <strncmp+0x1c>
 802ccee:	42a0      	cmp	r0, r4
 802ccf0:	d001      	beq.n	802ccf6 <strncmp+0x1c>
 802ccf2:	2a00      	cmp	r2, #0
 802ccf4:	d1f5      	bne.n	802cce2 <strncmp+0x8>
 802ccf6:	1ad0      	subs	r0, r2, r3
 802ccf8:	bd10      	pop	{r4, pc}
 802ccfa:	4610      	mov	r0, r2
 802ccfc:	e7fc      	b.n	802ccf8 <strncmp+0x1e>

0802ccfe <strncpy>:
 802ccfe:	b510      	push	{r4, lr}
 802cd00:	3901      	subs	r1, #1
 802cd02:	4603      	mov	r3, r0
 802cd04:	b132      	cbz	r2, 802cd14 <strncpy+0x16>
 802cd06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802cd0a:	f803 4b01 	strb.w	r4, [r3], #1
 802cd0e:	3a01      	subs	r2, #1
 802cd10:	2c00      	cmp	r4, #0
 802cd12:	d1f7      	bne.n	802cd04 <strncpy+0x6>
 802cd14:	441a      	add	r2, r3
 802cd16:	2100      	movs	r1, #0
 802cd18:	4293      	cmp	r3, r2
 802cd1a:	d100      	bne.n	802cd1e <strncpy+0x20>
 802cd1c:	bd10      	pop	{r4, pc}
 802cd1e:	f803 1b01 	strb.w	r1, [r3], #1
 802cd22:	e7f9      	b.n	802cd18 <strncpy+0x1a>

0802cd24 <strrchr>:
 802cd24:	b538      	push	{r3, r4, r5, lr}
 802cd26:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802cd2a:	4603      	mov	r3, r0
 802cd2c:	d10e      	bne.n	802cd4c <strrchr+0x28>
 802cd2e:	4621      	mov	r1, r4
 802cd30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cd34:	f7ff bfb3 	b.w	802cc9e <strchr>
 802cd38:	1c43      	adds	r3, r0, #1
 802cd3a:	4605      	mov	r5, r0
 802cd3c:	4621      	mov	r1, r4
 802cd3e:	4618      	mov	r0, r3
 802cd40:	f7ff ffad 	bl	802cc9e <strchr>
 802cd44:	2800      	cmp	r0, #0
 802cd46:	d1f7      	bne.n	802cd38 <strrchr+0x14>
 802cd48:	4628      	mov	r0, r5
 802cd4a:	bd38      	pop	{r3, r4, r5, pc}
 802cd4c:	2500      	movs	r5, #0
 802cd4e:	e7f5      	b.n	802cd3c <strrchr+0x18>

0802cd50 <strspn>:
 802cd50:	b570      	push	{r4, r5, r6, lr}
 802cd52:	4603      	mov	r3, r0
 802cd54:	461e      	mov	r6, r3
 802cd56:	f813 4b01 	ldrb.w	r4, [r3], #1
 802cd5a:	b13c      	cbz	r4, 802cd6c <strspn+0x1c>
 802cd5c:	1e4a      	subs	r2, r1, #1
 802cd5e:	e001      	b.n	802cd64 <strspn+0x14>
 802cd60:	42a5      	cmp	r5, r4
 802cd62:	d0f7      	beq.n	802cd54 <strspn+0x4>
 802cd64:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802cd68:	2d00      	cmp	r5, #0
 802cd6a:	d1f9      	bne.n	802cd60 <strspn+0x10>
 802cd6c:	1a30      	subs	r0, r6, r0
 802cd6e:	bd70      	pop	{r4, r5, r6, pc}

0802cd70 <strstr>:
 802cd70:	780a      	ldrb	r2, [r1, #0]
 802cd72:	b570      	push	{r4, r5, r6, lr}
 802cd74:	b96a      	cbnz	r2, 802cd92 <strstr+0x22>
 802cd76:	bd70      	pop	{r4, r5, r6, pc}
 802cd78:	429a      	cmp	r2, r3
 802cd7a:	d109      	bne.n	802cd90 <strstr+0x20>
 802cd7c:	460c      	mov	r4, r1
 802cd7e:	4605      	mov	r5, r0
 802cd80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802cd84:	2b00      	cmp	r3, #0
 802cd86:	d0f6      	beq.n	802cd76 <strstr+0x6>
 802cd88:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802cd8c:	429e      	cmp	r6, r3
 802cd8e:	d0f7      	beq.n	802cd80 <strstr+0x10>
 802cd90:	3001      	adds	r0, #1
 802cd92:	7803      	ldrb	r3, [r0, #0]
 802cd94:	2b00      	cmp	r3, #0
 802cd96:	d1ef      	bne.n	802cd78 <strstr+0x8>
 802cd98:	4618      	mov	r0, r3
 802cd9a:	e7ec      	b.n	802cd76 <strstr+0x6>

0802cd9c <localtime_r>:
 802cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cda0:	460c      	mov	r4, r1
 802cda2:	4680      	mov	r8, r0
 802cda4:	f008 fab6 	bl	8035314 <__gettzinfo>
 802cda8:	4621      	mov	r1, r4
 802cdaa:	4605      	mov	r5, r0
 802cdac:	4640      	mov	r0, r8
 802cdae:	f008 fab5 	bl	803531c <gmtime_r>
 802cdb2:	6943      	ldr	r3, [r0, #20]
 802cdb4:	0799      	lsls	r1, r3, #30
 802cdb6:	4604      	mov	r4, r0
 802cdb8:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802cdbc:	d106      	bne.n	802cdcc <localtime_r+0x30>
 802cdbe:	2264      	movs	r2, #100	@ 0x64
 802cdc0:	fb97 f3f2 	sdiv	r3, r7, r2
 802cdc4:	fb02 7313 	mls	r3, r2, r3, r7
 802cdc8:	2b00      	cmp	r3, #0
 802cdca:	d170      	bne.n	802ceae <localtime_r+0x112>
 802cdcc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cdd0:	fb97 f3f2 	sdiv	r3, r7, r2
 802cdd4:	fb02 7313 	mls	r3, r2, r3, r7
 802cdd8:	fab3 f383 	clz	r3, r3
 802cddc:	095b      	lsrs	r3, r3, #5
 802cdde:	4e64      	ldr	r6, [pc, #400]	@ (802cf70 <localtime_r+0x1d4>)
 802cde0:	2230      	movs	r2, #48	@ 0x30
 802cde2:	fb02 6603 	mla	r6, r2, r3, r6
 802cde6:	f000 fe97 	bl	802db18 <__tz_lock>
 802cdea:	f000 fea1 	bl	802db30 <_tzset_unlocked>
 802cdee:	4b61      	ldr	r3, [pc, #388]	@ (802cf74 <localtime_r+0x1d8>)
 802cdf0:	681b      	ldr	r3, [r3, #0]
 802cdf2:	2b00      	cmp	r3, #0
 802cdf4:	d06a      	beq.n	802cecc <localtime_r+0x130>
 802cdf6:	686b      	ldr	r3, [r5, #4]
 802cdf8:	42bb      	cmp	r3, r7
 802cdfa:	d15a      	bne.n	802ceb2 <localtime_r+0x116>
 802cdfc:	682f      	ldr	r7, [r5, #0]
 802cdfe:	e9d8 2300 	ldrd	r2, r3, [r8]
 802ce02:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802ce06:	2f00      	cmp	r7, #0
 802ce08:	d15b      	bne.n	802cec2 <localtime_r+0x126>
 802ce0a:	4282      	cmp	r2, r0
 802ce0c:	eb73 0101 	sbcs.w	r1, r3, r1
 802ce10:	db5e      	blt.n	802ced0 <localtime_r+0x134>
 802ce12:	2301      	movs	r3, #1
 802ce14:	6223      	str	r3, [r4, #32]
 802ce16:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802ce18:	6861      	ldr	r1, [r4, #4]
 802ce1a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802ce1e:	fb93 f0f2 	sdiv	r0, r3, r2
 802ce22:	fb02 3310 	mls	r3, r2, r0, r3
 802ce26:	223c      	movs	r2, #60	@ 0x3c
 802ce28:	fb93 f5f2 	sdiv	r5, r3, r2
 802ce2c:	fb02 3215 	mls	r2, r2, r5, r3
 802ce30:	6823      	ldr	r3, [r4, #0]
 802ce32:	1a9b      	subs	r3, r3, r2
 802ce34:	68a2      	ldr	r2, [r4, #8]
 802ce36:	6023      	str	r3, [r4, #0]
 802ce38:	1b49      	subs	r1, r1, r5
 802ce3a:	1a12      	subs	r2, r2, r0
 802ce3c:	2b3b      	cmp	r3, #59	@ 0x3b
 802ce3e:	6061      	str	r1, [r4, #4]
 802ce40:	60a2      	str	r2, [r4, #8]
 802ce42:	dd51      	ble.n	802cee8 <localtime_r+0x14c>
 802ce44:	3101      	adds	r1, #1
 802ce46:	6061      	str	r1, [r4, #4]
 802ce48:	3b3c      	subs	r3, #60	@ 0x3c
 802ce4a:	6023      	str	r3, [r4, #0]
 802ce4c:	6863      	ldr	r3, [r4, #4]
 802ce4e:	2b3b      	cmp	r3, #59	@ 0x3b
 802ce50:	dd50      	ble.n	802cef4 <localtime_r+0x158>
 802ce52:	3201      	adds	r2, #1
 802ce54:	60a2      	str	r2, [r4, #8]
 802ce56:	3b3c      	subs	r3, #60	@ 0x3c
 802ce58:	6063      	str	r3, [r4, #4]
 802ce5a:	68a3      	ldr	r3, [r4, #8]
 802ce5c:	2b17      	cmp	r3, #23
 802ce5e:	dd4f      	ble.n	802cf00 <localtime_r+0x164>
 802ce60:	69e2      	ldr	r2, [r4, #28]
 802ce62:	3201      	adds	r2, #1
 802ce64:	61e2      	str	r2, [r4, #28]
 802ce66:	69a2      	ldr	r2, [r4, #24]
 802ce68:	3201      	adds	r2, #1
 802ce6a:	2a07      	cmp	r2, #7
 802ce6c:	bfa8      	it	ge
 802ce6e:	2200      	movge	r2, #0
 802ce70:	61a2      	str	r2, [r4, #24]
 802ce72:	68e2      	ldr	r2, [r4, #12]
 802ce74:	3b18      	subs	r3, #24
 802ce76:	3201      	adds	r2, #1
 802ce78:	60a3      	str	r3, [r4, #8]
 802ce7a:	6923      	ldr	r3, [r4, #16]
 802ce7c:	60e2      	str	r2, [r4, #12]
 802ce7e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ce82:	428a      	cmp	r2, r1
 802ce84:	dd0e      	ble.n	802cea4 <localtime_r+0x108>
 802ce86:	2b0b      	cmp	r3, #11
 802ce88:	eba2 0201 	sub.w	r2, r2, r1
 802ce8c:	60e2      	str	r2, [r4, #12]
 802ce8e:	f103 0201 	add.w	r2, r3, #1
 802ce92:	bf09      	itett	eq
 802ce94:	6963      	ldreq	r3, [r4, #20]
 802ce96:	6122      	strne	r2, [r4, #16]
 802ce98:	2200      	moveq	r2, #0
 802ce9a:	3301      	addeq	r3, #1
 802ce9c:	bf02      	ittt	eq
 802ce9e:	6122      	streq	r2, [r4, #16]
 802cea0:	6163      	streq	r3, [r4, #20]
 802cea2:	61e2      	streq	r2, [r4, #28]
 802cea4:	f000 fe3e 	bl	802db24 <__tz_unlock>
 802cea8:	4620      	mov	r0, r4
 802ceaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ceae:	2301      	movs	r3, #1
 802ceb0:	e795      	b.n	802cdde <localtime_r+0x42>
 802ceb2:	4638      	mov	r0, r7
 802ceb4:	f000 fd86 	bl	802d9c4 <__tzcalc_limits>
 802ceb8:	2800      	cmp	r0, #0
 802ceba:	d19f      	bne.n	802cdfc <localtime_r+0x60>
 802cebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802cec0:	e004      	b.n	802cecc <localtime_r+0x130>
 802cec2:	4282      	cmp	r2, r0
 802cec4:	eb73 0101 	sbcs.w	r1, r3, r1
 802cec8:	da02      	bge.n	802ced0 <localtime_r+0x134>
 802ceca:	2300      	movs	r3, #0
 802cecc:	6223      	str	r3, [r4, #32]
 802cece:	e009      	b.n	802cee4 <localtime_r+0x148>
 802ced0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802ced4:	4282      	cmp	r2, r0
 802ced6:	418b      	sbcs	r3, r1
 802ced8:	bfb4      	ite	lt
 802ceda:	2301      	movlt	r3, #1
 802cedc:	2300      	movge	r3, #0
 802cede:	6223      	str	r3, [r4, #32]
 802cee0:	2b00      	cmp	r3, #0
 802cee2:	d198      	bne.n	802ce16 <localtime_r+0x7a>
 802cee4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802cee6:	e797      	b.n	802ce18 <localtime_r+0x7c>
 802cee8:	2b00      	cmp	r3, #0
 802ceea:	daaf      	bge.n	802ce4c <localtime_r+0xb0>
 802ceec:	3901      	subs	r1, #1
 802ceee:	6061      	str	r1, [r4, #4]
 802cef0:	333c      	adds	r3, #60	@ 0x3c
 802cef2:	e7aa      	b.n	802ce4a <localtime_r+0xae>
 802cef4:	2b00      	cmp	r3, #0
 802cef6:	dab0      	bge.n	802ce5a <localtime_r+0xbe>
 802cef8:	3a01      	subs	r2, #1
 802cefa:	60a2      	str	r2, [r4, #8]
 802cefc:	333c      	adds	r3, #60	@ 0x3c
 802cefe:	e7ab      	b.n	802ce58 <localtime_r+0xbc>
 802cf00:	2b00      	cmp	r3, #0
 802cf02:	dacf      	bge.n	802cea4 <localtime_r+0x108>
 802cf04:	69e2      	ldr	r2, [r4, #28]
 802cf06:	3a01      	subs	r2, #1
 802cf08:	61e2      	str	r2, [r4, #28]
 802cf0a:	69a2      	ldr	r2, [r4, #24]
 802cf0c:	3a01      	subs	r2, #1
 802cf0e:	bf48      	it	mi
 802cf10:	2206      	movmi	r2, #6
 802cf12:	61a2      	str	r2, [r4, #24]
 802cf14:	68e2      	ldr	r2, [r4, #12]
 802cf16:	3318      	adds	r3, #24
 802cf18:	3a01      	subs	r2, #1
 802cf1a:	60e2      	str	r2, [r4, #12]
 802cf1c:	60a3      	str	r3, [r4, #8]
 802cf1e:	2a00      	cmp	r2, #0
 802cf20:	d1c0      	bne.n	802cea4 <localtime_r+0x108>
 802cf22:	6923      	ldr	r3, [r4, #16]
 802cf24:	3b01      	subs	r3, #1
 802cf26:	d405      	bmi.n	802cf34 <localtime_r+0x198>
 802cf28:	6123      	str	r3, [r4, #16]
 802cf2a:	6923      	ldr	r3, [r4, #16]
 802cf2c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802cf30:	60e3      	str	r3, [r4, #12]
 802cf32:	e7b7      	b.n	802cea4 <localtime_r+0x108>
 802cf34:	230b      	movs	r3, #11
 802cf36:	6123      	str	r3, [r4, #16]
 802cf38:	6963      	ldr	r3, [r4, #20]
 802cf3a:	1e5a      	subs	r2, r3, #1
 802cf3c:	6162      	str	r2, [r4, #20]
 802cf3e:	0792      	lsls	r2, r2, #30
 802cf40:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802cf44:	d105      	bne.n	802cf52 <localtime_r+0x1b6>
 802cf46:	2164      	movs	r1, #100	@ 0x64
 802cf48:	fb93 f2f1 	sdiv	r2, r3, r1
 802cf4c:	fb01 3212 	mls	r2, r1, r2, r3
 802cf50:	b962      	cbnz	r2, 802cf6c <localtime_r+0x1d0>
 802cf52:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cf56:	fb93 f1f2 	sdiv	r1, r3, r2
 802cf5a:	fb02 3311 	mls	r3, r2, r1, r3
 802cf5e:	fab3 f383 	clz	r3, r3
 802cf62:	095b      	lsrs	r3, r3, #5
 802cf64:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802cf68:	61e3      	str	r3, [r4, #28]
 802cf6a:	e7de      	b.n	802cf2a <localtime_r+0x18e>
 802cf6c:	2301      	movs	r3, #1
 802cf6e:	e7f9      	b.n	802cf64 <localtime_r+0x1c8>
 802cf70:	0803c0b0 	.word	0x0803c0b0
 802cf74:	2001a088 	.word	0x2001a088

0802cf78 <iso_year_adjust>:
 802cf78:	6942      	ldr	r2, [r0, #20]
 802cf7a:	2a00      	cmp	r2, #0
 802cf7c:	f240 736c 	movw	r3, #1900	@ 0x76c
 802cf80:	bfa8      	it	ge
 802cf82:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802cf86:	4413      	add	r3, r2
 802cf88:	0792      	lsls	r2, r2, #30
 802cf8a:	d105      	bne.n	802cf98 <iso_year_adjust+0x20>
 802cf8c:	2164      	movs	r1, #100	@ 0x64
 802cf8e:	fb93 f2f1 	sdiv	r2, r3, r1
 802cf92:	fb01 3212 	mls	r2, r1, r2, r3
 802cf96:	b9ca      	cbnz	r2, 802cfcc <iso_year_adjust+0x54>
 802cf98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cf9c:	fb93 f1f2 	sdiv	r1, r3, r2
 802cfa0:	fb02 3311 	mls	r3, r2, r1, r3
 802cfa4:	fab3 f383 	clz	r3, r3
 802cfa8:	095b      	lsrs	r3, r3, #5
 802cfaa:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802cfae:	0040      	lsls	r0, r0, #1
 802cfb0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802cfb4:	4418      	add	r0, r3
 802cfb6:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802cfba:	4298      	cmp	r0, r3
 802cfbc:	d027      	beq.n	802d00e <iso_year_adjust+0x96>
 802cfbe:	dc11      	bgt.n	802cfe4 <iso_year_adjust+0x6c>
 802cfc0:	2801      	cmp	r0, #1
 802cfc2:	dc0a      	bgt.n	802cfda <iso_year_adjust+0x62>
 802cfc4:	43c0      	mvns	r0, r0
 802cfc6:	0fc0      	lsrs	r0, r0, #31
 802cfc8:	4240      	negs	r0, r0
 802cfca:	4770      	bx	lr
 802cfcc:	2301      	movs	r3, #1
 802cfce:	e7ec      	b.n	802cfaa <iso_year_adjust+0x32>
 802cfd0:	4b10      	ldr	r3, [pc, #64]	@ (802d014 <iso_year_adjust+0x9c>)
 802cfd2:	40c3      	lsrs	r3, r0
 802cfd4:	f343 0000 	sbfx	r0, r3, #0, #1
 802cfd8:	4770      	bx	lr
 802cfda:	380a      	subs	r0, #10
 802cfdc:	2817      	cmp	r0, #23
 802cfde:	d9f7      	bls.n	802cfd0 <iso_year_adjust+0x58>
 802cfe0:	2000      	movs	r0, #0
 802cfe2:	4770      	bx	lr
 802cfe4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802cfe8:	4298      	cmp	r0, r3
 802cfea:	dc06      	bgt.n	802cffa <iso_year_adjust+0x82>
 802cfec:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802cff0:	4298      	cmp	r0, r3
 802cff2:	bfd4      	ite	le
 802cff4:	2000      	movle	r0, #0
 802cff6:	2001      	movgt	r0, #1
 802cff8:	4770      	bx	lr
 802cffa:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802cffe:	3802      	subs	r0, #2
 802d000:	2815      	cmp	r0, #21
 802d002:	d8ed      	bhi.n	802cfe0 <iso_year_adjust+0x68>
 802d004:	4b04      	ldr	r3, [pc, #16]	@ (802d018 <iso_year_adjust+0xa0>)
 802d006:	40c3      	lsrs	r3, r0
 802d008:	f003 0001 	and.w	r0, r3, #1
 802d00c:	4770      	bx	lr
 802d00e:	2001      	movs	r0, #1
 802d010:	4770      	bx	lr
 802d012:	bf00      	nop
 802d014:	00cc00cf 	.word	0x00cc00cf
 802d018:	002a001f 	.word	0x002a001f

0802d01c <__strftime.isra.0>:
 802d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d020:	b08f      	sub	sp, #60	@ 0x3c
 802d022:	461e      	mov	r6, r3
 802d024:	2300      	movs	r3, #0
 802d026:	4607      	mov	r7, r0
 802d028:	460d      	mov	r5, r1
 802d02a:	9302      	str	r3, [sp, #8]
 802d02c:	461c      	mov	r4, r3
 802d02e:	7813      	ldrb	r3, [r2, #0]
 802d030:	2b00      	cmp	r3, #0
 802d032:	f000 84ae 	beq.w	802d992 <__strftime.isra.0+0x976>
 802d036:	2b25      	cmp	r3, #37	@ 0x25
 802d038:	d11f      	bne.n	802d07a <__strftime.isra.0+0x5e>
 802d03a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802d03e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802d042:	d024      	beq.n	802d08e <__strftime.isra.0+0x72>
 802d044:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d048:	d021      	beq.n	802d08e <__strftime.isra.0+0x72>
 802d04a:	f102 0801 	add.w	r8, r2, #1
 802d04e:	f04f 0900 	mov.w	r9, #0
 802d052:	f898 2000 	ldrb.w	r2, [r8]
 802d056:	3a31      	subs	r2, #49	@ 0x31
 802d058:	2a08      	cmp	r2, #8
 802d05a:	d81b      	bhi.n	802d094 <__strftime.isra.0+0x78>
 802d05c:	220a      	movs	r2, #10
 802d05e:	4640      	mov	r0, r8
 802d060:	a906      	add	r1, sp, #24
 802d062:	f008 f88b 	bl	803517c <strtoul>
 802d066:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802d06a:	4602      	mov	r2, r0
 802d06c:	f898 1000 	ldrb.w	r1, [r8]
 802d070:	2945      	cmp	r1, #69	@ 0x45
 802d072:	d111      	bne.n	802d098 <__strftime.isra.0+0x7c>
 802d074:	f108 0801 	add.w	r8, r8, #1
 802d078:	e010      	b.n	802d09c <__strftime.isra.0+0x80>
 802d07a:	1e69      	subs	r1, r5, #1
 802d07c:	42a1      	cmp	r1, r4
 802d07e:	f240 815d 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d082:	553b      	strb	r3, [r7, r4]
 802d084:	3201      	adds	r2, #1
 802d086:	f104 0a01 	add.w	sl, r4, #1
 802d08a:	4654      	mov	r4, sl
 802d08c:	e7cf      	b.n	802d02e <__strftime.isra.0+0x12>
 802d08e:	f102 0802 	add.w	r8, r2, #2
 802d092:	e7de      	b.n	802d052 <__strftime.isra.0+0x36>
 802d094:	2200      	movs	r2, #0
 802d096:	e7e9      	b.n	802d06c <__strftime.isra.0+0x50>
 802d098:	294f      	cmp	r1, #79	@ 0x4f
 802d09a:	d0eb      	beq.n	802d074 <__strftime.isra.0+0x58>
 802d09c:	f898 0000 	ldrb.w	r0, [r8]
 802d0a0:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802d0a4:	2955      	cmp	r1, #85	@ 0x55
 802d0a6:	f200 8149 	bhi.w	802d33c <__strftime.isra.0+0x320>
 802d0aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 802d0ae:	046a      	.short	0x046a
 802d0b0:	01470147 	.word	0x01470147
 802d0b4:	01470147 	.word	0x01470147
 802d0b8:	01470147 	.word	0x01470147
 802d0bc:	01470147 	.word	0x01470147
 802d0c0:	01470147 	.word	0x01470147
 802d0c4:	01470147 	.word	0x01470147
 802d0c8:	01470147 	.word	0x01470147
 802d0cc:	01470147 	.word	0x01470147
 802d0d0:	01470147 	.word	0x01470147
 802d0d4:	01470147 	.word	0x01470147
 802d0d8:	01470147 	.word	0x01470147
 802d0dc:	01470147 	.word	0x01470147
 802d0e0:	01470147 	.word	0x01470147
 802d0e4:	00750147 	.word	0x00750147
 802d0e8:	00dc00a3 	.word	0x00dc00a3
 802d0ec:	01470128 	.word	0x01470128
 802d0f0:	01cb0159 	.word	0x01cb0159
 802d0f4:	02590252 	.word	0x02590252
 802d0f8:	01470147 	.word	0x01470147
 802d0fc:	02710147 	.word	0x02710147
 802d100:	01470147 	.word	0x01470147
 802d104:	0147027c 	.word	0x0147027c
 802d108:	033402ac 	.word	0x033402ac
 802d10c:	036a033e 	.word	0x036a033e
 802d110:	03d80372 	.word	0x03d80372
 802d114:	03ee00d8 	.word	0x03ee00d8
 802d118:	01470440 	.word	0x01470440
 802d11c:	01470147 	.word	0x01470147
 802d120:	01470147 	.word	0x01470147
 802d124:	00560147 	.word	0x00560147
 802d128:	00ba008d 	.word	0x00ba008d
 802d12c:	011d011d 	.word	0x011d011d
 802d130:	017e0147 	.word	0x017e0147
 802d134:	0147008d 	.word	0x0147008d
 802d138:	0252026a 	.word	0x0252026a
 802d13c:	026e0259 	.word	0x026e0259
 802d140:	01470273 	.word	0x01470273
 802d144:	02a5027c 	.word	0x02a5027c
 802d148:	02b500d0 	.word	0x02b500d0
 802d14c:	035d0336 	.word	0x035d0336
 802d150:	03cf03a4 	.word	0x03cf03a4
 802d154:	03e000d4 	.word	0x03e000d4
 802d158:	0403      	.short	0x0403
 802d15a:	69b3      	ldr	r3, [r6, #24]
 802d15c:	4aad      	ldr	r2, [pc, #692]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d15e:	3318      	adds	r3, #24
 802d160:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d164:	4658      	mov	r0, fp
 802d166:	f7e3 f89b 	bl	80102a0 <strlen>
 802d16a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d16e:	eb04 0a00 	add.w	sl, r4, r0
 802d172:	1e6b      	subs	r3, r5, #1
 802d174:	45a2      	cmp	sl, r4
 802d176:	d107      	bne.n	802d188 <__strftime.isra.0+0x16c>
 802d178:	f898 3000 	ldrb.w	r3, [r8]
 802d17c:	2b00      	cmp	r3, #0
 802d17e:	f000 8409 	beq.w	802d994 <__strftime.isra.0+0x978>
 802d182:	f108 0201 	add.w	r2, r8, #1
 802d186:	e780      	b.n	802d08a <__strftime.isra.0+0x6e>
 802d188:	42a3      	cmp	r3, r4
 802d18a:	f240 80d7 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d18e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d192:	553a      	strb	r2, [r7, r4]
 802d194:	3401      	adds	r4, #1
 802d196:	e7ed      	b.n	802d174 <__strftime.isra.0+0x158>
 802d198:	69b2      	ldr	r2, [r6, #24]
 802d19a:	4b9e      	ldr	r3, [pc, #632]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d19c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d1a0:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802d1a4:	4658      	mov	r0, fp
 802d1a6:	f7e3 f87b 	bl	80102a0 <strlen>
 802d1aa:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d1ae:	eb04 0a00 	add.w	sl, r4, r0
 802d1b2:	1e6b      	subs	r3, r5, #1
 802d1b4:	4554      	cmp	r4, sl
 802d1b6:	d0df      	beq.n	802d178 <__strftime.isra.0+0x15c>
 802d1b8:	42a3      	cmp	r3, r4
 802d1ba:	f240 80bf 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d1be:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d1c2:	553a      	strb	r2, [r7, r4]
 802d1c4:	3401      	adds	r4, #1
 802d1c6:	e7f5      	b.n	802d1b4 <__strftime.isra.0+0x198>
 802d1c8:	4b92      	ldr	r3, [pc, #584]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d1ca:	6932      	ldr	r2, [r6, #16]
 802d1cc:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802d1d0:	4658      	mov	r0, fp
 802d1d2:	f7e3 f865 	bl	80102a0 <strlen>
 802d1d6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d1da:	eb04 0a00 	add.w	sl, r4, r0
 802d1de:	1e6b      	subs	r3, r5, #1
 802d1e0:	45a2      	cmp	sl, r4
 802d1e2:	d0c9      	beq.n	802d178 <__strftime.isra.0+0x15c>
 802d1e4:	42a3      	cmp	r3, r4
 802d1e6:	f240 80a9 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d1ea:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d1ee:	553a      	strb	r2, [r7, r4]
 802d1f0:	3401      	adds	r4, #1
 802d1f2:	e7f5      	b.n	802d1e0 <__strftime.isra.0+0x1c4>
 802d1f4:	6933      	ldr	r3, [r6, #16]
 802d1f6:	4a87      	ldr	r2, [pc, #540]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d1f8:	330c      	adds	r3, #12
 802d1fa:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802d1fe:	4658      	mov	r0, fp
 802d200:	f7e3 f84e 	bl	80102a0 <strlen>
 802d204:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d208:	eb04 0a00 	add.w	sl, r4, r0
 802d20c:	1e6b      	subs	r3, r5, #1
 802d20e:	45a2      	cmp	sl, r4
 802d210:	d0b2      	beq.n	802d178 <__strftime.isra.0+0x15c>
 802d212:	42a3      	cmp	r3, r4
 802d214:	f240 8092 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d218:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802d21c:	553a      	strb	r2, [r7, r4]
 802d21e:	3401      	adds	r4, #1
 802d220:	e7f5      	b.n	802d20e <__strftime.isra.0+0x1f2>
 802d222:	4b7c      	ldr	r3, [pc, #496]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d224:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802d228:	4650      	mov	r0, sl
 802d22a:	f7e3 f839 	bl	80102a0 <strlen>
 802d22e:	f89a 3000 	ldrb.w	r3, [sl]
 802d232:	2b00      	cmp	r3, #0
 802d234:	f000 8341 	beq.w	802d8ba <__strftime.isra.0+0x89e>
 802d238:	4633      	mov	r3, r6
 802d23a:	4652      	mov	r2, sl
 802d23c:	1b29      	subs	r1, r5, r4
 802d23e:	1938      	adds	r0, r7, r4
 802d240:	f7ff feec 	bl	802d01c <__strftime.isra.0>
 802d244:	2800      	cmp	r0, #0
 802d246:	dd79      	ble.n	802d33c <__strftime.isra.0+0x320>
 802d248:	eb04 0a00 	add.w	sl, r4, r0
 802d24c:	e794      	b.n	802d178 <__strftime.isra.0+0x15c>
 802d24e:	4b71      	ldr	r3, [pc, #452]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d250:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802d254:	e7e8      	b.n	802d228 <__strftime.isra.0+0x20c>
 802d256:	4b6f      	ldr	r3, [pc, #444]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d258:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802d25c:	e7e4      	b.n	802d228 <__strftime.isra.0+0x20c>
 802d25e:	4b6d      	ldr	r3, [pc, #436]	@ (802d414 <__strftime.isra.0+0x3f8>)
 802d260:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802d264:	e7e0      	b.n	802d228 <__strftime.isra.0+0x20c>
 802d266:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802d26a:	496b      	ldr	r1, [pc, #428]	@ (802d418 <__strftime.isra.0+0x3fc>)
 802d26c:	458a      	cmp	sl, r1
 802d26e:	bfac      	ite	ge
 802d270:	f04f 0b00 	movge.w	fp, #0
 802d274:	f04f 0b01 	movlt.w	fp, #1
 802d278:	f1ba 0f00 	cmp.w	sl, #0
 802d27c:	db12      	blt.n	802d2a4 <__strftime.isra.0+0x288>
 802d27e:	2064      	movs	r0, #100	@ 0x64
 802d280:	fb9a f0f0 	sdiv	r0, sl, r0
 802d284:	3013      	adds	r0, #19
 802d286:	f1b9 0f00 	cmp.w	r9, #0
 802d28a:	d015      	beq.n	802d2b8 <__strftime.isra.0+0x29c>
 802d28c:	2863      	cmp	r0, #99	@ 0x63
 802d28e:	dd28      	ble.n	802d2e2 <__strftime.isra.0+0x2c6>
 802d290:	4b62      	ldr	r3, [pc, #392]	@ (802d41c <__strftime.isra.0+0x400>)
 802d292:	4963      	ldr	r1, [pc, #396]	@ (802d420 <__strftime.isra.0+0x404>)
 802d294:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d298:	bf0c      	ite	eq
 802d29a:	469c      	moveq	ip, r3
 802d29c:	468c      	movne	ip, r1
 802d29e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d43c <__strftime.isra.0+0x420>
 802d2a2:	e00d      	b.n	802d2c0 <__strftime.isra.0+0x2a4>
 802d2a4:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802d2a8:	9203      	str	r2, [sp, #12]
 802d2aa:	f000 ff88 	bl	802e1be <abs>
 802d2ae:	2164      	movs	r1, #100	@ 0x64
 802d2b0:	9a03      	ldr	r2, [sp, #12]
 802d2b2:	fb90 f0f1 	sdiv	r0, r0, r1
 802d2b6:	e7e6      	b.n	802d286 <__strftime.isra.0+0x26a>
 802d2b8:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d420 <__strftime.isra.0+0x404>
 802d2bc:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d440 <__strftime.isra.0+0x424>
 802d2c0:	4b58      	ldr	r3, [pc, #352]	@ (802d424 <__strftime.isra.0+0x408>)
 802d2c2:	9001      	str	r0, [sp, #4]
 802d2c4:	2a02      	cmp	r2, #2
 802d2c6:	bf2c      	ite	cs
 802d2c8:	ebcb 0102 	rsbcs	r1, fp, r2
 802d2cc:	f1cb 0102 	rsbcc	r1, fp, #2
 802d2d0:	4a51      	ldr	r2, [pc, #324]	@ (802d418 <__strftime.isra.0+0x3fc>)
 802d2d2:	9100      	str	r1, [sp, #0]
 802d2d4:	4592      	cmp	sl, r2
 802d2d6:	bfa8      	it	ge
 802d2d8:	4663      	movge	r3, ip
 802d2da:	4672      	mov	r2, lr
 802d2dc:	1b29      	subs	r1, r5, r4
 802d2de:	1938      	adds	r0, r7, r4
 802d2e0:	e023      	b.n	802d32a <__strftime.isra.0+0x30e>
 802d2e2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d420 <__strftime.isra.0+0x404>
 802d2e6:	e7da      	b.n	802d29e <__strftime.isra.0+0x282>
 802d2e8:	494f      	ldr	r1, [pc, #316]	@ (802d428 <__strftime.isra.0+0x40c>)
 802d2ea:	4a50      	ldr	r2, [pc, #320]	@ (802d42c <__strftime.isra.0+0x410>)
 802d2ec:	68f3      	ldr	r3, [r6, #12]
 802d2ee:	2864      	cmp	r0, #100	@ 0x64
 802d2f0:	bf18      	it	ne
 802d2f2:	460a      	movne	r2, r1
 802d2f4:	1b29      	subs	r1, r5, r4
 802d2f6:	1938      	adds	r0, r7, r4
 802d2f8:	f002 f986 	bl	802f608 <sniprintf>
 802d2fc:	e017      	b.n	802d32e <__strftime.isra.0+0x312>
 802d2fe:	6970      	ldr	r0, [r6, #20]
 802d300:	6933      	ldr	r3, [r6, #16]
 802d302:	2800      	cmp	r0, #0
 802d304:	f103 0a01 	add.w	sl, r3, #1
 802d308:	eb07 0b04 	add.w	fp, r7, r4
 802d30c:	68f3      	ldr	r3, [r6, #12]
 802d30e:	eba5 0904 	sub.w	r9, r5, r4
 802d312:	db19      	blt.n	802d348 <__strftime.isra.0+0x32c>
 802d314:	2264      	movs	r2, #100	@ 0x64
 802d316:	fb90 fcf2 	sdiv	ip, r0, r2
 802d31a:	fb02 001c 	mls	r0, r2, ip, r0
 802d31e:	4a44      	ldr	r2, [pc, #272]	@ (802d430 <__strftime.isra.0+0x414>)
 802d320:	e9cd 3000 	strd	r3, r0, [sp]
 802d324:	4649      	mov	r1, r9
 802d326:	4653      	mov	r3, sl
 802d328:	4658      	mov	r0, fp
 802d32a:	f002 f96d 	bl	802f608 <sniprintf>
 802d32e:	2800      	cmp	r0, #0
 802d330:	db04      	blt.n	802d33c <__strftime.isra.0+0x320>
 802d332:	eb00 0a04 	add.w	sl, r0, r4
 802d336:	4555      	cmp	r5, sl
 802d338:	f63f af1e 	bhi.w	802d178 <__strftime.isra.0+0x15c>
 802d33c:	f04f 0a00 	mov.w	sl, #0
 802d340:	4650      	mov	r0, sl
 802d342:	b00f      	add	sp, #60	@ 0x3c
 802d344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d348:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d34c:	9303      	str	r3, [sp, #12]
 802d34e:	f000 ff36 	bl	802e1be <abs>
 802d352:	2264      	movs	r2, #100	@ 0x64
 802d354:	9b03      	ldr	r3, [sp, #12]
 802d356:	fb90 fcf2 	sdiv	ip, r0, r2
 802d35a:	fb0c 0012 	mls	r0, ip, r2, r0
 802d35e:	e7de      	b.n	802d31e <__strftime.isra.0+0x302>
 802d360:	2125      	movs	r1, #37	@ 0x25
 802d362:	f88d 1018 	strb.w	r1, [sp, #24]
 802d366:	f1b9 0f00 	cmp.w	r9, #0
 802d36a:	d00b      	beq.n	802d384 <__strftime.isra.0+0x368>
 802d36c:	2a05      	cmp	r2, #5
 802d36e:	f88d 9019 	strb.w	r9, [sp, #25]
 802d372:	d817      	bhi.n	802d3a4 <__strftime.isra.0+0x388>
 802d374:	f10d 001a 	add.w	r0, sp, #26
 802d378:	492e      	ldr	r1, [pc, #184]	@ (802d434 <__strftime.isra.0+0x418>)
 802d37a:	f000 fe83 	bl	802e084 <strcpy>
 802d37e:	4633      	mov	r3, r6
 802d380:	aa06      	add	r2, sp, #24
 802d382:	e75b      	b.n	802d23c <__strftime.isra.0+0x220>
 802d384:	232b      	movs	r3, #43	@ 0x2b
 802d386:	f88d 3019 	strb.w	r3, [sp, #25]
 802d38a:	2304      	movs	r3, #4
 802d38c:	4a2a      	ldr	r2, [pc, #168]	@ (802d438 <__strftime.isra.0+0x41c>)
 802d38e:	211e      	movs	r1, #30
 802d390:	f10d 001a 	add.w	r0, sp, #26
 802d394:	f002 f938 	bl	802f608 <sniprintf>
 802d398:	2800      	cmp	r0, #0
 802d39a:	ddeb      	ble.n	802d374 <__strftime.isra.0+0x358>
 802d39c:	f10d 031a 	add.w	r3, sp, #26
 802d3a0:	4418      	add	r0, r3
 802d3a2:	e7e9      	b.n	802d378 <__strftime.isra.0+0x35c>
 802d3a4:	1f93      	subs	r3, r2, #6
 802d3a6:	d0e5      	beq.n	802d374 <__strftime.isra.0+0x358>
 802d3a8:	e7f0      	b.n	802d38c <__strftime.isra.0+0x370>
 802d3aa:	4630      	mov	r0, r6
 802d3ac:	f7ff fde4 	bl	802cf78 <iso_year_adjust>
 802d3b0:	4682      	mov	sl, r0
 802d3b2:	6970      	ldr	r0, [r6, #20]
 802d3b4:	2800      	cmp	r0, #0
 802d3b6:	db11      	blt.n	802d3dc <__strftime.isra.0+0x3c0>
 802d3b8:	2364      	movs	r3, #100	@ 0x64
 802d3ba:	fb90 f2f3 	sdiv	r2, r0, r3
 802d3be:	fb03 0012 	mls	r0, r3, r2, r0
 802d3c2:	2364      	movs	r3, #100	@ 0x64
 802d3c4:	4482      	add	sl, r0
 802d3c6:	fb9a f2f3 	sdiv	r2, sl, r3
 802d3ca:	fb03 aa12 	mls	sl, r3, r2, sl
 802d3ce:	449a      	add	sl, r3
 802d3d0:	fbba f2f3 	udiv	r2, sl, r3
 802d3d4:	fb03 a312 	mls	r3, r3, r2, sl
 802d3d8:	4a14      	ldr	r2, [pc, #80]	@ (802d42c <__strftime.isra.0+0x410>)
 802d3da:	e78b      	b.n	802d2f4 <__strftime.isra.0+0x2d8>
 802d3dc:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d3e0:	f000 feed 	bl	802e1be <abs>
 802d3e4:	2364      	movs	r3, #100	@ 0x64
 802d3e6:	f1ba 0f00 	cmp.w	sl, #0
 802d3ea:	fb90 f2f3 	sdiv	r2, r0, r3
 802d3ee:	fb02 0013 	mls	r0, r2, r3, r0
 802d3f2:	da07      	bge.n	802d404 <__strftime.isra.0+0x3e8>
 802d3f4:	6972      	ldr	r2, [r6, #20]
 802d3f6:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d3fa:	429a      	cmp	r2, r3
 802d3fc:	bfb8      	it	lt
 802d3fe:	f04f 0a01 	movlt.w	sl, #1
 802d402:	e7de      	b.n	802d3c2 <__strftime.isra.0+0x3a6>
 802d404:	d0dd      	beq.n	802d3c2 <__strftime.isra.0+0x3a6>
 802d406:	6972      	ldr	r2, [r6, #20]
 802d408:	4b03      	ldr	r3, [pc, #12]	@ (802d418 <__strftime.isra.0+0x3fc>)
 802d40a:	429a      	cmp	r2, r3
 802d40c:	bfb8      	it	lt
 802d40e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d412:	e7d6      	b.n	802d3c2 <__strftime.isra.0+0x3a6>
 802d414:	0803c2fc 	.word	0x0803c2fc
 802d418:	fffff894 	.word	0xfffff894
 802d41c:	0803c11f 	.word	0x0803c11f
 802d420:	0803c03a 	.word	0x0803c03a
 802d424:	0803c121 	.word	0x0803c121
 802d428:	0803c123 	.word	0x0803c123
 802d42c:	0803c131 	.word	0x0803c131
 802d430:	0803c127 	.word	0x0803c127
 802d434:	0803c13a 	.word	0x0803c13a
 802d438:	0803c136 	.word	0x0803c136
 802d43c:	0803c117 	.word	0x0803c117
 802d440:	0803c110 	.word	0x0803c110
 802d444:	6971      	ldr	r1, [r6, #20]
 802d446:	48bc      	ldr	r0, [pc, #752]	@ (802d738 <__strftime.isra.0+0x71c>)
 802d448:	9205      	str	r2, [sp, #20]
 802d44a:	4281      	cmp	r1, r0
 802d44c:	bfac      	ite	ge
 802d44e:	2300      	movge	r3, #0
 802d450:	2301      	movlt	r3, #1
 802d452:	4630      	mov	r0, r6
 802d454:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d458:	f7ff fd8e 	bl	802cf78 <iso_year_adjust>
 802d45c:	9904      	ldr	r1, [sp, #16]
 802d45e:	9a05      	ldr	r2, [sp, #20]
 802d460:	2900      	cmp	r1, #0
 802d462:	4682      	mov	sl, r0
 802d464:	db3a      	blt.n	802d4dc <__strftime.isra.0+0x4c0>
 802d466:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d46a:	fb91 fbfb 	sdiv	fp, r1, fp
 802d46e:	f10b 0b13 	add.w	fp, fp, #19
 802d472:	6970      	ldr	r0, [r6, #20]
 802d474:	2800      	cmp	r0, #0
 802d476:	db3e      	blt.n	802d4f6 <__strftime.isra.0+0x4da>
 802d478:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d47c:	f1ba 0f00 	cmp.w	sl, #0
 802d480:	fb90 fefc 	sdiv	lr, r0, ip
 802d484:	fb0c 001e 	mls	r0, ip, lr, r0
 802d488:	da4f      	bge.n	802d52a <__strftime.isra.0+0x50e>
 802d48a:	4482      	add	sl, r0
 802d48c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d490:	d157      	bne.n	802d542 <__strftime.isra.0+0x526>
 802d492:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d496:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d49a:	9b03      	ldr	r3, [sp, #12]
 802d49c:	2164      	movs	r1, #100	@ 0x64
 802d49e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d4a2:	2b00      	cmp	r3, #0
 802d4a4:	f040 81f7 	bne.w	802d896 <__strftime.isra.0+0x87a>
 802d4a8:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d4ac:	d104      	bne.n	802d4b8 <__strftime.isra.0+0x49c>
 802d4ae:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d4b2:	458a      	cmp	sl, r1
 802d4b4:	f200 8275 	bhi.w	802d9a2 <__strftime.isra.0+0x986>
 802d4b8:	a906      	add	r1, sp, #24
 802d4ba:	2025      	movs	r0, #37	@ 0x25
 802d4bc:	7008      	strb	r0, [r1, #0]
 802d4be:	f1b9 0f00 	cmp.w	r9, #0
 802d4c2:	f040 81f3 	bne.w	802d8ac <__strftime.isra.0+0x890>
 802d4c6:	1c48      	adds	r0, r1, #1
 802d4c8:	499c      	ldr	r1, [pc, #624]	@ (802d73c <__strftime.isra.0+0x720>)
 802d4ca:	9203      	str	r2, [sp, #12]
 802d4cc:	f000 fdda 	bl	802e084 <strcpy>
 802d4d0:	9a03      	ldr	r2, [sp, #12]
 802d4d2:	f8cd a000 	str.w	sl, [sp]
 802d4d6:	4613      	mov	r3, r2
 802d4d8:	aa06      	add	r2, sp, #24
 802d4da:	e098      	b.n	802d60e <__strftime.isra.0+0x5f2>
 802d4dc:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d4e0:	9205      	str	r2, [sp, #20]
 802d4e2:	9104      	str	r1, [sp, #16]
 802d4e4:	f000 fe6b 	bl	802e1be <abs>
 802d4e8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d4ec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d4f0:	fb90 fbfc 	sdiv	fp, r0, ip
 802d4f4:	e7bd      	b.n	802d472 <__strftime.isra.0+0x456>
 802d4f6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d4fa:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d4fe:	f000 fe5e 	bl	802e1be <abs>
 802d502:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d506:	f1ba 0f00 	cmp.w	sl, #0
 802d50a:	fb90 fefc 	sdiv	lr, r0, ip
 802d50e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d512:	fb0e 001c 	mls	r0, lr, ip, r0
 802d516:	da08      	bge.n	802d52a <__strftime.isra.0+0x50e>
 802d518:	6971      	ldr	r1, [r6, #20]
 802d51a:	4b89      	ldr	r3, [pc, #548]	@ (802d740 <__strftime.isra.0+0x724>)
 802d51c:	4299      	cmp	r1, r3
 802d51e:	dab4      	bge.n	802d48a <__strftime.isra.0+0x46e>
 802d520:	f04f 0a01 	mov.w	sl, #1
 802d524:	f8cd a00c 	str.w	sl, [sp, #12]
 802d528:	e7af      	b.n	802d48a <__strftime.isra.0+0x46e>
 802d52a:	f1ba 0f00 	cmp.w	sl, #0
 802d52e:	d0ac      	beq.n	802d48a <__strftime.isra.0+0x46e>
 802d530:	4b81      	ldr	r3, [pc, #516]	@ (802d738 <__strftime.isra.0+0x71c>)
 802d532:	4299      	cmp	r1, r3
 802d534:	9b03      	ldr	r3, [sp, #12]
 802d536:	bfbc      	itt	lt
 802d538:	2301      	movlt	r3, #1
 802d53a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d53e:	9303      	str	r3, [sp, #12]
 802d540:	e7a3      	b.n	802d48a <__strftime.isra.0+0x46e>
 802d542:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d546:	bf04      	itt	eq
 802d548:	f10b 0b01 	addeq.w	fp, fp, #1
 802d54c:	f04f 0a00 	moveq.w	sl, #0
 802d550:	e7a3      	b.n	802d49a <__strftime.isra.0+0x47e>
 802d552:	497c      	ldr	r1, [pc, #496]	@ (802d744 <__strftime.isra.0+0x728>)
 802d554:	4a7c      	ldr	r2, [pc, #496]	@ (802d748 <__strftime.isra.0+0x72c>)
 802d556:	68b3      	ldr	r3, [r6, #8]
 802d558:	286b      	cmp	r0, #107	@ 0x6b
 802d55a:	bf18      	it	ne
 802d55c:	460a      	movne	r2, r1
 802d55e:	e6c9      	b.n	802d2f4 <__strftime.isra.0+0x2d8>
 802d560:	68b3      	ldr	r3, [r6, #8]
 802d562:	b163      	cbz	r3, 802d57e <__strftime.isra.0+0x562>
 802d564:	2b0c      	cmp	r3, #12
 802d566:	d004      	beq.n	802d572 <__strftime.isra.0+0x556>
 802d568:	210c      	movs	r1, #12
 802d56a:	fb93 f2f1 	sdiv	r2, r3, r1
 802d56e:	fb01 3312 	mls	r3, r1, r2, r3
 802d572:	4975      	ldr	r1, [pc, #468]	@ (802d748 <__strftime.isra.0+0x72c>)
 802d574:	4a73      	ldr	r2, [pc, #460]	@ (802d744 <__strftime.isra.0+0x728>)
 802d576:	2849      	cmp	r0, #73	@ 0x49
 802d578:	bf18      	it	ne
 802d57a:	460a      	movne	r2, r1
 802d57c:	e6ba      	b.n	802d2f4 <__strftime.isra.0+0x2d8>
 802d57e:	230c      	movs	r3, #12
 802d580:	e7f7      	b.n	802d572 <__strftime.isra.0+0x556>
 802d582:	69f3      	ldr	r3, [r6, #28]
 802d584:	4a71      	ldr	r2, [pc, #452]	@ (802d74c <__strftime.isra.0+0x730>)
 802d586:	3301      	adds	r3, #1
 802d588:	e6b4      	b.n	802d2f4 <__strftime.isra.0+0x2d8>
 802d58a:	6933      	ldr	r3, [r6, #16]
 802d58c:	3301      	adds	r3, #1
 802d58e:	e723      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d590:	6873      	ldr	r3, [r6, #4]
 802d592:	e721      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d594:	1e6b      	subs	r3, r5, #1
 802d596:	429c      	cmp	r4, r3
 802d598:	f4bf aed0 	bcs.w	802d33c <__strftime.isra.0+0x320>
 802d59c:	f104 0a01 	add.w	sl, r4, #1
 802d5a0:	230a      	movs	r3, #10
 802d5a2:	553b      	strb	r3, [r7, r4]
 802d5a4:	e5e8      	b.n	802d178 <__strftime.isra.0+0x15c>
 802d5a6:	68b3      	ldr	r3, [r6, #8]
 802d5a8:	2b0b      	cmp	r3, #11
 802d5aa:	4b69      	ldr	r3, [pc, #420]	@ (802d750 <__strftime.isra.0+0x734>)
 802d5ac:	bfd4      	ite	le
 802d5ae:	2200      	movle	r2, #0
 802d5b0:	2201      	movgt	r2, #1
 802d5b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d5b6:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802d5ba:	4658      	mov	r0, fp
 802d5bc:	f7e2 fe70 	bl	80102a0 <strlen>
 802d5c0:	eb04 0a00 	add.w	sl, r4, r0
 802d5c4:	4863      	ldr	r0, [pc, #396]	@ (802d754 <__strftime.isra.0+0x738>)
 802d5c6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d5ca:	1e69      	subs	r1, r5, #1
 802d5cc:	45a2      	cmp	sl, r4
 802d5ce:	f43f add3 	beq.w	802d178 <__strftime.isra.0+0x15c>
 802d5d2:	42a1      	cmp	r1, r4
 802d5d4:	f67f aeb2 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d5d8:	f898 2000 	ldrb.w	r2, [r8]
 802d5dc:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802d5e0:	2a50      	cmp	r2, #80	@ 0x50
 802d5e2:	d106      	bne.n	802d5f2 <__strftime.isra.0+0x5d6>
 802d5e4:	5cc2      	ldrb	r2, [r0, r3]
 802d5e6:	f002 0203 	and.w	r2, r2, #3
 802d5ea:	2a01      	cmp	r2, #1
 802d5ec:	bf08      	it	eq
 802d5ee:	3320      	addeq	r3, #32
 802d5f0:	b2db      	uxtb	r3, r3
 802d5f2:	553b      	strb	r3, [r7, r4]
 802d5f4:	3401      	adds	r4, #1
 802d5f6:	e7e9      	b.n	802d5cc <__strftime.isra.0+0x5b0>
 802d5f8:	2203      	movs	r2, #3
 802d5fa:	6933      	ldr	r3, [r6, #16]
 802d5fc:	fb93 f3f2 	sdiv	r3, r3, r2
 802d600:	4a55      	ldr	r2, [pc, #340]	@ (802d758 <__strftime.isra.0+0x73c>)
 802d602:	3301      	adds	r3, #1
 802d604:	e676      	b.n	802d2f4 <__strftime.isra.0+0x2d8>
 802d606:	6873      	ldr	r3, [r6, #4]
 802d608:	9300      	str	r3, [sp, #0]
 802d60a:	68b3      	ldr	r3, [r6, #8]
 802d60c:	4a53      	ldr	r2, [pc, #332]	@ (802d75c <__strftime.isra.0+0x740>)
 802d60e:	1b29      	subs	r1, r5, r4
 802d610:	1938      	adds	r0, r7, r4
 802d612:	f001 fff9 	bl	802f608 <sniprintf>
 802d616:	e68a      	b.n	802d32e <__strftime.isra.0+0x312>
 802d618:	6a33      	ldr	r3, [r6, #32]
 802d61a:	2b00      	cmp	r3, #0
 802d61c:	db78      	blt.n	802d710 <__strftime.isra.0+0x6f4>
 802d61e:	f000 fa7b 	bl	802db18 <__tz_lock>
 802d622:	9b02      	ldr	r3, [sp, #8]
 802d624:	b90b      	cbnz	r3, 802d62a <__strftime.isra.0+0x60e>
 802d626:	f000 fa83 	bl	802db30 <_tzset_unlocked>
 802d62a:	f007 fe73 	bl	8035314 <__gettzinfo>
 802d62e:	6a33      	ldr	r3, [r6, #32]
 802d630:	2b00      	cmp	r3, #0
 802d632:	bfd4      	ite	le
 802d634:	2200      	movle	r2, #0
 802d636:	2201      	movgt	r2, #1
 802d638:	2328      	movs	r3, #40	@ 0x28
 802d63a:	fb02 3303 	mla	r3, r2, r3, r3
 802d63e:	58c3      	ldr	r3, [r0, r3]
 802d640:	f1c3 0a00 	rsb	sl, r3, #0
 802d644:	f000 fa6e 	bl	802db24 <__tz_unlock>
 802d648:	2301      	movs	r3, #1
 802d64a:	9302      	str	r3, [sp, #8]
 802d64c:	6972      	ldr	r2, [r6, #20]
 802d64e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802d652:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802d656:	f16c 0c00 	sbc.w	ip, ip, #0
 802d65a:	f1bc 0f00 	cmp.w	ip, #0
 802d65e:	eba5 0104 	sub.w	r1, r5, r4
 802d662:	eb07 0004 	add.w	r0, r7, r4
 802d666:	da02      	bge.n	802d66e <__strftime.isra.0+0x652>
 802d668:	3303      	adds	r3, #3
 802d66a:	f14c 0c00 	adc.w	ip, ip, #0
 802d66e:	089b      	lsrs	r3, r3, #2
 802d670:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802d674:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802d678:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d67c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802d680:	fb9e fefb 	sdiv	lr, lr, fp
 802d684:	ebb3 030e 	subs.w	r3, r3, lr
 802d688:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802d68c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802d690:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802d694:	fb9e fefb 	sdiv	lr, lr, fp
 802d698:	eb13 030e 	adds.w	r3, r3, lr
 802d69c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802d6a0:	3a46      	subs	r2, #70	@ 0x46
 802d6a2:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802d6a6:	fb0e f202 	mul.w	r2, lr, r2
 802d6aa:	189b      	adds	r3, r3, r2
 802d6ac:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d6b0:	69f2      	ldr	r2, [r6, #28]
 802d6b2:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802d6b6:	189b      	adds	r3, r3, r2
 802d6b8:	f04f 0e18 	mov.w	lr, #24
 802d6bc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d6c0:	fba3 230e 	umull	r2, r3, r3, lr
 802d6c4:	fb0e 330c 	mla	r3, lr, ip, r3
 802d6c8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802d6cc:	eb12 020c 	adds.w	r2, r2, ip
 802d6d0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d6d4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802d6d8:	fba2 2e0c 	umull	r2, lr, r2, ip
 802d6dc:	fb0c ee03 	mla	lr, ip, r3, lr
 802d6e0:	eb12 030b 	adds.w	r3, r2, fp
 802d6e4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802d6e8:	fba3 e30c 	umull	lr, r3, r3, ip
 802d6ec:	fb0c 3302 	mla	r3, ip, r2, r3
 802d6f0:	f8d6 c000 	ldr.w	ip, [r6]
 802d6f4:	eb1e 020c 	adds.w	r2, lr, ip
 802d6f8:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d6fc:	ebb2 020a 	subs.w	r2, r2, sl
 802d700:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802d704:	e9cd 2300 	strd	r2, r3, [sp]
 802d708:	4a15      	ldr	r2, [pc, #84]	@ (802d760 <__strftime.isra.0+0x744>)
 802d70a:	f001 ff7d 	bl	802f608 <sniprintf>
 802d70e:	e60e      	b.n	802d32e <__strftime.isra.0+0x312>
 802d710:	f04f 0a00 	mov.w	sl, #0
 802d714:	e79a      	b.n	802d64c <__strftime.isra.0+0x630>
 802d716:	6833      	ldr	r3, [r6, #0]
 802d718:	e65e      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d71a:	1e6b      	subs	r3, r5, #1
 802d71c:	429c      	cmp	r4, r3
 802d71e:	f4bf ae0d 	bcs.w	802d33c <__strftime.isra.0+0x320>
 802d722:	f104 0a01 	add.w	sl, r4, #1
 802d726:	2309      	movs	r3, #9
 802d728:	e73b      	b.n	802d5a2 <__strftime.isra.0+0x586>
 802d72a:	6833      	ldr	r3, [r6, #0]
 802d72c:	9301      	str	r3, [sp, #4]
 802d72e:	6873      	ldr	r3, [r6, #4]
 802d730:	9300      	str	r3, [sp, #0]
 802d732:	68b3      	ldr	r3, [r6, #8]
 802d734:	4a0b      	ldr	r2, [pc, #44]	@ (802d764 <__strftime.isra.0+0x748>)
 802d736:	e5d1      	b.n	802d2dc <__strftime.isra.0+0x2c0>
 802d738:	fffff894 	.word	0xfffff894
 802d73c:	0803c142 	.word	0x0803c142
 802d740:	fffff895 	.word	0xfffff895
 802d744:	0803c131 	.word	0x0803c131
 802d748:	0803c123 	.word	0x0803c123
 802d74c:	0803c146 	.word	0x0803c146
 802d750:	0803c2fc 	.word	0x0803c2fc
 802d754:	0803c3f9 	.word	0x0803c3f9
 802d758:	0803c14b 	.word	0x0803c14b
 802d75c:	0803c15a 	.word	0x0803c15a
 802d760:	0803c150 	.word	0x0803c150
 802d764:	0803c155 	.word	0x0803c155
 802d768:	1e6b      	subs	r3, r5, #1
 802d76a:	429c      	cmp	r4, r3
 802d76c:	f4bf ade6 	bcs.w	802d33c <__strftime.isra.0+0x320>
 802d770:	69b3      	ldr	r3, [r6, #24]
 802d772:	b91b      	cbnz	r3, 802d77c <__strftime.isra.0+0x760>
 802d774:	2337      	movs	r3, #55	@ 0x37
 802d776:	f104 0a01 	add.w	sl, r4, #1
 802d77a:	e712      	b.n	802d5a2 <__strftime.isra.0+0x586>
 802d77c:	3330      	adds	r3, #48	@ 0x30
 802d77e:	b2db      	uxtb	r3, r3
 802d780:	e7f9      	b.n	802d776 <__strftime.isra.0+0x75a>
 802d782:	69f3      	ldr	r3, [r6, #28]
 802d784:	69b2      	ldr	r2, [r6, #24]
 802d786:	3307      	adds	r3, #7
 802d788:	1a9b      	subs	r3, r3, r2
 802d78a:	2207      	movs	r2, #7
 802d78c:	fb93 f3f2 	sdiv	r3, r3, r2
 802d790:	e622      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d792:	4630      	mov	r0, r6
 802d794:	f7ff fbf0 	bl	802cf78 <iso_year_adjust>
 802d798:	69b2      	ldr	r2, [r6, #24]
 802d79a:	b132      	cbz	r2, 802d7aa <__strftime.isra.0+0x78e>
 802d79c:	3a01      	subs	r2, #1
 802d79e:	2800      	cmp	r0, #0
 802d7a0:	69f3      	ldr	r3, [r6, #28]
 802d7a2:	dc26      	bgt.n	802d7f2 <__strftime.isra.0+0x7d6>
 802d7a4:	d103      	bne.n	802d7ae <__strftime.isra.0+0x792>
 802d7a6:	330a      	adds	r3, #10
 802d7a8:	e7ee      	b.n	802d788 <__strftime.isra.0+0x76c>
 802d7aa:	2206      	movs	r2, #6
 802d7ac:	e7f7      	b.n	802d79e <__strftime.isra.0+0x782>
 802d7ae:	1ad2      	subs	r2, r2, r3
 802d7b0:	6973      	ldr	r3, [r6, #20]
 802d7b2:	2b00      	cmp	r3, #0
 802d7b4:	f240 716b 	movw	r1, #1899	@ 0x76b
 802d7b8:	bfa8      	it	ge
 802d7ba:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802d7be:	440b      	add	r3, r1
 802d7c0:	0799      	lsls	r1, r3, #30
 802d7c2:	d105      	bne.n	802d7d0 <__strftime.isra.0+0x7b4>
 802d7c4:	2064      	movs	r0, #100	@ 0x64
 802d7c6:	fb93 f1f0 	sdiv	r1, r3, r0
 802d7ca:	fb00 3111 	mls	r1, r0, r1, r3
 802d7ce:	b971      	cbnz	r1, 802d7ee <__strftime.isra.0+0x7d2>
 802d7d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802d7d4:	fb93 f0f1 	sdiv	r0, r3, r1
 802d7d8:	fb01 3310 	mls	r3, r1, r0, r3
 802d7dc:	fab3 f383 	clz	r3, r3
 802d7e0:	095b      	lsrs	r3, r3, #5
 802d7e2:	1ad2      	subs	r2, r2, r3
 802d7e4:	2a04      	cmp	r2, #4
 802d7e6:	bfcc      	ite	gt
 802d7e8:	2334      	movgt	r3, #52	@ 0x34
 802d7ea:	2335      	movle	r3, #53	@ 0x35
 802d7ec:	e5f4      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d7ee:	2301      	movs	r3, #1
 802d7f0:	e7f7      	b.n	802d7e2 <__strftime.isra.0+0x7c6>
 802d7f2:	2301      	movs	r3, #1
 802d7f4:	e5f0      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d7f6:	496c      	ldr	r1, [pc, #432]	@ (802d9a8 <__strftime.isra.0+0x98c>)
 802d7f8:	9203      	str	r2, [sp, #12]
 802d7fa:	a806      	add	r0, sp, #24
 802d7fc:	f000 fc42 	bl	802e084 <strcpy>
 802d800:	a806      	add	r0, sp, #24
 802d802:	f7e2 fd4d 	bl	80102a0 <strlen>
 802d806:	ab06      	add	r3, sp, #24
 802d808:	eb03 0a00 	add.w	sl, r3, r0
 802d80c:	f10a 0a01 	add.w	sl, sl, #1
 802d810:	46d3      	mov	fp, sl
 802d812:	f1b9 0f00 	cmp.w	r9, #0
 802d816:	d009      	beq.n	802d82c <__strftime.isra.0+0x810>
 802d818:	9a03      	ldr	r2, [sp, #12]
 802d81a:	f803 9000 	strb.w	r9, [r3, r0]
 802d81e:	2a05      	cmp	r2, #5
 802d820:	d901      	bls.n	802d826 <__strftime.isra.0+0x80a>
 802d822:	1f93      	subs	r3, r2, #6
 802d824:	d106      	bne.n	802d834 <__strftime.isra.0+0x818>
 802d826:	4961      	ldr	r1, [pc, #388]	@ (802d9ac <__strftime.isra.0+0x990>)
 802d828:	4658      	mov	r0, fp
 802d82a:	e5a6      	b.n	802d37a <__strftime.isra.0+0x35e>
 802d82c:	aa06      	add	r2, sp, #24
 802d82e:	232b      	movs	r3, #43	@ 0x2b
 802d830:	5413      	strb	r3, [r2, r0]
 802d832:	2304      	movs	r3, #4
 802d834:	a90e      	add	r1, sp, #56	@ 0x38
 802d836:	4a5e      	ldr	r2, [pc, #376]	@ (802d9b0 <__strftime.isra.0+0x994>)
 802d838:	eba1 010a 	sub.w	r1, r1, sl
 802d83c:	4650      	mov	r0, sl
 802d83e:	f001 fee3 	bl	802f608 <sniprintf>
 802d842:	2800      	cmp	r0, #0
 802d844:	bfc8      	it	gt
 802d846:	eb0a 0b00 	addgt.w	fp, sl, r0
 802d84a:	e7ec      	b.n	802d826 <__strftime.isra.0+0x80a>
 802d84c:	1e6b      	subs	r3, r5, #1
 802d84e:	429c      	cmp	r4, r3
 802d850:	f4bf ad74 	bcs.w	802d33c <__strftime.isra.0+0x320>
 802d854:	69b3      	ldr	r3, [r6, #24]
 802d856:	f104 0a01 	add.w	sl, r4, #1
 802d85a:	3330      	adds	r3, #48	@ 0x30
 802d85c:	e6a1      	b.n	802d5a2 <__strftime.isra.0+0x586>
 802d85e:	69b2      	ldr	r2, [r6, #24]
 802d860:	b11a      	cbz	r2, 802d86a <__strftime.isra.0+0x84e>
 802d862:	3a01      	subs	r2, #1
 802d864:	69f3      	ldr	r3, [r6, #28]
 802d866:	3307      	adds	r3, #7
 802d868:	e78e      	b.n	802d788 <__strftime.isra.0+0x76c>
 802d86a:	2206      	movs	r2, #6
 802d86c:	e7fa      	b.n	802d864 <__strftime.isra.0+0x848>
 802d86e:	6970      	ldr	r0, [r6, #20]
 802d870:	2800      	cmp	r0, #0
 802d872:	db05      	blt.n	802d880 <__strftime.isra.0+0x864>
 802d874:	2364      	movs	r3, #100	@ 0x64
 802d876:	fb90 f2f3 	sdiv	r2, r0, r3
 802d87a:	fb02 0313 	mls	r3, r2, r3, r0
 802d87e:	e5ab      	b.n	802d3d8 <__strftime.isra.0+0x3bc>
 802d880:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d884:	f000 fc9b 	bl	802e1be <abs>
 802d888:	e7f4      	b.n	802d874 <__strftime.isra.0+0x858>
 802d88a:	6971      	ldr	r1, [r6, #20]
 802d88c:	4849      	ldr	r0, [pc, #292]	@ (802d9b4 <__strftime.isra.0+0x998>)
 802d88e:	4281      	cmp	r1, r0
 802d890:	da09      	bge.n	802d8a6 <__strftime.isra.0+0x88a>
 802d892:	eba0 0a01 	sub.w	sl, r0, r1
 802d896:	212d      	movs	r1, #45	@ 0x2d
 802d898:	f88d 1018 	strb.w	r1, [sp, #24]
 802d89c:	b102      	cbz	r2, 802d8a0 <__strftime.isra.0+0x884>
 802d89e:	3a01      	subs	r2, #1
 802d8a0:	f10d 0119 	add.w	r1, sp, #25
 802d8a4:	e609      	b.n	802d4ba <__strftime.isra.0+0x49e>
 802d8a6:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802d8aa:	e5fd      	b.n	802d4a8 <__strftime.isra.0+0x48c>
 802d8ac:	2330      	movs	r3, #48	@ 0x30
 802d8ae:	1c88      	adds	r0, r1, #2
 802d8b0:	704b      	strb	r3, [r1, #1]
 802d8b2:	e609      	b.n	802d4c8 <__strftime.isra.0+0x4ac>
 802d8b4:	6a33      	ldr	r3, [r6, #32]
 802d8b6:	2b00      	cmp	r3, #0
 802d8b8:	da01      	bge.n	802d8be <__strftime.isra.0+0x8a2>
 802d8ba:	46a2      	mov	sl, r4
 802d8bc:	e45c      	b.n	802d178 <__strftime.isra.0+0x15c>
 802d8be:	f000 f92b 	bl	802db18 <__tz_lock>
 802d8c2:	9b02      	ldr	r3, [sp, #8]
 802d8c4:	b90b      	cbnz	r3, 802d8ca <__strftime.isra.0+0x8ae>
 802d8c6:	f000 f933 	bl	802db30 <_tzset_unlocked>
 802d8ca:	f007 fd23 	bl	8035314 <__gettzinfo>
 802d8ce:	6a33      	ldr	r3, [r6, #32]
 802d8d0:	2b00      	cmp	r3, #0
 802d8d2:	bfd4      	ite	le
 802d8d4:	2200      	movle	r2, #0
 802d8d6:	2201      	movgt	r2, #1
 802d8d8:	2328      	movs	r3, #40	@ 0x28
 802d8da:	fb02 3303 	mla	r3, r2, r3, r3
 802d8de:	eb07 0a04 	add.w	sl, r7, r4
 802d8e2:	58c3      	ldr	r3, [r0, r3]
 802d8e4:	f1c3 0900 	rsb	r9, r3, #0
 802d8e8:	f000 f91c 	bl	802db24 <__tz_unlock>
 802d8ec:	233c      	movs	r3, #60	@ 0x3c
 802d8ee:	fb99 f0f3 	sdiv	r0, r9, r3
 802d8f2:	f001 fbfe 	bl	802f0f2 <labs>
 802d8f6:	233c      	movs	r3, #60	@ 0x3c
 802d8f8:	eba5 0b04 	sub.w	fp, r5, r4
 802d8fc:	fb90 f2f3 	sdiv	r2, r0, r3
 802d900:	fb02 0013 	mls	r0, r2, r3, r0
 802d904:	9000      	str	r0, [sp, #0]
 802d906:	4a2c      	ldr	r2, [pc, #176]	@ (802d9b8 <__strftime.isra.0+0x99c>)
 802d908:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802d90c:	4659      	mov	r1, fp
 802d90e:	4650      	mov	r0, sl
 802d910:	fb99 f3f3 	sdiv	r3, r9, r3
 802d914:	f001 fe78 	bl	802f608 <sniprintf>
 802d918:	2800      	cmp	r0, #0
 802d91a:	f6ff ad0f 	blt.w	802d33c <__strftime.isra.0+0x320>
 802d91e:	eb00 0a04 	add.w	sl, r0, r4
 802d922:	4555      	cmp	r5, sl
 802d924:	f67f ad0a 	bls.w	802d33c <__strftime.isra.0+0x320>
 802d928:	2301      	movs	r3, #1
 802d92a:	9302      	str	r3, [sp, #8]
 802d92c:	e424      	b.n	802d178 <__strftime.isra.0+0x15c>
 802d92e:	6a33      	ldr	r3, [r6, #32]
 802d930:	2b00      	cmp	r3, #0
 802d932:	dbc2      	blt.n	802d8ba <__strftime.isra.0+0x89e>
 802d934:	f000 f8f0 	bl	802db18 <__tz_lock>
 802d938:	9b02      	ldr	r3, [sp, #8]
 802d93a:	b90b      	cbnz	r3, 802d940 <__strftime.isra.0+0x924>
 802d93c:	f000 f8f8 	bl	802db30 <_tzset_unlocked>
 802d940:	6a33      	ldr	r3, [r6, #32]
 802d942:	4a1e      	ldr	r2, [pc, #120]	@ (802d9bc <__strftime.isra.0+0x9a0>)
 802d944:	2b00      	cmp	r3, #0
 802d946:	bfd4      	ite	le
 802d948:	2300      	movle	r3, #0
 802d94a:	2301      	movgt	r3, #1
 802d94c:	46a2      	mov	sl, r4
 802d94e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802d952:	4648      	mov	r0, r9
 802d954:	f7e2 fca4 	bl	80102a0 <strlen>
 802d958:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802d95c:	4420      	add	r0, r4
 802d95e:	1e6b      	subs	r3, r5, #1
 802d960:	4550      	cmp	r0, sl
 802d962:	d102      	bne.n	802d96a <__strftime.isra.0+0x94e>
 802d964:	f000 f8de 	bl	802db24 <__tz_unlock>
 802d968:	e7de      	b.n	802d928 <__strftime.isra.0+0x90c>
 802d96a:	4553      	cmp	r3, sl
 802d96c:	d906      	bls.n	802d97c <__strftime.isra.0+0x960>
 802d96e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802d972:	f807 200a 	strb.w	r2, [r7, sl]
 802d976:	f10a 0a01 	add.w	sl, sl, #1
 802d97a:	e7f1      	b.n	802d960 <__strftime.isra.0+0x944>
 802d97c:	f000 f8d2 	bl	802db24 <__tz_unlock>
 802d980:	e4dc      	b.n	802d33c <__strftime.isra.0+0x320>
 802d982:	1e6b      	subs	r3, r5, #1
 802d984:	429c      	cmp	r4, r3
 802d986:	f4bf acd9 	bcs.w	802d33c <__strftime.isra.0+0x320>
 802d98a:	f104 0a01 	add.w	sl, r4, #1
 802d98e:	2325      	movs	r3, #37	@ 0x25
 802d990:	e607      	b.n	802d5a2 <__strftime.isra.0+0x586>
 802d992:	46a2      	mov	sl, r4
 802d994:	2d00      	cmp	r5, #0
 802d996:	f43f acd3 	beq.w	802d340 <__strftime.isra.0+0x324>
 802d99a:	2300      	movs	r3, #0
 802d99c:	f807 300a 	strb.w	r3, [r7, sl]
 802d9a0:	e4ce      	b.n	802d340 <__strftime.isra.0+0x324>
 802d9a2:	4649      	mov	r1, r9
 802d9a4:	e778      	b.n	802d898 <__strftime.isra.0+0x87c>
 802d9a6:	bf00      	nop
 802d9a8:	0803c164 	.word	0x0803c164
 802d9ac:	0803c2cc 	.word	0x0803c2cc
 802d9b0:	0803c136 	.word	0x0803c136
 802d9b4:	fffff894 	.word	0xfffff894
 802d9b8:	0803c16c 	.word	0x0803c16c
 802d9bc:	20000164 	.word	0x20000164

0802d9c0 <strftime>:
 802d9c0:	f7ff bb2c 	b.w	802d01c <__strftime.isra.0>

0802d9c4 <__tzcalc_limits>:
 802d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d9c8:	4604      	mov	r4, r0
 802d9ca:	f007 fca3 	bl	8035314 <__gettzinfo>
 802d9ce:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802d9d2:	429c      	cmp	r4, r3
 802d9d4:	f340 8099 	ble.w	802db0a <__tzcalc_limits+0x146>
 802d9d8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802d9dc:	19e5      	adds	r5, r4, r7
 802d9de:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802d9e2:	f240 126d 	movw	r2, #365	@ 0x16d
 802d9e6:	10ad      	asrs	r5, r5, #2
 802d9e8:	fb02 5503 	mla	r5, r2, r3, r5
 802d9ec:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802d9f0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802d9f4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802d9f8:	4f45      	ldr	r7, [pc, #276]	@ (802db10 <__tzcalc_limits+0x14c>)
 802d9fa:	fb93 f3f2 	sdiv	r3, r3, r2
 802d9fe:	441d      	add	r5, r3
 802da00:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802da04:	eb04 030c 	add.w	r3, r4, ip
 802da08:	6044      	str	r4, [r0, #4]
 802da0a:	fbb3 f3f2 	udiv	r3, r3, r2
 802da0e:	4601      	mov	r1, r0
 802da10:	441d      	add	r5, r3
 802da12:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802da16:	7a0b      	ldrb	r3, [r1, #8]
 802da18:	694a      	ldr	r2, [r1, #20]
 802da1a:	2b4a      	cmp	r3, #74	@ 0x4a
 802da1c:	d133      	bne.n	802da86 <__tzcalc_limits+0xc2>
 802da1e:	07a6      	lsls	r6, r4, #30
 802da20:	eb05 0302 	add.w	r3, r5, r2
 802da24:	d106      	bne.n	802da34 <__tzcalc_limits+0x70>
 802da26:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802da2a:	fb94 f6fe 	sdiv	r6, r4, lr
 802da2e:	fb0e 4616 	mls	r6, lr, r6, r4
 802da32:	b936      	cbnz	r6, 802da42 <__tzcalc_limits+0x7e>
 802da34:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802da38:	fb94 f6fe 	sdiv	r6, r4, lr
 802da3c:	fb0e 4616 	mls	r6, lr, r6, r4
 802da40:	b9fe      	cbnz	r6, 802da82 <__tzcalc_limits+0xbe>
 802da42:	2a3b      	cmp	r2, #59	@ 0x3b
 802da44:	bfd4      	ite	le
 802da46:	2200      	movle	r2, #0
 802da48:	2201      	movgt	r2, #1
 802da4a:	4413      	add	r3, r2
 802da4c:	3b01      	subs	r3, #1
 802da4e:	698a      	ldr	r2, [r1, #24]
 802da50:	17d6      	asrs	r6, r2, #31
 802da52:	fbc3 2607 	smlal	r2, r6, r3, r7
 802da56:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802da58:	18d2      	adds	r2, r2, r3
 802da5a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802da5e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802da62:	3128      	adds	r1, #40	@ 0x28
 802da64:	458c      	cmp	ip, r1
 802da66:	d1d6      	bne.n	802da16 <__tzcalc_limits+0x52>
 802da68:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802da6c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802da70:	428c      	cmp	r4, r1
 802da72:	4193      	sbcs	r3, r2
 802da74:	bfb4      	ite	lt
 802da76:	2301      	movlt	r3, #1
 802da78:	2300      	movge	r3, #0
 802da7a:	6003      	str	r3, [r0, #0]
 802da7c:	2001      	movs	r0, #1
 802da7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802da82:	2200      	movs	r2, #0
 802da84:	e7e1      	b.n	802da4a <__tzcalc_limits+0x86>
 802da86:	2b44      	cmp	r3, #68	@ 0x44
 802da88:	d101      	bne.n	802da8e <__tzcalc_limits+0xca>
 802da8a:	18ab      	adds	r3, r5, r2
 802da8c:	e7df      	b.n	802da4e <__tzcalc_limits+0x8a>
 802da8e:	07a3      	lsls	r3, r4, #30
 802da90:	d105      	bne.n	802da9e <__tzcalc_limits+0xda>
 802da92:	2664      	movs	r6, #100	@ 0x64
 802da94:	fb94 f3f6 	sdiv	r3, r4, r6
 802da98:	fb06 4313 	mls	r3, r6, r3, r4
 802da9c:	bb7b      	cbnz	r3, 802dafe <__tzcalc_limits+0x13a>
 802da9e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802daa2:	fb94 f6f3 	sdiv	r6, r4, r3
 802daa6:	fb03 4616 	mls	r6, r3, r6, r4
 802daaa:	fab6 f686 	clz	r6, r6
 802daae:	0976      	lsrs	r6, r6, #5
 802dab0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802db14 <__tzcalc_limits+0x150>
 802dab4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802dab8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802dabc:	462b      	mov	r3, r5
 802dabe:	f04f 0800 	mov.w	r8, #0
 802dac2:	fb0a e606 	mla	r6, sl, r6, lr
 802dac6:	f108 0801 	add.w	r8, r8, #1
 802daca:	45c1      	cmp	r9, r8
 802dacc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802dad0:	dc17      	bgt.n	802db02 <__tzcalc_limits+0x13e>
 802dad2:	f103 0804 	add.w	r8, r3, #4
 802dad6:	2607      	movs	r6, #7
 802dad8:	fb98 f6f6 	sdiv	r6, r8, r6
 802dadc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802dae0:	eba8 0606 	sub.w	r6, r8, r6
 802dae4:	1b92      	subs	r2, r2, r6
 802dae6:	690e      	ldr	r6, [r1, #16]
 802dae8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802daec:	bf48      	it	mi
 802daee:	3207      	addmi	r2, #7
 802daf0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802daf4:	4432      	add	r2, r6
 802daf6:	4572      	cmp	r2, lr
 802daf8:	da05      	bge.n	802db06 <__tzcalc_limits+0x142>
 802dafa:	4413      	add	r3, r2
 802dafc:	e7a7      	b.n	802da4e <__tzcalc_limits+0x8a>
 802dafe:	2601      	movs	r6, #1
 802db00:	e7d6      	b.n	802dab0 <__tzcalc_limits+0xec>
 802db02:	4473      	add	r3, lr
 802db04:	e7df      	b.n	802dac6 <__tzcalc_limits+0x102>
 802db06:	3a07      	subs	r2, #7
 802db08:	e7f5      	b.n	802daf6 <__tzcalc_limits+0x132>
 802db0a:	2000      	movs	r0, #0
 802db0c:	e7b7      	b.n	802da7e <__tzcalc_limits+0xba>
 802db0e:	bf00      	nop
 802db10:	00015180 	.word	0x00015180
 802db14:	0803c0ac 	.word	0x0803c0ac

0802db18 <__tz_lock>:
 802db18:	4801      	ldr	r0, [pc, #4]	@ (802db20 <__tz_lock+0x8>)
 802db1a:	f000 bae1 	b.w	802e0e0 <__retarget_lock_acquire>
 802db1e:	bf00      	nop
 802db20:	2001a090 	.word	0x2001a090

0802db24 <__tz_unlock>:
 802db24:	4801      	ldr	r0, [pc, #4]	@ (802db2c <__tz_unlock+0x8>)
 802db26:	f000 badd 	b.w	802e0e4 <__retarget_lock_release>
 802db2a:	bf00      	nop
 802db2c:	2001a090 	.word	0x2001a090

0802db30 <_tzset_unlocked>:
 802db30:	4b01      	ldr	r3, [pc, #4]	@ (802db38 <_tzset_unlocked+0x8>)
 802db32:	6818      	ldr	r0, [r3, #0]
 802db34:	f000 b802 	b.w	802db3c <_tzset_unlocked_r>
 802db38:	200002d8 	.word	0x200002d8

0802db3c <_tzset_unlocked_r>:
 802db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802db40:	b08d      	sub	sp, #52	@ 0x34
 802db42:	4607      	mov	r7, r0
 802db44:	f007 fbe6 	bl	8035314 <__gettzinfo>
 802db48:	49bc      	ldr	r1, [pc, #752]	@ (802de3c <_tzset_unlocked_r+0x300>)
 802db4a:	4dbd      	ldr	r5, [pc, #756]	@ (802de40 <_tzset_unlocked_r+0x304>)
 802db4c:	4604      	mov	r4, r0
 802db4e:	4638      	mov	r0, r7
 802db50:	f001 fac8 	bl	802f0e4 <_getenv_r>
 802db54:	4606      	mov	r6, r0
 802db56:	bb10      	cbnz	r0, 802db9e <_tzset_unlocked_r+0x62>
 802db58:	4bba      	ldr	r3, [pc, #744]	@ (802de44 <_tzset_unlocked_r+0x308>)
 802db5a:	4abb      	ldr	r2, [pc, #748]	@ (802de48 <_tzset_unlocked_r+0x30c>)
 802db5c:	6018      	str	r0, [r3, #0]
 802db5e:	4bbb      	ldr	r3, [pc, #748]	@ (802de4c <_tzset_unlocked_r+0x310>)
 802db60:	62a0      	str	r0, [r4, #40]	@ 0x28
 802db62:	6018      	str	r0, [r3, #0]
 802db64:	4bba      	ldr	r3, [pc, #744]	@ (802de50 <_tzset_unlocked_r+0x314>)
 802db66:	6520      	str	r0, [r4, #80]	@ 0x50
 802db68:	e9c3 2200 	strd	r2, r2, [r3]
 802db6c:	214a      	movs	r1, #74	@ 0x4a
 802db6e:	2200      	movs	r2, #0
 802db70:	2300      	movs	r3, #0
 802db72:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802db76:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802db7a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802db7e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802db82:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802db86:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802db8a:	6828      	ldr	r0, [r5, #0]
 802db8c:	7221      	strb	r1, [r4, #8]
 802db8e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802db92:	f001 fabb 	bl	802f10c <free>
 802db96:	602e      	str	r6, [r5, #0]
 802db98:	b00d      	add	sp, #52	@ 0x34
 802db9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802db9e:	6829      	ldr	r1, [r5, #0]
 802dba0:	2900      	cmp	r1, #0
 802dba2:	f040 808e 	bne.w	802dcc2 <_tzset_unlocked_r+0x186>
 802dba6:	6828      	ldr	r0, [r5, #0]
 802dba8:	f001 fab0 	bl	802f10c <free>
 802dbac:	4630      	mov	r0, r6
 802dbae:	f7e2 fb77 	bl	80102a0 <strlen>
 802dbb2:	1c41      	adds	r1, r0, #1
 802dbb4:	4638      	mov	r0, r7
 802dbb6:	f001 fab1 	bl	802f11c <_malloc_r>
 802dbba:	6028      	str	r0, [r5, #0]
 802dbbc:	2800      	cmp	r0, #0
 802dbbe:	f040 8086 	bne.w	802dcce <_tzset_unlocked_r+0x192>
 802dbc2:	4aa2      	ldr	r2, [pc, #648]	@ (802de4c <_tzset_unlocked_r+0x310>)
 802dbc4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802de50 <_tzset_unlocked_r+0x314>
 802dbc8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802de44 <_tzset_unlocked_r+0x308>
 802dbcc:	2300      	movs	r3, #0
 802dbce:	6013      	str	r3, [r2, #0]
 802dbd0:	4aa0      	ldr	r2, [pc, #640]	@ (802de54 <_tzset_unlocked_r+0x318>)
 802dbd2:	f8ca 3000 	str.w	r3, [sl]
 802dbd6:	2000      	movs	r0, #0
 802dbd8:	2100      	movs	r1, #0
 802dbda:	e9c8 2200 	strd	r2, r2, [r8]
 802dbde:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802dbe2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802dbe6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802dbea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802dbee:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802dbf2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802dbf6:	224a      	movs	r2, #74	@ 0x4a
 802dbf8:	7222      	strb	r2, [r4, #8]
 802dbfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 802dbfc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802dc00:	6523      	str	r3, [r4, #80]	@ 0x50
 802dc02:	7833      	ldrb	r3, [r6, #0]
 802dc04:	2b3a      	cmp	r3, #58	@ 0x3a
 802dc06:	bf08      	it	eq
 802dc08:	3601      	addeq	r6, #1
 802dc0a:	7833      	ldrb	r3, [r6, #0]
 802dc0c:	2b3c      	cmp	r3, #60	@ 0x3c
 802dc0e:	d162      	bne.n	802dcd6 <_tzset_unlocked_r+0x19a>
 802dc10:	1c75      	adds	r5, r6, #1
 802dc12:	4a91      	ldr	r2, [pc, #580]	@ (802de58 <_tzset_unlocked_r+0x31c>)
 802dc14:	4991      	ldr	r1, [pc, #580]	@ (802de5c <_tzset_unlocked_r+0x320>)
 802dc16:	ab0a      	add	r3, sp, #40	@ 0x28
 802dc18:	4628      	mov	r0, r5
 802dc1a:	f001 fccb 	bl	802f5b4 <siscanf>
 802dc1e:	2800      	cmp	r0, #0
 802dc20:	ddba      	ble.n	802db98 <_tzset_unlocked_r+0x5c>
 802dc22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc24:	1eda      	subs	r2, r3, #3
 802dc26:	2a07      	cmp	r2, #7
 802dc28:	d8b6      	bhi.n	802db98 <_tzset_unlocked_r+0x5c>
 802dc2a:	5ceb      	ldrb	r3, [r5, r3]
 802dc2c:	2b3e      	cmp	r3, #62	@ 0x3e
 802dc2e:	d1b3      	bne.n	802db98 <_tzset_unlocked_r+0x5c>
 802dc30:	3602      	adds	r6, #2
 802dc32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc34:	18f5      	adds	r5, r6, r3
 802dc36:	5cf3      	ldrb	r3, [r6, r3]
 802dc38:	2b2d      	cmp	r3, #45	@ 0x2d
 802dc3a:	d15a      	bne.n	802dcf2 <_tzset_unlocked_r+0x1b6>
 802dc3c:	3501      	adds	r5, #1
 802dc3e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802dc42:	2300      	movs	r3, #0
 802dc44:	f8ad 301e 	strh.w	r3, [sp, #30]
 802dc48:	f8ad 3020 	strh.w	r3, [sp, #32]
 802dc4c:	af08      	add	r7, sp, #32
 802dc4e:	ab0a      	add	r3, sp, #40	@ 0x28
 802dc50:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802dc54:	9303      	str	r3, [sp, #12]
 802dc56:	f10d 031e 	add.w	r3, sp, #30
 802dc5a:	9300      	str	r3, [sp, #0]
 802dc5c:	4980      	ldr	r1, [pc, #512]	@ (802de60 <_tzset_unlocked_r+0x324>)
 802dc5e:	ab0a      	add	r3, sp, #40	@ 0x28
 802dc60:	aa07      	add	r2, sp, #28
 802dc62:	4628      	mov	r0, r5
 802dc64:	f001 fca6 	bl	802f5b4 <siscanf>
 802dc68:	2800      	cmp	r0, #0
 802dc6a:	dd95      	ble.n	802db98 <_tzset_unlocked_r+0x5c>
 802dc6c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802dc70:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802dc74:	223c      	movs	r2, #60	@ 0x3c
 802dc76:	fb02 6603 	mla	r6, r2, r3, r6
 802dc7a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802dc7e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802dc82:	fb02 6603 	mla	r6, r2, r3, r6
 802dc86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc88:	fb09 f606 	mul.w	r6, r9, r6
 802dc8c:	eb05 0903 	add.w	r9, r5, r3
 802dc90:	5ceb      	ldrb	r3, [r5, r3]
 802dc92:	2b3c      	cmp	r3, #60	@ 0x3c
 802dc94:	f040 80ee 	bne.w	802de74 <_tzset_unlocked_r+0x338>
 802dc98:	f109 0501 	add.w	r5, r9, #1
 802dc9c:	4a71      	ldr	r2, [pc, #452]	@ (802de64 <_tzset_unlocked_r+0x328>)
 802dc9e:	496f      	ldr	r1, [pc, #444]	@ (802de5c <_tzset_unlocked_r+0x320>)
 802dca0:	ab0a      	add	r3, sp, #40	@ 0x28
 802dca2:	4628      	mov	r0, r5
 802dca4:	f001 fc86 	bl	802f5b4 <siscanf>
 802dca8:	2800      	cmp	r0, #0
 802dcaa:	dc28      	bgt.n	802dcfe <_tzset_unlocked_r+0x1c2>
 802dcac:	f899 3001 	ldrb.w	r3, [r9, #1]
 802dcb0:	2b3e      	cmp	r3, #62	@ 0x3e
 802dcb2:	d124      	bne.n	802dcfe <_tzset_unlocked_r+0x1c2>
 802dcb4:	4b68      	ldr	r3, [pc, #416]	@ (802de58 <_tzset_unlocked_r+0x31c>)
 802dcb6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802dcb8:	e9c8 3300 	strd	r3, r3, [r8]
 802dcbc:	f8ca 6000 	str.w	r6, [sl]
 802dcc0:	e76a      	b.n	802db98 <_tzset_unlocked_r+0x5c>
 802dcc2:	f7e2 fa8d 	bl	80101e0 <strcmp>
 802dcc6:	2800      	cmp	r0, #0
 802dcc8:	f47f af6d 	bne.w	802dba6 <_tzset_unlocked_r+0x6a>
 802dccc:	e764      	b.n	802db98 <_tzset_unlocked_r+0x5c>
 802dcce:	4631      	mov	r1, r6
 802dcd0:	f000 f9d8 	bl	802e084 <strcpy>
 802dcd4:	e775      	b.n	802dbc2 <_tzset_unlocked_r+0x86>
 802dcd6:	4a60      	ldr	r2, [pc, #384]	@ (802de58 <_tzset_unlocked_r+0x31c>)
 802dcd8:	4963      	ldr	r1, [pc, #396]	@ (802de68 <_tzset_unlocked_r+0x32c>)
 802dcda:	ab0a      	add	r3, sp, #40	@ 0x28
 802dcdc:	4630      	mov	r0, r6
 802dcde:	f001 fc69 	bl	802f5b4 <siscanf>
 802dce2:	2800      	cmp	r0, #0
 802dce4:	f77f af58 	ble.w	802db98 <_tzset_unlocked_r+0x5c>
 802dce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dcea:	3b03      	subs	r3, #3
 802dcec:	2b07      	cmp	r3, #7
 802dcee:	d9a0      	bls.n	802dc32 <_tzset_unlocked_r+0xf6>
 802dcf0:	e752      	b.n	802db98 <_tzset_unlocked_r+0x5c>
 802dcf2:	2b2b      	cmp	r3, #43	@ 0x2b
 802dcf4:	bf08      	it	eq
 802dcf6:	3501      	addeq	r5, #1
 802dcf8:	f04f 0901 	mov.w	r9, #1
 802dcfc:	e7a1      	b.n	802dc42 <_tzset_unlocked_r+0x106>
 802dcfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dd00:	1eda      	subs	r2, r3, #3
 802dd02:	2a07      	cmp	r2, #7
 802dd04:	f63f af48 	bhi.w	802db98 <_tzset_unlocked_r+0x5c>
 802dd08:	5ceb      	ldrb	r3, [r5, r3]
 802dd0a:	2b3e      	cmp	r3, #62	@ 0x3e
 802dd0c:	f47f af44 	bne.w	802db98 <_tzset_unlocked_r+0x5c>
 802dd10:	f109 0902 	add.w	r9, r9, #2
 802dd14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dd16:	eb09 0503 	add.w	r5, r9, r3
 802dd1a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802dd1e:	2b2d      	cmp	r3, #45	@ 0x2d
 802dd20:	f040 80b7 	bne.w	802de92 <_tzset_unlocked_r+0x356>
 802dd24:	3501      	adds	r5, #1
 802dd26:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802dd2a:	2300      	movs	r3, #0
 802dd2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802dd30:	f8ad 301e 	strh.w	r3, [sp, #30]
 802dd34:	f8ad 3020 	strh.w	r3, [sp, #32]
 802dd38:	930a      	str	r3, [sp, #40]	@ 0x28
 802dd3a:	ab0a      	add	r3, sp, #40	@ 0x28
 802dd3c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802dd40:	9301      	str	r3, [sp, #4]
 802dd42:	f10d 031e 	add.w	r3, sp, #30
 802dd46:	9300      	str	r3, [sp, #0]
 802dd48:	4945      	ldr	r1, [pc, #276]	@ (802de60 <_tzset_unlocked_r+0x324>)
 802dd4a:	ab0a      	add	r3, sp, #40	@ 0x28
 802dd4c:	aa07      	add	r2, sp, #28
 802dd4e:	4628      	mov	r0, r5
 802dd50:	f001 fc30 	bl	802f5b4 <siscanf>
 802dd54:	2800      	cmp	r0, #0
 802dd56:	f300 80a2 	bgt.w	802de9e <_tzset_unlocked_r+0x362>
 802dd5a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802dd5e:	9304      	str	r3, [sp, #16]
 802dd60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dd62:	4627      	mov	r7, r4
 802dd64:	441d      	add	r5, r3
 802dd66:	f04f 0b00 	mov.w	fp, #0
 802dd6a:	782b      	ldrb	r3, [r5, #0]
 802dd6c:	2b2c      	cmp	r3, #44	@ 0x2c
 802dd6e:	bf08      	it	eq
 802dd70:	3501      	addeq	r5, #1
 802dd72:	f895 9000 	ldrb.w	r9, [r5]
 802dd76:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802dd7a:	f040 80a3 	bne.w	802dec4 <_tzset_unlocked_r+0x388>
 802dd7e:	ab0a      	add	r3, sp, #40	@ 0x28
 802dd80:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802dd84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802dd88:	aa09      	add	r2, sp, #36	@ 0x24
 802dd8a:	9200      	str	r2, [sp, #0]
 802dd8c:	4937      	ldr	r1, [pc, #220]	@ (802de6c <_tzset_unlocked_r+0x330>)
 802dd8e:	9303      	str	r3, [sp, #12]
 802dd90:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802dd94:	4628      	mov	r0, r5
 802dd96:	f001 fc0d 	bl	802f5b4 <siscanf>
 802dd9a:	2803      	cmp	r0, #3
 802dd9c:	f47f aefc 	bne.w	802db98 <_tzset_unlocked_r+0x5c>
 802dda0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802dda4:	1e4b      	subs	r3, r1, #1
 802dda6:	2b0b      	cmp	r3, #11
 802dda8:	f63f aef6 	bhi.w	802db98 <_tzset_unlocked_r+0x5c>
 802ddac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802ddb0:	1e53      	subs	r3, r2, #1
 802ddb2:	2b04      	cmp	r3, #4
 802ddb4:	f63f aef0 	bhi.w	802db98 <_tzset_unlocked_r+0x5c>
 802ddb8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802ddbc:	2b06      	cmp	r3, #6
 802ddbe:	f63f aeeb 	bhi.w	802db98 <_tzset_unlocked_r+0x5c>
 802ddc2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802ddc6:	f887 9008 	strb.w	r9, [r7, #8]
 802ddca:	617b      	str	r3, [r7, #20]
 802ddcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ddce:	eb05 0903 	add.w	r9, r5, r3
 802ddd2:	2500      	movs	r5, #0
 802ddd4:	f04f 0302 	mov.w	r3, #2
 802ddd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802dddc:	f8ad 501e 	strh.w	r5, [sp, #30]
 802dde0:	f8ad 5020 	strh.w	r5, [sp, #32]
 802dde4:	950a      	str	r5, [sp, #40]	@ 0x28
 802dde6:	f899 3000 	ldrb.w	r3, [r9]
 802ddea:	2b2f      	cmp	r3, #47	@ 0x2f
 802ddec:	f040 8096 	bne.w	802df1c <_tzset_unlocked_r+0x3e0>
 802ddf0:	ab0a      	add	r3, sp, #40	@ 0x28
 802ddf2:	aa08      	add	r2, sp, #32
 802ddf4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802ddf8:	f10d 021e 	add.w	r2, sp, #30
 802ddfc:	9200      	str	r2, [sp, #0]
 802ddfe:	491c      	ldr	r1, [pc, #112]	@ (802de70 <_tzset_unlocked_r+0x334>)
 802de00:	9303      	str	r3, [sp, #12]
 802de02:	aa07      	add	r2, sp, #28
 802de04:	4648      	mov	r0, r9
 802de06:	f001 fbd5 	bl	802f5b4 <siscanf>
 802de0a:	42a8      	cmp	r0, r5
 802de0c:	f300 8086 	bgt.w	802df1c <_tzset_unlocked_r+0x3e0>
 802de10:	214a      	movs	r1, #74	@ 0x4a
 802de12:	2200      	movs	r2, #0
 802de14:	2300      	movs	r3, #0
 802de16:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802de1a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802de1e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802de22:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802de26:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802de2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802de2e:	7221      	strb	r1, [r4, #8]
 802de30:	62a5      	str	r5, [r4, #40]	@ 0x28
 802de32:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802de36:	6525      	str	r5, [r4, #80]	@ 0x50
 802de38:	e6ae      	b.n	802db98 <_tzset_unlocked_r+0x5c>
 802de3a:	bf00      	nop
 802de3c:	0803c178 	.word	0x0803c178
 802de40:	2001a068 	.word	0x2001a068
 802de44:	2001a084 	.word	0x2001a084
 802de48:	0803c17b 	.word	0x0803c17b
 802de4c:	2001a088 	.word	0x2001a088
 802de50:	20000164 	.word	0x20000164
 802de54:	0803c03a 	.word	0x0803c03a
 802de58:	2001a078 	.word	0x2001a078
 802de5c:	0803c17f 	.word	0x0803c17f
 802de60:	0803c1b4 	.word	0x0803c1b4
 802de64:	2001a06c 	.word	0x2001a06c
 802de68:	0803c192 	.word	0x0803c192
 802de6c:	0803c1a0 	.word	0x0803c1a0
 802de70:	0803c1b3 	.word	0x0803c1b3
 802de74:	4a3e      	ldr	r2, [pc, #248]	@ (802df70 <_tzset_unlocked_r+0x434>)
 802de76:	493f      	ldr	r1, [pc, #252]	@ (802df74 <_tzset_unlocked_r+0x438>)
 802de78:	ab0a      	add	r3, sp, #40	@ 0x28
 802de7a:	4648      	mov	r0, r9
 802de7c:	f001 fb9a 	bl	802f5b4 <siscanf>
 802de80:	2800      	cmp	r0, #0
 802de82:	f77f af17 	ble.w	802dcb4 <_tzset_unlocked_r+0x178>
 802de86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802de88:	3b03      	subs	r3, #3
 802de8a:	2b07      	cmp	r3, #7
 802de8c:	f67f af42 	bls.w	802dd14 <_tzset_unlocked_r+0x1d8>
 802de90:	e682      	b.n	802db98 <_tzset_unlocked_r+0x5c>
 802de92:	2b2b      	cmp	r3, #43	@ 0x2b
 802de94:	bf08      	it	eq
 802de96:	3501      	addeq	r5, #1
 802de98:	f04f 0901 	mov.w	r9, #1
 802de9c:	e745      	b.n	802dd2a <_tzset_unlocked_r+0x1ee>
 802de9e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802dea2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802dea6:	213c      	movs	r1, #60	@ 0x3c
 802dea8:	fb01 3302 	mla	r3, r1, r2, r3
 802deac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802deb0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802deb4:	fb01 3302 	mla	r3, r1, r2, r3
 802deb8:	fb09 f303 	mul.w	r3, r9, r3
 802debc:	e74f      	b.n	802dd5e <_tzset_unlocked_r+0x222>
 802debe:	f04f 0b01 	mov.w	fp, #1
 802dec2:	e752      	b.n	802dd6a <_tzset_unlocked_r+0x22e>
 802dec4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802dec8:	bf06      	itte	eq
 802deca:	3501      	addeq	r5, #1
 802decc:	464b      	moveq	r3, r9
 802dece:	2344      	movne	r3, #68	@ 0x44
 802ded0:	220a      	movs	r2, #10
 802ded2:	a90b      	add	r1, sp, #44	@ 0x2c
 802ded4:	4628      	mov	r0, r5
 802ded6:	9305      	str	r3, [sp, #20]
 802ded8:	f007 f950 	bl	803517c <strtoul>
 802dedc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802dee0:	9b05      	ldr	r3, [sp, #20]
 802dee2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802dee6:	45a9      	cmp	r9, r5
 802dee8:	d114      	bne.n	802df14 <_tzset_unlocked_r+0x3d8>
 802deea:	234d      	movs	r3, #77	@ 0x4d
 802deec:	f1bb 0f00 	cmp.w	fp, #0
 802def0:	d107      	bne.n	802df02 <_tzset_unlocked_r+0x3c6>
 802def2:	7223      	strb	r3, [r4, #8]
 802def4:	2103      	movs	r1, #3
 802def6:	2302      	movs	r3, #2
 802def8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802defc:	f8c4 b014 	str.w	fp, [r4, #20]
 802df00:	e767      	b.n	802ddd2 <_tzset_unlocked_r+0x296>
 802df02:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802df06:	220b      	movs	r2, #11
 802df08:	2301      	movs	r3, #1
 802df0a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802df0e:	2300      	movs	r3, #0
 802df10:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802df12:	e75e      	b.n	802ddd2 <_tzset_unlocked_r+0x296>
 802df14:	b280      	uxth	r0, r0
 802df16:	723b      	strb	r3, [r7, #8]
 802df18:	6178      	str	r0, [r7, #20]
 802df1a:	e75a      	b.n	802ddd2 <_tzset_unlocked_r+0x296>
 802df1c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802df20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802df24:	213c      	movs	r1, #60	@ 0x3c
 802df26:	fb01 3302 	mla	r3, r1, r2, r3
 802df2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802df2e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802df32:	fb01 3302 	mla	r3, r1, r2, r3
 802df36:	61bb      	str	r3, [r7, #24]
 802df38:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802df3a:	3728      	adds	r7, #40	@ 0x28
 802df3c:	444d      	add	r5, r9
 802df3e:	f1bb 0f00 	cmp.w	fp, #0
 802df42:	d0bc      	beq.n	802debe <_tzset_unlocked_r+0x382>
 802df44:	9b04      	ldr	r3, [sp, #16]
 802df46:	6523      	str	r3, [r4, #80]	@ 0x50
 802df48:	4b0b      	ldr	r3, [pc, #44]	@ (802df78 <_tzset_unlocked_r+0x43c>)
 802df4a:	f8c8 3000 	str.w	r3, [r8]
 802df4e:	6860      	ldr	r0, [r4, #4]
 802df50:	4b07      	ldr	r3, [pc, #28]	@ (802df70 <_tzset_unlocked_r+0x434>)
 802df52:	62a6      	str	r6, [r4, #40]	@ 0x28
 802df54:	f8c8 3004 	str.w	r3, [r8, #4]
 802df58:	f7ff fd34 	bl	802d9c4 <__tzcalc_limits>
 802df5c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802df5e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802df60:	f8ca 2000 	str.w	r2, [sl]
 802df64:	1a9b      	subs	r3, r3, r2
 802df66:	4a05      	ldr	r2, [pc, #20]	@ (802df7c <_tzset_unlocked_r+0x440>)
 802df68:	bf18      	it	ne
 802df6a:	2301      	movne	r3, #1
 802df6c:	6013      	str	r3, [r2, #0]
 802df6e:	e613      	b.n	802db98 <_tzset_unlocked_r+0x5c>
 802df70:	2001a06c 	.word	0x2001a06c
 802df74:	0803c192 	.word	0x0803c192
 802df78:	2001a078 	.word	0x2001a078
 802df7c:	2001a088 	.word	0x2001a088

0802df80 <__locale_mb_cur_max>:
 802df80:	4b01      	ldr	r3, [pc, #4]	@ (802df88 <__locale_mb_cur_max+0x8>)
 802df82:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802df86:	4770      	bx	lr
 802df88:	2000016c 	.word	0x2000016c

0802df8c <_localeconv_r>:
 802df8c:	4800      	ldr	r0, [pc, #0]	@ (802df90 <_localeconv_r+0x4>)
 802df8e:	4770      	bx	lr
 802df90:	2000025c 	.word	0x2000025c

0802df94 <_close_r>:
 802df94:	b538      	push	{r3, r4, r5, lr}
 802df96:	4d06      	ldr	r5, [pc, #24]	@ (802dfb0 <_close_r+0x1c>)
 802df98:	2300      	movs	r3, #0
 802df9a:	4604      	mov	r4, r0
 802df9c:	4608      	mov	r0, r1
 802df9e:	602b      	str	r3, [r5, #0]
 802dfa0:	f7e4 fb1c 	bl	80125dc <_close>
 802dfa4:	1c43      	adds	r3, r0, #1
 802dfa6:	d102      	bne.n	802dfae <_close_r+0x1a>
 802dfa8:	682b      	ldr	r3, [r5, #0]
 802dfaa:	b103      	cbz	r3, 802dfae <_close_r+0x1a>
 802dfac:	6023      	str	r3, [r4, #0]
 802dfae:	bd38      	pop	{r3, r4, r5, pc}
 802dfb0:	2001a08c 	.word	0x2001a08c

0802dfb4 <_reclaim_reent>:
 802dfb4:	4b14      	ldr	r3, [pc, #80]	@ (802e008 <_reclaim_reent+0x54>)
 802dfb6:	681b      	ldr	r3, [r3, #0]
 802dfb8:	4283      	cmp	r3, r0
 802dfba:	b570      	push	{r4, r5, r6, lr}
 802dfbc:	4604      	mov	r4, r0
 802dfbe:	d022      	beq.n	802e006 <_reclaim_reent+0x52>
 802dfc0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802dfc2:	b153      	cbz	r3, 802dfda <_reclaim_reent+0x26>
 802dfc4:	2500      	movs	r5, #0
 802dfc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802dfc8:	5959      	ldr	r1, [r3, r5]
 802dfca:	b9b1      	cbnz	r1, 802dffa <_reclaim_reent+0x46>
 802dfcc:	3504      	adds	r5, #4
 802dfce:	2d80      	cmp	r5, #128	@ 0x80
 802dfd0:	d1f9      	bne.n	802dfc6 <_reclaim_reent+0x12>
 802dfd2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802dfd4:	4620      	mov	r0, r4
 802dfd6:	f000 ff89 	bl	802eeec <_free_r>
 802dfda:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802dfdc:	b111      	cbz	r1, 802dfe4 <_reclaim_reent+0x30>
 802dfde:	4620      	mov	r0, r4
 802dfe0:	f000 ff84 	bl	802eeec <_free_r>
 802dfe4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802dfe6:	b111      	cbz	r1, 802dfee <_reclaim_reent+0x3a>
 802dfe8:	4620      	mov	r0, r4
 802dfea:	f000 ff7f 	bl	802eeec <_free_r>
 802dfee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802dff0:	b14b      	cbz	r3, 802e006 <_reclaim_reent+0x52>
 802dff2:	4620      	mov	r0, r4
 802dff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dff8:	4718      	bx	r3
 802dffa:	680e      	ldr	r6, [r1, #0]
 802dffc:	4620      	mov	r0, r4
 802dffe:	f000 ff75 	bl	802eeec <_free_r>
 802e002:	4631      	mov	r1, r6
 802e004:	e7e1      	b.n	802dfca <_reclaim_reent+0x16>
 802e006:	bd70      	pop	{r4, r5, r6, pc}
 802e008:	200002d8 	.word	0x200002d8

0802e00c <_lseek_r>:
 802e00c:	b538      	push	{r3, r4, r5, lr}
 802e00e:	4d07      	ldr	r5, [pc, #28]	@ (802e02c <_lseek_r+0x20>)
 802e010:	4604      	mov	r4, r0
 802e012:	4608      	mov	r0, r1
 802e014:	4611      	mov	r1, r2
 802e016:	2200      	movs	r2, #0
 802e018:	602a      	str	r2, [r5, #0]
 802e01a:	461a      	mov	r2, r3
 802e01c:	f7e4 fae8 	bl	80125f0 <_lseek>
 802e020:	1c43      	adds	r3, r0, #1
 802e022:	d102      	bne.n	802e02a <_lseek_r+0x1e>
 802e024:	682b      	ldr	r3, [r5, #0]
 802e026:	b103      	cbz	r3, 802e02a <_lseek_r+0x1e>
 802e028:	6023      	str	r3, [r4, #0]
 802e02a:	bd38      	pop	{r3, r4, r5, pc}
 802e02c:	2001a08c 	.word	0x2001a08c

0802e030 <_read_r>:
 802e030:	b538      	push	{r3, r4, r5, lr}
 802e032:	4d07      	ldr	r5, [pc, #28]	@ (802e050 <_read_r+0x20>)
 802e034:	4604      	mov	r4, r0
 802e036:	4608      	mov	r0, r1
 802e038:	4611      	mov	r1, r2
 802e03a:	2200      	movs	r2, #0
 802e03c:	602a      	str	r2, [r5, #0]
 802e03e:	461a      	mov	r2, r3
 802e040:	f7e4 faae 	bl	80125a0 <_read>
 802e044:	1c43      	adds	r3, r0, #1
 802e046:	d102      	bne.n	802e04e <_read_r+0x1e>
 802e048:	682b      	ldr	r3, [r5, #0]
 802e04a:	b103      	cbz	r3, 802e04e <_read_r+0x1e>
 802e04c:	6023      	str	r3, [r4, #0]
 802e04e:	bd38      	pop	{r3, r4, r5, pc}
 802e050:	2001a08c 	.word	0x2001a08c

0802e054 <_write_r>:
 802e054:	b538      	push	{r3, r4, r5, lr}
 802e056:	4d07      	ldr	r5, [pc, #28]	@ (802e074 <_write_r+0x20>)
 802e058:	4604      	mov	r4, r0
 802e05a:	4608      	mov	r0, r1
 802e05c:	4611      	mov	r1, r2
 802e05e:	2200      	movs	r2, #0
 802e060:	602a      	str	r2, [r5, #0]
 802e062:	461a      	mov	r2, r3
 802e064:	f7e4 faac 	bl	80125c0 <_write>
 802e068:	1c43      	adds	r3, r0, #1
 802e06a:	d102      	bne.n	802e072 <_write_r+0x1e>
 802e06c:	682b      	ldr	r3, [r5, #0]
 802e06e:	b103      	cbz	r3, 802e072 <_write_r+0x1e>
 802e070:	6023      	str	r3, [r4, #0]
 802e072:	bd38      	pop	{r3, r4, r5, pc}
 802e074:	2001a08c 	.word	0x2001a08c

0802e078 <__errno>:
 802e078:	4b01      	ldr	r3, [pc, #4]	@ (802e080 <__errno+0x8>)
 802e07a:	6818      	ldr	r0, [r3, #0]
 802e07c:	4770      	bx	lr
 802e07e:	bf00      	nop
 802e080:	200002d8 	.word	0x200002d8

0802e084 <strcpy>:
 802e084:	4603      	mov	r3, r0
 802e086:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e08a:	f803 2b01 	strb.w	r2, [r3], #1
 802e08e:	2a00      	cmp	r2, #0
 802e090:	d1f9      	bne.n	802e086 <strcpy+0x2>
 802e092:	4770      	bx	lr

0802e094 <__libc_init_array>:
 802e094:	b570      	push	{r4, r5, r6, lr}
 802e096:	4d0d      	ldr	r5, [pc, #52]	@ (802e0cc <__libc_init_array+0x38>)
 802e098:	4c0d      	ldr	r4, [pc, #52]	@ (802e0d0 <__libc_init_array+0x3c>)
 802e09a:	1b64      	subs	r4, r4, r5
 802e09c:	10a4      	asrs	r4, r4, #2
 802e09e:	2600      	movs	r6, #0
 802e0a0:	42a6      	cmp	r6, r4
 802e0a2:	d109      	bne.n	802e0b8 <__libc_init_array+0x24>
 802e0a4:	4d0b      	ldr	r5, [pc, #44]	@ (802e0d4 <__libc_init_array+0x40>)
 802e0a6:	4c0c      	ldr	r4, [pc, #48]	@ (802e0d8 <__libc_init_array+0x44>)
 802e0a8:	f007 ff60 	bl	8035f6c <_init>
 802e0ac:	1b64      	subs	r4, r4, r5
 802e0ae:	10a4      	asrs	r4, r4, #2
 802e0b0:	2600      	movs	r6, #0
 802e0b2:	42a6      	cmp	r6, r4
 802e0b4:	d105      	bne.n	802e0c2 <__libc_init_array+0x2e>
 802e0b6:	bd70      	pop	{r4, r5, r6, pc}
 802e0b8:	f855 3b04 	ldr.w	r3, [r5], #4
 802e0bc:	4798      	blx	r3
 802e0be:	3601      	adds	r6, #1
 802e0c0:	e7ee      	b.n	802e0a0 <__libc_init_array+0xc>
 802e0c2:	f855 3b04 	ldr.w	r3, [r5], #4
 802e0c6:	4798      	blx	r3
 802e0c8:	3601      	adds	r6, #1
 802e0ca:	e7f2      	b.n	802e0b2 <__libc_init_array+0x1e>
 802e0cc:	0803c808 	.word	0x0803c808
 802e0d0:	0803c808 	.word	0x0803c808
 802e0d4:	0803c808 	.word	0x0803c808
 802e0d8:	0803c810 	.word	0x0803c810

0802e0dc <__retarget_lock_init_recursive>:
 802e0dc:	4770      	bx	lr

0802e0de <__retarget_lock_close_recursive>:
 802e0de:	4770      	bx	lr

0802e0e0 <__retarget_lock_acquire>:
 802e0e0:	4770      	bx	lr

0802e0e2 <__retarget_lock_acquire_recursive>:
 802e0e2:	4770      	bx	lr

0802e0e4 <__retarget_lock_release>:
 802e0e4:	4770      	bx	lr

0802e0e6 <__retarget_lock_release_recursive>:
 802e0e6:	4770      	bx	lr

0802e0e8 <memcpy>:
 802e0e8:	440a      	add	r2, r1
 802e0ea:	4291      	cmp	r1, r2
 802e0ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802e0f0:	d100      	bne.n	802e0f4 <memcpy+0xc>
 802e0f2:	4770      	bx	lr
 802e0f4:	b510      	push	{r4, lr}
 802e0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e0fe:	4291      	cmp	r1, r2
 802e100:	d1f9      	bne.n	802e0f6 <memcpy+0xe>
 802e102:	bd10      	pop	{r4, pc}

0802e104 <_wcrtomb_r>:
 802e104:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e106:	4c09      	ldr	r4, [pc, #36]	@ (802e12c <_wcrtomb_r+0x28>)
 802e108:	b085      	sub	sp, #20
 802e10a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802e10e:	4605      	mov	r5, r0
 802e110:	461e      	mov	r6, r3
 802e112:	b909      	cbnz	r1, 802e118 <_wcrtomb_r+0x14>
 802e114:	460a      	mov	r2, r1
 802e116:	a901      	add	r1, sp, #4
 802e118:	47b8      	blx	r7
 802e11a:	1c43      	adds	r3, r0, #1
 802e11c:	bf01      	itttt	eq
 802e11e:	2300      	moveq	r3, #0
 802e120:	6033      	streq	r3, [r6, #0]
 802e122:	238a      	moveq	r3, #138	@ 0x8a
 802e124:	602b      	streq	r3, [r5, #0]
 802e126:	b005      	add	sp, #20
 802e128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e12a:	bf00      	nop
 802e12c:	2000016c 	.word	0x2000016c

0802e130 <frexp>:
 802e130:	b570      	push	{r4, r5, r6, lr}
 802e132:	2100      	movs	r1, #0
 802e134:	ec55 4b10 	vmov	r4, r5, d0
 802e138:	6001      	str	r1, [r0, #0]
 802e13a:	4915      	ldr	r1, [pc, #84]	@ (802e190 <frexp+0x60>)
 802e13c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802e140:	428a      	cmp	r2, r1
 802e142:	4606      	mov	r6, r0
 802e144:	462b      	mov	r3, r5
 802e146:	d820      	bhi.n	802e18a <frexp+0x5a>
 802e148:	4621      	mov	r1, r4
 802e14a:	4311      	orrs	r1, r2
 802e14c:	d01d      	beq.n	802e18a <frexp+0x5a>
 802e14e:	4911      	ldr	r1, [pc, #68]	@ (802e194 <frexp+0x64>)
 802e150:	4029      	ands	r1, r5
 802e152:	b961      	cbnz	r1, 802e16e <frexp+0x3e>
 802e154:	4b10      	ldr	r3, [pc, #64]	@ (802e198 <frexp+0x68>)
 802e156:	2200      	movs	r2, #0
 802e158:	4620      	mov	r0, r4
 802e15a:	4629      	mov	r1, r5
 802e15c:	f7e2 fa64 	bl	8010628 <__aeabi_dmul>
 802e160:	460b      	mov	r3, r1
 802e162:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802e166:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802e16a:	4604      	mov	r4, r0
 802e16c:	6031      	str	r1, [r6, #0]
 802e16e:	6831      	ldr	r1, [r6, #0]
 802e170:	1512      	asrs	r2, r2, #20
 802e172:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802e176:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802e17a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802e17e:	4411      	add	r1, r2
 802e180:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802e184:	6031      	str	r1, [r6, #0]
 802e186:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802e18a:	ec45 4b10 	vmov	d0, r4, r5
 802e18e:	bd70      	pop	{r4, r5, r6, pc}
 802e190:	7fefffff 	.word	0x7fefffff
 802e194:	7ff00000 	.word	0x7ff00000
 802e198:	43500000 	.word	0x43500000

0802e19c <register_fini>:
 802e19c:	4b02      	ldr	r3, [pc, #8]	@ (802e1a8 <register_fini+0xc>)
 802e19e:	b113      	cbz	r3, 802e1a6 <register_fini+0xa>
 802e1a0:	4802      	ldr	r0, [pc, #8]	@ (802e1ac <register_fini+0x10>)
 802e1a2:	f000 b810 	b.w	802e1c6 <atexit>
 802e1a6:	4770      	bx	lr
 802e1a8:	00000000 	.word	0x00000000
 802e1ac:	0803562d 	.word	0x0803562d

0802e1b0 <abort>:
 802e1b0:	b508      	push	{r3, lr}
 802e1b2:	2006      	movs	r0, #6
 802e1b4:	f007 f8a6 	bl	8035304 <raise>
 802e1b8:	2001      	movs	r0, #1
 802e1ba:	f7e4 f9eb 	bl	8012594 <_exit>

0802e1be <abs>:
 802e1be:	2800      	cmp	r0, #0
 802e1c0:	bfb8      	it	lt
 802e1c2:	4240      	neglt	r0, r0
 802e1c4:	4770      	bx	lr

0802e1c6 <atexit>:
 802e1c6:	2300      	movs	r3, #0
 802e1c8:	4601      	mov	r1, r0
 802e1ca:	461a      	mov	r2, r3
 802e1cc:	4618      	mov	r0, r3
 802e1ce:	f007 bb01 	b.w	80357d4 <__register_exitproc>

0802e1d2 <quorem>:
 802e1d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e1d6:	6903      	ldr	r3, [r0, #16]
 802e1d8:	690c      	ldr	r4, [r1, #16]
 802e1da:	42a3      	cmp	r3, r4
 802e1dc:	4607      	mov	r7, r0
 802e1de:	db7e      	blt.n	802e2de <quorem+0x10c>
 802e1e0:	3c01      	subs	r4, #1
 802e1e2:	f101 0814 	add.w	r8, r1, #20
 802e1e6:	00a3      	lsls	r3, r4, #2
 802e1e8:	f100 0514 	add.w	r5, r0, #20
 802e1ec:	9300      	str	r3, [sp, #0]
 802e1ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e1f2:	9301      	str	r3, [sp, #4]
 802e1f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802e1f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e1fc:	3301      	adds	r3, #1
 802e1fe:	429a      	cmp	r2, r3
 802e200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802e204:	fbb2 f6f3 	udiv	r6, r2, r3
 802e208:	d32e      	bcc.n	802e268 <quorem+0x96>
 802e20a:	f04f 0a00 	mov.w	sl, #0
 802e20e:	46c4      	mov	ip, r8
 802e210:	46ae      	mov	lr, r5
 802e212:	46d3      	mov	fp, sl
 802e214:	f85c 3b04 	ldr.w	r3, [ip], #4
 802e218:	b298      	uxth	r0, r3
 802e21a:	fb06 a000 	mla	r0, r6, r0, sl
 802e21e:	0c02      	lsrs	r2, r0, #16
 802e220:	0c1b      	lsrs	r3, r3, #16
 802e222:	fb06 2303 	mla	r3, r6, r3, r2
 802e226:	f8de 2000 	ldr.w	r2, [lr]
 802e22a:	b280      	uxth	r0, r0
 802e22c:	b292      	uxth	r2, r2
 802e22e:	1a12      	subs	r2, r2, r0
 802e230:	445a      	add	r2, fp
 802e232:	f8de 0000 	ldr.w	r0, [lr]
 802e236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802e23a:	b29b      	uxth	r3, r3
 802e23c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802e240:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802e244:	b292      	uxth	r2, r2
 802e246:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802e24a:	45e1      	cmp	r9, ip
 802e24c:	f84e 2b04 	str.w	r2, [lr], #4
 802e250:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802e254:	d2de      	bcs.n	802e214 <quorem+0x42>
 802e256:	9b00      	ldr	r3, [sp, #0]
 802e258:	58eb      	ldr	r3, [r5, r3]
 802e25a:	b92b      	cbnz	r3, 802e268 <quorem+0x96>
 802e25c:	9b01      	ldr	r3, [sp, #4]
 802e25e:	3b04      	subs	r3, #4
 802e260:	429d      	cmp	r5, r3
 802e262:	461a      	mov	r2, r3
 802e264:	d32f      	bcc.n	802e2c6 <quorem+0xf4>
 802e266:	613c      	str	r4, [r7, #16]
 802e268:	4638      	mov	r0, r7
 802e26a:	f005 fce3 	bl	8033c34 <__mcmp>
 802e26e:	2800      	cmp	r0, #0
 802e270:	db25      	blt.n	802e2be <quorem+0xec>
 802e272:	4629      	mov	r1, r5
 802e274:	2000      	movs	r0, #0
 802e276:	f858 2b04 	ldr.w	r2, [r8], #4
 802e27a:	f8d1 c000 	ldr.w	ip, [r1]
 802e27e:	fa1f fe82 	uxth.w	lr, r2
 802e282:	fa1f f38c 	uxth.w	r3, ip
 802e286:	eba3 030e 	sub.w	r3, r3, lr
 802e28a:	4403      	add	r3, r0
 802e28c:	0c12      	lsrs	r2, r2, #16
 802e28e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802e292:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802e296:	b29b      	uxth	r3, r3
 802e298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e29c:	45c1      	cmp	r9, r8
 802e29e:	f841 3b04 	str.w	r3, [r1], #4
 802e2a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e2a6:	d2e6      	bcs.n	802e276 <quorem+0xa4>
 802e2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e2ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e2b0:	b922      	cbnz	r2, 802e2bc <quorem+0xea>
 802e2b2:	3b04      	subs	r3, #4
 802e2b4:	429d      	cmp	r5, r3
 802e2b6:	461a      	mov	r2, r3
 802e2b8:	d30b      	bcc.n	802e2d2 <quorem+0x100>
 802e2ba:	613c      	str	r4, [r7, #16]
 802e2bc:	3601      	adds	r6, #1
 802e2be:	4630      	mov	r0, r6
 802e2c0:	b003      	add	sp, #12
 802e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e2c6:	6812      	ldr	r2, [r2, #0]
 802e2c8:	3b04      	subs	r3, #4
 802e2ca:	2a00      	cmp	r2, #0
 802e2cc:	d1cb      	bne.n	802e266 <quorem+0x94>
 802e2ce:	3c01      	subs	r4, #1
 802e2d0:	e7c6      	b.n	802e260 <quorem+0x8e>
 802e2d2:	6812      	ldr	r2, [r2, #0]
 802e2d4:	3b04      	subs	r3, #4
 802e2d6:	2a00      	cmp	r2, #0
 802e2d8:	d1ef      	bne.n	802e2ba <quorem+0xe8>
 802e2da:	3c01      	subs	r4, #1
 802e2dc:	e7ea      	b.n	802e2b4 <quorem+0xe2>
 802e2de:	2000      	movs	r0, #0
 802e2e0:	e7ee      	b.n	802e2c0 <quorem+0xee>
 802e2e2:	0000      	movs	r0, r0
 802e2e4:	0000      	movs	r0, r0
	...

0802e2e8 <_dtoa_r>:
 802e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e2ec:	b099      	sub	sp, #100	@ 0x64
 802e2ee:	ed8d 0b02 	vstr	d0, [sp, #8]
 802e2f2:	9109      	str	r1, [sp, #36]	@ 0x24
 802e2f4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802e2f6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802e2f8:	920e      	str	r2, [sp, #56]	@ 0x38
 802e2fa:	ec55 4b10 	vmov	r4, r5, d0
 802e2fe:	4683      	mov	fp, r0
 802e300:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e302:	b149      	cbz	r1, 802e318 <_dtoa_r+0x30>
 802e304:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e306:	604a      	str	r2, [r1, #4]
 802e308:	2301      	movs	r3, #1
 802e30a:	4093      	lsls	r3, r2
 802e30c:	608b      	str	r3, [r1, #8]
 802e30e:	f005 fa40 	bl	8033792 <_Bfree>
 802e312:	2300      	movs	r3, #0
 802e314:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802e318:	1e2b      	subs	r3, r5, #0
 802e31a:	bfb9      	ittee	lt
 802e31c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802e320:	9303      	strlt	r3, [sp, #12]
 802e322:	2300      	movge	r3, #0
 802e324:	6033      	strge	r3, [r6, #0]
 802e326:	9f03      	ldr	r7, [sp, #12]
 802e328:	4b97      	ldr	r3, [pc, #604]	@ (802e588 <_dtoa_r+0x2a0>)
 802e32a:	bfbc      	itt	lt
 802e32c:	2201      	movlt	r2, #1
 802e32e:	6032      	strlt	r2, [r6, #0]
 802e330:	43bb      	bics	r3, r7
 802e332:	d114      	bne.n	802e35e <_dtoa_r+0x76>
 802e334:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e336:	f242 730f 	movw	r3, #9999	@ 0x270f
 802e33a:	6013      	str	r3, [r2, #0]
 802e33c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802e340:	4323      	orrs	r3, r4
 802e342:	f000 854c 	beq.w	802edde <_dtoa_r+0xaf6>
 802e346:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e348:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802e5a0 <_dtoa_r+0x2b8>
 802e34c:	b11b      	cbz	r3, 802e356 <_dtoa_r+0x6e>
 802e34e:	f10a 0303 	add.w	r3, sl, #3
 802e352:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e354:	6013      	str	r3, [r2, #0]
 802e356:	4650      	mov	r0, sl
 802e358:	b019      	add	sp, #100	@ 0x64
 802e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e35e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e362:	2200      	movs	r2, #0
 802e364:	ec51 0b17 	vmov	r0, r1, d7
 802e368:	2300      	movs	r3, #0
 802e36a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802e36e:	f7e2 fbc3 	bl	8010af8 <__aeabi_dcmpeq>
 802e372:	4680      	mov	r8, r0
 802e374:	b150      	cbz	r0, 802e38c <_dtoa_r+0xa4>
 802e376:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e378:	2301      	movs	r3, #1
 802e37a:	6013      	str	r3, [r2, #0]
 802e37c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e37e:	b113      	cbz	r3, 802e386 <_dtoa_r+0x9e>
 802e380:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e382:	4b82      	ldr	r3, [pc, #520]	@ (802e58c <_dtoa_r+0x2a4>)
 802e384:	6013      	str	r3, [r2, #0]
 802e386:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802e5a4 <_dtoa_r+0x2bc>
 802e38a:	e7e4      	b.n	802e356 <_dtoa_r+0x6e>
 802e38c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e390:	aa16      	add	r2, sp, #88	@ 0x58
 802e392:	a917      	add	r1, sp, #92	@ 0x5c
 802e394:	4658      	mov	r0, fp
 802e396:	f005 fd6d 	bl	8033e74 <__d2b>
 802e39a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802e39e:	4681      	mov	r9, r0
 802e3a0:	2e00      	cmp	r6, #0
 802e3a2:	d077      	beq.n	802e494 <_dtoa_r+0x1ac>
 802e3a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e3a6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802e3aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e3ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e3b2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802e3b6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802e3ba:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802e3be:	4619      	mov	r1, r3
 802e3c0:	2200      	movs	r2, #0
 802e3c2:	4b73      	ldr	r3, [pc, #460]	@ (802e590 <_dtoa_r+0x2a8>)
 802e3c4:	f7e1 ff78 	bl	80102b8 <__aeabi_dsub>
 802e3c8:	a369      	add	r3, pc, #420	@ (adr r3, 802e570 <_dtoa_r+0x288>)
 802e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3ce:	f7e2 f92b 	bl	8010628 <__aeabi_dmul>
 802e3d2:	a369      	add	r3, pc, #420	@ (adr r3, 802e578 <_dtoa_r+0x290>)
 802e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3d8:	f7e1 ff70 	bl	80102bc <__adddf3>
 802e3dc:	4604      	mov	r4, r0
 802e3de:	4630      	mov	r0, r6
 802e3e0:	460d      	mov	r5, r1
 802e3e2:	f7e2 f8b7 	bl	8010554 <__aeabi_i2d>
 802e3e6:	a366      	add	r3, pc, #408	@ (adr r3, 802e580 <_dtoa_r+0x298>)
 802e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3ec:	f7e2 f91c 	bl	8010628 <__aeabi_dmul>
 802e3f0:	4602      	mov	r2, r0
 802e3f2:	460b      	mov	r3, r1
 802e3f4:	4620      	mov	r0, r4
 802e3f6:	4629      	mov	r1, r5
 802e3f8:	f7e1 ff60 	bl	80102bc <__adddf3>
 802e3fc:	4604      	mov	r4, r0
 802e3fe:	460d      	mov	r5, r1
 802e400:	f7e2 fbc2 	bl	8010b88 <__aeabi_d2iz>
 802e404:	2200      	movs	r2, #0
 802e406:	4607      	mov	r7, r0
 802e408:	2300      	movs	r3, #0
 802e40a:	4620      	mov	r0, r4
 802e40c:	4629      	mov	r1, r5
 802e40e:	f7e2 fb7d 	bl	8010b0c <__aeabi_dcmplt>
 802e412:	b140      	cbz	r0, 802e426 <_dtoa_r+0x13e>
 802e414:	4638      	mov	r0, r7
 802e416:	f7e2 f89d 	bl	8010554 <__aeabi_i2d>
 802e41a:	4622      	mov	r2, r4
 802e41c:	462b      	mov	r3, r5
 802e41e:	f7e2 fb6b 	bl	8010af8 <__aeabi_dcmpeq>
 802e422:	b900      	cbnz	r0, 802e426 <_dtoa_r+0x13e>
 802e424:	3f01      	subs	r7, #1
 802e426:	2f16      	cmp	r7, #22
 802e428:	d851      	bhi.n	802e4ce <_dtoa_r+0x1e6>
 802e42a:	4b5a      	ldr	r3, [pc, #360]	@ (802e594 <_dtoa_r+0x2ac>)
 802e42c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e438:	f7e2 fb68 	bl	8010b0c <__aeabi_dcmplt>
 802e43c:	2800      	cmp	r0, #0
 802e43e:	d048      	beq.n	802e4d2 <_dtoa_r+0x1ea>
 802e440:	3f01      	subs	r7, #1
 802e442:	2300      	movs	r3, #0
 802e444:	9312      	str	r3, [sp, #72]	@ 0x48
 802e446:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e448:	1b9b      	subs	r3, r3, r6
 802e44a:	1e5a      	subs	r2, r3, #1
 802e44c:	bf44      	itt	mi
 802e44e:	f1c3 0801 	rsbmi	r8, r3, #1
 802e452:	2300      	movmi	r3, #0
 802e454:	9208      	str	r2, [sp, #32]
 802e456:	bf54      	ite	pl
 802e458:	f04f 0800 	movpl.w	r8, #0
 802e45c:	9308      	strmi	r3, [sp, #32]
 802e45e:	2f00      	cmp	r7, #0
 802e460:	db39      	blt.n	802e4d6 <_dtoa_r+0x1ee>
 802e462:	9b08      	ldr	r3, [sp, #32]
 802e464:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e466:	443b      	add	r3, r7
 802e468:	9308      	str	r3, [sp, #32]
 802e46a:	2300      	movs	r3, #0
 802e46c:	930a      	str	r3, [sp, #40]	@ 0x28
 802e46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e470:	2b09      	cmp	r3, #9
 802e472:	d865      	bhi.n	802e540 <_dtoa_r+0x258>
 802e474:	2b05      	cmp	r3, #5
 802e476:	bfc4      	itt	gt
 802e478:	3b04      	subgt	r3, #4
 802e47a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e47e:	f1a3 0302 	sub.w	r3, r3, #2
 802e482:	bfcc      	ite	gt
 802e484:	2400      	movgt	r4, #0
 802e486:	2401      	movle	r4, #1
 802e488:	2b03      	cmp	r3, #3
 802e48a:	d864      	bhi.n	802e556 <_dtoa_r+0x26e>
 802e48c:	e8df f003 	tbb	[pc, r3]
 802e490:	5635372a 	.word	0x5635372a
 802e494:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e498:	441e      	add	r6, r3
 802e49a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e49e:	2b20      	cmp	r3, #32
 802e4a0:	bfc1      	itttt	gt
 802e4a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e4a6:	409f      	lslgt	r7, r3
 802e4a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e4ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e4b0:	bfd6      	itet	le
 802e4b2:	f1c3 0320 	rsble	r3, r3, #32
 802e4b6:	ea47 0003 	orrgt.w	r0, r7, r3
 802e4ba:	fa04 f003 	lslle.w	r0, r4, r3
 802e4be:	f7e2 f839 	bl	8010534 <__aeabi_ui2d>
 802e4c2:	2201      	movs	r2, #1
 802e4c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e4c8:	3e01      	subs	r6, #1
 802e4ca:	9214      	str	r2, [sp, #80]	@ 0x50
 802e4cc:	e777      	b.n	802e3be <_dtoa_r+0xd6>
 802e4ce:	2301      	movs	r3, #1
 802e4d0:	e7b8      	b.n	802e444 <_dtoa_r+0x15c>
 802e4d2:	9012      	str	r0, [sp, #72]	@ 0x48
 802e4d4:	e7b7      	b.n	802e446 <_dtoa_r+0x15e>
 802e4d6:	427b      	negs	r3, r7
 802e4d8:	930a      	str	r3, [sp, #40]	@ 0x28
 802e4da:	2300      	movs	r3, #0
 802e4dc:	eba8 0807 	sub.w	r8, r8, r7
 802e4e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e4e2:	e7c4      	b.n	802e46e <_dtoa_r+0x186>
 802e4e4:	2300      	movs	r3, #0
 802e4e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e4ea:	2b00      	cmp	r3, #0
 802e4ec:	dc36      	bgt.n	802e55c <_dtoa_r+0x274>
 802e4ee:	2301      	movs	r3, #1
 802e4f0:	9300      	str	r3, [sp, #0]
 802e4f2:	9307      	str	r3, [sp, #28]
 802e4f4:	461a      	mov	r2, r3
 802e4f6:	920e      	str	r2, [sp, #56]	@ 0x38
 802e4f8:	e00b      	b.n	802e512 <_dtoa_r+0x22a>
 802e4fa:	2301      	movs	r3, #1
 802e4fc:	e7f3      	b.n	802e4e6 <_dtoa_r+0x1fe>
 802e4fe:	2300      	movs	r3, #0
 802e500:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e504:	18fb      	adds	r3, r7, r3
 802e506:	9300      	str	r3, [sp, #0]
 802e508:	3301      	adds	r3, #1
 802e50a:	2b01      	cmp	r3, #1
 802e50c:	9307      	str	r3, [sp, #28]
 802e50e:	bfb8      	it	lt
 802e510:	2301      	movlt	r3, #1
 802e512:	2100      	movs	r1, #0
 802e514:	2204      	movs	r2, #4
 802e516:	f102 0014 	add.w	r0, r2, #20
 802e51a:	4298      	cmp	r0, r3
 802e51c:	d922      	bls.n	802e564 <_dtoa_r+0x27c>
 802e51e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802e522:	4658      	mov	r0, fp
 802e524:	f005 f910 	bl	8033748 <_Balloc>
 802e528:	4682      	mov	sl, r0
 802e52a:	2800      	cmp	r0, #0
 802e52c:	d13c      	bne.n	802e5a8 <_dtoa_r+0x2c0>
 802e52e:	4b1a      	ldr	r3, [pc, #104]	@ (802e598 <_dtoa_r+0x2b0>)
 802e530:	4602      	mov	r2, r0
 802e532:	f240 11af 	movw	r1, #431	@ 0x1af
 802e536:	4819      	ldr	r0, [pc, #100]	@ (802e59c <_dtoa_r+0x2b4>)
 802e538:	f7fb fe48 	bl	802a1cc <__assert_func>
 802e53c:	2301      	movs	r3, #1
 802e53e:	e7df      	b.n	802e500 <_dtoa_r+0x218>
 802e540:	2401      	movs	r4, #1
 802e542:	2300      	movs	r3, #0
 802e544:	9309      	str	r3, [sp, #36]	@ 0x24
 802e546:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e54c:	9300      	str	r3, [sp, #0]
 802e54e:	9307      	str	r3, [sp, #28]
 802e550:	2200      	movs	r2, #0
 802e552:	2312      	movs	r3, #18
 802e554:	e7cf      	b.n	802e4f6 <_dtoa_r+0x20e>
 802e556:	2301      	movs	r3, #1
 802e558:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e55a:	e7f5      	b.n	802e548 <_dtoa_r+0x260>
 802e55c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e55e:	9300      	str	r3, [sp, #0]
 802e560:	9307      	str	r3, [sp, #28]
 802e562:	e7d6      	b.n	802e512 <_dtoa_r+0x22a>
 802e564:	3101      	adds	r1, #1
 802e566:	0052      	lsls	r2, r2, #1
 802e568:	e7d5      	b.n	802e516 <_dtoa_r+0x22e>
 802e56a:	bf00      	nop
 802e56c:	f3af 8000 	nop.w
 802e570:	636f4361 	.word	0x636f4361
 802e574:	3fd287a7 	.word	0x3fd287a7
 802e578:	8b60c8b3 	.word	0x8b60c8b3
 802e57c:	3fc68a28 	.word	0x3fc68a28
 802e580:	509f79fb 	.word	0x509f79fb
 802e584:	3fd34413 	.word	0x3fd34413
 802e588:	7ff00000 	.word	0x7ff00000
 802e58c:	0803c06e 	.word	0x0803c06e
 802e590:	3ff80000 	.word	0x3ff80000
 802e594:	0803c688 	.word	0x0803c688
 802e598:	0803c506 	.word	0x0803c506
 802e59c:	0803c517 	.word	0x0803c517
 802e5a0:	0803c502 	.word	0x0803c502
 802e5a4:	0803c06d 	.word	0x0803c06d
 802e5a8:	9b07      	ldr	r3, [sp, #28]
 802e5aa:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802e5ae:	2b0e      	cmp	r3, #14
 802e5b0:	f200 80a4 	bhi.w	802e6fc <_dtoa_r+0x414>
 802e5b4:	2c00      	cmp	r4, #0
 802e5b6:	f000 80a1 	beq.w	802e6fc <_dtoa_r+0x414>
 802e5ba:	2f00      	cmp	r7, #0
 802e5bc:	dd33      	ble.n	802e626 <_dtoa_r+0x33e>
 802e5be:	4bae      	ldr	r3, [pc, #696]	@ (802e878 <_dtoa_r+0x590>)
 802e5c0:	f007 020f 	and.w	r2, r7, #15
 802e5c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e5c8:	ed93 7b00 	vldr	d7, [r3]
 802e5cc:	05f8      	lsls	r0, r7, #23
 802e5ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 802e5d2:	ea4f 1427 	mov.w	r4, r7, asr #4
 802e5d6:	d516      	bpl.n	802e606 <_dtoa_r+0x31e>
 802e5d8:	4ba8      	ldr	r3, [pc, #672]	@ (802e87c <_dtoa_r+0x594>)
 802e5da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e5de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e5e2:	f7e2 f94b 	bl	801087c <__aeabi_ddiv>
 802e5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e5ea:	f004 040f 	and.w	r4, r4, #15
 802e5ee:	2603      	movs	r6, #3
 802e5f0:	4da2      	ldr	r5, [pc, #648]	@ (802e87c <_dtoa_r+0x594>)
 802e5f2:	b954      	cbnz	r4, 802e60a <_dtoa_r+0x322>
 802e5f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802e5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e5fc:	f7e2 f93e 	bl	801087c <__aeabi_ddiv>
 802e600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e604:	e028      	b.n	802e658 <_dtoa_r+0x370>
 802e606:	2602      	movs	r6, #2
 802e608:	e7f2      	b.n	802e5f0 <_dtoa_r+0x308>
 802e60a:	07e1      	lsls	r1, r4, #31
 802e60c:	d508      	bpl.n	802e620 <_dtoa_r+0x338>
 802e60e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e612:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e616:	f7e2 f807 	bl	8010628 <__aeabi_dmul>
 802e61a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802e61e:	3601      	adds	r6, #1
 802e620:	1064      	asrs	r4, r4, #1
 802e622:	3508      	adds	r5, #8
 802e624:	e7e5      	b.n	802e5f2 <_dtoa_r+0x30a>
 802e626:	f000 80d2 	beq.w	802e7ce <_dtoa_r+0x4e6>
 802e62a:	427c      	negs	r4, r7
 802e62c:	4b92      	ldr	r3, [pc, #584]	@ (802e878 <_dtoa_r+0x590>)
 802e62e:	4d93      	ldr	r5, [pc, #588]	@ (802e87c <_dtoa_r+0x594>)
 802e630:	f004 020f 	and.w	r2, r4, #15
 802e634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e63c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e640:	f7e1 fff2 	bl	8010628 <__aeabi_dmul>
 802e644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e648:	1124      	asrs	r4, r4, #4
 802e64a:	2300      	movs	r3, #0
 802e64c:	2602      	movs	r6, #2
 802e64e:	2c00      	cmp	r4, #0
 802e650:	f040 80b2 	bne.w	802e7b8 <_dtoa_r+0x4d0>
 802e654:	2b00      	cmp	r3, #0
 802e656:	d1d3      	bne.n	802e600 <_dtoa_r+0x318>
 802e658:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e65a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e65e:	2b00      	cmp	r3, #0
 802e660:	f000 80b7 	beq.w	802e7d2 <_dtoa_r+0x4ea>
 802e664:	4b86      	ldr	r3, [pc, #536]	@ (802e880 <_dtoa_r+0x598>)
 802e666:	2200      	movs	r2, #0
 802e668:	4620      	mov	r0, r4
 802e66a:	4629      	mov	r1, r5
 802e66c:	f7e2 fa4e 	bl	8010b0c <__aeabi_dcmplt>
 802e670:	2800      	cmp	r0, #0
 802e672:	f000 80ae 	beq.w	802e7d2 <_dtoa_r+0x4ea>
 802e676:	9b07      	ldr	r3, [sp, #28]
 802e678:	2b00      	cmp	r3, #0
 802e67a:	f000 80aa 	beq.w	802e7d2 <_dtoa_r+0x4ea>
 802e67e:	9b00      	ldr	r3, [sp, #0]
 802e680:	2b00      	cmp	r3, #0
 802e682:	dd37      	ble.n	802e6f4 <_dtoa_r+0x40c>
 802e684:	1e7b      	subs	r3, r7, #1
 802e686:	9304      	str	r3, [sp, #16]
 802e688:	4620      	mov	r0, r4
 802e68a:	4b7e      	ldr	r3, [pc, #504]	@ (802e884 <_dtoa_r+0x59c>)
 802e68c:	2200      	movs	r2, #0
 802e68e:	4629      	mov	r1, r5
 802e690:	f7e1 ffca 	bl	8010628 <__aeabi_dmul>
 802e694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e698:	9c00      	ldr	r4, [sp, #0]
 802e69a:	3601      	adds	r6, #1
 802e69c:	4630      	mov	r0, r6
 802e69e:	f7e1 ff59 	bl	8010554 <__aeabi_i2d>
 802e6a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e6a6:	f7e1 ffbf 	bl	8010628 <__aeabi_dmul>
 802e6aa:	4b77      	ldr	r3, [pc, #476]	@ (802e888 <_dtoa_r+0x5a0>)
 802e6ac:	2200      	movs	r2, #0
 802e6ae:	f7e1 fe05 	bl	80102bc <__adddf3>
 802e6b2:	4605      	mov	r5, r0
 802e6b4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802e6b8:	2c00      	cmp	r4, #0
 802e6ba:	f040 808d 	bne.w	802e7d8 <_dtoa_r+0x4f0>
 802e6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e6c2:	4b72      	ldr	r3, [pc, #456]	@ (802e88c <_dtoa_r+0x5a4>)
 802e6c4:	2200      	movs	r2, #0
 802e6c6:	f7e1 fdf7 	bl	80102b8 <__aeabi_dsub>
 802e6ca:	4602      	mov	r2, r0
 802e6cc:	460b      	mov	r3, r1
 802e6ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e6d2:	462a      	mov	r2, r5
 802e6d4:	4633      	mov	r3, r6
 802e6d6:	f7e2 fa37 	bl	8010b48 <__aeabi_dcmpgt>
 802e6da:	2800      	cmp	r0, #0
 802e6dc:	f040 828c 	bne.w	802ebf8 <_dtoa_r+0x910>
 802e6e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e6e4:	462a      	mov	r2, r5
 802e6e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802e6ea:	f7e2 fa0f 	bl	8010b0c <__aeabi_dcmplt>
 802e6ee:	2800      	cmp	r0, #0
 802e6f0:	f040 8129 	bne.w	802e946 <_dtoa_r+0x65e>
 802e6f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802e6f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e6fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802e6fe:	2b00      	cmp	r3, #0
 802e700:	f2c0 815b 	blt.w	802e9ba <_dtoa_r+0x6d2>
 802e704:	2f0e      	cmp	r7, #14
 802e706:	f300 8158 	bgt.w	802e9ba <_dtoa_r+0x6d2>
 802e70a:	4b5b      	ldr	r3, [pc, #364]	@ (802e878 <_dtoa_r+0x590>)
 802e70c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e710:	ed93 7b00 	vldr	d7, [r3]
 802e714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e716:	2b00      	cmp	r3, #0
 802e718:	ed8d 7b00 	vstr	d7, [sp]
 802e71c:	da03      	bge.n	802e726 <_dtoa_r+0x43e>
 802e71e:	9b07      	ldr	r3, [sp, #28]
 802e720:	2b00      	cmp	r3, #0
 802e722:	f340 8102 	ble.w	802e92a <_dtoa_r+0x642>
 802e726:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e72a:	4656      	mov	r6, sl
 802e72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e730:	4620      	mov	r0, r4
 802e732:	4629      	mov	r1, r5
 802e734:	f7e2 f8a2 	bl	801087c <__aeabi_ddiv>
 802e738:	f7e2 fa26 	bl	8010b88 <__aeabi_d2iz>
 802e73c:	4680      	mov	r8, r0
 802e73e:	f7e1 ff09 	bl	8010554 <__aeabi_i2d>
 802e742:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e746:	f7e1 ff6f 	bl	8010628 <__aeabi_dmul>
 802e74a:	4602      	mov	r2, r0
 802e74c:	460b      	mov	r3, r1
 802e74e:	4620      	mov	r0, r4
 802e750:	4629      	mov	r1, r5
 802e752:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802e756:	f7e1 fdaf 	bl	80102b8 <__aeabi_dsub>
 802e75a:	f806 4b01 	strb.w	r4, [r6], #1
 802e75e:	9d07      	ldr	r5, [sp, #28]
 802e760:	eba6 040a 	sub.w	r4, r6, sl
 802e764:	42a5      	cmp	r5, r4
 802e766:	4602      	mov	r2, r0
 802e768:	460b      	mov	r3, r1
 802e76a:	f040 8118 	bne.w	802e99e <_dtoa_r+0x6b6>
 802e76e:	f7e1 fda5 	bl	80102bc <__adddf3>
 802e772:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e776:	4604      	mov	r4, r0
 802e778:	460d      	mov	r5, r1
 802e77a:	f7e2 f9e5 	bl	8010b48 <__aeabi_dcmpgt>
 802e77e:	2800      	cmp	r0, #0
 802e780:	f040 80fa 	bne.w	802e978 <_dtoa_r+0x690>
 802e784:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e788:	4620      	mov	r0, r4
 802e78a:	4629      	mov	r1, r5
 802e78c:	f7e2 f9b4 	bl	8010af8 <__aeabi_dcmpeq>
 802e790:	b118      	cbz	r0, 802e79a <_dtoa_r+0x4b2>
 802e792:	f018 0f01 	tst.w	r8, #1
 802e796:	f040 80ef 	bne.w	802e978 <_dtoa_r+0x690>
 802e79a:	4649      	mov	r1, r9
 802e79c:	4658      	mov	r0, fp
 802e79e:	f004 fff8 	bl	8033792 <_Bfree>
 802e7a2:	2300      	movs	r3, #0
 802e7a4:	7033      	strb	r3, [r6, #0]
 802e7a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e7a8:	3701      	adds	r7, #1
 802e7aa:	601f      	str	r7, [r3, #0]
 802e7ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e7ae:	2b00      	cmp	r3, #0
 802e7b0:	f43f add1 	beq.w	802e356 <_dtoa_r+0x6e>
 802e7b4:	601e      	str	r6, [r3, #0]
 802e7b6:	e5ce      	b.n	802e356 <_dtoa_r+0x6e>
 802e7b8:	07e2      	lsls	r2, r4, #31
 802e7ba:	d505      	bpl.n	802e7c8 <_dtoa_r+0x4e0>
 802e7bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e7c0:	f7e1 ff32 	bl	8010628 <__aeabi_dmul>
 802e7c4:	3601      	adds	r6, #1
 802e7c6:	2301      	movs	r3, #1
 802e7c8:	1064      	asrs	r4, r4, #1
 802e7ca:	3508      	adds	r5, #8
 802e7cc:	e73f      	b.n	802e64e <_dtoa_r+0x366>
 802e7ce:	2602      	movs	r6, #2
 802e7d0:	e742      	b.n	802e658 <_dtoa_r+0x370>
 802e7d2:	9c07      	ldr	r4, [sp, #28]
 802e7d4:	9704      	str	r7, [sp, #16]
 802e7d6:	e761      	b.n	802e69c <_dtoa_r+0x3b4>
 802e7d8:	4b27      	ldr	r3, [pc, #156]	@ (802e878 <_dtoa_r+0x590>)
 802e7da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802e7dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802e7e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e7e4:	4454      	add	r4, sl
 802e7e6:	2900      	cmp	r1, #0
 802e7e8:	d054      	beq.n	802e894 <_dtoa_r+0x5ac>
 802e7ea:	4929      	ldr	r1, [pc, #164]	@ (802e890 <_dtoa_r+0x5a8>)
 802e7ec:	2000      	movs	r0, #0
 802e7ee:	f7e2 f845 	bl	801087c <__aeabi_ddiv>
 802e7f2:	4633      	mov	r3, r6
 802e7f4:	462a      	mov	r2, r5
 802e7f6:	f7e1 fd5f 	bl	80102b8 <__aeabi_dsub>
 802e7fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e7fe:	4656      	mov	r6, sl
 802e800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e804:	f7e2 f9c0 	bl	8010b88 <__aeabi_d2iz>
 802e808:	4605      	mov	r5, r0
 802e80a:	f7e1 fea3 	bl	8010554 <__aeabi_i2d>
 802e80e:	4602      	mov	r2, r0
 802e810:	460b      	mov	r3, r1
 802e812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e816:	f7e1 fd4f 	bl	80102b8 <__aeabi_dsub>
 802e81a:	3530      	adds	r5, #48	@ 0x30
 802e81c:	4602      	mov	r2, r0
 802e81e:	460b      	mov	r3, r1
 802e820:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e824:	f806 5b01 	strb.w	r5, [r6], #1
 802e828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e82c:	f7e2 f96e 	bl	8010b0c <__aeabi_dcmplt>
 802e830:	2800      	cmp	r0, #0
 802e832:	d172      	bne.n	802e91a <_dtoa_r+0x632>
 802e834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e838:	4911      	ldr	r1, [pc, #68]	@ (802e880 <_dtoa_r+0x598>)
 802e83a:	2000      	movs	r0, #0
 802e83c:	f7e1 fd3c 	bl	80102b8 <__aeabi_dsub>
 802e840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e844:	f7e2 f962 	bl	8010b0c <__aeabi_dcmplt>
 802e848:	2800      	cmp	r0, #0
 802e84a:	f040 8096 	bne.w	802e97a <_dtoa_r+0x692>
 802e84e:	42a6      	cmp	r6, r4
 802e850:	f43f af50 	beq.w	802e6f4 <_dtoa_r+0x40c>
 802e854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e858:	4b0a      	ldr	r3, [pc, #40]	@ (802e884 <_dtoa_r+0x59c>)
 802e85a:	2200      	movs	r2, #0
 802e85c:	f7e1 fee4 	bl	8010628 <__aeabi_dmul>
 802e860:	4b08      	ldr	r3, [pc, #32]	@ (802e884 <_dtoa_r+0x59c>)
 802e862:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e866:	2200      	movs	r2, #0
 802e868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e86c:	f7e1 fedc 	bl	8010628 <__aeabi_dmul>
 802e870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e874:	e7c4      	b.n	802e800 <_dtoa_r+0x518>
 802e876:	bf00      	nop
 802e878:	0803c688 	.word	0x0803c688
 802e87c:	0803c660 	.word	0x0803c660
 802e880:	3ff00000 	.word	0x3ff00000
 802e884:	40240000 	.word	0x40240000
 802e888:	401c0000 	.word	0x401c0000
 802e88c:	40140000 	.word	0x40140000
 802e890:	3fe00000 	.word	0x3fe00000
 802e894:	4631      	mov	r1, r6
 802e896:	4628      	mov	r0, r5
 802e898:	f7e1 fec6 	bl	8010628 <__aeabi_dmul>
 802e89c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e8a0:	9415      	str	r4, [sp, #84]	@ 0x54
 802e8a2:	4656      	mov	r6, sl
 802e8a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e8a8:	f7e2 f96e 	bl	8010b88 <__aeabi_d2iz>
 802e8ac:	4605      	mov	r5, r0
 802e8ae:	f7e1 fe51 	bl	8010554 <__aeabi_i2d>
 802e8b2:	4602      	mov	r2, r0
 802e8b4:	460b      	mov	r3, r1
 802e8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e8ba:	f7e1 fcfd 	bl	80102b8 <__aeabi_dsub>
 802e8be:	3530      	adds	r5, #48	@ 0x30
 802e8c0:	f806 5b01 	strb.w	r5, [r6], #1
 802e8c4:	4602      	mov	r2, r0
 802e8c6:	460b      	mov	r3, r1
 802e8c8:	42a6      	cmp	r6, r4
 802e8ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e8ce:	f04f 0200 	mov.w	r2, #0
 802e8d2:	d124      	bne.n	802e91e <_dtoa_r+0x636>
 802e8d4:	4bac      	ldr	r3, [pc, #688]	@ (802eb88 <_dtoa_r+0x8a0>)
 802e8d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e8da:	f7e1 fcef 	bl	80102bc <__adddf3>
 802e8de:	4602      	mov	r2, r0
 802e8e0:	460b      	mov	r3, r1
 802e8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e8e6:	f7e2 f92f 	bl	8010b48 <__aeabi_dcmpgt>
 802e8ea:	2800      	cmp	r0, #0
 802e8ec:	d145      	bne.n	802e97a <_dtoa_r+0x692>
 802e8ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e8f2:	49a5      	ldr	r1, [pc, #660]	@ (802eb88 <_dtoa_r+0x8a0>)
 802e8f4:	2000      	movs	r0, #0
 802e8f6:	f7e1 fcdf 	bl	80102b8 <__aeabi_dsub>
 802e8fa:	4602      	mov	r2, r0
 802e8fc:	460b      	mov	r3, r1
 802e8fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e902:	f7e2 f903 	bl	8010b0c <__aeabi_dcmplt>
 802e906:	2800      	cmp	r0, #0
 802e908:	f43f aef4 	beq.w	802e6f4 <_dtoa_r+0x40c>
 802e90c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802e90e:	1e73      	subs	r3, r6, #1
 802e910:	9315      	str	r3, [sp, #84]	@ 0x54
 802e912:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802e916:	2b30      	cmp	r3, #48	@ 0x30
 802e918:	d0f8      	beq.n	802e90c <_dtoa_r+0x624>
 802e91a:	9f04      	ldr	r7, [sp, #16]
 802e91c:	e73d      	b.n	802e79a <_dtoa_r+0x4b2>
 802e91e:	4b9b      	ldr	r3, [pc, #620]	@ (802eb8c <_dtoa_r+0x8a4>)
 802e920:	f7e1 fe82 	bl	8010628 <__aeabi_dmul>
 802e924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e928:	e7bc      	b.n	802e8a4 <_dtoa_r+0x5bc>
 802e92a:	d10c      	bne.n	802e946 <_dtoa_r+0x65e>
 802e92c:	4b98      	ldr	r3, [pc, #608]	@ (802eb90 <_dtoa_r+0x8a8>)
 802e92e:	2200      	movs	r2, #0
 802e930:	e9dd 0100 	ldrd	r0, r1, [sp]
 802e934:	f7e1 fe78 	bl	8010628 <__aeabi_dmul>
 802e938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e93c:	f7e2 f8fa 	bl	8010b34 <__aeabi_dcmpge>
 802e940:	2800      	cmp	r0, #0
 802e942:	f000 8157 	beq.w	802ebf4 <_dtoa_r+0x90c>
 802e946:	2400      	movs	r4, #0
 802e948:	4625      	mov	r5, r4
 802e94a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e94c:	43db      	mvns	r3, r3
 802e94e:	9304      	str	r3, [sp, #16]
 802e950:	4656      	mov	r6, sl
 802e952:	2700      	movs	r7, #0
 802e954:	4621      	mov	r1, r4
 802e956:	4658      	mov	r0, fp
 802e958:	f004 ff1b 	bl	8033792 <_Bfree>
 802e95c:	2d00      	cmp	r5, #0
 802e95e:	d0dc      	beq.n	802e91a <_dtoa_r+0x632>
 802e960:	b12f      	cbz	r7, 802e96e <_dtoa_r+0x686>
 802e962:	42af      	cmp	r7, r5
 802e964:	d003      	beq.n	802e96e <_dtoa_r+0x686>
 802e966:	4639      	mov	r1, r7
 802e968:	4658      	mov	r0, fp
 802e96a:	f004 ff12 	bl	8033792 <_Bfree>
 802e96e:	4629      	mov	r1, r5
 802e970:	4658      	mov	r0, fp
 802e972:	f004 ff0e 	bl	8033792 <_Bfree>
 802e976:	e7d0      	b.n	802e91a <_dtoa_r+0x632>
 802e978:	9704      	str	r7, [sp, #16]
 802e97a:	4633      	mov	r3, r6
 802e97c:	461e      	mov	r6, r3
 802e97e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e982:	2a39      	cmp	r2, #57	@ 0x39
 802e984:	d107      	bne.n	802e996 <_dtoa_r+0x6ae>
 802e986:	459a      	cmp	sl, r3
 802e988:	d1f8      	bne.n	802e97c <_dtoa_r+0x694>
 802e98a:	9a04      	ldr	r2, [sp, #16]
 802e98c:	3201      	adds	r2, #1
 802e98e:	9204      	str	r2, [sp, #16]
 802e990:	2230      	movs	r2, #48	@ 0x30
 802e992:	f88a 2000 	strb.w	r2, [sl]
 802e996:	781a      	ldrb	r2, [r3, #0]
 802e998:	3201      	adds	r2, #1
 802e99a:	701a      	strb	r2, [r3, #0]
 802e99c:	e7bd      	b.n	802e91a <_dtoa_r+0x632>
 802e99e:	4b7b      	ldr	r3, [pc, #492]	@ (802eb8c <_dtoa_r+0x8a4>)
 802e9a0:	2200      	movs	r2, #0
 802e9a2:	f7e1 fe41 	bl	8010628 <__aeabi_dmul>
 802e9a6:	2200      	movs	r2, #0
 802e9a8:	2300      	movs	r3, #0
 802e9aa:	4604      	mov	r4, r0
 802e9ac:	460d      	mov	r5, r1
 802e9ae:	f7e2 f8a3 	bl	8010af8 <__aeabi_dcmpeq>
 802e9b2:	2800      	cmp	r0, #0
 802e9b4:	f43f aeba 	beq.w	802e72c <_dtoa_r+0x444>
 802e9b8:	e6ef      	b.n	802e79a <_dtoa_r+0x4b2>
 802e9ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802e9bc:	2a00      	cmp	r2, #0
 802e9be:	f000 80db 	beq.w	802eb78 <_dtoa_r+0x890>
 802e9c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e9c4:	2a01      	cmp	r2, #1
 802e9c6:	f300 80bf 	bgt.w	802eb48 <_dtoa_r+0x860>
 802e9ca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802e9cc:	2a00      	cmp	r2, #0
 802e9ce:	f000 80b7 	beq.w	802eb40 <_dtoa_r+0x858>
 802e9d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802e9d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e9d8:	4646      	mov	r6, r8
 802e9da:	9a08      	ldr	r2, [sp, #32]
 802e9dc:	2101      	movs	r1, #1
 802e9de:	441a      	add	r2, r3
 802e9e0:	4658      	mov	r0, fp
 802e9e2:	4498      	add	r8, r3
 802e9e4:	9208      	str	r2, [sp, #32]
 802e9e6:	f004 ffb9 	bl	803395c <__i2b>
 802e9ea:	4605      	mov	r5, r0
 802e9ec:	b15e      	cbz	r6, 802ea06 <_dtoa_r+0x71e>
 802e9ee:	9b08      	ldr	r3, [sp, #32]
 802e9f0:	2b00      	cmp	r3, #0
 802e9f2:	dd08      	ble.n	802ea06 <_dtoa_r+0x71e>
 802e9f4:	42b3      	cmp	r3, r6
 802e9f6:	9a08      	ldr	r2, [sp, #32]
 802e9f8:	bfa8      	it	ge
 802e9fa:	4633      	movge	r3, r6
 802e9fc:	eba8 0803 	sub.w	r8, r8, r3
 802ea00:	1af6      	subs	r6, r6, r3
 802ea02:	1ad3      	subs	r3, r2, r3
 802ea04:	9308      	str	r3, [sp, #32]
 802ea06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ea08:	b1f3      	cbz	r3, 802ea48 <_dtoa_r+0x760>
 802ea0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ea0c:	2b00      	cmp	r3, #0
 802ea0e:	f000 80b7 	beq.w	802eb80 <_dtoa_r+0x898>
 802ea12:	b18c      	cbz	r4, 802ea38 <_dtoa_r+0x750>
 802ea14:	4629      	mov	r1, r5
 802ea16:	4622      	mov	r2, r4
 802ea18:	4658      	mov	r0, fp
 802ea1a:	f005 f85f 	bl	8033adc <__pow5mult>
 802ea1e:	464a      	mov	r2, r9
 802ea20:	4601      	mov	r1, r0
 802ea22:	4605      	mov	r5, r0
 802ea24:	4658      	mov	r0, fp
 802ea26:	f004 ffaf 	bl	8033988 <__multiply>
 802ea2a:	4649      	mov	r1, r9
 802ea2c:	9004      	str	r0, [sp, #16]
 802ea2e:	4658      	mov	r0, fp
 802ea30:	f004 feaf 	bl	8033792 <_Bfree>
 802ea34:	9b04      	ldr	r3, [sp, #16]
 802ea36:	4699      	mov	r9, r3
 802ea38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ea3a:	1b1a      	subs	r2, r3, r4
 802ea3c:	d004      	beq.n	802ea48 <_dtoa_r+0x760>
 802ea3e:	4649      	mov	r1, r9
 802ea40:	4658      	mov	r0, fp
 802ea42:	f005 f84b 	bl	8033adc <__pow5mult>
 802ea46:	4681      	mov	r9, r0
 802ea48:	2101      	movs	r1, #1
 802ea4a:	4658      	mov	r0, fp
 802ea4c:	f004 ff86 	bl	803395c <__i2b>
 802ea50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea52:	4604      	mov	r4, r0
 802ea54:	2b00      	cmp	r3, #0
 802ea56:	f000 81cc 	beq.w	802edf2 <_dtoa_r+0xb0a>
 802ea5a:	461a      	mov	r2, r3
 802ea5c:	4601      	mov	r1, r0
 802ea5e:	4658      	mov	r0, fp
 802ea60:	f005 f83c 	bl	8033adc <__pow5mult>
 802ea64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ea66:	2b01      	cmp	r3, #1
 802ea68:	4604      	mov	r4, r0
 802ea6a:	f300 8095 	bgt.w	802eb98 <_dtoa_r+0x8b0>
 802ea6e:	9b02      	ldr	r3, [sp, #8]
 802ea70:	2b00      	cmp	r3, #0
 802ea72:	f040 8087 	bne.w	802eb84 <_dtoa_r+0x89c>
 802ea76:	9b03      	ldr	r3, [sp, #12]
 802ea78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ea7c:	2b00      	cmp	r3, #0
 802ea7e:	f040 8089 	bne.w	802eb94 <_dtoa_r+0x8ac>
 802ea82:	9b03      	ldr	r3, [sp, #12]
 802ea84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ea88:	0d1b      	lsrs	r3, r3, #20
 802ea8a:	051b      	lsls	r3, r3, #20
 802ea8c:	b12b      	cbz	r3, 802ea9a <_dtoa_r+0x7b2>
 802ea8e:	9b08      	ldr	r3, [sp, #32]
 802ea90:	3301      	adds	r3, #1
 802ea92:	9308      	str	r3, [sp, #32]
 802ea94:	f108 0801 	add.w	r8, r8, #1
 802ea98:	2301      	movs	r3, #1
 802ea9a:	930a      	str	r3, [sp, #40]	@ 0x28
 802ea9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea9e:	2b00      	cmp	r3, #0
 802eaa0:	f000 81ad 	beq.w	802edfe <_dtoa_r+0xb16>
 802eaa4:	6923      	ldr	r3, [r4, #16]
 802eaa6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802eaaa:	6918      	ldr	r0, [r3, #16]
 802eaac:	f004 ff0a 	bl	80338c4 <__hi0bits>
 802eab0:	f1c0 0020 	rsb	r0, r0, #32
 802eab4:	9b08      	ldr	r3, [sp, #32]
 802eab6:	4418      	add	r0, r3
 802eab8:	f010 001f 	ands.w	r0, r0, #31
 802eabc:	d077      	beq.n	802ebae <_dtoa_r+0x8c6>
 802eabe:	f1c0 0320 	rsb	r3, r0, #32
 802eac2:	2b04      	cmp	r3, #4
 802eac4:	dd6b      	ble.n	802eb9e <_dtoa_r+0x8b6>
 802eac6:	9b08      	ldr	r3, [sp, #32]
 802eac8:	f1c0 001c 	rsb	r0, r0, #28
 802eacc:	4403      	add	r3, r0
 802eace:	4480      	add	r8, r0
 802ead0:	4406      	add	r6, r0
 802ead2:	9308      	str	r3, [sp, #32]
 802ead4:	f1b8 0f00 	cmp.w	r8, #0
 802ead8:	dd05      	ble.n	802eae6 <_dtoa_r+0x7fe>
 802eada:	4649      	mov	r1, r9
 802eadc:	4642      	mov	r2, r8
 802eade:	4658      	mov	r0, fp
 802eae0:	f005 f83c 	bl	8033b5c <__lshift>
 802eae4:	4681      	mov	r9, r0
 802eae6:	9b08      	ldr	r3, [sp, #32]
 802eae8:	2b00      	cmp	r3, #0
 802eaea:	dd05      	ble.n	802eaf8 <_dtoa_r+0x810>
 802eaec:	4621      	mov	r1, r4
 802eaee:	461a      	mov	r2, r3
 802eaf0:	4658      	mov	r0, fp
 802eaf2:	f005 f833 	bl	8033b5c <__lshift>
 802eaf6:	4604      	mov	r4, r0
 802eaf8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802eafa:	2b00      	cmp	r3, #0
 802eafc:	d059      	beq.n	802ebb2 <_dtoa_r+0x8ca>
 802eafe:	4621      	mov	r1, r4
 802eb00:	4648      	mov	r0, r9
 802eb02:	f005 f897 	bl	8033c34 <__mcmp>
 802eb06:	2800      	cmp	r0, #0
 802eb08:	da53      	bge.n	802ebb2 <_dtoa_r+0x8ca>
 802eb0a:	1e7b      	subs	r3, r7, #1
 802eb0c:	9304      	str	r3, [sp, #16]
 802eb0e:	4649      	mov	r1, r9
 802eb10:	2300      	movs	r3, #0
 802eb12:	220a      	movs	r2, #10
 802eb14:	4658      	mov	r0, fp
 802eb16:	f004 fe45 	bl	80337a4 <__multadd>
 802eb1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802eb1c:	4681      	mov	r9, r0
 802eb1e:	2b00      	cmp	r3, #0
 802eb20:	f000 816f 	beq.w	802ee02 <_dtoa_r+0xb1a>
 802eb24:	2300      	movs	r3, #0
 802eb26:	4629      	mov	r1, r5
 802eb28:	220a      	movs	r2, #10
 802eb2a:	4658      	mov	r0, fp
 802eb2c:	f004 fe3a 	bl	80337a4 <__multadd>
 802eb30:	9b00      	ldr	r3, [sp, #0]
 802eb32:	2b00      	cmp	r3, #0
 802eb34:	4605      	mov	r5, r0
 802eb36:	dc67      	bgt.n	802ec08 <_dtoa_r+0x920>
 802eb38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802eb3a:	2b02      	cmp	r3, #2
 802eb3c:	dc41      	bgt.n	802ebc2 <_dtoa_r+0x8da>
 802eb3e:	e063      	b.n	802ec08 <_dtoa_r+0x920>
 802eb40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802eb42:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802eb46:	e746      	b.n	802e9d6 <_dtoa_r+0x6ee>
 802eb48:	9b07      	ldr	r3, [sp, #28]
 802eb4a:	1e5c      	subs	r4, r3, #1
 802eb4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802eb4e:	42a3      	cmp	r3, r4
 802eb50:	bfbf      	itttt	lt
 802eb52:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802eb54:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802eb56:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802eb58:	1ae3      	sublt	r3, r4, r3
 802eb5a:	bfb4      	ite	lt
 802eb5c:	18d2      	addlt	r2, r2, r3
 802eb5e:	1b1c      	subge	r4, r3, r4
 802eb60:	9b07      	ldr	r3, [sp, #28]
 802eb62:	bfbc      	itt	lt
 802eb64:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802eb66:	2400      	movlt	r4, #0
 802eb68:	2b00      	cmp	r3, #0
 802eb6a:	bfb5      	itete	lt
 802eb6c:	eba8 0603 	sublt.w	r6, r8, r3
 802eb70:	9b07      	ldrge	r3, [sp, #28]
 802eb72:	2300      	movlt	r3, #0
 802eb74:	4646      	movge	r6, r8
 802eb76:	e730      	b.n	802e9da <_dtoa_r+0x6f2>
 802eb78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802eb7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802eb7c:	4646      	mov	r6, r8
 802eb7e:	e735      	b.n	802e9ec <_dtoa_r+0x704>
 802eb80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802eb82:	e75c      	b.n	802ea3e <_dtoa_r+0x756>
 802eb84:	2300      	movs	r3, #0
 802eb86:	e788      	b.n	802ea9a <_dtoa_r+0x7b2>
 802eb88:	3fe00000 	.word	0x3fe00000
 802eb8c:	40240000 	.word	0x40240000
 802eb90:	40140000 	.word	0x40140000
 802eb94:	9b02      	ldr	r3, [sp, #8]
 802eb96:	e780      	b.n	802ea9a <_dtoa_r+0x7b2>
 802eb98:	2300      	movs	r3, #0
 802eb9a:	930a      	str	r3, [sp, #40]	@ 0x28
 802eb9c:	e782      	b.n	802eaa4 <_dtoa_r+0x7bc>
 802eb9e:	d099      	beq.n	802ead4 <_dtoa_r+0x7ec>
 802eba0:	9a08      	ldr	r2, [sp, #32]
 802eba2:	331c      	adds	r3, #28
 802eba4:	441a      	add	r2, r3
 802eba6:	4498      	add	r8, r3
 802eba8:	441e      	add	r6, r3
 802ebaa:	9208      	str	r2, [sp, #32]
 802ebac:	e792      	b.n	802ead4 <_dtoa_r+0x7ec>
 802ebae:	4603      	mov	r3, r0
 802ebb0:	e7f6      	b.n	802eba0 <_dtoa_r+0x8b8>
 802ebb2:	9b07      	ldr	r3, [sp, #28]
 802ebb4:	9704      	str	r7, [sp, #16]
 802ebb6:	2b00      	cmp	r3, #0
 802ebb8:	dc20      	bgt.n	802ebfc <_dtoa_r+0x914>
 802ebba:	9300      	str	r3, [sp, #0]
 802ebbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ebbe:	2b02      	cmp	r3, #2
 802ebc0:	dd1e      	ble.n	802ec00 <_dtoa_r+0x918>
 802ebc2:	9b00      	ldr	r3, [sp, #0]
 802ebc4:	2b00      	cmp	r3, #0
 802ebc6:	f47f aec0 	bne.w	802e94a <_dtoa_r+0x662>
 802ebca:	4621      	mov	r1, r4
 802ebcc:	2205      	movs	r2, #5
 802ebce:	4658      	mov	r0, fp
 802ebd0:	f004 fde8 	bl	80337a4 <__multadd>
 802ebd4:	4601      	mov	r1, r0
 802ebd6:	4604      	mov	r4, r0
 802ebd8:	4648      	mov	r0, r9
 802ebda:	f005 f82b 	bl	8033c34 <__mcmp>
 802ebde:	2800      	cmp	r0, #0
 802ebe0:	f77f aeb3 	ble.w	802e94a <_dtoa_r+0x662>
 802ebe4:	4656      	mov	r6, sl
 802ebe6:	2331      	movs	r3, #49	@ 0x31
 802ebe8:	f806 3b01 	strb.w	r3, [r6], #1
 802ebec:	9b04      	ldr	r3, [sp, #16]
 802ebee:	3301      	adds	r3, #1
 802ebf0:	9304      	str	r3, [sp, #16]
 802ebf2:	e6ae      	b.n	802e952 <_dtoa_r+0x66a>
 802ebf4:	9c07      	ldr	r4, [sp, #28]
 802ebf6:	9704      	str	r7, [sp, #16]
 802ebf8:	4625      	mov	r5, r4
 802ebfa:	e7f3      	b.n	802ebe4 <_dtoa_r+0x8fc>
 802ebfc:	9b07      	ldr	r3, [sp, #28]
 802ebfe:	9300      	str	r3, [sp, #0]
 802ec00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ec02:	2b00      	cmp	r3, #0
 802ec04:	f000 8101 	beq.w	802ee0a <_dtoa_r+0xb22>
 802ec08:	2e00      	cmp	r6, #0
 802ec0a:	dd05      	ble.n	802ec18 <_dtoa_r+0x930>
 802ec0c:	4629      	mov	r1, r5
 802ec0e:	4632      	mov	r2, r6
 802ec10:	4658      	mov	r0, fp
 802ec12:	f004 ffa3 	bl	8033b5c <__lshift>
 802ec16:	4605      	mov	r5, r0
 802ec18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ec1a:	2b00      	cmp	r3, #0
 802ec1c:	d059      	beq.n	802ecd2 <_dtoa_r+0x9ea>
 802ec1e:	6869      	ldr	r1, [r5, #4]
 802ec20:	4658      	mov	r0, fp
 802ec22:	f004 fd91 	bl	8033748 <_Balloc>
 802ec26:	4606      	mov	r6, r0
 802ec28:	b920      	cbnz	r0, 802ec34 <_dtoa_r+0x94c>
 802ec2a:	4b83      	ldr	r3, [pc, #524]	@ (802ee38 <_dtoa_r+0xb50>)
 802ec2c:	4602      	mov	r2, r0
 802ec2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802ec32:	e480      	b.n	802e536 <_dtoa_r+0x24e>
 802ec34:	692a      	ldr	r2, [r5, #16]
 802ec36:	3202      	adds	r2, #2
 802ec38:	0092      	lsls	r2, r2, #2
 802ec3a:	f105 010c 	add.w	r1, r5, #12
 802ec3e:	300c      	adds	r0, #12
 802ec40:	f7ff fa52 	bl	802e0e8 <memcpy>
 802ec44:	2201      	movs	r2, #1
 802ec46:	4631      	mov	r1, r6
 802ec48:	4658      	mov	r0, fp
 802ec4a:	f004 ff87 	bl	8033b5c <__lshift>
 802ec4e:	f10a 0301 	add.w	r3, sl, #1
 802ec52:	9307      	str	r3, [sp, #28]
 802ec54:	9b00      	ldr	r3, [sp, #0]
 802ec56:	4453      	add	r3, sl
 802ec58:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ec5a:	9b02      	ldr	r3, [sp, #8]
 802ec5c:	f003 0301 	and.w	r3, r3, #1
 802ec60:	462f      	mov	r7, r5
 802ec62:	930a      	str	r3, [sp, #40]	@ 0x28
 802ec64:	4605      	mov	r5, r0
 802ec66:	9b07      	ldr	r3, [sp, #28]
 802ec68:	4621      	mov	r1, r4
 802ec6a:	3b01      	subs	r3, #1
 802ec6c:	4648      	mov	r0, r9
 802ec6e:	9300      	str	r3, [sp, #0]
 802ec70:	f7ff faaf 	bl	802e1d2 <quorem>
 802ec74:	4639      	mov	r1, r7
 802ec76:	9002      	str	r0, [sp, #8]
 802ec78:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ec7c:	4648      	mov	r0, r9
 802ec7e:	f004 ffd9 	bl	8033c34 <__mcmp>
 802ec82:	462a      	mov	r2, r5
 802ec84:	9008      	str	r0, [sp, #32]
 802ec86:	4621      	mov	r1, r4
 802ec88:	4658      	mov	r0, fp
 802ec8a:	f004 ffef 	bl	8033c6c <__mdiff>
 802ec8e:	68c2      	ldr	r2, [r0, #12]
 802ec90:	4606      	mov	r6, r0
 802ec92:	bb02      	cbnz	r2, 802ecd6 <_dtoa_r+0x9ee>
 802ec94:	4601      	mov	r1, r0
 802ec96:	4648      	mov	r0, r9
 802ec98:	f004 ffcc 	bl	8033c34 <__mcmp>
 802ec9c:	4602      	mov	r2, r0
 802ec9e:	4631      	mov	r1, r6
 802eca0:	4658      	mov	r0, fp
 802eca2:	920e      	str	r2, [sp, #56]	@ 0x38
 802eca4:	f004 fd75 	bl	8033792 <_Bfree>
 802eca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ecaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ecac:	9e07      	ldr	r6, [sp, #28]
 802ecae:	ea43 0102 	orr.w	r1, r3, r2
 802ecb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ecb4:	4319      	orrs	r1, r3
 802ecb6:	d110      	bne.n	802ecda <_dtoa_r+0x9f2>
 802ecb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ecbc:	d029      	beq.n	802ed12 <_dtoa_r+0xa2a>
 802ecbe:	9b08      	ldr	r3, [sp, #32]
 802ecc0:	2b00      	cmp	r3, #0
 802ecc2:	dd02      	ble.n	802ecca <_dtoa_r+0x9e2>
 802ecc4:	9b02      	ldr	r3, [sp, #8]
 802ecc6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802ecca:	9b00      	ldr	r3, [sp, #0]
 802eccc:	f883 8000 	strb.w	r8, [r3]
 802ecd0:	e640      	b.n	802e954 <_dtoa_r+0x66c>
 802ecd2:	4628      	mov	r0, r5
 802ecd4:	e7bb      	b.n	802ec4e <_dtoa_r+0x966>
 802ecd6:	2201      	movs	r2, #1
 802ecd8:	e7e1      	b.n	802ec9e <_dtoa_r+0x9b6>
 802ecda:	9b08      	ldr	r3, [sp, #32]
 802ecdc:	2b00      	cmp	r3, #0
 802ecde:	db04      	blt.n	802ecea <_dtoa_r+0xa02>
 802ece0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ece2:	430b      	orrs	r3, r1
 802ece4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ece6:	430b      	orrs	r3, r1
 802ece8:	d120      	bne.n	802ed2c <_dtoa_r+0xa44>
 802ecea:	2a00      	cmp	r2, #0
 802ecec:	dded      	ble.n	802ecca <_dtoa_r+0x9e2>
 802ecee:	4649      	mov	r1, r9
 802ecf0:	2201      	movs	r2, #1
 802ecf2:	4658      	mov	r0, fp
 802ecf4:	f004 ff32 	bl	8033b5c <__lshift>
 802ecf8:	4621      	mov	r1, r4
 802ecfa:	4681      	mov	r9, r0
 802ecfc:	f004 ff9a 	bl	8033c34 <__mcmp>
 802ed00:	2800      	cmp	r0, #0
 802ed02:	dc03      	bgt.n	802ed0c <_dtoa_r+0xa24>
 802ed04:	d1e1      	bne.n	802ecca <_dtoa_r+0x9e2>
 802ed06:	f018 0f01 	tst.w	r8, #1
 802ed0a:	d0de      	beq.n	802ecca <_dtoa_r+0x9e2>
 802ed0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ed10:	d1d8      	bne.n	802ecc4 <_dtoa_r+0x9dc>
 802ed12:	9a00      	ldr	r2, [sp, #0]
 802ed14:	2339      	movs	r3, #57	@ 0x39
 802ed16:	7013      	strb	r3, [r2, #0]
 802ed18:	4633      	mov	r3, r6
 802ed1a:	461e      	mov	r6, r3
 802ed1c:	3b01      	subs	r3, #1
 802ed1e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802ed22:	2a39      	cmp	r2, #57	@ 0x39
 802ed24:	d052      	beq.n	802edcc <_dtoa_r+0xae4>
 802ed26:	3201      	adds	r2, #1
 802ed28:	701a      	strb	r2, [r3, #0]
 802ed2a:	e613      	b.n	802e954 <_dtoa_r+0x66c>
 802ed2c:	2a00      	cmp	r2, #0
 802ed2e:	dd07      	ble.n	802ed40 <_dtoa_r+0xa58>
 802ed30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ed34:	d0ed      	beq.n	802ed12 <_dtoa_r+0xa2a>
 802ed36:	9a00      	ldr	r2, [sp, #0]
 802ed38:	f108 0301 	add.w	r3, r8, #1
 802ed3c:	7013      	strb	r3, [r2, #0]
 802ed3e:	e609      	b.n	802e954 <_dtoa_r+0x66c>
 802ed40:	9b07      	ldr	r3, [sp, #28]
 802ed42:	9a07      	ldr	r2, [sp, #28]
 802ed44:	f803 8c01 	strb.w	r8, [r3, #-1]
 802ed48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ed4a:	4293      	cmp	r3, r2
 802ed4c:	d028      	beq.n	802eda0 <_dtoa_r+0xab8>
 802ed4e:	4649      	mov	r1, r9
 802ed50:	2300      	movs	r3, #0
 802ed52:	220a      	movs	r2, #10
 802ed54:	4658      	mov	r0, fp
 802ed56:	f004 fd25 	bl	80337a4 <__multadd>
 802ed5a:	42af      	cmp	r7, r5
 802ed5c:	4681      	mov	r9, r0
 802ed5e:	f04f 0300 	mov.w	r3, #0
 802ed62:	f04f 020a 	mov.w	r2, #10
 802ed66:	4639      	mov	r1, r7
 802ed68:	4658      	mov	r0, fp
 802ed6a:	d107      	bne.n	802ed7c <_dtoa_r+0xa94>
 802ed6c:	f004 fd1a 	bl	80337a4 <__multadd>
 802ed70:	4607      	mov	r7, r0
 802ed72:	4605      	mov	r5, r0
 802ed74:	9b07      	ldr	r3, [sp, #28]
 802ed76:	3301      	adds	r3, #1
 802ed78:	9307      	str	r3, [sp, #28]
 802ed7a:	e774      	b.n	802ec66 <_dtoa_r+0x97e>
 802ed7c:	f004 fd12 	bl	80337a4 <__multadd>
 802ed80:	4629      	mov	r1, r5
 802ed82:	4607      	mov	r7, r0
 802ed84:	2300      	movs	r3, #0
 802ed86:	220a      	movs	r2, #10
 802ed88:	4658      	mov	r0, fp
 802ed8a:	f004 fd0b 	bl	80337a4 <__multadd>
 802ed8e:	4605      	mov	r5, r0
 802ed90:	e7f0      	b.n	802ed74 <_dtoa_r+0xa8c>
 802ed92:	9b00      	ldr	r3, [sp, #0]
 802ed94:	2b00      	cmp	r3, #0
 802ed96:	bfcc      	ite	gt
 802ed98:	461e      	movgt	r6, r3
 802ed9a:	2601      	movle	r6, #1
 802ed9c:	4456      	add	r6, sl
 802ed9e:	2700      	movs	r7, #0
 802eda0:	4649      	mov	r1, r9
 802eda2:	2201      	movs	r2, #1
 802eda4:	4658      	mov	r0, fp
 802eda6:	f004 fed9 	bl	8033b5c <__lshift>
 802edaa:	4621      	mov	r1, r4
 802edac:	4681      	mov	r9, r0
 802edae:	f004 ff41 	bl	8033c34 <__mcmp>
 802edb2:	2800      	cmp	r0, #0
 802edb4:	dcb0      	bgt.n	802ed18 <_dtoa_r+0xa30>
 802edb6:	d102      	bne.n	802edbe <_dtoa_r+0xad6>
 802edb8:	f018 0f01 	tst.w	r8, #1
 802edbc:	d1ac      	bne.n	802ed18 <_dtoa_r+0xa30>
 802edbe:	4633      	mov	r3, r6
 802edc0:	461e      	mov	r6, r3
 802edc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802edc6:	2a30      	cmp	r2, #48	@ 0x30
 802edc8:	d0fa      	beq.n	802edc0 <_dtoa_r+0xad8>
 802edca:	e5c3      	b.n	802e954 <_dtoa_r+0x66c>
 802edcc:	459a      	cmp	sl, r3
 802edce:	d1a4      	bne.n	802ed1a <_dtoa_r+0xa32>
 802edd0:	9b04      	ldr	r3, [sp, #16]
 802edd2:	3301      	adds	r3, #1
 802edd4:	9304      	str	r3, [sp, #16]
 802edd6:	2331      	movs	r3, #49	@ 0x31
 802edd8:	f88a 3000 	strb.w	r3, [sl]
 802eddc:	e5ba      	b.n	802e954 <_dtoa_r+0x66c>
 802edde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ede0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802ee3c <_dtoa_r+0xb54>
 802ede4:	2b00      	cmp	r3, #0
 802ede6:	f43f aab6 	beq.w	802e356 <_dtoa_r+0x6e>
 802edea:	f10a 0308 	add.w	r3, sl, #8
 802edee:	f7ff bab0 	b.w	802e352 <_dtoa_r+0x6a>
 802edf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802edf4:	2b01      	cmp	r3, #1
 802edf6:	f77f ae3a 	ble.w	802ea6e <_dtoa_r+0x786>
 802edfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802edfc:	930a      	str	r3, [sp, #40]	@ 0x28
 802edfe:	2001      	movs	r0, #1
 802ee00:	e658      	b.n	802eab4 <_dtoa_r+0x7cc>
 802ee02:	9b00      	ldr	r3, [sp, #0]
 802ee04:	2b00      	cmp	r3, #0
 802ee06:	f77f aed9 	ble.w	802ebbc <_dtoa_r+0x8d4>
 802ee0a:	4656      	mov	r6, sl
 802ee0c:	4621      	mov	r1, r4
 802ee0e:	4648      	mov	r0, r9
 802ee10:	f7ff f9df 	bl	802e1d2 <quorem>
 802ee14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ee18:	f806 8b01 	strb.w	r8, [r6], #1
 802ee1c:	9b00      	ldr	r3, [sp, #0]
 802ee1e:	eba6 020a 	sub.w	r2, r6, sl
 802ee22:	4293      	cmp	r3, r2
 802ee24:	ddb5      	ble.n	802ed92 <_dtoa_r+0xaaa>
 802ee26:	4649      	mov	r1, r9
 802ee28:	2300      	movs	r3, #0
 802ee2a:	220a      	movs	r2, #10
 802ee2c:	4658      	mov	r0, fp
 802ee2e:	f004 fcb9 	bl	80337a4 <__multadd>
 802ee32:	4681      	mov	r9, r0
 802ee34:	e7ea      	b.n	802ee0c <_dtoa_r+0xb24>
 802ee36:	bf00      	nop
 802ee38:	0803c506 	.word	0x0803c506
 802ee3c:	0803c4f9 	.word	0x0803c4f9

0802ee40 <_malloc_trim_r>:
 802ee40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ee44:	4606      	mov	r6, r0
 802ee46:	2008      	movs	r0, #8
 802ee48:	4689      	mov	r9, r1
 802ee4a:	f006 fb53 	bl	80354f4 <sysconf>
 802ee4e:	4f24      	ldr	r7, [pc, #144]	@ (802eee0 <_malloc_trim_r+0xa0>)
 802ee50:	4680      	mov	r8, r0
 802ee52:	4630      	mov	r0, r6
 802ee54:	f004 fc6c 	bl	8033730 <__malloc_lock>
 802ee58:	68bb      	ldr	r3, [r7, #8]
 802ee5a:	685d      	ldr	r5, [r3, #4]
 802ee5c:	f025 0503 	bic.w	r5, r5, #3
 802ee60:	f1a5 0411 	sub.w	r4, r5, #17
 802ee64:	eba4 0409 	sub.w	r4, r4, r9
 802ee68:	4444      	add	r4, r8
 802ee6a:	fbb4 f4f8 	udiv	r4, r4, r8
 802ee6e:	3c01      	subs	r4, #1
 802ee70:	fb08 f404 	mul.w	r4, r8, r4
 802ee74:	45a0      	cmp	r8, r4
 802ee76:	dd05      	ble.n	802ee84 <_malloc_trim_r+0x44>
 802ee78:	4630      	mov	r0, r6
 802ee7a:	f004 fc5f 	bl	803373c <__malloc_unlock>
 802ee7e:	2000      	movs	r0, #0
 802ee80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ee84:	2100      	movs	r1, #0
 802ee86:	4630      	mov	r0, r6
 802ee88:	f006 fb24 	bl	80354d4 <_sbrk_r>
 802ee8c:	68bb      	ldr	r3, [r7, #8]
 802ee8e:	442b      	add	r3, r5
 802ee90:	4298      	cmp	r0, r3
 802ee92:	d1f1      	bne.n	802ee78 <_malloc_trim_r+0x38>
 802ee94:	4261      	negs	r1, r4
 802ee96:	4630      	mov	r0, r6
 802ee98:	f006 fb1c 	bl	80354d4 <_sbrk_r>
 802ee9c:	3001      	adds	r0, #1
 802ee9e:	d110      	bne.n	802eec2 <_malloc_trim_r+0x82>
 802eea0:	2100      	movs	r1, #0
 802eea2:	4630      	mov	r0, r6
 802eea4:	f006 fb16 	bl	80354d4 <_sbrk_r>
 802eea8:	68ba      	ldr	r2, [r7, #8]
 802eeaa:	1a83      	subs	r3, r0, r2
 802eeac:	2b0f      	cmp	r3, #15
 802eeae:	dde3      	ble.n	802ee78 <_malloc_trim_r+0x38>
 802eeb0:	490c      	ldr	r1, [pc, #48]	@ (802eee4 <_malloc_trim_r+0xa4>)
 802eeb2:	6809      	ldr	r1, [r1, #0]
 802eeb4:	1a40      	subs	r0, r0, r1
 802eeb6:	490c      	ldr	r1, [pc, #48]	@ (802eee8 <_malloc_trim_r+0xa8>)
 802eeb8:	f043 0301 	orr.w	r3, r3, #1
 802eebc:	6008      	str	r0, [r1, #0]
 802eebe:	6053      	str	r3, [r2, #4]
 802eec0:	e7da      	b.n	802ee78 <_malloc_trim_r+0x38>
 802eec2:	68bb      	ldr	r3, [r7, #8]
 802eec4:	4a08      	ldr	r2, [pc, #32]	@ (802eee8 <_malloc_trim_r+0xa8>)
 802eec6:	1b2d      	subs	r5, r5, r4
 802eec8:	f045 0501 	orr.w	r5, r5, #1
 802eecc:	605d      	str	r5, [r3, #4]
 802eece:	6813      	ldr	r3, [r2, #0]
 802eed0:	4630      	mov	r0, r6
 802eed2:	1b1b      	subs	r3, r3, r4
 802eed4:	6013      	str	r3, [r2, #0]
 802eed6:	f004 fc31 	bl	803373c <__malloc_unlock>
 802eeda:	2001      	movs	r0, #1
 802eedc:	e7d0      	b.n	802ee80 <_malloc_trim_r+0x40>
 802eede:	bf00      	nop
 802eee0:	2000040c 	.word	0x2000040c
 802eee4:	20000404 	.word	0x20000404
 802eee8:	2001a09c 	.word	0x2001a09c

0802eeec <_free_r>:
 802eeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eeee:	4604      	mov	r4, r0
 802eef0:	460f      	mov	r7, r1
 802eef2:	2900      	cmp	r1, #0
 802eef4:	f000 80b1 	beq.w	802f05a <_free_r+0x16e>
 802eef8:	f004 fc1a 	bl	8033730 <__malloc_lock>
 802eefc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802ef00:	4d56      	ldr	r5, [pc, #344]	@ (802f05c <_free_r+0x170>)
 802ef02:	f022 0001 	bic.w	r0, r2, #1
 802ef06:	f1a7 0308 	sub.w	r3, r7, #8
 802ef0a:	eb03 0c00 	add.w	ip, r3, r0
 802ef0e:	68a9      	ldr	r1, [r5, #8]
 802ef10:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802ef14:	4561      	cmp	r1, ip
 802ef16:	f026 0603 	bic.w	r6, r6, #3
 802ef1a:	f002 0201 	and.w	r2, r2, #1
 802ef1e:	d11b      	bne.n	802ef58 <_free_r+0x6c>
 802ef20:	4406      	add	r6, r0
 802ef22:	b93a      	cbnz	r2, 802ef34 <_free_r+0x48>
 802ef24:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802ef28:	1a9b      	subs	r3, r3, r2
 802ef2a:	4416      	add	r6, r2
 802ef2c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802ef30:	60ca      	str	r2, [r1, #12]
 802ef32:	6091      	str	r1, [r2, #8]
 802ef34:	f046 0201 	orr.w	r2, r6, #1
 802ef38:	605a      	str	r2, [r3, #4]
 802ef3a:	60ab      	str	r3, [r5, #8]
 802ef3c:	4b48      	ldr	r3, [pc, #288]	@ (802f060 <_free_r+0x174>)
 802ef3e:	681b      	ldr	r3, [r3, #0]
 802ef40:	42b3      	cmp	r3, r6
 802ef42:	d804      	bhi.n	802ef4e <_free_r+0x62>
 802ef44:	4b47      	ldr	r3, [pc, #284]	@ (802f064 <_free_r+0x178>)
 802ef46:	4620      	mov	r0, r4
 802ef48:	6819      	ldr	r1, [r3, #0]
 802ef4a:	f7ff ff79 	bl	802ee40 <_malloc_trim_r>
 802ef4e:	4620      	mov	r0, r4
 802ef50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ef54:	f004 bbf2 	b.w	803373c <__malloc_unlock>
 802ef58:	f8cc 6004 	str.w	r6, [ip, #4]
 802ef5c:	2a00      	cmp	r2, #0
 802ef5e:	d138      	bne.n	802efd2 <_free_r+0xe6>
 802ef60:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802ef64:	1a5b      	subs	r3, r3, r1
 802ef66:	4408      	add	r0, r1
 802ef68:	6899      	ldr	r1, [r3, #8]
 802ef6a:	f105 0708 	add.w	r7, r5, #8
 802ef6e:	42b9      	cmp	r1, r7
 802ef70:	d031      	beq.n	802efd6 <_free_r+0xea>
 802ef72:	68df      	ldr	r7, [r3, #12]
 802ef74:	60cf      	str	r7, [r1, #12]
 802ef76:	60b9      	str	r1, [r7, #8]
 802ef78:	eb0c 0106 	add.w	r1, ip, r6
 802ef7c:	6849      	ldr	r1, [r1, #4]
 802ef7e:	07c9      	lsls	r1, r1, #31
 802ef80:	d40b      	bmi.n	802ef9a <_free_r+0xae>
 802ef82:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802ef86:	4430      	add	r0, r6
 802ef88:	bb3a      	cbnz	r2, 802efda <_free_r+0xee>
 802ef8a:	4e37      	ldr	r6, [pc, #220]	@ (802f068 <_free_r+0x17c>)
 802ef8c:	42b1      	cmp	r1, r6
 802ef8e:	d124      	bne.n	802efda <_free_r+0xee>
 802ef90:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802ef94:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802ef98:	2201      	movs	r2, #1
 802ef9a:	f040 0101 	orr.w	r1, r0, #1
 802ef9e:	6059      	str	r1, [r3, #4]
 802efa0:	5018      	str	r0, [r3, r0]
 802efa2:	2a00      	cmp	r2, #0
 802efa4:	d1d3      	bne.n	802ef4e <_free_r+0x62>
 802efa6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802efaa:	d21b      	bcs.n	802efe4 <_free_r+0xf8>
 802efac:	08c2      	lsrs	r2, r0, #3
 802efae:	2101      	movs	r1, #1
 802efb0:	0940      	lsrs	r0, r0, #5
 802efb2:	4081      	lsls	r1, r0
 802efb4:	6868      	ldr	r0, [r5, #4]
 802efb6:	3201      	adds	r2, #1
 802efb8:	4301      	orrs	r1, r0
 802efba:	6069      	str	r1, [r5, #4]
 802efbc:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802efc0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802efc4:	3908      	subs	r1, #8
 802efc6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802efca:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802efce:	60c3      	str	r3, [r0, #12]
 802efd0:	e7bd      	b.n	802ef4e <_free_r+0x62>
 802efd2:	2200      	movs	r2, #0
 802efd4:	e7d0      	b.n	802ef78 <_free_r+0x8c>
 802efd6:	2201      	movs	r2, #1
 802efd8:	e7ce      	b.n	802ef78 <_free_r+0x8c>
 802efda:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802efde:	60ce      	str	r6, [r1, #12]
 802efe0:	60b1      	str	r1, [r6, #8]
 802efe2:	e7da      	b.n	802ef9a <_free_r+0xae>
 802efe4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802efe8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802efec:	d214      	bcs.n	802f018 <_free_r+0x12c>
 802efee:	0982      	lsrs	r2, r0, #6
 802eff0:	3238      	adds	r2, #56	@ 0x38
 802eff2:	1c51      	adds	r1, r2, #1
 802eff4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802eff8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802effc:	428e      	cmp	r6, r1
 802effe:	d125      	bne.n	802f04c <_free_r+0x160>
 802f000:	2001      	movs	r0, #1
 802f002:	1092      	asrs	r2, r2, #2
 802f004:	fa00 f202 	lsl.w	r2, r0, r2
 802f008:	6868      	ldr	r0, [r5, #4]
 802f00a:	4302      	orrs	r2, r0
 802f00c:	606a      	str	r2, [r5, #4]
 802f00e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802f012:	60b3      	str	r3, [r6, #8]
 802f014:	60cb      	str	r3, [r1, #12]
 802f016:	e79a      	b.n	802ef4e <_free_r+0x62>
 802f018:	2a14      	cmp	r2, #20
 802f01a:	d801      	bhi.n	802f020 <_free_r+0x134>
 802f01c:	325b      	adds	r2, #91	@ 0x5b
 802f01e:	e7e8      	b.n	802eff2 <_free_r+0x106>
 802f020:	2a54      	cmp	r2, #84	@ 0x54
 802f022:	d802      	bhi.n	802f02a <_free_r+0x13e>
 802f024:	0b02      	lsrs	r2, r0, #12
 802f026:	326e      	adds	r2, #110	@ 0x6e
 802f028:	e7e3      	b.n	802eff2 <_free_r+0x106>
 802f02a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f02e:	d802      	bhi.n	802f036 <_free_r+0x14a>
 802f030:	0bc2      	lsrs	r2, r0, #15
 802f032:	3277      	adds	r2, #119	@ 0x77
 802f034:	e7dd      	b.n	802eff2 <_free_r+0x106>
 802f036:	f240 5154 	movw	r1, #1364	@ 0x554
 802f03a:	428a      	cmp	r2, r1
 802f03c:	bf9a      	itte	ls
 802f03e:	0c82      	lsrls	r2, r0, #18
 802f040:	327c      	addls	r2, #124	@ 0x7c
 802f042:	227e      	movhi	r2, #126	@ 0x7e
 802f044:	e7d5      	b.n	802eff2 <_free_r+0x106>
 802f046:	6889      	ldr	r1, [r1, #8]
 802f048:	428e      	cmp	r6, r1
 802f04a:	d004      	beq.n	802f056 <_free_r+0x16a>
 802f04c:	684a      	ldr	r2, [r1, #4]
 802f04e:	f022 0203 	bic.w	r2, r2, #3
 802f052:	4282      	cmp	r2, r0
 802f054:	d8f7      	bhi.n	802f046 <_free_r+0x15a>
 802f056:	68ce      	ldr	r6, [r1, #12]
 802f058:	e7d9      	b.n	802f00e <_free_r+0x122>
 802f05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f05c:	2000040c 	.word	0x2000040c
 802f060:	20000408 	.word	0x20000408
 802f064:	2001a0cc 	.word	0x2001a0cc
 802f068:	20000414 	.word	0x20000414

0802f06c <_findenv_r>:
 802f06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f070:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802f0e0 <_findenv_r+0x74>
 802f074:	4606      	mov	r6, r0
 802f076:	4689      	mov	r9, r1
 802f078:	4617      	mov	r7, r2
 802f07a:	f006 fc31 	bl	80358e0 <__env_lock>
 802f07e:	f8da 4000 	ldr.w	r4, [sl]
 802f082:	b134      	cbz	r4, 802f092 <_findenv_r+0x26>
 802f084:	464b      	mov	r3, r9
 802f086:	4698      	mov	r8, r3
 802f088:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f08c:	b13a      	cbz	r2, 802f09e <_findenv_r+0x32>
 802f08e:	2a3d      	cmp	r2, #61	@ 0x3d
 802f090:	d1f9      	bne.n	802f086 <_findenv_r+0x1a>
 802f092:	4630      	mov	r0, r6
 802f094:	f006 fc2a 	bl	80358ec <__env_unlock>
 802f098:	2000      	movs	r0, #0
 802f09a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f09e:	eba8 0809 	sub.w	r8, r8, r9
 802f0a2:	46a3      	mov	fp, r4
 802f0a4:	f854 0b04 	ldr.w	r0, [r4], #4
 802f0a8:	2800      	cmp	r0, #0
 802f0aa:	d0f2      	beq.n	802f092 <_findenv_r+0x26>
 802f0ac:	4642      	mov	r2, r8
 802f0ae:	4649      	mov	r1, r9
 802f0b0:	f7fd fe13 	bl	802ccda <strncmp>
 802f0b4:	2800      	cmp	r0, #0
 802f0b6:	d1f4      	bne.n	802f0a2 <_findenv_r+0x36>
 802f0b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802f0bc:	eb03 0508 	add.w	r5, r3, r8
 802f0c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 802f0c4:	2b3d      	cmp	r3, #61	@ 0x3d
 802f0c6:	d1ec      	bne.n	802f0a2 <_findenv_r+0x36>
 802f0c8:	f8da 3000 	ldr.w	r3, [sl]
 802f0cc:	ebab 0303 	sub.w	r3, fp, r3
 802f0d0:	109b      	asrs	r3, r3, #2
 802f0d2:	4630      	mov	r0, r6
 802f0d4:	603b      	str	r3, [r7, #0]
 802f0d6:	f006 fc09 	bl	80358ec <__env_unlock>
 802f0da:	1c68      	adds	r0, r5, #1
 802f0dc:	e7dd      	b.n	802f09a <_findenv_r+0x2e>
 802f0de:	bf00      	nop
 802f0e0:	20000014 	.word	0x20000014

0802f0e4 <_getenv_r>:
 802f0e4:	b507      	push	{r0, r1, r2, lr}
 802f0e6:	aa01      	add	r2, sp, #4
 802f0e8:	f7ff ffc0 	bl	802f06c <_findenv_r>
 802f0ec:	b003      	add	sp, #12
 802f0ee:	f85d fb04 	ldr.w	pc, [sp], #4

0802f0f2 <labs>:
 802f0f2:	2800      	cmp	r0, #0
 802f0f4:	bfb8      	it	lt
 802f0f6:	4240      	neglt	r0, r0
 802f0f8:	4770      	bx	lr
	...

0802f0fc <malloc>:
 802f0fc:	4b02      	ldr	r3, [pc, #8]	@ (802f108 <malloc+0xc>)
 802f0fe:	4601      	mov	r1, r0
 802f100:	6818      	ldr	r0, [r3, #0]
 802f102:	f000 b80b 	b.w	802f11c <_malloc_r>
 802f106:	bf00      	nop
 802f108:	200002d8 	.word	0x200002d8

0802f10c <free>:
 802f10c:	4b02      	ldr	r3, [pc, #8]	@ (802f118 <free+0xc>)
 802f10e:	4601      	mov	r1, r0
 802f110:	6818      	ldr	r0, [r3, #0]
 802f112:	f7ff beeb 	b.w	802eeec <_free_r>
 802f116:	bf00      	nop
 802f118:	200002d8 	.word	0x200002d8

0802f11c <_malloc_r>:
 802f11c:	f101 030b 	add.w	r3, r1, #11
 802f120:	2b16      	cmp	r3, #22
 802f122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f126:	4605      	mov	r5, r0
 802f128:	d906      	bls.n	802f138 <_malloc_r+0x1c>
 802f12a:	f033 0707 	bics.w	r7, r3, #7
 802f12e:	d504      	bpl.n	802f13a <_malloc_r+0x1e>
 802f130:	230c      	movs	r3, #12
 802f132:	602b      	str	r3, [r5, #0]
 802f134:	2400      	movs	r4, #0
 802f136:	e1a3      	b.n	802f480 <_malloc_r+0x364>
 802f138:	2710      	movs	r7, #16
 802f13a:	42b9      	cmp	r1, r7
 802f13c:	d8f8      	bhi.n	802f130 <_malloc_r+0x14>
 802f13e:	4628      	mov	r0, r5
 802f140:	f004 faf6 	bl	8033730 <__malloc_lock>
 802f144:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802f148:	4eaf      	ldr	r6, [pc, #700]	@ (802f408 <_malloc_r+0x2ec>)
 802f14a:	d237      	bcs.n	802f1bc <_malloc_r+0xa0>
 802f14c:	f107 0208 	add.w	r2, r7, #8
 802f150:	4432      	add	r2, r6
 802f152:	f1a2 0108 	sub.w	r1, r2, #8
 802f156:	6854      	ldr	r4, [r2, #4]
 802f158:	428c      	cmp	r4, r1
 802f15a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802f15e:	d102      	bne.n	802f166 <_malloc_r+0x4a>
 802f160:	68d4      	ldr	r4, [r2, #12]
 802f162:	42a2      	cmp	r2, r4
 802f164:	d010      	beq.n	802f188 <_malloc_r+0x6c>
 802f166:	6863      	ldr	r3, [r4, #4]
 802f168:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802f16c:	f023 0303 	bic.w	r3, r3, #3
 802f170:	60ca      	str	r2, [r1, #12]
 802f172:	4423      	add	r3, r4
 802f174:	6091      	str	r1, [r2, #8]
 802f176:	685a      	ldr	r2, [r3, #4]
 802f178:	f042 0201 	orr.w	r2, r2, #1
 802f17c:	605a      	str	r2, [r3, #4]
 802f17e:	4628      	mov	r0, r5
 802f180:	f004 fadc 	bl	803373c <__malloc_unlock>
 802f184:	3408      	adds	r4, #8
 802f186:	e17b      	b.n	802f480 <_malloc_r+0x364>
 802f188:	3302      	adds	r3, #2
 802f18a:	6934      	ldr	r4, [r6, #16]
 802f18c:	499f      	ldr	r1, [pc, #636]	@ (802f40c <_malloc_r+0x2f0>)
 802f18e:	428c      	cmp	r4, r1
 802f190:	d077      	beq.n	802f282 <_malloc_r+0x166>
 802f192:	6862      	ldr	r2, [r4, #4]
 802f194:	f022 0c03 	bic.w	ip, r2, #3
 802f198:	ebac 0007 	sub.w	r0, ip, r7
 802f19c:	280f      	cmp	r0, #15
 802f19e:	dd48      	ble.n	802f232 <_malloc_r+0x116>
 802f1a0:	19e2      	adds	r2, r4, r7
 802f1a2:	f040 0301 	orr.w	r3, r0, #1
 802f1a6:	f047 0701 	orr.w	r7, r7, #1
 802f1aa:	6067      	str	r7, [r4, #4]
 802f1ac:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f1b0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f1b4:	6053      	str	r3, [r2, #4]
 802f1b6:	f844 000c 	str.w	r0, [r4, ip]
 802f1ba:	e7e0      	b.n	802f17e <_malloc_r+0x62>
 802f1bc:	0a7b      	lsrs	r3, r7, #9
 802f1be:	d02a      	beq.n	802f216 <_malloc_r+0xfa>
 802f1c0:	2b04      	cmp	r3, #4
 802f1c2:	d812      	bhi.n	802f1ea <_malloc_r+0xce>
 802f1c4:	09bb      	lsrs	r3, r7, #6
 802f1c6:	3338      	adds	r3, #56	@ 0x38
 802f1c8:	1c5a      	adds	r2, r3, #1
 802f1ca:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802f1ce:	f1a2 0c08 	sub.w	ip, r2, #8
 802f1d2:	6854      	ldr	r4, [r2, #4]
 802f1d4:	4564      	cmp	r4, ip
 802f1d6:	d006      	beq.n	802f1e6 <_malloc_r+0xca>
 802f1d8:	6862      	ldr	r2, [r4, #4]
 802f1da:	f022 0203 	bic.w	r2, r2, #3
 802f1de:	1bd0      	subs	r0, r2, r7
 802f1e0:	280f      	cmp	r0, #15
 802f1e2:	dd1c      	ble.n	802f21e <_malloc_r+0x102>
 802f1e4:	3b01      	subs	r3, #1
 802f1e6:	3301      	adds	r3, #1
 802f1e8:	e7cf      	b.n	802f18a <_malloc_r+0x6e>
 802f1ea:	2b14      	cmp	r3, #20
 802f1ec:	d801      	bhi.n	802f1f2 <_malloc_r+0xd6>
 802f1ee:	335b      	adds	r3, #91	@ 0x5b
 802f1f0:	e7ea      	b.n	802f1c8 <_malloc_r+0xac>
 802f1f2:	2b54      	cmp	r3, #84	@ 0x54
 802f1f4:	d802      	bhi.n	802f1fc <_malloc_r+0xe0>
 802f1f6:	0b3b      	lsrs	r3, r7, #12
 802f1f8:	336e      	adds	r3, #110	@ 0x6e
 802f1fa:	e7e5      	b.n	802f1c8 <_malloc_r+0xac>
 802f1fc:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802f200:	d802      	bhi.n	802f208 <_malloc_r+0xec>
 802f202:	0bfb      	lsrs	r3, r7, #15
 802f204:	3377      	adds	r3, #119	@ 0x77
 802f206:	e7df      	b.n	802f1c8 <_malloc_r+0xac>
 802f208:	f240 5254 	movw	r2, #1364	@ 0x554
 802f20c:	4293      	cmp	r3, r2
 802f20e:	d804      	bhi.n	802f21a <_malloc_r+0xfe>
 802f210:	0cbb      	lsrs	r3, r7, #18
 802f212:	337c      	adds	r3, #124	@ 0x7c
 802f214:	e7d8      	b.n	802f1c8 <_malloc_r+0xac>
 802f216:	233f      	movs	r3, #63	@ 0x3f
 802f218:	e7d6      	b.n	802f1c8 <_malloc_r+0xac>
 802f21a:	237e      	movs	r3, #126	@ 0x7e
 802f21c:	e7d4      	b.n	802f1c8 <_malloc_r+0xac>
 802f21e:	2800      	cmp	r0, #0
 802f220:	68e1      	ldr	r1, [r4, #12]
 802f222:	db04      	blt.n	802f22e <_malloc_r+0x112>
 802f224:	68a3      	ldr	r3, [r4, #8]
 802f226:	60d9      	str	r1, [r3, #12]
 802f228:	608b      	str	r3, [r1, #8]
 802f22a:	18a3      	adds	r3, r4, r2
 802f22c:	e7a3      	b.n	802f176 <_malloc_r+0x5a>
 802f22e:	460c      	mov	r4, r1
 802f230:	e7d0      	b.n	802f1d4 <_malloc_r+0xb8>
 802f232:	2800      	cmp	r0, #0
 802f234:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802f238:	db07      	blt.n	802f24a <_malloc_r+0x12e>
 802f23a:	44a4      	add	ip, r4
 802f23c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802f240:	f043 0301 	orr.w	r3, r3, #1
 802f244:	f8cc 3004 	str.w	r3, [ip, #4]
 802f248:	e799      	b.n	802f17e <_malloc_r+0x62>
 802f24a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802f24e:	6870      	ldr	r0, [r6, #4]
 802f250:	f080 8095 	bcs.w	802f37e <_malloc_r+0x262>
 802f254:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802f258:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802f25c:	f04f 0c01 	mov.w	ip, #1
 802f260:	3201      	adds	r2, #1
 802f262:	fa0c fc0e 	lsl.w	ip, ip, lr
 802f266:	ea4c 0000 	orr.w	r0, ip, r0
 802f26a:	6070      	str	r0, [r6, #4]
 802f26c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802f270:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802f274:	3808      	subs	r0, #8
 802f276:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802f27a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802f27e:	f8cc 400c 	str.w	r4, [ip, #12]
 802f282:	1098      	asrs	r0, r3, #2
 802f284:	2201      	movs	r2, #1
 802f286:	4082      	lsls	r2, r0
 802f288:	6870      	ldr	r0, [r6, #4]
 802f28a:	4290      	cmp	r0, r2
 802f28c:	d326      	bcc.n	802f2dc <_malloc_r+0x1c0>
 802f28e:	4210      	tst	r0, r2
 802f290:	d106      	bne.n	802f2a0 <_malloc_r+0x184>
 802f292:	f023 0303 	bic.w	r3, r3, #3
 802f296:	0052      	lsls	r2, r2, #1
 802f298:	4210      	tst	r0, r2
 802f29a:	f103 0304 	add.w	r3, r3, #4
 802f29e:	d0fa      	beq.n	802f296 <_malloc_r+0x17a>
 802f2a0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802f2a4:	46c1      	mov	r9, r8
 802f2a6:	469e      	mov	lr, r3
 802f2a8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802f2ac:	454c      	cmp	r4, r9
 802f2ae:	f040 80b9 	bne.w	802f424 <_malloc_r+0x308>
 802f2b2:	f10e 0e01 	add.w	lr, lr, #1
 802f2b6:	f01e 0f03 	tst.w	lr, #3
 802f2ba:	f109 0908 	add.w	r9, r9, #8
 802f2be:	d1f3      	bne.n	802f2a8 <_malloc_r+0x18c>
 802f2c0:	0798      	lsls	r0, r3, #30
 802f2c2:	f040 80e3 	bne.w	802f48c <_malloc_r+0x370>
 802f2c6:	6873      	ldr	r3, [r6, #4]
 802f2c8:	ea23 0302 	bic.w	r3, r3, r2
 802f2cc:	6073      	str	r3, [r6, #4]
 802f2ce:	6870      	ldr	r0, [r6, #4]
 802f2d0:	0052      	lsls	r2, r2, #1
 802f2d2:	4290      	cmp	r0, r2
 802f2d4:	d302      	bcc.n	802f2dc <_malloc_r+0x1c0>
 802f2d6:	2a00      	cmp	r2, #0
 802f2d8:	f040 80e5 	bne.w	802f4a6 <_malloc_r+0x38a>
 802f2dc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802f2e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 802f2e4:	f023 0903 	bic.w	r9, r3, #3
 802f2e8:	45b9      	cmp	r9, r7
 802f2ea:	d304      	bcc.n	802f2f6 <_malloc_r+0x1da>
 802f2ec:	eba9 0207 	sub.w	r2, r9, r7
 802f2f0:	2a0f      	cmp	r2, #15
 802f2f2:	f300 8141 	bgt.w	802f578 <_malloc_r+0x45c>
 802f2f6:	4b46      	ldr	r3, [pc, #280]	@ (802f410 <_malloc_r+0x2f4>)
 802f2f8:	6819      	ldr	r1, [r3, #0]
 802f2fa:	3110      	adds	r1, #16
 802f2fc:	4439      	add	r1, r7
 802f2fe:	2008      	movs	r0, #8
 802f300:	9101      	str	r1, [sp, #4]
 802f302:	f006 f8f7 	bl	80354f4 <sysconf>
 802f306:	4a43      	ldr	r2, [pc, #268]	@ (802f414 <_malloc_r+0x2f8>)
 802f308:	9901      	ldr	r1, [sp, #4]
 802f30a:	6813      	ldr	r3, [r2, #0]
 802f30c:	3301      	adds	r3, #1
 802f30e:	bf1f      	itttt	ne
 802f310:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802f314:	1809      	addne	r1, r1, r0
 802f316:	4243      	negne	r3, r0
 802f318:	4019      	andne	r1, r3
 802f31a:	4680      	mov	r8, r0
 802f31c:	4628      	mov	r0, r5
 802f31e:	9101      	str	r1, [sp, #4]
 802f320:	f006 f8d8 	bl	80354d4 <_sbrk_r>
 802f324:	1c42      	adds	r2, r0, #1
 802f326:	eb0a 0b09 	add.w	fp, sl, r9
 802f32a:	4604      	mov	r4, r0
 802f32c:	f000 80f7 	beq.w	802f51e <_malloc_r+0x402>
 802f330:	4583      	cmp	fp, r0
 802f332:	9901      	ldr	r1, [sp, #4]
 802f334:	4a37      	ldr	r2, [pc, #220]	@ (802f414 <_malloc_r+0x2f8>)
 802f336:	d902      	bls.n	802f33e <_malloc_r+0x222>
 802f338:	45b2      	cmp	sl, r6
 802f33a:	f040 80f0 	bne.w	802f51e <_malloc_r+0x402>
 802f33e:	4b36      	ldr	r3, [pc, #216]	@ (802f418 <_malloc_r+0x2fc>)
 802f340:	6818      	ldr	r0, [r3, #0]
 802f342:	45a3      	cmp	fp, r4
 802f344:	eb00 0e01 	add.w	lr, r0, r1
 802f348:	f8c3 e000 	str.w	lr, [r3]
 802f34c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802f350:	f040 80ab 	bne.w	802f4aa <_malloc_r+0x38e>
 802f354:	ea1b 0f0c 	tst.w	fp, ip
 802f358:	f040 80a7 	bne.w	802f4aa <_malloc_r+0x38e>
 802f35c:	68b2      	ldr	r2, [r6, #8]
 802f35e:	4449      	add	r1, r9
 802f360:	f041 0101 	orr.w	r1, r1, #1
 802f364:	6051      	str	r1, [r2, #4]
 802f366:	4a2d      	ldr	r2, [pc, #180]	@ (802f41c <_malloc_r+0x300>)
 802f368:	681b      	ldr	r3, [r3, #0]
 802f36a:	6811      	ldr	r1, [r2, #0]
 802f36c:	428b      	cmp	r3, r1
 802f36e:	bf88      	it	hi
 802f370:	6013      	strhi	r3, [r2, #0]
 802f372:	4a2b      	ldr	r2, [pc, #172]	@ (802f420 <_malloc_r+0x304>)
 802f374:	6811      	ldr	r1, [r2, #0]
 802f376:	428b      	cmp	r3, r1
 802f378:	bf88      	it	hi
 802f37a:	6013      	strhi	r3, [r2, #0]
 802f37c:	e0cf      	b.n	802f51e <_malloc_r+0x402>
 802f37e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802f382:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802f386:	d218      	bcs.n	802f3ba <_malloc_r+0x29e>
 802f388:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802f38c:	3238      	adds	r2, #56	@ 0x38
 802f38e:	f102 0e01 	add.w	lr, r2, #1
 802f392:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802f396:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802f39a:	45f0      	cmp	r8, lr
 802f39c:	d12b      	bne.n	802f3f6 <_malloc_r+0x2da>
 802f39e:	1092      	asrs	r2, r2, #2
 802f3a0:	f04f 0c01 	mov.w	ip, #1
 802f3a4:	fa0c f202 	lsl.w	r2, ip, r2
 802f3a8:	4302      	orrs	r2, r0
 802f3aa:	6072      	str	r2, [r6, #4]
 802f3ac:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802f3b0:	f8c8 4008 	str.w	r4, [r8, #8]
 802f3b4:	f8ce 400c 	str.w	r4, [lr, #12]
 802f3b8:	e763      	b.n	802f282 <_malloc_r+0x166>
 802f3ba:	2a14      	cmp	r2, #20
 802f3bc:	d801      	bhi.n	802f3c2 <_malloc_r+0x2a6>
 802f3be:	325b      	adds	r2, #91	@ 0x5b
 802f3c0:	e7e5      	b.n	802f38e <_malloc_r+0x272>
 802f3c2:	2a54      	cmp	r2, #84	@ 0x54
 802f3c4:	d803      	bhi.n	802f3ce <_malloc_r+0x2b2>
 802f3c6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802f3ca:	326e      	adds	r2, #110	@ 0x6e
 802f3cc:	e7df      	b.n	802f38e <_malloc_r+0x272>
 802f3ce:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802f3d2:	d803      	bhi.n	802f3dc <_malloc_r+0x2c0>
 802f3d4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802f3d8:	3277      	adds	r2, #119	@ 0x77
 802f3da:	e7d8      	b.n	802f38e <_malloc_r+0x272>
 802f3dc:	f240 5e54 	movw	lr, #1364	@ 0x554
 802f3e0:	4572      	cmp	r2, lr
 802f3e2:	bf9a      	itte	ls
 802f3e4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802f3e8:	327c      	addls	r2, #124	@ 0x7c
 802f3ea:	227e      	movhi	r2, #126	@ 0x7e
 802f3ec:	e7cf      	b.n	802f38e <_malloc_r+0x272>
 802f3ee:	f8de e008 	ldr.w	lr, [lr, #8]
 802f3f2:	45f0      	cmp	r8, lr
 802f3f4:	d005      	beq.n	802f402 <_malloc_r+0x2e6>
 802f3f6:	f8de 2004 	ldr.w	r2, [lr, #4]
 802f3fa:	f022 0203 	bic.w	r2, r2, #3
 802f3fe:	4562      	cmp	r2, ip
 802f400:	d8f5      	bhi.n	802f3ee <_malloc_r+0x2d2>
 802f402:	f8de 800c 	ldr.w	r8, [lr, #12]
 802f406:	e7d1      	b.n	802f3ac <_malloc_r+0x290>
 802f408:	2000040c 	.word	0x2000040c
 802f40c:	20000414 	.word	0x20000414
 802f410:	2001a0cc 	.word	0x2001a0cc
 802f414:	20000404 	.word	0x20000404
 802f418:	2001a09c 	.word	0x2001a09c
 802f41c:	2001a0c8 	.word	0x2001a0c8
 802f420:	2001a0c4 	.word	0x2001a0c4
 802f424:	6860      	ldr	r0, [r4, #4]
 802f426:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802f42a:	f020 0003 	bic.w	r0, r0, #3
 802f42e:	eba0 0a07 	sub.w	sl, r0, r7
 802f432:	f1ba 0f0f 	cmp.w	sl, #15
 802f436:	dd12      	ble.n	802f45e <_malloc_r+0x342>
 802f438:	68a3      	ldr	r3, [r4, #8]
 802f43a:	19e2      	adds	r2, r4, r7
 802f43c:	f047 0701 	orr.w	r7, r7, #1
 802f440:	6067      	str	r7, [r4, #4]
 802f442:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f446:	f8cc 3008 	str.w	r3, [ip, #8]
 802f44a:	f04a 0301 	orr.w	r3, sl, #1
 802f44e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f452:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f456:	6053      	str	r3, [r2, #4]
 802f458:	f844 a000 	str.w	sl, [r4, r0]
 802f45c:	e68f      	b.n	802f17e <_malloc_r+0x62>
 802f45e:	f1ba 0f00 	cmp.w	sl, #0
 802f462:	db11      	blt.n	802f488 <_malloc_r+0x36c>
 802f464:	4420      	add	r0, r4
 802f466:	6843      	ldr	r3, [r0, #4]
 802f468:	f043 0301 	orr.w	r3, r3, #1
 802f46c:	6043      	str	r3, [r0, #4]
 802f46e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802f472:	4628      	mov	r0, r5
 802f474:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f478:	f8cc 3008 	str.w	r3, [ip, #8]
 802f47c:	f004 f95e 	bl	803373c <__malloc_unlock>
 802f480:	4620      	mov	r0, r4
 802f482:	b003      	add	sp, #12
 802f484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f488:	4664      	mov	r4, ip
 802f48a:	e70f      	b.n	802f2ac <_malloc_r+0x190>
 802f48c:	f858 0908 	ldr.w	r0, [r8], #-8
 802f490:	4540      	cmp	r0, r8
 802f492:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802f496:	f43f af13 	beq.w	802f2c0 <_malloc_r+0x1a4>
 802f49a:	e718      	b.n	802f2ce <_malloc_r+0x1b2>
 802f49c:	3304      	adds	r3, #4
 802f49e:	0052      	lsls	r2, r2, #1
 802f4a0:	4210      	tst	r0, r2
 802f4a2:	d0fb      	beq.n	802f49c <_malloc_r+0x380>
 802f4a4:	e6fc      	b.n	802f2a0 <_malloc_r+0x184>
 802f4a6:	4673      	mov	r3, lr
 802f4a8:	e7fa      	b.n	802f4a0 <_malloc_r+0x384>
 802f4aa:	6810      	ldr	r0, [r2, #0]
 802f4ac:	3001      	adds	r0, #1
 802f4ae:	bf1b      	ittet	ne
 802f4b0:	eba4 0b0b 	subne.w	fp, r4, fp
 802f4b4:	eb0b 020e 	addne.w	r2, fp, lr
 802f4b8:	6014      	streq	r4, [r2, #0]
 802f4ba:	601a      	strne	r2, [r3, #0]
 802f4bc:	f014 0b07 	ands.w	fp, r4, #7
 802f4c0:	bf1a      	itte	ne
 802f4c2:	f1cb 0008 	rsbne	r0, fp, #8
 802f4c6:	1824      	addne	r4, r4, r0
 802f4c8:	4658      	moveq	r0, fp
 802f4ca:	1862      	adds	r2, r4, r1
 802f4cc:	ea02 010c 	and.w	r1, r2, ip
 802f4d0:	4480      	add	r8, r0
 802f4d2:	eba8 0801 	sub.w	r8, r8, r1
 802f4d6:	ea08 080c 	and.w	r8, r8, ip
 802f4da:	4641      	mov	r1, r8
 802f4dc:	4628      	mov	r0, r5
 802f4de:	9201      	str	r2, [sp, #4]
 802f4e0:	f005 fff8 	bl	80354d4 <_sbrk_r>
 802f4e4:	1c43      	adds	r3, r0, #1
 802f4e6:	9a01      	ldr	r2, [sp, #4]
 802f4e8:	4b28      	ldr	r3, [pc, #160]	@ (802f58c <_malloc_r+0x470>)
 802f4ea:	d107      	bne.n	802f4fc <_malloc_r+0x3e0>
 802f4ec:	f1bb 0f00 	cmp.w	fp, #0
 802f4f0:	d023      	beq.n	802f53a <_malloc_r+0x41e>
 802f4f2:	f1ab 0008 	sub.w	r0, fp, #8
 802f4f6:	4410      	add	r0, r2
 802f4f8:	f04f 0800 	mov.w	r8, #0
 802f4fc:	681a      	ldr	r2, [r3, #0]
 802f4fe:	60b4      	str	r4, [r6, #8]
 802f500:	1b00      	subs	r0, r0, r4
 802f502:	4440      	add	r0, r8
 802f504:	4442      	add	r2, r8
 802f506:	f040 0001 	orr.w	r0, r0, #1
 802f50a:	45b2      	cmp	sl, r6
 802f50c:	601a      	str	r2, [r3, #0]
 802f50e:	6060      	str	r0, [r4, #4]
 802f510:	f43f af29 	beq.w	802f366 <_malloc_r+0x24a>
 802f514:	f1b9 0f0f 	cmp.w	r9, #15
 802f518:	d812      	bhi.n	802f540 <_malloc_r+0x424>
 802f51a:	2301      	movs	r3, #1
 802f51c:	6063      	str	r3, [r4, #4]
 802f51e:	68b3      	ldr	r3, [r6, #8]
 802f520:	685b      	ldr	r3, [r3, #4]
 802f522:	f023 0303 	bic.w	r3, r3, #3
 802f526:	42bb      	cmp	r3, r7
 802f528:	eba3 0207 	sub.w	r2, r3, r7
 802f52c:	d301      	bcc.n	802f532 <_malloc_r+0x416>
 802f52e:	2a0f      	cmp	r2, #15
 802f530:	dc22      	bgt.n	802f578 <_malloc_r+0x45c>
 802f532:	4628      	mov	r0, r5
 802f534:	f004 f902 	bl	803373c <__malloc_unlock>
 802f538:	e5fc      	b.n	802f134 <_malloc_r+0x18>
 802f53a:	4610      	mov	r0, r2
 802f53c:	46d8      	mov	r8, fp
 802f53e:	e7dd      	b.n	802f4fc <_malloc_r+0x3e0>
 802f540:	f8da 2004 	ldr.w	r2, [sl, #4]
 802f544:	f1a9 090c 	sub.w	r9, r9, #12
 802f548:	f029 0907 	bic.w	r9, r9, #7
 802f54c:	f002 0201 	and.w	r2, r2, #1
 802f550:	ea42 0209 	orr.w	r2, r2, r9
 802f554:	f8ca 2004 	str.w	r2, [sl, #4]
 802f558:	2105      	movs	r1, #5
 802f55a:	eb0a 0209 	add.w	r2, sl, r9
 802f55e:	f1b9 0f0f 	cmp.w	r9, #15
 802f562:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802f566:	f67f aefe 	bls.w	802f366 <_malloc_r+0x24a>
 802f56a:	f10a 0108 	add.w	r1, sl, #8
 802f56e:	4628      	mov	r0, r5
 802f570:	f7ff fcbc 	bl	802eeec <_free_r>
 802f574:	4b05      	ldr	r3, [pc, #20]	@ (802f58c <_malloc_r+0x470>)
 802f576:	e6f6      	b.n	802f366 <_malloc_r+0x24a>
 802f578:	68b4      	ldr	r4, [r6, #8]
 802f57a:	f047 0301 	orr.w	r3, r7, #1
 802f57e:	4427      	add	r7, r4
 802f580:	f042 0201 	orr.w	r2, r2, #1
 802f584:	6063      	str	r3, [r4, #4]
 802f586:	60b7      	str	r7, [r6, #8]
 802f588:	607a      	str	r2, [r7, #4]
 802f58a:	e5f8      	b.n	802f17e <_malloc_r+0x62>
 802f58c:	2001a09c 	.word	0x2001a09c

0802f590 <__ascii_mbtowc>:
 802f590:	b082      	sub	sp, #8
 802f592:	b901      	cbnz	r1, 802f596 <__ascii_mbtowc+0x6>
 802f594:	a901      	add	r1, sp, #4
 802f596:	b142      	cbz	r2, 802f5aa <__ascii_mbtowc+0x1a>
 802f598:	b14b      	cbz	r3, 802f5ae <__ascii_mbtowc+0x1e>
 802f59a:	7813      	ldrb	r3, [r2, #0]
 802f59c:	600b      	str	r3, [r1, #0]
 802f59e:	7812      	ldrb	r2, [r2, #0]
 802f5a0:	1e10      	subs	r0, r2, #0
 802f5a2:	bf18      	it	ne
 802f5a4:	2001      	movne	r0, #1
 802f5a6:	b002      	add	sp, #8
 802f5a8:	4770      	bx	lr
 802f5aa:	4610      	mov	r0, r2
 802f5ac:	e7fb      	b.n	802f5a6 <__ascii_mbtowc+0x16>
 802f5ae:	f06f 0001 	mvn.w	r0, #1
 802f5b2:	e7f8      	b.n	802f5a6 <__ascii_mbtowc+0x16>

0802f5b4 <siscanf>:
 802f5b4:	b40e      	push	{r1, r2, r3}
 802f5b6:	b530      	push	{r4, r5, lr}
 802f5b8:	b09c      	sub	sp, #112	@ 0x70
 802f5ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 802f5bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802f5c0:	f854 5b04 	ldr.w	r5, [r4], #4
 802f5c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 802f5c8:	9002      	str	r0, [sp, #8]
 802f5ca:	9006      	str	r0, [sp, #24]
 802f5cc:	f7e0 fe68 	bl	80102a0 <strlen>
 802f5d0:	4b0b      	ldr	r3, [pc, #44]	@ (802f600 <siscanf+0x4c>)
 802f5d2:	9003      	str	r0, [sp, #12]
 802f5d4:	9007      	str	r0, [sp, #28]
 802f5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 802f5d8:	480a      	ldr	r0, [pc, #40]	@ (802f604 <siscanf+0x50>)
 802f5da:	9401      	str	r4, [sp, #4]
 802f5dc:	2300      	movs	r3, #0
 802f5de:	930e      	str	r3, [sp, #56]	@ 0x38
 802f5e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802f5e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f5e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f5ea:	462a      	mov	r2, r5
 802f5ec:	4623      	mov	r3, r4
 802f5ee:	a902      	add	r1, sp, #8
 802f5f0:	6800      	ldr	r0, [r0, #0]
 802f5f2:	f000 fd99 	bl	8030128 <__ssvfiscanf_r>
 802f5f6:	b01c      	add	sp, #112	@ 0x70
 802f5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f5fc:	b003      	add	sp, #12
 802f5fe:	4770      	bx	lr
 802f600:	0802c5a3 	.word	0x0802c5a3
 802f604:	200002d8 	.word	0x200002d8

0802f608 <sniprintf>:
 802f608:	b40c      	push	{r2, r3}
 802f60a:	b530      	push	{r4, r5, lr}
 802f60c:	4b17      	ldr	r3, [pc, #92]	@ (802f66c <sniprintf+0x64>)
 802f60e:	1e0c      	subs	r4, r1, #0
 802f610:	681d      	ldr	r5, [r3, #0]
 802f612:	b09d      	sub	sp, #116	@ 0x74
 802f614:	da08      	bge.n	802f628 <sniprintf+0x20>
 802f616:	238b      	movs	r3, #139	@ 0x8b
 802f618:	602b      	str	r3, [r5, #0]
 802f61a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f61e:	b01d      	add	sp, #116	@ 0x74
 802f620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f624:	b002      	add	sp, #8
 802f626:	4770      	bx	lr
 802f628:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802f62c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802f630:	bf14      	ite	ne
 802f632:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802f636:	4623      	moveq	r3, r4
 802f638:	9304      	str	r3, [sp, #16]
 802f63a:	9307      	str	r3, [sp, #28]
 802f63c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f640:	9002      	str	r0, [sp, #8]
 802f642:	9006      	str	r0, [sp, #24]
 802f644:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f648:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802f64a:	ab21      	add	r3, sp, #132	@ 0x84
 802f64c:	a902      	add	r1, sp, #8
 802f64e:	4628      	mov	r0, r5
 802f650:	9301      	str	r3, [sp, #4]
 802f652:	f000 f88b 	bl	802f76c <_svfiprintf_r>
 802f656:	1c43      	adds	r3, r0, #1
 802f658:	bfbc      	itt	lt
 802f65a:	238b      	movlt	r3, #139	@ 0x8b
 802f65c:	602b      	strlt	r3, [r5, #0]
 802f65e:	2c00      	cmp	r4, #0
 802f660:	d0dd      	beq.n	802f61e <sniprintf+0x16>
 802f662:	9b02      	ldr	r3, [sp, #8]
 802f664:	2200      	movs	r2, #0
 802f666:	701a      	strb	r2, [r3, #0]
 802f668:	e7d9      	b.n	802f61e <sniprintf+0x16>
 802f66a:	bf00      	nop
 802f66c:	200002d8 	.word	0x200002d8

0802f670 <__ssprint_r>:
 802f670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f674:	6893      	ldr	r3, [r2, #8]
 802f676:	f8d2 b000 	ldr.w	fp, [r2]
 802f67a:	9001      	str	r0, [sp, #4]
 802f67c:	460c      	mov	r4, r1
 802f67e:	4617      	mov	r7, r2
 802f680:	2b00      	cmp	r3, #0
 802f682:	d157      	bne.n	802f734 <__ssprint_r+0xc4>
 802f684:	2000      	movs	r0, #0
 802f686:	2300      	movs	r3, #0
 802f688:	607b      	str	r3, [r7, #4]
 802f68a:	b003      	add	sp, #12
 802f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f690:	e9db a800 	ldrd	sl, r8, [fp]
 802f694:	f10b 0b08 	add.w	fp, fp, #8
 802f698:	68a6      	ldr	r6, [r4, #8]
 802f69a:	6820      	ldr	r0, [r4, #0]
 802f69c:	f1b8 0f00 	cmp.w	r8, #0
 802f6a0:	d0f6      	beq.n	802f690 <__ssprint_r+0x20>
 802f6a2:	45b0      	cmp	r8, r6
 802f6a4:	d32e      	bcc.n	802f704 <__ssprint_r+0x94>
 802f6a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f6aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802f6ae:	d029      	beq.n	802f704 <__ssprint_r+0x94>
 802f6b0:	6921      	ldr	r1, [r4, #16]
 802f6b2:	6965      	ldr	r5, [r4, #20]
 802f6b4:	eba0 0901 	sub.w	r9, r0, r1
 802f6b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f6bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802f6c0:	f109 0001 	add.w	r0, r9, #1
 802f6c4:	106d      	asrs	r5, r5, #1
 802f6c6:	4440      	add	r0, r8
 802f6c8:	4285      	cmp	r5, r0
 802f6ca:	bf38      	it	cc
 802f6cc:	4605      	movcc	r5, r0
 802f6ce:	0553      	lsls	r3, r2, #21
 802f6d0:	d534      	bpl.n	802f73c <__ssprint_r+0xcc>
 802f6d2:	9801      	ldr	r0, [sp, #4]
 802f6d4:	4629      	mov	r1, r5
 802f6d6:	f7ff fd21 	bl	802f11c <_malloc_r>
 802f6da:	4606      	mov	r6, r0
 802f6dc:	2800      	cmp	r0, #0
 802f6de:	d038      	beq.n	802f752 <__ssprint_r+0xe2>
 802f6e0:	464a      	mov	r2, r9
 802f6e2:	6921      	ldr	r1, [r4, #16]
 802f6e4:	f7fe fd00 	bl	802e0e8 <memcpy>
 802f6e8:	89a2      	ldrh	r2, [r4, #12]
 802f6ea:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802f6ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802f6f2:	81a2      	strh	r2, [r4, #12]
 802f6f4:	6126      	str	r6, [r4, #16]
 802f6f6:	6165      	str	r5, [r4, #20]
 802f6f8:	444e      	add	r6, r9
 802f6fa:	eba5 0509 	sub.w	r5, r5, r9
 802f6fe:	6026      	str	r6, [r4, #0]
 802f700:	60a5      	str	r5, [r4, #8]
 802f702:	4646      	mov	r6, r8
 802f704:	4546      	cmp	r6, r8
 802f706:	bf28      	it	cs
 802f708:	4646      	movcs	r6, r8
 802f70a:	4632      	mov	r2, r6
 802f70c:	4651      	mov	r1, sl
 802f70e:	6820      	ldr	r0, [r4, #0]
 802f710:	f7fd fa94 	bl	802cc3c <memmove>
 802f714:	68a2      	ldr	r2, [r4, #8]
 802f716:	1b92      	subs	r2, r2, r6
 802f718:	60a2      	str	r2, [r4, #8]
 802f71a:	6822      	ldr	r2, [r4, #0]
 802f71c:	4432      	add	r2, r6
 802f71e:	6022      	str	r2, [r4, #0]
 802f720:	68ba      	ldr	r2, [r7, #8]
 802f722:	eba2 0308 	sub.w	r3, r2, r8
 802f726:	44c2      	add	sl, r8
 802f728:	60bb      	str	r3, [r7, #8]
 802f72a:	2b00      	cmp	r3, #0
 802f72c:	d0aa      	beq.n	802f684 <__ssprint_r+0x14>
 802f72e:	f04f 0800 	mov.w	r8, #0
 802f732:	e7b1      	b.n	802f698 <__ssprint_r+0x28>
 802f734:	f04f 0a00 	mov.w	sl, #0
 802f738:	46d0      	mov	r8, sl
 802f73a:	e7ad      	b.n	802f698 <__ssprint_r+0x28>
 802f73c:	9801      	ldr	r0, [sp, #4]
 802f73e:	462a      	mov	r2, r5
 802f740:	f004 fcfc 	bl	803413c <_realloc_r>
 802f744:	4606      	mov	r6, r0
 802f746:	2800      	cmp	r0, #0
 802f748:	d1d4      	bne.n	802f6f4 <__ssprint_r+0x84>
 802f74a:	6921      	ldr	r1, [r4, #16]
 802f74c:	9801      	ldr	r0, [sp, #4]
 802f74e:	f7ff fbcd 	bl	802eeec <_free_r>
 802f752:	9a01      	ldr	r2, [sp, #4]
 802f754:	230c      	movs	r3, #12
 802f756:	6013      	str	r3, [r2, #0]
 802f758:	89a3      	ldrh	r3, [r4, #12]
 802f75a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802f75e:	81a3      	strh	r3, [r4, #12]
 802f760:	2300      	movs	r3, #0
 802f762:	60bb      	str	r3, [r7, #8]
 802f764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f768:	e78d      	b.n	802f686 <__ssprint_r+0x16>
	...

0802f76c <_svfiprintf_r>:
 802f76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f770:	461d      	mov	r5, r3
 802f772:	898b      	ldrh	r3, [r1, #12]
 802f774:	b0bb      	sub	sp, #236	@ 0xec
 802f776:	468b      	mov	fp, r1
 802f778:	0619      	lsls	r1, r3, #24
 802f77a:	9001      	str	r0, [sp, #4]
 802f77c:	9202      	str	r2, [sp, #8]
 802f77e:	d514      	bpl.n	802f7aa <_svfiprintf_r+0x3e>
 802f780:	f8db 3010 	ldr.w	r3, [fp, #16]
 802f784:	b98b      	cbnz	r3, 802f7aa <_svfiprintf_r+0x3e>
 802f786:	2140      	movs	r1, #64	@ 0x40
 802f788:	f7ff fcc8 	bl	802f11c <_malloc_r>
 802f78c:	f8cb 0000 	str.w	r0, [fp]
 802f790:	f8cb 0010 	str.w	r0, [fp, #16]
 802f794:	b930      	cbnz	r0, 802f7a4 <_svfiprintf_r+0x38>
 802f796:	9a01      	ldr	r2, [sp, #4]
 802f798:	230c      	movs	r3, #12
 802f79a:	6013      	str	r3, [r2, #0]
 802f79c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f7a0:	9304      	str	r3, [sp, #16]
 802f7a2:	e3df      	b.n	802ff64 <_svfiprintf_r+0x7f8>
 802f7a4:	2340      	movs	r3, #64	@ 0x40
 802f7a6:	f8cb 3014 	str.w	r3, [fp, #20]
 802f7aa:	2300      	movs	r3, #0
 802f7ac:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802f7b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802f7b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802f7b8:	ae11      	add	r6, sp, #68	@ 0x44
 802f7ba:	960e      	str	r6, [sp, #56]	@ 0x38
 802f7bc:	9304      	str	r3, [sp, #16]
 802f7be:	9b02      	ldr	r3, [sp, #8]
 802f7c0:	461c      	mov	r4, r3
 802f7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f7c6:	b10a      	cbz	r2, 802f7cc <_svfiprintf_r+0x60>
 802f7c8:	2a25      	cmp	r2, #37	@ 0x25
 802f7ca:	d1f9      	bne.n	802f7c0 <_svfiprintf_r+0x54>
 802f7cc:	9a02      	ldr	r2, [sp, #8]
 802f7ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f7d0:	1aa7      	subs	r7, r4, r2
 802f7d2:	d00c      	beq.n	802f7ee <_svfiprintf_r+0x82>
 802f7d4:	443b      	add	r3, r7
 802f7d6:	9310      	str	r3, [sp, #64]	@ 0x40
 802f7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f7da:	3301      	adds	r3, #1
 802f7dc:	2b07      	cmp	r3, #7
 802f7de:	e9c6 2700 	strd	r2, r7, [r6]
 802f7e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f7e4:	dc76      	bgt.n	802f8d4 <_svfiprintf_r+0x168>
 802f7e6:	3608      	adds	r6, #8
 802f7e8:	9b04      	ldr	r3, [sp, #16]
 802f7ea:	443b      	add	r3, r7
 802f7ec:	9304      	str	r3, [sp, #16]
 802f7ee:	7823      	ldrb	r3, [r4, #0]
 802f7f0:	2b00      	cmp	r3, #0
 802f7f2:	f000 83ce 	beq.w	802ff92 <_svfiprintf_r+0x826>
 802f7f6:	2300      	movs	r3, #0
 802f7f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802f7fc:	3401      	adds	r4, #1
 802f7fe:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f802:	9200      	str	r2, [sp, #0]
 802f804:	9303      	str	r3, [sp, #12]
 802f806:	4699      	mov	r9, r3
 802f808:	4622      	mov	r2, r4
 802f80a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f80e:	9202      	str	r2, [sp, #8]
 802f810:	f1a3 0220 	sub.w	r2, r3, #32
 802f814:	2a5a      	cmp	r2, #90	@ 0x5a
 802f816:	f200 8318 	bhi.w	802fe4a <_svfiprintf_r+0x6de>
 802f81a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802f81e:	009a      	.short	0x009a
 802f820:	03160316 	.word	0x03160316
 802f824:	031600a2 	.word	0x031600a2
 802f828:	03160316 	.word	0x03160316
 802f82c:	03160082 	.word	0x03160082
 802f830:	00a50316 	.word	0x00a50316
 802f834:	031600af 	.word	0x031600af
 802f838:	00b100ac 	.word	0x00b100ac
 802f83c:	00cc0316 	.word	0x00cc0316
 802f840:	00cf00cf 	.word	0x00cf00cf
 802f844:	00cf00cf 	.word	0x00cf00cf
 802f848:	00cf00cf 	.word	0x00cf00cf
 802f84c:	00cf00cf 	.word	0x00cf00cf
 802f850:	031600cf 	.word	0x031600cf
 802f854:	03160316 	.word	0x03160316
 802f858:	03160316 	.word	0x03160316
 802f85c:	03160316 	.word	0x03160316
 802f860:	03160316 	.word	0x03160316
 802f864:	010600f9 	.word	0x010600f9
 802f868:	03160316 	.word	0x03160316
 802f86c:	03160316 	.word	0x03160316
 802f870:	03160316 	.word	0x03160316
 802f874:	03160316 	.word	0x03160316
 802f878:	03160316 	.word	0x03160316
 802f87c:	03160154 	.word	0x03160154
 802f880:	03160316 	.word	0x03160316
 802f884:	0316019b 	.word	0x0316019b
 802f888:	0316027d 	.word	0x0316027d
 802f88c:	029d0316 	.word	0x029d0316
 802f890:	03160316 	.word	0x03160316
 802f894:	03160316 	.word	0x03160316
 802f898:	03160316 	.word	0x03160316
 802f89c:	03160316 	.word	0x03160316
 802f8a0:	03160316 	.word	0x03160316
 802f8a4:	010800f9 	.word	0x010800f9
 802f8a8:	03160316 	.word	0x03160316
 802f8ac:	00df0316 	.word	0x00df0316
 802f8b0:	00f30108 	.word	0x00f30108
 802f8b4:	00ec0316 	.word	0x00ec0316
 802f8b8:	01340316 	.word	0x01340316
 802f8bc:	018a0156 	.word	0x018a0156
 802f8c0:	031600f3 	.word	0x031600f3
 802f8c4:	0098019b 	.word	0x0098019b
 802f8c8:	0316027f 	.word	0x0316027f
 802f8cc:	00650316 	.word	0x00650316
 802f8d0:	00980316 	.word	0x00980316
 802f8d4:	9801      	ldr	r0, [sp, #4]
 802f8d6:	aa0e      	add	r2, sp, #56	@ 0x38
 802f8d8:	4659      	mov	r1, fp
 802f8da:	f7ff fec9 	bl	802f670 <__ssprint_r>
 802f8de:	2800      	cmp	r0, #0
 802f8e0:	f040 833b 	bne.w	802ff5a <_svfiprintf_r+0x7ee>
 802f8e4:	ae11      	add	r6, sp, #68	@ 0x44
 802f8e6:	e77f      	b.n	802f7e8 <_svfiprintf_r+0x7c>
 802f8e8:	4a99      	ldr	r2, [pc, #612]	@ (802fb50 <_svfiprintf_r+0x3e4>)
 802f8ea:	9205      	str	r2, [sp, #20]
 802f8ec:	f019 0220 	ands.w	r2, r9, #32
 802f8f0:	f000 8234 	beq.w	802fd5c <_svfiprintf_r+0x5f0>
 802f8f4:	3507      	adds	r5, #7
 802f8f6:	f025 0507 	bic.w	r5, r5, #7
 802f8fa:	462f      	mov	r7, r5
 802f8fc:	686d      	ldr	r5, [r5, #4]
 802f8fe:	f857 4b08 	ldr.w	r4, [r7], #8
 802f902:	f019 0f01 	tst.w	r9, #1
 802f906:	d009      	beq.n	802f91c <_svfiprintf_r+0x1b0>
 802f908:	ea54 0205 	orrs.w	r2, r4, r5
 802f90c:	bf1f      	itttt	ne
 802f90e:	2230      	movne	r2, #48	@ 0x30
 802f910:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802f914:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802f918:	f049 0902 	orrne.w	r9, r9, #2
 802f91c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f920:	e113      	b.n	802fb4a <_svfiprintf_r+0x3de>
 802f922:	9801      	ldr	r0, [sp, #4]
 802f924:	f7fe fb32 	bl	802df8c <_localeconv_r>
 802f928:	6843      	ldr	r3, [r0, #4]
 802f92a:	9308      	str	r3, [sp, #32]
 802f92c:	4618      	mov	r0, r3
 802f92e:	f7e0 fcb7 	bl	80102a0 <strlen>
 802f932:	9007      	str	r0, [sp, #28]
 802f934:	9801      	ldr	r0, [sp, #4]
 802f936:	f7fe fb29 	bl	802df8c <_localeconv_r>
 802f93a:	6883      	ldr	r3, [r0, #8]
 802f93c:	9306      	str	r3, [sp, #24]
 802f93e:	9b07      	ldr	r3, [sp, #28]
 802f940:	b12b      	cbz	r3, 802f94e <_svfiprintf_r+0x1e2>
 802f942:	9b06      	ldr	r3, [sp, #24]
 802f944:	b11b      	cbz	r3, 802f94e <_svfiprintf_r+0x1e2>
 802f946:	781b      	ldrb	r3, [r3, #0]
 802f948:	b10b      	cbz	r3, 802f94e <_svfiprintf_r+0x1e2>
 802f94a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802f94e:	9c02      	ldr	r4, [sp, #8]
 802f950:	e75a      	b.n	802f808 <_svfiprintf_r+0x9c>
 802f952:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f956:	2b00      	cmp	r3, #0
 802f958:	d1f9      	bne.n	802f94e <_svfiprintf_r+0x1e2>
 802f95a:	2320      	movs	r3, #32
 802f95c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f960:	e7f5      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802f962:	f049 0901 	orr.w	r9, r9, #1
 802f966:	e7f2      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802f968:	f855 3b04 	ldr.w	r3, [r5], #4
 802f96c:	9303      	str	r3, [sp, #12]
 802f96e:	2b00      	cmp	r3, #0
 802f970:	daed      	bge.n	802f94e <_svfiprintf_r+0x1e2>
 802f972:	425b      	negs	r3, r3
 802f974:	9303      	str	r3, [sp, #12]
 802f976:	f049 0904 	orr.w	r9, r9, #4
 802f97a:	e7e8      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802f97c:	232b      	movs	r3, #43	@ 0x2b
 802f97e:	e7ed      	b.n	802f95c <_svfiprintf_r+0x1f0>
 802f980:	9a02      	ldr	r2, [sp, #8]
 802f982:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f986:	2b2a      	cmp	r3, #42	@ 0x2a
 802f988:	d111      	bne.n	802f9ae <_svfiprintf_r+0x242>
 802f98a:	f855 3b04 	ldr.w	r3, [r5], #4
 802f98e:	9202      	str	r2, [sp, #8]
 802f990:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802f994:	9300      	str	r3, [sp, #0]
 802f996:	e7da      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802f998:	9b00      	ldr	r3, [sp, #0]
 802f99a:	fb00 1303 	mla	r3, r0, r3, r1
 802f99e:	9300      	str	r3, [sp, #0]
 802f9a0:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f9a4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f9a8:	2909      	cmp	r1, #9
 802f9aa:	d9f5      	bls.n	802f998 <_svfiprintf_r+0x22c>
 802f9ac:	e72f      	b.n	802f80e <_svfiprintf_r+0xa2>
 802f9ae:	2100      	movs	r1, #0
 802f9b0:	9100      	str	r1, [sp, #0]
 802f9b2:	200a      	movs	r0, #10
 802f9b4:	e7f6      	b.n	802f9a4 <_svfiprintf_r+0x238>
 802f9b6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802f9ba:	e7c8      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802f9bc:	2100      	movs	r1, #0
 802f9be:	9a02      	ldr	r2, [sp, #8]
 802f9c0:	9103      	str	r1, [sp, #12]
 802f9c2:	200a      	movs	r0, #10
 802f9c4:	9903      	ldr	r1, [sp, #12]
 802f9c6:	3b30      	subs	r3, #48	@ 0x30
 802f9c8:	fb00 3301 	mla	r3, r0, r1, r3
 802f9cc:	9303      	str	r3, [sp, #12]
 802f9ce:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f9d2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f9d6:	2909      	cmp	r1, #9
 802f9d8:	d9f4      	bls.n	802f9c4 <_svfiprintf_r+0x258>
 802f9da:	e718      	b.n	802f80e <_svfiprintf_r+0xa2>
 802f9dc:	9b02      	ldr	r3, [sp, #8]
 802f9de:	781b      	ldrb	r3, [r3, #0]
 802f9e0:	2b68      	cmp	r3, #104	@ 0x68
 802f9e2:	bf01      	itttt	eq
 802f9e4:	9b02      	ldreq	r3, [sp, #8]
 802f9e6:	3301      	addeq	r3, #1
 802f9e8:	9302      	streq	r3, [sp, #8]
 802f9ea:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802f9ee:	bf18      	it	ne
 802f9f0:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802f9f4:	e7ab      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802f9f6:	9b02      	ldr	r3, [sp, #8]
 802f9f8:	781b      	ldrb	r3, [r3, #0]
 802f9fa:	2b6c      	cmp	r3, #108	@ 0x6c
 802f9fc:	d105      	bne.n	802fa0a <_svfiprintf_r+0x29e>
 802f9fe:	9b02      	ldr	r3, [sp, #8]
 802fa00:	3301      	adds	r3, #1
 802fa02:	9302      	str	r3, [sp, #8]
 802fa04:	f049 0920 	orr.w	r9, r9, #32
 802fa08:	e7a1      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802fa0a:	f049 0910 	orr.w	r9, r9, #16
 802fa0e:	e79e      	b.n	802f94e <_svfiprintf_r+0x1e2>
 802fa10:	462f      	mov	r7, r5
 802fa12:	2400      	movs	r4, #0
 802fa14:	f857 3b04 	ldr.w	r3, [r7], #4
 802fa18:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fa1c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fa20:	2301      	movs	r3, #1
 802fa22:	9300      	str	r3, [sp, #0]
 802fa24:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802fa28:	e0aa      	b.n	802fb80 <_svfiprintf_r+0x414>
 802fa2a:	f049 0910 	orr.w	r9, r9, #16
 802fa2e:	f019 0f20 	tst.w	r9, #32
 802fa32:	d011      	beq.n	802fa58 <_svfiprintf_r+0x2ec>
 802fa34:	3507      	adds	r5, #7
 802fa36:	f025 0507 	bic.w	r5, r5, #7
 802fa3a:	462f      	mov	r7, r5
 802fa3c:	686d      	ldr	r5, [r5, #4]
 802fa3e:	f857 4b08 	ldr.w	r4, [r7], #8
 802fa42:	2d00      	cmp	r5, #0
 802fa44:	da06      	bge.n	802fa54 <_svfiprintf_r+0x2e8>
 802fa46:	4264      	negs	r4, r4
 802fa48:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802fa4c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802fa50:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802fa54:	2301      	movs	r3, #1
 802fa56:	e048      	b.n	802faea <_svfiprintf_r+0x37e>
 802fa58:	462f      	mov	r7, r5
 802fa5a:	f019 0f10 	tst.w	r9, #16
 802fa5e:	f857 5b04 	ldr.w	r5, [r7], #4
 802fa62:	d002      	beq.n	802fa6a <_svfiprintf_r+0x2fe>
 802fa64:	462c      	mov	r4, r5
 802fa66:	17ed      	asrs	r5, r5, #31
 802fa68:	e7eb      	b.n	802fa42 <_svfiprintf_r+0x2d6>
 802fa6a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802fa6e:	d003      	beq.n	802fa78 <_svfiprintf_r+0x30c>
 802fa70:	b22c      	sxth	r4, r5
 802fa72:	f345 35c0 	sbfx	r5, r5, #15, #1
 802fa76:	e7e4      	b.n	802fa42 <_svfiprintf_r+0x2d6>
 802fa78:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802fa7c:	d0f2      	beq.n	802fa64 <_svfiprintf_r+0x2f8>
 802fa7e:	b26c      	sxtb	r4, r5
 802fa80:	f345 15c0 	sbfx	r5, r5, #7, #1
 802fa84:	e7dd      	b.n	802fa42 <_svfiprintf_r+0x2d6>
 802fa86:	f019 0f20 	tst.w	r9, #32
 802fa8a:	d007      	beq.n	802fa9c <_svfiprintf_r+0x330>
 802fa8c:	9a04      	ldr	r2, [sp, #16]
 802fa8e:	682b      	ldr	r3, [r5, #0]
 802fa90:	9904      	ldr	r1, [sp, #16]
 802fa92:	17d2      	asrs	r2, r2, #31
 802fa94:	e9c3 1200 	strd	r1, r2, [r3]
 802fa98:	3504      	adds	r5, #4
 802fa9a:	e690      	b.n	802f7be <_svfiprintf_r+0x52>
 802fa9c:	f019 0f10 	tst.w	r9, #16
 802faa0:	d003      	beq.n	802faaa <_svfiprintf_r+0x33e>
 802faa2:	682b      	ldr	r3, [r5, #0]
 802faa4:	9a04      	ldr	r2, [sp, #16]
 802faa6:	601a      	str	r2, [r3, #0]
 802faa8:	e7f6      	b.n	802fa98 <_svfiprintf_r+0x32c>
 802faaa:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802faae:	d003      	beq.n	802fab8 <_svfiprintf_r+0x34c>
 802fab0:	682b      	ldr	r3, [r5, #0]
 802fab2:	9a04      	ldr	r2, [sp, #16]
 802fab4:	801a      	strh	r2, [r3, #0]
 802fab6:	e7ef      	b.n	802fa98 <_svfiprintf_r+0x32c>
 802fab8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802fabc:	d0f1      	beq.n	802faa2 <_svfiprintf_r+0x336>
 802fabe:	682b      	ldr	r3, [r5, #0]
 802fac0:	9a04      	ldr	r2, [sp, #16]
 802fac2:	701a      	strb	r2, [r3, #0]
 802fac4:	e7e8      	b.n	802fa98 <_svfiprintf_r+0x32c>
 802fac6:	f049 0910 	orr.w	r9, r9, #16
 802faca:	f019 0320 	ands.w	r3, r9, #32
 802face:	d01e      	beq.n	802fb0e <_svfiprintf_r+0x3a2>
 802fad0:	3507      	adds	r5, #7
 802fad2:	f025 0507 	bic.w	r5, r5, #7
 802fad6:	462f      	mov	r7, r5
 802fad8:	686d      	ldr	r5, [r5, #4]
 802fada:	f857 4b08 	ldr.w	r4, [r7], #8
 802fade:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802fae2:	2300      	movs	r3, #0
 802fae4:	2200      	movs	r2, #0
 802fae6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802faea:	9a00      	ldr	r2, [sp, #0]
 802faec:	3201      	adds	r2, #1
 802faee:	f000 8259 	beq.w	802ffa4 <_svfiprintf_r+0x838>
 802faf2:	ea54 0205 	orrs.w	r2, r4, r5
 802faf6:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802fafa:	f040 8258 	bne.w	802ffae <_svfiprintf_r+0x842>
 802fafe:	9a00      	ldr	r2, [sp, #0]
 802fb00:	2a00      	cmp	r2, #0
 802fb02:	f000 8199 	beq.w	802fe38 <_svfiprintf_r+0x6cc>
 802fb06:	2b01      	cmp	r3, #1
 802fb08:	f040 8254 	bne.w	802ffb4 <_svfiprintf_r+0x848>
 802fb0c:	e13d      	b.n	802fd8a <_svfiprintf_r+0x61e>
 802fb0e:	462f      	mov	r7, r5
 802fb10:	f019 0510 	ands.w	r5, r9, #16
 802fb14:	f857 4b04 	ldr.w	r4, [r7], #4
 802fb18:	d001      	beq.n	802fb1e <_svfiprintf_r+0x3b2>
 802fb1a:	461d      	mov	r5, r3
 802fb1c:	e7df      	b.n	802fade <_svfiprintf_r+0x372>
 802fb1e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802fb22:	d001      	beq.n	802fb28 <_svfiprintf_r+0x3bc>
 802fb24:	b2a4      	uxth	r4, r4
 802fb26:	e7da      	b.n	802fade <_svfiprintf_r+0x372>
 802fb28:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802fb2c:	d0d7      	beq.n	802fade <_svfiprintf_r+0x372>
 802fb2e:	b2e4      	uxtb	r4, r4
 802fb30:	e7f3      	b.n	802fb1a <_svfiprintf_r+0x3ae>
 802fb32:	462f      	mov	r7, r5
 802fb34:	f647 0330 	movw	r3, #30768	@ 0x7830
 802fb38:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802fb3c:	f857 4b04 	ldr.w	r4, [r7], #4
 802fb40:	4b03      	ldr	r3, [pc, #12]	@ (802fb50 <_svfiprintf_r+0x3e4>)
 802fb42:	9305      	str	r3, [sp, #20]
 802fb44:	2500      	movs	r5, #0
 802fb46:	f049 0902 	orr.w	r9, r9, #2
 802fb4a:	2302      	movs	r3, #2
 802fb4c:	e7ca      	b.n	802fae4 <_svfiprintf_r+0x378>
 802fb4e:	bf00      	nop
 802fb50:	0803c04b 	.word	0x0803c04b
 802fb54:	9b00      	ldr	r3, [sp, #0]
 802fb56:	462f      	mov	r7, r5
 802fb58:	1c5a      	adds	r2, r3, #1
 802fb5a:	f04f 0500 	mov.w	r5, #0
 802fb5e:	f857 8b04 	ldr.w	r8, [r7], #4
 802fb62:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802fb66:	f000 80d2 	beq.w	802fd0e <_svfiprintf_r+0x5a2>
 802fb6a:	461a      	mov	r2, r3
 802fb6c:	4629      	mov	r1, r5
 802fb6e:	4640      	mov	r0, r8
 802fb70:	f7e0 fb46 	bl	8010200 <memchr>
 802fb74:	4604      	mov	r4, r0
 802fb76:	b118      	cbz	r0, 802fb80 <_svfiprintf_r+0x414>
 802fb78:	eba0 0308 	sub.w	r3, r0, r8
 802fb7c:	9300      	str	r3, [sp, #0]
 802fb7e:	462c      	mov	r4, r5
 802fb80:	9d00      	ldr	r5, [sp, #0]
 802fb82:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802fb86:	42a5      	cmp	r5, r4
 802fb88:	bfb8      	it	lt
 802fb8a:	4625      	movlt	r5, r4
 802fb8c:	b103      	cbz	r3, 802fb90 <_svfiprintf_r+0x424>
 802fb8e:	3501      	adds	r5, #1
 802fb90:	f019 0302 	ands.w	r3, r9, #2
 802fb94:	9309      	str	r3, [sp, #36]	@ 0x24
 802fb96:	bf18      	it	ne
 802fb98:	3502      	addne	r5, #2
 802fb9a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802fb9e:	930a      	str	r3, [sp, #40]	@ 0x28
 802fba0:	d123      	bne.n	802fbea <_svfiprintf_r+0x47e>
 802fba2:	9b03      	ldr	r3, [sp, #12]
 802fba4:	eba3 0a05 	sub.w	sl, r3, r5
 802fba8:	f1ba 0f00 	cmp.w	sl, #0
 802fbac:	dd1d      	ble.n	802fbea <_svfiprintf_r+0x47e>
 802fbae:	4bac      	ldr	r3, [pc, #688]	@ (802fe60 <_svfiprintf_r+0x6f4>)
 802fbb0:	6033      	str	r3, [r6, #0]
 802fbb2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802fbb6:	f1ba 0f10 	cmp.w	sl, #16
 802fbba:	f102 0201 	add.w	r2, r2, #1
 802fbbe:	f106 0008 	add.w	r0, r6, #8
 802fbc2:	f300 8153 	bgt.w	802fe6c <_svfiprintf_r+0x700>
 802fbc6:	eb0c 010a 	add.w	r1, ip, sl
 802fbca:	2a07      	cmp	r2, #7
 802fbcc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fbd0:	f8c6 a004 	str.w	sl, [r6, #4]
 802fbd4:	f340 815e 	ble.w	802fe94 <_svfiprintf_r+0x728>
 802fbd8:	9801      	ldr	r0, [sp, #4]
 802fbda:	aa0e      	add	r2, sp, #56	@ 0x38
 802fbdc:	4659      	mov	r1, fp
 802fbde:	f7ff fd47 	bl	802f670 <__ssprint_r>
 802fbe2:	2800      	cmp	r0, #0
 802fbe4:	f040 81b9 	bne.w	802ff5a <_svfiprintf_r+0x7ee>
 802fbe8:	ae11      	add	r6, sp, #68	@ 0x44
 802fbea:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802fbee:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802fbf2:	b161      	cbz	r1, 802fc0e <_svfiprintf_r+0x4a2>
 802fbf4:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802fbf8:	3301      	adds	r3, #1
 802fbfa:	6031      	str	r1, [r6, #0]
 802fbfc:	2101      	movs	r1, #1
 802fbfe:	440a      	add	r2, r1
 802fc00:	2b07      	cmp	r3, #7
 802fc02:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fc06:	6071      	str	r1, [r6, #4]
 802fc08:	f300 8146 	bgt.w	802fe98 <_svfiprintf_r+0x72c>
 802fc0c:	3608      	adds	r6, #8
 802fc0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802fc10:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802fc14:	b159      	cbz	r1, 802fc2e <_svfiprintf_r+0x4c2>
 802fc16:	a90d      	add	r1, sp, #52	@ 0x34
 802fc18:	3301      	adds	r3, #1
 802fc1a:	6031      	str	r1, [r6, #0]
 802fc1c:	2102      	movs	r1, #2
 802fc1e:	440a      	add	r2, r1
 802fc20:	2b07      	cmp	r3, #7
 802fc22:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fc26:	6071      	str	r1, [r6, #4]
 802fc28:	f300 813f 	bgt.w	802feaa <_svfiprintf_r+0x73e>
 802fc2c:	3608      	adds	r6, #8
 802fc2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fc30:	2b80      	cmp	r3, #128	@ 0x80
 802fc32:	d123      	bne.n	802fc7c <_svfiprintf_r+0x510>
 802fc34:	9b03      	ldr	r3, [sp, #12]
 802fc36:	eba3 0a05 	sub.w	sl, r3, r5
 802fc3a:	f1ba 0f00 	cmp.w	sl, #0
 802fc3e:	dd1d      	ble.n	802fc7c <_svfiprintf_r+0x510>
 802fc40:	4b88      	ldr	r3, [pc, #544]	@ (802fe64 <_svfiprintf_r+0x6f8>)
 802fc42:	6033      	str	r3, [r6, #0]
 802fc44:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802fc48:	f1ba 0f10 	cmp.w	sl, #16
 802fc4c:	f102 0201 	add.w	r2, r2, #1
 802fc50:	f106 0008 	add.w	r0, r6, #8
 802fc54:	f300 8132 	bgt.w	802febc <_svfiprintf_r+0x750>
 802fc58:	eb0c 010a 	add.w	r1, ip, sl
 802fc5c:	2a07      	cmp	r2, #7
 802fc5e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fc62:	f8c6 a004 	str.w	sl, [r6, #4]
 802fc66:	f340 813d 	ble.w	802fee4 <_svfiprintf_r+0x778>
 802fc6a:	9801      	ldr	r0, [sp, #4]
 802fc6c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fc6e:	4659      	mov	r1, fp
 802fc70:	f7ff fcfe 	bl	802f670 <__ssprint_r>
 802fc74:	2800      	cmp	r0, #0
 802fc76:	f040 8170 	bne.w	802ff5a <_svfiprintf_r+0x7ee>
 802fc7a:	ae11      	add	r6, sp, #68	@ 0x44
 802fc7c:	9b00      	ldr	r3, [sp, #0]
 802fc7e:	1ae4      	subs	r4, r4, r3
 802fc80:	2c00      	cmp	r4, #0
 802fc82:	dd1a      	ble.n	802fcba <_svfiprintf_r+0x54e>
 802fc84:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802fc88:	4876      	ldr	r0, [pc, #472]	@ (802fe64 <_svfiprintf_r+0x6f8>)
 802fc8a:	6030      	str	r0, [r6, #0]
 802fc8c:	2c10      	cmp	r4, #16
 802fc8e:	f103 0301 	add.w	r3, r3, #1
 802fc92:	f106 0108 	add.w	r1, r6, #8
 802fc96:	f300 8127 	bgt.w	802fee8 <_svfiprintf_r+0x77c>
 802fc9a:	6074      	str	r4, [r6, #4]
 802fc9c:	2b07      	cmp	r3, #7
 802fc9e:	4414      	add	r4, r2
 802fca0:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802fca4:	f340 8131 	ble.w	802ff0a <_svfiprintf_r+0x79e>
 802fca8:	9801      	ldr	r0, [sp, #4]
 802fcaa:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcac:	4659      	mov	r1, fp
 802fcae:	f7ff fcdf 	bl	802f670 <__ssprint_r>
 802fcb2:	2800      	cmp	r0, #0
 802fcb4:	f040 8151 	bne.w	802ff5a <_svfiprintf_r+0x7ee>
 802fcb8:	ae11      	add	r6, sp, #68	@ 0x44
 802fcba:	9b00      	ldr	r3, [sp, #0]
 802fcbc:	9a00      	ldr	r2, [sp, #0]
 802fcbe:	6073      	str	r3, [r6, #4]
 802fcc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fcc2:	f8c6 8000 	str.w	r8, [r6]
 802fcc6:	4413      	add	r3, r2
 802fcc8:	9310      	str	r3, [sp, #64]	@ 0x40
 802fcca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fccc:	3301      	adds	r3, #1
 802fcce:	2b07      	cmp	r3, #7
 802fcd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fcd2:	f300 811c 	bgt.w	802ff0e <_svfiprintf_r+0x7a2>
 802fcd6:	f106 0308 	add.w	r3, r6, #8
 802fcda:	f019 0f04 	tst.w	r9, #4
 802fcde:	f040 811e 	bne.w	802ff1e <_svfiprintf_r+0x7b2>
 802fce2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802fce6:	42aa      	cmp	r2, r5
 802fce8:	bfac      	ite	ge
 802fcea:	189b      	addge	r3, r3, r2
 802fcec:	195b      	addlt	r3, r3, r5
 802fcee:	9304      	str	r3, [sp, #16]
 802fcf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fcf2:	b13b      	cbz	r3, 802fd04 <_svfiprintf_r+0x598>
 802fcf4:	9801      	ldr	r0, [sp, #4]
 802fcf6:	aa0e      	add	r2, sp, #56	@ 0x38
 802fcf8:	4659      	mov	r1, fp
 802fcfa:	f7ff fcb9 	bl	802f670 <__ssprint_r>
 802fcfe:	2800      	cmp	r0, #0
 802fd00:	f040 812b 	bne.w	802ff5a <_svfiprintf_r+0x7ee>
 802fd04:	2300      	movs	r3, #0
 802fd06:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fd08:	463d      	mov	r5, r7
 802fd0a:	ae11      	add	r6, sp, #68	@ 0x44
 802fd0c:	e557      	b.n	802f7be <_svfiprintf_r+0x52>
 802fd0e:	4640      	mov	r0, r8
 802fd10:	f7e0 fac6 	bl	80102a0 <strlen>
 802fd14:	9000      	str	r0, [sp, #0]
 802fd16:	e732      	b.n	802fb7e <_svfiprintf_r+0x412>
 802fd18:	f049 0910 	orr.w	r9, r9, #16
 802fd1c:	f019 0320 	ands.w	r3, r9, #32
 802fd20:	d008      	beq.n	802fd34 <_svfiprintf_r+0x5c8>
 802fd22:	3507      	adds	r5, #7
 802fd24:	f025 0507 	bic.w	r5, r5, #7
 802fd28:	462f      	mov	r7, r5
 802fd2a:	686d      	ldr	r5, [r5, #4]
 802fd2c:	f857 4b08 	ldr.w	r4, [r7], #8
 802fd30:	2301      	movs	r3, #1
 802fd32:	e6d7      	b.n	802fae4 <_svfiprintf_r+0x378>
 802fd34:	462f      	mov	r7, r5
 802fd36:	f019 0510 	ands.w	r5, r9, #16
 802fd3a:	f857 4b04 	ldr.w	r4, [r7], #4
 802fd3e:	d001      	beq.n	802fd44 <_svfiprintf_r+0x5d8>
 802fd40:	461d      	mov	r5, r3
 802fd42:	e7f5      	b.n	802fd30 <_svfiprintf_r+0x5c4>
 802fd44:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802fd48:	d001      	beq.n	802fd4e <_svfiprintf_r+0x5e2>
 802fd4a:	b2a4      	uxth	r4, r4
 802fd4c:	e7f0      	b.n	802fd30 <_svfiprintf_r+0x5c4>
 802fd4e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802fd52:	d0ed      	beq.n	802fd30 <_svfiprintf_r+0x5c4>
 802fd54:	b2e4      	uxtb	r4, r4
 802fd56:	e7f3      	b.n	802fd40 <_svfiprintf_r+0x5d4>
 802fd58:	4a43      	ldr	r2, [pc, #268]	@ (802fe68 <_svfiprintf_r+0x6fc>)
 802fd5a:	e5c6      	b.n	802f8ea <_svfiprintf_r+0x17e>
 802fd5c:	462f      	mov	r7, r5
 802fd5e:	f019 0510 	ands.w	r5, r9, #16
 802fd62:	f857 4b04 	ldr.w	r4, [r7], #4
 802fd66:	d001      	beq.n	802fd6c <_svfiprintf_r+0x600>
 802fd68:	4615      	mov	r5, r2
 802fd6a:	e5ca      	b.n	802f902 <_svfiprintf_r+0x196>
 802fd6c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802fd70:	d001      	beq.n	802fd76 <_svfiprintf_r+0x60a>
 802fd72:	b2a4      	uxth	r4, r4
 802fd74:	e5c5      	b.n	802f902 <_svfiprintf_r+0x196>
 802fd76:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802fd7a:	f43f adc2 	beq.w	802f902 <_svfiprintf_r+0x196>
 802fd7e:	b2e4      	uxtb	r4, r4
 802fd80:	e7f2      	b.n	802fd68 <_svfiprintf_r+0x5fc>
 802fd82:	2c0a      	cmp	r4, #10
 802fd84:	f175 0300 	sbcs.w	r3, r5, #0
 802fd88:	d206      	bcs.n	802fd98 <_svfiprintf_r+0x62c>
 802fd8a:	3430      	adds	r4, #48	@ 0x30
 802fd8c:	b2e4      	uxtb	r4, r4
 802fd8e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802fd92:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802fd96:	e129      	b.n	802ffec <_svfiprintf_r+0x880>
 802fd98:	ab3a      	add	r3, sp, #232	@ 0xe8
 802fd9a:	9309      	str	r3, [sp, #36]	@ 0x24
 802fd9c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802fda0:	f04f 0900 	mov.w	r9, #0
 802fda4:	930a      	str	r3, [sp, #40]	@ 0x28
 802fda6:	220a      	movs	r2, #10
 802fda8:	2300      	movs	r3, #0
 802fdaa:	4620      	mov	r0, r4
 802fdac:	4629      	mov	r1, r5
 802fdae:	f7e0 ffd3 	bl	8010d58 <__aeabi_uldivmod>
 802fdb2:	460b      	mov	r3, r1
 802fdb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802fdb6:	900b      	str	r0, [sp, #44]	@ 0x2c
 802fdb8:	3230      	adds	r2, #48	@ 0x30
 802fdba:	f801 2c01 	strb.w	r2, [r1, #-1]
 802fdbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802fdc0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802fdc4:	f109 0901 	add.w	r9, r9, #1
 802fdc8:	b1e2      	cbz	r2, 802fe04 <_svfiprintf_r+0x698>
 802fdca:	9a06      	ldr	r2, [sp, #24]
 802fdcc:	7812      	ldrb	r2, [r2, #0]
 802fdce:	454a      	cmp	r2, r9
 802fdd0:	d118      	bne.n	802fe04 <_svfiprintf_r+0x698>
 802fdd2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802fdd6:	d015      	beq.n	802fe04 <_svfiprintf_r+0x698>
 802fdd8:	2c0a      	cmp	r4, #10
 802fdda:	f175 0200 	sbcs.w	r2, r5, #0
 802fdde:	d311      	bcc.n	802fe04 <_svfiprintf_r+0x698>
 802fde0:	9309      	str	r3, [sp, #36]	@ 0x24
 802fde2:	9b07      	ldr	r3, [sp, #28]
 802fde4:	9908      	ldr	r1, [sp, #32]
 802fde6:	eba8 0803 	sub.w	r8, r8, r3
 802fdea:	461a      	mov	r2, r3
 802fdec:	4640      	mov	r0, r8
 802fdee:	f7fc ff86 	bl	802ccfe <strncpy>
 802fdf2:	9b06      	ldr	r3, [sp, #24]
 802fdf4:	785a      	ldrb	r2, [r3, #1]
 802fdf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fdf8:	b172      	cbz	r2, 802fe18 <_svfiprintf_r+0x6ac>
 802fdfa:	9a06      	ldr	r2, [sp, #24]
 802fdfc:	3201      	adds	r2, #1
 802fdfe:	9206      	str	r2, [sp, #24]
 802fe00:	f04f 0900 	mov.w	r9, #0
 802fe04:	2c0a      	cmp	r4, #10
 802fe06:	f175 0500 	sbcs.w	r5, r5, #0
 802fe0a:	f0c0 80ef 	bcc.w	802ffec <_svfiprintf_r+0x880>
 802fe0e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802fe10:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802fe14:	461d      	mov	r5, r3
 802fe16:	e7c6      	b.n	802fda6 <_svfiprintf_r+0x63a>
 802fe18:	4691      	mov	r9, r2
 802fe1a:	e7f3      	b.n	802fe04 <_svfiprintf_r+0x698>
 802fe1c:	f004 030f 	and.w	r3, r4, #15
 802fe20:	9a05      	ldr	r2, [sp, #20]
 802fe22:	0924      	lsrs	r4, r4, #4
 802fe24:	5cd3      	ldrb	r3, [r2, r3]
 802fe26:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fe2a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802fe2e:	092d      	lsrs	r5, r5, #4
 802fe30:	ea54 0305 	orrs.w	r3, r4, r5
 802fe34:	d1f2      	bne.n	802fe1c <_svfiprintf_r+0x6b0>
 802fe36:	e0d9      	b.n	802ffec <_svfiprintf_r+0x880>
 802fe38:	b923      	cbnz	r3, 802fe44 <_svfiprintf_r+0x6d8>
 802fe3a:	f019 0f01 	tst.w	r9, #1
 802fe3e:	d001      	beq.n	802fe44 <_svfiprintf_r+0x6d8>
 802fe40:	2430      	movs	r4, #48	@ 0x30
 802fe42:	e7a4      	b.n	802fd8e <_svfiprintf_r+0x622>
 802fe44:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fe48:	e0d0      	b.n	802ffec <_svfiprintf_r+0x880>
 802fe4a:	2b00      	cmp	r3, #0
 802fe4c:	f000 80a1 	beq.w	802ff92 <_svfiprintf_r+0x826>
 802fe50:	2400      	movs	r4, #0
 802fe52:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fe56:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fe5a:	462f      	mov	r7, r5
 802fe5c:	e5e0      	b.n	802fa20 <_svfiprintf_r+0x2b4>
 802fe5e:	bf00      	nop
 802fe60:	0803c57f 	.word	0x0803c57f
 802fe64:	0803c56f 	.word	0x0803c56f
 802fe68:	0803c05c 	.word	0x0803c05c
 802fe6c:	2110      	movs	r1, #16
 802fe6e:	6071      	str	r1, [r6, #4]
 802fe70:	2a07      	cmp	r2, #7
 802fe72:	4461      	add	r1, ip
 802fe74:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fe78:	dd08      	ble.n	802fe8c <_svfiprintf_r+0x720>
 802fe7a:	9801      	ldr	r0, [sp, #4]
 802fe7c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fe7e:	4659      	mov	r1, fp
 802fe80:	f7ff fbf6 	bl	802f670 <__ssprint_r>
 802fe84:	2800      	cmp	r0, #0
 802fe86:	d168      	bne.n	802ff5a <_svfiprintf_r+0x7ee>
 802fe88:	4b5c      	ldr	r3, [pc, #368]	@ (802fffc <_svfiprintf_r+0x890>)
 802fe8a:	a811      	add	r0, sp, #68	@ 0x44
 802fe8c:	f1aa 0a10 	sub.w	sl, sl, #16
 802fe90:	4606      	mov	r6, r0
 802fe92:	e68d      	b.n	802fbb0 <_svfiprintf_r+0x444>
 802fe94:	4606      	mov	r6, r0
 802fe96:	e6a8      	b.n	802fbea <_svfiprintf_r+0x47e>
 802fe98:	9801      	ldr	r0, [sp, #4]
 802fe9a:	aa0e      	add	r2, sp, #56	@ 0x38
 802fe9c:	4659      	mov	r1, fp
 802fe9e:	f7ff fbe7 	bl	802f670 <__ssprint_r>
 802fea2:	2800      	cmp	r0, #0
 802fea4:	d159      	bne.n	802ff5a <_svfiprintf_r+0x7ee>
 802fea6:	ae11      	add	r6, sp, #68	@ 0x44
 802fea8:	e6b1      	b.n	802fc0e <_svfiprintf_r+0x4a2>
 802feaa:	9801      	ldr	r0, [sp, #4]
 802feac:	aa0e      	add	r2, sp, #56	@ 0x38
 802feae:	4659      	mov	r1, fp
 802feb0:	f7ff fbde 	bl	802f670 <__ssprint_r>
 802feb4:	2800      	cmp	r0, #0
 802feb6:	d150      	bne.n	802ff5a <_svfiprintf_r+0x7ee>
 802feb8:	ae11      	add	r6, sp, #68	@ 0x44
 802feba:	e6b8      	b.n	802fc2e <_svfiprintf_r+0x4c2>
 802febc:	2110      	movs	r1, #16
 802febe:	6071      	str	r1, [r6, #4]
 802fec0:	2a07      	cmp	r2, #7
 802fec2:	4461      	add	r1, ip
 802fec4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fec8:	dd08      	ble.n	802fedc <_svfiprintf_r+0x770>
 802feca:	9801      	ldr	r0, [sp, #4]
 802fecc:	aa0e      	add	r2, sp, #56	@ 0x38
 802fece:	4659      	mov	r1, fp
 802fed0:	f7ff fbce 	bl	802f670 <__ssprint_r>
 802fed4:	2800      	cmp	r0, #0
 802fed6:	d140      	bne.n	802ff5a <_svfiprintf_r+0x7ee>
 802fed8:	4b49      	ldr	r3, [pc, #292]	@ (8030000 <_svfiprintf_r+0x894>)
 802feda:	a811      	add	r0, sp, #68	@ 0x44
 802fedc:	f1aa 0a10 	sub.w	sl, sl, #16
 802fee0:	4606      	mov	r6, r0
 802fee2:	e6ae      	b.n	802fc42 <_svfiprintf_r+0x4d6>
 802fee4:	4606      	mov	r6, r0
 802fee6:	e6c9      	b.n	802fc7c <_svfiprintf_r+0x510>
 802fee8:	2010      	movs	r0, #16
 802feea:	4402      	add	r2, r0
 802feec:	2b07      	cmp	r3, #7
 802feee:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fef2:	6070      	str	r0, [r6, #4]
 802fef4:	dd06      	ble.n	802ff04 <_svfiprintf_r+0x798>
 802fef6:	9801      	ldr	r0, [sp, #4]
 802fef8:	aa0e      	add	r2, sp, #56	@ 0x38
 802fefa:	4659      	mov	r1, fp
 802fefc:	f7ff fbb8 	bl	802f670 <__ssprint_r>
 802ff00:	bb58      	cbnz	r0, 802ff5a <_svfiprintf_r+0x7ee>
 802ff02:	a911      	add	r1, sp, #68	@ 0x44
 802ff04:	3c10      	subs	r4, #16
 802ff06:	460e      	mov	r6, r1
 802ff08:	e6bc      	b.n	802fc84 <_svfiprintf_r+0x518>
 802ff0a:	460e      	mov	r6, r1
 802ff0c:	e6d5      	b.n	802fcba <_svfiprintf_r+0x54e>
 802ff0e:	9801      	ldr	r0, [sp, #4]
 802ff10:	aa0e      	add	r2, sp, #56	@ 0x38
 802ff12:	4659      	mov	r1, fp
 802ff14:	f7ff fbac 	bl	802f670 <__ssprint_r>
 802ff18:	b9f8      	cbnz	r0, 802ff5a <_svfiprintf_r+0x7ee>
 802ff1a:	ab11      	add	r3, sp, #68	@ 0x44
 802ff1c:	e6dd      	b.n	802fcda <_svfiprintf_r+0x56e>
 802ff1e:	9a03      	ldr	r2, [sp, #12]
 802ff20:	1b54      	subs	r4, r2, r5
 802ff22:	2c00      	cmp	r4, #0
 802ff24:	f77f aedd 	ble.w	802fce2 <_svfiprintf_r+0x576>
 802ff28:	4e34      	ldr	r6, [pc, #208]	@ (802fffc <_svfiprintf_r+0x890>)
 802ff2a:	f04f 0810 	mov.w	r8, #16
 802ff2e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802ff32:	2c10      	cmp	r4, #16
 802ff34:	f102 0201 	add.w	r2, r2, #1
 802ff38:	601e      	str	r6, [r3, #0]
 802ff3a:	dc17      	bgt.n	802ff6c <_svfiprintf_r+0x800>
 802ff3c:	605c      	str	r4, [r3, #4]
 802ff3e:	2a07      	cmp	r2, #7
 802ff40:	440c      	add	r4, r1
 802ff42:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802ff46:	f77f aecc 	ble.w	802fce2 <_svfiprintf_r+0x576>
 802ff4a:	9801      	ldr	r0, [sp, #4]
 802ff4c:	aa0e      	add	r2, sp, #56	@ 0x38
 802ff4e:	4659      	mov	r1, fp
 802ff50:	f7ff fb8e 	bl	802f670 <__ssprint_r>
 802ff54:	2800      	cmp	r0, #0
 802ff56:	f43f aec4 	beq.w	802fce2 <_svfiprintf_r+0x576>
 802ff5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802ff5e:	065b      	lsls	r3, r3, #25
 802ff60:	f53f ac1c 	bmi.w	802f79c <_svfiprintf_r+0x30>
 802ff64:	9804      	ldr	r0, [sp, #16]
 802ff66:	b03b      	add	sp, #236	@ 0xec
 802ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ff6c:	3110      	adds	r1, #16
 802ff6e:	2a07      	cmp	r2, #7
 802ff70:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ff74:	f8c3 8004 	str.w	r8, [r3, #4]
 802ff78:	dc02      	bgt.n	802ff80 <_svfiprintf_r+0x814>
 802ff7a:	3308      	adds	r3, #8
 802ff7c:	3c10      	subs	r4, #16
 802ff7e:	e7d6      	b.n	802ff2e <_svfiprintf_r+0x7c2>
 802ff80:	9801      	ldr	r0, [sp, #4]
 802ff82:	aa0e      	add	r2, sp, #56	@ 0x38
 802ff84:	4659      	mov	r1, fp
 802ff86:	f7ff fb73 	bl	802f670 <__ssprint_r>
 802ff8a:	2800      	cmp	r0, #0
 802ff8c:	d1e5      	bne.n	802ff5a <_svfiprintf_r+0x7ee>
 802ff8e:	ab11      	add	r3, sp, #68	@ 0x44
 802ff90:	e7f4      	b.n	802ff7c <_svfiprintf_r+0x810>
 802ff92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ff94:	2b00      	cmp	r3, #0
 802ff96:	d0e0      	beq.n	802ff5a <_svfiprintf_r+0x7ee>
 802ff98:	9801      	ldr	r0, [sp, #4]
 802ff9a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ff9c:	4659      	mov	r1, fp
 802ff9e:	f7ff fb67 	bl	802f670 <__ssprint_r>
 802ffa2:	e7da      	b.n	802ff5a <_svfiprintf_r+0x7ee>
 802ffa4:	ea54 0205 	orrs.w	r2, r4, r5
 802ffa8:	46ca      	mov	sl, r9
 802ffaa:	f43f adac 	beq.w	802fb06 <_svfiprintf_r+0x39a>
 802ffae:	2b01      	cmp	r3, #1
 802ffb0:	f43f aee7 	beq.w	802fd82 <_svfiprintf_r+0x616>
 802ffb4:	2b02      	cmp	r3, #2
 802ffb6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802ffba:	f43f af2f 	beq.w	802fe1c <_svfiprintf_r+0x6b0>
 802ffbe:	f004 0307 	and.w	r3, r4, #7
 802ffc2:	08e4      	lsrs	r4, r4, #3
 802ffc4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802ffc8:	08ed      	lsrs	r5, r5, #3
 802ffca:	3330      	adds	r3, #48	@ 0x30
 802ffcc:	ea54 0105 	orrs.w	r1, r4, r5
 802ffd0:	4642      	mov	r2, r8
 802ffd2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802ffd6:	d1f2      	bne.n	802ffbe <_svfiprintf_r+0x852>
 802ffd8:	f01a 0f01 	tst.w	sl, #1
 802ffdc:	d006      	beq.n	802ffec <_svfiprintf_r+0x880>
 802ffde:	2b30      	cmp	r3, #48	@ 0x30
 802ffe0:	d004      	beq.n	802ffec <_svfiprintf_r+0x880>
 802ffe2:	2330      	movs	r3, #48	@ 0x30
 802ffe4:	f808 3c01 	strb.w	r3, [r8, #-1]
 802ffe8:	f1a2 0802 	sub.w	r8, r2, #2
 802ffec:	ab3a      	add	r3, sp, #232	@ 0xe8
 802ffee:	eba3 0308 	sub.w	r3, r3, r8
 802fff2:	9c00      	ldr	r4, [sp, #0]
 802fff4:	9300      	str	r3, [sp, #0]
 802fff6:	46d1      	mov	r9, sl
 802fff8:	e5c2      	b.n	802fb80 <_svfiprintf_r+0x414>
 802fffa:	bf00      	nop
 802fffc:	0803c57f 	.word	0x0803c57f
 8030000:	0803c56f 	.word	0x0803c56f

08030004 <_sungetc_r>:
 8030004:	b538      	push	{r3, r4, r5, lr}
 8030006:	1c4b      	adds	r3, r1, #1
 8030008:	4614      	mov	r4, r2
 803000a:	d103      	bne.n	8030014 <_sungetc_r+0x10>
 803000c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8030010:	4628      	mov	r0, r5
 8030012:	bd38      	pop	{r3, r4, r5, pc}
 8030014:	8993      	ldrh	r3, [r2, #12]
 8030016:	f023 0320 	bic.w	r3, r3, #32
 803001a:	8193      	strh	r3, [r2, #12]
 803001c:	6853      	ldr	r3, [r2, #4]
 803001e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8030020:	b2cd      	uxtb	r5, r1
 8030022:	b18a      	cbz	r2, 8030048 <_sungetc_r+0x44>
 8030024:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8030026:	429a      	cmp	r2, r3
 8030028:	dd08      	ble.n	803003c <_sungetc_r+0x38>
 803002a:	6823      	ldr	r3, [r4, #0]
 803002c:	1e5a      	subs	r2, r3, #1
 803002e:	6022      	str	r2, [r4, #0]
 8030030:	f803 5c01 	strb.w	r5, [r3, #-1]
 8030034:	6863      	ldr	r3, [r4, #4]
 8030036:	3301      	adds	r3, #1
 8030038:	6063      	str	r3, [r4, #4]
 803003a:	e7e9      	b.n	8030010 <_sungetc_r+0xc>
 803003c:	4621      	mov	r1, r4
 803003e:	f005 f8a7 	bl	8035190 <__submore>
 8030042:	2800      	cmp	r0, #0
 8030044:	d0f1      	beq.n	803002a <_sungetc_r+0x26>
 8030046:	e7e1      	b.n	803000c <_sungetc_r+0x8>
 8030048:	6921      	ldr	r1, [r4, #16]
 803004a:	6822      	ldr	r2, [r4, #0]
 803004c:	b141      	cbz	r1, 8030060 <_sungetc_r+0x5c>
 803004e:	4291      	cmp	r1, r2
 8030050:	d206      	bcs.n	8030060 <_sungetc_r+0x5c>
 8030052:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8030056:	42a9      	cmp	r1, r5
 8030058:	d102      	bne.n	8030060 <_sungetc_r+0x5c>
 803005a:	3a01      	subs	r2, #1
 803005c:	6022      	str	r2, [r4, #0]
 803005e:	e7ea      	b.n	8030036 <_sungetc_r+0x32>
 8030060:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8030064:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030068:	6323      	str	r3, [r4, #48]	@ 0x30
 803006a:	2303      	movs	r3, #3
 803006c:	6363      	str	r3, [r4, #52]	@ 0x34
 803006e:	4623      	mov	r3, r4
 8030070:	f803 5f42 	strb.w	r5, [r3, #66]!
 8030074:	6023      	str	r3, [r4, #0]
 8030076:	2301      	movs	r3, #1
 8030078:	e7de      	b.n	8030038 <_sungetc_r+0x34>

0803007a <__ssrefill_r>:
 803007a:	b510      	push	{r4, lr}
 803007c:	460c      	mov	r4, r1
 803007e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8030080:	b169      	cbz	r1, 803009e <__ssrefill_r+0x24>
 8030082:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8030086:	4299      	cmp	r1, r3
 8030088:	d001      	beq.n	803008e <__ssrefill_r+0x14>
 803008a:	f7fe ff2f 	bl	802eeec <_free_r>
 803008e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8030090:	6063      	str	r3, [r4, #4]
 8030092:	2000      	movs	r0, #0
 8030094:	6320      	str	r0, [r4, #48]	@ 0x30
 8030096:	b113      	cbz	r3, 803009e <__ssrefill_r+0x24>
 8030098:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 803009a:	6023      	str	r3, [r4, #0]
 803009c:	bd10      	pop	{r4, pc}
 803009e:	6923      	ldr	r3, [r4, #16]
 80300a0:	6023      	str	r3, [r4, #0]
 80300a2:	2300      	movs	r3, #0
 80300a4:	6063      	str	r3, [r4, #4]
 80300a6:	89a3      	ldrh	r3, [r4, #12]
 80300a8:	f043 0320 	orr.w	r3, r3, #32
 80300ac:	81a3      	strh	r3, [r4, #12]
 80300ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80300b2:	e7f3      	b.n	803009c <__ssrefill_r+0x22>

080300b4 <_sfread_r>:
 80300b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80300b8:	461f      	mov	r7, r3
 80300ba:	4613      	mov	r3, r2
 80300bc:	437b      	muls	r3, r7
 80300be:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80300c0:	9000      	str	r0, [sp, #0]
 80300c2:	4688      	mov	r8, r1
 80300c4:	4691      	mov	r9, r2
 80300c6:	d028      	beq.n	803011a <_sfread_r+0x66>
 80300c8:	461e      	mov	r6, r3
 80300ca:	f04f 0b00 	mov.w	fp, #0
 80300ce:	e9d4 1500 	ldrd	r1, r5, [r4]
 80300d2:	42b5      	cmp	r5, r6
 80300d4:	d30b      	bcc.n	80300ee <_sfread_r+0x3a>
 80300d6:	4632      	mov	r2, r6
 80300d8:	4640      	mov	r0, r8
 80300da:	f7fe f805 	bl	802e0e8 <memcpy>
 80300de:	6862      	ldr	r2, [r4, #4]
 80300e0:	6821      	ldr	r1, [r4, #0]
 80300e2:	1b92      	subs	r2, r2, r6
 80300e4:	4431      	add	r1, r6
 80300e6:	6062      	str	r2, [r4, #4]
 80300e8:	6021      	str	r1, [r4, #0]
 80300ea:	463b      	mov	r3, r7
 80300ec:	e015      	b.n	803011a <_sfread_r+0x66>
 80300ee:	462a      	mov	r2, r5
 80300f0:	4640      	mov	r0, r8
 80300f2:	9301      	str	r3, [sp, #4]
 80300f4:	f7fd fff8 	bl	802e0e8 <memcpy>
 80300f8:	6822      	ldr	r2, [r4, #0]
 80300fa:	9800      	ldr	r0, [sp, #0]
 80300fc:	442a      	add	r2, r5
 80300fe:	e9c4 2b00 	strd	r2, fp, [r4]
 8030102:	4621      	mov	r1, r4
 8030104:	f7ff ffb9 	bl	803007a <__ssrefill_r>
 8030108:	44a8      	add	r8, r5
 803010a:	9b01      	ldr	r3, [sp, #4]
 803010c:	eba6 0a05 	sub.w	sl, r6, r5
 8030110:	b138      	cbz	r0, 8030122 <_sfread_r+0x6e>
 8030112:	441d      	add	r5, r3
 8030114:	1bad      	subs	r5, r5, r6
 8030116:	fbb5 f3f9 	udiv	r3, r5, r9
 803011a:	4618      	mov	r0, r3
 803011c:	b003      	add	sp, #12
 803011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030122:	4656      	mov	r6, sl
 8030124:	e7d3      	b.n	80300ce <_sfread_r+0x1a>
	...

08030128 <__ssvfiscanf_r>:
 8030128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803012c:	b0df      	sub	sp, #380	@ 0x17c
 803012e:	af02      	add	r7, sp, #8
 8030130:	460c      	mov	r4, r1
 8030132:	623b      	str	r3, [r7, #32]
 8030134:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8030138:	6278      	str	r0, [r7, #36]	@ 0x24
 803013a:	049d      	lsls	r5, r3, #18
 803013c:	60ba      	str	r2, [r7, #8]
 803013e:	d406      	bmi.n	803014e <__ssvfiscanf_r+0x26>
 8030140:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8030144:	818b      	strh	r3, [r1, #12]
 8030146:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8030148:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803014c:	664b      	str	r3, [r1, #100]	@ 0x64
 803014e:	2300      	movs	r3, #0
 8030150:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8030154:	60fb      	str	r3, [r7, #12]
 8030156:	469b      	mov	fp, r3
 8030158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803015a:	61fb      	str	r3, [r7, #28]
 803015c:	e005      	b.n	803016a <__ssvfiscanf_r+0x42>
 803015e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030160:	4621      	mov	r1, r4
 8030162:	f7ff ff8a 	bl	803007a <__ssrefill_r>
 8030166:	b168      	cbz	r0, 8030184 <__ssvfiscanf_r+0x5c>
 8030168:	60bd      	str	r5, [r7, #8]
 803016a:	68bd      	ldr	r5, [r7, #8]
 803016c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8030170:	637b      	str	r3, [r7, #52]	@ 0x34
 8030172:	b333      	cbz	r3, 80301c2 <__ssvfiscanf_r+0x9a>
 8030174:	4a75      	ldr	r2, [pc, #468]	@ (803034c <__ssvfiscanf_r+0x224>)
 8030176:	5cd6      	ldrb	r6, [r2, r3]
 8030178:	f016 0608 	ands.w	r6, r6, #8
 803017c:	d011      	beq.n	80301a2 <__ssvfiscanf_r+0x7a>
 803017e:	6863      	ldr	r3, [r4, #4]
 8030180:	2b00      	cmp	r3, #0
 8030182:	ddec      	ble.n	803015e <__ssvfiscanf_r+0x36>
 8030184:	6823      	ldr	r3, [r4, #0]
 8030186:	4971      	ldr	r1, [pc, #452]	@ (803034c <__ssvfiscanf_r+0x224>)
 8030188:	781a      	ldrb	r2, [r3, #0]
 803018a:	5c8a      	ldrb	r2, [r1, r2]
 803018c:	0710      	lsls	r0, r2, #28
 803018e:	d5eb      	bpl.n	8030168 <__ssvfiscanf_r+0x40>
 8030190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030192:	3201      	adds	r2, #1
 8030194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030196:	6862      	ldr	r2, [r4, #4]
 8030198:	3301      	adds	r3, #1
 803019a:	3a01      	subs	r2, #1
 803019c:	6062      	str	r2, [r4, #4]
 803019e:	6023      	str	r3, [r4, #0]
 80301a0:	e7ed      	b.n	803017e <__ssvfiscanf_r+0x56>
 80301a2:	2b25      	cmp	r3, #37	@ 0x25
 80301a4:	d15f      	bne.n	8030266 <__ssvfiscanf_r+0x13e>
 80301a6:	62be      	str	r6, [r7, #40]	@ 0x28
 80301a8:	462a      	mov	r2, r5
 80301aa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80301ae:	60ba      	str	r2, [r7, #8]
 80301b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80301b2:	d806      	bhi.n	80301c2 <__ssvfiscanf_r+0x9a>
 80301b4:	2b42      	cmp	r3, #66	@ 0x42
 80301b6:	d809      	bhi.n	80301cc <__ssvfiscanf_r+0xa4>
 80301b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80301ba:	d079      	beq.n	80302b0 <__ssvfiscanf_r+0x188>
 80301bc:	d844      	bhi.n	8030248 <__ssvfiscanf_r+0x120>
 80301be:	2b25      	cmp	r3, #37	@ 0x25
 80301c0:	d050      	beq.n	8030264 <__ssvfiscanf_r+0x13c>
 80301c2:	f1bb 0f00 	cmp.w	fp, #0
 80301c6:	f000 810e 	beq.w	80303e6 <__ssvfiscanf_r+0x2be>
 80301ca:	e107      	b.n	80303dc <__ssvfiscanf_r+0x2b4>
 80301cc:	3b43      	subs	r3, #67	@ 0x43
 80301ce:	2b37      	cmp	r3, #55	@ 0x37
 80301d0:	f200 80fd 	bhi.w	80303ce <__ssvfiscanf_r+0x2a6>
 80301d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80301d8:	00a40117 	.word	0x00a40117
 80301dc:	00fb00fb 	.word	0x00fb00fb
 80301e0:	00fb00fb 	.word	0x00fb00fb
 80301e4:	00fb00fb 	.word	0x00fb00fb
 80301e8:	008e00fb 	.word	0x008e00fb
 80301ec:	00fb00fb 	.word	0x00fb00fb
 80301f0:	00fb00a8 	.word	0x00fb00a8
 80301f4:	00fb00fb 	.word	0x00fb00fb
 80301f8:	00fb00c0 	.word	0x00fb00c0
 80301fc:	00fb00fb 	.word	0x00fb00fb
 8030200:	00b400fb 	.word	0x00b400fb
 8030204:	00fb00fb 	.word	0x00fb00fb
 8030208:	00fb010d 	.word	0x00fb010d
 803020c:	00fb00fb 	.word	0x00fb00fb
 8030210:	00fb00fb 	.word	0x00fb00fb
 8030214:	00fb00fb 	.word	0x00fb00fb
 8030218:	00a60119 	.word	0x00a60119
 803021c:	00fb00fb 	.word	0x00fb00fb
 8030220:	008100fb 	.word	0x008100fb
 8030224:	008e013e 	.word	0x008e013e
 8030228:	007300fb 	.word	0x007300fb
 803022c:	01200095 	.word	0x01200095
 8030230:	011d00aa 	.word	0x011d00aa
 8030234:	00fb00fb 	.word	0x00fb00fb
 8030238:	009200c2 	.word	0x009200c2
 803023c:	00fb00b0 	.word	0x00fb00b0
 8030240:	00b400fb 	.word	0x00b400fb
 8030244:	009200fb 	.word	0x009200fb
 8030248:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 803024c:	2a09      	cmp	r2, #9
 803024e:	d8b8      	bhi.n	80301c2 <__ssvfiscanf_r+0x9a>
 8030250:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8030254:	d1b5      	bne.n	80301c2 <__ssvfiscanf_r+0x9a>
 8030256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8030258:	220a      	movs	r2, #10
 803025a:	fb02 3301 	mla	r3, r2, r1, r3
 803025e:	3b30      	subs	r3, #48	@ 0x30
 8030260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030262:	e02a      	b.n	80302ba <__ssvfiscanf_r+0x192>
 8030264:	68bd      	ldr	r5, [r7, #8]
 8030266:	6863      	ldr	r3, [r4, #4]
 8030268:	2b00      	cmp	r3, #0
 803026a:	dd0e      	ble.n	803028a <__ssvfiscanf_r+0x162>
 803026c:	6823      	ldr	r3, [r4, #0]
 803026e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8030272:	7819      	ldrb	r1, [r3, #0]
 8030274:	4291      	cmp	r1, r2
 8030276:	d1a4      	bne.n	80301c2 <__ssvfiscanf_r+0x9a>
 8030278:	3301      	adds	r3, #1
 803027a:	6862      	ldr	r2, [r4, #4]
 803027c:	6023      	str	r3, [r4, #0]
 803027e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030280:	3a01      	subs	r2, #1
 8030282:	3301      	adds	r3, #1
 8030284:	6062      	str	r2, [r4, #4]
 8030286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030288:	e76e      	b.n	8030168 <__ssvfiscanf_r+0x40>
 803028a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803028c:	4621      	mov	r1, r4
 803028e:	f7ff fef4 	bl	803007a <__ssrefill_r>
 8030292:	2800      	cmp	r0, #0
 8030294:	d0ea      	beq.n	803026c <__ssvfiscanf_r+0x144>
 8030296:	69fb      	ldr	r3, [r7, #28]
 8030298:	b113      	cbz	r3, 80302a0 <__ssvfiscanf_r+0x178>
 803029a:	89a3      	ldrh	r3, [r4, #12]
 803029c:	065b      	lsls	r3, r3, #25
 803029e:	d590      	bpl.n	80301c2 <__ssvfiscanf_r+0x9a>
 80302a0:	f1bb 0f00 	cmp.w	fp, #0
 80302a4:	f040 8654 	bne.w	8030f50 <__ssvfiscanf_r+0xe28>
 80302a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80302ac:	61fb      	str	r3, [r7, #28]
 80302ae:	e09a      	b.n	80303e6 <__ssvfiscanf_r+0x2be>
 80302b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80302b2:	4333      	orrs	r3, r6
 80302b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80302b6:	d184      	bne.n	80301c2 <__ssvfiscanf_r+0x9a>
 80302b8:	2610      	movs	r6, #16
 80302ba:	68bd      	ldr	r5, [r7, #8]
 80302bc:	e774      	b.n	80301a8 <__ssvfiscanf_r+0x80>
 80302be:	0731      	lsls	r1, r6, #28
 80302c0:	f47f af7f 	bne.w	80301c2 <__ssvfiscanf_r+0x9a>
 80302c4:	786b      	ldrb	r3, [r5, #1]
 80302c6:	2b6c      	cmp	r3, #108	@ 0x6c
 80302c8:	d104      	bne.n	80302d4 <__ssvfiscanf_r+0x1ac>
 80302ca:	1cab      	adds	r3, r5, #2
 80302cc:	60bb      	str	r3, [r7, #8]
 80302ce:	f046 0602 	orr.w	r6, r6, #2
 80302d2:	e7f2      	b.n	80302ba <__ssvfiscanf_r+0x192>
 80302d4:	f046 0601 	orr.w	r6, r6, #1
 80302d8:	e7ef      	b.n	80302ba <__ssvfiscanf_r+0x192>
 80302da:	0732      	lsls	r2, r6, #28
 80302dc:	f47f af71 	bne.w	80301c2 <__ssvfiscanf_r+0x9a>
 80302e0:	786b      	ldrb	r3, [r5, #1]
 80302e2:	2b68      	cmp	r3, #104	@ 0x68
 80302e4:	bf03      	ittte	eq
 80302e6:	1cab      	addeq	r3, r5, #2
 80302e8:	60bb      	streq	r3, [r7, #8]
 80302ea:	f046 0608 	orreq.w	r6, r6, #8
 80302ee:	f046 0604 	orrne.w	r6, r6, #4
 80302f2:	e7e2      	b.n	80302ba <__ssvfiscanf_r+0x192>
 80302f4:	0733      	lsls	r3, r6, #28
 80302f6:	f47f af64 	bne.w	80301c2 <__ssvfiscanf_r+0x9a>
 80302fa:	e7e8      	b.n	80302ce <__ssvfiscanf_r+0x1a6>
 80302fc:	0735      	lsls	r5, r6, #28
 80302fe:	d0dc      	beq.n	80302ba <__ssvfiscanf_r+0x192>
 8030300:	e75f      	b.n	80301c2 <__ssvfiscanf_r+0x9a>
 8030302:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8030306:	f47f af5c 	bne.w	80301c2 <__ssvfiscanf_r+0x9a>
 803030a:	f1bb 0f00 	cmp.w	fp, #0
 803030e:	d104      	bne.n	803031a <__ssvfiscanf_r+0x1f2>
 8030310:	b082      	sub	sp, #8
 8030312:	f10d 0b08 	add.w	fp, sp, #8
 8030316:	e9cb 3300 	strd	r3, r3, [fp]
 803031a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 803031e:	e7cc      	b.n	80302ba <__ssvfiscanf_r+0x192>
 8030320:	f046 0601 	orr.w	r6, r6, #1
 8030324:	4b0a      	ldr	r3, [pc, #40]	@ (8030350 <__ssvfiscanf_r+0x228>)
 8030326:	e008      	b.n	803033a <__ssvfiscanf_r+0x212>
 8030328:	f046 0601 	orr.w	r6, r6, #1
 803032c:	4b09      	ldr	r3, [pc, #36]	@ (8030354 <__ssvfiscanf_r+0x22c>)
 803032e:	60fb      	str	r3, [r7, #12]
 8030330:	2308      	movs	r3, #8
 8030332:	617b      	str	r3, [r7, #20]
 8030334:	2503      	movs	r5, #3
 8030336:	e012      	b.n	803035e <__ssvfiscanf_r+0x236>
 8030338:	4b06      	ldr	r3, [pc, #24]	@ (8030354 <__ssvfiscanf_r+0x22c>)
 803033a:	60fb      	str	r3, [r7, #12]
 803033c:	230a      	movs	r3, #10
 803033e:	e7f8      	b.n	8030332 <__ssvfiscanf_r+0x20a>
 8030340:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030344:	4b03      	ldr	r3, [pc, #12]	@ (8030354 <__ssvfiscanf_r+0x22c>)
 8030346:	60fb      	str	r3, [r7, #12]
 8030348:	2310      	movs	r3, #16
 803034a:	e7f2      	b.n	8030332 <__ssvfiscanf_r+0x20a>
 803034c:	0803c3f9 	.word	0x0803c3f9
 8030350:	0802c379 	.word	0x0802c379
 8030354:	08035179 	.word	0x08035179
 8030358:	f046 0601 	orr.w	r6, r6, #1
 803035c:	2502      	movs	r5, #2
 803035e:	6863      	ldr	r3, [r4, #4]
 8030360:	2b00      	cmp	r3, #0
 8030362:	dd7b      	ble.n	803045c <__ssvfiscanf_r+0x334>
 8030364:	0671      	lsls	r1, r6, #25
 8030366:	d407      	bmi.n	8030378 <__ssvfiscanf_r+0x250>
 8030368:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 80306f4 <__ssvfiscanf_r+0x5cc>
 803036c:	6823      	ldr	r3, [r4, #0]
 803036e:	781a      	ldrb	r2, [r3, #0]
 8030370:	f818 2002 	ldrb.w	r2, [r8, r2]
 8030374:	0712      	lsls	r2, r2, #28
 8030376:	d479      	bmi.n	803046c <__ssvfiscanf_r+0x344>
 8030378:	2d02      	cmp	r5, #2
 803037a:	f000 836f 	beq.w	8030a5c <__ssvfiscanf_r+0x934>
 803037e:	2d03      	cmp	r5, #3
 8030380:	f000 84f6 	beq.w	8030d70 <__ssvfiscanf_r+0xc48>
 8030384:	f006 0310 	and.w	r3, r6, #16
 8030388:	2d01      	cmp	r5, #1
 803038a:	613b      	str	r3, [r7, #16]
 803038c:	f006 0501 	and.w	r5, r6, #1
 8030390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030392:	f000 81b1 	beq.w	80306f8 <__ssvfiscanf_r+0x5d0>
 8030396:	2b01      	cmp	r3, #1
 8030398:	bf38      	it	cc
 803039a:	2301      	movcc	r3, #1
 803039c:	4698      	mov	r8, r3
 803039e:	693b      	ldr	r3, [r7, #16]
 80303a0:	2d00      	cmp	r5, #0
 80303a2:	f000 813b 	beq.w	803061c <__ssvfiscanf_r+0x4f4>
 80303a6:	2b00      	cmp	r3, #0
 80303a8:	f040 80d8 	bne.w	803055c <__ssvfiscanf_r+0x434>
 80303ac:	6a3b      	ldr	r3, [r7, #32]
 80303ae:	0636      	lsls	r6, r6, #24
 80303b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80303b4:	623b      	str	r3, [r7, #32]
 80303b6:	f140 80d7 	bpl.w	8030568 <__ssvfiscanf_r+0x440>
 80303ba:	b145      	cbz	r5, 80303ce <__ssvfiscanf_r+0x2a6>
 80303bc:	2080      	movs	r0, #128	@ 0x80
 80303be:	f7fe fe9d 	bl	802f0fc <malloc>
 80303c2:	4606      	mov	r6, r0
 80303c4:	2800      	cmp	r0, #0
 80303c6:	d164      	bne.n	8030492 <__ssvfiscanf_r+0x36a>
 80303c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80303cc:	61fb      	str	r3, [r7, #28]
 80303ce:	f1bb 0f00 	cmp.w	fp, #0
 80303d2:	d008      	beq.n	80303e6 <__ssvfiscanf_r+0x2be>
 80303d4:	69fb      	ldr	r3, [r7, #28]
 80303d6:	3301      	adds	r3, #1
 80303d8:	f000 85ba 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 80303dc:	f8db 0000 	ldr.w	r0, [fp]
 80303e0:	b108      	cbz	r0, 80303e6 <__ssvfiscanf_r+0x2be>
 80303e2:	f7fe fe93 	bl	802f10c <free>
 80303e6:	69f8      	ldr	r0, [r7, #28]
 80303e8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80303ec:	46bd      	mov	sp, r7
 80303ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80303f2:	68b9      	ldr	r1, [r7, #8]
 80303f4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80303f8:	f003 fe67 	bl	80340ca <__sccl>
 80303fc:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8030400:	60b8      	str	r0, [r7, #8]
 8030402:	2501      	movs	r5, #1
 8030404:	e7ab      	b.n	803035e <__ssvfiscanf_r+0x236>
 8030406:	f046 0601 	orr.w	r6, r6, #1
 803040a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803040e:	2500      	movs	r5, #0
 8030410:	e7a5      	b.n	803035e <__ssvfiscanf_r+0x236>
 8030412:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8030416:	e795      	b.n	8030344 <__ssvfiscanf_r+0x21c>
 8030418:	06f0      	lsls	r0, r6, #27
 803041a:	f53f aea6 	bmi.w	803016a <__ssvfiscanf_r+0x42>
 803041e:	6a3a      	ldr	r2, [r7, #32]
 8030420:	0731      	lsls	r1, r6, #28
 8030422:	f852 3b04 	ldr.w	r3, [r2], #4
 8030426:	623a      	str	r2, [r7, #32]
 8030428:	d502      	bpl.n	8030430 <__ssvfiscanf_r+0x308>
 803042a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803042c:	701a      	strb	r2, [r3, #0]
 803042e:	e69c      	b.n	803016a <__ssvfiscanf_r+0x42>
 8030430:	0772      	lsls	r2, r6, #29
 8030432:	d502      	bpl.n	803043a <__ssvfiscanf_r+0x312>
 8030434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030436:	801a      	strh	r2, [r3, #0]
 8030438:	e697      	b.n	803016a <__ssvfiscanf_r+0x42>
 803043a:	07f5      	lsls	r5, r6, #31
 803043c:	d502      	bpl.n	8030444 <__ssvfiscanf_r+0x31c>
 803043e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030440:	601a      	str	r2, [r3, #0]
 8030442:	e692      	b.n	803016a <__ssvfiscanf_r+0x42>
 8030444:	07b0      	lsls	r0, r6, #30
 8030446:	d5fa      	bpl.n	803043e <__ssvfiscanf_r+0x316>
 8030448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803044a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803044c:	17d2      	asrs	r2, r2, #31
 803044e:	e9c3 1200 	strd	r1, r2, [r3]
 8030452:	e68a      	b.n	803016a <__ssvfiscanf_r+0x42>
 8030454:	4ba6      	ldr	r3, [pc, #664]	@ (80306f0 <__ssvfiscanf_r+0x5c8>)
 8030456:	60fb      	str	r3, [r7, #12]
 8030458:	2300      	movs	r3, #0
 803045a:	e76a      	b.n	8030332 <__ssvfiscanf_r+0x20a>
 803045c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803045e:	4621      	mov	r1, r4
 8030460:	f7ff fe0b 	bl	803007a <__ssrefill_r>
 8030464:	2800      	cmp	r0, #0
 8030466:	f43f af7d 	beq.w	8030364 <__ssvfiscanf_r+0x23c>
 803046a:	e714      	b.n	8030296 <__ssvfiscanf_r+0x16e>
 803046c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803046e:	3201      	adds	r2, #1
 8030470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030472:	6862      	ldr	r2, [r4, #4]
 8030474:	3a01      	subs	r2, #1
 8030476:	2a00      	cmp	r2, #0
 8030478:	6062      	str	r2, [r4, #4]
 803047a:	dd02      	ble.n	8030482 <__ssvfiscanf_r+0x35a>
 803047c:	3301      	adds	r3, #1
 803047e:	6023      	str	r3, [r4, #0]
 8030480:	e774      	b.n	803036c <__ssvfiscanf_r+0x244>
 8030482:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030484:	4621      	mov	r1, r4
 8030486:	f7ff fdf8 	bl	803007a <__ssrefill_r>
 803048a:	2800      	cmp	r0, #0
 803048c:	f43f af6e 	beq.w	803036c <__ssvfiscanf_r+0x244>
 8030490:	e701      	b.n	8030296 <__ssvfiscanf_r+0x16e>
 8030492:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030496:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803049a:	6028      	str	r0, [r5, #0]
 803049c:	4599      	cmp	r9, r3
 803049e:	d314      	bcc.n	80304ca <__ssvfiscanf_r+0x3a2>
 80304a0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80304a4:	4293      	cmp	r3, r2
 80304a6:	f200 8553 	bhi.w	8030f50 <__ssvfiscanf_r+0xe28>
 80304aa:	3308      	adds	r3, #8
 80304ac:	fa1f fa83 	uxth.w	sl, r3
 80304b0:	f8db 0000 	ldr.w	r0, [fp]
 80304b4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80304b8:	f003 fdaa 	bl	8034010 <realloc>
 80304bc:	2800      	cmp	r0, #0
 80304be:	f000 8547 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 80304c2:	f8cb 0000 	str.w	r0, [fp]
 80304c6:	f8ab a004 	strh.w	sl, [fp, #4]
 80304ca:	f8db 3000 	ldr.w	r3, [fp]
 80304ce:	f109 0201 	add.w	r2, r9, #1
 80304d2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80304d6:	46aa      	mov	sl, r5
 80304d8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80304dc:	4635      	mov	r5, r6
 80304de:	f04f 0920 	mov.w	r9, #32
 80304e2:	2200      	movs	r2, #0
 80304e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80304e6:	f7fd fd4b 	bl	802df80 <__locale_mb_cur_max>
 80304ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80304ec:	4290      	cmp	r0, r2
 80304ee:	f43f aed2 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 80304f2:	6821      	ldr	r1, [r4, #0]
 80304f4:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 80304f8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80304fc:	f80c 0002 	strb.w	r0, [ip, r2]
 8030500:	1c53      	adds	r3, r2, #1
 8030502:	6862      	ldr	r2, [r4, #4]
 8030504:	3a01      	subs	r2, #1
 8030506:	e9c4 1200 	strd	r1, r2, [r4]
 803050a:	69ba      	ldr	r2, [r7, #24]
 803050c:	2a03      	cmp	r2, #3
 803050e:	d102      	bne.n	8030516 <__ssvfiscanf_r+0x3ee>
 8030510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030512:	2a04      	cmp	r2, #4
 8030514:	d007      	beq.n	8030526 <__ssvfiscanf_r+0x3fe>
 8030516:	2208      	movs	r2, #8
 8030518:	2100      	movs	r1, #0
 803051a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803051e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030520:	f7fc fba6 	bl	802cc70 <memset>
 8030524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030526:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803052a:	9200      	str	r2, [sp, #0]
 803052c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803052e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030530:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030534:	4629      	mov	r1, r5
 8030536:	f005 f925 	bl	8035784 <_mbrtowc_r>
 803053a:	4603      	mov	r3, r0
 803053c:	61b8      	str	r0, [r7, #24]
 803053e:	1c58      	adds	r0, r3, #1
 8030540:	f43f aea9 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 8030544:	461a      	mov	r2, r3
 8030546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030548:	b9b2      	cbnz	r2, 8030578 <__ssvfiscanf_r+0x450>
 803054a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803054c:	441a      	add	r2, r3
 803054e:	4613      	mov	r3, r2
 8030550:	693a      	ldr	r2, [r7, #16]
 8030552:	b172      	cbz	r2, 8030572 <__ssvfiscanf_r+0x44a>
 8030554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030556:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803055a:	e019      	b.n	8030590 <__ssvfiscanf_r+0x468>
 803055c:	f04f 0900 	mov.w	r9, #0
 8030560:	464e      	mov	r6, r9
 8030562:	46ca      	mov	sl, r9
 8030564:	464d      	mov	r5, r9
 8030566:	e7bc      	b.n	80304e2 <__ssvfiscanf_r+0x3ba>
 8030568:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803056c:	464e      	mov	r6, r9
 803056e:	46ca      	mov	sl, r9
 8030570:	e7b7      	b.n	80304e2 <__ssvfiscanf_r+0x3ba>
 8030572:	693a      	ldr	r2, [r7, #16]
 8030574:	602a      	str	r2, [r5, #0]
 8030576:	e7ed      	b.n	8030554 <__ssvfiscanf_r+0x42c>
 8030578:	69ba      	ldr	r2, [r7, #24]
 803057a:	3202      	adds	r2, #2
 803057c:	d024      	beq.n	80305c8 <__ssvfiscanf_r+0x4a0>
 803057e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030580:	441a      	add	r2, r3
 8030582:	69bb      	ldr	r3, [r7, #24]
 8030584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030586:	2b03      	cmp	r3, #3
 8030588:	d1e5      	bne.n	8030556 <__ssvfiscanf_r+0x42e>
 803058a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803058c:	2b04      	cmp	r3, #4
 803058e:	d1e2      	bne.n	8030556 <__ssvfiscanf_r+0x42e>
 8030590:	693b      	ldr	r3, [r7, #16]
 8030592:	b9bb      	cbnz	r3, 80305c4 <__ssvfiscanf_r+0x49c>
 8030594:	f1ba 0f00 	cmp.w	sl, #0
 8030598:	d013      	beq.n	80305c2 <__ssvfiscanf_r+0x49a>
 803059a:	1bab      	subs	r3, r5, r6
 803059c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80305a0:	d80f      	bhi.n	80305c2 <__ssvfiscanf_r+0x49a>
 80305a2:	4630      	mov	r0, r6
 80305a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80305a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80305aa:	f003 fd31 	bl	8034010 <realloc>
 80305ae:	4606      	mov	r6, r0
 80305b0:	2800      	cmp	r0, #0
 80305b2:	f43f af09 	beq.w	80303c8 <__ssvfiscanf_r+0x2a0>
 80305b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80305b8:	f8ca 0000 	str.w	r0, [sl]
 80305bc:	18c5      	adds	r5, r0, r3
 80305be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80305c2:	3504      	adds	r5, #4
 80305c4:	2200      	movs	r2, #0
 80305c6:	e000      	b.n	80305ca <__ssvfiscanf_r+0x4a2>
 80305c8:	461a      	mov	r2, r3
 80305ca:	6863      	ldr	r3, [r4, #4]
 80305cc:	2b00      	cmp	r3, #0
 80305ce:	dc13      	bgt.n	80305f8 <__ssvfiscanf_r+0x4d0>
 80305d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80305d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80305d4:	4621      	mov	r1, r4
 80305d6:	f7ff fd50 	bl	803007a <__ssrefill_r>
 80305da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80305dc:	b160      	cbz	r0, 80305f8 <__ssvfiscanf_r+0x4d0>
 80305de:	2a00      	cmp	r2, #0
 80305e0:	f47f ae59 	bne.w	8030296 <__ssvfiscanf_r+0x16e>
 80305e4:	f1ba 0f00 	cmp.w	sl, #0
 80305e8:	d10b      	bne.n	8030602 <__ssvfiscanf_r+0x4da>
 80305ea:	693b      	ldr	r3, [r7, #16]
 80305ec:	2b00      	cmp	r3, #0
 80305ee:	f47f adbc 	bne.w	803016a <__ssvfiscanf_r+0x42>
 80305f2:	69fb      	ldr	r3, [r7, #28]
 80305f4:	3301      	adds	r3, #1
 80305f6:	e5b0      	b.n	803015a <__ssvfiscanf_r+0x32>
 80305f8:	f1b8 0f00 	cmp.w	r8, #0
 80305fc:	f47f af72 	bne.w	80304e4 <__ssvfiscanf_r+0x3bc>
 8030600:	e7f0      	b.n	80305e4 <__ssvfiscanf_r+0x4bc>
 8030602:	1ba9      	subs	r1, r5, r6
 8030604:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8030608:	d9ef      	bls.n	80305ea <__ssvfiscanf_r+0x4c2>
 803060a:	f8da 0000 	ldr.w	r0, [sl]
 803060e:	f003 fcff 	bl	8034010 <realloc>
 8030612:	2800      	cmp	r0, #0
 8030614:	d0e9      	beq.n	80305ea <__ssvfiscanf_r+0x4c2>
 8030616:	f8ca 0000 	str.w	r0, [sl]
 803061a:	e7e6      	b.n	80305ea <__ssvfiscanf_r+0x4c2>
 803061c:	b1db      	cbz	r3, 8030656 <__ssvfiscanf_r+0x52e>
 803061e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8030622:	4598      	cmp	r8, r3
 8030624:	dd10      	ble.n	8030648 <__ssvfiscanf_r+0x520>
 8030626:	441a      	add	r2, r3
 8030628:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803062a:	6022      	str	r2, [r4, #0]
 803062c:	4621      	mov	r1, r4
 803062e:	441d      	add	r5, r3
 8030630:	eba8 0803 	sub.w	r8, r8, r3
 8030634:	f7ff fd21 	bl	803007a <__ssrefill_r>
 8030638:	2800      	cmp	r0, #0
 803063a:	d0f0      	beq.n	803061e <__ssvfiscanf_r+0x4f6>
 803063c:	2d00      	cmp	r5, #0
 803063e:	f43f ae2a 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 8030642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030644:	442b      	add	r3, r5
 8030646:	e201      	b.n	8030a4c <__ssvfiscanf_r+0x924>
 8030648:	eba3 0308 	sub.w	r3, r3, r8
 803064c:	4442      	add	r2, r8
 803064e:	4445      	add	r5, r8
 8030650:	6063      	str	r3, [r4, #4]
 8030652:	6022      	str	r2, [r4, #0]
 8030654:	e7f5      	b.n	8030642 <__ssvfiscanf_r+0x51a>
 8030656:	6a3b      	ldr	r3, [r7, #32]
 8030658:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803065c:	f853 5b04 	ldr.w	r5, [r3], #4
 8030660:	623b      	str	r3, [r7, #32]
 8030662:	d02d      	beq.n	80306c0 <__ssvfiscanf_r+0x598>
 8030664:	2d00      	cmp	r5, #0
 8030666:	f43f adac 	beq.w	80301c2 <__ssvfiscanf_r+0x9a>
 803066a:	4640      	mov	r0, r8
 803066c:	f7fe fd46 	bl	802f0fc <malloc>
 8030670:	4681      	mov	r9, r0
 8030672:	2800      	cmp	r0, #0
 8030674:	f43f ae14 	beq.w	80302a0 <__ssvfiscanf_r+0x178>
 8030678:	f8bb a006 	ldrh.w	sl, [fp, #6]
 803067c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030680:	6028      	str	r0, [r5, #0]
 8030682:	45b2      	cmp	sl, r6
 8030684:	d312      	bcc.n	80306ac <__ssvfiscanf_r+0x584>
 8030686:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803068a:	429e      	cmp	r6, r3
 803068c:	f200 8460 	bhi.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030690:	3608      	adds	r6, #8
 8030692:	b2b6      	uxth	r6, r6
 8030694:	f8db 0000 	ldr.w	r0, [fp]
 8030698:	00b1      	lsls	r1, r6, #2
 803069a:	f003 fcb9 	bl	8034010 <realloc>
 803069e:	2800      	cmp	r0, #0
 80306a0:	f000 8456 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 80306a4:	f8cb 0000 	str.w	r0, [fp]
 80306a8:	f8ab 6004 	strh.w	r6, [fp, #4]
 80306ac:	f8db 3000 	ldr.w	r3, [fp]
 80306b0:	f10a 0201 	add.w	r2, sl, #1
 80306b4:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80306b8:	462e      	mov	r6, r5
 80306ba:	f8ab 2006 	strh.w	r2, [fp, #6]
 80306be:	464d      	mov	r5, r9
 80306c0:	9400      	str	r4, [sp, #0]
 80306c2:	4629      	mov	r1, r5
 80306c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80306c6:	4643      	mov	r3, r8
 80306c8:	2201      	movs	r2, #1
 80306ca:	f7ff fcf3 	bl	80300b4 <_sfread_r>
 80306ce:	4605      	mov	r5, r0
 80306d0:	2800      	cmp	r0, #0
 80306d2:	f43f ade0 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 80306d6:	b13e      	cbz	r6, 80306e8 <__ssvfiscanf_r+0x5c0>
 80306d8:	4580      	cmp	r8, r0
 80306da:	d905      	bls.n	80306e8 <__ssvfiscanf_r+0x5c0>
 80306dc:	4601      	mov	r1, r0
 80306de:	6830      	ldr	r0, [r6, #0]
 80306e0:	f003 fc96 	bl	8034010 <realloc>
 80306e4:	b100      	cbz	r0, 80306e8 <__ssvfiscanf_r+0x5c0>
 80306e6:	6030      	str	r0, [r6, #0]
 80306e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80306ea:	442b      	add	r3, r5
 80306ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80306ee:	e780      	b.n	80305f2 <__ssvfiscanf_r+0x4ca>
 80306f0:	0802c379 	.word	0x0802c379
 80306f4:	0803c3f9 	.word	0x0803c3f9
 80306f8:	2b00      	cmp	r3, #0
 80306fa:	bf08      	it	eq
 80306fc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030702:	693b      	ldr	r3, [r7, #16]
 8030704:	2d00      	cmp	r5, #0
 8030706:	f000 8100 	beq.w	803090a <__ssvfiscanf_r+0x7e2>
 803070a:	2b00      	cmp	r3, #0
 803070c:	f040 80a5 	bne.w	803085a <__ssvfiscanf_r+0x732>
 8030710:	6a3b      	ldr	r3, [r7, #32]
 8030712:	0631      	lsls	r1, r6, #24
 8030714:	f853 5b04 	ldr.w	r5, [r3], #4
 8030718:	623b      	str	r3, [r7, #32]
 803071a:	f140 80a5 	bpl.w	8030868 <__ssvfiscanf_r+0x740>
 803071e:	2d00      	cmp	r5, #0
 8030720:	f43f ae55 	beq.w	80303ce <__ssvfiscanf_r+0x2a6>
 8030724:	2080      	movs	r0, #128	@ 0x80
 8030726:	f7fe fce9 	bl	802f0fc <malloc>
 803072a:	4680      	mov	r8, r0
 803072c:	2800      	cmp	r0, #0
 803072e:	f43f ae4b 	beq.w	80303c8 <__ssvfiscanf_r+0x2a0>
 8030732:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8030736:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803073a:	6028      	str	r0, [r5, #0]
 803073c:	429e      	cmp	r6, r3
 803073e:	d314      	bcc.n	803076a <__ssvfiscanf_r+0x642>
 8030740:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030744:	4293      	cmp	r3, r2
 8030746:	f200 8403 	bhi.w	8030f50 <__ssvfiscanf_r+0xe28>
 803074a:	3308      	adds	r3, #8
 803074c:	fa1f f983 	uxth.w	r9, r3
 8030750:	f8db 0000 	ldr.w	r0, [fp]
 8030754:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8030758:	f003 fc5a 	bl	8034010 <realloc>
 803075c:	2800      	cmp	r0, #0
 803075e:	f000 83f7 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030762:	f8cb 0000 	str.w	r0, [fp]
 8030766:	f8ab 9004 	strh.w	r9, [fp, #4]
 803076a:	f8db 3000 	ldr.w	r3, [fp]
 803076e:	1c72      	adds	r2, r6, #1
 8030770:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8030774:	46aa      	mov	sl, r5
 8030776:	f8ab 2006 	strh.w	r2, [fp, #6]
 803077a:	4645      	mov	r5, r8
 803077c:	f04f 0920 	mov.w	r9, #32
 8030780:	2600      	movs	r6, #0
 8030782:	f7fd fbfd 	bl	802df80 <__locale_mb_cur_max>
 8030786:	4286      	cmp	r6, r0
 8030788:	f43f ad85 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 803078c:	1c73      	adds	r3, r6, #1
 803078e:	607b      	str	r3, [r7, #4]
 8030790:	6823      	ldr	r3, [r4, #0]
 8030792:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030796:	f813 2b01 	ldrb.w	r2, [r3], #1
 803079a:	558a      	strb	r2, [r1, r6]
 803079c:	6862      	ldr	r2, [r4, #4]
 803079e:	3a01      	subs	r2, #1
 80307a0:	e9c4 3200 	strd	r3, r2, [r4]
 80307a4:	69bb      	ldr	r3, [r7, #24]
 80307a6:	2b03      	cmp	r3, #3
 80307a8:	d102      	bne.n	80307b0 <__ssvfiscanf_r+0x688>
 80307aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80307ac:	2b04      	cmp	r3, #4
 80307ae:	d005      	beq.n	80307bc <__ssvfiscanf_r+0x694>
 80307b0:	2208      	movs	r2, #8
 80307b2:	2100      	movs	r1, #0
 80307b4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80307b8:	f7fc fa5a 	bl	802cc70 <memset>
 80307bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80307c0:	9300      	str	r3, [sp, #0]
 80307c2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80307c6:	687b      	ldr	r3, [r7, #4]
 80307c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80307ca:	4629      	mov	r1, r5
 80307cc:	f004 ffda 	bl	8035784 <_mbrtowc_r>
 80307d0:	1c42      	adds	r2, r0, #1
 80307d2:	61b8      	str	r0, [r7, #24]
 80307d4:	f43f ad5f 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 80307d8:	2800      	cmp	r0, #0
 80307da:	d14a      	bne.n	8030872 <__ssvfiscanf_r+0x74a>
 80307dc:	6028      	str	r0, [r5, #0]
 80307de:	682e      	ldr	r6, [r5, #0]
 80307e0:	1c73      	adds	r3, r6, #1
 80307e2:	d056      	beq.n	8030892 <__ssvfiscanf_r+0x76a>
 80307e4:	2208      	movs	r2, #8
 80307e6:	2100      	movs	r1, #0
 80307e8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80307ec:	f7fc fa40 	bl	802cc70 <memset>
 80307f0:	4b99      	ldr	r3, [pc, #612]	@ (8030a58 <__ssvfiscanf_r+0x930>)
 80307f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80307f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80307f8:	603b      	str	r3, [r7, #0]
 80307fa:	4632      	mov	r2, r6
 80307fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030800:	683e      	ldr	r6, [r7, #0]
 8030802:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8030806:	47b0      	blx	r6
 8030808:	2801      	cmp	r0, #1
 803080a:	d144      	bne.n	8030896 <__ssvfiscanf_r+0x76e>
 803080c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8030810:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8030814:	5c9b      	ldrb	r3, [r3, r2]
 8030816:	2b00      	cmp	r3, #0
 8030818:	d148      	bne.n	80308ac <__ssvfiscanf_r+0x784>
 803081a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 803081e:	687b      	ldr	r3, [r7, #4]
 8030820:	2b00      	cmp	r3, #0
 8030822:	d13a      	bne.n	803089a <__ssvfiscanf_r+0x772>
 8030824:	693b      	ldr	r3, [r7, #16]
 8030826:	2b00      	cmp	r3, #0
 8030828:	f47f ac9f 	bne.w	803016a <__ssvfiscanf_r+0x42>
 803082c:	602b      	str	r3, [r5, #0]
 803082e:	f1ba 0f00 	cmp.w	sl, #0
 8030832:	f43f aede 	beq.w	80305f2 <__ssvfiscanf_r+0x4ca>
 8030836:	eba5 0108 	sub.w	r1, r5, r8
 803083a:	108b      	asrs	r3, r1, #2
 803083c:	3301      	adds	r3, #1
 803083e:	4599      	cmp	r9, r3
 8030840:	f67f aed7 	bls.w	80305f2 <__ssvfiscanf_r+0x4ca>
 8030844:	f8da 0000 	ldr.w	r0, [sl]
 8030848:	3104      	adds	r1, #4
 803084a:	f003 fbe1 	bl	8034010 <realloc>
 803084e:	2800      	cmp	r0, #0
 8030850:	f43f aecf 	beq.w	80305f2 <__ssvfiscanf_r+0x4ca>
 8030854:	f8ca 0000 	str.w	r0, [sl]
 8030858:	e6cb      	b.n	80305f2 <__ssvfiscanf_r+0x4ca>
 803085a:	f04f 0900 	mov.w	r9, #0
 803085e:	46c8      	mov	r8, r9
 8030860:	46ca      	mov	sl, r9
 8030862:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8030866:	e78b      	b.n	8030780 <__ssvfiscanf_r+0x658>
 8030868:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803086c:	46c8      	mov	r8, r9
 803086e:	46ca      	mov	sl, r9
 8030870:	e786      	b.n	8030780 <__ssvfiscanf_r+0x658>
 8030872:	69bb      	ldr	r3, [r7, #24]
 8030874:	3302      	adds	r3, #2
 8030876:	d1b2      	bne.n	80307de <__ssvfiscanf_r+0x6b6>
 8030878:	687e      	ldr	r6, [r7, #4]
 803087a:	6863      	ldr	r3, [r4, #4]
 803087c:	2b00      	cmp	r3, #0
 803087e:	dc3f      	bgt.n	8030900 <__ssvfiscanf_r+0x7d8>
 8030880:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030882:	4621      	mov	r1, r4
 8030884:	f7ff fbf9 	bl	803007a <__ssrefill_r>
 8030888:	2800      	cmp	r0, #0
 803088a:	d039      	beq.n	8030900 <__ssvfiscanf_r+0x7d8>
 803088c:	2e00      	cmp	r6, #0
 803088e:	d0c9      	beq.n	8030824 <__ssvfiscanf_r+0x6fc>
 8030890:	e501      	b.n	8030296 <__ssvfiscanf_r+0x16e>
 8030892:	4632      	mov	r2, r6
 8030894:	e7bc      	b.n	8030810 <__ssvfiscanf_r+0x6e8>
 8030896:	2200      	movs	r2, #0
 8030898:	e7ba      	b.n	8030810 <__ssvfiscanf_r+0x6e8>
 803089a:	687b      	ldr	r3, [r7, #4]
 803089c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803089e:	3b01      	subs	r3, #1
 80308a0:	4622      	mov	r2, r4
 80308a2:	5cf1      	ldrb	r1, [r6, r3]
 80308a4:	607b      	str	r3, [r7, #4]
 80308a6:	f7ff fbad 	bl	8030004 <_sungetc_r>
 80308aa:	e7b8      	b.n	803081e <__ssvfiscanf_r+0x6f6>
 80308ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80308ae:	687a      	ldr	r2, [r7, #4]
 80308b0:	4413      	add	r3, r2
 80308b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80308b4:	69bb      	ldr	r3, [r7, #24]
 80308b6:	2b03      	cmp	r3, #3
 80308b8:	d102      	bne.n	80308c0 <__ssvfiscanf_r+0x798>
 80308ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80308bc:	2b04      	cmp	r3, #4
 80308be:	d002      	beq.n	80308c6 <__ssvfiscanf_r+0x79e>
 80308c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80308c2:	3b01      	subs	r3, #1
 80308c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80308c6:	693b      	ldr	r3, [r7, #16]
 80308c8:	b9c3      	cbnz	r3, 80308fc <__ssvfiscanf_r+0x7d4>
 80308ca:	3504      	adds	r5, #4
 80308cc:	f1ba 0f00 	cmp.w	sl, #0
 80308d0:	d014      	beq.n	80308fc <__ssvfiscanf_r+0x7d4>
 80308d2:	eba5 0608 	sub.w	r6, r5, r8
 80308d6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80308da:	d80d      	bhi.n	80308f8 <__ssvfiscanf_r+0x7d0>
 80308dc:	4640      	mov	r0, r8
 80308de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80308e2:	f003 fb95 	bl	8034010 <realloc>
 80308e6:	4680      	mov	r8, r0
 80308e8:	2800      	cmp	r0, #0
 80308ea:	f43f ad6d 	beq.w	80303c8 <__ssvfiscanf_r+0x2a0>
 80308ee:	1985      	adds	r5, r0, r6
 80308f0:	f8ca 0000 	str.w	r0, [sl]
 80308f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80308f8:	693e      	ldr	r6, [r7, #16]
 80308fa:	e7be      	b.n	803087a <__ssvfiscanf_r+0x752>
 80308fc:	2600      	movs	r6, #0
 80308fe:	e7bc      	b.n	803087a <__ssvfiscanf_r+0x752>
 8030900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030902:	2b00      	cmp	r3, #0
 8030904:	f47f af3d 	bne.w	8030782 <__ssvfiscanf_r+0x65a>
 8030908:	e78c      	b.n	8030824 <__ssvfiscanf_r+0x6fc>
 803090a:	b1e3      	cbz	r3, 8030946 <__ssvfiscanf_r+0x81e>
 803090c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8030910:	6823      	ldr	r3, [r4, #0]
 8030912:	781a      	ldrb	r2, [r3, #0]
 8030914:	5cb2      	ldrb	r2, [r6, r2]
 8030916:	b91a      	cbnz	r2, 8030920 <__ssvfiscanf_r+0x7f8>
 8030918:	2d00      	cmp	r5, #0
 803091a:	f47f ae92 	bne.w	8030642 <__ssvfiscanf_r+0x51a>
 803091e:	e450      	b.n	80301c2 <__ssvfiscanf_r+0x9a>
 8030920:	3301      	adds	r3, #1
 8030922:	6862      	ldr	r2, [r4, #4]
 8030924:	6023      	str	r3, [r4, #0]
 8030926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030928:	3501      	adds	r5, #1
 803092a:	3a01      	subs	r2, #1
 803092c:	42ab      	cmp	r3, r5
 803092e:	6062      	str	r2, [r4, #4]
 8030930:	f43f ae87 	beq.w	8030642 <__ssvfiscanf_r+0x51a>
 8030934:	2a00      	cmp	r2, #0
 8030936:	dceb      	bgt.n	8030910 <__ssvfiscanf_r+0x7e8>
 8030938:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803093a:	4621      	mov	r1, r4
 803093c:	f7ff fb9d 	bl	803007a <__ssrefill_r>
 8030940:	2800      	cmp	r0, #0
 8030942:	d0e5      	beq.n	8030910 <__ssvfiscanf_r+0x7e8>
 8030944:	e67d      	b.n	8030642 <__ssvfiscanf_r+0x51a>
 8030946:	6a3b      	ldr	r3, [r7, #32]
 8030948:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 803094c:	f853 5b04 	ldr.w	r5, [r3], #4
 8030950:	623b      	str	r3, [r7, #32]
 8030952:	d07e      	beq.n	8030a52 <__ssvfiscanf_r+0x92a>
 8030954:	2d00      	cmp	r5, #0
 8030956:	f43f ac34 	beq.w	80301c2 <__ssvfiscanf_r+0x9a>
 803095a:	2020      	movs	r0, #32
 803095c:	f7fe fbce 	bl	802f0fc <malloc>
 8030960:	4680      	mov	r8, r0
 8030962:	2800      	cmp	r0, #0
 8030964:	f43f ac9c 	beq.w	80302a0 <__ssvfiscanf_r+0x178>
 8030968:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 803096c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030970:	6028      	str	r0, [r5, #0]
 8030972:	45b1      	cmp	r9, r6
 8030974:	d312      	bcc.n	803099c <__ssvfiscanf_r+0x874>
 8030976:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803097a:	429e      	cmp	r6, r3
 803097c:	f200 82e8 	bhi.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030980:	3608      	adds	r6, #8
 8030982:	b2b6      	uxth	r6, r6
 8030984:	f8db 0000 	ldr.w	r0, [fp]
 8030988:	00b1      	lsls	r1, r6, #2
 803098a:	f003 fb41 	bl	8034010 <realloc>
 803098e:	2800      	cmp	r0, #0
 8030990:	f000 82de 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030994:	f8cb 0000 	str.w	r0, [fp]
 8030998:	f8ab 6004 	strh.w	r6, [fp, #4]
 803099c:	f8db 3000 	ldr.w	r3, [fp]
 80309a0:	f109 0201 	add.w	r2, r9, #1
 80309a4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80309a8:	46aa      	mov	sl, r5
 80309aa:	f8ab 2006 	strh.w	r2, [fp, #6]
 80309ae:	4645      	mov	r5, r8
 80309b0:	f04f 0920 	mov.w	r9, #32
 80309b4:	462e      	mov	r6, r5
 80309b6:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 80309ba:	6823      	ldr	r3, [r4, #0]
 80309bc:	781a      	ldrb	r2, [r3, #0]
 80309be:	f818 2002 	ldrb.w	r2, [r8, r2]
 80309c2:	b362      	cbz	r2, 8030a1e <__ssvfiscanf_r+0x8f6>
 80309c4:	6862      	ldr	r2, [r4, #4]
 80309c6:	3a01      	subs	r2, #1
 80309c8:	6062      	str	r2, [r4, #4]
 80309ca:	1c5a      	adds	r2, r3, #1
 80309cc:	6022      	str	r2, [r4, #0]
 80309ce:	781b      	ldrb	r3, [r3, #0]
 80309d0:	f805 3b01 	strb.w	r3, [r5], #1
 80309d4:	f1ba 0f00 	cmp.w	sl, #0
 80309d8:	d011      	beq.n	80309fe <__ssvfiscanf_r+0x8d6>
 80309da:	1bab      	subs	r3, r5, r6
 80309dc:	454b      	cmp	r3, r9
 80309de:	d30e      	bcc.n	80309fe <__ssvfiscanf_r+0x8d6>
 80309e0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80309e4:	4630      	mov	r0, r6
 80309e6:	4649      	mov	r1, r9
 80309e8:	613b      	str	r3, [r7, #16]
 80309ea:	f003 fb11 	bl	8034010 <realloc>
 80309ee:	4606      	mov	r6, r0
 80309f0:	2800      	cmp	r0, #0
 80309f2:	f43f ac55 	beq.w	80302a0 <__ssvfiscanf_r+0x178>
 80309f6:	693b      	ldr	r3, [r7, #16]
 80309f8:	f8ca 0000 	str.w	r0, [sl]
 80309fc:	18c5      	adds	r5, r0, r3
 80309fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a00:	3b01      	subs	r3, #1
 8030a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a04:	d00b      	beq.n	8030a1e <__ssvfiscanf_r+0x8f6>
 8030a06:	6863      	ldr	r3, [r4, #4]
 8030a08:	2b00      	cmp	r3, #0
 8030a0a:	dcd6      	bgt.n	80309ba <__ssvfiscanf_r+0x892>
 8030a0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030a0e:	4621      	mov	r1, r4
 8030a10:	f7ff fb33 	bl	803007a <__ssrefill_r>
 8030a14:	2800      	cmp	r0, #0
 8030a16:	d0d0      	beq.n	80309ba <__ssvfiscanf_r+0x892>
 8030a18:	42b5      	cmp	r5, r6
 8030a1a:	f43f ac3c 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 8030a1e:	1bae      	subs	r6, r5, r6
 8030a20:	f43f abcf 	beq.w	80301c2 <__ssvfiscanf_r+0x9a>
 8030a24:	2300      	movs	r3, #0
 8030a26:	702b      	strb	r3, [r5, #0]
 8030a28:	f1ba 0f00 	cmp.w	sl, #0
 8030a2c:	d009      	beq.n	8030a42 <__ssvfiscanf_r+0x91a>
 8030a2e:	1c71      	adds	r1, r6, #1
 8030a30:	4589      	cmp	r9, r1
 8030a32:	d906      	bls.n	8030a42 <__ssvfiscanf_r+0x91a>
 8030a34:	f8da 0000 	ldr.w	r0, [sl]
 8030a38:	f003 faea 	bl	8034010 <realloc>
 8030a3c:	b108      	cbz	r0, 8030a42 <__ssvfiscanf_r+0x91a>
 8030a3e:	f8ca 0000 	str.w	r0, [sl]
 8030a42:	69fb      	ldr	r3, [r7, #28]
 8030a44:	3301      	adds	r3, #1
 8030a46:	61fb      	str	r3, [r7, #28]
 8030a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030a4a:	4433      	add	r3, r6
 8030a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030a4e:	f7ff bb8c 	b.w	803016a <__ssvfiscanf_r+0x42>
 8030a52:	46ca      	mov	sl, r9
 8030a54:	e7ae      	b.n	80309b4 <__ssvfiscanf_r+0x88c>
 8030a56:	bf00      	nop
 8030a58:	2000016c 	.word	0x2000016c
 8030a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a5e:	2b00      	cmp	r3, #0
 8030a60:	bf08      	it	eq
 8030a62:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030a66:	f016 0501 	ands.w	r5, r6, #1
 8030a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a6c:	f006 0810 	and.w	r8, r6, #16
 8030a70:	f000 80e1 	beq.w	8030c36 <__ssvfiscanf_r+0xb0e>
 8030a74:	f1b8 0f00 	cmp.w	r8, #0
 8030a78:	f040 8089 	bne.w	8030b8e <__ssvfiscanf_r+0xa66>
 8030a7c:	6a3b      	ldr	r3, [r7, #32]
 8030a7e:	0636      	lsls	r6, r6, #24
 8030a80:	f853 5b04 	ldr.w	r5, [r3], #4
 8030a84:	623b      	str	r3, [r7, #32]
 8030a86:	f140 8089 	bpl.w	8030b9c <__ssvfiscanf_r+0xa74>
 8030a8a:	2d00      	cmp	r5, #0
 8030a8c:	f43f ac9f 	beq.w	80303ce <__ssvfiscanf_r+0x2a6>
 8030a90:	2080      	movs	r0, #128	@ 0x80
 8030a92:	f7fe fb33 	bl	802f0fc <malloc>
 8030a96:	4606      	mov	r6, r0
 8030a98:	2800      	cmp	r0, #0
 8030a9a:	f43f ac95 	beq.w	80303c8 <__ssvfiscanf_r+0x2a0>
 8030a9e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030aa2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8030aa6:	6028      	str	r0, [r5, #0]
 8030aa8:	4599      	cmp	r9, r3
 8030aaa:	d314      	bcc.n	8030ad6 <__ssvfiscanf_r+0x9ae>
 8030aac:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030ab0:	4293      	cmp	r3, r2
 8030ab2:	f200 824d 	bhi.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030ab6:	3308      	adds	r3, #8
 8030ab8:	fa1f fa83 	uxth.w	sl, r3
 8030abc:	f8db 0000 	ldr.w	r0, [fp]
 8030ac0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8030ac4:	f003 faa4 	bl	8034010 <realloc>
 8030ac8:	2800      	cmp	r0, #0
 8030aca:	f000 8241 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030ace:	f8cb 0000 	str.w	r0, [fp]
 8030ad2:	f8ab a004 	strh.w	sl, [fp, #4]
 8030ad6:	f8db 3000 	ldr.w	r3, [fp]
 8030ada:	f109 0201 	add.w	r2, r9, #1
 8030ade:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030ae2:	46aa      	mov	sl, r5
 8030ae4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030ae8:	4635      	mov	r5, r6
 8030aea:	f04f 0920 	mov.w	r9, #32
 8030aee:	2300      	movs	r3, #0
 8030af0:	6822      	ldr	r2, [r4, #0]
 8030af2:	499e      	ldr	r1, [pc, #632]	@ (8030d6c <__ssvfiscanf_r+0xc44>)
 8030af4:	7812      	ldrb	r2, [r2, #0]
 8030af6:	5c8a      	ldrb	r2, [r1, r2]
 8030af8:	0711      	lsls	r1, r2, #28
 8030afa:	d43c      	bmi.n	8030b76 <__ssvfiscanf_r+0xa4e>
 8030afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030afe:	2a00      	cmp	r2, #0
 8030b00:	d039      	beq.n	8030b76 <__ssvfiscanf_r+0xa4e>
 8030b02:	613b      	str	r3, [r7, #16]
 8030b04:	f7fd fa3c 	bl	802df80 <__locale_mb_cur_max>
 8030b08:	693b      	ldr	r3, [r7, #16]
 8030b0a:	4298      	cmp	r0, r3
 8030b0c:	f43f abc3 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 8030b10:	1c5a      	adds	r2, r3, #1
 8030b12:	613a      	str	r2, [r7, #16]
 8030b14:	6822      	ldr	r2, [r4, #0]
 8030b16:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030b1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8030b1e:	54c8      	strb	r0, [r1, r3]
 8030b20:	6863      	ldr	r3, [r4, #4]
 8030b22:	3b01      	subs	r3, #1
 8030b24:	e9c4 2300 	strd	r2, r3, [r4]
 8030b28:	69bb      	ldr	r3, [r7, #24]
 8030b2a:	2b03      	cmp	r3, #3
 8030b2c:	d102      	bne.n	8030b34 <__ssvfiscanf_r+0xa0c>
 8030b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030b30:	2b04      	cmp	r3, #4
 8030b32:	d005      	beq.n	8030b40 <__ssvfiscanf_r+0xa18>
 8030b34:	2208      	movs	r2, #8
 8030b36:	2100      	movs	r1, #0
 8030b38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8030b3c:	f7fc f898 	bl	802cc70 <memset>
 8030b40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030b44:	9300      	str	r3, [sp, #0]
 8030b46:	693b      	ldr	r3, [r7, #16]
 8030b48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b4a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030b4e:	4629      	mov	r1, r5
 8030b50:	f004 fe18 	bl	8035784 <_mbrtowc_r>
 8030b54:	4603      	mov	r3, r0
 8030b56:	61b8      	str	r0, [r7, #24]
 8030b58:	1c58      	adds	r0, r3, #1
 8030b5a:	f43f ab9c 	beq.w	8030296 <__ssvfiscanf_r+0x16e>
 8030b5e:	bb0b      	cbnz	r3, 8030ba4 <__ssvfiscanf_r+0xa7c>
 8030b60:	602b      	str	r3, [r5, #0]
 8030b62:	6828      	ldr	r0, [r5, #0]
 8030b64:	f004 fe28 	bl	80357b8 <iswspace>
 8030b68:	4603      	mov	r3, r0
 8030b6a:	2800      	cmp	r0, #0
 8030b6c:	d037      	beq.n	8030bde <__ssvfiscanf_r+0xab6>
 8030b6e:	693a      	ldr	r2, [r7, #16]
 8030b70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030b74:	bb4a      	cbnz	r2, 8030bca <__ssvfiscanf_r+0xaa2>
 8030b76:	f1b8 0f00 	cmp.w	r8, #0
 8030b7a:	f47f aaf6 	bne.w	803016a <__ssvfiscanf_r+0x42>
 8030b7e:	f8c5 8000 	str.w	r8, [r5]
 8030b82:	f1ba 0f00 	cmp.w	sl, #0
 8030b86:	f43f ad34 	beq.w	80305f2 <__ssvfiscanf_r+0x4ca>
 8030b8a:	1ba9      	subs	r1, r5, r6
 8030b8c:	e655      	b.n	803083a <__ssvfiscanf_r+0x712>
 8030b8e:	f04f 0900 	mov.w	r9, #0
 8030b92:	464e      	mov	r6, r9
 8030b94:	46ca      	mov	sl, r9
 8030b96:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8030b9a:	e7a8      	b.n	8030aee <__ssvfiscanf_r+0x9c6>
 8030b9c:	46c1      	mov	r9, r8
 8030b9e:	4646      	mov	r6, r8
 8030ba0:	46c2      	mov	sl, r8
 8030ba2:	e7a4      	b.n	8030aee <__ssvfiscanf_r+0x9c6>
 8030ba4:	69bb      	ldr	r3, [r7, #24]
 8030ba6:	3302      	adds	r3, #2
 8030ba8:	d1db      	bne.n	8030b62 <__ssvfiscanf_r+0xa3a>
 8030baa:	693b      	ldr	r3, [r7, #16]
 8030bac:	6862      	ldr	r2, [r4, #4]
 8030bae:	2a00      	cmp	r2, #0
 8030bb0:	dc9e      	bgt.n	8030af0 <__ssvfiscanf_r+0x9c8>
 8030bb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030bb4:	613b      	str	r3, [r7, #16]
 8030bb6:	4621      	mov	r1, r4
 8030bb8:	f7ff fa5f 	bl	803007a <__ssrefill_r>
 8030bbc:	693b      	ldr	r3, [r7, #16]
 8030bbe:	2800      	cmp	r0, #0
 8030bc0:	d096      	beq.n	8030af0 <__ssvfiscanf_r+0x9c8>
 8030bc2:	2b00      	cmp	r3, #0
 8030bc4:	f47f ab67 	bne.w	8030296 <__ssvfiscanf_r+0x16e>
 8030bc8:	e7d5      	b.n	8030b76 <__ssvfiscanf_r+0xa4e>
 8030bca:	693a      	ldr	r2, [r7, #16]
 8030bcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030bce:	3a01      	subs	r2, #1
 8030bd0:	613a      	str	r2, [r7, #16]
 8030bd2:	6939      	ldr	r1, [r7, #16]
 8030bd4:	4622      	mov	r2, r4
 8030bd6:	5c59      	ldrb	r1, [r3, r1]
 8030bd8:	f7ff fa14 	bl	8030004 <_sungetc_r>
 8030bdc:	e7c7      	b.n	8030b6e <__ssvfiscanf_r+0xa46>
 8030bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030be0:	6939      	ldr	r1, [r7, #16]
 8030be2:	440a      	add	r2, r1
 8030be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030be6:	69ba      	ldr	r2, [r7, #24]
 8030be8:	2a03      	cmp	r2, #3
 8030bea:	d102      	bne.n	8030bf2 <__ssvfiscanf_r+0xaca>
 8030bec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030bee:	2a04      	cmp	r2, #4
 8030bf0:	d002      	beq.n	8030bf8 <__ssvfiscanf_r+0xad0>
 8030bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030bf4:	3a01      	subs	r2, #1
 8030bf6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030bf8:	f1b8 0f00 	cmp.w	r8, #0
 8030bfc:	d1d6      	bne.n	8030bac <__ssvfiscanf_r+0xa84>
 8030bfe:	3504      	adds	r5, #4
 8030c00:	f1ba 0f00 	cmp.w	sl, #0
 8030c04:	d015      	beq.n	8030c32 <__ssvfiscanf_r+0xb0a>
 8030c06:	1bab      	subs	r3, r5, r6
 8030c08:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8030c0c:	d80f      	bhi.n	8030c2e <__ssvfiscanf_r+0xb06>
 8030c0e:	4630      	mov	r0, r6
 8030c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030c14:	613b      	str	r3, [r7, #16]
 8030c16:	f003 f9fb 	bl	8034010 <realloc>
 8030c1a:	4606      	mov	r6, r0
 8030c1c:	2800      	cmp	r0, #0
 8030c1e:	f43f abd3 	beq.w	80303c8 <__ssvfiscanf_r+0x2a0>
 8030c22:	693b      	ldr	r3, [r7, #16]
 8030c24:	f8ca 0000 	str.w	r0, [sl]
 8030c28:	18c5      	adds	r5, r0, r3
 8030c2a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030c2e:	4643      	mov	r3, r8
 8030c30:	e7bc      	b.n	8030bac <__ssvfiscanf_r+0xa84>
 8030c32:	4653      	mov	r3, sl
 8030c34:	e7ba      	b.n	8030bac <__ssvfiscanf_r+0xa84>
 8030c36:	f1b8 0f00 	cmp.w	r8, #0
 8030c3a:	d019      	beq.n	8030c70 <__ssvfiscanf_r+0xb48>
 8030c3c:	4e4b      	ldr	r6, [pc, #300]	@ (8030d6c <__ssvfiscanf_r+0xc44>)
 8030c3e:	6823      	ldr	r3, [r4, #0]
 8030c40:	781a      	ldrb	r2, [r3, #0]
 8030c42:	5cb2      	ldrb	r2, [r6, r2]
 8030c44:	0712      	lsls	r2, r2, #28
 8030c46:	f53f acfc 	bmi.w	8030642 <__ssvfiscanf_r+0x51a>
 8030c4a:	3301      	adds	r3, #1
 8030c4c:	6862      	ldr	r2, [r4, #4]
 8030c4e:	6023      	str	r3, [r4, #0]
 8030c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030c52:	3501      	adds	r5, #1
 8030c54:	3a01      	subs	r2, #1
 8030c56:	429d      	cmp	r5, r3
 8030c58:	6062      	str	r2, [r4, #4]
 8030c5a:	f43f acf2 	beq.w	8030642 <__ssvfiscanf_r+0x51a>
 8030c5e:	2a00      	cmp	r2, #0
 8030c60:	dced      	bgt.n	8030c3e <__ssvfiscanf_r+0xb16>
 8030c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030c64:	4621      	mov	r1, r4
 8030c66:	f7ff fa08 	bl	803007a <__ssrefill_r>
 8030c6a:	2800      	cmp	r0, #0
 8030c6c:	d0e7      	beq.n	8030c3e <__ssvfiscanf_r+0xb16>
 8030c6e:	e4e8      	b.n	8030642 <__ssvfiscanf_r+0x51a>
 8030c70:	6a3b      	ldr	r3, [r7, #32]
 8030c72:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8030c76:	f853 5b04 	ldr.w	r5, [r3], #4
 8030c7a:	623b      	str	r3, [r7, #32]
 8030c7c:	d074      	beq.n	8030d68 <__ssvfiscanf_r+0xc40>
 8030c7e:	2d00      	cmp	r5, #0
 8030c80:	f43f aa9f 	beq.w	80301c2 <__ssvfiscanf_r+0x9a>
 8030c84:	2020      	movs	r0, #32
 8030c86:	f7fe fa39 	bl	802f0fc <malloc>
 8030c8a:	4680      	mov	r8, r0
 8030c8c:	2800      	cmp	r0, #0
 8030c8e:	f43f ab07 	beq.w	80302a0 <__ssvfiscanf_r+0x178>
 8030c92:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030c96:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030c9a:	6028      	str	r0, [r5, #0]
 8030c9c:	45b1      	cmp	r9, r6
 8030c9e:	d312      	bcc.n	8030cc6 <__ssvfiscanf_r+0xb9e>
 8030ca0:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030ca4:	429e      	cmp	r6, r3
 8030ca6:	f200 8153 	bhi.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030caa:	3608      	adds	r6, #8
 8030cac:	b2b6      	uxth	r6, r6
 8030cae:	f8db 0000 	ldr.w	r0, [fp]
 8030cb2:	00b1      	lsls	r1, r6, #2
 8030cb4:	f003 f9ac 	bl	8034010 <realloc>
 8030cb8:	2800      	cmp	r0, #0
 8030cba:	f000 8149 	beq.w	8030f50 <__ssvfiscanf_r+0xe28>
 8030cbe:	f8cb 0000 	str.w	r0, [fp]
 8030cc2:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030cc6:	f8db 3000 	ldr.w	r3, [fp]
 8030cca:	f109 0201 	add.w	r2, r9, #1
 8030cce:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030cd2:	46aa      	mov	sl, r5
 8030cd4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030cd8:	4645      	mov	r5, r8
 8030cda:	2620      	movs	r6, #32
 8030cdc:	46a9      	mov	r9, r5
 8030cde:	6823      	ldr	r3, [r4, #0]
 8030ce0:	4922      	ldr	r1, [pc, #136]	@ (8030d6c <__ssvfiscanf_r+0xc44>)
 8030ce2:	781a      	ldrb	r2, [r3, #0]
 8030ce4:	5c8a      	ldrb	r2, [r1, r2]
 8030ce6:	0710      	lsls	r0, r2, #28
 8030ce8:	d428      	bmi.n	8030d3c <__ssvfiscanf_r+0xc14>
 8030cea:	6862      	ldr	r2, [r4, #4]
 8030cec:	3a01      	subs	r2, #1
 8030cee:	6062      	str	r2, [r4, #4]
 8030cf0:	1c5a      	adds	r2, r3, #1
 8030cf2:	6022      	str	r2, [r4, #0]
 8030cf4:	781b      	ldrb	r3, [r3, #0]
 8030cf6:	f805 3b01 	strb.w	r3, [r5], #1
 8030cfa:	f1ba 0f00 	cmp.w	sl, #0
 8030cfe:	d010      	beq.n	8030d22 <__ssvfiscanf_r+0xbfa>
 8030d00:	eba5 0809 	sub.w	r8, r5, r9
 8030d04:	45b0      	cmp	r8, r6
 8030d06:	d30c      	bcc.n	8030d22 <__ssvfiscanf_r+0xbfa>
 8030d08:	0076      	lsls	r6, r6, #1
 8030d0a:	4648      	mov	r0, r9
 8030d0c:	4631      	mov	r1, r6
 8030d0e:	f003 f97f 	bl	8034010 <realloc>
 8030d12:	4681      	mov	r9, r0
 8030d14:	2800      	cmp	r0, #0
 8030d16:	f43f aac3 	beq.w	80302a0 <__ssvfiscanf_r+0x178>
 8030d1a:	eb00 0508 	add.w	r5, r0, r8
 8030d1e:	f8ca 0000 	str.w	r0, [sl]
 8030d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030d24:	3b01      	subs	r3, #1
 8030d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030d28:	d008      	beq.n	8030d3c <__ssvfiscanf_r+0xc14>
 8030d2a:	6863      	ldr	r3, [r4, #4]
 8030d2c:	2b00      	cmp	r3, #0
 8030d2e:	dcd6      	bgt.n	8030cde <__ssvfiscanf_r+0xbb6>
 8030d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030d32:	4621      	mov	r1, r4
 8030d34:	f7ff f9a1 	bl	803007a <__ssrefill_r>
 8030d38:	2800      	cmp	r0, #0
 8030d3a:	d0d0      	beq.n	8030cde <__ssvfiscanf_r+0xbb6>
 8030d3c:	2300      	movs	r3, #0
 8030d3e:	702b      	strb	r3, [r5, #0]
 8030d40:	eba5 0509 	sub.w	r5, r5, r9
 8030d44:	f1ba 0f00 	cmp.w	sl, #0
 8030d48:	f43f acce 	beq.w	80306e8 <__ssvfiscanf_r+0x5c0>
 8030d4c:	1c69      	adds	r1, r5, #1
 8030d4e:	428e      	cmp	r6, r1
 8030d50:	f67f acca 	bls.w	80306e8 <__ssvfiscanf_r+0x5c0>
 8030d54:	f8da 0000 	ldr.w	r0, [sl]
 8030d58:	f003 f95a 	bl	8034010 <realloc>
 8030d5c:	2800      	cmp	r0, #0
 8030d5e:	f43f acc3 	beq.w	80306e8 <__ssvfiscanf_r+0x5c0>
 8030d62:	f8ca 0000 	str.w	r0, [sl]
 8030d66:	e4bf      	b.n	80306e8 <__ssvfiscanf_r+0x5c0>
 8030d68:	46b2      	mov	sl, r6
 8030d6a:	e7b7      	b.n	8030cdc <__ssvfiscanf_r+0xbb4>
 8030d6c:	0803c3f9 	.word	0x0803c3f9
 8030d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030d72:	3b01      	subs	r3, #1
 8030d74:	2b26      	cmp	r3, #38	@ 0x26
 8030d76:	bf81      	itttt	hi
 8030d78:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8030d7a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8030d7e:	2327      	movhi	r3, #39	@ 0x27
 8030d80:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030d82:	bf98      	it	ls
 8030d84:	f04f 0800 	movls.w	r8, #0
 8030d88:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8030d8c:	f04f 0900 	mov.w	r9, #0
 8030d90:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8030d94:	6822      	ldr	r2, [r4, #0]
 8030d96:	7813      	ldrb	r3, [r2, #0]
 8030d98:	2b39      	cmp	r3, #57	@ 0x39
 8030d9a:	d80f      	bhi.n	8030dbc <__ssvfiscanf_r+0xc94>
 8030d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8030d9e:	d91a      	bls.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030da0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8030da4:	290e      	cmp	r1, #14
 8030da6:	d816      	bhi.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030da8:	e8df f001 	tbb	[pc, r1]
 8030dac:	15771577 	.word	0x15771577
 8030db0:	67673e15 	.word	0x67673e15
 8030db4:	67676767 	.word	0x67676767
 8030db8:	6f67      	.short	0x6f67
 8030dba:	6f          	.byte	0x6f
 8030dbb:	00          	.byte	0x00
 8030dbc:	2b66      	cmp	r3, #102	@ 0x66
 8030dbe:	d831      	bhi.n	8030e24 <__ssvfiscanf_r+0xcfc>
 8030dc0:	2b60      	cmp	r3, #96	@ 0x60
 8030dc2:	d803      	bhi.n	8030dcc <__ssvfiscanf_r+0xca4>
 8030dc4:	2b46      	cmp	r3, #70	@ 0x46
 8030dc6:	d804      	bhi.n	8030dd2 <__ssvfiscanf_r+0xcaa>
 8030dc8:	2b40      	cmp	r3, #64	@ 0x40
 8030dca:	d904      	bls.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030dcc:	6979      	ldr	r1, [r7, #20]
 8030dce:	290a      	cmp	r1, #10
 8030dd0:	e061      	b.n	8030e96 <__ssvfiscanf_r+0xd6e>
 8030dd2:	2b58      	cmp	r3, #88	@ 0x58
 8030dd4:	d066      	beq.n	8030ea4 <__ssvfiscanf_r+0xd7c>
 8030dd6:	05f1      	lsls	r1, r6, #23
 8030dd8:	d511      	bpl.n	8030dfe <__ssvfiscanf_r+0xcd6>
 8030dda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030dde:	459a      	cmp	sl, r3
 8030de0:	d908      	bls.n	8030df4 <__ssvfiscanf_r+0xccc>
 8030de2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8030de6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030de8:	4622      	mov	r2, r4
 8030dea:	f7ff f90b 	bl	8030004 <_sungetc_r>
 8030dee:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030df2:	46c2      	mov	sl, r8
 8030df4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030df8:	459a      	cmp	sl, r3
 8030dfa:	f43f a9e2 	beq.w	80301c2 <__ssvfiscanf_r+0x9a>
 8030dfe:	f016 0210 	ands.w	r2, r6, #16
 8030e02:	d16b      	bne.n	8030edc <__ssvfiscanf_r+0xdb4>
 8030e04:	697b      	ldr	r3, [r7, #20]
 8030e06:	f88a 2000 	strb.w	r2, [sl]
 8030e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030e0c:	68fd      	ldr	r5, [r7, #12]
 8030e0e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030e12:	47a8      	blx	r5
 8030e14:	6a3b      	ldr	r3, [r7, #32]
 8030e16:	06b2      	lsls	r2, r6, #26
 8030e18:	f103 0804 	add.w	r8, r3, #4
 8030e1c:	d555      	bpl.n	8030eca <__ssvfiscanf_r+0xda2>
 8030e1e:	681b      	ldr	r3, [r3, #0]
 8030e20:	6018      	str	r0, [r3, #0]
 8030e22:	e057      	b.n	8030ed4 <__ssvfiscanf_r+0xdac>
 8030e24:	2b78      	cmp	r3, #120	@ 0x78
 8030e26:	e7d5      	b.n	8030dd4 <__ssvfiscanf_r+0xcac>
 8030e28:	0531      	lsls	r1, r6, #20
 8030e2a:	d509      	bpl.n	8030e40 <__ssvfiscanf_r+0xd18>
 8030e2c:	6979      	ldr	r1, [r7, #20]
 8030e2e:	b919      	cbnz	r1, 8030e38 <__ssvfiscanf_r+0xd10>
 8030e30:	2108      	movs	r1, #8
 8030e32:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030e36:	6179      	str	r1, [r7, #20]
 8030e38:	0575      	lsls	r5, r6, #21
 8030e3a:	d506      	bpl.n	8030e4a <__ssvfiscanf_r+0xd22>
 8030e3c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8030e40:	4655      	mov	r5, sl
 8030e42:	f805 3b01 	strb.w	r3, [r5], #1
 8030e46:	46aa      	mov	sl, r5
 8030e48:	e00b      	b.n	8030e62 <__ssvfiscanf_r+0xd3a>
 8030e4a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8030e4e:	f1b8 0f00 	cmp.w	r8, #0
 8030e52:	d004      	beq.n	8030e5e <__ssvfiscanf_r+0xd36>
 8030e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030e56:	3301      	adds	r3, #1
 8030e58:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8030e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030e5e:	f109 0901 	add.w	r9, r9, #1
 8030e62:	6863      	ldr	r3, [r4, #4]
 8030e64:	3b01      	subs	r3, #1
 8030e66:	2b00      	cmp	r3, #0
 8030e68:	6063      	str	r3, [r4, #4]
 8030e6a:	dd27      	ble.n	8030ebc <__ssvfiscanf_r+0xd94>
 8030e6c:	3201      	adds	r2, #1
 8030e6e:	6022      	str	r2, [r4, #0]
 8030e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030e72:	3b01      	subs	r3, #1
 8030e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030e76:	d18d      	bne.n	8030d94 <__ssvfiscanf_r+0xc6c>
 8030e78:	e7ad      	b.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030e7a:	6978      	ldr	r0, [r7, #20]
 8030e7c:	4936      	ldr	r1, [pc, #216]	@ (8030f58 <__ssvfiscanf_r+0xe30>)
 8030e7e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030e82:	6179      	str	r1, [r7, #20]
 8030e84:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8030e88:	e7da      	b.n	8030e40 <__ssvfiscanf_r+0xd18>
 8030e8a:	6978      	ldr	r0, [r7, #20]
 8030e8c:	4932      	ldr	r1, [pc, #200]	@ (8030f58 <__ssvfiscanf_r+0xe30>)
 8030e8e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030e92:	6179      	str	r1, [r7, #20]
 8030e94:	2908      	cmp	r1, #8
 8030e96:	dcf5      	bgt.n	8030e84 <__ssvfiscanf_r+0xd5c>
 8030e98:	e79d      	b.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030e9a:	0630      	lsls	r0, r6, #24
 8030e9c:	d59b      	bpl.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030e9e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030ea2:	e7cd      	b.n	8030e40 <__ssvfiscanf_r+0xd18>
 8030ea4:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8030ea8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8030eac:	d193      	bne.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030eae:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8030eb2:	2110      	movs	r1, #16
 8030eb4:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8030eb8:	6179      	str	r1, [r7, #20]
 8030eba:	e7c1      	b.n	8030e40 <__ssvfiscanf_r+0xd18>
 8030ebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030ebe:	4621      	mov	r1, r4
 8030ec0:	f7ff f8db 	bl	803007a <__ssrefill_r>
 8030ec4:	2800      	cmp	r0, #0
 8030ec6:	d0d3      	beq.n	8030e70 <__ssvfiscanf_r+0xd48>
 8030ec8:	e785      	b.n	8030dd6 <__ssvfiscanf_r+0xcae>
 8030eca:	0733      	lsls	r3, r6, #28
 8030ecc:	d50d      	bpl.n	8030eea <__ssvfiscanf_r+0xdc2>
 8030ece:	6a3b      	ldr	r3, [r7, #32]
 8030ed0:	681b      	ldr	r3, [r3, #0]
 8030ed2:	7018      	strb	r0, [r3, #0]
 8030ed4:	69fb      	ldr	r3, [r7, #28]
 8030ed6:	3301      	adds	r3, #1
 8030ed8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8030edc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030ee0:	ebaa 0503 	sub.w	r5, sl, r3
 8030ee4:	444d      	add	r5, r9
 8030ee6:	f7ff bbac 	b.w	8030642 <__ssvfiscanf_r+0x51a>
 8030eea:	0775      	lsls	r5, r6, #29
 8030eec:	d503      	bpl.n	8030ef6 <__ssvfiscanf_r+0xdce>
 8030eee:	6a3b      	ldr	r3, [r7, #32]
 8030ef0:	681b      	ldr	r3, [r3, #0]
 8030ef2:	8018      	strh	r0, [r3, #0]
 8030ef4:	e7ee      	b.n	8030ed4 <__ssvfiscanf_r+0xdac>
 8030ef6:	f016 0201 	ands.w	r2, r6, #1
 8030efa:	d001      	beq.n	8030f00 <__ssvfiscanf_r+0xdd8>
 8030efc:	6a3b      	ldr	r3, [r7, #32]
 8030efe:	e78e      	b.n	8030e1e <__ssvfiscanf_r+0xcf6>
 8030f00:	07b1      	lsls	r1, r6, #30
 8030f02:	d5fb      	bpl.n	8030efc <__ssvfiscanf_r+0xdd4>
 8030f04:	4b15      	ldr	r3, [pc, #84]	@ (8030f5c <__ssvfiscanf_r+0xe34>)
 8030f06:	68f9      	ldr	r1, [r7, #12]
 8030f08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030f0a:	4299      	cmp	r1, r3
 8030f0c:	697b      	ldr	r3, [r7, #20]
 8030f0e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030f12:	d106      	bne.n	8030f22 <__ssvfiscanf_r+0xdfa>
 8030f14:	f004 fc34 	bl	8035780 <_strtoull_r>
 8030f18:	6a3b      	ldr	r3, [r7, #32]
 8030f1a:	681b      	ldr	r3, [r3, #0]
 8030f1c:	e9c3 0100 	strd	r0, r1, [r3]
 8030f20:	e7d8      	b.n	8030ed4 <__ssvfiscanf_r+0xdac>
 8030f22:	f004 fb81 	bl	8035628 <_strtoll_r>
 8030f26:	e7f7      	b.n	8030f18 <__ssvfiscanf_r+0xdf0>
 8030f28:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030f2c:	6818      	ldr	r0, [r3, #0]
 8030f2e:	f7fe f8ed 	bl	802f10c <free>
 8030f32:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030f36:	3401      	adds	r4, #1
 8030f38:	601e      	str	r6, [r3, #0]
 8030f3a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8030f3e:	f8db 5000 	ldr.w	r5, [fp]
 8030f42:	42a3      	cmp	r3, r4
 8030f44:	dcf0      	bgt.n	8030f28 <__ssvfiscanf_r+0xe00>
 8030f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030f4a:	61fb      	str	r3, [r7, #28]
 8030f4c:	f7ff ba46 	b.w	80303dc <__ssvfiscanf_r+0x2b4>
 8030f50:	2400      	movs	r4, #0
 8030f52:	4626      	mov	r6, r4
 8030f54:	e7f1      	b.n	8030f3a <__ssvfiscanf_r+0xe12>
 8030f56:	bf00      	nop
 8030f58:	0803c590 	.word	0x0803c590
 8030f5c:	08035179 	.word	0x08035179

08030f60 <_svfprintf_r>:
 8030f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030f64:	b0d3      	sub	sp, #332	@ 0x14c
 8030f66:	468b      	mov	fp, r1
 8030f68:	4691      	mov	r9, r2
 8030f6a:	461e      	mov	r6, r3
 8030f6c:	9003      	str	r0, [sp, #12]
 8030f6e:	f7fd f80d 	bl	802df8c <_localeconv_r>
 8030f72:	6803      	ldr	r3, [r0, #0]
 8030f74:	9316      	str	r3, [sp, #88]	@ 0x58
 8030f76:	4618      	mov	r0, r3
 8030f78:	f7df f992 	bl	80102a0 <strlen>
 8030f7c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030f80:	900d      	str	r0, [sp, #52]	@ 0x34
 8030f82:	061b      	lsls	r3, r3, #24
 8030f84:	d515      	bpl.n	8030fb2 <_svfprintf_r+0x52>
 8030f86:	f8db 3010 	ldr.w	r3, [fp, #16]
 8030f8a:	b993      	cbnz	r3, 8030fb2 <_svfprintf_r+0x52>
 8030f8c:	9803      	ldr	r0, [sp, #12]
 8030f8e:	2140      	movs	r1, #64	@ 0x40
 8030f90:	f7fe f8c4 	bl	802f11c <_malloc_r>
 8030f94:	f8cb 0000 	str.w	r0, [fp]
 8030f98:	f8cb 0010 	str.w	r0, [fp, #16]
 8030f9c:	b930      	cbnz	r0, 8030fac <_svfprintf_r+0x4c>
 8030f9e:	9a03      	ldr	r2, [sp, #12]
 8030fa0:	230c      	movs	r3, #12
 8030fa2:	6013      	str	r3, [r2, #0]
 8030fa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030fa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030faa:	e1f7      	b.n	803139c <_svfprintf_r+0x43c>
 8030fac:	2340      	movs	r3, #64	@ 0x40
 8030fae:	f8cb 3014 	str.w	r3, [fp, #20]
 8030fb2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8031200 <_svfprintf_r+0x2a0>
 8030fb6:	2300      	movs	r3, #0
 8030fb8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8030fbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8030fc0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8030fc4:	ac29      	add	r4, sp, #164	@ 0xa4
 8030fc6:	9426      	str	r4, [sp, #152]	@ 0x98
 8030fc8:	9304      	str	r3, [sp, #16]
 8030fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8030fcc:	9312      	str	r3, [sp, #72]	@ 0x48
 8030fce:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030fd2:	464b      	mov	r3, r9
 8030fd4:	461d      	mov	r5, r3
 8030fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030fda:	b10a      	cbz	r2, 8030fe0 <_svfprintf_r+0x80>
 8030fdc:	2a25      	cmp	r2, #37	@ 0x25
 8030fde:	d1f9      	bne.n	8030fd4 <_svfprintf_r+0x74>
 8030fe0:	ebb5 0709 	subs.w	r7, r5, r9
 8030fe4:	d00d      	beq.n	8031002 <_svfprintf_r+0xa2>
 8030fe6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030fe8:	443b      	add	r3, r7
 8030fea:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030fec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030fee:	3301      	adds	r3, #1
 8030ff0:	2b07      	cmp	r3, #7
 8030ff2:	e9c4 9700 	strd	r9, r7, [r4]
 8030ff6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030ff8:	dc75      	bgt.n	80310e6 <_svfprintf_r+0x186>
 8030ffa:	3408      	adds	r4, #8
 8030ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030ffe:	443b      	add	r3, r7
 8031000:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031002:	782b      	ldrb	r3, [r5, #0]
 8031004:	2b00      	cmp	r3, #0
 8031006:	f001 8148 	beq.w	803229a <_svfprintf_r+0x133a>
 803100a:	2200      	movs	r2, #0
 803100c:	1c6b      	adds	r3, r5, #1
 803100e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031012:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8031016:	920e      	str	r2, [sp, #56]	@ 0x38
 8031018:	4615      	mov	r5, r2
 803101a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803101e:	9206      	str	r2, [sp, #24]
 8031020:	930c      	str	r3, [sp, #48]	@ 0x30
 8031022:	9b06      	ldr	r3, [sp, #24]
 8031024:	3b20      	subs	r3, #32
 8031026:	2b5a      	cmp	r3, #90	@ 0x5a
 8031028:	f200 85a4 	bhi.w	8031b74 <_svfprintf_r+0xc14>
 803102c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8031030:	05a2009d 	.word	0x05a2009d
 8031034:	00a505a2 	.word	0x00a505a2
 8031038:	05a205a2 	.word	0x05a205a2
 803103c:	008505a2 	.word	0x008505a2
 8031040:	05a205a2 	.word	0x05a205a2
 8031044:	00b200a8 	.word	0x00b200a8
 8031048:	00af05a2 	.word	0x00af05a2
 803104c:	05a200b4 	.word	0x05a200b4
 8031050:	00d100ce 	.word	0x00d100ce
 8031054:	00d100d1 	.word	0x00d100d1
 8031058:	00d100d1 	.word	0x00d100d1
 803105c:	00d100d1 	.word	0x00d100d1
 8031060:	00d100d1 	.word	0x00d100d1
 8031064:	05a205a2 	.word	0x05a205a2
 8031068:	05a205a2 	.word	0x05a205a2
 803106c:	05a205a2 	.word	0x05a205a2
 8031070:	014705a2 	.word	0x014705a2
 8031074:	010805a2 	.word	0x010805a2
 8031078:	0147011b 	.word	0x0147011b
 803107c:	01470147 	.word	0x01470147
 8031080:	05a205a2 	.word	0x05a205a2
 8031084:	05a205a2 	.word	0x05a205a2
 8031088:	05a200e2 	.word	0x05a200e2
 803108c:	049d05a2 	.word	0x049d05a2
 8031090:	05a205a2 	.word	0x05a205a2
 8031094:	04e705a2 	.word	0x04e705a2
 8031098:	050805a2 	.word	0x050805a2
 803109c:	05a205a2 	.word	0x05a205a2
 80310a0:	05a2052a 	.word	0x05a2052a
 80310a4:	05a205a2 	.word	0x05a205a2
 80310a8:	05a205a2 	.word	0x05a205a2
 80310ac:	05a205a2 	.word	0x05a205a2
 80310b0:	014705a2 	.word	0x014705a2
 80310b4:	010805a2 	.word	0x010805a2
 80310b8:	0147011d 	.word	0x0147011d
 80310bc:	01470147 	.word	0x01470147
 80310c0:	011d00ee 	.word	0x011d00ee
 80310c4:	05a20102 	.word	0x05a20102
 80310c8:	05a200fb 	.word	0x05a200fb
 80310cc:	049f047e 	.word	0x049f047e
 80310d0:	010204d6 	.word	0x010204d6
 80310d4:	04e705a2 	.word	0x04e705a2
 80310d8:	050a009b 	.word	0x050a009b
 80310dc:	05a205a2 	.word	0x05a205a2
 80310e0:	05a20065 	.word	0x05a20065
 80310e4:	009b      	.short	0x009b
 80310e6:	9803      	ldr	r0, [sp, #12]
 80310e8:	aa26      	add	r2, sp, #152	@ 0x98
 80310ea:	4659      	mov	r1, fp
 80310ec:	f7fe fac0 	bl	802f670 <__ssprint_r>
 80310f0:	2800      	cmp	r0, #0
 80310f2:	f040 814e 	bne.w	8031392 <_svfprintf_r+0x432>
 80310f6:	ac29      	add	r4, sp, #164	@ 0xa4
 80310f8:	e780      	b.n	8030ffc <_svfprintf_r+0x9c>
 80310fa:	4b43      	ldr	r3, [pc, #268]	@ (8031208 <_svfprintf_r+0x2a8>)
 80310fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80310fe:	f015 0320 	ands.w	r3, r5, #32
 8031102:	f000 84c2 	beq.w	8031a8a <_svfprintf_r+0xb2a>
 8031106:	3607      	adds	r6, #7
 8031108:	f026 0307 	bic.w	r3, r6, #7
 803110c:	461a      	mov	r2, r3
 803110e:	685f      	ldr	r7, [r3, #4]
 8031110:	f852 6b08 	ldr.w	r6, [r2], #8
 8031114:	9207      	str	r2, [sp, #28]
 8031116:	07eb      	lsls	r3, r5, #31
 8031118:	d50a      	bpl.n	8031130 <_svfprintf_r+0x1d0>
 803111a:	ea56 0307 	orrs.w	r3, r6, r7
 803111e:	d007      	beq.n	8031130 <_svfprintf_r+0x1d0>
 8031120:	2330      	movs	r3, #48	@ 0x30
 8031122:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8031126:	9b06      	ldr	r3, [sp, #24]
 8031128:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803112c:	f045 0502 	orr.w	r5, r5, #2
 8031130:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031134:	2302      	movs	r3, #2
 8031136:	f000 bc28 	b.w	803198a <_svfprintf_r+0xa2a>
 803113a:	9803      	ldr	r0, [sp, #12]
 803113c:	f7fc ff26 	bl	802df8c <_localeconv_r>
 8031140:	6843      	ldr	r3, [r0, #4]
 8031142:	9317      	str	r3, [sp, #92]	@ 0x5c
 8031144:	4618      	mov	r0, r3
 8031146:	f7df f8ab 	bl	80102a0 <strlen>
 803114a:	9012      	str	r0, [sp, #72]	@ 0x48
 803114c:	9803      	ldr	r0, [sp, #12]
 803114e:	f7fc ff1d 	bl	802df8c <_localeconv_r>
 8031152:	6883      	ldr	r3, [r0, #8]
 8031154:	9309      	str	r3, [sp, #36]	@ 0x24
 8031156:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031158:	b12b      	cbz	r3, 8031166 <_svfprintf_r+0x206>
 803115a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803115c:	b11b      	cbz	r3, 8031166 <_svfprintf_r+0x206>
 803115e:	781b      	ldrb	r3, [r3, #0]
 8031160:	b10b      	cbz	r3, 8031166 <_svfprintf_r+0x206>
 8031162:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8031166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031168:	e757      	b.n	803101a <_svfprintf_r+0xba>
 803116a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803116e:	2b00      	cmp	r3, #0
 8031170:	d1f9      	bne.n	8031166 <_svfprintf_r+0x206>
 8031172:	2320      	movs	r3, #32
 8031174:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031178:	e7f5      	b.n	8031166 <_svfprintf_r+0x206>
 803117a:	f045 0501 	orr.w	r5, r5, #1
 803117e:	e7f2      	b.n	8031166 <_svfprintf_r+0x206>
 8031180:	f856 3b04 	ldr.w	r3, [r6], #4
 8031184:	930e      	str	r3, [sp, #56]	@ 0x38
 8031186:	2b00      	cmp	r3, #0
 8031188:	daed      	bge.n	8031166 <_svfprintf_r+0x206>
 803118a:	425b      	negs	r3, r3
 803118c:	930e      	str	r3, [sp, #56]	@ 0x38
 803118e:	f045 0504 	orr.w	r5, r5, #4
 8031192:	e7e8      	b.n	8031166 <_svfprintf_r+0x206>
 8031194:	232b      	movs	r3, #43	@ 0x2b
 8031196:	e7ed      	b.n	8031174 <_svfprintf_r+0x214>
 8031198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803119a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803119e:	9206      	str	r2, [sp, #24]
 80311a0:	2a2a      	cmp	r2, #42	@ 0x2a
 80311a2:	d10f      	bne.n	80311c4 <_svfprintf_r+0x264>
 80311a4:	f856 2b04 	ldr.w	r2, [r6], #4
 80311a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80311aa:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80311ae:	e7da      	b.n	8031166 <_svfprintf_r+0x206>
 80311b0:	fb01 2808 	mla	r8, r1, r8, r2
 80311b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80311b8:	9206      	str	r2, [sp, #24]
 80311ba:	9a06      	ldr	r2, [sp, #24]
 80311bc:	3a30      	subs	r2, #48	@ 0x30
 80311be:	2a09      	cmp	r2, #9
 80311c0:	d9f6      	bls.n	80311b0 <_svfprintf_r+0x250>
 80311c2:	e72d      	b.n	8031020 <_svfprintf_r+0xc0>
 80311c4:	f04f 0800 	mov.w	r8, #0
 80311c8:	210a      	movs	r1, #10
 80311ca:	e7f6      	b.n	80311ba <_svfprintf_r+0x25a>
 80311cc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80311d0:	e7c9      	b.n	8031166 <_svfprintf_r+0x206>
 80311d2:	2200      	movs	r2, #0
 80311d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80311d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80311d8:	210a      	movs	r1, #10
 80311da:	9a06      	ldr	r2, [sp, #24]
 80311dc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80311de:	3a30      	subs	r2, #48	@ 0x30
 80311e0:	fb01 2200 	mla	r2, r1, r0, r2
 80311e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80311e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80311ea:	9206      	str	r2, [sp, #24]
 80311ec:	3a30      	subs	r2, #48	@ 0x30
 80311ee:	2a09      	cmp	r2, #9
 80311f0:	d9f3      	bls.n	80311da <_svfprintf_r+0x27a>
 80311f2:	e715      	b.n	8031020 <_svfprintf_r+0xc0>
 80311f4:	f045 0508 	orr.w	r5, r5, #8
 80311f8:	e7b5      	b.n	8031166 <_svfprintf_r+0x206>
 80311fa:	bf00      	nop
 80311fc:	f3af 8000 	nop.w
	...
 8031208:	0803c04b 	.word	0x0803c04b
 803120c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803120e:	781b      	ldrb	r3, [r3, #0]
 8031210:	2b68      	cmp	r3, #104	@ 0x68
 8031212:	bf01      	itttt	eq
 8031214:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8031216:	3301      	addeq	r3, #1
 8031218:	930c      	streq	r3, [sp, #48]	@ 0x30
 803121a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803121e:	bf18      	it	ne
 8031220:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8031224:	e79f      	b.n	8031166 <_svfprintf_r+0x206>
 8031226:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031228:	781b      	ldrb	r3, [r3, #0]
 803122a:	2b6c      	cmp	r3, #108	@ 0x6c
 803122c:	d105      	bne.n	803123a <_svfprintf_r+0x2da>
 803122e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8031230:	3301      	adds	r3, #1
 8031232:	930c      	str	r3, [sp, #48]	@ 0x30
 8031234:	f045 0520 	orr.w	r5, r5, #32
 8031238:	e795      	b.n	8031166 <_svfprintf_r+0x206>
 803123a:	f045 0510 	orr.w	r5, r5, #16
 803123e:	e792      	b.n	8031166 <_svfprintf_r+0x206>
 8031240:	4632      	mov	r2, r6
 8031242:	f852 3b04 	ldr.w	r3, [r2], #4
 8031246:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 803124a:	2300      	movs	r3, #0
 803124c:	9207      	str	r2, [sp, #28]
 803124e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031252:	469a      	mov	sl, r3
 8031254:	f04f 0801 	mov.w	r8, #1
 8031258:	9310      	str	r3, [sp, #64]	@ 0x40
 803125a:	461f      	mov	r7, r3
 803125c:	9308      	str	r3, [sp, #32]
 803125e:	461e      	mov	r6, r3
 8031260:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8031264:	e1d2      	b.n	803160c <_svfprintf_r+0x6ac>
 8031266:	f045 0510 	orr.w	r5, r5, #16
 803126a:	06af      	lsls	r7, r5, #26
 803126c:	d512      	bpl.n	8031294 <_svfprintf_r+0x334>
 803126e:	3607      	adds	r6, #7
 8031270:	f026 0307 	bic.w	r3, r6, #7
 8031274:	461a      	mov	r2, r3
 8031276:	685f      	ldr	r7, [r3, #4]
 8031278:	f852 6b08 	ldr.w	r6, [r2], #8
 803127c:	9207      	str	r2, [sp, #28]
 803127e:	2f00      	cmp	r7, #0
 8031280:	da06      	bge.n	8031290 <_svfprintf_r+0x330>
 8031282:	4276      	negs	r6, r6
 8031284:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8031288:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803128c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031290:	2301      	movs	r3, #1
 8031292:	e37d      	b.n	8031990 <_svfprintf_r+0xa30>
 8031294:	4633      	mov	r3, r6
 8031296:	06ee      	lsls	r6, r5, #27
 8031298:	f853 7b04 	ldr.w	r7, [r3], #4
 803129c:	9307      	str	r3, [sp, #28]
 803129e:	d502      	bpl.n	80312a6 <_svfprintf_r+0x346>
 80312a0:	463e      	mov	r6, r7
 80312a2:	17ff      	asrs	r7, r7, #31
 80312a4:	e7eb      	b.n	803127e <_svfprintf_r+0x31e>
 80312a6:	0668      	lsls	r0, r5, #25
 80312a8:	d503      	bpl.n	80312b2 <_svfprintf_r+0x352>
 80312aa:	b23e      	sxth	r6, r7
 80312ac:	f347 37c0 	sbfx	r7, r7, #15, #1
 80312b0:	e7e5      	b.n	803127e <_svfprintf_r+0x31e>
 80312b2:	05a9      	lsls	r1, r5, #22
 80312b4:	d5f4      	bpl.n	80312a0 <_svfprintf_r+0x340>
 80312b6:	b27e      	sxtb	r6, r7
 80312b8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80312bc:	e7df      	b.n	803127e <_svfprintf_r+0x31e>
 80312be:	3607      	adds	r6, #7
 80312c0:	f026 0307 	bic.w	r3, r6, #7
 80312c4:	ecb3 7b02 	vldmia	r3!, {d7}
 80312c8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80312cc:	9307      	str	r3, [sp, #28]
 80312ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80312d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80312d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80312d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80312d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80312da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80312de:	4b81      	ldr	r3, [pc, #516]	@ (80314e4 <_svfprintf_r+0x584>)
 80312e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80312e4:	f7df fc3a 	bl	8010b5c <__aeabi_dcmpun>
 80312e8:	bb10      	cbnz	r0, 8031330 <_svfprintf_r+0x3d0>
 80312ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80312ee:	4b7d      	ldr	r3, [pc, #500]	@ (80314e4 <_svfprintf_r+0x584>)
 80312f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80312f4:	f7df fc14 	bl	8010b20 <__aeabi_dcmple>
 80312f8:	b9d0      	cbnz	r0, 8031330 <_svfprintf_r+0x3d0>
 80312fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80312fe:	2200      	movs	r2, #0
 8031300:	2300      	movs	r3, #0
 8031302:	f7df fc03 	bl	8010b0c <__aeabi_dcmplt>
 8031306:	b110      	cbz	r0, 803130e <_svfprintf_r+0x3ae>
 8031308:	232d      	movs	r3, #45	@ 0x2d
 803130a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803130e:	4a76      	ldr	r2, [pc, #472]	@ (80314e8 <_svfprintf_r+0x588>)
 8031310:	4b76      	ldr	r3, [pc, #472]	@ (80314ec <_svfprintf_r+0x58c>)
 8031312:	9906      	ldr	r1, [sp, #24]
 8031314:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8031318:	2947      	cmp	r1, #71	@ 0x47
 803131a:	bfd4      	ite	le
 803131c:	4691      	movle	r9, r2
 803131e:	4699      	movgt	r9, r3
 8031320:	f04f 0a00 	mov.w	sl, #0
 8031324:	f04f 0803 	mov.w	r8, #3
 8031328:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 803132c:	f000 bfec 	b.w	8032308 <_svfprintf_r+0x13a8>
 8031330:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8031334:	4610      	mov	r0, r2
 8031336:	4619      	mov	r1, r3
 8031338:	f7df fc10 	bl	8010b5c <__aeabi_dcmpun>
 803133c:	4682      	mov	sl, r0
 803133e:	b140      	cbz	r0, 8031352 <_svfprintf_r+0x3f2>
 8031340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8031342:	4a6b      	ldr	r2, [pc, #428]	@ (80314f0 <_svfprintf_r+0x590>)
 8031344:	2b00      	cmp	r3, #0
 8031346:	bfbc      	itt	lt
 8031348:	232d      	movlt	r3, #45	@ 0x2d
 803134a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 803134e:	4b69      	ldr	r3, [pc, #420]	@ (80314f4 <_svfprintf_r+0x594>)
 8031350:	e7df      	b.n	8031312 <_svfprintf_r+0x3b2>
 8031352:	9b06      	ldr	r3, [sp, #24]
 8031354:	2b61      	cmp	r3, #97	@ 0x61
 8031356:	d025      	beq.n	80313a4 <_svfprintf_r+0x444>
 8031358:	2b41      	cmp	r3, #65	@ 0x41
 803135a:	d125      	bne.n	80313a8 <_svfprintf_r+0x448>
 803135c:	2358      	movs	r3, #88	@ 0x58
 803135e:	2230      	movs	r2, #48	@ 0x30
 8031360:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8031364:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8031368:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 803136c:	f045 0502 	orr.w	r5, r5, #2
 8031370:	f340 80a5 	ble.w	80314be <_svfprintf_r+0x55e>
 8031374:	9803      	ldr	r0, [sp, #12]
 8031376:	f108 0101 	add.w	r1, r8, #1
 803137a:	f7fd fecf 	bl	802f11c <_malloc_r>
 803137e:	4681      	mov	r9, r0
 8031380:	2800      	cmp	r0, #0
 8031382:	f040 80a1 	bne.w	80314c8 <_svfprintf_r+0x568>
 8031386:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803138a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803138e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8031392:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8031396:	065b      	lsls	r3, r3, #25
 8031398:	f53f ae04 	bmi.w	8030fa4 <_svfprintf_r+0x44>
 803139c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803139e:	b053      	add	sp, #332	@ 0x14c
 80313a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80313a4:	2378      	movs	r3, #120	@ 0x78
 80313a6:	e7da      	b.n	803135e <_svfprintf_r+0x3fe>
 80313a8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80313ac:	f000 808e 	beq.w	80314cc <_svfprintf_r+0x56c>
 80313b0:	9b06      	ldr	r3, [sp, #24]
 80313b2:	f023 0320 	bic.w	r3, r3, #32
 80313b6:	2b47      	cmp	r3, #71	@ 0x47
 80313b8:	d105      	bne.n	80313c6 <_svfprintf_r+0x466>
 80313ba:	f1b8 0f00 	cmp.w	r8, #0
 80313be:	d102      	bne.n	80313c6 <_svfprintf_r+0x466>
 80313c0:	46c2      	mov	sl, r8
 80313c2:	f04f 0801 	mov.w	r8, #1
 80313c6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80313ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80313cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80313ce:	2b00      	cmp	r3, #0
 80313d0:	da7f      	bge.n	80314d2 <_svfprintf_r+0x572>
 80313d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80313d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80313d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80313d8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80313dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80313de:	232d      	movs	r3, #45	@ 0x2d
 80313e0:	931c      	str	r3, [sp, #112]	@ 0x70
 80313e2:	9b06      	ldr	r3, [sp, #24]
 80313e4:	f023 0320 	bic.w	r3, r3, #32
 80313e8:	2b41      	cmp	r3, #65	@ 0x41
 80313ea:	9308      	str	r3, [sp, #32]
 80313ec:	f040 81e6 	bne.w	80317bc <_svfprintf_r+0x85c>
 80313f0:	a820      	add	r0, sp, #128	@ 0x80
 80313f2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80313f6:	f7fc fe9b 	bl	802e130 <frexp>
 80313fa:	2200      	movs	r2, #0
 80313fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8031400:	ec51 0b10 	vmov	r0, r1, d0
 8031404:	f7df f910 	bl	8010628 <__aeabi_dmul>
 8031408:	4602      	mov	r2, r0
 803140a:	460b      	mov	r3, r1
 803140c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031410:	2200      	movs	r2, #0
 8031412:	2300      	movs	r3, #0
 8031414:	f7df fb70 	bl	8010af8 <__aeabi_dcmpeq>
 8031418:	b108      	cbz	r0, 803141e <_svfprintf_r+0x4be>
 803141a:	2301      	movs	r3, #1
 803141c:	9320      	str	r3, [sp, #128]	@ 0x80
 803141e:	4a36      	ldr	r2, [pc, #216]	@ (80314f8 <_svfprintf_r+0x598>)
 8031420:	4b36      	ldr	r3, [pc, #216]	@ (80314fc <_svfprintf_r+0x59c>)
 8031422:	9906      	ldr	r1, [sp, #24]
 8031424:	2961      	cmp	r1, #97	@ 0x61
 8031426:	bf18      	it	ne
 8031428:	461a      	movne	r2, r3
 803142a:	9210      	str	r2, [sp, #64]	@ 0x40
 803142c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8031430:	464e      	mov	r6, r9
 8031432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031436:	4b32      	ldr	r3, [pc, #200]	@ (8031500 <_svfprintf_r+0x5a0>)
 8031438:	2200      	movs	r2, #0
 803143a:	f7df f8f5 	bl	8010628 <__aeabi_dmul>
 803143e:	4602      	mov	r2, r0
 8031440:	460b      	mov	r3, r1
 8031442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031446:	f7df fb9f 	bl	8010b88 <__aeabi_d2iz>
 803144a:	9013      	str	r0, [sp, #76]	@ 0x4c
 803144c:	f7df f882 	bl	8010554 <__aeabi_i2d>
 8031450:	4602      	mov	r2, r0
 8031452:	460b      	mov	r3, r1
 8031454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031458:	f7de ff2e 	bl	80102b8 <__aeabi_dsub>
 803145c:	4602      	mov	r2, r0
 803145e:	460b      	mov	r3, r1
 8031460:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031464:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8031466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031468:	5c9b      	ldrb	r3, [r3, r2]
 803146a:	f806 3b01 	strb.w	r3, [r6], #1
 803146e:	1c7a      	adds	r2, r7, #1
 8031470:	d006      	beq.n	8031480 <_svfprintf_r+0x520>
 8031472:	1e7b      	subs	r3, r7, #1
 8031474:	931d      	str	r3, [sp, #116]	@ 0x74
 8031476:	2200      	movs	r2, #0
 8031478:	2300      	movs	r3, #0
 803147a:	f7df fb3d 	bl	8010af8 <__aeabi_dcmpeq>
 803147e:	b370      	cbz	r0, 80314de <_svfprintf_r+0x57e>
 8031480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031484:	4b1f      	ldr	r3, [pc, #124]	@ (8031504 <_svfprintf_r+0x5a4>)
 8031486:	2200      	movs	r2, #0
 8031488:	f7df fb5e 	bl	8010b48 <__aeabi_dcmpgt>
 803148c:	2800      	cmp	r0, #0
 803148e:	d13b      	bne.n	8031508 <_svfprintf_r+0x5a8>
 8031490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031494:	4b1b      	ldr	r3, [pc, #108]	@ (8031504 <_svfprintf_r+0x5a4>)
 8031496:	2200      	movs	r2, #0
 8031498:	f7df fb2e 	bl	8010af8 <__aeabi_dcmpeq>
 803149c:	b110      	cbz	r0, 80314a4 <_svfprintf_r+0x544>
 803149e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80314a0:	07db      	lsls	r3, r3, #31
 80314a2:	d431      	bmi.n	8031508 <_svfprintf_r+0x5a8>
 80314a4:	4633      	mov	r3, r6
 80314a6:	19f1      	adds	r1, r6, r7
 80314a8:	2030      	movs	r0, #48	@ 0x30
 80314aa:	1aca      	subs	r2, r1, r3
 80314ac:	2a00      	cmp	r2, #0
 80314ae:	f280 8182 	bge.w	80317b6 <_svfprintf_r+0x856>
 80314b2:	1c7b      	adds	r3, r7, #1
 80314b4:	3701      	adds	r7, #1
 80314b6:	bfb8      	it	lt
 80314b8:	2300      	movlt	r3, #0
 80314ba:	441e      	add	r6, r3
 80314bc:	e038      	b.n	8031530 <_svfprintf_r+0x5d0>
 80314be:	f04f 0a00 	mov.w	sl, #0
 80314c2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80314c6:	e77e      	b.n	80313c6 <_svfprintf_r+0x466>
 80314c8:	4682      	mov	sl, r0
 80314ca:	e77c      	b.n	80313c6 <_svfprintf_r+0x466>
 80314cc:	f04f 0806 	mov.w	r8, #6
 80314d0:	e779      	b.n	80313c6 <_svfprintf_r+0x466>
 80314d2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80314d6:	2300      	movs	r3, #0
 80314d8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80314dc:	e780      	b.n	80313e0 <_svfprintf_r+0x480>
 80314de:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80314e0:	e7a7      	b.n	8031432 <_svfprintf_r+0x4d2>
 80314e2:	bf00      	nop
 80314e4:	7fefffff 	.word	0x7fefffff
 80314e8:	0803c03b 	.word	0x0803c03b
 80314ec:	0803c03f 	.word	0x0803c03f
 80314f0:	0803c043 	.word	0x0803c043
 80314f4:	0803c047 	.word	0x0803c047
 80314f8:	0803c04b 	.word	0x0803c04b
 80314fc:	0803c05c 	.word	0x0803c05c
 8031500:	40300000 	.word	0x40300000
 8031504:	3fe00000 	.word	0x3fe00000
 8031508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803150a:	9624      	str	r6, [sp, #144]	@ 0x90
 803150c:	7bd9      	ldrb	r1, [r3, #15]
 803150e:	2030      	movs	r0, #48	@ 0x30
 8031510:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8031512:	1e53      	subs	r3, r2, #1
 8031514:	9324      	str	r3, [sp, #144]	@ 0x90
 8031516:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803151a:	428b      	cmp	r3, r1
 803151c:	f000 8148 	beq.w	80317b0 <_svfprintf_r+0x850>
 8031520:	2b39      	cmp	r3, #57	@ 0x39
 8031522:	bf0b      	itete	eq
 8031524:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8031526:	3301      	addne	r3, #1
 8031528:	7a9b      	ldrbeq	r3, [r3, #10]
 803152a:	b2db      	uxtbne	r3, r3
 803152c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8031530:	eba6 0309 	sub.w	r3, r6, r9
 8031534:	9304      	str	r3, [sp, #16]
 8031536:	9b08      	ldr	r3, [sp, #32]
 8031538:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803153a:	2b47      	cmp	r3, #71	@ 0x47
 803153c:	f040 8187 	bne.w	803184e <_svfprintf_r+0x8ee>
 8031540:	1cf1      	adds	r1, r6, #3
 8031542:	db02      	blt.n	803154a <_svfprintf_r+0x5ea>
 8031544:	4546      	cmp	r6, r8
 8031546:	f340 81a5 	ble.w	8031894 <_svfprintf_r+0x934>
 803154a:	9b06      	ldr	r3, [sp, #24]
 803154c:	3b02      	subs	r3, #2
 803154e:	9306      	str	r3, [sp, #24]
 8031550:	9906      	ldr	r1, [sp, #24]
 8031552:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8031556:	f021 0120 	bic.w	r1, r1, #32
 803155a:	2941      	cmp	r1, #65	@ 0x41
 803155c:	bf08      	it	eq
 803155e:	320f      	addeq	r2, #15
 8031560:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8031564:	bf06      	itte	eq
 8031566:	b2d2      	uxtbeq	r2, r2
 8031568:	2101      	moveq	r1, #1
 803156a:	2100      	movne	r1, #0
 803156c:	2b00      	cmp	r3, #0
 803156e:	9320      	str	r3, [sp, #128]	@ 0x80
 8031570:	bfb8      	it	lt
 8031572:	f1c6 0301 	rsblt	r3, r6, #1
 8031576:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803157a:	bfb4      	ite	lt
 803157c:	222d      	movlt	r2, #45	@ 0x2d
 803157e:	222b      	movge	r2, #43	@ 0x2b
 8031580:	2b09      	cmp	r3, #9
 8031582:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8031586:	f340 8178 	ble.w	803187a <_svfprintf_r+0x91a>
 803158a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803158e:	270a      	movs	r7, #10
 8031590:	4602      	mov	r2, r0
 8031592:	fbb3 f6f7 	udiv	r6, r3, r7
 8031596:	fb07 3116 	mls	r1, r7, r6, r3
 803159a:	3130      	adds	r1, #48	@ 0x30
 803159c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80315a0:	4619      	mov	r1, r3
 80315a2:	2963      	cmp	r1, #99	@ 0x63
 80315a4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80315a8:	4633      	mov	r3, r6
 80315aa:	dcf1      	bgt.n	8031590 <_svfprintf_r+0x630>
 80315ac:	3330      	adds	r3, #48	@ 0x30
 80315ae:	1e91      	subs	r1, r2, #2
 80315b0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80315b4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80315b8:	460b      	mov	r3, r1
 80315ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80315be:	4283      	cmp	r3, r0
 80315c0:	f0c0 8156 	bcc.w	8031870 <_svfprintf_r+0x910>
 80315c4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80315c8:	1a9b      	subs	r3, r3, r2
 80315ca:	4281      	cmp	r1, r0
 80315cc:	bf88      	it	hi
 80315ce:	2300      	movhi	r3, #0
 80315d0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80315d4:	441a      	add	r2, r3
 80315d6:	ab22      	add	r3, sp, #136	@ 0x88
 80315d8:	1ad3      	subs	r3, r2, r3
 80315da:	9a04      	ldr	r2, [sp, #16]
 80315dc:	9318      	str	r3, [sp, #96]	@ 0x60
 80315de:	2a01      	cmp	r2, #1
 80315e0:	eb03 0802 	add.w	r8, r3, r2
 80315e4:	dc01      	bgt.n	80315ea <_svfprintf_r+0x68a>
 80315e6:	07ea      	lsls	r2, r5, #31
 80315e8:	d501      	bpl.n	80315ee <_svfprintf_r+0x68e>
 80315ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80315ec:	4498      	add	r8, r3
 80315ee:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80315f2:	2700      	movs	r7, #0
 80315f4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80315f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80315fa:	9708      	str	r7, [sp, #32]
 80315fc:	463e      	mov	r6, r7
 80315fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8031600:	2b00      	cmp	r3, #0
 8031602:	f040 818f 	bne.w	8031924 <_svfprintf_r+0x9c4>
 8031606:	2300      	movs	r3, #0
 8031608:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803160a:	9310      	str	r3, [sp, #64]	@ 0x40
 803160c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803160e:	4543      	cmp	r3, r8
 8031610:	bfb8      	it	lt
 8031612:	4643      	movlt	r3, r8
 8031614:	9311      	str	r3, [sp, #68]	@ 0x44
 8031616:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803161a:	b113      	cbz	r3, 8031622 <_svfprintf_r+0x6c2>
 803161c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803161e:	3301      	adds	r3, #1
 8031620:	9311      	str	r3, [sp, #68]	@ 0x44
 8031622:	f015 0302 	ands.w	r3, r5, #2
 8031626:	931c      	str	r3, [sp, #112]	@ 0x70
 8031628:	bf1e      	ittt	ne
 803162a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803162c:	3302      	addne	r3, #2
 803162e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8031630:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8031634:	931d      	str	r3, [sp, #116]	@ 0x74
 8031636:	d122      	bne.n	803167e <_svfprintf_r+0x71e>
 8031638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803163a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803163c:	1a9b      	subs	r3, r3, r2
 803163e:	2b00      	cmp	r3, #0
 8031640:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031642:	dd1c      	ble.n	803167e <_svfprintf_r+0x71e>
 8031644:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031646:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803164a:	2810      	cmp	r0, #16
 803164c:	489e      	ldr	r0, [pc, #632]	@ (80318c8 <_svfprintf_r+0x968>)
 803164e:	6020      	str	r0, [r4, #0]
 8031650:	f102 0201 	add.w	r2, r2, #1
 8031654:	f104 0108 	add.w	r1, r4, #8
 8031658:	f300 8298 	bgt.w	8031b8c <_svfprintf_r+0xc2c>
 803165c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803165e:	6060      	str	r0, [r4, #4]
 8031660:	4403      	add	r3, r0
 8031662:	2a07      	cmp	r2, #7
 8031664:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031668:	f340 82a5 	ble.w	8031bb6 <_svfprintf_r+0xc56>
 803166c:	9803      	ldr	r0, [sp, #12]
 803166e:	aa26      	add	r2, sp, #152	@ 0x98
 8031670:	4659      	mov	r1, fp
 8031672:	f7fd fffd 	bl	802f670 <__ssprint_r>
 8031676:	2800      	cmp	r0, #0
 8031678:	f040 85ed 	bne.w	8032256 <_svfprintf_r+0x12f6>
 803167c:	ac29      	add	r4, sp, #164	@ 0xa4
 803167e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8031682:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031684:	b16a      	cbz	r2, 80316a2 <_svfprintf_r+0x742>
 8031686:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 803168a:	6022      	str	r2, [r4, #0]
 803168c:	2201      	movs	r2, #1
 803168e:	4413      	add	r3, r2
 8031690:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031692:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031694:	6062      	str	r2, [r4, #4]
 8031696:	4413      	add	r3, r2
 8031698:	2b07      	cmp	r3, #7
 803169a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803169c:	f300 828d 	bgt.w	8031bba <_svfprintf_r+0xc5a>
 80316a0:	3408      	adds	r4, #8
 80316a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80316a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80316a6:	b162      	cbz	r2, 80316c2 <_svfprintf_r+0x762>
 80316a8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80316aa:	6022      	str	r2, [r4, #0]
 80316ac:	2202      	movs	r2, #2
 80316ae:	4413      	add	r3, r2
 80316b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80316b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80316b4:	6062      	str	r2, [r4, #4]
 80316b6:	3301      	adds	r3, #1
 80316b8:	2b07      	cmp	r3, #7
 80316ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 80316bc:	f300 8287 	bgt.w	8031bce <_svfprintf_r+0xc6e>
 80316c0:	3408      	adds	r4, #8
 80316c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80316c4:	2b80      	cmp	r3, #128	@ 0x80
 80316c6:	d122      	bne.n	803170e <_svfprintf_r+0x7ae>
 80316c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80316ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80316cc:	1a9b      	subs	r3, r3, r2
 80316ce:	2b00      	cmp	r3, #0
 80316d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80316d2:	dd1c      	ble.n	803170e <_svfprintf_r+0x7ae>
 80316d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80316d6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80316da:	2810      	cmp	r0, #16
 80316dc:	487b      	ldr	r0, [pc, #492]	@ (80318cc <_svfprintf_r+0x96c>)
 80316de:	6020      	str	r0, [r4, #0]
 80316e0:	f102 0201 	add.w	r2, r2, #1
 80316e4:	f104 0108 	add.w	r1, r4, #8
 80316e8:	f300 827b 	bgt.w	8031be2 <_svfprintf_r+0xc82>
 80316ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80316ee:	6060      	str	r0, [r4, #4]
 80316f0:	4403      	add	r3, r0
 80316f2:	2a07      	cmp	r2, #7
 80316f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80316f8:	f340 8288 	ble.w	8031c0c <_svfprintf_r+0xcac>
 80316fc:	9803      	ldr	r0, [sp, #12]
 80316fe:	aa26      	add	r2, sp, #152	@ 0x98
 8031700:	4659      	mov	r1, fp
 8031702:	f7fd ffb5 	bl	802f670 <__ssprint_r>
 8031706:	2800      	cmp	r0, #0
 8031708:	f040 85a5 	bne.w	8032256 <_svfprintf_r+0x12f6>
 803170c:	ac29      	add	r4, sp, #164	@ 0xa4
 803170e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031710:	eba3 0308 	sub.w	r3, r3, r8
 8031714:	2b00      	cmp	r3, #0
 8031716:	9310      	str	r3, [sp, #64]	@ 0x40
 8031718:	dd1c      	ble.n	8031754 <_svfprintf_r+0x7f4>
 803171a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803171c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031720:	2810      	cmp	r0, #16
 8031722:	486a      	ldr	r0, [pc, #424]	@ (80318cc <_svfprintf_r+0x96c>)
 8031724:	6020      	str	r0, [r4, #0]
 8031726:	f102 0201 	add.w	r2, r2, #1
 803172a:	f104 0108 	add.w	r1, r4, #8
 803172e:	f300 826f 	bgt.w	8031c10 <_svfprintf_r+0xcb0>
 8031732:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031734:	6060      	str	r0, [r4, #4]
 8031736:	4403      	add	r3, r0
 8031738:	2a07      	cmp	r2, #7
 803173a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803173e:	f340 827c 	ble.w	8031c3a <_svfprintf_r+0xcda>
 8031742:	9803      	ldr	r0, [sp, #12]
 8031744:	aa26      	add	r2, sp, #152	@ 0x98
 8031746:	4659      	mov	r1, fp
 8031748:	f7fd ff92 	bl	802f670 <__ssprint_r>
 803174c:	2800      	cmp	r0, #0
 803174e:	f040 8582 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031752:	ac29      	add	r4, sp, #164	@ 0xa4
 8031754:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031756:	9310      	str	r3, [sp, #64]	@ 0x40
 8031758:	05ea      	lsls	r2, r5, #23
 803175a:	f100 8275 	bmi.w	8031c48 <_svfprintf_r+0xce8>
 803175e:	4443      	add	r3, r8
 8031760:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031762:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031764:	3301      	adds	r3, #1
 8031766:	2b07      	cmp	r3, #7
 8031768:	e9c4 9800 	strd	r9, r8, [r4]
 803176c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803176e:	f300 82b1 	bgt.w	8031cd4 <_svfprintf_r+0xd74>
 8031772:	3408      	adds	r4, #8
 8031774:	076a      	lsls	r2, r5, #29
 8031776:	f100 8550 	bmi.w	803221a <_svfprintf_r+0x12ba>
 803177a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803177e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8031780:	428a      	cmp	r2, r1
 8031782:	bfac      	ite	ge
 8031784:	189b      	addge	r3, r3, r2
 8031786:	185b      	addlt	r3, r3, r1
 8031788:	930f      	str	r3, [sp, #60]	@ 0x3c
 803178a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803178c:	b13b      	cbz	r3, 803179e <_svfprintf_r+0x83e>
 803178e:	9803      	ldr	r0, [sp, #12]
 8031790:	aa26      	add	r2, sp, #152	@ 0x98
 8031792:	4659      	mov	r1, fp
 8031794:	f7fd ff6c 	bl	802f670 <__ssprint_r>
 8031798:	2800      	cmp	r0, #0
 803179a:	f040 855c 	bne.w	8032256 <_svfprintf_r+0x12f6>
 803179e:	2300      	movs	r3, #0
 80317a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80317a2:	f1ba 0f00 	cmp.w	sl, #0
 80317a6:	f040 8572 	bne.w	803228e <_svfprintf_r+0x132e>
 80317aa:	9e07      	ldr	r6, [sp, #28]
 80317ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80317ae:	e0c6      	b.n	803193e <_svfprintf_r+0x9de>
 80317b0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80317b4:	e6ac      	b.n	8031510 <_svfprintf_r+0x5b0>
 80317b6:	f803 0b01 	strb.w	r0, [r3], #1
 80317ba:	e676      	b.n	80314aa <_svfprintf_r+0x54a>
 80317bc:	9b08      	ldr	r3, [sp, #32]
 80317be:	2b46      	cmp	r3, #70	@ 0x46
 80317c0:	d005      	beq.n	80317ce <_svfprintf_r+0x86e>
 80317c2:	2b45      	cmp	r3, #69	@ 0x45
 80317c4:	d11a      	bne.n	80317fc <_svfprintf_r+0x89c>
 80317c6:	f108 0601 	add.w	r6, r8, #1
 80317ca:	2102      	movs	r1, #2
 80317cc:	e001      	b.n	80317d2 <_svfprintf_r+0x872>
 80317ce:	4646      	mov	r6, r8
 80317d0:	2103      	movs	r1, #3
 80317d2:	ab24      	add	r3, sp, #144	@ 0x90
 80317d4:	9301      	str	r3, [sp, #4]
 80317d6:	ab21      	add	r3, sp, #132	@ 0x84
 80317d8:	9300      	str	r3, [sp, #0]
 80317da:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80317de:	ab20      	add	r3, sp, #128	@ 0x80
 80317e0:	9803      	ldr	r0, [sp, #12]
 80317e2:	4632      	mov	r2, r6
 80317e4:	f7fc fd80 	bl	802e2e8 <_dtoa_r>
 80317e8:	9b08      	ldr	r3, [sp, #32]
 80317ea:	2b47      	cmp	r3, #71	@ 0x47
 80317ec:	4681      	mov	r9, r0
 80317ee:	d119      	bne.n	8031824 <_svfprintf_r+0x8c4>
 80317f0:	07e8      	lsls	r0, r5, #31
 80317f2:	d405      	bmi.n	8031800 <_svfprintf_r+0x8a0>
 80317f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80317f6:	eba3 0309 	sub.w	r3, r3, r9
 80317fa:	e69b      	b.n	8031534 <_svfprintf_r+0x5d4>
 80317fc:	4646      	mov	r6, r8
 80317fe:	e7e4      	b.n	80317ca <_svfprintf_r+0x86a>
 8031800:	eb09 0706 	add.w	r7, r9, r6
 8031804:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031808:	2200      	movs	r2, #0
 803180a:	2300      	movs	r3, #0
 803180c:	f7df f974 	bl	8010af8 <__aeabi_dcmpeq>
 8031810:	b100      	cbz	r0, 8031814 <_svfprintf_r+0x8b4>
 8031812:	9724      	str	r7, [sp, #144]	@ 0x90
 8031814:	2230      	movs	r2, #48	@ 0x30
 8031816:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031818:	429f      	cmp	r7, r3
 803181a:	d9eb      	bls.n	80317f4 <_svfprintf_r+0x894>
 803181c:	1c59      	adds	r1, r3, #1
 803181e:	9124      	str	r1, [sp, #144]	@ 0x90
 8031820:	701a      	strb	r2, [r3, #0]
 8031822:	e7f8      	b.n	8031816 <_svfprintf_r+0x8b6>
 8031824:	9b08      	ldr	r3, [sp, #32]
 8031826:	2b46      	cmp	r3, #70	@ 0x46
 8031828:	eb00 0706 	add.w	r7, r0, r6
 803182c:	d1ea      	bne.n	8031804 <_svfprintf_r+0x8a4>
 803182e:	7803      	ldrb	r3, [r0, #0]
 8031830:	2b30      	cmp	r3, #48	@ 0x30
 8031832:	d109      	bne.n	8031848 <_svfprintf_r+0x8e8>
 8031834:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031838:	2200      	movs	r2, #0
 803183a:	2300      	movs	r3, #0
 803183c:	f7df f95c 	bl	8010af8 <__aeabi_dcmpeq>
 8031840:	b910      	cbnz	r0, 8031848 <_svfprintf_r+0x8e8>
 8031842:	f1c6 0601 	rsb	r6, r6, #1
 8031846:	9620      	str	r6, [sp, #128]	@ 0x80
 8031848:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803184a:	441f      	add	r7, r3
 803184c:	e7da      	b.n	8031804 <_svfprintf_r+0x8a4>
 803184e:	9b08      	ldr	r3, [sp, #32]
 8031850:	2b46      	cmp	r3, #70	@ 0x46
 8031852:	f47f ae7d 	bne.w	8031550 <_svfprintf_r+0x5f0>
 8031856:	f005 0301 	and.w	r3, r5, #1
 803185a:	2e00      	cmp	r6, #0
 803185c:	ea43 0308 	orr.w	r3, r3, r8
 8031860:	dd25      	ble.n	80318ae <_svfprintf_r+0x94e>
 8031862:	b37b      	cbz	r3, 80318c4 <_svfprintf_r+0x964>
 8031864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031866:	18f3      	adds	r3, r6, r3
 8031868:	4498      	add	r8, r3
 803186a:	2366      	movs	r3, #102	@ 0x66
 803186c:	9306      	str	r3, [sp, #24]
 803186e:	e033      	b.n	80318d8 <_svfprintf_r+0x978>
 8031870:	f813 7b01 	ldrb.w	r7, [r3], #1
 8031874:	f806 7f01 	strb.w	r7, [r6, #1]!
 8031878:	e6a1      	b.n	80315be <_svfprintf_r+0x65e>
 803187a:	b941      	cbnz	r1, 803188e <_svfprintf_r+0x92e>
 803187c:	2230      	movs	r2, #48	@ 0x30
 803187e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8031882:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8031886:	3330      	adds	r3, #48	@ 0x30
 8031888:	f802 3b01 	strb.w	r3, [r2], #1
 803188c:	e6a3      	b.n	80315d6 <_svfprintf_r+0x676>
 803188e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8031892:	e7f8      	b.n	8031886 <_svfprintf_r+0x926>
 8031894:	9b04      	ldr	r3, [sp, #16]
 8031896:	429e      	cmp	r6, r3
 8031898:	da0d      	bge.n	80318b6 <_svfprintf_r+0x956>
 803189a:	9b04      	ldr	r3, [sp, #16]
 803189c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803189e:	2e00      	cmp	r6, #0
 80318a0:	eb03 0802 	add.w	r8, r3, r2
 80318a4:	dc0c      	bgt.n	80318c0 <_svfprintf_r+0x960>
 80318a6:	f1c6 0301 	rsb	r3, r6, #1
 80318aa:	4498      	add	r8, r3
 80318ac:	e008      	b.n	80318c0 <_svfprintf_r+0x960>
 80318ae:	b17b      	cbz	r3, 80318d0 <_svfprintf_r+0x970>
 80318b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80318b2:	3301      	adds	r3, #1
 80318b4:	e7d8      	b.n	8031868 <_svfprintf_r+0x908>
 80318b6:	07eb      	lsls	r3, r5, #31
 80318b8:	d521      	bpl.n	80318fe <_svfprintf_r+0x99e>
 80318ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80318bc:	eb06 0803 	add.w	r8, r6, r3
 80318c0:	2367      	movs	r3, #103	@ 0x67
 80318c2:	e7d3      	b.n	803186c <_svfprintf_r+0x90c>
 80318c4:	46b0      	mov	r8, r6
 80318c6:	e7d0      	b.n	803186a <_svfprintf_r+0x90a>
 80318c8:	0803c5c2 	.word	0x0803c5c2
 80318cc:	0803c5b2 	.word	0x0803c5b2
 80318d0:	2366      	movs	r3, #102	@ 0x66
 80318d2:	9306      	str	r3, [sp, #24]
 80318d4:	f04f 0801 	mov.w	r8, #1
 80318d8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80318dc:	9308      	str	r3, [sp, #32]
 80318de:	d01f      	beq.n	8031920 <_svfprintf_r+0x9c0>
 80318e0:	2700      	movs	r7, #0
 80318e2:	2e00      	cmp	r6, #0
 80318e4:	9708      	str	r7, [sp, #32]
 80318e6:	f77f ae8a 	ble.w	80315fe <_svfprintf_r+0x69e>
 80318ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80318ec:	781b      	ldrb	r3, [r3, #0]
 80318ee:	2bff      	cmp	r3, #255	@ 0xff
 80318f0:	d107      	bne.n	8031902 <_svfprintf_r+0x9a2>
 80318f2:	9b08      	ldr	r3, [sp, #32]
 80318f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80318f6:	443b      	add	r3, r7
 80318f8:	fb02 8803 	mla	r8, r2, r3, r8
 80318fc:	e67f      	b.n	80315fe <_svfprintf_r+0x69e>
 80318fe:	46b0      	mov	r8, r6
 8031900:	e7de      	b.n	80318c0 <_svfprintf_r+0x960>
 8031902:	42b3      	cmp	r3, r6
 8031904:	daf5      	bge.n	80318f2 <_svfprintf_r+0x992>
 8031906:	1af6      	subs	r6, r6, r3
 8031908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803190a:	785b      	ldrb	r3, [r3, #1]
 803190c:	b133      	cbz	r3, 803191c <_svfprintf_r+0x9bc>
 803190e:	9b08      	ldr	r3, [sp, #32]
 8031910:	3301      	adds	r3, #1
 8031912:	9308      	str	r3, [sp, #32]
 8031914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031916:	3301      	adds	r3, #1
 8031918:	9309      	str	r3, [sp, #36]	@ 0x24
 803191a:	e7e6      	b.n	80318ea <_svfprintf_r+0x98a>
 803191c:	3701      	adds	r7, #1
 803191e:	e7e4      	b.n	80318ea <_svfprintf_r+0x98a>
 8031920:	9f08      	ldr	r7, [sp, #32]
 8031922:	e66c      	b.n	80315fe <_svfprintf_r+0x69e>
 8031924:	232d      	movs	r3, #45	@ 0x2d
 8031926:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803192a:	e66c      	b.n	8031606 <_svfprintf_r+0x6a6>
 803192c:	06af      	lsls	r7, r5, #26
 803192e:	d50a      	bpl.n	8031946 <_svfprintf_r+0x9e6>
 8031930:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031932:	6833      	ldr	r3, [r6, #0]
 8031934:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8031936:	17d2      	asrs	r2, r2, #31
 8031938:	e9c3 1200 	strd	r1, r2, [r3]
 803193c:	3604      	adds	r6, #4
 803193e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8031942:	f7ff bb46 	b.w	8030fd2 <_svfprintf_r+0x72>
 8031946:	06e8      	lsls	r0, r5, #27
 8031948:	d503      	bpl.n	8031952 <_svfprintf_r+0x9f2>
 803194a:	6833      	ldr	r3, [r6, #0]
 803194c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803194e:	601a      	str	r2, [r3, #0]
 8031950:	e7f4      	b.n	803193c <_svfprintf_r+0x9dc>
 8031952:	0669      	lsls	r1, r5, #25
 8031954:	d503      	bpl.n	803195e <_svfprintf_r+0x9fe>
 8031956:	6833      	ldr	r3, [r6, #0]
 8031958:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803195a:	801a      	strh	r2, [r3, #0]
 803195c:	e7ee      	b.n	803193c <_svfprintf_r+0x9dc>
 803195e:	05aa      	lsls	r2, r5, #22
 8031960:	d5f3      	bpl.n	803194a <_svfprintf_r+0x9ea>
 8031962:	6833      	ldr	r3, [r6, #0]
 8031964:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031966:	701a      	strb	r2, [r3, #0]
 8031968:	e7e8      	b.n	803193c <_svfprintf_r+0x9dc>
 803196a:	f045 0510 	orr.w	r5, r5, #16
 803196e:	f015 0320 	ands.w	r3, r5, #32
 8031972:	d020      	beq.n	80319b6 <_svfprintf_r+0xa56>
 8031974:	3607      	adds	r6, #7
 8031976:	f026 0307 	bic.w	r3, r6, #7
 803197a:	461a      	mov	r2, r3
 803197c:	685f      	ldr	r7, [r3, #4]
 803197e:	f852 6b08 	ldr.w	r6, [r2], #8
 8031982:	9207      	str	r2, [sp, #28]
 8031984:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031988:	2300      	movs	r3, #0
 803198a:	2200      	movs	r2, #0
 803198c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8031990:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031994:	f000 848c 	beq.w	80322b0 <_svfprintf_r+0x1350>
 8031998:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 803199c:	9208      	str	r2, [sp, #32]
 803199e:	ea56 0207 	orrs.w	r2, r6, r7
 80319a2:	f040 848a 	bne.w	80322ba <_svfprintf_r+0x135a>
 80319a6:	f1b8 0f00 	cmp.w	r8, #0
 80319aa:	f000 80db 	beq.w	8031b64 <_svfprintf_r+0xc04>
 80319ae:	2b01      	cmp	r3, #1
 80319b0:	f040 8486 	bne.w	80322c0 <_svfprintf_r+0x1360>
 80319b4:	e083      	b.n	8031abe <_svfprintf_r+0xb5e>
 80319b6:	4632      	mov	r2, r6
 80319b8:	f015 0710 	ands.w	r7, r5, #16
 80319bc:	f852 6b04 	ldr.w	r6, [r2], #4
 80319c0:	9207      	str	r2, [sp, #28]
 80319c2:	d001      	beq.n	80319c8 <_svfprintf_r+0xa68>
 80319c4:	461f      	mov	r7, r3
 80319c6:	e7dd      	b.n	8031984 <_svfprintf_r+0xa24>
 80319c8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80319cc:	d001      	beq.n	80319d2 <_svfprintf_r+0xa72>
 80319ce:	b2b6      	uxth	r6, r6
 80319d0:	e7d8      	b.n	8031984 <_svfprintf_r+0xa24>
 80319d2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80319d6:	d0d5      	beq.n	8031984 <_svfprintf_r+0xa24>
 80319d8:	b2f6      	uxtb	r6, r6
 80319da:	e7f3      	b.n	80319c4 <_svfprintf_r+0xa64>
 80319dc:	4633      	mov	r3, r6
 80319de:	2278      	movs	r2, #120	@ 0x78
 80319e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80319e4:	9307      	str	r3, [sp, #28]
 80319e6:	f647 0330 	movw	r3, #30768	@ 0x7830
 80319ea:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80319ee:	4b94      	ldr	r3, [pc, #592]	@ (8031c40 <_svfprintf_r+0xce0>)
 80319f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80319f2:	2700      	movs	r7, #0
 80319f4:	f045 0502 	orr.w	r5, r5, #2
 80319f8:	2302      	movs	r3, #2
 80319fa:	9206      	str	r2, [sp, #24]
 80319fc:	e7c5      	b.n	803198a <_svfprintf_r+0xa2a>
 80319fe:	4633      	mov	r3, r6
 8031a00:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031a04:	f853 9b04 	ldr.w	r9, [r3], #4
 8031a08:	9307      	str	r3, [sp, #28]
 8031a0a:	f04f 0600 	mov.w	r6, #0
 8031a0e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031a12:	d00f      	beq.n	8031a34 <_svfprintf_r+0xad4>
 8031a14:	4642      	mov	r2, r8
 8031a16:	4631      	mov	r1, r6
 8031a18:	4648      	mov	r0, r9
 8031a1a:	f7de fbf1 	bl	8010200 <memchr>
 8031a1e:	4682      	mov	sl, r0
 8031a20:	2800      	cmp	r0, #0
 8031a22:	f43f ac81 	beq.w	8031328 <_svfprintf_r+0x3c8>
 8031a26:	eba0 0809 	sub.w	r8, r0, r9
 8031a2a:	46b2      	mov	sl, r6
 8031a2c:	9610      	str	r6, [sp, #64]	@ 0x40
 8031a2e:	4637      	mov	r7, r6
 8031a30:	9608      	str	r6, [sp, #32]
 8031a32:	e5eb      	b.n	803160c <_svfprintf_r+0x6ac>
 8031a34:	4648      	mov	r0, r9
 8031a36:	f7de fc33 	bl	80102a0 <strlen>
 8031a3a:	46b2      	mov	sl, r6
 8031a3c:	4680      	mov	r8, r0
 8031a3e:	e473      	b.n	8031328 <_svfprintf_r+0x3c8>
 8031a40:	f045 0510 	orr.w	r5, r5, #16
 8031a44:	f015 0320 	ands.w	r3, r5, #32
 8031a48:	d009      	beq.n	8031a5e <_svfprintf_r+0xafe>
 8031a4a:	3607      	adds	r6, #7
 8031a4c:	f026 0307 	bic.w	r3, r6, #7
 8031a50:	461a      	mov	r2, r3
 8031a52:	685f      	ldr	r7, [r3, #4]
 8031a54:	f852 6b08 	ldr.w	r6, [r2], #8
 8031a58:	9207      	str	r2, [sp, #28]
 8031a5a:	2301      	movs	r3, #1
 8031a5c:	e795      	b.n	803198a <_svfprintf_r+0xa2a>
 8031a5e:	4632      	mov	r2, r6
 8031a60:	f015 0710 	ands.w	r7, r5, #16
 8031a64:	f852 6b04 	ldr.w	r6, [r2], #4
 8031a68:	9207      	str	r2, [sp, #28]
 8031a6a:	d001      	beq.n	8031a70 <_svfprintf_r+0xb10>
 8031a6c:	461f      	mov	r7, r3
 8031a6e:	e7f4      	b.n	8031a5a <_svfprintf_r+0xafa>
 8031a70:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031a74:	d001      	beq.n	8031a7a <_svfprintf_r+0xb1a>
 8031a76:	b2b6      	uxth	r6, r6
 8031a78:	e7ef      	b.n	8031a5a <_svfprintf_r+0xafa>
 8031a7a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031a7e:	d0ec      	beq.n	8031a5a <_svfprintf_r+0xafa>
 8031a80:	b2f6      	uxtb	r6, r6
 8031a82:	e7f3      	b.n	8031a6c <_svfprintf_r+0xb0c>
 8031a84:	4b6f      	ldr	r3, [pc, #444]	@ (8031c44 <_svfprintf_r+0xce4>)
 8031a86:	f7ff bb39 	b.w	80310fc <_svfprintf_r+0x19c>
 8031a8a:	4632      	mov	r2, r6
 8031a8c:	f015 0710 	ands.w	r7, r5, #16
 8031a90:	f852 6b04 	ldr.w	r6, [r2], #4
 8031a94:	9207      	str	r2, [sp, #28]
 8031a96:	d002      	beq.n	8031a9e <_svfprintf_r+0xb3e>
 8031a98:	461f      	mov	r7, r3
 8031a9a:	f7ff bb3c 	b.w	8031116 <_svfprintf_r+0x1b6>
 8031a9e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031aa2:	d002      	beq.n	8031aaa <_svfprintf_r+0xb4a>
 8031aa4:	b2b6      	uxth	r6, r6
 8031aa6:	f7ff bb36 	b.w	8031116 <_svfprintf_r+0x1b6>
 8031aaa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8031aae:	f43f ab32 	beq.w	8031116 <_svfprintf_r+0x1b6>
 8031ab2:	b2f6      	uxtb	r6, r6
 8031ab4:	e7f0      	b.n	8031a98 <_svfprintf_r+0xb38>
 8031ab6:	2e0a      	cmp	r6, #10
 8031ab8:	f177 0300 	sbcs.w	r3, r7, #0
 8031abc:	d207      	bcs.n	8031ace <_svfprintf_r+0xb6e>
 8031abe:	3630      	adds	r6, #48	@ 0x30
 8031ac0:	b2f6      	uxtb	r6, r6
 8031ac2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8031ac6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8031aca:	f000 bc15 	b.w	80322f8 <_svfprintf_r+0x1398>
 8031ace:	2300      	movs	r3, #0
 8031ad0:	9304      	str	r3, [sp, #16]
 8031ad2:	9b08      	ldr	r3, [sp, #32]
 8031ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8031ad8:	ad52      	add	r5, sp, #328	@ 0x148
 8031ada:	9310      	str	r3, [sp, #64]	@ 0x40
 8031adc:	220a      	movs	r2, #10
 8031ade:	2300      	movs	r3, #0
 8031ae0:	4630      	mov	r0, r6
 8031ae2:	4639      	mov	r1, r7
 8031ae4:	f7df f938 	bl	8010d58 <__aeabi_uldivmod>
 8031ae8:	9b04      	ldr	r3, [sp, #16]
 8031aea:	9011      	str	r0, [sp, #68]	@ 0x44
 8031aec:	3301      	adds	r3, #1
 8031aee:	9304      	str	r3, [sp, #16]
 8031af0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031af2:	3230      	adds	r2, #48	@ 0x30
 8031af4:	468a      	mov	sl, r1
 8031af6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8031afa:	f805 2c01 	strb.w	r2, [r5, #-1]
 8031afe:	b1d3      	cbz	r3, 8031b36 <_svfprintf_r+0xbd6>
 8031b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031b02:	9a04      	ldr	r2, [sp, #16]
 8031b04:	781b      	ldrb	r3, [r3, #0]
 8031b06:	429a      	cmp	r2, r3
 8031b08:	d115      	bne.n	8031b36 <_svfprintf_r+0xbd6>
 8031b0a:	2aff      	cmp	r2, #255	@ 0xff
 8031b0c:	d013      	beq.n	8031b36 <_svfprintf_r+0xbd6>
 8031b0e:	2e0a      	cmp	r6, #10
 8031b10:	f177 0300 	sbcs.w	r3, r7, #0
 8031b14:	d30f      	bcc.n	8031b36 <_svfprintf_r+0xbd6>
 8031b16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031b18:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8031b1a:	eba9 0903 	sub.w	r9, r9, r3
 8031b1e:	461a      	mov	r2, r3
 8031b20:	4648      	mov	r0, r9
 8031b22:	f7fb f8ec 	bl	802ccfe <strncpy>
 8031b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031b28:	785b      	ldrb	r3, [r3, #1]
 8031b2a:	b11b      	cbz	r3, 8031b34 <_svfprintf_r+0xbd4>
 8031b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031b2e:	3301      	adds	r3, #1
 8031b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8031b32:	2300      	movs	r3, #0
 8031b34:	9304      	str	r3, [sp, #16]
 8031b36:	2e0a      	cmp	r6, #10
 8031b38:	f177 0700 	sbcs.w	r7, r7, #0
 8031b3c:	f0c0 83dc 	bcc.w	80322f8 <_svfprintf_r+0x1398>
 8031b40:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8031b42:	4657      	mov	r7, sl
 8031b44:	464d      	mov	r5, r9
 8031b46:	e7c9      	b.n	8031adc <_svfprintf_r+0xb7c>
 8031b48:	f006 030f 	and.w	r3, r6, #15
 8031b4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8031b4e:	0936      	lsrs	r6, r6, #4
 8031b50:	5cd3      	ldrb	r3, [r2, r3]
 8031b52:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031b56:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8031b5a:	093f      	lsrs	r7, r7, #4
 8031b5c:	ea56 0307 	orrs.w	r3, r6, r7
 8031b60:	d1f2      	bne.n	8031b48 <_svfprintf_r+0xbe8>
 8031b62:	e3c9      	b.n	80322f8 <_svfprintf_r+0x1398>
 8031b64:	b91b      	cbnz	r3, 8031b6e <_svfprintf_r+0xc0e>
 8031b66:	07e9      	lsls	r1, r5, #31
 8031b68:	d501      	bpl.n	8031b6e <_svfprintf_r+0xc0e>
 8031b6a:	2630      	movs	r6, #48	@ 0x30
 8031b6c:	e7a9      	b.n	8031ac2 <_svfprintf_r+0xb62>
 8031b6e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031b72:	e3c1      	b.n	80322f8 <_svfprintf_r+0x1398>
 8031b74:	9b06      	ldr	r3, [sp, #24]
 8031b76:	2b00      	cmp	r3, #0
 8031b78:	f000 838f 	beq.w	803229a <_svfprintf_r+0x133a>
 8031b7c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8031b80:	2300      	movs	r3, #0
 8031b82:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031b86:	9607      	str	r6, [sp, #28]
 8031b88:	f7ff bb63 	b.w	8031252 <_svfprintf_r+0x2f2>
 8031b8c:	2010      	movs	r0, #16
 8031b8e:	4403      	add	r3, r0
 8031b90:	2a07      	cmp	r2, #7
 8031b92:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031b96:	6060      	str	r0, [r4, #4]
 8031b98:	dd08      	ble.n	8031bac <_svfprintf_r+0xc4c>
 8031b9a:	9803      	ldr	r0, [sp, #12]
 8031b9c:	aa26      	add	r2, sp, #152	@ 0x98
 8031b9e:	4659      	mov	r1, fp
 8031ba0:	f7fd fd66 	bl	802f670 <__ssprint_r>
 8031ba4:	2800      	cmp	r0, #0
 8031ba6:	f040 8356 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031baa:	a929      	add	r1, sp, #164	@ 0xa4
 8031bac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031bae:	3b10      	subs	r3, #16
 8031bb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031bb2:	460c      	mov	r4, r1
 8031bb4:	e546      	b.n	8031644 <_svfprintf_r+0x6e4>
 8031bb6:	460c      	mov	r4, r1
 8031bb8:	e561      	b.n	803167e <_svfprintf_r+0x71e>
 8031bba:	9803      	ldr	r0, [sp, #12]
 8031bbc:	aa26      	add	r2, sp, #152	@ 0x98
 8031bbe:	4659      	mov	r1, fp
 8031bc0:	f7fd fd56 	bl	802f670 <__ssprint_r>
 8031bc4:	2800      	cmp	r0, #0
 8031bc6:	f040 8346 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031bca:	ac29      	add	r4, sp, #164	@ 0xa4
 8031bcc:	e569      	b.n	80316a2 <_svfprintf_r+0x742>
 8031bce:	9803      	ldr	r0, [sp, #12]
 8031bd0:	aa26      	add	r2, sp, #152	@ 0x98
 8031bd2:	4659      	mov	r1, fp
 8031bd4:	f7fd fd4c 	bl	802f670 <__ssprint_r>
 8031bd8:	2800      	cmp	r0, #0
 8031bda:	f040 833c 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031bde:	ac29      	add	r4, sp, #164	@ 0xa4
 8031be0:	e56f      	b.n	80316c2 <_svfprintf_r+0x762>
 8031be2:	2010      	movs	r0, #16
 8031be4:	4403      	add	r3, r0
 8031be6:	2a07      	cmp	r2, #7
 8031be8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031bec:	6060      	str	r0, [r4, #4]
 8031bee:	dd08      	ble.n	8031c02 <_svfprintf_r+0xca2>
 8031bf0:	9803      	ldr	r0, [sp, #12]
 8031bf2:	aa26      	add	r2, sp, #152	@ 0x98
 8031bf4:	4659      	mov	r1, fp
 8031bf6:	f7fd fd3b 	bl	802f670 <__ssprint_r>
 8031bfa:	2800      	cmp	r0, #0
 8031bfc:	f040 832b 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031c00:	a929      	add	r1, sp, #164	@ 0xa4
 8031c02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031c04:	3b10      	subs	r3, #16
 8031c06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031c08:	460c      	mov	r4, r1
 8031c0a:	e563      	b.n	80316d4 <_svfprintf_r+0x774>
 8031c0c:	460c      	mov	r4, r1
 8031c0e:	e57e      	b.n	803170e <_svfprintf_r+0x7ae>
 8031c10:	2010      	movs	r0, #16
 8031c12:	4403      	add	r3, r0
 8031c14:	2a07      	cmp	r2, #7
 8031c16:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031c1a:	6060      	str	r0, [r4, #4]
 8031c1c:	dd08      	ble.n	8031c30 <_svfprintf_r+0xcd0>
 8031c1e:	9803      	ldr	r0, [sp, #12]
 8031c20:	aa26      	add	r2, sp, #152	@ 0x98
 8031c22:	4659      	mov	r1, fp
 8031c24:	f7fd fd24 	bl	802f670 <__ssprint_r>
 8031c28:	2800      	cmp	r0, #0
 8031c2a:	f040 8314 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031c2e:	a929      	add	r1, sp, #164	@ 0xa4
 8031c30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031c32:	3b10      	subs	r3, #16
 8031c34:	9310      	str	r3, [sp, #64]	@ 0x40
 8031c36:	460c      	mov	r4, r1
 8031c38:	e56f      	b.n	803171a <_svfprintf_r+0x7ba>
 8031c3a:	460c      	mov	r4, r1
 8031c3c:	e58a      	b.n	8031754 <_svfprintf_r+0x7f4>
 8031c3e:	bf00      	nop
 8031c40:	0803c04b 	.word	0x0803c04b
 8031c44:	0803c05c 	.word	0x0803c05c
 8031c48:	9b06      	ldr	r3, [sp, #24]
 8031c4a:	2b65      	cmp	r3, #101	@ 0x65
 8031c4c:	f340 8246 	ble.w	80320dc <_svfprintf_r+0x117c>
 8031c50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8031c54:	2200      	movs	r2, #0
 8031c56:	2300      	movs	r3, #0
 8031c58:	f7de ff4e 	bl	8010af8 <__aeabi_dcmpeq>
 8031c5c:	2800      	cmp	r0, #0
 8031c5e:	d06a      	beq.n	8031d36 <_svfprintf_r+0xdd6>
 8031c60:	4b73      	ldr	r3, [pc, #460]	@ (8031e30 <_svfprintf_r+0xed0>)
 8031c62:	6023      	str	r3, [r4, #0]
 8031c64:	2301      	movs	r3, #1
 8031c66:	6063      	str	r3, [r4, #4]
 8031c68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031c6a:	3301      	adds	r3, #1
 8031c6c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c70:	3301      	adds	r3, #1
 8031c72:	2b07      	cmp	r3, #7
 8031c74:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c76:	dc37      	bgt.n	8031ce8 <_svfprintf_r+0xd88>
 8031c78:	3408      	adds	r4, #8
 8031c7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031c7c:	9a04      	ldr	r2, [sp, #16]
 8031c7e:	4293      	cmp	r3, r2
 8031c80:	db02      	blt.n	8031c88 <_svfprintf_r+0xd28>
 8031c82:	07ef      	lsls	r7, r5, #31
 8031c84:	f57f ad76 	bpl.w	8031774 <_svfprintf_r+0x814>
 8031c88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031c8a:	6023      	str	r3, [r4, #0]
 8031c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031c8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031c90:	6063      	str	r3, [r4, #4]
 8031c92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031c94:	4413      	add	r3, r2
 8031c96:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c98:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c9a:	3301      	adds	r3, #1
 8031c9c:	2b07      	cmp	r3, #7
 8031c9e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031ca0:	dc2c      	bgt.n	8031cfc <_svfprintf_r+0xd9c>
 8031ca2:	3408      	adds	r4, #8
 8031ca4:	9b04      	ldr	r3, [sp, #16]
 8031ca6:	1e5e      	subs	r6, r3, #1
 8031ca8:	2e00      	cmp	r6, #0
 8031caa:	f77f ad63 	ble.w	8031774 <_svfprintf_r+0x814>
 8031cae:	4f61      	ldr	r7, [pc, #388]	@ (8031e34 <_svfprintf_r+0xed4>)
 8031cb0:	f04f 0810 	mov.w	r8, #16
 8031cb4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031cb8:	2e10      	cmp	r6, #16
 8031cba:	f103 0301 	add.w	r3, r3, #1
 8031cbe:	f104 0108 	add.w	r1, r4, #8
 8031cc2:	6027      	str	r7, [r4, #0]
 8031cc4:	dc24      	bgt.n	8031d10 <_svfprintf_r+0xdb0>
 8031cc6:	6066      	str	r6, [r4, #4]
 8031cc8:	2b07      	cmp	r3, #7
 8031cca:	4416      	add	r6, r2
 8031ccc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031cd0:	f340 82a0 	ble.w	8032214 <_svfprintf_r+0x12b4>
 8031cd4:	9803      	ldr	r0, [sp, #12]
 8031cd6:	aa26      	add	r2, sp, #152	@ 0x98
 8031cd8:	4659      	mov	r1, fp
 8031cda:	f7fd fcc9 	bl	802f670 <__ssprint_r>
 8031cde:	2800      	cmp	r0, #0
 8031ce0:	f040 82b9 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031ce4:	ac29      	add	r4, sp, #164	@ 0xa4
 8031ce6:	e545      	b.n	8031774 <_svfprintf_r+0x814>
 8031ce8:	9803      	ldr	r0, [sp, #12]
 8031cea:	aa26      	add	r2, sp, #152	@ 0x98
 8031cec:	4659      	mov	r1, fp
 8031cee:	f7fd fcbf 	bl	802f670 <__ssprint_r>
 8031cf2:	2800      	cmp	r0, #0
 8031cf4:	f040 82af 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031cf8:	ac29      	add	r4, sp, #164	@ 0xa4
 8031cfa:	e7be      	b.n	8031c7a <_svfprintf_r+0xd1a>
 8031cfc:	9803      	ldr	r0, [sp, #12]
 8031cfe:	aa26      	add	r2, sp, #152	@ 0x98
 8031d00:	4659      	mov	r1, fp
 8031d02:	f7fd fcb5 	bl	802f670 <__ssprint_r>
 8031d06:	2800      	cmp	r0, #0
 8031d08:	f040 82a5 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031d0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031d0e:	e7c9      	b.n	8031ca4 <_svfprintf_r+0xd44>
 8031d10:	3210      	adds	r2, #16
 8031d12:	2b07      	cmp	r3, #7
 8031d14:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031d18:	f8c4 8004 	str.w	r8, [r4, #4]
 8031d1c:	dd08      	ble.n	8031d30 <_svfprintf_r+0xdd0>
 8031d1e:	9803      	ldr	r0, [sp, #12]
 8031d20:	aa26      	add	r2, sp, #152	@ 0x98
 8031d22:	4659      	mov	r1, fp
 8031d24:	f7fd fca4 	bl	802f670 <__ssprint_r>
 8031d28:	2800      	cmp	r0, #0
 8031d2a:	f040 8294 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031d2e:	a929      	add	r1, sp, #164	@ 0xa4
 8031d30:	3e10      	subs	r6, #16
 8031d32:	460c      	mov	r4, r1
 8031d34:	e7be      	b.n	8031cb4 <_svfprintf_r+0xd54>
 8031d36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031d38:	2b00      	cmp	r3, #0
 8031d3a:	dc7d      	bgt.n	8031e38 <_svfprintf_r+0xed8>
 8031d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8031e30 <_svfprintf_r+0xed0>)
 8031d3e:	6023      	str	r3, [r4, #0]
 8031d40:	2301      	movs	r3, #1
 8031d42:	6063      	str	r3, [r4, #4]
 8031d44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031d46:	3301      	adds	r3, #1
 8031d48:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d4a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d4c:	3301      	adds	r3, #1
 8031d4e:	2b07      	cmp	r3, #7
 8031d50:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d52:	dc46      	bgt.n	8031de2 <_svfprintf_r+0xe82>
 8031d54:	3408      	adds	r4, #8
 8031d56:	9904      	ldr	r1, [sp, #16]
 8031d58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031d5a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031d5c:	430b      	orrs	r3, r1
 8031d5e:	f005 0101 	and.w	r1, r5, #1
 8031d62:	430b      	orrs	r3, r1
 8031d64:	f43f ad06 	beq.w	8031774 <_svfprintf_r+0x814>
 8031d68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031d6a:	6023      	str	r3, [r4, #0]
 8031d6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031d6e:	6063      	str	r3, [r4, #4]
 8031d70:	441a      	add	r2, r3
 8031d72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d74:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031d76:	3301      	adds	r3, #1
 8031d78:	2b07      	cmp	r3, #7
 8031d7a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d7c:	dc3b      	bgt.n	8031df6 <_svfprintf_r+0xe96>
 8031d7e:	f104 0308 	add.w	r3, r4, #8
 8031d82:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031d84:	2e00      	cmp	r6, #0
 8031d86:	da1b      	bge.n	8031dc0 <_svfprintf_r+0xe60>
 8031d88:	4f2a      	ldr	r7, [pc, #168]	@ (8031e34 <_svfprintf_r+0xed4>)
 8031d8a:	4276      	negs	r6, r6
 8031d8c:	461a      	mov	r2, r3
 8031d8e:	2410      	movs	r4, #16
 8031d90:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8031d94:	2e10      	cmp	r6, #16
 8031d96:	f101 0101 	add.w	r1, r1, #1
 8031d9a:	f103 0308 	add.w	r3, r3, #8
 8031d9e:	6017      	str	r7, [r2, #0]
 8031da0:	dc33      	bgt.n	8031e0a <_svfprintf_r+0xeaa>
 8031da2:	6056      	str	r6, [r2, #4]
 8031da4:	2907      	cmp	r1, #7
 8031da6:	4406      	add	r6, r0
 8031da8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8031dac:	dd08      	ble.n	8031dc0 <_svfprintf_r+0xe60>
 8031dae:	9803      	ldr	r0, [sp, #12]
 8031db0:	aa26      	add	r2, sp, #152	@ 0x98
 8031db2:	4659      	mov	r1, fp
 8031db4:	f7fd fc5c 	bl	802f670 <__ssprint_r>
 8031db8:	2800      	cmp	r0, #0
 8031dba:	f040 824c 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031dbe:	ab29      	add	r3, sp, #164	@ 0xa4
 8031dc0:	9a04      	ldr	r2, [sp, #16]
 8031dc2:	9904      	ldr	r1, [sp, #16]
 8031dc4:	605a      	str	r2, [r3, #4]
 8031dc6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031dc8:	f8c3 9000 	str.w	r9, [r3]
 8031dcc:	440a      	add	r2, r1
 8031dce:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031dd0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031dd2:	3201      	adds	r2, #1
 8031dd4:	2a07      	cmp	r2, #7
 8031dd6:	9227      	str	r2, [sp, #156]	@ 0x9c
 8031dd8:	f73f af7c 	bgt.w	8031cd4 <_svfprintf_r+0xd74>
 8031ddc:	f103 0408 	add.w	r4, r3, #8
 8031de0:	e4c8      	b.n	8031774 <_svfprintf_r+0x814>
 8031de2:	9803      	ldr	r0, [sp, #12]
 8031de4:	aa26      	add	r2, sp, #152	@ 0x98
 8031de6:	4659      	mov	r1, fp
 8031de8:	f7fd fc42 	bl	802f670 <__ssprint_r>
 8031dec:	2800      	cmp	r0, #0
 8031dee:	f040 8232 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031df2:	ac29      	add	r4, sp, #164	@ 0xa4
 8031df4:	e7af      	b.n	8031d56 <_svfprintf_r+0xdf6>
 8031df6:	9803      	ldr	r0, [sp, #12]
 8031df8:	aa26      	add	r2, sp, #152	@ 0x98
 8031dfa:	4659      	mov	r1, fp
 8031dfc:	f7fd fc38 	bl	802f670 <__ssprint_r>
 8031e00:	2800      	cmp	r0, #0
 8031e02:	f040 8228 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031e06:	ab29      	add	r3, sp, #164	@ 0xa4
 8031e08:	e7bb      	b.n	8031d82 <_svfprintf_r+0xe22>
 8031e0a:	3010      	adds	r0, #16
 8031e0c:	2907      	cmp	r1, #7
 8031e0e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031e12:	6054      	str	r4, [r2, #4]
 8031e14:	dd08      	ble.n	8031e28 <_svfprintf_r+0xec8>
 8031e16:	9803      	ldr	r0, [sp, #12]
 8031e18:	aa26      	add	r2, sp, #152	@ 0x98
 8031e1a:	4659      	mov	r1, fp
 8031e1c:	f7fd fc28 	bl	802f670 <__ssprint_r>
 8031e20:	2800      	cmp	r0, #0
 8031e22:	f040 8218 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031e26:	ab29      	add	r3, sp, #164	@ 0xa4
 8031e28:	3e10      	subs	r6, #16
 8031e2a:	461a      	mov	r2, r3
 8031e2c:	e7b0      	b.n	8031d90 <_svfprintf_r+0xe30>
 8031e2e:	bf00      	nop
 8031e30:	0803c06d 	.word	0x0803c06d
 8031e34:	0803c5b2 	.word	0x0803c5b2
 8031e38:	9b04      	ldr	r3, [sp, #16]
 8031e3a:	444b      	add	r3, r9
 8031e3c:	9306      	str	r3, [sp, #24]
 8031e3e:	9b04      	ldr	r3, [sp, #16]
 8031e40:	42b3      	cmp	r3, r6
 8031e42:	bfa8      	it	ge
 8031e44:	4633      	movge	r3, r6
 8031e46:	2b00      	cmp	r3, #0
 8031e48:	4698      	mov	r8, r3
 8031e4a:	dd0b      	ble.n	8031e64 <_svfprintf_r+0xf04>
 8031e4c:	e9c4 9300 	strd	r9, r3, [r4]
 8031e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031e52:	4443      	add	r3, r8
 8031e54:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031e56:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031e58:	3301      	adds	r3, #1
 8031e5a:	2b07      	cmp	r3, #7
 8031e5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031e5e:	f300 8089 	bgt.w	8031f74 <_svfprintf_r+0x1014>
 8031e62:	3408      	adds	r4, #8
 8031e64:	4643      	mov	r3, r8
 8031e66:	2b00      	cmp	r3, #0
 8031e68:	bfac      	ite	ge
 8031e6a:	eba6 0808 	subge.w	r8, r6, r8
 8031e6e:	46b0      	movlt	r8, r6
 8031e70:	f1b8 0f00 	cmp.w	r8, #0
 8031e74:	dd1b      	ble.n	8031eae <_svfprintf_r+0xf4e>
 8031e76:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031e7a:	4897      	ldr	r0, [pc, #604]	@ (80320d8 <_svfprintf_r+0x1178>)
 8031e7c:	6020      	str	r0, [r4, #0]
 8031e7e:	f1b8 0f10 	cmp.w	r8, #16
 8031e82:	f102 0201 	add.w	r2, r2, #1
 8031e86:	f104 0108 	add.w	r1, r4, #8
 8031e8a:	dc7d      	bgt.n	8031f88 <_svfprintf_r+0x1028>
 8031e8c:	4443      	add	r3, r8
 8031e8e:	2a07      	cmp	r2, #7
 8031e90:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031e94:	f8c4 8004 	str.w	r8, [r4, #4]
 8031e98:	f340 808a 	ble.w	8031fb0 <_svfprintf_r+0x1050>
 8031e9c:	9803      	ldr	r0, [sp, #12]
 8031e9e:	aa26      	add	r2, sp, #152	@ 0x98
 8031ea0:	4659      	mov	r1, fp
 8031ea2:	f7fd fbe5 	bl	802f670 <__ssprint_r>
 8031ea6:	2800      	cmp	r0, #0
 8031ea8:	f040 81d5 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031eac:	ac29      	add	r4, sp, #164	@ 0xa4
 8031eae:	eb09 0806 	add.w	r8, r9, r6
 8031eb2:	056e      	lsls	r6, r5, #21
 8031eb4:	d508      	bpl.n	8031ec8 <_svfprintf_r+0xf68>
 8031eb6:	9b08      	ldr	r3, [sp, #32]
 8031eb8:	2b00      	cmp	r3, #0
 8031eba:	d17b      	bne.n	8031fb4 <_svfprintf_r+0x1054>
 8031ebc:	2f00      	cmp	r7, #0
 8031ebe:	d17b      	bne.n	8031fb8 <_svfprintf_r+0x1058>
 8031ec0:	9b06      	ldr	r3, [sp, #24]
 8031ec2:	4598      	cmp	r8, r3
 8031ec4:	bf28      	it	cs
 8031ec6:	4698      	movcs	r8, r3
 8031ec8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031eca:	9a04      	ldr	r2, [sp, #16]
 8031ecc:	4293      	cmp	r3, r2
 8031ece:	db01      	blt.n	8031ed4 <_svfprintf_r+0xf74>
 8031ed0:	07e8      	lsls	r0, r5, #31
 8031ed2:	d50e      	bpl.n	8031ef2 <_svfprintf_r+0xf92>
 8031ed4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031ed6:	6023      	str	r3, [r4, #0]
 8031ed8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031eda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031edc:	6063      	str	r3, [r4, #4]
 8031ede:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031ee0:	4413      	add	r3, r2
 8031ee2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031ee4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031ee6:	3301      	adds	r3, #1
 8031ee8:	2b07      	cmp	r3, #7
 8031eea:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031eec:	f300 80df 	bgt.w	80320ae <_svfprintf_r+0x114e>
 8031ef0:	3408      	adds	r4, #8
 8031ef2:	9b04      	ldr	r3, [sp, #16]
 8031ef4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8031ef6:	1bdf      	subs	r7, r3, r7
 8031ef8:	9b06      	ldr	r3, [sp, #24]
 8031efa:	eba3 0308 	sub.w	r3, r3, r8
 8031efe:	429f      	cmp	r7, r3
 8031f00:	bfa8      	it	ge
 8031f02:	461f      	movge	r7, r3
 8031f04:	2f00      	cmp	r7, #0
 8031f06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031f08:	dd0a      	ble.n	8031f20 <_svfprintf_r+0xfc0>
 8031f0a:	443b      	add	r3, r7
 8031f0c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031f0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031f10:	3301      	adds	r3, #1
 8031f12:	2b07      	cmp	r3, #7
 8031f14:	e9c4 8700 	strd	r8, r7, [r4]
 8031f18:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031f1a:	f300 80d2 	bgt.w	80320c2 <_svfprintf_r+0x1162>
 8031f1e:	3408      	adds	r4, #8
 8031f20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031f22:	9b04      	ldr	r3, [sp, #16]
 8031f24:	2f00      	cmp	r7, #0
 8031f26:	eba3 0606 	sub.w	r6, r3, r6
 8031f2a:	bfa8      	it	ge
 8031f2c:	1bf6      	subge	r6, r6, r7
 8031f2e:	2e00      	cmp	r6, #0
 8031f30:	f77f ac20 	ble.w	8031774 <_svfprintf_r+0x814>
 8031f34:	4f68      	ldr	r7, [pc, #416]	@ (80320d8 <_svfprintf_r+0x1178>)
 8031f36:	f04f 0810 	mov.w	r8, #16
 8031f3a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031f3e:	2e10      	cmp	r6, #16
 8031f40:	f103 0301 	add.w	r3, r3, #1
 8031f44:	f104 0108 	add.w	r1, r4, #8
 8031f48:	6027      	str	r7, [r4, #0]
 8031f4a:	f77f aebc 	ble.w	8031cc6 <_svfprintf_r+0xd66>
 8031f4e:	3210      	adds	r2, #16
 8031f50:	2b07      	cmp	r3, #7
 8031f52:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031f56:	f8c4 8004 	str.w	r8, [r4, #4]
 8031f5a:	dd08      	ble.n	8031f6e <_svfprintf_r+0x100e>
 8031f5c:	9803      	ldr	r0, [sp, #12]
 8031f5e:	aa26      	add	r2, sp, #152	@ 0x98
 8031f60:	4659      	mov	r1, fp
 8031f62:	f7fd fb85 	bl	802f670 <__ssprint_r>
 8031f66:	2800      	cmp	r0, #0
 8031f68:	f040 8175 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031f6c:	a929      	add	r1, sp, #164	@ 0xa4
 8031f6e:	3e10      	subs	r6, #16
 8031f70:	460c      	mov	r4, r1
 8031f72:	e7e2      	b.n	8031f3a <_svfprintf_r+0xfda>
 8031f74:	9803      	ldr	r0, [sp, #12]
 8031f76:	aa26      	add	r2, sp, #152	@ 0x98
 8031f78:	4659      	mov	r1, fp
 8031f7a:	f7fd fb79 	bl	802f670 <__ssprint_r>
 8031f7e:	2800      	cmp	r0, #0
 8031f80:	f040 8169 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031f84:	ac29      	add	r4, sp, #164	@ 0xa4
 8031f86:	e76d      	b.n	8031e64 <_svfprintf_r+0xf04>
 8031f88:	2010      	movs	r0, #16
 8031f8a:	4403      	add	r3, r0
 8031f8c:	2a07      	cmp	r2, #7
 8031f8e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031f92:	6060      	str	r0, [r4, #4]
 8031f94:	dd08      	ble.n	8031fa8 <_svfprintf_r+0x1048>
 8031f96:	9803      	ldr	r0, [sp, #12]
 8031f98:	aa26      	add	r2, sp, #152	@ 0x98
 8031f9a:	4659      	mov	r1, fp
 8031f9c:	f7fd fb68 	bl	802f670 <__ssprint_r>
 8031fa0:	2800      	cmp	r0, #0
 8031fa2:	f040 8158 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8031fa6:	a929      	add	r1, sp, #164	@ 0xa4
 8031fa8:	f1a8 0810 	sub.w	r8, r8, #16
 8031fac:	460c      	mov	r4, r1
 8031fae:	e762      	b.n	8031e76 <_svfprintf_r+0xf16>
 8031fb0:	460c      	mov	r4, r1
 8031fb2:	e77c      	b.n	8031eae <_svfprintf_r+0xf4e>
 8031fb4:	2f00      	cmp	r7, #0
 8031fb6:	d04a      	beq.n	803204e <_svfprintf_r+0x10ee>
 8031fb8:	3f01      	subs	r7, #1
 8031fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8031fbc:	6023      	str	r3, [r4, #0]
 8031fbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031fc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031fc2:	6063      	str	r3, [r4, #4]
 8031fc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031fc6:	4413      	add	r3, r2
 8031fc8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031fca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031fcc:	3301      	adds	r3, #1
 8031fce:	2b07      	cmp	r3, #7
 8031fd0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031fd2:	dc43      	bgt.n	803205c <_svfprintf_r+0x10fc>
 8031fd4:	3408      	adds	r4, #8
 8031fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031fd8:	781a      	ldrb	r2, [r3, #0]
 8031fda:	9b06      	ldr	r3, [sp, #24]
 8031fdc:	eba3 0308 	sub.w	r3, r3, r8
 8031fe0:	429a      	cmp	r2, r3
 8031fe2:	bfa8      	it	ge
 8031fe4:	461a      	movge	r2, r3
 8031fe6:	2a00      	cmp	r2, #0
 8031fe8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031fea:	4691      	mov	r9, r2
 8031fec:	dd09      	ble.n	8032002 <_svfprintf_r+0x10a2>
 8031fee:	4413      	add	r3, r2
 8031ff0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031ff2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031ff4:	3301      	adds	r3, #1
 8031ff6:	2b07      	cmp	r3, #7
 8031ff8:	e9c4 8200 	strd	r8, r2, [r4]
 8031ffc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031ffe:	dc37      	bgt.n	8032070 <_svfprintf_r+0x1110>
 8032000:	3408      	adds	r4, #8
 8032002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032004:	781e      	ldrb	r6, [r3, #0]
 8032006:	f1b9 0f00 	cmp.w	r9, #0
 803200a:	bfa8      	it	ge
 803200c:	eba6 0609 	subge.w	r6, r6, r9
 8032010:	2e00      	cmp	r6, #0
 8032012:	dd18      	ble.n	8032046 <_svfprintf_r+0x10e6>
 8032014:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8032018:	482f      	ldr	r0, [pc, #188]	@ (80320d8 <_svfprintf_r+0x1178>)
 803201a:	6020      	str	r0, [r4, #0]
 803201c:	2e10      	cmp	r6, #16
 803201e:	f103 0301 	add.w	r3, r3, #1
 8032022:	f104 0108 	add.w	r1, r4, #8
 8032026:	dc2d      	bgt.n	8032084 <_svfprintf_r+0x1124>
 8032028:	6066      	str	r6, [r4, #4]
 803202a:	2b07      	cmp	r3, #7
 803202c:	4416      	add	r6, r2
 803202e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8032032:	dd3a      	ble.n	80320aa <_svfprintf_r+0x114a>
 8032034:	9803      	ldr	r0, [sp, #12]
 8032036:	aa26      	add	r2, sp, #152	@ 0x98
 8032038:	4659      	mov	r1, fp
 803203a:	f7fd fb19 	bl	802f670 <__ssprint_r>
 803203e:	2800      	cmp	r0, #0
 8032040:	f040 8109 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8032044:	ac29      	add	r4, sp, #164	@ 0xa4
 8032046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032048:	781b      	ldrb	r3, [r3, #0]
 803204a:	4498      	add	r8, r3
 803204c:	e733      	b.n	8031eb6 <_svfprintf_r+0xf56>
 803204e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8032050:	3b01      	subs	r3, #1
 8032052:	9309      	str	r3, [sp, #36]	@ 0x24
 8032054:	9b08      	ldr	r3, [sp, #32]
 8032056:	3b01      	subs	r3, #1
 8032058:	9308      	str	r3, [sp, #32]
 803205a:	e7ae      	b.n	8031fba <_svfprintf_r+0x105a>
 803205c:	9803      	ldr	r0, [sp, #12]
 803205e:	aa26      	add	r2, sp, #152	@ 0x98
 8032060:	4659      	mov	r1, fp
 8032062:	f7fd fb05 	bl	802f670 <__ssprint_r>
 8032066:	2800      	cmp	r0, #0
 8032068:	f040 80f5 	bne.w	8032256 <_svfprintf_r+0x12f6>
 803206c:	ac29      	add	r4, sp, #164	@ 0xa4
 803206e:	e7b2      	b.n	8031fd6 <_svfprintf_r+0x1076>
 8032070:	9803      	ldr	r0, [sp, #12]
 8032072:	aa26      	add	r2, sp, #152	@ 0x98
 8032074:	4659      	mov	r1, fp
 8032076:	f7fd fafb 	bl	802f670 <__ssprint_r>
 803207a:	2800      	cmp	r0, #0
 803207c:	f040 80eb 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8032080:	ac29      	add	r4, sp, #164	@ 0xa4
 8032082:	e7be      	b.n	8032002 <_svfprintf_r+0x10a2>
 8032084:	2010      	movs	r0, #16
 8032086:	4402      	add	r2, r0
 8032088:	2b07      	cmp	r3, #7
 803208a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803208e:	6060      	str	r0, [r4, #4]
 8032090:	dd08      	ble.n	80320a4 <_svfprintf_r+0x1144>
 8032092:	9803      	ldr	r0, [sp, #12]
 8032094:	aa26      	add	r2, sp, #152	@ 0x98
 8032096:	4659      	mov	r1, fp
 8032098:	f7fd faea 	bl	802f670 <__ssprint_r>
 803209c:	2800      	cmp	r0, #0
 803209e:	f040 80da 	bne.w	8032256 <_svfprintf_r+0x12f6>
 80320a2:	a929      	add	r1, sp, #164	@ 0xa4
 80320a4:	3e10      	subs	r6, #16
 80320a6:	460c      	mov	r4, r1
 80320a8:	e7b4      	b.n	8032014 <_svfprintf_r+0x10b4>
 80320aa:	460c      	mov	r4, r1
 80320ac:	e7cb      	b.n	8032046 <_svfprintf_r+0x10e6>
 80320ae:	9803      	ldr	r0, [sp, #12]
 80320b0:	aa26      	add	r2, sp, #152	@ 0x98
 80320b2:	4659      	mov	r1, fp
 80320b4:	f7fd fadc 	bl	802f670 <__ssprint_r>
 80320b8:	2800      	cmp	r0, #0
 80320ba:	f040 80cc 	bne.w	8032256 <_svfprintf_r+0x12f6>
 80320be:	ac29      	add	r4, sp, #164	@ 0xa4
 80320c0:	e717      	b.n	8031ef2 <_svfprintf_r+0xf92>
 80320c2:	9803      	ldr	r0, [sp, #12]
 80320c4:	aa26      	add	r2, sp, #152	@ 0x98
 80320c6:	4659      	mov	r1, fp
 80320c8:	f7fd fad2 	bl	802f670 <__ssprint_r>
 80320cc:	2800      	cmp	r0, #0
 80320ce:	f040 80c2 	bne.w	8032256 <_svfprintf_r+0x12f6>
 80320d2:	ac29      	add	r4, sp, #164	@ 0xa4
 80320d4:	e724      	b.n	8031f20 <_svfprintf_r+0xfc0>
 80320d6:	bf00      	nop
 80320d8:	0803c5b2 	.word	0x0803c5b2
 80320dc:	9904      	ldr	r1, [sp, #16]
 80320de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80320e0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80320e2:	2901      	cmp	r1, #1
 80320e4:	f103 0301 	add.w	r3, r3, #1
 80320e8:	f102 0201 	add.w	r2, r2, #1
 80320ec:	f104 0608 	add.w	r6, r4, #8
 80320f0:	dc02      	bgt.n	80320f8 <_svfprintf_r+0x1198>
 80320f2:	07e9      	lsls	r1, r5, #31
 80320f4:	f140 8083 	bpl.w	80321fe <_svfprintf_r+0x129e>
 80320f8:	2101      	movs	r1, #1
 80320fa:	2a07      	cmp	r2, #7
 80320fc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032100:	f8c4 9000 	str.w	r9, [r4]
 8032104:	6061      	str	r1, [r4, #4]
 8032106:	dd08      	ble.n	803211a <_svfprintf_r+0x11ba>
 8032108:	9803      	ldr	r0, [sp, #12]
 803210a:	aa26      	add	r2, sp, #152	@ 0x98
 803210c:	4659      	mov	r1, fp
 803210e:	f7fd faaf 	bl	802f670 <__ssprint_r>
 8032112:	2800      	cmp	r0, #0
 8032114:	f040 809f 	bne.w	8032256 <_svfprintf_r+0x12f6>
 8032118:	ae29      	add	r6, sp, #164	@ 0xa4
 803211a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803211c:	6033      	str	r3, [r6, #0]
 803211e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8032120:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8032122:	6073      	str	r3, [r6, #4]
 8032124:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032126:	4413      	add	r3, r2
 8032128:	9328      	str	r3, [sp, #160]	@ 0xa0
 803212a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803212c:	3301      	adds	r3, #1
 803212e:	2b07      	cmp	r3, #7
 8032130:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032132:	dc33      	bgt.n	803219c <_svfprintf_r+0x123c>
 8032134:	3608      	adds	r6, #8
 8032136:	9b04      	ldr	r3, [sp, #16]
 8032138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803213c:	1e5c      	subs	r4, r3, #1
 803213e:	2200      	movs	r2, #0
 8032140:	2300      	movs	r3, #0
 8032142:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8032146:	f7de fcd7 	bl	8010af8 <__aeabi_dcmpeq>
 803214a:	2800      	cmp	r0, #0
 803214c:	d12f      	bne.n	80321ae <_svfprintf_r+0x124e>
 803214e:	f109 0201 	add.w	r2, r9, #1
 8032152:	e9c6 2400 	strd	r2, r4, [r6]
 8032156:	9a04      	ldr	r2, [sp, #16]
 8032158:	f108 0301 	add.w	r3, r8, #1
 803215c:	3f01      	subs	r7, #1
 803215e:	4417      	add	r7, r2
 8032160:	2b07      	cmp	r3, #7
 8032162:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8032166:	dd53      	ble.n	8032210 <_svfprintf_r+0x12b0>
 8032168:	9803      	ldr	r0, [sp, #12]
 803216a:	aa26      	add	r2, sp, #152	@ 0x98
 803216c:	4659      	mov	r1, fp
 803216e:	f7fd fa7f 	bl	802f670 <__ssprint_r>
 8032172:	2800      	cmp	r0, #0
 8032174:	d16f      	bne.n	8032256 <_svfprintf_r+0x12f6>
 8032176:	ae29      	add	r6, sp, #164	@ 0xa4
 8032178:	ab22      	add	r3, sp, #136	@ 0x88
 803217a:	6033      	str	r3, [r6, #0]
 803217c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803217e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8032180:	6073      	str	r3, [r6, #4]
 8032182:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8032184:	4413      	add	r3, r2
 8032186:	9328      	str	r3, [sp, #160]	@ 0xa0
 8032188:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803218a:	3301      	adds	r3, #1
 803218c:	2b07      	cmp	r3, #7
 803218e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8032190:	f73f ada0 	bgt.w	8031cd4 <_svfprintf_r+0xd74>
 8032194:	f106 0408 	add.w	r4, r6, #8
 8032198:	f7ff baec 	b.w	8031774 <_svfprintf_r+0x814>
 803219c:	9803      	ldr	r0, [sp, #12]
 803219e:	aa26      	add	r2, sp, #152	@ 0x98
 80321a0:	4659      	mov	r1, fp
 80321a2:	f7fd fa65 	bl	802f670 <__ssprint_r>
 80321a6:	2800      	cmp	r0, #0
 80321a8:	d155      	bne.n	8032256 <_svfprintf_r+0x12f6>
 80321aa:	ae29      	add	r6, sp, #164	@ 0xa4
 80321ac:	e7c3      	b.n	8032136 <_svfprintf_r+0x11d6>
 80321ae:	9b04      	ldr	r3, [sp, #16]
 80321b0:	2b01      	cmp	r3, #1
 80321b2:	dde1      	ble.n	8032178 <_svfprintf_r+0x1218>
 80321b4:	4f57      	ldr	r7, [pc, #348]	@ (8032314 <_svfprintf_r+0x13b4>)
 80321b6:	f04f 0810 	mov.w	r8, #16
 80321ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80321be:	2c10      	cmp	r4, #16
 80321c0:	f103 0301 	add.w	r3, r3, #1
 80321c4:	f106 0108 	add.w	r1, r6, #8
 80321c8:	6037      	str	r7, [r6, #0]
 80321ca:	dc07      	bgt.n	80321dc <_svfprintf_r+0x127c>
 80321cc:	6074      	str	r4, [r6, #4]
 80321ce:	2b07      	cmp	r3, #7
 80321d0:	4414      	add	r4, r2
 80321d2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 80321d6:	dcc7      	bgt.n	8032168 <_svfprintf_r+0x1208>
 80321d8:	460e      	mov	r6, r1
 80321da:	e7cd      	b.n	8032178 <_svfprintf_r+0x1218>
 80321dc:	3210      	adds	r2, #16
 80321de:	2b07      	cmp	r3, #7
 80321e0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80321e4:	f8c6 8004 	str.w	r8, [r6, #4]
 80321e8:	dd06      	ble.n	80321f8 <_svfprintf_r+0x1298>
 80321ea:	9803      	ldr	r0, [sp, #12]
 80321ec:	aa26      	add	r2, sp, #152	@ 0x98
 80321ee:	4659      	mov	r1, fp
 80321f0:	f7fd fa3e 	bl	802f670 <__ssprint_r>
 80321f4:	bb78      	cbnz	r0, 8032256 <_svfprintf_r+0x12f6>
 80321f6:	a929      	add	r1, sp, #164	@ 0xa4
 80321f8:	3c10      	subs	r4, #16
 80321fa:	460e      	mov	r6, r1
 80321fc:	e7dd      	b.n	80321ba <_svfprintf_r+0x125a>
 80321fe:	2101      	movs	r1, #1
 8032200:	2a07      	cmp	r2, #7
 8032202:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8032206:	f8c4 9000 	str.w	r9, [r4]
 803220a:	6061      	str	r1, [r4, #4]
 803220c:	ddb4      	ble.n	8032178 <_svfprintf_r+0x1218>
 803220e:	e7ab      	b.n	8032168 <_svfprintf_r+0x1208>
 8032210:	3608      	adds	r6, #8
 8032212:	e7b1      	b.n	8032178 <_svfprintf_r+0x1218>
 8032214:	460c      	mov	r4, r1
 8032216:	f7ff baad 	b.w	8031774 <_svfprintf_r+0x814>
 803221a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803221c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803221e:	1a9d      	subs	r5, r3, r2
 8032220:	2d00      	cmp	r5, #0
 8032222:	f77f aaaa 	ble.w	803177a <_svfprintf_r+0x81a>
 8032226:	4e3c      	ldr	r6, [pc, #240]	@ (8032318 <_svfprintf_r+0x13b8>)
 8032228:	2710      	movs	r7, #16
 803222a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803222e:	2d10      	cmp	r5, #16
 8032230:	f103 0301 	add.w	r3, r3, #1
 8032234:	6026      	str	r6, [r4, #0]
 8032236:	dc18      	bgt.n	803226a <_svfprintf_r+0x130a>
 8032238:	442a      	add	r2, r5
 803223a:	2b07      	cmp	r3, #7
 803223c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032240:	6065      	str	r5, [r4, #4]
 8032242:	f77f aa9a 	ble.w	803177a <_svfprintf_r+0x81a>
 8032246:	9803      	ldr	r0, [sp, #12]
 8032248:	aa26      	add	r2, sp, #152	@ 0x98
 803224a:	4659      	mov	r1, fp
 803224c:	f7fd fa10 	bl	802f670 <__ssprint_r>
 8032250:	2800      	cmp	r0, #0
 8032252:	f43f aa92 	beq.w	803177a <_svfprintf_r+0x81a>
 8032256:	f1ba 0f00 	cmp.w	sl, #0
 803225a:	f43f a89a 	beq.w	8031392 <_svfprintf_r+0x432>
 803225e:	9803      	ldr	r0, [sp, #12]
 8032260:	4651      	mov	r1, sl
 8032262:	f7fc fe43 	bl	802eeec <_free_r>
 8032266:	f7ff b894 	b.w	8031392 <_svfprintf_r+0x432>
 803226a:	3210      	adds	r2, #16
 803226c:	2b07      	cmp	r3, #7
 803226e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8032272:	6067      	str	r7, [r4, #4]
 8032274:	dc02      	bgt.n	803227c <_svfprintf_r+0x131c>
 8032276:	3408      	adds	r4, #8
 8032278:	3d10      	subs	r5, #16
 803227a:	e7d6      	b.n	803222a <_svfprintf_r+0x12ca>
 803227c:	9803      	ldr	r0, [sp, #12]
 803227e:	aa26      	add	r2, sp, #152	@ 0x98
 8032280:	4659      	mov	r1, fp
 8032282:	f7fd f9f5 	bl	802f670 <__ssprint_r>
 8032286:	2800      	cmp	r0, #0
 8032288:	d1e5      	bne.n	8032256 <_svfprintf_r+0x12f6>
 803228a:	ac29      	add	r4, sp, #164	@ 0xa4
 803228c:	e7f4      	b.n	8032278 <_svfprintf_r+0x1318>
 803228e:	9803      	ldr	r0, [sp, #12]
 8032290:	4651      	mov	r1, sl
 8032292:	f7fc fe2b 	bl	802eeec <_free_r>
 8032296:	f7ff ba88 	b.w	80317aa <_svfprintf_r+0x84a>
 803229a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803229c:	2b00      	cmp	r3, #0
 803229e:	f43f a878 	beq.w	8031392 <_svfprintf_r+0x432>
 80322a2:	9803      	ldr	r0, [sp, #12]
 80322a4:	aa26      	add	r2, sp, #152	@ 0x98
 80322a6:	4659      	mov	r1, fp
 80322a8:	f7fd f9e2 	bl	802f670 <__ssprint_r>
 80322ac:	f7ff b871 	b.w	8031392 <_svfprintf_r+0x432>
 80322b0:	ea56 0207 	orrs.w	r2, r6, r7
 80322b4:	9508      	str	r5, [sp, #32]
 80322b6:	f43f ab7a 	beq.w	80319ae <_svfprintf_r+0xa4e>
 80322ba:	2b01      	cmp	r3, #1
 80322bc:	f43f abfb 	beq.w	8031ab6 <_svfprintf_r+0xb56>
 80322c0:	2b02      	cmp	r3, #2
 80322c2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 80322c6:	f43f ac3f 	beq.w	8031b48 <_svfprintf_r+0xbe8>
 80322ca:	f006 0307 	and.w	r3, r6, #7
 80322ce:	08f6      	lsrs	r6, r6, #3
 80322d0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80322d4:	08ff      	lsrs	r7, r7, #3
 80322d6:	3330      	adds	r3, #48	@ 0x30
 80322d8:	ea56 0107 	orrs.w	r1, r6, r7
 80322dc:	464a      	mov	r2, r9
 80322de:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80322e2:	d1f2      	bne.n	80322ca <_svfprintf_r+0x136a>
 80322e4:	9908      	ldr	r1, [sp, #32]
 80322e6:	07c8      	lsls	r0, r1, #31
 80322e8:	d506      	bpl.n	80322f8 <_svfprintf_r+0x1398>
 80322ea:	2b30      	cmp	r3, #48	@ 0x30
 80322ec:	d004      	beq.n	80322f8 <_svfprintf_r+0x1398>
 80322ee:	2330      	movs	r3, #48	@ 0x30
 80322f0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80322f4:	f1a2 0902 	sub.w	r9, r2, #2
 80322f8:	ab52      	add	r3, sp, #328	@ 0x148
 80322fa:	9d08      	ldr	r5, [sp, #32]
 80322fc:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8032300:	f04f 0a00 	mov.w	sl, #0
 8032304:	eba3 0809 	sub.w	r8, r3, r9
 8032308:	4657      	mov	r7, sl
 803230a:	f8cd a020 	str.w	sl, [sp, #32]
 803230e:	4656      	mov	r6, sl
 8032310:	f7ff b97c 	b.w	803160c <_svfprintf_r+0x6ac>
 8032314:	0803c5b2 	.word	0x0803c5b2
 8032318:	0803c5c2 	.word	0x0803c5c2

0803231c <__swhatbuf_r>:
 803231c:	b570      	push	{r4, r5, r6, lr}
 803231e:	460c      	mov	r4, r1
 8032320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032324:	2900      	cmp	r1, #0
 8032326:	b096      	sub	sp, #88	@ 0x58
 8032328:	4615      	mov	r5, r2
 803232a:	461e      	mov	r6, r3
 803232c:	da07      	bge.n	803233e <__swhatbuf_r+0x22>
 803232e:	89a1      	ldrh	r1, [r4, #12]
 8032330:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8032334:	d117      	bne.n	8032366 <__swhatbuf_r+0x4a>
 8032336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803233a:	4608      	mov	r0, r1
 803233c:	e00f      	b.n	803235e <__swhatbuf_r+0x42>
 803233e:	466a      	mov	r2, sp
 8032340:	f003 f892 	bl	8035468 <_fstat_r>
 8032344:	2800      	cmp	r0, #0
 8032346:	dbf2      	blt.n	803232e <__swhatbuf_r+0x12>
 8032348:	9901      	ldr	r1, [sp, #4]
 803234a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803234e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8032352:	4259      	negs	r1, r3
 8032354:	4159      	adcs	r1, r3
 8032356:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 803235a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803235e:	6031      	str	r1, [r6, #0]
 8032360:	602b      	str	r3, [r5, #0]
 8032362:	b016      	add	sp, #88	@ 0x58
 8032364:	bd70      	pop	{r4, r5, r6, pc}
 8032366:	2100      	movs	r1, #0
 8032368:	2340      	movs	r3, #64	@ 0x40
 803236a:	e7e6      	b.n	803233a <__swhatbuf_r+0x1e>

0803236c <__smakebuf_r>:
 803236c:	898b      	ldrh	r3, [r1, #12]
 803236e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8032370:	079d      	lsls	r5, r3, #30
 8032372:	4606      	mov	r6, r0
 8032374:	460c      	mov	r4, r1
 8032376:	d507      	bpl.n	8032388 <__smakebuf_r+0x1c>
 8032378:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 803237c:	6023      	str	r3, [r4, #0]
 803237e:	6123      	str	r3, [r4, #16]
 8032380:	2301      	movs	r3, #1
 8032382:	6163      	str	r3, [r4, #20]
 8032384:	b003      	add	sp, #12
 8032386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032388:	ab01      	add	r3, sp, #4
 803238a:	466a      	mov	r2, sp
 803238c:	f7ff ffc6 	bl	803231c <__swhatbuf_r>
 8032390:	9f00      	ldr	r7, [sp, #0]
 8032392:	4605      	mov	r5, r0
 8032394:	4639      	mov	r1, r7
 8032396:	4630      	mov	r0, r6
 8032398:	f7fc fec0 	bl	802f11c <_malloc_r>
 803239c:	b948      	cbnz	r0, 80323b2 <__smakebuf_r+0x46>
 803239e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80323a2:	059a      	lsls	r2, r3, #22
 80323a4:	d4ee      	bmi.n	8032384 <__smakebuf_r+0x18>
 80323a6:	f023 0303 	bic.w	r3, r3, #3
 80323aa:	f043 0302 	orr.w	r3, r3, #2
 80323ae:	81a3      	strh	r3, [r4, #12]
 80323b0:	e7e2      	b.n	8032378 <__smakebuf_r+0xc>
 80323b2:	89a3      	ldrh	r3, [r4, #12]
 80323b4:	6020      	str	r0, [r4, #0]
 80323b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80323ba:	81a3      	strh	r3, [r4, #12]
 80323bc:	9b01      	ldr	r3, [sp, #4]
 80323be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80323c2:	b15b      	cbz	r3, 80323dc <__smakebuf_r+0x70>
 80323c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80323c8:	4630      	mov	r0, r6
 80323ca:	f003 f85f 	bl	803548c <_isatty_r>
 80323ce:	b128      	cbz	r0, 80323dc <__smakebuf_r+0x70>
 80323d0:	89a3      	ldrh	r3, [r4, #12]
 80323d2:	f023 0303 	bic.w	r3, r3, #3
 80323d6:	f043 0301 	orr.w	r3, r3, #1
 80323da:	81a3      	strh	r3, [r4, #12]
 80323dc:	89a3      	ldrh	r3, [r4, #12]
 80323de:	431d      	orrs	r5, r3
 80323e0:	81a5      	strh	r5, [r4, #12]
 80323e2:	e7cf      	b.n	8032384 <__smakebuf_r+0x18>

080323e4 <__ssvfscanf_r>:
 80323e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80323e8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80323ec:	461d      	mov	r5, r3
 80323ee:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80323f2:	af02      	add	r7, sp, #8
 80323f4:	049e      	lsls	r6, r3, #18
 80323f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80323f8:	460c      	mov	r4, r1
 80323fa:	617a      	str	r2, [r7, #20]
 80323fc:	d406      	bmi.n	803240c <__ssvfscanf_r+0x28>
 80323fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032402:	818b      	strh	r3, [r1, #12]
 8032404:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8032406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803240a:	664b      	str	r3, [r1, #100]	@ 0x64
 803240c:	2300      	movs	r3, #0
 803240e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8032412:	61bb      	str	r3, [r7, #24]
 8032414:	637b      	str	r3, [r7, #52]	@ 0x34
 8032416:	633b      	str	r3, [r7, #48]	@ 0x30
 8032418:	627b      	str	r3, [r7, #36]	@ 0x24
 803241a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803241e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8032424:	2b00      	cmp	r3, #0
 8032426:	f000 80d3 	beq.w	80325d0 <__ssvfscanf_r+0x1ec>
 803242a:	4a84      	ldr	r2, [pc, #528]	@ (803263c <__ssvfscanf_r+0x258>)
 803242c:	5cd6      	ldrb	r6, [r2, r3]
 803242e:	f016 0608 	ands.w	r6, r6, #8
 8032432:	d01b      	beq.n	803246c <__ssvfscanf_r+0x88>
 8032434:	6863      	ldr	r3, [r4, #4]
 8032436:	2b00      	cmp	r3, #0
 8032438:	dd08      	ble.n	803244c <__ssvfscanf_r+0x68>
 803243a:	6823      	ldr	r3, [r4, #0]
 803243c:	497f      	ldr	r1, [pc, #508]	@ (803263c <__ssvfscanf_r+0x258>)
 803243e:	781a      	ldrb	r2, [r3, #0]
 8032440:	5c8a      	ldrb	r2, [r1, r2]
 8032442:	0710      	lsls	r0, r2, #28
 8032444:	d409      	bmi.n	803245a <__ssvfscanf_r+0x76>
 8032446:	f8c7 8014 	str.w	r8, [r7, #20]
 803244a:	e7e6      	b.n	803241a <__ssvfscanf_r+0x36>
 803244c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803244e:	4621      	mov	r1, r4
 8032450:	f7fd fe13 	bl	803007a <__ssrefill_r>
 8032454:	2800      	cmp	r0, #0
 8032456:	d0f0      	beq.n	803243a <__ssvfscanf_r+0x56>
 8032458:	e7f5      	b.n	8032446 <__ssvfscanf_r+0x62>
 803245a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803245c:	3201      	adds	r2, #1
 803245e:	633a      	str	r2, [r7, #48]	@ 0x30
 8032460:	6862      	ldr	r2, [r4, #4]
 8032462:	3301      	adds	r3, #1
 8032464:	3a01      	subs	r2, #1
 8032466:	6062      	str	r2, [r4, #4]
 8032468:	6023      	str	r3, [r4, #0]
 803246a:	e7e3      	b.n	8032434 <__ssvfscanf_r+0x50>
 803246c:	2b25      	cmp	r3, #37	@ 0x25
 803246e:	d163      	bne.n	8032538 <__ssvfscanf_r+0x154>
 8032470:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8032472:	4642      	mov	r2, r8
 8032474:	f812 3b01 	ldrb.w	r3, [r2], #1
 8032478:	617a      	str	r2, [r7, #20]
 803247a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803247e:	2a55      	cmp	r2, #85	@ 0x55
 8032480:	f200 816e 	bhi.w	8032760 <__ssvfscanf_r+0x37c>
 8032484:	e8df f012 	tbh	[pc, r2, lsl #1]
 8032488:	016c0056 	.word	0x016c0056
 803248c:	016c016c 	.word	0x016c016c
 8032490:	007d016c 	.word	0x007d016c
 8032494:	016c016c 	.word	0x016c016c
 8032498:	016c016c 	.word	0x016c016c
 803249c:	00b9016c 	.word	0x00b9016c
 80324a0:	00b900b9 	.word	0x00b900b9
 80324a4:	00b900b9 	.word	0x00b900b9
 80324a8:	00b900b9 	.word	0x00b900b9
 80324ac:	00b900b9 	.word	0x00b900b9
 80324b0:	016c00b9 	.word	0x016c00b9
 80324b4:	016c016c 	.word	0x016c016c
 80324b8:	016c016c 	.word	0x016c016c
 80324bc:	016c016c 	.word	0x016c016c
 80324c0:	016c00e0 	.word	0x016c00e0
 80324c4:	00c3010a 	.word	0x00c3010a
 80324c8:	00e000e0 	.word	0x00e000e0
 80324cc:	016c00e0 	.word	0x016c00e0
 80324d0:	016c016c 	.word	0x016c016c
 80324d4:	00a2016c 	.word	0x00a2016c
 80324d8:	016c016c 	.word	0x016c016c
 80324dc:	016c00c7 	.word	0x016c00c7
 80324e0:	016c016c 	.word	0x016c016c
 80324e4:	016c00fa 	.word	0x016c00fa
 80324e8:	016c016c 	.word	0x016c016c
 80324ec:	00d4016c 	.word	0x00d4016c
 80324f0:	016c016c 	.word	0x016c016c
 80324f4:	016c00ff 	.word	0x016c00ff
 80324f8:	016c016c 	.word	0x016c016c
 80324fc:	016c016c 	.word	0x016c016c
 8032500:	016c00e0 	.word	0x016c00e0
 8032504:	00c5010c 	.word	0x00c5010c
 8032508:	00e000e0 	.word	0x00e000e0
 803250c:	009400e0 	.word	0x009400e0
 8032510:	00a20130 	.word	0x00a20130
 8032514:	0085016c 	.word	0x0085016c
 8032518:	011400ac 	.word	0x011400ac
 803251c:	011100c9 	.word	0x011100c9
 8032520:	016c016c 	.word	0x016c016c
 8032524:	00a900fc 	.word	0x00a900fc
 8032528:	016c00d0 	.word	0x016c00d0
 803252c:	00d4016c 	.word	0x00d4016c
 8032530:	00a9016c 	.word	0x00a9016c
 8032534:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032538:	6863      	ldr	r3, [r4, #4]
 803253a:	2b00      	cmp	r3, #0
 803253c:	dd0e      	ble.n	803255c <__ssvfscanf_r+0x178>
 803253e:	6823      	ldr	r3, [r4, #0]
 8032540:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8032544:	7819      	ldrb	r1, [r3, #0]
 8032546:	4291      	cmp	r1, r2
 8032548:	d142      	bne.n	80325d0 <__ssvfscanf_r+0x1ec>
 803254a:	3301      	adds	r3, #1
 803254c:	6862      	ldr	r2, [r4, #4]
 803254e:	6023      	str	r3, [r4, #0]
 8032550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032552:	3a01      	subs	r2, #1
 8032554:	3301      	adds	r3, #1
 8032556:	6062      	str	r2, [r4, #4]
 8032558:	633b      	str	r3, [r7, #48]	@ 0x30
 803255a:	e774      	b.n	8032446 <__ssvfscanf_r+0x62>
 803255c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803255e:	4621      	mov	r1, r4
 8032560:	f7fd fd8b 	bl	803007a <__ssrefill_r>
 8032564:	2800      	cmp	r0, #0
 8032566:	d0ea      	beq.n	803253e <__ssvfscanf_r+0x15a>
 8032568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803256a:	b113      	cbz	r3, 8032572 <__ssvfscanf_r+0x18e>
 803256c:	89a3      	ldrh	r3, [r4, #12]
 803256e:	065b      	lsls	r3, r3, #25
 8032570:	d52e      	bpl.n	80325d0 <__ssvfscanf_r+0x1ec>
 8032572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032574:	2b00      	cmp	r3, #0
 8032576:	f041 809d 	bne.w	80336b4 <__ssvfscanf_r+0x12d0>
 803257a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803257e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032580:	e0f9      	b.n	8032776 <__ssvfscanf_r+0x392>
 8032582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032584:	4333      	orrs	r3, r6
 8032586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032588:	d122      	bne.n	80325d0 <__ssvfscanf_r+0x1ec>
 803258a:	2610      	movs	r6, #16
 803258c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032590:	e76f      	b.n	8032472 <__ssvfscanf_r+0x8e>
 8032592:	0731      	lsls	r1, r6, #28
 8032594:	d11c      	bne.n	80325d0 <__ssvfscanf_r+0x1ec>
 8032596:	f898 3001 	ldrb.w	r3, [r8, #1]
 803259a:	2b6c      	cmp	r3, #108	@ 0x6c
 803259c:	d105      	bne.n	80325aa <__ssvfscanf_r+0x1c6>
 803259e:	f108 0302 	add.w	r3, r8, #2
 80325a2:	617b      	str	r3, [r7, #20]
 80325a4:	f046 0602 	orr.w	r6, r6, #2
 80325a8:	e7f0      	b.n	803258c <__ssvfscanf_r+0x1a8>
 80325aa:	f046 0601 	orr.w	r6, r6, #1
 80325ae:	e7ed      	b.n	803258c <__ssvfscanf_r+0x1a8>
 80325b0:	0732      	lsls	r2, r6, #28
 80325b2:	d10d      	bne.n	80325d0 <__ssvfscanf_r+0x1ec>
 80325b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80325b8:	2b68      	cmp	r3, #104	@ 0x68
 80325ba:	bf03      	ittte	eq
 80325bc:	f108 0302 	addeq.w	r3, r8, #2
 80325c0:	617b      	streq	r3, [r7, #20]
 80325c2:	f046 0608 	orreq.w	r6, r6, #8
 80325c6:	f046 0604 	orrne.w	r6, r6, #4
 80325ca:	e7df      	b.n	803258c <__ssvfscanf_r+0x1a8>
 80325cc:	0733      	lsls	r3, r6, #28
 80325ce:	d0e9      	beq.n	80325a4 <__ssvfscanf_r+0x1c0>
 80325d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325d2:	2b00      	cmp	r3, #0
 80325d4:	f000 80cf 	beq.w	8032776 <__ssvfscanf_r+0x392>
 80325d8:	e0c8      	b.n	803276c <__ssvfscanf_r+0x388>
 80325da:	0730      	lsls	r0, r6, #28
 80325dc:	d0d6      	beq.n	803258c <__ssvfscanf_r+0x1a8>
 80325de:	e7f7      	b.n	80325d0 <__ssvfscanf_r+0x1ec>
 80325e0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80325e4:	d1f4      	bne.n	80325d0 <__ssvfscanf_r+0x1ec>
 80325e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80325e8:	b922      	cbnz	r2, 80325f4 <__ssvfscanf_r+0x210>
 80325ea:	b082      	sub	sp, #8
 80325ec:	aa02      	add	r2, sp, #8
 80325ee:	e9c2 3300 	strd	r3, r3, [r2]
 80325f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80325f4:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80325f8:	e7c8      	b.n	803258c <__ssvfscanf_r+0x1a8>
 80325fa:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 80325fe:	d1e7      	bne.n	80325d0 <__ssvfscanf_r+0x1ec>
 8032600:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032602:	220a      	movs	r2, #10
 8032604:	fb02 3301 	mla	r3, r2, r1, r3
 8032608:	3b30      	subs	r3, #48	@ 0x30
 803260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803260c:	e7be      	b.n	803258c <__ssvfscanf_r+0x1a8>
 803260e:	f046 0601 	orr.w	r6, r6, #1
 8032612:	4b0b      	ldr	r3, [pc, #44]	@ (8032640 <__ssvfscanf_r+0x25c>)
 8032614:	e009      	b.n	803262a <__ssvfscanf_r+0x246>
 8032616:	f046 0601 	orr.w	r6, r6, #1
 803261a:	4b0a      	ldr	r3, [pc, #40]	@ (8032644 <__ssvfscanf_r+0x260>)
 803261c:	61bb      	str	r3, [r7, #24]
 803261e:	2308      	movs	r3, #8
 8032620:	61fb      	str	r3, [r7, #28]
 8032622:	f04f 0803 	mov.w	r8, #3
 8032626:	e011      	b.n	803264c <__ssvfscanf_r+0x268>
 8032628:	4b06      	ldr	r3, [pc, #24]	@ (8032644 <__ssvfscanf_r+0x260>)
 803262a:	61bb      	str	r3, [r7, #24]
 803262c:	230a      	movs	r3, #10
 803262e:	e7f7      	b.n	8032620 <__ssvfscanf_r+0x23c>
 8032630:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8032634:	4b03      	ldr	r3, [pc, #12]	@ (8032644 <__ssvfscanf_r+0x260>)
 8032636:	61bb      	str	r3, [r7, #24]
 8032638:	2310      	movs	r3, #16
 803263a:	e7f1      	b.n	8032620 <__ssvfscanf_r+0x23c>
 803263c:	0803c3f9 	.word	0x0803c3f9
 8032640:	0802c379 	.word	0x0802c379
 8032644:	08035179 	.word	0x08035179
 8032648:	f04f 0804 	mov.w	r8, #4
 803264c:	6863      	ldr	r3, [r4, #4]
 803264e:	2b00      	cmp	r3, #0
 8032650:	dd4e      	ble.n	80326f0 <__ssvfscanf_r+0x30c>
 8032652:	0673      	lsls	r3, r6, #25
 8032654:	d407      	bmi.n	8032666 <__ssvfscanf_r+0x282>
 8032656:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8032954 <__ssvfscanf_r+0x570>
 803265a:	6823      	ldr	r3, [r4, #0]
 803265c:	781a      	ldrb	r2, [r3, #0]
 803265e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8032662:	0710      	lsls	r0, r2, #28
 8032664:	d44b      	bmi.n	80326fe <__ssvfscanf_r+0x31a>
 8032666:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803266a:	f1b8 0f03 	cmp.w	r8, #3
 803266e:	d858      	bhi.n	8032722 <__ssvfscanf_r+0x33e>
 8032670:	e8df f018 	tbh	[pc, r8, lsl #1]
 8032674:	037801c1 	.word	0x037801c1
 8032678:	05f30514 	.word	0x05f30514
 803267c:	f046 0601 	orr.w	r6, r6, #1
 8032680:	f04f 0802 	mov.w	r8, #2
 8032684:	e7e2      	b.n	803264c <__ssvfscanf_r+0x268>
 8032686:	6979      	ldr	r1, [r7, #20]
 8032688:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 803268c:	f001 fd1d 	bl	80340ca <__sccl>
 8032690:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8032694:	6178      	str	r0, [r7, #20]
 8032696:	f04f 0801 	mov.w	r8, #1
 803269a:	e7d7      	b.n	803264c <__ssvfscanf_r+0x268>
 803269c:	f046 0601 	orr.w	r6, r6, #1
 80326a0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80326a4:	f04f 0800 	mov.w	r8, #0
 80326a8:	e7d0      	b.n	803264c <__ssvfscanf_r+0x268>
 80326aa:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 80326ae:	e7c1      	b.n	8032634 <__ssvfscanf_r+0x250>
 80326b0:	06f1      	lsls	r1, r6, #27
 80326b2:	f53f aeb2 	bmi.w	803241a <__ssvfscanf_r+0x36>
 80326b6:	0732      	lsls	r2, r6, #28
 80326b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80326bc:	d502      	bpl.n	80326c4 <__ssvfscanf_r+0x2e0>
 80326be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80326c0:	701a      	strb	r2, [r3, #0]
 80326c2:	e6aa      	b.n	803241a <__ssvfscanf_r+0x36>
 80326c4:	0770      	lsls	r0, r6, #29
 80326c6:	d502      	bpl.n	80326ce <__ssvfscanf_r+0x2ea>
 80326c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80326ca:	801a      	strh	r2, [r3, #0]
 80326cc:	e6a5      	b.n	803241a <__ssvfscanf_r+0x36>
 80326ce:	07f1      	lsls	r1, r6, #31
 80326d0:	d502      	bpl.n	80326d8 <__ssvfscanf_r+0x2f4>
 80326d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80326d4:	601a      	str	r2, [r3, #0]
 80326d6:	e6a0      	b.n	803241a <__ssvfscanf_r+0x36>
 80326d8:	07b2      	lsls	r2, r6, #30
 80326da:	d5fa      	bpl.n	80326d2 <__ssvfscanf_r+0x2ee>
 80326dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80326de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80326e0:	17d2      	asrs	r2, r2, #31
 80326e2:	e9c3 1200 	strd	r1, r2, [r3]
 80326e6:	e698      	b.n	803241a <__ssvfscanf_r+0x36>
 80326e8:	4b99      	ldr	r3, [pc, #612]	@ (8032950 <__ssvfscanf_r+0x56c>)
 80326ea:	61bb      	str	r3, [r7, #24]
 80326ec:	2300      	movs	r3, #0
 80326ee:	e797      	b.n	8032620 <__ssvfscanf_r+0x23c>
 80326f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80326f2:	4621      	mov	r1, r4
 80326f4:	f7fd fcc1 	bl	803007a <__ssrefill_r>
 80326f8:	2800      	cmp	r0, #0
 80326fa:	d0aa      	beq.n	8032652 <__ssvfscanf_r+0x26e>
 80326fc:	e734      	b.n	8032568 <__ssvfscanf_r+0x184>
 80326fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032700:	3201      	adds	r2, #1
 8032702:	633a      	str	r2, [r7, #48]	@ 0x30
 8032704:	6862      	ldr	r2, [r4, #4]
 8032706:	3a01      	subs	r2, #1
 8032708:	2a00      	cmp	r2, #0
 803270a:	6062      	str	r2, [r4, #4]
 803270c:	dd02      	ble.n	8032714 <__ssvfscanf_r+0x330>
 803270e:	3301      	adds	r3, #1
 8032710:	6023      	str	r3, [r4, #0]
 8032712:	e7a2      	b.n	803265a <__ssvfscanf_r+0x276>
 8032714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032716:	4621      	mov	r1, r4
 8032718:	f7fd fcaf 	bl	803007a <__ssrefill_r>
 803271c:	2800      	cmp	r0, #0
 803271e:	d09c      	beq.n	803265a <__ssvfscanf_r+0x276>
 8032720:	e722      	b.n	8032568 <__ssvfscanf_r+0x184>
 8032722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032724:	2b01      	cmp	r3, #1
 8032726:	bf38      	it	cc
 8032728:	2301      	movcc	r3, #1
 803272a:	4698      	mov	r8, r3
 803272c:	f016 0301 	ands.w	r3, r6, #1
 8032730:	f006 0b10 	and.w	fp, r6, #16
 8032734:	f000 80eb 	beq.w	803290e <__ssvfscanf_r+0x52a>
 8032738:	f1bb 0f00 	cmp.w	fp, #0
 803273c:	f040 8085 	bne.w	803284a <__ssvfscanf_r+0x466>
 8032740:	462b      	mov	r3, r5
 8032742:	0631      	lsls	r1, r6, #24
 8032744:	f853 5b04 	ldr.w	r5, [r3], #4
 8032748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803274a:	f140 8085 	bpl.w	8032858 <__ssvfscanf_r+0x474>
 803274e:	b13d      	cbz	r5, 8032760 <__ssvfscanf_r+0x37c>
 8032750:	2080      	movs	r0, #128	@ 0x80
 8032752:	f7fc fcd3 	bl	802f0fc <malloc>
 8032756:	4606      	mov	r6, r0
 8032758:	b998      	cbnz	r0, 8032782 <__ssvfscanf_r+0x39e>
 803275a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803275e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032762:	b143      	cbz	r3, 8032776 <__ssvfscanf_r+0x392>
 8032764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032766:	3301      	adds	r3, #1
 8032768:	f000 87a4 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 803276c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803276e:	6818      	ldr	r0, [r3, #0]
 8032770:	b108      	cbz	r0, 8032776 <__ssvfscanf_r+0x392>
 8032772:	f7fc fccb 	bl	802f10c <free>
 8032776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8032778:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 803277c:	46bd      	mov	sp, r7
 803277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032784:	6028      	str	r0, [r5, #0]
 8032786:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803278a:	889b      	ldrh	r3, [r3, #4]
 803278c:	4599      	cmp	r9, r3
 803278e:	d314      	bcc.n	80327ba <__ssvfscanf_r+0x3d6>
 8032790:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032794:	4293      	cmp	r3, r2
 8032796:	f200 878d 	bhi.w	80336b4 <__ssvfscanf_r+0x12d0>
 803279a:	3308      	adds	r3, #8
 803279c:	fa1f fa83 	uxth.w	sl, r3
 80327a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327a2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80327a6:	6818      	ldr	r0, [r3, #0]
 80327a8:	f001 fc32 	bl	8034010 <realloc>
 80327ac:	2800      	cmp	r0, #0
 80327ae:	f000 8781 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 80327b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327b4:	6018      	str	r0, [r3, #0]
 80327b6:	f8a3 a004 	strh.w	sl, [r3, #4]
 80327ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80327bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80327be:	681b      	ldr	r3, [r3, #0]
 80327c0:	f109 0201 	add.w	r2, r9, #1
 80327c4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80327c8:	46aa      	mov	sl, r5
 80327ca:	80ca      	strh	r2, [r1, #6]
 80327cc:	4635      	mov	r5, r6
 80327ce:	f04f 0920 	mov.w	r9, #32
 80327d2:	2200      	movs	r2, #0
 80327d4:	613a      	str	r2, [r7, #16]
 80327d6:	f7fb fbd3 	bl	802df80 <__locale_mb_cur_max>
 80327da:	693a      	ldr	r2, [r7, #16]
 80327dc:	4290      	cmp	r0, r2
 80327de:	f43f aec3 	beq.w	8032568 <__ssvfscanf_r+0x184>
 80327e2:	6821      	ldr	r1, [r4, #0]
 80327e4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 80327e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80327ec:	f80c 0002 	strb.w	r0, [ip, r2]
 80327f0:	1c53      	adds	r3, r2, #1
 80327f2:	6862      	ldr	r2, [r4, #4]
 80327f4:	3a01      	subs	r2, #1
 80327f6:	e9c4 1200 	strd	r1, r2, [r4]
 80327fa:	6a3a      	ldr	r2, [r7, #32]
 80327fc:	2a03      	cmp	r2, #3
 80327fe:	d102      	bne.n	8032806 <__ssvfscanf_r+0x422>
 8032800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032802:	2a04      	cmp	r2, #4
 8032804:	d007      	beq.n	8032816 <__ssvfscanf_r+0x432>
 8032806:	2208      	movs	r2, #8
 8032808:	2100      	movs	r1, #0
 803280a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803280e:	623b      	str	r3, [r7, #32]
 8032810:	f7fa fa2e 	bl	802cc70 <memset>
 8032814:	6a3b      	ldr	r3, [r7, #32]
 8032816:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803281a:	9200      	str	r2, [sp, #0]
 803281c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803281e:	613b      	str	r3, [r7, #16]
 8032820:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032824:	4629      	mov	r1, r5
 8032826:	f002 ffad 	bl	8035784 <_mbrtowc_r>
 803282a:	1c42      	adds	r2, r0, #1
 803282c:	6238      	str	r0, [r7, #32]
 803282e:	f43f ae9b 	beq.w	8032568 <__ssvfscanf_r+0x184>
 8032832:	693b      	ldr	r3, [r7, #16]
 8032834:	b9b8      	cbnz	r0, 8032866 <__ssvfscanf_r+0x482>
 8032836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032838:	441a      	add	r2, r3
 803283a:	4613      	mov	r3, r2
 803283c:	f1bb 0f00 	cmp.w	fp, #0
 8032840:	d00e      	beq.n	8032860 <__ssvfscanf_r+0x47c>
 8032842:	633b      	str	r3, [r7, #48]	@ 0x30
 8032844:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8032848:	e019      	b.n	803287e <__ssvfscanf_r+0x49a>
 803284a:	f04f 0900 	mov.w	r9, #0
 803284e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8032850:	464e      	mov	r6, r9
 8032852:	46ca      	mov	sl, r9
 8032854:	464d      	mov	r5, r9
 8032856:	e7bc      	b.n	80327d2 <__ssvfscanf_r+0x3ee>
 8032858:	46d9      	mov	r9, fp
 803285a:	465e      	mov	r6, fp
 803285c:	46da      	mov	sl, fp
 803285e:	e7b8      	b.n	80327d2 <__ssvfscanf_r+0x3ee>
 8032860:	f8c5 b000 	str.w	fp, [r5]
 8032864:	e7ed      	b.n	8032842 <__ssvfscanf_r+0x45e>
 8032866:	6a3a      	ldr	r2, [r7, #32]
 8032868:	3202      	adds	r2, #2
 803286a:	d025      	beq.n	80328b8 <__ssvfscanf_r+0x4d4>
 803286c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803286e:	441a      	add	r2, r3
 8032870:	6a3b      	ldr	r3, [r7, #32]
 8032872:	633a      	str	r2, [r7, #48]	@ 0x30
 8032874:	2b03      	cmp	r3, #3
 8032876:	d1e5      	bne.n	8032844 <__ssvfscanf_r+0x460>
 8032878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803287a:	2b04      	cmp	r3, #4
 803287c:	d1e2      	bne.n	8032844 <__ssvfscanf_r+0x460>
 803287e:	f1bb 0f00 	cmp.w	fp, #0
 8032882:	d117      	bne.n	80328b4 <__ssvfscanf_r+0x4d0>
 8032884:	f1ba 0f00 	cmp.w	sl, #0
 8032888:	d013      	beq.n	80328b2 <__ssvfscanf_r+0x4ce>
 803288a:	1bab      	subs	r3, r5, r6
 803288c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8032890:	d80f      	bhi.n	80328b2 <__ssvfscanf_r+0x4ce>
 8032892:	4630      	mov	r0, r6
 8032894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032898:	613b      	str	r3, [r7, #16]
 803289a:	f001 fbb9 	bl	8034010 <realloc>
 803289e:	4606      	mov	r6, r0
 80328a0:	2800      	cmp	r0, #0
 80328a2:	f43f af5a 	beq.w	803275a <__ssvfscanf_r+0x376>
 80328a6:	693b      	ldr	r3, [r7, #16]
 80328a8:	f8ca 0000 	str.w	r0, [sl]
 80328ac:	18c5      	adds	r5, r0, r3
 80328ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80328b2:	3504      	adds	r5, #4
 80328b4:	2200      	movs	r2, #0
 80328b6:	e000      	b.n	80328ba <__ssvfscanf_r+0x4d6>
 80328b8:	461a      	mov	r2, r3
 80328ba:	6863      	ldr	r3, [r4, #4]
 80328bc:	2b00      	cmp	r3, #0
 80328be:	dc14      	bgt.n	80328ea <__ssvfscanf_r+0x506>
 80328c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328c2:	613a      	str	r2, [r7, #16]
 80328c4:	4621      	mov	r1, r4
 80328c6:	f7fd fbd8 	bl	803007a <__ssrefill_r>
 80328ca:	693a      	ldr	r2, [r7, #16]
 80328cc:	b168      	cbz	r0, 80328ea <__ssvfscanf_r+0x506>
 80328ce:	2a00      	cmp	r2, #0
 80328d0:	f47f ae4a 	bne.w	8032568 <__ssvfscanf_r+0x184>
 80328d4:	f1ba 0f00 	cmp.w	sl, #0
 80328d8:	d10c      	bne.n	80328f4 <__ssvfscanf_r+0x510>
 80328da:	f1bb 0f00 	cmp.w	fp, #0
 80328de:	d102      	bne.n	80328e6 <__ssvfscanf_r+0x502>
 80328e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80328e2:	3301      	adds	r3, #1
 80328e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80328e6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80328e8:	e597      	b.n	803241a <__ssvfscanf_r+0x36>
 80328ea:	f1b8 0f00 	cmp.w	r8, #0
 80328ee:	f47f af71 	bne.w	80327d4 <__ssvfscanf_r+0x3f0>
 80328f2:	e7ef      	b.n	80328d4 <__ssvfscanf_r+0x4f0>
 80328f4:	1ba9      	subs	r1, r5, r6
 80328f6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80328fa:	d9ee      	bls.n	80328da <__ssvfscanf_r+0x4f6>
 80328fc:	f8da 0000 	ldr.w	r0, [sl]
 8032900:	f001 fb86 	bl	8034010 <realloc>
 8032904:	2800      	cmp	r0, #0
 8032906:	d0e8      	beq.n	80328da <__ssvfscanf_r+0x4f6>
 8032908:	f8ca 0000 	str.w	r0, [sl]
 803290c:	e7e5      	b.n	80328da <__ssvfscanf_r+0x4f6>
 803290e:	f1bb 0f00 	cmp.w	fp, #0
 8032912:	d021      	beq.n	8032958 <__ssvfscanf_r+0x574>
 8032914:	461e      	mov	r6, r3
 8032916:	e9d4 2300 	ldrd	r2, r3, [r4]
 803291a:	4598      	cmp	r8, r3
 803291c:	dd11      	ble.n	8032942 <__ssvfscanf_r+0x55e>
 803291e:	441a      	add	r2, r3
 8032920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032922:	6022      	str	r2, [r4, #0]
 8032924:	4621      	mov	r1, r4
 8032926:	441e      	add	r6, r3
 8032928:	eba8 0803 	sub.w	r8, r8, r3
 803292c:	f7fd fba5 	bl	803007a <__ssrefill_r>
 8032930:	2800      	cmp	r0, #0
 8032932:	d0f0      	beq.n	8032916 <__ssvfscanf_r+0x532>
 8032934:	2e00      	cmp	r6, #0
 8032936:	f43f ae17 	beq.w	8032568 <__ssvfscanf_r+0x184>
 803293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803293c:	4433      	add	r3, r6
 803293e:	633b      	str	r3, [r7, #48]	@ 0x30
 8032940:	e56b      	b.n	803241a <__ssvfscanf_r+0x36>
 8032942:	eba3 0308 	sub.w	r3, r3, r8
 8032946:	4442      	add	r2, r8
 8032948:	4446      	add	r6, r8
 803294a:	6063      	str	r3, [r4, #4]
 803294c:	6022      	str	r2, [r4, #0]
 803294e:	e7f4      	b.n	803293a <__ssvfscanf_r+0x556>
 8032950:	0802c379 	.word	0x0802c379
 8032954:	0803c3f9 	.word	0x0803c3f9
 8032958:	46a9      	mov	r9, r5
 803295a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803295e:	f859 5b04 	ldr.w	r5, [r9], #4
 8032962:	d02c      	beq.n	80329be <__ssvfscanf_r+0x5da>
 8032964:	2d00      	cmp	r5, #0
 8032966:	f43f ae33 	beq.w	80325d0 <__ssvfscanf_r+0x1ec>
 803296a:	4640      	mov	r0, r8
 803296c:	f7fc fbc6 	bl	802f0fc <malloc>
 8032970:	4682      	mov	sl, r0
 8032972:	2800      	cmp	r0, #0
 8032974:	f43f adfd 	beq.w	8032572 <__ssvfscanf_r+0x18e>
 8032978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803297a:	6028      	str	r0, [r5, #0]
 803297c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8032980:	889e      	ldrh	r6, [r3, #4]
 8032982:	45b3      	cmp	fp, r6
 8032984:	d311      	bcc.n	80329aa <__ssvfscanf_r+0x5c6>
 8032986:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803298a:	429e      	cmp	r6, r3
 803298c:	f200 8692 	bhi.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032992:	3608      	adds	r6, #8
 8032994:	b2b6      	uxth	r6, r6
 8032996:	6818      	ldr	r0, [r3, #0]
 8032998:	00b1      	lsls	r1, r6, #2
 803299a:	f001 fb39 	bl	8034010 <realloc>
 803299e:	2800      	cmp	r0, #0
 80329a0:	f000 8688 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 80329a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329a6:	6018      	str	r0, [r3, #0]
 80329a8:	809e      	strh	r6, [r3, #4]
 80329aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80329ae:	681b      	ldr	r3, [r3, #0]
 80329b0:	f10b 0201 	add.w	r2, fp, #1
 80329b4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80329b8:	462e      	mov	r6, r5
 80329ba:	80ca      	strh	r2, [r1, #6]
 80329bc:	4655      	mov	r5, sl
 80329be:	9400      	str	r4, [sp, #0]
 80329c0:	4629      	mov	r1, r5
 80329c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329c4:	4643      	mov	r3, r8
 80329c6:	2201      	movs	r2, #1
 80329c8:	f7fd fb74 	bl	80300b4 <_sfread_r>
 80329cc:	4605      	mov	r5, r0
 80329ce:	2800      	cmp	r0, #0
 80329d0:	f43f adca 	beq.w	8032568 <__ssvfscanf_r+0x184>
 80329d4:	b13e      	cbz	r6, 80329e6 <__ssvfscanf_r+0x602>
 80329d6:	4580      	cmp	r8, r0
 80329d8:	d905      	bls.n	80329e6 <__ssvfscanf_r+0x602>
 80329da:	4601      	mov	r1, r0
 80329dc:	6830      	ldr	r0, [r6, #0]
 80329de:	f001 fb17 	bl	8034010 <realloc>
 80329e2:	b100      	cbz	r0, 80329e6 <__ssvfscanf_r+0x602>
 80329e4:	6030      	str	r0, [r6, #0]
 80329e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80329e8:	442b      	add	r3, r5
 80329ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80329ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80329ee:	3301      	adds	r3, #1
 80329f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80329f2:	464d      	mov	r5, r9
 80329f4:	e511      	b.n	803241a <__ssvfscanf_r+0x36>
 80329f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80329f8:	2b00      	cmp	r3, #0
 80329fa:	bf08      	it	eq
 80329fc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032a00:	f016 0801 	ands.w	r8, r6, #1
 8032a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032a06:	f006 0a10 	and.w	sl, r6, #16
 8032a0a:	f000 8101 	beq.w	8032c10 <__ssvfscanf_r+0x82c>
 8032a0e:	f1ba 0f00 	cmp.w	sl, #0
 8032a12:	f040 80a4 	bne.w	8032b5e <__ssvfscanf_r+0x77a>
 8032a16:	462b      	mov	r3, r5
 8032a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8032a1c:	60fb      	str	r3, [r7, #12]
 8032a1e:	0633      	lsls	r3, r6, #24
 8032a20:	f140 80a5 	bpl.w	8032b6e <__ssvfscanf_r+0x78a>
 8032a24:	2d00      	cmp	r5, #0
 8032a26:	f43f ae9b 	beq.w	8032760 <__ssvfscanf_r+0x37c>
 8032a2a:	2080      	movs	r0, #128	@ 0x80
 8032a2c:	f7fc fb66 	bl	802f0fc <malloc>
 8032a30:	4680      	mov	r8, r0
 8032a32:	2800      	cmp	r0, #0
 8032a34:	f43f ae91 	beq.w	803275a <__ssvfscanf_r+0x376>
 8032a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a3a:	6028      	str	r0, [r5, #0]
 8032a3c:	88de      	ldrh	r6, [r3, #6]
 8032a3e:	889b      	ldrh	r3, [r3, #4]
 8032a40:	429e      	cmp	r6, r3
 8032a42:	d314      	bcc.n	8032a6e <__ssvfscanf_r+0x68a>
 8032a44:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032a48:	4293      	cmp	r3, r2
 8032a4a:	f200 8633 	bhi.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032a4e:	3308      	adds	r3, #8
 8032a50:	fa1f f983 	uxth.w	r9, r3
 8032a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a56:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8032a5a:	6818      	ldr	r0, [r3, #0]
 8032a5c:	f001 fad8 	bl	8034010 <realloc>
 8032a60:	2800      	cmp	r0, #0
 8032a62:	f000 8627 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a68:	6018      	str	r0, [r3, #0]
 8032a6a:	f8a3 9004 	strh.w	r9, [r3, #4]
 8032a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032a72:	681b      	ldr	r3, [r3, #0]
 8032a74:	1c72      	adds	r2, r6, #1
 8032a76:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8032a7a:	46ab      	mov	fp, r5
 8032a7c:	80ca      	strh	r2, [r1, #6]
 8032a7e:	4645      	mov	r5, r8
 8032a80:	f04f 0920 	mov.w	r9, #32
 8032a84:	2600      	movs	r6, #0
 8032a86:	f7fb fa7b 	bl	802df80 <__locale_mb_cur_max>
 8032a8a:	42b0      	cmp	r0, r6
 8032a8c:	f43f ad6c 	beq.w	8032568 <__ssvfscanf_r+0x184>
 8032a90:	1c73      	adds	r3, r6, #1
 8032a92:	613b      	str	r3, [r7, #16]
 8032a94:	6823      	ldr	r3, [r4, #0]
 8032a96:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032a9e:	558a      	strb	r2, [r1, r6]
 8032aa0:	6862      	ldr	r2, [r4, #4]
 8032aa2:	3a01      	subs	r2, #1
 8032aa4:	e9c4 3200 	strd	r3, r2, [r4]
 8032aa8:	6a3b      	ldr	r3, [r7, #32]
 8032aaa:	2b03      	cmp	r3, #3
 8032aac:	d102      	bne.n	8032ab4 <__ssvfscanf_r+0x6d0>
 8032aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032ab0:	2b04      	cmp	r3, #4
 8032ab2:	d005      	beq.n	8032ac0 <__ssvfscanf_r+0x6dc>
 8032ab4:	2208      	movs	r2, #8
 8032ab6:	2100      	movs	r1, #0
 8032ab8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8032abc:	f7fa f8d8 	bl	802cc70 <memset>
 8032ac0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8032ac4:	9300      	str	r3, [sp, #0]
 8032ac6:	693b      	ldr	r3, [r7, #16]
 8032ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032aca:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032ace:	4629      	mov	r1, r5
 8032ad0:	f002 fe58 	bl	8035784 <_mbrtowc_r>
 8032ad4:	1c46      	adds	r6, r0, #1
 8032ad6:	6238      	str	r0, [r7, #32]
 8032ad8:	f43f ad46 	beq.w	8032568 <__ssvfscanf_r+0x184>
 8032adc:	2800      	cmp	r0, #0
 8032ade:	d14a      	bne.n	8032b76 <__ssvfscanf_r+0x792>
 8032ae0:	6028      	str	r0, [r5, #0]
 8032ae2:	682e      	ldr	r6, [r5, #0]
 8032ae4:	1c70      	adds	r0, r6, #1
 8032ae6:	d056      	beq.n	8032b96 <__ssvfscanf_r+0x7b2>
 8032ae8:	2208      	movs	r2, #8
 8032aea:	2100      	movs	r1, #0
 8032aec:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032af0:	f7fa f8be 	bl	802cc70 <memset>
 8032af4:	4b9a      	ldr	r3, [pc, #616]	@ (8032d60 <__ssvfscanf_r+0x97c>)
 8032af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8032afc:	60bb      	str	r3, [r7, #8]
 8032afe:	4632      	mov	r2, r6
 8032b00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032b04:	68be      	ldr	r6, [r7, #8]
 8032b06:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8032b0a:	47b0      	blx	r6
 8032b0c:	2801      	cmp	r0, #1
 8032b0e:	d144      	bne.n	8032b9a <__ssvfscanf_r+0x7b6>
 8032b10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032b14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032b18:	5c9b      	ldrb	r3, [r3, r2]
 8032b1a:	2b00      	cmp	r3, #0
 8032b1c:	d148      	bne.n	8032bb0 <__ssvfscanf_r+0x7cc>
 8032b1e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032b22:	693b      	ldr	r3, [r7, #16]
 8032b24:	2b00      	cmp	r3, #0
 8032b26:	d13a      	bne.n	8032b9e <__ssvfscanf_r+0x7ba>
 8032b28:	f1ba 0f00 	cmp.w	sl, #0
 8032b2c:	d115      	bne.n	8032b5a <__ssvfscanf_r+0x776>
 8032b2e:	f8c5 a000 	str.w	sl, [r5]
 8032b32:	f1bb 0f00 	cmp.w	fp, #0
 8032b36:	d00d      	beq.n	8032b54 <__ssvfscanf_r+0x770>
 8032b38:	eba5 0108 	sub.w	r1, r5, r8
 8032b3c:	108b      	asrs	r3, r1, #2
 8032b3e:	3301      	adds	r3, #1
 8032b40:	4599      	cmp	r9, r3
 8032b42:	d907      	bls.n	8032b54 <__ssvfscanf_r+0x770>
 8032b44:	f8db 0000 	ldr.w	r0, [fp]
 8032b48:	3104      	adds	r1, #4
 8032b4a:	f001 fa61 	bl	8034010 <realloc>
 8032b4e:	b108      	cbz	r0, 8032b54 <__ssvfscanf_r+0x770>
 8032b50:	f8cb 0000 	str.w	r0, [fp]
 8032b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032b56:	3301      	adds	r3, #1
 8032b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8032b5a:	68fd      	ldr	r5, [r7, #12]
 8032b5c:	e45d      	b.n	803241a <__ssvfscanf_r+0x36>
 8032b5e:	f04f 0900 	mov.w	r9, #0
 8032b62:	60fd      	str	r5, [r7, #12]
 8032b64:	46c8      	mov	r8, r9
 8032b66:	46cb      	mov	fp, r9
 8032b68:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032b6c:	e78a      	b.n	8032a84 <__ssvfscanf_r+0x6a0>
 8032b6e:	46d1      	mov	r9, sl
 8032b70:	46d0      	mov	r8, sl
 8032b72:	46d3      	mov	fp, sl
 8032b74:	e786      	b.n	8032a84 <__ssvfscanf_r+0x6a0>
 8032b76:	6a3b      	ldr	r3, [r7, #32]
 8032b78:	3302      	adds	r3, #2
 8032b7a:	d1b2      	bne.n	8032ae2 <__ssvfscanf_r+0x6fe>
 8032b7c:	693e      	ldr	r6, [r7, #16]
 8032b7e:	6863      	ldr	r3, [r4, #4]
 8032b80:	2b00      	cmp	r3, #0
 8032b82:	dc40      	bgt.n	8032c06 <__ssvfscanf_r+0x822>
 8032b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b86:	4621      	mov	r1, r4
 8032b88:	f7fd fa77 	bl	803007a <__ssrefill_r>
 8032b8c:	2800      	cmp	r0, #0
 8032b8e:	d03a      	beq.n	8032c06 <__ssvfscanf_r+0x822>
 8032b90:	2e00      	cmp	r6, #0
 8032b92:	d0c9      	beq.n	8032b28 <__ssvfscanf_r+0x744>
 8032b94:	e4e8      	b.n	8032568 <__ssvfscanf_r+0x184>
 8032b96:	4632      	mov	r2, r6
 8032b98:	e7bc      	b.n	8032b14 <__ssvfscanf_r+0x730>
 8032b9a:	2200      	movs	r2, #0
 8032b9c:	e7ba      	b.n	8032b14 <__ssvfscanf_r+0x730>
 8032b9e:	693b      	ldr	r3, [r7, #16]
 8032ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032ba2:	3b01      	subs	r3, #1
 8032ba4:	4622      	mov	r2, r4
 8032ba6:	5cf1      	ldrb	r1, [r6, r3]
 8032ba8:	613b      	str	r3, [r7, #16]
 8032baa:	f7fd fa2b 	bl	8030004 <_sungetc_r>
 8032bae:	e7b8      	b.n	8032b22 <__ssvfscanf_r+0x73e>
 8032bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032bb2:	693a      	ldr	r2, [r7, #16]
 8032bb4:	4413      	add	r3, r2
 8032bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8032bb8:	6a3b      	ldr	r3, [r7, #32]
 8032bba:	2b03      	cmp	r3, #3
 8032bbc:	d102      	bne.n	8032bc4 <__ssvfscanf_r+0x7e0>
 8032bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8032bc0:	2b04      	cmp	r3, #4
 8032bc2:	d002      	beq.n	8032bca <__ssvfscanf_r+0x7e6>
 8032bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032bc6:	3b01      	subs	r3, #1
 8032bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032bca:	f1ba 0f00 	cmp.w	sl, #0
 8032bce:	d118      	bne.n	8032c02 <__ssvfscanf_r+0x81e>
 8032bd0:	3504      	adds	r5, #4
 8032bd2:	f1bb 0f00 	cmp.w	fp, #0
 8032bd6:	d014      	beq.n	8032c02 <__ssvfscanf_r+0x81e>
 8032bd8:	eba5 0608 	sub.w	r6, r5, r8
 8032bdc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8032be0:	d80d      	bhi.n	8032bfe <__ssvfscanf_r+0x81a>
 8032be2:	4640      	mov	r0, r8
 8032be4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032be8:	f001 fa12 	bl	8034010 <realloc>
 8032bec:	4680      	mov	r8, r0
 8032bee:	2800      	cmp	r0, #0
 8032bf0:	f43f adb3 	beq.w	803275a <__ssvfscanf_r+0x376>
 8032bf4:	1985      	adds	r5, r0, r6
 8032bf6:	f8cb 0000 	str.w	r0, [fp]
 8032bfa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032bfe:	4656      	mov	r6, sl
 8032c00:	e7bd      	b.n	8032b7e <__ssvfscanf_r+0x79a>
 8032c02:	2600      	movs	r6, #0
 8032c04:	e7bb      	b.n	8032b7e <__ssvfscanf_r+0x79a>
 8032c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032c08:	2b00      	cmp	r3, #0
 8032c0a:	f47f af3c 	bne.w	8032a86 <__ssvfscanf_r+0x6a2>
 8032c0e:	e78b      	b.n	8032b28 <__ssvfscanf_r+0x744>
 8032c10:	f1ba 0f00 	cmp.w	sl, #0
 8032c14:	d01e      	beq.n	8032c54 <__ssvfscanf_r+0x870>
 8032c16:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 8032c1a:	6823      	ldr	r3, [r4, #0]
 8032c1c:	781a      	ldrb	r2, [r3, #0]
 8032c1e:	5cb2      	ldrb	r2, [r6, r2]
 8032c20:	b91a      	cbnz	r2, 8032c2a <__ssvfscanf_r+0x846>
 8032c22:	f1b8 0f00 	cmp.w	r8, #0
 8032c26:	d112      	bne.n	8032c4e <__ssvfscanf_r+0x86a>
 8032c28:	e4d2      	b.n	80325d0 <__ssvfscanf_r+0x1ec>
 8032c2a:	3301      	adds	r3, #1
 8032c2c:	6862      	ldr	r2, [r4, #4]
 8032c2e:	6023      	str	r3, [r4, #0]
 8032c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032c32:	f108 0801 	add.w	r8, r8, #1
 8032c36:	3a01      	subs	r2, #1
 8032c38:	4543      	cmp	r3, r8
 8032c3a:	6062      	str	r2, [r4, #4]
 8032c3c:	d007      	beq.n	8032c4e <__ssvfscanf_r+0x86a>
 8032c3e:	2a00      	cmp	r2, #0
 8032c40:	dceb      	bgt.n	8032c1a <__ssvfscanf_r+0x836>
 8032c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c44:	4621      	mov	r1, r4
 8032c46:	f7fd fa18 	bl	803007a <__ssrefill_r>
 8032c4a:	2800      	cmp	r0, #0
 8032c4c:	d0e5      	beq.n	8032c1a <__ssvfscanf_r+0x836>
 8032c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032c50:	4443      	add	r3, r8
 8032c52:	e674      	b.n	803293e <__ssvfscanf_r+0x55a>
 8032c54:	46a9      	mov	r9, r5
 8032c56:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032c5a:	f859 8b04 	ldr.w	r8, [r9], #4
 8032c5e:	d07d      	beq.n	8032d5c <__ssvfscanf_r+0x978>
 8032c60:	f1b8 0f00 	cmp.w	r8, #0
 8032c64:	f43f acb4 	beq.w	80325d0 <__ssvfscanf_r+0x1ec>
 8032c68:	2020      	movs	r0, #32
 8032c6a:	f7fc fa47 	bl	802f0fc <malloc>
 8032c6e:	4606      	mov	r6, r0
 8032c70:	2800      	cmp	r0, #0
 8032c72:	f43f ac7e 	beq.w	8032572 <__ssvfscanf_r+0x18e>
 8032c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032c78:	f8c8 0000 	str.w	r0, [r8]
 8032c7c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032c80:	889d      	ldrh	r5, [r3, #4]
 8032c82:	45aa      	cmp	sl, r5
 8032c84:	d311      	bcc.n	8032caa <__ssvfscanf_r+0x8c6>
 8032c86:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032c8a:	429d      	cmp	r5, r3
 8032c8c:	f200 8512 	bhi.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032c92:	3508      	adds	r5, #8
 8032c94:	b2ad      	uxth	r5, r5
 8032c96:	6818      	ldr	r0, [r3, #0]
 8032c98:	00a9      	lsls	r1, r5, #2
 8032c9a:	f001 f9b9 	bl	8034010 <realloc>
 8032c9e:	2800      	cmp	r0, #0
 8032ca0:	f000 8508 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032ca6:	6018      	str	r0, [r3, #0]
 8032ca8:	809d      	strh	r5, [r3, #4]
 8032caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032cac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032cae:	681b      	ldr	r3, [r3, #0]
 8032cb0:	f10a 0201 	add.w	r2, sl, #1
 8032cb4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8032cb8:	80ca      	strh	r2, [r1, #6]
 8032cba:	46c2      	mov	sl, r8
 8032cbc:	46b0      	mov	r8, r6
 8032cbe:	2620      	movs	r6, #32
 8032cc0:	4645      	mov	r5, r8
 8032cc2:	6823      	ldr	r3, [r4, #0]
 8032cc4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8032cc8:	781a      	ldrb	r2, [r3, #0]
 8032cca:	5c8a      	ldrb	r2, [r1, r2]
 8032ccc:	b35a      	cbz	r2, 8032d26 <__ssvfscanf_r+0x942>
 8032cce:	6862      	ldr	r2, [r4, #4]
 8032cd0:	3a01      	subs	r2, #1
 8032cd2:	6062      	str	r2, [r4, #4]
 8032cd4:	1c5a      	adds	r2, r3, #1
 8032cd6:	6022      	str	r2, [r4, #0]
 8032cd8:	781b      	ldrb	r3, [r3, #0]
 8032cda:	f808 3b01 	strb.w	r3, [r8], #1
 8032cde:	f1ba 0f00 	cmp.w	sl, #0
 8032ce2:	d010      	beq.n	8032d06 <__ssvfscanf_r+0x922>
 8032ce4:	eba8 0b05 	sub.w	fp, r8, r5
 8032ce8:	45b3      	cmp	fp, r6
 8032cea:	d30c      	bcc.n	8032d06 <__ssvfscanf_r+0x922>
 8032cec:	0076      	lsls	r6, r6, #1
 8032cee:	4628      	mov	r0, r5
 8032cf0:	4631      	mov	r1, r6
 8032cf2:	f001 f98d 	bl	8034010 <realloc>
 8032cf6:	4605      	mov	r5, r0
 8032cf8:	2800      	cmp	r0, #0
 8032cfa:	f43f ac3a 	beq.w	8032572 <__ssvfscanf_r+0x18e>
 8032cfe:	eb00 080b 	add.w	r8, r0, fp
 8032d02:	f8ca 0000 	str.w	r0, [sl]
 8032d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032d08:	3b01      	subs	r3, #1
 8032d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032d0c:	d00b      	beq.n	8032d26 <__ssvfscanf_r+0x942>
 8032d0e:	6863      	ldr	r3, [r4, #4]
 8032d10:	2b00      	cmp	r3, #0
 8032d12:	dcd6      	bgt.n	8032cc2 <__ssvfscanf_r+0x8de>
 8032d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032d16:	4621      	mov	r1, r4
 8032d18:	f7fd f9af 	bl	803007a <__ssrefill_r>
 8032d1c:	2800      	cmp	r0, #0
 8032d1e:	d0d0      	beq.n	8032cc2 <__ssvfscanf_r+0x8de>
 8032d20:	45a8      	cmp	r8, r5
 8032d22:	f43f ac21 	beq.w	8032568 <__ssvfscanf_r+0x184>
 8032d26:	ebb8 0505 	subs.w	r5, r8, r5
 8032d2a:	f43f ac51 	beq.w	80325d0 <__ssvfscanf_r+0x1ec>
 8032d2e:	2300      	movs	r3, #0
 8032d30:	f888 3000 	strb.w	r3, [r8]
 8032d34:	f1ba 0f00 	cmp.w	sl, #0
 8032d38:	d009      	beq.n	8032d4e <__ssvfscanf_r+0x96a>
 8032d3a:	1c69      	adds	r1, r5, #1
 8032d3c:	428e      	cmp	r6, r1
 8032d3e:	d906      	bls.n	8032d4e <__ssvfscanf_r+0x96a>
 8032d40:	f8da 0000 	ldr.w	r0, [sl]
 8032d44:	f001 f964 	bl	8034010 <realloc>
 8032d48:	b108      	cbz	r0, 8032d4e <__ssvfscanf_r+0x96a>
 8032d4a:	f8ca 0000 	str.w	r0, [sl]
 8032d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032d50:	3301      	adds	r3, #1
 8032d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8032d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032d56:	442b      	add	r3, r5
 8032d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8032d5a:	e64a      	b.n	80329f2 <__ssvfscanf_r+0x60e>
 8032d5c:	46b2      	mov	sl, r6
 8032d5e:	e7af      	b.n	8032cc0 <__ssvfscanf_r+0x8dc>
 8032d60:	2000016c 	.word	0x2000016c
 8032d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032d66:	2b00      	cmp	r3, #0
 8032d68:	bf08      	it	eq
 8032d6a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032d6e:	f016 0901 	ands.w	r9, r6, #1
 8032d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032d74:	f006 0810 	and.w	r8, r6, #16
 8032d78:	f000 80ef 	beq.w	8032f5a <__ssvfscanf_r+0xb76>
 8032d7c:	f1b8 0f00 	cmp.w	r8, #0
 8032d80:	f040 8098 	bne.w	8032eb4 <__ssvfscanf_r+0xad0>
 8032d84:	462b      	mov	r3, r5
 8032d86:	0631      	lsls	r1, r6, #24
 8032d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8032d8c:	613b      	str	r3, [r7, #16]
 8032d8e:	f140 8099 	bpl.w	8032ec4 <__ssvfscanf_r+0xae0>
 8032d92:	2d00      	cmp	r5, #0
 8032d94:	f43f ace4 	beq.w	8032760 <__ssvfscanf_r+0x37c>
 8032d98:	2080      	movs	r0, #128	@ 0x80
 8032d9a:	f7fc f9af 	bl	802f0fc <malloc>
 8032d9e:	4606      	mov	r6, r0
 8032da0:	2800      	cmp	r0, #0
 8032da2:	f43f acda 	beq.w	803275a <__ssvfscanf_r+0x376>
 8032da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032da8:	6028      	str	r0, [r5, #0]
 8032daa:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8032dae:	889b      	ldrh	r3, [r3, #4]
 8032db0:	4599      	cmp	r9, r3
 8032db2:	d314      	bcc.n	8032dde <__ssvfscanf_r+0x9fa>
 8032db4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032db8:	4293      	cmp	r3, r2
 8032dba:	f200 847b 	bhi.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032dbe:	3308      	adds	r3, #8
 8032dc0:	fa1f fa83 	uxth.w	sl, r3
 8032dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032dc6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8032dca:	6818      	ldr	r0, [r3, #0]
 8032dcc:	f001 f920 	bl	8034010 <realloc>
 8032dd0:	2800      	cmp	r0, #0
 8032dd2:	f000 846f 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032dd8:	6018      	str	r0, [r3, #0]
 8032dda:	f8a3 a004 	strh.w	sl, [r3, #4]
 8032dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032de0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032de2:	681b      	ldr	r3, [r3, #0]
 8032de4:	f109 0201 	add.w	r2, r9, #1
 8032de8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8032dec:	46aa      	mov	sl, r5
 8032dee:	80ca      	strh	r2, [r1, #6]
 8032df0:	4635      	mov	r5, r6
 8032df2:	f04f 0920 	mov.w	r9, #32
 8032df6:	2300      	movs	r3, #0
 8032df8:	6822      	ldr	r2, [r4, #0]
 8032dfa:	49a7      	ldr	r1, [pc, #668]	@ (8033098 <__ssvfscanf_r+0xcb4>)
 8032dfc:	7812      	ldrb	r2, [r2, #0]
 8032dfe:	5c8a      	ldrb	r2, [r1, r2]
 8032e00:	0710      	lsls	r0, r2, #28
 8032e02:	d43c      	bmi.n	8032e7e <__ssvfscanf_r+0xa9a>
 8032e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032e06:	2a00      	cmp	r2, #0
 8032e08:	d039      	beq.n	8032e7e <__ssvfscanf_r+0xa9a>
 8032e0a:	60fb      	str	r3, [r7, #12]
 8032e0c:	f7fb f8b8 	bl	802df80 <__locale_mb_cur_max>
 8032e10:	68fb      	ldr	r3, [r7, #12]
 8032e12:	4298      	cmp	r0, r3
 8032e14:	f43f aba8 	beq.w	8032568 <__ssvfscanf_r+0x184>
 8032e18:	6822      	ldr	r2, [r4, #0]
 8032e1a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032e1e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8032e22:	54c8      	strb	r0, [r1, r3]
 8032e24:	f103 0b01 	add.w	fp, r3, #1
 8032e28:	6863      	ldr	r3, [r4, #4]
 8032e2a:	3b01      	subs	r3, #1
 8032e2c:	e9c4 2300 	strd	r2, r3, [r4]
 8032e30:	6a3b      	ldr	r3, [r7, #32]
 8032e32:	2b03      	cmp	r3, #3
 8032e34:	d102      	bne.n	8032e3c <__ssvfscanf_r+0xa58>
 8032e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032e38:	2b04      	cmp	r3, #4
 8032e3a:	d005      	beq.n	8032e48 <__ssvfscanf_r+0xa64>
 8032e3c:	2208      	movs	r2, #8
 8032e3e:	2100      	movs	r1, #0
 8032e40:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032e44:	f7f9 ff14 	bl	802cc70 <memset>
 8032e48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032e4c:	9300      	str	r3, [sp, #0]
 8032e4e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e54:	465b      	mov	r3, fp
 8032e56:	4629      	mov	r1, r5
 8032e58:	f002 fc94 	bl	8035784 <_mbrtowc_r>
 8032e5c:	1c42      	adds	r2, r0, #1
 8032e5e:	6238      	str	r0, [r7, #32]
 8032e60:	f43f ab82 	beq.w	8032568 <__ssvfscanf_r+0x184>
 8032e64:	bb90      	cbnz	r0, 8032ecc <__ssvfscanf_r+0xae8>
 8032e66:	6028      	str	r0, [r5, #0]
 8032e68:	6828      	ldr	r0, [r5, #0]
 8032e6a:	f002 fca5 	bl	80357b8 <iswspace>
 8032e6e:	4603      	mov	r3, r0
 8032e70:	2800      	cmp	r0, #0
 8032e72:	d047      	beq.n	8032f04 <__ssvfscanf_r+0xb20>
 8032e74:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032e78:	f1bb 0f00 	cmp.w	fp, #0
 8032e7c:	d139      	bne.n	8032ef2 <__ssvfscanf_r+0xb0e>
 8032e7e:	f1b8 0f00 	cmp.w	r8, #0
 8032e82:	d114      	bne.n	8032eae <__ssvfscanf_r+0xaca>
 8032e84:	f8c5 8000 	str.w	r8, [r5]
 8032e88:	f1ba 0f00 	cmp.w	sl, #0
 8032e8c:	d00c      	beq.n	8032ea8 <__ssvfscanf_r+0xac4>
 8032e8e:	1ba9      	subs	r1, r5, r6
 8032e90:	108b      	asrs	r3, r1, #2
 8032e92:	3301      	adds	r3, #1
 8032e94:	4599      	cmp	r9, r3
 8032e96:	d907      	bls.n	8032ea8 <__ssvfscanf_r+0xac4>
 8032e98:	f8da 0000 	ldr.w	r0, [sl]
 8032e9c:	3104      	adds	r1, #4
 8032e9e:	f001 f8b7 	bl	8034010 <realloc>
 8032ea2:	b108      	cbz	r0, 8032ea8 <__ssvfscanf_r+0xac4>
 8032ea4:	f8ca 0000 	str.w	r0, [sl]
 8032ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032eaa:	3301      	adds	r3, #1
 8032eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8032eae:	693d      	ldr	r5, [r7, #16]
 8032eb0:	f7ff bab3 	b.w	803241a <__ssvfscanf_r+0x36>
 8032eb4:	f04f 0900 	mov.w	r9, #0
 8032eb8:	613d      	str	r5, [r7, #16]
 8032eba:	464e      	mov	r6, r9
 8032ebc:	46ca      	mov	sl, r9
 8032ebe:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032ec2:	e798      	b.n	8032df6 <__ssvfscanf_r+0xa12>
 8032ec4:	46c1      	mov	r9, r8
 8032ec6:	4646      	mov	r6, r8
 8032ec8:	46c2      	mov	sl, r8
 8032eca:	e794      	b.n	8032df6 <__ssvfscanf_r+0xa12>
 8032ecc:	6a3b      	ldr	r3, [r7, #32]
 8032ece:	3302      	adds	r3, #2
 8032ed0:	d1ca      	bne.n	8032e68 <__ssvfscanf_r+0xa84>
 8032ed2:	465b      	mov	r3, fp
 8032ed4:	6862      	ldr	r2, [r4, #4]
 8032ed6:	2a00      	cmp	r2, #0
 8032ed8:	dc8e      	bgt.n	8032df8 <__ssvfscanf_r+0xa14>
 8032eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032edc:	60fb      	str	r3, [r7, #12]
 8032ede:	4621      	mov	r1, r4
 8032ee0:	f7fd f8cb 	bl	803007a <__ssrefill_r>
 8032ee4:	68fb      	ldr	r3, [r7, #12]
 8032ee6:	2800      	cmp	r0, #0
 8032ee8:	d086      	beq.n	8032df8 <__ssvfscanf_r+0xa14>
 8032eea:	2b00      	cmp	r3, #0
 8032eec:	f47f ab3c 	bne.w	8032568 <__ssvfscanf_r+0x184>
 8032ef0:	e7c5      	b.n	8032e7e <__ssvfscanf_r+0xa9a>
 8032ef2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032ef8:	f813 100b 	ldrb.w	r1, [r3, fp]
 8032efc:	4622      	mov	r2, r4
 8032efe:	f7fd f881 	bl	8030004 <_sungetc_r>
 8032f02:	e7b7      	b.n	8032e74 <__ssvfscanf_r+0xa90>
 8032f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032f06:	445a      	add	r2, fp
 8032f08:	633a      	str	r2, [r7, #48]	@ 0x30
 8032f0a:	6a3a      	ldr	r2, [r7, #32]
 8032f0c:	2a03      	cmp	r2, #3
 8032f0e:	d102      	bne.n	8032f16 <__ssvfscanf_r+0xb32>
 8032f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032f12:	2a04      	cmp	r2, #4
 8032f14:	d002      	beq.n	8032f1c <__ssvfscanf_r+0xb38>
 8032f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032f18:	3a01      	subs	r2, #1
 8032f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8032f1c:	f1b8 0f00 	cmp.w	r8, #0
 8032f20:	d1d8      	bne.n	8032ed4 <__ssvfscanf_r+0xaf0>
 8032f22:	3504      	adds	r5, #4
 8032f24:	f1ba 0f00 	cmp.w	sl, #0
 8032f28:	d015      	beq.n	8032f56 <__ssvfscanf_r+0xb72>
 8032f2a:	eba5 0b06 	sub.w	fp, r5, r6
 8032f2e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8032f32:	d80e      	bhi.n	8032f52 <__ssvfscanf_r+0xb6e>
 8032f34:	4630      	mov	r0, r6
 8032f36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032f3a:	f001 f869 	bl	8034010 <realloc>
 8032f3e:	4606      	mov	r6, r0
 8032f40:	2800      	cmp	r0, #0
 8032f42:	f43f ac0a 	beq.w	803275a <__ssvfscanf_r+0x376>
 8032f46:	eb00 050b 	add.w	r5, r0, fp
 8032f4a:	f8ca 0000 	str.w	r0, [sl]
 8032f4e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032f52:	4643      	mov	r3, r8
 8032f54:	e7be      	b.n	8032ed4 <__ssvfscanf_r+0xaf0>
 8032f56:	4653      	mov	r3, sl
 8032f58:	e7bc      	b.n	8032ed4 <__ssvfscanf_r+0xaf0>
 8032f5a:	f1b8 0f00 	cmp.w	r8, #0
 8032f5e:	d01a      	beq.n	8032f96 <__ssvfscanf_r+0xbb2>
 8032f60:	4e4d      	ldr	r6, [pc, #308]	@ (8033098 <__ssvfscanf_r+0xcb4>)
 8032f62:	6823      	ldr	r3, [r4, #0]
 8032f64:	781a      	ldrb	r2, [r3, #0]
 8032f66:	5cb2      	ldrb	r2, [r6, r2]
 8032f68:	0711      	lsls	r1, r2, #28
 8032f6a:	d411      	bmi.n	8032f90 <__ssvfscanf_r+0xbac>
 8032f6c:	3301      	adds	r3, #1
 8032f6e:	6862      	ldr	r2, [r4, #4]
 8032f70:	6023      	str	r3, [r4, #0]
 8032f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032f74:	f109 0901 	add.w	r9, r9, #1
 8032f78:	3a01      	subs	r2, #1
 8032f7a:	454b      	cmp	r3, r9
 8032f7c:	6062      	str	r2, [r4, #4]
 8032f7e:	d007      	beq.n	8032f90 <__ssvfscanf_r+0xbac>
 8032f80:	2a00      	cmp	r2, #0
 8032f82:	dcee      	bgt.n	8032f62 <__ssvfscanf_r+0xb7e>
 8032f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032f86:	4621      	mov	r1, r4
 8032f88:	f7fd f877 	bl	803007a <__ssrefill_r>
 8032f8c:	2800      	cmp	r0, #0
 8032f8e:	d0e8      	beq.n	8032f62 <__ssvfscanf_r+0xb7e>
 8032f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032f92:	444b      	add	r3, r9
 8032f94:	e4d3      	b.n	803293e <__ssvfscanf_r+0x55a>
 8032f96:	46a8      	mov	r8, r5
 8032f98:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032f9c:	f858 5b04 	ldr.w	r5, [r8], #4
 8032fa0:	d077      	beq.n	8033092 <__ssvfscanf_r+0xcae>
 8032fa2:	2d00      	cmp	r5, #0
 8032fa4:	f43f ab14 	beq.w	80325d0 <__ssvfscanf_r+0x1ec>
 8032fa8:	2020      	movs	r0, #32
 8032faa:	f7fc f8a7 	bl	802f0fc <malloc>
 8032fae:	4681      	mov	r9, r0
 8032fb0:	2800      	cmp	r0, #0
 8032fb2:	f43f aade 	beq.w	8032572 <__ssvfscanf_r+0x18e>
 8032fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032fb8:	6028      	str	r0, [r5, #0]
 8032fba:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032fbe:	889e      	ldrh	r6, [r3, #4]
 8032fc0:	45b2      	cmp	sl, r6
 8032fc2:	d311      	bcc.n	8032fe8 <__ssvfscanf_r+0xc04>
 8032fc4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032fc8:	429e      	cmp	r6, r3
 8032fca:	f200 8373 	bhi.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032fd0:	3608      	adds	r6, #8
 8032fd2:	b2b6      	uxth	r6, r6
 8032fd4:	6818      	ldr	r0, [r3, #0]
 8032fd6:	00b1      	lsls	r1, r6, #2
 8032fd8:	f001 f81a 	bl	8034010 <realloc>
 8032fdc:	2800      	cmp	r0, #0
 8032fde:	f000 8369 	beq.w	80336b4 <__ssvfscanf_r+0x12d0>
 8032fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032fe4:	6018      	str	r0, [r3, #0]
 8032fe6:	809e      	strh	r6, [r3, #4]
 8032fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032fea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032fec:	681b      	ldr	r3, [r3, #0]
 8032fee:	f10a 0201 	add.w	r2, sl, #1
 8032ff2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032ff6:	80ca      	strh	r2, [r1, #6]
 8032ff8:	46aa      	mov	sl, r5
 8032ffa:	2620      	movs	r6, #32
 8032ffc:	464d      	mov	r5, r9
 8032ffe:	46a9      	mov	r9, r5
 8033000:	6823      	ldr	r3, [r4, #0]
 8033002:	4925      	ldr	r1, [pc, #148]	@ (8033098 <__ssvfscanf_r+0xcb4>)
 8033004:	781a      	ldrb	r2, [r3, #0]
 8033006:	5c8a      	ldrb	r2, [r1, r2]
 8033008:	0712      	lsls	r2, r2, #28
 803300a:	d428      	bmi.n	803305e <__ssvfscanf_r+0xc7a>
 803300c:	6862      	ldr	r2, [r4, #4]
 803300e:	3a01      	subs	r2, #1
 8033010:	6062      	str	r2, [r4, #4]
 8033012:	1c5a      	adds	r2, r3, #1
 8033014:	6022      	str	r2, [r4, #0]
 8033016:	781b      	ldrb	r3, [r3, #0]
 8033018:	f805 3b01 	strb.w	r3, [r5], #1
 803301c:	f1ba 0f00 	cmp.w	sl, #0
 8033020:	d010      	beq.n	8033044 <__ssvfscanf_r+0xc60>
 8033022:	eba5 0b09 	sub.w	fp, r5, r9
 8033026:	45b3      	cmp	fp, r6
 8033028:	d30c      	bcc.n	8033044 <__ssvfscanf_r+0xc60>
 803302a:	0076      	lsls	r6, r6, #1
 803302c:	4648      	mov	r0, r9
 803302e:	4631      	mov	r1, r6
 8033030:	f000 ffee 	bl	8034010 <realloc>
 8033034:	4681      	mov	r9, r0
 8033036:	2800      	cmp	r0, #0
 8033038:	f43f aa9b 	beq.w	8032572 <__ssvfscanf_r+0x18e>
 803303c:	eb00 050b 	add.w	r5, r0, fp
 8033040:	f8ca 0000 	str.w	r0, [sl]
 8033044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033046:	3b01      	subs	r3, #1
 8033048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803304a:	d008      	beq.n	803305e <__ssvfscanf_r+0xc7a>
 803304c:	6863      	ldr	r3, [r4, #4]
 803304e:	2b00      	cmp	r3, #0
 8033050:	dcd6      	bgt.n	8033000 <__ssvfscanf_r+0xc1c>
 8033052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033054:	4621      	mov	r1, r4
 8033056:	f7fd f810 	bl	803007a <__ssrefill_r>
 803305a:	2800      	cmp	r0, #0
 803305c:	d0d0      	beq.n	8033000 <__ssvfscanf_r+0xc1c>
 803305e:	2300      	movs	r3, #0
 8033060:	702b      	strb	r3, [r5, #0]
 8033062:	eba5 0509 	sub.w	r5, r5, r9
 8033066:	f1ba 0f00 	cmp.w	sl, #0
 803306a:	d009      	beq.n	8033080 <__ssvfscanf_r+0xc9c>
 803306c:	1c69      	adds	r1, r5, #1
 803306e:	428e      	cmp	r6, r1
 8033070:	d906      	bls.n	8033080 <__ssvfscanf_r+0xc9c>
 8033072:	f8da 0000 	ldr.w	r0, [sl]
 8033076:	f000 ffcb 	bl	8034010 <realloc>
 803307a:	b108      	cbz	r0, 8033080 <__ssvfscanf_r+0xc9c>
 803307c:	f8ca 0000 	str.w	r0, [sl]
 8033080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033082:	442b      	add	r3, r5
 8033084:	633b      	str	r3, [r7, #48]	@ 0x30
 8033086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033088:	3301      	adds	r3, #1
 803308a:	627b      	str	r3, [r7, #36]	@ 0x24
 803308c:	4645      	mov	r5, r8
 803308e:	f7ff b9c4 	b.w	803241a <__ssvfscanf_r+0x36>
 8033092:	46b2      	mov	sl, r6
 8033094:	e7b3      	b.n	8032ffe <__ssvfscanf_r+0xc1a>
 8033096:	bf00      	nop
 8033098:	0803c3f9 	.word	0x0803c3f9
 803309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803309e:	3b01      	subs	r3, #1
 80330a0:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80330a4:	bf81      	itttt	hi
 80330a6:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80330a8:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 80330ac:	eb03 090c 	addhi.w	r9, r3, ip
 80330b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80330b4:	bf8c      	ite	hi
 80330b6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 80330b8:	f04f 0900 	movls.w	r9, #0
 80330bc:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 80330c0:	f04f 0a00 	mov.w	sl, #0
 80330c4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 80330c8:	6822      	ldr	r2, [r4, #0]
 80330ca:	7813      	ldrb	r3, [r2, #0]
 80330cc:	2b39      	cmp	r3, #57	@ 0x39
 80330ce:	d80f      	bhi.n	80330f0 <__ssvfscanf_r+0xd0c>
 80330d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80330d2:	d91a      	bls.n	803310a <__ssvfscanf_r+0xd26>
 80330d4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80330d8:	290e      	cmp	r1, #14
 80330da:	d816      	bhi.n	803310a <__ssvfscanf_r+0xd26>
 80330dc:	e8df f001 	tbb	[pc, r1]
 80330e0:	15781578 	.word	0x15781578
 80330e4:	68683f15 	.word	0x68683f15
 80330e8:	68686868 	.word	0x68686868
 80330ec:	7068      	.short	0x7068
 80330ee:	70          	.byte	0x70
 80330ef:	00          	.byte	0x00
 80330f0:	2b66      	cmp	r3, #102	@ 0x66
 80330f2:	d832      	bhi.n	803315a <__ssvfscanf_r+0xd76>
 80330f4:	2b60      	cmp	r3, #96	@ 0x60
 80330f6:	d803      	bhi.n	8033100 <__ssvfscanf_r+0xd1c>
 80330f8:	2b46      	cmp	r3, #70	@ 0x46
 80330fa:	d804      	bhi.n	8033106 <__ssvfscanf_r+0xd22>
 80330fc:	2b40      	cmp	r3, #64	@ 0x40
 80330fe:	d904      	bls.n	803310a <__ssvfscanf_r+0xd26>
 8033100:	69f9      	ldr	r1, [r7, #28]
 8033102:	290a      	cmp	r1, #10
 8033104:	e062      	b.n	80331cc <__ssvfscanf_r+0xde8>
 8033106:	2b58      	cmp	r3, #88	@ 0x58
 8033108:	d068      	beq.n	80331dc <__ssvfscanf_r+0xdf8>
 803310a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803310e:	d011      	beq.n	8033134 <__ssvfscanf_r+0xd50>
 8033110:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033114:	4598      	cmp	r8, r3
 8033116:	d908      	bls.n	803312a <__ssvfscanf_r+0xd46>
 8033118:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803311c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803311e:	4622      	mov	r2, r4
 8033120:	f7fc ff70 	bl	8030004 <_sungetc_r>
 8033124:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8033128:	46c8      	mov	r8, r9
 803312a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 803312e:	4598      	cmp	r8, r3
 8033130:	f43f aa4e 	beq.w	80325d0 <__ssvfscanf_r+0x1ec>
 8033134:	f01b 0210 	ands.w	r2, fp, #16
 8033138:	d16c      	bne.n	8033214 <__ssvfscanf_r+0xe30>
 803313a:	69fb      	ldr	r3, [r7, #28]
 803313c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803313e:	69be      	ldr	r6, [r7, #24]
 8033140:	f888 2000 	strb.w	r2, [r8]
 8033144:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033148:	47b0      	blx	r6
 803314a:	f01b 0f20 	tst.w	fp, #32
 803314e:	f105 0904 	add.w	r9, r5, #4
 8033152:	d056      	beq.n	8033202 <__ssvfscanf_r+0xe1e>
 8033154:	682b      	ldr	r3, [r5, #0]
 8033156:	6018      	str	r0, [r3, #0]
 8033158:	e058      	b.n	803320c <__ssvfscanf_r+0xe28>
 803315a:	2b78      	cmp	r3, #120	@ 0x78
 803315c:	e7d4      	b.n	8033108 <__ssvfscanf_r+0xd24>
 803315e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8033162:	d00a      	beq.n	803317a <__ssvfscanf_r+0xd96>
 8033164:	69f9      	ldr	r1, [r7, #28]
 8033166:	b919      	cbnz	r1, 8033170 <__ssvfscanf_r+0xd8c>
 8033168:	2108      	movs	r1, #8
 803316a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 803316e:	61f9      	str	r1, [r7, #28]
 8033170:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8033174:	d004      	beq.n	8033180 <__ssvfscanf_r+0xd9c>
 8033176:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 803317a:	f808 3b01 	strb.w	r3, [r8], #1
 803317e:	e00b      	b.n	8033198 <__ssvfscanf_r+0xdb4>
 8033180:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8033184:	f1b9 0f00 	cmp.w	r9, #0
 8033188:	d004      	beq.n	8033194 <__ssvfscanf_r+0xdb0>
 803318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803318c:	3301      	adds	r3, #1
 803318e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8033192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033194:	f10a 0a01 	add.w	sl, sl, #1
 8033198:	6863      	ldr	r3, [r4, #4]
 803319a:	3b01      	subs	r3, #1
 803319c:	2b00      	cmp	r3, #0
 803319e:	6063      	str	r3, [r4, #4]
 80331a0:	dd28      	ble.n	80331f4 <__ssvfscanf_r+0xe10>
 80331a2:	3201      	adds	r2, #1
 80331a4:	6022      	str	r2, [r4, #0]
 80331a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80331a8:	3b01      	subs	r3, #1
 80331aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80331ac:	d18c      	bne.n	80330c8 <__ssvfscanf_r+0xce4>
 80331ae:	e7ac      	b.n	803310a <__ssvfscanf_r+0xd26>
 80331b0:	69f8      	ldr	r0, [r7, #28]
 80331b2:	499b      	ldr	r1, [pc, #620]	@ (8033420 <__ssvfscanf_r+0x103c>)
 80331b4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80331b8:	61f9      	str	r1, [r7, #28]
 80331ba:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 80331be:	e7dc      	b.n	803317a <__ssvfscanf_r+0xd96>
 80331c0:	69f8      	ldr	r0, [r7, #28]
 80331c2:	4997      	ldr	r1, [pc, #604]	@ (8033420 <__ssvfscanf_r+0x103c>)
 80331c4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80331c8:	61f9      	str	r1, [r7, #28]
 80331ca:	2908      	cmp	r1, #8
 80331cc:	dcf5      	bgt.n	80331ba <__ssvfscanf_r+0xdd6>
 80331ce:	e79c      	b.n	803310a <__ssvfscanf_r+0xd26>
 80331d0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 80331d4:	d099      	beq.n	803310a <__ssvfscanf_r+0xd26>
 80331d6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 80331da:	e7ce      	b.n	803317a <__ssvfscanf_r+0xd96>
 80331dc:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 80331e0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80331e4:	d191      	bne.n	803310a <__ssvfscanf_r+0xd26>
 80331e6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 80331ea:	2110      	movs	r1, #16
 80331ec:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 80331f0:	61f9      	str	r1, [r7, #28]
 80331f2:	e7c2      	b.n	803317a <__ssvfscanf_r+0xd96>
 80331f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80331f6:	4621      	mov	r1, r4
 80331f8:	f7fc ff3f 	bl	803007a <__ssrefill_r>
 80331fc:	2800      	cmp	r0, #0
 80331fe:	d0d2      	beq.n	80331a6 <__ssvfscanf_r+0xdc2>
 8033200:	e783      	b.n	803310a <__ssvfscanf_r+0xd26>
 8033202:	f01b 0f08 	tst.w	fp, #8
 8033206:	d00b      	beq.n	8033220 <__ssvfscanf_r+0xe3c>
 8033208:	682b      	ldr	r3, [r5, #0]
 803320a:	7018      	strb	r0, [r3, #0]
 803320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803320e:	3301      	adds	r3, #1
 8033210:	627b      	str	r3, [r7, #36]	@ 0x24
 8033212:	464d      	mov	r5, r9
 8033214:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8033218:	eba8 0803 	sub.w	r8, r8, r3
 803321c:	44d0      	add	r8, sl
 803321e:	e516      	b.n	8032c4e <__ssvfscanf_r+0x86a>
 8033220:	f01b 0f04 	tst.w	fp, #4
 8033224:	d002      	beq.n	803322c <__ssvfscanf_r+0xe48>
 8033226:	682b      	ldr	r3, [r5, #0]
 8033228:	8018      	strh	r0, [r3, #0]
 803322a:	e7ef      	b.n	803320c <__ssvfscanf_r+0xe28>
 803322c:	f01b 0201 	ands.w	r2, fp, #1
 8033230:	d190      	bne.n	8033154 <__ssvfscanf_r+0xd70>
 8033232:	f01b 0f02 	tst.w	fp, #2
 8033236:	d08d      	beq.n	8033154 <__ssvfscanf_r+0xd70>
 8033238:	4b7a      	ldr	r3, [pc, #488]	@ (8033424 <__ssvfscanf_r+0x1040>)
 803323a:	69b9      	ldr	r1, [r7, #24]
 803323c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803323e:	4299      	cmp	r1, r3
 8033240:	69fb      	ldr	r3, [r7, #28]
 8033242:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033246:	d105      	bne.n	8033254 <__ssvfscanf_r+0xe70>
 8033248:	f002 fa9a 	bl	8035780 <_strtoull_r>
 803324c:	682b      	ldr	r3, [r5, #0]
 803324e:	e9c3 0100 	strd	r0, r1, [r3]
 8033252:	e7db      	b.n	803320c <__ssvfscanf_r+0xe28>
 8033254:	f002 f9e8 	bl	8035628 <_strtoll_r>
 8033258:	e7f8      	b.n	803324c <__ssvfscanf_r+0xe68>
 803325a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803325c:	f7fa fe96 	bl	802df8c <_localeconv_r>
 8033260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033262:	6802      	ldr	r2, [r0, #0]
 8033264:	3b01      	subs	r3, #1
 8033266:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 803326a:	f04f 0800 	mov.w	r8, #0
 803326e:	bf88      	it	hi
 8033270:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8033272:	f8c7 8010 	str.w	r8, [r7, #16]
 8033276:	e9c7 8802 	strd	r8, r8, [r7, #8]
 803327a:	bf81      	itttt	hi
 803327c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8033280:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8033284:	181b      	addhi	r3, r3, r0
 8033286:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8033288:	bf98      	it	ls
 803328a:	2300      	movls	r3, #0
 803328c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8033290:	46c3      	mov	fp, r8
 8033292:	46c2      	mov	sl, r8
 8033294:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8033298:	6821      	ldr	r1, [r4, #0]
 803329a:	6079      	str	r1, [r7, #4]
 803329c:	7808      	ldrb	r0, [r1, #0]
 803329e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 80332a2:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 80332a6:	f200 8123 	bhi.w	80334f0 <__ssvfscanf_r+0x110c>
 80332aa:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80332ae:	0089      	.short	0x0089
 80332b0:	00890121 	.word	0x00890121
 80332b4:	01210121 	.word	0x01210121
 80332b8:	006f004f 	.word	0x006f004f
 80332bc:	006f006f 	.word	0x006f006f
 80332c0:	006f006f 	.word	0x006f006f
 80332c4:	006f006f 	.word	0x006f006f
 80332c8:	006f006f 	.word	0x006f006f
 80332cc:	01210121 	.word	0x01210121
 80332d0:	01210121 	.word	0x01210121
 80332d4:	01210121 	.word	0x01210121
 80332d8:	00af0121 	.word	0x00af0121
 80332dc:	006d006d 	.word	0x006d006d
 80332e0:	011e006d 	.word	0x011e006d
 80332e4:	012100ed 	.word	0x012100ed
 80332e8:	00d60121 	.word	0x00d60121
 80332ec:	01210121 	.word	0x01210121
 80332f0:	01210121 	.word	0x01210121
 80332f4:	01210090 	.word	0x01210090
 80332f8:	01210104 	.word	0x01210104
 80332fc:	01210121 	.word	0x01210121
 8033300:	012100f8 	.word	0x012100f8
 8033304:	01210121 	.word	0x01210121
 8033308:	00fe0073 	.word	0x00fe0073
 803330c:	01210121 	.word	0x01210121
 8033310:	01210121 	.word	0x01210121
 8033314:	01210121 	.word	0x01210121
 8033318:	00af0121 	.word	0x00af0121
 803331c:	006d006d 	.word	0x006d006d
 8033320:	011e006d 	.word	0x011e006d
 8033324:	012100ed 	.word	0x012100ed
 8033328:	00d60121 	.word	0x00d60121
 803332c:	01210121 	.word	0x01210121
 8033330:	01210121 	.word	0x01210121
 8033334:	01210090 	.word	0x01210090
 8033338:	01210104 	.word	0x01210104
 803333c:	01210121 	.word	0x01210121
 8033340:	012100f8 	.word	0x012100f8
 8033344:	01210121 	.word	0x01210121
 8033348:	00fe0073 	.word	0x00fe0073
 803334c:	05f1      	lsls	r1, r6, #23
 803334e:	d51d      	bpl.n	803338c <__ssvfscanf_r+0xfa8>
 8033350:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8033354:	f10a 0a01 	add.w	sl, sl, #1
 8033358:	b11b      	cbz	r3, 8033362 <__ssvfscanf_r+0xf7e>
 803335a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 803335c:	3001      	adds	r0, #1
 803335e:	3b01      	subs	r3, #1
 8033360:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8033362:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8033364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033366:	3001      	adds	r0, #1
 8033368:	6338      	str	r0, [r7, #48]	@ 0x30
 803336a:	6860      	ldr	r0, [r4, #4]
 803336c:	3801      	subs	r0, #1
 803336e:	3901      	subs	r1, #1
 8033370:	2800      	cmp	r0, #0
 8033372:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8033374:	6060      	str	r0, [r4, #4]
 8033376:	f340 80cc 	ble.w	8033512 <__ssvfscanf_r+0x112e>
 803337a:	6879      	ldr	r1, [r7, #4]
 803337c:	3101      	adds	r1, #1
 803337e:	6021      	str	r1, [r4, #0]
 8033380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8033382:	2900      	cmp	r1, #0
 8033384:	d188      	bne.n	8033298 <__ssvfscanf_r+0xeb4>
 8033386:	e052      	b.n	803342e <__ssvfscanf_r+0x104a>
 8033388:	0531      	lsls	r1, r6, #20
 803338a:	d550      	bpl.n	803342e <__ssvfscanf_r+0x104a>
 803338c:	eb1b 0c08 	adds.w	ip, fp, r8
 8033390:	d041      	beq.n	8033416 <__ssvfscanf_r+0x1032>
 8033392:	e04c      	b.n	803342e <__ssvfscanf_r+0x104a>
 8033394:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8033398:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803339c:	d147      	bne.n	803342e <__ssvfscanf_r+0x104a>
 803339e:	f1ba 0f01 	cmp.w	sl, #1
 80333a2:	d144      	bne.n	803342e <__ssvfscanf_r+0x104a>
 80333a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80333a6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80333aa:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80333ae:	3901      	subs	r1, #1
 80333b0:	f809 cb01 	strb.w	ip, [r9], #1
 80333b4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 80333b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80333ba:	f04f 0a00 	mov.w	sl, #0
 80333be:	e003      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 80333c0:	0631      	lsls	r1, r6, #24
 80333c2:	d534      	bpl.n	803342e <__ssvfscanf_r+0x104a>
 80333c4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80333c8:	f809 0b01 	strb.w	r0, [r9], #1
 80333cc:	e7c9      	b.n	8033362 <__ssvfscanf_r+0xf7e>
 80333ce:	f1bb 0f00 	cmp.w	fp, #0
 80333d2:	d10c      	bne.n	80333ee <__ssvfscanf_r+0x100a>
 80333d4:	f1ba 0f00 	cmp.w	sl, #0
 80333d8:	d10d      	bne.n	80333f6 <__ssvfscanf_r+0x1012>
 80333da:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80333de:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80333e2:	d108      	bne.n	80333f6 <__ssvfscanf_r+0x1012>
 80333e4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80333e8:	f04f 0b01 	mov.w	fp, #1
 80333ec:	e7ec      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 80333ee:	f1bb 0f02 	cmp.w	fp, #2
 80333f2:	f000 8088 	beq.w	8033506 <__ssvfscanf_r+0x1122>
 80333f6:	f1b8 0f01 	cmp.w	r8, #1
 80333fa:	d002      	beq.n	8033402 <__ssvfscanf_r+0x101e>
 80333fc:	f1b8 0f04 	cmp.w	r8, #4
 8033400:	d115      	bne.n	803342e <__ssvfscanf_r+0x104a>
 8033402:	f108 0801 	add.w	r8, r8, #1
 8033406:	fa5f f888 	uxtb.w	r8, r8
 803340a:	e7dd      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 803340c:	0531      	lsls	r1, r6, #20
 803340e:	d50b      	bpl.n	8033428 <__ssvfscanf_r+0x1044>
 8033410:	eb1b 0c08 	adds.w	ip, fp, r8
 8033414:	d108      	bne.n	8033428 <__ssvfscanf_r+0x1044>
 8033416:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803341a:	46e0      	mov	r8, ip
 803341c:	46e3      	mov	fp, ip
 803341e:	e7d3      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 8033420:	0803c5d8 	.word	0x0803c5d8
 8033424:	08035179 	.word	0x08035179
 8033428:	f1bb 0f01 	cmp.w	fp, #1
 803342c:	d06e      	beq.n	803350c <__ssvfscanf_r+0x1128>
 803342e:	f1ba 0f00 	cmp.w	sl, #0
 8033432:	d001      	beq.n	8033438 <__ssvfscanf_r+0x1054>
 8033434:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8033438:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803343c:	f1bb 0f01 	cmp.w	fp, #1
 8033440:	d873      	bhi.n	803352a <__ssvfscanf_r+0x1146>
 8033442:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8033446:	45a9      	cmp	r9, r5
 8033448:	f67f a8c2 	bls.w	80325d0 <__ssvfscanf_r+0x1ec>
 803344c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033452:	4622      	mov	r2, r4
 8033454:	f7fc fdd6 	bl	8030004 <_sungetc_r>
 8033458:	e7f5      	b.n	8033446 <__ssvfscanf_r+0x1062>
 803345a:	f1b8 0f00 	cmp.w	r8, #0
 803345e:	d10d      	bne.n	803347c <__ssvfscanf_r+0x1098>
 8033460:	f1ba 0f00 	cmp.w	sl, #0
 8033464:	d1e6      	bne.n	8033434 <__ssvfscanf_r+0x1050>
 8033466:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803346a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803346e:	f040 8124 	bne.w	80336ba <__ssvfscanf_r+0x12d6>
 8033472:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8033476:	f04f 0801 	mov.w	r8, #1
 803347a:	e7a5      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 803347c:	f1b8 0f03 	cmp.w	r8, #3
 8033480:	d0bf      	beq.n	8033402 <__ssvfscanf_r+0x101e>
 8033482:	f1b8 0f05 	cmp.w	r8, #5
 8033486:	e7bb      	b.n	8033400 <__ssvfscanf_r+0x101c>
 8033488:	0531      	lsls	r1, r6, #20
 803348a:	d502      	bpl.n	8033492 <__ssvfscanf_r+0x10ae>
 803348c:	eb1b 0c08 	adds.w	ip, fp, r8
 8033490:	d0c1      	beq.n	8033416 <__ssvfscanf_r+0x1032>
 8033492:	f1b8 0f02 	cmp.w	r8, #2
 8033496:	d1ca      	bne.n	803342e <__ssvfscanf_r+0x104a>
 8033498:	f04f 0803 	mov.w	r8, #3
 803349c:	e794      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 803349e:	f1b8 0f06 	cmp.w	r8, #6
 80334a2:	d1c4      	bne.n	803342e <__ssvfscanf_r+0x104a>
 80334a4:	f04f 0807 	mov.w	r8, #7
 80334a8:	e78e      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 80334aa:	f1b8 0f07 	cmp.w	r8, #7
 80334ae:	d1be      	bne.n	803342e <__ssvfscanf_r+0x104a>
 80334b0:	f04f 0808 	mov.w	r8, #8
 80334b4:	e788      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 80334b6:	0531      	lsls	r1, r6, #20
 80334b8:	d5b9      	bpl.n	803342e <__ssvfscanf_r+0x104a>
 80334ba:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 80334be:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 80334c2:	d005      	beq.n	80334d0 <__ssvfscanf_r+0x10ec>
 80334c4:	0571      	lsls	r1, r6, #21
 80334c6:	d5b2      	bpl.n	803342e <__ssvfscanf_r+0x104a>
 80334c8:	f1ba 0f00 	cmp.w	sl, #0
 80334cc:	f000 80f5 	beq.w	80336ba <__ssvfscanf_r+0x12d6>
 80334d0:	05b1      	lsls	r1, r6, #22
 80334d2:	bf58      	it	pl
 80334d4:	6939      	ldrpl	r1, [r7, #16]
 80334d6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 80334da:	bf5c      	itt	pl
 80334dc:	ebaa 0101 	subpl.w	r1, sl, r1
 80334e0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 80334e4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 80334e8:	e767      	b.n	80333ba <__ssvfscanf_r+0xfd6>
 80334ea:	0531      	lsls	r1, r6, #20
 80334ec:	d5e5      	bpl.n	80334ba <__ssvfscanf_r+0x10d6>
 80334ee:	e74d      	b.n	803338c <__ssvfscanf_r+0xfa8>
 80334f0:	f892 c000 	ldrb.w	ip, [r2]
 80334f4:	4584      	cmp	ip, r0
 80334f6:	d19a      	bne.n	803342e <__ssvfscanf_r+0x104a>
 80334f8:	05b1      	lsls	r1, r6, #22
 80334fa:	d598      	bpl.n	803342e <__ssvfscanf_r+0x104a>
 80334fc:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8033500:	f8c7 a010 	str.w	sl, [r7, #16]
 8033504:	e760      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 8033506:	f04f 0b03 	mov.w	fp, #3
 803350a:	e75d      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 803350c:	f04f 0b02 	mov.w	fp, #2
 8033510:	e75a      	b.n	80333c8 <__ssvfscanf_r+0xfe4>
 8033512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033514:	4621      	mov	r1, r4
 8033516:	e9c7 2300 	strd	r2, r3, [r7]
 803351a:	f7fc fdae 	bl	803007a <__ssrefill_r>
 803351e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033522:	2800      	cmp	r0, #0
 8033524:	f43f af2c 	beq.w	8033380 <__ssvfscanf_r+0xf9c>
 8033528:	e781      	b.n	803342e <__ssvfscanf_r+0x104a>
 803352a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803352e:	2b06      	cmp	r3, #6
 8033530:	d827      	bhi.n	8033582 <__ssvfscanf_r+0x119e>
 8033532:	f1b8 0f02 	cmp.w	r8, #2
 8033536:	d834      	bhi.n	80335a2 <__ssvfscanf_r+0x11be>
 8033538:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803353c:	45a9      	cmp	r9, r5
 803353e:	f67f a847 	bls.w	80325d0 <__ssvfscanf_r+0x1ec>
 8033542:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033548:	4622      	mov	r2, r4
 803354a:	f7fc fd5b 	bl	8030004 <_sungetc_r>
 803354e:	e7f5      	b.n	803353c <__ssvfscanf_r+0x1158>
 8033550:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8033554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033558:	4622      	mov	r2, r4
 803355a:	f7fc fd53 	bl	8030004 <_sungetc_r>
 803355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033560:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8033564:	fa5f fb8b 	uxtb.w	fp, fp
 8033568:	f1bb 0f02 	cmp.w	fp, #2
 803356c:	d1f0      	bne.n	8033550 <__ssvfscanf_r+0x116c>
 803356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033570:	f1a8 0803 	sub.w	r8, r8, #3
 8033574:	fa5f f888 	uxtb.w	r8, r8
 8033578:	eba3 0308 	sub.w	r3, r3, r8
 803357c:	eba9 0908 	sub.w	r9, r9, r8
 8033580:	633b      	str	r3, [r7, #48]	@ 0x30
 8033582:	05f3      	lsls	r3, r6, #23
 8033584:	d52d      	bpl.n	80335e2 <__ssvfscanf_r+0x11fe>
 8033586:	0570      	lsls	r0, r6, #21
 8033588:	d50e      	bpl.n	80335a8 <__ssvfscanf_r+0x11c4>
 803358a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803358e:	45a9      	cmp	r9, r5
 8033590:	f67f a81e 	bls.w	80325d0 <__ssvfscanf_r+0x1ec>
 8033594:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803359a:	4622      	mov	r2, r4
 803359c:	f7fc fd32 	bl	8030004 <_sungetc_r>
 80335a0:	e7f5      	b.n	803358e <__ssvfscanf_r+0x11aa>
 80335a2:	46c3      	mov	fp, r8
 80335a4:	464b      	mov	r3, r9
 80335a6:	e7db      	b.n	8033560 <__ssvfscanf_r+0x117c>
 80335a8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80335ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80335ae:	2965      	cmp	r1, #101	@ 0x65
 80335b0:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 80335b4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80335b8:	d00c      	beq.n	80335d4 <__ssvfscanf_r+0x11f0>
 80335ba:	2945      	cmp	r1, #69	@ 0x45
 80335bc:	d00a      	beq.n	80335d4 <__ssvfscanf_r+0x11f0>
 80335be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80335c0:	4622      	mov	r2, r4
 80335c2:	f7fc fd1f 	bl	8030004 <_sungetc_r>
 80335c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80335c8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80335cc:	f1a9 0802 	sub.w	r8, r9, #2
 80335d0:	f1a3 0b02 	sub.w	fp, r3, #2
 80335d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80335d6:	4622      	mov	r2, r4
 80335d8:	f7fc fd14 	bl	8030004 <_sungetc_r>
 80335dc:	46c1      	mov	r9, r8
 80335de:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 80335e2:	f016 0210 	ands.w	r2, r6, #16
 80335e6:	f47e af18 	bne.w	803241a <__ssvfscanf_r+0x36>
 80335ea:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 80335ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80335f2:	f889 2000 	strb.w	r2, [r9]
 80335f6:	d119      	bne.n	803362c <__ssvfscanf_r+0x1248>
 80335f8:	693b      	ldr	r3, [r7, #16]
 80335fa:	4553      	cmp	r3, sl
 80335fc:	eba3 020a 	sub.w	r2, r3, sl
 8033600:	d121      	bne.n	8033646 <__ssvfscanf_r+0x1262>
 8033602:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033608:	2200      	movs	r2, #0
 803360a:	f001 fd41 	bl	8035090 <_strtod_r>
 803360e:	07f1      	lsls	r1, r6, #31
 8033610:	ec59 8b10 	vmov	r8, r9, d0
 8033614:	f105 0a04 	add.w	sl, r5, #4
 8033618:	d520      	bpl.n	803365c <__ssvfscanf_r+0x1278>
 803361a:	682b      	ldr	r3, [r5, #0]
 803361c:	ed83 0b00 	vstr	d0, [r3]
 8033620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033622:	3301      	adds	r3, #1
 8033624:	627b      	str	r3, [r7, #36]	@ 0x24
 8033626:	4655      	mov	r5, sl
 8033628:	f7fe bef7 	b.w	803241a <__ssvfscanf_r+0x36>
 803362c:	68fb      	ldr	r3, [r7, #12]
 803362e:	2b00      	cmp	r3, #0
 8033630:	d0e7      	beq.n	8033602 <__ssvfscanf_r+0x121e>
 8033632:	68b9      	ldr	r1, [r7, #8]
 8033634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033636:	230a      	movs	r3, #10
 8033638:	3101      	adds	r1, #1
 803363a:	f7f8 fe9d 	bl	802c378 <_strtol_r>
 803363e:	68fb      	ldr	r3, [r7, #12]
 8033640:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8033644:	1ac2      	subs	r2, r0, r3
 8033646:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 803364a:	4599      	cmp	r9, r3
 803364c:	bf28      	it	cs
 803364e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8033652:	491b      	ldr	r1, [pc, #108]	@ (80336c0 <__ssvfscanf_r+0x12dc>)
 8033654:	4648      	mov	r0, r9
 8033656:	f7f8 ff49 	bl	802c4ec <sprintf>
 803365a:	e7d2      	b.n	8033602 <__ssvfscanf_r+0x121e>
 803365c:	07b2      	lsls	r2, r6, #30
 803365e:	682d      	ldr	r5, [r5, #0]
 8033660:	d502      	bpl.n	8033668 <__ssvfscanf_r+0x1284>
 8033662:	ed85 0b00 	vstr	d0, [r5]
 8033666:	e7db      	b.n	8033620 <__ssvfscanf_r+0x123c>
 8033668:	4642      	mov	r2, r8
 803366a:	464b      	mov	r3, r9
 803366c:	4640      	mov	r0, r8
 803366e:	4649      	mov	r1, r9
 8033670:	f7dd fa74 	bl	8010b5c <__aeabi_dcmpun>
 8033674:	b128      	cbz	r0, 8033682 <__ssvfscanf_r+0x129e>
 8033676:	4813      	ldr	r0, [pc, #76]	@ (80336c4 <__ssvfscanf_r+0x12e0>)
 8033678:	f002 f8f6 	bl	8035868 <nanf>
 803367c:	ed85 0a00 	vstr	s0, [r5]
 8033680:	e7ce      	b.n	8033620 <__ssvfscanf_r+0x123c>
 8033682:	4640      	mov	r0, r8
 8033684:	4649      	mov	r1, r9
 8033686:	f7dd fac7 	bl	8010c18 <__aeabi_d2f>
 803368a:	6028      	str	r0, [r5, #0]
 803368c:	e7c8      	b.n	8033620 <__ssvfscanf_r+0x123c>
 803368e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8033692:	6818      	ldr	r0, [r3, #0]
 8033694:	f7fb fd3a 	bl	802f10c <free>
 8033698:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 803369c:	3401      	adds	r4, #1
 803369e:	601e      	str	r6, [r3, #0]
 80336a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80336a2:	681d      	ldr	r5, [r3, #0]
 80336a4:	88db      	ldrh	r3, [r3, #6]
 80336a6:	42a3      	cmp	r3, r4
 80336a8:	dcf1      	bgt.n	803368e <__ssvfscanf_r+0x12aa>
 80336aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80336ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80336b0:	f7ff b85c 	b.w	803276c <__ssvfscanf_r+0x388>
 80336b4:	2400      	movs	r4, #0
 80336b6:	4626      	mov	r6, r4
 80336b8:	e7f2      	b.n	80336a0 <__ssvfscanf_r+0x12bc>
 80336ba:	f04f 0a00 	mov.w	sl, #0
 80336be:	e6bb      	b.n	8033438 <__ssvfscanf_r+0x1054>
 80336c0:	0803c5d2 	.word	0x0803c5d2
 80336c4:	0803c03a 	.word	0x0803c03a

080336c8 <_putc_r>:
 80336c8:	b570      	push	{r4, r5, r6, lr}
 80336ca:	460d      	mov	r5, r1
 80336cc:	4614      	mov	r4, r2
 80336ce:	4606      	mov	r6, r0
 80336d0:	b118      	cbz	r0, 80336da <_putc_r+0x12>
 80336d2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80336d4:	b90b      	cbnz	r3, 80336da <_putc_r+0x12>
 80336d6:	f7f9 f825 	bl	802c724 <__sinit>
 80336da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80336dc:	07d8      	lsls	r0, r3, #31
 80336de:	d405      	bmi.n	80336ec <_putc_r+0x24>
 80336e0:	89a3      	ldrh	r3, [r4, #12]
 80336e2:	0599      	lsls	r1, r3, #22
 80336e4:	d402      	bmi.n	80336ec <_putc_r+0x24>
 80336e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80336e8:	f7fa fcfb 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 80336ec:	68a3      	ldr	r3, [r4, #8]
 80336ee:	3b01      	subs	r3, #1
 80336f0:	2b00      	cmp	r3, #0
 80336f2:	60a3      	str	r3, [r4, #8]
 80336f4:	da05      	bge.n	8033702 <_putc_r+0x3a>
 80336f6:	69a2      	ldr	r2, [r4, #24]
 80336f8:	4293      	cmp	r3, r2
 80336fa:	db12      	blt.n	8033722 <_putc_r+0x5a>
 80336fc:	b2eb      	uxtb	r3, r5
 80336fe:	2b0a      	cmp	r3, #10
 8033700:	d00f      	beq.n	8033722 <_putc_r+0x5a>
 8033702:	6823      	ldr	r3, [r4, #0]
 8033704:	1c5a      	adds	r2, r3, #1
 8033706:	6022      	str	r2, [r4, #0]
 8033708:	701d      	strb	r5, [r3, #0]
 803370a:	b2ed      	uxtb	r5, r5
 803370c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803370e:	07da      	lsls	r2, r3, #31
 8033710:	d405      	bmi.n	803371e <_putc_r+0x56>
 8033712:	89a3      	ldrh	r3, [r4, #12]
 8033714:	059b      	lsls	r3, r3, #22
 8033716:	d402      	bmi.n	803371e <_putc_r+0x56>
 8033718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803371a:	f7fa fce4 	bl	802e0e6 <__retarget_lock_release_recursive>
 803371e:	4628      	mov	r0, r5
 8033720:	bd70      	pop	{r4, r5, r6, pc}
 8033722:	4629      	mov	r1, r5
 8033724:	4622      	mov	r2, r4
 8033726:	4630      	mov	r0, r6
 8033728:	f001 fd79 	bl	803521e <__swbuf_r>
 803372c:	4605      	mov	r5, r0
 803372e:	e7ed      	b.n	803370c <_putc_r+0x44>

08033730 <__malloc_lock>:
 8033730:	4801      	ldr	r0, [pc, #4]	@ (8033738 <__malloc_lock+0x8>)
 8033732:	f7fa bcd6 	b.w	802e0e2 <__retarget_lock_acquire_recursive>
 8033736:	bf00      	nop
 8033738:	2001a092 	.word	0x2001a092

0803373c <__malloc_unlock>:
 803373c:	4801      	ldr	r0, [pc, #4]	@ (8033744 <__malloc_unlock+0x8>)
 803373e:	f7fa bcd2 	b.w	802e0e6 <__retarget_lock_release_recursive>
 8033742:	bf00      	nop
 8033744:	2001a092 	.word	0x2001a092

08033748 <_Balloc>:
 8033748:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803374a:	b570      	push	{r4, r5, r6, lr}
 803374c:	4605      	mov	r5, r0
 803374e:	460c      	mov	r4, r1
 8033750:	b17b      	cbz	r3, 8033772 <_Balloc+0x2a>
 8033752:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8033754:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8033758:	b9a0      	cbnz	r0, 8033784 <_Balloc+0x3c>
 803375a:	2101      	movs	r1, #1
 803375c:	fa01 f604 	lsl.w	r6, r1, r4
 8033760:	1d72      	adds	r2, r6, #5
 8033762:	0092      	lsls	r2, r2, #2
 8033764:	4628      	mov	r0, r5
 8033766:	f002 f885 	bl	8035874 <_calloc_r>
 803376a:	b148      	cbz	r0, 8033780 <_Balloc+0x38>
 803376c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8033770:	e00b      	b.n	803378a <_Balloc+0x42>
 8033772:	2221      	movs	r2, #33	@ 0x21
 8033774:	2104      	movs	r1, #4
 8033776:	f002 f87d 	bl	8035874 <_calloc_r>
 803377a:	6468      	str	r0, [r5, #68]	@ 0x44
 803377c:	2800      	cmp	r0, #0
 803377e:	d1e8      	bne.n	8033752 <_Balloc+0xa>
 8033780:	2000      	movs	r0, #0
 8033782:	bd70      	pop	{r4, r5, r6, pc}
 8033784:	6802      	ldr	r2, [r0, #0]
 8033786:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803378a:	2300      	movs	r3, #0
 803378c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8033790:	e7f7      	b.n	8033782 <_Balloc+0x3a>

08033792 <_Bfree>:
 8033792:	b131      	cbz	r1, 80337a2 <_Bfree+0x10>
 8033794:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8033796:	684a      	ldr	r2, [r1, #4]
 8033798:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 803379c:	6008      	str	r0, [r1, #0]
 803379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80337a2:	4770      	bx	lr

080337a4 <__multadd>:
 80337a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80337a8:	690d      	ldr	r5, [r1, #16]
 80337aa:	4607      	mov	r7, r0
 80337ac:	460c      	mov	r4, r1
 80337ae:	461e      	mov	r6, r3
 80337b0:	f101 0c14 	add.w	ip, r1, #20
 80337b4:	2000      	movs	r0, #0
 80337b6:	f8dc 3000 	ldr.w	r3, [ip]
 80337ba:	b299      	uxth	r1, r3
 80337bc:	fb02 6101 	mla	r1, r2, r1, r6
 80337c0:	0c1e      	lsrs	r6, r3, #16
 80337c2:	0c0b      	lsrs	r3, r1, #16
 80337c4:	fb02 3306 	mla	r3, r2, r6, r3
 80337c8:	b289      	uxth	r1, r1
 80337ca:	3001      	adds	r0, #1
 80337cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80337d0:	4285      	cmp	r5, r0
 80337d2:	f84c 1b04 	str.w	r1, [ip], #4
 80337d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80337da:	dcec      	bgt.n	80337b6 <__multadd+0x12>
 80337dc:	b30e      	cbz	r6, 8033822 <__multadd+0x7e>
 80337de:	68a3      	ldr	r3, [r4, #8]
 80337e0:	42ab      	cmp	r3, r5
 80337e2:	dc19      	bgt.n	8033818 <__multadd+0x74>
 80337e4:	6861      	ldr	r1, [r4, #4]
 80337e6:	4638      	mov	r0, r7
 80337e8:	3101      	adds	r1, #1
 80337ea:	f7ff ffad 	bl	8033748 <_Balloc>
 80337ee:	4680      	mov	r8, r0
 80337f0:	b928      	cbnz	r0, 80337fe <__multadd+0x5a>
 80337f2:	4602      	mov	r2, r0
 80337f4:	4b0c      	ldr	r3, [pc, #48]	@ (8033828 <__multadd+0x84>)
 80337f6:	480d      	ldr	r0, [pc, #52]	@ (803382c <__multadd+0x88>)
 80337f8:	21ba      	movs	r1, #186	@ 0xba
 80337fa:	f7f6 fce7 	bl	802a1cc <__assert_func>
 80337fe:	6922      	ldr	r2, [r4, #16]
 8033800:	3202      	adds	r2, #2
 8033802:	f104 010c 	add.w	r1, r4, #12
 8033806:	0092      	lsls	r2, r2, #2
 8033808:	300c      	adds	r0, #12
 803380a:	f7fa fc6d 	bl	802e0e8 <memcpy>
 803380e:	4621      	mov	r1, r4
 8033810:	4638      	mov	r0, r7
 8033812:	f7ff ffbe 	bl	8033792 <_Bfree>
 8033816:	4644      	mov	r4, r8
 8033818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803381c:	3501      	adds	r5, #1
 803381e:	615e      	str	r6, [r3, #20]
 8033820:	6125      	str	r5, [r4, #16]
 8033822:	4620      	mov	r0, r4
 8033824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033828:	0803c506 	.word	0x0803c506
 803382c:	0803c5fa 	.word	0x0803c5fa

08033830 <__s2b>:
 8033830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033834:	460c      	mov	r4, r1
 8033836:	4615      	mov	r5, r2
 8033838:	461f      	mov	r7, r3
 803383a:	2209      	movs	r2, #9
 803383c:	3308      	adds	r3, #8
 803383e:	4606      	mov	r6, r0
 8033840:	fb93 f3f2 	sdiv	r3, r3, r2
 8033844:	2100      	movs	r1, #0
 8033846:	2201      	movs	r2, #1
 8033848:	429a      	cmp	r2, r3
 803384a:	db09      	blt.n	8033860 <__s2b+0x30>
 803384c:	4630      	mov	r0, r6
 803384e:	f7ff ff7b 	bl	8033748 <_Balloc>
 8033852:	b940      	cbnz	r0, 8033866 <__s2b+0x36>
 8033854:	4602      	mov	r2, r0
 8033856:	4b19      	ldr	r3, [pc, #100]	@ (80338bc <__s2b+0x8c>)
 8033858:	4819      	ldr	r0, [pc, #100]	@ (80338c0 <__s2b+0x90>)
 803385a:	21d3      	movs	r1, #211	@ 0xd3
 803385c:	f7f6 fcb6 	bl	802a1cc <__assert_func>
 8033860:	0052      	lsls	r2, r2, #1
 8033862:	3101      	adds	r1, #1
 8033864:	e7f0      	b.n	8033848 <__s2b+0x18>
 8033866:	9b08      	ldr	r3, [sp, #32]
 8033868:	6143      	str	r3, [r0, #20]
 803386a:	2d09      	cmp	r5, #9
 803386c:	f04f 0301 	mov.w	r3, #1
 8033870:	6103      	str	r3, [r0, #16]
 8033872:	dd16      	ble.n	80338a2 <__s2b+0x72>
 8033874:	f104 0909 	add.w	r9, r4, #9
 8033878:	46c8      	mov	r8, r9
 803387a:	442c      	add	r4, r5
 803387c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8033880:	4601      	mov	r1, r0
 8033882:	3b30      	subs	r3, #48	@ 0x30
 8033884:	220a      	movs	r2, #10
 8033886:	4630      	mov	r0, r6
 8033888:	f7ff ff8c 	bl	80337a4 <__multadd>
 803388c:	45a0      	cmp	r8, r4
 803388e:	d1f5      	bne.n	803387c <__s2b+0x4c>
 8033890:	f1a5 0408 	sub.w	r4, r5, #8
 8033894:	444c      	add	r4, r9
 8033896:	1b2d      	subs	r5, r5, r4
 8033898:	1963      	adds	r3, r4, r5
 803389a:	42bb      	cmp	r3, r7
 803389c:	db04      	blt.n	80338a8 <__s2b+0x78>
 803389e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80338a2:	340a      	adds	r4, #10
 80338a4:	2509      	movs	r5, #9
 80338a6:	e7f6      	b.n	8033896 <__s2b+0x66>
 80338a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80338ac:	4601      	mov	r1, r0
 80338ae:	3b30      	subs	r3, #48	@ 0x30
 80338b0:	220a      	movs	r2, #10
 80338b2:	4630      	mov	r0, r6
 80338b4:	f7ff ff76 	bl	80337a4 <__multadd>
 80338b8:	e7ee      	b.n	8033898 <__s2b+0x68>
 80338ba:	bf00      	nop
 80338bc:	0803c506 	.word	0x0803c506
 80338c0:	0803c5fa 	.word	0x0803c5fa

080338c4 <__hi0bits>:
 80338c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80338c8:	4603      	mov	r3, r0
 80338ca:	bf36      	itet	cc
 80338cc:	0403      	lslcc	r3, r0, #16
 80338ce:	2000      	movcs	r0, #0
 80338d0:	2010      	movcc	r0, #16
 80338d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80338d6:	bf3c      	itt	cc
 80338d8:	021b      	lslcc	r3, r3, #8
 80338da:	3008      	addcc	r0, #8
 80338dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80338e0:	bf3c      	itt	cc
 80338e2:	011b      	lslcc	r3, r3, #4
 80338e4:	3004      	addcc	r0, #4
 80338e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80338ea:	bf3c      	itt	cc
 80338ec:	009b      	lslcc	r3, r3, #2
 80338ee:	3002      	addcc	r0, #2
 80338f0:	2b00      	cmp	r3, #0
 80338f2:	db05      	blt.n	8033900 <__hi0bits+0x3c>
 80338f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80338f8:	f100 0001 	add.w	r0, r0, #1
 80338fc:	bf08      	it	eq
 80338fe:	2020      	moveq	r0, #32
 8033900:	4770      	bx	lr

08033902 <__lo0bits>:
 8033902:	6803      	ldr	r3, [r0, #0]
 8033904:	4602      	mov	r2, r0
 8033906:	f013 0007 	ands.w	r0, r3, #7
 803390a:	d00b      	beq.n	8033924 <__lo0bits+0x22>
 803390c:	07d9      	lsls	r1, r3, #31
 803390e:	d421      	bmi.n	8033954 <__lo0bits+0x52>
 8033910:	0798      	lsls	r0, r3, #30
 8033912:	bf49      	itett	mi
 8033914:	085b      	lsrmi	r3, r3, #1
 8033916:	089b      	lsrpl	r3, r3, #2
 8033918:	2001      	movmi	r0, #1
 803391a:	6013      	strmi	r3, [r2, #0]
 803391c:	bf5c      	itt	pl
 803391e:	6013      	strpl	r3, [r2, #0]
 8033920:	2002      	movpl	r0, #2
 8033922:	4770      	bx	lr
 8033924:	b299      	uxth	r1, r3
 8033926:	b909      	cbnz	r1, 803392c <__lo0bits+0x2a>
 8033928:	0c1b      	lsrs	r3, r3, #16
 803392a:	2010      	movs	r0, #16
 803392c:	b2d9      	uxtb	r1, r3
 803392e:	b909      	cbnz	r1, 8033934 <__lo0bits+0x32>
 8033930:	3008      	adds	r0, #8
 8033932:	0a1b      	lsrs	r3, r3, #8
 8033934:	0719      	lsls	r1, r3, #28
 8033936:	bf04      	itt	eq
 8033938:	091b      	lsreq	r3, r3, #4
 803393a:	3004      	addeq	r0, #4
 803393c:	0799      	lsls	r1, r3, #30
 803393e:	bf04      	itt	eq
 8033940:	089b      	lsreq	r3, r3, #2
 8033942:	3002      	addeq	r0, #2
 8033944:	07d9      	lsls	r1, r3, #31
 8033946:	d403      	bmi.n	8033950 <__lo0bits+0x4e>
 8033948:	085b      	lsrs	r3, r3, #1
 803394a:	f100 0001 	add.w	r0, r0, #1
 803394e:	d003      	beq.n	8033958 <__lo0bits+0x56>
 8033950:	6013      	str	r3, [r2, #0]
 8033952:	4770      	bx	lr
 8033954:	2000      	movs	r0, #0
 8033956:	4770      	bx	lr
 8033958:	2020      	movs	r0, #32
 803395a:	4770      	bx	lr

0803395c <__i2b>:
 803395c:	b510      	push	{r4, lr}
 803395e:	460c      	mov	r4, r1
 8033960:	2101      	movs	r1, #1
 8033962:	f7ff fef1 	bl	8033748 <_Balloc>
 8033966:	4602      	mov	r2, r0
 8033968:	b928      	cbnz	r0, 8033976 <__i2b+0x1a>
 803396a:	4b05      	ldr	r3, [pc, #20]	@ (8033980 <__i2b+0x24>)
 803396c:	4805      	ldr	r0, [pc, #20]	@ (8033984 <__i2b+0x28>)
 803396e:	f240 1145 	movw	r1, #325	@ 0x145
 8033972:	f7f6 fc2b 	bl	802a1cc <__assert_func>
 8033976:	2301      	movs	r3, #1
 8033978:	6144      	str	r4, [r0, #20]
 803397a:	6103      	str	r3, [r0, #16]
 803397c:	bd10      	pop	{r4, pc}
 803397e:	bf00      	nop
 8033980:	0803c506 	.word	0x0803c506
 8033984:	0803c5fa 	.word	0x0803c5fa

08033988 <__multiply>:
 8033988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803398c:	4614      	mov	r4, r2
 803398e:	690a      	ldr	r2, [r1, #16]
 8033990:	6923      	ldr	r3, [r4, #16]
 8033992:	429a      	cmp	r2, r3
 8033994:	bfa8      	it	ge
 8033996:	4623      	movge	r3, r4
 8033998:	460f      	mov	r7, r1
 803399a:	bfa4      	itt	ge
 803399c:	460c      	movge	r4, r1
 803399e:	461f      	movge	r7, r3
 80339a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80339a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80339a8:	68a3      	ldr	r3, [r4, #8]
 80339aa:	6861      	ldr	r1, [r4, #4]
 80339ac:	eb0a 0609 	add.w	r6, sl, r9
 80339b0:	42b3      	cmp	r3, r6
 80339b2:	b085      	sub	sp, #20
 80339b4:	bfb8      	it	lt
 80339b6:	3101      	addlt	r1, #1
 80339b8:	f7ff fec6 	bl	8033748 <_Balloc>
 80339bc:	b930      	cbnz	r0, 80339cc <__multiply+0x44>
 80339be:	4602      	mov	r2, r0
 80339c0:	4b44      	ldr	r3, [pc, #272]	@ (8033ad4 <__multiply+0x14c>)
 80339c2:	4845      	ldr	r0, [pc, #276]	@ (8033ad8 <__multiply+0x150>)
 80339c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80339c8:	f7f6 fc00 	bl	802a1cc <__assert_func>
 80339cc:	f100 0514 	add.w	r5, r0, #20
 80339d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80339d4:	462b      	mov	r3, r5
 80339d6:	2200      	movs	r2, #0
 80339d8:	4543      	cmp	r3, r8
 80339da:	d321      	bcc.n	8033a20 <__multiply+0x98>
 80339dc:	f107 0114 	add.w	r1, r7, #20
 80339e0:	f104 0214 	add.w	r2, r4, #20
 80339e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80339e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80339ec:	9302      	str	r3, [sp, #8]
 80339ee:	1b13      	subs	r3, r2, r4
 80339f0:	3b15      	subs	r3, #21
 80339f2:	f023 0303 	bic.w	r3, r3, #3
 80339f6:	3304      	adds	r3, #4
 80339f8:	f104 0715 	add.w	r7, r4, #21
 80339fc:	42ba      	cmp	r2, r7
 80339fe:	bf38      	it	cc
 8033a00:	2304      	movcc	r3, #4
 8033a02:	9301      	str	r3, [sp, #4]
 8033a04:	9b02      	ldr	r3, [sp, #8]
 8033a06:	9103      	str	r1, [sp, #12]
 8033a08:	428b      	cmp	r3, r1
 8033a0a:	d80c      	bhi.n	8033a26 <__multiply+0x9e>
 8033a0c:	2e00      	cmp	r6, #0
 8033a0e:	dd03      	ble.n	8033a18 <__multiply+0x90>
 8033a10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033a14:	2b00      	cmp	r3, #0
 8033a16:	d05b      	beq.n	8033ad0 <__multiply+0x148>
 8033a18:	6106      	str	r6, [r0, #16]
 8033a1a:	b005      	add	sp, #20
 8033a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033a20:	f843 2b04 	str.w	r2, [r3], #4
 8033a24:	e7d8      	b.n	80339d8 <__multiply+0x50>
 8033a26:	f8b1 a000 	ldrh.w	sl, [r1]
 8033a2a:	f1ba 0f00 	cmp.w	sl, #0
 8033a2e:	d024      	beq.n	8033a7a <__multiply+0xf2>
 8033a30:	f104 0e14 	add.w	lr, r4, #20
 8033a34:	46a9      	mov	r9, r5
 8033a36:	f04f 0c00 	mov.w	ip, #0
 8033a3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8033a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8033a42:	fa1f fb87 	uxth.w	fp, r7
 8033a46:	b29b      	uxth	r3, r3
 8033a48:	fb0a 330b 	mla	r3, sl, fp, r3
 8033a4c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8033a50:	f8d9 7000 	ldr.w	r7, [r9]
 8033a54:	4463      	add	r3, ip
 8033a56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033a5a:	fb0a c70b 	mla	r7, sl, fp, ip
 8033a5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8033a62:	b29b      	uxth	r3, r3
 8033a64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033a68:	4572      	cmp	r2, lr
 8033a6a:	f849 3b04 	str.w	r3, [r9], #4
 8033a6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033a72:	d8e2      	bhi.n	8033a3a <__multiply+0xb2>
 8033a74:	9b01      	ldr	r3, [sp, #4]
 8033a76:	f845 c003 	str.w	ip, [r5, r3]
 8033a7a:	9b03      	ldr	r3, [sp, #12]
 8033a7c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8033a80:	3104      	adds	r1, #4
 8033a82:	f1b9 0f00 	cmp.w	r9, #0
 8033a86:	d021      	beq.n	8033acc <__multiply+0x144>
 8033a88:	682b      	ldr	r3, [r5, #0]
 8033a8a:	f104 0c14 	add.w	ip, r4, #20
 8033a8e:	46ae      	mov	lr, r5
 8033a90:	f04f 0a00 	mov.w	sl, #0
 8033a94:	f8bc b000 	ldrh.w	fp, [ip]
 8033a98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8033a9c:	fb09 770b 	mla	r7, r9, fp, r7
 8033aa0:	4457      	add	r7, sl
 8033aa2:	b29b      	uxth	r3, r3
 8033aa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033aa8:	f84e 3b04 	str.w	r3, [lr], #4
 8033aac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8033ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033ab4:	f8be 3000 	ldrh.w	r3, [lr]
 8033ab8:	fb09 330a 	mla	r3, r9, sl, r3
 8033abc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8033ac0:	4562      	cmp	r2, ip
 8033ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8033ac6:	d8e5      	bhi.n	8033a94 <__multiply+0x10c>
 8033ac8:	9f01      	ldr	r7, [sp, #4]
 8033aca:	51eb      	str	r3, [r5, r7]
 8033acc:	3504      	adds	r5, #4
 8033ace:	e799      	b.n	8033a04 <__multiply+0x7c>
 8033ad0:	3e01      	subs	r6, #1
 8033ad2:	e79b      	b.n	8033a0c <__multiply+0x84>
 8033ad4:	0803c506 	.word	0x0803c506
 8033ad8:	0803c5fa 	.word	0x0803c5fa

08033adc <__pow5mult>:
 8033adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033ae0:	4615      	mov	r5, r2
 8033ae2:	f012 0203 	ands.w	r2, r2, #3
 8033ae6:	4607      	mov	r7, r0
 8033ae8:	460e      	mov	r6, r1
 8033aea:	d007      	beq.n	8033afc <__pow5mult+0x20>
 8033aec:	4c1a      	ldr	r4, [pc, #104]	@ (8033b58 <__pow5mult+0x7c>)
 8033aee:	3a01      	subs	r2, #1
 8033af0:	2300      	movs	r3, #0
 8033af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033af6:	f7ff fe55 	bl	80337a4 <__multadd>
 8033afa:	4606      	mov	r6, r0
 8033afc:	10ad      	asrs	r5, r5, #2
 8033afe:	d027      	beq.n	8033b50 <__pow5mult+0x74>
 8033b00:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033b02:	b944      	cbnz	r4, 8033b16 <__pow5mult+0x3a>
 8033b04:	f240 2171 	movw	r1, #625	@ 0x271
 8033b08:	4638      	mov	r0, r7
 8033b0a:	f7ff ff27 	bl	803395c <__i2b>
 8033b0e:	2300      	movs	r3, #0
 8033b10:	6438      	str	r0, [r7, #64]	@ 0x40
 8033b12:	4604      	mov	r4, r0
 8033b14:	6003      	str	r3, [r0, #0]
 8033b16:	f04f 0900 	mov.w	r9, #0
 8033b1a:	07eb      	lsls	r3, r5, #31
 8033b1c:	d50a      	bpl.n	8033b34 <__pow5mult+0x58>
 8033b1e:	4631      	mov	r1, r6
 8033b20:	4622      	mov	r2, r4
 8033b22:	4638      	mov	r0, r7
 8033b24:	f7ff ff30 	bl	8033988 <__multiply>
 8033b28:	4631      	mov	r1, r6
 8033b2a:	4680      	mov	r8, r0
 8033b2c:	4638      	mov	r0, r7
 8033b2e:	f7ff fe30 	bl	8033792 <_Bfree>
 8033b32:	4646      	mov	r6, r8
 8033b34:	106d      	asrs	r5, r5, #1
 8033b36:	d00b      	beq.n	8033b50 <__pow5mult+0x74>
 8033b38:	6820      	ldr	r0, [r4, #0]
 8033b3a:	b938      	cbnz	r0, 8033b4c <__pow5mult+0x70>
 8033b3c:	4622      	mov	r2, r4
 8033b3e:	4621      	mov	r1, r4
 8033b40:	4638      	mov	r0, r7
 8033b42:	f7ff ff21 	bl	8033988 <__multiply>
 8033b46:	6020      	str	r0, [r4, #0]
 8033b48:	f8c0 9000 	str.w	r9, [r0]
 8033b4c:	4604      	mov	r4, r0
 8033b4e:	e7e4      	b.n	8033b1a <__pow5mult+0x3e>
 8033b50:	4630      	mov	r0, r6
 8033b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033b56:	bf00      	nop
 8033b58:	0803c654 	.word	0x0803c654

08033b5c <__lshift>:
 8033b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8033b60:	460c      	mov	r4, r1
 8033b62:	6849      	ldr	r1, [r1, #4]
 8033b64:	6923      	ldr	r3, [r4, #16]
 8033b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8033b6a:	68a3      	ldr	r3, [r4, #8]
 8033b6c:	4607      	mov	r7, r0
 8033b6e:	4691      	mov	r9, r2
 8033b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8033b74:	f108 0601 	add.w	r6, r8, #1
 8033b78:	42b3      	cmp	r3, r6
 8033b7a:	db0b      	blt.n	8033b94 <__lshift+0x38>
 8033b7c:	4638      	mov	r0, r7
 8033b7e:	f7ff fde3 	bl	8033748 <_Balloc>
 8033b82:	4605      	mov	r5, r0
 8033b84:	b948      	cbnz	r0, 8033b9a <__lshift+0x3e>
 8033b86:	4602      	mov	r2, r0
 8033b88:	4b28      	ldr	r3, [pc, #160]	@ (8033c2c <__lshift+0xd0>)
 8033b8a:	4829      	ldr	r0, [pc, #164]	@ (8033c30 <__lshift+0xd4>)
 8033b8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8033b90:	f7f6 fb1c 	bl	802a1cc <__assert_func>
 8033b94:	3101      	adds	r1, #1
 8033b96:	005b      	lsls	r3, r3, #1
 8033b98:	e7ee      	b.n	8033b78 <__lshift+0x1c>
 8033b9a:	2300      	movs	r3, #0
 8033b9c:	f100 0114 	add.w	r1, r0, #20
 8033ba0:	f100 0210 	add.w	r2, r0, #16
 8033ba4:	4618      	mov	r0, r3
 8033ba6:	4553      	cmp	r3, sl
 8033ba8:	db33      	blt.n	8033c12 <__lshift+0xb6>
 8033baa:	6920      	ldr	r0, [r4, #16]
 8033bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8033bb0:	f104 0314 	add.w	r3, r4, #20
 8033bb4:	f019 091f 	ands.w	r9, r9, #31
 8033bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8033bbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8033bc0:	d02b      	beq.n	8033c1a <__lshift+0xbe>
 8033bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8033bc6:	468a      	mov	sl, r1
 8033bc8:	2200      	movs	r2, #0
 8033bca:	6818      	ldr	r0, [r3, #0]
 8033bcc:	fa00 f009 	lsl.w	r0, r0, r9
 8033bd0:	4310      	orrs	r0, r2
 8033bd2:	f84a 0b04 	str.w	r0, [sl], #4
 8033bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8033bda:	459c      	cmp	ip, r3
 8033bdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8033be0:	d8f3      	bhi.n	8033bca <__lshift+0x6e>
 8033be2:	ebac 0304 	sub.w	r3, ip, r4
 8033be6:	3b15      	subs	r3, #21
 8033be8:	f023 0303 	bic.w	r3, r3, #3
 8033bec:	3304      	adds	r3, #4
 8033bee:	f104 0015 	add.w	r0, r4, #21
 8033bf2:	4584      	cmp	ip, r0
 8033bf4:	bf38      	it	cc
 8033bf6:	2304      	movcc	r3, #4
 8033bf8:	50ca      	str	r2, [r1, r3]
 8033bfa:	b10a      	cbz	r2, 8033c00 <__lshift+0xa4>
 8033bfc:	f108 0602 	add.w	r6, r8, #2
 8033c00:	3e01      	subs	r6, #1
 8033c02:	4638      	mov	r0, r7
 8033c04:	612e      	str	r6, [r5, #16]
 8033c06:	4621      	mov	r1, r4
 8033c08:	f7ff fdc3 	bl	8033792 <_Bfree>
 8033c0c:	4628      	mov	r0, r5
 8033c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8033c16:	3301      	adds	r3, #1
 8033c18:	e7c5      	b.n	8033ba6 <__lshift+0x4a>
 8033c1a:	3904      	subs	r1, #4
 8033c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8033c20:	f841 2f04 	str.w	r2, [r1, #4]!
 8033c24:	459c      	cmp	ip, r3
 8033c26:	d8f9      	bhi.n	8033c1c <__lshift+0xc0>
 8033c28:	e7ea      	b.n	8033c00 <__lshift+0xa4>
 8033c2a:	bf00      	nop
 8033c2c:	0803c506 	.word	0x0803c506
 8033c30:	0803c5fa 	.word	0x0803c5fa

08033c34 <__mcmp>:
 8033c34:	690a      	ldr	r2, [r1, #16]
 8033c36:	4603      	mov	r3, r0
 8033c38:	6900      	ldr	r0, [r0, #16]
 8033c3a:	1a80      	subs	r0, r0, r2
 8033c3c:	b530      	push	{r4, r5, lr}
 8033c3e:	d10e      	bne.n	8033c5e <__mcmp+0x2a>
 8033c40:	3314      	adds	r3, #20
 8033c42:	3114      	adds	r1, #20
 8033c44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8033c48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8033c4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8033c50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8033c54:	4295      	cmp	r5, r2
 8033c56:	d003      	beq.n	8033c60 <__mcmp+0x2c>
 8033c58:	d205      	bcs.n	8033c66 <__mcmp+0x32>
 8033c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8033c5e:	bd30      	pop	{r4, r5, pc}
 8033c60:	42a3      	cmp	r3, r4
 8033c62:	d3f3      	bcc.n	8033c4c <__mcmp+0x18>
 8033c64:	e7fb      	b.n	8033c5e <__mcmp+0x2a>
 8033c66:	2001      	movs	r0, #1
 8033c68:	e7f9      	b.n	8033c5e <__mcmp+0x2a>
	...

08033c6c <__mdiff>:
 8033c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033c70:	4689      	mov	r9, r1
 8033c72:	4606      	mov	r6, r0
 8033c74:	4611      	mov	r1, r2
 8033c76:	4648      	mov	r0, r9
 8033c78:	4614      	mov	r4, r2
 8033c7a:	f7ff ffdb 	bl	8033c34 <__mcmp>
 8033c7e:	1e05      	subs	r5, r0, #0
 8033c80:	d112      	bne.n	8033ca8 <__mdiff+0x3c>
 8033c82:	4629      	mov	r1, r5
 8033c84:	4630      	mov	r0, r6
 8033c86:	f7ff fd5f 	bl	8033748 <_Balloc>
 8033c8a:	4602      	mov	r2, r0
 8033c8c:	b928      	cbnz	r0, 8033c9a <__mdiff+0x2e>
 8033c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8033d8c <__mdiff+0x120>)
 8033c90:	f240 2137 	movw	r1, #567	@ 0x237
 8033c94:	483e      	ldr	r0, [pc, #248]	@ (8033d90 <__mdiff+0x124>)
 8033c96:	f7f6 fa99 	bl	802a1cc <__assert_func>
 8033c9a:	2301      	movs	r3, #1
 8033c9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8033ca0:	4610      	mov	r0, r2
 8033ca2:	b003      	add	sp, #12
 8033ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033ca8:	bfbc      	itt	lt
 8033caa:	464b      	movlt	r3, r9
 8033cac:	46a1      	movlt	r9, r4
 8033cae:	4630      	mov	r0, r6
 8033cb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8033cb4:	bfba      	itte	lt
 8033cb6:	461c      	movlt	r4, r3
 8033cb8:	2501      	movlt	r5, #1
 8033cba:	2500      	movge	r5, #0
 8033cbc:	f7ff fd44 	bl	8033748 <_Balloc>
 8033cc0:	4602      	mov	r2, r0
 8033cc2:	b918      	cbnz	r0, 8033ccc <__mdiff+0x60>
 8033cc4:	4b31      	ldr	r3, [pc, #196]	@ (8033d8c <__mdiff+0x120>)
 8033cc6:	f240 2145 	movw	r1, #581	@ 0x245
 8033cca:	e7e3      	b.n	8033c94 <__mdiff+0x28>
 8033ccc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8033cd0:	6926      	ldr	r6, [r4, #16]
 8033cd2:	60c5      	str	r5, [r0, #12]
 8033cd4:	f109 0310 	add.w	r3, r9, #16
 8033cd8:	f109 0514 	add.w	r5, r9, #20
 8033cdc:	f104 0e14 	add.w	lr, r4, #20
 8033ce0:	f100 0b14 	add.w	fp, r0, #20
 8033ce4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8033ce8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8033cec:	9301      	str	r3, [sp, #4]
 8033cee:	46d9      	mov	r9, fp
 8033cf0:	f04f 0c00 	mov.w	ip, #0
 8033cf4:	9b01      	ldr	r3, [sp, #4]
 8033cf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8033cfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8033cfe:	9301      	str	r3, [sp, #4]
 8033d00:	fa1f f38a 	uxth.w	r3, sl
 8033d04:	4619      	mov	r1, r3
 8033d06:	b283      	uxth	r3, r0
 8033d08:	1acb      	subs	r3, r1, r3
 8033d0a:	0c00      	lsrs	r0, r0, #16
 8033d0c:	4463      	add	r3, ip
 8033d0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8033d12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8033d16:	b29b      	uxth	r3, r3
 8033d18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8033d1c:	4576      	cmp	r6, lr
 8033d1e:	f849 3b04 	str.w	r3, [r9], #4
 8033d22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033d26:	d8e5      	bhi.n	8033cf4 <__mdiff+0x88>
 8033d28:	1b33      	subs	r3, r6, r4
 8033d2a:	3b15      	subs	r3, #21
 8033d2c:	f023 0303 	bic.w	r3, r3, #3
 8033d30:	3415      	adds	r4, #21
 8033d32:	3304      	adds	r3, #4
 8033d34:	42a6      	cmp	r6, r4
 8033d36:	bf38      	it	cc
 8033d38:	2304      	movcc	r3, #4
 8033d3a:	441d      	add	r5, r3
 8033d3c:	445b      	add	r3, fp
 8033d3e:	461e      	mov	r6, r3
 8033d40:	462c      	mov	r4, r5
 8033d42:	4544      	cmp	r4, r8
 8033d44:	d30e      	bcc.n	8033d64 <__mdiff+0xf8>
 8033d46:	f108 0103 	add.w	r1, r8, #3
 8033d4a:	1b49      	subs	r1, r1, r5
 8033d4c:	f021 0103 	bic.w	r1, r1, #3
 8033d50:	3d03      	subs	r5, #3
 8033d52:	45a8      	cmp	r8, r5
 8033d54:	bf38      	it	cc
 8033d56:	2100      	movcc	r1, #0
 8033d58:	440b      	add	r3, r1
 8033d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033d5e:	b191      	cbz	r1, 8033d86 <__mdiff+0x11a>
 8033d60:	6117      	str	r7, [r2, #16]
 8033d62:	e79d      	b.n	8033ca0 <__mdiff+0x34>
 8033d64:	f854 1b04 	ldr.w	r1, [r4], #4
 8033d68:	46e6      	mov	lr, ip
 8033d6a:	0c08      	lsrs	r0, r1, #16
 8033d6c:	fa1c fc81 	uxtah	ip, ip, r1
 8033d70:	4471      	add	r1, lr
 8033d72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8033d76:	b289      	uxth	r1, r1
 8033d78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8033d7c:	f846 1b04 	str.w	r1, [r6], #4
 8033d80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033d84:	e7dd      	b.n	8033d42 <__mdiff+0xd6>
 8033d86:	3f01      	subs	r7, #1
 8033d88:	e7e7      	b.n	8033d5a <__mdiff+0xee>
 8033d8a:	bf00      	nop
 8033d8c:	0803c506 	.word	0x0803c506
 8033d90:	0803c5fa 	.word	0x0803c5fa

08033d94 <__ulp>:
 8033d94:	b082      	sub	sp, #8
 8033d96:	ed8d 0b00 	vstr	d0, [sp]
 8033d9a:	9a01      	ldr	r2, [sp, #4]
 8033d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8033ddc <__ulp+0x48>)
 8033d9e:	4013      	ands	r3, r2
 8033da0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8033da4:	2b00      	cmp	r3, #0
 8033da6:	dc08      	bgt.n	8033dba <__ulp+0x26>
 8033da8:	425b      	negs	r3, r3
 8033daa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8033dae:	ea4f 5223 	mov.w	r2, r3, asr #20
 8033db2:	da04      	bge.n	8033dbe <__ulp+0x2a>
 8033db4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8033db8:	4113      	asrs	r3, r2
 8033dba:	2200      	movs	r2, #0
 8033dbc:	e008      	b.n	8033dd0 <__ulp+0x3c>
 8033dbe:	f1a2 0314 	sub.w	r3, r2, #20
 8033dc2:	2b1e      	cmp	r3, #30
 8033dc4:	bfda      	itte	le
 8033dc6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8033dca:	40da      	lsrle	r2, r3
 8033dcc:	2201      	movgt	r2, #1
 8033dce:	2300      	movs	r3, #0
 8033dd0:	4619      	mov	r1, r3
 8033dd2:	4610      	mov	r0, r2
 8033dd4:	ec41 0b10 	vmov	d0, r0, r1
 8033dd8:	b002      	add	sp, #8
 8033dda:	4770      	bx	lr
 8033ddc:	7ff00000 	.word	0x7ff00000

08033de0 <__b2d>:
 8033de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033de4:	6906      	ldr	r6, [r0, #16]
 8033de6:	f100 0814 	add.w	r8, r0, #20
 8033dea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8033dee:	1f37      	subs	r7, r6, #4
 8033df0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8033df4:	4610      	mov	r0, r2
 8033df6:	f7ff fd65 	bl	80338c4 <__hi0bits>
 8033dfa:	f1c0 0320 	rsb	r3, r0, #32
 8033dfe:	280a      	cmp	r0, #10
 8033e00:	600b      	str	r3, [r1, #0]
 8033e02:	491b      	ldr	r1, [pc, #108]	@ (8033e70 <__b2d+0x90>)
 8033e04:	dc15      	bgt.n	8033e32 <__b2d+0x52>
 8033e06:	f1c0 0c0b 	rsb	ip, r0, #11
 8033e0a:	fa22 f30c 	lsr.w	r3, r2, ip
 8033e0e:	45b8      	cmp	r8, r7
 8033e10:	ea43 0501 	orr.w	r5, r3, r1
 8033e14:	bf34      	ite	cc
 8033e16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033e1a:	2300      	movcs	r3, #0
 8033e1c:	3015      	adds	r0, #21
 8033e1e:	fa02 f000 	lsl.w	r0, r2, r0
 8033e22:	fa23 f30c 	lsr.w	r3, r3, ip
 8033e26:	4303      	orrs	r3, r0
 8033e28:	461c      	mov	r4, r3
 8033e2a:	ec45 4b10 	vmov	d0, r4, r5
 8033e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033e32:	45b8      	cmp	r8, r7
 8033e34:	bf3a      	itte	cc
 8033e36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033e3a:	f1a6 0708 	subcc.w	r7, r6, #8
 8033e3e:	2300      	movcs	r3, #0
 8033e40:	380b      	subs	r0, #11
 8033e42:	d012      	beq.n	8033e6a <__b2d+0x8a>
 8033e44:	f1c0 0120 	rsb	r1, r0, #32
 8033e48:	fa23 f401 	lsr.w	r4, r3, r1
 8033e4c:	4082      	lsls	r2, r0
 8033e4e:	4322      	orrs	r2, r4
 8033e50:	4547      	cmp	r7, r8
 8033e52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8033e56:	bf8c      	ite	hi
 8033e58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8033e5c:	2200      	movls	r2, #0
 8033e5e:	4083      	lsls	r3, r0
 8033e60:	40ca      	lsrs	r2, r1
 8033e62:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8033e66:	4313      	orrs	r3, r2
 8033e68:	e7de      	b.n	8033e28 <__b2d+0x48>
 8033e6a:	ea42 0501 	orr.w	r5, r2, r1
 8033e6e:	e7db      	b.n	8033e28 <__b2d+0x48>
 8033e70:	3ff00000 	.word	0x3ff00000

08033e74 <__d2b>:
 8033e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8033e78:	460f      	mov	r7, r1
 8033e7a:	2101      	movs	r1, #1
 8033e7c:	ec59 8b10 	vmov	r8, r9, d0
 8033e80:	4616      	mov	r6, r2
 8033e82:	f7ff fc61 	bl	8033748 <_Balloc>
 8033e86:	4604      	mov	r4, r0
 8033e88:	b930      	cbnz	r0, 8033e98 <__d2b+0x24>
 8033e8a:	4602      	mov	r2, r0
 8033e8c:	4b23      	ldr	r3, [pc, #140]	@ (8033f1c <__d2b+0xa8>)
 8033e8e:	4824      	ldr	r0, [pc, #144]	@ (8033f20 <__d2b+0xac>)
 8033e90:	f240 310f 	movw	r1, #783	@ 0x30f
 8033e94:	f7f6 f99a 	bl	802a1cc <__assert_func>
 8033e98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8033e9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8033ea0:	b10d      	cbz	r5, 8033ea6 <__d2b+0x32>
 8033ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8033ea6:	9301      	str	r3, [sp, #4]
 8033ea8:	f1b8 0300 	subs.w	r3, r8, #0
 8033eac:	d023      	beq.n	8033ef6 <__d2b+0x82>
 8033eae:	4668      	mov	r0, sp
 8033eb0:	9300      	str	r3, [sp, #0]
 8033eb2:	f7ff fd26 	bl	8033902 <__lo0bits>
 8033eb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8033eba:	b1d0      	cbz	r0, 8033ef2 <__d2b+0x7e>
 8033ebc:	f1c0 0320 	rsb	r3, r0, #32
 8033ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8033ec4:	430b      	orrs	r3, r1
 8033ec6:	40c2      	lsrs	r2, r0
 8033ec8:	6163      	str	r3, [r4, #20]
 8033eca:	9201      	str	r2, [sp, #4]
 8033ecc:	9b01      	ldr	r3, [sp, #4]
 8033ece:	61a3      	str	r3, [r4, #24]
 8033ed0:	2b00      	cmp	r3, #0
 8033ed2:	bf0c      	ite	eq
 8033ed4:	2201      	moveq	r2, #1
 8033ed6:	2202      	movne	r2, #2
 8033ed8:	6122      	str	r2, [r4, #16]
 8033eda:	b1a5      	cbz	r5, 8033f06 <__d2b+0x92>
 8033edc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8033ee0:	4405      	add	r5, r0
 8033ee2:	603d      	str	r5, [r7, #0]
 8033ee4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8033ee8:	6030      	str	r0, [r6, #0]
 8033eea:	4620      	mov	r0, r4
 8033eec:	b003      	add	sp, #12
 8033eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033ef2:	6161      	str	r1, [r4, #20]
 8033ef4:	e7ea      	b.n	8033ecc <__d2b+0x58>
 8033ef6:	a801      	add	r0, sp, #4
 8033ef8:	f7ff fd03 	bl	8033902 <__lo0bits>
 8033efc:	9b01      	ldr	r3, [sp, #4]
 8033efe:	6163      	str	r3, [r4, #20]
 8033f00:	3020      	adds	r0, #32
 8033f02:	2201      	movs	r2, #1
 8033f04:	e7e8      	b.n	8033ed8 <__d2b+0x64>
 8033f06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8033f0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8033f0e:	6038      	str	r0, [r7, #0]
 8033f10:	6918      	ldr	r0, [r3, #16]
 8033f12:	f7ff fcd7 	bl	80338c4 <__hi0bits>
 8033f16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8033f1a:	e7e5      	b.n	8033ee8 <__d2b+0x74>
 8033f1c:	0803c506 	.word	0x0803c506
 8033f20:	0803c5fa 	.word	0x0803c5fa

08033f24 <__ratio>:
 8033f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033f28:	b085      	sub	sp, #20
 8033f2a:	e9cd 1000 	strd	r1, r0, [sp]
 8033f2e:	a902      	add	r1, sp, #8
 8033f30:	f7ff ff56 	bl	8033de0 <__b2d>
 8033f34:	9800      	ldr	r0, [sp, #0]
 8033f36:	a903      	add	r1, sp, #12
 8033f38:	ec55 4b10 	vmov	r4, r5, d0
 8033f3c:	f7ff ff50 	bl	8033de0 <__b2d>
 8033f40:	9b01      	ldr	r3, [sp, #4]
 8033f42:	6919      	ldr	r1, [r3, #16]
 8033f44:	9b00      	ldr	r3, [sp, #0]
 8033f46:	691b      	ldr	r3, [r3, #16]
 8033f48:	1ac9      	subs	r1, r1, r3
 8033f4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8033f4e:	1a9b      	subs	r3, r3, r2
 8033f50:	ec5b ab10 	vmov	sl, fp, d0
 8033f54:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8033f58:	2b00      	cmp	r3, #0
 8033f5a:	bfce      	itee	gt
 8033f5c:	462a      	movgt	r2, r5
 8033f5e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8033f62:	465a      	movle	r2, fp
 8033f64:	462f      	mov	r7, r5
 8033f66:	46d9      	mov	r9, fp
 8033f68:	bfcc      	ite	gt
 8033f6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8033f6e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8033f72:	464b      	mov	r3, r9
 8033f74:	4652      	mov	r2, sl
 8033f76:	4620      	mov	r0, r4
 8033f78:	4639      	mov	r1, r7
 8033f7a:	f7dc fc7f 	bl	801087c <__aeabi_ddiv>
 8033f7e:	ec41 0b10 	vmov	d0, r0, r1
 8033f82:	b005      	add	sp, #20
 8033f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033f88 <__copybits>:
 8033f88:	3901      	subs	r1, #1
 8033f8a:	b570      	push	{r4, r5, r6, lr}
 8033f8c:	1149      	asrs	r1, r1, #5
 8033f8e:	6914      	ldr	r4, [r2, #16]
 8033f90:	3101      	adds	r1, #1
 8033f92:	f102 0314 	add.w	r3, r2, #20
 8033f96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8033f9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8033f9e:	1f05      	subs	r5, r0, #4
 8033fa0:	42a3      	cmp	r3, r4
 8033fa2:	d30c      	bcc.n	8033fbe <__copybits+0x36>
 8033fa4:	1aa3      	subs	r3, r4, r2
 8033fa6:	3b11      	subs	r3, #17
 8033fa8:	f023 0303 	bic.w	r3, r3, #3
 8033fac:	3211      	adds	r2, #17
 8033fae:	42a2      	cmp	r2, r4
 8033fb0:	bf88      	it	hi
 8033fb2:	2300      	movhi	r3, #0
 8033fb4:	4418      	add	r0, r3
 8033fb6:	2300      	movs	r3, #0
 8033fb8:	4288      	cmp	r0, r1
 8033fba:	d305      	bcc.n	8033fc8 <__copybits+0x40>
 8033fbc:	bd70      	pop	{r4, r5, r6, pc}
 8033fbe:	f853 6b04 	ldr.w	r6, [r3], #4
 8033fc2:	f845 6f04 	str.w	r6, [r5, #4]!
 8033fc6:	e7eb      	b.n	8033fa0 <__copybits+0x18>
 8033fc8:	f840 3b04 	str.w	r3, [r0], #4
 8033fcc:	e7f4      	b.n	8033fb8 <__copybits+0x30>

08033fce <__any_on>:
 8033fce:	f100 0214 	add.w	r2, r0, #20
 8033fd2:	6900      	ldr	r0, [r0, #16]
 8033fd4:	114b      	asrs	r3, r1, #5
 8033fd6:	4298      	cmp	r0, r3
 8033fd8:	b510      	push	{r4, lr}
 8033fda:	db11      	blt.n	8034000 <__any_on+0x32>
 8033fdc:	dd0a      	ble.n	8033ff4 <__any_on+0x26>
 8033fde:	f011 011f 	ands.w	r1, r1, #31
 8033fe2:	d007      	beq.n	8033ff4 <__any_on+0x26>
 8033fe4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8033fe8:	fa24 f001 	lsr.w	r0, r4, r1
 8033fec:	fa00 f101 	lsl.w	r1, r0, r1
 8033ff0:	428c      	cmp	r4, r1
 8033ff2:	d10b      	bne.n	803400c <__any_on+0x3e>
 8033ff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8033ff8:	4293      	cmp	r3, r2
 8033ffa:	d803      	bhi.n	8034004 <__any_on+0x36>
 8033ffc:	2000      	movs	r0, #0
 8033ffe:	bd10      	pop	{r4, pc}
 8034000:	4603      	mov	r3, r0
 8034002:	e7f7      	b.n	8033ff4 <__any_on+0x26>
 8034004:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8034008:	2900      	cmp	r1, #0
 803400a:	d0f5      	beq.n	8033ff8 <__any_on+0x2a>
 803400c:	2001      	movs	r0, #1
 803400e:	e7f6      	b.n	8033ffe <__any_on+0x30>

08034010 <realloc>:
 8034010:	4b02      	ldr	r3, [pc, #8]	@ (803401c <realloc+0xc>)
 8034012:	460a      	mov	r2, r1
 8034014:	4601      	mov	r1, r0
 8034016:	6818      	ldr	r0, [r3, #0]
 8034018:	f000 b890 	b.w	803413c <_realloc_r>
 803401c:	200002d8 	.word	0x200002d8

08034020 <_fclose_r>:
 8034020:	b570      	push	{r4, r5, r6, lr}
 8034022:	4605      	mov	r5, r0
 8034024:	460c      	mov	r4, r1
 8034026:	b1b1      	cbz	r1, 8034056 <_fclose_r+0x36>
 8034028:	b118      	cbz	r0, 8034032 <_fclose_r+0x12>
 803402a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803402c:	b90b      	cbnz	r3, 8034032 <_fclose_r+0x12>
 803402e:	f7f8 fb79 	bl	802c724 <__sinit>
 8034032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034034:	07de      	lsls	r6, r3, #31
 8034036:	d405      	bmi.n	8034044 <_fclose_r+0x24>
 8034038:	89a3      	ldrh	r3, [r4, #12]
 803403a:	0598      	lsls	r0, r3, #22
 803403c:	d402      	bmi.n	8034044 <_fclose_r+0x24>
 803403e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8034040:	f7fa f84f 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 8034044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034048:	b943      	cbnz	r3, 803405c <_fclose_r+0x3c>
 803404a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803404c:	07d9      	lsls	r1, r3, #31
 803404e:	d402      	bmi.n	8034056 <_fclose_r+0x36>
 8034050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8034052:	f7fa f848 	bl	802e0e6 <__retarget_lock_release_recursive>
 8034056:	2600      	movs	r6, #0
 8034058:	4630      	mov	r0, r6
 803405a:	bd70      	pop	{r4, r5, r6, pc}
 803405c:	4621      	mov	r1, r4
 803405e:	4628      	mov	r0, r5
 8034060:	f7f8 f996 	bl	802c390 <__sflush_r>
 8034064:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8034066:	4606      	mov	r6, r0
 8034068:	b133      	cbz	r3, 8034078 <_fclose_r+0x58>
 803406a:	69e1      	ldr	r1, [r4, #28]
 803406c:	4628      	mov	r0, r5
 803406e:	4798      	blx	r3
 8034070:	2800      	cmp	r0, #0
 8034072:	bfb8      	it	lt
 8034074:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8034078:	89a3      	ldrh	r3, [r4, #12]
 803407a:	061a      	lsls	r2, r3, #24
 803407c:	d503      	bpl.n	8034086 <_fclose_r+0x66>
 803407e:	6921      	ldr	r1, [r4, #16]
 8034080:	4628      	mov	r0, r5
 8034082:	f7fa ff33 	bl	802eeec <_free_r>
 8034086:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8034088:	b141      	cbz	r1, 803409c <_fclose_r+0x7c>
 803408a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803408e:	4299      	cmp	r1, r3
 8034090:	d002      	beq.n	8034098 <_fclose_r+0x78>
 8034092:	4628      	mov	r0, r5
 8034094:	f7fa ff2a 	bl	802eeec <_free_r>
 8034098:	2300      	movs	r3, #0
 803409a:	6323      	str	r3, [r4, #48]	@ 0x30
 803409c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803409e:	b121      	cbz	r1, 80340aa <_fclose_r+0x8a>
 80340a0:	4628      	mov	r0, r5
 80340a2:	f7fa ff23 	bl	802eeec <_free_r>
 80340a6:	2300      	movs	r3, #0
 80340a8:	6463      	str	r3, [r4, #68]	@ 0x44
 80340aa:	f7f8 fb2f 	bl	802c70c <__sfp_lock_acquire>
 80340ae:	2300      	movs	r3, #0
 80340b0:	81a3      	strh	r3, [r4, #12]
 80340b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80340b4:	07db      	lsls	r3, r3, #31
 80340b6:	d402      	bmi.n	80340be <_fclose_r+0x9e>
 80340b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80340ba:	f7fa f814 	bl	802e0e6 <__retarget_lock_release_recursive>
 80340be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80340c0:	f7fa f80d 	bl	802e0de <__retarget_lock_close_recursive>
 80340c4:	f7f8 fb28 	bl	802c718 <__sfp_lock_release>
 80340c8:	e7c6      	b.n	8034058 <_fclose_r+0x38>

080340ca <__sccl>:
 80340ca:	b570      	push	{r4, r5, r6, lr}
 80340cc:	780b      	ldrb	r3, [r1, #0]
 80340ce:	4604      	mov	r4, r0
 80340d0:	2b5e      	cmp	r3, #94	@ 0x5e
 80340d2:	bf0b      	itete	eq
 80340d4:	784b      	ldrbeq	r3, [r1, #1]
 80340d6:	1c4a      	addne	r2, r1, #1
 80340d8:	1c8a      	addeq	r2, r1, #2
 80340da:	2100      	movne	r1, #0
 80340dc:	bf08      	it	eq
 80340de:	2101      	moveq	r1, #1
 80340e0:	3801      	subs	r0, #1
 80340e2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80340e6:	f800 1f01 	strb.w	r1, [r0, #1]!
 80340ea:	42a8      	cmp	r0, r5
 80340ec:	d1fb      	bne.n	80340e6 <__sccl+0x1c>
 80340ee:	b90b      	cbnz	r3, 80340f4 <__sccl+0x2a>
 80340f0:	1e50      	subs	r0, r2, #1
 80340f2:	bd70      	pop	{r4, r5, r6, pc}
 80340f4:	f081 0101 	eor.w	r1, r1, #1
 80340f8:	54e1      	strb	r1, [r4, r3]
 80340fa:	4610      	mov	r0, r2
 80340fc:	4602      	mov	r2, r0
 80340fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8034102:	2d2d      	cmp	r5, #45	@ 0x2d
 8034104:	d005      	beq.n	8034112 <__sccl+0x48>
 8034106:	2d5d      	cmp	r5, #93	@ 0x5d
 8034108:	d016      	beq.n	8034138 <__sccl+0x6e>
 803410a:	2d00      	cmp	r5, #0
 803410c:	d0f1      	beq.n	80340f2 <__sccl+0x28>
 803410e:	462b      	mov	r3, r5
 8034110:	e7f2      	b.n	80340f8 <__sccl+0x2e>
 8034112:	7846      	ldrb	r6, [r0, #1]
 8034114:	2e5d      	cmp	r6, #93	@ 0x5d
 8034116:	d0fa      	beq.n	803410e <__sccl+0x44>
 8034118:	42b3      	cmp	r3, r6
 803411a:	dcf8      	bgt.n	803410e <__sccl+0x44>
 803411c:	3002      	adds	r0, #2
 803411e:	461a      	mov	r2, r3
 8034120:	3201      	adds	r2, #1
 8034122:	4296      	cmp	r6, r2
 8034124:	54a1      	strb	r1, [r4, r2]
 8034126:	dcfb      	bgt.n	8034120 <__sccl+0x56>
 8034128:	1af2      	subs	r2, r6, r3
 803412a:	3a01      	subs	r2, #1
 803412c:	1c5d      	adds	r5, r3, #1
 803412e:	42b3      	cmp	r3, r6
 8034130:	bfa8      	it	ge
 8034132:	2200      	movge	r2, #0
 8034134:	18ab      	adds	r3, r5, r2
 8034136:	e7e1      	b.n	80340fc <__sccl+0x32>
 8034138:	4610      	mov	r0, r2
 803413a:	e7da      	b.n	80340f2 <__sccl+0x28>

0803413c <_realloc_r>:
 803413c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034140:	4682      	mov	sl, r0
 8034142:	4693      	mov	fp, r2
 8034144:	460c      	mov	r4, r1
 8034146:	b929      	cbnz	r1, 8034154 <_realloc_r+0x18>
 8034148:	4611      	mov	r1, r2
 803414a:	b003      	add	sp, #12
 803414c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034150:	f7fa bfe4 	b.w	802f11c <_malloc_r>
 8034154:	f7ff faec 	bl	8033730 <__malloc_lock>
 8034158:	f10b 080b 	add.w	r8, fp, #11
 803415c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8034160:	f1b8 0f16 	cmp.w	r8, #22
 8034164:	f1a4 0908 	sub.w	r9, r4, #8
 8034168:	f025 0603 	bic.w	r6, r5, #3
 803416c:	d908      	bls.n	8034180 <_realloc_r+0x44>
 803416e:	f038 0807 	bics.w	r8, r8, #7
 8034172:	d507      	bpl.n	8034184 <_realloc_r+0x48>
 8034174:	230c      	movs	r3, #12
 8034176:	f8ca 3000 	str.w	r3, [sl]
 803417a:	f04f 0b00 	mov.w	fp, #0
 803417e:	e032      	b.n	80341e6 <_realloc_r+0xaa>
 8034180:	f04f 0810 	mov.w	r8, #16
 8034184:	45c3      	cmp	fp, r8
 8034186:	d8f5      	bhi.n	8034174 <_realloc_r+0x38>
 8034188:	4546      	cmp	r6, r8
 803418a:	f280 8174 	bge.w	8034476 <_realloc_r+0x33a>
 803418e:	4b9e      	ldr	r3, [pc, #632]	@ (8034408 <_realloc_r+0x2cc>)
 8034190:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8034194:	eb09 0106 	add.w	r1, r9, r6
 8034198:	458c      	cmp	ip, r1
 803419a:	6848      	ldr	r0, [r1, #4]
 803419c:	d005      	beq.n	80341aa <_realloc_r+0x6e>
 803419e:	f020 0201 	bic.w	r2, r0, #1
 80341a2:	440a      	add	r2, r1
 80341a4:	6852      	ldr	r2, [r2, #4]
 80341a6:	07d7      	lsls	r7, r2, #31
 80341a8:	d449      	bmi.n	803423e <_realloc_r+0x102>
 80341aa:	f020 0003 	bic.w	r0, r0, #3
 80341ae:	458c      	cmp	ip, r1
 80341b0:	eb06 0700 	add.w	r7, r6, r0
 80341b4:	d11b      	bne.n	80341ee <_realloc_r+0xb2>
 80341b6:	f108 0210 	add.w	r2, r8, #16
 80341ba:	42ba      	cmp	r2, r7
 80341bc:	dc41      	bgt.n	8034242 <_realloc_r+0x106>
 80341be:	eb09 0208 	add.w	r2, r9, r8
 80341c2:	eba7 0708 	sub.w	r7, r7, r8
 80341c6:	f047 0701 	orr.w	r7, r7, #1
 80341ca:	609a      	str	r2, [r3, #8]
 80341cc:	6057      	str	r7, [r2, #4]
 80341ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80341d2:	f003 0301 	and.w	r3, r3, #1
 80341d6:	ea43 0308 	orr.w	r3, r3, r8
 80341da:	f844 3c04 	str.w	r3, [r4, #-4]
 80341de:	4650      	mov	r0, sl
 80341e0:	f7ff faac 	bl	803373c <__malloc_unlock>
 80341e4:	46a3      	mov	fp, r4
 80341e6:	4658      	mov	r0, fp
 80341e8:	b003      	add	sp, #12
 80341ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80341ee:	45b8      	cmp	r8, r7
 80341f0:	dc27      	bgt.n	8034242 <_realloc_r+0x106>
 80341f2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80341f6:	60d3      	str	r3, [r2, #12]
 80341f8:	609a      	str	r2, [r3, #8]
 80341fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80341fe:	eba7 0008 	sub.w	r0, r7, r8
 8034202:	280f      	cmp	r0, #15
 8034204:	f003 0301 	and.w	r3, r3, #1
 8034208:	eb09 0207 	add.w	r2, r9, r7
 803420c:	f240 8135 	bls.w	803447a <_realloc_r+0x33e>
 8034210:	eb09 0108 	add.w	r1, r9, r8
 8034214:	ea48 0303 	orr.w	r3, r8, r3
 8034218:	f040 0001 	orr.w	r0, r0, #1
 803421c:	f8c9 3004 	str.w	r3, [r9, #4]
 8034220:	6048      	str	r0, [r1, #4]
 8034222:	6853      	ldr	r3, [r2, #4]
 8034224:	f043 0301 	orr.w	r3, r3, #1
 8034228:	6053      	str	r3, [r2, #4]
 803422a:	3108      	adds	r1, #8
 803422c:	4650      	mov	r0, sl
 803422e:	f7fa fe5d 	bl	802eeec <_free_r>
 8034232:	4650      	mov	r0, sl
 8034234:	f7ff fa82 	bl	803373c <__malloc_unlock>
 8034238:	f109 0b08 	add.w	fp, r9, #8
 803423c:	e7d3      	b.n	80341e6 <_realloc_r+0xaa>
 803423e:	2000      	movs	r0, #0
 8034240:	4601      	mov	r1, r0
 8034242:	07ea      	lsls	r2, r5, #31
 8034244:	f100 80c7 	bmi.w	80343d6 <_realloc_r+0x29a>
 8034248:	f854 5c08 	ldr.w	r5, [r4, #-8]
 803424c:	eba9 0505 	sub.w	r5, r9, r5
 8034250:	686a      	ldr	r2, [r5, #4]
 8034252:	f022 0203 	bic.w	r2, r2, #3
 8034256:	4432      	add	r2, r6
 8034258:	9201      	str	r2, [sp, #4]
 803425a:	2900      	cmp	r1, #0
 803425c:	f000 8086 	beq.w	803436c <_realloc_r+0x230>
 8034260:	458c      	cmp	ip, r1
 8034262:	eb00 0702 	add.w	r7, r0, r2
 8034266:	d149      	bne.n	80342fc <_realloc_r+0x1c0>
 8034268:	f108 0210 	add.w	r2, r8, #16
 803426c:	42ba      	cmp	r2, r7
 803426e:	dc7d      	bgt.n	803436c <_realloc_r+0x230>
 8034270:	46ab      	mov	fp, r5
 8034272:	68ea      	ldr	r2, [r5, #12]
 8034274:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8034278:	60ca      	str	r2, [r1, #12]
 803427a:	6091      	str	r1, [r2, #8]
 803427c:	1f32      	subs	r2, r6, #4
 803427e:	2a24      	cmp	r2, #36	@ 0x24
 8034280:	d836      	bhi.n	80342f0 <_realloc_r+0x1b4>
 8034282:	2a13      	cmp	r2, #19
 8034284:	d932      	bls.n	80342ec <_realloc_r+0x1b0>
 8034286:	6821      	ldr	r1, [r4, #0]
 8034288:	60a9      	str	r1, [r5, #8]
 803428a:	6861      	ldr	r1, [r4, #4]
 803428c:	60e9      	str	r1, [r5, #12]
 803428e:	2a1b      	cmp	r2, #27
 8034290:	d81a      	bhi.n	80342c8 <_realloc_r+0x18c>
 8034292:	3408      	adds	r4, #8
 8034294:	f105 0210 	add.w	r2, r5, #16
 8034298:	6821      	ldr	r1, [r4, #0]
 803429a:	6011      	str	r1, [r2, #0]
 803429c:	6861      	ldr	r1, [r4, #4]
 803429e:	6051      	str	r1, [r2, #4]
 80342a0:	68a1      	ldr	r1, [r4, #8]
 80342a2:	6091      	str	r1, [r2, #8]
 80342a4:	eb05 0208 	add.w	r2, r5, r8
 80342a8:	eba7 0708 	sub.w	r7, r7, r8
 80342ac:	f047 0701 	orr.w	r7, r7, #1
 80342b0:	609a      	str	r2, [r3, #8]
 80342b2:	6057      	str	r7, [r2, #4]
 80342b4:	686b      	ldr	r3, [r5, #4]
 80342b6:	f003 0301 	and.w	r3, r3, #1
 80342ba:	ea43 0308 	orr.w	r3, r3, r8
 80342be:	606b      	str	r3, [r5, #4]
 80342c0:	4650      	mov	r0, sl
 80342c2:	f7ff fa3b 	bl	803373c <__malloc_unlock>
 80342c6:	e78e      	b.n	80341e6 <_realloc_r+0xaa>
 80342c8:	68a1      	ldr	r1, [r4, #8]
 80342ca:	6129      	str	r1, [r5, #16]
 80342cc:	68e1      	ldr	r1, [r4, #12]
 80342ce:	6169      	str	r1, [r5, #20]
 80342d0:	2a24      	cmp	r2, #36	@ 0x24
 80342d2:	bf01      	itttt	eq
 80342d4:	6922      	ldreq	r2, [r4, #16]
 80342d6:	61aa      	streq	r2, [r5, #24]
 80342d8:	6961      	ldreq	r1, [r4, #20]
 80342da:	61e9      	streq	r1, [r5, #28]
 80342dc:	bf19      	ittee	ne
 80342de:	3410      	addne	r4, #16
 80342e0:	f105 0218 	addne.w	r2, r5, #24
 80342e4:	f105 0220 	addeq.w	r2, r5, #32
 80342e8:	3418      	addeq	r4, #24
 80342ea:	e7d5      	b.n	8034298 <_realloc_r+0x15c>
 80342ec:	465a      	mov	r2, fp
 80342ee:	e7d3      	b.n	8034298 <_realloc_r+0x15c>
 80342f0:	4621      	mov	r1, r4
 80342f2:	4658      	mov	r0, fp
 80342f4:	f7f8 fca2 	bl	802cc3c <memmove>
 80342f8:	4b43      	ldr	r3, [pc, #268]	@ (8034408 <_realloc_r+0x2cc>)
 80342fa:	e7d3      	b.n	80342a4 <_realloc_r+0x168>
 80342fc:	45b8      	cmp	r8, r7
 80342fe:	dc35      	bgt.n	803436c <_realloc_r+0x230>
 8034300:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8034304:	4628      	mov	r0, r5
 8034306:	60d3      	str	r3, [r2, #12]
 8034308:	609a      	str	r2, [r3, #8]
 803430a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803430e:	68eb      	ldr	r3, [r5, #12]
 8034310:	60d3      	str	r3, [r2, #12]
 8034312:	609a      	str	r2, [r3, #8]
 8034314:	1f32      	subs	r2, r6, #4
 8034316:	2a24      	cmp	r2, #36	@ 0x24
 8034318:	d824      	bhi.n	8034364 <_realloc_r+0x228>
 803431a:	2a13      	cmp	r2, #19
 803431c:	d908      	bls.n	8034330 <_realloc_r+0x1f4>
 803431e:	6823      	ldr	r3, [r4, #0]
 8034320:	60ab      	str	r3, [r5, #8]
 8034322:	6863      	ldr	r3, [r4, #4]
 8034324:	60eb      	str	r3, [r5, #12]
 8034326:	2a1b      	cmp	r2, #27
 8034328:	d80a      	bhi.n	8034340 <_realloc_r+0x204>
 803432a:	3408      	adds	r4, #8
 803432c:	f105 0010 	add.w	r0, r5, #16
 8034330:	6823      	ldr	r3, [r4, #0]
 8034332:	6003      	str	r3, [r0, #0]
 8034334:	6863      	ldr	r3, [r4, #4]
 8034336:	6043      	str	r3, [r0, #4]
 8034338:	68a3      	ldr	r3, [r4, #8]
 803433a:	6083      	str	r3, [r0, #8]
 803433c:	46a9      	mov	r9, r5
 803433e:	e75c      	b.n	80341fa <_realloc_r+0xbe>
 8034340:	68a3      	ldr	r3, [r4, #8]
 8034342:	612b      	str	r3, [r5, #16]
 8034344:	68e3      	ldr	r3, [r4, #12]
 8034346:	616b      	str	r3, [r5, #20]
 8034348:	2a24      	cmp	r2, #36	@ 0x24
 803434a:	bf01      	itttt	eq
 803434c:	6923      	ldreq	r3, [r4, #16]
 803434e:	61ab      	streq	r3, [r5, #24]
 8034350:	6963      	ldreq	r3, [r4, #20]
 8034352:	61eb      	streq	r3, [r5, #28]
 8034354:	bf19      	ittee	ne
 8034356:	3410      	addne	r4, #16
 8034358:	f105 0018 	addne.w	r0, r5, #24
 803435c:	f105 0020 	addeq.w	r0, r5, #32
 8034360:	3418      	addeq	r4, #24
 8034362:	e7e5      	b.n	8034330 <_realloc_r+0x1f4>
 8034364:	4621      	mov	r1, r4
 8034366:	f7f8 fc69 	bl	802cc3c <memmove>
 803436a:	e7e7      	b.n	803433c <_realloc_r+0x200>
 803436c:	9b01      	ldr	r3, [sp, #4]
 803436e:	4598      	cmp	r8, r3
 8034370:	dc31      	bgt.n	80343d6 <_realloc_r+0x29a>
 8034372:	4628      	mov	r0, r5
 8034374:	68eb      	ldr	r3, [r5, #12]
 8034376:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803437a:	60d3      	str	r3, [r2, #12]
 803437c:	609a      	str	r2, [r3, #8]
 803437e:	1f32      	subs	r2, r6, #4
 8034380:	2a24      	cmp	r2, #36	@ 0x24
 8034382:	d824      	bhi.n	80343ce <_realloc_r+0x292>
 8034384:	2a13      	cmp	r2, #19
 8034386:	d908      	bls.n	803439a <_realloc_r+0x25e>
 8034388:	6823      	ldr	r3, [r4, #0]
 803438a:	60ab      	str	r3, [r5, #8]
 803438c:	6863      	ldr	r3, [r4, #4]
 803438e:	60eb      	str	r3, [r5, #12]
 8034390:	2a1b      	cmp	r2, #27
 8034392:	d80a      	bhi.n	80343aa <_realloc_r+0x26e>
 8034394:	3408      	adds	r4, #8
 8034396:	f105 0010 	add.w	r0, r5, #16
 803439a:	6823      	ldr	r3, [r4, #0]
 803439c:	6003      	str	r3, [r0, #0]
 803439e:	6863      	ldr	r3, [r4, #4]
 80343a0:	6043      	str	r3, [r0, #4]
 80343a2:	68a3      	ldr	r3, [r4, #8]
 80343a4:	6083      	str	r3, [r0, #8]
 80343a6:	9f01      	ldr	r7, [sp, #4]
 80343a8:	e7c8      	b.n	803433c <_realloc_r+0x200>
 80343aa:	68a3      	ldr	r3, [r4, #8]
 80343ac:	612b      	str	r3, [r5, #16]
 80343ae:	68e3      	ldr	r3, [r4, #12]
 80343b0:	616b      	str	r3, [r5, #20]
 80343b2:	2a24      	cmp	r2, #36	@ 0x24
 80343b4:	bf01      	itttt	eq
 80343b6:	6923      	ldreq	r3, [r4, #16]
 80343b8:	61ab      	streq	r3, [r5, #24]
 80343ba:	6963      	ldreq	r3, [r4, #20]
 80343bc:	61eb      	streq	r3, [r5, #28]
 80343be:	bf19      	ittee	ne
 80343c0:	3410      	addne	r4, #16
 80343c2:	f105 0018 	addne.w	r0, r5, #24
 80343c6:	f105 0020 	addeq.w	r0, r5, #32
 80343ca:	3418      	addeq	r4, #24
 80343cc:	e7e5      	b.n	803439a <_realloc_r+0x25e>
 80343ce:	4621      	mov	r1, r4
 80343d0:	f7f8 fc34 	bl	802cc3c <memmove>
 80343d4:	e7e7      	b.n	80343a6 <_realloc_r+0x26a>
 80343d6:	4659      	mov	r1, fp
 80343d8:	4650      	mov	r0, sl
 80343da:	f7fa fe9f 	bl	802f11c <_malloc_r>
 80343de:	4683      	mov	fp, r0
 80343e0:	b918      	cbnz	r0, 80343ea <_realloc_r+0x2ae>
 80343e2:	4650      	mov	r0, sl
 80343e4:	f7ff f9aa 	bl	803373c <__malloc_unlock>
 80343e8:	e6c7      	b.n	803417a <_realloc_r+0x3e>
 80343ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80343ee:	f023 0301 	bic.w	r3, r3, #1
 80343f2:	444b      	add	r3, r9
 80343f4:	f1a0 0208 	sub.w	r2, r0, #8
 80343f8:	4293      	cmp	r3, r2
 80343fa:	d107      	bne.n	803440c <_realloc_r+0x2d0>
 80343fc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8034400:	f027 0703 	bic.w	r7, r7, #3
 8034404:	4437      	add	r7, r6
 8034406:	e6f8      	b.n	80341fa <_realloc_r+0xbe>
 8034408:	2000040c 	.word	0x2000040c
 803440c:	1f32      	subs	r2, r6, #4
 803440e:	2a24      	cmp	r2, #36	@ 0x24
 8034410:	d82d      	bhi.n	803446e <_realloc_r+0x332>
 8034412:	2a13      	cmp	r2, #19
 8034414:	d928      	bls.n	8034468 <_realloc_r+0x32c>
 8034416:	6823      	ldr	r3, [r4, #0]
 8034418:	6003      	str	r3, [r0, #0]
 803441a:	6863      	ldr	r3, [r4, #4]
 803441c:	6043      	str	r3, [r0, #4]
 803441e:	2a1b      	cmp	r2, #27
 8034420:	d80e      	bhi.n	8034440 <_realloc_r+0x304>
 8034422:	f104 0208 	add.w	r2, r4, #8
 8034426:	f100 0308 	add.w	r3, r0, #8
 803442a:	6811      	ldr	r1, [r2, #0]
 803442c:	6019      	str	r1, [r3, #0]
 803442e:	6851      	ldr	r1, [r2, #4]
 8034430:	6059      	str	r1, [r3, #4]
 8034432:	6892      	ldr	r2, [r2, #8]
 8034434:	609a      	str	r2, [r3, #8]
 8034436:	4621      	mov	r1, r4
 8034438:	4650      	mov	r0, sl
 803443a:	f7fa fd57 	bl	802eeec <_free_r>
 803443e:	e73f      	b.n	80342c0 <_realloc_r+0x184>
 8034440:	68a3      	ldr	r3, [r4, #8]
 8034442:	6083      	str	r3, [r0, #8]
 8034444:	68e3      	ldr	r3, [r4, #12]
 8034446:	60c3      	str	r3, [r0, #12]
 8034448:	2a24      	cmp	r2, #36	@ 0x24
 803444a:	bf01      	itttt	eq
 803444c:	6923      	ldreq	r3, [r4, #16]
 803444e:	6103      	streq	r3, [r0, #16]
 8034450:	6961      	ldreq	r1, [r4, #20]
 8034452:	6141      	streq	r1, [r0, #20]
 8034454:	bf19      	ittee	ne
 8034456:	f104 0210 	addne.w	r2, r4, #16
 803445a:	f100 0310 	addne.w	r3, r0, #16
 803445e:	f104 0218 	addeq.w	r2, r4, #24
 8034462:	f100 0318 	addeq.w	r3, r0, #24
 8034466:	e7e0      	b.n	803442a <_realloc_r+0x2ee>
 8034468:	4603      	mov	r3, r0
 803446a:	4622      	mov	r2, r4
 803446c:	e7dd      	b.n	803442a <_realloc_r+0x2ee>
 803446e:	4621      	mov	r1, r4
 8034470:	f7f8 fbe4 	bl	802cc3c <memmove>
 8034474:	e7df      	b.n	8034436 <_realloc_r+0x2fa>
 8034476:	4637      	mov	r7, r6
 8034478:	e6bf      	b.n	80341fa <_realloc_r+0xbe>
 803447a:	431f      	orrs	r7, r3
 803447c:	f8c9 7004 	str.w	r7, [r9, #4]
 8034480:	6853      	ldr	r3, [r2, #4]
 8034482:	f043 0301 	orr.w	r3, r3, #1
 8034486:	6053      	str	r3, [r2, #4]
 8034488:	e6d3      	b.n	8034232 <_realloc_r+0xf6>
 803448a:	bf00      	nop

0803448c <sulp>:
 803448c:	b570      	push	{r4, r5, r6, lr}
 803448e:	4604      	mov	r4, r0
 8034490:	460d      	mov	r5, r1
 8034492:	ec45 4b10 	vmov	d0, r4, r5
 8034496:	4616      	mov	r6, r2
 8034498:	f7ff fc7c 	bl	8033d94 <__ulp>
 803449c:	ec51 0b10 	vmov	r0, r1, d0
 80344a0:	b17e      	cbz	r6, 80344c2 <sulp+0x36>
 80344a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80344a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80344aa:	2b00      	cmp	r3, #0
 80344ac:	dd09      	ble.n	80344c2 <sulp+0x36>
 80344ae:	051b      	lsls	r3, r3, #20
 80344b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80344b4:	2400      	movs	r4, #0
 80344b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80344ba:	4622      	mov	r2, r4
 80344bc:	462b      	mov	r3, r5
 80344be:	f7dc f8b3 	bl	8010628 <__aeabi_dmul>
 80344c2:	ec41 0b10 	vmov	d0, r0, r1
 80344c6:	bd70      	pop	{r4, r5, r6, pc}

080344c8 <_strtod_l>:
 80344c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80344cc:	b09f      	sub	sp, #124	@ 0x7c
 80344ce:	460c      	mov	r4, r1
 80344d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80344d2:	2200      	movs	r2, #0
 80344d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80344d6:	9005      	str	r0, [sp, #20]
 80344d8:	f04f 0a00 	mov.w	sl, #0
 80344dc:	f04f 0b00 	mov.w	fp, #0
 80344e0:	460a      	mov	r2, r1
 80344e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80344e4:	7811      	ldrb	r1, [r2, #0]
 80344e6:	292b      	cmp	r1, #43	@ 0x2b
 80344e8:	d04a      	beq.n	8034580 <_strtod_l+0xb8>
 80344ea:	d838      	bhi.n	803455e <_strtod_l+0x96>
 80344ec:	290d      	cmp	r1, #13
 80344ee:	d832      	bhi.n	8034556 <_strtod_l+0x8e>
 80344f0:	2908      	cmp	r1, #8
 80344f2:	d832      	bhi.n	803455a <_strtod_l+0x92>
 80344f4:	2900      	cmp	r1, #0
 80344f6:	d03b      	beq.n	8034570 <_strtod_l+0xa8>
 80344f8:	2200      	movs	r2, #0
 80344fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80344fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80344fe:	782a      	ldrb	r2, [r5, #0]
 8034500:	2a30      	cmp	r2, #48	@ 0x30
 8034502:	f040 80b3 	bne.w	803466c <_strtod_l+0x1a4>
 8034506:	786a      	ldrb	r2, [r5, #1]
 8034508:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803450c:	2a58      	cmp	r2, #88	@ 0x58
 803450e:	d16e      	bne.n	80345ee <_strtod_l+0x126>
 8034510:	9302      	str	r3, [sp, #8]
 8034512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034514:	9301      	str	r3, [sp, #4]
 8034516:	ab1a      	add	r3, sp, #104	@ 0x68
 8034518:	9300      	str	r3, [sp, #0]
 803451a:	4a8e      	ldr	r2, [pc, #568]	@ (8034754 <_strtod_l+0x28c>)
 803451c:	9805      	ldr	r0, [sp, #20]
 803451e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8034520:	a919      	add	r1, sp, #100	@ 0x64
 8034522:	f001 fa51 	bl	80359c8 <__gethex>
 8034526:	f010 060f 	ands.w	r6, r0, #15
 803452a:	4604      	mov	r4, r0
 803452c:	d005      	beq.n	803453a <_strtod_l+0x72>
 803452e:	2e06      	cmp	r6, #6
 8034530:	d128      	bne.n	8034584 <_strtod_l+0xbc>
 8034532:	3501      	adds	r5, #1
 8034534:	2300      	movs	r3, #0
 8034536:	9519      	str	r5, [sp, #100]	@ 0x64
 8034538:	930b      	str	r3, [sp, #44]	@ 0x2c
 803453a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803453c:	2b00      	cmp	r3, #0
 803453e:	f040 858e 	bne.w	803505e <_strtod_l+0xb96>
 8034542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034544:	b1cb      	cbz	r3, 803457a <_strtod_l+0xb2>
 8034546:	4652      	mov	r2, sl
 8034548:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803454c:	ec43 2b10 	vmov	d0, r2, r3
 8034550:	b01f      	add	sp, #124	@ 0x7c
 8034552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034556:	2920      	cmp	r1, #32
 8034558:	d1ce      	bne.n	80344f8 <_strtod_l+0x30>
 803455a:	3201      	adds	r2, #1
 803455c:	e7c1      	b.n	80344e2 <_strtod_l+0x1a>
 803455e:	292d      	cmp	r1, #45	@ 0x2d
 8034560:	d1ca      	bne.n	80344f8 <_strtod_l+0x30>
 8034562:	2101      	movs	r1, #1
 8034564:	910b      	str	r1, [sp, #44]	@ 0x2c
 8034566:	1c51      	adds	r1, r2, #1
 8034568:	9119      	str	r1, [sp, #100]	@ 0x64
 803456a:	7852      	ldrb	r2, [r2, #1]
 803456c:	2a00      	cmp	r2, #0
 803456e:	d1c5      	bne.n	80344fc <_strtod_l+0x34>
 8034570:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8034572:	9419      	str	r4, [sp, #100]	@ 0x64
 8034574:	2b00      	cmp	r3, #0
 8034576:	f040 8570 	bne.w	803505a <_strtod_l+0xb92>
 803457a:	4652      	mov	r2, sl
 803457c:	465b      	mov	r3, fp
 803457e:	e7e5      	b.n	803454c <_strtod_l+0x84>
 8034580:	2100      	movs	r1, #0
 8034582:	e7ef      	b.n	8034564 <_strtod_l+0x9c>
 8034584:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034586:	b13a      	cbz	r2, 8034598 <_strtod_l+0xd0>
 8034588:	2135      	movs	r1, #53	@ 0x35
 803458a:	a81c      	add	r0, sp, #112	@ 0x70
 803458c:	f7ff fcfc 	bl	8033f88 <__copybits>
 8034590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034592:	9805      	ldr	r0, [sp, #20]
 8034594:	f7ff f8fd 	bl	8033792 <_Bfree>
 8034598:	3e01      	subs	r6, #1
 803459a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803459c:	2e04      	cmp	r6, #4
 803459e:	d806      	bhi.n	80345ae <_strtod_l+0xe6>
 80345a0:	e8df f006 	tbb	[pc, r6]
 80345a4:	201d0314 	.word	0x201d0314
 80345a8:	14          	.byte	0x14
 80345a9:	00          	.byte	0x00
 80345aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80345ae:	05e1      	lsls	r1, r4, #23
 80345b0:	bf48      	it	mi
 80345b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80345b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80345ba:	0d1b      	lsrs	r3, r3, #20
 80345bc:	051b      	lsls	r3, r3, #20
 80345be:	2b00      	cmp	r3, #0
 80345c0:	d1bb      	bne.n	803453a <_strtod_l+0x72>
 80345c2:	f7f9 fd59 	bl	802e078 <__errno>
 80345c6:	2322      	movs	r3, #34	@ 0x22
 80345c8:	6003      	str	r3, [r0, #0]
 80345ca:	e7b6      	b.n	803453a <_strtod_l+0x72>
 80345cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80345d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80345d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80345d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80345dc:	e7e7      	b.n	80345ae <_strtod_l+0xe6>
 80345de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 803475c <_strtod_l+0x294>
 80345e2:	e7e4      	b.n	80345ae <_strtod_l+0xe6>
 80345e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80345e8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80345ec:	e7df      	b.n	80345ae <_strtod_l+0xe6>
 80345ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80345f0:	1c5a      	adds	r2, r3, #1
 80345f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80345f4:	785b      	ldrb	r3, [r3, #1]
 80345f6:	2b30      	cmp	r3, #48	@ 0x30
 80345f8:	d0f9      	beq.n	80345ee <_strtod_l+0x126>
 80345fa:	2b00      	cmp	r3, #0
 80345fc:	d09d      	beq.n	803453a <_strtod_l+0x72>
 80345fe:	2301      	movs	r3, #1
 8034600:	9309      	str	r3, [sp, #36]	@ 0x24
 8034602:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034604:	930c      	str	r3, [sp, #48]	@ 0x30
 8034606:	2300      	movs	r3, #0
 8034608:	9308      	str	r3, [sp, #32]
 803460a:	930a      	str	r3, [sp, #40]	@ 0x28
 803460c:	461f      	mov	r7, r3
 803460e:	220a      	movs	r2, #10
 8034610:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034612:	7805      	ldrb	r5, [r0, #0]
 8034614:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034618:	b2d9      	uxtb	r1, r3
 803461a:	2909      	cmp	r1, #9
 803461c:	d928      	bls.n	8034670 <_strtod_l+0x1a8>
 803461e:	494e      	ldr	r1, [pc, #312]	@ (8034758 <_strtod_l+0x290>)
 8034620:	2201      	movs	r2, #1
 8034622:	f7f8 fb5a 	bl	802ccda <strncmp>
 8034626:	2800      	cmp	r0, #0
 8034628:	d032      	beq.n	8034690 <_strtod_l+0x1c8>
 803462a:	2000      	movs	r0, #0
 803462c:	462a      	mov	r2, r5
 803462e:	4681      	mov	r9, r0
 8034630:	463d      	mov	r5, r7
 8034632:	4603      	mov	r3, r0
 8034634:	2a65      	cmp	r2, #101	@ 0x65
 8034636:	d001      	beq.n	803463c <_strtod_l+0x174>
 8034638:	2a45      	cmp	r2, #69	@ 0x45
 803463a:	d114      	bne.n	8034666 <_strtod_l+0x19e>
 803463c:	b91d      	cbnz	r5, 8034646 <_strtod_l+0x17e>
 803463e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034640:	4302      	orrs	r2, r0
 8034642:	d095      	beq.n	8034570 <_strtod_l+0xa8>
 8034644:	2500      	movs	r5, #0
 8034646:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8034648:	1c62      	adds	r2, r4, #1
 803464a:	9219      	str	r2, [sp, #100]	@ 0x64
 803464c:	7862      	ldrb	r2, [r4, #1]
 803464e:	2a2b      	cmp	r2, #43	@ 0x2b
 8034650:	d077      	beq.n	8034742 <_strtod_l+0x27a>
 8034652:	2a2d      	cmp	r2, #45	@ 0x2d
 8034654:	d07b      	beq.n	803474e <_strtod_l+0x286>
 8034656:	f04f 0c00 	mov.w	ip, #0
 803465a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 803465e:	2909      	cmp	r1, #9
 8034660:	f240 8082 	bls.w	8034768 <_strtod_l+0x2a0>
 8034664:	9419      	str	r4, [sp, #100]	@ 0x64
 8034666:	f04f 0800 	mov.w	r8, #0
 803466a:	e0a2      	b.n	80347b2 <_strtod_l+0x2ea>
 803466c:	2300      	movs	r3, #0
 803466e:	e7c7      	b.n	8034600 <_strtod_l+0x138>
 8034670:	2f08      	cmp	r7, #8
 8034672:	bfd5      	itete	le
 8034674:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8034676:	9908      	ldrgt	r1, [sp, #32]
 8034678:	fb02 3301 	mlale	r3, r2, r1, r3
 803467c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8034680:	f100 0001 	add.w	r0, r0, #1
 8034684:	bfd4      	ite	le
 8034686:	930a      	strle	r3, [sp, #40]	@ 0x28
 8034688:	9308      	strgt	r3, [sp, #32]
 803468a:	3701      	adds	r7, #1
 803468c:	9019      	str	r0, [sp, #100]	@ 0x64
 803468e:	e7bf      	b.n	8034610 <_strtod_l+0x148>
 8034690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034692:	1c5a      	adds	r2, r3, #1
 8034694:	9219      	str	r2, [sp, #100]	@ 0x64
 8034696:	785a      	ldrb	r2, [r3, #1]
 8034698:	b37f      	cbz	r7, 80346fa <_strtod_l+0x232>
 803469a:	4681      	mov	r9, r0
 803469c:	463d      	mov	r5, r7
 803469e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80346a2:	2b09      	cmp	r3, #9
 80346a4:	d912      	bls.n	80346cc <_strtod_l+0x204>
 80346a6:	2301      	movs	r3, #1
 80346a8:	e7c4      	b.n	8034634 <_strtod_l+0x16c>
 80346aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80346ac:	1c5a      	adds	r2, r3, #1
 80346ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80346b0:	785a      	ldrb	r2, [r3, #1]
 80346b2:	3001      	adds	r0, #1
 80346b4:	2a30      	cmp	r2, #48	@ 0x30
 80346b6:	d0f8      	beq.n	80346aa <_strtod_l+0x1e2>
 80346b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80346bc:	2b08      	cmp	r3, #8
 80346be:	f200 84d3 	bhi.w	8035068 <_strtod_l+0xba0>
 80346c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80346c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80346c6:	4681      	mov	r9, r0
 80346c8:	2000      	movs	r0, #0
 80346ca:	4605      	mov	r5, r0
 80346cc:	3a30      	subs	r2, #48	@ 0x30
 80346ce:	f100 0301 	add.w	r3, r0, #1
 80346d2:	d02a      	beq.n	803472a <_strtod_l+0x262>
 80346d4:	4499      	add	r9, r3
 80346d6:	eb00 0c05 	add.w	ip, r0, r5
 80346da:	462b      	mov	r3, r5
 80346dc:	210a      	movs	r1, #10
 80346de:	4563      	cmp	r3, ip
 80346e0:	d10d      	bne.n	80346fe <_strtod_l+0x236>
 80346e2:	1c69      	adds	r1, r5, #1
 80346e4:	4401      	add	r1, r0
 80346e6:	4428      	add	r0, r5
 80346e8:	2808      	cmp	r0, #8
 80346ea:	dc16      	bgt.n	803471a <_strtod_l+0x252>
 80346ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80346ee:	230a      	movs	r3, #10
 80346f0:	fb03 2300 	mla	r3, r3, r0, r2
 80346f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80346f6:	2300      	movs	r3, #0
 80346f8:	e018      	b.n	803472c <_strtod_l+0x264>
 80346fa:	4638      	mov	r0, r7
 80346fc:	e7da      	b.n	80346b4 <_strtod_l+0x1ec>
 80346fe:	2b08      	cmp	r3, #8
 8034700:	f103 0301 	add.w	r3, r3, #1
 8034704:	dc03      	bgt.n	803470e <_strtod_l+0x246>
 8034706:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8034708:	434e      	muls	r6, r1
 803470a:	960a      	str	r6, [sp, #40]	@ 0x28
 803470c:	e7e7      	b.n	80346de <_strtod_l+0x216>
 803470e:	2b10      	cmp	r3, #16
 8034710:	bfde      	ittt	le
 8034712:	9e08      	ldrle	r6, [sp, #32]
 8034714:	434e      	mulle	r6, r1
 8034716:	9608      	strle	r6, [sp, #32]
 8034718:	e7e1      	b.n	80346de <_strtod_l+0x216>
 803471a:	280f      	cmp	r0, #15
 803471c:	dceb      	bgt.n	80346f6 <_strtod_l+0x22e>
 803471e:	9808      	ldr	r0, [sp, #32]
 8034720:	230a      	movs	r3, #10
 8034722:	fb03 2300 	mla	r3, r3, r0, r2
 8034726:	9308      	str	r3, [sp, #32]
 8034728:	e7e5      	b.n	80346f6 <_strtod_l+0x22e>
 803472a:	4629      	mov	r1, r5
 803472c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803472e:	1c50      	adds	r0, r2, #1
 8034730:	9019      	str	r0, [sp, #100]	@ 0x64
 8034732:	7852      	ldrb	r2, [r2, #1]
 8034734:	4618      	mov	r0, r3
 8034736:	460d      	mov	r5, r1
 8034738:	e7b1      	b.n	803469e <_strtod_l+0x1d6>
 803473a:	f04f 0900 	mov.w	r9, #0
 803473e:	2301      	movs	r3, #1
 8034740:	e77d      	b.n	803463e <_strtod_l+0x176>
 8034742:	f04f 0c00 	mov.w	ip, #0
 8034746:	1ca2      	adds	r2, r4, #2
 8034748:	9219      	str	r2, [sp, #100]	@ 0x64
 803474a:	78a2      	ldrb	r2, [r4, #2]
 803474c:	e785      	b.n	803465a <_strtod_l+0x192>
 803474e:	f04f 0c01 	mov.w	ip, #1
 8034752:	e7f8      	b.n	8034746 <_strtod_l+0x27e>
 8034754:	0803c764 	.word	0x0803c764
 8034758:	0803c1ce 	.word	0x0803c1ce
 803475c:	7ff00000 	.word	0x7ff00000
 8034760:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034762:	1c51      	adds	r1, r2, #1
 8034764:	9119      	str	r1, [sp, #100]	@ 0x64
 8034766:	7852      	ldrb	r2, [r2, #1]
 8034768:	2a30      	cmp	r2, #48	@ 0x30
 803476a:	d0f9      	beq.n	8034760 <_strtod_l+0x298>
 803476c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8034770:	2908      	cmp	r1, #8
 8034772:	f63f af78 	bhi.w	8034666 <_strtod_l+0x19e>
 8034776:	3a30      	subs	r2, #48	@ 0x30
 8034778:	920e      	str	r2, [sp, #56]	@ 0x38
 803477a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803477c:	920f      	str	r2, [sp, #60]	@ 0x3c
 803477e:	f04f 080a 	mov.w	r8, #10
 8034782:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034784:	1c56      	adds	r6, r2, #1
 8034786:	9619      	str	r6, [sp, #100]	@ 0x64
 8034788:	7852      	ldrb	r2, [r2, #1]
 803478a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 803478e:	f1be 0f09 	cmp.w	lr, #9
 8034792:	d939      	bls.n	8034808 <_strtod_l+0x340>
 8034794:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8034796:	1a76      	subs	r6, r6, r1
 8034798:	2e08      	cmp	r6, #8
 803479a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 803479e:	dc03      	bgt.n	80347a8 <_strtod_l+0x2e0>
 80347a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80347a2:	4588      	cmp	r8, r1
 80347a4:	bfa8      	it	ge
 80347a6:	4688      	movge	r8, r1
 80347a8:	f1bc 0f00 	cmp.w	ip, #0
 80347ac:	d001      	beq.n	80347b2 <_strtod_l+0x2ea>
 80347ae:	f1c8 0800 	rsb	r8, r8, #0
 80347b2:	2d00      	cmp	r5, #0
 80347b4:	d14e      	bne.n	8034854 <_strtod_l+0x38c>
 80347b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80347b8:	4308      	orrs	r0, r1
 80347ba:	f47f aebe 	bne.w	803453a <_strtod_l+0x72>
 80347be:	2b00      	cmp	r3, #0
 80347c0:	f47f aed6 	bne.w	8034570 <_strtod_l+0xa8>
 80347c4:	2a69      	cmp	r2, #105	@ 0x69
 80347c6:	d028      	beq.n	803481a <_strtod_l+0x352>
 80347c8:	dc25      	bgt.n	8034816 <_strtod_l+0x34e>
 80347ca:	2a49      	cmp	r2, #73	@ 0x49
 80347cc:	d025      	beq.n	803481a <_strtod_l+0x352>
 80347ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80347d0:	f47f aece 	bne.w	8034570 <_strtod_l+0xa8>
 80347d4:	499b      	ldr	r1, [pc, #620]	@ (8034a44 <_strtod_l+0x57c>)
 80347d6:	a819      	add	r0, sp, #100	@ 0x64
 80347d8:	f001 fb18 	bl	8035e0c <__match>
 80347dc:	2800      	cmp	r0, #0
 80347de:	f43f aec7 	beq.w	8034570 <_strtod_l+0xa8>
 80347e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80347e4:	781b      	ldrb	r3, [r3, #0]
 80347e6:	2b28      	cmp	r3, #40	@ 0x28
 80347e8:	d12e      	bne.n	8034848 <_strtod_l+0x380>
 80347ea:	4997      	ldr	r1, [pc, #604]	@ (8034a48 <_strtod_l+0x580>)
 80347ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80347ee:	a819      	add	r0, sp, #100	@ 0x64
 80347f0:	f001 fb20 	bl	8035e34 <__hexnan>
 80347f4:	2805      	cmp	r0, #5
 80347f6:	d127      	bne.n	8034848 <_strtod_l+0x380>
 80347f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80347fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80347fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034802:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034806:	e698      	b.n	803453a <_strtod_l+0x72>
 8034808:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803480a:	fb08 2101 	mla	r1, r8, r1, r2
 803480e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034812:	920e      	str	r2, [sp, #56]	@ 0x38
 8034814:	e7b5      	b.n	8034782 <_strtod_l+0x2ba>
 8034816:	2a6e      	cmp	r2, #110	@ 0x6e
 8034818:	e7da      	b.n	80347d0 <_strtod_l+0x308>
 803481a:	498c      	ldr	r1, [pc, #560]	@ (8034a4c <_strtod_l+0x584>)
 803481c:	a819      	add	r0, sp, #100	@ 0x64
 803481e:	f001 faf5 	bl	8035e0c <__match>
 8034822:	2800      	cmp	r0, #0
 8034824:	f43f aea4 	beq.w	8034570 <_strtod_l+0xa8>
 8034828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803482a:	4989      	ldr	r1, [pc, #548]	@ (8034a50 <_strtod_l+0x588>)
 803482c:	3b01      	subs	r3, #1
 803482e:	a819      	add	r0, sp, #100	@ 0x64
 8034830:	9319      	str	r3, [sp, #100]	@ 0x64
 8034832:	f001 faeb 	bl	8035e0c <__match>
 8034836:	b910      	cbnz	r0, 803483e <_strtod_l+0x376>
 8034838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803483a:	3301      	adds	r3, #1
 803483c:	9319      	str	r3, [sp, #100]	@ 0x64
 803483e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8034a60 <_strtod_l+0x598>
 8034842:	f04f 0a00 	mov.w	sl, #0
 8034846:	e678      	b.n	803453a <_strtod_l+0x72>
 8034848:	4882      	ldr	r0, [pc, #520]	@ (8034a54 <_strtod_l+0x58c>)
 803484a:	f001 f805 	bl	8035858 <nan>
 803484e:	ec5b ab10 	vmov	sl, fp, d0
 8034852:	e672      	b.n	803453a <_strtod_l+0x72>
 8034854:	eba8 0309 	sub.w	r3, r8, r9
 8034858:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803485a:	9309      	str	r3, [sp, #36]	@ 0x24
 803485c:	2f00      	cmp	r7, #0
 803485e:	bf08      	it	eq
 8034860:	462f      	moveq	r7, r5
 8034862:	2d10      	cmp	r5, #16
 8034864:	462c      	mov	r4, r5
 8034866:	bfa8      	it	ge
 8034868:	2410      	movge	r4, #16
 803486a:	f7db fe63 	bl	8010534 <__aeabi_ui2d>
 803486e:	2d09      	cmp	r5, #9
 8034870:	4682      	mov	sl, r0
 8034872:	468b      	mov	fp, r1
 8034874:	dc13      	bgt.n	803489e <_strtod_l+0x3d6>
 8034876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034878:	2b00      	cmp	r3, #0
 803487a:	f43f ae5e 	beq.w	803453a <_strtod_l+0x72>
 803487e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034880:	dd78      	ble.n	8034974 <_strtod_l+0x4ac>
 8034882:	2b16      	cmp	r3, #22
 8034884:	dc5f      	bgt.n	8034946 <_strtod_l+0x47e>
 8034886:	4974      	ldr	r1, [pc, #464]	@ (8034a58 <_strtod_l+0x590>)
 8034888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803488c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034890:	4652      	mov	r2, sl
 8034892:	465b      	mov	r3, fp
 8034894:	f7db fec8 	bl	8010628 <__aeabi_dmul>
 8034898:	4682      	mov	sl, r0
 803489a:	468b      	mov	fp, r1
 803489c:	e64d      	b.n	803453a <_strtod_l+0x72>
 803489e:	4b6e      	ldr	r3, [pc, #440]	@ (8034a58 <_strtod_l+0x590>)
 80348a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80348a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80348a8:	f7db febe 	bl	8010628 <__aeabi_dmul>
 80348ac:	4682      	mov	sl, r0
 80348ae:	9808      	ldr	r0, [sp, #32]
 80348b0:	468b      	mov	fp, r1
 80348b2:	f7db fe3f 	bl	8010534 <__aeabi_ui2d>
 80348b6:	4602      	mov	r2, r0
 80348b8:	460b      	mov	r3, r1
 80348ba:	4650      	mov	r0, sl
 80348bc:	4659      	mov	r1, fp
 80348be:	f7db fcfd 	bl	80102bc <__adddf3>
 80348c2:	2d0f      	cmp	r5, #15
 80348c4:	4682      	mov	sl, r0
 80348c6:	468b      	mov	fp, r1
 80348c8:	ddd5      	ble.n	8034876 <_strtod_l+0x3ae>
 80348ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80348cc:	1b2c      	subs	r4, r5, r4
 80348ce:	441c      	add	r4, r3
 80348d0:	2c00      	cmp	r4, #0
 80348d2:	f340 8096 	ble.w	8034a02 <_strtod_l+0x53a>
 80348d6:	f014 030f 	ands.w	r3, r4, #15
 80348da:	d00a      	beq.n	80348f2 <_strtod_l+0x42a>
 80348dc:	495e      	ldr	r1, [pc, #376]	@ (8034a58 <_strtod_l+0x590>)
 80348de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80348e2:	4652      	mov	r2, sl
 80348e4:	465b      	mov	r3, fp
 80348e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80348ea:	f7db fe9d 	bl	8010628 <__aeabi_dmul>
 80348ee:	4682      	mov	sl, r0
 80348f0:	468b      	mov	fp, r1
 80348f2:	f034 040f 	bics.w	r4, r4, #15
 80348f6:	d073      	beq.n	80349e0 <_strtod_l+0x518>
 80348f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80348fc:	dd48      	ble.n	8034990 <_strtod_l+0x4c8>
 80348fe:	2400      	movs	r4, #0
 8034900:	46a0      	mov	r8, r4
 8034902:	940a      	str	r4, [sp, #40]	@ 0x28
 8034904:	46a1      	mov	r9, r4
 8034906:	9a05      	ldr	r2, [sp, #20]
 8034908:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8034a60 <_strtod_l+0x598>
 803490c:	2322      	movs	r3, #34	@ 0x22
 803490e:	6013      	str	r3, [r2, #0]
 8034910:	f04f 0a00 	mov.w	sl, #0
 8034914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034916:	2b00      	cmp	r3, #0
 8034918:	f43f ae0f 	beq.w	803453a <_strtod_l+0x72>
 803491c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803491e:	9805      	ldr	r0, [sp, #20]
 8034920:	f7fe ff37 	bl	8033792 <_Bfree>
 8034924:	9805      	ldr	r0, [sp, #20]
 8034926:	4649      	mov	r1, r9
 8034928:	f7fe ff33 	bl	8033792 <_Bfree>
 803492c:	9805      	ldr	r0, [sp, #20]
 803492e:	4641      	mov	r1, r8
 8034930:	f7fe ff2f 	bl	8033792 <_Bfree>
 8034934:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8034936:	9805      	ldr	r0, [sp, #20]
 8034938:	f7fe ff2b 	bl	8033792 <_Bfree>
 803493c:	9805      	ldr	r0, [sp, #20]
 803493e:	4621      	mov	r1, r4
 8034940:	f7fe ff27 	bl	8033792 <_Bfree>
 8034944:	e5f9      	b.n	803453a <_strtod_l+0x72>
 8034946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034948:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 803494c:	4293      	cmp	r3, r2
 803494e:	dbbc      	blt.n	80348ca <_strtod_l+0x402>
 8034950:	4c41      	ldr	r4, [pc, #260]	@ (8034a58 <_strtod_l+0x590>)
 8034952:	f1c5 050f 	rsb	r5, r5, #15
 8034956:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803495a:	4652      	mov	r2, sl
 803495c:	465b      	mov	r3, fp
 803495e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034962:	f7db fe61 	bl	8010628 <__aeabi_dmul>
 8034966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034968:	1b5d      	subs	r5, r3, r5
 803496a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803496e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8034972:	e78f      	b.n	8034894 <_strtod_l+0x3cc>
 8034974:	3316      	adds	r3, #22
 8034976:	dba8      	blt.n	80348ca <_strtod_l+0x402>
 8034978:	4b37      	ldr	r3, [pc, #220]	@ (8034a58 <_strtod_l+0x590>)
 803497a:	eba9 0808 	sub.w	r8, r9, r8
 803497e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8034982:	e9d8 2300 	ldrd	r2, r3, [r8]
 8034986:	4650      	mov	r0, sl
 8034988:	4659      	mov	r1, fp
 803498a:	f7db ff77 	bl	801087c <__aeabi_ddiv>
 803498e:	e783      	b.n	8034898 <_strtod_l+0x3d0>
 8034990:	4b32      	ldr	r3, [pc, #200]	@ (8034a5c <_strtod_l+0x594>)
 8034992:	9308      	str	r3, [sp, #32]
 8034994:	2300      	movs	r3, #0
 8034996:	1124      	asrs	r4, r4, #4
 8034998:	4650      	mov	r0, sl
 803499a:	4659      	mov	r1, fp
 803499c:	461e      	mov	r6, r3
 803499e:	2c01      	cmp	r4, #1
 80349a0:	dc21      	bgt.n	80349e6 <_strtod_l+0x51e>
 80349a2:	b10b      	cbz	r3, 80349a8 <_strtod_l+0x4e0>
 80349a4:	4682      	mov	sl, r0
 80349a6:	468b      	mov	fp, r1
 80349a8:	492c      	ldr	r1, [pc, #176]	@ (8034a5c <_strtod_l+0x594>)
 80349aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80349ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80349b2:	4652      	mov	r2, sl
 80349b4:	465b      	mov	r3, fp
 80349b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80349ba:	f7db fe35 	bl	8010628 <__aeabi_dmul>
 80349be:	4b28      	ldr	r3, [pc, #160]	@ (8034a60 <_strtod_l+0x598>)
 80349c0:	460a      	mov	r2, r1
 80349c2:	400b      	ands	r3, r1
 80349c4:	4927      	ldr	r1, [pc, #156]	@ (8034a64 <_strtod_l+0x59c>)
 80349c6:	428b      	cmp	r3, r1
 80349c8:	4682      	mov	sl, r0
 80349ca:	d898      	bhi.n	80348fe <_strtod_l+0x436>
 80349cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80349d0:	428b      	cmp	r3, r1
 80349d2:	bf86      	itte	hi
 80349d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8034a68 <_strtod_l+0x5a0>
 80349d8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80349dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80349e0:	2300      	movs	r3, #0
 80349e2:	9308      	str	r3, [sp, #32]
 80349e4:	e07a      	b.n	8034adc <_strtod_l+0x614>
 80349e6:	07e2      	lsls	r2, r4, #31
 80349e8:	d505      	bpl.n	80349f6 <_strtod_l+0x52e>
 80349ea:	9b08      	ldr	r3, [sp, #32]
 80349ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80349f0:	f7db fe1a 	bl	8010628 <__aeabi_dmul>
 80349f4:	2301      	movs	r3, #1
 80349f6:	9a08      	ldr	r2, [sp, #32]
 80349f8:	3208      	adds	r2, #8
 80349fa:	3601      	adds	r6, #1
 80349fc:	1064      	asrs	r4, r4, #1
 80349fe:	9208      	str	r2, [sp, #32]
 8034a00:	e7cd      	b.n	803499e <_strtod_l+0x4d6>
 8034a02:	d0ed      	beq.n	80349e0 <_strtod_l+0x518>
 8034a04:	4264      	negs	r4, r4
 8034a06:	f014 020f 	ands.w	r2, r4, #15
 8034a0a:	d00a      	beq.n	8034a22 <_strtod_l+0x55a>
 8034a0c:	4b12      	ldr	r3, [pc, #72]	@ (8034a58 <_strtod_l+0x590>)
 8034a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034a12:	4650      	mov	r0, sl
 8034a14:	4659      	mov	r1, fp
 8034a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034a1a:	f7db ff2f 	bl	801087c <__aeabi_ddiv>
 8034a1e:	4682      	mov	sl, r0
 8034a20:	468b      	mov	fp, r1
 8034a22:	1124      	asrs	r4, r4, #4
 8034a24:	d0dc      	beq.n	80349e0 <_strtod_l+0x518>
 8034a26:	2c1f      	cmp	r4, #31
 8034a28:	dd20      	ble.n	8034a6c <_strtod_l+0x5a4>
 8034a2a:	2400      	movs	r4, #0
 8034a2c:	46a0      	mov	r8, r4
 8034a2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8034a30:	46a1      	mov	r9, r4
 8034a32:	9a05      	ldr	r2, [sp, #20]
 8034a34:	2322      	movs	r3, #34	@ 0x22
 8034a36:	f04f 0a00 	mov.w	sl, #0
 8034a3a:	f04f 0b00 	mov.w	fp, #0
 8034a3e:	6013      	str	r3, [r2, #0]
 8034a40:	e768      	b.n	8034914 <_strtod_l+0x44c>
 8034a42:	bf00      	nop
 8034a44:	0803c1d1 	.word	0x0803c1d1
 8034a48:	0803c750 	.word	0x0803c750
 8034a4c:	0803c040 	.word	0x0803c040
 8034a50:	0803c4fc 	.word	0x0803c4fc
 8034a54:	0803c03a 	.word	0x0803c03a
 8034a58:	0803c688 	.word	0x0803c688
 8034a5c:	0803c660 	.word	0x0803c660
 8034a60:	7ff00000 	.word	0x7ff00000
 8034a64:	7ca00000 	.word	0x7ca00000
 8034a68:	7fefffff 	.word	0x7fefffff
 8034a6c:	f014 0310 	ands.w	r3, r4, #16
 8034a70:	bf18      	it	ne
 8034a72:	236a      	movne	r3, #106	@ 0x6a
 8034a74:	4ea9      	ldr	r6, [pc, #676]	@ (8034d1c <_strtod_l+0x854>)
 8034a76:	9308      	str	r3, [sp, #32]
 8034a78:	4650      	mov	r0, sl
 8034a7a:	4659      	mov	r1, fp
 8034a7c:	2300      	movs	r3, #0
 8034a7e:	07e2      	lsls	r2, r4, #31
 8034a80:	d504      	bpl.n	8034a8c <_strtod_l+0x5c4>
 8034a82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8034a86:	f7db fdcf 	bl	8010628 <__aeabi_dmul>
 8034a8a:	2301      	movs	r3, #1
 8034a8c:	1064      	asrs	r4, r4, #1
 8034a8e:	f106 0608 	add.w	r6, r6, #8
 8034a92:	d1f4      	bne.n	8034a7e <_strtod_l+0x5b6>
 8034a94:	b10b      	cbz	r3, 8034a9a <_strtod_l+0x5d2>
 8034a96:	4682      	mov	sl, r0
 8034a98:	468b      	mov	fp, r1
 8034a9a:	9b08      	ldr	r3, [sp, #32]
 8034a9c:	b1b3      	cbz	r3, 8034acc <_strtod_l+0x604>
 8034a9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8034aa2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8034aa6:	2b00      	cmp	r3, #0
 8034aa8:	4659      	mov	r1, fp
 8034aaa:	dd0f      	ble.n	8034acc <_strtod_l+0x604>
 8034aac:	2b1f      	cmp	r3, #31
 8034aae:	dd55      	ble.n	8034b5c <_strtod_l+0x694>
 8034ab0:	2b34      	cmp	r3, #52	@ 0x34
 8034ab2:	bfde      	ittt	le
 8034ab4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8034ab8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8034abc:	4093      	lslle	r3, r2
 8034abe:	f04f 0a00 	mov.w	sl, #0
 8034ac2:	bfcc      	ite	gt
 8034ac4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8034ac8:	ea03 0b01 	andle.w	fp, r3, r1
 8034acc:	2200      	movs	r2, #0
 8034ace:	2300      	movs	r3, #0
 8034ad0:	4650      	mov	r0, sl
 8034ad2:	4659      	mov	r1, fp
 8034ad4:	f7dc f810 	bl	8010af8 <__aeabi_dcmpeq>
 8034ad8:	2800      	cmp	r0, #0
 8034ada:	d1a6      	bne.n	8034a2a <_strtod_l+0x562>
 8034adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034ade:	9300      	str	r3, [sp, #0]
 8034ae0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8034ae2:	9805      	ldr	r0, [sp, #20]
 8034ae4:	462b      	mov	r3, r5
 8034ae6:	463a      	mov	r2, r7
 8034ae8:	f7fe fea2 	bl	8033830 <__s2b>
 8034aec:	900a      	str	r0, [sp, #40]	@ 0x28
 8034aee:	2800      	cmp	r0, #0
 8034af0:	f43f af05 	beq.w	80348fe <_strtod_l+0x436>
 8034af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034af6:	2a00      	cmp	r2, #0
 8034af8:	eba9 0308 	sub.w	r3, r9, r8
 8034afc:	bfa8      	it	ge
 8034afe:	2300      	movge	r3, #0
 8034b00:	9312      	str	r3, [sp, #72]	@ 0x48
 8034b02:	2400      	movs	r4, #0
 8034b04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034b08:	9316      	str	r3, [sp, #88]	@ 0x58
 8034b0a:	46a0      	mov	r8, r4
 8034b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034b0e:	9805      	ldr	r0, [sp, #20]
 8034b10:	6859      	ldr	r1, [r3, #4]
 8034b12:	f7fe fe19 	bl	8033748 <_Balloc>
 8034b16:	4681      	mov	r9, r0
 8034b18:	2800      	cmp	r0, #0
 8034b1a:	f43f aef4 	beq.w	8034906 <_strtod_l+0x43e>
 8034b1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034b20:	691a      	ldr	r2, [r3, #16]
 8034b22:	3202      	adds	r2, #2
 8034b24:	f103 010c 	add.w	r1, r3, #12
 8034b28:	0092      	lsls	r2, r2, #2
 8034b2a:	300c      	adds	r0, #12
 8034b2c:	f7f9 fadc 	bl	802e0e8 <memcpy>
 8034b30:	ec4b ab10 	vmov	d0, sl, fp
 8034b34:	9805      	ldr	r0, [sp, #20]
 8034b36:	aa1c      	add	r2, sp, #112	@ 0x70
 8034b38:	a91b      	add	r1, sp, #108	@ 0x6c
 8034b3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8034b3e:	f7ff f999 	bl	8033e74 <__d2b>
 8034b42:	901a      	str	r0, [sp, #104]	@ 0x68
 8034b44:	2800      	cmp	r0, #0
 8034b46:	f43f aede 	beq.w	8034906 <_strtod_l+0x43e>
 8034b4a:	9805      	ldr	r0, [sp, #20]
 8034b4c:	2101      	movs	r1, #1
 8034b4e:	f7fe ff05 	bl	803395c <__i2b>
 8034b52:	4680      	mov	r8, r0
 8034b54:	b948      	cbnz	r0, 8034b6a <_strtod_l+0x6a2>
 8034b56:	f04f 0800 	mov.w	r8, #0
 8034b5a:	e6d4      	b.n	8034906 <_strtod_l+0x43e>
 8034b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034b60:	fa02 f303 	lsl.w	r3, r2, r3
 8034b64:	ea03 0a0a 	and.w	sl, r3, sl
 8034b68:	e7b0      	b.n	8034acc <_strtod_l+0x604>
 8034b6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8034b6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8034b6e:	2d00      	cmp	r5, #0
 8034b70:	bfab      	itete	ge
 8034b72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8034b74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8034b76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8034b78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8034b7a:	bfac      	ite	ge
 8034b7c:	18ef      	addge	r7, r5, r3
 8034b7e:	1b5e      	sublt	r6, r3, r5
 8034b80:	9b08      	ldr	r3, [sp, #32]
 8034b82:	1aed      	subs	r5, r5, r3
 8034b84:	4415      	add	r5, r2
 8034b86:	4b66      	ldr	r3, [pc, #408]	@ (8034d20 <_strtod_l+0x858>)
 8034b88:	3d01      	subs	r5, #1
 8034b8a:	429d      	cmp	r5, r3
 8034b8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8034b90:	da50      	bge.n	8034c34 <_strtod_l+0x76c>
 8034b92:	1b5b      	subs	r3, r3, r5
 8034b94:	2b1f      	cmp	r3, #31
 8034b96:	eba2 0203 	sub.w	r2, r2, r3
 8034b9a:	f04f 0101 	mov.w	r1, #1
 8034b9e:	dc3d      	bgt.n	8034c1c <_strtod_l+0x754>
 8034ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8034ba4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034ba6:	2300      	movs	r3, #0
 8034ba8:	9310      	str	r3, [sp, #64]	@ 0x40
 8034baa:	18bd      	adds	r5, r7, r2
 8034bac:	9b08      	ldr	r3, [sp, #32]
 8034bae:	42af      	cmp	r7, r5
 8034bb0:	4416      	add	r6, r2
 8034bb2:	441e      	add	r6, r3
 8034bb4:	463b      	mov	r3, r7
 8034bb6:	bfa8      	it	ge
 8034bb8:	462b      	movge	r3, r5
 8034bba:	42b3      	cmp	r3, r6
 8034bbc:	bfa8      	it	ge
 8034bbe:	4633      	movge	r3, r6
 8034bc0:	2b00      	cmp	r3, #0
 8034bc2:	bfc2      	ittt	gt
 8034bc4:	1aed      	subgt	r5, r5, r3
 8034bc6:	1af6      	subgt	r6, r6, r3
 8034bc8:	1aff      	subgt	r7, r7, r3
 8034bca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8034bcc:	2b00      	cmp	r3, #0
 8034bce:	dd16      	ble.n	8034bfe <_strtod_l+0x736>
 8034bd0:	4641      	mov	r1, r8
 8034bd2:	9805      	ldr	r0, [sp, #20]
 8034bd4:	461a      	mov	r2, r3
 8034bd6:	f7fe ff81 	bl	8033adc <__pow5mult>
 8034bda:	4680      	mov	r8, r0
 8034bdc:	2800      	cmp	r0, #0
 8034bde:	d0ba      	beq.n	8034b56 <_strtod_l+0x68e>
 8034be0:	4601      	mov	r1, r0
 8034be2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034be4:	9805      	ldr	r0, [sp, #20]
 8034be6:	f7fe fecf 	bl	8033988 <__multiply>
 8034bea:	900e      	str	r0, [sp, #56]	@ 0x38
 8034bec:	2800      	cmp	r0, #0
 8034bee:	f43f ae8a 	beq.w	8034906 <_strtod_l+0x43e>
 8034bf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034bf4:	9805      	ldr	r0, [sp, #20]
 8034bf6:	f7fe fdcc 	bl	8033792 <_Bfree>
 8034bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8034bfe:	2d00      	cmp	r5, #0
 8034c00:	dc1d      	bgt.n	8034c3e <_strtod_l+0x776>
 8034c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034c04:	2b00      	cmp	r3, #0
 8034c06:	dd23      	ble.n	8034c50 <_strtod_l+0x788>
 8034c08:	4649      	mov	r1, r9
 8034c0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8034c0c:	9805      	ldr	r0, [sp, #20]
 8034c0e:	f7fe ff65 	bl	8033adc <__pow5mult>
 8034c12:	4681      	mov	r9, r0
 8034c14:	b9e0      	cbnz	r0, 8034c50 <_strtod_l+0x788>
 8034c16:	f04f 0900 	mov.w	r9, #0
 8034c1a:	e674      	b.n	8034906 <_strtod_l+0x43e>
 8034c1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8034c20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8034c24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8034c28:	35e2      	adds	r5, #226	@ 0xe2
 8034c2a:	fa01 f305 	lsl.w	r3, r1, r5
 8034c2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8034c30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8034c32:	e7ba      	b.n	8034baa <_strtod_l+0x6e2>
 8034c34:	2300      	movs	r3, #0
 8034c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8034c38:	2301      	movs	r3, #1
 8034c3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8034c3c:	e7b5      	b.n	8034baa <_strtod_l+0x6e2>
 8034c3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034c40:	9805      	ldr	r0, [sp, #20]
 8034c42:	462a      	mov	r2, r5
 8034c44:	f7fe ff8a 	bl	8033b5c <__lshift>
 8034c48:	901a      	str	r0, [sp, #104]	@ 0x68
 8034c4a:	2800      	cmp	r0, #0
 8034c4c:	d1d9      	bne.n	8034c02 <_strtod_l+0x73a>
 8034c4e:	e65a      	b.n	8034906 <_strtod_l+0x43e>
 8034c50:	2e00      	cmp	r6, #0
 8034c52:	dd07      	ble.n	8034c64 <_strtod_l+0x79c>
 8034c54:	4649      	mov	r1, r9
 8034c56:	9805      	ldr	r0, [sp, #20]
 8034c58:	4632      	mov	r2, r6
 8034c5a:	f7fe ff7f 	bl	8033b5c <__lshift>
 8034c5e:	4681      	mov	r9, r0
 8034c60:	2800      	cmp	r0, #0
 8034c62:	d0d8      	beq.n	8034c16 <_strtod_l+0x74e>
 8034c64:	2f00      	cmp	r7, #0
 8034c66:	dd08      	ble.n	8034c7a <_strtod_l+0x7b2>
 8034c68:	4641      	mov	r1, r8
 8034c6a:	9805      	ldr	r0, [sp, #20]
 8034c6c:	463a      	mov	r2, r7
 8034c6e:	f7fe ff75 	bl	8033b5c <__lshift>
 8034c72:	4680      	mov	r8, r0
 8034c74:	2800      	cmp	r0, #0
 8034c76:	f43f ae46 	beq.w	8034906 <_strtod_l+0x43e>
 8034c7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034c7c:	9805      	ldr	r0, [sp, #20]
 8034c7e:	464a      	mov	r2, r9
 8034c80:	f7fe fff4 	bl	8033c6c <__mdiff>
 8034c84:	4604      	mov	r4, r0
 8034c86:	2800      	cmp	r0, #0
 8034c88:	f43f ae3d 	beq.w	8034906 <_strtod_l+0x43e>
 8034c8c:	68c3      	ldr	r3, [r0, #12]
 8034c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034c90:	2300      	movs	r3, #0
 8034c92:	60c3      	str	r3, [r0, #12]
 8034c94:	4641      	mov	r1, r8
 8034c96:	f7fe ffcd 	bl	8033c34 <__mcmp>
 8034c9a:	2800      	cmp	r0, #0
 8034c9c:	da46      	bge.n	8034d2c <_strtod_l+0x864>
 8034c9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034ca0:	ea53 030a 	orrs.w	r3, r3, sl
 8034ca4:	d16c      	bne.n	8034d80 <_strtod_l+0x8b8>
 8034ca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034caa:	2b00      	cmp	r3, #0
 8034cac:	d168      	bne.n	8034d80 <_strtod_l+0x8b8>
 8034cae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034cb2:	0d1b      	lsrs	r3, r3, #20
 8034cb4:	051b      	lsls	r3, r3, #20
 8034cb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034cba:	d961      	bls.n	8034d80 <_strtod_l+0x8b8>
 8034cbc:	6963      	ldr	r3, [r4, #20]
 8034cbe:	b913      	cbnz	r3, 8034cc6 <_strtod_l+0x7fe>
 8034cc0:	6923      	ldr	r3, [r4, #16]
 8034cc2:	2b01      	cmp	r3, #1
 8034cc4:	dd5c      	ble.n	8034d80 <_strtod_l+0x8b8>
 8034cc6:	4621      	mov	r1, r4
 8034cc8:	2201      	movs	r2, #1
 8034cca:	9805      	ldr	r0, [sp, #20]
 8034ccc:	f7fe ff46 	bl	8033b5c <__lshift>
 8034cd0:	4641      	mov	r1, r8
 8034cd2:	4604      	mov	r4, r0
 8034cd4:	f7fe ffae 	bl	8033c34 <__mcmp>
 8034cd8:	2800      	cmp	r0, #0
 8034cda:	dd51      	ble.n	8034d80 <_strtod_l+0x8b8>
 8034cdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034ce0:	9a08      	ldr	r2, [sp, #32]
 8034ce2:	0d1b      	lsrs	r3, r3, #20
 8034ce4:	051b      	lsls	r3, r3, #20
 8034ce6:	2a00      	cmp	r2, #0
 8034ce8:	d06b      	beq.n	8034dc2 <_strtod_l+0x8fa>
 8034cea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8034cee:	d868      	bhi.n	8034dc2 <_strtod_l+0x8fa>
 8034cf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034cf4:	f67f ae9d 	bls.w	8034a32 <_strtod_l+0x56a>
 8034cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8034d24 <_strtod_l+0x85c>)
 8034cfa:	4650      	mov	r0, sl
 8034cfc:	4659      	mov	r1, fp
 8034cfe:	2200      	movs	r2, #0
 8034d00:	f7db fc92 	bl	8010628 <__aeabi_dmul>
 8034d04:	4b08      	ldr	r3, [pc, #32]	@ (8034d28 <_strtod_l+0x860>)
 8034d06:	400b      	ands	r3, r1
 8034d08:	4682      	mov	sl, r0
 8034d0a:	468b      	mov	fp, r1
 8034d0c:	2b00      	cmp	r3, #0
 8034d0e:	f47f ae05 	bne.w	803491c <_strtod_l+0x454>
 8034d12:	9a05      	ldr	r2, [sp, #20]
 8034d14:	2322      	movs	r3, #34	@ 0x22
 8034d16:	6013      	str	r3, [r2, #0]
 8034d18:	e600      	b.n	803491c <_strtod_l+0x454>
 8034d1a:	bf00      	nop
 8034d1c:	0803c778 	.word	0x0803c778
 8034d20:	fffffc02 	.word	0xfffffc02
 8034d24:	39500000 	.word	0x39500000
 8034d28:	7ff00000 	.word	0x7ff00000
 8034d2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034d30:	d165      	bne.n	8034dfe <_strtod_l+0x936>
 8034d32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034d38:	b35a      	cbz	r2, 8034d92 <_strtod_l+0x8ca>
 8034d3a:	4a9f      	ldr	r2, [pc, #636]	@ (8034fb8 <_strtod_l+0xaf0>)
 8034d3c:	4293      	cmp	r3, r2
 8034d3e:	d12b      	bne.n	8034d98 <_strtod_l+0x8d0>
 8034d40:	9b08      	ldr	r3, [sp, #32]
 8034d42:	4651      	mov	r1, sl
 8034d44:	b303      	cbz	r3, 8034d88 <_strtod_l+0x8c0>
 8034d46:	4b9d      	ldr	r3, [pc, #628]	@ (8034fbc <_strtod_l+0xaf4>)
 8034d48:	465a      	mov	r2, fp
 8034d4a:	4013      	ands	r3, r2
 8034d4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8034d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034d54:	d81b      	bhi.n	8034d8e <_strtod_l+0x8c6>
 8034d56:	0d1b      	lsrs	r3, r3, #20
 8034d58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8034d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8034d60:	4299      	cmp	r1, r3
 8034d62:	d119      	bne.n	8034d98 <_strtod_l+0x8d0>
 8034d64:	4b96      	ldr	r3, [pc, #600]	@ (8034fc0 <_strtod_l+0xaf8>)
 8034d66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034d68:	429a      	cmp	r2, r3
 8034d6a:	d102      	bne.n	8034d72 <_strtod_l+0x8aa>
 8034d6c:	3101      	adds	r1, #1
 8034d6e:	f43f adca 	beq.w	8034906 <_strtod_l+0x43e>
 8034d72:	4b92      	ldr	r3, [pc, #584]	@ (8034fbc <_strtod_l+0xaf4>)
 8034d74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034d76:	401a      	ands	r2, r3
 8034d78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8034d7c:	f04f 0a00 	mov.w	sl, #0
 8034d80:	9b08      	ldr	r3, [sp, #32]
 8034d82:	2b00      	cmp	r3, #0
 8034d84:	d1b8      	bne.n	8034cf8 <_strtod_l+0x830>
 8034d86:	e5c9      	b.n	803491c <_strtod_l+0x454>
 8034d88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034d8c:	e7e8      	b.n	8034d60 <_strtod_l+0x898>
 8034d8e:	4613      	mov	r3, r2
 8034d90:	e7e6      	b.n	8034d60 <_strtod_l+0x898>
 8034d92:	ea53 030a 	orrs.w	r3, r3, sl
 8034d96:	d0a1      	beq.n	8034cdc <_strtod_l+0x814>
 8034d98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8034d9a:	b1db      	cbz	r3, 8034dd4 <_strtod_l+0x90c>
 8034d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034d9e:	4213      	tst	r3, r2
 8034da0:	d0ee      	beq.n	8034d80 <_strtod_l+0x8b8>
 8034da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034da4:	9a08      	ldr	r2, [sp, #32]
 8034da6:	4650      	mov	r0, sl
 8034da8:	4659      	mov	r1, fp
 8034daa:	b1bb      	cbz	r3, 8034ddc <_strtod_l+0x914>
 8034dac:	f7ff fb6e 	bl	803448c <sulp>
 8034db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034db4:	ec53 2b10 	vmov	r2, r3, d0
 8034db8:	f7db fa80 	bl	80102bc <__adddf3>
 8034dbc:	4682      	mov	sl, r0
 8034dbe:	468b      	mov	fp, r1
 8034dc0:	e7de      	b.n	8034d80 <_strtod_l+0x8b8>
 8034dc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8034dc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8034dca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8034dce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034dd2:	e7d5      	b.n	8034d80 <_strtod_l+0x8b8>
 8034dd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034dd6:	ea13 0f0a 	tst.w	r3, sl
 8034dda:	e7e1      	b.n	8034da0 <_strtod_l+0x8d8>
 8034ddc:	f7ff fb56 	bl	803448c <sulp>
 8034de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034de4:	ec53 2b10 	vmov	r2, r3, d0
 8034de8:	f7db fa66 	bl	80102b8 <__aeabi_dsub>
 8034dec:	2200      	movs	r2, #0
 8034dee:	2300      	movs	r3, #0
 8034df0:	4682      	mov	sl, r0
 8034df2:	468b      	mov	fp, r1
 8034df4:	f7db fe80 	bl	8010af8 <__aeabi_dcmpeq>
 8034df8:	2800      	cmp	r0, #0
 8034dfa:	d0c1      	beq.n	8034d80 <_strtod_l+0x8b8>
 8034dfc:	e619      	b.n	8034a32 <_strtod_l+0x56a>
 8034dfe:	4641      	mov	r1, r8
 8034e00:	4620      	mov	r0, r4
 8034e02:	f7ff f88f 	bl	8033f24 <__ratio>
 8034e06:	ec57 6b10 	vmov	r6, r7, d0
 8034e0a:	2200      	movs	r2, #0
 8034e0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8034e10:	4630      	mov	r0, r6
 8034e12:	4639      	mov	r1, r7
 8034e14:	f7db fe84 	bl	8010b20 <__aeabi_dcmple>
 8034e18:	2800      	cmp	r0, #0
 8034e1a:	d06f      	beq.n	8034efc <_strtod_l+0xa34>
 8034e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034e1e:	2b00      	cmp	r3, #0
 8034e20:	d17a      	bne.n	8034f18 <_strtod_l+0xa50>
 8034e22:	f1ba 0f00 	cmp.w	sl, #0
 8034e26:	d158      	bne.n	8034eda <_strtod_l+0xa12>
 8034e28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8034e2e:	2b00      	cmp	r3, #0
 8034e30:	d15a      	bne.n	8034ee8 <_strtod_l+0xa20>
 8034e32:	4b64      	ldr	r3, [pc, #400]	@ (8034fc4 <_strtod_l+0xafc>)
 8034e34:	2200      	movs	r2, #0
 8034e36:	4630      	mov	r0, r6
 8034e38:	4639      	mov	r1, r7
 8034e3a:	f7db fe67 	bl	8010b0c <__aeabi_dcmplt>
 8034e3e:	2800      	cmp	r0, #0
 8034e40:	d159      	bne.n	8034ef6 <_strtod_l+0xa2e>
 8034e42:	4630      	mov	r0, r6
 8034e44:	4639      	mov	r1, r7
 8034e46:	4b60      	ldr	r3, [pc, #384]	@ (8034fc8 <_strtod_l+0xb00>)
 8034e48:	2200      	movs	r2, #0
 8034e4a:	f7db fbed 	bl	8010628 <__aeabi_dmul>
 8034e4e:	4606      	mov	r6, r0
 8034e50:	460f      	mov	r7, r1
 8034e52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8034e56:	9606      	str	r6, [sp, #24]
 8034e58:	9307      	str	r3, [sp, #28]
 8034e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034e5e:	4d57      	ldr	r5, [pc, #348]	@ (8034fbc <_strtod_l+0xaf4>)
 8034e60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034e66:	401d      	ands	r5, r3
 8034e68:	4b58      	ldr	r3, [pc, #352]	@ (8034fcc <_strtod_l+0xb04>)
 8034e6a:	429d      	cmp	r5, r3
 8034e6c:	f040 80b2 	bne.w	8034fd4 <_strtod_l+0xb0c>
 8034e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034e72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8034e76:	ec4b ab10 	vmov	d0, sl, fp
 8034e7a:	f7fe ff8b 	bl	8033d94 <__ulp>
 8034e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034e82:	ec51 0b10 	vmov	r0, r1, d0
 8034e86:	f7db fbcf 	bl	8010628 <__aeabi_dmul>
 8034e8a:	4652      	mov	r2, sl
 8034e8c:	465b      	mov	r3, fp
 8034e8e:	f7db fa15 	bl	80102bc <__adddf3>
 8034e92:	460b      	mov	r3, r1
 8034e94:	4949      	ldr	r1, [pc, #292]	@ (8034fbc <_strtod_l+0xaf4>)
 8034e96:	4a4e      	ldr	r2, [pc, #312]	@ (8034fd0 <_strtod_l+0xb08>)
 8034e98:	4019      	ands	r1, r3
 8034e9a:	4291      	cmp	r1, r2
 8034e9c:	4682      	mov	sl, r0
 8034e9e:	d942      	bls.n	8034f26 <_strtod_l+0xa5e>
 8034ea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034ea2:	4b47      	ldr	r3, [pc, #284]	@ (8034fc0 <_strtod_l+0xaf8>)
 8034ea4:	429a      	cmp	r2, r3
 8034ea6:	d103      	bne.n	8034eb0 <_strtod_l+0x9e8>
 8034ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8034eaa:	3301      	adds	r3, #1
 8034eac:	f43f ad2b 	beq.w	8034906 <_strtod_l+0x43e>
 8034eb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8034fc0 <_strtod_l+0xaf8>
 8034eb4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034eb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034eba:	9805      	ldr	r0, [sp, #20]
 8034ebc:	f7fe fc69 	bl	8033792 <_Bfree>
 8034ec0:	9805      	ldr	r0, [sp, #20]
 8034ec2:	4649      	mov	r1, r9
 8034ec4:	f7fe fc65 	bl	8033792 <_Bfree>
 8034ec8:	9805      	ldr	r0, [sp, #20]
 8034eca:	4641      	mov	r1, r8
 8034ecc:	f7fe fc61 	bl	8033792 <_Bfree>
 8034ed0:	9805      	ldr	r0, [sp, #20]
 8034ed2:	4621      	mov	r1, r4
 8034ed4:	f7fe fc5d 	bl	8033792 <_Bfree>
 8034ed8:	e618      	b.n	8034b0c <_strtod_l+0x644>
 8034eda:	f1ba 0f01 	cmp.w	sl, #1
 8034ede:	d103      	bne.n	8034ee8 <_strtod_l+0xa20>
 8034ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034ee2:	2b00      	cmp	r3, #0
 8034ee4:	f43f ada5 	beq.w	8034a32 <_strtod_l+0x56a>
 8034ee8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8034f98 <_strtod_l+0xad0>
 8034eec:	4f35      	ldr	r7, [pc, #212]	@ (8034fc4 <_strtod_l+0xafc>)
 8034eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034ef2:	2600      	movs	r6, #0
 8034ef4:	e7b1      	b.n	8034e5a <_strtod_l+0x992>
 8034ef6:	4f34      	ldr	r7, [pc, #208]	@ (8034fc8 <_strtod_l+0xb00>)
 8034ef8:	2600      	movs	r6, #0
 8034efa:	e7aa      	b.n	8034e52 <_strtod_l+0x98a>
 8034efc:	4b32      	ldr	r3, [pc, #200]	@ (8034fc8 <_strtod_l+0xb00>)
 8034efe:	4630      	mov	r0, r6
 8034f00:	4639      	mov	r1, r7
 8034f02:	2200      	movs	r2, #0
 8034f04:	f7db fb90 	bl	8010628 <__aeabi_dmul>
 8034f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034f0a:	4606      	mov	r6, r0
 8034f0c:	460f      	mov	r7, r1
 8034f0e:	2b00      	cmp	r3, #0
 8034f10:	d09f      	beq.n	8034e52 <_strtod_l+0x98a>
 8034f12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8034f16:	e7a0      	b.n	8034e5a <_strtod_l+0x992>
 8034f18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8034fa0 <_strtod_l+0xad8>
 8034f1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034f20:	ec57 6b17 	vmov	r6, r7, d7
 8034f24:	e799      	b.n	8034e5a <_strtod_l+0x992>
 8034f26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8034f2a:	9b08      	ldr	r3, [sp, #32]
 8034f2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034f30:	2b00      	cmp	r3, #0
 8034f32:	d1c1      	bne.n	8034eb8 <_strtod_l+0x9f0>
 8034f34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034f38:	0d1b      	lsrs	r3, r3, #20
 8034f3a:	051b      	lsls	r3, r3, #20
 8034f3c:	429d      	cmp	r5, r3
 8034f3e:	d1bb      	bne.n	8034eb8 <_strtod_l+0x9f0>
 8034f40:	4630      	mov	r0, r6
 8034f42:	4639      	mov	r1, r7
 8034f44:	f7db ff34 	bl	8010db0 <__aeabi_d2lz>
 8034f48:	f7db fb40 	bl	80105cc <__aeabi_l2d>
 8034f4c:	4602      	mov	r2, r0
 8034f4e:	460b      	mov	r3, r1
 8034f50:	4630      	mov	r0, r6
 8034f52:	4639      	mov	r1, r7
 8034f54:	f7db f9b0 	bl	80102b8 <__aeabi_dsub>
 8034f58:	460b      	mov	r3, r1
 8034f5a:	4602      	mov	r2, r0
 8034f5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8034f60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8034f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034f66:	ea46 060a 	orr.w	r6, r6, sl
 8034f6a:	431e      	orrs	r6, r3
 8034f6c:	d06f      	beq.n	803504e <_strtod_l+0xb86>
 8034f6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8034fa8 <_strtod_l+0xae0>)
 8034f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034f74:	f7db fdca 	bl	8010b0c <__aeabi_dcmplt>
 8034f78:	2800      	cmp	r0, #0
 8034f7a:	f47f accf 	bne.w	803491c <_strtod_l+0x454>
 8034f7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8034fb0 <_strtod_l+0xae8>)
 8034f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034f88:	f7db fdde 	bl	8010b48 <__aeabi_dcmpgt>
 8034f8c:	2800      	cmp	r0, #0
 8034f8e:	d093      	beq.n	8034eb8 <_strtod_l+0x9f0>
 8034f90:	e4c4      	b.n	803491c <_strtod_l+0x454>
 8034f92:	bf00      	nop
 8034f94:	f3af 8000 	nop.w
 8034f98:	00000000 	.word	0x00000000
 8034f9c:	bff00000 	.word	0xbff00000
 8034fa0:	00000000 	.word	0x00000000
 8034fa4:	3ff00000 	.word	0x3ff00000
 8034fa8:	94a03595 	.word	0x94a03595
 8034fac:	3fdfffff 	.word	0x3fdfffff
 8034fb0:	35afe535 	.word	0x35afe535
 8034fb4:	3fe00000 	.word	0x3fe00000
 8034fb8:	000fffff 	.word	0x000fffff
 8034fbc:	7ff00000 	.word	0x7ff00000
 8034fc0:	7fefffff 	.word	0x7fefffff
 8034fc4:	3ff00000 	.word	0x3ff00000
 8034fc8:	3fe00000 	.word	0x3fe00000
 8034fcc:	7fe00000 	.word	0x7fe00000
 8034fd0:	7c9fffff 	.word	0x7c9fffff
 8034fd4:	9b08      	ldr	r3, [sp, #32]
 8034fd6:	b323      	cbz	r3, 8035022 <_strtod_l+0xb5a>
 8034fd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8034fdc:	d821      	bhi.n	8035022 <_strtod_l+0xb5a>
 8034fde:	a328      	add	r3, pc, #160	@ (adr r3, 8035080 <_strtod_l+0xbb8>)
 8034fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034fe4:	4630      	mov	r0, r6
 8034fe6:	4639      	mov	r1, r7
 8034fe8:	f7db fd9a 	bl	8010b20 <__aeabi_dcmple>
 8034fec:	b1a0      	cbz	r0, 8035018 <_strtod_l+0xb50>
 8034fee:	4639      	mov	r1, r7
 8034ff0:	4630      	mov	r0, r6
 8034ff2:	f7db fdf1 	bl	8010bd8 <__aeabi_d2uiz>
 8034ff6:	2801      	cmp	r0, #1
 8034ff8:	bf38      	it	cc
 8034ffa:	2001      	movcc	r0, #1
 8034ffc:	f7db fa9a 	bl	8010534 <__aeabi_ui2d>
 8035000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035002:	4606      	mov	r6, r0
 8035004:	460f      	mov	r7, r1
 8035006:	b9fb      	cbnz	r3, 8035048 <_strtod_l+0xb80>
 8035008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803500c:	9014      	str	r0, [sp, #80]	@ 0x50
 803500e:	9315      	str	r3, [sp, #84]	@ 0x54
 8035010:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8035014:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8035018:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803501a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803501e:	1b5b      	subs	r3, r3, r5
 8035020:	9311      	str	r3, [sp, #68]	@ 0x44
 8035022:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8035026:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 803502a:	f7fe feb3 	bl	8033d94 <__ulp>
 803502e:	4650      	mov	r0, sl
 8035030:	ec53 2b10 	vmov	r2, r3, d0
 8035034:	4659      	mov	r1, fp
 8035036:	f7db faf7 	bl	8010628 <__aeabi_dmul>
 803503a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 803503e:	f7db f93d 	bl	80102bc <__adddf3>
 8035042:	4682      	mov	sl, r0
 8035044:	468b      	mov	fp, r1
 8035046:	e770      	b.n	8034f2a <_strtod_l+0xa62>
 8035048:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 803504c:	e7e0      	b.n	8035010 <_strtod_l+0xb48>
 803504e:	a30e      	add	r3, pc, #56	@ (adr r3, 8035088 <_strtod_l+0xbc0>)
 8035050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035054:	f7db fd5a 	bl	8010b0c <__aeabi_dcmplt>
 8035058:	e798      	b.n	8034f8c <_strtod_l+0xac4>
 803505a:	2300      	movs	r3, #0
 803505c:	930b      	str	r3, [sp, #44]	@ 0x2c
 803505e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8035060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8035062:	6013      	str	r3, [r2, #0]
 8035064:	f7ff ba6d 	b.w	8034542 <_strtod_l+0x7a>
 8035068:	2a65      	cmp	r2, #101	@ 0x65
 803506a:	f43f ab66 	beq.w	803473a <_strtod_l+0x272>
 803506e:	2a45      	cmp	r2, #69	@ 0x45
 8035070:	f43f ab63 	beq.w	803473a <_strtod_l+0x272>
 8035074:	2301      	movs	r3, #1
 8035076:	f7ff bb9e 	b.w	80347b6 <_strtod_l+0x2ee>
 803507a:	bf00      	nop
 803507c:	f3af 8000 	nop.w
 8035080:	ffc00000 	.word	0xffc00000
 8035084:	41dfffff 	.word	0x41dfffff
 8035088:	94a03595 	.word	0x94a03595
 803508c:	3fcfffff 	.word	0x3fcfffff

08035090 <_strtod_r>:
 8035090:	4b01      	ldr	r3, [pc, #4]	@ (8035098 <_strtod_r+0x8>)
 8035092:	f7ff ba19 	b.w	80344c8 <_strtod_l>
 8035096:	bf00      	nop
 8035098:	2000016c 	.word	0x2000016c

0803509c <_strtoul_l.constprop.0>:
 803509c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80350a0:	4e34      	ldr	r6, [pc, #208]	@ (8035174 <_strtoul_l.constprop.0+0xd8>)
 80350a2:	4686      	mov	lr, r0
 80350a4:	460d      	mov	r5, r1
 80350a6:	4628      	mov	r0, r5
 80350a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80350ac:	5d37      	ldrb	r7, [r6, r4]
 80350ae:	f017 0708 	ands.w	r7, r7, #8
 80350b2:	d1f8      	bne.n	80350a6 <_strtoul_l.constprop.0+0xa>
 80350b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80350b6:	d12f      	bne.n	8035118 <_strtoul_l.constprop.0+0x7c>
 80350b8:	782c      	ldrb	r4, [r5, #0]
 80350ba:	2701      	movs	r7, #1
 80350bc:	1c85      	adds	r5, r0, #2
 80350be:	f033 0010 	bics.w	r0, r3, #16
 80350c2:	d109      	bne.n	80350d8 <_strtoul_l.constprop.0+0x3c>
 80350c4:	2c30      	cmp	r4, #48	@ 0x30
 80350c6:	d12c      	bne.n	8035122 <_strtoul_l.constprop.0+0x86>
 80350c8:	7828      	ldrb	r0, [r5, #0]
 80350ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80350ce:	2858      	cmp	r0, #88	@ 0x58
 80350d0:	d127      	bne.n	8035122 <_strtoul_l.constprop.0+0x86>
 80350d2:	786c      	ldrb	r4, [r5, #1]
 80350d4:	2310      	movs	r3, #16
 80350d6:	3502      	adds	r5, #2
 80350d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80350dc:	2600      	movs	r6, #0
 80350de:	fbb8 f8f3 	udiv	r8, r8, r3
 80350e2:	fb03 f908 	mul.w	r9, r3, r8
 80350e6:	ea6f 0909 	mvn.w	r9, r9
 80350ea:	4630      	mov	r0, r6
 80350ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80350f0:	f1bc 0f09 	cmp.w	ip, #9
 80350f4:	d81c      	bhi.n	8035130 <_strtoul_l.constprop.0+0x94>
 80350f6:	4664      	mov	r4, ip
 80350f8:	42a3      	cmp	r3, r4
 80350fa:	dd2a      	ble.n	8035152 <_strtoul_l.constprop.0+0xb6>
 80350fc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8035100:	d007      	beq.n	8035112 <_strtoul_l.constprop.0+0x76>
 8035102:	4580      	cmp	r8, r0
 8035104:	d322      	bcc.n	803514c <_strtoul_l.constprop.0+0xb0>
 8035106:	d101      	bne.n	803510c <_strtoul_l.constprop.0+0x70>
 8035108:	45a1      	cmp	r9, r4
 803510a:	db1f      	blt.n	803514c <_strtoul_l.constprop.0+0xb0>
 803510c:	fb00 4003 	mla	r0, r0, r3, r4
 8035110:	2601      	movs	r6, #1
 8035112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035116:	e7e9      	b.n	80350ec <_strtoul_l.constprop.0+0x50>
 8035118:	2c2b      	cmp	r4, #43	@ 0x2b
 803511a:	bf04      	itt	eq
 803511c:	782c      	ldrbeq	r4, [r5, #0]
 803511e:	1c85      	addeq	r5, r0, #2
 8035120:	e7cd      	b.n	80350be <_strtoul_l.constprop.0+0x22>
 8035122:	2b00      	cmp	r3, #0
 8035124:	d1d8      	bne.n	80350d8 <_strtoul_l.constprop.0+0x3c>
 8035126:	2c30      	cmp	r4, #48	@ 0x30
 8035128:	bf0c      	ite	eq
 803512a:	2308      	moveq	r3, #8
 803512c:	230a      	movne	r3, #10
 803512e:	e7d3      	b.n	80350d8 <_strtoul_l.constprop.0+0x3c>
 8035130:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035134:	f1bc 0f19 	cmp.w	ip, #25
 8035138:	d801      	bhi.n	803513e <_strtoul_l.constprop.0+0xa2>
 803513a:	3c37      	subs	r4, #55	@ 0x37
 803513c:	e7dc      	b.n	80350f8 <_strtoul_l.constprop.0+0x5c>
 803513e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035142:	f1bc 0f19 	cmp.w	ip, #25
 8035146:	d804      	bhi.n	8035152 <_strtoul_l.constprop.0+0xb6>
 8035148:	3c57      	subs	r4, #87	@ 0x57
 803514a:	e7d5      	b.n	80350f8 <_strtoul_l.constprop.0+0x5c>
 803514c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8035150:	e7df      	b.n	8035112 <_strtoul_l.constprop.0+0x76>
 8035152:	1c73      	adds	r3, r6, #1
 8035154:	d106      	bne.n	8035164 <_strtoul_l.constprop.0+0xc8>
 8035156:	2322      	movs	r3, #34	@ 0x22
 8035158:	f8ce 3000 	str.w	r3, [lr]
 803515c:	4630      	mov	r0, r6
 803515e:	b932      	cbnz	r2, 803516e <_strtoul_l.constprop.0+0xd2>
 8035160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035164:	b107      	cbz	r7, 8035168 <_strtoul_l.constprop.0+0xcc>
 8035166:	4240      	negs	r0, r0
 8035168:	2a00      	cmp	r2, #0
 803516a:	d0f9      	beq.n	8035160 <_strtoul_l.constprop.0+0xc4>
 803516c:	b106      	cbz	r6, 8035170 <_strtoul_l.constprop.0+0xd4>
 803516e:	1e69      	subs	r1, r5, #1
 8035170:	6011      	str	r1, [r2, #0]
 8035172:	e7f5      	b.n	8035160 <_strtoul_l.constprop.0+0xc4>
 8035174:	0803c3f9 	.word	0x0803c3f9

08035178 <_strtoul_r>:
 8035178:	f7ff bf90 	b.w	803509c <_strtoul_l.constprop.0>

0803517c <strtoul>:
 803517c:	4613      	mov	r3, r2
 803517e:	460a      	mov	r2, r1
 8035180:	4601      	mov	r1, r0
 8035182:	4802      	ldr	r0, [pc, #8]	@ (803518c <strtoul+0x10>)
 8035184:	6800      	ldr	r0, [r0, #0]
 8035186:	f7ff bf89 	b.w	803509c <_strtoul_l.constprop.0>
 803518a:	bf00      	nop
 803518c:	200002d8 	.word	0x200002d8

08035190 <__submore>:
 8035190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035194:	460c      	mov	r4, r1
 8035196:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8035198:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803519c:	4299      	cmp	r1, r3
 803519e:	d11d      	bne.n	80351dc <__submore+0x4c>
 80351a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80351a4:	f7f9 ffba 	bl	802f11c <_malloc_r>
 80351a8:	b918      	cbnz	r0, 80351b2 <__submore+0x22>
 80351aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80351ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80351b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80351b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80351b8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80351bc:	6320      	str	r0, [r4, #48]	@ 0x30
 80351be:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80351c2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80351c6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80351ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80351ce:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80351d2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80351d6:	6020      	str	r0, [r4, #0]
 80351d8:	2000      	movs	r0, #0
 80351da:	e7e8      	b.n	80351ae <__submore+0x1e>
 80351dc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80351de:	0077      	lsls	r7, r6, #1
 80351e0:	463a      	mov	r2, r7
 80351e2:	f7fe ffab 	bl	803413c <_realloc_r>
 80351e6:	4605      	mov	r5, r0
 80351e8:	2800      	cmp	r0, #0
 80351ea:	d0de      	beq.n	80351aa <__submore+0x1a>
 80351ec:	eb00 0806 	add.w	r8, r0, r6
 80351f0:	4601      	mov	r1, r0
 80351f2:	4632      	mov	r2, r6
 80351f4:	4640      	mov	r0, r8
 80351f6:	f7f8 ff77 	bl	802e0e8 <memcpy>
 80351fa:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 80351fe:	f8c4 8000 	str.w	r8, [r4]
 8035202:	e7e9      	b.n	80351d8 <__submore+0x48>

08035204 <__ascii_wctomb>:
 8035204:	4603      	mov	r3, r0
 8035206:	4608      	mov	r0, r1
 8035208:	b141      	cbz	r1, 803521c <__ascii_wctomb+0x18>
 803520a:	2aff      	cmp	r2, #255	@ 0xff
 803520c:	d904      	bls.n	8035218 <__ascii_wctomb+0x14>
 803520e:	228a      	movs	r2, #138	@ 0x8a
 8035210:	601a      	str	r2, [r3, #0]
 8035212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035216:	4770      	bx	lr
 8035218:	700a      	strb	r2, [r1, #0]
 803521a:	2001      	movs	r0, #1
 803521c:	4770      	bx	lr

0803521e <__swbuf_r>:
 803521e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035220:	460e      	mov	r6, r1
 8035222:	4614      	mov	r4, r2
 8035224:	4605      	mov	r5, r0
 8035226:	b118      	cbz	r0, 8035230 <__swbuf_r+0x12>
 8035228:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 803522a:	b90b      	cbnz	r3, 8035230 <__swbuf_r+0x12>
 803522c:	f7f7 fa7a 	bl	802c724 <__sinit>
 8035230:	69a3      	ldr	r3, [r4, #24]
 8035232:	60a3      	str	r3, [r4, #8]
 8035234:	89a3      	ldrh	r3, [r4, #12]
 8035236:	0719      	lsls	r1, r3, #28
 8035238:	d501      	bpl.n	803523e <__swbuf_r+0x20>
 803523a:	6923      	ldr	r3, [r4, #16]
 803523c:	b943      	cbnz	r3, 8035250 <__swbuf_r+0x32>
 803523e:	4621      	mov	r1, r4
 8035240:	4628      	mov	r0, r5
 8035242:	f7f7 fc2b 	bl	802ca9c <__swsetup_r>
 8035246:	b118      	cbz	r0, 8035250 <__swbuf_r+0x32>
 8035248:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 803524c:	4638      	mov	r0, r7
 803524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8035250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8035254:	b2f6      	uxtb	r6, r6
 8035256:	049a      	lsls	r2, r3, #18
 8035258:	4637      	mov	r7, r6
 803525a:	d406      	bmi.n	803526a <__swbuf_r+0x4c>
 803525c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8035260:	81a3      	strh	r3, [r4, #12]
 8035262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8035264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8035268:	6663      	str	r3, [r4, #100]	@ 0x64
 803526a:	6823      	ldr	r3, [r4, #0]
 803526c:	6922      	ldr	r2, [r4, #16]
 803526e:	1a98      	subs	r0, r3, r2
 8035270:	6963      	ldr	r3, [r4, #20]
 8035272:	4283      	cmp	r3, r0
 8035274:	dc05      	bgt.n	8035282 <__swbuf_r+0x64>
 8035276:	4621      	mov	r1, r4
 8035278:	4628      	mov	r0, r5
 803527a:	f7f7 f911 	bl	802c4a0 <_fflush_r>
 803527e:	2800      	cmp	r0, #0
 8035280:	d1e2      	bne.n	8035248 <__swbuf_r+0x2a>
 8035282:	68a3      	ldr	r3, [r4, #8]
 8035284:	3b01      	subs	r3, #1
 8035286:	60a3      	str	r3, [r4, #8]
 8035288:	6823      	ldr	r3, [r4, #0]
 803528a:	1c5a      	adds	r2, r3, #1
 803528c:	6022      	str	r2, [r4, #0]
 803528e:	701e      	strb	r6, [r3, #0]
 8035290:	6962      	ldr	r2, [r4, #20]
 8035292:	1c43      	adds	r3, r0, #1
 8035294:	429a      	cmp	r2, r3
 8035296:	d004      	beq.n	80352a2 <__swbuf_r+0x84>
 8035298:	89a3      	ldrh	r3, [r4, #12]
 803529a:	07db      	lsls	r3, r3, #31
 803529c:	d5d6      	bpl.n	803524c <__swbuf_r+0x2e>
 803529e:	2e0a      	cmp	r6, #10
 80352a0:	d1d4      	bne.n	803524c <__swbuf_r+0x2e>
 80352a2:	4621      	mov	r1, r4
 80352a4:	4628      	mov	r0, r5
 80352a6:	f7f7 f8fb 	bl	802c4a0 <_fflush_r>
 80352aa:	2800      	cmp	r0, #0
 80352ac:	d0ce      	beq.n	803524c <__swbuf_r+0x2e>
 80352ae:	e7cb      	b.n	8035248 <__swbuf_r+0x2a>

080352b0 <_raise_r>:
 80352b0:	291f      	cmp	r1, #31
 80352b2:	b538      	push	{r3, r4, r5, lr}
 80352b4:	4605      	mov	r5, r0
 80352b6:	460c      	mov	r4, r1
 80352b8:	d904      	bls.n	80352c4 <_raise_r+0x14>
 80352ba:	2316      	movs	r3, #22
 80352bc:	6003      	str	r3, [r0, #0]
 80352be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80352c2:	bd38      	pop	{r3, r4, r5, pc}
 80352c4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80352c8:	b112      	cbz	r2, 80352d0 <_raise_r+0x20>
 80352ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80352ce:	b94b      	cbnz	r3, 80352e4 <_raise_r+0x34>
 80352d0:	4628      	mov	r0, r5
 80352d2:	f000 f8fd 	bl	80354d0 <_getpid_r>
 80352d6:	4622      	mov	r2, r4
 80352d8:	4601      	mov	r1, r0
 80352da:	4628      	mov	r0, r5
 80352dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80352e0:	f000 b8e4 	b.w	80354ac <_kill_r>
 80352e4:	2b01      	cmp	r3, #1
 80352e6:	d00a      	beq.n	80352fe <_raise_r+0x4e>
 80352e8:	1c59      	adds	r1, r3, #1
 80352ea:	d103      	bne.n	80352f4 <_raise_r+0x44>
 80352ec:	2316      	movs	r3, #22
 80352ee:	6003      	str	r3, [r0, #0]
 80352f0:	2001      	movs	r0, #1
 80352f2:	e7e6      	b.n	80352c2 <_raise_r+0x12>
 80352f4:	2100      	movs	r1, #0
 80352f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80352fa:	4620      	mov	r0, r4
 80352fc:	4798      	blx	r3
 80352fe:	2000      	movs	r0, #0
 8035300:	e7df      	b.n	80352c2 <_raise_r+0x12>
	...

08035304 <raise>:
 8035304:	4b02      	ldr	r3, [pc, #8]	@ (8035310 <raise+0xc>)
 8035306:	4601      	mov	r1, r0
 8035308:	6818      	ldr	r0, [r3, #0]
 803530a:	f7ff bfd1 	b.w	80352b0 <_raise_r>
 803530e:	bf00      	nop
 8035310:	200002d8 	.word	0x200002d8

08035314 <__gettzinfo>:
 8035314:	4800      	ldr	r0, [pc, #0]	@ (8035318 <__gettzinfo+0x4>)
 8035316:	4770      	bx	lr
 8035318:	20000818 	.word	0x20000818

0803531c <gmtime_r>:
 803531c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035320:	4a4d      	ldr	r2, [pc, #308]	@ (8035458 <gmtime_r+0x13c>)
 8035322:	460c      	mov	r4, r1
 8035324:	2300      	movs	r3, #0
 8035326:	e9d0 0100 	ldrd	r0, r1, [r0]
 803532a:	f7db fcc5 	bl	8010cb8 <__aeabi_ldivmod>
 803532e:	2a00      	cmp	r2, #0
 8035330:	bfbc      	itt	lt
 8035332:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8035336:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 803533a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 803533e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8035342:	fbb2 f3f1 	udiv	r3, r2, r1
 8035346:	fb01 2213 	mls	r2, r1, r3, r2
 803534a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 803534e:	bfac      	ite	ge
 8035350:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8035354:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8035358:	60a3      	str	r3, [r4, #8]
 803535a:	fbb2 f3f1 	udiv	r3, r2, r1
 803535e:	fb01 2213 	mls	r2, r1, r3, r2
 8035362:	6063      	str	r3, [r4, #4]
 8035364:	6022      	str	r2, [r4, #0]
 8035366:	1cc3      	adds	r3, r0, #3
 8035368:	2207      	movs	r2, #7
 803536a:	fb93 f2f2 	sdiv	r2, r3, r2
 803536e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8035372:	1a9b      	subs	r3, r3, r2
 8035374:	bf48      	it	mi
 8035376:	3307      	addmi	r3, #7
 8035378:	2800      	cmp	r0, #0
 803537a:	61a3      	str	r3, [r4, #24]
 803537c:	bfb8      	it	lt
 803537e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8035382:	4936      	ldr	r1, [pc, #216]	@ (803545c <gmtime_r+0x140>)
 8035384:	bfae      	itee	ge
 8035386:	fb90 f1f1 	sdivge	r1, r0, r1
 803538a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803538e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8035392:	4b33      	ldr	r3, [pc, #204]	@ (8035460 <gmtime_r+0x144>)
 8035394:	fb03 0001 	mla	r0, r3, r1, r0
 8035398:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803539c:	fbb0 f3f3 	udiv	r3, r0, r3
 80353a0:	4403      	add	r3, r0
 80353a2:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80353a6:	fbb0 f2fc 	udiv	r2, r0, ip
 80353aa:	1a9b      	subs	r3, r3, r2
 80353ac:	f240 176d 	movw	r7, #365	@ 0x16d
 80353b0:	4a2c      	ldr	r2, [pc, #176]	@ (8035464 <gmtime_r+0x148>)
 80353b2:	fbb0 f2f2 	udiv	r2, r0, r2
 80353b6:	2664      	movs	r6, #100	@ 0x64
 80353b8:	1a9b      	subs	r3, r3, r2
 80353ba:	fbb3 f2f7 	udiv	r2, r3, r7
 80353be:	fbb3 f3fc 	udiv	r3, r3, ip
 80353c2:	fbb2 f5f6 	udiv	r5, r2, r6
 80353c6:	1aeb      	subs	r3, r5, r3
 80353c8:	4403      	add	r3, r0
 80353ca:	fb07 3312 	mls	r3, r7, r2, r3
 80353ce:	2099      	movs	r0, #153	@ 0x99
 80353d0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80353d4:	3702      	adds	r7, #2
 80353d6:	f103 0e01 	add.w	lr, r3, #1
 80353da:	fbb7 fcf0 	udiv	ip, r7, r0
 80353de:	fb00 f00c 	mul.w	r0, r0, ip
 80353e2:	3002      	adds	r0, #2
 80353e4:	f04f 0805 	mov.w	r8, #5
 80353e8:	fbb0 f0f8 	udiv	r0, r0, r8
 80353ec:	ebae 0000 	sub.w	r0, lr, r0
 80353f0:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 80353f4:	4577      	cmp	r7, lr
 80353f6:	bf8c      	ite	hi
 80353f8:	f06f 0709 	mvnhi.w	r7, #9
 80353fc:	2702      	movls	r7, #2
 80353fe:	4467      	add	r7, ip
 8035400:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8035404:	fb0c 2101 	mla	r1, ip, r1, r2
 8035408:	2f01      	cmp	r7, #1
 803540a:	bf98      	it	ls
 803540c:	3101      	addls	r1, #1
 803540e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8035412:	d30c      	bcc.n	803542e <gmtime_r+0x112>
 8035414:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8035418:	61e3      	str	r3, [r4, #28]
 803541a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803541e:	2300      	movs	r3, #0
 8035420:	60e0      	str	r0, [r4, #12]
 8035422:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8035426:	6223      	str	r3, [r4, #32]
 8035428:	4620      	mov	r0, r4
 803542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803542e:	f012 0f03 	tst.w	r2, #3
 8035432:	d102      	bne.n	803543a <gmtime_r+0x11e>
 8035434:	fb06 2515 	mls	r5, r6, r5, r2
 8035438:	b95d      	cbnz	r5, 8035452 <gmtime_r+0x136>
 803543a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803543e:	fbb2 f6f5 	udiv	r6, r2, r5
 8035442:	fb05 2216 	mls	r2, r5, r6, r2
 8035446:	fab2 f282 	clz	r2, r2
 803544a:	0952      	lsrs	r2, r2, #5
 803544c:	333b      	adds	r3, #59	@ 0x3b
 803544e:	4413      	add	r3, r2
 8035450:	e7e2      	b.n	8035418 <gmtime_r+0xfc>
 8035452:	2201      	movs	r2, #1
 8035454:	e7fa      	b.n	803544c <gmtime_r+0x130>
 8035456:	bf00      	nop
 8035458:	00015180 	.word	0x00015180
 803545c:	00023ab1 	.word	0x00023ab1
 8035460:	fffdc54f 	.word	0xfffdc54f
 8035464:	00023ab0 	.word	0x00023ab0

08035468 <_fstat_r>:
 8035468:	b538      	push	{r3, r4, r5, lr}
 803546a:	4d07      	ldr	r5, [pc, #28]	@ (8035488 <_fstat_r+0x20>)
 803546c:	2300      	movs	r3, #0
 803546e:	4604      	mov	r4, r0
 8035470:	4608      	mov	r0, r1
 8035472:	4611      	mov	r1, r2
 8035474:	602b      	str	r3, [r5, #0]
 8035476:	f7dd f8b4 	bl	80125e2 <_fstat>
 803547a:	1c43      	adds	r3, r0, #1
 803547c:	d102      	bne.n	8035484 <_fstat_r+0x1c>
 803547e:	682b      	ldr	r3, [r5, #0]
 8035480:	b103      	cbz	r3, 8035484 <_fstat_r+0x1c>
 8035482:	6023      	str	r3, [r4, #0]
 8035484:	bd38      	pop	{r3, r4, r5, pc}
 8035486:	bf00      	nop
 8035488:	2001a08c 	.word	0x2001a08c

0803548c <_isatty_r>:
 803548c:	b538      	push	{r3, r4, r5, lr}
 803548e:	4d06      	ldr	r5, [pc, #24]	@ (80354a8 <_isatty_r+0x1c>)
 8035490:	2300      	movs	r3, #0
 8035492:	4604      	mov	r4, r0
 8035494:	4608      	mov	r0, r1
 8035496:	602b      	str	r3, [r5, #0]
 8035498:	f7dd f8a8 	bl	80125ec <_isatty>
 803549c:	1c43      	adds	r3, r0, #1
 803549e:	d102      	bne.n	80354a6 <_isatty_r+0x1a>
 80354a0:	682b      	ldr	r3, [r5, #0]
 80354a2:	b103      	cbz	r3, 80354a6 <_isatty_r+0x1a>
 80354a4:	6023      	str	r3, [r4, #0]
 80354a6:	bd38      	pop	{r3, r4, r5, pc}
 80354a8:	2001a08c 	.word	0x2001a08c

080354ac <_kill_r>:
 80354ac:	b538      	push	{r3, r4, r5, lr}
 80354ae:	4d07      	ldr	r5, [pc, #28]	@ (80354cc <_kill_r+0x20>)
 80354b0:	2300      	movs	r3, #0
 80354b2:	4604      	mov	r4, r0
 80354b4:	4608      	mov	r0, r1
 80354b6:	4611      	mov	r1, r2
 80354b8:	602b      	str	r3, [r5, #0]
 80354ba:	f7dd f863 	bl	8012584 <_kill>
 80354be:	1c43      	adds	r3, r0, #1
 80354c0:	d102      	bne.n	80354c8 <_kill_r+0x1c>
 80354c2:	682b      	ldr	r3, [r5, #0]
 80354c4:	b103      	cbz	r3, 80354c8 <_kill_r+0x1c>
 80354c6:	6023      	str	r3, [r4, #0]
 80354c8:	bd38      	pop	{r3, r4, r5, pc}
 80354ca:	bf00      	nop
 80354cc:	2001a08c 	.word	0x2001a08c

080354d0 <_getpid_r>:
 80354d0:	f7dd b856 	b.w	8012580 <_getpid>

080354d4 <_sbrk_r>:
 80354d4:	b538      	push	{r3, r4, r5, lr}
 80354d6:	4d06      	ldr	r5, [pc, #24]	@ (80354f0 <_sbrk_r+0x1c>)
 80354d8:	2300      	movs	r3, #0
 80354da:	4604      	mov	r4, r0
 80354dc:	4608      	mov	r0, r1
 80354de:	602b      	str	r3, [r5, #0]
 80354e0:	f7dd f888 	bl	80125f4 <_sbrk>
 80354e4:	1c43      	adds	r3, r0, #1
 80354e6:	d102      	bne.n	80354ee <_sbrk_r+0x1a>
 80354e8:	682b      	ldr	r3, [r5, #0]
 80354ea:	b103      	cbz	r3, 80354ee <_sbrk_r+0x1a>
 80354ec:	6023      	str	r3, [r4, #0]
 80354ee:	bd38      	pop	{r3, r4, r5, pc}
 80354f0:	2001a08c 	.word	0x2001a08c

080354f4 <sysconf>:
 80354f4:	2808      	cmp	r0, #8
 80354f6:	b508      	push	{r3, lr}
 80354f8:	d006      	beq.n	8035508 <sysconf+0x14>
 80354fa:	f7f8 fdbd 	bl	802e078 <__errno>
 80354fe:	2316      	movs	r3, #22
 8035500:	6003      	str	r3, [r0, #0]
 8035502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035506:	bd08      	pop	{r3, pc}
 8035508:	2080      	movs	r0, #128	@ 0x80
 803550a:	e7fc      	b.n	8035506 <sysconf+0x12>

0803550c <_strtoll_l.constprop.0>:
 803550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035510:	b085      	sub	sp, #20
 8035512:	4690      	mov	r8, r2
 8035514:	4a43      	ldr	r2, [pc, #268]	@ (8035624 <_strtoll_l.constprop.0+0x118>)
 8035516:	9002      	str	r0, [sp, #8]
 8035518:	4689      	mov	r9, r1
 803551a:	461e      	mov	r6, r3
 803551c:	460d      	mov	r5, r1
 803551e:	462b      	mov	r3, r5
 8035520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035524:	5d17      	ldrb	r7, [r2, r4]
 8035526:	f017 0708 	ands.w	r7, r7, #8
 803552a:	d1f8      	bne.n	803551e <_strtoll_l.constprop.0+0x12>
 803552c:	2c2d      	cmp	r4, #45	@ 0x2d
 803552e:	d149      	bne.n	80355c4 <_strtoll_l.constprop.0+0xb8>
 8035530:	782c      	ldrb	r4, [r5, #0]
 8035532:	2701      	movs	r7, #1
 8035534:	1c9d      	adds	r5, r3, #2
 8035536:	f036 0310 	bics.w	r3, r6, #16
 803553a:	d109      	bne.n	8035550 <_strtoll_l.constprop.0+0x44>
 803553c:	2c30      	cmp	r4, #48	@ 0x30
 803553e:	d146      	bne.n	80355ce <_strtoll_l.constprop.0+0xc2>
 8035540:	782b      	ldrb	r3, [r5, #0]
 8035542:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035546:	2b58      	cmp	r3, #88	@ 0x58
 8035548:	d141      	bne.n	80355ce <_strtoll_l.constprop.0+0xc2>
 803554a:	786c      	ldrb	r4, [r5, #1]
 803554c:	2610      	movs	r6, #16
 803554e:	3502      	adds	r5, #2
 8035550:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8035554:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 8035558:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 803555c:	17f3      	asrs	r3, r6, #31
 803555e:	4632      	mov	r2, r6
 8035560:	4658      	mov	r0, fp
 8035562:	4651      	mov	r1, sl
 8035564:	9303      	str	r3, [sp, #12]
 8035566:	f7db fbf7 	bl	8010d58 <__aeabi_uldivmod>
 803556a:	9201      	str	r2, [sp, #4]
 803556c:	2200      	movs	r2, #0
 803556e:	468e      	mov	lr, r1
 8035570:	4684      	mov	ip, r0
 8035572:	4611      	mov	r1, r2
 8035574:	4610      	mov	r0, r2
 8035576:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803557a:	2b09      	cmp	r3, #9
 803557c:	d905      	bls.n	803558a <_strtoll_l.constprop.0+0x7e>
 803557e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8035582:	2b19      	cmp	r3, #25
 8035584:	d82a      	bhi.n	80355dc <_strtoll_l.constprop.0+0xd0>
 8035586:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803558a:	429e      	cmp	r6, r3
 803558c:	dd30      	ble.n	80355f0 <_strtoll_l.constprop.0+0xe4>
 803558e:	1c54      	adds	r4, r2, #1
 8035590:	d015      	beq.n	80355be <_strtoll_l.constprop.0+0xb2>
 8035592:	4584      	cmp	ip, r0
 8035594:	eb7e 0201 	sbcs.w	r2, lr, r1
 8035598:	d327      	bcc.n	80355ea <_strtoll_l.constprop.0+0xde>
 803559a:	458e      	cmp	lr, r1
 803559c:	bf08      	it	eq
 803559e:	4584      	cmpeq	ip, r0
 80355a0:	d102      	bne.n	80355a8 <_strtoll_l.constprop.0+0x9c>
 80355a2:	9a01      	ldr	r2, [sp, #4]
 80355a4:	429a      	cmp	r2, r3
 80355a6:	db20      	blt.n	80355ea <_strtoll_l.constprop.0+0xde>
 80355a8:	9a03      	ldr	r2, [sp, #12]
 80355aa:	4371      	muls	r1, r6
 80355ac:	fb00 1102 	mla	r1, r0, r2, r1
 80355b0:	fba6 0200 	umull	r0, r2, r6, r0
 80355b4:	440a      	add	r2, r1
 80355b6:	1818      	adds	r0, r3, r0
 80355b8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 80355bc:	2201      	movs	r2, #1
 80355be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80355c2:	e7d8      	b.n	8035576 <_strtoll_l.constprop.0+0x6a>
 80355c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80355c6:	bf04      	itt	eq
 80355c8:	782c      	ldrbeq	r4, [r5, #0]
 80355ca:	1c9d      	addeq	r5, r3, #2
 80355cc:	e7b3      	b.n	8035536 <_strtoll_l.constprop.0+0x2a>
 80355ce:	2e00      	cmp	r6, #0
 80355d0:	d1be      	bne.n	8035550 <_strtoll_l.constprop.0+0x44>
 80355d2:	2c30      	cmp	r4, #48	@ 0x30
 80355d4:	bf0c      	ite	eq
 80355d6:	2608      	moveq	r6, #8
 80355d8:	260a      	movne	r6, #10
 80355da:	e7b9      	b.n	8035550 <_strtoll_l.constprop.0+0x44>
 80355dc:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80355e0:	2b19      	cmp	r3, #25
 80355e2:	d805      	bhi.n	80355f0 <_strtoll_l.constprop.0+0xe4>
 80355e4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 80355e8:	e7cf      	b.n	803558a <_strtoll_l.constprop.0+0x7e>
 80355ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80355ee:	e7e6      	b.n	80355be <_strtoll_l.constprop.0+0xb2>
 80355f0:	1c53      	adds	r3, r2, #1
 80355f2:	d10a      	bne.n	803560a <_strtoll_l.constprop.0+0xfe>
 80355f4:	9a02      	ldr	r2, [sp, #8]
 80355f6:	2322      	movs	r3, #34	@ 0x22
 80355f8:	6013      	str	r3, [r2, #0]
 80355fa:	4658      	mov	r0, fp
 80355fc:	4651      	mov	r1, sl
 80355fe:	f1b8 0f00 	cmp.w	r8, #0
 8035602:	d10a      	bne.n	803561a <_strtoll_l.constprop.0+0x10e>
 8035604:	b005      	add	sp, #20
 8035606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803560a:	b117      	cbz	r7, 8035612 <_strtoll_l.constprop.0+0x106>
 803560c:	4240      	negs	r0, r0
 803560e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035612:	f1b8 0f00 	cmp.w	r8, #0
 8035616:	d0f5      	beq.n	8035604 <_strtoll_l.constprop.0+0xf8>
 8035618:	b10a      	cbz	r2, 803561e <_strtoll_l.constprop.0+0x112>
 803561a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803561e:	f8c8 9000 	str.w	r9, [r8]
 8035622:	e7ef      	b.n	8035604 <_strtoll_l.constprop.0+0xf8>
 8035624:	0803c3f9 	.word	0x0803c3f9

08035628 <_strtoll_r>:
 8035628:	f7ff bf70 	b.w	803550c <_strtoll_l.constprop.0>

0803562c <__libc_fini_array>:
 803562c:	b538      	push	{r3, r4, r5, lr}
 803562e:	4d07      	ldr	r5, [pc, #28]	@ (803564c <__libc_fini_array+0x20>)
 8035630:	4c07      	ldr	r4, [pc, #28]	@ (8035650 <__libc_fini_array+0x24>)
 8035632:	1b64      	subs	r4, r4, r5
 8035634:	10a4      	asrs	r4, r4, #2
 8035636:	b91c      	cbnz	r4, 8035640 <__libc_fini_array+0x14>
 8035638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803563c:	f000 bc9c 	b.w	8035f78 <_fini>
 8035640:	3c01      	subs	r4, #1
 8035642:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8035646:	4798      	blx	r3
 8035648:	e7f5      	b.n	8035636 <__libc_fini_array+0xa>
 803564a:	bf00      	nop
 803564c:	0803c810 	.word	0x0803c810
 8035650:	0803c814 	.word	0x0803c814

08035654 <_strtoull_l.constprop.0>:
 8035654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035658:	4691      	mov	r9, r2
 803565a:	4a48      	ldr	r2, [pc, #288]	@ (803577c <_strtoull_l.constprop.0+0x128>)
 803565c:	9001      	str	r0, [sp, #4]
 803565e:	468a      	mov	sl, r1
 8035660:	461e      	mov	r6, r3
 8035662:	460d      	mov	r5, r1
 8035664:	462b      	mov	r3, r5
 8035666:	f815 4b01 	ldrb.w	r4, [r5], #1
 803566a:	5d17      	ldrb	r7, [r2, r4]
 803566c:	f017 0708 	ands.w	r7, r7, #8
 8035670:	d1f8      	bne.n	8035664 <_strtoull_l.constprop.0+0x10>
 8035672:	2c2d      	cmp	r4, #45	@ 0x2d
 8035674:	d14a      	bne.n	803570c <_strtoull_l.constprop.0+0xb8>
 8035676:	782c      	ldrb	r4, [r5, #0]
 8035678:	2701      	movs	r7, #1
 803567a:	1c9d      	adds	r5, r3, #2
 803567c:	f036 0310 	bics.w	r3, r6, #16
 8035680:	d109      	bne.n	8035696 <_strtoull_l.constprop.0+0x42>
 8035682:	2c30      	cmp	r4, #48	@ 0x30
 8035684:	d147      	bne.n	8035716 <_strtoull_l.constprop.0+0xc2>
 8035686:	782b      	ldrb	r3, [r5, #0]
 8035688:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803568c:	2b58      	cmp	r3, #88	@ 0x58
 803568e:	d142      	bne.n	8035716 <_strtoull_l.constprop.0+0xc2>
 8035690:	786c      	ldrb	r4, [r5, #1]
 8035692:	2610      	movs	r6, #16
 8035694:	3502      	adds	r5, #2
 8035696:	ea4f 7be6 	mov.w	fp, r6, asr #31
 803569a:	4632      	mov	r2, r6
 803569c:	465b      	mov	r3, fp
 803569e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80356a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80356a6:	f7db fb57 	bl	8010d58 <__aeabi_uldivmod>
 80356aa:	4632      	mov	r2, r6
 80356ac:	9000      	str	r0, [sp, #0]
 80356ae:	4688      	mov	r8, r1
 80356b0:	465b      	mov	r3, fp
 80356b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80356b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80356ba:	f7db fb4d 	bl	8010d58 <__aeabi_uldivmod>
 80356be:	2300      	movs	r3, #0
 80356c0:	4618      	mov	r0, r3
 80356c2:	4619      	mov	r1, r3
 80356c4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80356c8:	f1bc 0f09 	cmp.w	ip, #9
 80356cc:	d82a      	bhi.n	8035724 <_strtoull_l.constprop.0+0xd0>
 80356ce:	4664      	mov	r4, ip
 80356d0:	42a6      	cmp	r6, r4
 80356d2:	dd38      	ble.n	8035746 <_strtoull_l.constprop.0+0xf2>
 80356d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80356d8:	d015      	beq.n	8035706 <_strtoull_l.constprop.0+0xb2>
 80356da:	9b00      	ldr	r3, [sp, #0]
 80356dc:	4283      	cmp	r3, r0
 80356de:	eb78 0301 	sbcs.w	r3, r8, r1
 80356e2:	d32d      	bcc.n	8035740 <_strtoull_l.constprop.0+0xec>
 80356e4:	9b00      	ldr	r3, [sp, #0]
 80356e6:	4588      	cmp	r8, r1
 80356e8:	bf08      	it	eq
 80356ea:	4283      	cmpeq	r3, r0
 80356ec:	d101      	bne.n	80356f2 <_strtoull_l.constprop.0+0x9e>
 80356ee:	42a2      	cmp	r2, r4
 80356f0:	db26      	blt.n	8035740 <_strtoull_l.constprop.0+0xec>
 80356f2:	4371      	muls	r1, r6
 80356f4:	fb00 110b 	mla	r1, r0, fp, r1
 80356f8:	fba6 0300 	umull	r0, r3, r6, r0
 80356fc:	4419      	add	r1, r3
 80356fe:	1820      	adds	r0, r4, r0
 8035700:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035704:	2301      	movs	r3, #1
 8035706:	f815 4b01 	ldrb.w	r4, [r5], #1
 803570a:	e7db      	b.n	80356c4 <_strtoull_l.constprop.0+0x70>
 803570c:	2c2b      	cmp	r4, #43	@ 0x2b
 803570e:	bf04      	itt	eq
 8035710:	782c      	ldrbeq	r4, [r5, #0]
 8035712:	1c9d      	addeq	r5, r3, #2
 8035714:	e7b2      	b.n	803567c <_strtoull_l.constprop.0+0x28>
 8035716:	2e00      	cmp	r6, #0
 8035718:	d1bd      	bne.n	8035696 <_strtoull_l.constprop.0+0x42>
 803571a:	2c30      	cmp	r4, #48	@ 0x30
 803571c:	bf0c      	ite	eq
 803571e:	2608      	moveq	r6, #8
 8035720:	260a      	movne	r6, #10
 8035722:	e7b8      	b.n	8035696 <_strtoull_l.constprop.0+0x42>
 8035724:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035728:	f1bc 0f19 	cmp.w	ip, #25
 803572c:	d801      	bhi.n	8035732 <_strtoull_l.constprop.0+0xde>
 803572e:	3c37      	subs	r4, #55	@ 0x37
 8035730:	e7ce      	b.n	80356d0 <_strtoull_l.constprop.0+0x7c>
 8035732:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035736:	f1bc 0f19 	cmp.w	ip, #25
 803573a:	d804      	bhi.n	8035746 <_strtoull_l.constprop.0+0xf2>
 803573c:	3c57      	subs	r4, #87	@ 0x57
 803573e:	e7c7      	b.n	80356d0 <_strtoull_l.constprop.0+0x7c>
 8035740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8035744:	e7df      	b.n	8035706 <_strtoull_l.constprop.0+0xb2>
 8035746:	1c5a      	adds	r2, r3, #1
 8035748:	d10a      	bne.n	8035760 <_strtoull_l.constprop.0+0x10c>
 803574a:	9901      	ldr	r1, [sp, #4]
 803574c:	2222      	movs	r2, #34	@ 0x22
 803574e:	600a      	str	r2, [r1, #0]
 8035750:	4618      	mov	r0, r3
 8035752:	4619      	mov	r1, r3
 8035754:	f1b9 0f00 	cmp.w	r9, #0
 8035758:	d10a      	bne.n	8035770 <_strtoull_l.constprop.0+0x11c>
 803575a:	b003      	add	sp, #12
 803575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035760:	b117      	cbz	r7, 8035768 <_strtoull_l.constprop.0+0x114>
 8035762:	4240      	negs	r0, r0
 8035764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035768:	f1b9 0f00 	cmp.w	r9, #0
 803576c:	d0f5      	beq.n	803575a <_strtoull_l.constprop.0+0x106>
 803576e:	b10b      	cbz	r3, 8035774 <_strtoull_l.constprop.0+0x120>
 8035770:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8035774:	f8c9 a000 	str.w	sl, [r9]
 8035778:	e7ef      	b.n	803575a <_strtoull_l.constprop.0+0x106>
 803577a:	bf00      	nop
 803577c:	0803c3f9 	.word	0x0803c3f9

08035780 <_strtoull_r>:
 8035780:	f7ff bf68 	b.w	8035654 <_strtoull_l.constprop.0>

08035784 <_mbrtowc_r>:
 8035784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8035786:	4c0a      	ldr	r4, [pc, #40]	@ (80357b0 <_mbrtowc_r+0x2c>)
 8035788:	9e08      	ldr	r6, [sp, #32]
 803578a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 803578e:	9600      	str	r6, [sp, #0]
 8035790:	4605      	mov	r5, r0
 8035792:	4614      	mov	r4, r2
 8035794:	b912      	cbnz	r2, 803579c <_mbrtowc_r+0x18>
 8035796:	4a07      	ldr	r2, [pc, #28]	@ (80357b4 <_mbrtowc_r+0x30>)
 8035798:	2301      	movs	r3, #1
 803579a:	4621      	mov	r1, r4
 803579c:	47b8      	blx	r7
 803579e:	1c43      	adds	r3, r0, #1
 80357a0:	bf01      	itttt	eq
 80357a2:	2300      	moveq	r3, #0
 80357a4:	6033      	streq	r3, [r6, #0]
 80357a6:	238a      	moveq	r3, #138	@ 0x8a
 80357a8:	602b      	streq	r3, [r5, #0]
 80357aa:	b003      	add	sp, #12
 80357ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80357ae:	bf00      	nop
 80357b0:	2000016c 	.word	0x2000016c
 80357b4:	0803c03a 	.word	0x0803c03a

080357b8 <iswspace>:
 80357b8:	2100      	movs	r1, #0
 80357ba:	f000 b801 	b.w	80357c0 <iswspace_l>
	...

080357c0 <iswspace_l>:
 80357c0:	28ff      	cmp	r0, #255	@ 0xff
 80357c2:	bf9d      	ittte	ls
 80357c4:	4b02      	ldrls	r3, [pc, #8]	@ (80357d0 <iswspace_l+0x10>)
 80357c6:	5c18      	ldrbls	r0, [r3, r0]
 80357c8:	f000 0008 	andls.w	r0, r0, #8
 80357cc:	2000      	movhi	r0, #0
 80357ce:	4770      	bx	lr
 80357d0:	0803c3f9 	.word	0x0803c3f9

080357d4 <__register_exitproc>:
 80357d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80357d8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8035850 <__register_exitproc+0x7c>
 80357dc:	4606      	mov	r6, r0
 80357de:	f8da 0000 	ldr.w	r0, [sl]
 80357e2:	4698      	mov	r8, r3
 80357e4:	460f      	mov	r7, r1
 80357e6:	4691      	mov	r9, r2
 80357e8:	f7f8 fc7b 	bl	802e0e2 <__retarget_lock_acquire_recursive>
 80357ec:	4b16      	ldr	r3, [pc, #88]	@ (8035848 <__register_exitproc+0x74>)
 80357ee:	681c      	ldr	r4, [r3, #0]
 80357f0:	b90c      	cbnz	r4, 80357f6 <__register_exitproc+0x22>
 80357f2:	4c16      	ldr	r4, [pc, #88]	@ (803584c <__register_exitproc+0x78>)
 80357f4:	601c      	str	r4, [r3, #0]
 80357f6:	6865      	ldr	r5, [r4, #4]
 80357f8:	f8da 0000 	ldr.w	r0, [sl]
 80357fc:	2d1f      	cmp	r5, #31
 80357fe:	dd05      	ble.n	803580c <__register_exitproc+0x38>
 8035800:	f7f8 fc71 	bl	802e0e6 <__retarget_lock_release_recursive>
 8035804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803580c:	b19e      	cbz	r6, 8035836 <__register_exitproc+0x62>
 803580e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035812:	2201      	movs	r2, #1
 8035814:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035818:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803581c:	40aa      	lsls	r2, r5
 803581e:	4313      	orrs	r3, r2
 8035820:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035824:	2e02      	cmp	r6, #2
 8035826:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803582a:	bf02      	ittt	eq
 803582c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8035830:	4313      	orreq	r3, r2
 8035832:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8035836:	1c6b      	adds	r3, r5, #1
 8035838:	3502      	adds	r5, #2
 803583a:	6063      	str	r3, [r4, #4]
 803583c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8035840:	f7f8 fc51 	bl	802e0e6 <__retarget_lock_release_recursive>
 8035844:	2000      	movs	r0, #0
 8035846:	e7df      	b.n	8035808 <__register_exitproc+0x34>
 8035848:	2001a098 	.word	0x2001a098
 803584c:	2001a0d0 	.word	0x2001a0d0
 8035850:	20000400 	.word	0x20000400
 8035854:	00000000 	.word	0x00000000

08035858 <nan>:
 8035858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8035860 <nan+0x8>
 803585c:	4770      	bx	lr
 803585e:	bf00      	nop
 8035860:	00000000 	.word	0x00000000
 8035864:	7ff80000 	.word	0x7ff80000

08035868 <nanf>:
 8035868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035870 <nanf+0x8>
 803586c:	4770      	bx	lr
 803586e:	bf00      	nop
 8035870:	7fc00000 	.word	0x7fc00000

08035874 <_calloc_r>:
 8035874:	b538      	push	{r3, r4, r5, lr}
 8035876:	fba1 1502 	umull	r1, r5, r1, r2
 803587a:	b935      	cbnz	r5, 803588a <_calloc_r+0x16>
 803587c:	f7f9 fc4e 	bl	802f11c <_malloc_r>
 8035880:	4604      	mov	r4, r0
 8035882:	b938      	cbnz	r0, 8035894 <_calloc_r+0x20>
 8035884:	2400      	movs	r4, #0
 8035886:	4620      	mov	r0, r4
 8035888:	bd38      	pop	{r3, r4, r5, pc}
 803588a:	f7f8 fbf5 	bl	802e078 <__errno>
 803588e:	230c      	movs	r3, #12
 8035890:	6003      	str	r3, [r0, #0]
 8035892:	e7f7      	b.n	8035884 <_calloc_r+0x10>
 8035894:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8035898:	f022 0203 	bic.w	r2, r2, #3
 803589c:	3a04      	subs	r2, #4
 803589e:	2a24      	cmp	r2, #36	@ 0x24
 80358a0:	d819      	bhi.n	80358d6 <_calloc_r+0x62>
 80358a2:	2a13      	cmp	r2, #19
 80358a4:	d915      	bls.n	80358d2 <_calloc_r+0x5e>
 80358a6:	2a1b      	cmp	r2, #27
 80358a8:	e9c0 5500 	strd	r5, r5, [r0]
 80358ac:	d806      	bhi.n	80358bc <_calloc_r+0x48>
 80358ae:	f100 0308 	add.w	r3, r0, #8
 80358b2:	2200      	movs	r2, #0
 80358b4:	e9c3 2200 	strd	r2, r2, [r3]
 80358b8:	609a      	str	r2, [r3, #8]
 80358ba:	e7e4      	b.n	8035886 <_calloc_r+0x12>
 80358bc:	2a24      	cmp	r2, #36	@ 0x24
 80358be:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80358c2:	bf11      	iteee	ne
 80358c4:	f100 0310 	addne.w	r3, r0, #16
 80358c8:	6105      	streq	r5, [r0, #16]
 80358ca:	f100 0318 	addeq.w	r3, r0, #24
 80358ce:	6145      	streq	r5, [r0, #20]
 80358d0:	e7ef      	b.n	80358b2 <_calloc_r+0x3e>
 80358d2:	4603      	mov	r3, r0
 80358d4:	e7ed      	b.n	80358b2 <_calloc_r+0x3e>
 80358d6:	4629      	mov	r1, r5
 80358d8:	f7f7 f9ca 	bl	802cc70 <memset>
 80358dc:	e7d3      	b.n	8035886 <_calloc_r+0x12>
	...

080358e0 <__env_lock>:
 80358e0:	4801      	ldr	r0, [pc, #4]	@ (80358e8 <__env_lock+0x8>)
 80358e2:	f7f8 bbfe 	b.w	802e0e2 <__retarget_lock_acquire_recursive>
 80358e6:	bf00      	nop
 80358e8:	2001a091 	.word	0x2001a091

080358ec <__env_unlock>:
 80358ec:	4801      	ldr	r0, [pc, #4]	@ (80358f4 <__env_unlock+0x8>)
 80358ee:	f7f8 bbfa 	b.w	802e0e6 <__retarget_lock_release_recursive>
 80358f2:	bf00      	nop
 80358f4:	2001a091 	.word	0x2001a091

080358f8 <rshift>:
 80358f8:	6903      	ldr	r3, [r0, #16]
 80358fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80358fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035902:	ea4f 1261 	mov.w	r2, r1, asr #5
 8035906:	f100 0414 	add.w	r4, r0, #20
 803590a:	dd45      	ble.n	8035998 <rshift+0xa0>
 803590c:	f011 011f 	ands.w	r1, r1, #31
 8035910:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8035914:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8035918:	d10c      	bne.n	8035934 <rshift+0x3c>
 803591a:	f100 0710 	add.w	r7, r0, #16
 803591e:	4629      	mov	r1, r5
 8035920:	42b1      	cmp	r1, r6
 8035922:	d334      	bcc.n	803598e <rshift+0x96>
 8035924:	1a9b      	subs	r3, r3, r2
 8035926:	009b      	lsls	r3, r3, #2
 8035928:	1eea      	subs	r2, r5, #3
 803592a:	4296      	cmp	r6, r2
 803592c:	bf38      	it	cc
 803592e:	2300      	movcc	r3, #0
 8035930:	4423      	add	r3, r4
 8035932:	e015      	b.n	8035960 <rshift+0x68>
 8035934:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8035938:	f1c1 0820 	rsb	r8, r1, #32
 803593c:	40cf      	lsrs	r7, r1
 803593e:	f105 0e04 	add.w	lr, r5, #4
 8035942:	46a1      	mov	r9, r4
 8035944:	4576      	cmp	r6, lr
 8035946:	46f4      	mov	ip, lr
 8035948:	d815      	bhi.n	8035976 <rshift+0x7e>
 803594a:	1a9a      	subs	r2, r3, r2
 803594c:	0092      	lsls	r2, r2, #2
 803594e:	3a04      	subs	r2, #4
 8035950:	3501      	adds	r5, #1
 8035952:	42ae      	cmp	r6, r5
 8035954:	bf38      	it	cc
 8035956:	2200      	movcc	r2, #0
 8035958:	18a3      	adds	r3, r4, r2
 803595a:	50a7      	str	r7, [r4, r2]
 803595c:	b107      	cbz	r7, 8035960 <rshift+0x68>
 803595e:	3304      	adds	r3, #4
 8035960:	1b1a      	subs	r2, r3, r4
 8035962:	42a3      	cmp	r3, r4
 8035964:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8035968:	bf08      	it	eq
 803596a:	2300      	moveq	r3, #0
 803596c:	6102      	str	r2, [r0, #16]
 803596e:	bf08      	it	eq
 8035970:	6143      	streq	r3, [r0, #20]
 8035972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035976:	f8dc c000 	ldr.w	ip, [ip]
 803597a:	fa0c fc08 	lsl.w	ip, ip, r8
 803597e:	ea4c 0707 	orr.w	r7, ip, r7
 8035982:	f849 7b04 	str.w	r7, [r9], #4
 8035986:	f85e 7b04 	ldr.w	r7, [lr], #4
 803598a:	40cf      	lsrs	r7, r1
 803598c:	e7da      	b.n	8035944 <rshift+0x4c>
 803598e:	f851 cb04 	ldr.w	ip, [r1], #4
 8035992:	f847 cf04 	str.w	ip, [r7, #4]!
 8035996:	e7c3      	b.n	8035920 <rshift+0x28>
 8035998:	4623      	mov	r3, r4
 803599a:	e7e1      	b.n	8035960 <rshift+0x68>

0803599c <__hexdig_fun>:
 803599c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80359a0:	2b09      	cmp	r3, #9
 80359a2:	d802      	bhi.n	80359aa <__hexdig_fun+0xe>
 80359a4:	3820      	subs	r0, #32
 80359a6:	b2c0      	uxtb	r0, r0
 80359a8:	4770      	bx	lr
 80359aa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80359ae:	2b05      	cmp	r3, #5
 80359b0:	d801      	bhi.n	80359b6 <__hexdig_fun+0x1a>
 80359b2:	3847      	subs	r0, #71	@ 0x47
 80359b4:	e7f7      	b.n	80359a6 <__hexdig_fun+0xa>
 80359b6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80359ba:	2b05      	cmp	r3, #5
 80359bc:	d801      	bhi.n	80359c2 <__hexdig_fun+0x26>
 80359be:	3827      	subs	r0, #39	@ 0x27
 80359c0:	e7f1      	b.n	80359a6 <__hexdig_fun+0xa>
 80359c2:	2000      	movs	r0, #0
 80359c4:	4770      	bx	lr
	...

080359c8 <__gethex>:
 80359c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80359cc:	b085      	sub	sp, #20
 80359ce:	468a      	mov	sl, r1
 80359d0:	9302      	str	r3, [sp, #8]
 80359d2:	680b      	ldr	r3, [r1, #0]
 80359d4:	9001      	str	r0, [sp, #4]
 80359d6:	4690      	mov	r8, r2
 80359d8:	1c9c      	adds	r4, r3, #2
 80359da:	46a1      	mov	r9, r4
 80359dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80359e0:	2830      	cmp	r0, #48	@ 0x30
 80359e2:	d0fa      	beq.n	80359da <__gethex+0x12>
 80359e4:	eba9 0303 	sub.w	r3, r9, r3
 80359e8:	f1a3 0b02 	sub.w	fp, r3, #2
 80359ec:	f7ff ffd6 	bl	803599c <__hexdig_fun>
 80359f0:	4605      	mov	r5, r0
 80359f2:	2800      	cmp	r0, #0
 80359f4:	d168      	bne.n	8035ac8 <__gethex+0x100>
 80359f6:	49a0      	ldr	r1, [pc, #640]	@ (8035c78 <__gethex+0x2b0>)
 80359f8:	2201      	movs	r2, #1
 80359fa:	4648      	mov	r0, r9
 80359fc:	f7f7 f96d 	bl	802ccda <strncmp>
 8035a00:	4607      	mov	r7, r0
 8035a02:	2800      	cmp	r0, #0
 8035a04:	d167      	bne.n	8035ad6 <__gethex+0x10e>
 8035a06:	f899 0001 	ldrb.w	r0, [r9, #1]
 8035a0a:	4626      	mov	r6, r4
 8035a0c:	f7ff ffc6 	bl	803599c <__hexdig_fun>
 8035a10:	2800      	cmp	r0, #0
 8035a12:	d062      	beq.n	8035ada <__gethex+0x112>
 8035a14:	4623      	mov	r3, r4
 8035a16:	7818      	ldrb	r0, [r3, #0]
 8035a18:	2830      	cmp	r0, #48	@ 0x30
 8035a1a:	4699      	mov	r9, r3
 8035a1c:	f103 0301 	add.w	r3, r3, #1
 8035a20:	d0f9      	beq.n	8035a16 <__gethex+0x4e>
 8035a22:	f7ff ffbb 	bl	803599c <__hexdig_fun>
 8035a26:	fab0 f580 	clz	r5, r0
 8035a2a:	096d      	lsrs	r5, r5, #5
 8035a2c:	f04f 0b01 	mov.w	fp, #1
 8035a30:	464a      	mov	r2, r9
 8035a32:	4616      	mov	r6, r2
 8035a34:	3201      	adds	r2, #1
 8035a36:	7830      	ldrb	r0, [r6, #0]
 8035a38:	f7ff ffb0 	bl	803599c <__hexdig_fun>
 8035a3c:	2800      	cmp	r0, #0
 8035a3e:	d1f8      	bne.n	8035a32 <__gethex+0x6a>
 8035a40:	498d      	ldr	r1, [pc, #564]	@ (8035c78 <__gethex+0x2b0>)
 8035a42:	2201      	movs	r2, #1
 8035a44:	4630      	mov	r0, r6
 8035a46:	f7f7 f948 	bl	802ccda <strncmp>
 8035a4a:	2800      	cmp	r0, #0
 8035a4c:	d13f      	bne.n	8035ace <__gethex+0x106>
 8035a4e:	b944      	cbnz	r4, 8035a62 <__gethex+0x9a>
 8035a50:	1c74      	adds	r4, r6, #1
 8035a52:	4622      	mov	r2, r4
 8035a54:	4616      	mov	r6, r2
 8035a56:	3201      	adds	r2, #1
 8035a58:	7830      	ldrb	r0, [r6, #0]
 8035a5a:	f7ff ff9f 	bl	803599c <__hexdig_fun>
 8035a5e:	2800      	cmp	r0, #0
 8035a60:	d1f8      	bne.n	8035a54 <__gethex+0x8c>
 8035a62:	1ba4      	subs	r4, r4, r6
 8035a64:	00a7      	lsls	r7, r4, #2
 8035a66:	7833      	ldrb	r3, [r6, #0]
 8035a68:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035a6c:	2b50      	cmp	r3, #80	@ 0x50
 8035a6e:	d13e      	bne.n	8035aee <__gethex+0x126>
 8035a70:	7873      	ldrb	r3, [r6, #1]
 8035a72:	2b2b      	cmp	r3, #43	@ 0x2b
 8035a74:	d033      	beq.n	8035ade <__gethex+0x116>
 8035a76:	2b2d      	cmp	r3, #45	@ 0x2d
 8035a78:	d034      	beq.n	8035ae4 <__gethex+0x11c>
 8035a7a:	1c71      	adds	r1, r6, #1
 8035a7c:	2400      	movs	r4, #0
 8035a7e:	7808      	ldrb	r0, [r1, #0]
 8035a80:	f7ff ff8c 	bl	803599c <__hexdig_fun>
 8035a84:	1e43      	subs	r3, r0, #1
 8035a86:	b2db      	uxtb	r3, r3
 8035a88:	2b18      	cmp	r3, #24
 8035a8a:	d830      	bhi.n	8035aee <__gethex+0x126>
 8035a8c:	f1a0 0210 	sub.w	r2, r0, #16
 8035a90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8035a94:	f7ff ff82 	bl	803599c <__hexdig_fun>
 8035a98:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8035a9c:	fa5f fc8c 	uxtb.w	ip, ip
 8035aa0:	f1bc 0f18 	cmp.w	ip, #24
 8035aa4:	f04f 030a 	mov.w	r3, #10
 8035aa8:	d91e      	bls.n	8035ae8 <__gethex+0x120>
 8035aaa:	b104      	cbz	r4, 8035aae <__gethex+0xe6>
 8035aac:	4252      	negs	r2, r2
 8035aae:	4417      	add	r7, r2
 8035ab0:	f8ca 1000 	str.w	r1, [sl]
 8035ab4:	b1ed      	cbz	r5, 8035af2 <__gethex+0x12a>
 8035ab6:	f1bb 0f00 	cmp.w	fp, #0
 8035aba:	bf0c      	ite	eq
 8035abc:	2506      	moveq	r5, #6
 8035abe:	2500      	movne	r5, #0
 8035ac0:	4628      	mov	r0, r5
 8035ac2:	b005      	add	sp, #20
 8035ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035ac8:	2500      	movs	r5, #0
 8035aca:	462c      	mov	r4, r5
 8035acc:	e7b0      	b.n	8035a30 <__gethex+0x68>
 8035ace:	2c00      	cmp	r4, #0
 8035ad0:	d1c7      	bne.n	8035a62 <__gethex+0x9a>
 8035ad2:	4627      	mov	r7, r4
 8035ad4:	e7c7      	b.n	8035a66 <__gethex+0x9e>
 8035ad6:	464e      	mov	r6, r9
 8035ad8:	462f      	mov	r7, r5
 8035ada:	2501      	movs	r5, #1
 8035adc:	e7c3      	b.n	8035a66 <__gethex+0x9e>
 8035ade:	2400      	movs	r4, #0
 8035ae0:	1cb1      	adds	r1, r6, #2
 8035ae2:	e7cc      	b.n	8035a7e <__gethex+0xb6>
 8035ae4:	2401      	movs	r4, #1
 8035ae6:	e7fb      	b.n	8035ae0 <__gethex+0x118>
 8035ae8:	fb03 0002 	mla	r0, r3, r2, r0
 8035aec:	e7ce      	b.n	8035a8c <__gethex+0xc4>
 8035aee:	4631      	mov	r1, r6
 8035af0:	e7de      	b.n	8035ab0 <__gethex+0xe8>
 8035af2:	eba6 0309 	sub.w	r3, r6, r9
 8035af6:	3b01      	subs	r3, #1
 8035af8:	4629      	mov	r1, r5
 8035afa:	2b07      	cmp	r3, #7
 8035afc:	dc0a      	bgt.n	8035b14 <__gethex+0x14c>
 8035afe:	9801      	ldr	r0, [sp, #4]
 8035b00:	f7fd fe22 	bl	8033748 <_Balloc>
 8035b04:	4604      	mov	r4, r0
 8035b06:	b940      	cbnz	r0, 8035b1a <__gethex+0x152>
 8035b08:	4b5c      	ldr	r3, [pc, #368]	@ (8035c7c <__gethex+0x2b4>)
 8035b0a:	4602      	mov	r2, r0
 8035b0c:	21e4      	movs	r1, #228	@ 0xe4
 8035b0e:	485c      	ldr	r0, [pc, #368]	@ (8035c80 <__gethex+0x2b8>)
 8035b10:	f7f4 fb5c 	bl	802a1cc <__assert_func>
 8035b14:	3101      	adds	r1, #1
 8035b16:	105b      	asrs	r3, r3, #1
 8035b18:	e7ef      	b.n	8035afa <__gethex+0x132>
 8035b1a:	f100 0a14 	add.w	sl, r0, #20
 8035b1e:	2300      	movs	r3, #0
 8035b20:	4655      	mov	r5, sl
 8035b22:	469b      	mov	fp, r3
 8035b24:	45b1      	cmp	r9, r6
 8035b26:	d337      	bcc.n	8035b98 <__gethex+0x1d0>
 8035b28:	f845 bb04 	str.w	fp, [r5], #4
 8035b2c:	eba5 050a 	sub.w	r5, r5, sl
 8035b30:	10ad      	asrs	r5, r5, #2
 8035b32:	6125      	str	r5, [r4, #16]
 8035b34:	4658      	mov	r0, fp
 8035b36:	f7fd fec5 	bl	80338c4 <__hi0bits>
 8035b3a:	016d      	lsls	r5, r5, #5
 8035b3c:	f8d8 6000 	ldr.w	r6, [r8]
 8035b40:	1a2d      	subs	r5, r5, r0
 8035b42:	42b5      	cmp	r5, r6
 8035b44:	dd54      	ble.n	8035bf0 <__gethex+0x228>
 8035b46:	1bad      	subs	r5, r5, r6
 8035b48:	4629      	mov	r1, r5
 8035b4a:	4620      	mov	r0, r4
 8035b4c:	f7fe fa3f 	bl	8033fce <__any_on>
 8035b50:	4681      	mov	r9, r0
 8035b52:	b178      	cbz	r0, 8035b74 <__gethex+0x1ac>
 8035b54:	1e6b      	subs	r3, r5, #1
 8035b56:	1159      	asrs	r1, r3, #5
 8035b58:	f003 021f 	and.w	r2, r3, #31
 8035b5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8035b60:	f04f 0901 	mov.w	r9, #1
 8035b64:	fa09 f202 	lsl.w	r2, r9, r2
 8035b68:	420a      	tst	r2, r1
 8035b6a:	d003      	beq.n	8035b74 <__gethex+0x1ac>
 8035b6c:	454b      	cmp	r3, r9
 8035b6e:	dc36      	bgt.n	8035bde <__gethex+0x216>
 8035b70:	f04f 0902 	mov.w	r9, #2
 8035b74:	4629      	mov	r1, r5
 8035b76:	4620      	mov	r0, r4
 8035b78:	f7ff febe 	bl	80358f8 <rshift>
 8035b7c:	442f      	add	r7, r5
 8035b7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035b82:	42bb      	cmp	r3, r7
 8035b84:	da42      	bge.n	8035c0c <__gethex+0x244>
 8035b86:	9801      	ldr	r0, [sp, #4]
 8035b88:	4621      	mov	r1, r4
 8035b8a:	f7fd fe02 	bl	8033792 <_Bfree>
 8035b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035b90:	2300      	movs	r3, #0
 8035b92:	6013      	str	r3, [r2, #0]
 8035b94:	25a3      	movs	r5, #163	@ 0xa3
 8035b96:	e793      	b.n	8035ac0 <__gethex+0xf8>
 8035b98:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8035b9c:	2a2e      	cmp	r2, #46	@ 0x2e
 8035b9e:	d012      	beq.n	8035bc6 <__gethex+0x1fe>
 8035ba0:	2b20      	cmp	r3, #32
 8035ba2:	d104      	bne.n	8035bae <__gethex+0x1e6>
 8035ba4:	f845 bb04 	str.w	fp, [r5], #4
 8035ba8:	f04f 0b00 	mov.w	fp, #0
 8035bac:	465b      	mov	r3, fp
 8035bae:	7830      	ldrb	r0, [r6, #0]
 8035bb0:	9303      	str	r3, [sp, #12]
 8035bb2:	f7ff fef3 	bl	803599c <__hexdig_fun>
 8035bb6:	9b03      	ldr	r3, [sp, #12]
 8035bb8:	f000 000f 	and.w	r0, r0, #15
 8035bbc:	4098      	lsls	r0, r3
 8035bbe:	ea4b 0b00 	orr.w	fp, fp, r0
 8035bc2:	3304      	adds	r3, #4
 8035bc4:	e7ae      	b.n	8035b24 <__gethex+0x15c>
 8035bc6:	45b1      	cmp	r9, r6
 8035bc8:	d8ea      	bhi.n	8035ba0 <__gethex+0x1d8>
 8035bca:	492b      	ldr	r1, [pc, #172]	@ (8035c78 <__gethex+0x2b0>)
 8035bcc:	9303      	str	r3, [sp, #12]
 8035bce:	2201      	movs	r2, #1
 8035bd0:	4630      	mov	r0, r6
 8035bd2:	f7f7 f882 	bl	802ccda <strncmp>
 8035bd6:	9b03      	ldr	r3, [sp, #12]
 8035bd8:	2800      	cmp	r0, #0
 8035bda:	d1e1      	bne.n	8035ba0 <__gethex+0x1d8>
 8035bdc:	e7a2      	b.n	8035b24 <__gethex+0x15c>
 8035bde:	1ea9      	subs	r1, r5, #2
 8035be0:	4620      	mov	r0, r4
 8035be2:	f7fe f9f4 	bl	8033fce <__any_on>
 8035be6:	2800      	cmp	r0, #0
 8035be8:	d0c2      	beq.n	8035b70 <__gethex+0x1a8>
 8035bea:	f04f 0903 	mov.w	r9, #3
 8035bee:	e7c1      	b.n	8035b74 <__gethex+0x1ac>
 8035bf0:	da09      	bge.n	8035c06 <__gethex+0x23e>
 8035bf2:	1b75      	subs	r5, r6, r5
 8035bf4:	4621      	mov	r1, r4
 8035bf6:	9801      	ldr	r0, [sp, #4]
 8035bf8:	462a      	mov	r2, r5
 8035bfa:	f7fd ffaf 	bl	8033b5c <__lshift>
 8035bfe:	1b7f      	subs	r7, r7, r5
 8035c00:	4604      	mov	r4, r0
 8035c02:	f100 0a14 	add.w	sl, r0, #20
 8035c06:	f04f 0900 	mov.w	r9, #0
 8035c0a:	e7b8      	b.n	8035b7e <__gethex+0x1b6>
 8035c0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8035c10:	42bd      	cmp	r5, r7
 8035c12:	dd6f      	ble.n	8035cf4 <__gethex+0x32c>
 8035c14:	1bed      	subs	r5, r5, r7
 8035c16:	42ae      	cmp	r6, r5
 8035c18:	dc34      	bgt.n	8035c84 <__gethex+0x2bc>
 8035c1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8035c1e:	2b02      	cmp	r3, #2
 8035c20:	d022      	beq.n	8035c68 <__gethex+0x2a0>
 8035c22:	2b03      	cmp	r3, #3
 8035c24:	d024      	beq.n	8035c70 <__gethex+0x2a8>
 8035c26:	2b01      	cmp	r3, #1
 8035c28:	d115      	bne.n	8035c56 <__gethex+0x28e>
 8035c2a:	42ae      	cmp	r6, r5
 8035c2c:	d113      	bne.n	8035c56 <__gethex+0x28e>
 8035c2e:	2e01      	cmp	r6, #1
 8035c30:	d10b      	bne.n	8035c4a <__gethex+0x282>
 8035c32:	9a02      	ldr	r2, [sp, #8]
 8035c34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8035c38:	6013      	str	r3, [r2, #0]
 8035c3a:	2301      	movs	r3, #1
 8035c3c:	6123      	str	r3, [r4, #16]
 8035c3e:	f8ca 3000 	str.w	r3, [sl]
 8035c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035c44:	2562      	movs	r5, #98	@ 0x62
 8035c46:	601c      	str	r4, [r3, #0]
 8035c48:	e73a      	b.n	8035ac0 <__gethex+0xf8>
 8035c4a:	1e71      	subs	r1, r6, #1
 8035c4c:	4620      	mov	r0, r4
 8035c4e:	f7fe f9be 	bl	8033fce <__any_on>
 8035c52:	2800      	cmp	r0, #0
 8035c54:	d1ed      	bne.n	8035c32 <__gethex+0x26a>
 8035c56:	9801      	ldr	r0, [sp, #4]
 8035c58:	4621      	mov	r1, r4
 8035c5a:	f7fd fd9a 	bl	8033792 <_Bfree>
 8035c5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035c60:	2300      	movs	r3, #0
 8035c62:	6013      	str	r3, [r2, #0]
 8035c64:	2550      	movs	r5, #80	@ 0x50
 8035c66:	e72b      	b.n	8035ac0 <__gethex+0xf8>
 8035c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035c6a:	2b00      	cmp	r3, #0
 8035c6c:	d1f3      	bne.n	8035c56 <__gethex+0x28e>
 8035c6e:	e7e0      	b.n	8035c32 <__gethex+0x26a>
 8035c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035c72:	2b00      	cmp	r3, #0
 8035c74:	d1dd      	bne.n	8035c32 <__gethex+0x26a>
 8035c76:	e7ee      	b.n	8035c56 <__gethex+0x28e>
 8035c78:	0803c1ce 	.word	0x0803c1ce
 8035c7c:	0803c506 	.word	0x0803c506
 8035c80:	0803c7a0 	.word	0x0803c7a0
 8035c84:	1e6f      	subs	r7, r5, #1
 8035c86:	f1b9 0f00 	cmp.w	r9, #0
 8035c8a:	d130      	bne.n	8035cee <__gethex+0x326>
 8035c8c:	b127      	cbz	r7, 8035c98 <__gethex+0x2d0>
 8035c8e:	4639      	mov	r1, r7
 8035c90:	4620      	mov	r0, r4
 8035c92:	f7fe f99c 	bl	8033fce <__any_on>
 8035c96:	4681      	mov	r9, r0
 8035c98:	117a      	asrs	r2, r7, #5
 8035c9a:	2301      	movs	r3, #1
 8035c9c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8035ca0:	f007 071f 	and.w	r7, r7, #31
 8035ca4:	40bb      	lsls	r3, r7
 8035ca6:	4213      	tst	r3, r2
 8035ca8:	4629      	mov	r1, r5
 8035caa:	4620      	mov	r0, r4
 8035cac:	bf18      	it	ne
 8035cae:	f049 0902 	orrne.w	r9, r9, #2
 8035cb2:	f7ff fe21 	bl	80358f8 <rshift>
 8035cb6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8035cba:	1b76      	subs	r6, r6, r5
 8035cbc:	2502      	movs	r5, #2
 8035cbe:	f1b9 0f00 	cmp.w	r9, #0
 8035cc2:	d047      	beq.n	8035d54 <__gethex+0x38c>
 8035cc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8035cc8:	2b02      	cmp	r3, #2
 8035cca:	d015      	beq.n	8035cf8 <__gethex+0x330>
 8035ccc:	2b03      	cmp	r3, #3
 8035cce:	d017      	beq.n	8035d00 <__gethex+0x338>
 8035cd0:	2b01      	cmp	r3, #1
 8035cd2:	d109      	bne.n	8035ce8 <__gethex+0x320>
 8035cd4:	f019 0f02 	tst.w	r9, #2
 8035cd8:	d006      	beq.n	8035ce8 <__gethex+0x320>
 8035cda:	f8da 3000 	ldr.w	r3, [sl]
 8035cde:	ea49 0903 	orr.w	r9, r9, r3
 8035ce2:	f019 0f01 	tst.w	r9, #1
 8035ce6:	d10e      	bne.n	8035d06 <__gethex+0x33e>
 8035ce8:	f045 0510 	orr.w	r5, r5, #16
 8035cec:	e032      	b.n	8035d54 <__gethex+0x38c>
 8035cee:	f04f 0901 	mov.w	r9, #1
 8035cf2:	e7d1      	b.n	8035c98 <__gethex+0x2d0>
 8035cf4:	2501      	movs	r5, #1
 8035cf6:	e7e2      	b.n	8035cbe <__gethex+0x2f6>
 8035cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035cfa:	f1c3 0301 	rsb	r3, r3, #1
 8035cfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035d02:	2b00      	cmp	r3, #0
 8035d04:	d0f0      	beq.n	8035ce8 <__gethex+0x320>
 8035d06:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8035d0a:	f104 0314 	add.w	r3, r4, #20
 8035d0e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8035d12:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8035d16:	f04f 0c00 	mov.w	ip, #0
 8035d1a:	4618      	mov	r0, r3
 8035d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035d20:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8035d24:	d01b      	beq.n	8035d5e <__gethex+0x396>
 8035d26:	3201      	adds	r2, #1
 8035d28:	6002      	str	r2, [r0, #0]
 8035d2a:	2d02      	cmp	r5, #2
 8035d2c:	f104 0314 	add.w	r3, r4, #20
 8035d30:	d13c      	bne.n	8035dac <__gethex+0x3e4>
 8035d32:	f8d8 2000 	ldr.w	r2, [r8]
 8035d36:	3a01      	subs	r2, #1
 8035d38:	42b2      	cmp	r2, r6
 8035d3a:	d109      	bne.n	8035d50 <__gethex+0x388>
 8035d3c:	1171      	asrs	r1, r6, #5
 8035d3e:	2201      	movs	r2, #1
 8035d40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8035d44:	f006 061f 	and.w	r6, r6, #31
 8035d48:	fa02 f606 	lsl.w	r6, r2, r6
 8035d4c:	421e      	tst	r6, r3
 8035d4e:	d13a      	bne.n	8035dc6 <__gethex+0x3fe>
 8035d50:	f045 0520 	orr.w	r5, r5, #32
 8035d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035d56:	601c      	str	r4, [r3, #0]
 8035d58:	9b02      	ldr	r3, [sp, #8]
 8035d5a:	601f      	str	r7, [r3, #0]
 8035d5c:	e6b0      	b.n	8035ac0 <__gethex+0xf8>
 8035d5e:	4299      	cmp	r1, r3
 8035d60:	f843 cc04 	str.w	ip, [r3, #-4]
 8035d64:	d8d9      	bhi.n	8035d1a <__gethex+0x352>
 8035d66:	68a3      	ldr	r3, [r4, #8]
 8035d68:	459b      	cmp	fp, r3
 8035d6a:	db17      	blt.n	8035d9c <__gethex+0x3d4>
 8035d6c:	6861      	ldr	r1, [r4, #4]
 8035d6e:	9801      	ldr	r0, [sp, #4]
 8035d70:	3101      	adds	r1, #1
 8035d72:	f7fd fce9 	bl	8033748 <_Balloc>
 8035d76:	4681      	mov	r9, r0
 8035d78:	b918      	cbnz	r0, 8035d82 <__gethex+0x3ba>
 8035d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8035de4 <__gethex+0x41c>)
 8035d7c:	4602      	mov	r2, r0
 8035d7e:	2184      	movs	r1, #132	@ 0x84
 8035d80:	e6c5      	b.n	8035b0e <__gethex+0x146>
 8035d82:	6922      	ldr	r2, [r4, #16]
 8035d84:	3202      	adds	r2, #2
 8035d86:	f104 010c 	add.w	r1, r4, #12
 8035d8a:	0092      	lsls	r2, r2, #2
 8035d8c:	300c      	adds	r0, #12
 8035d8e:	f7f8 f9ab 	bl	802e0e8 <memcpy>
 8035d92:	4621      	mov	r1, r4
 8035d94:	9801      	ldr	r0, [sp, #4]
 8035d96:	f7fd fcfc 	bl	8033792 <_Bfree>
 8035d9a:	464c      	mov	r4, r9
 8035d9c:	6923      	ldr	r3, [r4, #16]
 8035d9e:	1c5a      	adds	r2, r3, #1
 8035da0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8035da4:	6122      	str	r2, [r4, #16]
 8035da6:	2201      	movs	r2, #1
 8035da8:	615a      	str	r2, [r3, #20]
 8035daa:	e7be      	b.n	8035d2a <__gethex+0x362>
 8035dac:	6922      	ldr	r2, [r4, #16]
 8035dae:	455a      	cmp	r2, fp
 8035db0:	dd0b      	ble.n	8035dca <__gethex+0x402>
 8035db2:	2101      	movs	r1, #1
 8035db4:	4620      	mov	r0, r4
 8035db6:	f7ff fd9f 	bl	80358f8 <rshift>
 8035dba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035dbe:	3701      	adds	r7, #1
 8035dc0:	42bb      	cmp	r3, r7
 8035dc2:	f6ff aee0 	blt.w	8035b86 <__gethex+0x1be>
 8035dc6:	2501      	movs	r5, #1
 8035dc8:	e7c2      	b.n	8035d50 <__gethex+0x388>
 8035dca:	f016 061f 	ands.w	r6, r6, #31
 8035dce:	d0fa      	beq.n	8035dc6 <__gethex+0x3fe>
 8035dd0:	4453      	add	r3, sl
 8035dd2:	f1c6 0620 	rsb	r6, r6, #32
 8035dd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8035dda:	f7fd fd73 	bl	80338c4 <__hi0bits>
 8035dde:	42b0      	cmp	r0, r6
 8035de0:	dbe7      	blt.n	8035db2 <__gethex+0x3ea>
 8035de2:	e7f0      	b.n	8035dc6 <__gethex+0x3fe>
 8035de4:	0803c506 	.word	0x0803c506

08035de8 <L_shift>:
 8035de8:	f1c2 0208 	rsb	r2, r2, #8
 8035dec:	0092      	lsls	r2, r2, #2
 8035dee:	b570      	push	{r4, r5, r6, lr}
 8035df0:	f1c2 0620 	rsb	r6, r2, #32
 8035df4:	6843      	ldr	r3, [r0, #4]
 8035df6:	6804      	ldr	r4, [r0, #0]
 8035df8:	fa03 f506 	lsl.w	r5, r3, r6
 8035dfc:	432c      	orrs	r4, r5
 8035dfe:	40d3      	lsrs	r3, r2
 8035e00:	6004      	str	r4, [r0, #0]
 8035e02:	f840 3f04 	str.w	r3, [r0, #4]!
 8035e06:	4288      	cmp	r0, r1
 8035e08:	d3f4      	bcc.n	8035df4 <L_shift+0xc>
 8035e0a:	bd70      	pop	{r4, r5, r6, pc}

08035e0c <__match>:
 8035e0c:	b530      	push	{r4, r5, lr}
 8035e0e:	6803      	ldr	r3, [r0, #0]
 8035e10:	3301      	adds	r3, #1
 8035e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035e16:	b914      	cbnz	r4, 8035e1e <__match+0x12>
 8035e18:	6003      	str	r3, [r0, #0]
 8035e1a:	2001      	movs	r0, #1
 8035e1c:	bd30      	pop	{r4, r5, pc}
 8035e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035e22:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8035e26:	2d19      	cmp	r5, #25
 8035e28:	bf98      	it	ls
 8035e2a:	3220      	addls	r2, #32
 8035e2c:	42a2      	cmp	r2, r4
 8035e2e:	d0f0      	beq.n	8035e12 <__match+0x6>
 8035e30:	2000      	movs	r0, #0
 8035e32:	e7f3      	b.n	8035e1c <__match+0x10>

08035e34 <__hexnan>:
 8035e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035e38:	680b      	ldr	r3, [r1, #0]
 8035e3a:	6801      	ldr	r1, [r0, #0]
 8035e3c:	115e      	asrs	r6, r3, #5
 8035e3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8035e42:	f013 031f 	ands.w	r3, r3, #31
 8035e46:	b087      	sub	sp, #28
 8035e48:	bf18      	it	ne
 8035e4a:	3604      	addne	r6, #4
 8035e4c:	2500      	movs	r5, #0
 8035e4e:	1f37      	subs	r7, r6, #4
 8035e50:	4682      	mov	sl, r0
 8035e52:	4690      	mov	r8, r2
 8035e54:	9301      	str	r3, [sp, #4]
 8035e56:	f846 5c04 	str.w	r5, [r6, #-4]
 8035e5a:	46b9      	mov	r9, r7
 8035e5c:	463c      	mov	r4, r7
 8035e5e:	9502      	str	r5, [sp, #8]
 8035e60:	46ab      	mov	fp, r5
 8035e62:	784a      	ldrb	r2, [r1, #1]
 8035e64:	1c4b      	adds	r3, r1, #1
 8035e66:	9303      	str	r3, [sp, #12]
 8035e68:	b342      	cbz	r2, 8035ebc <__hexnan+0x88>
 8035e6a:	4610      	mov	r0, r2
 8035e6c:	9105      	str	r1, [sp, #20]
 8035e6e:	9204      	str	r2, [sp, #16]
 8035e70:	f7ff fd94 	bl	803599c <__hexdig_fun>
 8035e74:	2800      	cmp	r0, #0
 8035e76:	d151      	bne.n	8035f1c <__hexnan+0xe8>
 8035e78:	9a04      	ldr	r2, [sp, #16]
 8035e7a:	9905      	ldr	r1, [sp, #20]
 8035e7c:	2a20      	cmp	r2, #32
 8035e7e:	d818      	bhi.n	8035eb2 <__hexnan+0x7e>
 8035e80:	9b02      	ldr	r3, [sp, #8]
 8035e82:	459b      	cmp	fp, r3
 8035e84:	dd13      	ble.n	8035eae <__hexnan+0x7a>
 8035e86:	454c      	cmp	r4, r9
 8035e88:	d206      	bcs.n	8035e98 <__hexnan+0x64>
 8035e8a:	2d07      	cmp	r5, #7
 8035e8c:	dc04      	bgt.n	8035e98 <__hexnan+0x64>
 8035e8e:	462a      	mov	r2, r5
 8035e90:	4649      	mov	r1, r9
 8035e92:	4620      	mov	r0, r4
 8035e94:	f7ff ffa8 	bl	8035de8 <L_shift>
 8035e98:	4544      	cmp	r4, r8
 8035e9a:	d952      	bls.n	8035f42 <__hexnan+0x10e>
 8035e9c:	2300      	movs	r3, #0
 8035e9e:	f1a4 0904 	sub.w	r9, r4, #4
 8035ea2:	f844 3c04 	str.w	r3, [r4, #-4]
 8035ea6:	f8cd b008 	str.w	fp, [sp, #8]
 8035eaa:	464c      	mov	r4, r9
 8035eac:	461d      	mov	r5, r3
 8035eae:	9903      	ldr	r1, [sp, #12]
 8035eb0:	e7d7      	b.n	8035e62 <__hexnan+0x2e>
 8035eb2:	2a29      	cmp	r2, #41	@ 0x29
 8035eb4:	d157      	bne.n	8035f66 <__hexnan+0x132>
 8035eb6:	3102      	adds	r1, #2
 8035eb8:	f8ca 1000 	str.w	r1, [sl]
 8035ebc:	f1bb 0f00 	cmp.w	fp, #0
 8035ec0:	d051      	beq.n	8035f66 <__hexnan+0x132>
 8035ec2:	454c      	cmp	r4, r9
 8035ec4:	d206      	bcs.n	8035ed4 <__hexnan+0xa0>
 8035ec6:	2d07      	cmp	r5, #7
 8035ec8:	dc04      	bgt.n	8035ed4 <__hexnan+0xa0>
 8035eca:	462a      	mov	r2, r5
 8035ecc:	4649      	mov	r1, r9
 8035ece:	4620      	mov	r0, r4
 8035ed0:	f7ff ff8a 	bl	8035de8 <L_shift>
 8035ed4:	4544      	cmp	r4, r8
 8035ed6:	d936      	bls.n	8035f46 <__hexnan+0x112>
 8035ed8:	f1a8 0204 	sub.w	r2, r8, #4
 8035edc:	4623      	mov	r3, r4
 8035ede:	f853 1b04 	ldr.w	r1, [r3], #4
 8035ee2:	f842 1f04 	str.w	r1, [r2, #4]!
 8035ee6:	429f      	cmp	r7, r3
 8035ee8:	d2f9      	bcs.n	8035ede <__hexnan+0xaa>
 8035eea:	1b3b      	subs	r3, r7, r4
 8035eec:	f023 0303 	bic.w	r3, r3, #3
 8035ef0:	3304      	adds	r3, #4
 8035ef2:	3401      	adds	r4, #1
 8035ef4:	3e03      	subs	r6, #3
 8035ef6:	42b4      	cmp	r4, r6
 8035ef8:	bf88      	it	hi
 8035efa:	2304      	movhi	r3, #4
 8035efc:	4443      	add	r3, r8
 8035efe:	2200      	movs	r2, #0
 8035f00:	f843 2b04 	str.w	r2, [r3], #4
 8035f04:	429f      	cmp	r7, r3
 8035f06:	d2fb      	bcs.n	8035f00 <__hexnan+0xcc>
 8035f08:	683b      	ldr	r3, [r7, #0]
 8035f0a:	b91b      	cbnz	r3, 8035f14 <__hexnan+0xe0>
 8035f0c:	4547      	cmp	r7, r8
 8035f0e:	d128      	bne.n	8035f62 <__hexnan+0x12e>
 8035f10:	2301      	movs	r3, #1
 8035f12:	603b      	str	r3, [r7, #0]
 8035f14:	2005      	movs	r0, #5
 8035f16:	b007      	add	sp, #28
 8035f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035f1c:	3501      	adds	r5, #1
 8035f1e:	2d08      	cmp	r5, #8
 8035f20:	f10b 0b01 	add.w	fp, fp, #1
 8035f24:	dd06      	ble.n	8035f34 <__hexnan+0x100>
 8035f26:	4544      	cmp	r4, r8
 8035f28:	d9c1      	bls.n	8035eae <__hexnan+0x7a>
 8035f2a:	2300      	movs	r3, #0
 8035f2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8035f30:	2501      	movs	r5, #1
 8035f32:	3c04      	subs	r4, #4
 8035f34:	6822      	ldr	r2, [r4, #0]
 8035f36:	f000 000f 	and.w	r0, r0, #15
 8035f3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8035f3e:	6020      	str	r0, [r4, #0]
 8035f40:	e7b5      	b.n	8035eae <__hexnan+0x7a>
 8035f42:	2508      	movs	r5, #8
 8035f44:	e7b3      	b.n	8035eae <__hexnan+0x7a>
 8035f46:	9b01      	ldr	r3, [sp, #4]
 8035f48:	2b00      	cmp	r3, #0
 8035f4a:	d0dd      	beq.n	8035f08 <__hexnan+0xd4>
 8035f4c:	f1c3 0320 	rsb	r3, r3, #32
 8035f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035f54:	40da      	lsrs	r2, r3
 8035f56:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8035f5a:	4013      	ands	r3, r2
 8035f5c:	f846 3c04 	str.w	r3, [r6, #-4]
 8035f60:	e7d2      	b.n	8035f08 <__hexnan+0xd4>
 8035f62:	3f04      	subs	r7, #4
 8035f64:	e7d0      	b.n	8035f08 <__hexnan+0xd4>
 8035f66:	2004      	movs	r0, #4
 8035f68:	e7d5      	b.n	8035f16 <__hexnan+0xe2>
	...

08035f6c <_init>:
 8035f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035f6e:	bf00      	nop
 8035f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035f72:	bc08      	pop	{r3}
 8035f74:	469e      	mov	lr, r3
 8035f76:	4770      	bx	lr

08035f78 <_fini>:
 8035f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035f7a:	bf00      	nop
 8035f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035f7e:	bc08      	pop	{r3}
 8035f80:	469e      	mov	lr, r3
 8035f82:	4770      	bx	lr
