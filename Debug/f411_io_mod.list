
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000259f4  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006610  08035b98  08035b98  00026b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c1a8  0803c1a8  0002e870  2**0
                  CONTENTS
  4 .ARM          00000008  0803c1a8  0803c1a8  0002d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c1b0  0803c1b0  0002e870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803c1b0  0803c1b0  0002d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803c1b8  0803c1b8  0002d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803c1bc  0002e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000199a8  20000870  0803ca2c  0002e870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2001a218  0803ca2c  0002f218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a684  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f09  00000000  00000000  00088f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000282e8  00000000  00000000  00090e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003040  00000000  00000000  000b9118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000304e  00000000  00000000  000bc158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191b  00000000  00000000  000bf1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000499c0  00000000  00000000  000e0ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aafa8  00000000  00000000  0012a481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d5429  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000be98  00000000  00000000  001d546c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001e1304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08035b7c 	.word	0x08035b7c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	08035b7c 	.word	0x08035b7c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f005 fa1e 	bl	8016526 <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f005 fa14 	bl	8016526 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f005 fa0a 	bl	8016526 <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f005 fa00 	bl	8016526 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8011130:	4b48      	ldr	r3, [pc, #288]	@ (8011254 <StartIOTask+0x128>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e06f      	b.n	8011244 <StartIOTask+0x118>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483b      	ldr	r0, [pc, #236]	@ (8011258 <StartIOTask+0x12c>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f007 fa86 	bl	801867e <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f005 f9cb 	bl	8016526 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85b      	bhi.n	8011250 <StartIOTask+0x124>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f005 f9b3 	bl	8016526 <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f005 f9a0 	bl	8016518 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1c      	ldr	r4, [pc, #112]	@ (801125c <StartIOTask+0x130>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f007 fa94 	bl	801871a <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f007 f9fe 	bl	80185fa <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e011      	b.n	8011226 <StartIOTask+0xfa>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f005 f980 	bl	8016518 <HAL_GPIO_ReadPin>
 8011218:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801121c:	446b      	add	r3, sp
 801121e:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011222:	3401      	adds	r4, #1
 8011224:	b2e4      	uxtb	r4, r4
 8011226:	2c02      	cmp	r4, #2
 8011228:	d9eb      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801122a:	4c0d      	ldr	r4, [pc, #52]	@ (8011260 <StartIOTask+0x134>)
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	f007 fa74 	bl	801871a <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011232:	2300      	movs	r3, #0
 8011234:	461a      	mov	r2, r3
 8011236:	a903      	add	r1, sp, #12
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f007 f9de 	bl	80185fa <osMessageQueuePut>
    osDelay(1);
 801123e:	2001      	movs	r0, #1
 8011240:	f007 f8e3 	bl	801840a <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <StartIOTask+0x12c>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f007 fa5a 	bl	8018700 <osMessageQueueGetCount>
 801124c:	2800      	cmp	r0, #0
 801124e:	d189      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011250:	2400      	movs	r4, #0
 8011252:	e7c8      	b.n	80111e6 <StartIOTask+0xba>
 8011254:	08035b98 	.word	0x08035b98
 8011258:	2000089c 	.word	0x2000089c
 801125c:	200008a0 	.word	0x200008a0
 8011260:	200008a4 	.word	0x200008a4

08011264 <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 8011264:	b084      	sub	sp, #16
 8011266:	b508      	push	{r3, lr}
 8011268:	f10d 0c08 	add.w	ip, sp, #8
 801126c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011270:	2300      	movs	r3, #0
 8011272:	461a      	mov	r2, r3
 8011274:	4661      	mov	r1, ip
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <add_log_mess_to_q+0x24>)
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	f007 f9be 	bl	80185fa <osMessageQueuePut>

}
 801127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011282:	b004      	add	sp, #16
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	20000894 	.word	0x20000894

0801128c <StartDisplayTask>:
{
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011294:	f007 f8b9 	bl	801840a <osDelay>
	SSD1306_Init (); // initialise the display
 8011298:	f006 ff50 	bl	801813c <SSD1306_Init>
	osDelay(100);//
 801129c:	2064      	movs	r0, #100	@ 0x64
 801129e:	f007 f8b4 	bl	801840a <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112a2:	2100      	movs	r1, #0
 80112a4:	2001      	movs	r0, #1
 80112a6:	f006 fead 	bl	8018004 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112aa:	2000      	movs	r0, #0
 80112ac:	f006 fe6e 	bl	8017f8c <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b0:	4c48      	ldr	r4, [pc, #288]	@ (80113d4 <StartDisplayTask+0x148>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	4621      	mov	r1, r4
 80112b6:	4848      	ldr	r0, [pc, #288]	@ (80113d8 <StartDisplayTask+0x14c>)
 80112b8:	f006 fef8 	bl	80180ac <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112bc:	2201      	movs	r2, #1
 80112be:	4621      	mov	r1, r4
 80112c0:	4846      	ldr	r0, [pc, #280]	@ (80113dc <StartDisplayTask+0x150>)
 80112c2:	f006 fef3 	bl	80180ac <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112c6:	210b      	movs	r1, #11
 80112c8:	2001      	movs	r0, #1
 80112ca:	f006 fe9b 	bl	8018004 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112ce:	2201      	movs	r2, #1
 80112d0:	4621      	mov	r1, r4
 80112d2:	4843      	ldr	r0, [pc, #268]	@ (80113e0 <StartDisplayTask+0x154>)
 80112d4:	f006 feea 	bl	80180ac <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112d8:	2116      	movs	r1, #22
 80112da:	2001      	movs	r0, #1
 80112dc:	f006 fe92 	bl	8018004 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e0:	2201      	movs	r2, #1
 80112e2:	4621      	mov	r1, r4
 80112e4:	483f      	ldr	r0, [pc, #252]	@ (80113e4 <StartDisplayTask+0x158>)
 80112e6:	f006 fee1 	bl	80180ac <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112ea:	2121      	movs	r1, #33	@ 0x21
 80112ec:	2001      	movs	r0, #1
 80112ee:	f006 fe89 	bl	8018004 <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112f2:	4b3d      	ldr	r3, [pc, #244]	@ (80113e8 <StartDisplayTask+0x15c>)
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	780a      	ldrb	r2, [r1, #0]
 80112f8:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80112fa:	7888      	ldrb	r0, [r1, #2]
 80112fc:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80112fe:	790e      	ldrb	r6, [r1, #4]
 8011300:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	9602      	str	r6, [sp, #8]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	9000      	str	r0, [sp, #0]
 801130a:	4938      	ldr	r1, [pc, #224]	@ (80113ec <StartDisplayTask+0x160>)
 801130c:	a805      	add	r0, sp, #20
 801130e:	f01a fef5 	bl	802c0fc <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011312:	2201      	movs	r2, #1
 8011314:	4621      	mov	r1, r4
 8011316:	a805      	add	r0, sp, #20
 8011318:	f006 fec8 	bl	80180ac <SSD1306_Puts>
    SSD1306_UpdateScreen();
 801131c:	f006 ffb8 	bl	8018290 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011324:	f008 fbdc 	bl	8019ae0 <vTaskDelay>
    int i=0;
 8011328:	2500      	movs	r5, #0
 801132a:	e003      	b.n	8011334 <StartDisplayTask+0xa8>
		osDelay(1000);
 801132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011330:	f007 f86b 	bl	801840a <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 8011334:	2100      	movs	r1, #0
 8011336:	2001      	movs	r0, #1
 8011338:	f006 fe64 	bl	8018004 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801133c:	2000      	movs	r0, #0
 801133e:	f006 fe25 	bl	8017f8c <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011342:	4c24      	ldr	r4, [pc, #144]	@ (80113d4 <StartDisplayTask+0x148>)
 8011344:	2201      	movs	r2, #1
 8011346:	4621      	mov	r1, r4
 8011348:	4829      	ldr	r0, [pc, #164]	@ (80113f0 <StartDisplayTask+0x164>)
 801134a:	f006 feaf 	bl	80180ac <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801134e:	4b26      	ldr	r3, [pc, #152]	@ (80113e8 <StartDisplayTask+0x15c>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011354:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4923      	ldr	r1, [pc, #140]	@ (80113f4 <StartDisplayTask+0x168>)
 8011366:	a805      	add	r0, sp, #20
 8011368:	f01a fec8 	bl	802c0fc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	a805      	add	r0, sp, #20
 8011372:	f006 fe9b 	bl	80180ac <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 8011376:	210a      	movs	r1, #10
 8011378:	2001      	movs	r0, #1
 801137a:	f006 fe43 	bl	8018004 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 801137e:	2201      	movs	r2, #1
 8011380:	4621      	mov	r1, r4
 8011382:	481d      	ldr	r0, [pc, #116]	@ (80113f8 <StartDisplayTask+0x16c>)
 8011384:	f006 fe92 	bl	80180ac <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011388:	3501      	adds	r5, #1
 801138a:	462a      	mov	r2, r5
 801138c:	491b      	ldr	r1, [pc, #108]	@ (80113fc <StartDisplayTask+0x170>)
 801138e:	a805      	add	r0, sp, #20
 8011390:	f01a feb4 	bl	802c0fc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011394:	2201      	movs	r2, #1
 8011396:	4621      	mov	r1, r4
 8011398:	a805      	add	r0, sp, #20
 801139a:	f006 fe87 	bl	80180ac <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801139e:	f006 ff77 	bl	8018290 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113a6:	2201      	movs	r2, #1
 80113a8:	2178      	movs	r1, #120	@ 0x78
 80113aa:	4815      	ldr	r0, [pc, #84]	@ (8011400 <StartDisplayTask+0x174>)
 80113ac:	f005 fc06 	bl	8016bbc <HAL_I2C_IsDeviceReady>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0bb      	beq.n	801132c <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113b4:	4812      	ldr	r0, [pc, #72]	@ (8011400 <StartDisplayTask+0x174>)
 80113b6:	f005 fb2b 	bl	8016a10 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113be:	f008 fb8f 	bl	8019ae0 <vTaskDelay>
			MX_I2C1_Init();
 80113c2:	f000 fcf3 	bl	8011dac <MX_I2C1_Init>
			vTaskDelay(1000);
 80113c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ca:	f008 fb89 	bl	8019ae0 <vTaskDelay>
			SSD1306_Init ();
 80113ce:	f006 feb5 	bl	801813c <SSD1306_Init>
 80113d2:	e7e6      	b.n	80113a2 <StartDisplayTask+0x116>
 80113d4:	2000010c 	.word	0x2000010c
 80113d8:	08035e14 	.word	0x08035e14
 80113dc:	08035e20 	.word	0x08035e20
 80113e0:	08035e2c 	.word	0x08035e2c
 80113e4:	08035e38 	.word	0x08035e38
 80113e8:	200008c0 	.word	0x200008c0
 80113ec:	08035e40 	.word	0x08035e40
 80113f0:	08035e60 	.word	0x08035e60
 80113f4:	08035e64 	.word	0x08035e64
 80113f8:	08035e74 	.word	0x08035e74
 80113fc:	0803b244 	.word	0x0803b244
 8011400:	200008c8 	.word	0x200008c8

08011404 <StartSettingsTask>:
{
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801140c:	4b79      	ldr	r3, [pc, #484]	@ (80115f4 <StartSettingsTask+0x1f0>)
 801140e:	4a7a      	ldr	r2, [pc, #488]	@ (80115f8 <StartSettingsTask+0x1f4>)
 8011410:	497a      	ldr	r1, [pc, #488]	@ (80115fc <StartSettingsTask+0x1f8>)
 8011412:	487b      	ldr	r0, [pc, #492]	@ (8011600 <StartSettingsTask+0x1fc>)
 8011414:	f004 fc1a 	bl	8015c4c <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011418:	497a      	ldr	r1, [pc, #488]	@ (8011604 <StartSettingsTask+0x200>)
 801141a:	487b      	ldr	r0, [pc, #492]	@ (8011608 <StartSettingsTask+0x204>)
 801141c:	f009 fc2e 	bl	801ac7c <lfs_fs_ll_init>
 8011420:	2800      	cmp	r0, #0
 8011422:	db3b      	blt.n	801149c <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 8011424:	4879      	ldr	r0, [pc, #484]	@ (801160c <StartSettingsTask+0x208>)
 8011426:	f009 fc17 	bl	801ac58 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801142a:	4c79      	ldr	r4, [pc, #484]	@ (8011610 <StartSettingsTask+0x20c>)
 801142c:	4620      	mov	r0, r4
 801142e:	f009 fc07 	bl	801ac40 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011432:	4878      	ldr	r0, [pc, #480]	@ (8011614 <StartSettingsTask+0x210>)
 8011434:	f009 fc04 	bl	801ac40 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011438:	4620      	mov	r0, r4
 801143a:	f009 fc0d 	bl	801ac58 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801143e:	4876      	ldr	r0, [pc, #472]	@ (8011618 <StartSettingsTask+0x214>)
 8011440:	f009 fc0a 	bl	801ac58 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011444:	4875      	ldr	r0, [pc, #468]	@ (801161c <StartSettingsTask+0x218>)
 8011446:	f009 fc07 	bl	801ac58 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801144a:	4875      	ldr	r0, [pc, #468]	@ (8011620 <StartSettingsTask+0x21c>)
 801144c:	f009 fc04 	bl	801ac58 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011450:	4874      	ldr	r0, [pc, #464]	@ (8011624 <StartSettingsTask+0x220>)
 8011452:	f009 fc01 	bl	801ac58 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011456:	2200      	movs	r2, #0
 8011458:	a939      	add	r1, sp, #228	@ 0xe4
 801145a:	4873      	ldr	r0, [pc, #460]	@ (8011628 <StartSettingsTask+0x224>)
 801145c:	f009 fb44 	bl	801aae8 <mg_fs_lfs_status>
 8011460:	b1f8      	cbz	r0, 80114a2 <StartSettingsTask+0x9e>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011462:	2101      	movs	r1, #1
 8011464:	4870      	ldr	r0, [pc, #448]	@ (8011628 <StartSettingsTask+0x224>)
 8011466:	f009 fb7d 	bl	801ab64 <mg_fs_lfs_open>
 801146a:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801146c:	22c6      	movs	r2, #198	@ 0xc6
 801146e:	a907      	add	r1, sp, #28
 8011470:	f009 fba8 	bl	801abc4 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011474:	4620      	mov	r0, r4
 8011476:	f009 fb99 	bl	801abac <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 801147a:	2200      	movs	r2, #0
 801147c:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011480:	2302      	movs	r3, #2
 8011482:	a907      	add	r1, sp, #28
 8011484:	4869      	ldr	r0, [pc, #420]	@ (801162c <StartSettingsTask+0x228>)
 8011486:	6800      	ldr	r0, [r0, #0]
 8011488:	f007 fb1e 	bl	8018ac8 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 801148c:	2200      	movs	r2, #0
 801148e:	a939      	add	r1, sp, #228	@ 0xe4
 8011490:	4867      	ldr	r0, [pc, #412]	@ (8011630 <StartSettingsTask+0x22c>)
 8011492:	f009 fb29 	bl	801aae8 <mg_fs_lfs_status>
 8011496:	b188      	cbz	r0, 80114bc <StartSettingsTask+0xb8>
{
 8011498:	2400      	movs	r4, #0
 801149a:	e082      	b.n	80115a2 <StartSettingsTask+0x19e>
	  HAL_NVIC_SystemReset(); //TODO fo Release uncomment
 801149c:	f004 fecc 	bl	8016238 <HAL_NVIC_SystemReset>
 80114a0:	e7c0      	b.n	8011424 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80114a2:	22c6      	movs	r2, #198	@ 0xc6
 80114a4:	2100      	movs	r1, #0
 80114a6:	a807      	add	r0, sp, #28
 80114a8:	f01b f9ea 	bl	802c880 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114ac:	2302      	movs	r3, #2
 80114ae:	2200      	movs	r2, #0
 80114b0:	a907      	add	r1, sp, #28
 80114b2:	485e      	ldr	r0, [pc, #376]	@ (801162c <StartSettingsTask+0x228>)
 80114b4:	6800      	ldr	r0, [r0, #0]
 80114b6:	f007 fb07 	bl	8018ac8 <xQueueGenericSend>
 80114ba:	e7e7      	b.n	801148c <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80114bc:	f240 609a 	movw	r0, #1690	@ 0x69a
 80114c0:	f009 f9aa 	bl	801a818 <pvPortMalloc>
	  if (web_users == NULL) {
 80114c4:	4604      	mov	r4, r0
 80114c6:	b390      	cbz	r0, 801152e <StartSettingsTask+0x12a>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80114c8:	495a      	ldr	r1, [pc, #360]	@ (8011634 <StartSettingsTask+0x230>)
 80114ca:	2001      	movs	r0, #1
 80114cc:	f000 fd16 	bl	8011efc <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80114d0:	4b59      	ldr	r3, [pc, #356]	@ (8011638 <StartSettingsTask+0x234>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	6020      	str	r0, [r4, #0]
 80114d6:	889b      	ldrh	r3, [r3, #4]
 80114d8:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80114da:	ad01      	add	r5, sp, #4
 80114dc:	4e57      	ldr	r6, [pc, #348]	@ (801163c <StartSettingsTask+0x238>)
 80114de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114e6:	f845 0b04 	str.w	r0, [r5], #4
 80114ea:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80114ec:	ad01      	add	r5, sp, #4
 80114ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114f0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80114f4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80114f8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80114fc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011500:	6828      	ldr	r0, [r5, #0]
 8011502:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 8011506:	792b      	ldrb	r3, [r5, #4]
 8011508:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 801150c:	2102      	movs	r1, #2
 801150e:	4848      	ldr	r0, [pc, #288]	@ (8011630 <StartSettingsTask+0x22c>)
 8011510:	f009 fb28 	bl	801ab64 <mg_fs_lfs_open>
 8011514:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 8011516:	f240 629a 	movw	r2, #1690	@ 0x69a
 801151a:	4621      	mov	r1, r4
 801151c:	f009 fb5e 	bl	801abdc <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011520:	4628      	mov	r0, r5
 8011522:	f009 fb43 	bl	801abac <mg_fs_lfs_close>
	  free(web_users);
 8011526:	4620      	mov	r0, r4
 8011528:	f009 f9f8 	bl	801a91c <vPortFree>
 801152c:	e7b4      	b.n	8011498 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 801152e:	4944      	ldr	r1, [pc, #272]	@ (8011640 <StartSettingsTask+0x23c>)
 8011530:	2003      	movs	r0, #3
 8011532:	f000 fce3 	bl	8011efc <logging>
 8011536:	e7f6      	b.n	8011526 <StartSettingsTask+0x122>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011538:	4d3b      	ldr	r5, [pc, #236]	@ (8011628 <StartSettingsTask+0x224>)
 801153a:	4628      	mov	r0, r5
 801153c:	f009 fb80 	bl	801ac40 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011540:	2102      	movs	r1, #2
 8011542:	4628      	mov	r0, r5
 8011544:	f009 fb0e 	bl	801ab64 <mg_fs_lfs_open>
 8011548:	4605      	mov	r5, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	d033      	beq.n	80115b6 <StartSettingsTask+0x1b2>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801154e:	22c6      	movs	r2, #198	@ 0xc6
 8011550:	a907      	add	r1, sp, #28
 8011552:	f009 fb43 	bl	801abdc <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011556:	4628      	mov	r0, r5
 8011558:	f009 fb28 	bl	801abac <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801155c:	2200      	movs	r2, #0
 801155e:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011562:	2302      	movs	r3, #2
 8011564:	a907      	add	r1, sp, #28
 8011566:	4831      	ldr	r0, [pc, #196]	@ (801162c <StartSettingsTask+0x228>)
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	f007 faad 	bl	8018ac8 <xQueueGenericSend>
 801156e:	e022      	b.n	80115b6 <StartSettingsTask+0x1b2>
				 osDelay(1);
 8011570:	2001      	movs	r0, #1
 8011572:	f006 ff4a 	bl	801840a <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801157a:	4832      	ldr	r0, [pc, #200]	@ (8011644 <StartSettingsTask+0x240>)
 801157c:	f004 ffcc 	bl	8016518 <HAL_GPIO_ReadPin>
 8011580:	2800      	cmp	r0, #0
 8011582:	d0f5      	beq.n	8011570 <StartSettingsTask+0x16c>
			 osDelay(1000);
 8011584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011588:	f006 ff3f 	bl	801840a <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 801158c:	4828      	ldr	r0, [pc, #160]	@ (8011630 <StartSettingsTask+0x22c>)
 801158e:	f009 fb57 	bl	801ac40 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 8011592:	f004 fe51 	bl	8016238 <HAL_NVIC_SystemReset>
 8011596:	e000      	b.n	801159a <StartSettingsTask+0x196>
		 press_time = 0;
 8011598:	2400      	movs	r4, #0
	  osDelay(1000);
 801159a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801159e:	f006 ff34 	bl	801840a <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80115a2:	2200      	movs	r2, #0
 80115a4:	a907      	add	r1, sp, #28
 80115a6:	4b21      	ldr	r3, [pc, #132]	@ (801162c <StartSettingsTask+0x228>)
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f007 fda0 	bl	80190ee <xQueuePeek>
	  if(mqtt_config.save){
 80115ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1c0      	bne.n	8011538 <StartSettingsTask+0x134>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80115b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115ba:	4822      	ldr	r0, [pc, #136]	@ (8011644 <StartSettingsTask+0x240>)
 80115bc:	f004 ffac 	bl	8016518 <HAL_GPIO_ReadPin>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1e9      	bne.n	8011598 <StartSettingsTask+0x194>
		 press_time++;
 80115c4:	3401      	adds	r4, #1
 80115c6:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115c8:	4d1e      	ldr	r5, [pc, #120]	@ (8011644 <StartSettingsTask+0x240>)
 80115ca:	2201      	movs	r2, #1
 80115cc:	2102      	movs	r1, #2
 80115ce:	4628      	mov	r0, r5
 80115d0:	f004 ffa9 	bl	8016526 <HAL_GPIO_WritePin>
		 osDelay(100);
 80115d4:	2064      	movs	r0, #100	@ 0x64
 80115d6:	f006 ff18 	bl	801840a <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80115da:	2200      	movs	r2, #0
 80115dc:	2102      	movs	r1, #2
 80115de:	4628      	mov	r0, r5
 80115e0:	f004 ffa1 	bl	8016526 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80115e4:	2c08      	cmp	r4, #8
 80115e6:	d1d8      	bne.n	801159a <StartSettingsTask+0x196>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115e8:	2201      	movs	r2, #1
 80115ea:	2102      	movs	r1, #2
 80115ec:	4628      	mov	r0, r5
 80115ee:	f004 ff9a 	bl	8016526 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80115f2:	e7c0      	b.n	8011576 <StartSettingsTask+0x172>
 80115f4:	08011829 	.word	0x08011829
 80115f8:	0801184d 	.word	0x0801184d
 80115fc:	08011119 	.word	0x08011119
 8011600:	08011105 	.word	0x08011105
 8011604:	08011879 	.word	0x08011879
 8011608:	08011865 	.word	0x08011865
 801160c:	08035e78 	.word	0x08035e78
 8011610:	08035e80 	.word	0x08035e80
 8011614:	08035e8c 	.word	0x08035e8c
 8011618:	08035e9c 	.word	0x08035e9c
 801161c:	08035ea8 	.word	0x08035ea8
 8011620:	080377c8 	.word	0x080377c8
 8011624:	08035eb0 	.word	0x08035eb0
 8011628:	08035eb8 	.word	0x08035eb8
 801162c:	20000898 	.word	0x20000898
 8011630:	08035ecc 	.word	0x08035ecc
 8011634:	08035f08 	.word	0x08035f08
 8011638:	08035f40 	.word	0x08035f40
 801163c:	08035f48 	.word	0x08035f48
 8011640:	08035edc 	.word	0x08035edc
 8011644:	40020400 	.word	0x40020400

08011648 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011648:	b508      	push	{r3, lr}
	switch (param_type) {
 801164a:	2901      	cmp	r1, #1
 801164c:	d014      	beq.n	8011678 <RW_parameters_from_queue+0x30>
 801164e:	2902      	cmp	r1, #2
 8011650:	d01a      	beq.n	8011688 <RW_parameters_from_queue+0x40>
 8011652:	b101      	cbz	r1, 8011656 <RW_parameters_from_queue+0xe>
}
 8011654:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 8011656:	b14a      	cbz	r2, 801166c <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011658:	2a01      	cmp	r2, #1
 801165a:	d1fb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 801165c:	2302      	movs	r3, #2
 801165e:	2200      	movs	r2, #0
 8011660:	4601      	mov	r1, r0
 8011662:	4812      	ldr	r0, [pc, #72]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011664:	6800      	ldr	r0, [r0, #0]
 8011666:	f007 fa2f 	bl	8018ac8 <xQueueGenericSend>
 801166a:	e7f3      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 801166c:	4601      	mov	r1, r0
 801166e:	4b0f      	ldr	r3, [pc, #60]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	f007 fd3c 	bl	80190ee <xQueuePeek>
 8011676:	e7ed      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011678:	2a00      	cmp	r2, #0
 801167a:	d1eb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 801167c:	4601      	mov	r1, r0
 801167e:	4b0c      	ldr	r3, [pc, #48]	@ (80116b0 <RW_parameters_from_queue+0x68>)
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f007 fd34 	bl	80190ee <xQueuePeek>
 8011686:	e7e5      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011688:	b14a      	cbz	r2, 801169e <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 801168a:	2a01      	cmp	r2, #1
 801168c:	d1e2      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 801168e:	2302      	movs	r3, #2
 8011690:	2200      	movs	r2, #0
 8011692:	4601      	mov	r1, r0
 8011694:	4807      	ldr	r0, [pc, #28]	@ (80116b4 <RW_parameters_from_queue+0x6c>)
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	f007 fa16 	bl	8018ac8 <xQueueGenericSend>
}
 801169c:	e7da      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 801169e:	4601      	mov	r1, r0
 80116a0:	4b05      	ldr	r3, [pc, #20]	@ (80116b8 <RW_parameters_from_queue+0x70>)
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	f007 fd23 	bl	80190ee <xQueuePeek>
 80116a8:	e7d4      	b.n	8011654 <RW_parameters_from_queue+0xc>
 80116aa:	bf00      	nop
 80116ac:	20000898 	.word	0x20000898
 80116b0:	200008a4 	.word	0x200008a4
 80116b4:	2000089c 	.word	0x2000089c
 80116b8:	200008a0 	.word	0x200008a0

080116bc <StartLoggingTask>:
{
 80116bc:	b530      	push	{r4, r5, lr}
 80116be:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 80116c0:	483e      	ldr	r0, [pc, #248]	@ (80117bc <StartLoggingTask+0x100>)
 80116c2:	f000 fc0f 	bl	8011ee4 <reg_logging_fn>
	logger_set_level(L_INFO);
 80116c6:	2001      	movs	r0, #1
 80116c8:	f000 fc12 	bl	8011ef0 <logger_set_level>
	logging(L_INFO, "Device started...");
 80116cc:	493c      	ldr	r1, [pc, #240]	@ (80117c0 <StartLoggingTask+0x104>)
 80116ce:	2001      	movs	r0, #1
 80116d0:	f000 fc14 	bl	8011efc <logging>
	osDelay(2000);
 80116d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80116d8:	f006 fe97 	bl	801840a <osDelay>
	uint32_t count = 2000;
 80116dc:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80116e0:	e048      	b.n	8011774 <StartLoggingTask+0xb8>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80116e2:	2300      	movs	r3, #0
 80116e4:	461a      	mov	r2, r3
 80116e6:	a907      	add	r1, sp, #28
 80116e8:	4836      	ldr	r0, [pc, #216]	@ (80117c4 <StartLoggingTask+0x108>)
 80116ea:	6800      	ldr	r0, [r0, #0]
 80116ec:	f006 ffc7 	bl	801867e <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80116f0:	2102      	movs	r1, #2
 80116f2:	4835      	ldr	r0, [pc, #212]	@ (80117c8 <StartLoggingTask+0x10c>)
 80116f4:	f009 fa36 	bl	801ab64 <mg_fs_lfs_open>
 80116f8:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 80116fa:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80116fe:	f10d 011d 	add.w	r1, sp, #29
 8011702:	f009 fa6b 	bl	801abdc <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011706:	4628      	mov	r0, r5
 8011708:	f009 fa50 	bl	801abac <mg_fs_lfs_close>
 801170c:	e038      	b.n	8011780 <StartLoggingTask+0xc4>
    	vPortGetHeapStats(&heap_status);
 801170e:	a848      	add	r0, sp, #288	@ 0x120
 8011710:	f009 f942 	bl	801a998 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011714:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 801172a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 801172c:	4927      	ldr	r1, [pc, #156]	@ (80117cc <StartLoggingTask+0x110>)
 801172e:	2001      	movs	r0, #1
 8011730:	f000 fbe4 	bl	8011efc <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011734:	4c26      	ldr	r4, [pc, #152]	@ (80117d0 <StartLoggingTask+0x114>)
 8011736:	6863      	ldr	r3, [r4, #4]
 8011738:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801173a:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011748:	b2d2      	uxtb	r2, r2
 801174a:	4922      	ldr	r1, [pc, #136]	@ (80117d4 <StartLoggingTask+0x118>)
 801174c:	2001      	movs	r0, #1
 801174e:	f000 fbd5 	bl	8011efc <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011752:	6861      	ldr	r1, [r4, #4]
 8011754:	780a      	ldrb	r2, [r1, #0]
 8011756:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011758:	7888      	ldrb	r0, [r1, #2]
 801175a:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801175c:	790d      	ldrb	r5, [r1, #4]
 801175e:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011760:	9103      	str	r1, [sp, #12]
 8011762:	9502      	str	r5, [sp, #8]
 8011764:	9401      	str	r4, [sp, #4]
 8011766:	9000      	str	r0, [sp, #0]
 8011768:	491b      	ldr	r1, [pc, #108]	@ (80117d8 <StartLoggingTask+0x11c>)
 801176a:	2001      	movs	r0, #1
 801176c:	f000 fbc6 	bl	8011efc <logging>
    	count = 0;
 8011770:	2400      	movs	r4, #0
    count ++;
 8011772:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011774:	4b13      	ldr	r3, [pc, #76]	@ (80117c4 <StartLoggingTask+0x108>)
 8011776:	6818      	ldr	r0, [r3, #0]
 8011778:	f006 ffc2 	bl	8018700 <osMessageQueueGetCount>
 801177c:	2800      	cmp	r0, #0
 801177e:	d1b0      	bne.n	80116e2 <StartLoggingTask+0x26>
    osDelay(500);
 8011780:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011784:	f006 fe41 	bl	801840a <osDelay>
    if (count == 2000){
 8011788:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 801178c:	d1f1      	bne.n	8011772 <StartLoggingTask+0xb6>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801178e:	2200      	movs	r2, #0
 8011790:	a94f      	add	r1, sp, #316	@ 0x13c
 8011792:	480d      	ldr	r0, [pc, #52]	@ (80117c8 <StartLoggingTask+0x10c>)
 8011794:	f009 f9a8 	bl	801aae8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011798:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 801179a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801179e:	429a      	cmp	r2, r3
 80117a0:	d9b5      	bls.n	801170e <StartLoggingTask+0x52>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 80117a2:	4c0e      	ldr	r4, [pc, #56]	@ (80117dc <StartLoggingTask+0x120>)
 80117a4:	4620      	mov	r0, r4
 80117a6:	f009 fa4b 	bl	801ac40 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 80117aa:	4621      	mov	r1, r4
 80117ac:	4806      	ldr	r0, [pc, #24]	@ (80117c8 <StartLoggingTask+0x10c>)
 80117ae:	f009 fa3b 	bl	801ac28 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80117b2:	490b      	ldr	r1, [pc, #44]	@ (80117e0 <StartLoggingTask+0x124>)
 80117b4:	2001      	movs	r0, #1
 80117b6:	f000 fba1 	bl	8011efc <logging>
 80117ba:	e7a8      	b.n	801170e <StartLoggingTask+0x52>
 80117bc:	08011265 	.word	0x08011265
 80117c0:	08035f60 	.word	0x08035f60
 80117c4:	20000894 	.word	0x20000894
 80117c8:	08035f74 	.word	0x08035f74
 80117cc:	08035fa8 	.word	0x08035fa8
 80117d0:	200008c0 	.word	0x200008c0
 80117d4:	0803603c 	.word	0x0803603c
 80117d8:	08036058 	.word	0x08036058
 80117dc:	08035f84 	.word	0x08035f84
 80117e0:	08035f94 	.word	0x08035f94

080117e4 <StartWatchDogTask>:
{
 80117e4:	b508      	push	{r3, lr}
	HAL_IWDG_Refresh(&hiwdg);
 80117e6:	4804      	ldr	r0, [pc, #16]	@ (80117f8 <StartWatchDogTask+0x14>)
 80117e8:	f005 fade 	bl	8016da8 <HAL_IWDG_Refresh>
    osDelay(500);
 80117ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80117f0:	f006 fe0b 	bl	801840a <osDelay>
  for(;;)
 80117f4:	e7f7      	b.n	80117e6 <StartWatchDogTask+0x2>
 80117f6:	bf00      	nop
 80117f8:	2000091c 	.word	0x2000091c

080117fc <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80117fc:	b500      	push	{lr}
 80117fe:	b087      	sub	sp, #28
 8011800:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8011804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011808:	9300      	str	r3, [sp, #0]
 801180a:	2301      	movs	r3, #1
 801180c:	f10d 0217 	add.w	r2, sp, #23
 8011810:	f10d 010f 	add.w	r1, sp, #15
 8011814:	4803      	ldr	r0, [pc, #12]	@ (8011824 <EthTxn+0x28>)
 8011816:	f006 f856 	bl	80178c6 <HAL_SPI_TransmitReceive>
}
 801181a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801181e:	b007      	add	sp, #28
 8011820:	f85d fb04 	ldr.w	pc, [sp], #4
 8011824:	2000092c 	.word	0x2000092c

08011828 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011828:	b500      	push	{lr}
 801182a:	b083      	sub	sp, #12
 801182c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011834:	2201      	movs	r2, #1
 8011836:	f10d 0107 	add.w	r1, sp, #7
 801183a:	4803      	ldr	r0, [pc, #12]	@ (8011848 <FlashSPIsendByte+0x20>)
 801183c:	f005 ff61 	bl	8017702 <HAL_SPI_Transmit>
}
 8011840:	b003      	add	sp, #12
 8011842:	f85d fb04 	ldr.w	pc, [sp], #4
 8011846:	bf00      	nop
 8011848:	20000984 	.word	0x20000984

0801184c <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 801184c:	b508      	push	{r3, lr}
 801184e:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011854:	4601      	mov	r1, r0
 8011856:	4802      	ldr	r0, [pc, #8]	@ (8011860 <FlashSPIrecvBuff+0x14>)
 8011858:	f006 f95f 	bl	8017b1a <HAL_SPI_Receive>
}
 801185c:	bd08      	pop	{r3, pc}
 801185e:	bf00      	nop
 8011860:	20000984 	.word	0x20000984

08011864 <FS_Lock>:
void FS_Lock(void * param){
 8011864:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8011866:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801186a:	4b02      	ldr	r3, [pc, #8]	@ (8011874 <FS_Lock+0x10>)
 801186c:	6818      	ldr	r0, [r3, #0]
 801186e:	f006 fe23 	bl	80184b8 <osMutexAcquire>
}
 8011872:	bd08      	pop	{r3, pc}
 8011874:	2000088c 	.word	0x2000088c

08011878 <FS_Unlock>:
void FS_Unlock(void * param){
 8011878:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 801187a:	4b02      	ldr	r3, [pc, #8]	@ (8011884 <FS_Unlock+0xc>)
 801187c:	6818      	ldr	r0, [r3, #0]
 801187e:	f006 fe4a 	bl	8018516 <osMutexRelease>
}
 8011882:	bd08      	pop	{r3, pc}
 8011884:	2000088c 	.word	0x2000088c

08011888 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011888:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 801188a:	482c      	ldr	r0, [pc, #176]	@ (801193c <MX_FREERTOS_Init+0xb4>)
 801188c:	f006 fdcb 	bl	8018426 <osMutexNew>
 8011890:	4b2b      	ldr	r3, [pc, #172]	@ (8011940 <MX_FREERTOS_Init+0xb8>)
 8011892:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 8011894:	482b      	ldr	r0, [pc, #172]	@ (8011944 <MX_FREERTOS_Init+0xbc>)
 8011896:	f006 fdc6 	bl	8018426 <osMutexNew>
 801189a:	4b2b      	ldr	r3, [pc, #172]	@ (8011948 <MX_FREERTOS_Init+0xc0>)
 801189c:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 801189e:	4a2b      	ldr	r2, [pc, #172]	@ (801194c <MX_FREERTOS_Init+0xc4>)
 80118a0:	2103      	movs	r1, #3
 80118a2:	2001      	movs	r0, #1
 80118a4:	f006 fe5e 	bl	8018564 <osMessageQueueNew>
 80118a8:	4b29      	ldr	r3, [pc, #164]	@ (8011950 <MX_FREERTOS_Init+0xc8>)
 80118aa:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 80118ac:	4a29      	ldr	r2, [pc, #164]	@ (8011954 <MX_FREERTOS_Init+0xcc>)
 80118ae:	2103      	movs	r1, #3
 80118b0:	2001      	movs	r0, #1
 80118b2:	f006 fe57 	bl	8018564 <osMessageQueueNew>
 80118b6:	4b28      	ldr	r3, [pc, #160]	@ (8011958 <MX_FREERTOS_Init+0xd0>)
 80118b8:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 80118ba:	4a28      	ldr	r2, [pc, #160]	@ (801195c <MX_FREERTOS_Init+0xd4>)
 80118bc:	2103      	movs	r1, #3
 80118be:	2001      	movs	r0, #1
 80118c0:	f006 fe50 	bl	8018564 <osMessageQueueNew>
 80118c4:	4b26      	ldr	r3, [pc, #152]	@ (8011960 <MX_FREERTOS_Init+0xd8>)
 80118c6:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80118c8:	4a26      	ldr	r2, [pc, #152]	@ (8011964 <MX_FREERTOS_Init+0xdc>)
 80118ca:	21c6      	movs	r1, #198	@ 0xc6
 80118cc:	2001      	movs	r0, #1
 80118ce:	f006 fe49 	bl	8018564 <osMessageQueueNew>
 80118d2:	4b25      	ldr	r3, [pc, #148]	@ (8011968 <MX_FREERTOS_Init+0xe0>)
 80118d4:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80118d6:	4a25      	ldr	r2, [pc, #148]	@ (801196c <MX_FREERTOS_Init+0xe4>)
 80118d8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80118dc:	200f      	movs	r0, #15
 80118de:	f006 fe41 	bl	8018564 <osMessageQueueNew>
 80118e2:	4b23      	ldr	r3, [pc, #140]	@ (8011970 <MX_FREERTOS_Init+0xe8>)
 80118e4:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 80118e6:	4a23      	ldr	r2, [pc, #140]	@ (8011974 <MX_FREERTOS_Init+0xec>)
 80118e8:	2100      	movs	r1, #0
 80118ea:	4823      	ldr	r0, [pc, #140]	@ (8011978 <MX_FREERTOS_Init+0xf0>)
 80118ec:	f006 fd2e 	bl	801834c <osThreadNew>
 80118f0:	4b22      	ldr	r3, [pc, #136]	@ (801197c <MX_FREERTOS_Init+0xf4>)
 80118f2:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 80118f4:	4a22      	ldr	r2, [pc, #136]	@ (8011980 <MX_FREERTOS_Init+0xf8>)
 80118f6:	2100      	movs	r1, #0
 80118f8:	4822      	ldr	r0, [pc, #136]	@ (8011984 <MX_FREERTOS_Init+0xfc>)
 80118fa:	f006 fd27 	bl	801834c <osThreadNew>
 80118fe:	4b22      	ldr	r3, [pc, #136]	@ (8011988 <MX_FREERTOS_Init+0x100>)
 8011900:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8011902:	4a22      	ldr	r2, [pc, #136]	@ (801198c <MX_FREERTOS_Init+0x104>)
 8011904:	2100      	movs	r1, #0
 8011906:	4822      	ldr	r0, [pc, #136]	@ (8011990 <MX_FREERTOS_Init+0x108>)
 8011908:	f006 fd20 	bl	801834c <osThreadNew>
 801190c:	4b21      	ldr	r3, [pc, #132]	@ (8011994 <MX_FREERTOS_Init+0x10c>)
 801190e:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 8011910:	4a21      	ldr	r2, [pc, #132]	@ (8011998 <MX_FREERTOS_Init+0x110>)
 8011912:	2100      	movs	r1, #0
 8011914:	4821      	ldr	r0, [pc, #132]	@ (801199c <MX_FREERTOS_Init+0x114>)
 8011916:	f006 fd19 	bl	801834c <osThreadNew>
 801191a:	4b21      	ldr	r3, [pc, #132]	@ (80119a0 <MX_FREERTOS_Init+0x118>)
 801191c:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 801191e:	4a21      	ldr	r2, [pc, #132]	@ (80119a4 <MX_FREERTOS_Init+0x11c>)
 8011920:	2100      	movs	r1, #0
 8011922:	4821      	ldr	r0, [pc, #132]	@ (80119a8 <MX_FREERTOS_Init+0x120>)
 8011924:	f006 fd12 	bl	801834c <osThreadNew>
 8011928:	4b20      	ldr	r3, [pc, #128]	@ (80119ac <MX_FREERTOS_Init+0x124>)
 801192a:	6018      	str	r0, [r3, #0]
  WatchDogHandle = osThreadNew(StartWatchDogTask, NULL, &WatchDog_attributes);
 801192c:	4a20      	ldr	r2, [pc, #128]	@ (80119b0 <MX_FREERTOS_Init+0x128>)
 801192e:	2100      	movs	r1, #0
 8011930:	4820      	ldr	r0, [pc, #128]	@ (80119b4 <MX_FREERTOS_Init+0x12c>)
 8011932:	f006 fd0b 	bl	801834c <osThreadNew>
 8011936:	4b20      	ldr	r3, [pc, #128]	@ (80119b8 <MX_FREERTOS_Init+0x130>)
 8011938:	6018      	str	r0, [r3, #0]
}
 801193a:	bd08      	pop	{r3, pc}
 801193c:	08036168 	.word	0x08036168
 8011940:	20000890 	.word	0x20000890
 8011944:	08036158 	.word	0x08036158
 8011948:	2000088c 	.word	0x2000088c
 801194c:	080361d8 	.word	0x080361d8
 8011950:	200008a4 	.word	0x200008a4
 8011954:	080361c0 	.word	0x080361c0
 8011958:	200008a0 	.word	0x200008a0
 801195c:	080361a8 	.word	0x080361a8
 8011960:	2000089c 	.word	0x2000089c
 8011964:	08036190 	.word	0x08036190
 8011968:	20000898 	.word	0x20000898
 801196c:	08036178 	.word	0x08036178
 8011970:	20000894 	.word	0x20000894
 8011974:	080362a4 	.word	0x080362a4
 8011978:	080119e5 	.word	0x080119e5
 801197c:	200008bc 	.word	0x200008bc
 8011980:	08036280 	.word	0x08036280
 8011984:	0801112d 	.word	0x0801112d
 8011988:	200008b8 	.word	0x200008b8
 801198c:	0803625c 	.word	0x0803625c
 8011990:	0801128d 	.word	0x0801128d
 8011994:	200008b4 	.word	0x200008b4
 8011998:	08036238 	.word	0x08036238
 801199c:	08011405 	.word	0x08011405
 80119a0:	200008b0 	.word	0x200008b0
 80119a4:	08036214 	.word	0x08036214
 80119a8:	080116bd 	.word	0x080116bd
 80119ac:	200008ac 	.word	0x200008ac
 80119b0:	080361f0 	.word	0x080361f0
 80119b4:	080117e5 	.word	0x080117e5
 80119b8:	200008a8 	.word	0x200008a8

080119bc <EthResetBegin>:
void EthResetBegin(void){
 80119bc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 80119be:	2200      	movs	r2, #0
 80119c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119c4:	4801      	ldr	r0, [pc, #4]	@ (80119cc <EthResetBegin+0x10>)
 80119c6:	f004 fdae 	bl	8016526 <HAL_GPIO_WritePin>
}
 80119ca:	bd08      	pop	{r3, pc}
 80119cc:	40020000 	.word	0x40020000

080119d0 <EthResetEnd>:
void EthResetEnd(void){
 80119d0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80119d2:	2201      	movs	r2, #1
 80119d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119d8:	4801      	ldr	r0, [pc, #4]	@ (80119e0 <EthResetEnd+0x10>)
 80119da:	f004 fda4 	bl	8016526 <HAL_GPIO_WritePin>
}
 80119de:	bd08      	pop	{r3, pc}
 80119e0:	40020000 	.word	0x40020000

080119e4 <StartEthTask>:
{
 80119e4:	b530      	push	{r4, r5, lr}
 80119e6:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 80119e8:	ad22      	add	r5, sp, #136	@ 0x88
 80119ea:	4b64      	ldr	r3, [pc, #400]	@ (8011b7c <StartEthTask+0x198>)
 80119ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 80119f2:	ac02      	add	r4, sp, #8
 80119f4:	2280      	movs	r2, #128	@ 0x80
 80119f6:	2100      	movs	r1, #0
 80119f8:	4620      	mov	r0, r4
 80119fa:	f01a ff41 	bl	802c880 <memset>
 80119fe:	2340      	movs	r3, #64	@ 0x40
 8011a00:	f88d 3008 	strb.w	r3, [sp, #8]
 8011a04:	2322      	movs	r3, #34	@ 0x22
 8011a06:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 8011a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8011b80 <StartEthTask+0x19c>)
 8011a0c:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 8011a0e:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 8011a12:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 8011a14:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 8011a18:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 8011a1a:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 8011a1e:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 8011a20:	f88d 300d 	strb.w	r3, [sp, #13]
 8011a24:	2301      	movs	r3, #1
 8011a26:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8011a2a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011a2e:	4b55      	ldr	r3, [pc, #340]	@ (8011b84 <StartEthTask+0x1a0>)
 8011a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a32:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011a34:	4b54      	ldr	r3, [pc, #336]	@ (8011b88 <StartEthTask+0x1a4>)
 8011a36:	aa58      	add	r2, sp, #352	@ 0x160
 8011a38:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011a3a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011a3c:	e003      	b.n	8011a46 <StartEthTask+0x62>
	  osDelay(500);
 8011a3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a42:	f006 fce2 	bl	801840a <osDelay>
  while (mg_fs_mounted() == 0){
 8011a46:	f009 f913 	bl	801ac70 <mg_fs_mounted>
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	d0f7      	beq.n	8011a3e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011a4e:	a858      	add	r0, sp, #352	@ 0x160
 8011a50:	f011 fd08 	bl	8023464 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011a54:	4b4d      	ldr	r3, [pc, #308]	@ (8011b8c <StartEthTask+0x1a8>)
 8011a56:	2203      	movs	r2, #3
 8011a58:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011a5a:	f002 fed7 	bl	801480c <dash_hdl>
 8011a5e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011a60:	e00f      	b.n	8011a82 <StartEthTask+0x9e>
	  EthResetBegin();
 8011a62:	f7ff ffab 	bl	80119bc <EthResetBegin>
	  osDelay(500);
 8011a66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a6a:	f006 fcce 	bl	801840a <osDelay>
	  EthResetEnd();
 8011a6e:	f7ff ffaf 	bl	80119d0 <EthResetEnd>
	  osDelay(2000);
 8011a72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a76:	f006 fcc8 	bl	801840a <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011a7a:	a902      	add	r1, sp, #8
 8011a7c:	a858      	add	r0, sp, #352	@ 0x160
 8011a7e:	f017 f921 	bl	8028cc4 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011a82:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d0eb      	beq.n	8011a62 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011a8a:	2106      	movs	r1, #6
 8011a8c:	a802      	add	r0, sp, #8
 8011a8e:	f003 fae9 	bl	8015064 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011a92:	483f      	ldr	r0, [pc, #252]	@ (8011b90 <StartEthTask+0x1ac>)
 8011a94:	f002 fec8 	bl	8014828 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011a98:	4b3b      	ldr	r3, [pc, #236]	@ (8011b88 <StartEthTask+0x1a4>)
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	493d      	ldr	r1, [pc, #244]	@ (8011b94 <StartEthTask+0x1b0>)
 8011a9e:	a858      	add	r0, sp, #352	@ 0x160
 8011aa0:	f015 fb3e 	bl	8027120 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011aa4:	e006      	b.n	8011ab4 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011aa6:	2101      	movs	r1, #1
 8011aa8:	a858      	add	r0, sp, #352	@ 0x160
 8011aaa:	f017 fea5 	bl	80297f8 <mg_mgr_poll>
    osDelay(1);
 8011aae:	2001      	movs	r0, #1
 8011ab0:	f006 fcab 	bl	801840a <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011ab4:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011ab8:	2b03      	cmp	r3, #3
 8011aba:	d1f4      	bne.n	8011aa6 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011abc:	4b32      	ldr	r3, [pc, #200]	@ (8011b88 <StartEthTask+0x1a4>)
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011ac2:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011ad0:	b2d2      	uxtb	r2, r2
 8011ad2:	4931      	ldr	r1, [pc, #196]	@ (8011b98 <StartEthTask+0x1b4>)
 8011ad4:	2001      	movs	r0, #1
 8011ad6:	f000 fa11 	bl	8011efc <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011ada:	2200      	movs	r2, #0
 8011adc:	4611      	mov	r1, r2
 8011ade:	a826      	add	r0, sp, #152	@ 0x98
 8011ae0:	f7ff fdb2 	bl	8011648 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011ae4:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011ae8:	b1eb      	cbz	r3, 8011b26 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011aea:	492c      	ldr	r1, [pc, #176]	@ (8011b9c <StartEthTask+0x1b8>)
 8011aec:	2001      	movs	r0, #1
 8011aee:	f000 fa05 	bl	8011efc <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011af2:	4b27      	ldr	r3, [pc, #156]	@ (8011b90 <StartEthTask+0x1ac>)
 8011af4:	9301      	str	r3, [sp, #4]
 8011af6:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	ab47      	add	r3, sp, #284	@ 0x11c
 8011afe:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011b02:	a902      	add	r1, sp, #8
 8011b04:	a858      	add	r0, sp, #352	@ 0x160
 8011b06:	f003 f9eb 	bl	8014ee0 <mqtt_init>
  start_sntp(&mgr);
 8011b0a:	a858      	add	r0, sp, #352	@ 0x160
 8011b0c:	f003 fe80 	bl	8015810 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011b10:	a902      	add	r1, sp, #8
 8011b12:	a858      	add	r0, sp, #352	@ 0x160
 8011b14:	f004 f848 	bl	8015ba8 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011b18:	a858      	add	r0, sp, #352	@ 0x160
 8011b1a:	f001 f851 	bl	8012bc0 <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011b1e:	f007 fed1 	bl	80198c4 <xTaskGetTickCount>
 8011b22:	4605      	mov	r5, r0
 8011b24:	e008      	b.n	8011b38 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011b26:	491e      	ldr	r1, [pc, #120]	@ (8011ba0 <StartEthTask+0x1bc>)
 8011b28:	2001      	movs	r0, #1
 8011b2a:	f000 f9e7 	bl	8011efc <logging>
 8011b2e:	e7ec      	b.n	8011b0a <StartEthTask+0x126>
      osDelay(1);
 8011b30:	2001      	movs	r0, #1
 8011b32:	f006 fc6a 	bl	801840a <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011b36:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011b38:	f007 fec4 	bl	80198c4 <xTaskGetTickCount>
 8011b3c:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011b3e:	1b41      	subs	r1, r0, r5
 8011b40:	a858      	add	r0, sp, #352	@ 0x160
 8011b42:	f017 fe59 	bl	80297f8 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	a802      	add	r0, sp, #8
 8011b4c:	4798      	blx	r3
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d1ee      	bne.n	8011b30 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011b52:	f7ff ff33 	bl	80119bc <EthResetBegin>
    	  osDelay(100);
 8011b56:	2064      	movs	r0, #100	@ 0x64
 8011b58:	f006 fc57 	bl	801840a <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011b5c:	f7ff ff38 	bl	80119d0 <EthResetEnd>
    	  osDelay(3000);
 8011b60:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011b64:	f006 fc51 	bl	801840a <osDelay>
    	  mif.driver->init(&mif);
 8011b68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	a802      	add	r0, sp, #8
 8011b6e:	4798      	blx	r3
    	  osDelay(7000);
 8011b70:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011b74:	f006 fc49 	bl	801840a <osDelay>
 8011b78:	e7e5      	b.n	8011b46 <StartEthTask+0x162>
 8011b7a:	bf00      	nop
 8011b7c:	08035bb4 	.word	0x08035bb4
 8011b80:	1fff7a00 	.word	0x1fff7a00
 8011b84:	20000118 	.word	0x20000118
 8011b88:	200008c0 	.word	0x200008c0
 8011b8c:	2000012c 	.word	0x2000012c
 8011b90:	08011649 	.word	0x08011649
 8011b94:	08036080 	.word	0x08036080
 8011b98:	0803603c 	.word	0x0803603c
 8011b9c:	08036094 	.word	0x08036094
 8011ba0:	080360ac 	.word	0x080360ac

08011ba4 <eMBRegDiscreteCB>:
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

	eMBErrorCode eStatus = MB_ENOERR;

	//usAddress --; /* to c-style address */
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011ba4:	b20b      	sxth	r3, r1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	dd20      	ble.n	8011bec <eMBRegDiscreteCB+0x48>
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){
 8011baa:	b570      	push	{r4, r5, r6, lr}
 8011bac:	b082      	sub	sp, #8
 8011bae:	4606      	mov	r6, r0
 8011bb0:	4615      	mov	r5, r2
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bb2:	188b      	adds	r3, r1, r2
 8011bb4:	2b04      	cmp	r3, #4
 8011bb6:	dd02      	ble.n	8011bbe <eMBRegDiscreteCB+0x1a>

		for(int i = usAddress; i < usNDiscrete; i++){
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
		}
	}else{
		eStatus = MB_ENOREG;
 8011bb8:	2001      	movs	r0, #1
	}
	return eStatus;
}
 8011bba:	b002      	add	sp, #8
 8011bbc:	bd70      	pop	{r4, r5, r6, pc}
		usAddress --; /* to c-style address */
 8011bbe:	1e4c      	subs	r4, r1, #1
 8011bc0:	b2a4      	uxth	r4, r4
		RW_parameters_from_queue(input, S_INPUTS, S_READ);
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	a801      	add	r0, sp, #4
 8011bc8:	f7ff fd3e 	bl	8011648 <RW_parameters_from_queue>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011bcc:	e00a      	b.n	8011be4 <eMBRegDiscreteCB+0x40>
			xMBUtilSetBits( pucRegBuffer, i, 1, input[i] );
 8011bce:	f104 0308 	add.w	r3, r4, #8
 8011bd2:	446b      	add	r3, sp
 8011bd4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011bd8:	2201      	movs	r2, #1
 8011bda:	b2a1      	uxth	r1, r4
 8011bdc:	4630      	mov	r0, r6
 8011bde:	f000 fe45 	bl	801286c <xMBUtilSetBits>
		for(int i = usAddress; i < usNDiscrete; i++){
 8011be2:	3401      	adds	r4, #1
 8011be4:	42a5      	cmp	r5, r4
 8011be6:	dcf2      	bgt.n	8011bce <eMBRegDiscreteCB+0x2a>
	eMBErrorCode eStatus = MB_ENOERR;
 8011be8:	2000      	movs	r0, #0
	if (((int16_t) usAddress >= INPUTS_FIRST_INDEX) && (usAddress + usNDiscrete <= INPUTS_FIRST_INDEX + INPUTS_COUNT)){
 8011bea:	e7e6      	b.n	8011bba <eMBRegDiscreteCB+0x16>
		eStatus = MB_ENOREG;
 8011bec:	2001      	movs	r0, #1
}
 8011bee:	4770      	bx	lr

08011bf0 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8011bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	4616      	mov	r6, r2
	eMBErrorCode eStatus = MB_ENOERR;

	if (((int16_t) usAddress >= OUTPUTS_FIRST_INDEX) && (usAddress + usNCoils <= OUTPUTS_FIRST_INDEX + OUTPUTS_COUNT)){
 8011bf6:	b20a      	sxth	r2, r1
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	dd43      	ble.n	8011c84 <eMBRegCoilsCB+0x94>
 8011bfc:	4605      	mov	r5, r0
 8011bfe:	461f      	mov	r7, r3
 8011c00:	198b      	adds	r3, r1, r6
 8011c02:	2b04      	cmp	r3, #4
 8011c04:	dc41      	bgt.n	8011c8a <eMBRegCoilsCB+0x9a>
		outputs_state_t outputs;

		switch (eMode) {
 8011c06:	b327      	cbz	r7, 8011c52 <eMBRegCoilsCB+0x62>
 8011c08:	2f01      	cmp	r7, #1
 8011c0a:	d139      	bne.n	8011c80 <eMBRegCoilsCB+0x90>

			case MB_REG_WRITE:
				usAddress --; /* to c-style address */
 8011c0c:	3901      	subs	r1, #1
 8011c0e:	b28c      	uxth	r4, r1
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c10:	2200      	movs	r2, #0
 8011c12:	2102      	movs	r1, #2
 8011c14:	a801      	add	r0, sp, #4
 8011c16:	f7ff fd17 	bl	8011648 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c1a:	4627      	mov	r7, r4
 8011c1c:	e00f      	b.n	8011c3e <eMBRegCoilsCB+0x4e>
					UCHAR wbit = xMBUtilGetBits(pucRegBuffer, i, 1 );
 8011c1e:	2201      	movs	r2, #1
 8011c20:	b2b9      	uxth	r1, r7
 8011c22:	4628      	mov	r0, r5
 8011c24:	f000 fe56 	bl	80128d4 <xMBUtilGetBits>
					outputs[i] = xMBUtilGetBits(pucRegBuffer, 0, 1 );
 8011c28:	2201      	movs	r2, #1
 8011c2a:	2100      	movs	r1, #0
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	f000 fe51 	bl	80128d4 <xMBUtilGetBits>
 8011c32:	f107 0308 	add.w	r3, r7, #8
 8011c36:	446b      	add	r3, sp
 8011c38:	f803 0c04 	strb.w	r0, [r3, #-4]
				for(int i = usAddress; i < usNCoils + usAddress; i++){
 8011c3c:	3701      	adds	r7, #1
 8011c3e:	1933      	adds	r3, r6, r4
 8011c40:	42bb      	cmp	r3, r7
 8011c42:	dcec      	bgt.n	8011c1e <eMBRegCoilsCB+0x2e>
					//xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
				}
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_WRITE);
 8011c44:	2201      	movs	r2, #1
 8011c46:	2102      	movs	r1, #2
 8011c48:	a801      	add	r0, sp, #4
 8011c4a:	f7ff fcfd 	bl	8011648 <RW_parameters_from_queue>
				return MB_ENOERR;
 8011c4e:	2000      	movs	r0, #0
 8011c50:	e019      	b.n	8011c86 <eMBRegCoilsCB+0x96>
				break;
			case MB_REG_READ:
				usAddress --; /* to c-style address */
 8011c52:	1e4c      	subs	r4, r1, #1
 8011c54:	b2a4      	uxth	r4, r4
				RW_parameters_from_queue(outputs, S_OUTPUTS, S_READ);
 8011c56:	2200      	movs	r2, #0
 8011c58:	2102      	movs	r1, #2
 8011c5a:	a801      	add	r0, sp, #4
 8011c5c:	f7ff fcf4 	bl	8011648 <RW_parameters_from_queue>
				for(int i = usAddress; i < usNCoils; i++){
 8011c60:	e00a      	b.n	8011c78 <eMBRegCoilsCB+0x88>
					xMBUtilSetBits( pucRegBuffer, i, 1, outputs[i] );
 8011c62:	f104 0308 	add.w	r3, r4, #8
 8011c66:	446b      	add	r3, sp
 8011c68:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8011c6c:	2201      	movs	r2, #1
 8011c6e:	b2a1      	uxth	r1, r4
 8011c70:	4628      	mov	r0, r5
 8011c72:	f000 fdfb 	bl	801286c <xMBUtilSetBits>
				for(int i = usAddress; i < usNCoils; i++){
 8011c76:	3401      	adds	r4, #1
 8011c78:	42a6      	cmp	r6, r4
 8011c7a:	dcf2      	bgt.n	8011c62 <eMBRegCoilsCB+0x72>
				}
				return MB_ENOERR;
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	e002      	b.n	8011c86 <eMBRegCoilsCB+0x96>
		switch (eMode) {
 8011c80:	2001      	movs	r0, #1
				break;
			default:
				return MB_ENOREG;
				break;
 8011c82:	e000      	b.n	8011c86 <eMBRegCoilsCB+0x96>
		}
	}
	return MB_ENOREG;
 8011c84:	2001      	movs	r0, #1
}
 8011c86:	b003      	add	sp, #12
 8011c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return MB_ENOREG;
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	e7fb      	b.n	8011c86 <eMBRegCoilsCB+0x96>

08011c8e <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
	return MB_ENOREG;
}
 8011c8e:	2001      	movs	r0, #1
 8011c90:	4770      	bx	lr

08011c92 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
	return MB_ENOREG;
}
 8011c92:	2001      	movs	r0, #1
 8011c94:	4770      	bx	lr
	...

08011c98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c9c:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c9e:	2400      	movs	r4, #0
 8011ca0:	9403      	str	r4, [sp, #12]
 8011ca2:	9404      	str	r4, [sp, #16]
 8011ca4:	9405      	str	r4, [sp, #20]
 8011ca6:	9406      	str	r4, [sp, #24]
 8011ca8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011caa:	9400      	str	r4, [sp, #0]
 8011cac:	4b3c      	ldr	r3, [pc, #240]	@ (8011da0 <MX_GPIO_Init+0x108>)
 8011cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011cb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cb8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011cbc:	9200      	str	r2, [sp, #0]
 8011cbe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011cc0:	9401      	str	r4, [sp, #4]
 8011cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cc4:	f042 0201 	orr.w	r2, r2, #1
 8011cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ccc:	f002 0201 	and.w	r2, r2, #1
 8011cd0:	9201      	str	r2, [sp, #4]
 8011cd2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011cd4:	9402      	str	r4, [sp, #8]
 8011cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cd8:	f042 0202 	orr.w	r2, r2, #2
 8011cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ce0:	f003 0302 	and.w	r3, r3, #2
 8011ce4:	9302      	str	r3, [sp, #8]
 8011ce6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011ce8:	4e2e      	ldr	r6, [pc, #184]	@ (8011da4 <MX_GPIO_Init+0x10c>)
 8011cea:	4622      	mov	r2, r4
 8011cec:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	f004 fc18 	bl	8016526 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011cf6:	4d2c      	ldr	r5, [pc, #176]	@ (8011da8 <MX_GPIO_Init+0x110>)
 8011cf8:	4622      	mov	r2, r4
 8011cfa:	2107      	movs	r1, #7
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f004 fc12 	bl	8016526 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011d02:	2201      	movs	r2, #1
 8011d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f004 fc0c 	bl	8016526 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011d0e:	2201      	movs	r2, #1
 8011d10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011d14:	4630      	mov	r0, r6
 8011d16:	f004 fc06 	bl	8016526 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011d1a:	f04f 0907 	mov.w	r9, #7
 8011d1e:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d22:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011d24:	f04f 0802 	mov.w	r8, #2
 8011d28:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d2c:	a903      	add	r1, sp, #12
 8011d2e:	4630      	mov	r0, r6
 8011d30:	f004 fa86 	bl	8016240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011d34:	23e0      	movs	r3, #224	@ 0xe0
 8011d36:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d38:	2701      	movs	r7, #1
 8011d3a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d3c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d3e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d40:	a903      	add	r1, sp, #12
 8011d42:	4630      	mov	r0, r6
 8011d44:	f004 fa7c 	bl	8016240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011d48:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d4c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d4e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d50:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d52:	a903      	add	r1, sp, #12
 8011d54:	4628      	mov	r0, r5
 8011d56:	f004 fa73 	bl	8016240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d5e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d60:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d62:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d64:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011d68:	a903      	add	r1, sp, #12
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	f004 fa68 	bl	8016240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011d70:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011d74:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d76:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d78:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d7a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d7e:	a903      	add	r1, sp, #12
 8011d80:	4630      	mov	r0, r6
 8011d82:	f004 fa5d 	bl	8016240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011d8a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d8c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d8e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011d90:	a903      	add	r1, sp, #12
 8011d92:	4628      	mov	r0, r5
 8011d94:	f004 fa54 	bl	8016240 <HAL_GPIO_Init>

}
 8011d98:	b009      	add	sp, #36	@ 0x24
 8011d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d9e:	bf00      	nop
 8011da0:	40023800 	.word	0x40023800
 8011da4:	40020000 	.word	0x40020000
 8011da8:	40020400 	.word	0x40020400

08011dac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011dac:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011dae:	480b      	ldr	r0, [pc, #44]	@ (8011ddc <MX_I2C1_Init+0x30>)
 8011db0:	4b0b      	ldr	r3, [pc, #44]	@ (8011de0 <MX_I2C1_Init+0x34>)
 8011db2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011db4:	4b0b      	ldr	r3, [pc, #44]	@ (8011de4 <MX_I2C1_Init+0x38>)
 8011db6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011db8:	2300      	movs	r3, #0
 8011dba:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011dbc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011dc2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011dc4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011dc6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011dc8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011dca:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011dcc:	f004 fd42 	bl	8016854 <HAL_I2C_Init>
 8011dd0:	b900      	cbnz	r0, 8011dd4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011dd2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011dd4:	f000 f93c 	bl	8012050 <Error_Handler>
}
 8011dd8:	e7fb      	b.n	8011dd2 <MX_I2C1_Init+0x26>
 8011dda:	bf00      	nop
 8011ddc:	200008c8 	.word	0x200008c8
 8011de0:	40005400 	.word	0x40005400
 8011de4:	00030d40 	.word	0x00030d40

08011de8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011de8:	b530      	push	{r4, r5, lr}
 8011dea:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011dec:	2300      	movs	r3, #0
 8011dee:	9303      	str	r3, [sp, #12]
 8011df0:	9304      	str	r3, [sp, #16]
 8011df2:	9305      	str	r3, [sp, #20]
 8011df4:	9306      	str	r3, [sp, #24]
 8011df6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011df8:	6802      	ldr	r2, [r0, #0]
 8011dfa:	4b15      	ldr	r3, [pc, #84]	@ (8011e50 <HAL_I2C_MspInit+0x68>)
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d001      	beq.n	8011e04 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011e00:	b009      	add	sp, #36	@ 0x24
 8011e02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e04:	2500      	movs	r5, #0
 8011e06:	9501      	str	r5, [sp, #4]
 8011e08:	4c12      	ldr	r4, [pc, #72]	@ (8011e54 <HAL_I2C_MspInit+0x6c>)
 8011e0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e0c:	f043 0302 	orr.w	r3, r3, #2
 8011e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e14:	f003 0302 	and.w	r3, r3, #2
 8011e18:	9301      	str	r3, [sp, #4]
 8011e1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011e1c:	23c0      	movs	r3, #192	@ 0xc0
 8011e1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011e20:	2312      	movs	r3, #18
 8011e22:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011e24:	2301      	movs	r3, #1
 8011e26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e28:	2303      	movs	r3, #3
 8011e2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011e2c:	2304      	movs	r3, #4
 8011e2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e30:	a903      	add	r1, sp, #12
 8011e32:	4809      	ldr	r0, [pc, #36]	@ (8011e58 <HAL_I2C_MspInit+0x70>)
 8011e34:	f004 fa04 	bl	8016240 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011e38:	9502      	str	r5, [sp, #8]
 8011e3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011e40:	6423      	str	r3, [r4, #64]	@ 0x40
 8011e42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011e48:	9302      	str	r3, [sp, #8]
 8011e4a:	9b02      	ldr	r3, [sp, #8]
}
 8011e4c:	e7d8      	b.n	8011e00 <HAL_I2C_MspInit+0x18>
 8011e4e:	bf00      	nop
 8011e50:	40005400 	.word	0x40005400
 8011e54:	40023800 	.word	0x40023800
 8011e58:	40020400 	.word	0x40020400

08011e5c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011e5c:	6802      	ldr	r2, [r0, #0]
 8011e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8011e88 <HAL_I2C_MspDeInit+0x2c>)
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d000      	beq.n	8011e66 <HAL_I2C_MspDeInit+0xa>
 8011e64:	4770      	bx	lr
{
 8011e66:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011e68:	4a08      	ldr	r2, [pc, #32]	@ (8011e8c <HAL_I2C_MspDeInit+0x30>)
 8011e6a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011e6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011e70:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011e72:	4c07      	ldr	r4, [pc, #28]	@ (8011e90 <HAL_I2C_MspDeInit+0x34>)
 8011e74:	2140      	movs	r1, #64	@ 0x40
 8011e76:	4620      	mov	r0, r4
 8011e78:	f004 fac6 	bl	8016408 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011e7c:	2180      	movs	r1, #128	@ 0x80
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f004 fac2 	bl	8016408 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	bf00      	nop
 8011e88:	40005400 	.word	0x40005400
 8011e8c:	40023800 	.word	0x40023800
 8011e90:	40020400 	.word	0x40020400

08011e94 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8011e94:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011e96:	4807      	ldr	r0, [pc, #28]	@ (8011eb4 <MX_IWDG_Init+0x20>)
 8011e98:	4b07      	ldr	r3, [pc, #28]	@ (8011eb8 <MX_IWDG_Init+0x24>)
 8011e9a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8011ea0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8011ea4:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011ea6:	f004 ff53 	bl	8016d50 <HAL_IWDG_Init>
 8011eaa:	b900      	cbnz	r0, 8011eae <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011eac:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011eae:	f000 f8cf 	bl	8012050 <Error_Handler>
}
 8011eb2:	e7fb      	b.n	8011eac <MX_IWDG_Init+0x18>
 8011eb4:	2000091c 	.word	0x2000091c
 8011eb8:	40003000 	.word	0x40003000

08011ebc <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011ebc:	b084      	sub	sp, #16
 8011ebe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011ec2:	b004      	add	sp, #16
 8011ec4:	4770      	bx	lr

08011ec6 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011ec6:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011ec8:	fb01 f400 	mul.w	r4, r1, r0
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f008 fca3 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011ed2:	4605      	mov	r5, r0
 8011ed4:	b118      	cbz	r0, 8011ede <mg_calloc+0x18>
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	2100      	movs	r1, #0
 8011eda:	f01a fcd1 	bl	802c880 <memset>
  return p;
}
 8011ede:	4628      	mov	r0, r5
 8011ee0:	bd38      	pop	{r3, r4, r5, pc}
	...

08011ee4 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011ee4:	b108      	cbz	r0, 8011eea <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011ee6:	4a01      	ldr	r2, [pc, #4]	@ (8011eec <reg_logging_fn+0x8>)
 8011ee8:	6010      	str	r0, [r2, #0]
	}
}
 8011eea:	4770      	bx	lr
 8011eec:	20000000 	.word	0x20000000

08011ef0 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011ef0:	4b01      	ldr	r3, [pc, #4]	@ (8011ef8 <logger_set_level+0x8>)
 8011ef2:	7018      	strb	r0, [r3, #0]
}
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	20000928 	.word	0x20000928

08011efc <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011efc:	b40e      	push	{r1, r2, r3}
 8011efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f00:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011f04:	4b44      	ldr	r3, [pc, #272]	@ (8012018 <logging+0x11c>)
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	4283      	cmp	r3, r0
 8011f0a:	d905      	bls.n	8011f18 <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011f0c:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011f10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f14:	b003      	add	sp, #12
 8011f16:	4770      	bx	lr
 8011f18:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011f1a:	2101      	movs	r1, #1
 8011f1c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011f20:	f7ff ffd1 	bl	8011ec6 <mg_calloc>
    if (!tmp_buf){
 8011f24:	4605      	mov	r5, r0
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d0f0      	beq.n	8011f0c <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011f2a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011f2e:	2100      	movs	r1, #0
 8011f30:	a85b      	add	r0, sp, #364	@ 0x16c
 8011f32:	f01a fca5 	bl	802c880 <memset>
    mess.log_level = level;
 8011f36:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011f3a:	f017 fcf1 	bl	8029920 <mg_now>
 8011f3e:	f7fe fb3d 	bl	80105bc <__aeabi_ul2d>
 8011f42:	4606      	mov	r6, r0
 8011f44:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011f46:	2200      	movs	r2, #0
 8011f48:	4b34      	ldr	r3, [pc, #208]	@ (801201c <logging+0x120>)
 8011f4a:	f7fe fc97 	bl	801087c <__aeabi_ddiv>
 8011f4e:	f7fe ff2f 	bl	8010db0 <__aeabi_d2lz>
 8011f52:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011f56:	a94f      	add	r1, sp, #316	@ 0x13c
 8011f58:	a858      	add	r0, sp, #352	@ 0x160
 8011f5a:	f01a fd27 	bl	802c9ac <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011f5e:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011f60:	4a2f      	ldr	r2, [pc, #188]	@ (8012020 <logging+0x124>)
 8011f62:	2140      	movs	r1, #64	@ 0x40
 8011f64:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f66:	f01b fb33 	bl	802d5d0 <strftime>
 8011f6a:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	4639      	mov	r1, r7
 8011f70:	f7fe fe0a 	bl	8010b88 <__aeabi_d2iz>
 8011f74:	4a2b      	ldr	r2, [pc, #172]	@ (8012024 <logging+0x128>)
 8011f76:	fb82 3200 	smull	r3, r2, r2, r0
 8011f7a:	17c3      	asrs	r3, r0, #31
 8011f7c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f84:	fb02 0313 	mls	r3, r2, r3, r0
 8011f88:	4a27      	ldr	r2, [pc, #156]	@ (8012028 <logging+0x12c>)
 8011f8a:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011f8e:	a83f      	add	r0, sp, #252	@ 0xfc
 8011f90:	4420      	add	r0, r4
 8011f92:	f019 ff4b 	bl	802be2c <snprintf>
 8011f96:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011f98:	1c63      	adds	r3, r4, #1
 8011f9a:	2220      	movs	r2, #32
 8011f9c:	a93f      	add	r1, sp, #252	@ 0xfc
 8011f9e:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011fa4:	aba2      	add	r3, sp, #648	@ 0x288
 8011fa6:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011fa8:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011fac:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011fae:	21fd      	movs	r1, #253	@ 0xfd
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f01a fa03 	bl	802c3bc <vsnprintf>
 8011fb6:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011fb8:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011fbc:	9601      	str	r6, [sp, #4]
 8011fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801202c <logging+0x130>)
 8011fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fc4:	9300      	str	r3, [sp, #0]
 8011fc6:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011fc8:	4a19      	ldr	r2, [pc, #100]	@ (8012030 <logging+0x134>)
 8011fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fce:	4628      	mov	r0, r5
 8011fd0:	f019 ff2c 	bl	802be2c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011fd4:	2cf5      	cmp	r4, #245	@ 0xf5
 8011fd6:	d81b      	bhi.n	8012010 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011fd8:	4628      	mov	r0, r5
 8011fda:	f7fe f961 	bl	80102a0 <strlen>
 8011fde:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011fec:	f01a fc8f 	bl	802c90e <strncpy>
    if (_send_log_mess) {
 8011ff0:	4b10      	ldr	r3, [pc, #64]	@ (8012034 <logging+0x138>)
 8011ff2:	681e      	ldr	r6, [r3, #0]
 8011ff4:	b146      	cbz	r6, 8012008 <logging+0x10c>
        _send_log_mess(mess);
 8011ff6:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011ff8:	22f2      	movs	r2, #242	@ 0xf2
 8011ffa:	a95f      	add	r1, sp, #380	@ 0x17c
 8011ffc:	4668      	mov	r0, sp
 8011ffe:	f01b fe7b 	bl	802dcf8 <memcpy>
 8012002:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012006:	47b0      	blx	r6
    free(tmp_buf);
 8012008:	4628      	mov	r0, r5
 801200a:	f008 fc87 	bl	801a91c <vPortFree>
 801200e:	e77d      	b.n	8011f0c <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8012010:	23f6      	movs	r3, #246	@ 0xf6
 8012012:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8012016:	e7e4      	b.n	8011fe2 <logging+0xe6>
 8012018:	20000928 	.word	0x20000928
 801201c:	408f4000 	.word	0x408f4000
 8012020:	080362c8 	.word	0x080362c8
 8012024:	10624dd3 	.word	0x10624dd3
 8012028:	080362dc 	.word	0x080362dc
 801202c:	20000004 	.word	0x20000004
 8012030:	080362e4 	.word	0x080362e4
 8012034:	20000000 	.word	0x20000000

08012038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 801203a:	6802      	ldr	r2, [r0, #0]
 801203c:	4b03      	ldr	r3, [pc, #12]	@ (801204c <HAL_TIM_PeriodElapsedCallback+0x14>)
 801203e:	429a      	cmp	r2, r3
 8012040:	d000      	beq.n	8012044 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012042:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8012044:	f004 f858 	bl	80160f8 <HAL_IncTick>
}
 8012048:	e7fb      	b.n	8012042 <HAL_TIM_PeriodElapsedCallback+0xa>
 801204a:	bf00      	nop
 801204c:	40014000 	.word	0x40014000

08012050 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012050:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012052:	e7fe      	b.n	8012052 <Error_Handler+0x2>

08012054 <SystemClock_Config>:
{
 8012054:	b500      	push	{lr}
 8012056:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012058:	2230      	movs	r2, #48	@ 0x30
 801205a:	2100      	movs	r1, #0
 801205c:	a808      	add	r0, sp, #32
 801205e:	f01a fc0f 	bl	802c880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012062:	2300      	movs	r3, #0
 8012064:	9303      	str	r3, [sp, #12]
 8012066:	9304      	str	r3, [sp, #16]
 8012068:	9305      	str	r3, [sp, #20]
 801206a:	9306      	str	r3, [sp, #24]
 801206c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801206e:	9301      	str	r3, [sp, #4]
 8012070:	4a1f      	ldr	r2, [pc, #124]	@ (80120f0 <SystemClock_Config+0x9c>)
 8012072:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8012074:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8012078:	6411      	str	r1, [r2, #64]	@ 0x40
 801207a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801207c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8012080:	9201      	str	r2, [sp, #4]
 8012082:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012084:	9302      	str	r3, [sp, #8]
 8012086:	4a1b      	ldr	r2, [pc, #108]	@ (80120f4 <SystemClock_Config+0xa0>)
 8012088:	6811      	ldr	r1, [r2, #0]
 801208a:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 801208e:	6011      	str	r1, [r2, #0]
 8012090:	6812      	ldr	r2, [r2, #0]
 8012092:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8012096:	9202      	str	r2, [sp, #8]
 8012098:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 801209a:	220a      	movs	r2, #10
 801209c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801209e:	2201      	movs	r2, #1
 80120a0:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80120a2:	2110      	movs	r1, #16
 80120a4:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80120a6:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80120a8:	2202      	movs	r2, #2
 80120aa:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80120ac:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80120ae:	2308      	movs	r3, #8
 80120b0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80120b2:	2364      	movs	r3, #100	@ 0x64
 80120b4:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80120b6:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80120b8:	2304      	movs	r3, #4
 80120ba:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80120bc:	a808      	add	r0, sp, #32
 80120be:	f004 fe79 	bl	8016db4 <HAL_RCC_OscConfig>
 80120c2:	b988      	cbnz	r0, 80120e8 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80120c4:	230f      	movs	r3, #15
 80120c6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80120c8:	2302      	movs	r3, #2
 80120ca:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80120cc:	2300      	movs	r3, #0
 80120ce:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80120d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80120d4:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80120d6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80120d8:	2103      	movs	r1, #3
 80120da:	a803      	add	r0, sp, #12
 80120dc:	f005 f8d4 	bl	8017288 <HAL_RCC_ClockConfig>
 80120e0:	b920      	cbnz	r0, 80120ec <SystemClock_Config+0x98>
}
 80120e2:	b015      	add	sp, #84	@ 0x54
 80120e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80120e8:	f7ff ffb2 	bl	8012050 <Error_Handler>
    Error_Handler();
 80120ec:	f7ff ffb0 	bl	8012050 <Error_Handler>
 80120f0:	40023800 	.word	0x40023800
 80120f4:	40007000 	.word	0x40007000

080120f8 <main>:
{
 80120f8:	b500      	push	{lr}
 80120fa:	b083      	sub	sp, #12
 80120fc:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80120fe:	4b11      	ldr	r3, [pc, #68]	@ (8012144 <main+0x4c>)
 8012100:	4a11      	ldr	r2, [pc, #68]	@ (8012148 <main+0x50>)
 8012102:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8012104:	b662      	cpsie	i
	volatile int i = 1000000;
 8012106:	4b11      	ldr	r3, [pc, #68]	@ (801214c <main+0x54>)
 8012108:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 801210a:	e002      	b.n	8012112 <main+0x1a>
		i--;
 801210c:	9b01      	ldr	r3, [sp, #4]
 801210e:	3b01      	subs	r3, #1
 8012110:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8012112:	9b01      	ldr	r3, [sp, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	dcf9      	bgt.n	801210c <main+0x14>
  HAL_Init();
 8012118:	f003 ffd4 	bl	80160c4 <HAL_Init>
  SystemClock_Config();
 801211c:	f7ff ff9a 	bl	8012054 <SystemClock_Config>
  MX_GPIO_Init();
 8012120:	f7ff fdba 	bl	8011c98 <MX_GPIO_Init>
  MX_SPI2_Init();
 8012124:	f000 f836 	bl	8012194 <MX_SPI2_Init>
  MX_I2C1_Init();
 8012128:	f7ff fe40 	bl	8011dac <MX_I2C1_Init>
  MX_SPI1_Init();
 801212c:	f000 f810 	bl	8012150 <MX_SPI1_Init>
  MX_IWDG_Init();
 8012130:	f7ff feb0 	bl	8011e94 <MX_IWDG_Init>
  osKernelInitialize();
 8012134:	f006 f8dc 	bl	80182f0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8012138:	f7ff fba6 	bl	8011888 <MX_FREERTOS_Init>
  osKernelStart();
 801213c:	f006 f8ea 	bl	8018314 <osKernelStart>
  while (1)
 8012140:	e7fe      	b.n	8012140 <main+0x48>
 8012142:	bf00      	nop
 8012144:	e000ed00 	.word	0xe000ed00
 8012148:	08010000 	.word	0x08010000
 801214c:	000f4240 	.word	0x000f4240

08012150 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012150:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012152:	480e      	ldr	r0, [pc, #56]	@ (801218c <MX_SPI1_Init+0x3c>)
 8012154:	4b0e      	ldr	r3, [pc, #56]	@ (8012190 <MX_SPI1_Init+0x40>)
 8012156:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012158:	f44f 7382 	mov.w	r3, #260	@ 0x104
 801215c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801215e:	2300      	movs	r3, #0
 8012160:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012162:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012164:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012166:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8012168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801216c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801216e:	2208      	movs	r2, #8
 8012170:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012172:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012174:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012176:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8012178:	230a      	movs	r3, #10
 801217a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801217c:	f005 fa62 	bl	8017644 <HAL_SPI_Init>
 8012180:	b900      	cbnz	r0, 8012184 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012182:	bd08      	pop	{r3, pc}
    Error_Handler();
 8012184:	f7ff ff64 	bl	8012050 <Error_Handler>
}
 8012188:	e7fb      	b.n	8012182 <MX_SPI1_Init+0x32>
 801218a:	bf00      	nop
 801218c:	20000984 	.word	0x20000984
 8012190:	40013000 	.word	0x40013000

08012194 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8012194:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8012196:	480d      	ldr	r0, [pc, #52]	@ (80121cc <MX_SPI2_Init+0x38>)
 8012198:	4b0d      	ldr	r3, [pc, #52]	@ (80121d0 <MX_SPI2_Init+0x3c>)
 801219a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801219c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80121a0:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80121a2:	2300      	movs	r3, #0
 80121a4:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80121a6:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80121a8:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80121aa:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80121ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121b0:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80121b2:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80121b4:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80121b6:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80121b8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80121ba:	230a      	movs	r3, #10
 80121bc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80121be:	f005 fa41 	bl	8017644 <HAL_SPI_Init>
 80121c2:	b900      	cbnz	r0, 80121c6 <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80121c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80121c6:	f7ff ff43 	bl	8012050 <Error_Handler>
}
 80121ca:	e7fb      	b.n	80121c4 <MX_SPI2_Init+0x30>
 80121cc:	2000092c 	.word	0x2000092c
 80121d0:	40003800 	.word	0x40003800

080121d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80121d4:	b500      	push	{lr}
 80121d6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121d8:	2300      	movs	r3, #0
 80121da:	9305      	str	r3, [sp, #20]
 80121dc:	9306      	str	r3, [sp, #24]
 80121de:	9307      	str	r3, [sp, #28]
 80121e0:	9308      	str	r3, [sp, #32]
 80121e2:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 80121e4:	6803      	ldr	r3, [r0, #0]
 80121e6:	4a28      	ldr	r2, [pc, #160]	@ (8012288 <HAL_SPI_MspInit+0xb4>)
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d005      	beq.n	80121f8 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80121ec:	4a27      	ldr	r2, [pc, #156]	@ (801228c <HAL_SPI_MspInit+0xb8>)
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d025      	beq.n	801223e <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80121f2:	b00b      	add	sp, #44	@ 0x2c
 80121f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80121f8:	2100      	movs	r1, #0
 80121fa:	9101      	str	r1, [sp, #4]
 80121fc:	4b24      	ldr	r3, [pc, #144]	@ (8012290 <HAL_SPI_MspInit+0xbc>)
 80121fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012200:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012204:	645a      	str	r2, [r3, #68]	@ 0x44
 8012206:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012208:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 801220c:	9201      	str	r2, [sp, #4]
 801220e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012210:	9102      	str	r1, [sp, #8]
 8012212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012214:	f042 0202 	orr.w	r2, r2, #2
 8012218:	631a      	str	r2, [r3, #48]	@ 0x30
 801221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801221c:	f003 0302 	and.w	r3, r3, #2
 8012220:	9302      	str	r3, [sp, #8]
 8012222:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012224:	2338      	movs	r3, #56	@ 0x38
 8012226:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012228:	2302      	movs	r3, #2
 801222a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801222c:	2303      	movs	r3, #3
 801222e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012230:	2305      	movs	r3, #5
 8012232:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012234:	a905      	add	r1, sp, #20
 8012236:	4817      	ldr	r0, [pc, #92]	@ (8012294 <HAL_SPI_MspInit+0xc0>)
 8012238:	f004 f802 	bl	8016240 <HAL_GPIO_Init>
 801223c:	e7d9      	b.n	80121f2 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801223e:	2100      	movs	r1, #0
 8012240:	9103      	str	r1, [sp, #12]
 8012242:	4b13      	ldr	r3, [pc, #76]	@ (8012290 <HAL_SPI_MspInit+0xbc>)
 8012244:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012246:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801224a:	641a      	str	r2, [r3, #64]	@ 0x40
 801224c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801224e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012252:	9203      	str	r2, [sp, #12]
 8012254:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012256:	9104      	str	r1, [sp, #16]
 8012258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801225a:	f042 0202 	orr.w	r2, r2, #2
 801225e:	631a      	str	r2, [r3, #48]	@ 0x30
 8012260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012262:	f003 0302 	and.w	r3, r3, #2
 8012266:	9304      	str	r3, [sp, #16]
 8012268:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801226a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 801226e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012270:	2302      	movs	r3, #2
 8012272:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012274:	2303      	movs	r3, #3
 8012276:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012278:	2305      	movs	r3, #5
 801227a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801227c:	a905      	add	r1, sp, #20
 801227e:	4805      	ldr	r0, [pc, #20]	@ (8012294 <HAL_SPI_MspInit+0xc0>)
 8012280:	f003 ffde 	bl	8016240 <HAL_GPIO_Init>
}
 8012284:	e7b5      	b.n	80121f2 <HAL_SPI_MspInit+0x1e>
 8012286:	bf00      	nop
 8012288:	40013000 	.word	0x40013000
 801228c:	40003800 	.word	0x40003800
 8012290:	40023800 	.word	0x40023800
 8012294:	40020400 	.word	0x40020400

08012298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012298:	b500      	push	{lr}
 801229a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801229c:	2200      	movs	r2, #0
 801229e:	9200      	str	r2, [sp, #0]
 80122a0:	4b0d      	ldr	r3, [pc, #52]	@ (80122d8 <HAL_MspInit+0x40>)
 80122a2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80122a4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80122a8:	6459      	str	r1, [r3, #68]	@ 0x44
 80122aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80122ac:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80122b0:	9100      	str	r1, [sp, #0]
 80122b2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80122b4:	9201      	str	r2, [sp, #4]
 80122b6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80122b8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80122bc:	6419      	str	r1, [r3, #64]	@ 0x40
 80122be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80122c4:	9301      	str	r3, [sp, #4]
 80122c6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80122c8:	210f      	movs	r1, #15
 80122ca:	f06f 0001 	mvn.w	r0, #1
 80122ce:	f003 ff9f 	bl	8016210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80122d2:	b003      	add	sp, #12
 80122d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80122d8:	40023800 	.word	0x40023800

080122dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80122dc:	b530      	push	{r4, r5, lr}
 80122de:	b089      	sub	sp, #36	@ 0x24
 80122e0:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80122e2:	2400      	movs	r4, #0
 80122e4:	9401      	str	r4, [sp, #4]
 80122e6:	4b1d      	ldr	r3, [pc, #116]	@ (801235c <HAL_InitTick+0x80>)
 80122e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80122ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80122ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80122f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80122f6:	9301      	str	r3, [sp, #4]
 80122f8:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80122fa:	a902      	add	r1, sp, #8
 80122fc:	a803      	add	r0, sp, #12
 80122fe:	f005 f899 	bl	8017434 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012302:	f005 f887 	bl	8017414 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012306:	4a16      	ldr	r2, [pc, #88]	@ (8012360 <HAL_InitTick+0x84>)
 8012308:	fba2 2300 	umull	r2, r3, r2, r0
 801230c:	0c9b      	lsrs	r3, r3, #18
 801230e:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012310:	4814      	ldr	r0, [pc, #80]	@ (8012364 <HAL_InitTick+0x88>)
 8012312:	4a15      	ldr	r2, [pc, #84]	@ (8012368 <HAL_InitTick+0x8c>)
 8012314:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8012316:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801231a:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 801231c:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 801231e:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012320:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012322:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012324:	f005 fe04 	bl	8017f30 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8012328:	4604      	mov	r4, r0
 801232a:	b110      	cbz	r0, 8012332 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 801232c:	4620      	mov	r0, r4
 801232e:	b009      	add	sp, #36	@ 0x24
 8012330:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 8012332:	480c      	ldr	r0, [pc, #48]	@ (8012364 <HAL_InitTick+0x88>)
 8012334:	f005 fcb6 	bl	8017ca4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8012338:	4604      	mov	r4, r0
 801233a:	2800      	cmp	r0, #0
 801233c:	d1f6      	bne.n	801232c <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801233e:	2018      	movs	r0, #24
 8012340:	f003 ff76 	bl	8016230 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012344:	2d0f      	cmp	r5, #15
 8012346:	d901      	bls.n	801234c <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8012348:	2401      	movs	r4, #1
 801234a:	e7ef      	b.n	801232c <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 801234c:	2200      	movs	r2, #0
 801234e:	4629      	mov	r1, r5
 8012350:	2018      	movs	r0, #24
 8012352:	f003 ff5d 	bl	8016210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012356:	4b05      	ldr	r3, [pc, #20]	@ (801236c <HAL_InitTick+0x90>)
 8012358:	601d      	str	r5, [r3, #0]
 801235a:	e7e7      	b.n	801232c <HAL_InitTick+0x50>
 801235c:	40023800 	.word	0x40023800
 8012360:	431bde83 	.word	0x431bde83
 8012364:	200009dc 	.word	0x200009dc
 8012368:	40014000 	.word	0x40014000
 801236c:	20000108 	.word	0x20000108

08012370 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012370:	e7fe      	b.n	8012370 <NMI_Handler>

08012372 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012372:	e7fe      	b.n	8012372 <HardFault_Handler>

08012374 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012374:	e7fe      	b.n	8012374 <MemManage_Handler>

08012376 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012376:	e7fe      	b.n	8012376 <BusFault_Handler>

08012378 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012378:	e7fe      	b.n	8012378 <UsageFault_Handler>

0801237a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801237a:	4770      	bx	lr

0801237c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 801237c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 801237e:	4802      	ldr	r0, [pc, #8]	@ (8012388 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8012380:	f005 fcd0 	bl	8017d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8012384:	bd08      	pop	{r3, pc}
 8012386:	bf00      	nop
 8012388:	200009dc 	.word	0x200009dc

0801238c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 801238c:	2001      	movs	r0, #1
 801238e:	4770      	bx	lr

08012390 <_kill>:

int _kill(int pid, int sig)
{
 8012390:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012392:	f01b fc79 	bl	802dc88 <__errno>
 8012396:	2316      	movs	r3, #22
 8012398:	6003      	str	r3, [r0, #0]
  return -1;
}
 801239a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801239e:	bd08      	pop	{r3, pc}

080123a0 <_exit>:

void _exit (int status)
{
 80123a0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80123a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80123a6:	f7ff fff3 	bl	8012390 <_kill>
  while (1) {}    /* Make sure we hang here */
 80123aa:	e7fe      	b.n	80123aa <_exit+0xa>

080123ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	460c      	mov	r4, r1
 80123b0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123b2:	2500      	movs	r5, #0
 80123b4:	e006      	b.n	80123c4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80123b6:	f3af 8000 	nop.w
 80123ba:	4621      	mov	r1, r4
 80123bc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123c0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80123c2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123c4:	42b5      	cmp	r5, r6
 80123c6:	dbf6      	blt.n	80123b6 <_read+0xa>
  }

  return len;
}
 80123c8:	4630      	mov	r0, r6
 80123ca:	bd70      	pop	{r4, r5, r6, pc}

080123cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80123cc:	b570      	push	{r4, r5, r6, lr}
 80123ce:	460c      	mov	r4, r1
 80123d0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123d2:	2500      	movs	r5, #0
 80123d4:	e004      	b.n	80123e0 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80123d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80123da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123de:	3501      	adds	r5, #1
 80123e0:	42b5      	cmp	r5, r6
 80123e2:	dbf8      	blt.n	80123d6 <_write+0xa>
  }
  return len;
}
 80123e4:	4630      	mov	r0, r6
 80123e6:	bd70      	pop	{r4, r5, r6, pc}

080123e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80123e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123ec:	4770      	bx	lr

080123ee <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80123ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80123f2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80123f4:	2000      	movs	r0, #0
 80123f6:	4770      	bx	lr

080123f8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80123f8:	2001      	movs	r0, #1
 80123fa:	4770      	bx	lr

080123fc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80123fc:	2000      	movs	r0, #0
 80123fe:	4770      	bx	lr

08012400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012400:	b510      	push	{r4, lr}
 8012402:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012404:	4a0c      	ldr	r2, [pc, #48]	@ (8012438 <_sbrk+0x38>)
 8012406:	490d      	ldr	r1, [pc, #52]	@ (801243c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012408:	480d      	ldr	r0, [pc, #52]	@ (8012440 <_sbrk+0x40>)
 801240a:	6800      	ldr	r0, [r0, #0]
 801240c:	b140      	cbz	r0, 8012420 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801240e:	480c      	ldr	r0, [pc, #48]	@ (8012440 <_sbrk+0x40>)
 8012410:	6800      	ldr	r0, [r0, #0]
 8012412:	4403      	add	r3, r0
 8012414:	1a52      	subs	r2, r2, r1
 8012416:	4293      	cmp	r3, r2
 8012418:	d806      	bhi.n	8012428 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 801241a:	4a09      	ldr	r2, [pc, #36]	@ (8012440 <_sbrk+0x40>)
 801241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 801241e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8012420:	4807      	ldr	r0, [pc, #28]	@ (8012440 <_sbrk+0x40>)
 8012422:	4c08      	ldr	r4, [pc, #32]	@ (8012444 <_sbrk+0x44>)
 8012424:	6004      	str	r4, [r0, #0]
 8012426:	e7f2      	b.n	801240e <_sbrk+0xe>
    errno = ENOMEM;
 8012428:	f01b fc2e 	bl	802dc88 <__errno>
 801242c:	230c      	movs	r3, #12
 801242e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012434:	e7f3      	b.n	801241e <_sbrk+0x1e>
 8012436:	bf00      	nop
 8012438:	20020000 	.word	0x20020000
 801243c:	00000800 	.word	0x00000800
 8012440:	20000a28 	.word	0x20000a28
 8012444:	2001a218 	.word	0x2001a218

08012448 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012448:	4a03      	ldr	r2, [pc, #12]	@ (8012458 <SystemInit+0x10>)
 801244a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 801244e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012452:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012456:	4770      	bx	lr
 8012458:	e000ed00 	.word	0xe000ed00

0801245c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801245c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012460:	f7ff fff2 	bl	8012448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012464:	480c      	ldr	r0, [pc, #48]	@ (8012498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012466:	490d      	ldr	r1, [pc, #52]	@ (801249c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012468:	4a0d      	ldr	r2, [pc, #52]	@ (80124a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801246c:	e002      	b.n	8012474 <LoopCopyDataInit>

0801246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012472:	3304      	adds	r3, #4

08012474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012478:	d3f9      	bcc.n	801246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801247a:	4a0a      	ldr	r2, [pc, #40]	@ (80124a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801247c:	4c0a      	ldr	r4, [pc, #40]	@ (80124a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 801247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012480:	e001      	b.n	8012486 <LoopFillZerobss>

08012482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012484:	3204      	adds	r2, #4

08012486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012488:	d3fb      	bcc.n	8012482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801248a:	f01b fc0b 	bl	802dca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801248e:	f7ff fe33 	bl	80120f8 <main>
  bx  lr    
 8012492:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801249c:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 80124a0:	0803c1bc 	.word	0x0803c1bc
  ldr r2, =_sbss
 80124a4:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 80124a8:	2001a218 	.word	0x2001a218

080124ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80124ac:	e7fe      	b.n	80124ac <ADC_IRQHandler>

080124ae <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80124ae:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80124b0:	880b      	ldrh	r3, [r1, #0]
 80124b2:	2b05      	cmp	r3, #5
 80124b4:	d001      	beq.n	80124ba <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80124b6:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80124b8:	bd38      	pop	{r3, r4, r5, pc}
 80124ba:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80124bc:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80124be:	7881      	ldrb	r1, [r0, #2]
 80124c0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80124c4:	3101      	adds	r1, #1
 80124c6:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80124c8:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80124ca:	7902      	ldrb	r2, [r0, #4]
 80124cc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 80124d0:	1e53      	subs	r3, r2, #1
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80124d8:	4563      	cmp	r3, ip
 80124da:	d820      	bhi.n	801251e <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 80124dc:	2300      	movs	r3, #0
 80124de:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80124e0:	2301      	movs	r3, #1
 80124e2:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 80124e4:	8823      	ldrh	r3, [r4, #0]
 80124e6:	3301      	adds	r3, #1
 80124e8:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 80124ea:	f012 0f07 	tst.w	r2, #7
 80124ee:	d010      	beq.n	8012512 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80124f0:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 80124f4:	3301      	adds	r3, #1
 80124f6:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 80124f8:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 80124fa:	8823      	ldrh	r3, [r4, #0]
 80124fc:	3301      	adds	r3, #1
 80124fe:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8012500:	2300      	movs	r3, #0
 8012502:	3002      	adds	r0, #2
 8012504:	f7ff fb74 	bl	8011bf0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012508:	b930      	cbnz	r0, 8012518 <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 801250a:	8823      	ldrh	r3, [r4, #0]
 801250c:	442b      	add	r3, r5
 801250e:	8023      	strh	r3, [r4, #0]
 8012510:	e7d2      	b.n	80124b8 <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012512:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012516:	e7ef      	b.n	80124f8 <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012518:	f000 f9f0 	bl	80128fc <prveMBError2Exception>
 801251c:	e7cc      	b.n	80124b8 <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801251e:	2003      	movs	r0, #3
 8012520:	e7ca      	b.n	80124b8 <eMBFuncReadCoils+0xa>

08012522 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012522:	880b      	ldrh	r3, [r1, #0]
 8012524:	2b05      	cmp	r3, #5
 8012526:	d001      	beq.n	801252c <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012528:	2003      	movs	r0, #3
 801252a:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801252c:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 801252e:	7881      	ldrb	r1, [r0, #2]
 8012530:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012534:	3101      	adds	r1, #1
 8012536:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012538:	7903      	ldrb	r3, [r0, #4]
 801253a:	b9f3      	cbnz	r3, 801257a <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 801253c:	78c2      	ldrb	r2, [r0, #3]
 801253e:	1e53      	subs	r3, r2, #1
 8012540:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012542:	2bfd      	cmp	r3, #253	@ 0xfd
 8012544:	d91b      	bls.n	801257e <eMBFuncWriteCoil+0x5c>
{
 8012546:	b500      	push	{lr}
 8012548:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 801254a:	2300      	movs	r3, #0
 801254c:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012550:	2aff      	cmp	r2, #255	@ 0xff
 8012552:	d00b      	beq.n	801256c <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012554:	2300      	movs	r3, #0
 8012556:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801255a:	2301      	movs	r3, #1
 801255c:	461a      	mov	r2, r3
 801255e:	a801      	add	r0, sp, #4
 8012560:	f7ff fb46 	bl	8011bf0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012564:	b930      	cbnz	r0, 8012574 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 8012566:	b003      	add	sp, #12
 8012568:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 801256c:	2301      	movs	r3, #1
 801256e:	f88d 3004 	strb.w	r3, [sp, #4]
 8012572:	e7f2      	b.n	801255a <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012574:	f000 f9c2 	bl	80128fc <prveMBError2Exception>
 8012578:	e7f5      	b.n	8012566 <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801257a:	2003      	movs	r0, #3
 801257c:	4770      	bx	lr
 801257e:	2003      	movs	r0, #3
}
 8012580:	4770      	bx	lr

08012582 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012582:	880b      	ldrh	r3, [r1, #0]
 8012584:	2b05      	cmp	r3, #5
 8012586:	d92d      	bls.n	80125e4 <eMBFuncWriteMultipleCoils+0x62>
{
 8012588:	b510      	push	{r4, lr}
 801258a:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 801258c:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 801258e:	7883      	ldrb	r3, [r0, #2]
 8012590:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 8012594:	3301      	adds	r3, #1
 8012596:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8012598:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 801259a:	7903      	ldrb	r3, [r0, #4]
 801259c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80125a0:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80125a4:	f013 0f07 	tst.w	r3, #7
 80125a8:	d00e      	beq.n	80125c8 <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80125aa:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80125ae:	f10c 0c01 	add.w	ip, ip, #1
 80125b2:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 80125b6:	1e53      	subs	r3, r2, #1
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80125be:	d213      	bcs.n	80125e8 <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80125c0:	45f4      	cmp	ip, lr
 80125c2:	d004      	beq.n	80125ce <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125c4:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80125c6:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80125c8:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80125cc:	e7f3      	b.n	80125b6 <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80125ce:	2301      	movs	r3, #1
 80125d0:	3006      	adds	r0, #6
 80125d2:	f7ff fb0d 	bl	8011bf0 <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80125d6:	b910      	cbnz	r0, 80125de <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80125d8:	2305      	movs	r3, #5
 80125da:	8023      	strh	r3, [r4, #0]
 80125dc:	e7f3      	b.n	80125c6 <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 80125de:	f000 f98d 	bl	80128fc <prveMBError2Exception>
 80125e2:	e7f0      	b.n	80125c6 <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125e4:	2003      	movs	r0, #3
}
 80125e6:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125e8:	2003      	movs	r0, #3
 80125ea:	e7ec      	b.n	80125c6 <eMBFuncWriteMultipleCoils+0x44>

080125ec <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80125ec:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80125ee:	880b      	ldrh	r3, [r1, #0]
 80125f0:	2b05      	cmp	r3, #5
 80125f2:	d001      	beq.n	80125f8 <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125f4:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80125f6:	bd38      	pop	{r3, r4, r5, pc}
 80125f8:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80125fa:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80125fc:	7881      	ldrb	r1, [r0, #2]
 80125fe:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012602:	3101      	adds	r1, #1
 8012604:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8012606:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8012608:	7902      	ldrb	r2, [r0, #4]
 801260a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 801260e:	1e53      	subs	r3, r2, #1
 8012610:	b29b      	uxth	r3, r3
 8012612:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 8012616:	4563      	cmp	r3, ip
 8012618:	d81f      	bhi.n	801265a <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 801261a:	2300      	movs	r3, #0
 801261c:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 801261e:	2302      	movs	r3, #2
 8012620:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012622:	8823      	ldrh	r3, [r4, #0]
 8012624:	3301      	adds	r3, #1
 8012626:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8012628:	f012 0f07 	tst.w	r2, #7
 801262c:	d00f      	beq.n	801264e <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 801262e:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012632:	3301      	adds	r3, #1
 8012634:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 8012636:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8012638:	8823      	ldrh	r3, [r4, #0]
 801263a:	3301      	adds	r3, #1
 801263c:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 801263e:	3002      	adds	r0, #2
 8012640:	f7ff fab0 	bl	8011ba4 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012644:	b930      	cbnz	r0, 8012654 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 8012646:	8823      	ldrh	r3, [r4, #0]
 8012648:	442b      	add	r3, r5
 801264a:	8023      	strh	r3, [r4, #0]
 801264c:	e7d3      	b.n	80125f6 <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 801264e:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012652:	e7f0      	b.n	8012636 <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012654:	f000 f952 	bl	80128fc <prveMBError2Exception>
 8012658:	e7cd      	b.n	80125f6 <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801265a:	2003      	movs	r0, #3
 801265c:	e7cb      	b.n	80125f6 <eMBFuncReadDiscreteInputs+0xa>

0801265e <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801265e:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012660:	880b      	ldrh	r3, [r1, #0]
 8012662:	2b05      	cmp	r3, #5
 8012664:	d001      	beq.n	801266a <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012666:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012668:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801266a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 801266c:	7881      	ldrb	r1, [r0, #2]
 801266e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012672:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012674:	2301      	movs	r3, #1
 8012676:	461a      	mov	r2, r3
 8012678:	b289      	uxth	r1, r1
 801267a:	3003      	adds	r0, #3
 801267c:	f7ff fb09 	bl	8011c92 <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 8012680:	2800      	cmp	r0, #0
 8012682:	d0f1      	beq.n	8012668 <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 8012684:	f000 f93a 	bl	80128fc <prveMBError2Exception>
 8012688:	e7ee      	b.n	8012668 <eMBFuncWriteHoldingRegister+0xa>

0801268a <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801268a:	880b      	ldrh	r3, [r1, #0]
 801268c:	2b05      	cmp	r3, #5
 801268e:	d922      	bls.n	80126d6 <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 8012690:	b510      	push	{r4, lr}
 8012692:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8012694:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8012696:	7883      	ldrb	r3, [r0, #2]
 8012698:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 801269c:	3301      	adds	r3, #1
 801269e:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80126a0:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80126a2:	7902      	ldrb	r2, [r0, #4]
 80126a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80126a8:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 80126ac:	1e53      	subs	r3, r2, #1
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	2b77      	cmp	r3, #119	@ 0x77
 80126b2:	d812      	bhi.n	80126da <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80126b4:	0053      	lsls	r3, r2, #1
 80126b6:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80126b8:	4563      	cmp	r3, ip
 80126ba:	d001      	beq.n	80126c0 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126bc:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80126be:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80126c0:	2301      	movs	r3, #1
 80126c2:	3006      	adds	r0, #6
 80126c4:	f7ff fae5 	bl	8011c92 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80126c8:	b910      	cbnz	r0, 80126d0 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80126ca:	2305      	movs	r3, #5
 80126cc:	8023      	strh	r3, [r4, #0]
 80126ce:	e7f6      	b.n	80126be <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 80126d0:	f000 f914 	bl	80128fc <prveMBError2Exception>
 80126d4:	e7f3      	b.n	80126be <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126d6:	2003      	movs	r0, #3
}
 80126d8:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126da:	2003      	movs	r0, #3
 80126dc:	e7ef      	b.n	80126be <eMBFuncWriteMultipleHoldingRegister+0x34>

080126de <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80126de:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80126e0:	880b      	ldrh	r3, [r1, #0]
 80126e2:	2b05      	cmp	r3, #5
 80126e4:	d001      	beq.n	80126ea <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126e6:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80126e8:	bd38      	pop	{r3, r4, r5, pc}
 80126ea:	4602      	mov	r2, r0
 80126ec:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80126ee:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80126f0:	7881      	ldrb	r1, [r0, #2]
 80126f2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80126f6:	3101      	adds	r1, #1
 80126f8:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80126fa:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80126fc:	1e6b      	subs	r3, r5, #1
 80126fe:	b29b      	uxth	r3, r3
 8012700:	2b7c      	cmp	r3, #124	@ 0x7c
 8012702:	d901      	bls.n	8012708 <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012704:	2003      	movs	r0, #3
 8012706:	e7ef      	b.n	80126e8 <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 8012708:	2300      	movs	r3, #0
 801270a:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 801270c:	f04f 0c03 	mov.w	ip, #3
 8012710:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012714:	f8b4 c000 	ldrh.w	ip, [r4]
 8012718:	f10c 0c01 	add.w	ip, ip, #1
 801271c:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012720:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012724:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 8012728:	8822      	ldrh	r2, [r4, #0]
 801272a:	3201      	adds	r2, #1
 801272c:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 801272e:	462a      	mov	r2, r5
 8012730:	f7ff faaf 	bl	8011c92 <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012734:	b920      	cbnz	r0, 8012740 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 8012736:	8823      	ldrh	r3, [r4, #0]
 8012738:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801273c:	8023      	strh	r3, [r4, #0]
 801273e:	e7d3      	b.n	80126e8 <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012740:	f000 f8dc 	bl	80128fc <prveMBError2Exception>
 8012744:	e7d0      	b.n	80126e8 <eMBFuncReadHoldingRegister+0xa>

08012746 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8012748:	880b      	ldrh	r3, [r1, #0]
 801274a:	2b09      	cmp	r3, #9
 801274c:	d943      	bls.n	80127d6 <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 801274e:	4604      	mov	r4, r0
 8012750:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012752:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012754:	7881      	ldrb	r1, [r0, #2]
 8012756:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 801275a:	3101      	adds	r1, #1
 801275c:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 801275e:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012760:	7907      	ldrb	r7, [r0, #4]
 8012762:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8012766:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8012768:	7981      	ldrb	r1, [r0, #6]
 801276a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 801276e:	3101      	adds	r1, #1
 8012770:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012772:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012774:	7a02      	ldrb	r2, [r0, #8]
 8012776:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801277a:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 801277c:	1e7b      	subs	r3, r7, #1
 801277e:	b29b      	uxth	r3, r3
 8012780:	2b7c      	cmp	r3, #124	@ 0x7c
 8012782:	d82a      	bhi.n	80127da <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 8012784:	b35a      	cbz	r2, 80127de <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8012786:	2a79      	cmp	r2, #121	@ 0x79
 8012788:	d82b      	bhi.n	80127e2 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 801278a:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 801278e:	d001      	beq.n	8012794 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012790:	2003      	movs	r0, #3
 8012792:	e021      	b.n	80127d8 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8012794:	2301      	movs	r3, #1
 8012796:	f104 000a 	add.w	r0, r4, #10
 801279a:	f7ff fa7a 	bl	8011c92 <eMBRegHoldingCB>
 801279e:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 80127a0:	b9b0      	cbnz	r0, 80127d0 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 80127a2:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80127a4:	4620      	mov	r0, r4
 80127a6:	2217      	movs	r2, #23
 80127a8:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 80127ac:	882a      	ldrh	r2, [r5, #0]
 80127ae:	3201      	adds	r2, #1
 80127b0:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80127b2:	007a      	lsls	r2, r7, #1
 80127b4:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 80127b6:	882a      	ldrh	r2, [r5, #0]
 80127b8:	3201      	adds	r2, #1
 80127ba:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80127bc:	463a      	mov	r2, r7
 80127be:	4631      	mov	r1, r6
 80127c0:	f7ff fa67 	bl	8011c92 <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 80127c4:	b920      	cbnz	r0, 80127d0 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 80127c6:	882b      	ldrh	r3, [r5, #0]
 80127c8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80127cc:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 80127ce:	e003      	b.n	80127d8 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 80127d0:	f000 f894 	bl	80128fc <prveMBError2Exception>
 80127d4:	e000      	b.n	80127d8 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 80127d6:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80127d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127da:	2003      	movs	r0, #3
 80127dc:	e7fc      	b.n	80127d8 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 80127de:	2003      	movs	r0, #3
 80127e0:	e7fa      	b.n	80127d8 <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 80127e2:	2003      	movs	r0, #3
 80127e4:	e7f8      	b.n	80127d8 <eMBFuncReadWriteMultipleHoldingRegister+0x92>

080127e6 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80127e6:	880a      	ldrh	r2, [r1, #0]
 80127e8:	2a05      	cmp	r2, #5
 80127ea:	d001      	beq.n	80127f0 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80127ec:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80127ee:	4770      	bx	lr
{
 80127f0:	b538      	push	{r3, r4, r5, lr}
 80127f2:	4603      	mov	r3, r0
 80127f4:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80127f6:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80127f8:	7881      	ldrb	r1, [r0, #2]
 80127fa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 80127fe:	3101      	adds	r1, #1
 8012800:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012802:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012804:	7905      	ldrb	r5, [r0, #4]
 8012806:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 801280a:	1e6a      	subs	r2, r5, #1
 801280c:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 801280e:	2a7b      	cmp	r2, #123	@ 0x7b
 8012810:	d901      	bls.n	8012816 <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012812:	2003      	movs	r0, #3
}
 8012814:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 8012816:	2200      	movs	r2, #0
 8012818:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 801281a:	2204      	movs	r2, #4
 801281c:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012820:	8822      	ldrh	r2, [r4, #0]
 8012822:	3201      	adds	r2, #1
 8012824:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8012826:	006a      	lsls	r2, r5, #1
 8012828:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 801282a:	8823      	ldrh	r3, [r4, #0]
 801282c:	3301      	adds	r3, #1
 801282e:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012830:	462a      	mov	r2, r5
 8012832:	f7ff fa2c 	bl	8011c8e <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 8012836:	b920      	cbnz	r0, 8012842 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 8012838:	8823      	ldrh	r3, [r4, #0]
 801283a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801283e:	8023      	strh	r3, [r4, #0]
 8012840:	e7e8      	b.n	8012814 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012842:	f000 f85b 	bl	80128fc <prveMBError2Exception>
 8012846:	e7e5      	b.n	8012814 <eMBFuncReadInputRegister+0x2e>

08012848 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 801284c:	4b05      	ldr	r3, [pc, #20]	@ (8012864 <eMBFuncReportSlaveID+0x1c>)
 801284e:	881c      	ldrh	r4, [r3, #0]
 8012850:	4622      	mov	r2, r4
 8012852:	4905      	ldr	r1, [pc, #20]	@ (8012868 <eMBFuncReportSlaveID+0x20>)
 8012854:	3001      	adds	r0, #1
 8012856:	f01b fa4f 	bl	802dcf8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801285a:	3401      	adds	r4, #1
 801285c:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 801285e:	2000      	movs	r0, #0
 8012860:	bd38      	pop	{r3, r4, r5, pc}
 8012862:	bf00      	nop
 8012864:	20000a2c 	.word	0x20000a2c
 8012868:	20000a30 	.word	0x20000a30

0801286c <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 801286c:	b510      	push	{r4, lr}
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 801286e:	2a08      	cmp	r2, #8
 8012870:	d823      	bhi.n	80128ba <xMBUtilSetBits+0x4e>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8012872:	ea4f 0ed1 	mov.w	lr, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8012876:	f001 0407 	and.w	r4, r1, #7
 801287a:	fa03 f404 	lsl.w	r4, r3, r4

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 801287e:	f04f 0c01 	mov.w	ip, #1
 8012882:	fa0c f202 	lsl.w	r2, ip, r2
 8012886:	b292      	uxth	r2, r2
 8012888:	3a01      	subs	r2, #1
 801288a:	b292      	uxth	r2, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 801288c:	f001 0107 	and.w	r1, r1, #7
 8012890:	fa02 f101 	lsl.w	r1, r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8012894:	f810 300e 	ldrb.w	r3, [r0, lr]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8012898:	eb0e 020c 	add.w	r2, lr, ip
 801289c:	f810 c002 	ldrb.w	ip, [r0, r2]
 80128a0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80128a4:	b21b      	sxth	r3, r3

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 80128a6:	ea23 0301 	bic.w	r3, r3, r1
 80128aa:	b21b      	sxth	r3, r3
 80128ac:	4323      	orrs	r3, r4

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80128ae:	f800 300e 	strb.w	r3, [r0, lr]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80128b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128b6:	5483      	strb	r3, [r0, r2]
}
 80128b8:	bd10      	pop	{r4, pc}
    assert( ucNBits <= 8 );
 80128ba:	4b03      	ldr	r3, [pc, #12]	@ (80128c8 <xMBUtilSetBits+0x5c>)
 80128bc:	4a03      	ldr	r2, [pc, #12]	@ (80128cc <xMBUtilSetBits+0x60>)
 80128be:	2137      	movs	r1, #55	@ 0x37
 80128c0:	4803      	ldr	r0, [pc, #12]	@ (80128d0 <xMBUtilSetBits+0x64>)
 80128c2:	f017 fa8b 	bl	8029ddc <__assert_func>
 80128c6:	bf00      	nop
 80128c8:	08036328 	.word	0x08036328
 80128cc:	08036380 	.word	0x08036380
 80128d0:	08036338 	.word	0x08036338

080128d4 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80128d4:	ea4f 0cd1 	mov.w	ip, r1, lsr #3

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80128d8:	2301      	movs	r3, #1
 80128da:	4093      	lsls	r3, r2
 80128dc:	b29b      	uxth	r3, r3
 80128de:	3b01      	subs	r3, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80128e0:	f810 200c 	ldrb.w	r2, [r0, ip]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80128e4:	4460      	add	r0, ip
 80128e6:	7840      	ldrb	r0, [r0, #1]
 80128e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80128ec:	f001 0107 	and.w	r1, r1, #7
 80128f0:	410a      	asrs	r2, r1
 80128f2:	b292      	uxth	r2, r2

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80128f4:	ea03 0002 	and.w	r0, r3, r2

    return ( UCHAR ) usWordBuf;
}
 80128f8:	b2c0      	uxtb	r0, r0
 80128fa:	4770      	bx	lr

080128fc <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 80128fc:	2801      	cmp	r0, #1
 80128fe:	d005      	beq.n	801290c <prveMBError2Exception+0x10>
 8012900:	2807      	cmp	r0, #7
 8012902:	d005      	beq.n	8012910 <prveMBError2Exception+0x14>
 8012904:	b108      	cbz	r0, 801290a <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8012906:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 8012908:	4770      	bx	lr
 801290a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 801290c:	2002      	movs	r0, #2
 801290e:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 8012910:	2006      	movs	r0, #6
 8012912:	4770      	bx	lr

08012914 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8012914:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8012916:	f000 f9ce 	bl	8012cb6 <eMBTCPDoInit>
 801291a:	4604      	mov	r4, r0
 801291c:	b120      	cbz	r0, 8012928 <eMBTCPInit+0x14>
    {
        eMBState = STATE_DISABLED;
 801291e:	4b11      	ldr	r3, [pc, #68]	@ (8012964 <eMBTCPInit+0x50>)
 8012920:	2201      	movs	r2, #1
 8012922:	701a      	strb	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
        eMBCurrentMode = MB_TCP;
        eMBState = STATE_DISABLED;
    }
    return eStatus;
}
 8012924:	4620      	mov	r0, r4
 8012926:	bd10      	pop	{r4, pc}
    else if( !xMBPortEventInit(  ) )
 8012928:	f000 f8ca 	bl	8012ac0 <xMBPortEventInit>
 801292c:	b1c0      	cbz	r0, 8012960 <eMBTCPInit+0x4c>
        pvMBFrameStartCur = eMBTCPStart;
 801292e:	4b0e      	ldr	r3, [pc, #56]	@ (8012968 <eMBTCPInit+0x54>)
 8012930:	4a0e      	ldr	r2, [pc, #56]	@ (801296c <eMBTCPInit+0x58>)
 8012932:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8012934:	4b0e      	ldr	r3, [pc, #56]	@ (8012970 <eMBTCPInit+0x5c>)
 8012936:	4a0f      	ldr	r2, [pc, #60]	@ (8012974 <eMBTCPInit+0x60>)
 8012938:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 801293a:	4b0f      	ldr	r3, [pc, #60]	@ (8012978 <eMBTCPInit+0x64>)
 801293c:	4a0f      	ldr	r2, [pc, #60]	@ (801297c <eMBTCPInit+0x68>)
 801293e:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8012940:	4b0f      	ldr	r3, [pc, #60]	@ (8012980 <eMBTCPInit+0x6c>)
 8012942:	4a10      	ldr	r2, [pc, #64]	@ (8012984 <eMBTCPInit+0x70>)
 8012944:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8012946:	4b10      	ldr	r3, [pc, #64]	@ (8012988 <eMBTCPInit+0x74>)
 8012948:	2200      	movs	r2, #0
 801294a:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 801294c:	4b0f      	ldr	r3, [pc, #60]	@ (801298c <eMBTCPInit+0x78>)
 801294e:	22ff      	movs	r2, #255	@ 0xff
 8012950:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8012952:	4b0f      	ldr	r3, [pc, #60]	@ (8012990 <eMBTCPInit+0x7c>)
 8012954:	2202      	movs	r2, #2
 8012956:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8012958:	4b02      	ldr	r3, [pc, #8]	@ (8012964 <eMBTCPInit+0x50>)
 801295a:	2201      	movs	r2, #1
 801295c:	701a      	strb	r2, [r3, #0]
 801295e:	e7e1      	b.n	8012924 <eMBTCPInit+0x10>
        eStatus = MB_EPORTERR;
 8012960:	2403      	movs	r4, #3
 8012962:	e7df      	b.n	8012924 <eMBTCPInit+0x10>
 8012964:	2000009c 	.word	0x2000009c
 8012968:	20000a68 	.word	0x20000a68
 801296c:	08012cc7 	.word	0x08012cc7
 8012970:	20000a64 	.word	0x20000a64
 8012974:	08012cc9 	.word	0x08012cc9
 8012978:	20000a60 	.word	0x20000a60
 801297c:	08012cd1 	.word	0x08012cd1
 8012980:	20000a6c 	.word	0x20000a6c
 8012984:	08012d11 	.word	0x08012d11
 8012988:	20000a5c 	.word	0x20000a5c
 801298c:	20000a71 	.word	0x20000a71
 8012990:	20000a70 	.word	0x20000a70

08012994 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8012994:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8012996:	4b06      	ldr	r3, [pc, #24]	@ (80129b0 <eMBEnable+0x1c>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	2b01      	cmp	r3, #1
 801299c:	d001      	beq.n	80129a2 <eMBEnable+0xe>
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
 801299e:	2006      	movs	r0, #6
    }
    return eStatus;
}
 80129a0:	bd08      	pop	{r3, pc}
        pvMBFrameStartCur(  );
 80129a2:	4b04      	ldr	r3, [pc, #16]	@ (80129b4 <eMBEnable+0x20>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80129a8:	2000      	movs	r0, #0
 80129aa:	4b01      	ldr	r3, [pc, #4]	@ (80129b0 <eMBEnable+0x1c>)
 80129ac:	7018      	strb	r0, [r3, #0]
 80129ae:	e7f7      	b.n	80129a0 <eMBEnable+0xc>
 80129b0:	2000009c 	.word	0x2000009c
 80129b4:	20000a68 	.word	0x20000a68

080129b8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80129b8:	b530      	push	{r4, r5, lr}
 80129ba:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80129bc:	4b36      	ldr	r3, [pc, #216]	@ (8012a98 <eMBPoll+0xe0>)
 80129be:	781c      	ldrb	r4, [r3, #0]
 80129c0:	2c00      	cmp	r4, #0
 80129c2:	d163      	bne.n	8012a8c <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80129c4:	f10d 0007 	add.w	r0, sp, #7
 80129c8:	f000 f88e 	bl	8012ae8 <xMBPortEventGet>
 80129cc:	2801      	cmp	r0, #1
 80129ce:	d002      	beq.n	80129d6 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80129d0:	4620      	mov	r0, r4
 80129d2:	b003      	add	sp, #12
 80129d4:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 80129d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d014      	beq.n	8012a08 <eMBPoll+0x50>
 80129de:	2b02      	cmp	r3, #2
 80129e0:	d1f6      	bne.n	80129d0 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80129e2:	4b2e      	ldr	r3, [pc, #184]	@ (8012a9c <eMBPoll+0xe4>)
 80129e4:	6818      	ldr	r0, [r3, #0]
 80129e6:	7801      	ldrb	r1, [r0, #0]
 80129e8:	4b2d      	ldr	r3, [pc, #180]	@ (8012aa0 <eMBPoll+0xe8>)
 80129ea:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80129ec:	4b2d      	ldr	r3, [pc, #180]	@ (8012aa4 <eMBPoll+0xec>)
 80129ee:	2201      	movs	r2, #1
 80129f0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80129f2:	2300      	movs	r3, #0
 80129f4:	2b0f      	cmp	r3, #15
 80129f6:	dc25      	bgt.n	8012a44 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80129f8:	4a2b      	ldr	r2, [pc, #172]	@ (8012aa8 <eMBPoll+0xf0>)
 80129fa:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80129fe:	b30a      	cbz	r2, 8012a44 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8012a00:	4291      	cmp	r1, r2
 8012a02:	d017      	beq.n	8012a34 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8012a04:	3301      	adds	r3, #1
 8012a06:	e7f5      	b.n	80129f4 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8012a08:	4b28      	ldr	r3, [pc, #160]	@ (8012aac <eMBPoll+0xf4>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	4a28      	ldr	r2, [pc, #160]	@ (8012ab0 <eMBPoll+0xf8>)
 8012a0e:	4923      	ldr	r1, [pc, #140]	@ (8012a9c <eMBPoll+0xe4>)
 8012a10:	4828      	ldr	r0, [pc, #160]	@ (8012ab4 <eMBPoll+0xfc>)
 8012a12:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012a14:	4605      	mov	r5, r0
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d1da      	bne.n	80129d0 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8012a1a:	4b26      	ldr	r3, [pc, #152]	@ (8012ab4 <eMBPoll+0xfc>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	4a26      	ldr	r2, [pc, #152]	@ (8012ab8 <eMBPoll+0x100>)
 8012a20:	7812      	ldrb	r2, [r2, #0]
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d001      	beq.n	8012a2a <eMBPoll+0x72>
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d132      	bne.n	8012a90 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8012a2a:	2002      	movs	r0, #2
 8012a2c:	f000 f850 	bl	8012ad0 <xMBPortEventPost>
    return MB_ENOERR;
 8012a30:	462c      	mov	r4, r5
 8012a32:	e7cd      	b.n	80129d0 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012a34:	4a1c      	ldr	r2, [pc, #112]	@ (8012aa8 <eMBPoll+0xf0>)
 8012a36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	491c      	ldr	r1, [pc, #112]	@ (8012ab0 <eMBPoll+0xf8>)
 8012a3e:	4798      	blx	r3
 8012a40:	4b18      	ldr	r3, [pc, #96]	@ (8012aa4 <eMBPoll+0xec>)
 8012a42:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012a44:	4b1b      	ldr	r3, [pc, #108]	@ (8012ab4 <eMBPoll+0xfc>)
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	b323      	cbz	r3, 8012a94 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 8012a4a:	4b16      	ldr	r3, [pc, #88]	@ (8012aa4 <eMBPoll+0xec>)
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	b19b      	cbz	r3, 8012a78 <eMBPoll+0xc0>
                    usLength = 0;
 8012a50:	4a17      	ldr	r2, [pc, #92]	@ (8012ab0 <eMBPoll+0xf8>)
 8012a52:	2100      	movs	r1, #0
 8012a54:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012a56:	4912      	ldr	r1, [pc, #72]	@ (8012aa0 <eMBPoll+0xe8>)
 8012a58:	7809      	ldrb	r1, [r1, #0]
 8012a5a:	4810      	ldr	r0, [pc, #64]	@ (8012a9c <eMBPoll+0xe4>)
 8012a5c:	6805      	ldr	r5, [r0, #0]
 8012a5e:	f04f 0c01 	mov.w	ip, #1
 8012a62:	f8a2 c000 	strh.w	ip, [r2]
 8012a66:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8012a6a:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 8012a6c:	6800      	ldr	r0, [r0, #0]
 8012a6e:	8811      	ldrh	r1, [r2, #0]
 8012a70:	eb01 050c 	add.w	r5, r1, ip
 8012a74:	8015      	strh	r5, [r2, #0]
 8012a76:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012a78:	4b10      	ldr	r3, [pc, #64]	@ (8012abc <eMBPoll+0x104>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ab0 <eMBPoll+0xf8>)
 8012a7e:	8812      	ldrh	r2, [r2, #0]
 8012a80:	4906      	ldr	r1, [pc, #24]	@ (8012a9c <eMBPoll+0xe4>)
 8012a82:	6809      	ldr	r1, [r1, #0]
 8012a84:	480c      	ldr	r0, [pc, #48]	@ (8012ab8 <eMBPoll+0x100>)
 8012a86:	7800      	ldrb	r0, [r0, #0]
 8012a88:	4798      	blx	r3
 8012a8a:	e7a1      	b.n	80129d0 <eMBPoll+0x18>
        return MB_EILLSTATE;
 8012a8c:	2406      	movs	r4, #6
 8012a8e:	e79f      	b.n	80129d0 <eMBPoll+0x18>
    return MB_ENOERR;
 8012a90:	4604      	mov	r4, r0
 8012a92:	e79d      	b.n	80129d0 <eMBPoll+0x18>
 8012a94:	461c      	mov	r4, r3
 8012a96:	e79b      	b.n	80129d0 <eMBPoll+0x18>
 8012a98:	2000009c 	.word	0x2000009c
 8012a9c:	20000a54 	.word	0x20000a54
 8012aa0:	20000a51 	.word	0x20000a51
 8012aa4:	20000a50 	.word	0x20000a50
 8012aa8:	2000001c 	.word	0x2000001c
 8012aac:	20000a60 	.word	0x20000a60
 8012ab0:	20000a52 	.word	0x20000a52
 8012ab4:	20000a58 	.word	0x20000a58
 8012ab8:	20000a71 	.word	0x20000a71
 8012abc:	20000a6c 	.word	0x20000a6c

08012ac0 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8012ac0:	4b02      	ldr	r3, [pc, #8]	@ (8012acc <xMBPortEventInit+0xc>)
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8012ac6:	2001      	movs	r0, #1
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	20000a72 	.word	0x20000a72

08012ad0 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	4a03      	ldr	r2, [pc, #12]	@ (8012ae0 <xMBPortEventPost+0x10>)
 8012ad4:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8012ad6:	4a03      	ldr	r2, [pc, #12]	@ (8012ae4 <xMBPortEventPost+0x14>)
 8012ad8:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	20000a72 	.word	0x20000a72
 8012ae4:	20000a73 	.word	0x20000a73

08012ae8 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8012ae8:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8012aea:	4a05      	ldr	r2, [pc, #20]	@ (8012b00 <xMBPortEventGet+0x18>)
 8012aec:	7810      	ldrb	r0, [r2, #0]
 8012aee:	b130      	cbz	r0, 8012afe <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 8012af0:	4a04      	ldr	r2, [pc, #16]	@ (8012b04 <xMBPortEventGet+0x1c>)
 8012af2:	7812      	ldrb	r2, [r2, #0]
 8012af4:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8012af6:	4b02      	ldr	r3, [pc, #8]	@ (8012b00 <xMBPortEventGet+0x18>)
 8012af8:	2200      	movs	r2, #0
 8012afa:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8012afc:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 8012afe:	4770      	bx	lr
 8012b00:	20000a72 	.word	0x20000a72
 8012b04:	20000a73 	.word	0x20000a73

08012b08 <handler_mb_tcp>:


//mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip);
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ){
 8012b08:	2907      	cmp	r1, #7
 8012b0a:	d000      	beq.n	8012b0e <handler_mb_tcp+0x6>
 8012b0c:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 8012b0e:	b538      	push	{r3, r4, r5, lr}
 8012b10:	4604      	mov	r4, r0
		if (mg_check_ip_acl(mg_acl, &c->rem) != 1){
 8012b12:	4b1e      	ldr	r3, [pc, #120]	@ (8012b8c <handler_mb_tcp+0x84>)
 8012b14:	f100 021c 	add.w	r2, r0, #28
 8012b18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b1c:	f013 fa4e 	bl	8025fbc <mg_check_ip_acl>
 8012b20:	2801      	cmp	r0, #1
 8012b22:	d006      	beq.n	8012b32 <handler_mb_tcp+0x2a>
			c->is_closing = 1;
 8012b24:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b28:	f043 0320 	orr.w	r3, r3, #32
 8012b2c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
			}
		}else{
			c->is_closing = 1;
		}
	}
}
 8012b30:	bd38      	pop	{r3, r4, r5, pc}
		ucTCPRequestLen = r->len;
 8012b32:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012b34:	b293      	uxth	r3, r2
 8012b36:	4916      	ldr	r1, [pc, #88]	@ (8012b90 <handler_mb_tcp+0x88>)
 8012b38:	800b      	strh	r3, [r1, #0]
		if(ucTCPRequestLen>0){
 8012b3a:	b933      	cbnz	r3, 8012b4a <handler_mb_tcp+0x42>
			c->is_closing = 1;
 8012b3c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b40:	f043 0320 	orr.w	r3, r3, #32
 8012b44:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012b48:	e7f2      	b.n	8012b30 <handler_mb_tcp+0x28>
			memcpy(ucTCPRequestFrame, r->buf, sizeof(uint8_t) * ucTCPRequestLen);
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012b4e:	4811      	ldr	r0, [pc, #68]	@ (8012b94 <handler_mb_tcp+0x8c>)
 8012b50:	f01b f8d2 	bl	802dcf8 <memcpy>
			xMBPortEventPost (EV_FRAME_RECEIVED);
 8012b54:	2001      	movs	r0, #1
 8012b56:	f7ff ffbb 	bl	8012ad0 <xMBPortEventPost>
			eMBPoll ();
 8012b5a:	f7ff ff2d 	bl	80129b8 <eMBPoll>
			eMBPoll ();
 8012b5e:	f7ff ff2b 	bl	80129b8 <eMBPoll>
			if(bFrameSent){
 8012b62:	4b0d      	ldr	r3, [pc, #52]	@ (8012b98 <handler_mb_tcp+0x90>)
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	b933      	cbnz	r3, 8012b76 <handler_mb_tcp+0x6e>
				c->is_closing = 1;
 8012b68:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8012b6c:	f043 0320 	orr.w	r3, r3, #32
 8012b70:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8012b74:	e7dc      	b.n	8012b30 <handler_mb_tcp+0x28>
				bFrameSent = FALSE;
 8012b76:	2500      	movs	r5, #0
 8012b78:	4b07      	ldr	r3, [pc, #28]	@ (8012b98 <handler_mb_tcp+0x90>)
 8012b7a:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 8012b7c:	4b07      	ldr	r3, [pc, #28]	@ (8012b9c <handler_mb_tcp+0x94>)
 8012b7e:	881a      	ldrh	r2, [r3, #0]
 8012b80:	4907      	ldr	r1, [pc, #28]	@ (8012ba0 <handler_mb_tcp+0x98>)
 8012b82:	4620      	mov	r0, r4
 8012b84:	f014 fb34 	bl	80271f0 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012b88:	6425      	str	r5, [r4, #64]	@ 0x40
 8012b8a:	e7d1      	b.n	8012b30 <handler_mb_tcp+0x28>
 8012b8c:	20000a74 	.word	0x20000a74
 8012b90:	20001280 	.word	0x20001280
 8012b94:	20001284 	.word	0x20001284
 8012b98:	20000a7c 	.word	0x20000a7c
 8012b9c:	20000a7e 	.word	0x20000a7e
 8012ba0:	20000a80 	.word	0x20000a80

08012ba4 <my_calloc>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8012ba4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012ba6:	fb01 f400 	mul.w	r4, r1, r0
 8012baa:	4620      	mov	r0, r4
 8012bac:	f007 fe34 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	b118      	cbz	r0, 8012bbc <my_calloc+0x18>
 8012bb4:	4622      	mov	r2, r4
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	f019 fe62 	bl	802c880 <memset>
  return p;
}
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	bd38      	pop	{r3, r4, r5, pc}

08012bc0 <init_mb_tcp>:



void init_mb_tcp(void * param){
 8012bc0:	b530      	push	{r4, r5, lr}
 8012bc2:	b083      	sub	sp, #12

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	4a24      	ldr	r2, [pc, #144]	@ (8012c58 <init_mb_tcp+0x98>)
 8012bc8:	4924      	ldr	r1, [pc, #144]	@ (8012c5c <init_mb_tcp+0x9c>)
 8012bca:	f014 fa25 	bl	8027018 <mg_listen>

	eMBTCPInit(0);
 8012bce:	2000      	movs	r0, #0
 8012bd0:	f7ff fea0 	bl	8012914 <eMBTCPInit>
	eMBEnable();
 8012bd4:	f7ff fede 	bl	8012994 <eMBEnable>

	size_t acl_size = 0;
 8012bd8:	2200      	movs	r2, #0
 8012bda:	9201      	str	r2, [sp, #4]
	mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8012bdc:	a901      	add	r1, sp, #4
 8012bde:	4820      	ldr	r0, [pc, #128]	@ (8012c60 <init_mb_tcp+0xa0>)
 8012be0:	f007 ff82 	bl	801aae8 <mg_fs_lfs_status>
	if(acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 8012be4:	9801      	ldr	r0, [sp, #4]
 8012be6:	1e42      	subs	r2, r0, #1
 8012be8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d815      	bhi.n	8012c1c <init_mb_tcp+0x5c>
		mg_acl.buf = calloc(acl_size + 1, sizeof(char));
 8012bf0:	2101      	movs	r1, #1
 8012bf2:	4408      	add	r0, r1
 8012bf4:	f7ff ffd6 	bl	8012ba4 <my_calloc>
 8012bf8:	4d1a      	ldr	r5, [pc, #104]	@ (8012c64 <init_mb_tcp+0xa4>)
 8012bfa:	6028      	str	r0, [r5, #0]
		void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8012bfc:	2101      	movs	r1, #1
 8012bfe:	4818      	ldr	r0, [pc, #96]	@ (8012c60 <init_mb_tcp+0xa0>)
 8012c00:	f007 ffb0 	bl	801ab64 <mg_fs_lfs_open>
 8012c04:	4604      	mov	r4, r0
		mg_fs_lfs_read(fd, mg_acl.buf, acl_size);
 8012c06:	9a01      	ldr	r2, [sp, #4]
 8012c08:	6829      	ldr	r1, [r5, #0]
 8012c0a:	f007 ffdb 	bl	801abc4 <mg_fs_lfs_read>
		mg_acl.len = acl_size;
 8012c0e:	9b01      	ldr	r3, [sp, #4]
 8012c10:	606b      	str	r3, [r5, #4]
		mg_fs_lfs_close(fd);
 8012c12:	4620      	mov	r0, r4
 8012c14:	f007 ffca 	bl	801abac <mg_fs_lfs_close>
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
		mg_fs_lfs_close(fd1);
	}
}
 8012c18:	b003      	add	sp, #12
 8012c1a:	bd30      	pop	{r4, r5, pc}
		mg_acl.buf = calloc(strlen(DEFAULT_ACL) + 1, sizeof(char));
 8012c1c:	2101      	movs	r1, #1
 8012c1e:	200b      	movs	r0, #11
 8012c20:	f7ff ffc0 	bl	8012ba4 <my_calloc>
 8012c24:	4603      	mov	r3, r0
 8012c26:	4c0f      	ldr	r4, [pc, #60]	@ (8012c64 <init_mb_tcp+0xa4>)
 8012c28:	6020      	str	r0, [r4, #0]
		mg_acl.len = strlen(DEFAULT_ACL) + 1;
 8012c2a:	220b      	movs	r2, #11
 8012c2c:	6062      	str	r2, [r4, #4]
		strncpy(mg_acl.buf, DEFAULT_ACL, mg_acl.len);
 8012c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8012c68 <init_mb_tcp+0xa8>)
 8012c30:	ca03      	ldmia	r2!, {r0, r1}
 8012c32:	6018      	str	r0, [r3, #0]
 8012c34:	6059      	str	r1, [r3, #4]
 8012c36:	8811      	ldrh	r1, [r2, #0]
 8012c38:	7892      	ldrb	r2, [r2, #2]
 8012c3a:	8119      	strh	r1, [r3, #8]
 8012c3c:	729a      	strb	r2, [r3, #10]
		void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8012c3e:	2102      	movs	r1, #2
 8012c40:	4807      	ldr	r0, [pc, #28]	@ (8012c60 <init_mb_tcp+0xa0>)
 8012c42:	f007 ff8f 	bl	801ab64 <mg_fs_lfs_open>
 8012c46:	4605      	mov	r5, r0
		mg_fs_lfs_write(fd1, mg_acl.buf, mg_acl.len);
 8012c48:	6862      	ldr	r2, [r4, #4]
 8012c4a:	6821      	ldr	r1, [r4, #0]
 8012c4c:	f007 ffc6 	bl	801abdc <mg_fs_lfs_write>
		mg_fs_lfs_close(fd1);
 8012c50:	4628      	mov	r0, r5
 8012c52:	f007 ffab 	bl	801abac <mg_fs_lfs_close>
}
 8012c56:	e7df      	b.n	8012c18 <init_mb_tcp+0x58>
 8012c58:	08012b09 	.word	0x08012b09
 8012c5c:	08036390 	.word	0x08036390
 8012c60:	080363a4 	.word	0x080363a4
 8012c64:	20000a74 	.word	0x20000a74
 8012c68:	080363b8 	.word	0x080363b8

08012c6c <xMBTCPPortInit>:
BOOL  xMBTCPPortInit( USHORT usTCPPort )
{


    return TRUE;
}
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	4770      	bx	lr

08012c70 <xMBTCPPortGetRequest>:

BOOL  xMBTCPPortGetRequest( UCHAR **ppucMBTCPFrame, USHORT * usTCPLength )
{
    *ppucMBTCPFrame = (uint8_t *) &ucTCPRequestFrame[0];
 8012c70:	4b04      	ldr	r3, [pc, #16]	@ (8012c84 <xMBTCPPortGetRequest+0x14>)
 8012c72:	6003      	str	r3, [r0, #0]
    *usTCPLength = ucTCPRequestLen;
 8012c74:	4b04      	ldr	r3, [pc, #16]	@ (8012c88 <xMBTCPPortGetRequest+0x18>)
 8012c76:	881a      	ldrh	r2, [r3, #0]
 8012c78:	800a      	strh	r2, [r1, #0]
    // Reset the buffer.
    ucTCPRequestLen = 0;
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	801a      	strh	r2, [r3, #0]
    return TRUE;
}
 8012c7e:	2001      	movs	r0, #1
 8012c80:	4770      	bx	lr
 8012c82:	bf00      	nop
 8012c84:	20001284 	.word	0x20001284
 8012c88:	20001280 	.word	0x20001280

08012c8c <xMBTCPPortSendResponse>:


BOOL xMBTCPPortSendResponse( const UCHAR *pucMBTCPFrame, USHORT usTCPLength )
{
 8012c8c:	b510      	push	{r4, lr}
 8012c8e:	460c      	mov	r4, r1
      memcpy(ucTCPResponseFrame,pucMBTCPFrame , usTCPLength);
 8012c90:	460a      	mov	r2, r1
 8012c92:	4601      	mov	r1, r0
 8012c94:	4804      	ldr	r0, [pc, #16]	@ (8012ca8 <xMBTCPPortSendResponse+0x1c>)
 8012c96:	f01b f82f 	bl	802dcf8 <memcpy>
      ucTCPResponseLen = usTCPLength;
 8012c9a:	4b04      	ldr	r3, [pc, #16]	@ (8012cac <xMBTCPPortSendResponse+0x20>)
 8012c9c:	801c      	strh	r4, [r3, #0]
      bFrameSent = TRUE;
 8012c9e:	2001      	movs	r0, #1
 8012ca0:	4b03      	ldr	r3, [pc, #12]	@ (8012cb0 <xMBTCPPortSendResponse+0x24>)
 8012ca2:	7018      	strb	r0, [r3, #0]
      return bFrameSent;
}
 8012ca4:	bd10      	pop	{r4, pc}
 8012ca6:	bf00      	nop
 8012ca8:	20000a80 	.word	0x20000a80
 8012cac:	20000a7e 	.word	0x20000a7e
 8012cb0:	20000a7c 	.word	0x20000a7c

08012cb4 <vMBTCPPortDisable>:
{
};

void vMBTCPPortDisable( void )
{
};
 8012cb4:	4770      	bx	lr

08012cb6 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8012cb6:	b508      	push	{r3, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8012cb8:	f7ff ffd8 	bl	8012c6c <xMBTCPPortInit>
 8012cbc:	b108      	cbz	r0, 8012cc2 <eMBTCPDoInit+0xc>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012cbe:	2000      	movs	r0, #0
    {
        eStatus = MB_EPORTERR;
    }
    return eStatus;
}
 8012cc0:	bd08      	pop	{r3, pc}
        eStatus = MB_EPORTERR;
 8012cc2:	2003      	movs	r0, #3
 8012cc4:	e7fc      	b.n	8012cc0 <eMBTCPDoInit+0xa>

08012cc6 <eMBTCPStart>:

void
eMBTCPStart( void )
{
}
 8012cc6:	4770      	bx	lr

08012cc8 <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8012cc8:	b508      	push	{r3, lr}
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8012cca:	f7ff fff3 	bl	8012cb4 <vMBTCPPortDisable>
}
 8012cce:	bd08      	pop	{r3, pc}

08012cd0 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8012cd0:	b570      	push	{r4, r5, r6, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	4606      	mov	r6, r0
 8012cd6:	460d      	mov	r5, r1
 8012cd8:	4614      	mov	r4, r2
    eMBErrorCode    eStatus = MB_EIO;
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8012cda:	f10d 0102 	add.w	r1, sp, #2
 8012cde:	a801      	add	r0, sp, #4
 8012ce0:	f7ff ffc6 	bl	8012c70 <xMBTCPPortGetRequest>
 8012ce4:	b180      	cbz	r0, 8012d08 <eMBTCPReceive+0x38>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8012ce6:	9b01      	ldr	r3, [sp, #4]
 8012ce8:	7899      	ldrb	r1, [r3, #2]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8012cea:	78da      	ldrb	r2, [r3, #3]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8012cec:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8012cf0:	d10c      	bne.n	8012d0c <eMBTCPReceive+0x3c>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8012cf2:	3307      	adds	r3, #7
 8012cf4:	602b      	str	r3, [r5, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8012cf6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012cfa:	3b07      	subs	r3, #7
 8012cfc:	8023      	strh	r3, [r4, #0]
            eStatus = MB_ENOERR;

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8012cfe:	23ff      	movs	r3, #255	@ 0xff
 8012d00:	7033      	strb	r3, [r6, #0]
            eStatus = MB_ENOERR;
 8012d02:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012d04:	b002      	add	sp, #8
 8012d06:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EIO;
 8012d08:	2005      	movs	r0, #5
 8012d0a:	e7fb      	b.n	8012d04 <eMBTCPReceive+0x34>
    eMBErrorCode    eStatus = MB_EIO;
 8012d0c:	2005      	movs	r0, #5
 8012d0e:	e7f9      	b.n	8012d04 <eMBTCPReceive+0x34>

08012d10 <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 8012d10:	b508      	push	{r3, lr}
 8012d12:	4608      	mov	r0, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8012d14:	1dd1      	adds	r1, r2, #7
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 8012d16:	1c53      	adds	r3, r2, #1
 8012d18:	121b      	asrs	r3, r3, #8
 8012d1a:	f800 3c03 	strb.w	r3, [r0, #-3]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8012d1e:	3201      	adds	r2, #1
 8012d20:	f800 2c02 	strb.w	r2, [r0, #-2]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8012d24:	b289      	uxth	r1, r1
 8012d26:	3807      	subs	r0, #7
 8012d28:	f7ff ffb0 	bl	8012c8c <xMBTCPPortSendResponse>
 8012d2c:	b108      	cbz	r0, 8012d32 <eMBTCPSend+0x22>
    eMBErrorCode    eStatus = MB_ENOERR;
 8012d2e:	2000      	movs	r0, #0
    {
        eStatus = MB_EIO;
    }
    return eStatus;
}
 8012d30:	bd08      	pop	{r3, pc}
        eStatus = MB_EIO;
 8012d32:	2005      	movs	r0, #5
 8012d34:	e7fc      	b.n	8012d30 <eMBTCPSend+0x20>
	...

08012d38 <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012d38:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012d3a:	4b03      	ldr	r3, [pc, #12]	@ (8012d48 <handle_OPTIONS_method+0x10>)
 8012d3c:	4a03      	ldr	r2, [pc, #12]	@ (8012d4c <handle_OPTIONS_method+0x14>)
 8012d3e:	21c8      	movs	r1, #200	@ 0xc8
 8012d40:	f011 f8a4 	bl	8023e8c <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012d44:	bd08      	pop	{r3, pc}
 8012d46:	bf00      	nop
 8012d48:	0803aba4 	.word	0x0803aba4
 8012d4c:	080363c4 	.word	0x080363c4

08012d50 <handler_dev_version>:
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST methods\"}\r\n");
		return;
	}
}

static void handler_dev_version(struct mg_connection *c, struct mg_http_message *hm){
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	4605      	mov	r5, r0
 8012d56:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012d58:	ae02      	add	r6, sp, #8
 8012d5a:	4910      	ldr	r1, [pc, #64]	@ (8012d9c <handler_dev_version+0x4c>)
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	f011 fa1f 	bl	80241a0 <mg_str_s>
 8012d62:	2300      	movs	r3, #0
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d6e:	f011 fc39 	bl	80245e4 <mg_match>
 8012d72:	b158      	cbz	r0, 8012d8c <handler_dev_version+0x3c>
		mg_http_reply(c, 200, headers,
 8012d74:	4b0a      	ldr	r3, [pc, #40]	@ (8012da0 <handler_dev_version+0x50>)
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	4b0a      	ldr	r3, [pc, #40]	@ (8012da4 <handler_dev_version+0x54>)
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8012da8 <handler_dev_version+0x58>)
 8012d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8012dac <handler_dev_version+0x5c>)
 8012d80:	21c8      	movs	r1, #200	@ 0xc8
 8012d82:	4628      	mov	r0, r5
 8012d84:	f011 f882 	bl	8023e8c <mg_http_reply>
		mg_http_reply(c, 405, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
		return;

	}
}
 8012d88:	b004      	add	sp, #16
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012d8c:	4b08      	ldr	r3, [pc, #32]	@ (8012db0 <handler_dev_version+0x60>)
 8012d8e:	4a07      	ldr	r2, [pc, #28]	@ (8012dac <handler_dev_version+0x5c>)
 8012d90:	f240 1195 	movw	r1, #405	@ 0x195
 8012d94:	4628      	mov	r0, r5
 8012d96:	f011 f879 	bl	8023e8c <mg_http_reply>
		return;
 8012d9a:	e7f5      	b.n	8012d88 <handler_dev_version+0x38>
 8012d9c:	08036464 	.word	0x08036464
 8012da0:	08036510 	.word	0x08036510
 8012da4:	08036514 	.word	0x08036514
 8012da8:	08036468 	.word	0x08036468
 8012dac:	080364a0 	.word	0x080364a0
 8012db0:	08036518 	.word	0x08036518

08012db4 <handle_firmware_deactivate>:
static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 8012db4:	b570      	push	{r4, r5, r6, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	4605      	mov	r5, r0
 8012dba:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012dbc:	ae02      	add	r6, sp, #8
 8012dbe:	4914      	ldr	r1, [pc, #80]	@ (8012e10 <handle_firmware_deactivate+0x5c>)
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f011 f9ed 	bl	80241a0 <mg_str_s>
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012dd2:	f011 fc07 	bl	80245e4 <mg_match>
 8012dd6:	b198      	cbz	r0, 8012e00 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8012e14 <handle_firmware_deactivate+0x60>)
 8012dda:	6a1b      	ldr	r3, [r3, #32]
 8012ddc:	480e      	ldr	r0, [pc, #56]	@ (8012e18 <handle_firmware_deactivate+0x64>)
 8012dde:	4798      	blx	r3
 8012de0:	b138      	cbz	r0, 8012df2 <handle_firmware_deactivate+0x3e>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8012de2:	4b0e      	ldr	r3, [pc, #56]	@ (8012e1c <handle_firmware_deactivate+0x68>)
 8012de4:	4a0e      	ldr	r2, [pc, #56]	@ (8012e20 <handle_firmware_deactivate+0x6c>)
 8012de6:	21c8      	movs	r1, #200	@ 0xc8
 8012de8:	4628      	mov	r0, r5
 8012dea:	f011 f84f 	bl	8023e8c <mg_http_reply>
}
 8012dee:	b004      	add	sp, #16
 8012df0:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 8012df2:	4b0c      	ldr	r3, [pc, #48]	@ (8012e24 <handle_firmware_deactivate+0x70>)
 8012df4:	4a0a      	ldr	r2, [pc, #40]	@ (8012e20 <handle_firmware_deactivate+0x6c>)
 8012df6:	21c8      	movs	r1, #200	@ 0xc8
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f011 f847 	bl	8023e8c <mg_http_reply>
 8012dfe:	e7f6      	b.n	8012dee <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012e00:	4b09      	ldr	r3, [pc, #36]	@ (8012e28 <handle_firmware_deactivate+0x74>)
 8012e02:	4a07      	ldr	r2, [pc, #28]	@ (8012e20 <handle_firmware_deactivate+0x6c>)
 8012e04:	f240 1195 	movw	r1, #405	@ 0x195
 8012e08:	4628      	mov	r0, r5
 8012e0a:	f011 f83f 	bl	8023e8c <mg_http_reply>
}
 8012e0e:	e7ee      	b.n	8012dee <handle_firmware_deactivate+0x3a>
 8012e10:	08036568 	.word	0x08036568
 8012e14:	200000a0 	.word	0x200000a0
 8012e18:	08035e8c 	.word	0x08035e8c
 8012e1c:	08036570 	.word	0x08036570
 8012e20:	080364a0 	.word	0x080364a0
 8012e24:	080365ac 	.word	0x080365ac
 8012e28:	080365f0 	.word	0x080365f0

08012e2c <handle_web_files_remove>:
static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 8012e2c:	b570      	push	{r4, r5, r6, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	4605      	mov	r5, r0
 8012e32:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012e34:	ae02      	add	r6, sp, #8
 8012e36:	4912      	ldr	r1, [pc, #72]	@ (8012e80 <handle_web_files_remove+0x54>)
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f011 f9b1 	bl	80241a0 <mg_str_s>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	9300      	str	r3, [sp, #0]
 8012e42:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e4a:	f011 fbcb 	bl	80245e4 <mg_match>
 8012e4e:	b178      	cbz	r0, 8012e70 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8012e50:	4e0c      	ldr	r6, [pc, #48]	@ (8012e84 <handle_web_files_remove+0x58>)
 8012e52:	6a33      	ldr	r3, [r6, #32]
 8012e54:	4c0c      	ldr	r4, [pc, #48]	@ (8012e88 <handle_web_files_remove+0x5c>)
 8012e56:	4620      	mov	r0, r4
 8012e58:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8012e5a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e60:	4b0a      	ldr	r3, [pc, #40]	@ (8012e8c <handle_web_files_remove+0x60>)
 8012e62:	4a0b      	ldr	r2, [pc, #44]	@ (8012e90 <handle_web_files_remove+0x64>)
 8012e64:	21c8      	movs	r1, #200	@ 0xc8
 8012e66:	4628      	mov	r0, r5
 8012e68:	f011 f810 	bl	8023e8c <mg_http_reply>
}
 8012e6c:	b004      	add	sp, #16
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8012e70:	4b08      	ldr	r3, [pc, #32]	@ (8012e94 <handle_web_files_remove+0x68>)
 8012e72:	4a07      	ldr	r2, [pc, #28]	@ (8012e90 <handle_web_files_remove+0x64>)
 8012e74:	f240 1195 	movw	r1, #405	@ 0x195
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f011 f807 	bl	8023e8c <mg_http_reply>
}
 8012e7e:	e7f5      	b.n	8012e6c <handle_web_files_remove+0x40>
 8012e80:	08036568 	.word	0x08036568
 8012e84:	200000a0 	.word	0x200000a0
 8012e88:	08035e78 	.word	0x08035e78
 8012e8c:	08036640 	.word	0x08036640
 8012e90:	080364a0 	.word	0x080364a0
 8012e94:	080365f0 	.word	0x080365f0

08012e98 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8012e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e9a:	b0c3      	sub	sp, #268	@ 0x10c
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	460d      	mov	r5, r1
	char username[128] = {0};
 8012ea0:	2400      	movs	r4, #0
 8012ea2:	9422      	str	r4, [sp, #136]	@ 0x88
 8012ea4:	277c      	movs	r7, #124	@ 0x7c
 8012ea6:	463a      	mov	r2, r7
 8012ea8:	4621      	mov	r1, r4
 8012eaa:	a823      	add	r0, sp, #140	@ 0x8c
 8012eac:	f019 fce8 	bl	802c880 <memset>
	char pass[128] = {0};
 8012eb0:	9402      	str	r4, [sp, #8]
 8012eb2:	463a      	mov	r2, r7
 8012eb4:	4621      	mov	r1, r4
 8012eb6:	a803      	add	r0, sp, #12
 8012eb8:	f019 fce2 	bl	802c880 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012ebc:	2280      	movs	r2, #128	@ 0x80
 8012ebe:	9200      	str	r2, [sp, #0]
 8012ec0:	ab02      	add	r3, sp, #8
 8012ec2:	a922      	add	r1, sp, #136	@ 0x88
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	f012 f893 	bl	8024ff0 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012eca:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012ece:	b113      	cbz	r3, 8012ed6 <handler_logout+0x3e>
 8012ed0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012ed4:	b962      	cbnz	r2, 8012ef0 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8012ed6:	b913      	cbnz	r3, 8012ede <handler_logout+0x46>
 8012ed8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012edc:	bb23      	cbnz	r3, 8012f28 <handler_logout+0x90>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012ede:	4b1e      	ldr	r3, [pc, #120]	@ (8012f58 <handler_logout+0xc0>)
 8012ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8012f5c <handler_logout+0xc4>)
 8012ee2:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	f010 ffd0 	bl	8023e8c <mg_http_reply>
}
 8012eec:	b043      	add	sp, #268	@ 0x10c
 8012eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8012f60 <handler_logout+0xc8>)
 8012ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8012f5c <handler_logout+0xc4>)
 8012ef4:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012ef8:	4630      	mov	r0, r6
 8012efa:	f010 ffc7 	bl	8023e8c <mg_http_reply>
        return;
 8012efe:	e7f5      	b.n	8012eec <handler_logout+0x54>
				web_tokens[i].token[0] = '\0';
 8012f00:	4a18      	ldr	r2, [pc, #96]	@ (8012f64 <handler_logout+0xcc>)
 8012f02:	23b8      	movs	r3, #184	@ 0xb8
 8012f04:	fb04 f303 	mul.w	r3, r4, r3
 8012f08:	18d0      	adds	r0, r2, r3
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	f880 1080 	strb.w	r1, [r0, #128]	@ 0x80
				web_tokens[i].expare = 0;
 8012f10:	2400      	movs	r4, #0
 8012f12:	2500      	movs	r5, #0
 8012f14:	e9c0 452c 	strd	r4, r5, [r0, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8012f18:	54d1      	strb	r1, [r2, r3]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012f1a:	4b13      	ldr	r3, [pc, #76]	@ (8012f68 <handler_logout+0xd0>)
 8012f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8012f5c <handler_logout+0xc4>)
 8012f1e:	21c8      	movs	r1, #200	@ 0xc8
 8012f20:	4630      	mov	r0, r6
 8012f22:	f010 ffb3 	bl	8023e8c <mg_http_reply>
		        return;
 8012f26:	e7e1      	b.n	8012eec <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 8012f28:	2400      	movs	r4, #0
 8012f2a:	2c09      	cmp	r4, #9
 8012f2c:	dc0c      	bgt.n	8012f48 <handler_logout+0xb0>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 8012f2e:	23b8      	movs	r3, #184	@ 0xb8
 8012f30:	fb04 f303 	mul.w	r3, r4, r3
 8012f34:	3380      	adds	r3, #128	@ 0x80
 8012f36:	a902      	add	r1, sp, #8
 8012f38:	480a      	ldr	r0, [pc, #40]	@ (8012f64 <handler_logout+0xcc>)
 8012f3a:	4418      	add	r0, r3
 8012f3c:	f7fd f950 	bl	80101e0 <strcmp>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d0dd      	beq.n	8012f00 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8012f44:	3401      	adds	r4, #1
 8012f46:	e7f0      	b.n	8012f2a <handler_logout+0x92>
        mg_http_reply(c, 404, headers,
 8012f48:	4b08      	ldr	r3, [pc, #32]	@ (8012f6c <handler_logout+0xd4>)
 8012f4a:	4a04      	ldr	r2, [pc, #16]	@ (8012f5c <handler_logout+0xc4>)
 8012f4c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012f50:	4630      	mov	r0, r6
 8012f52:	f010 ff9b 	bl	8023e8c <mg_http_reply>
        return;
 8012f56:	e7c9      	b.n	8012eec <handler_logout+0x54>
 8012f58:	08036778 	.word	0x08036778
 8012f5c:	080364a0 	.word	0x080364a0
 8012f60:	08036688 	.word	0x08036688
 8012f64:	20001a88 	.word	0x20001a88
 8012f68:	08036708 	.word	0x08036708
 8012f6c:	08036744 	.word	0x08036744

08012f70 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 8012f70:	b530      	push	{r4, r5, lr}
 8012f72:	b0c7      	sub	sp, #284	@ 0x11c
 8012f74:	4604      	mov	r4, r0
 8012f76:	460d      	mov	r5, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012f78:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8012f7c:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8012f80:	d01f      	beq.n	8012fc2 <handle_login+0x52>
 8012f82:	4b12      	ldr	r3, [pc, #72]	@ (8012fcc <handle_login+0x5c>)
              cookie_name, u->token,
 8012f84:	f105 0180 	add.w	r1, r5, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8012f88:	b1ea      	cbz	r2, 8012fc6 <handle_login+0x56>
 8012f8a:	4a11      	ldr	r2, [pc, #68]	@ (8012fd0 <handle_login+0x60>)
 8012f8c:	4811      	ldr	r0, [pc, #68]	@ (8012fd4 <handle_login+0x64>)
 8012f8e:	9002      	str	r0, [sp, #8]
 8012f90:	9201      	str	r2, [sp, #4]
 8012f92:	9100      	str	r1, [sp, #0]
 8012f94:	4a10      	ldr	r2, [pc, #64]	@ (8012fd8 <handle_login+0x68>)
 8012f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012f9a:	a806      	add	r0, sp, #24
 8012f9c:	f010 fa78 	bl	8023490 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8012fa0:	9505      	str	r5, [sp, #20]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	9204      	str	r2, [sp, #16]
 8012fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8012fdc <handle_login+0x6c>)
 8012fa8:	9303      	str	r3, [sp, #12]
 8012faa:	490d      	ldr	r1, [pc, #52]	@ (8012fe0 <handle_login+0x70>)
 8012fac:	9102      	str	r1, [sp, #8]
 8012fae:	9201      	str	r2, [sp, #4]
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8012fe4 <handle_login+0x74>)
 8012fb4:	aa06      	add	r2, sp, #24
 8012fb6:	21c8      	movs	r1, #200	@ 0xc8
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f010 ff67 	bl	8023e8c <mg_http_reply>
}
 8012fbe:	b047      	add	sp, #284	@ 0x11c
 8012fc0:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012fc2:	4b09      	ldr	r3, [pc, #36]	@ (8012fe8 <handle_login+0x78>)
 8012fc4:	e7de      	b.n	8012f84 <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8012fc6:	4a09      	ldr	r2, [pc, #36]	@ (8012fec <handle_login+0x7c>)
 8012fc8:	e7e0      	b.n	8012f8c <handle_login+0x1c>
 8012fca:	bf00      	nop
 8012fcc:	080367f0 	.word	0x080367f0
 8012fd0:	08036814 	.word	0x08036814
 8012fd4:	0002a300 	.word	0x0002a300
 8012fd8:	08036820 	.word	0x08036820
 8012fdc:	0802264d 	.word	0x0802264d
 8012fe0:	08037810 	.word	0x08037810
 8012fe4:	08036864 	.word	0x08036864
 8012fe8:	08036804 	.word	0x08036804
 8012fec:	08036a40 	.word	0x08036a40

08012ff0 <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 8012ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ff4:	b0e5      	sub	sp, #404	@ 0x194
 8012ff6:	4605      	mov	r5, r0
 8012ff8:	460c      	mov	r4, r1
 8012ffa:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	9159      	str	r1, [sp, #356]	@ 0x164
 8013000:	2225      	movs	r2, #37	@ 0x25
 8013002:	a85a      	add	r0, sp, #360	@ 0x168
 8013004:	f019 fc3c 	bl	802c880 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8013008:	2280      	movs	r2, #128	@ 0x80
 801300a:	9200      	str	r2, [sp, #0]
 801300c:	ab02      	add	r3, sp, #8
 801300e:	a922      	add	r1, sp, #136	@ 0x88
 8013010:	4620      	mov	r0, r4
 8013012:	f011 ffed 	bl	8024ff0 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8013016:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 801301a:	b113      	cbz	r3, 8013022 <auth+0x32>
 801301c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013020:	b94a      	cbnz	r2, 8013036 <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 8013022:	2b00      	cmp	r3, #0
 8013024:	f040 80ad 	bne.w	8013182 <auth+0x192>
 8013028:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801302c:	2b00      	cmp	r3, #0
 801302e:	f040 80a4 	bne.w	801317a <auth+0x18a>
	return false;
 8013032:	2000      	movs	r0, #0
 8013034:	e0a6      	b.n	8013184 <auth+0x194>
		mg_sha1_init(&sha1_ctx);
 8013036:	a842      	add	r0, sp, #264	@ 0x108
 8013038:	f011 f800 	bl	802403c <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 801303c:	a802      	add	r0, sp, #8
 801303e:	f7fd f92f 	bl	80102a0 <strlen>
 8013042:	4602      	mov	r2, r0
 8013044:	a902      	add	r1, sp, #8
 8013046:	a842      	add	r0, sp, #264	@ 0x108
 8013048:	f011 f812 	bl	8024070 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 801304c:	a942      	add	r1, sp, #264	@ 0x108
 801304e:	a859      	add	r0, sp, #356	@ 0x164
 8013050:	f011 f848 	bl	80240e4 <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 8013054:	2400      	movs	r4, #0
 8013056:	e026      	b.n	80130a6 <auth+0xb6>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8013058:	4649      	mov	r1, r9
 801305a:	4628      	mov	r0, r5
 801305c:	f7ff ff88 	bl	8012f70 <handle_login>
 8013060:	e062      	b.n	8013128 <auth+0x138>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 8013062:	4f4a      	ldr	r7, [pc, #296]	@ (801318c <auth+0x19c>)
 8013064:	2280      	movs	r2, #128	@ 0x80
 8013066:	a922      	add	r1, sp, #136	@ 0x88
 8013068:	4638      	mov	r0, r7
 801306a:	f019 fc50 	bl	802c90e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 801306e:	f016 fc57 	bl	8029920 <mg_now>
 8013072:	4b47      	ldr	r3, [pc, #284]	@ (8013190 <auth+0x1a0>)
 8013074:	18c3      	adds	r3, r0, r3
 8013076:	f141 0100 	adc.w	r1, r1, #0
 801307a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801307e:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8013082:	2128      	movs	r1, #40	@ 0x28
 8013084:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8013088:	f012 fbf8 	bl	802587c <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 801308c:	b90e      	cbnz	r6, 8013092 <auth+0xa2>
					return true;
 801308e:	2001      	movs	r0, #1
 8013090:	e078      	b.n	8013184 <auth+0x194>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 8013092:	21b8      	movs	r1, #184	@ 0xb8
 8013094:	f1a7 03b8 	sub.w	r3, r7, #184	@ 0xb8
 8013098:	fb01 3104 	mla	r1, r1, r4, r3
 801309c:	4628      	mov	r0, r5
 801309e:	f7ff ff67 	bl	8012f70 <handle_login>
 80130a2:	e7f4      	b.n	801308e <auth+0x9e>
		for (i=0; i< user_list_size; i++ ){
 80130a4:	3401      	adds	r4, #1
 80130a6:	2c09      	cmp	r4, #9
 80130a8:	dc40      	bgt.n	801312c <auth+0x13c>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 80130aa:	a922      	add	r1, sp, #136	@ 0x88
 80130ac:	20a9      	movs	r0, #169	@ 0xa9
 80130ae:	4b39      	ldr	r3, [pc, #228]	@ (8013194 <auth+0x1a4>)
 80130b0:	fb00 3004 	mla	r0, r0, r4, r3
 80130b4:	f7fd f894 	bl	80101e0 <strcmp>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	d1f3      	bne.n	80130a4 <auth+0xb4>
 80130bc:	23a9      	movs	r3, #169	@ 0xa9
 80130be:	fb04 f303 	mul.w	r3, r4, r3
 80130c2:	3380      	adds	r3, #128	@ 0x80
 80130c4:	a959      	add	r1, sp, #356	@ 0x164
 80130c6:	4833      	ldr	r0, [pc, #204]	@ (8013194 <auth+0x1a4>)
 80130c8:	4418      	add	r0, r3
 80130ca:	f7fd f889 	bl	80101e0 <strcmp>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d1e8      	bne.n	80130a4 <auth+0xb4>
					if(web_tokens[i].expare < mg_now()){
 80130d2:	4b31      	ldr	r3, [pc, #196]	@ (8013198 <auth+0x1a8>)
 80130d4:	22b8      	movs	r2, #184	@ 0xb8
 80130d6:	fb02 3304 	mla	r3, r2, r4, r3
 80130da:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 80130de:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 80130e2:	f016 fc1d 	bl	8029920 <mg_now>
 80130e6:	4580      	cmp	r8, r0
 80130e8:	418f      	sbcs	r7, r1
 80130ea:	d2ba      	bcs.n	8013062 <auth+0x72>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 80130ec:	27b8      	movs	r7, #184	@ 0xb8
 80130ee:	fb04 f707 	mul.w	r7, r4, r7
 80130f2:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8013198 <auth+0x1a8>
 80130f6:	eb07 0908 	add.w	r9, r7, r8
 80130fa:	2280      	movs	r2, #128	@ 0x80
 80130fc:	a922      	add	r1, sp, #136	@ 0x88
 80130fe:	4648      	mov	r0, r9
 8013100:	f019 fc05 	bl	802c90e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 8013104:	f016 fc0c 	bl	8029920 <mg_now>
 8013108:	4b21      	ldr	r3, [pc, #132]	@ (8013190 <auth+0x1a0>)
 801310a:	18c0      	adds	r0, r0, r3
 801310c:	f141 0100 	adc.w	r1, r1, #0
 8013110:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 8013114:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 8013118:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 801311c:	2128      	movs	r1, #40	@ 0x28
 801311e:	4440      	add	r0, r8
 8013120:	f012 fbac 	bl	802587c <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8013124:	2e00      	cmp	r6, #0
 8013126:	d197      	bne.n	8013058 <auth+0x68>
						return true;
 8013128:	2001      	movs	r0, #1
 801312a:	e02b      	b.n	8013184 <auth+0x194>
	return false;
 801312c:	2000      	movs	r0, #0
 801312e:	e029      	b.n	8013184 <auth+0x194>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8013130:	22b8      	movs	r2, #184	@ 0xb8
 8013132:	4b19      	ldr	r3, [pc, #100]	@ (8013198 <auth+0x1a8>)
 8013134:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	4b18      	ldr	r3, [pc, #96]	@ (801319c <auth+0x1ac>)
 801313c:	4a18      	ldr	r2, [pc, #96]	@ (80131a0 <auth+0x1b0>)
 801313e:	21c8      	movs	r1, #200	@ 0xc8
 8013140:	4628      	mov	r0, r5
 8013142:	f010 fea3 	bl	8023e8c <mg_http_reply>
 8013146:	e016      	b.n	8013176 <auth+0x186>
		for (i=0;i<user_list_size; i++){
 8013148:	3401      	adds	r4, #1
 801314a:	2c09      	cmp	r4, #9
 801314c:	dc17      	bgt.n	801317e <auth+0x18e>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 801314e:	23b8      	movs	r3, #184	@ 0xb8
 8013150:	fb04 f303 	mul.w	r3, r4, r3
 8013154:	3380      	adds	r3, #128	@ 0x80
 8013156:	a902      	add	r1, sp, #8
 8013158:	480f      	ldr	r0, [pc, #60]	@ (8013198 <auth+0x1a8>)
 801315a:	4418      	add	r0, r3
 801315c:	f7fd f840 	bl	80101e0 <strcmp>
 8013160:	2800      	cmp	r0, #0
 8013162:	d1f1      	bne.n	8013148 <auth+0x158>
 8013164:	23b8      	movs	r3, #184	@ 0xb8
 8013166:	fb04 f303 	mul.w	r3, r4, r3
 801316a:	4a0b      	ldr	r2, [pc, #44]	@ (8013198 <auth+0x1a8>)
 801316c:	5cd3      	ldrb	r3, [r2, r3]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d0ea      	beq.n	8013148 <auth+0x158>
				if (set_cookie) mg_http_reply(c, 200, headers,
 8013172:	2e00      	cmp	r6, #0
 8013174:	d1dc      	bne.n	8013130 <auth+0x140>
				return true;
 8013176:	2001      	movs	r0, #1
 8013178:	e004      	b.n	8013184 <auth+0x194>
		for (i=0;i<user_list_size; i++){
 801317a:	2400      	movs	r4, #0
 801317c:	e7e5      	b.n	801314a <auth+0x15a>
	return false;
 801317e:	2000      	movs	r0, #0
 8013180:	e000      	b.n	8013184 <auth+0x194>
 8013182:	2000      	movs	r0, #0
}
 8013184:	b065      	add	sp, #404	@ 0x194
 8013186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801318a:	bf00      	nop
 801318c:	20001b40 	.word	0x20001b40
 8013190:	0a4cb800 	.word	0x0a4cb800
 8013194:	200021b8 	.word	0x200021b8
 8013198:	20001a88 	.word	0x20001a88
 801319c:	0803686c 	.word	0x0803686c
 80131a0:	080364a0 	.word	0x080364a0

080131a4 <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 80131a4:	b510      	push	{r4, lr}
 80131a6:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 80131a8:	2201      	movs	r2, #1
 80131aa:	f7ff ff21 	bl	8012ff0 <auth>
 80131ae:	b100      	cbz	r0, 80131b2 <handler_authanticate+0xe>
}
 80131b0:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 80131b2:	4b04      	ldr	r3, [pc, #16]	@ (80131c4 <handler_authanticate+0x20>)
 80131b4:	4a04      	ldr	r2, [pc, #16]	@ (80131c8 <handler_authanticate+0x24>)
 80131b6:	f240 1193 	movw	r1, #403	@ 0x193
 80131ba:	4620      	mov	r0, r4
 80131bc:	f010 fe66 	bl	8023e8c <mg_http_reply>
}
 80131c0:	e7f6      	b.n	80131b0 <handler_authanticate+0xc>
 80131c2:	bf00      	nop
 80131c4:	080368ac 	.word	0x080368ac
 80131c8:	080364a0 	.word	0x080364a0

080131cc <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 80131cc:	b510      	push	{r4, lr}
 80131ce:	b090      	sub	sp, #64	@ 0x40
 80131d0:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 80131d2:	a809      	add	r0, sp, #36	@ 0x24
 80131d4:	f007 fbe0 	bl	801a998 <vPortGetHeapStats>
	logging(1, "Start execute API RAM status");
 80131d8:	490c      	ldr	r1, [pc, #48]	@ (801320c <handle_ram_status_get+0x40>)
 80131da:	2001      	movs	r0, #1
 80131dc:	f7fe fe8e 	bl	8011efc <logging>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 80131e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131e2:	9306      	str	r3, [sp, #24]
 80131e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131e6:	9305      	str	r3, [sp, #20]
 80131e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80131ea:	9304      	str	r3, [sp, #16]
 80131ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131ee:	9303      	str	r3, [sp, #12]
 80131f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131f2:	9302      	str	r3, [sp, #8]
 80131f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131f6:	9301      	str	r3, [sp, #4]
 80131f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131fa:	9300      	str	r3, [sp, #0]
 80131fc:	4b04      	ldr	r3, [pc, #16]	@ (8013210 <handle_ram_status_get+0x44>)
 80131fe:	4a05      	ldr	r2, [pc, #20]	@ (8013214 <handle_ram_status_get+0x48>)
 8013200:	21c8      	movs	r1, #200	@ 0xc8
 8013202:	4620      	mov	r0, r4
 8013204:	f010 fe42 	bl	8023e8c <mg_http_reply>
}
 8013208:	b010      	add	sp, #64	@ 0x40
 801320a:	bd10      	pop	{r4, pc}
 801320c:	080368dc 	.word	0x080368dc
 8013210:	080368fc 	.word	0x080368fc
 8013214:	08036a00 	.word	0x08036a00

08013218 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8013218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801321a:	b091      	sub	sp, #68	@ 0x44
 801321c:	4606      	mov	r6, r0
 801321e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013220:	ad0c      	add	r5, sp, #48	@ 0x30
 8013222:	494b      	ldr	r1, [pc, #300]	@ (8013350 <handle_io_status_get+0x138>)
 8013224:	4628      	mov	r0, r5
 8013226:	f010 ffbb 	bl	80241a0 <mg_str_s>
 801322a:	2300      	movs	r3, #0
 801322c:	9300      	str	r3, [sp, #0]
 801322e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013236:	f011 f9d5 	bl	80245e4 <mg_match>
 801323a:	b328      	cbz	r0, 8013288 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 801323c:	4c45      	ldr	r4, [pc, #276]	@ (8013354 <handle_io_status_get+0x13c>)
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	2200      	movs	r2, #0
 8013242:	2101      	movs	r1, #1
 8013244:	a80a      	add	r0, sp, #40	@ 0x28
 8013246:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	2200      	movs	r2, #0
 801324c:	2102      	movs	r1, #2
 801324e:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 8013252:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8013254:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013258:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 801325c:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8013260:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8013264:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 8013268:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801326c:	9505      	str	r5, [sp, #20]
 801326e:	9404      	str	r4, [sp, #16]
 8013270:	9003      	str	r0, [sp, #12]
 8013272:	9102      	str	r1, [sp, #8]
 8013274:	9201      	str	r2, [sp, #4]
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	4b37      	ldr	r3, [pc, #220]	@ (8013358 <handle_io_status_get+0x140>)
 801327a:	4a38      	ldr	r2, [pc, #224]	@ (801335c <handle_io_status_get+0x144>)
 801327c:	21c8      	movs	r1, #200	@ 0xc8
 801327e:	4630      	mov	r0, r6
 8013280:	f010 fe04 	bl	8023e8c <mg_http_reply>
}
 8013284:	b011      	add	sp, #68	@ 0x44
 8013286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8013288:	ad0e      	add	r5, sp, #56	@ 0x38
 801328a:	4935      	ldr	r1, [pc, #212]	@ (8013360 <handle_io_status_get+0x148>)
 801328c:	4628      	mov	r0, r5
 801328e:	f010 ff87 	bl	80241a0 <mg_str_s>
 8013292:	2300      	movs	r3, #0
 8013294:	9300      	str	r3, [sp, #0]
 8013296:	e895 000c 	ldmia.w	r5, {r2, r3}
 801329a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801329e:	f011 f9a1 	bl	80245e4 <mg_match>
 80132a2:	2800      	cmp	r0, #0
 80132a4:	d04b      	beq.n	801333e <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80132a6:	ab08      	add	r3, sp, #32
 80132a8:	4a2e      	ldr	r2, [pc, #184]	@ (8013364 <handle_io_status_get+0x14c>)
 80132aa:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80132ae:	c903      	ldmia	r1, {r0, r1}
 80132b0:	f00f feb2 	bl	8023018 <mg_json_get_num>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d03a      	beq.n	801332e <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 80132b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80132ba:	4a2b      	ldr	r2, [pc, #172]	@ (8013368 <handle_io_status_get+0x150>)
 80132bc:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80132c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80132c4:	f00f fea8 	bl	8023018 <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d030      	beq.n	801332e <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 80132cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80132d0:	f7fd fc82 	bl	8010bd8 <__aeabi_d2uiz>
 80132d4:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 80132d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80132da:	f7fd fc7d 	bl	8010bd8 <__aeabi_d2uiz>
 80132de:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 80132e0:	1e63      	subs	r3, r4, #1
 80132e2:	b2db      	uxtb	r3, r3
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d801      	bhi.n	80132ec <handle_io_status_get+0xd4>
 80132e8:	2d01      	cmp	r5, #1
 80132ea:	d907      	bls.n	80132fc <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 80132ec:	4b1f      	ldr	r3, [pc, #124]	@ (801336c <handle_io_status_get+0x154>)
 80132ee:	4a1b      	ldr	r2, [pc, #108]	@ (801335c <handle_io_status_get+0x144>)
 80132f0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80132f4:	4630      	mov	r0, r6
 80132f6:	f010 fdc9 	bl	8023e8c <mg_http_reply>
 80132fa:	e7c3      	b.n	8013284 <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 80132fc:	4f15      	ldr	r7, [pc, #84]	@ (8013354 <handle_io_status_get+0x13c>)
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	2200      	movs	r2, #0
 8013302:	2102      	movs	r1, #2
 8013304:	a807      	add	r0, sp, #28
 8013306:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8013308:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 801330c:	446b      	add	r3, sp
 801330e:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	2201      	movs	r2, #1
 8013316:	2102      	movs	r1, #2
 8013318:	a807      	add	r0, sp, #28
 801331a:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 801331c:	9501      	str	r5, [sp, #4]
 801331e:	9400      	str	r4, [sp, #0]
 8013320:	4b13      	ldr	r3, [pc, #76]	@ (8013370 <handle_io_status_get+0x158>)
 8013322:	4a0e      	ldr	r2, [pc, #56]	@ (801335c <handle_io_status_get+0x144>)
 8013324:	21c8      	movs	r1, #200	@ 0xc8
 8013326:	4630      	mov	r0, r6
 8013328:	f010 fdb0 	bl	8023e8c <mg_http_reply>
 801332c:	e7aa      	b.n	8013284 <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 801332e:	4b11      	ldr	r3, [pc, #68]	@ (8013374 <handle_io_status_get+0x15c>)
 8013330:	4a0a      	ldr	r2, [pc, #40]	@ (801335c <handle_io_status_get+0x144>)
 8013332:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013336:	4630      	mov	r0, r6
 8013338:	f010 fda8 	bl	8023e8c <mg_http_reply>
 801333c:	e7a2      	b.n	8013284 <handle_io_status_get+0x6c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801333e:	4b0e      	ldr	r3, [pc, #56]	@ (8013378 <handle_io_status_get+0x160>)
 8013340:	4a06      	ldr	r2, [pc, #24]	@ (801335c <handle_io_status_get+0x144>)
 8013342:	f240 1195 	movw	r1, #405	@ 0x195
 8013346:	4630      	mov	r0, r6
 8013348:	f010 fda0 	bl	8023e8c <mg_http_reply>
}
 801334c:	e79a      	b.n	8013284 <handle_io_status_get+0x6c>
 801334e:	bf00      	nop
 8013350:	08036464 	.word	0x08036464
 8013354:	20002854 	.word	0x20002854
 8013358:	08036a44 	.word	0x08036a44
 801335c:	080364a0 	.word	0x080364a0
 8013360:	08036568 	.word	0x08036568
 8013364:	08036a78 	.word	0x08036a78
 8013368:	08036a84 	.word	0x08036a84
 801336c:	08036ac4 	.word	0x08036ac4
 8013370:	08036a8c 	.word	0x08036a8c
 8013374:	08036b00 	.word	0x08036b00
 8013378:	08036b3c 	.word	0x08036b3c

0801337c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801337c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801337e:	fb01 f400 	mul.w	r4, r1, r0
 8013382:	4620      	mov	r0, r4
 8013384:	f007 fa48 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8013388:	4605      	mov	r5, r0
 801338a:	b118      	cbz	r0, 8013394 <mg_calloc+0x18>
 801338c:	4622      	mov	r2, r4
 801338e:	2100      	movs	r1, #0
 8013390:	f019 fa76 	bl	802c880 <memset>
}
 8013394:	4628      	mov	r0, r5
 8013396:	bd38      	pop	{r3, r4, r5, pc}

08013398 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8013398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801339a:	b08b      	sub	sp, #44	@ 0x2c
 801339c:	4606      	mov	r6, r0
 801339e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80133a0:	ad06      	add	r5, sp, #24
 80133a2:	4984      	ldr	r1, [pc, #528]	@ (80135b4 <handle_mqtt_conf+0x21c>)
 80133a4:	4628      	mov	r0, r5
 80133a6:	f010 fefb 	bl	80241a0 <mg_str_s>
 80133aa:	2300      	movs	r3, #0
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	e895 000c 	ldmia.w	r5, {r2, r3}
 80133b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80133b6:	f011 f915 	bl	80245e4 <mg_match>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d03b      	beq.n	8013436 <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 80133be:	21c6      	movs	r1, #198	@ 0xc6
 80133c0:	2001      	movs	r0, #1
 80133c2:	f7ff ffdb 	bl	801337c <mg_calloc>
		if (mqtt_config == NULL) {
 80133c6:	4605      	mov	r5, r0
 80133c8:	b340      	cbz	r0, 801341c <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 80133ca:	4b7b      	ldr	r3, [pc, #492]	@ (80135b8 <handle_mqtt_conf+0x220>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2200      	movs	r2, #0
 80133d0:	4611      	mov	r1, r2
 80133d2:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 80133d4:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 80133d8:	4638      	mov	r0, r7
 80133da:	f7fc ff61 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 80133de:	b2c4      	uxtb	r4, r0
 80133e0:	4622      	mov	r2, r4
 80133e2:	212a      	movs	r1, #42	@ 0x2a
 80133e4:	4638      	mov	r0, r7
 80133e6:	f019 fa4b 	bl	802c880 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 80133ea:	442c      	add	r4, r5
 80133ec:	2300      	movs	r3, #0
 80133ee:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80133f2:	786b      	ldrb	r3, [r5, #1]
 80133f4:	b1eb      	cbz	r3, 8013432 <handle_mqtt_conf+0x9a>
 80133f6:	4b71      	ldr	r3, [pc, #452]	@ (80135bc <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 80133f8:	1caa      	adds	r2, r5, #2
 80133fa:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 80133fe:	9703      	str	r7, [sp, #12]
 8013400:	9102      	str	r1, [sp, #8]
 8013402:	9201      	str	r2, [sp, #4]
 8013404:	9300      	str	r3, [sp, #0]
 8013406:	4b6e      	ldr	r3, [pc, #440]	@ (80135c0 <handle_mqtt_conf+0x228>)
 8013408:	4a6e      	ldr	r2, [pc, #440]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 801340a:	21c8      	movs	r1, #200	@ 0xc8
 801340c:	4630      	mov	r0, r6
 801340e:	f010 fd3d 	bl	8023e8c <mg_http_reply>
		free(mqtt_config);
 8013412:	4628      	mov	r0, r5
 8013414:	f007 fa82 	bl	801a91c <vPortFree>
}
 8013418:	b00b      	add	sp, #44	@ 0x2c
 801341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 801341c:	4b6a      	ldr	r3, [pc, #424]	@ (80135c8 <handle_mqtt_conf+0x230>)
 801341e:	4a69      	ldr	r2, [pc, #420]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 8013420:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013424:	4630      	mov	r0, r6
 8013426:	f010 fd31 	bl	8023e8c <mg_http_reply>
			free(mqtt_config);
 801342a:	4628      	mov	r0, r5
 801342c:	f007 fa76 	bl	801a91c <vPortFree>
			return;
 8013430:	e7f2      	b.n	8013418 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8013432:	4b66      	ldr	r3, [pc, #408]	@ (80135cc <handle_mqtt_conf+0x234>)
 8013434:	e7e0      	b.n	80133f8 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8013436:	ad08      	add	r5, sp, #32
 8013438:	4965      	ldr	r1, [pc, #404]	@ (80135d0 <handle_mqtt_conf+0x238>)
 801343a:	4628      	mov	r0, r5
 801343c:	f010 feb0 	bl	80241a0 <mg_str_s>
 8013440:	2300      	movs	r3, #0
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013448:	e894 0003 	ldmia.w	r4, {r0, r1}
 801344c:	f011 f8ca 	bl	80245e4 <mg_match>
 8013450:	2800      	cmp	r0, #0
 8013452:	f000 80a7 	beq.w	80135a4 <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8013456:	21c6      	movs	r1, #198	@ 0xc6
 8013458:	2001      	movs	r0, #1
 801345a:	f7ff ff8f 	bl	801337c <mg_calloc>
		if (mqtt_config == NULL) {
 801345e:	4605      	mov	r5, r0
 8013460:	b310      	cbz	r0, 80134a8 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8013462:	ab05      	add	r3, sp, #20
 8013464:	4a5b      	ldr	r2, [pc, #364]	@ (80135d4 <handle_mqtt_conf+0x23c>)
 8013466:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801346a:	c903      	ldmia	r1, {r0, r1}
 801346c:	f00f fb6a 	bl	8022b44 <mg_json_get>
 8013470:	2800      	cmp	r0, #0
 8013472:	db24      	blt.n	80134be <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8013474:	1c6b      	adds	r3, r5, #1
 8013476:	4a58      	ldr	r2, [pc, #352]	@ (80135d8 <handle_mqtt_conf+0x240>)
 8013478:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 801347c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013480:	f00f fdf0 	bl	8023064 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8013484:	4a55      	ldr	r2, [pc, #340]	@ (80135dc <handle_mqtt_conf+0x244>)
 8013486:	e897 0003 	ldmia.w	r7, {r0, r1}
 801348a:	f011 ff79 	bl	8025380 <mg_json_get_str>
 801348e:	4607      	mov	r7, r0
 8013490:	b328      	cbz	r0, 80134de <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8013492:	f016 fc61 	bl	8029d58 <is_valid_mqtt_url>
 8013496:	4603      	mov	r3, r0
 8013498:	b1e0      	cbz	r0, 80134d4 <handle_mqtt_conf+0x13c>
					switch (err) {
 801349a:	3304      	adds	r3, #4
 801349c:	2b03      	cmp	r3, #3
 801349e:	d879      	bhi.n	8013594 <handle_mqtt_conf+0x1fc>
 80134a0:	e8df f003 	tbb	[pc, r3]
 80134a4:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 80134a8:	4b47      	ldr	r3, [pc, #284]	@ (80135c8 <handle_mqtt_conf+0x230>)
 80134aa:	4a46      	ldr	r2, [pc, #280]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 80134ac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80134b0:	4630      	mov	r0, r6
 80134b2:	f010 fceb 	bl	8023e8c <mg_http_reply>
			free(mqtt_config);
 80134b6:	4628      	mov	r0, r5
 80134b8:	f007 fa30 	bl	801a91c <vPortFree>
			return;
 80134bc:	e7ac      	b.n	8013418 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80134be:	4b48      	ldr	r3, [pc, #288]	@ (80135e0 <handle_mqtt_conf+0x248>)
 80134c0:	4a40      	ldr	r2, [pc, #256]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 80134c2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80134c6:	4630      	mov	r0, r6
 80134c8:	f010 fce0 	bl	8023e8c <mg_http_reply>
		free(mqtt_config);
 80134cc:	4628      	mov	r0, r5
 80134ce:	f007 fa25 	bl	801a91c <vPortFree>
 80134d2:	e7a1      	b.n	8013418 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 80134d4:	227f      	movs	r2, #127	@ 0x7f
 80134d6:	4639      	mov	r1, r7
 80134d8:	1ca8      	adds	r0, r5, #2
 80134da:	f019 fa18 	bl	802c90e <strncpy>
			free(broker);
 80134de:	4638      	mov	r0, r7
 80134e0:	f007 fa1c 	bl	801a91c <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 80134e4:	4a3f      	ldr	r2, [pc, #252]	@ (80135e4 <handle_mqtt_conf+0x24c>)
 80134e6:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 80134ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80134ee:	f011 ff47 	bl	8025380 <mg_json_get_str>
 80134f2:	4607      	mov	r7, r0
 80134f4:	b128      	cbz	r0, 8013502 <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 80134f6:	2220      	movs	r2, #32
 80134f8:	4601      	mov	r1, r0
 80134fa:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80134fe:	f019 fa06 	bl	802c90e <strncpy>
			free(username);
 8013502:	4638      	mov	r0, r7
 8013504:	f007 fa0a 	bl	801a91c <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8013508:	4a37      	ldr	r2, [pc, #220]	@ (80135e8 <handle_mqtt_conf+0x250>)
 801350a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 801350e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013512:	f011 ff35 	bl	8025380 <mg_json_get_str>
 8013516:	4604      	mov	r4, r0
 8013518:	b128      	cbz	r0, 8013526 <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 801351a:	2220      	movs	r2, #32
 801351c:	4601      	mov	r1, r0
 801351e:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 8013522:	f019 f9f4 	bl	802c90e <strncpy>
			free(password);
 8013526:	4620      	mov	r0, r4
 8013528:	f007 f9f8 	bl	801a91c <vPortFree>
			mqtt_config->save = 1;
 801352c:	2201      	movs	r2, #1
 801352e:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8013530:	4b21      	ldr	r3, [pc, #132]	@ (80135b8 <handle_mqtt_conf+0x220>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2100      	movs	r1, #0
 8013536:	4628      	mov	r0, r5
 8013538:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801353a:	4b2c      	ldr	r3, [pc, #176]	@ (80135ec <handle_mqtt_conf+0x254>)
 801353c:	4a21      	ldr	r2, [pc, #132]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 801353e:	21c8      	movs	r1, #200	@ 0xc8
 8013540:	4630      	mov	r0, r6
 8013542:	f010 fca3 	bl	8023e8c <mg_http_reply>
 8013546:	e7c1      	b.n	80134cc <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013548:	4b29      	ldr	r3, [pc, #164]	@ (80135f0 <handle_mqtt_conf+0x258>)
 801354a:	4a1e      	ldr	r2, [pc, #120]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 801354c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013550:	4630      	mov	r0, r6
 8013552:	f010 fc9b 	bl	8023e8c <mg_http_reply>
					free(broker);
 8013556:	4638      	mov	r0, r7
 8013558:	f007 f9e0 	bl	801a91c <vPortFree>
					free(mqtt_config);
 801355c:	4628      	mov	r0, r5
 801355e:	f007 f9dd 	bl	801a91c <vPortFree>
					return;
 8013562:	e759      	b.n	8013418 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013564:	4b23      	ldr	r3, [pc, #140]	@ (80135f4 <handle_mqtt_conf+0x25c>)
 8013566:	4a17      	ldr	r2, [pc, #92]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 8013568:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801356c:	4630      	mov	r0, r6
 801356e:	f010 fc8d 	bl	8023e8c <mg_http_reply>
							break;
 8013572:	e7f0      	b.n	8013556 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013574:	4b20      	ldr	r3, [pc, #128]	@ (80135f8 <handle_mqtt_conf+0x260>)
 8013576:	4a13      	ldr	r2, [pc, #76]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 8013578:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801357c:	4630      	mov	r0, r6
 801357e:	f010 fc85 	bl	8023e8c <mg_http_reply>
							break;
 8013582:	e7e8      	b.n	8013556 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013584:	4b1d      	ldr	r3, [pc, #116]	@ (80135fc <handle_mqtt_conf+0x264>)
 8013586:	4a0f      	ldr	r2, [pc, #60]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 8013588:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801358c:	4630      	mov	r0, r6
 801358e:	f010 fc7d 	bl	8023e8c <mg_http_reply>
							break;
 8013592:	e7e0      	b.n	8013556 <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013594:	4b1a      	ldr	r3, [pc, #104]	@ (8013600 <handle_mqtt_conf+0x268>)
 8013596:	4a0b      	ldr	r2, [pc, #44]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 8013598:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801359c:	4630      	mov	r0, r6
 801359e:	f010 fc75 	bl	8023e8c <mg_http_reply>
							break;
 80135a2:	e7d8      	b.n	8013556 <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80135a4:	4b17      	ldr	r3, [pc, #92]	@ (8013604 <handle_mqtt_conf+0x26c>)
 80135a6:	4a07      	ldr	r2, [pc, #28]	@ (80135c4 <handle_mqtt_conf+0x22c>)
 80135a8:	f240 1195 	movw	r1, #405	@ 0x195
 80135ac:	4630      	mov	r0, r6
 80135ae:	f010 fc6d 	bl	8023e8c <mg_http_reply>
 80135b2:	e731      	b.n	8013418 <handle_mqtt_conf+0x80>
 80135b4:	08036464 	.word	0x08036464
 80135b8:	20002854 	.word	0x20002854
 80135bc:	08036b90 	.word	0x08036b90
 80135c0:	08036bdc 	.word	0x08036bdc
 80135c4:	080364a0 	.word	0x080364a0
 80135c8:	08036ba0 	.word	0x08036ba0
 80135cc:	08036b98 	.word	0x08036b98
 80135d0:	08036568 	.word	0x08036568
 80135d4:	08036c24 	.word	0x08036c24
 80135d8:	08036c58 	.word	0x08036c58
 80135dc:	08036c64 	.word	0x08036c64
 80135e0:	08036c28 	.word	0x08036c28
 80135e4:	08036dac 	.word	0x08036dac
 80135e8:	08036db8 	.word	0x08036db8
 80135ec:	08036dc4 	.word	0x08036dc4
 80135f0:	08036c70 	.word	0x08036c70
 80135f4:	08036cb4 	.word	0x08036cb4
 80135f8:	08036d00 	.word	0x08036d00
 80135fc:	08036d40 	.word	0x08036d40
 8013600:	08036d78 	.word	0x08036d78
 8013604:	08036b3c 	.word	0x08036b3c

08013608 <handle_mb_tcp_access_list>:
static void handle_mb_tcp_access_list(struct mg_connection *c, struct mg_http_message *hm){
 8013608:	b570      	push	{r4, r5, r6, lr}
 801360a:	b08a      	sub	sp, #40	@ 0x28
 801360c:	4606      	mov	r6, r0
 801360e:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013610:	ad04      	add	r5, sp, #16
 8013612:	495e      	ldr	r1, [pc, #376]	@ (801378c <handle_mb_tcp_access_list+0x184>)
 8013614:	4628      	mov	r0, r5
 8013616:	f010 fdc3 	bl	80241a0 <mg_str_s>
 801361a:	2300      	movs	r3, #0
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013626:	f010 ffdd 	bl	80245e4 <mg_match>
 801362a:	2800      	cmp	r0, #0
 801362c:	d03d      	beq.n	80136aa <handle_mb_tcp_access_list+0xa2>
		size_t acl_size = 0;
 801362e:	2200      	movs	r2, #0
 8013630:	9203      	str	r2, [sp, #12]
		mg_fs_lfs_status(ACL_FILE, &acl_size, NULL);
 8013632:	a903      	add	r1, sp, #12
 8013634:	4856      	ldr	r0, [pc, #344]	@ (8013790 <handle_mb_tcp_access_list+0x188>)
 8013636:	f007 fa57 	bl	801aae8 <mg_fs_lfs_status>
		if (acl_size && (acl_size < ACL_FILE_MAX_SIZE)){
 801363a:	9803      	ldr	r0, [sp, #12]
 801363c:	1e42      	subs	r2, r0, #1
 801363e:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013642:	429a      	cmp	r2, r3
 8013644:	d829      	bhi.n	801369a <handle_mb_tcp_access_list+0x92>
			acl = calloc(acl_size + 1, sizeof(char));
 8013646:	2101      	movs	r1, #1
 8013648:	4408      	add	r0, r1
 801364a:	f7ff fe97 	bl	801337c <mg_calloc>
			if (acl == NULL){
 801364e:	4604      	mov	r4, r0
 8013650:	b1b8      	cbz	r0, 8013682 <handle_mb_tcp_access_list+0x7a>
			void *fd = mg_fs_lfs_open(ACL_FILE, MG_FS_READ);
 8013652:	2101      	movs	r1, #1
 8013654:	484e      	ldr	r0, [pc, #312]	@ (8013790 <handle_mb_tcp_access_list+0x188>)
 8013656:	f007 fa85 	bl	801ab64 <mg_fs_lfs_open>
 801365a:	4605      	mov	r5, r0
			mg_fs_lfs_read(fd, acl, acl_size);
 801365c:	9a03      	ldr	r2, [sp, #12]
 801365e:	4621      	mov	r1, r4
 8013660:	f007 fab0 	bl	801abc4 <mg_fs_lfs_read>
			mg_fs_lfs_close(fd);
 8013664:	4628      	mov	r0, r5
 8013666:	f007 faa1 	bl	801abac <mg_fs_lfs_close>
	        mg_http_reply(c, 200, headers,
 801366a:	9400      	str	r4, [sp, #0]
 801366c:	4b49      	ldr	r3, [pc, #292]	@ (8013794 <handle_mb_tcp_access_list+0x18c>)
 801366e:	4a4a      	ldr	r2, [pc, #296]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 8013670:	21c8      	movs	r1, #200	@ 0xc8
 8013672:	4630      	mov	r0, r6
 8013674:	f010 fc0a 	bl	8023e8c <mg_http_reply>
	        free(acl);
 8013678:	4620      	mov	r0, r4
 801367a:	f007 f94f 	bl	801a91c <vPortFree>
}
 801367e:	b00a      	add	sp, #40	@ 0x28
 8013680:	bd70      	pop	{r4, r5, r6, pc}
		    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013682:	4946      	ldr	r1, [pc, #280]	@ (801379c <handle_mb_tcp_access_list+0x194>)
 8013684:	2003      	movs	r0, #3
 8013686:	f7fe fc39 	bl	8011efc <logging>
		        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 801368a:	4b45      	ldr	r3, [pc, #276]	@ (80137a0 <handle_mb_tcp_access_list+0x198>)
 801368c:	4a42      	ldr	r2, [pc, #264]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 801368e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013692:	4630      	mov	r0, r6
 8013694:	f010 fbfa 	bl	8023e8c <mg_http_reply>
		        return;
 8013698:	e7f1      	b.n	801367e <handle_mb_tcp_access_list+0x76>
	        mg_http_reply(c, 500, headers,
 801369a:	4b42      	ldr	r3, [pc, #264]	@ (80137a4 <handle_mb_tcp_access_list+0x19c>)
 801369c:	4a3e      	ldr	r2, [pc, #248]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 801369e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80136a2:	4630      	mov	r0, r6
 80136a4:	f010 fbf2 	bl	8023e8c <mg_http_reply>
	        return;
 80136a8:	e7e9      	b.n	801367e <handle_mb_tcp_access_list+0x76>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80136aa:	ad06      	add	r5, sp, #24
 80136ac:	493e      	ldr	r1, [pc, #248]	@ (80137a8 <handle_mb_tcp_access_list+0x1a0>)
 80136ae:	4628      	mov	r0, r5
 80136b0:	f010 fd76 	bl	80241a0 <mg_str_s>
 80136b4:	2300      	movs	r3, #0
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80136bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136c0:	f010 ff90 	bl	80245e4 <mg_match>
 80136c4:	2800      	cmp	r0, #0
 80136c6:	d058      	beq.n	801377a <handle_mb_tcp_access_list+0x172>
		if (mg_json_get(hm->body, "$", &length) < 0) {
 80136c8:	ab03      	add	r3, sp, #12
 80136ca:	4a38      	ldr	r2, [pc, #224]	@ (80137ac <handle_mb_tcp_access_list+0x1a4>)
 80136cc:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 80136d0:	c903      	ldmia	r1, {r0, r1}
 80136d2:	f00f fa37 	bl	8022b44 <mg_json_get>
 80136d6:	2800      	cmp	r0, #0
 80136d8:	db34      	blt.n	8013744 <handle_mb_tcp_access_list+0x13c>
		acl = mg_json_get_str(hm->body, "$.access_list");
 80136da:	4a35      	ldr	r2, [pc, #212]	@ (80137b0 <handle_mb_tcp_access_list+0x1a8>)
 80136dc:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80136e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136e4:	f011 fe4c 	bl	8025380 <mg_json_get_str>
		if (acl){
 80136e8:	4604      	mov	r4, r0
 80136ea:	2800      	cmp	r0, #0
 80136ec:	d03d      	beq.n	801376a <handle_mb_tcp_access_list+0x162>
			if(mg_check_ip_acl(mg_str(acl),  &c->rem) < 0){
 80136ee:	ad08      	add	r5, sp, #32
 80136f0:	4601      	mov	r1, r0
 80136f2:	4628      	mov	r0, r5
 80136f4:	f010 fd54 	bl	80241a0 <mg_str_s>
 80136f8:	f106 021c 	add.w	r2, r6, #28
 80136fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013700:	f012 fc5c 	bl	8025fbc <mg_check_ip_acl>
 8013704:	2800      	cmp	r0, #0
 8013706:	db25      	blt.n	8013754 <handle_mb_tcp_access_list+0x14c>
				mg_fs_lfs_remove(ACL_FILE);
 8013708:	4d21      	ldr	r5, [pc, #132]	@ (8013790 <handle_mb_tcp_access_list+0x188>)
 801370a:	4628      	mov	r0, r5
 801370c:	f007 fa98 	bl	801ac40 <mg_fs_lfs_remove>
				void *fd1 = mg_fs_lfs_open(ACL_FILE, MG_FS_WRITE);
 8013710:	2102      	movs	r1, #2
 8013712:	4628      	mov	r0, r5
 8013714:	f007 fa26 	bl	801ab64 <mg_fs_lfs_open>
 8013718:	4605      	mov	r5, r0
				mg_fs_lfs_write(fd1, acl, (strlen(acl) * sizeof(char)) + 1);
 801371a:	4620      	mov	r0, r4
 801371c:	f7fc fdc0 	bl	80102a0 <strlen>
 8013720:	1c42      	adds	r2, r0, #1
 8013722:	4621      	mov	r1, r4
 8013724:	4628      	mov	r0, r5
 8013726:	f007 fa59 	bl	801abdc <mg_fs_lfs_write>
				mg_fs_lfs_close(fd1);
 801372a:	4628      	mov	r0, r5
 801372c:	f007 fa3e 	bl	801abac <mg_fs_lfs_close>
				mg_http_reply(c, 200, headers,
 8013730:	4b20      	ldr	r3, [pc, #128]	@ (80137b4 <handle_mb_tcp_access_list+0x1ac>)
 8013732:	4a19      	ldr	r2, [pc, #100]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 8013734:	21c8      	movs	r1, #200	@ 0xc8
 8013736:	4630      	mov	r0, r6
 8013738:	f010 fba8 	bl	8023e8c <mg_http_reply>
				free(acl);
 801373c:	4620      	mov	r0, r4
 801373e:	f007 f8ed 	bl	801a91c <vPortFree>
				return;
 8013742:	e79c      	b.n	801367e <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 8013744:	4b1c      	ldr	r3, [pc, #112]	@ (80137b8 <handle_mb_tcp_access_list+0x1b0>)
 8013746:	4a14      	ldr	r2, [pc, #80]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 8013748:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801374c:	4630      	mov	r0, r6
 801374e:	f010 fb9d 	bl	8023e8c <mg_http_reply>
			return;
 8013752:	e794      	b.n	801367e <handle_mb_tcp_access_list+0x76>
				mg_http_reply(c, 400, headers,
 8013754:	4b19      	ldr	r3, [pc, #100]	@ (80137bc <handle_mb_tcp_access_list+0x1b4>)
 8013756:	4a10      	ldr	r2, [pc, #64]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 8013758:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801375c:	4630      	mov	r0, r6
 801375e:	f010 fb95 	bl	8023e8c <mg_http_reply>
				free(acl);
 8013762:	4620      	mov	r0, r4
 8013764:	f007 f8da 	bl	801a91c <vPortFree>
				return;
 8013768:	e789      	b.n	801367e <handle_mb_tcp_access_list+0x76>
			mg_http_reply(c, 400, headers,
 801376a:	4b15      	ldr	r3, [pc, #84]	@ (80137c0 <handle_mb_tcp_access_list+0x1b8>)
 801376c:	4a0a      	ldr	r2, [pc, #40]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 801376e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013772:	4630      	mov	r0, r6
 8013774:	f010 fb8a 	bl	8023e8c <mg_http_reply>
			return;
 8013778:	e781      	b.n	801367e <handle_mb_tcp_access_list+0x76>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801377a:	4b12      	ldr	r3, [pc, #72]	@ (80137c4 <handle_mb_tcp_access_list+0x1bc>)
 801377c:	4a06      	ldr	r2, [pc, #24]	@ (8013798 <handle_mb_tcp_access_list+0x190>)
 801377e:	f240 1195 	movw	r1, #405	@ 0x195
 8013782:	4630      	mov	r0, r6
 8013784:	f010 fb82 	bl	8023e8c <mg_http_reply>
		return;
 8013788:	e779      	b.n	801367e <handle_mb_tcp_access_list+0x76>
 801378a:	bf00      	nop
 801378c:	08036464 	.word	0x08036464
 8013790:	080363a4 	.word	0x080363a4
 8013794:	08036e5c 	.word	0x08036e5c
 8013798:	080364a0 	.word	0x080364a0
 801379c:	08036e00 	.word	0x08036e00
 80137a0:	08036e34 	.word	0x08036e34
 80137a4:	08036e88 	.word	0x08036e88
 80137a8:	08036568 	.word	0x08036568
 80137ac:	08036c24 	.word	0x08036c24
 80137b0:	08036ebc 	.word	0x08036ebc
 80137b4:	08036f04 	.word	0x08036f04
 80137b8:	08036c28 	.word	0x08036c28
 80137bc:	08036ecc 	.word	0x08036ecc
 80137c0:	08036f58 	.word	0x08036f58
 80137c4:	08036fa0 	.word	0x08036fa0

080137c8 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 80137c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	b0c7      	sub	sp, #284	@ 0x11c
 80137ce:	4681      	mov	r9, r0
 80137d0:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 80137d2:	2272      	movs	r2, #114	@ 0x72
 80137d4:	498e      	ldr	r1, [pc, #568]	@ (8013a10 <handle_dev_status+0x248>)
 80137d6:	a827      	add	r0, sp, #156	@ 0x9c
 80137d8:	f01a fa8e 	bl	802dcf8 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 80137dc:	2101      	movs	r1, #1
 80137de:	201e      	movs	r0, #30
 80137e0:	f7ff fdcc 	bl	801337c <mg_calloc>
 80137e4:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80137e6:	2101      	movs	r1, #1
 80137e8:	202e      	movs	r0, #46	@ 0x2e
 80137ea:	f7ff fdc7 	bl	801337c <mg_calloc>
 80137ee:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80137f0:	2101      	movs	r1, #1
 80137f2:	202e      	movs	r0, #46	@ 0x2e
 80137f4:	f7ff fdc2 	bl	801337c <mg_calloc>
 80137f8:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80137fa:	2101      	movs	r1, #1
 80137fc:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8013800:	f7ff fdbc 	bl	801337c <mg_calloc>
 8013804:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8013806:	2101      	movs	r1, #1
 8013808:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801380c:	f7ff fdb6 	bl	801337c <mg_calloc>
 8013810:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 8013812:	2e00      	cmp	r6, #0
 8013814:	f000 80e3 	beq.w	80139de <handle_dev_status+0x216>
 8013818:	2f00      	cmp	r7, #0
 801381a:	f000 80e0 	beq.w	80139de <handle_dev_status+0x216>
 801381e:	f1b8 0f00 	cmp.w	r8, #0
 8013822:	f000 80dc 	beq.w	80139de <handle_dev_status+0x216>
 8013826:	2c00      	cmp	r4, #0
 8013828:	f000 80d9 	beq.w	80139de <handle_dev_status+0x216>
 801382c:	2800      	cmp	r0, #0
 801382e:	f000 80d6 	beq.w	80139de <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013832:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 8013836:	4977      	ldr	r1, [pc, #476]	@ (8013a14 <handle_dev_status+0x24c>)
 8013838:	4658      	mov	r0, fp
 801383a:	f010 fcb1 	bl	80241a0 <mg_str_s>
 801383e:	2300      	movs	r3, #0
 8013840:	9300      	str	r3, [sp, #0]
 8013842:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8013846:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801384a:	f010 fecb 	bl	80245e4 <mg_match>
 801384e:	2800      	cmp	r0, #0
 8013850:	f000 80bd 	beq.w	80139ce <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 8013854:	f001 fb3e 	bl	8014ed4 <get_mqtt_connection>
			if(!mqtt_connection){
 8013858:	4682      	mov	sl, r0
 801385a:	b358      	cbz	r0, 80138b4 <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 801385c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013860:	f013 0f20 	tst.w	r3, #32
 8013864:	d12c      	bne.n	80138c0 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 8013866:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 801386a:	f013 0f20 	tst.w	r3, #32
 801386e:	d02d      	beq.n	80138cc <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013870:	221e      	movs	r2, #30
 8013872:	4969      	ldr	r1, [pc, #420]	@ (8013a18 <handle_dev_status+0x250>)
 8013874:	4630      	mov	r0, r6
 8013876:	f019 f84a 	bl	802c90e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 801387a:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013a40 <handle_dev_status+0x278>
 801387e:	f10a 0308 	add.w	r3, sl, #8
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	465b      	mov	r3, fp
 8013886:	4a65      	ldr	r2, [pc, #404]	@ (8013a1c <handle_dev_status+0x254>)
 8013888:	212e      	movs	r1, #46	@ 0x2e
 801388a:	4640      	mov	r0, r8
 801388c:	f00f fe00 	bl	8023490 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013890:	f10a 031c 	add.w	r3, sl, #28
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	465b      	mov	r3, fp
 8013898:	4a60      	ldr	r2, [pc, #384]	@ (8013a1c <handle_dev_status+0x254>)
 801389a:	212e      	movs	r1, #46	@ 0x2e
 801389c:	4638      	mov	r0, r7
 801389e:	f00f fdf7 	bl	8023490 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7fc fcfc 	bl	80102a0 <strlen>
 80138a8:	4b5d      	ldr	r3, [pc, #372]	@ (8013a20 <handle_dev_status+0x258>)
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80138ae:	f04f 0a01 	mov.w	sl, #1
 80138b2:	e028      	b.n	8013906 <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 80138b4:	221e      	movs	r2, #30
 80138b6:	495b      	ldr	r1, [pc, #364]	@ (8013a24 <handle_dev_status+0x25c>)
 80138b8:	4630      	mov	r0, r6
 80138ba:	f019 f828 	bl	802c90e <strncpy>
 80138be:	e7f0      	b.n	80138a2 <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 80138c0:	221e      	movs	r2, #30
 80138c2:	4959      	ldr	r1, [pc, #356]	@ (8013a28 <handle_dev_status+0x260>)
 80138c4:	4630      	mov	r0, r6
 80138c6:	f019 f822 	bl	802c90e <strncpy>
 80138ca:	e7d6      	b.n	801387a <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 80138cc:	221e      	movs	r2, #30
 80138ce:	4957      	ldr	r1, [pc, #348]	@ (8013a2c <handle_dev_status+0x264>)
 80138d0:	4630      	mov	r0, r6
 80138d2:	f019 f81c 	bl	802c90e <strncpy>
 80138d6:	e7d0      	b.n	801387a <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 80138d8:	fa5f f38a 	uxtb.w	r3, sl
 80138dc:	2201      	movs	r2, #1
 80138de:	2180      	movs	r1, #128	@ 0x80
 80138e0:	a807      	add	r0, sp, #28
 80138e2:	f001 fee7 	bl	80156b4 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80138e6:	a907      	add	r1, sp, #28
 80138e8:	4620      	mov	r0, r4
 80138ea:	f018 ffd1 	bl	802c890 <strcat>
				strcat(pub_topics_str, "\", \"");
 80138ee:	4620      	mov	r0, r4
 80138f0:	f7fc fcd6 	bl	80102a0 <strlen>
 80138f4:	4603      	mov	r3, r0
 80138f6:	1821      	adds	r1, r4, r0
 80138f8:	4a4d      	ldr	r2, [pc, #308]	@ (8013a30 <handle_dev_status+0x268>)
 80138fa:	6810      	ldr	r0, [r2, #0]
 80138fc:	50e0      	str	r0, [r4, r3]
 80138fe:	7913      	ldrb	r3, [r2, #4]
 8013900:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8013902:	f10a 0a01 	add.w	sl, sl, #1
 8013906:	f1ba 0f03 	cmp.w	sl, #3
 801390a:	dde5      	ble.n	80138d8 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801390c:	f04f 0a01 	mov.w	sl, #1
 8013910:	e007      	b.n	8013922 <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 8013912:	4620      	mov	r0, r4
 8013914:	f7fc fcc4 	bl	80102a0 <strlen>
 8013918:	4b41      	ldr	r3, [pc, #260]	@ (8013a20 <handle_dev_status+0x258>)
 801391a:	881b      	ldrh	r3, [r3, #0]
 801391c:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801391e:	f10a 0a01 	add.w	sl, sl, #1
 8013922:	f1ba 0f03 	cmp.w	sl, #3
 8013926:	dc18      	bgt.n	801395a <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013928:	fa5f f38a 	uxtb.w	r3, sl
 801392c:	2202      	movs	r2, #2
 801392e:	2180      	movs	r1, #128	@ 0x80
 8013930:	a807      	add	r0, sp, #28
 8013932:	f001 febf 	bl	80156b4 <generate_status_topik>
				strcat(pub_topics_str, topic);
 8013936:	a907      	add	r1, sp, #28
 8013938:	4620      	mov	r0, r4
 801393a:	f018 ffa9 	bl	802c890 <strcat>
				if (i < OUTPUTS_COUNT) {
 801393e:	f1ba 0f02 	cmp.w	sl, #2
 8013942:	dce6      	bgt.n	8013912 <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 8013944:	4620      	mov	r0, r4
 8013946:	f7fc fcab 	bl	80102a0 <strlen>
 801394a:	4603      	mov	r3, r0
 801394c:	1821      	adds	r1, r4, r0
 801394e:	4a38      	ldr	r2, [pc, #224]	@ (8013a30 <handle_dev_status+0x268>)
 8013950:	6810      	ldr	r0, [r2, #0]
 8013952:	50e0      	str	r0, [r4, r3]
 8013954:	7913      	ldrb	r3, [r2, #4]
 8013956:	710b      	strb	r3, [r1, #4]
 8013958:	e7e1      	b.n	801391e <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 801395a:	4628      	mov	r0, r5
 801395c:	f7fc fca0 	bl	80102a0 <strlen>
 8013960:	4b2f      	ldr	r3, [pc, #188]	@ (8013a20 <handle_dev_status+0x258>)
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013966:	f04f 0a01 	mov.w	sl, #1
 801396a:	e007      	b.n	801397c <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 801396c:	4628      	mov	r0, r5
 801396e:	f7fc fc97 	bl	80102a0 <strlen>
 8013972:	4b2b      	ldr	r3, [pc, #172]	@ (8013a20 <handle_dev_status+0x258>)
 8013974:	881b      	ldrh	r3, [r3, #0]
 8013976:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013978:	f10a 0a01 	add.w	sl, sl, #1
 801397c:	f1ba 0f03 	cmp.w	sl, #3
 8013980:	dc18      	bgt.n	80139b4 <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013982:	fa5f f38a 	uxtb.w	r3, sl
 8013986:	2202      	movs	r2, #2
 8013988:	2180      	movs	r1, #128	@ 0x80
 801398a:	a807      	add	r0, sp, #28
 801398c:	f001 fe7a 	bl	8015684 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013990:	a907      	add	r1, sp, #28
 8013992:	4628      	mov	r0, r5
 8013994:	f018 ff7c 	bl	802c890 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013998:	f1ba 0f02 	cmp.w	sl, #2
 801399c:	dce6      	bgt.n	801396c <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 801399e:	4628      	mov	r0, r5
 80139a0:	f7fc fc7e 	bl	80102a0 <strlen>
 80139a4:	4603      	mov	r3, r0
 80139a6:	1829      	adds	r1, r5, r0
 80139a8:	4a21      	ldr	r2, [pc, #132]	@ (8013a30 <handle_dev_status+0x268>)
 80139aa:	6810      	ldr	r0, [r2, #0]
 80139ac:	50e8      	str	r0, [r5, r3]
 80139ae:	7913      	ldrb	r3, [r2, #4]
 80139b0:	710b      	strb	r3, [r1, #4]
 80139b2:	e7e1      	b.n	8013978 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80139b4:	9504      	str	r5, [sp, #16]
 80139b6:	9403      	str	r4, [sp, #12]
 80139b8:	9702      	str	r7, [sp, #8]
 80139ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80139be:	9600      	str	r6, [sp, #0]
 80139c0:	ab27      	add	r3, sp, #156	@ 0x9c
 80139c2:	4a1c      	ldr	r2, [pc, #112]	@ (8013a34 <handle_dev_status+0x26c>)
 80139c4:	21c8      	movs	r1, #200	@ 0xc8
 80139c6:	4648      	mov	r0, r9
 80139c8:	f010 fa60 	bl	8023e8c <mg_http_reply>
 80139cc:	e00e      	b.n	80139ec <handle_dev_status+0x224>
			mg_http_reply(c, 405, headers, //TODO delete for release,
 80139ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013a38 <handle_dev_status+0x270>)
 80139d0:	4a18      	ldr	r2, [pc, #96]	@ (8013a34 <handle_dev_status+0x26c>)
 80139d2:	f240 1195 	movw	r1, #405	@ 0x195
 80139d6:	4648      	mov	r0, r9
 80139d8:	f010 fa58 	bl	8023e8c <mg_http_reply>
 80139dc:	e006      	b.n	80139ec <handle_dev_status+0x224>
		mg_http_reply(c, 500, headers, //TODO delete for release,
 80139de:	4b17      	ldr	r3, [pc, #92]	@ (8013a3c <handle_dev_status+0x274>)
 80139e0:	4a14      	ldr	r2, [pc, #80]	@ (8013a34 <handle_dev_status+0x26c>)
 80139e2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80139e6:	4648      	mov	r0, r9
 80139e8:	f010 fa50 	bl	8023e8c <mg_http_reply>
	free(mqtt_status_str);
 80139ec:	4630      	mov	r0, r6
 80139ee:	f006 ff95 	bl	801a91c <vPortFree>
	free(mqtt_server_addr);
 80139f2:	4638      	mov	r0, r7
 80139f4:	f006 ff92 	bl	801a91c <vPortFree>
	free(mqtt_local_addr);
 80139f8:	4640      	mov	r0, r8
 80139fa:	f006 ff8f 	bl	801a91c <vPortFree>
	free(pub_topics_str);
 80139fe:	4620      	mov	r0, r4
 8013a00:	f006 ff8c 	bl	801a91c <vPortFree>
	free(subscr_topics_str);
 8013a04:	4628      	mov	r0, r5
 8013a06:	f006 ff89 	bl	801a91c <vPortFree>
}
 8013a0a:	b047      	add	sp, #284	@ 0x11c
 8013a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a10:	08037060 	.word	0x08037060
 8013a14:	08036464 	.word	0x08036464
 8013a18:	08037000 	.word	0x08037000
 8013a1c:	08037014 	.word	0x08037014
 8013a20:	08037018 	.word	0x08037018
 8013a24:	0803ad34 	.word	0x0803ad34
 8013a28:	08036ff4 	.word	0x08036ff4
 8013a2c:	08037008 	.word	0x08037008
 8013a30:	0803701c 	.word	0x0803701c
 8013a34:	080364a0 	.word	0x080364a0
 8013a38:	08036b3c 	.word	0x08036b3c
 8013a3c:	08037024 	.word	0x08037024
 8013a40:	08025f3d 	.word	0x08025f3d

08013a44 <handle_fs_get_log>:
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8013a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a46:	b08d      	sub	sp, #52	@ 0x34
 8013a48:	4607      	mov	r7, r0
 8013a4a:	460c      	mov	r4, r1
 8013a4c:	4615      	mov	r5, r2
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013a4e:	ae08      	add	r6, sp, #32
 8013a50:	4923      	ldr	r1, [pc, #140]	@ (8013ae0 <handle_fs_get_log+0x9c>)
 8013a52:	4630      	mov	r0, r6
 8013a54:	f010 fba4 	bl	80241a0 <mg_str_s>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013a60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a64:	f010 fdbe 	bl	80245e4 <mg_match>
 8013a68:	b318      	cbz	r0, 8013ab2 <handle_fs_get_log+0x6e>
		struct mg_http_serve_opts opts = {
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	9302      	str	r3, [sp, #8]
 8013a6e:	9303      	str	r3, [sp, #12]
 8013a70:	9304      	str	r3, [sp, #16]
 8013a72:	9305      	str	r3, [sp, #20]
 8013a74:	9306      	str	r3, [sp, #24]
 8013a76:	9307      	str	r3, [sp, #28]
 8013a78:	4b1a      	ldr	r3, [pc, #104]	@ (8013ae4 <handle_fs_get_log+0xa0>)
 8013a7a:	9302      	str	r3, [sp, #8]
 8013a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8013ae8 <handle_fs_get_log+0xa4>)
 8013a7e:	9307      	str	r3, [sp, #28]
		switch (number) {
 8013a80:	b145      	cbz	r5, 8013a94 <handle_fs_get_log+0x50>
 8013a82:	2d01      	cmp	r5, #1
 8013a84:	d00e      	beq.n	8013aa4 <handle_fs_get_log+0x60>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013a86:	ab02      	add	r3, sp, #8
 8013a88:	4a18      	ldr	r2, [pc, #96]	@ (8013aec <handle_fs_get_log+0xa8>)
 8013a8a:	4621      	mov	r1, r4
 8013a8c:	4638      	mov	r0, r7
 8013a8e:	f010 ff65 	bl	802495c <mg_http_serve_file>
				break;
 8013a92:	e005      	b.n	8013aa0 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 8013a94:	ab02      	add	r3, sp, #8
 8013a96:	4a15      	ldr	r2, [pc, #84]	@ (8013aec <handle_fs_get_log+0xa8>)
 8013a98:	4621      	mov	r1, r4
 8013a9a:	4638      	mov	r0, r7
 8013a9c:	f010 ff5e 	bl	802495c <mg_http_serve_file>
}
 8013aa0:	b00d      	add	sp, #52	@ 0x34
 8013aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 8013aa4:	ab02      	add	r3, sp, #8
 8013aa6:	4a12      	ldr	r2, [pc, #72]	@ (8013af0 <handle_fs_get_log+0xac>)
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	4638      	mov	r0, r7
 8013aac:	f010 ff56 	bl	802495c <mg_http_serve_file>
				break;
 8013ab0:	e7f6      	b.n	8013aa0 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013ab2:	ad0a      	add	r5, sp, #40	@ 0x28
 8013ab4:	490f      	ldr	r1, [pc, #60]	@ (8013af4 <handle_fs_get_log+0xb0>)
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f010 fb72 	bl	80241a0 <mg_str_s>
 8013abc:	2300      	movs	r3, #0
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013ac8:	f010 fd8c 	bl	80245e4 <mg_match>
 8013acc:	2800      	cmp	r0, #0
 8013ace:	d1e7      	bne.n	8013aa0 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013ad0:	4b09      	ldr	r3, [pc, #36]	@ (8013af8 <handle_fs_get_log+0xb4>)
 8013ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8013afc <handle_fs_get_log+0xb8>)
 8013ad4:	f240 1195 	movw	r1, #405	@ 0x195
 8013ad8:	4638      	mov	r0, r7
 8013ada:	f010 f9d7 	bl	8023e8c <mg_http_reply>
}
 8013ade:	e7df      	b.n	8013aa0 <handle_fs_get_log+0x5c>
 8013ae0:	08036464 	.word	0x08036464
 8013ae4:	080377c8 	.word	0x080377c8
 8013ae8:	200000a0 	.word	0x200000a0
 8013aec:	08035f74 	.word	0x08035f74
 8013af0:	08035f84 	.word	0x08035f84
 8013af4:	08036568 	.word	0x08036568
 8013af8:	080370d4 	.word	0x080370d4
 8013afc:	080364a0 	.word	0x080364a0

08013b00 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 8013b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b02:	4604      	mov	r4, r0
 8013b04:	460d      	mov	r5, r1
 8013b06:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013b08:	4f09      	ldr	r7, [pc, #36]	@ (8013b30 <write_users+0x30>)
 8013b0a:	6a3b      	ldr	r3, [r7, #32]
 8013b0c:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013b0e:	2202      	movs	r2, #2
 8013b10:	4621      	mov	r1, r4
 8013b12:	4638      	mov	r0, r7
 8013b14:	f00e ff2c 	bl	8022970 <mg_fs_open>
 8013b18:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	22a9      	movs	r2, #169	@ 0xa9
 8013b1e:	fb06 f202 	mul.w	r2, r6, r2
 8013b22:	4629      	mov	r1, r5
 8013b24:	6800      	ldr	r0, [r0, #0]
 8013b26:	4798      	blx	r3
	mg_fs_close(fd);
 8013b28:	4620      	mov	r0, r4
 8013b2a:	f00e ff3a 	bl	80229a2 <mg_fs_close>
}
 8013b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b30:	200000a0 	.word	0x200000a0

08013b34 <handle_manage_user>:
static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 8013b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b38:	b0ae      	sub	sp, #184	@ 0xb8
 8013b3a:	4607      	mov	r7, r0
 8013b3c:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013b3e:	ad26      	add	r5, sp, #152	@ 0x98
 8013b40:	49ac      	ldr	r1, [pc, #688]	@ (8013df4 <handle_manage_user+0x2c0>)
 8013b42:	4628      	mov	r0, r5
 8013b44:	f010 fb2c 	bl	80241a0 <mg_str_s>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	9300      	str	r3, [sp, #0]
 8013b4c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b54:	f010 fd46 	bl	80245e4 <mg_match>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d05e      	beq.n	8013c1a <handle_manage_user+0xe6>
	    char *response = calloc(response_len, sizeof(char));
 8013b5c:	2101      	movs	r1, #1
 8013b5e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013b62:	f7ff fc0b 	bl	801337c <mg_calloc>
 8013b66:	4606      	mov	r6, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013b68:	2101      	movs	r1, #1
 8013b6a:	20a0      	movs	r0, #160	@ 0xa0
 8013b6c:	f7ff fc06 	bl	801337c <mg_calloc>
 8013b70:	4680      	mov	r8, r0
	    if (response && user_entry) {
 8013b72:	2e00      	cmp	r6, #0
 8013b74:	d03d      	beq.n	8013bf2 <handle_manage_user+0xbe>
 8013b76:	2800      	cmp	r0, #0
 8013b78:	d03b      	beq.n	8013bf2 <handle_manage_user+0xbe>
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8013df8 <handle_manage_user+0x2c4>)
 8013b7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013b7e:	6030      	str	r0, [r6, #0]
 8013b80:	6071      	str	r1, [r6, #4]
 8013b82:	60b2      	str	r2, [r6, #8]
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	7333      	strb	r3, [r6, #12]
 8013b88:	250c      	movs	r5, #12
	        for (int i = 0; i < user_list_size; i++) {
 8013b8a:	2400      	movs	r4, #0
 8013b8c:	e008      	b.n	8013ba0 <handle_manage_user+0x6c>
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013b8e:	4643      	mov	r3, r8
 8013b90:	4a9a      	ldr	r2, [pc, #616]	@ (8013dfc <handle_manage_user+0x2c8>)
 8013b92:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013b96:	1970      	adds	r0, r6, r5
 8013b98:	f018 f948 	bl	802be2c <snprintf>
 8013b9c:	4405      	add	r5, r0
	        for (int i = 0; i < user_list_size; i++) {
 8013b9e:	3401      	adds	r4, #1
 8013ba0:	2c09      	cmp	r4, #9
 8013ba2:	dc18      	bgt.n	8013bd6 <handle_manage_user+0xa2>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 8013ba4:	22a9      	movs	r2, #169	@ 0xa9
 8013ba6:	fb04 f202 	mul.w	r2, r4, r2
 8013baa:	4b95      	ldr	r3, [pc, #596]	@ (8013e00 <handle_manage_user+0x2cc>)
 8013bac:	5c9a      	ldrb	r2, [r3, r2]
 8013bae:	2a00      	cmp	r2, #0
 8013bb0:	d0f5      	beq.n	8013b9e <handle_manage_user+0x6a>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 8013bb2:	22a9      	movs	r2, #169	@ 0xa9
 8013bb4:	fb02 3304 	mla	r3, r2, r4, r3
 8013bb8:	4a92      	ldr	r2, [pc, #584]	@ (8013e04 <handle_manage_user+0x2d0>)
 8013bba:	21a0      	movs	r1, #160	@ 0xa0
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	f018 f935 	bl	802be2c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 8013bc2:	2d0c      	cmp	r5, #12
 8013bc4:	d9e3      	bls.n	8013b8e <handle_manage_user+0x5a>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 8013bc6:	4a90      	ldr	r2, [pc, #576]	@ (8013e08 <handle_manage_user+0x2d4>)
 8013bc8:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013bcc:	1970      	adds	r0, r6, r5
 8013bce:	f018 f92d 	bl	802be2c <snprintf>
 8013bd2:	4405      	add	r5, r0
 8013bd4:	e7db      	b.n	8013b8e <handle_manage_user+0x5a>
	        offset += snprintf(response + offset, response_len - offset, "]}");
 8013bd6:	4a8d      	ldr	r2, [pc, #564]	@ (8013e0c <handle_manage_user+0x2d8>)
 8013bd8:	f5c5 6180 	rsb	r1, r5, #1024	@ 0x400
 8013bdc:	1970      	adds	r0, r6, r5
 8013bde:	f018 f925 	bl	802be2c <snprintf>
	        mg_http_reply(c, 200, headers, "%s", response);
 8013be2:	9600      	str	r6, [sp, #0]
 8013be4:	4b85      	ldr	r3, [pc, #532]	@ (8013dfc <handle_manage_user+0x2c8>)
 8013be6:	4a8a      	ldr	r2, [pc, #552]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013be8:	21c8      	movs	r1, #200	@ 0xc8
 8013bea:	4638      	mov	r0, r7
 8013bec:	f010 f94e 	bl	8023e8c <mg_http_reply>
 8013bf0:	e00a      	b.n	8013c08 <handle_manage_user+0xd4>
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013bf2:	4988      	ldr	r1, [pc, #544]	@ (8013e14 <handle_manage_user+0x2e0>)
 8013bf4:	2003      	movs	r0, #3
 8013bf6:	f7fe f981 	bl	8011efc <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013bfa:	4b87      	ldr	r3, [pc, #540]	@ (8013e18 <handle_manage_user+0x2e4>)
 8013bfc:	4a84      	ldr	r2, [pc, #528]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013bfe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013c02:	4638      	mov	r0, r7
 8013c04:	f010 f942 	bl	8023e8c <mg_http_reply>
	    free(response);
 8013c08:	4630      	mov	r0, r6
 8013c0a:	f006 fe87 	bl	801a91c <vPortFree>
	    free(user_entry);
 8013c0e:	4640      	mov	r0, r8
 8013c10:	f006 fe84 	bl	801a91c <vPortFree>
}
 8013c14:	b02e      	add	sp, #184	@ 0xb8
 8013c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013c1a:	ad28      	add	r5, sp, #160	@ 0xa0
 8013c1c:	497f      	ldr	r1, [pc, #508]	@ (8013e1c <handle_manage_user+0x2e8>)
 8013c1e:	4628      	mov	r0, r5
 8013c20:	f010 fabe 	bl	80241a0 <mg_str_s>
 8013c24:	2300      	movs	r3, #0
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013c2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c30:	f010 fcd8 	bl	80245e4 <mg_match>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	f000 8096 	beq.w	8013d66 <handle_manage_user+0x232>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013c3a:	ab03      	add	r3, sp, #12
 8013c3c:	4a78      	ldr	r2, [pc, #480]	@ (8013e20 <handle_manage_user+0x2ec>)
 8013c3e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013c42:	c903      	ldmia	r1, {r0, r1}
 8013c44:	f00e ff7e 	bl	8022b44 <mg_json_get>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	db21      	blt.n	8013c90 <handle_manage_user+0x15c>
	    username_add = mg_json_get_str(hm->body, "$.user");
 8013c4c:	4a75      	ldr	r2, [pc, #468]	@ (8013e24 <handle_manage_user+0x2f0>)
 8013c4e:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c56:	f011 fb93 	bl	8025380 <mg_json_get_str>
 8013c5a:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 8013c5c:	4a72      	ldr	r2, [pc, #456]	@ (8013e28 <handle_manage_user+0x2f4>)
 8013c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013c62:	f011 fb8d 	bl	8025380 <mg_json_get_str>
 8013c66:	4604      	mov	r4, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013c68:	b125      	cbz	r5, 8013c74 <handle_manage_user+0x140>
 8013c6a:	b118      	cbz	r0, 8013c74 <handle_manage_user+0x140>
 8013c6c:	782b      	ldrb	r3, [r5, #0]
 8013c6e:	b10b      	cbz	r3, 8013c74 <handle_manage_user+0x140>
 8013c70:	7803      	ldrb	r3, [r0, #0]
 8013c72:	bb7b      	cbnz	r3, 8013cd4 <handle_manage_user+0x1a0>
	        mg_http_reply(c, 400, headers,
 8013c74:	4b6d      	ldr	r3, [pc, #436]	@ (8013e2c <handle_manage_user+0x2f8>)
 8013c76:	4a66      	ldr	r2, [pc, #408]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013c78:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c7c:	4638      	mov	r0, r7
 8013c7e:	f010 f905 	bl	8023e8c <mg_http_reply>
		free(username_add);
 8013c82:	4628      	mov	r0, r5
 8013c84:	f006 fe4a 	bl	801a91c <vPortFree>
		free(password_add);
 8013c88:	4620      	mov	r0, r4
 8013c8a:	f006 fe47 	bl	801a91c <vPortFree>
 8013c8e:	e7c1      	b.n	8013c14 <handle_manage_user+0xe0>
	        mg_http_reply(c, 400, headers,
 8013c90:	4b67      	ldr	r3, [pc, #412]	@ (8013e30 <handle_manage_user+0x2fc>)
 8013c92:	4a5f      	ldr	r2, [pc, #380]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013c94:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c98:	4638      	mov	r0, r7
 8013c9a:	f010 f8f7 	bl	8023e8c <mg_http_reply>
	        return;
 8013c9e:	e7b9      	b.n	8013c14 <handle_manage_user+0xe0>
	        for (int i = 0; i < user_list_size; i++) {
 8013ca0:	3601      	adds	r6, #1
 8013ca2:	2e09      	cmp	r6, #9
 8013ca4:	dc18      	bgt.n	8013cd8 <handle_manage_user+0x1a4>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	20a9      	movs	r0, #169	@ 0xa9
 8013caa:	4b55      	ldr	r3, [pc, #340]	@ (8013e00 <handle_manage_user+0x2cc>)
 8013cac:	fb00 3006 	mla	r0, r0, r6, r3
 8013cb0:	f7fc fa96 	bl	80101e0 <strcmp>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	d1f3      	bne.n	8013ca0 <handle_manage_user+0x16c>
	                mg_http_reply(c, 400, headers,
 8013cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8013e34 <handle_manage_user+0x300>)
 8013cba:	4a55      	ldr	r2, [pc, #340]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013cbc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	f010 f8e3 	bl	8023e8c <mg_http_reply>
	                free(username_add);
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	f006 fe28 	bl	801a91c <vPortFree>
	                free(password_add);
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f006 fe25 	bl	801a91c <vPortFree>
	                return;
 8013cd2:	e79f      	b.n	8013c14 <handle_manage_user+0xe0>
	        for (int i = 0; i < user_list_size; i++) {
 8013cd4:	2600      	movs	r6, #0
 8013cd6:	e7e4      	b.n	8013ca2 <handle_manage_user+0x16e>
			char add_pass_digest[sha1_str_len] = {0};
 8013cd8:	2600      	movs	r6, #0
 8013cda:	9604      	str	r6, [sp, #16]
 8013cdc:	2225      	movs	r2, #37	@ 0x25
 8013cde:	4631      	mov	r1, r6
 8013ce0:	a805      	add	r0, sp, #20
 8013ce2:	f018 fdcd 	bl	802c880 <memset>
			mg_sha1_init(&sha1_ctx);
 8013ce6:	a80f      	add	r0, sp, #60	@ 0x3c
 8013ce8:	f010 f9a8 	bl	802403c <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7fc fad7 	bl	80102a0 <strlen>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	4621      	mov	r1, r4
 8013cf6:	a80f      	add	r0, sp, #60	@ 0x3c
 8013cf8:	f010 f9ba 	bl	8024070 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8013cfc:	a90f      	add	r1, sp, #60	@ 0x3c
 8013cfe:	a804      	add	r0, sp, #16
 8013d00:	f010 f9f0 	bl	80240e4 <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 8013d04:	4633      	mov	r3, r6
 8013d06:	e000      	b.n	8013d0a <handle_manage_user+0x1d6>
 8013d08:	3301      	adds	r3, #1
 8013d0a:	2b09      	cmp	r3, #9
 8013d0c:	dc23      	bgt.n	8013d56 <handle_manage_user+0x222>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8013d0e:	22a9      	movs	r2, #169	@ 0xa9
 8013d10:	fb03 f202 	mul.w	r2, r3, r2
 8013d14:	493a      	ldr	r1, [pc, #232]	@ (8013e00 <handle_manage_user+0x2cc>)
 8013d16:	5c8a      	ldrb	r2, [r1, r2]
 8013d18:	2a00      	cmp	r2, #0
 8013d1a:	d1f5      	bne.n	8013d08 <handle_manage_user+0x1d4>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8013d1c:	22a9      	movs	r2, #169	@ 0xa9
 8013d1e:	fb02 f603 	mul.w	r6, r2, r3
 8013d22:	4688      	mov	r8, r1
 8013d24:	227f      	movs	r2, #127	@ 0x7f
 8013d26:	4629      	mov	r1, r5
 8013d28:	eb08 0006 	add.w	r0, r8, r6
 8013d2c:	f018 fdef 	bl	802c90e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013d30:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 8013d34:	2228      	movs	r2, #40	@ 0x28
 8013d36:	a904      	add	r1, sp, #16
 8013d38:	4440      	add	r0, r8
 8013d3a:	f018 fde8 	bl	802c90e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 8013d3e:	220a      	movs	r2, #10
 8013d40:	4641      	mov	r1, r8
 8013d42:	483d      	ldr	r0, [pc, #244]	@ (8013e38 <handle_manage_user+0x304>)
 8013d44:	f7ff fedc 	bl	8013b00 <write_users>
	            mg_http_reply(c, 200, headers,
 8013d48:	4b3c      	ldr	r3, [pc, #240]	@ (8013e3c <handle_manage_user+0x308>)
 8013d4a:	4a31      	ldr	r2, [pc, #196]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013d4c:	21c8      	movs	r1, #200	@ 0xc8
 8013d4e:	4638      	mov	r0, r7
 8013d50:	f010 f89c 	bl	8023e8c <mg_http_reply>
 8013d54:	e795      	b.n	8013c82 <handle_manage_user+0x14e>
	            mg_http_reply(c, 400, headers,
 8013d56:	4b3a      	ldr	r3, [pc, #232]	@ (8013e40 <handle_manage_user+0x30c>)
 8013d58:	4a2d      	ldr	r2, [pc, #180]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013d5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d5e:	4638      	mov	r0, r7
 8013d60:	f010 f894 	bl	8023e8c <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 8013d64:	e78d      	b.n	8013c82 <handle_manage_user+0x14e>
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8013d66:	ad2a      	add	r5, sp, #168	@ 0xa8
 8013d68:	4936      	ldr	r1, [pc, #216]	@ (8013e44 <handle_manage_user+0x310>)
 8013d6a:	4628      	mov	r0, r5
 8013d6c:	f010 fa18 	bl	80241a0 <mg_str_s>
 8013d70:	2300      	movs	r3, #0
 8013d72:	9300      	str	r3, [sp, #0]
 8013d74:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013d78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d7c:	f010 fc32 	bl	80245e4 <mg_match>
 8013d80:	2800      	cmp	r0, #0
 8013d82:	f000 80a9 	beq.w	8013ed8 <handle_manage_user+0x3a4>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013d86:	ab03      	add	r3, sp, #12
 8013d88:	4a25      	ldr	r2, [pc, #148]	@ (8013e20 <handle_manage_user+0x2ec>)
 8013d8a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013d8e:	c903      	ldmia	r1, {r0, r1}
 8013d90:	f00e fed8 	bl	8022b44 <mg_json_get>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	db22      	blt.n	8013dde <handle_manage_user+0x2aa>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8013d98:	4a22      	ldr	r2, [pc, #136]	@ (8013e24 <handle_manage_user+0x2f0>)
 8013d9a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013da2:	f011 faed 	bl	8025380 <mg_json_get_str>
 8013da6:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8013da8:	4a1f      	ldr	r2, [pc, #124]	@ (8013e28 <handle_manage_user+0x2f4>)
 8013daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013dae:	f011 fae7 	bl	8025380 <mg_json_get_str>
 8013db2:	4604      	mov	r4, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013db4:	b12d      	cbz	r5, 8013dc2 <handle_manage_user+0x28e>
 8013db6:	b120      	cbz	r0, 8013dc2 <handle_manage_user+0x28e>
 8013db8:	782b      	ldrb	r3, [r5, #0]
 8013dba:	b113      	cbz	r3, 8013dc2 <handle_manage_user+0x28e>
 8013dbc:	7803      	ldrb	r3, [r0, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d144      	bne.n	8013e4c <handle_manage_user+0x318>
	            mg_http_reply(c, 400, headers,
 8013dc2:	4b21      	ldr	r3, [pc, #132]	@ (8013e48 <handle_manage_user+0x314>)
 8013dc4:	4a12      	ldr	r2, [pc, #72]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013dc6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013dca:	4638      	mov	r0, r7
 8013dcc:	f010 f85e 	bl	8023e8c <mg_http_reply>
	    free(username_edit);
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	f006 fda3 	bl	801a91c <vPortFree>
	    free(new_password);
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f006 fda0 	bl	801a91c <vPortFree>
 8013ddc:	e71a      	b.n	8013c14 <handle_manage_user+0xe0>
	        mg_http_reply(c, 400, headers,
 8013dde:	4b14      	ldr	r3, [pc, #80]	@ (8013e30 <handle_manage_user+0x2fc>)
 8013de0:	4a0b      	ldr	r2, [pc, #44]	@ (8013e10 <handle_manage_user+0x2dc>)
 8013de2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013de6:	4638      	mov	r0, r7
 8013de8:	f010 f850 	bl	8023e8c <mg_http_reply>
	    char *new_password = NULL;
 8013dec:	2400      	movs	r4, #0
	    char *username_edit = NULL;
 8013dee:	4625      	mov	r5, r4
 8013df0:	e7ee      	b.n	8013dd0 <handle_manage_user+0x29c>
 8013df2:	bf00      	nop
 8013df4:	08036464 	.word	0x08036464
 8013df8:	0803712c 	.word	0x0803712c
 8013dfc:	0803ad40 	.word	0x0803ad40
 8013e00:	200021b8 	.word	0x200021b8
 8013e04:	0803713c 	.word	0x0803713c
 8013e08:	0803714c 	.word	0x0803714c
 8013e0c:	08037150 	.word	0x08037150
 8013e10:	080364a0 	.word	0x080364a0
 8013e14:	08036e00 	.word	0x08036e00
 8013e18:	08036e34 	.word	0x08036e34
 8013e1c:	08036568 	.word	0x08036568
 8013e20:	08036c24 	.word	0x08036c24
 8013e24:	08037154 	.word	0x08037154
 8013e28:	0803715c 	.word	0x0803715c
 8013e2c:	08037210 	.word	0x08037210
 8013e30:	08036c28 	.word	0x08036c28
 8013e34:	08037164 	.word	0x08037164
 8013e38:	08035ecc 	.word	0x08035ecc
 8013e3c:	080371a0 	.word	0x080371a0
 8013e40:	080371dc 	.word	0x080371dc
 8013e44:	08037250 	.word	0x08037250
 8013e48:	080372c8 	.word	0x080372c8
	            char new_pass_digest[sha1_str_len] = {0};
 8013e4c:	2600      	movs	r6, #0
 8013e4e:	9604      	str	r6, [sp, #16]
 8013e50:	2225      	movs	r2, #37	@ 0x25
 8013e52:	4631      	mov	r1, r6
 8013e54:	a805      	add	r0, sp, #20
 8013e56:	f018 fd13 	bl	802c880 <memset>
	            mg_sha1_init(&sha1_ctx);
 8013e5a:	a80f      	add	r0, sp, #60	@ 0x3c
 8013e5c:	f010 f8ee 	bl	802403c <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 8013e60:	4620      	mov	r0, r4
 8013e62:	f7fc fa1d 	bl	80102a0 <strlen>
 8013e66:	4602      	mov	r2, r0
 8013e68:	4621      	mov	r1, r4
 8013e6a:	a80f      	add	r0, sp, #60	@ 0x3c
 8013e6c:	f010 f900 	bl	8024070 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 8013e70:	a90f      	add	r1, sp, #60	@ 0x3c
 8013e72:	a804      	add	r0, sp, #16
 8013e74:	f010 f936 	bl	80240e4 <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 8013e78:	2e09      	cmp	r6, #9
 8013e7a:	dc25      	bgt.n	8013ec8 <handle_manage_user+0x394>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 8013e7c:	4629      	mov	r1, r5
 8013e7e:	20a9      	movs	r0, #169	@ 0xa9
 8013e80:	4b45      	ldr	r3, [pc, #276]	@ (8013f98 <handle_manage_user+0x464>)
 8013e82:	fb00 3006 	mla	r0, r0, r6, r3
 8013e86:	f7fc f9ab 	bl	80101e0 <strcmp>
 8013e8a:	b108      	cbz	r0, 8013e90 <handle_manage_user+0x35c>
	            for (int i = 0; i < user_list_size; i++) {
 8013e8c:	3601      	adds	r6, #1
 8013e8e:	e7f3      	b.n	8013e78 <handle_manage_user+0x344>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013e90:	23a9      	movs	r3, #169	@ 0xa9
 8013e92:	fb03 f606 	mul.w	r6, r3, r6
 8013e96:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 8013e9a:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8013f98 <handle_manage_user+0x464>
 8013e9e:	2228      	movs	r2, #40	@ 0x28
 8013ea0:	a904      	add	r1, sp, #16
 8013ea2:	4440      	add	r0, r8
 8013ea4:	f018 fd33 	bl	802c90e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8013ea8:	4446      	add	r6, r8
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f886 30a8 	strb.w	r3, [r6, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 8013eb0:	220a      	movs	r2, #10
 8013eb2:	4641      	mov	r1, r8
 8013eb4:	4839      	ldr	r0, [pc, #228]	@ (8013f9c <handle_manage_user+0x468>)
 8013eb6:	f7ff fe23 	bl	8013b00 <write_users>
	                mg_http_reply(c, 200, headers,
 8013eba:	4b39      	ldr	r3, [pc, #228]	@ (8013fa0 <handle_manage_user+0x46c>)
 8013ebc:	4a39      	ldr	r2, [pc, #228]	@ (8013fa4 <handle_manage_user+0x470>)
 8013ebe:	21c8      	movs	r1, #200	@ 0xc8
 8013ec0:	4638      	mov	r0, r7
 8013ec2:	f00f ffe3 	bl	8023e8c <mg_http_reply>
 8013ec6:	e783      	b.n	8013dd0 <handle_manage_user+0x29c>
	                mg_http_reply(c, 404, headers,
 8013ec8:	4b37      	ldr	r3, [pc, #220]	@ (8013fa8 <handle_manage_user+0x474>)
 8013eca:	4a36      	ldr	r2, [pc, #216]	@ (8013fa4 <handle_manage_user+0x470>)
 8013ecc:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013ed0:	4638      	mov	r0, r7
 8013ed2:	f00f ffdb 	bl	8023e8c <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013ed6:	e77b      	b.n	8013dd0 <handle_manage_user+0x29c>
	}else if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8013ed8:	ad2c      	add	r5, sp, #176	@ 0xb0
 8013eda:	4934      	ldr	r1, [pc, #208]	@ (8013fac <handle_manage_user+0x478>)
 8013edc:	4628      	mov	r0, r5
 8013ede:	f010 f95f 	bl	80241a0 <mg_str_s>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013eee:	f010 fb79 	bl	80245e4 <mg_match>
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	d047      	beq.n	8013f86 <handle_manage_user+0x452>
	    username_del = mg_json_get_str(hm->body, "$.user");
 8013ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8013fb0 <handle_manage_user+0x47c>)
 8013ef8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013efc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f00:	f011 fa3e 	bl	8025380 <mg_json_get_str>
	    if (username_del && strlen(username_del) > 0) {
 8013f04:	4606      	mov	r6, r0
 8013f06:	b108      	cbz	r0, 8013f0c <handle_manage_user+0x3d8>
 8013f08:	7803      	ldrb	r3, [r0, #0]
 8013f0a:	bb2b      	cbnz	r3, 8013f58 <handle_manage_user+0x424>
	        mg_http_reply(c, 400, headers,
 8013f0c:	4b29      	ldr	r3, [pc, #164]	@ (8013fb4 <handle_manage_user+0x480>)
 8013f0e:	4a25      	ldr	r2, [pc, #148]	@ (8013fa4 <handle_manage_user+0x470>)
 8013f10:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f14:	4638      	mov	r0, r7
 8013f16:	f00f ffb9 	bl	8023e8c <mg_http_reply>
	    free(username_del);
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f006 fcfe 	bl	801a91c <vPortFree>
 8013f20:	e678      	b.n	8013c14 <handle_manage_user+0xe0>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 8013f22:	2280      	movs	r2, #128	@ 0x80
 8013f24:	2100      	movs	r1, #0
 8013f26:	4628      	mov	r0, r5
 8013f28:	f018 fcaa 	bl	802c880 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 8013f2c:	23a9      	movs	r3, #169	@ 0xa9
 8013f2e:	fb03 f004 	mul.w	r0, r3, r4
 8013f32:	3080      	adds	r0, #128	@ 0x80
 8013f34:	4c18      	ldr	r4, [pc, #96]	@ (8013f98 <handle_manage_user+0x464>)
 8013f36:	2229      	movs	r2, #41	@ 0x29
 8013f38:	2100      	movs	r1, #0
 8013f3a:	4420      	add	r0, r4
 8013f3c:	f018 fca0 	bl	802c880 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8013f40:	220a      	movs	r2, #10
 8013f42:	4621      	mov	r1, r4
 8013f44:	4815      	ldr	r0, [pc, #84]	@ (8013f9c <handle_manage_user+0x468>)
 8013f46:	f7ff fddb 	bl	8013b00 <write_users>
	            mg_http_reply(c, 200, headers,
 8013f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8013fb8 <handle_manage_user+0x484>)
 8013f4c:	4a15      	ldr	r2, [pc, #84]	@ (8013fa4 <handle_manage_user+0x470>)
 8013f4e:	21c8      	movs	r1, #200	@ 0xc8
 8013f50:	4638      	mov	r0, r7
 8013f52:	f00f ff9b 	bl	8023e8c <mg_http_reply>
 8013f56:	e7e0      	b.n	8013f1a <handle_manage_user+0x3e6>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013f58:	2401      	movs	r4, #1
 8013f5a:	2c09      	cmp	r4, #9
 8013f5c:	dc0b      	bgt.n	8013f76 <handle_manage_user+0x442>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 8013f5e:	23a9      	movs	r3, #169	@ 0xa9
 8013f60:	4d0d      	ldr	r5, [pc, #52]	@ (8013f98 <handle_manage_user+0x464>)
 8013f62:	fb03 5504 	mla	r5, r3, r4, r5
 8013f66:	4631      	mov	r1, r6
 8013f68:	4628      	mov	r0, r5
 8013f6a:	f7fc f939 	bl	80101e0 <strcmp>
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d0d7      	beq.n	8013f22 <handle_manage_user+0x3ee>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013f72:	3401      	adds	r4, #1
 8013f74:	e7f1      	b.n	8013f5a <handle_manage_user+0x426>
	            mg_http_reply(c, 400, headers,
 8013f76:	4b11      	ldr	r3, [pc, #68]	@ (8013fbc <handle_manage_user+0x488>)
 8013f78:	4a0a      	ldr	r2, [pc, #40]	@ (8013fa4 <handle_manage_user+0x470>)
 8013f7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013f7e:	4638      	mov	r0, r7
 8013f80:	f00f ff84 	bl	8023e8c <mg_http_reply>
 8013f84:	e7c9      	b.n	8013f1a <handle_manage_user+0x3e6>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8013f86:	4b0e      	ldr	r3, [pc, #56]	@ (8013fc0 <handle_manage_user+0x48c>)
 8013f88:	4a06      	ldr	r2, [pc, #24]	@ (8013fa4 <handle_manage_user+0x470>)
 8013f8a:	f240 1195 	movw	r1, #405	@ 0x195
 8013f8e:	4638      	mov	r0, r7
 8013f90:	f00f ff7c 	bl	8023e8c <mg_http_reply>
 8013f94:	e63e      	b.n	8013c14 <handle_manage_user+0xe0>
 8013f96:	bf00      	nop
 8013f98:	200021b8 	.word	0x200021b8
 8013f9c:	08035ecc 	.word	0x08035ecc
 8013fa0:	08037254 	.word	0x08037254
 8013fa4:	080364a0 	.word	0x080364a0
 8013fa8:	08037298 	.word	0x08037298
 8013fac:	0803730c 	.word	0x0803730c
 8013fb0:	08037154 	.word	0x08037154
 8013fb4:	080373a8 	.word	0x080373a8
 8013fb8:	08037314 	.word	0x08037314
 8013fbc:	08037354 	.word	0x08037354
 8013fc0:	080373e8 	.word	0x080373e8

08013fc4 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 8013fc4:	b570      	push	{r4, r5, r6, lr}
 8013fc6:	460e      	mov	r6, r1
 8013fc8:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 8013fca:	2201      	movs	r2, #1
 8013fcc:	4601      	mov	r1, r0
 8013fce:	480a      	ldr	r0, [pc, #40]	@ (8013ff8 <load_users+0x34>)
 8013fd0:	f00e fcce 	bl	8022970 <mg_fs_open>
	if (!fd) return false;
 8013fd4:	b168      	cbz	r0, 8013ff2 <load_users+0x2e>
 8013fd6:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 8013fd8:	4b07      	ldr	r3, [pc, #28]	@ (8013ff8 <load_users+0x34>)
 8013fda:	691b      	ldr	r3, [r3, #16]
 8013fdc:	22a9      	movs	r2, #169	@ 0xa9
 8013fde:	fb04 f202 	mul.w	r2, r4, r2
 8013fe2:	4631      	mov	r1, r6
 8013fe4:	6800      	ldr	r0, [r0, #0]
 8013fe6:	4798      	blx	r3
	mg_fs_close(fd);
 8013fe8:	4628      	mov	r0, r5
 8013fea:	f00e fcda 	bl	80229a2 <mg_fs_close>
	return true;
 8013fee:	2001      	movs	r0, #1
}
 8013ff0:	bd70      	pop	{r4, r5, r6, pc}
	if (!fd) return false;
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	e7fc      	b.n	8013ff0 <load_users+0x2c>
 8013ff6:	bf00      	nop
 8013ff8:	200000a0 	.word	0x200000a0

08013ffc <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8013ffc:	b570      	push	{r4, r5, r6, lr}
 8013ffe:	b086      	sub	sp, #24
 8014000:	4605      	mov	r5, r0
 8014002:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014004:	ae04      	add	r6, sp, #16
 8014006:	4915      	ldr	r1, [pc, #84]	@ (801405c <handle_restart_mcu+0x60>)
 8014008:	4630      	mov	r0, r6
 801400a:	f010 f8c9 	bl	80241a0 <mg_str_s>
 801400e:	2300      	movs	r3, #0
 8014010:	9300      	str	r3, [sp, #0]
 8014012:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014016:	e894 0003 	ldmia.w	r4, {r0, r1}
 801401a:	f010 fae3 	bl	80245e4 <mg_match>
 801401e:	b1a0      	cbz	r0, 801404a <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8014020:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8014022:	6818      	ldr	r0, [r3, #0]
 8014024:	2300      	movs	r3, #0
 8014026:	9302      	str	r3, [sp, #8]
 8014028:	4b0d      	ldr	r3, [pc, #52]	@ (8014060 <handle_restart_mcu+0x64>)
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	2301      	movs	r3, #1
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014034:	2300      	movs	r3, #0
 8014036:	f011 fa95 	bl	8025564 <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 801403a:	4b0a      	ldr	r3, [pc, #40]	@ (8014064 <handle_restart_mcu+0x68>)
 801403c:	4a0a      	ldr	r2, [pc, #40]	@ (8014068 <handle_restart_mcu+0x6c>)
 801403e:	21c8      	movs	r1, #200	@ 0xc8
 8014040:	4628      	mov	r0, r5
 8014042:	f00f ff23 	bl	8023e8c <mg_http_reply>
}
 8014046:	b006      	add	sp, #24
 8014048:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801404a:	4b08      	ldr	r3, [pc, #32]	@ (801406c <handle_restart_mcu+0x70>)
 801404c:	4a06      	ldr	r2, [pc, #24]	@ (8014068 <handle_restart_mcu+0x6c>)
 801404e:	f240 1195 	movw	r1, #405	@ 0x195
 8014052:	4628      	mov	r0, r5
 8014054:	f00f ff1a 	bl	8023e8c <mg_http_reply>
}
 8014058:	e7f5      	b.n	8014046 <handle_restart_mcu+0x4a>
 801405a:	bf00      	nop
 801405c:	08036568 	.word	0x08036568
 8014060:	08016239 	.word	0x08016239
 8014064:	08037448 	.word	0x08037448
 8014068:	080364a0 	.word	0x080364a0
 801406c:	080365f0 	.word	0x080365f0

08014070 <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8014070:	b570      	push	{r4, r5, r6, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	4605      	mov	r5, r0
 8014076:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014078:	ae02      	add	r6, sp, #8
 801407a:	4914      	ldr	r1, [pc, #80]	@ (80140cc <handle_activete_and_reboot+0x5c>)
 801407c:	4630      	mov	r0, r6
 801407e:	f010 f88f 	bl	80241a0 <mg_str_s>
 8014082:	2300      	movs	r3, #0
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	e896 000c 	ldmia.w	r6, {r2, r3}
 801408a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801408e:	f010 faa9 	bl	80245e4 <mg_match>
 8014092:	b198      	cbz	r0, 80140bc <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8014094:	4b0e      	ldr	r3, [pc, #56]	@ (80140d0 <handle_activete_and_reboot+0x60>)
 8014096:	69db      	ldr	r3, [r3, #28]
 8014098:	490e      	ldr	r1, [pc, #56]	@ (80140d4 <handle_activete_and_reboot+0x64>)
 801409a:	480f      	ldr	r0, [pc, #60]	@ (80140d8 <handle_activete_and_reboot+0x68>)
 801409c:	4798      	blx	r3
 801409e:	b128      	cbz	r0, 80140ac <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 80140a0:	4621      	mov	r1, r4
 80140a2:	4628      	mov	r0, r5
 80140a4:	f7ff ffaa 	bl	8013ffc <handle_restart_mcu>
}
 80140a8:	b004      	add	sp, #16
 80140aa:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 80140ac:	4b0b      	ldr	r3, [pc, #44]	@ (80140dc <handle_activete_and_reboot+0x6c>)
 80140ae:	4a0c      	ldr	r2, [pc, #48]	@ (80140e0 <handle_activete_and_reboot+0x70>)
 80140b0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80140b4:	4628      	mov	r0, r5
 80140b6:	f00f fee9 	bl	8023e8c <mg_http_reply>
 80140ba:	e7f5      	b.n	80140a8 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80140bc:	4b09      	ldr	r3, [pc, #36]	@ (80140e4 <handle_activete_and_reboot+0x74>)
 80140be:	4a08      	ldr	r2, [pc, #32]	@ (80140e0 <handle_activete_and_reboot+0x70>)
 80140c0:	f240 1195 	movw	r1, #405	@ 0x195
 80140c4:	4628      	mov	r0, r5
 80140c6:	f00f fee1 	bl	8023e8c <mg_http_reply>
}
 80140ca:	e7ed      	b.n	80140a8 <handle_activete_and_reboot+0x38>
 80140cc:	08036568 	.word	0x08036568
 80140d0:	200000a0 	.word	0x200000a0
 80140d4:	08035e8c 	.word	0x08035e8c
 80140d8:	08037480 	.word	0x08037480
 80140dc:	08037498 	.word	0x08037498
 80140e0:	080364a0 	.word	0x080364a0
 80140e4:	080365f0 	.word	0x080365f0

080140e8 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 80140e8:	b570      	push	{r4, r5, r6, lr}
 80140ea:	b0a4      	sub	sp, #144	@ 0x90
 80140ec:	4605      	mov	r5, r0
 80140ee:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80140f0:	ae22      	add	r6, sp, #136	@ 0x88
 80140f2:	491a      	ldr	r1, [pc, #104]	@ (801415c <handle_firmware_upload+0x74>)
 80140f4:	4630      	mov	r0, r6
 80140f6:	f010 f853 	bl	80241a0 <mg_str_s>
 80140fa:	2300      	movs	r3, #0
 80140fc:	9300      	str	r3, [sp, #0]
 80140fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014106:	f010 fa6d 	bl	80245e4 <mg_match>
 801410a:	b1f0      	cbz	r0, 801414a <handle_firmware_upload+0x62>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 801410c:	2380      	movs	r3, #128	@ 0x80
 801410e:	aa02      	add	r2, sp, #8
 8014110:	4913      	ldr	r1, [pc, #76]	@ (8014160 <handle_firmware_upload+0x78>)
 8014112:	f104 0010 	add.w	r0, r4, #16
 8014116:	f010 ff30 	bl	8024f7a <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 801411a:	4912      	ldr	r1, [pc, #72]	@ (8014164 <handle_firmware_upload+0x7c>)
 801411c:	a802      	add	r0, sp, #8
 801411e:	f7fc f85f 	bl	80101e0 <strcmp>
 8014122:	b940      	cbnz	r0, 8014136 <handle_firmware_upload+0x4e>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8014124:	4b10      	ldr	r3, [pc, #64]	@ (8014168 <handle_firmware_upload+0x80>)
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	4b10      	ldr	r3, [pc, #64]	@ (801416c <handle_firmware_upload+0x84>)
 801412a:	4a11      	ldr	r2, [pc, #68]	@ (8014170 <handle_firmware_upload+0x88>)
 801412c:	4621      	mov	r1, r4
 801412e:	4628      	mov	r0, r5
 8014130:	f012 fcea 	bl	8026b08 <mg_http_upload>
 8014134:	e010      	b.n	8014158 <handle_firmware_upload+0x70>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8014136:	4b0b      	ldr	r3, [pc, #44]	@ (8014164 <handle_firmware_upload+0x7c>)
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	4b0e      	ldr	r3, [pc, #56]	@ (8014174 <handle_firmware_upload+0x8c>)
 801413c:	4a0e      	ldr	r2, [pc, #56]	@ (8014178 <handle_firmware_upload+0x90>)
 801413e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8014142:	4628      	mov	r0, r5
 8014144:	f00f fea2 	bl	8023e8c <mg_http_reply>
 8014148:	e006      	b.n	8014158 <handle_firmware_upload+0x70>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 801414a:	4b0c      	ldr	r3, [pc, #48]	@ (801417c <handle_firmware_upload+0x94>)
 801414c:	4a0a      	ldr	r2, [pc, #40]	@ (8014178 <handle_firmware_upload+0x90>)
 801414e:	f240 1195 	movw	r1, #405	@ 0x195
 8014152:	4628      	mov	r0, r5
 8014154:	f00f fe9a 	bl	8023e8c <mg_http_reply>
}
 8014158:	b024      	add	sp, #144	@ 0x90
 801415a:	bd70      	pop	{r4, r5, r6, pc}
 801415c:	08036568 	.word	0x08036568
 8014160:	0803ac90 	.word	0x0803ac90
 8014164:	080374dc 	.word	0x080374dc
 8014168:	0003d090 	.word	0x0003d090
 801416c:	08035e80 	.word	0x08035e80
 8014170:	200000a0 	.word	0x200000a0
 8014174:	080374ec 	.word	0x080374ec
 8014178:	080364a0 	.word	0x080364a0
 801417c:	080365f0 	.word	0x080365f0

08014180 <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8014180:	b570      	push	{r4, r5, r6, lr}
 8014182:	b0c4      	sub	sp, #272	@ 0x110
 8014184:	4606      	mov	r6, r0
 8014186:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8014188:	ad42      	add	r5, sp, #264	@ 0x108
 801418a:	4920      	ldr	r1, [pc, #128]	@ (801420c <handle_fs_mkdir+0x8c>)
 801418c:	4628      	mov	r0, r5
 801418e:	f010 f807 	bl	80241a0 <mg_str_s>
 8014192:	2300      	movs	r3, #0
 8014194:	9300      	str	r3, [sp, #0]
 8014196:	e895 000c 	ldmia.w	r5, {r2, r3}
 801419a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801419e:	f010 fa21 	bl	80245e4 <mg_match>
 80141a2:	b350      	cbz	r0, 80141fa <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80141a4:	237b      	movs	r3, #123	@ 0x7b
 80141a6:	aa23      	add	r2, sp, #140	@ 0x8c
 80141a8:	4919      	ldr	r1, [pc, #100]	@ (8014210 <handle_fs_mkdir+0x90>)
 80141aa:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 80141ae:	f010 fee4 	bl	8024f7a <mg_http_get_var>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	dd19      	ble.n	80141ea <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 80141b6:	ab23      	add	r3, sp, #140	@ 0x8c
 80141b8:	4a16      	ldr	r2, [pc, #88]	@ (8014214 <handle_fs_mkdir+0x94>)
 80141ba:	2180      	movs	r1, #128	@ 0x80
 80141bc:	a803      	add	r0, sp, #12
 80141be:	f017 fe35 	bl	802be2c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 80141c2:	4b15      	ldr	r3, [pc, #84]	@ (8014218 <handle_fs_mkdir+0x98>)
 80141c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141c6:	a803      	add	r0, sp, #12
 80141c8:	4798      	blx	r3
 80141ca:	b130      	cbz	r0, 80141da <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80141cc:	4b13      	ldr	r3, [pc, #76]	@ (801421c <handle_fs_mkdir+0x9c>)
 80141ce:	4a14      	ldr	r2, [pc, #80]	@ (8014220 <handle_fs_mkdir+0xa0>)
 80141d0:	21c8      	movs	r1, #200	@ 0xc8
 80141d2:	4630      	mov	r0, r6
 80141d4:	f00f fe5a 	bl	8023e8c <mg_http_reply>
 80141d8:	e016      	b.n	8014208 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 80141da:	4b12      	ldr	r3, [pc, #72]	@ (8014224 <handle_fs_mkdir+0xa4>)
 80141dc:	4a10      	ldr	r2, [pc, #64]	@ (8014220 <handle_fs_mkdir+0xa0>)
 80141de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80141e2:	4630      	mov	r0, r6
 80141e4:	f00f fe52 	bl	8023e8c <mg_http_reply>
 80141e8:	e00e      	b.n	8014208 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80141ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014228 <handle_fs_mkdir+0xa8>)
 80141ec:	4a0c      	ldr	r2, [pc, #48]	@ (8014220 <handle_fs_mkdir+0xa0>)
 80141ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80141f2:	4630      	mov	r0, r6
 80141f4:	f00f fe4a 	bl	8023e8c <mg_http_reply>
 80141f8:	e006      	b.n	8014208 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 80141fa:	4b0c      	ldr	r3, [pc, #48]	@ (801422c <handle_fs_mkdir+0xac>)
 80141fc:	4a08      	ldr	r2, [pc, #32]	@ (8014220 <handle_fs_mkdir+0xa0>)
 80141fe:	f240 1195 	movw	r1, #405	@ 0x195
 8014202:	4630      	mov	r0, r6
 8014204:	f00f fe42 	bl	8023e8c <mg_http_reply>
}
 8014208:	b044      	add	sp, #272	@ 0x110
 801420a:	bd70      	pop	{r4, r5, r6, pc}
 801420c:	08036568 	.word	0x08036568
 8014210:	08037538 	.word	0x08037538
 8014214:	08037540 	.word	0x08037540
 8014218:	200000a0 	.word	0x200000a0
 801421c:	08037548 	.word	0x08037548
 8014220:	080364a0 	.word	0x080364a0
 8014224:	0803757c 	.word	0x0803757c
 8014228:	080375b8 	.word	0x080375b8
 801422c:	080365f0 	.word	0x080365f0

08014230 <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8014230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014232:	b097      	sub	sp, #92	@ 0x5c
 8014234:	4604      	mov	r4, r0
 8014236:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8014238:	2101      	movs	r1, #1
 801423a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801423e:	f7ff f89d 	bl	801337c <mg_calloc>
	if (buff == NULL){
 8014242:	4605      	mov	r5, r0
 8014244:	b150      	cbz	r0, 801425c <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8014246:	2201      	movs	r2, #1
 8014248:	4621      	mov	r1, r4
 801424a:	4828      	ldr	r0, [pc, #160]	@ (80142ec <calc_file_md5sum+0xbc>)
 801424c:	f00e fb90 	bl	8022970 <mg_fs_open>
	if (fd==NULL){
 8014250:	4604      	mov	r4, r0
 8014252:	b140      	cbz	r0, 8014266 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8014254:	4668      	mov	r0, sp
 8014256:	f00e ff9b 	bl	8023190 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801425a:	e010      	b.n	801427e <calc_file_md5sum+0x4e>
		free(buff);
 801425c:	f006 fb5e 	bl	801a91c <vPortFree>
		return -1;
 8014260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014264:	e040      	b.n	80142e8 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8014266:	f00e fb9c 	bl	80229a2 <mg_fs_close>
		free(buff);
 801426a:	4628      	mov	r0, r5
 801426c:	f006 fb56 	bl	801a91c <vPortFree>
		return -2;
 8014270:	f06f 0001 	mvn.w	r0, #1
 8014274:	e038      	b.n	80142e8 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8014276:	4629      	mov	r1, r5
 8014278:	4668      	mov	r0, sp
 801427a:	f00e ff9f 	bl	80231bc <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 801427e:	4b1b      	ldr	r3, [pc, #108]	@ (80142ec <calc_file_md5sum+0xbc>)
 8014280:	691b      	ldr	r3, [r3, #16]
 8014282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014286:	4629      	mov	r1, r5
 8014288:	6820      	ldr	r0, [r4, #0]
 801428a:	4798      	blx	r3
 801428c:	4602      	mov	r2, r0
 801428e:	2800      	cmp	r0, #0
 8014290:	d1f1      	bne.n	8014276 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 8014292:	4620      	mov	r0, r4
 8014294:	f00e fb85 	bl	80229a2 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8014298:	2101      	movs	r1, #1
 801429a:	2010      	movs	r0, #16
 801429c:	f7ff f86e 	bl	801337c <mg_calloc>
	if (digest == NULL){
 80142a0:	4607      	mov	r7, r0
 80142a2:	b128      	cbz	r0, 80142b0 <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 80142a4:	4601      	mov	r1, r0
 80142a6:	4668      	mov	r0, sp
 80142a8:	f00e ffdf 	bl	802326a <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 80142ac:	2400      	movs	r4, #0
 80142ae:	e012      	b.n	80142d6 <calc_file_md5sum+0xa6>
		free(buff);
 80142b0:	4628      	mov	r0, r5
 80142b2:	f006 fb33 	bl	801a91c <vPortFree>
		free(digest);
 80142b6:	4638      	mov	r0, r7
 80142b8:	f006 fb30 	bl	801a91c <vPortFree>
		return -1;
 80142bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142c0:	e012      	b.n	80142e8 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 80142c2:	0061      	lsls	r1, r4, #1
 80142c4:	5d3b      	ldrb	r3, [r7, r4]
 80142c6:	4a0a      	ldr	r2, [pc, #40]	@ (80142f0 <calc_file_md5sum+0xc0>)
 80142c8:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 80142cc:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80142d0:	f017 fdac 	bl	802be2c <snprintf>
	for (int i = 0; i < 16; ++i) {
 80142d4:	3401      	adds	r4, #1
 80142d6:	2c0f      	cmp	r4, #15
 80142d8:	ddf3      	ble.n	80142c2 <calc_file_md5sum+0x92>
	free(buff);
 80142da:	4628      	mov	r0, r5
 80142dc:	f006 fb1e 	bl	801a91c <vPortFree>
	free(digest);
 80142e0:	4638      	mov	r0, r7
 80142e2:	f006 fb1b 	bl	801a91c <vPortFree>
	return 0;
 80142e6:	2000      	movs	r0, #0
}
 80142e8:	b017      	add	sp, #92	@ 0x5c
 80142ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142ec:	200000a0 	.word	0x200000a0
 80142f0:	080375f4 	.word	0x080375f4

080142f4 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80142f4:	b570      	push	{r4, r5, r6, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	4605      	mov	r5, r0
 80142fa:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80142fc:	ae02      	add	r6, sp, #8
 80142fe:	4919      	ldr	r1, [pc, #100]	@ (8014364 <handle_firmware_md5+0x70>)
 8014300:	4630      	mov	r0, r6
 8014302:	f00f ff4d 	bl	80241a0 <mg_str_s>
 8014306:	2300      	movs	r3, #0
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801430e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014312:	f010 f967 	bl	80245e4 <mg_match>
 8014316:	b1e8      	cbz	r0, 8014354 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8014318:	2101      	movs	r1, #1
 801431a:	2021      	movs	r0, #33	@ 0x21
 801431c:	f7ff f82e 	bl	801337c <mg_calloc>
 8014320:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8014322:	4601      	mov	r1, r0
 8014324:	4810      	ldr	r0, [pc, #64]	@ (8014368 <handle_firmware_md5+0x74>)
 8014326:	f7ff ff83 	bl	8014230 <calc_file_md5sum>
 801432a:	b958      	cbnz	r0, 8014344 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 801432c:	9400      	str	r4, [sp, #0]
 801432e:	4b0f      	ldr	r3, [pc, #60]	@ (801436c <handle_firmware_md5+0x78>)
 8014330:	4a0f      	ldr	r2, [pc, #60]	@ (8014370 <handle_firmware_md5+0x7c>)
 8014332:	21c8      	movs	r1, #200	@ 0xc8
 8014334:	4628      	mov	r0, r5
 8014336:	f00f fda9 	bl	8023e8c <mg_http_reply>
		free(md5_str);
 801433a:	4620      	mov	r0, r4
 801433c:	f006 faee 	bl	801a91c <vPortFree>
}
 8014340:	b004      	add	sp, #16
 8014342:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8014344:	4b0b      	ldr	r3, [pc, #44]	@ (8014374 <handle_firmware_md5+0x80>)
 8014346:	4a0a      	ldr	r2, [pc, #40]	@ (8014370 <handle_firmware_md5+0x7c>)
 8014348:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801434c:	4628      	mov	r0, r5
 801434e:	f00f fd9d 	bl	8023e8c <mg_http_reply>
 8014352:	e7f2      	b.n	801433a <handle_firmware_md5+0x46>
		mg_http_reply(c, 405, headers, //TODO delete for release,
 8014354:	4b08      	ldr	r3, [pc, #32]	@ (8014378 <handle_firmware_md5+0x84>)
 8014356:	4a06      	ldr	r2, [pc, #24]	@ (8014370 <handle_firmware_md5+0x7c>)
 8014358:	f240 1195 	movw	r1, #405	@ 0x195
 801435c:	4628      	mov	r0, r5
 801435e:	f00f fd95 	bl	8023e8c <mg_http_reply>
}
 8014362:	e7ed      	b.n	8014340 <handle_firmware_md5+0x4c>
 8014364:	08036464 	.word	0x08036464
 8014368:	08037480 	.word	0x08037480
 801436c:	080375fc 	.word	0x080375fc
 8014370:	080364a0 	.word	0x080364a0
 8014374:	08037620 	.word	0x08037620
 8014378:	08036518 	.word	0x08036518

0801437c <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 801437c:	290b      	cmp	r1, #11
 801437e:	d000      	beq.n	8014382 <dashboard+0x6>
 8014380:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8014382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014384:	b0b3      	sub	sp, #204	@ 0xcc
 8014386:	4605      	mov	r5, r0
 8014388:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 801438a:	2200      	movs	r2, #0
 801438c:	4621      	mov	r1, r4
 801438e:	f7fe fe2f 	bl	8012ff0 <auth>
 8014392:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8014394:	ae08      	add	r6, sp, #32
 8014396:	49ad      	ldr	r1, [pc, #692]	@ (801464c <dashboard+0x2d0>)
 8014398:	4630      	mov	r0, r6
 801439a:	f00f ff01 	bl	80241a0 <mg_str_s>
 801439e:	2300      	movs	r3, #0
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80143aa:	f010 f91b 	bl	80245e4 <mg_match>
 80143ae:	b120      	cbz	r0, 80143ba <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 80143b0:	4628      	mov	r0, r5
 80143b2:	f7fe fcc1 	bl	8012d38 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80143b6:	b033      	add	sp, #204	@ 0xcc
 80143b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 80143ba:	ae0a      	add	r6, sp, #40	@ 0x28
 80143bc:	49a4      	ldr	r1, [pc, #656]	@ (8014650 <dashboard+0x2d4>)
 80143be:	4630      	mov	r0, r6
 80143c0:	f00f feee 	bl	80241a0 <mg_str_s>
 80143c4:	2300      	movs	r3, #0
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143cc:	f104 0108 	add.w	r1, r4, #8
 80143d0:	c903      	ldmia	r1, {r0, r1}
 80143d2:	f010 f907 	bl	80245e4 <mg_match>
 80143d6:	b100      	cbz	r0, 80143da <dashboard+0x5e>
 80143d8:	b1bf      	cbz	r7, 801440a <dashboard+0x8e>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 80143da:	ae0c      	add	r6, sp, #48	@ 0x30
 80143dc:	499d      	ldr	r1, [pc, #628]	@ (8014654 <dashboard+0x2d8>)
 80143de:	4630      	mov	r0, r6
 80143e0:	f00f fede 	bl	80241a0 <mg_str_s>
 80143e4:	2300      	movs	r3, #0
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80143ec:	f104 0108 	add.w	r1, r4, #8
 80143f0:	c903      	ldmia	r1, {r0, r1}
 80143f2:	f010 f8f7 	bl	80245e4 <mg_match>
 80143f6:	b180      	cbz	r0, 801441a <dashboard+0x9e>
			logging(L_INFO, "Call API /api/login");
 80143f8:	4997      	ldr	r1, [pc, #604]	@ (8014658 <dashboard+0x2dc>)
 80143fa:	2001      	movs	r0, #1
 80143fc:	f7fd fd7e 	bl	8011efc <logging>
        	 handler_authanticate(c,hm);
 8014400:	4621      	mov	r1, r4
 8014402:	4628      	mov	r0, r5
 8014404:	f7fe fece 	bl	80131a4 <handler_authanticate>
 8014408:	e7d5      	b.n	80143b6 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 801440a:	4b94      	ldr	r3, [pc, #592]	@ (801465c <dashboard+0x2e0>)
 801440c:	4a94      	ldr	r2, [pc, #592]	@ (8014660 <dashboard+0x2e4>)
 801440e:	f240 1193 	movw	r1, #403	@ 0x193
 8014412:	4628      	mov	r0, r5
 8014414:	f00f fd3a 	bl	8023e8c <mg_http_reply>
 8014418:	e7cd      	b.n	80143b6 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 801441a:	ae0e      	add	r6, sp, #56	@ 0x38
 801441c:	4991      	ldr	r1, [pc, #580]	@ (8014664 <dashboard+0x2e8>)
 801441e:	4630      	mov	r0, r6
 8014420:	f00f febe 	bl	80241a0 <mg_str_s>
 8014424:	2300      	movs	r3, #0
 8014426:	9300      	str	r3, [sp, #0]
 8014428:	e896 000c 	ldmia.w	r6, {r2, r3}
 801442c:	f104 0108 	add.w	r1, r4, #8
 8014430:	c903      	ldmia	r1, {r0, r1}
 8014432:	f010 f8d7 	bl	80245e4 <mg_match>
 8014436:	b140      	cbz	r0, 801444a <dashboard+0xce>
			logging(L_INFO, "Call API /api/logout");
 8014438:	498b      	ldr	r1, [pc, #556]	@ (8014668 <dashboard+0x2ec>)
 801443a:	2001      	movs	r0, #1
 801443c:	f7fd fd5e 	bl	8011efc <logging>
			handler_logout(c,hm);
 8014440:	4621      	mov	r1, r4
 8014442:	4628      	mov	r0, r5
 8014444:	f7fe fd28 	bl	8012e98 <handler_logout>
 8014448:	e7b5      	b.n	80143b6 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 801444a:	ae10      	add	r6, sp, #64	@ 0x40
 801444c:	4987      	ldr	r1, [pc, #540]	@ (801466c <dashboard+0x2f0>)
 801444e:	4630      	mov	r0, r6
 8014450:	f00f fea6 	bl	80241a0 <mg_str_s>
 8014454:	2300      	movs	r3, #0
 8014456:	9300      	str	r3, [sp, #0]
 8014458:	e896 000c 	ldmia.w	r6, {r2, r3}
 801445c:	f104 0108 	add.w	r1, r4, #8
 8014460:	c903      	ldmia	r1, {r0, r1}
 8014462:	f010 f8bf 	bl	80245e4 <mg_match>
 8014466:	b138      	cbz	r0, 8014478 <dashboard+0xfc>
			logging(L_INFO, "Call API /api/ram/status");
 8014468:	4981      	ldr	r1, [pc, #516]	@ (8014670 <dashboard+0x2f4>)
 801446a:	2001      	movs	r0, #1
 801446c:	f7fd fd46 	bl	8011efc <logging>
			handle_ram_status_get(c);
 8014470:	4628      	mov	r0, r5
 8014472:	f7fe feab 	bl	80131cc <handle_ram_status_get>
 8014476:	e79e      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8014478:	ae12      	add	r6, sp, #72	@ 0x48
 801447a:	497e      	ldr	r1, [pc, #504]	@ (8014674 <dashboard+0x2f8>)
 801447c:	4630      	mov	r0, r6
 801447e:	f00f fe8f 	bl	80241a0 <mg_str_s>
 8014482:	2300      	movs	r3, #0
 8014484:	9300      	str	r3, [sp, #0]
 8014486:	e896 000c 	ldmia.w	r6, {r2, r3}
 801448a:	f104 0108 	add.w	r1, r4, #8
 801448e:	c903      	ldmia	r1, {r0, r1}
 8014490:	f010 f8a8 	bl	80245e4 <mg_match>
 8014494:	b140      	cbz	r0, 80144a8 <dashboard+0x12c>
			logging(L_INFO, "Call API /api/io/status");
 8014496:	4978      	ldr	r1, [pc, #480]	@ (8014678 <dashboard+0x2fc>)
 8014498:	2001      	movs	r0, #1
 801449a:	f7fd fd2f 	bl	8011efc <logging>
			handle_io_status_get(c, hm);
 801449e:	4621      	mov	r1, r4
 80144a0:	4628      	mov	r0, r5
 80144a2:	f7fe feb9 	bl	8013218 <handle_io_status_get>
 80144a6:	e786      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 80144a8:	ae14      	add	r6, sp, #80	@ 0x50
 80144aa:	4974      	ldr	r1, [pc, #464]	@ (801467c <dashboard+0x300>)
 80144ac:	4630      	mov	r0, r6
 80144ae:	f00f fe77 	bl	80241a0 <mg_str_s>
 80144b2:	2300      	movs	r3, #0
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80144ba:	f104 0108 	add.w	r1, r4, #8
 80144be:	c903      	ldmia	r1, {r0, r1}
 80144c0:	f010 f890 	bl	80245e4 <mg_match>
 80144c4:	b140      	cbz	r0, 80144d8 <dashboard+0x15c>
			logging(L_INFO, "Call API /api/mqtt/settings");
 80144c6:	496e      	ldr	r1, [pc, #440]	@ (8014680 <dashboard+0x304>)
 80144c8:	2001      	movs	r0, #1
 80144ca:	f7fd fd17 	bl	8011efc <logging>
			handle_mqtt_conf(c, hm);
 80144ce:	4621      	mov	r1, r4
 80144d0:	4628      	mov	r0, r5
 80144d2:	f7fe ff61 	bl	8013398 <handle_mqtt_conf>
 80144d6:	e76e      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/modbus/acl"), NULL)){
 80144d8:	ae16      	add	r6, sp, #88	@ 0x58
 80144da:	496a      	ldr	r1, [pc, #424]	@ (8014684 <dashboard+0x308>)
 80144dc:	4630      	mov	r0, r6
 80144de:	f00f fe5f 	bl	80241a0 <mg_str_s>
 80144e2:	2300      	movs	r3, #0
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80144ea:	f104 0108 	add.w	r1, r4, #8
 80144ee:	c903      	ldmia	r1, {r0, r1}
 80144f0:	f010 f878 	bl	80245e4 <mg_match>
 80144f4:	b140      	cbz	r0, 8014508 <dashboard+0x18c>
			logging(L_INFO, "Call API /api/modbus/acl");
 80144f6:	4964      	ldr	r1, [pc, #400]	@ (8014688 <dashboard+0x30c>)
 80144f8:	2001      	movs	r0, #1
 80144fa:	f7fd fcff 	bl	8011efc <logging>
			handle_mb_tcp_access_list(c, hm);
 80144fe:	4621      	mov	r1, r4
 8014500:	4628      	mov	r0, r5
 8014502:	f7ff f881 	bl	8013608 <handle_mb_tcp_access_list>
 8014506:	e756      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8014508:	ae18      	add	r6, sp, #96	@ 0x60
 801450a:	4960      	ldr	r1, [pc, #384]	@ (801468c <dashboard+0x310>)
 801450c:	4630      	mov	r0, r6
 801450e:	f00f fe47 	bl	80241a0 <mg_str_s>
 8014512:	2300      	movs	r3, #0
 8014514:	9300      	str	r3, [sp, #0]
 8014516:	e896 000c 	ldmia.w	r6, {r2, r3}
 801451a:	f104 0108 	add.w	r1, r4, #8
 801451e:	c903      	ldmia	r1, {r0, r1}
 8014520:	f010 f860 	bl	80245e4 <mg_match>
 8014524:	b140      	cbz	r0, 8014538 <dashboard+0x1bc>
			logging(L_INFO, "Call API /api/device/status");
 8014526:	495a      	ldr	r1, [pc, #360]	@ (8014690 <dashboard+0x314>)
 8014528:	2001      	movs	r0, #1
 801452a:	f7fd fce7 	bl	8011efc <logging>
			handle_dev_status(c, hm);
 801452e:	4621      	mov	r1, r4
 8014530:	4628      	mov	r0, r5
 8014532:	f7ff f949 	bl	80137c8 <handle_dev_status>
 8014536:	e73e      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8014538:	ae1a      	add	r6, sp, #104	@ 0x68
 801453a:	4956      	ldr	r1, [pc, #344]	@ (8014694 <dashboard+0x318>)
 801453c:	4630      	mov	r0, r6
 801453e:	f00f fe2f 	bl	80241a0 <mg_str_s>
 8014542:	2300      	movs	r3, #0
 8014544:	9300      	str	r3, [sp, #0]
 8014546:	e896 000c 	ldmia.w	r6, {r2, r3}
 801454a:	68e1      	ldr	r1, [r4, #12]
 801454c:	68a0      	ldr	r0, [r4, #8]
 801454e:	f010 f849 	bl	80245e4 <mg_match>
 8014552:	b148      	cbz	r0, 8014568 <dashboard+0x1ec>
			logging(L_INFO, "Call API /api/device/log");
 8014554:	4950      	ldr	r1, [pc, #320]	@ (8014698 <dashboard+0x31c>)
 8014556:	2001      	movs	r0, #1
 8014558:	f7fd fcd0 	bl	8011efc <logging>
			handle_fs_get_log(c, hm, 0);
 801455c:	2200      	movs	r2, #0
 801455e:	4621      	mov	r1, r4
 8014560:	4628      	mov	r0, r5
 8014562:	f7ff fa6f 	bl	8013a44 <handle_fs_get_log>
 8014566:	e726      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8014568:	ae1c      	add	r6, sp, #112	@ 0x70
 801456a:	494c      	ldr	r1, [pc, #304]	@ (801469c <dashboard+0x320>)
 801456c:	4630      	mov	r0, r6
 801456e:	f00f fe17 	bl	80241a0 <mg_str_s>
 8014572:	2300      	movs	r3, #0
 8014574:	9300      	str	r3, [sp, #0]
 8014576:	e896 000c 	ldmia.w	r6, {r2, r3}
 801457a:	68e1      	ldr	r1, [r4, #12]
 801457c:	68a0      	ldr	r0, [r4, #8]
 801457e:	f010 f831 	bl	80245e4 <mg_match>
 8014582:	b148      	cbz	r0, 8014598 <dashboard+0x21c>
			logging(L_INFO, "Call API /api/device/log_old");
 8014584:	4946      	ldr	r1, [pc, #280]	@ (80146a0 <dashboard+0x324>)
 8014586:	2001      	movs	r0, #1
 8014588:	f7fd fcb8 	bl	8011efc <logging>
			handle_fs_get_log(c, hm, 1);
 801458c:	2201      	movs	r2, #1
 801458e:	4621      	mov	r1, r4
 8014590:	4628      	mov	r0, r5
 8014592:	f7ff fa57 	bl	8013a44 <handle_fs_get_log>
 8014596:	e70e      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8014598:	ae1e      	add	r6, sp, #120	@ 0x78
 801459a:	4942      	ldr	r1, [pc, #264]	@ (80146a4 <dashboard+0x328>)
 801459c:	4630      	mov	r0, r6
 801459e:	f00f fdff 	bl	80241a0 <mg_str_s>
 80145a2:	2300      	movs	r3, #0
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145aa:	68e1      	ldr	r1, [r4, #12]
 80145ac:	68a0      	ldr	r0, [r4, #8]
 80145ae:	f010 f819 	bl	80245e4 <mg_match>
 80145b2:	b140      	cbz	r0, 80145c6 <dashboard+0x24a>
			logging(L_INFO, "Call API /api/device/user");
 80145b4:	493c      	ldr	r1, [pc, #240]	@ (80146a8 <dashboard+0x32c>)
 80145b6:	2001      	movs	r0, #1
 80145b8:	f7fd fca0 	bl	8011efc <logging>
			handle_manage_user(c, hm);
 80145bc:	4621      	mov	r1, r4
 80145be:	4628      	mov	r0, r5
 80145c0:	f7ff fab8 	bl	8013b34 <handle_manage_user>
 80145c4:	e6f7      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 80145c6:	ae20      	add	r6, sp, #128	@ 0x80
 80145c8:	4938      	ldr	r1, [pc, #224]	@ (80146ac <dashboard+0x330>)
 80145ca:	4630      	mov	r0, r6
 80145cc:	f00f fde8 	bl	80241a0 <mg_str_s>
 80145d0:	2300      	movs	r3, #0
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145d8:	68e1      	ldr	r1, [r4, #12]
 80145da:	68a0      	ldr	r0, [r4, #8]
 80145dc:	f010 f802 	bl	80245e4 <mg_match>
 80145e0:	b140      	cbz	r0, 80145f4 <dashboard+0x278>
			logging(L_INFO, "Call API /api/device/restart");
 80145e2:	4933      	ldr	r1, [pc, #204]	@ (80146b0 <dashboard+0x334>)
 80145e4:	2001      	movs	r0, #1
 80145e6:	f7fd fc89 	bl	8011efc <logging>
			handle_restart_mcu(c, hm);
 80145ea:	4621      	mov	r1, r4
 80145ec:	4628      	mov	r0, r5
 80145ee:	f7ff fd05 	bl	8013ffc <handle_restart_mcu>
 80145f2:	e6e0      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/version"), NULL)){
 80145f4:	ae22      	add	r6, sp, #136	@ 0x88
 80145f6:	492f      	ldr	r1, [pc, #188]	@ (80146b4 <dashboard+0x338>)
 80145f8:	4630      	mov	r0, r6
 80145fa:	f00f fdd1 	bl	80241a0 <mg_str_s>
 80145fe:	2300      	movs	r3, #0
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014606:	68e1      	ldr	r1, [r4, #12]
 8014608:	68a0      	ldr	r0, [r4, #8]
 801460a:	f00f ffeb 	bl	80245e4 <mg_match>
 801460e:	b140      	cbz	r0, 8014622 <dashboard+0x2a6>
			logging(L_INFO, "Call API /api/device/version");
 8014610:	4929      	ldr	r1, [pc, #164]	@ (80146b8 <dashboard+0x33c>)
 8014612:	2001      	movs	r0, #1
 8014614:	f7fd fc72 	bl	8011efc <logging>
			handler_dev_version(c, hm);
 8014618:	4621      	mov	r1, r4
 801461a:	4628      	mov	r0, r5
 801461c:	f7fe fb98 	bl	8012d50 <handler_dev_version>
 8014620:	e6c9      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8014622:	ae24      	add	r6, sp, #144	@ 0x90
 8014624:	4925      	ldr	r1, [pc, #148]	@ (80146bc <dashboard+0x340>)
 8014626:	4630      	mov	r0, r6
 8014628:	f00f fdba 	bl	80241a0 <mg_str_s>
 801462c:	2300      	movs	r3, #0
 801462e:	9300      	str	r3, [sp, #0]
 8014630:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014634:	68e1      	ldr	r1, [r4, #12]
 8014636:	68a0      	ldr	r0, [r4, #8]
 8014638:	f00f ffd4 	bl	80245e4 <mg_match>
 801463c:	2800      	cmp	r0, #0
 801463e:	d03f      	beq.n	80146c0 <dashboard+0x344>
			handle_firmware_upload(c, hm);
 8014640:	4621      	mov	r1, r4
 8014642:	4628      	mov	r0, r5
 8014644:	f7ff fd50 	bl	80140e8 <handle_firmware_upload>
 8014648:	e6b5      	b.n	80143b6 <dashboard+0x3a>
 801464a:	bf00      	nop
 801464c:	08037660 	.word	0x08037660
 8014650:	08037668 	.word	0x08037668
 8014654:	08037680 	.word	0x08037680
 8014658:	0803768c 	.word	0x0803768c
 801465c:	08037670 	.word	0x08037670
 8014660:	08036a40 	.word	0x08036a40
 8014664:	080376a0 	.word	0x080376a0
 8014668:	080376ac 	.word	0x080376ac
 801466c:	080376c4 	.word	0x080376c4
 8014670:	080376d4 	.word	0x080376d4
 8014674:	080376f0 	.word	0x080376f0
 8014678:	08037700 	.word	0x08037700
 801467c:	08037718 	.word	0x08037718
 8014680:	0803772c 	.word	0x0803772c
 8014684:	08037748 	.word	0x08037748
 8014688:	08037758 	.word	0x08037758
 801468c:	08037774 	.word	0x08037774
 8014690:	08037788 	.word	0x08037788
 8014694:	080377a4 	.word	0x080377a4
 8014698:	080377b4 	.word	0x080377b4
 801469c:	080377d0 	.word	0x080377d0
 80146a0:	080377e4 	.word	0x080377e4
 80146a4:	08037804 	.word	0x08037804
 80146a8:	08037818 	.word	0x08037818
 80146ac:	08037834 	.word	0x08037834
 80146b0:	08037848 	.word	0x08037848
 80146b4:	08037868 	.word	0x08037868
 80146b8:	0803787c 	.word	0x0803787c
 80146bc:	0803789c 	.word	0x0803789c
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 80146c0:	ae26      	add	r6, sp, #152	@ 0x98
 80146c2:	4947      	ldr	r1, [pc, #284]	@ (80147e0 <dashboard+0x464>)
 80146c4:	4630      	mov	r0, r6
 80146c6:	f00f fd6b 	bl	80241a0 <mg_str_s>
 80146ca:	2300      	movs	r3, #0
 80146cc:	9300      	str	r3, [sp, #0]
 80146ce:	e896 000c 	ldmia.w	r6, {r2, r3}
 80146d2:	68e1      	ldr	r1, [r4, #12]
 80146d4:	68a0      	ldr	r0, [r4, #8]
 80146d6:	f00f ff85 	bl	80245e4 <mg_match>
 80146da:	b140      	cbz	r0, 80146ee <dashboard+0x372>
			logging(L_INFO, "Call API /api/firmware/md5");
 80146dc:	4941      	ldr	r1, [pc, #260]	@ (80147e4 <dashboard+0x468>)
 80146de:	2001      	movs	r0, #1
 80146e0:	f7fd fc0c 	bl	8011efc <logging>
			handle_firmware_md5(c, hm);
 80146e4:	4621      	mov	r1, r4
 80146e6:	4628      	mov	r0, r5
 80146e8:	f7ff fe04 	bl	80142f4 <handle_firmware_md5>
 80146ec:	e663      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/apply"), NULL)){
 80146ee:	ae28      	add	r6, sp, #160	@ 0xa0
 80146f0:	493d      	ldr	r1, [pc, #244]	@ (80147e8 <dashboard+0x46c>)
 80146f2:	4630      	mov	r0, r6
 80146f4:	f00f fd54 	bl	80241a0 <mg_str_s>
 80146f8:	2300      	movs	r3, #0
 80146fa:	9300      	str	r3, [sp, #0]
 80146fc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014700:	68e1      	ldr	r1, [r4, #12]
 8014702:	68a0      	ldr	r0, [r4, #8]
 8014704:	f00f ff6e 	bl	80245e4 <mg_match>
 8014708:	b140      	cbz	r0, 801471c <dashboard+0x3a0>
			logging(L_INFO, "Call API /api/firmware/apply");
 801470a:	4938      	ldr	r1, [pc, #224]	@ (80147ec <dashboard+0x470>)
 801470c:	2001      	movs	r0, #1
 801470e:	f7fd fbf5 	bl	8011efc <logging>
			handle_activete_and_reboot(c, hm);
 8014712:	4621      	mov	r1, r4
 8014714:	4628      	mov	r0, r5
 8014716:	f7ff fcab 	bl	8014070 <handle_activete_and_reboot>
 801471a:	e64c      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 801471c:	ae2a      	add	r6, sp, #168	@ 0xa8
 801471e:	4934      	ldr	r1, [pc, #208]	@ (80147f0 <dashboard+0x474>)
 8014720:	4630      	mov	r0, r6
 8014722:	f00f fd3d 	bl	80241a0 <mg_str_s>
 8014726:	2300      	movs	r3, #0
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801472e:	68e1      	ldr	r1, [r4, #12]
 8014730:	68a0      	ldr	r0, [r4, #8]
 8014732:	f00f ff57 	bl	80245e4 <mg_match>
 8014736:	b120      	cbz	r0, 8014742 <dashboard+0x3c6>
			handle_firmware_deactivate(c, hm);
 8014738:	4621      	mov	r1, r4
 801473a:	4628      	mov	r0, r5
 801473c:	f7fe fb3a 	bl	8012db4 <handle_firmware_deactivate>
 8014740:	e639      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8014742:	ae2c      	add	r6, sp, #176	@ 0xb0
 8014744:	492b      	ldr	r1, [pc, #172]	@ (80147f4 <dashboard+0x478>)
 8014746:	4630      	mov	r0, r6
 8014748:	f00f fd2a 	bl	80241a0 <mg_str_s>
 801474c:	2300      	movs	r3, #0
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014754:	68e1      	ldr	r1, [r4, #12]
 8014756:	68a0      	ldr	r0, [r4, #8]
 8014758:	f00f ff44 	bl	80245e4 <mg_match>
 801475c:	b120      	cbz	r0, 8014768 <dashboard+0x3ec>
			 handle_web_files_remove(c, hm);
 801475e:	4621      	mov	r1, r4
 8014760:	4628      	mov	r0, r5
 8014762:	f7fe fb63 	bl	8012e2c <handle_web_files_remove>
 8014766:	e626      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8014768:	ae2e      	add	r6, sp, #184	@ 0xb8
 801476a:	4923      	ldr	r1, [pc, #140]	@ (80147f8 <dashboard+0x47c>)
 801476c:	4630      	mov	r0, r6
 801476e:	f00f fd17 	bl	80241a0 <mg_str_s>
 8014772:	2300      	movs	r3, #0
 8014774:	9300      	str	r3, [sp, #0]
 8014776:	e896 000c 	ldmia.w	r6, {r2, r3}
 801477a:	68e1      	ldr	r1, [r4, #12]
 801477c:	68a0      	ldr	r0, [r4, #8]
 801477e:	f00f ff31 	bl	80245e4 <mg_match>
 8014782:	b140      	cbz	r0, 8014796 <dashboard+0x41a>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8014784:	4b1d      	ldr	r3, [pc, #116]	@ (80147fc <dashboard+0x480>)
 8014786:	9300      	str	r3, [sp, #0]
 8014788:	4b1d      	ldr	r3, [pc, #116]	@ (8014800 <dashboard+0x484>)
 801478a:	4a1e      	ldr	r2, [pc, #120]	@ (8014804 <dashboard+0x488>)
 801478c:	4621      	mov	r1, r4
 801478e:	4628      	mov	r0, r5
 8014790:	f012 f9ba 	bl	8026b08 <mg_http_upload>
 8014794:	e60f      	b.n	80143b6 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8014796:	ae30      	add	r6, sp, #192	@ 0xc0
 8014798:	491b      	ldr	r1, [pc, #108]	@ (8014808 <dashboard+0x48c>)
 801479a:	4630      	mov	r0, r6
 801479c:	f00f fd00 	bl	80241a0 <mg_str_s>
 80147a0:	2300      	movs	r3, #0
 80147a2:	9300      	str	r3, [sp, #0]
 80147a4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147a8:	68e1      	ldr	r1, [r4, #12]
 80147aa:	68a0      	ldr	r0, [r4, #8]
 80147ac:	f00f ff1a 	bl	80245e4 <mg_match>
 80147b0:	b120      	cbz	r0, 80147bc <dashboard+0x440>
			 handle_fs_mkdir(c, hm);
 80147b2:	4621      	mov	r1, r4
 80147b4:	4628      	mov	r0, r5
 80147b6:	f7ff fce3 	bl	8014180 <handle_fs_mkdir>
 80147ba:	e5fc      	b.n	80143b6 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 80147bc:	2300      	movs	r3, #0
 80147be:	9302      	str	r3, [sp, #8]
 80147c0:	9303      	str	r3, [sp, #12]
 80147c2:	9304      	str	r3, [sp, #16]
 80147c4:	9305      	str	r3, [sp, #20]
 80147c6:	9306      	str	r3, [sp, #24]
 80147c8:	9307      	str	r3, [sp, #28]
 80147ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014800 <dashboard+0x484>)
 80147cc:	9302      	str	r3, [sp, #8]
 80147ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014804 <dashboard+0x488>)
 80147d0:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 80147d2:	aa02      	add	r2, sp, #8
 80147d4:	4621      	mov	r1, r4
 80147d6:	4628      	mov	r0, r5
 80147d8:	f012 f8b0 	bl	802693c <mg_http_serve_dir>
}
 80147dc:	e5eb      	b.n	80143b6 <dashboard+0x3a>
 80147de:	bf00      	nop
 80147e0:	080378b4 	.word	0x080378b4
 80147e4:	080378c8 	.word	0x080378c8
 80147e8:	080378e4 	.word	0x080378e4
 80147ec:	080378f8 	.word	0x080378f8
 80147f0:	08037918 	.word	0x08037918
 80147f4:	08037934 	.word	0x08037934
 80147f8:	08037950 	.word	0x08037950
 80147fc:	0016e360 	.word	0x0016e360
 8014800:	08035e78 	.word	0x08035e78
 8014804:	200000a0 	.word	0x200000a0
 8014808:	0803796c 	.word	0x0803796c

0801480c <dash_hdl>:

void * dash_hdl (void){
 801480c:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 801480e:	220a      	movs	r2, #10
 8014810:	4902      	ldr	r1, [pc, #8]	@ (801481c <dash_hdl+0x10>)
 8014812:	4803      	ldr	r0, [pc, #12]	@ (8014820 <dash_hdl+0x14>)
 8014814:	f7ff fbd6 	bl	8013fc4 <load_users>

	return &dashboard;
}
 8014818:	4802      	ldr	r0, [pc, #8]	@ (8014824 <dash_hdl+0x18>)
 801481a:	bd08      	pop	{r3, pc}
 801481c:	200021b8 	.word	0x200021b8
 8014820:	08035ecc 	.word	0x08035ecc
 8014824:	0801437d 	.word	0x0801437d

08014828 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014828:	4b01      	ldr	r3, [pc, #4]	@ (8014830 <reg_parameter_handler+0x8>)
 801482a:	6018      	str	r0, [r3, #0]
}
 801482c:	4770      	bx	lr
 801482e:	bf00      	nop
 8014830:	20002854 	.word	0x20002854

08014834 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014834:	4b1a      	ldr	r3, [pc, #104]	@ (80148a0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	b103      	cbz	r3, 801483c <_ZL18mqtt_timer_handlerPv+0x8>
 801483a:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 801483c:	b530      	push	{r4, r5, lr}
 801483e:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 8014840:	4918      	ldr	r1, [pc, #96]	@ (80148a4 <_ZL18mqtt_timer_handlerPv+0x70>)
 8014842:	2001      	movs	r0, #1
 8014844:	f7fd fb5a 	bl	8011efc <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014848:	4c17      	ldr	r4, [pc, #92]	@ (80148a8 <_ZL18mqtt_timer_handlerPv+0x74>)
 801484a:	2240      	movs	r2, #64	@ 0x40
 801484c:	2100      	movs	r1, #0
 801484e:	4620      	mov	r0, r4
 8014850:	f018 f816 	bl	802c880 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014854:	ad02      	add	r5, sp, #8
 8014856:	4b15      	ldr	r3, [pc, #84]	@ (80148ac <_ZL18mqtt_timer_handlerPv+0x78>)
 8014858:	6819      	ldr	r1, [r3, #0]
 801485a:	4628      	mov	r0, r5
 801485c:	f00f fca0 	bl	80241a0 <mg_str_s>
 8014860:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014864:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014868:	4b11      	ldr	r3, [pc, #68]	@ (80148b0 <_ZL18mqtt_timer_handlerPv+0x7c>)
 801486a:	6819      	ldr	r1, [r3, #0]
 801486c:	4628      	mov	r0, r5
 801486e:	f00f fc97 	bl	80241a0 <mg_str_s>
 8014872:	f104 0308 	add.w	r3, r4, #8
 8014876:	e895 0003 	ldmia.w	r5, {r0, r1}
 801487a:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 801487e:	233c      	movs	r3, #60	@ 0x3c
 8014880:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 8014882:	2300      	movs	r3, #0
 8014884:	9300      	str	r3, [sp, #0]
 8014886:	4b0b      	ldr	r3, [pc, #44]	@ (80148b4 <_ZL18mqtt_timer_handlerPv+0x80>)
 8014888:	4622      	mov	r2, r4
 801488a:	490b      	ldr	r1, [pc, #44]	@ (80148b8 <_ZL18mqtt_timer_handlerPv+0x84>)
 801488c:	6809      	ldr	r1, [r1, #0]
 801488e:	480b      	ldr	r0, [pc, #44]	@ (80148bc <_ZL18mqtt_timer_handlerPv+0x88>)
 8014890:	6800      	ldr	r0, [r0, #0]
 8014892:	f014 f9f9 	bl	8028c88 <mg_mqtt_connect>
 8014896:	4b02      	ldr	r3, [pc, #8]	@ (80148a0 <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014898:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 801489a:	b005      	add	sp, #20
 801489c:	bd30      	pop	{r4, r5, pc}
 801489e:	bf00      	nop
 80148a0:	20002878 	.word	0x20002878
 80148a4:	08037988 	.word	0x08037988
 80148a8:	2000287c 	.word	0x2000287c
 80148ac:	200028d0 	.word	0x200028d0
 80148b0:	200028cc 	.word	0x200028cc
 80148b4:	08014e11 	.word	0x08014e11
 80148b8:	200028d4 	.word	0x200028d4
 80148bc:	200028c0 	.word	0x200028c0

080148c0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c4:	b085      	sub	sp, #20
 80148c6:	4681      	mov	r9, r0
 80148c8:	4688      	mov	r8, r1
 80148ca:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 80148cc:	4c2a      	ldr	r4, [pc, #168]	@ (8014978 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 80148ce:	f100 0308 	add.w	r3, r0, #8
 80148d2:	9300      	str	r3, [sp, #0]
 80148d4:	4b29      	ldr	r3, [pc, #164]	@ (801497c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 80148d6:	4a2a      	ldr	r2, [pc, #168]	@ (8014980 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 80148d8:	2128      	movs	r1, #40	@ 0x28
 80148da:	6820      	ldr	r0, [r4, #0]
 80148dc:	f00e fdd8 	bl	8023490 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 80148e0:	6824      	ldr	r4, [r4, #0]
 80148e2:	4620      	mov	r0, r4
 80148e4:	f7fb fcdc 	bl	80102a0 <strlen>
 80148e8:	4601      	mov	r1, r0
 80148ea:	4620      	mov	r0, r4
 80148ec:	f000 fbe0 	bl	80150b0 <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 80148f0:	2600      	movs	r6, #0
 80148f2:	e03b      	b.n	801496c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 80148f4:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 80148f8:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 80148fc:	791d      	ldrb	r5, [r3, #4]
 80148fe:	4f21      	ldr	r7, [pc, #132]	@ (8014984 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 8014900:	462b      	mov	r3, r5
 8014902:	4622      	mov	r2, r4
 8014904:	2180      	movs	r1, #128	@ 0x80
 8014906:	6838      	ldr	r0, [r7, #0]
 8014908:	f000 fbf0 	bl	80150ec <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 801490c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014990 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 8014910:	462b      	mov	r3, r5
 8014912:	4622      	mov	r2, r4
 8014914:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014918:	f8db 0000 	ldr.w	r0, [fp]
 801491c:	f000 fc96 	bl	801524c <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8014920:	4d19      	ldr	r5, [pc, #100]	@ (8014988 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 8014922:	ac02      	add	r4, sp, #8
 8014924:	6839      	ldr	r1, [r7, #0]
 8014926:	4620      	mov	r0, r4
 8014928:	f00f fc3a 	bl	80241a0 <mg_str_s>
 801492c:	f105 0318 	add.w	r3, r5, #24
 8014930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014934:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014938:	f8db 1000 	ldr.w	r1, [fp]
 801493c:	4620      	mov	r0, r4
 801493e:	f00f fc2f 	bl	80241a0 <mg_str_s>
 8014942:	f105 0320 	add.w	r3, r5, #32
 8014946:	e894 0003 	ldmia.w	r4, {r0, r1}
 801494a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 801494e:	2401      	movs	r4, #1
 8014950:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014954:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014958:	4629      	mov	r1, r5
 801495a:	4648      	mov	r0, r9
 801495c:	f012 fefa 	bl	8027754 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8014960:	683a      	ldr	r2, [r7, #0]
 8014962:	490a      	ldr	r1, [pc, #40]	@ (801498c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014964:	4620      	mov	r0, r4
 8014966:	f7fd fac9 	bl	8011efc <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 801496a:	4426      	add	r6, r4
 801496c:	4556      	cmp	r6, sl
 801496e:	d3c1      	bcc.n	80148f4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 8014970:	b005      	add	sp, #20
 8014972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014976:	bf00      	nop
 8014978:	20002874 	.word	0x20002874
 801497c:	08025f21 	.word	0x08025f21
 8014980:	08037014 	.word	0x08037014
 8014984:	200028c8 	.word	0x200028c8
 8014988:	2000287c 	.word	0x2000287c
 801498c:	080379a8 	.word	0x080379a8
 8014990:	200028c4 	.word	0x200028c4

08014994 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8014994:	b570      	push	{r4, r5, r6, lr}
 8014996:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 8014998:	2300      	movs	r3, #0
 801499a:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 801499c:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 801499e:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 80149a0:	b326      	cbz	r6, 80149ec <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 80149a2:	4604      	mov	r4, r0
 80149a4:	b315      	cbz	r5, 80149ec <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80149a6:	4b71      	ldr	r3, [pc, #452]	@ (8014b6c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2200      	movs	r2, #0
 80149ac:	2102      	movs	r1, #2
 80149ae:	a803      	add	r0, sp, #12
 80149b0:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80149b2:	9b03      	ldr	r3, [sp, #12]
 80149b4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80149b8:	0c1b      	lsrs	r3, r3, #16
 80149ba:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 80149be:	496c      	ldr	r1, [pc, #432]	@ (8014b70 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 80149c0:	4628      	mov	r0, r5
 80149c2:	f017 ffdd 	bl	802c980 <strstr>
    if (switch_position != NULL) {
 80149c6:	2800      	cmp	r0, #0
 80149c8:	f000 80ba 	beq.w	8014b40 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 80149cc:	aa01      	add	r2, sp, #4
 80149ce:	4969      	ldr	r1, [pc, #420]	@ (8014b74 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 80149d0:	f017 fbb4 	bl	802c13c <sscanf>
 80149d4:	2801      	cmp	r0, #1
 80149d6:	d018      	beq.n	8014a0a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80149d8:	4b67      	ldr	r3, [pc, #412]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f300 80a5 	bgt.w	8014b2c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 80149e2:	4966      	ldr	r1, [pc, #408]	@ (8014b7c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 80149e4:	2003      	movs	r0, #3
 80149e6:	f7fd fa89 	bl	8011efc <logging>
 80149ea:	e0b2      	b.n	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 80149ec:	4b62      	ldr	r3, [pc, #392]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f340 80ae 	ble.w	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 80149f6:	4b62      	ldr	r3, [pc, #392]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80149f8:	2292      	movs	r2, #146	@ 0x92
 80149fa:	4962      	ldr	r1, [pc, #392]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80149fc:	2001      	movs	r0, #1
 80149fe:	f011 fb43 	bl	8026088 <mg_log_prefix>
 8014a02:	4861      	ldr	r0, [pc, #388]	@ (8014b88 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8014a04:	f00f f9ee 	bl	8023de4 <mg_log>
    	return;
 8014a08:	e0a3      	b.n	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	dc18      	bgt.n	8014a44 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 8014a12:	462b      	mov	r3, r5
 8014a14:	9a01      	ldr	r2, [sp, #4]
 8014a16:	495d      	ldr	r1, [pc, #372]	@ (8014b8c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8014a18:	2001      	movs	r0, #1
 8014a1a:	f7fd fa6f 	bl	8011efc <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 8014a1e:	9d01      	ldr	r5, [sp, #4]
 8014a20:	1e6b      	subs	r3, r5, #1
 8014a22:	2b02      	cmp	r3, #2
 8014a24:	d81a      	bhi.n	8014a5c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8014a26:	68e4      	ldr	r4, [r4, #12]
 8014a28:	2c02      	cmp	r4, #2
 8014a2a:	d02e      	beq.n	8014a8a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014a2c:	2c03      	cmp	r4, #3
 8014a2e:	d04f      	beq.n	8014ad0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8014a30:	4b51      	ldr	r3, [pc, #324]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	dc6e      	bgt.n	8014b16 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8014a38:	4632      	mov	r2, r6
 8014a3a:	4955      	ldr	r1, [pc, #340]	@ (8014b90 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8014a3c:	2003      	movs	r0, #3
 8014a3e:	f7fd fa5d 	bl	8011efc <logging>
 8014a42:	e086      	b.n	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014a44:	4b4e      	ldr	r3, [pc, #312]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014a46:	229f      	movs	r2, #159	@ 0x9f
 8014a48:	494e      	ldr	r1, [pc, #312]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014a4a:	2002      	movs	r0, #2
 8014a4c:	f011 fb1c 	bl	8026088 <mg_log_prefix>
 8014a50:	462a      	mov	r2, r5
 8014a52:	9901      	ldr	r1, [sp, #4]
 8014a54:	484f      	ldr	r0, [pc, #316]	@ (8014b94 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 8014a56:	f00f f9c5 	bl	8023de4 <mg_log>
 8014a5a:	e7da      	b.n	8014a12 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014a5c:	4b46      	ldr	r3, [pc, #280]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	dc06      	bgt.n	8014a72 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8014a64:	9b01      	ldr	r3, [sp, #4]
 8014a66:	2203      	movs	r2, #3
 8014a68:	494b      	ldr	r1, [pc, #300]	@ (8014b98 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8014a6a:	4610      	mov	r0, r2
 8014a6c:	f7fd fa46 	bl	8011efc <logging>
    			return;
 8014a70:	e06f      	b.n	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014a72:	4b43      	ldr	r3, [pc, #268]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014a74:	22a4      	movs	r2, #164	@ 0xa4
 8014a76:	4943      	ldr	r1, [pc, #268]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014a78:	2001      	movs	r0, #1
 8014a7a:	f011 fb05 	bl	8026088 <mg_log_prefix>
 8014a7e:	9a01      	ldr	r2, [sp, #4]
 8014a80:	2103      	movs	r1, #3
 8014a82:	4845      	ldr	r0, [pc, #276]	@ (8014b98 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8014a84:	f00f f9ae 	bl	8023de4 <mg_log>
 8014a88:	e7ec      	b.n	8014a64 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8014a8a:	2202      	movs	r2, #2
 8014a8c:	4943      	ldr	r1, [pc, #268]	@ (8014b9c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 8014a8e:	4630      	mov	r0, r6
 8014a90:	f017 ff2b 	bl	802c8ea <strncmp>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d1c9      	bne.n	8014a2c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 8014a98:	f105 030f 	add.w	r3, r5, #15
 8014a9c:	446b      	add	r3, sp
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014aa4:	4b34      	ldr	r3, [pc, #208]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4293      	cmp	r3, r2
 8014aaa:	dc06      	bgt.n	8014aba <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014aac:	4b2f      	ldr	r3, [pc, #188]	@ (8014b6c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	2201      	movs	r2, #1
 8014ab2:	2102      	movs	r1, #2
 8014ab4:	a802      	add	r0, sp, #8
 8014ab6:	4798      	blx	r3
 8014ab8:	e04b      	b.n	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8014aba:	4b31      	ldr	r3, [pc, #196]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014abc:	22ae      	movs	r2, #174	@ 0xae
 8014abe:	4931      	ldr	r1, [pc, #196]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014ac0:	2002      	movs	r0, #2
 8014ac2:	f011 fae1 	bl	8026088 <mg_log_prefix>
 8014ac6:	9901      	ldr	r1, [sp, #4]
 8014ac8:	4835      	ldr	r0, [pc, #212]	@ (8014ba0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 8014aca:	f00f f98b 	bl	8023de4 <mg_log>
 8014ace:	e7ed      	b.n	8014aac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014ad0:	2203      	movs	r2, #3
 8014ad2:	4934      	ldr	r1, [pc, #208]	@ (8014ba4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f017 ff08 	bl	802c8ea <strncmp>
 8014ada:	2800      	cmp	r0, #0
 8014adc:	d1a8      	bne.n	8014a30 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 8014ade:	f105 030f 	add.w	r3, r5, #15
 8014ae2:	446b      	add	r3, sp
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014aea:	4b23      	ldr	r3, [pc, #140]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	dc06      	bgt.n	8014b00 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8014af2:	4b1e      	ldr	r3, [pc, #120]	@ (8014b6c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2201      	movs	r2, #1
 8014af8:	2102      	movs	r1, #2
 8014afa:	a802      	add	r0, sp, #8
 8014afc:	4798      	blx	r3
 8014afe:	e028      	b.n	8014b52 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014b00:	4b1f      	ldr	r3, [pc, #124]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014b02:	22b2      	movs	r2, #178	@ 0xb2
 8014b04:	491f      	ldr	r1, [pc, #124]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014b06:	2002      	movs	r0, #2
 8014b08:	f011 fabe 	bl	8026088 <mg_log_prefix>
 8014b0c:	9901      	ldr	r1, [sp, #4]
 8014b0e:	4826      	ldr	r0, [pc, #152]	@ (8014ba8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 8014b10:	f00f f968 	bl	8023de4 <mg_log>
 8014b14:	e7ed      	b.n	8014af2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8014b16:	4b1a      	ldr	r3, [pc, #104]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014b18:	22b6      	movs	r2, #182	@ 0xb6
 8014b1a:	491a      	ldr	r1, [pc, #104]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014b1c:	2001      	movs	r0, #1
 8014b1e:	f011 fab3 	bl	8026088 <mg_log_prefix>
 8014b22:	4631      	mov	r1, r6
 8014b24:	481a      	ldr	r0, [pc, #104]	@ (8014b90 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8014b26:	f00f f95d 	bl	8023de4 <mg_log>
 8014b2a:	e785      	b.n	8014a38 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014b2c:	4b14      	ldr	r3, [pc, #80]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014b2e:	22bb      	movs	r2, #187	@ 0xbb
 8014b30:	4914      	ldr	r1, [pc, #80]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014b32:	2001      	movs	r0, #1
 8014b34:	f011 faa8 	bl	8026088 <mg_log_prefix>
 8014b38:	481c      	ldr	r0, [pc, #112]	@ (8014bac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 8014b3a:	f00f f953 	bl	8023de4 <mg_log>
 8014b3e:	e750      	b.n	80149e2 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014b40:	4b0d      	ldr	r3, [pc, #52]	@ (8014b78 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	dc06      	bgt.n	8014b56 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8014b48:	462a      	mov	r2, r5
 8014b4a:	4919      	ldr	r1, [pc, #100]	@ (8014bb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014b4c:	2003      	movs	r0, #3
 8014b4e:	f7fd f9d5 	bl	8011efc <logging>
}
 8014b52:	b004      	add	sp, #16
 8014b54:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014b56:	4b0a      	ldr	r3, [pc, #40]	@ (8014b80 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014b58:	22bf      	movs	r2, #191	@ 0xbf
 8014b5a:	490a      	ldr	r1, [pc, #40]	@ (8014b84 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014b5c:	2001      	movs	r0, #1
 8014b5e:	f011 fa93 	bl	8026088 <mg_log_prefix>
 8014b62:	4629      	mov	r1, r5
 8014b64:	4812      	ldr	r0, [pc, #72]	@ (8014bb0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014b66:	f00f f93d 	bl	8023de4 <mg_log>
 8014b6a:	e7ed      	b.n	8014b48 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 8014b6c:	20002860 	.word	0x20002860
 8014b70:	08037a3c 	.word	0x08037a3c
 8014b74:	08037a44 	.word	0x08037a44
 8014b78:	2000012c 	.word	0x2000012c
 8014b7c:	08037b98 	.word	0x08037b98
 8014b80:	080379cc 	.word	0x080379cc
 8014b84:	080379ec 	.word	0x080379ec
 8014b88:	08037a18 	.word	0x08037a18
 8014b8c:	08037a7c 	.word	0x08037a7c
 8014b90:	08037b24 	.word	0x08037b24
 8014b94:	08037a50 	.word	0x08037a50
 8014b98:	08037aa4 	.word	0x08037aa4
 8014b9c:	08037af4 	.word	0x08037af4
 8014ba0:	08037af8 	.word	0x08037af8
 8014ba4:	08037b0c 	.word	0x08037b0c
 8014ba8:	08037b10 	.word	0x08037b10
 8014bac:	08037b60 	.word	0x08037b60
 8014bb0:	08037bd0 	.word	0x08037bd0

08014bb4 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014bb4:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014bb6:	fb01 f400 	mul.w	r4, r1, r0
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f005 fe2c 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	b118      	cbz	r0, 8014bcc <_ZL9my_callocjj+0x18>
 8014bc4:	4622      	mov	r2, r4
 8014bc6:	2100      	movs	r1, #0
 8014bc8:	f017 fe5a 	bl	802c880 <memset>
}
 8014bcc:	4628      	mov	r0, r5
 8014bce:	bd38      	pop	{r3, r4, r5, pc}

08014bd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8014bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bd4:	b087      	sub	sp, #28
 8014bd6:	4607      	mov	r7, r0
 8014bd8:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014bda:	4d58      	ldr	r5, [pc, #352]	@ (8014d3c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014bdc:	682b      	ldr	r3, [r5, #0]
 8014bde:	2200      	movs	r2, #0
 8014be0:	2101      	movs	r1, #1
 8014be2:	a804      	add	r0, sp, #16
 8014be4:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014be6:	682b      	ldr	r3, [r5, #0]
 8014be8:	2200      	movs	r2, #0
 8014bea:	2102      	movs	r1, #2
 8014bec:	f10d 0013 	add.w	r0, sp, #19
 8014bf0:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014bf2:	2203      	movs	r2, #3
 8014bf4:	4952      	ldr	r1, [pc, #328]	@ (8014d40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014bf6:	a804      	add	r0, sp, #16
 8014bf8:	f017 fdae 	bl	802c758 <memcmp>
 8014bfc:	b948      	cbnz	r0, 8014c12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014bfe:	2203      	movs	r2, #3
 8014c00:	4950      	ldr	r1, [pc, #320]	@ (8014d44 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 8014c02:	f10d 0013 	add.w	r0, sp, #19
 8014c06:	f017 fda7 	bl	802c758 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014c0a:	b910      	cbnz	r0, 8014c12 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014c0c:	2c00      	cmp	r4, #0
 8014c0e:	f000 8091 	beq.w	8014d34 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 8014c12:	4b4b      	ldr	r3, [pc, #300]	@ (8014d40 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014c14:	aa06      	add	r2, sp, #24
 8014c16:	e912 0003 	ldmdb	r2, {r0, r1}
 8014c1a:	6018      	str	r0, [r3, #0]
 8014c1c:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014c1e:	2101      	movs	r1, #1
 8014c20:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014c24:	f7ff ffc6 	bl	8014bb4 <_ZL9my_callocjj>
 8014c28:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014c2a:	2101      	movs	r1, #1
 8014c2c:	2080      	movs	r0, #128	@ 0x80
 8014c2e:	f7ff ffc1 	bl	8014bb4 <_ZL9my_callocjj>
 8014c32:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014c34:	2200      	movs	r2, #0
 8014c36:	e038      	b.n	8014caa <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014c38:	f102 0801 	add.w	r8, r2, #1
 8014c3c:	fa5f f888 	uxtb.w	r8, r8
 8014c40:	f102 0318 	add.w	r3, r2, #24
 8014c44:	eb0d 0203 	add.w	r2, sp, r3
 8014c48:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	4643      	mov	r3, r8
 8014c50:	2201      	movs	r2, #1
 8014c52:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014c56:	4630      	mov	r0, r6
 8014c58:	f000 fcec 	bl	8015634 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014c5c:	4643      	mov	r3, r8
 8014c5e:	2201      	movs	r2, #1
 8014c60:	2180      	movs	r1, #128	@ 0x80
 8014c62:	4628      	mov	r0, r5
 8014c64:	f000 fd26 	bl	80156b4 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014c68:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014d48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014c6c:	ac02      	add	r4, sp, #8
 8014c6e:	4629      	mov	r1, r5
 8014c70:	4620      	mov	r0, r4
 8014c72:	f00f fa95 	bl	80241a0 <mg_str_s>
 8014c76:	f109 0318 	add.w	r3, r9, #24
 8014c7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c7e:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014c82:	4631      	mov	r1, r6
 8014c84:	4620      	mov	r0, r4
 8014c86:	f00f fa8b 	bl	80241a0 <mg_str_s>
 8014c8a:	f109 0320 	add.w	r3, r9, #32
 8014c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014c92:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014c96:	2300      	movs	r3, #0
 8014c98:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014c9c:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014ca0:	4649      	mov	r1, r9
 8014ca2:	4638      	mov	r0, r7
 8014ca4:	f012 fd56 	bl	8027754 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8014ca8:	4642      	mov	r2, r8
 8014caa:	2a02      	cmp	r2, #2
 8014cac:	d9c4      	bls.n	8014c38 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014cae:	2200      	movs	r2, #0
 8014cb0:	e038      	b.n	8014d24 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8014cb2:	f102 0801 	add.w	r8, r2, #1
 8014cb6:	fa5f f888 	uxtb.w	r8, r8
 8014cba:	f102 0318 	add.w	r3, r2, #24
 8014cbe:	eb0d 0203 	add.w	r2, sp, r3
 8014cc2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	4643      	mov	r3, r8
 8014cca:	2202      	movs	r2, #2
 8014ccc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	f000 fcaf 	bl	8015634 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014cd6:	4643      	mov	r3, r8
 8014cd8:	2202      	movs	r2, #2
 8014cda:	2180      	movs	r1, #128	@ 0x80
 8014cdc:	4628      	mov	r0, r5
 8014cde:	f000 fce9 	bl	80156b4 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014ce2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014d48 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014ce6:	ac02      	add	r4, sp, #8
 8014ce8:	4629      	mov	r1, r5
 8014cea:	4620      	mov	r0, r4
 8014cec:	f00f fa58 	bl	80241a0 <mg_str_s>
 8014cf0:	f109 0318 	add.w	r3, r9, #24
 8014cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014cf8:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014cfc:	4631      	mov	r1, r6
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f00f fa4e 	bl	80241a0 <mg_str_s>
 8014d04:	f109 0320 	add.w	r3, r9, #32
 8014d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d0c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8014d10:	2300      	movs	r3, #0
 8014d12:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014d16:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014d1a:	4649      	mov	r1, r9
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f012 fd19 	bl	8027754 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8014d22:	4642      	mov	r2, r8
 8014d24:	2a02      	cmp	r2, #2
 8014d26:	d9c4      	bls.n	8014cb2 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014d28:	4630      	mov	r0, r6
 8014d2a:	f005 fdf7 	bl	801a91c <vPortFree>
		free(topik);
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f005 fdf4 	bl	801a91c <vPortFree>
}
 8014d34:	b007      	add	sp, #28
 8014d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d3a:	bf00      	nop
 8014d3c:	20002860 	.word	0x20002860
 8014d40:	20002858 	.word	0x20002858
 8014d44:	2000285b 	.word	0x2000285b
 8014d48:	2000287c 	.word	0x2000287c

08014d4c <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014d4c:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 8014d4e:	4b05      	ldr	r3, [pc, #20]	@ (8014d64 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 8014d50:	6818      	ldr	r0, [r3, #0]
 8014d52:	b110      	cbz	r0, 8014d5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014d54:	4b04      	ldr	r3, [pc, #16]	@ (8014d68 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	b903      	cbnz	r3, 8014d5c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014d5a:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	f7ff ff37 	bl	8014bd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014d62:	e7fa      	b.n	8014d5a <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014d64:	20002878 	.word	0x20002878
 8014d68:	20002864 	.word	0x20002864

08014d6c <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014d6c:	b508      	push	{r3, lr}
	if(is_registered){
 8014d6e:	4b05      	ldr	r3, [pc, #20]	@ (8014d84 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	b903      	cbnz	r3, 8014d76 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 8014d74:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 8014d76:	2101      	movs	r1, #1
 8014d78:	4b03      	ldr	r3, [pc, #12]	@ (8014d88 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 8014d7a:	6818      	ldr	r0, [r3, #0]
 8014d7c:	f7ff ff28 	bl	8014bd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8014d80:	e7f8      	b.n	8014d74 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 8014d82:	bf00      	nop
 8014d84:	20002864 	.word	0x20002864
 8014d88:	20002878 	.word	0x20002878

08014d8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8014d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d90:	b083      	sub	sp, #12
 8014d92:	4681      	mov	r9, r0
 8014d94:	460d      	mov	r5, r1
 8014d96:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 8014d98:	2400      	movs	r4, #0
 8014d9a:	e000      	b.n	8014d9e <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 8014d9c:	3401      	adds	r4, #1
 8014d9e:	42b4      	cmp	r4, r6
 8014da0:	d22e      	bcs.n	8014e00 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8014da2:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8014da6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8014daa:	2b02      	cmp	r3, #2
 8014dac:	d1f6      	bne.n	8014d9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014dae:	2101      	movs	r1, #1
 8014db0:	2080      	movs	r0, #128	@ 0x80
 8014db2:	f7ff feff 	bl	8014bb4 <_ZL9my_callocjj>
 8014db6:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 8014db8:	f898 3004 	ldrb.w	r3, [r8, #4]
 8014dbc:	2202      	movs	r2, #2
 8014dbe:	2180      	movs	r1, #128	@ 0x80
 8014dc0:	f000 fc60 	bl	8015684 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 8014dc4:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8014e0c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 8014dc8:	f04f 0b01 	mov.w	fp, #1
 8014dcc:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 8014dd0:	46ea      	mov	sl, sp
 8014dd2:	4639      	mov	r1, r7
 8014dd4:	4650      	mov	r0, sl
 8014dd6:	f00f f9e3 	bl	80241a0 <mg_str_s>
 8014dda:	f108 0318 	add.w	r3, r8, #24
 8014dde:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014de2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014de6:	4641      	mov	r1, r8
 8014de8:	4648      	mov	r0, r9
 8014dea:	f012 fc65 	bl	80276b8 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 8014dee:	463a      	mov	r2, r7
 8014df0:	4905      	ldr	r1, [pc, #20]	@ (8014e08 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 8014df2:	4658      	mov	r0, fp
 8014df4:	f7fd f882 	bl	8011efc <logging>
			free(topik);
 8014df8:	4638      	mov	r0, r7
 8014dfa:	f005 fd8f 	bl	801a91c <vPortFree>
 8014dfe:	e7cd      	b.n	8014d9c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 8014e00:	b003      	add	sp, #12
 8014e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e06:	bf00      	nop
 8014e08:	08037c00 	.word	0x08037c00
 8014e0c:	2000287c 	.word	0x2000287c

08014e10 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 8014e10:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 8014e12:	2910      	cmp	r1, #16
 8014e14:	d031      	beq.n	8014e7a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 8014e16:	4605      	mov	r5, r0
 8014e18:	2911      	cmp	r1, #17
 8014e1a:	d002      	beq.n	8014e22 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8014e1c:	2909      	cmp	r1, #9
 8014e1e:	d03a      	beq.n	8014e96 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 8014e20:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 8014e22:	4b22      	ldr	r3, [pc, #136]	@ (8014eac <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	2b02      	cmp	r3, #2
 8014e28:	dc1d      	bgt.n	8014e66 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 8014e2a:	4921      	ldr	r1, [pc, #132]	@ (8014eb0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8014e2c:	2001      	movs	r0, #1
 8014e2e:	f7fd f865 	bl	8011efc <logging>
		mqtt_conn = conn;
 8014e32:	4b20      	ldr	r3, [pc, #128]	@ (8014eb4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014e34:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 8014e36:	4b20      	ldr	r3, [pc, #128]	@ (8014eb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014e38:	781b      	ldrb	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d1f0      	bne.n	8014e20 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014e3e:	4e1f      	ldr	r6, [pc, #124]	@ (8014ebc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 8014e40:	2206      	movs	r2, #6
 8014e42:	4631      	mov	r1, r6
 8014e44:	4628      	mov	r0, r5
 8014e46:	f7ff fd3b 	bl	80148c0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 8014e4a:	4c1a      	ldr	r4, [pc, #104]	@ (8014eb4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014e4c:	2101      	movs	r1, #1
 8014e4e:	6820      	ldr	r0, [r4, #0]
 8014e50:	f7ff febe 	bl	8014bd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014e54:	2206      	movs	r2, #6
 8014e56:	4631      	mov	r1, r6
 8014e58:	6820      	ldr	r0, [r4, #0]
 8014e5a:	f7ff ff97 	bl	8014d8c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8014e5e:	4b16      	ldr	r3, [pc, #88]	@ (8014eb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014e60:	2201      	movs	r2, #1
 8014e62:	701a      	strb	r2, [r3, #0]
 8014e64:	e7dc      	b.n	8014e20 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8014e66:	4b16      	ldr	r3, [pc, #88]	@ (8014ec0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8014e68:	22cd      	movs	r2, #205	@ 0xcd
 8014e6a:	4916      	ldr	r1, [pc, #88]	@ (8014ec4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8014e6c:	2003      	movs	r0, #3
 8014e6e:	f011 f90b 	bl	8026088 <mg_log_prefix>
 8014e72:	4815      	ldr	r0, [pc, #84]	@ (8014ec8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 8014e74:	f00e ffb6 	bl	8023de4 <mg_log>
 8014e78:	e7d7      	b.n	8014e2a <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 8014e7a:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 8014e7c:	4913      	ldr	r1, [pc, #76]	@ (8014ecc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 8014e7e:	2001      	movs	r0, #1
 8014e80:	f7fd f83c 	bl	8011efc <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 8014e84:	4620      	mov	r0, r4
 8014e86:	f7ff fd85 	bl	8014994 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	4b09      	ldr	r3, [pc, #36]	@ (8014eb4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014e8e:	6818      	ldr	r0, [r3, #0]
 8014e90:	f7ff fe9e 	bl	8014bd0 <_ZL19mqtt_send_io_statusP13mg_connectionb>
 8014e94:	e7c4      	b.n	8014e20 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 8014e96:	490e      	ldr	r1, [pc, #56]	@ (8014ed0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 8014e98:	2001      	movs	r0, #1
 8014e9a:	f7fd f82f 	bl	8011efc <logging>
		mqtt_conn     = NULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	4a04      	ldr	r2, [pc, #16]	@ (8014eb4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014ea2:	6013      	str	r3, [r2, #0]
		is_registered = false;
 8014ea4:	4a04      	ldr	r2, [pc, #16]	@ (8014eb8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014ea6:	7013      	strb	r3, [r2, #0]
}
 8014ea8:	e7ba      	b.n	8014e20 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 8014eaa:	bf00      	nop
 8014eac:	2000012c 	.word	0x2000012c
 8014eb0:	08037c48 	.word	0x08037c48
 8014eb4:	20002878 	.word	0x20002878
 8014eb8:	20002864 	.word	0x20002864
 8014ebc:	200000c8 	.word	0x200000c8
 8014ec0:	08037c1c 	.word	0x08037c1c
 8014ec4:	080379ec 	.word	0x080379ec
 8014ec8:	08037c30 	.word	0x08037c30
 8014ecc:	08037c60 	.word	0x08037c60
 8014ed0:	08037c84 	.word	0x08037c84

08014ed4 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8014ed4:	4b01      	ldr	r3, [pc, #4]	@ (8014edc <get_mqtt_connection+0x8>)
 8014ed6:	6818      	ldr	r0, [r3, #0]
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop
 8014edc:	20002878 	.word	0x20002878

08014ee0 <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 8014ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ee4:	b086      	sub	sp, #24
 8014ee6:	4606      	mov	r6, r0
 8014ee8:	460c      	mov	r4, r1
 8014eea:	4691      	mov	r9, r2
 8014eec:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 8014eee:	2101      	movs	r1, #1
 8014ef0:	2080      	movs	r0, #128	@ 0x80
 8014ef2:	f7ff fe5f 	bl	8014bb4 <_ZL9my_callocjj>
 8014ef6:	f8df a148 	ldr.w	sl, [pc, #328]	@ 8015040 <mqtt_init+0x160>
 8014efa:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 8014efe:	2101      	movs	r1, #1
 8014f00:	2021      	movs	r0, #33	@ 0x21
 8014f02:	f7ff fe57 	bl	8014bb4 <_ZL9my_callocjj>
 8014f06:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8015044 <mqtt_init+0x164>
 8014f0a:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 8014f0e:	2101      	movs	r1, #1
 8014f10:	2021      	movs	r0, #33	@ 0x21
 8014f12:	f7ff fe4f 	bl	8014bb4 <_ZL9my_callocjj>
 8014f16:	4f3b      	ldr	r7, [pc, #236]	@ (8015004 <mqtt_init+0x124>)
 8014f18:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014f1a:	2101      	movs	r1, #1
 8014f1c:	2080      	movs	r0, #128	@ 0x80
 8014f1e:	f7ff fe49 	bl	8014bb4 <_ZL9my_callocjj>
 8014f22:	4b39      	ldr	r3, [pc, #228]	@ (8015008 <mqtt_init+0x128>)
 8014f24:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014f26:	2101      	movs	r1, #1
 8014f28:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014f2c:	f7ff fe42 	bl	8014bb4 <_ZL9my_callocjj>
 8014f30:	4b36      	ldr	r3, [pc, #216]	@ (801500c <mqtt_init+0x12c>)
 8014f32:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8014f34:	2101      	movs	r1, #1
 8014f36:	2028      	movs	r0, #40	@ 0x28
 8014f38:	f7ff fe3c 	bl	8014bb4 <_ZL9my_callocjj>
 8014f3c:	4b34      	ldr	r3, [pc, #208]	@ (8015010 <mqtt_init+0x130>)
 8014f3e:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 8014f40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014f42:	4b34      	ldr	r3, [pc, #208]	@ (8015014 <mqtt_init+0x134>)
 8014f44:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8014f46:	f8da a000 	ldr.w	sl, [sl]
 8014f4a:	4649      	mov	r1, r9
 8014f4c:	4650      	mov	r0, sl
 8014f4e:	f018 fea1 	bl	802dc94 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8014f52:	f8d8 9000 	ldr.w	r9, [r8]
 8014f56:	4629      	mov	r1, r5
 8014f58:	4648      	mov	r0, r9
 8014f5a:	f018 fe9b 	bl	802dc94 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 8014f5e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014f60:	6838      	ldr	r0, [r7, #0]
 8014f62:	f018 fe97 	bl	802dc94 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8014f66:	464b      	mov	r3, r9
 8014f68:	4652      	mov	r2, sl
 8014f6a:	492b      	ldr	r1, [pc, #172]	@ (8015018 <mqtt_init+0x138>)
 8014f6c:	2001      	movs	r0, #1
 8014f6e:	f7fc ffc5 	bl	8011efc <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 8014f72:	4d2a      	ldr	r5, [pc, #168]	@ (801501c <mqtt_init+0x13c>)
 8014f74:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8014f76:	4b2a      	ldr	r3, [pc, #168]	@ (8015020 <mqtt_init+0x140>)
 8014f78:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8014f7a:	2106      	movs	r1, #6
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f000 f871 	bl	8015064 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8014f82:	4e28      	ldr	r6, [pc, #160]	@ (8015024 <mqtt_init+0x144>)
 8014f84:	ac04      	add	r4, sp, #16
 8014f86:	f8d8 1000 	ldr.w	r1, [r8]
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f00f f908 	bl	80241a0 <mg_str_s>
 8014f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014f94:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 8014f98:	6839      	ldr	r1, [r7, #0]
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	f00f f900 	bl	80241a0 <mg_str_s>
 8014fa0:	f106 0308 	add.w	r3, r6, #8
 8014fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014fa8:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 8014fac:	233c      	movs	r3, #60	@ 0x3c
 8014fae:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8014fb0:	2400      	movs	r4, #0
 8014fb2:	9402      	str	r4, [sp, #8]
 8014fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8015028 <mqtt_init+0x148>)
 8014fb6:	9301      	str	r3, [sp, #4]
 8014fb8:	2303      	movs	r3, #3
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	6828      	ldr	r0, [r5, #0]
 8014fc4:	f010 face 	bl	8025564 <mg_timer_add>
 8014fc8:	4b18      	ldr	r3, [pc, #96]	@ (801502c <mqtt_init+0x14c>)
 8014fca:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 8014fcc:	9402      	str	r4, [sp, #8]
 8014fce:	4b18      	ldr	r3, [pc, #96]	@ (8015030 <mqtt_init+0x150>)
 8014fd0:	9301      	str	r3, [sp, #4]
 8014fd2:	2601      	movs	r6, #1
 8014fd4:	9600      	str	r6, [sp, #0]
 8014fd6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8014fda:	2300      	movs	r3, #0
 8014fdc:	6828      	ldr	r0, [r5, #0]
 8014fde:	f010 fac1 	bl	8025564 <mg_timer_add>
 8014fe2:	4b14      	ldr	r3, [pc, #80]	@ (8015034 <mqtt_init+0x154>)
 8014fe4:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8014fe6:	9402      	str	r4, [sp, #8]
 8014fe8:	4b13      	ldr	r3, [pc, #76]	@ (8015038 <mqtt_init+0x158>)
 8014fea:	9301      	str	r3, [sp, #4]
 8014fec:	9600      	str	r6, [sp, #0]
 8014fee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	6828      	ldr	r0, [r5, #0]
 8014ff6:	f010 fab5 	bl	8025564 <mg_timer_add>
 8014ffa:	4b10      	ldr	r3, [pc, #64]	@ (801503c <mqtt_init+0x15c>)
 8014ffc:	6018      	str	r0, [r3, #0]

}
 8014ffe:	b006      	add	sp, #24
 8015000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015004:	200028cc 	.word	0x200028cc
 8015008:	200028c8 	.word	0x200028c8
 801500c:	200028c4 	.word	0x200028c4
 8015010:	20002874 	.word	0x20002874
 8015014:	20002860 	.word	0x20002860
 8015018:	08037c9c 	.word	0x08037c9c
 801501c:	200028c0 	.word	0x200028c0
 8015020:	200028bc 	.word	0x200028bc
 8015024:	2000287c 	.word	0x2000287c
 8015028:	08014835 	.word	0x08014835
 801502c:	20002870 	.word	0x20002870
 8015030:	08014d6d 	.word	0x08014d6d
 8015034:	2000286c 	.word	0x2000286c
 8015038:	08014d4d 	.word	0x08014d4d
 801503c:	20002868 	.word	0x20002868
 8015040:	200028d4 	.word	0x200028d4
 8015044:	200028d0 	.word	0x200028d0

08015048 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015048:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801504a:	fb01 f400 	mul.w	r4, r1, r0
 801504e:	4620      	mov	r0, r4
 8015050:	f005 fbe2 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015054:	4605      	mov	r5, r0
 8015056:	b118      	cbz	r0, 8015060 <_ZL9my_callocjj+0x18>
 8015058:	4622      	mov	r2, r4
 801505a:	2100      	movs	r1, #0
 801505c:	f017 fc10 	bl	802c880 <memset>
}
 8015060:	4628      	mov	r0, r5
 8015062:	bd38      	pop	{r3, r4, r5, pc}

08015064 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8015064:	b570      	push	{r4, r5, r6, lr}
 8015066:	4606      	mov	r6, r0
 8015068:	460d      	mov	r5, r1

	if ( unical_id){
 801506a:	4b0f      	ldr	r3, [pc, #60]	@ (80150a8 <set_device_id+0x44>)
 801506c:	6818      	ldr	r0, [r3, #0]
 801506e:	b108      	cbz	r0, 8015074 <set_device_id+0x10>
		free(unical_id);
 8015070:	f005 fc54 	bl	801a91c <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015074:	0068      	lsls	r0, r5, #1
 8015076:	2101      	movs	r1, #1
 8015078:	4408      	add	r0, r1
 801507a:	f7ff ffe5 	bl	8015048 <_ZL9my_callocjj>
 801507e:	4b0a      	ldr	r3, [pc, #40]	@ (80150a8 <set_device_id+0x44>)
 8015080:	6018      	str	r0, [r3, #0]


	if (unical_id){
 8015082:	b108      	cbz	r0, 8015088 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 8015084:	2400      	movs	r4, #0
 8015086:	e00b      	b.n	80150a0 <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8015088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801508c:	e00b      	b.n	80150a6 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 801508e:	4b06      	ldr	r3, [pc, #24]	@ (80150a8 <set_device_id+0x44>)
 8015090:	6818      	ldr	r0, [r3, #0]
 8015092:	5d32      	ldrb	r2, [r6, r4]
 8015094:	4905      	ldr	r1, [pc, #20]	@ (80150ac <set_device_id+0x48>)
 8015096:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801509a:	f017 f82f 	bl	802c0fc <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 801509e:	3401      	adds	r4, #1
 80150a0:	42ac      	cmp	r4, r5
 80150a2:	d3f4      	bcc.n	801508e <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 80150a4:	2000      	movs	r0, #0
}
 80150a6:	bd70      	pop	{r4, r5, r6, pc}
 80150a8:	200028dc 	.word	0x200028dc
 80150ac:	08037cc8 	.word	0x08037cc8

080150b0 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80150b0:	b538      	push	{r3, r4, r5, lr}
 80150b2:	4605      	mov	r5, r0
 80150b4:	460c      	mov	r4, r1

	if(dev_conf_ip){
 80150b6:	4b0c      	ldr	r3, [pc, #48]	@ (80150e8 <set_device_conf_ip+0x38>)
 80150b8:	6818      	ldr	r0, [r3, #0]
 80150ba:	b108      	cbz	r0, 80150c0 <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 80150bc:	f005 fc2e 	bl	801a91c <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 80150c0:	2101      	movs	r1, #1
 80150c2:	1860      	adds	r0, r4, r1
 80150c4:	f7ff ffc0 	bl	8015048 <_ZL9my_callocjj>
 80150c8:	4b07      	ldr	r3, [pc, #28]	@ (80150e8 <set_device_conf_ip+0x38>)
 80150ca:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 80150cc:	b140      	cbz	r0, 80150e0 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 80150ce:	4622      	mov	r2, r4
 80150d0:	4629      	mov	r1, r5
 80150d2:	f017 fc1c 	bl	802c90e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 80150d6:	4b04      	ldr	r3, [pc, #16]	@ (80150e8 <set_device_conf_ip+0x38>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2000      	movs	r0, #0
 80150dc:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 80150de:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80150e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150e4:	e7fb      	b.n	80150de <set_device_conf_ip+0x2e>
 80150e6:	bf00      	nop
 80150e8:	200028d8 	.word	0x200028d8

080150ec <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 80150ec:	b500      	push	{lr}
 80150ee:	b087      	sub	sp, #28

	strcpy(buff, "");
 80150f0:	f04f 0c00 	mov.w	ip, #0
 80150f4:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 80150f8:	3a01      	subs	r2, #1
 80150fa:	2a07      	cmp	r2, #7
 80150fc:	f200 8087 	bhi.w	801520e <get_config_topik_string+0x122>
 8015100:	e8df f002 	tbb	[pc, r2]
 8015104:	45251604 	.word	0x45251604
 8015108:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 801510c:	9304      	str	r3, [sp, #16]
 801510e:	4b41      	ldr	r3, [pc, #260]	@ (8015214 <get_config_topik_string+0x128>)
 8015110:	9303      	str	r3, [sp, #12]
 8015112:	4b41      	ldr	r3, [pc, #260]	@ (8015218 <get_config_topik_string+0x12c>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	9302      	str	r3, [sp, #8]
 8015118:	4b40      	ldr	r3, [pc, #256]	@ (801521c <get_config_topik_string+0x130>)
 801511a:	9301      	str	r3, [sp, #4]
 801511c:	4b40      	ldr	r3, [pc, #256]	@ (8015220 <get_config_topik_string+0x134>)
 801511e:	9300      	str	r3, [sp, #0]
 8015120:	4b40      	ldr	r3, [pc, #256]	@ (8015224 <get_config_topik_string+0x138>)
 8015122:	4a41      	ldr	r2, [pc, #260]	@ (8015228 <get_config_topik_string+0x13c>)
 8015124:	f016 fe82 	bl	802be2c <snprintf>
			return -1;
			break;
	}


	return 0;
 8015128:	2000      	movs	r0, #0
}
 801512a:	b007      	add	sp, #28
 801512c:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8015130:	9304      	str	r3, [sp, #16]
 8015132:	4b3e      	ldr	r3, [pc, #248]	@ (801522c <get_config_topik_string+0x140>)
 8015134:	9303      	str	r3, [sp, #12]
 8015136:	4a38      	ldr	r2, [pc, #224]	@ (8015218 <get_config_topik_string+0x12c>)
 8015138:	6812      	ldr	r2, [r2, #0]
 801513a:	9202      	str	r2, [sp, #8]
 801513c:	4a37      	ldr	r2, [pc, #220]	@ (801521c <get_config_topik_string+0x130>)
 801513e:	9201      	str	r2, [sp, #4]
 8015140:	9300      	str	r3, [sp, #0]
 8015142:	4b38      	ldr	r3, [pc, #224]	@ (8015224 <get_config_topik_string+0x138>)
 8015144:	4a38      	ldr	r2, [pc, #224]	@ (8015228 <get_config_topik_string+0x13c>)
 8015146:	f016 fe71 	bl	802be2c <snprintf>
	return 0;
 801514a:	2000      	movs	r0, #0
			break;
 801514c:	e7ed      	b.n	801512a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 801514e:	9304      	str	r3, [sp, #16]
 8015150:	4b37      	ldr	r3, [pc, #220]	@ (8015230 <get_config_topik_string+0x144>)
 8015152:	9303      	str	r3, [sp, #12]
 8015154:	4b30      	ldr	r3, [pc, #192]	@ (8015218 <get_config_topik_string+0x12c>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	9302      	str	r3, [sp, #8]
 801515a:	4b30      	ldr	r3, [pc, #192]	@ (801521c <get_config_topik_string+0x130>)
 801515c:	9301      	str	r3, [sp, #4]
 801515e:	4b35      	ldr	r3, [pc, #212]	@ (8015234 <get_config_topik_string+0x148>)
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	4b30      	ldr	r3, [pc, #192]	@ (8015224 <get_config_topik_string+0x138>)
 8015164:	4a30      	ldr	r2, [pc, #192]	@ (8015228 <get_config_topik_string+0x13c>)
 8015166:	f016 fe61 	bl	802be2c <snprintf>
	return 0;
 801516a:	2000      	movs	r0, #0
			break;
 801516c:	e7dd      	b.n	801512a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 801516e:	9304      	str	r3, [sp, #16]
 8015170:	4b31      	ldr	r3, [pc, #196]	@ (8015238 <get_config_topik_string+0x14c>)
 8015172:	9303      	str	r3, [sp, #12]
 8015174:	4b28      	ldr	r3, [pc, #160]	@ (8015218 <get_config_topik_string+0x12c>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	9302      	str	r3, [sp, #8]
 801517a:	4b28      	ldr	r3, [pc, #160]	@ (801521c <get_config_topik_string+0x130>)
 801517c:	9301      	str	r3, [sp, #4]
 801517e:	4b2d      	ldr	r3, [pc, #180]	@ (8015234 <get_config_topik_string+0x148>)
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	4b28      	ldr	r3, [pc, #160]	@ (8015224 <get_config_topik_string+0x138>)
 8015184:	4a28      	ldr	r2, [pc, #160]	@ (8015228 <get_config_topik_string+0x13c>)
 8015186:	f016 fe51 	bl	802be2c <snprintf>
	return 0;
 801518a:	2000      	movs	r0, #0
			break;
 801518c:	e7cd      	b.n	801512a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 801518e:	9304      	str	r3, [sp, #16]
 8015190:	4b2a      	ldr	r3, [pc, #168]	@ (801523c <get_config_topik_string+0x150>)
 8015192:	9303      	str	r3, [sp, #12]
 8015194:	4b20      	ldr	r3, [pc, #128]	@ (8015218 <get_config_topik_string+0x12c>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	9302      	str	r3, [sp, #8]
 801519a:	4b20      	ldr	r3, [pc, #128]	@ (801521c <get_config_topik_string+0x130>)
 801519c:	9301      	str	r3, [sp, #4]
 801519e:	4b25      	ldr	r3, [pc, #148]	@ (8015234 <get_config_topik_string+0x148>)
 80151a0:	9300      	str	r3, [sp, #0]
 80151a2:	4b20      	ldr	r3, [pc, #128]	@ (8015224 <get_config_topik_string+0x138>)
 80151a4:	4a20      	ldr	r2, [pc, #128]	@ (8015228 <get_config_topik_string+0x13c>)
 80151a6:	f016 fe41 	bl	802be2c <snprintf>
	return 0;
 80151aa:	2000      	movs	r0, #0
			break;
 80151ac:	e7bd      	b.n	801512a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 80151ae:	9304      	str	r3, [sp, #16]
 80151b0:	4b23      	ldr	r3, [pc, #140]	@ (8015240 <get_config_topik_string+0x154>)
 80151b2:	9303      	str	r3, [sp, #12]
 80151b4:	4b18      	ldr	r3, [pc, #96]	@ (8015218 <get_config_topik_string+0x12c>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	9302      	str	r3, [sp, #8]
 80151ba:	4b18      	ldr	r3, [pc, #96]	@ (801521c <get_config_topik_string+0x130>)
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	4b1d      	ldr	r3, [pc, #116]	@ (8015234 <get_config_topik_string+0x148>)
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	4b18      	ldr	r3, [pc, #96]	@ (8015224 <get_config_topik_string+0x138>)
 80151c4:	4a18      	ldr	r2, [pc, #96]	@ (8015228 <get_config_topik_string+0x13c>)
 80151c6:	f016 fe31 	bl	802be2c <snprintf>
	return 0;
 80151ca:	2000      	movs	r0, #0
			break;
 80151cc:	e7ad      	b.n	801512a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 80151ce:	9304      	str	r3, [sp, #16]
 80151d0:	4b1c      	ldr	r3, [pc, #112]	@ (8015244 <get_config_topik_string+0x158>)
 80151d2:	9303      	str	r3, [sp, #12]
 80151d4:	4b10      	ldr	r3, [pc, #64]	@ (8015218 <get_config_topik_string+0x12c>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	9302      	str	r3, [sp, #8]
 80151da:	4b10      	ldr	r3, [pc, #64]	@ (801521c <get_config_topik_string+0x130>)
 80151dc:	9301      	str	r3, [sp, #4]
 80151de:	4b15      	ldr	r3, [pc, #84]	@ (8015234 <get_config_topik_string+0x148>)
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	4b10      	ldr	r3, [pc, #64]	@ (8015224 <get_config_topik_string+0x138>)
 80151e4:	4a10      	ldr	r2, [pc, #64]	@ (8015228 <get_config_topik_string+0x13c>)
 80151e6:	f016 fe21 	bl	802be2c <snprintf>
	return 0;
 80151ea:	2000      	movs	r0, #0
			break;
 80151ec:	e79d      	b.n	801512a <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 80151ee:	9304      	str	r3, [sp, #16]
 80151f0:	4b15      	ldr	r3, [pc, #84]	@ (8015248 <get_config_topik_string+0x15c>)
 80151f2:	9303      	str	r3, [sp, #12]
 80151f4:	4b08      	ldr	r3, [pc, #32]	@ (8015218 <get_config_topik_string+0x12c>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	9302      	str	r3, [sp, #8]
 80151fa:	4b08      	ldr	r3, [pc, #32]	@ (801521c <get_config_topik_string+0x130>)
 80151fc:	9301      	str	r3, [sp, #4]
 80151fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015234 <get_config_topik_string+0x148>)
 8015200:	9300      	str	r3, [sp, #0]
 8015202:	4b08      	ldr	r3, [pc, #32]	@ (8015224 <get_config_topik_string+0x138>)
 8015204:	4a08      	ldr	r2, [pc, #32]	@ (8015228 <get_config_topik_string+0x13c>)
 8015206:	f016 fe11 	bl	802be2c <snprintf>
	return 0;
 801520a:	2000      	movs	r0, #0
			break;
 801520c:	e78d      	b.n	801512a <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 801520e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015212:	e78a      	b.n	801512a <get_config_topik_string+0x3e>
 8015214:	08037ce8 	.word	0x08037ce8
 8015218:	200028dc 	.word	0x200028dc
 801521c:	08037cf0 	.word	0x08037cf0
 8015220:	08037cf8 	.word	0x08037cf8
 8015224:	200000f8 	.word	0x200000f8
 8015228:	08037cd0 	.word	0x08037cd0
 801522c:	08037a3c 	.word	0x08037a3c
 8015230:	08037d08 	.word	0x08037d08
 8015234:	08037d10 	.word	0x08037d10
 8015238:	08037d18 	.word	0x08037d18
 801523c:	08037d20 	.word	0x08037d20
 8015240:	08037d28 	.word	0x08037d28
 8015244:	08037d38 	.word	0x08037d38
 8015248:	08037d48 	.word	0x08037d48

0801524c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 801524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015250:	b099      	sub	sp, #100	@ 0x64
 8015252:	9017      	str	r0, [sp, #92]	@ 0x5c
 8015254:	460d      	mov	r5, r1
 8015256:	4617      	mov	r7, r2
 8015258:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 801525a:	460a      	mov	r2, r1
 801525c:	2100      	movs	r1, #0
 801525e:	f017 fb0f 	bl	802c880 <memset>

	switch (payload_type) {
 8015262:	1e7a      	subs	r2, r7, #1
 8015264:	2a07      	cmp	r2, #7
 8015266:	f200 81ba 	bhi.w	80155de <get_config_payload_string+0x392>
 801526a:	e8df f012 	tbh	[pc, r2, lsl #1]
 801526e:	0008      	.short	0x0008
 8015270:	00a10043 	.word	0x00a10043
 8015274:	00c500ea 	.word	0x00c500ea
 8015278:	0193016e 	.word	0x0193016e
 801527c:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 801527e:	2101      	movs	r1, #1
 8015280:	2080      	movs	r0, #128	@ 0x80
 8015282:	f7ff fee1 	bl	8015048 <_ZL9my_callocjj>
 8015286:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8015288:	9400      	str	r4, [sp, #0]
 801528a:	4b80      	ldr	r3, [pc, #512]	@ (801548c <get_config_payload_string+0x240>)
 801528c:	4a80      	ldr	r2, [pc, #512]	@ (8015490 <get_config_payload_string+0x244>)
 801528e:	2180      	movs	r1, #128	@ 0x80
 8015290:	f016 fdcc 	bl	802be2c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8015294:	4b7f      	ldr	r3, [pc, #508]	@ (8015494 <get_config_payload_string+0x248>)
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	4b7f      	ldr	r3, [pc, #508]	@ (8015498 <get_config_payload_string+0x24c>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	9314      	str	r3, [sp, #80]	@ 0x50
 801529e:	4b7f      	ldr	r3, [pc, #508]	@ (801549c <get_config_payload_string+0x250>)
 80152a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80152a2:	4b7f      	ldr	r3, [pc, #508]	@ (80154a0 <get_config_payload_string+0x254>)
 80152a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80152a6:	4b7f      	ldr	r3, [pc, #508]	@ (80154a4 <get_config_payload_string+0x258>)
 80152a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80152aa:	4b7f      	ldr	r3, [pc, #508]	@ (80154a8 <get_config_payload_string+0x25c>)
 80152ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80152ae:	4b7f      	ldr	r3, [pc, #508]	@ (80154ac <get_config_payload_string+0x260>)
 80152b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80152b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80152b4:	4b7e      	ldr	r3, [pc, #504]	@ (80154b0 <get_config_payload_string+0x264>)
 80152b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80152b8:	497e      	ldr	r1, [pc, #504]	@ (80154b4 <get_config_payload_string+0x268>)
 80152ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80152bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80152be:	497e      	ldr	r1, [pc, #504]	@ (80154b8 <get_config_payload_string+0x26c>)
 80152c0:	910a      	str	r1, [sp, #40]	@ 0x28
 80152c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80152c4:	9308      	str	r3, [sp, #32]
 80152c6:	9707      	str	r7, [sp, #28]
 80152c8:	487c      	ldr	r0, [pc, #496]	@ (80154bc <get_config_payload_string+0x270>)
 80152ca:	9006      	str	r0, [sp, #24]
 80152cc:	9405      	str	r4, [sp, #20]
 80152ce:	9104      	str	r1, [sp, #16]
 80152d0:	9403      	str	r4, [sp, #12]
 80152d2:	9102      	str	r1, [sp, #8]
 80152d4:	9201      	str	r2, [sp, #4]
 80152d6:	9300      	str	r3, [sp, #0]
 80152d8:	4b79      	ldr	r3, [pc, #484]	@ (80154c0 <get_config_payload_string+0x274>)
 80152da:	4a7a      	ldr	r2, [pc, #488]	@ (80154c4 <get_config_payload_string+0x278>)
 80152dc:	4629      	mov	r1, r5
 80152de:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80152e0:	f016 fda4 	bl	802be2c <snprintf>
 80152e4:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 80152e6:	4638      	mov	r0, r7
 80152e8:	f005 fb18 	bl	801a91c <vPortFree>

			return len;
 80152ec:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 80152ee:	b019      	add	sp, #100	@ 0x64
 80152f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80152f4:	2101      	movs	r1, #1
 80152f6:	2080      	movs	r0, #128	@ 0x80
 80152f8:	f7ff fea6 	bl	8015048 <_ZL9my_callocjj>
 80152fc:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 80152fe:	2101      	movs	r1, #1
 8015300:	2080      	movs	r0, #128	@ 0x80
 8015302:	f7ff fea1 	bl	8015048 <_ZL9my_callocjj>
 8015306:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8015308:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 80154fc <get_config_payload_string+0x2b0>
 801530c:	9400      	str	r4, [sp, #0]
 801530e:	464b      	mov	r3, r9
 8015310:	4a6d      	ldr	r2, [pc, #436]	@ (80154c8 <get_config_payload_string+0x27c>)
 8015312:	2180      	movs	r1, #128	@ 0x80
 8015314:	4638      	mov	r0, r7
 8015316:	f016 fd89 	bl	802be2c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 801531a:	f8df a194 	ldr.w	sl, [pc, #404]	@ 80154b0 <get_config_payload_string+0x264>
 801531e:	4e65      	ldr	r6, [pc, #404]	@ (80154b4 <get_config_payload_string+0x268>)
 8015320:	9602      	str	r6, [sp, #8]
 8015322:	9701      	str	r7, [sp, #4]
 8015324:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015494 <get_config_payload_string+0x248>
 8015328:	f8db 3000 	ldr.w	r3, [fp]
 801532c:	9300      	str	r3, [sp, #0]
 801532e:	4653      	mov	r3, sl
 8015330:	4a66      	ldr	r2, [pc, #408]	@ (80154cc <get_config_payload_string+0x280>)
 8015332:	2180      	movs	r1, #128	@ 0x80
 8015334:	4640      	mov	r0, r8
 8015336:	f016 fd79 	bl	802be2c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 801533a:	9400      	str	r4, [sp, #0]
 801533c:	4b64      	ldr	r3, [pc, #400]	@ (80154d0 <get_config_payload_string+0x284>)
 801533e:	4a54      	ldr	r2, [pc, #336]	@ (8015490 <get_config_payload_string+0x244>)
 8015340:	2180      	movs	r1, #128	@ 0x80
 8015342:	4638      	mov	r0, r7
 8015344:	f016 fd72 	bl	802be2c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8015348:	f8db 3000 	ldr.w	r3, [fp]
 801534c:	4a52      	ldr	r2, [pc, #328]	@ (8015498 <get_config_payload_string+0x24c>)
 801534e:	6812      	ldr	r2, [r2, #0]
 8015350:	9214      	str	r2, [sp, #80]	@ 0x50
 8015352:	4a52      	ldr	r2, [pc, #328]	@ (801549c <get_config_payload_string+0x250>)
 8015354:	9213      	str	r2, [sp, #76]	@ 0x4c
 8015356:	4a52      	ldr	r2, [pc, #328]	@ (80154a0 <get_config_payload_string+0x254>)
 8015358:	9212      	str	r2, [sp, #72]	@ 0x48
 801535a:	4a52      	ldr	r2, [pc, #328]	@ (80154a4 <get_config_payload_string+0x258>)
 801535c:	9211      	str	r2, [sp, #68]	@ 0x44
 801535e:	4a52      	ldr	r2, [pc, #328]	@ (80154a8 <get_config_payload_string+0x25c>)
 8015360:	9210      	str	r2, [sp, #64]	@ 0x40
 8015362:	4a52      	ldr	r2, [pc, #328]	@ (80154ac <get_config_payload_string+0x260>)
 8015364:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015366:	930e      	str	r3, [sp, #56]	@ 0x38
 8015368:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801536c:	960c      	str	r6, [sp, #48]	@ 0x30
 801536e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015370:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8015374:	9309      	str	r3, [sp, #36]	@ 0x24
 8015376:	f8cd a020 	str.w	sl, [sp, #32]
 801537a:	9707      	str	r7, [sp, #28]
 801537c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015380:	9405      	str	r4, [sp, #20]
 8015382:	f8cd 9010 	str.w	r9, [sp, #16]
 8015386:	9403      	str	r4, [sp, #12]
 8015388:	f8cd 9008 	str.w	r9, [sp, #8]
 801538c:	9301      	str	r3, [sp, #4]
 801538e:	f8cd a000 	str.w	sl, [sp]
 8015392:	464b      	mov	r3, r9
 8015394:	4a4b      	ldr	r2, [pc, #300]	@ (80154c4 <get_config_payload_string+0x278>)
 8015396:	4629      	mov	r1, r5
 8015398:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801539a:	f016 fd47 	bl	802be2c <snprintf>
 801539e:	4604      	mov	r4, r0
			free(name);
 80153a0:	4638      	mov	r0, r7
 80153a2:	f005 fabb 	bl	801a91c <vPortFree>
			free(com_topik);
 80153a6:	4640      	mov	r0, r8
 80153a8:	f005 fab8 	bl	801a91c <vPortFree>
			return len;
 80153ac:	b2e0      	uxtb	r0, r4
 80153ae:	e79e      	b.n	80152ee <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 80153b0:	4b38      	ldr	r3, [pc, #224]	@ (8015494 <get_config_payload_string+0x248>)
 80153b2:	6819      	ldr	r1, [r3, #0]
 80153b4:	4b3e      	ldr	r3, [pc, #248]	@ (80154b0 <get_config_payload_string+0x264>)
 80153b6:	4a47      	ldr	r2, [pc, #284]	@ (80154d4 <get_config_payload_string+0x288>)
 80153b8:	4837      	ldr	r0, [pc, #220]	@ (8015498 <get_config_payload_string+0x24c>)
 80153ba:	6800      	ldr	r0, [r0, #0]
 80153bc:	9010      	str	r0, [sp, #64]	@ 0x40
 80153be:	4837      	ldr	r0, [pc, #220]	@ (801549c <get_config_payload_string+0x250>)
 80153c0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80153c2:	4837      	ldr	r0, [pc, #220]	@ (80154a0 <get_config_payload_string+0x254>)
 80153c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80153c6:	4837      	ldr	r0, [pc, #220]	@ (80154a4 <get_config_payload_string+0x258>)
 80153c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80153ca:	4837      	ldr	r0, [pc, #220]	@ (80154a8 <get_config_payload_string+0x25c>)
 80153cc:	900c      	str	r0, [sp, #48]	@ 0x30
 80153ce:	4837      	ldr	r0, [pc, #220]	@ (80154ac <get_config_payload_string+0x260>)
 80153d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80153d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80153d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80153d6:	4840      	ldr	r0, [pc, #256]	@ (80154d8 <get_config_payload_string+0x28c>)
 80153d8:	9008      	str	r0, [sp, #32]
 80153da:	9207      	str	r2, [sp, #28]
 80153dc:	9106      	str	r1, [sp, #24]
 80153de:	9305      	str	r3, [sp, #20]
 80153e0:	483e      	ldr	r0, [pc, #248]	@ (80154dc <get_config_payload_string+0x290>)
 80153e2:	9004      	str	r0, [sp, #16]
 80153e4:	483e      	ldr	r0, [pc, #248]	@ (80154e0 <get_config_payload_string+0x294>)
 80153e6:	9003      	str	r0, [sp, #12]
 80153e8:	9202      	str	r2, [sp, #8]
 80153ea:	483e      	ldr	r0, [pc, #248]	@ (80154e4 <get_config_payload_string+0x298>)
 80153ec:	9001      	str	r0, [sp, #4]
 80153ee:	9100      	str	r1, [sp, #0]
 80153f0:	4934      	ldr	r1, [pc, #208]	@ (80154c4 <get_config_payload_string+0x278>)
 80153f2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80153f4:	f016 fe82 	bl	802c0fc <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 80153f8:	4b26      	ldr	r3, [pc, #152]	@ (8015494 <get_config_payload_string+0x248>)
 80153fa:	6819      	ldr	r1, [r3, #0]
 80153fc:	4b2c      	ldr	r3, [pc, #176]	@ (80154b0 <get_config_payload_string+0x264>)
 80153fe:	4a3a      	ldr	r2, [pc, #232]	@ (80154e8 <get_config_payload_string+0x29c>)
 8015400:	4825      	ldr	r0, [pc, #148]	@ (8015498 <get_config_payload_string+0x24c>)
 8015402:	6800      	ldr	r0, [r0, #0]
 8015404:	9010      	str	r0, [sp, #64]	@ 0x40
 8015406:	4825      	ldr	r0, [pc, #148]	@ (801549c <get_config_payload_string+0x250>)
 8015408:	900f      	str	r0, [sp, #60]	@ 0x3c
 801540a:	4825      	ldr	r0, [pc, #148]	@ (80154a0 <get_config_payload_string+0x254>)
 801540c:	900e      	str	r0, [sp, #56]	@ 0x38
 801540e:	4825      	ldr	r0, [pc, #148]	@ (80154a4 <get_config_payload_string+0x258>)
 8015410:	900d      	str	r0, [sp, #52]	@ 0x34
 8015412:	4825      	ldr	r0, [pc, #148]	@ (80154a8 <get_config_payload_string+0x25c>)
 8015414:	900c      	str	r0, [sp, #48]	@ 0x30
 8015416:	4825      	ldr	r0, [pc, #148]	@ (80154ac <get_config_payload_string+0x260>)
 8015418:	900b      	str	r0, [sp, #44]	@ 0x2c
 801541a:	910a      	str	r1, [sp, #40]	@ 0x28
 801541c:	9309      	str	r3, [sp, #36]	@ 0x24
 801541e:	4833      	ldr	r0, [pc, #204]	@ (80154ec <get_config_payload_string+0x2a0>)
 8015420:	9008      	str	r0, [sp, #32]
 8015422:	9207      	str	r2, [sp, #28]
 8015424:	9106      	str	r1, [sp, #24]
 8015426:	9305      	str	r3, [sp, #20]
 8015428:	4831      	ldr	r0, [pc, #196]	@ (80154f0 <get_config_payload_string+0x2a4>)
 801542a:	9004      	str	r0, [sp, #16]
 801542c:	4823      	ldr	r0, [pc, #140]	@ (80154bc <get_config_payload_string+0x270>)
 801542e:	9003      	str	r0, [sp, #12]
 8015430:	9202      	str	r2, [sp, #8]
 8015432:	482c      	ldr	r0, [pc, #176]	@ (80154e4 <get_config_payload_string+0x298>)
 8015434:	9001      	str	r0, [sp, #4]
 8015436:	9100      	str	r1, [sp, #0]
 8015438:	4922      	ldr	r1, [pc, #136]	@ (80154c4 <get_config_payload_string+0x278>)
 801543a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801543c:	f016 fe5e 	bl	802c0fc <sprintf>
			break;
 8015440:	e7da      	b.n	80153f8 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8015442:	4b14      	ldr	r3, [pc, #80]	@ (8015494 <get_config_payload_string+0x248>)
 8015444:	6819      	ldr	r1, [r3, #0]
 8015446:	4b1a      	ldr	r3, [pc, #104]	@ (80154b0 <get_config_payload_string+0x264>)
 8015448:	4a1d      	ldr	r2, [pc, #116]	@ (80154c0 <get_config_payload_string+0x274>)
 801544a:	4813      	ldr	r0, [pc, #76]	@ (8015498 <get_config_payload_string+0x24c>)
 801544c:	6800      	ldr	r0, [r0, #0]
 801544e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015450:	4812      	ldr	r0, [pc, #72]	@ (801549c <get_config_payload_string+0x250>)
 8015452:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015454:	4812      	ldr	r0, [pc, #72]	@ (80154a0 <get_config_payload_string+0x254>)
 8015456:	900e      	str	r0, [sp, #56]	@ 0x38
 8015458:	4812      	ldr	r0, [pc, #72]	@ (80154a4 <get_config_payload_string+0x258>)
 801545a:	900d      	str	r0, [sp, #52]	@ 0x34
 801545c:	4812      	ldr	r0, [pc, #72]	@ (80154a8 <get_config_payload_string+0x25c>)
 801545e:	900c      	str	r0, [sp, #48]	@ 0x30
 8015460:	4812      	ldr	r0, [pc, #72]	@ (80154ac <get_config_payload_string+0x260>)
 8015462:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015464:	910a      	str	r1, [sp, #40]	@ 0x28
 8015466:	9309      	str	r3, [sp, #36]	@ 0x24
 8015468:	4822      	ldr	r0, [pc, #136]	@ (80154f4 <get_config_payload_string+0x2a8>)
 801546a:	9008      	str	r0, [sp, #32]
 801546c:	9207      	str	r2, [sp, #28]
 801546e:	9106      	str	r1, [sp, #24]
 8015470:	9305      	str	r3, [sp, #20]
 8015472:	4821      	ldr	r0, [pc, #132]	@ (80154f8 <get_config_payload_string+0x2ac>)
 8015474:	9004      	str	r0, [sp, #16]
 8015476:	4811      	ldr	r0, [pc, #68]	@ (80154bc <get_config_payload_string+0x270>)
 8015478:	9003      	str	r0, [sp, #12]
 801547a:	9202      	str	r2, [sp, #8]
 801547c:	4819      	ldr	r0, [pc, #100]	@ (80154e4 <get_config_payload_string+0x298>)
 801547e:	9001      	str	r0, [sp, #4]
 8015480:	9100      	str	r1, [sp, #0]
 8015482:	4910      	ldr	r1, [pc, #64]	@ (80154c4 <get_config_payload_string+0x278>)
 8015484:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015486:	f016 fe39 	bl	802c0fc <sprintf>
			break;
 801548a:	e7b5      	b.n	80153f8 <get_config_payload_string+0x1ac>
 801548c:	08037d50 	.word	0x08037d50
 8015490:	08037d5c 	.word	0x08037d5c
 8015494:	200028dc 	.word	0x200028dc
 8015498:	200028d8 	.word	0x200028d8
 801549c:	08036514 	.word	0x08036514
 80154a0:	08036510 	.word	0x08036510
 80154a4:	08037d64 	.word	0x08037d64
 80154a8:	08037d74 	.word	0x08037d74
 80154ac:	08037d88 	.word	0x08037d88
 80154b0:	08037cf0 	.word	0x08037cf0
 80154b4:	08036a40 	.word	0x08036a40
 80154b8:	08037ce8 	.word	0x08037ce8
 80154bc:	0803a1e0 	.word	0x0803a1e0
 80154c0:	08037d20 	.word	0x08037d20
 80154c4:	08037eec 	.word	0x08037eec
 80154c8:	08037d94 	.word	0x08037d94
 80154cc:	08037ec4 	.word	0x08037ec4
 80154d0:	08037d9c 	.word	0x08037d9c
 80154d4:	08037d08 	.word	0x08037d08
 80154d8:	08037db0 	.word	0x08037db0
 80154dc:	08037db4 	.word	0x08037db4
 80154e0:	08037dc4 	.word	0x08037dc4
 80154e4:	08037de8 	.word	0x08037de8
 80154e8:	08037d18 	.word	0x08037d18
 80154ec:	08037df0 	.word	0x08037df0
 80154f0:	08037df4 	.word	0x08037df4
 80154f4:	08037e04 	.word	0x08037e04
 80154f8:	08037e08 	.word	0x08037e08
 80154fc:	08037a3c 	.word	0x08037a3c
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8015500:	4b38      	ldr	r3, [pc, #224]	@ (80155e4 <get_config_payload_string+0x398>)
 8015502:	6819      	ldr	r1, [r3, #0]
 8015504:	4b38      	ldr	r3, [pc, #224]	@ (80155e8 <get_config_payload_string+0x39c>)
 8015506:	4a39      	ldr	r2, [pc, #228]	@ (80155ec <get_config_payload_string+0x3a0>)
 8015508:	4839      	ldr	r0, [pc, #228]	@ (80155f0 <get_config_payload_string+0x3a4>)
 801550a:	6800      	ldr	r0, [r0, #0]
 801550c:	9010      	str	r0, [sp, #64]	@ 0x40
 801550e:	4839      	ldr	r0, [pc, #228]	@ (80155f4 <get_config_payload_string+0x3a8>)
 8015510:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015512:	4839      	ldr	r0, [pc, #228]	@ (80155f8 <get_config_payload_string+0x3ac>)
 8015514:	900e      	str	r0, [sp, #56]	@ 0x38
 8015516:	4839      	ldr	r0, [pc, #228]	@ (80155fc <get_config_payload_string+0x3b0>)
 8015518:	900d      	str	r0, [sp, #52]	@ 0x34
 801551a:	4839      	ldr	r0, [pc, #228]	@ (8015600 <get_config_payload_string+0x3b4>)
 801551c:	900c      	str	r0, [sp, #48]	@ 0x30
 801551e:	4839      	ldr	r0, [pc, #228]	@ (8015604 <get_config_payload_string+0x3b8>)
 8015520:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015522:	910a      	str	r1, [sp, #40]	@ 0x28
 8015524:	9309      	str	r3, [sp, #36]	@ 0x24
 8015526:	4838      	ldr	r0, [pc, #224]	@ (8015608 <get_config_payload_string+0x3bc>)
 8015528:	9008      	str	r0, [sp, #32]
 801552a:	9207      	str	r2, [sp, #28]
 801552c:	9106      	str	r1, [sp, #24]
 801552e:	9305      	str	r3, [sp, #20]
 8015530:	4836      	ldr	r0, [pc, #216]	@ (801560c <get_config_payload_string+0x3c0>)
 8015532:	9004      	str	r0, [sp, #16]
 8015534:	4836      	ldr	r0, [pc, #216]	@ (8015610 <get_config_payload_string+0x3c4>)
 8015536:	9003      	str	r0, [sp, #12]
 8015538:	9202      	str	r2, [sp, #8]
 801553a:	4836      	ldr	r0, [pc, #216]	@ (8015614 <get_config_payload_string+0x3c8>)
 801553c:	9001      	str	r0, [sp, #4]
 801553e:	9100      	str	r1, [sp, #0]
 8015540:	4935      	ldr	r1, [pc, #212]	@ (8015618 <get_config_payload_string+0x3cc>)
 8015542:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015544:	f016 fdda 	bl	802c0fc <sprintf>
			break;
 8015548:	e756      	b.n	80153f8 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 801554a:	4b26      	ldr	r3, [pc, #152]	@ (80155e4 <get_config_payload_string+0x398>)
 801554c:	6819      	ldr	r1, [r3, #0]
 801554e:	4b26      	ldr	r3, [pc, #152]	@ (80155e8 <get_config_payload_string+0x39c>)
 8015550:	4a32      	ldr	r2, [pc, #200]	@ (801561c <get_config_payload_string+0x3d0>)
 8015552:	4827      	ldr	r0, [pc, #156]	@ (80155f0 <get_config_payload_string+0x3a4>)
 8015554:	6800      	ldr	r0, [r0, #0]
 8015556:	9010      	str	r0, [sp, #64]	@ 0x40
 8015558:	4826      	ldr	r0, [pc, #152]	@ (80155f4 <get_config_payload_string+0x3a8>)
 801555a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801555c:	4826      	ldr	r0, [pc, #152]	@ (80155f8 <get_config_payload_string+0x3ac>)
 801555e:	900e      	str	r0, [sp, #56]	@ 0x38
 8015560:	4826      	ldr	r0, [pc, #152]	@ (80155fc <get_config_payload_string+0x3b0>)
 8015562:	900d      	str	r0, [sp, #52]	@ 0x34
 8015564:	4826      	ldr	r0, [pc, #152]	@ (8015600 <get_config_payload_string+0x3b4>)
 8015566:	900c      	str	r0, [sp, #48]	@ 0x30
 8015568:	4826      	ldr	r0, [pc, #152]	@ (8015604 <get_config_payload_string+0x3b8>)
 801556a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801556c:	910a      	str	r1, [sp, #40]	@ 0x28
 801556e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015570:	482b      	ldr	r0, [pc, #172]	@ (8015620 <get_config_payload_string+0x3d4>)
 8015572:	9008      	str	r0, [sp, #32]
 8015574:	9207      	str	r2, [sp, #28]
 8015576:	9106      	str	r1, [sp, #24]
 8015578:	9305      	str	r3, [sp, #20]
 801557a:	482a      	ldr	r0, [pc, #168]	@ (8015624 <get_config_payload_string+0x3d8>)
 801557c:	9004      	str	r0, [sp, #16]
 801557e:	4824      	ldr	r0, [pc, #144]	@ (8015610 <get_config_payload_string+0x3c4>)
 8015580:	9003      	str	r0, [sp, #12]
 8015582:	9202      	str	r2, [sp, #8]
 8015584:	4823      	ldr	r0, [pc, #140]	@ (8015614 <get_config_payload_string+0x3c8>)
 8015586:	9001      	str	r0, [sp, #4]
 8015588:	9100      	str	r1, [sp, #0]
 801558a:	4923      	ldr	r1, [pc, #140]	@ (8015618 <get_config_payload_string+0x3cc>)
 801558c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801558e:	f016 fdb5 	bl	802c0fc <sprintf>
			break;
 8015592:	e731      	b.n	80153f8 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8015594:	4b13      	ldr	r3, [pc, #76]	@ (80155e4 <get_config_payload_string+0x398>)
 8015596:	6819      	ldr	r1, [r3, #0]
 8015598:	4b13      	ldr	r3, [pc, #76]	@ (80155e8 <get_config_payload_string+0x39c>)
 801559a:	4a23      	ldr	r2, [pc, #140]	@ (8015628 <get_config_payload_string+0x3dc>)
 801559c:	4814      	ldr	r0, [pc, #80]	@ (80155f0 <get_config_payload_string+0x3a4>)
 801559e:	6800      	ldr	r0, [r0, #0]
 80155a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80155a2:	4814      	ldr	r0, [pc, #80]	@ (80155f4 <get_config_payload_string+0x3a8>)
 80155a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80155a6:	4814      	ldr	r0, [pc, #80]	@ (80155f8 <get_config_payload_string+0x3ac>)
 80155a8:	900e      	str	r0, [sp, #56]	@ 0x38
 80155aa:	4814      	ldr	r0, [pc, #80]	@ (80155fc <get_config_payload_string+0x3b0>)
 80155ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80155ae:	4814      	ldr	r0, [pc, #80]	@ (8015600 <get_config_payload_string+0x3b4>)
 80155b0:	900c      	str	r0, [sp, #48]	@ 0x30
 80155b2:	4814      	ldr	r0, [pc, #80]	@ (8015604 <get_config_payload_string+0x3b8>)
 80155b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80155b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80155b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80155ba:	481c      	ldr	r0, [pc, #112]	@ (801562c <get_config_payload_string+0x3e0>)
 80155bc:	9008      	str	r0, [sp, #32]
 80155be:	9207      	str	r2, [sp, #28]
 80155c0:	9106      	str	r1, [sp, #24]
 80155c2:	9305      	str	r3, [sp, #20]
 80155c4:	481a      	ldr	r0, [pc, #104]	@ (8015630 <get_config_payload_string+0x3e4>)
 80155c6:	9004      	str	r0, [sp, #16]
 80155c8:	4811      	ldr	r0, [pc, #68]	@ (8015610 <get_config_payload_string+0x3c4>)
 80155ca:	9003      	str	r0, [sp, #12]
 80155cc:	9202      	str	r2, [sp, #8]
 80155ce:	4811      	ldr	r0, [pc, #68]	@ (8015614 <get_config_payload_string+0x3c8>)
 80155d0:	9001      	str	r0, [sp, #4]
 80155d2:	9100      	str	r1, [sp, #0]
 80155d4:	4910      	ldr	r1, [pc, #64]	@ (8015618 <get_config_payload_string+0x3cc>)
 80155d6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80155d8:	f016 fd90 	bl	802c0fc <sprintf>
			break;
 80155dc:	e70c      	b.n	80153f8 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 80155de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155e2:	e684      	b.n	80152ee <get_config_payload_string+0xa2>
 80155e4:	200028dc 	.word	0x200028dc
 80155e8:	08037cf0 	.word	0x08037cf0
 80155ec:	08037d28 	.word	0x08037d28
 80155f0:	200028d8 	.word	0x200028d8
 80155f4:	08036514 	.word	0x08036514
 80155f8:	08036510 	.word	0x08036510
 80155fc:	08037d64 	.word	0x08037d64
 8015600:	08037d74 	.word	0x08037d74
 8015604:	08037d88 	.word	0x08037d88
 8015608:	08037e2c 	.word	0x08037e2c
 801560c:	08037e30 	.word	0x08037e30
 8015610:	0803a1e0 	.word	0x0803a1e0
 8015614:	08037de8 	.word	0x08037de8
 8015618:	08037eec 	.word	0x08037eec
 801561c:	08037d38 	.word	0x08037d38
 8015620:	08037e50 	.word	0x08037e50
 8015624:	08037e54 	.word	0x08037e54
 8015628:	08037d48 	.word	0x08037d48
 801562c:	08037e80 	.word	0x08037e80
 8015630:	08037e84 	.word	0x08037e84

08015634 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8015634:	b530      	push	{r4, r5, lr}
 8015636:	b083      	sub	sp, #12
 8015638:	461c      	mov	r4, r3
 801563a:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 801563e:	2a01      	cmp	r2, #1
 8015640:	d00b      	beq.n	801565a <gen_bin_sensor_status_payload_JSON+0x26>
 8015642:	2a02      	cmp	r2, #2
 8015644:	d10b      	bne.n	801565e <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8015646:	4b0a      	ldr	r3, [pc, #40]	@ (8015670 <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8015648:	b15d      	cbz	r5, 8015662 <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 801564a:	4a0a      	ldr	r2, [pc, #40]	@ (8015674 <gen_bin_sensor_status_payload_JSON+0x40>)
 801564c:	9201      	str	r2, [sp, #4]
 801564e:	9400      	str	r4, [sp, #0]
 8015650:	4a09      	ldr	r2, [pc, #36]	@ (8015678 <gen_bin_sensor_status_payload_JSON+0x44>)
 8015652:	f016 fbeb 	bl	802be2c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8015656:	b003      	add	sp, #12
 8015658:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 801565a:	4b08      	ldr	r3, [pc, #32]	@ (801567c <gen_bin_sensor_status_payload_JSON+0x48>)
 801565c:	e7f4      	b.n	8015648 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 801565e:	2300      	movs	r3, #0
 8015660:	e7f2      	b.n	8015648 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8015662:	4a07      	ldr	r2, [pc, #28]	@ (8015680 <gen_bin_sensor_status_payload_JSON+0x4c>)
 8015664:	9201      	str	r2, [sp, #4]
 8015666:	9400      	str	r4, [sp, #0]
 8015668:	4a03      	ldr	r2, [pc, #12]	@ (8015678 <gen_bin_sensor_status_payload_JSON+0x44>)
 801566a:	f016 fbdf 	bl	802be2c <snprintf>
 801566e:	e7f2      	b.n	8015656 <gen_bin_sensor_status_payload_JSON+0x22>
 8015670:	08037a3c 	.word	0x08037a3c
 8015674:	08037af4 	.word	0x08037af4
 8015678:	08037eb4 	.word	0x08037eb4
 801567c:	08037ce8 	.word	0x08037ce8
 8015680:	08037b0c 	.word	0x08037b0c

08015684 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8015684:	b500      	push	{lr}
 8015686:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8015688:	9302      	str	r3, [sp, #8]
 801568a:	4b06      	ldr	r3, [pc, #24]	@ (80156a4 <generate_comand_topik_for_subscrabe+0x20>)
 801568c:	9301      	str	r3, [sp, #4]
 801568e:	4b06      	ldr	r3, [pc, #24]	@ (80156a8 <generate_comand_topik_for_subscrabe+0x24>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	9300      	str	r3, [sp, #0]
 8015694:	4b05      	ldr	r3, [pc, #20]	@ (80156ac <generate_comand_topik_for_subscrabe+0x28>)
 8015696:	4a06      	ldr	r2, [pc, #24]	@ (80156b0 <generate_comand_topik_for_subscrabe+0x2c>)
 8015698:	f016 fbc8 	bl	802be2c <snprintf>
			break;
	}
}
 801569c:	b005      	add	sp, #20
 801569e:	f85d fb04 	ldr.w	pc, [sp], #4
 80156a2:	bf00      	nop
 80156a4:	08037a3c 	.word	0x08037a3c
 80156a8:	200028dc 	.word	0x200028dc
 80156ac:	08037cf0 	.word	0x08037cf0
 80156b0:	08037e90 	.word	0x08037e90

080156b4 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 80156b4:	b500      	push	{lr}
 80156b6:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 80156b8:	f04f 0c00 	mov.w	ip, #0
 80156bc:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 80156c0:	2a01      	cmp	r2, #1
 80156c2:	d006      	beq.n	80156d2 <generate_status_topik+0x1e>
 80156c4:	2a02      	cmp	r2, #2
 80156c6:	d00f      	beq.n	80156e8 <generate_status_topik+0x34>
 80156c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 80156cc:	b005      	add	sp, #20
 80156ce:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 80156d2:	9302      	str	r3, [sp, #8]
 80156d4:	4b0a      	ldr	r3, [pc, #40]	@ (8015700 <generate_status_topik+0x4c>)
 80156d6:	9301      	str	r3, [sp, #4]
 80156d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015704 <generate_status_topik+0x50>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	9300      	str	r3, [sp, #0]
 80156de:	4b0a      	ldr	r3, [pc, #40]	@ (8015708 <generate_status_topik+0x54>)
 80156e0:	4a0a      	ldr	r2, [pc, #40]	@ (801570c <generate_status_topik+0x58>)
 80156e2:	f016 fba3 	bl	802be2c <snprintf>
 80156e6:	e7f1      	b.n	80156cc <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 80156e8:	9302      	str	r3, [sp, #8]
 80156ea:	4b09      	ldr	r3, [pc, #36]	@ (8015710 <generate_status_topik+0x5c>)
 80156ec:	9301      	str	r3, [sp, #4]
 80156ee:	4b05      	ldr	r3, [pc, #20]	@ (8015704 <generate_status_topik+0x50>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	4b04      	ldr	r3, [pc, #16]	@ (8015708 <generate_status_topik+0x54>)
 80156f6:	4a05      	ldr	r2, [pc, #20]	@ (801570c <generate_status_topik+0x58>)
 80156f8:	f016 fb98 	bl	802be2c <snprintf>
 80156fc:	e7e6      	b.n	80156cc <generate_status_topik+0x18>
 80156fe:	bf00      	nop
 8015700:	08037ce8 	.word	0x08037ce8
 8015704:	200028dc 	.word	0x200028dc
 8015708:	08037cf0 	.word	0x08037cf0
 801570c:	08037ea0 	.word	0x08037ea0
 8015710:	08037a3c 	.word	0x08037a3c

08015714 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8015714:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015716:	4b08      	ldr	r3, [pc, #32]	@ (8015738 <timer_fn+0x24>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	b12b      	cbz	r3, 8015728 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 801571c:	4b06      	ldr	r3, [pc, #24]	@ (8015738 <timer_fn+0x24>)
 801571e:	6818      	ldr	r0, [r3, #0]
 8015720:	b108      	cbz	r0, 8015726 <timer_fn+0x12>
 8015722:	f014 f9c1 	bl	8029aa8 <mg_sntp_request>
}
 8015726:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015728:	4a04      	ldr	r2, [pc, #16]	@ (801573c <timer_fn+0x28>)
 801572a:	4619      	mov	r1, r3
 801572c:	f014 fa8e 	bl	8029c4c <mg_sntp_connect>
 8015730:	4b01      	ldr	r3, [pc, #4]	@ (8015738 <timer_fn+0x24>)
 8015732:	6018      	str	r0, [r3, #0]
 8015734:	e7f2      	b.n	801571c <timer_fn+0x8>
 8015736:	bf00      	nop
 8015738:	200028e0 	.word	0x200028e0
 801573c:	08015741 	.word	0x08015741

08015740 <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 8015740:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 8015742:	2912      	cmp	r1, #18
 8015744:	d002      	beq.n	801574c <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8015746:	2909      	cmp	r1, #9
 8015748:	d046      	beq.n	80157d8 <sfn+0x98>
}
 801574a:	bd70      	pop	{r4, r5, r6, pc}
 801574c:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 801574e:	4926      	ldr	r1, [pc, #152]	@ (80157e8 <sfn+0xa8>)
 8015750:	2001      	movs	r0, #1
 8015752:	f7fc fbd3 	bl	8011efc <logging>
    uint64_t curtime = mg_now();
 8015756:	f014 f8e3 	bl	8029920 <mg_now>
 801575a:	4606      	mov	r6, r0
 801575c:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 801575e:	4b23      	ldr	r3, [pc, #140]	@ (80157ec <sfn+0xac>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b01      	cmp	r3, #1
 8015764:	dc20      	bgt.n	80157a8 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015766:	4632      	mov	r2, r6
 8015768:	462b      	mov	r3, r5
 801576a:	4921      	ldr	r1, [pc, #132]	@ (80157f0 <sfn+0xb0>)
 801576c:	2001      	movs	r0, #1
 801576e:	f7fc fbc5 	bl	8011efc <logging>
      uint64_t t = *(uint64_t *) ev_data;
 8015772:	6825      	ldr	r5, [r4, #0]
 8015774:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8015776:	f010 fc81 	bl	802607c <mg_millis>
 801577a:	1a28      	subs	r0, r5, r0
 801577c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015780:	f04f 0300 	mov.w	r3, #0
 8015784:	eb64 0101 	sbc.w	r1, r4, r1
 8015788:	f7fb fae6 	bl	8010d58 <__aeabi_uldivmod>
 801578c:	4b19      	ldr	r3, [pc, #100]	@ (80157f4 <sfn+0xb4>)
 801578e:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 8015792:	4b16      	ldr	r3, [pc, #88]	@ (80157ec <sfn+0xac>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	2b01      	cmp	r3, #1
 8015798:	dc12      	bgt.n	80157c0 <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 801579a:	462a      	mov	r2, r5
 801579c:	4623      	mov	r3, r4
 801579e:	4916      	ldr	r1, [pc, #88]	@ (80157f8 <sfn+0xb8>)
 80157a0:	2001      	movs	r0, #1
 80157a2:	f7fc fbab 	bl	8011efc <logging>
 80157a6:	e7d0      	b.n	801574a <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80157a8:	4b14      	ldr	r3, [pc, #80]	@ (80157fc <sfn+0xbc>)
 80157aa:	221b      	movs	r2, #27
 80157ac:	4914      	ldr	r1, [pc, #80]	@ (8015800 <sfn+0xc0>)
 80157ae:	2002      	movs	r0, #2
 80157b0:	f010 fc6a 	bl	8026088 <mg_log_prefix>
 80157b4:	4632      	mov	r2, r6
 80157b6:	462b      	mov	r3, r5
 80157b8:	480d      	ldr	r0, [pc, #52]	@ (80157f0 <sfn+0xb0>)
 80157ba:	f00e fb13 	bl	8023de4 <mg_log>
 80157be:	e7d2      	b.n	8015766 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80157c0:	4b0e      	ldr	r3, [pc, #56]	@ (80157fc <sfn+0xbc>)
 80157c2:	2221      	movs	r2, #33	@ 0x21
 80157c4:	490e      	ldr	r1, [pc, #56]	@ (8015800 <sfn+0xc0>)
 80157c6:	2002      	movs	r0, #2
 80157c8:	f010 fc5e 	bl	8026088 <mg_log_prefix>
 80157cc:	462a      	mov	r2, r5
 80157ce:	4623      	mov	r3, r4
 80157d0:	480c      	ldr	r0, [pc, #48]	@ (8015804 <sfn+0xc4>)
 80157d2:	f00e fb07 	bl	8023de4 <mg_log>
 80157d6:	e7e0      	b.n	801579a <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 80157d8:	490b      	ldr	r1, [pc, #44]	@ (8015808 <sfn+0xc8>)
 80157da:	2001      	movs	r0, #1
 80157dc:	f7fc fb8e 	bl	8011efc <logging>
    s_sntp_conn = NULL;
 80157e0:	4b0a      	ldr	r3, [pc, #40]	@ (801580c <sfn+0xcc>)
 80157e2:	2200      	movs	r2, #0
 80157e4:	601a      	str	r2, [r3, #0]
}
 80157e6:	e7b0      	b.n	801574a <sfn+0xa>
 80157e8:	0803806c 	.word	0x0803806c
 80157ec:	2000012c 	.word	0x2000012c
 80157f0:	080380b0 	.word	0x080380b0
 80157f4:	200028e8 	.word	0x200028e8
 80157f8:	08038108 	.word	0x08038108
 80157fc:	08038164 	.word	0x08038164
 8015800:	08038090 	.word	0x08038090
 8015804:	080380e4 	.word	0x080380e4
 8015808:	0803812c 	.word	0x0803812c
 801580c:	200028e0 	.word	0x200028e0

08015810 <start_sntp>:

void start_sntp(void *arg){
 8015810:	b530      	push	{r4, r5, lr}
 8015812:	b085      	sub	sp, #20
 8015814:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015816:	490d      	ldr	r1, [pc, #52]	@ (801584c <start_sntp+0x3c>)
 8015818:	2001      	movs	r0, #1
 801581a:	f7fc fb6f 	bl	8011efc <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 801581e:	9402      	str	r4, [sp, #8]
 8015820:	4d0b      	ldr	r5, [pc, #44]	@ (8015850 <start_sntp+0x40>)
 8015822:	9501      	str	r5, [sp, #4]
 8015824:	2300      	movs	r3, #0
 8015826:	9300      	str	r3, [sp, #0]
 8015828:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801582c:	2300      	movs	r3, #0
 801582e:	4620      	mov	r0, r4
 8015830:	f00f fe98 	bl	8025564 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8015834:	9402      	str	r4, [sp, #8]
 8015836:	9501      	str	r5, [sp, #4]
 8015838:	2301      	movs	r3, #1
 801583a:	9300      	str	r3, [sp, #0]
 801583c:	4a05      	ldr	r2, [pc, #20]	@ (8015854 <start_sntp+0x44>)
 801583e:	2300      	movs	r3, #0
 8015840:	4620      	mov	r0, r4
 8015842:	f00f fe8f 	bl	8025564 <mg_timer_add>

}
 8015846:	b005      	add	sp, #20
 8015848:	bd30      	pop	{r4, r5, pc}
 801584a:	bf00      	nop
 801584c:	08038148 	.word	0x08038148
 8015850:	08015715 	.word	0x08015715
 8015854:	00107ac0 	.word	0x00107ac0

08015858 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015858:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801585a:	fb01 f400 	mul.w	r4, r1, r0
 801585e:	4620      	mov	r0, r4
 8015860:	f004 ffda 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015864:	4605      	mov	r5, r0
 8015866:	b118      	cbz	r0, 8015870 <my_calloc+0x18>
 8015868:	4622      	mov	r2, r4
 801586a:	2100      	movs	r1, #0
 801586c:	f017 f808 	bl	802c880 <memset>
}
 8015870:	4628      	mov	r0, r5
 8015872:	bd38      	pop	{r3, r4, r5, pc}

08015874 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015874:	b570      	push	{r4, r5, r6, lr}
 8015876:	b088      	sub	sp, #32
 8015878:	4605      	mov	r5, r0
 801587a:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 801587c:	4917      	ldr	r1, [pc, #92]	@ (80158dc <dev_description_handler+0x68>)
 801587e:	2000      	movs	r0, #0
 8015880:	f7fc fb3c 	bl	8011efc <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8015884:	ae06      	add	r6, sp, #24
 8015886:	4916      	ldr	r1, [pc, #88]	@ (80158e0 <dev_description_handler+0x6c>)
 8015888:	4630      	mov	r0, r6
 801588a:	f00e fc89 	bl	80241a0 <mg_str_s>
 801588e:	2300      	movs	r3, #0
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015896:	e894 0003 	ldmia.w	r4, {r0, r1}
 801589a:	f00e fea3 	bl	80245e4 <mg_match>
 801589e:	b1a8      	cbz	r0, 80158cc <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 80158a0:	4b10      	ldr	r3, [pc, #64]	@ (80158e4 <dev_description_handler+0x70>)
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	9305      	str	r3, [sp, #20]
 80158a6:	4b10      	ldr	r3, [pc, #64]	@ (80158e8 <dev_description_handler+0x74>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	9304      	str	r3, [sp, #16]
 80158ac:	4b0f      	ldr	r3, [pc, #60]	@ (80158ec <dev_description_handler+0x78>)
 80158ae:	9303      	str	r3, [sp, #12]
 80158b0:	4b0f      	ldr	r3, [pc, #60]	@ (80158f0 <dev_description_handler+0x7c>)
 80158b2:	9302      	str	r3, [sp, #8]
 80158b4:	4b0f      	ldr	r3, [pc, #60]	@ (80158f4 <dev_description_handler+0x80>)
 80158b6:	9301      	str	r3, [sp, #4]
 80158b8:	4b0f      	ldr	r3, [pc, #60]	@ (80158f8 <dev_description_handler+0x84>)
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	4b0f      	ldr	r3, [pc, #60]	@ (80158fc <dev_description_handler+0x88>)
 80158be:	4a10      	ldr	r2, [pc, #64]	@ (8015900 <dev_description_handler+0x8c>)
 80158c0:	21c8      	movs	r1, #200	@ 0xc8
 80158c2:	4628      	mov	r0, r5
 80158c4:	f00e fae2 	bl	8023e8c <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 80158c8:	b008      	add	sp, #32
 80158ca:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 80158cc:	4b0d      	ldr	r3, [pc, #52]	@ (8015904 <dev_description_handler+0x90>)
 80158ce:	4a0c      	ldr	r2, [pc, #48]	@ (8015900 <dev_description_handler+0x8c>)
 80158d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80158d4:	4628      	mov	r0, r5
 80158d6:	f00e fad9 	bl	8023e8c <mg_http_reply>
}
 80158da:	e7f5      	b.n	80158c8 <dev_description_handler+0x54>
 80158dc:	08038168 	.word	0x08038168
 80158e0:	08036464 	.word	0x08036464
 80158e4:	200028fc 	.word	0x200028fc
 80158e8:	20002904 	.word	0x20002904
 80158ec:	08036514 	.word	0x08036514
 80158f0:	08037d74 	.word	0x08037d74
 80158f4:	08037d64 	.word	0x08037d64
 80158f8:	08037d88 	.word	0x08037d88
 80158fc:	08038470 	.word	0x08038470
 8015900:	08036a40 	.word	0x08036a40
 8015904:	080370d4 	.word	0x080370d4

08015908 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015908:	b510      	push	{r4, lr}
 801590a:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 801590c:	4905      	ldr	r1, [pc, #20]	@ (8015924 <dev_404_handler+0x1c>)
 801590e:	2000      	movs	r0, #0
 8015910:	f7fc faf4 	bl	8011efc <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015914:	4b04      	ldr	r3, [pc, #16]	@ (8015928 <dev_404_handler+0x20>)
 8015916:	4a05      	ldr	r2, [pc, #20]	@ (801592c <dev_404_handler+0x24>)
 8015918:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801591c:	4620      	mov	r0, r4
 801591e:	f00e fab5 	bl	8023e8c <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 8015922:	bd10      	pop	{r4, pc}
 8015924:	08038188 	.word	0x08038188
 8015928:	080381a0 	.word	0x080381a0
 801592c:	08036a40 	.word	0x08036a40

08015930 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 8015930:	290b      	cmp	r1, #11
 8015932:	d000      	beq.n	8015936 <ssdp_web_handler+0x6>
 8015934:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015936:	b570      	push	{r4, r5, r6, lr}
 8015938:	b086      	sub	sp, #24
 801593a:	4605      	mov	r5, r0
 801593c:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 801593e:	4917      	ldr	r1, [pc, #92]	@ (801599c <ssdp_web_handler+0x6c>)
 8015940:	2000      	movs	r0, #0
 8015942:	f7fc fadb 	bl	8011efc <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015946:	ae02      	add	r6, sp, #8
 8015948:	4915      	ldr	r1, [pc, #84]	@ (80159a0 <ssdp_web_handler+0x70>)
 801594a:	4630      	mov	r0, r6
 801594c:	f00e fc28 	bl	80241a0 <mg_str_s>
 8015950:	2300      	movs	r3, #0
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015958:	f104 0108 	add.w	r1, r4, #8
 801595c:	c903      	ldmia	r1, {r0, r1}
 801595e:	f00e fe41 	bl	80245e4 <mg_match>
 8015962:	b128      	cbz	r0, 8015970 <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015964:	4621      	mov	r1, r4
 8015966:	4628      	mov	r0, r5
 8015968:	f7ff ff84 	bl	8015874 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 801596c:	b006      	add	sp, #24
 801596e:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 8015970:	ae04      	add	r6, sp, #16
 8015972:	490c      	ldr	r1, [pc, #48]	@ (80159a4 <ssdp_web_handler+0x74>)
 8015974:	4630      	mov	r0, r6
 8015976:	f00e fc13 	bl	80241a0 <mg_str_s>
 801597a:	2300      	movs	r3, #0
 801597c:	9300      	str	r3, [sp, #0]
 801597e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015982:	f104 0108 	add.w	r1, r4, #8
 8015986:	c903      	ldmia	r1, {r0, r1}
 8015988:	f00e fe2c 	bl	80245e4 <mg_match>
 801598c:	2800      	cmp	r0, #0
 801598e:	d0ed      	beq.n	801596c <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 8015990:	4621      	mov	r1, r4
 8015992:	4628      	mov	r0, r5
 8015994:	f7ff ffb8 	bl	8015908 <dev_404_handler>
}
 8015998:	e7e8      	b.n	801596c <ssdp_web_handler+0x3c>
 801599a:	bf00      	nop
 801599c:	080381cc 	.word	0x080381cc
 80159a0:	080381f4 	.word	0x080381f4
 80159a4:	0803820c 	.word	0x0803820c

080159a8 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 80159a8:	b510      	push	{r4, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	4602      	mov	r2, r0
 80159ae:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 80159b0:	0e14      	lsrs	r4, r2, #24
 80159b2:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 80159b6:	0c11      	lsrs	r1, r2, #16
 80159b8:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 80159bc:	0a13      	lsrs	r3, r2, #8
 80159be:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 80159c2:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 80159c6:	9401      	str	r4, [sp, #4]
 80159c8:	b2c9      	uxtb	r1, r1
 80159ca:	9100      	str	r1, [sp, #0]
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	b2d2      	uxtb	r2, r2
 80159d0:	4902      	ldr	r1, [pc, #8]	@ (80159dc <ip_to_string+0x34>)
 80159d2:	f016 fb93 	bl	802c0fc <sprintf>
}
 80159d6:	b004      	add	sp, #16
 80159d8:	bd10      	pop	{r4, pc}
 80159da:	bf00      	nop
 80159dc:	08038210 	.word	0x08038210

080159e0 <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 80159e0:	b570      	push	{r4, r5, r6, lr}
 80159e2:	b084      	sub	sp, #16
 80159e4:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 80159e6:	491e      	ldr	r1, [pc, #120]	@ (8015a60 <send_ssdp_notify+0x80>)
 80159e8:	2000      	movs	r0, #0
 80159ea:	f7fc fa87 	bl	8011efc <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 80159ee:	4b1d      	ldr	r3, [pc, #116]	@ (8015a64 <send_ssdp_notify+0x84>)
 80159f0:	6818      	ldr	r0, [r3, #0]
 80159f2:	f7fa fc55 	bl	80102a0 <strlen>
 80159f6:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 80159f8:	2101      	movs	r1, #1
 80159fa:	f200 1039 	addw	r0, r0, #313	@ 0x139
 80159fe:	f7ff ff2b 	bl	8015858 <my_calloc>
 8015a02:	4a19      	ldr	r2, [pc, #100]	@ (8015a68 <send_ssdp_notify+0x88>)
 8015a04:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015a06:	b330      	cbz	r0, 8015a56 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015a08:	4b18      	ldr	r3, [pc, #96]	@ (8015a6c <send_ssdp_notify+0x8c>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	4d18      	ldr	r5, [pc, #96]	@ (8015a70 <send_ssdp_notify+0x90>)
 8015a0e:	6829      	ldr	r1, [r5, #0]
 8015a10:	6898      	ldr	r0, [r3, #8]
 8015a12:	f7ff ffc9 	bl	80159a8 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015a16:	4b13      	ldr	r3, [pc, #76]	@ (8015a64 <send_ssdp_notify+0x84>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	9302      	str	r3, [sp, #8]
 8015a1c:	4b15      	ldr	r3, [pc, #84]	@ (8015a74 <send_ssdp_notify+0x94>)
 8015a1e:	9301      	str	r3, [sp, #4]
 8015a20:	682b      	ldr	r3, [r5, #0]
 8015a22:	9300      	str	r3, [sp, #0]
 8015a24:	4b14      	ldr	r3, [pc, #80]	@ (8015a78 <send_ssdp_notify+0x98>)
 8015a26:	4a15      	ldr	r2, [pc, #84]	@ (8015a7c <send_ssdp_notify+0x9c>)
 8015a28:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015a2c:	480e      	ldr	r0, [pc, #56]	@ (8015a68 <send_ssdp_notify+0x88>)
 8015a2e:	6800      	ldr	r0, [r0, #0]
 8015a30:	f016 f9fc 	bl	802be2c <snprintf>
    if (udp_conn != NULL) {
 8015a34:	b14e      	cbz	r6, 8015a4a <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015a36:	4b0c      	ldr	r3, [pc, #48]	@ (8015a68 <send_ssdp_notify+0x88>)
 8015a38:	681c      	ldr	r4, [r3, #0]
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	f7fa fc30 	bl	80102a0 <strlen>
 8015a40:	4602      	mov	r2, r0
 8015a42:	4621      	mov	r1, r4
 8015a44:	4630      	mov	r0, r6
 8015a46:	f011 fbd3 	bl	80271f0 <mg_send>
    free(buff);
 8015a4a:	4b07      	ldr	r3, [pc, #28]	@ (8015a68 <send_ssdp_notify+0x88>)
 8015a4c:	6818      	ldr	r0, [r3, #0]
 8015a4e:	f004 ff65 	bl	801a91c <vPortFree>
}
 8015a52:	b004      	add	sp, #16
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015a56:	490a      	ldr	r1, [pc, #40]	@ (8015a80 <send_ssdp_notify+0xa0>)
 8015a58:	2003      	movs	r0, #3
 8015a5a:	f7fc fa4f 	bl	8011efc <logging>
		return; //TODO add log
 8015a5e:	e7f8      	b.n	8015a52 <send_ssdp_notify+0x72>
 8015a60:	0803821c 	.word	0x0803821c
 8015a64:	20002904 	.word	0x20002904
 8015a68:	20002900 	.word	0x20002900
 8015a6c:	200028f4 	.word	0x200028f4
 8015a70:	200028fc 	.word	0x200028fc
 8015a74:	0803826c 	.word	0x0803826c
 8015a78:	08038264 	.word	0x08038264
 8015a7c:	08038378 	.word	0x08038378
 8015a80:	08038234 	.word	0x08038234

08015a84 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 8015a84:	2907      	cmp	r1, #7
 8015a86:	d000      	beq.n	8015a8a <ssdp_listener_handler+0x6>
 8015a88:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 8015a8a:	b570      	push	{r4, r5, r6, lr}
 8015a8c:	b088      	sub	sp, #32
 8015a8e:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 8015a90:	491a      	ldr	r1, [pc, #104]	@ (8015afc <ssdp_listener_handler+0x78>)
 8015a92:	2000      	movs	r0, #0
 8015a94:	f7fc fa32 	bl	8011efc <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 8015a98:	4b19      	ldr	r3, [pc, #100]	@ (8015b00 <ssdp_listener_handler+0x7c>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	ad02      	add	r5, sp, #8
 8015a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015aa0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	f00e fb88 	bl	80241b8 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015aa8:	ae04      	add	r6, sp, #16
 8015aaa:	4916      	ldr	r1, [pc, #88]	@ (8015b04 <ssdp_listener_handler+0x80>)
 8015aac:	4630      	mov	r0, r6
 8015aae:	f00e fb77 	bl	80241a0 <mg_str_s>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	9300      	str	r3, [sp, #0]
 8015ab6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015aba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015abe:	f00e fd91 	bl	80245e4 <mg_match>
 8015ac2:	b918      	cbnz	r0, 8015acc <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 8015ac8:	b008      	add	sp, #32
 8015aca:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 8015acc:	ad06      	add	r5, sp, #24
 8015ace:	490e      	ldr	r1, [pc, #56]	@ (8015b08 <ssdp_listener_handler+0x84>)
 8015ad0:	4628      	mov	r0, r5
 8015ad2:	f00e fb65 	bl	80241a0 <mg_str_s>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015ade:	a902      	add	r1, sp, #8
 8015ae0:	c903      	ldmia	r1, {r0, r1}
 8015ae2:	f00e fd7f 	bl	80245e4 <mg_match>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d0ec      	beq.n	8015ac4 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015aea:	4908      	ldr	r1, [pc, #32]	@ (8015b0c <ssdp_listener_handler+0x88>)
 8015aec:	2000      	movs	r0, #0
 8015aee:	f7fc fa05 	bl	8011efc <logging>
			send_ssdp_notify(udp_listen_conn);
 8015af2:	4b03      	ldr	r3, [pc, #12]	@ (8015b00 <ssdp_listener_handler+0x7c>)
 8015af4:	6818      	ldr	r0, [r3, #0]
 8015af6:	f7ff ff73 	bl	80159e0 <send_ssdp_notify>
 8015afa:	e7e3      	b.n	8015ac4 <ssdp_listener_handler+0x40>
 8015afc:	08038274 	.word	0x08038274
 8015b00:	200028f0 	.word	0x200028f0
 8015b04:	080382a8 	.word	0x080382a8
 8015b08:	080382b4 	.word	0x080382b4
 8015b0c:	080382c4 	.word	0x080382c4

08015b10 <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 8015b10:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 8015b12:	490c      	ldr	r1, [pc, #48]	@ (8015b44 <ssdp_timer_handler+0x34>)
 8015b14:	2000      	movs	r0, #0
 8015b16:	f7fc f9f1 	bl	8011efc <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	461a      	mov	r2, r3
 8015b1e:	490a      	ldr	r1, [pc, #40]	@ (8015b48 <ssdp_timer_handler+0x38>)
 8015b20:	480a      	ldr	r0, [pc, #40]	@ (8015b4c <ssdp_timer_handler+0x3c>)
 8015b22:	6800      	ldr	r0, [r0, #0]
 8015b24:	f013 f838 	bl	8028b98 <mg_connect>
	if (conn == NULL){
 8015b28:	b130      	cbz	r0, 8015b38 <ssdp_timer_handler+0x28>
 8015b2a:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015b2c:	f7ff ff58 	bl	80159e0 <send_ssdp_notify>
	mg_close_conn(conn);
 8015b30:	4620      	mov	r0, r4
 8015b32:	f011 fa1b 	bl	8026f6c <mg_close_conn>
}
 8015b36:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015b38:	4905      	ldr	r1, [pc, #20]	@ (8015b50 <ssdp_timer_handler+0x40>)
 8015b3a:	2003      	movs	r0, #3
 8015b3c:	f7fc f9de 	bl	8011efc <logging>
		return ;
 8015b40:	e7f9      	b.n	8015b36 <ssdp_timer_handler+0x26>
 8015b42:	bf00      	nop
 8015b44:	080382f4 	.word	0x080382f4
 8015b48:	08038614 	.word	0x08038614
 8015b4c:	200028f8 	.word	0x200028f8
 8015b50:	0803830c 	.word	0x0803830c

08015b54 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	4606      	mov	r6, r0
 8015b58:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015b5a:	4910      	ldr	r1, [pc, #64]	@ (8015b9c <ssdp_set_id+0x48>)
 8015b5c:	2000      	movs	r0, #0
 8015b5e:	f7fc f9cd 	bl	8011efc <logging>
	if (id && (id_len > 0)){
 8015b62:	b1d6      	cbz	r6, 8015b9a <ssdp_set_id+0x46>
 8015b64:	b1cd      	cbz	r5, 8015b9a <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015b66:	4b0e      	ldr	r3, [pc, #56]	@ (8015ba0 <ssdp_set_id+0x4c>)
 8015b68:	6818      	ldr	r0, [r3, #0]
 8015b6a:	b108      	cbz	r0, 8015b70 <ssdp_set_id+0x1c>
 8015b6c:	f004 fed6 	bl	801a91c <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8015b70:	0068      	lsls	r0, r5, #1
 8015b72:	2101      	movs	r1, #1
 8015b74:	4408      	add	r0, r1
 8015b76:	f7ff fe6f 	bl	8015858 <my_calloc>
 8015b7a:	4b09      	ldr	r3, [pc, #36]	@ (8015ba0 <ssdp_set_id+0x4c>)
 8015b7c:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 8015b7e:	b160      	cbz	r0, 8015b9a <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015b80:	2400      	movs	r4, #0
 8015b82:	e008      	b.n	8015b96 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8015b84:	4b06      	ldr	r3, [pc, #24]	@ (8015ba0 <ssdp_set_id+0x4c>)
 8015b86:	6818      	ldr	r0, [r3, #0]
 8015b88:	5d32      	ldrb	r2, [r6, r4]
 8015b8a:	4906      	ldr	r1, [pc, #24]	@ (8015ba4 <ssdp_set_id+0x50>)
 8015b8c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8015b90:	f016 fab4 	bl	802c0fc <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8015b94:	3401      	adds	r4, #1
 8015b96:	42a5      	cmp	r5, r4
 8015b98:	d8f4      	bhi.n	8015b84 <ssdp_set_id+0x30>
}
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}
 8015b9c:	08038334 	.word	0x08038334
 8015ba0:	20002904 	.word	0x20002904
 8015ba4:	08037cc8 	.word	0x08037cc8

08015ba8 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 8015ba8:	b530      	push	{r4, r5, lr}
 8015baa:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 8015bac:	4b18      	ldr	r3, [pc, #96]	@ (8015c10 <ssdp_start_server+0x68>)
 8015bae:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8015bb0:	4b18      	ldr	r3, [pc, #96]	@ (8015c14 <ssdp_start_server+0x6c>)
 8015bb2:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 8015bb4:	2101      	movs	r1, #1
 8015bb6:	2028      	movs	r0, #40	@ 0x28
 8015bb8:	f7ff fe4e 	bl	8015858 <my_calloc>
 8015bbc:	4b16      	ldr	r3, [pc, #88]	@ (8015c18 <ssdp_start_server+0x70>)
 8015bbe:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 8015bc0:	b318      	cbz	r0, 8015c0a <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 8015bc2:	4d14      	ldr	r5, [pc, #80]	@ (8015c14 <ssdp_start_server+0x6c>)
 8015bc4:	2106      	movs	r1, #6
 8015bc6:	6828      	ldr	r0, [r5, #0]
 8015bc8:	f7ff ffc4 	bl	8015b54 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 8015bcc:	4913      	ldr	r1, [pc, #76]	@ (8015c1c <ssdp_start_server+0x74>)
 8015bce:	2001      	movs	r0, #1
 8015bd0:	f7fc f994 	bl	8011efc <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8015bd4:	4c0e      	ldr	r4, [pc, #56]	@ (8015c10 <ssdp_start_server+0x68>)
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	9302      	str	r3, [sp, #8]
 8015bda:	4b11      	ldr	r3, [pc, #68]	@ (8015c20 <ssdp_start_server+0x78>)
 8015bdc:	9301      	str	r3, [sp, #4]
 8015bde:	2303      	movs	r3, #3
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8015be6:	2300      	movs	r3, #0
 8015be8:	6820      	ldr	r0, [r4, #0]
 8015bea:	f00f fcbb 	bl	8025564 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 8015bee:	682b      	ldr	r3, [r5, #0]
 8015bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8015c24 <ssdp_start_server+0x7c>)
 8015bf2:	490d      	ldr	r1, [pc, #52]	@ (8015c28 <ssdp_start_server+0x80>)
 8015bf4:	6820      	ldr	r0, [r4, #0]
 8015bf6:	f011 fa93 	bl	8027120 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8015bfa:	682b      	ldr	r3, [r5, #0]
 8015bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8015c2c <ssdp_start_server+0x84>)
 8015bfe:	490c      	ldr	r1, [pc, #48]	@ (8015c30 <ssdp_start_server+0x88>)
 8015c00:	6820      	ldr	r0, [r4, #0]
 8015c02:	f011 fa09 	bl	8027018 <mg_listen>
 8015c06:	4b0b      	ldr	r3, [pc, #44]	@ (8015c34 <ssdp_start_server+0x8c>)
 8015c08:	6018      	str	r0, [r3, #0]
}
 8015c0a:	b005      	add	sp, #20
 8015c0c:	bd30      	pop	{r4, r5, pc}
 8015c0e:	bf00      	nop
 8015c10:	200028f8 	.word	0x200028f8
 8015c14:	200028f4 	.word	0x200028f4
 8015c18:	200028fc 	.word	0x200028fc
 8015c1c:	08038348 	.word	0x08038348
 8015c20:	08015b11 	.word	0x08015b11
 8015c24:	08015931 	.word	0x08015931
 8015c28:	08038360 	.word	0x08038360
 8015c2c:	08015a85 	.word	0x08015a85
 8015c30:	08038614 	.word	0x08038614
 8015c34:	200028f0 	.word	0x200028f0

08015c38 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8015c38:	4770      	bx	lr
	...

08015c3c <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015c3c:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 8015c3e:	4b02      	ldr	r3, [pc, #8]	@ (8015c48 <sFLASH_SPI_ReadBuffer+0xc>)
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	4798      	blx	r3
}
 8015c44:	bd08      	pop	{r3, pc}
 8015c46:	bf00      	nop
 8015c48:	20002948 	.word	0x20002948

08015c4c <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8015c4c:	b410      	push	{r4}
	if (chip_select){
 8015c4e:	b158      	cbz	r0, 8015c68 <SPI_flash_reg_cb+0x1c>
 8015c50:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 8015c52:	4809      	ldr	r0, [pc, #36]	@ (8015c78 <SPI_flash_reg_cb+0x2c>)
 8015c54:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8015c56:	b159      	cbz	r1, 8015c70 <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8015c58:	4807      	ldr	r0, [pc, #28]	@ (8015c78 <SPI_flash_reg_cb+0x2c>)
 8015c5a:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8015c5c:	4906      	ldr	r1, [pc, #24]	@ (8015c78 <SPI_flash_reg_cb+0x2c>)
 8015c5e:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 8015c60:	608b      	str	r3, [r1, #8]
}
 8015c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c66:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8015c68:	4803      	ldr	r0, [pc, #12]	@ (8015c78 <SPI_flash_reg_cb+0x2c>)
 8015c6a:	4c04      	ldr	r4, [pc, #16]	@ (8015c7c <SPI_flash_reg_cb+0x30>)
 8015c6c:	60c4      	str	r4, [r0, #12]
 8015c6e:	e7f2      	b.n	8015c56 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 8015c70:	4901      	ldr	r1, [pc, #4]	@ (8015c78 <SPI_flash_reg_cb+0x2c>)
 8015c72:	4802      	ldr	r0, [pc, #8]	@ (8015c7c <SPI_flash_reg_cb+0x30>)
 8015c74:	6108      	str	r0, [r1, #16]
 8015c76:	e7f1      	b.n	8015c5c <SPI_flash_reg_cb+0x10>
 8015c78:	20002948 	.word	0x20002948
 8015c7c:	08015c39 	.word	0x08015c39

08015c80 <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 8015c80:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 8015c82:	4b02      	ldr	r3, [pc, #8]	@ (8015c8c <sFLASH_CS_LOW+0xc>)
 8015c84:	68db      	ldr	r3, [r3, #12]
 8015c86:	4798      	blx	r3
}
 8015c88:	bd08      	pop	{r3, pc}
 8015c8a:	bf00      	nop
 8015c8c:	20002948 	.word	0x20002948

08015c90 <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 8015c90:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 8015c92:	4b02      	ldr	r3, [pc, #8]	@ (8015c9c <sFLASH_CS_HIGH+0xc>)
 8015c94:	691b      	ldr	r3, [r3, #16]
 8015c96:	4798      	blx	r3
}
 8015c98:	bd08      	pop	{r3, pc}
 8015c9a:	bf00      	nop
 8015c9c:	20002948 	.word	0x20002948

08015ca0 <sFLASH_ReadByte>:
{
 8015ca0:	b500      	push	{lr}
 8015ca2:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 8015ca4:	4b05      	ldr	r3, [pc, #20]	@ (8015cbc <sFLASH_ReadByte+0x1c>)
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	2101      	movs	r1, #1
 8015caa:	f10d 0007 	add.w	r0, sp, #7
 8015cae:	4798      	blx	r3
}
 8015cb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015cb4:	b003      	add	sp, #12
 8015cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8015cba:	bf00      	nop
 8015cbc:	20002948 	.word	0x20002948

08015cc0 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015cc0:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 8015cc2:	4b02      	ldr	r3, [pc, #8]	@ (8015ccc <sFLASH_SendByte+0xc>)
 8015cc4:	689b      	ldr	r3, [r3, #8]
 8015cc6:	4798      	blx	r3
}
 8015cc8:	bd08      	pop	{r3, pc}
 8015cca:	bf00      	nop
 8015ccc:	20002948 	.word	0x20002948

08015cd0 <sFLASH_Reset>:
void sFLASH_Reset(void){
 8015cd0:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 8015cd2:	f7ff ffd5 	bl	8015c80 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015cd6:	2066      	movs	r0, #102	@ 0x66
 8015cd8:	f7ff fff2 	bl	8015cc0 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8015cdc:	2099      	movs	r0, #153	@ 0x99
 8015cde:	f7ff ffef 	bl	8015cc0 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015ce2:	f7ff ffd5 	bl	8015c90 <sFLASH_CS_HIGH>
}
 8015ce6:	bd08      	pop	{r3, pc}

08015ce8 <sFLASH_Init>:
void sFLASH_Init(void){
 8015ce8:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8015cea:	2064      	movs	r0, #100	@ 0x64
 8015cec:	f000 fa16 	bl	801611c <HAL_Delay>
    sFLASH_Reset();
 8015cf0:	f7ff ffee 	bl	8015cd0 <sFLASH_Reset>
    HAL_Delay(100);
 8015cf4:	2064      	movs	r0, #100	@ 0x64
 8015cf6:	f000 fa11 	bl	801611c <HAL_Delay>
    HAL_Delay(100);
 8015cfa:	2064      	movs	r0, #100	@ 0x64
 8015cfc:	f000 fa0e 	bl	801611c <HAL_Delay>
}
 8015d00:	bd08      	pop	{r3, pc}

08015d02 <sFLASH_ReadBuffer>:
{
 8015d02:	b570      	push	{r4, r5, r6, lr}
 8015d04:	4606      	mov	r6, r0
 8015d06:	460c      	mov	r4, r1
 8015d08:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 8015d0a:	f7ff ffb9 	bl	8015c80 <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 8015d0e:	2d10      	cmp	r5, #16
 8015d10:	d917      	bls.n	8015d42 <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8015d12:	200b      	movs	r0, #11
 8015d14:	f7ff ffd4 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015d18:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015d1c:	f7ff ffd0 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 8015d20:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015d24:	f7ff ffcc 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015d28:	b2e0      	uxtb	r0, r4
 8015d2a:	f7ff ffc9 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 8015d2e:	2000      	movs	r0, #0
 8015d30:	f7ff ffc6 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8015d34:	4629      	mov	r1, r5
 8015d36:	4630      	mov	r0, r6
 8015d38:	f7ff ff80 	bl	8015c3c <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8015d3c:	f7ff ffa8 	bl	8015c90 <sFLASH_CS_HIGH>
}
 8015d40:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8015d42:	2003      	movs	r0, #3
 8015d44:	f7ff ffbc 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015d48:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015d4c:	f7ff ffb8 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015d50:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015d54:	f7ff ffb4 	bl	8015cc0 <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015d58:	b2e0      	uxtb	r0, r4
 8015d5a:	f7ff ffb1 	bl	8015cc0 <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015d5e:	e004      	b.n	8015d6a <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 8015d60:	f7ff ff9e 	bl	8015ca0 <sFLASH_ReadByte>
 8015d64:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015d68:	4625      	mov	r5, r4
 8015d6a:	1e6b      	subs	r3, r5, #1
 8015d6c:	b29c      	uxth	r4, r3
 8015d6e:	2d00      	cmp	r5, #0
 8015d70:	d1f6      	bne.n	8015d60 <sFLASH_ReadBuffer+0x5e>
 8015d72:	e7e3      	b.n	8015d3c <sFLASH_ReadBuffer+0x3a>

08015d74 <sFLASH_ReadID>:
{
 8015d74:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 8015d76:	f7ff ff83 	bl	8015c80 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015d7a:	f7ff ff89 	bl	8015c90 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015d7e:	f7ff ff7f 	bl	8015c80 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015d82:	f7ff ff85 	bl	8015c90 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015d86:	f7ff ff7b 	bl	8015c80 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015d8a:	209f      	movs	r0, #159	@ 0x9f
 8015d8c:	f7ff ff98 	bl	8015cc0 <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 8015d90:	f7ff ff86 	bl	8015ca0 <sFLASH_ReadByte>
 8015d94:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 8015d96:	f7ff ff83 	bl	8015ca0 <sFLASH_ReadByte>
 8015d9a:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 8015d9c:	f7ff ff80 	bl	8015ca0 <sFLASH_ReadByte>
 8015da0:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 8015da2:	f7ff ff75 	bl	8015c90 <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015da6:	0224      	lsls	r4, r4, #8
 8015da8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 8015dac:	ea44 0005 	orr.w	r0, r4, r5
 8015db0:	bd70      	pop	{r4, r5, r6, pc}
	...

08015db4 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4605      	mov	r5, r0
	sFLASH_Init();
 8015db8:	f7ff ff96 	bl	8015ce8 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 8015dbc:	f7ff ffda 	bl	8015d74 <sFLASH_ReadID>
	switch (flash_id) {
 8015dc0:	4b52      	ldr	r3, [pc, #328]	@ (8015f0c <sFLASH_GetInfo+0x158>)
 8015dc2:	4298      	cmp	r0, r3
 8015dc4:	f000 8085 	beq.w	8015ed2 <sFLASH_GetInfo+0x11e>
 8015dc8:	f0c0 809c 	bcc.w	8015f04 <sFLASH_GetInfo+0x150>
 8015dcc:	4b50      	ldr	r3, [pc, #320]	@ (8015f10 <sFLASH_GetInfo+0x15c>)
 8015dce:	4298      	cmp	r0, r3
 8015dd0:	f200 8098 	bhi.w	8015f04 <sFLASH_GetInfo+0x150>
 8015dd4:	3b03      	subs	r3, #3
 8015dd6:	4298      	cmp	r0, r3
 8015dd8:	f0c0 8094 	bcc.w	8015f04 <sFLASH_GetInfo+0x150>
 8015ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8015f14 <sFLASH_GetInfo+0x160>)
 8015dde:	4403      	add	r3, r0
 8015de0:	2b03      	cmp	r3, #3
 8015de2:	f200 808f 	bhi.w	8015f04 <sFLASH_GetInfo+0x150>
 8015de6:	e8df f003 	tbb	[pc, r3]
 8015dea:	2b02      	.short	0x2b02
 8015dec:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8015dee:	4c4a      	ldr	r4, [pc, #296]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015df0:	4b4a      	ldr	r3, [pc, #296]	@ (8015f1c <sFLASH_GetInfo+0x168>)
 8015df2:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015df4:	2301      	movs	r3, #1
 8015df6:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015df8:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015dfe:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e04:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8015e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015e0a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 8015e0c:	2231      	movs	r2, #49	@ 0x31
 8015e0e:	4944      	ldr	r1, [pc, #272]	@ (8015f20 <sFLASH_GetInfo+0x16c>)
 8015e10:	f104 000e 	add.w	r0, r4, #14
 8015e14:	f016 fd7b 	bl	802c90e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015e18:	2300      	movs	r3, #0
 8015e1a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 8015e1e:	46ac      	mov	ip, r5
 8015e20:	4c3d      	ldr	r4, [pc, #244]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015e38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8015e3c:	4628      	mov	r0, r5
 8015e3e:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015e40:	4c35      	ldr	r4, [pc, #212]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015e42:	4b38      	ldr	r3, [pc, #224]	@ (8015f24 <sFLASH_GetInfo+0x170>)
 8015e44:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015e46:	2301      	movs	r3, #1
 8015e48:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015e4a:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015e50:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e56:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015e5c:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 8015e5e:	2231      	movs	r2, #49	@ 0x31
 8015e60:	4931      	ldr	r1, [pc, #196]	@ (8015f28 <sFLASH_GetInfo+0x174>)
 8015e62:	f104 000e 	add.w	r0, r4, #14
 8015e66:	f016 fd52 	bl	802c90e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015e70:	e7d5      	b.n	8015e1e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8015e72:	4c29      	ldr	r4, [pc, #164]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015e74:	4b2d      	ldr	r3, [pc, #180]	@ (8015f2c <sFLASH_GetInfo+0x178>)
 8015e76:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015e7c:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015e82:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015e88:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 8015e8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015e8e:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 8015e90:	2231      	movs	r2, #49	@ 0x31
 8015e92:	4927      	ldr	r1, [pc, #156]	@ (8015f30 <sFLASH_GetInfo+0x17c>)
 8015e94:	f104 000e 	add.w	r0, r4, #14
 8015e98:	f016 fd39 	bl	802c90e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015ea2:	e7bc      	b.n	8015e1e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8015ea4:	4c1c      	ldr	r4, [pc, #112]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8015f10 <sFLASH_GetInfo+0x15c>)
 8015ea8:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015eaa:	2301      	movs	r3, #1
 8015eac:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015eae:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015eb4:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015eba:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 8015ebc:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 8015ebe:	2231      	movs	r2, #49	@ 0x31
 8015ec0:	491c      	ldr	r1, [pc, #112]	@ (8015f34 <sFLASH_GetInfo+0x180>)
 8015ec2:	f104 000e 	add.w	r0, r4, #14
 8015ec6:	f016 fd22 	bl	802c90e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015eca:	2300      	movs	r3, #0
 8015ecc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015ed0:	e7a5      	b.n	8015e1e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8015ed2:	4c11      	ldr	r4, [pc, #68]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8015f0c <sFLASH_GetInfo+0x158>)
 8015ed6:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015ed8:	2301      	movs	r3, #1
 8015eda:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015edc:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015ee2:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ee8:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015eee:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 8015ef0:	2231      	movs	r2, #49	@ 0x31
 8015ef2:	4911      	ldr	r1, [pc, #68]	@ (8015f38 <sFLASH_GetInfo+0x184>)
 8015ef4:	f104 000e 	add.w	r0, r4, #14
 8015ef8:	f016 fd09 	bl	802c90e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015efc:	2300      	movs	r3, #0
 8015efe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 8015f02:	e78c      	b.n	8015e1e <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015f04:	4b04      	ldr	r3, [pc, #16]	@ (8015f18 <sFLASH_GetInfo+0x164>)
 8015f06:	2200      	movs	r2, #0
 8015f08:	601a      	str	r2, [r3, #0]
			break;
 8015f0a:	e788      	b.n	8015e1e <sFLASH_GetInfo+0x6a>
 8015f0c:	00c22016 	.word	0x00c22016
 8015f10:	00ef4018 	.word	0x00ef4018
 8015f14:	ff10bfeb 	.word	0xff10bfeb
 8015f18:	20002908 	.word	0x20002908
 8015f1c:	00ef4015 	.word	0x00ef4015
 8015f20:	08038630 	.word	0x08038630
 8015f24:	00ef4016 	.word	0x00ef4016
 8015f28:	08038638 	.word	0x08038638
 8015f2c:	00ef4017 	.word	0x00ef4017
 8015f30:	08038640 	.word	0x08038640
 8015f34:	08038648 	.word	0x08038648
 8015f38:	08038650 	.word	0x08038650

08015f3c <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015f3c:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015f3e:	f7ff fe9f 	bl	8015c80 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015f42:	2006      	movs	r0, #6
 8015f44:	f7ff febc 	bl	8015cc0 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015f48:	f7ff fea2 	bl	8015c90 <sFLASH_CS_HIGH>
}
 8015f4c:	bd08      	pop	{r3, pc}
	...

08015f50 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015f50:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 8015f52:	4d09      	ldr	r5, [pc, #36]	@ (8015f78 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8015f54:	f7ff fe94 	bl	8015c80 <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015f58:	2005      	movs	r0, #5
 8015f5a:	f7ff feb1 	bl	8015cc0 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8015f5e:	f7ff fe9f 	bl	8015ca0 <sFLASH_ReadByte>
 8015f62:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8015f64:	f7ff fe94 	bl	8015c90 <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8015f68:	462b      	mov	r3, r5
 8015f6a:	3d01      	subs	r5, #1
 8015f6c:	b113      	cbz	r3, 8015f74 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015f6e:	f014 0f01 	tst.w	r4, #1
 8015f72:	d1ef      	bne.n	8015f54 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 8015f74:	bd38      	pop	{r3, r4, r5, pc}
 8015f76:	bf00      	nop
 8015f78:	000186a0 	.word	0x000186a0

08015f7c <sFLASH_EraseSector>:
{
 8015f7c:	b510      	push	{r4, lr}
 8015f7e:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 8015f80:	f7ff ffdc 	bl	8015f3c <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8015f84:	f7ff fe7c 	bl	8015c80 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015f88:	2020      	movs	r0, #32
 8015f8a:	f7ff fe99 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8015f8e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015f92:	f7ff fe95 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8015f96:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015f9a:	f7ff fe91 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 8015f9e:	b2e0      	uxtb	r0, r4
 8015fa0:	f7ff fe8e 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8015fa4:	f7ff fe74 	bl	8015c90 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8015fa8:	f7ff ffd2 	bl	8015f50 <sFLASH_WaitForWriteEnd>
}
 8015fac:	bd10      	pop	{r4, pc}

08015fae <sFLASH_WritePage>:
{
 8015fae:	b570      	push	{r4, r5, r6, lr}
 8015fb0:	4606      	mov	r6, r0
 8015fb2:	460c      	mov	r4, r1
 8015fb4:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 8015fb6:	f7ff ffc1 	bl	8015f3c <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 8015fba:	f7ff fe61 	bl	8015c80 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8015fbe:	2002      	movs	r0, #2
 8015fc0:	f7ff fe7e 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015fc4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015fc8:	f7ff fe7a 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8015fcc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015fd0:	f7ff fe76 	bl	8015cc0 <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015fd4:	b2e0      	uxtb	r0, r4
 8015fd6:	f7ff fe73 	bl	8015cc0 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015fda:	e004      	b.n	8015fe6 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8015fdc:	f816 0b01 	ldrb.w	r0, [r6], #1
 8015fe0:	f7ff fe6e 	bl	8015cc0 <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015fe4:	4625      	mov	r5, r4
 8015fe6:	1e6b      	subs	r3, r5, #1
 8015fe8:	b29c      	uxth	r4, r3
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	d1f6      	bne.n	8015fdc <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 8015fee:	f7ff fe4f 	bl	8015c90 <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 8015ff2:	f7ff ffad 	bl	8015f50 <sFLASH_WaitForWriteEnd>
}
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}

08015ff8 <sFLASH_WriteBuffer>:
{
 8015ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ffc:	4605      	mov	r5, r0
 8015ffe:	460c      	mov	r4, r1
 8016000:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8016002:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8016004:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8016006:	b9d3      	cbnz	r3, 801603e <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016008:	b971      	cbnz	r1, 8016028 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801600a:	4621      	mov	r1, r4
 801600c:	f7ff ffcf 	bl	8015fae <sFLASH_WritePage>
 8016010:	e013      	b.n	801603a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016016:	4621      	mov	r1, r4
 8016018:	4628      	mov	r0, r5
 801601a:	f7ff ffc8 	bl	8015fae <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801601e:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 8016022:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8016026:	4631      	mov	r1, r6
 8016028:	1e4b      	subs	r3, r1, #1
 801602a:	b2de      	uxtb	r6, r3
 801602c:	2900      	cmp	r1, #0
 801602e:	d1f0      	bne.n	8016012 <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8016030:	b2fa      	uxtb	r2, r7
 8016032:	4621      	mov	r1, r4
 8016034:	4628      	mov	r0, r5
 8016036:	f7ff ffba 	bl	8015fae <sFLASH_WritePage>
}
 801603a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801603e:	f1c3 0800 	rsb	r8, r3, #0
 8016042:	fa5f f888 	uxtb.w	r8, r8
 8016046:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8016048:	b9a1      	cbnz	r1, 8016074 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 801604a:	4590      	cmp	r8, r2
 801604c:	d20d      	bcs.n	801606a <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 801604e:	4413      	add	r3, r2
 8016050:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016052:	4642      	mov	r2, r8
 8016054:	4621      	mov	r1, r4
 8016056:	f7ff ffaa 	bl	8015fae <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 801605a:	4632      	mov	r2, r6
 801605c:	eb08 0104 	add.w	r1, r8, r4
 8016060:	eb05 0008 	add.w	r0, r5, r8
 8016064:	f7ff ffa3 	bl	8015fae <sFLASH_WritePage>
 8016068:	e7e7      	b.n	801603a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801606a:	463a      	mov	r2, r7
 801606c:	4621      	mov	r1, r4
 801606e:	f7ff ff9e 	bl	8015fae <sFLASH_WritePage>
 8016072:	e7e2      	b.n	801603a <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 8016074:	eba7 0708 	sub.w	r7, r7, r8
 8016078:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 801607c:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8016080:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8016082:	4642      	mov	r2, r8
 8016084:	4621      	mov	r1, r4
 8016086:	f7ff ff92 	bl	8015fae <sFLASH_WritePage>
      WriteAddr +=  count;
 801608a:	4444      	add	r4, r8
      pBuffer += count;
 801608c:	4445      	add	r5, r8
      while (NumOfPage--)
 801608e:	e00a      	b.n	80160a6 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8016090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016094:	4621      	mov	r1, r4
 8016096:	4628      	mov	r0, r5
 8016098:	f7ff ff89 	bl	8015fae <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801609c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80160a0:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80160a4:	4646      	mov	r6, r8
 80160a6:	1e73      	subs	r3, r6, #1
 80160a8:	fa5f f883 	uxtb.w	r8, r3
 80160ac:	2e00      	cmp	r6, #0
 80160ae:	d1ef      	bne.n	8016090 <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 80160b0:	2f00      	cmp	r7, #0
 80160b2:	d0c2      	beq.n	801603a <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80160b4:	fa5f f289 	uxtb.w	r2, r9
 80160b8:	4621      	mov	r1, r4
 80160ba:	4628      	mov	r0, r5
 80160bc:	f7ff ff77 	bl	8015fae <sFLASH_WritePage>
}
 80160c0:	e7bb      	b.n	801603a <sFLASH_WriteBuffer+0x42>
	...

080160c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80160c4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80160c6:	4b0b      	ldr	r3, [pc, #44]	@ (80160f4 <HAL_Init+0x30>)
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80160ce:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80160d6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80160de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80160e0:	2003      	movs	r0, #3
 80160e2:	f000 f883 	bl	80161ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80160e6:	200f      	movs	r0, #15
 80160e8:	f7fc f8f8 	bl	80122dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80160ec:	f7fc f8d4 	bl	8012298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80160f0:	2000      	movs	r0, #0
 80160f2:	bd08      	pop	{r3, pc}
 80160f4:	40023c00 	.word	0x40023c00

080160f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80160f8:	4a03      	ldr	r2, [pc, #12]	@ (8016108 <HAL_IncTick+0x10>)
 80160fa:	6811      	ldr	r1, [r2, #0]
 80160fc:	4b03      	ldr	r3, [pc, #12]	@ (801610c <HAL_IncTick+0x14>)
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	440b      	add	r3, r1
 8016102:	6013      	str	r3, [r2, #0]
}
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	2000295c 	.word	0x2000295c
 801610c:	20000106 	.word	0x20000106

08016110 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8016110:	4b01      	ldr	r3, [pc, #4]	@ (8016118 <HAL_GetTick+0x8>)
 8016112:	6818      	ldr	r0, [r3, #0]
}
 8016114:	4770      	bx	lr
 8016116:	bf00      	nop
 8016118:	2000295c 	.word	0x2000295c

0801611c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801611c:	b538      	push	{r3, r4, r5, lr}
 801611e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8016120:	f7ff fff6 	bl	8016110 <HAL_GetTick>
 8016124:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016126:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801612a:	d002      	beq.n	8016132 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 801612c:	4b04      	ldr	r3, [pc, #16]	@ (8016140 <HAL_Delay+0x24>)
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016132:	f7ff ffed 	bl	8016110 <HAL_GetTick>
 8016136:	1b40      	subs	r0, r0, r5
 8016138:	42a0      	cmp	r0, r4
 801613a:	d3fa      	bcc.n	8016132 <HAL_Delay+0x16>
  {
  }
}
 801613c:	bd38      	pop	{r3, r4, r5, pc}
 801613e:	bf00      	nop
 8016140:	20000106 	.word	0x20000106

08016144 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8016144:	2800      	cmp	r0, #0
 8016146:	db07      	blt.n	8016158 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016148:	f000 021f 	and.w	r2, r0, #31
 801614c:	0940      	lsrs	r0, r0, #5
 801614e:	2301      	movs	r3, #1
 8016150:	4093      	lsls	r3, r2
 8016152:	4a02      	ldr	r2, [pc, #8]	@ (801615c <__NVIC_EnableIRQ+0x18>)
 8016154:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	e000e100 	.word	0xe000e100

08016160 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8016160:	2800      	cmp	r0, #0
 8016162:	db08      	blt.n	8016176 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016164:	0109      	lsls	r1, r1, #4
 8016166:	b2c9      	uxtb	r1, r1
 8016168:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 801616c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8016170:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8016174:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016176:	f000 000f 	and.w	r0, r0, #15
 801617a:	0109      	lsls	r1, r1, #4
 801617c:	b2c9      	uxtb	r1, r1
 801617e:	4b01      	ldr	r3, [pc, #4]	@ (8016184 <__NVIC_SetPriority+0x24>)
 8016180:	5419      	strb	r1, [r3, r0]
  }
}
 8016182:	4770      	bx	lr
 8016184:	e000ed14 	.word	0xe000ed14

08016188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016188:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801618a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801618e:	f1c0 0c07 	rsb	ip, r0, #7
 8016192:	f1bc 0f04 	cmp.w	ip, #4
 8016196:	bf28      	it	cs
 8016198:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801619c:	1d03      	adds	r3, r0, #4
 801619e:	2b06      	cmp	r3, #6
 80161a0:	d90f      	bls.n	80161c2 <NVIC_EncodePriority+0x3a>
 80161a2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161a4:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80161a8:	fa0e f00c 	lsl.w	r0, lr, ip
 80161ac:	ea21 0100 	bic.w	r1, r1, r0
 80161b0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80161b2:	fa0e fe03 	lsl.w	lr, lr, r3
 80161b6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80161ba:	ea41 0002 	orr.w	r0, r1, r2
 80161be:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80161c2:	2300      	movs	r3, #0
 80161c4:	e7ee      	b.n	80161a4 <NVIC_EncodePriority+0x1c>
	...

080161c8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80161c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80161cc:	4905      	ldr	r1, [pc, #20]	@ (80161e4 <__NVIC_SystemReset+0x1c>)
 80161ce:	68ca      	ldr	r2, [r1, #12]
 80161d0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80161d4:	4b04      	ldr	r3, [pc, #16]	@ (80161e8 <__NVIC_SystemReset+0x20>)
 80161d6:	4313      	orrs	r3, r2
 80161d8:	60cb      	str	r3, [r1, #12]
 80161da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80161de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80161e0:	e7fd      	b.n	80161de <__NVIC_SystemReset+0x16>
 80161e2:	bf00      	nop
 80161e4:	e000ed00 	.word	0xe000ed00
 80161e8:	05fa0004 	.word	0x05fa0004

080161ec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80161ec:	4a07      	ldr	r2, [pc, #28]	@ (801620c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80161ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80161f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80161f4:	041b      	lsls	r3, r3, #16
 80161f6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80161f8:	0200      	lsls	r0, r0, #8
 80161fa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80161fe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8016200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8016204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8016208:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801620a:	4770      	bx	lr
 801620c:	e000ed00 	.word	0xe000ed00

08016210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016210:	b510      	push	{r4, lr}
 8016212:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016214:	4b05      	ldr	r3, [pc, #20]	@ (801622c <HAL_NVIC_SetPriority+0x1c>)
 8016216:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016218:	f3c0 2002 	ubfx	r0, r0, #8, #3
 801621c:	f7ff ffb4 	bl	8016188 <NVIC_EncodePriority>
 8016220:	4601      	mov	r1, r0
 8016222:	4620      	mov	r0, r4
 8016224:	f7ff ff9c 	bl	8016160 <__NVIC_SetPriority>
}
 8016228:	bd10      	pop	{r4, pc}
 801622a:	bf00      	nop
 801622c:	e000ed00 	.word	0xe000ed00

08016230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016230:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016232:	f7ff ff87 	bl	8016144 <__NVIC_EnableIRQ>
}
 8016236:	bd08      	pop	{r3, pc}

08016238 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8016238:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 801623a:	f7ff ffc5 	bl	80161c8 <__NVIC_SystemReset>
	...

08016240 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016240:	2300      	movs	r3, #0
 8016242:	2b0f      	cmp	r3, #15
 8016244:	f200 80d7 	bhi.w	80163f6 <HAL_GPIO_Init+0x1b6>
{
 8016248:	b570      	push	{r4, r5, r6, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	e065      	b.n	801631a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801624e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016250:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016254:	2403      	movs	r4, #3
 8016256:	fa04 f40e 	lsl.w	r4, r4, lr
 801625a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 801625e:	68cc      	ldr	r4, [r1, #12]
 8016260:	fa04 f40e 	lsl.w	r4, r4, lr
 8016264:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8016266:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016268:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801626a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801626e:	684a      	ldr	r2, [r1, #4]
 8016270:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8016274:	409a      	lsls	r2, r3
 8016276:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8016278:	6042      	str	r2, [r0, #4]
 801627a:	e05c      	b.n	8016336 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801627c:	08dc      	lsrs	r4, r3, #3
 801627e:	3408      	adds	r4, #8
 8016280:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016284:	f003 0507 	and.w	r5, r3, #7
 8016288:	00ad      	lsls	r5, r5, #2
 801628a:	f04f 0e0f 	mov.w	lr, #15
 801628e:	fa0e fe05 	lsl.w	lr, lr, r5
 8016292:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016296:	690a      	ldr	r2, [r1, #16]
 8016298:	40aa      	lsls	r2, r5
 801629a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 801629e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80162a2:	e05c      	b.n	801635e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80162a4:	2204      	movs	r2, #4
 80162a6:	e000      	b.n	80162aa <HAL_GPIO_Init+0x6a>
 80162a8:	2200      	movs	r2, #0
 80162aa:	fa02 f20e 	lsl.w	r2, r2, lr
 80162ae:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80162b0:	3402      	adds	r4, #2
 80162b2:	4d51      	ldr	r5, [pc, #324]	@ (80163f8 <HAL_GPIO_Init+0x1b8>)
 80162b4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80162b8:	4a50      	ldr	r2, [pc, #320]	@ (80163fc <HAL_GPIO_Init+0x1bc>)
 80162ba:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80162bc:	ea6f 020c 	mvn.w	r2, ip
 80162c0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80162c4:	684e      	ldr	r6, [r1, #4]
 80162c6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80162ca:	d001      	beq.n	80162d0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80162cc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80162d0:	4c4a      	ldr	r4, [pc, #296]	@ (80163fc <HAL_GPIO_Init+0x1bc>)
 80162d2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80162d4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80162d6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80162da:	684e      	ldr	r6, [r1, #4]
 80162dc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80162e0:	d001      	beq.n	80162e6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80162e2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80162e6:	4c45      	ldr	r4, [pc, #276]	@ (80163fc <HAL_GPIO_Init+0x1bc>)
 80162e8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80162ea:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80162ec:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80162f0:	684e      	ldr	r6, [r1, #4]
 80162f2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80162f6:	d001      	beq.n	80162fc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80162f8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80162fc:	4c3f      	ldr	r4, [pc, #252]	@ (80163fc <HAL_GPIO_Init+0x1bc>)
 80162fe:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016300:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8016302:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016304:	684d      	ldr	r5, [r1, #4]
 8016306:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 801630a:	d001      	beq.n	8016310 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 801630c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8016310:	4c3a      	ldr	r4, [pc, #232]	@ (80163fc <HAL_GPIO_Init+0x1bc>)
 8016312:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016314:	3301      	adds	r3, #1
 8016316:	2b0f      	cmp	r3, #15
 8016318:	d86b      	bhi.n	80163f2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 801631a:	2201      	movs	r2, #1
 801631c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801631e:	680c      	ldr	r4, [r1, #0]
 8016320:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8016324:	ea32 0404 	bics.w	r4, r2, r4
 8016328:	d1f4      	bne.n	8016314 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801632a:	684c      	ldr	r4, [r1, #4]
 801632c:	f004 0403 	and.w	r4, r4, #3
 8016330:	3c01      	subs	r4, #1
 8016332:	2c01      	cmp	r4, #1
 8016334:	d98b      	bls.n	801624e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016336:	684a      	ldr	r2, [r1, #4]
 8016338:	f002 0203 	and.w	r2, r2, #3
 801633c:	2a03      	cmp	r2, #3
 801633e:	d009      	beq.n	8016354 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8016340:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016342:	005d      	lsls	r5, r3, #1
 8016344:	2203      	movs	r2, #3
 8016346:	40aa      	lsls	r2, r5
 8016348:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801634c:	688a      	ldr	r2, [r1, #8]
 801634e:	40aa      	lsls	r2, r5
 8016350:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8016352:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016354:	684a      	ldr	r2, [r1, #4]
 8016356:	f002 0203 	and.w	r2, r2, #3
 801635a:	2a02      	cmp	r2, #2
 801635c:	d08e      	beq.n	801627c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 801635e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016360:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016364:	2203      	movs	r2, #3
 8016366:	fa02 f20e 	lsl.w	r2, r2, lr
 801636a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801636e:	684a      	ldr	r2, [r1, #4]
 8016370:	f002 0203 	and.w	r2, r2, #3
 8016374:	fa02 f20e 	lsl.w	r2, r2, lr
 8016378:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 801637a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801637c:	684a      	ldr	r2, [r1, #4]
 801637e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8016382:	d0c7      	beq.n	8016314 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016384:	2200      	movs	r2, #0
 8016386:	9201      	str	r2, [sp, #4]
 8016388:	4a1d      	ldr	r2, [pc, #116]	@ (8016400 <HAL_GPIO_Init+0x1c0>)
 801638a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 801638c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8016390:	6454      	str	r4, [r2, #68]	@ 0x44
 8016392:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8016394:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8016398:	9201      	str	r2, [sp, #4]
 801639a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 801639c:	089c      	lsrs	r4, r3, #2
 801639e:	1ca5      	adds	r5, r4, #2
 80163a0:	4a15      	ldr	r2, [pc, #84]	@ (80163f8 <HAL_GPIO_Init+0x1b8>)
 80163a2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80163a6:	f003 0e03 	and.w	lr, r3, #3
 80163aa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80163ae:	220f      	movs	r2, #15
 80163b0:	fa02 f20e 	lsl.w	r2, r2, lr
 80163b4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80163b8:	4a12      	ldr	r2, [pc, #72]	@ (8016404 <HAL_GPIO_Init+0x1c4>)
 80163ba:	4290      	cmp	r0, r2
 80163bc:	f43f af74 	beq.w	80162a8 <HAL_GPIO_Init+0x68>
 80163c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80163c4:	4290      	cmp	r0, r2
 80163c6:	d00e      	beq.n	80163e6 <HAL_GPIO_Init+0x1a6>
 80163c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80163cc:	4290      	cmp	r0, r2
 80163ce:	d00c      	beq.n	80163ea <HAL_GPIO_Init+0x1aa>
 80163d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80163d4:	4290      	cmp	r0, r2
 80163d6:	d00a      	beq.n	80163ee <HAL_GPIO_Init+0x1ae>
 80163d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80163dc:	4290      	cmp	r0, r2
 80163de:	f43f af61 	beq.w	80162a4 <HAL_GPIO_Init+0x64>
 80163e2:	2207      	movs	r2, #7
 80163e4:	e761      	b.n	80162aa <HAL_GPIO_Init+0x6a>
 80163e6:	2201      	movs	r2, #1
 80163e8:	e75f      	b.n	80162aa <HAL_GPIO_Init+0x6a>
 80163ea:	2202      	movs	r2, #2
 80163ec:	e75d      	b.n	80162aa <HAL_GPIO_Init+0x6a>
 80163ee:	2203      	movs	r2, #3
 80163f0:	e75b      	b.n	80162aa <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80163f2:	b002      	add	sp, #8
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	4770      	bx	lr
 80163f8:	40013800 	.word	0x40013800
 80163fc:	40013c00 	.word	0x40013c00
 8016400:	40023800 	.word	0x40023800
 8016404:	40020000 	.word	0x40020000

08016408 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016408:	2300      	movs	r3, #0
 801640a:	2b0f      	cmp	r3, #15
 801640c:	d87c      	bhi.n	8016508 <HAL_GPIO_DeInit+0x100>
{
 801640e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016410:	e02d      	b.n	801646e <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8016412:	2504      	movs	r5, #4
 8016414:	e000      	b.n	8016418 <HAL_GPIO_DeInit+0x10>
 8016416:	2500      	movs	r5, #0
 8016418:	fa05 f50c 	lsl.w	r5, r5, ip
 801641c:	42a5      	cmp	r5, r4
 801641e:	d057      	beq.n	80164d0 <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016420:	6804      	ldr	r4, [r0, #0]
 8016422:	005d      	lsls	r5, r3, #1
 8016424:	f04f 0c03 	mov.w	ip, #3
 8016428:	fa0c fc05 	lsl.w	ip, ip, r5
 801642c:	ea24 040c 	bic.w	r4, r4, ip
 8016430:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016432:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8016436:	f10e 0e08 	add.w	lr, lr, #8
 801643a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 801643e:	f003 0607 	and.w	r6, r3, #7
 8016442:	00b6      	lsls	r6, r6, #2
 8016444:	250f      	movs	r5, #15
 8016446:	40b5      	lsls	r5, r6
 8016448:	ea24 0405 	bic.w	r4, r4, r5
 801644c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016450:	68c4      	ldr	r4, [r0, #12]
 8016452:	ea24 040c 	bic.w	r4, r4, ip
 8016456:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016458:	6844      	ldr	r4, [r0, #4]
 801645a:	ea24 0202 	bic.w	r2, r4, r2
 801645e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016460:	6882      	ldr	r2, [r0, #8]
 8016462:	ea22 020c 	bic.w	r2, r2, ip
 8016466:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016468:	3301      	adds	r3, #1
 801646a:	2b0f      	cmp	r3, #15
 801646c:	d84b      	bhi.n	8016506 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 801646e:	2201      	movs	r2, #1
 8016470:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8016472:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8016476:	ea32 0401 	bics.w	r4, r2, r1
 801647a:	d1f5      	bne.n	8016468 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 801647c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8016480:	f10e 0502 	add.w	r5, lr, #2
 8016484:	4c21      	ldr	r4, [pc, #132]	@ (801650c <HAL_GPIO_DeInit+0x104>)
 8016486:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801648a:	f003 0c03 	and.w	ip, r3, #3
 801648e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016492:	250f      	movs	r5, #15
 8016494:	fa05 f70c 	lsl.w	r7, r5, ip
 8016498:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801649a:	4d1d      	ldr	r5, [pc, #116]	@ (8016510 <HAL_GPIO_DeInit+0x108>)
 801649c:	42a8      	cmp	r0, r5
 801649e:	d0ba      	beq.n	8016416 <HAL_GPIO_DeInit+0xe>
 80164a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80164a4:	42a8      	cmp	r0, r5
 80164a6:	d00d      	beq.n	80164c4 <HAL_GPIO_DeInit+0xbc>
 80164a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80164ac:	42a8      	cmp	r0, r5
 80164ae:	d00b      	beq.n	80164c8 <HAL_GPIO_DeInit+0xc0>
 80164b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80164b4:	42a8      	cmp	r0, r5
 80164b6:	d009      	beq.n	80164cc <HAL_GPIO_DeInit+0xc4>
 80164b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80164bc:	42a8      	cmp	r0, r5
 80164be:	d0a8      	beq.n	8016412 <HAL_GPIO_DeInit+0xa>
 80164c0:	2507      	movs	r5, #7
 80164c2:	e7a9      	b.n	8016418 <HAL_GPIO_DeInit+0x10>
 80164c4:	2501      	movs	r5, #1
 80164c6:	e7a7      	b.n	8016418 <HAL_GPIO_DeInit+0x10>
 80164c8:	2502      	movs	r5, #2
 80164ca:	e7a5      	b.n	8016418 <HAL_GPIO_DeInit+0x10>
 80164cc:	2503      	movs	r5, #3
 80164ce:	e7a3      	b.n	8016418 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80164d0:	4c10      	ldr	r4, [pc, #64]	@ (8016514 <HAL_GPIO_DeInit+0x10c>)
 80164d2:	6825      	ldr	r5, [r4, #0]
 80164d4:	ea25 0506 	bic.w	r5, r5, r6
 80164d8:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80164da:	6865      	ldr	r5, [r4, #4]
 80164dc:	ea25 0506 	bic.w	r5, r5, r6
 80164e0:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80164e2:	68e5      	ldr	r5, [r4, #12]
 80164e4:	ea25 0506 	bic.w	r5, r5, r6
 80164e8:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80164ea:	68a5      	ldr	r5, [r4, #8]
 80164ec:	ea25 0506 	bic.w	r5, r5, r6
 80164f0:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80164f2:	4e06      	ldr	r6, [pc, #24]	@ (801650c <HAL_GPIO_DeInit+0x104>)
 80164f4:	f10e 0402 	add.w	r4, lr, #2
 80164f8:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80164fc:	ea25 0507 	bic.w	r5, r5, r7
 8016500:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8016504:	e78c      	b.n	8016420 <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8016506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016508:	4770      	bx	lr
 801650a:	bf00      	nop
 801650c:	40013800 	.word	0x40013800
 8016510:	40020000 	.word	0x40020000
 8016514:	40013c00 	.word	0x40013c00

08016518 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016518:	6903      	ldr	r3, [r0, #16]
 801651a:	4219      	tst	r1, r3
 801651c:	d001      	beq.n	8016522 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 801651e:	2001      	movs	r0, #1
 8016520:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016522:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8016524:	4770      	bx	lr

08016526 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016526:	b10a      	cbz	r2, 801652c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016528:	6181      	str	r1, [r0, #24]
 801652a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801652c:	0409      	lsls	r1, r1, #16
 801652e:	6181      	str	r1, [r0, #24]
  }
}
 8016530:	4770      	bx	lr

08016532 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016532:	6803      	ldr	r3, [r0, #0]
 8016534:	695a      	ldr	r2, [r3, #20]
 8016536:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 801653a:	d101      	bne.n	8016540 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 801653c:	2000      	movs	r0, #0
}
 801653e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016544:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8016546:	2300      	movs	r3, #0
 8016548:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801654a:	2220      	movs	r2, #32
 801654c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016550:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8016554:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8016556:	f042 0204 	orr.w	r2, r2, #4
 801655a:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 801655c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8016560:	2001      	movs	r0, #1
 8016562:	4770      	bx	lr

08016564 <I2C_WaitOnFlagUntilTimeout>:
{
 8016564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016568:	4606      	mov	r6, r0
 801656a:	460c      	mov	r4, r1
 801656c:	4617      	mov	r7, r2
 801656e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016570:	e03b      	b.n	80165ea <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016572:	f7ff fdcd 	bl	8016110 <HAL_GetTick>
 8016576:	9b06      	ldr	r3, [sp, #24]
 8016578:	1ac0      	subs	r0, r0, r3
 801657a:	4540      	cmp	r0, r8
 801657c:	d802      	bhi.n	8016584 <I2C_WaitOnFlagUntilTimeout+0x20>
 801657e:	f1b8 0f00 	cmp.w	r8, #0
 8016582:	d132      	bne.n	80165ea <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016584:	2d01      	cmp	r5, #1
 8016586:	d018      	beq.n	80165ba <I2C_WaitOnFlagUntilTimeout+0x56>
 8016588:	6833      	ldr	r3, [r6, #0]
 801658a:	699b      	ldr	r3, [r3, #24]
 801658c:	ea24 0303 	bic.w	r3, r4, r3
 8016590:	b29b      	uxth	r3, r3
 8016592:	fab3 f383 	clz	r3, r3
 8016596:	095b      	lsrs	r3, r3, #5
 8016598:	429f      	cmp	r7, r3
 801659a:	d126      	bne.n	80165ea <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 801659c:	2300      	movs	r3, #0
 801659e:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80165a0:	2220      	movs	r2, #32
 80165a2:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80165a6:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80165aa:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80165ac:	f042 0220 	orr.w	r2, r2, #32
 80165b0:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80165b2:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80165b6:	2001      	movs	r0, #1
 80165b8:	e027      	b.n	801660a <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80165ba:	6833      	ldr	r3, [r6, #0]
 80165bc:	695b      	ldr	r3, [r3, #20]
 80165be:	ea24 0303 	bic.w	r3, r4, r3
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	fab3 f383 	clz	r3, r3
 80165c8:	095b      	lsrs	r3, r3, #5
 80165ca:	e7e5      	b.n	8016598 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80165cc:	6833      	ldr	r3, [r6, #0]
 80165ce:	695b      	ldr	r3, [r3, #20]
 80165d0:	ea24 0c03 	bic.w	ip, r4, r3
 80165d4:	fa1f fc8c 	uxth.w	ip, ip
 80165d8:	fabc fc8c 	clz	ip, ip
 80165dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80165e0:	4567      	cmp	r7, ip
 80165e2:	d111      	bne.n	8016608 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80165e4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80165e8:	d1c3      	bne.n	8016572 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80165ea:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80165ee:	2d01      	cmp	r5, #1
 80165f0:	d0ec      	beq.n	80165cc <I2C_WaitOnFlagUntilTimeout+0x68>
 80165f2:	6833      	ldr	r3, [r6, #0]
 80165f4:	699b      	ldr	r3, [r3, #24]
 80165f6:	ea24 0c03 	bic.w	ip, r4, r3
 80165fa:	fa1f fc8c 	uxth.w	ip, ip
 80165fe:	fabc fc8c 	clz	ip, ip
 8016602:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016606:	e7eb      	b.n	80165e0 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8016608:	2000      	movs	r0, #0
}
 801660a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801660e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 801660e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016612:	4605      	mov	r5, r0
 8016614:	460e      	mov	r6, r1
 8016616:	4690      	mov	r8, r2
 8016618:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801661a:	e053      	b.n	80166c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016622:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016624:	682b      	ldr	r3, [r5, #0]
 8016626:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801662a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 801662c:	2300      	movs	r3, #0
 801662e:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8016630:	2220      	movs	r2, #32
 8016632:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016636:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801663a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801663c:	f042 0204 	orr.w	r2, r2, #4
 8016640:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8016642:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8016646:	2001      	movs	r0, #1
 8016648:	e04a      	b.n	80166e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801664a:	f7ff fd61 	bl	8016110 <HAL_GetTick>
 801664e:	eba0 0009 	sub.w	r0, r0, r9
 8016652:	4540      	cmp	r0, r8
 8016654:	d802      	bhi.n	801665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8016656:	f1b8 0f00 	cmp.w	r8, #0
 801665a:	d133      	bne.n	80166c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801665c:	2f01      	cmp	r7, #1
 801665e:	d017      	beq.n	8016690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8016660:	682b      	ldr	r3, [r5, #0]
 8016662:	699b      	ldr	r3, [r3, #24]
 8016664:	ea26 0303 	bic.w	r3, r6, r3
 8016668:	b29b      	uxth	r3, r3
 801666a:	3b00      	subs	r3, #0
 801666c:	bf18      	it	ne
 801666e:	2301      	movne	r3, #1
 8016670:	b343      	cbz	r3, 80166c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8016672:	2300      	movs	r3, #0
 8016674:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016676:	2220      	movs	r2, #32
 8016678:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801667c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016680:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8016682:	f042 0220 	orr.w	r2, r2, #32
 8016686:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016688:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 801668c:	2001      	movs	r0, #1
 801668e:	e027      	b.n	80166e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8016690:	682b      	ldr	r3, [r5, #0]
 8016692:	695b      	ldr	r3, [r3, #20]
 8016694:	ea26 0303 	bic.w	r3, r6, r3
 8016698:	b29b      	uxth	r3, r3
 801669a:	3b00      	subs	r3, #0
 801669c:	bf18      	it	ne
 801669e:	2301      	movne	r3, #1
 80166a0:	e7e6      	b.n	8016670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80166a2:	682b      	ldr	r3, [r5, #0]
 80166a4:	699c      	ldr	r4, [r3, #24]
 80166a6:	ea26 0404 	bic.w	r4, r6, r4
 80166aa:	b2a4      	uxth	r4, r4
 80166ac:	3c00      	subs	r4, #0
 80166ae:	bf18      	it	ne
 80166b0:	2401      	movne	r4, #1
 80166b2:	b1a4      	cbz	r4, 80166de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80166b4:	682b      	ldr	r3, [r5, #0]
 80166b6:	695a      	ldr	r2, [r3, #20]
 80166b8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80166bc:	d1ae      	bne.n	801661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80166be:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80166c2:	d1c2      	bne.n	801664a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80166c4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80166c8:	2f01      	cmp	r7, #1
 80166ca:	d1ea      	bne.n	80166a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80166cc:	682b      	ldr	r3, [r5, #0]
 80166ce:	695c      	ldr	r4, [r3, #20]
 80166d0:	ea26 0404 	bic.w	r4, r6, r4
 80166d4:	b2a4      	uxth	r4, r4
 80166d6:	3c00      	subs	r4, #0
 80166d8:	bf18      	it	ne
 80166da:	2401      	movne	r4, #1
 80166dc:	e7e9      	b.n	80166b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80166de:	2000      	movs	r0, #0
}
 80166e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080166e4 <I2C_MasterRequestWrite>:
{
 80166e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166e6:	b083      	sub	sp, #12
 80166e8:	4604      	mov	r4, r0
 80166ea:	460d      	mov	r5, r1
 80166ec:	4616      	mov	r6, r2
 80166ee:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80166f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80166f2:	2b08      	cmp	r3, #8
 80166f4:	d00d      	beq.n	8016712 <I2C_MasterRequestWrite+0x2e>
 80166f6:	2b01      	cmp	r3, #1
 80166f8:	d00b      	beq.n	8016712 <I2C_MasterRequestWrite+0x2e>
 80166fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80166fe:	d008      	beq.n	8016712 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8016700:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016702:	2b12      	cmp	r3, #18
 8016704:	d10a      	bne.n	801671c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016706:	6802      	ldr	r2, [r0, #0]
 8016708:	6813      	ldr	r3, [r2, #0]
 801670a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801670e:	6013      	str	r3, [r2, #0]
 8016710:	e004      	b.n	801671c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016712:	6822      	ldr	r2, [r4, #0]
 8016714:	6813      	ldr	r3, [r2, #0]
 8016716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801671a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801671c:	9700      	str	r7, [sp, #0]
 801671e:	4633      	mov	r3, r6
 8016720:	2200      	movs	r2, #0
 8016722:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016726:	4620      	mov	r0, r4
 8016728:	f7ff ff1c 	bl	8016564 <I2C_WaitOnFlagUntilTimeout>
 801672c:	b980      	cbnz	r0, 8016750 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801672e:	6923      	ldr	r3, [r4, #16]
 8016730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016734:	d116      	bne.n	8016764 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016736:	6823      	ldr	r3, [r4, #0]
 8016738:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 801673c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801673e:	463b      	mov	r3, r7
 8016740:	4632      	mov	r2, r6
 8016742:	4913      	ldr	r1, [pc, #76]	@ (8016790 <I2C_MasterRequestWrite+0xac>)
 8016744:	4620      	mov	r0, r4
 8016746:	f7ff ff62 	bl	801660e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801674a:	b9f8      	cbnz	r0, 801678c <I2C_MasterRequestWrite+0xa8>
}
 801674c:	b003      	add	sp, #12
 801674e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016750:	6823      	ldr	r3, [r4, #0]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016758:	d002      	beq.n	8016760 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801675a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801675e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8016760:	2003      	movs	r0, #3
 8016762:	e7f3      	b.n	801674c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016764:	11eb      	asrs	r3, r5, #7
 8016766:	6822      	ldr	r2, [r4, #0]
 8016768:	f003 0306 	and.w	r3, r3, #6
 801676c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8016770:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8016772:	463b      	mov	r3, r7
 8016774:	4632      	mov	r2, r6
 8016776:	4907      	ldr	r1, [pc, #28]	@ (8016794 <I2C_MasterRequestWrite+0xb0>)
 8016778:	4620      	mov	r0, r4
 801677a:	f7ff ff48 	bl	801660e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801677e:	b918      	cbnz	r0, 8016788 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8016780:	6823      	ldr	r3, [r4, #0]
 8016782:	b2ed      	uxtb	r5, r5
 8016784:	611d      	str	r5, [r3, #16]
 8016786:	e7da      	b.n	801673e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8016788:	2001      	movs	r0, #1
 801678a:	e7df      	b.n	801674c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 801678c:	2001      	movs	r0, #1
 801678e:	e7dd      	b.n	801674c <I2C_MasterRequestWrite+0x68>
 8016790:	00010002 	.word	0x00010002
 8016794:	00010008 	.word	0x00010008

08016798 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8016798:	b570      	push	{r4, r5, r6, lr}
 801679a:	4604      	mov	r4, r0
 801679c:	460d      	mov	r5, r1
 801679e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80167a0:	6823      	ldr	r3, [r4, #0]
 80167a2:	695b      	ldr	r3, [r3, #20]
 80167a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80167a8:	d121      	bne.n	80167ee <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80167aa:	4620      	mov	r0, r4
 80167ac:	f7ff fec1 	bl	8016532 <I2C_IsAcknowledgeFailed>
 80167b0:	b9f8      	cbnz	r0, 80167f2 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80167b2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80167b6:	d0f3      	beq.n	80167a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80167b8:	f7ff fcaa 	bl	8016110 <HAL_GetTick>
 80167bc:	1b80      	subs	r0, r0, r6
 80167be:	42a8      	cmp	r0, r5
 80167c0:	d801      	bhi.n	80167c6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80167c2:	2d00      	cmp	r5, #0
 80167c4:	d1ec      	bne.n	80167a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	695b      	ldr	r3, [r3, #20]
 80167ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80167ce:	d1e7      	bne.n	80167a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80167d0:	2300      	movs	r3, #0
 80167d2:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80167d4:	2220      	movs	r2, #32
 80167d6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80167da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80167de:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80167e0:	f042 0220 	orr.w	r2, r2, #32
 80167e4:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80167e6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80167ea:	2001      	movs	r0, #1
 80167ec:	e000      	b.n	80167f0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80167ee:	2000      	movs	r0, #0
}
 80167f0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80167f2:	2001      	movs	r0, #1
 80167f4:	e7fc      	b.n	80167f0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080167f6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80167f6:	b570      	push	{r4, r5, r6, lr}
 80167f8:	4604      	mov	r4, r0
 80167fa:	460d      	mov	r5, r1
 80167fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	695b      	ldr	r3, [r3, #20]
 8016802:	f013 0f04 	tst.w	r3, #4
 8016806:	d121      	bne.n	801684c <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016808:	4620      	mov	r0, r4
 801680a:	f7ff fe92 	bl	8016532 <I2C_IsAcknowledgeFailed>
 801680e:	b9f8      	cbnz	r0, 8016850 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8016810:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016814:	d0f3      	beq.n	80167fe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016816:	f7ff fc7b 	bl	8016110 <HAL_GetTick>
 801681a:	1b80      	subs	r0, r0, r6
 801681c:	42a8      	cmp	r0, r5
 801681e:	d801      	bhi.n	8016824 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8016820:	2d00      	cmp	r5, #0
 8016822:	d1ec      	bne.n	80167fe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8016824:	6823      	ldr	r3, [r4, #0]
 8016826:	695b      	ldr	r3, [r3, #20]
 8016828:	f013 0f04 	tst.w	r3, #4
 801682c:	d1e7      	bne.n	80167fe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 801682e:	2300      	movs	r3, #0
 8016830:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016832:	2220      	movs	r2, #32
 8016834:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016838:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801683c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801683e:	f042 0220 	orr.w	r2, r2, #32
 8016842:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016844:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016848:	2001      	movs	r0, #1
 801684a:	e000      	b.n	801684e <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 801684c:	2000      	movs	r0, #0
}
 801684e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8016850:	2001      	movs	r0, #1
 8016852:	e7fc      	b.n	801684e <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08016854 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8016854:	2800      	cmp	r0, #0
 8016856:	f000 80cc 	beq.w	80169f2 <HAL_I2C_Init+0x19e>
{
 801685a:	b570      	push	{r4, r5, r6, lr}
 801685c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801685e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8016862:	2b00      	cmp	r3, #0
 8016864:	d077      	beq.n	8016956 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016866:	2324      	movs	r3, #36	@ 0x24
 8016868:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 801686c:	6822      	ldr	r2, [r4, #0]
 801686e:	6813      	ldr	r3, [r2, #0]
 8016870:	f023 0301 	bic.w	r3, r3, #1
 8016874:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016876:	6822      	ldr	r2, [r4, #0]
 8016878:	6813      	ldr	r3, [r2, #0]
 801687a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801687e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016880:	6822      	ldr	r2, [r4, #0]
 8016882:	6813      	ldr	r3, [r2, #0]
 8016884:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016888:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801688a:	f000 fdb3 	bl	80173f4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801688e:	6862      	ldr	r2, [r4, #4]
 8016890:	4b5a      	ldr	r3, [pc, #360]	@ (80169fc <HAL_I2C_Init+0x1a8>)
 8016892:	429a      	cmp	r2, r3
 8016894:	d864      	bhi.n	8016960 <HAL_I2C_Init+0x10c>
 8016896:	4b5a      	ldr	r3, [pc, #360]	@ (8016a00 <HAL_I2C_Init+0x1ac>)
 8016898:	4298      	cmp	r0, r3
 801689a:	bf8c      	ite	hi
 801689c:	2300      	movhi	r3, #0
 801689e:	2301      	movls	r3, #1
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	f040 80a8 	bne.w	80169f6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80168a6:	4957      	ldr	r1, [pc, #348]	@ (8016a04 <HAL_I2C_Init+0x1b0>)
 80168a8:	fba1 3100 	umull	r3, r1, r1, r0
 80168ac:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80168ae:	6825      	ldr	r5, [r4, #0]
 80168b0:	686a      	ldr	r2, [r5, #4]
 80168b2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80168b6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80168ba:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80168bc:	6821      	ldr	r1, [r4, #0]
 80168be:	6a0a      	ldr	r2, [r1, #32]
 80168c0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80168c4:	6866      	ldr	r6, [r4, #4]
 80168c6:	4d4d      	ldr	r5, [pc, #308]	@ (80169fc <HAL_I2C_Init+0x1a8>)
 80168c8:	42ae      	cmp	r6, r5
 80168ca:	d84f      	bhi.n	801696c <HAL_I2C_Init+0x118>
 80168cc:	3301      	adds	r3, #1
 80168ce:	4313      	orrs	r3, r2
 80168d0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80168d2:	6821      	ldr	r1, [r4, #0]
 80168d4:	69ca      	ldr	r2, [r1, #28]
 80168d6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80168da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80168de:	6865      	ldr	r5, [r4, #4]
 80168e0:	4b46      	ldr	r3, [pc, #280]	@ (80169fc <HAL_I2C_Init+0x1a8>)
 80168e2:	429d      	cmp	r5, r3
 80168e4:	d84c      	bhi.n	8016980 <HAL_I2C_Init+0x12c>
 80168e6:	1e43      	subs	r3, r0, #1
 80168e8:	006d      	lsls	r5, r5, #1
 80168ea:	fbb3 f3f5 	udiv	r3, r3, r5
 80168ee:	3301      	adds	r3, #1
 80168f0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80168f4:	4203      	tst	r3, r0
 80168f6:	d078      	beq.n	80169ea <HAL_I2C_Init+0x196>
 80168f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80168fc:	431a      	orrs	r2, r3
 80168fe:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016900:	6821      	ldr	r1, [r4, #0]
 8016902:	680b      	ldr	r3, [r1, #0]
 8016904:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016908:	69e2      	ldr	r2, [r4, #28]
 801690a:	6a20      	ldr	r0, [r4, #32]
 801690c:	4302      	orrs	r2, r0
 801690e:	4313      	orrs	r3, r2
 8016910:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016912:	6821      	ldr	r1, [r4, #0]
 8016914:	688b      	ldr	r3, [r1, #8]
 8016916:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 801691a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801691e:	6922      	ldr	r2, [r4, #16]
 8016920:	68e0      	ldr	r0, [r4, #12]
 8016922:	4302      	orrs	r2, r0
 8016924:	4313      	orrs	r3, r2
 8016926:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016928:	6821      	ldr	r1, [r4, #0]
 801692a:	68cb      	ldr	r3, [r1, #12]
 801692c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016930:	6962      	ldr	r2, [r4, #20]
 8016932:	69a0      	ldr	r0, [r4, #24]
 8016934:	4302      	orrs	r2, r0
 8016936:	4313      	orrs	r3, r2
 8016938:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 801693a:	6822      	ldr	r2, [r4, #0]
 801693c:	6813      	ldr	r3, [r2, #0]
 801693e:	f043 0301 	orr.w	r3, r3, #1
 8016942:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016944:	2000      	movs	r0, #0
 8016946:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016948:	2320      	movs	r3, #32
 801694a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801694e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016950:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8016954:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8016956:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 801695a:	f7fb fa45 	bl	8011de8 <HAL_I2C_MspInit>
 801695e:	e782      	b.n	8016866 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016960:	4b29      	ldr	r3, [pc, #164]	@ (8016a08 <HAL_I2C_Init+0x1b4>)
 8016962:	4298      	cmp	r0, r3
 8016964:	bf8c      	ite	hi
 8016966:	2300      	movhi	r3, #0
 8016968:	2301      	movls	r3, #1
 801696a:	e799      	b.n	80168a0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801696c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8016970:	fb05 f303 	mul.w	r3, r5, r3
 8016974:	4d25      	ldr	r5, [pc, #148]	@ (8016a0c <HAL_I2C_Init+0x1b8>)
 8016976:	fba5 5303 	umull	r5, r3, r5, r3
 801697a:	099b      	lsrs	r3, r3, #6
 801697c:	3301      	adds	r3, #1
 801697e:	e7a6      	b.n	80168ce <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016980:	68a6      	ldr	r6, [r4, #8]
 8016982:	b9be      	cbnz	r6, 80169b4 <HAL_I2C_Init+0x160>
 8016984:	1e43      	subs	r3, r0, #1
 8016986:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801698a:	fbb3 f3fc 	udiv	r3, r3, ip
 801698e:	3301      	adds	r3, #1
 8016990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016994:	fab3 f383 	clz	r3, r3
 8016998:	095b      	lsrs	r3, r3, #5
 801699a:	bb43      	cbnz	r3, 80169ee <HAL_I2C_Init+0x19a>
 801699c:	b9c6      	cbnz	r6, 80169d0 <HAL_I2C_Init+0x17c>
 801699e:	1e43      	subs	r3, r0, #1
 80169a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169a4:	fbb3 f3f5 	udiv	r3, r3, r5
 80169a8:	3301      	adds	r3, #1
 80169aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80169ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80169b2:	e7a3      	b.n	80168fc <HAL_I2C_Init+0xa8>
 80169b4:	1e43      	subs	r3, r0, #1
 80169b6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80169ba:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80169be:	fbb3 f3fc 	udiv	r3, r3, ip
 80169c2:	3301      	adds	r3, #1
 80169c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80169c8:	fab3 f383 	clz	r3, r3
 80169cc:	095b      	lsrs	r3, r3, #5
 80169ce:	e7e4      	b.n	801699a <HAL_I2C_Init+0x146>
 80169d0:	1e43      	subs	r3, r0, #1
 80169d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80169d6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80169da:	fbb3 f3f5 	udiv	r3, r3, r5
 80169de:	3301      	adds	r3, #1
 80169e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80169e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80169e8:	e788      	b.n	80168fc <HAL_I2C_Init+0xa8>
 80169ea:	2304      	movs	r3, #4
 80169ec:	e786      	b.n	80168fc <HAL_I2C_Init+0xa8>
 80169ee:	2301      	movs	r3, #1
 80169f0:	e784      	b.n	80168fc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80169f2:	2001      	movs	r0, #1
}
 80169f4:	4770      	bx	lr
    return HAL_ERROR;
 80169f6:	2001      	movs	r0, #1
 80169f8:	e7ac      	b.n	8016954 <HAL_I2C_Init+0x100>
 80169fa:	bf00      	nop
 80169fc:	000186a0 	.word	0x000186a0
 8016a00:	001e847f 	.word	0x001e847f
 8016a04:	431bde83 	.word	0x431bde83
 8016a08:	003d08ff 	.word	0x003d08ff
 8016a0c:	10624dd3 	.word	0x10624dd3

08016a10 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8016a10:	b1a8      	cbz	r0, 8016a3e <HAL_I2C_DeInit+0x2e>
{
 8016a12:	b510      	push	{r4, lr}
 8016a14:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016a16:	2324      	movs	r3, #36	@ 0x24
 8016a18:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016a1c:	6802      	ldr	r2, [r0, #0]
 8016a1e:	6813      	ldr	r3, [r2, #0]
 8016a20:	f023 0301 	bic.w	r3, r3, #1
 8016a24:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8016a26:	f7fb fa19 	bl	8011e5c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016a2a:	2000      	movs	r0, #0
 8016a2c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8016a2e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016a32:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016a34:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8016a38:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8016a3c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8016a3e:	2001      	movs	r0, #1
}
 8016a40:	4770      	bx	lr
	...

08016a44 <HAL_I2C_Master_Transmit>:
{
 8016a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a48:	b085      	sub	sp, #20
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	460f      	mov	r7, r1
 8016a4e:	4691      	mov	r9, r2
 8016a50:	4698      	mov	r8, r3
 8016a52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8016a54:	f7ff fb5c 	bl	8016110 <HAL_GetTick>
 8016a58:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a5a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8016a5e:	b2c0      	uxtb	r0, r0
 8016a60:	2820      	cmp	r0, #32
 8016a62:	d004      	beq.n	8016a6e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8016a64:	2702      	movs	r7, #2
}
 8016a66:	4638      	mov	r0, r7
 8016a68:	b005      	add	sp, #20
 8016a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016a6e:	9500      	str	r5, [sp, #0]
 8016a70:	2319      	movs	r3, #25
 8016a72:	2201      	movs	r2, #1
 8016a74:	494f      	ldr	r1, [pc, #316]	@ (8016bb4 <HAL_I2C_Master_Transmit+0x170>)
 8016a76:	4620      	mov	r0, r4
 8016a78:	f7ff fd74 	bl	8016564 <I2C_WaitOnFlagUntilTimeout>
 8016a7c:	2800      	cmp	r0, #0
 8016a7e:	f040 8092 	bne.w	8016ba6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8016a82:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	f000 808f 	beq.w	8016baa <HAL_I2C_Master_Transmit+0x166>
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016a92:	6823      	ldr	r3, [r4, #0]
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	f012 0f01 	tst.w	r2, #1
 8016a9a:	d103      	bne.n	8016aa4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	f042 0201 	orr.w	r2, r2, #1
 8016aa2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016aa4:	6822      	ldr	r2, [r4, #0]
 8016aa6:	6813      	ldr	r3, [r2, #0]
 8016aa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016aac:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016aae:	2321      	movs	r3, #33	@ 0x21
 8016ab0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016ab4:	2310      	movs	r3, #16
 8016ab6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016aba:	2300      	movs	r3, #0
 8016abc:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8016abe:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016ac2:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016ac6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016ac8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016aca:	4b3b      	ldr	r3, [pc, #236]	@ (8016bb8 <HAL_I2C_Master_Transmit+0x174>)
 8016acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016ace:	462b      	mov	r3, r5
 8016ad0:	4632      	mov	r2, r6
 8016ad2:	4639      	mov	r1, r7
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	f7ff fe05 	bl	80166e4 <I2C_MasterRequestWrite>
 8016ada:	4607      	mov	r7, r0
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d166      	bne.n	8016bae <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	9303      	str	r3, [sp, #12]
 8016ae4:	6823      	ldr	r3, [r4, #0]
 8016ae6:	695a      	ldr	r2, [r3, #20]
 8016ae8:	9203      	str	r2, [sp, #12]
 8016aea:	699b      	ldr	r3, [r3, #24]
 8016aec:	9303      	str	r3, [sp, #12]
 8016aee:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8016af0:	e011      	b.n	8016b16 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016af2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016af4:	2b04      	cmp	r3, #4
 8016af6:	d001      	beq.n	8016afc <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8016af8:	2701      	movs	r7, #1
 8016afa:	e7b4      	b.n	8016a66 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016afc:	6822      	ldr	r2, [r4, #0]
 8016afe:	6813      	ldr	r3, [r2, #0]
 8016b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016b04:	6013      	str	r3, [r2, #0]
 8016b06:	e7f7      	b.n	8016af8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016b08:	462a      	mov	r2, r5
 8016b0a:	4631      	mov	r1, r6
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f7ff fe72 	bl	80167f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d12e      	bne.n	8016b74 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8016b16:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d036      	beq.n	8016b8a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016b1c:	462a      	mov	r2, r5
 8016b1e:	4631      	mov	r1, r6
 8016b20:	4620      	mov	r0, r4
 8016b22:	f7ff fe39 	bl	8016798 <I2C_WaitOnTXEFlagUntilTimeout>
 8016b26:	2800      	cmp	r0, #0
 8016b28:	d1e3      	bne.n	8016af2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016b2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016b2c:	6823      	ldr	r3, [r4, #0]
 8016b2e:	7812      	ldrb	r2, [r2, #0]
 8016b30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8016b32:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8016b34:	1c43      	adds	r3, r0, #1
 8016b36:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8016b38:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8016b3a:	b289      	uxth	r1, r1
 8016b3c:	3901      	subs	r1, #1
 8016b3e:	b289      	uxth	r1, r1
 8016b40:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8016b42:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016b44:	3b01      	subs	r3, #1
 8016b46:	b29b      	uxth	r3, r3
 8016b48:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016b4a:	6822      	ldr	r2, [r4, #0]
 8016b4c:	6951      	ldr	r1, [r2, #20]
 8016b4e:	f011 0f04 	tst.w	r1, #4
 8016b52:	d0d9      	beq.n	8016b08 <HAL_I2C_Master_Transmit+0xc4>
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d0d7      	beq.n	8016b08 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016b58:	7843      	ldrb	r3, [r0, #1]
 8016b5a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8016b5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016b5e:	3301      	adds	r3, #1
 8016b60:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8016b62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	3b01      	subs	r3, #1
 8016b68:	b29b      	uxth	r3, r3
 8016b6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8016b6c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016b6e:	3b01      	subs	r3, #1
 8016b70:	8523      	strh	r3, [r4, #40]	@ 0x28
 8016b72:	e7c9      	b.n	8016b08 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016b74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016b76:	2b04      	cmp	r3, #4
 8016b78:	d001      	beq.n	8016b7e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8016b7a:	2701      	movs	r7, #1
 8016b7c:	e773      	b.n	8016a66 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016b7e:	6822      	ldr	r2, [r4, #0]
 8016b80:	6813      	ldr	r3, [r2, #0]
 8016b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016b86:	6013      	str	r3, [r2, #0]
 8016b88:	e7f7      	b.n	8016b7a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016b8a:	6822      	ldr	r2, [r4, #0]
 8016b8c:	6813      	ldr	r3, [r2, #0]
 8016b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016b92:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8016b94:	2320      	movs	r3, #32
 8016b96:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8016ba0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8016ba4:	e75f      	b.n	8016a66 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8016ba6:	2702      	movs	r7, #2
 8016ba8:	e75d      	b.n	8016a66 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8016baa:	2702      	movs	r7, #2
 8016bac:	e75b      	b.n	8016a66 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8016bae:	2701      	movs	r7, #1
 8016bb0:	e759      	b.n	8016a66 <HAL_I2C_Master_Transmit+0x22>
 8016bb2:	bf00      	nop
 8016bb4:	00100002 	.word	0x00100002
 8016bb8:	ffff0000 	.word	0xffff0000

08016bbc <HAL_I2C_IsDeviceReady>:
{
 8016bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bc0:	b085      	sub	sp, #20
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	4688      	mov	r8, r1
 8016bc6:	4691      	mov	r9, r2
 8016bc8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8016bca:	f7ff faa1 	bl	8016110 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016bce:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	2b20      	cmp	r3, #32
 8016bd6:	d003      	beq.n	8016be0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8016bd8:	2002      	movs	r0, #2
}
 8016bda:	b005      	add	sp, #20
 8016bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016be0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016be2:	9000      	str	r0, [sp, #0]
 8016be4:	2319      	movs	r3, #25
 8016be6:	2201      	movs	r2, #1
 8016be8:	4957      	ldr	r1, [pc, #348]	@ (8016d48 <HAL_I2C_IsDeviceReady+0x18c>)
 8016bea:	4620      	mov	r0, r4
 8016bec:	f7ff fcba 	bl	8016564 <I2C_WaitOnFlagUntilTimeout>
 8016bf0:	2800      	cmp	r0, #0
 8016bf2:	f040 80a0 	bne.w	8016d36 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8016bf6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016bfa:	2b01      	cmp	r3, #1
 8016bfc:	f000 809d 	beq.w	8016d3a <HAL_I2C_IsDeviceReady+0x17e>
 8016c00:	2301      	movs	r3, #1
 8016c02:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	681a      	ldr	r2, [r3, #0]
 8016c0a:	f012 0f01 	tst.w	r2, #1
 8016c0e:	d103      	bne.n	8016c18 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8016c10:	681a      	ldr	r2, [r3, #0]
 8016c12:	f042 0201 	orr.w	r2, r2, #1
 8016c16:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016c18:	6822      	ldr	r2, [r4, #0]
 8016c1a:	6813      	ldr	r3, [r2, #0]
 8016c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c20:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8016c22:	2324      	movs	r3, #36	@ 0x24
 8016c24:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c28:	2700      	movs	r7, #0
 8016c2a:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016c2c:	4b47      	ldr	r3, [pc, #284]	@ (8016d4c <HAL_I2C_IsDeviceReady+0x190>)
 8016c2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016c30:	e040      	b.n	8016cb4 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8016c32:	6823      	ldr	r3, [r4, #0]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016c3a:	d002      	beq.n	8016c42 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016c40:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8016c42:	2003      	movs	r0, #3
 8016c44:	e7c9      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8016c46:	23a0      	movs	r3, #160	@ 0xa0
 8016c48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016c4c:	6822      	ldr	r2, [r4, #0]
 8016c4e:	6953      	ldr	r3, [r2, #20]
 8016c50:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016c54:	6952      	ldr	r2, [r2, #20]
 8016c56:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016c5a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8016c5e:	fa5f fc8c 	uxtb.w	ip, ip
 8016c62:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8016c66:	d009      	beq.n	8016c7c <HAL_I2C_IsDeviceReady+0xc0>
 8016c68:	b943      	cbnz	r3, 8016c7c <HAL_I2C_IsDeviceReady+0xc0>
 8016c6a:	b93a      	cbnz	r2, 8016c7c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016c6c:	f7ff fa50 	bl	8016110 <HAL_GetTick>
 8016c70:	1b80      	subs	r0, r0, r6
 8016c72:	42a8      	cmp	r0, r5
 8016c74:	d8e7      	bhi.n	8016c46 <HAL_I2C_IsDeviceReady+0x8a>
 8016c76:	2d00      	cmp	r5, #0
 8016c78:	d1e8      	bne.n	8016c4c <HAL_I2C_IsDeviceReady+0x90>
 8016c7a:	e7e4      	b.n	8016c46 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8016c7c:	2320      	movs	r3, #32
 8016c7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8016c82:	6823      	ldr	r3, [r4, #0]
 8016c84:	695a      	ldr	r2, [r3, #20]
 8016c86:	f012 0f02 	tst.w	r2, #2
 8016c8a:	d131      	bne.n	8016cf0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016c92:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8016c9a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016c9c:	9600      	str	r6, [sp, #0]
 8016c9e:	2319      	movs	r3, #25
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	4929      	ldr	r1, [pc, #164]	@ (8016d48 <HAL_I2C_IsDeviceReady+0x18c>)
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	f7ff fc5d 	bl	8016564 <I2C_WaitOnFlagUntilTimeout>
 8016caa:	2800      	cmp	r0, #0
 8016cac:	d149      	bne.n	8016d42 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8016cae:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8016cb0:	454f      	cmp	r7, r9
 8016cb2:	d238      	bcs.n	8016d26 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016cb4:	6822      	ldr	r2, [r4, #0]
 8016cb6:	6813      	ldr	r3, [r2, #0]
 8016cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016cbc:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8016cbe:	9600      	str	r6, [sp, #0]
 8016cc0:	462b      	mov	r3, r5
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f7ff fc4b 	bl	8016564 <I2C_WaitOnFlagUntilTimeout>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	d1af      	bne.n	8016c32 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016cd2:	6823      	ldr	r3, [r4, #0]
 8016cd4:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8016cd8:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8016cda:	f7ff fa19 	bl	8016110 <HAL_GetTick>
 8016cde:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016ce0:	6822      	ldr	r2, [r4, #0]
 8016ce2:	6953      	ldr	r3, [r2, #20]
 8016ce4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016ce8:	6952      	ldr	r2, [r2, #20]
 8016cea:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016cee:	e7b4      	b.n	8016c5a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016cf6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	9303      	str	r3, [sp, #12]
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	695a      	ldr	r2, [r3, #20]
 8016d00:	9203      	str	r2, [sp, #12]
 8016d02:	699b      	ldr	r3, [r3, #24]
 8016d04:	9303      	str	r3, [sp, #12]
 8016d06:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016d08:	9600      	str	r6, [sp, #0]
 8016d0a:	2319      	movs	r3, #25
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	490e      	ldr	r1, [pc, #56]	@ (8016d48 <HAL_I2C_IsDeviceReady+0x18c>)
 8016d10:	4620      	mov	r0, r4
 8016d12:	f7ff fc27 	bl	8016564 <I2C_WaitOnFlagUntilTimeout>
 8016d16:	b990      	cbnz	r0, 8016d3e <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8016d18:	2320      	movs	r3, #32
 8016d1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8016d1e:	2300      	movs	r3, #0
 8016d20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8016d24:	e759      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016d26:	2320      	movs	r3, #32
 8016d28:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8016d32:	2001      	movs	r0, #1
 8016d34:	e751      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8016d36:	2002      	movs	r0, #2
 8016d38:	e74f      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8016d3a:	2002      	movs	r0, #2
 8016d3c:	e74d      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016d3e:	2001      	movs	r0, #1
 8016d40:	e74b      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8016d42:	2001      	movs	r0, #1
 8016d44:	e749      	b.n	8016bda <HAL_I2C_IsDeviceReady+0x1e>
 8016d46:	bf00      	nop
 8016d48:	00100002 	.word	0x00100002
 8016d4c:	ffff0000 	.word	0xffff0000

08016d50 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8016d50:	b340      	cbz	r0, 8016da4 <HAL_IWDG_Init+0x54>
{
 8016d52:	b538      	push	{r3, r4, r5, lr}
 8016d54:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8016d56:	6803      	ldr	r3, [r0, #0]
 8016d58:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8016d5c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8016d5e:	6803      	ldr	r3, [r0, #0]
 8016d60:	f245 5255 	movw	r2, #21845	@ 0x5555
 8016d64:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8016d66:	6803      	ldr	r3, [r0, #0]
 8016d68:	6842      	ldr	r2, [r0, #4]
 8016d6a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8016d6c:	6803      	ldr	r3, [r0, #0]
 8016d6e:	6882      	ldr	r2, [r0, #8]
 8016d70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8016d72:	f7ff f9cd 	bl	8016110 <HAL_GetTick>
 8016d76:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016d78:	6823      	ldr	r3, [r4, #0]
 8016d7a:	68da      	ldr	r2, [r3, #12]
 8016d7c:	f012 0f03 	tst.w	r2, #3
 8016d80:	d00b      	beq.n	8016d9a <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8016d82:	f7ff f9c5 	bl	8016110 <HAL_GetTick>
 8016d86:	1b40      	subs	r0, r0, r5
 8016d88:	2831      	cmp	r0, #49	@ 0x31
 8016d8a:	d9f5      	bls.n	8016d78 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016d8c:	6823      	ldr	r3, [r4, #0]
 8016d8e:	68db      	ldr	r3, [r3, #12]
 8016d90:	f013 0f03 	tst.w	r3, #3
 8016d94:	d0f0      	beq.n	8016d78 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8016d96:	2003      	movs	r0, #3
 8016d98:	e003      	b.n	8016da2 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016d9a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8016d9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8016da0:	2000      	movs	r0, #0
}
 8016da2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8016da4:	2001      	movs	r0, #1
}
 8016da6:	4770      	bx	lr

08016da8 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8016da8:	6803      	ldr	r3, [r0, #0]
 8016daa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8016dae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8016db0:	2000      	movs	r0, #0
 8016db2:	4770      	bx	lr

08016db4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016db4:	2800      	cmp	r0, #0
 8016db6:	f000 81e0 	beq.w	801717a <HAL_RCC_OscConfig+0x3c6>
{
 8016dba:	b570      	push	{r4, r5, r6, lr}
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016dc0:	6803      	ldr	r3, [r0, #0]
 8016dc2:	f013 0f01 	tst.w	r3, #1
 8016dc6:	d03b      	beq.n	8016e40 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016dc8:	4b9f      	ldr	r3, [pc, #636]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016dca:	689b      	ldr	r3, [r3, #8]
 8016dcc:	f003 030c 	and.w	r3, r3, #12
 8016dd0:	2b04      	cmp	r3, #4
 8016dd2:	d02c      	beq.n	8016e2e <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016dd4:	4b9c      	ldr	r3, [pc, #624]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016dd6:	689b      	ldr	r3, [r3, #8]
 8016dd8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016ddc:	2b08      	cmp	r3, #8
 8016dde:	d021      	beq.n	8016e24 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016de0:	6863      	ldr	r3, [r4, #4]
 8016de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016de6:	d04f      	beq.n	8016e88 <HAL_RCC_OscConfig+0xd4>
 8016de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016dec:	d052      	beq.n	8016e94 <HAL_RCC_OscConfig+0xe0>
 8016dee:	4b96      	ldr	r3, [pc, #600]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8016df6:	601a      	str	r2, [r3, #0]
 8016df8:	681a      	ldr	r2, [r3, #0]
 8016dfa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8016dfe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016e00:	6863      	ldr	r3, [r4, #4]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d050      	beq.n	8016ea8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016e06:	f7ff f983 	bl	8016110 <HAL_GetTick>
 8016e0a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016e14:	d114      	bne.n	8016e40 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016e16:	f7ff f97b 	bl	8016110 <HAL_GetTick>
 8016e1a:	1b40      	subs	r0, r0, r5
 8016e1c:	2864      	cmp	r0, #100	@ 0x64
 8016e1e:	d9f5      	bls.n	8016e0c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8016e20:	2003      	movs	r0, #3
 8016e22:	e1b1      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016e24:	4b88      	ldr	r3, [pc, #544]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016e2c:	d0d8      	beq.n	8016de0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016e2e:	4b86      	ldr	r3, [pc, #536]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016e36:	d003      	beq.n	8016e40 <HAL_RCC_OscConfig+0x8c>
 8016e38:	6863      	ldr	r3, [r4, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f000 819f 	beq.w	801717e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016e40:	6823      	ldr	r3, [r4, #0]
 8016e42:	f013 0f02 	tst.w	r3, #2
 8016e46:	d054      	beq.n	8016ef2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016e48:	4b7f      	ldr	r3, [pc, #508]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e4a:	689b      	ldr	r3, [r3, #8]
 8016e4c:	f013 0f0c 	tst.w	r3, #12
 8016e50:	d03e      	beq.n	8016ed0 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016e52:	4b7d      	ldr	r3, [pc, #500]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e54:	689b      	ldr	r3, [r3, #8]
 8016e56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016e5a:	2b08      	cmp	r3, #8
 8016e5c:	d033      	beq.n	8016ec6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8016e5e:	68e3      	ldr	r3, [r4, #12]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d068      	beq.n	8016f36 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016e64:	4b79      	ldr	r3, [pc, #484]	@ (801704c <HAL_RCC_OscConfig+0x298>)
 8016e66:	2201      	movs	r2, #1
 8016e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016e6a:	f7ff f951 	bl	8016110 <HAL_GetTick>
 8016e6e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016e70:	4b75      	ldr	r3, [pc, #468]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	f013 0f02 	tst.w	r3, #2
 8016e78:	d154      	bne.n	8016f24 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016e7a:	f7ff f949 	bl	8016110 <HAL_GetTick>
 8016e7e:	1b40      	subs	r0, r0, r5
 8016e80:	2802      	cmp	r0, #2
 8016e82:	d9f5      	bls.n	8016e70 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8016e84:	2003      	movs	r0, #3
 8016e86:	e17f      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016e88:	4a6f      	ldr	r2, [pc, #444]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e8a:	6813      	ldr	r3, [r2, #0]
 8016e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016e90:	6013      	str	r3, [r2, #0]
 8016e92:	e7b5      	b.n	8016e00 <HAL_RCC_OscConfig+0x4c>
 8016e94:	4b6c      	ldr	r3, [pc, #432]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016e96:	681a      	ldr	r2, [r3, #0]
 8016e98:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8016e9c:	601a      	str	r2, [r3, #0]
 8016e9e:	681a      	ldr	r2, [r3, #0]
 8016ea0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8016ea4:	601a      	str	r2, [r3, #0]
 8016ea6:	e7ab      	b.n	8016e00 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8016ea8:	f7ff f932 	bl	8016110 <HAL_GetTick>
 8016eac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016eae:	4b66      	ldr	r3, [pc, #408]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8016eb6:	d0c3      	beq.n	8016e40 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016eb8:	f7ff f92a 	bl	8016110 <HAL_GetTick>
 8016ebc:	1b40      	subs	r0, r0, r5
 8016ebe:	2864      	cmp	r0, #100	@ 0x64
 8016ec0:	d9f5      	bls.n	8016eae <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8016ec2:	2003      	movs	r0, #3
 8016ec4:	e160      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016ec6:	4b60      	ldr	r3, [pc, #384]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016ece:	d1c6      	bne.n	8016e5e <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	f013 0f02 	tst.w	r3, #2
 8016ed8:	d003      	beq.n	8016ee2 <HAL_RCC_OscConfig+0x12e>
 8016eda:	68e3      	ldr	r3, [r4, #12]
 8016edc:	2b01      	cmp	r3, #1
 8016ede:	f040 8150 	bne.w	8017182 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016ee2:	4a59      	ldr	r2, [pc, #356]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016ee4:	6813      	ldr	r3, [r2, #0]
 8016ee6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8016eea:	6921      	ldr	r1, [r4, #16]
 8016eec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8016ef0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016ef2:	6823      	ldr	r3, [r4, #0]
 8016ef4:	f013 0f08 	tst.w	r3, #8
 8016ef8:	d042      	beq.n	8016f80 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8016efa:	6963      	ldr	r3, [r4, #20]
 8016efc:	b36b      	cbz	r3, 8016f5a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016efe:	4b53      	ldr	r3, [pc, #332]	@ (801704c <HAL_RCC_OscConfig+0x298>)
 8016f00:	2201      	movs	r2, #1
 8016f02:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016f06:	f7ff f903 	bl	8016110 <HAL_GetTick>
 8016f0a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f10:	f013 0f02 	tst.w	r3, #2
 8016f14:	d134      	bne.n	8016f80 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016f16:	f7ff f8fb 	bl	8016110 <HAL_GetTick>
 8016f1a:	1b40      	subs	r0, r0, r5
 8016f1c:	2802      	cmp	r0, #2
 8016f1e:	d9f5      	bls.n	8016f0c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8016f20:	2003      	movs	r0, #3
 8016f22:	e131      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016f24:	4a48      	ldr	r2, [pc, #288]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016f26:	6813      	ldr	r3, [r2, #0]
 8016f28:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8016f2c:	6921      	ldr	r1, [r4, #16]
 8016f2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8016f32:	6013      	str	r3, [r2, #0]
 8016f34:	e7dd      	b.n	8016ef2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8016f36:	4b45      	ldr	r3, [pc, #276]	@ (801704c <HAL_RCC_OscConfig+0x298>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8016f3c:	f7ff f8e8 	bl	8016110 <HAL_GetTick>
 8016f40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016f42:	4b41      	ldr	r3, [pc, #260]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f013 0f02 	tst.w	r3, #2
 8016f4a:	d0d2      	beq.n	8016ef2 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016f4c:	f7ff f8e0 	bl	8016110 <HAL_GetTick>
 8016f50:	1b40      	subs	r0, r0, r5
 8016f52:	2802      	cmp	r0, #2
 8016f54:	d9f5      	bls.n	8016f42 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8016f56:	2003      	movs	r0, #3
 8016f58:	e116      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016f5a:	4b3c      	ldr	r3, [pc, #240]	@ (801704c <HAL_RCC_OscConfig+0x298>)
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016f62:	f7ff f8d5 	bl	8016110 <HAL_GetTick>
 8016f66:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016f68:	4b37      	ldr	r3, [pc, #220]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f6c:	f013 0f02 	tst.w	r3, #2
 8016f70:	d006      	beq.n	8016f80 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016f72:	f7ff f8cd 	bl	8016110 <HAL_GetTick>
 8016f76:	1b40      	subs	r0, r0, r5
 8016f78:	2802      	cmp	r0, #2
 8016f7a:	d9f5      	bls.n	8016f68 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8016f7c:	2003      	movs	r0, #3
 8016f7e:	e103      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016f80:	6823      	ldr	r3, [r4, #0]
 8016f82:	f013 0f04 	tst.w	r3, #4
 8016f86:	d077      	beq.n	8017078 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016f88:	4b2f      	ldr	r3, [pc, #188]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f8c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8016f90:	d133      	bne.n	8016ffa <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016f92:	2300      	movs	r3, #0
 8016f94:	9301      	str	r3, [sp, #4]
 8016f96:	4b2c      	ldr	r3, [pc, #176]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016f98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016f9a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8016f9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8016fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016fa6:	9301      	str	r3, [sp, #4]
 8016fa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8016faa:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016fac:	4b28      	ldr	r3, [pc, #160]	@ (8017050 <HAL_RCC_OscConfig+0x29c>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016fb4:	d023      	beq.n	8016ffe <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016fb6:	68a3      	ldr	r3, [r4, #8]
 8016fb8:	2b01      	cmp	r3, #1
 8016fba:	d034      	beq.n	8017026 <HAL_RCC_OscConfig+0x272>
 8016fbc:	2b05      	cmp	r3, #5
 8016fbe:	d038      	beq.n	8017032 <HAL_RCC_OscConfig+0x27e>
 8016fc0:	4b21      	ldr	r3, [pc, #132]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016fc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016fc4:	f022 0201 	bic.w	r2, r2, #1
 8016fc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8016fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016fcc:	f022 0204 	bic.w	r2, r2, #4
 8016fd0:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016fd2:	68a3      	ldr	r3, [r4, #8]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d03d      	beq.n	8017054 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016fd8:	f7ff f89a 	bl	8016110 <HAL_GetTick>
 8016fdc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016fde:	4b1a      	ldr	r3, [pc, #104]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8016fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fe2:	f013 0f02 	tst.w	r3, #2
 8016fe6:	d146      	bne.n	8017076 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016fe8:	f7ff f892 	bl	8016110 <HAL_GetTick>
 8016fec:	1b80      	subs	r0, r0, r6
 8016fee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016ff2:	4298      	cmp	r0, r3
 8016ff4:	d9f3      	bls.n	8016fde <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8016ff6:	2003      	movs	r0, #3
 8016ff8:	e0c6      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8016ffa:	2500      	movs	r5, #0
 8016ffc:	e7d6      	b.n	8016fac <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016ffe:	4a14      	ldr	r2, [pc, #80]	@ (8017050 <HAL_RCC_OscConfig+0x29c>)
 8017000:	6813      	ldr	r3, [r2, #0]
 8017002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017006:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8017008:	f7ff f882 	bl	8016110 <HAL_GetTick>
 801700c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801700e:	4b10      	ldr	r3, [pc, #64]	@ (8017050 <HAL_RCC_OscConfig+0x29c>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017016:	d1ce      	bne.n	8016fb6 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017018:	f7ff f87a 	bl	8016110 <HAL_GetTick>
 801701c:	1b80      	subs	r0, r0, r6
 801701e:	2802      	cmp	r0, #2
 8017020:	d9f5      	bls.n	801700e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8017022:	2003      	movs	r0, #3
 8017024:	e0b0      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017026:	4a08      	ldr	r2, [pc, #32]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8017028:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 801702a:	f043 0301 	orr.w	r3, r3, #1
 801702e:	6713      	str	r3, [r2, #112]	@ 0x70
 8017030:	e7cf      	b.n	8016fd2 <HAL_RCC_OscConfig+0x21e>
 8017032:	4b05      	ldr	r3, [pc, #20]	@ (8017048 <HAL_RCC_OscConfig+0x294>)
 8017034:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017036:	f042 0204 	orr.w	r2, r2, #4
 801703a:	671a      	str	r2, [r3, #112]	@ 0x70
 801703c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801703e:	f042 0201 	orr.w	r2, r2, #1
 8017042:	671a      	str	r2, [r3, #112]	@ 0x70
 8017044:	e7c5      	b.n	8016fd2 <HAL_RCC_OscConfig+0x21e>
 8017046:	bf00      	nop
 8017048:	40023800 	.word	0x40023800
 801704c:	42470000 	.word	0x42470000
 8017050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017054:	f7ff f85c 	bl	8016110 <HAL_GetTick>
 8017058:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801705a:	4b52      	ldr	r3, [pc, #328]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 801705c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801705e:	f013 0f02 	tst.w	r3, #2
 8017062:	d008      	beq.n	8017076 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017064:	f7ff f854 	bl	8016110 <HAL_GetTick>
 8017068:	1b80      	subs	r0, r0, r6
 801706a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801706e:	4298      	cmp	r0, r3
 8017070:	d9f3      	bls.n	801705a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8017072:	2003      	movs	r0, #3
 8017074:	e088      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017076:	b9ed      	cbnz	r5, 80170b4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017078:	69a3      	ldr	r3, [r4, #24]
 801707a:	2b00      	cmp	r3, #0
 801707c:	f000 8083 	beq.w	8017186 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017080:	4a48      	ldr	r2, [pc, #288]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 8017082:	6892      	ldr	r2, [r2, #8]
 8017084:	f002 020c 	and.w	r2, r2, #12
 8017088:	2a08      	cmp	r2, #8
 801708a:	d051      	beq.n	8017130 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801708c:	2b02      	cmp	r3, #2
 801708e:	d017      	beq.n	80170c0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017090:	4b45      	ldr	r3, [pc, #276]	@ (80171a8 <HAL_RCC_OscConfig+0x3f4>)
 8017092:	2200      	movs	r2, #0
 8017094:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017096:	f7ff f83b 	bl	8016110 <HAL_GetTick>
 801709a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801709c:	4b41      	ldr	r3, [pc, #260]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80170a4:	d042      	beq.n	801712c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80170a6:	f7ff f833 	bl	8016110 <HAL_GetTick>
 80170aa:	1b00      	subs	r0, r0, r4
 80170ac:	2802      	cmp	r0, #2
 80170ae:	d9f5      	bls.n	801709c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80170b0:	2003      	movs	r0, #3
 80170b2:	e069      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80170b4:	4a3b      	ldr	r2, [pc, #236]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 80170b6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80170b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80170bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80170be:	e7db      	b.n	8017078 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80170c0:	4b39      	ldr	r3, [pc, #228]	@ (80171a8 <HAL_RCC_OscConfig+0x3f4>)
 80170c2:	2200      	movs	r2, #0
 80170c4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80170c6:	f7ff f823 	bl	8016110 <HAL_GetTick>
 80170ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80170cc:	4b35      	ldr	r3, [pc, #212]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80170d4:	d006      	beq.n	80170e4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80170d6:	f7ff f81b 	bl	8016110 <HAL_GetTick>
 80170da:	1b40      	subs	r0, r0, r5
 80170dc:	2802      	cmp	r0, #2
 80170de:	d9f5      	bls.n	80170cc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80170e0:	2003      	movs	r0, #3
 80170e2:	e051      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80170e4:	69e3      	ldr	r3, [r4, #28]
 80170e6:	6a22      	ldr	r2, [r4, #32]
 80170e8:	4313      	orrs	r3, r2
 80170ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80170ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80170f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80170f2:	0852      	lsrs	r2, r2, #1
 80170f4:	3a01      	subs	r2, #1
 80170f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80170fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017100:	4a28      	ldr	r2, [pc, #160]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 8017102:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8017104:	4b28      	ldr	r3, [pc, #160]	@ (80171a8 <HAL_RCC_OscConfig+0x3f4>)
 8017106:	2201      	movs	r2, #1
 8017108:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801710a:	f7ff f801 	bl	8016110 <HAL_GetTick>
 801710e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017110:	4b24      	ldr	r3, [pc, #144]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8017118:	d106      	bne.n	8017128 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801711a:	f7fe fff9 	bl	8016110 <HAL_GetTick>
 801711e:	1b00      	subs	r0, r0, r4
 8017120:	2802      	cmp	r0, #2
 8017122:	d9f5      	bls.n	8017110 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8017124:	2003      	movs	r0, #3
 8017126:	e02f      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8017128:	2000      	movs	r0, #0
 801712a:	e02d      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
 801712c:	2000      	movs	r0, #0
 801712e:	e02b      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017130:	2b01      	cmp	r3, #1
 8017132:	d02b      	beq.n	801718c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8017134:	4b1b      	ldr	r3, [pc, #108]	@ (80171a4 <HAL_RCC_OscConfig+0x3f0>)
 8017136:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017138:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 801713c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801713e:	4291      	cmp	r1, r2
 8017140:	d126      	bne.n	8017190 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8017146:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017148:	428a      	cmp	r2, r1
 801714a:	d123      	bne.n	8017194 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801714c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801714e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8017152:	401a      	ands	r2, r3
 8017154:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8017158:	d11e      	bne.n	8017198 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801715a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 801715e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017160:	0852      	lsrs	r2, r2, #1
 8017162:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017164:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8017168:	d118      	bne.n	801719c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801716a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 801716e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8017170:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8017174:	d114      	bne.n	80171a0 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8017176:	2000      	movs	r0, #0
 8017178:	e006      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 801717a:	2001      	movs	r0, #1
}
 801717c:	4770      	bx	lr
        return HAL_ERROR;
 801717e:	2001      	movs	r0, #1
 8017180:	e002      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8017182:	2001      	movs	r0, #1
 8017184:	e000      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8017186:	2000      	movs	r0, #0
}
 8017188:	b002      	add	sp, #8
 801718a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 801718c:	2001      	movs	r0, #1
 801718e:	e7fb      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8017190:	2001      	movs	r0, #1
 8017192:	e7f9      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
 8017194:	2001      	movs	r0, #1
 8017196:	e7f7      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
 8017198:	2001      	movs	r0, #1
 801719a:	e7f5      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
 801719c:	2001      	movs	r0, #1
 801719e:	e7f3      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
 80171a0:	2001      	movs	r0, #1
 80171a2:	e7f1      	b.n	8017188 <HAL_RCC_OscConfig+0x3d4>
 80171a4:	40023800 	.word	0x40023800
 80171a8:	42470000 	.word	0x42470000

080171ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80171ac:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80171ae:	4b33      	ldr	r3, [pc, #204]	@ (801727c <HAL_RCC_GetSysClockFreq+0xd0>)
 80171b0:	689b      	ldr	r3, [r3, #8]
 80171b2:	f003 030c 	and.w	r3, r3, #12
 80171b6:	2b04      	cmp	r3, #4
 80171b8:	d05b      	beq.n	8017272 <HAL_RCC_GetSysClockFreq+0xc6>
 80171ba:	2b08      	cmp	r3, #8
 80171bc:	d15b      	bne.n	8017276 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80171be:	4b2f      	ldr	r3, [pc, #188]	@ (801727c <HAL_RCC_GetSysClockFreq+0xd0>)
 80171c0:	685a      	ldr	r2, [r3, #4]
 80171c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80171c6:	685b      	ldr	r3, [r3, #4]
 80171c8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80171cc:	d02c      	beq.n	8017228 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80171ce:	4b2b      	ldr	r3, [pc, #172]	@ (801727c <HAL_RCC_GetSysClockFreq+0xd0>)
 80171d0:	6858      	ldr	r0, [r3, #4]
 80171d2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80171d6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80171da:	ebbc 0c00 	subs.w	ip, ip, r0
 80171de:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80171e2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80171e6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80171ea:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80171ee:	ebb1 010c 	subs.w	r1, r1, ip
 80171f2:	eb63 030e 	sbc.w	r3, r3, lr
 80171f6:	00db      	lsls	r3, r3, #3
 80171f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80171fc:	00c9      	lsls	r1, r1, #3
 80171fe:	eb11 0c00 	adds.w	ip, r1, r0
 8017202:	f143 0300 	adc.w	r3, r3, #0
 8017206:	0259      	lsls	r1, r3, #9
 8017208:	2300      	movs	r3, #0
 801720a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 801720e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8017212:	f7f9 fda1 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8017216:	4b19      	ldr	r3, [pc, #100]	@ (801727c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017218:	685b      	ldr	r3, [r3, #4]
 801721a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801721e:	3301      	adds	r3, #1
 8017220:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8017222:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8017226:	e027      	b.n	8017278 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8017228:	4b14      	ldr	r3, [pc, #80]	@ (801727c <HAL_RCC_GetSysClockFreq+0xd0>)
 801722a:	6858      	ldr	r0, [r3, #4]
 801722c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8017230:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8017234:	ebbc 0c00 	subs.w	ip, ip, r0
 8017238:	eb6e 0e0e 	sbc.w	lr, lr, lr
 801723c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8017240:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8017244:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8017248:	ebb1 010c 	subs.w	r1, r1, ip
 801724c:	eb63 030e 	sbc.w	r3, r3, lr
 8017250:	00db      	lsls	r3, r3, #3
 8017252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017256:	00c9      	lsls	r1, r1, #3
 8017258:	eb11 0c00 	adds.w	ip, r1, r0
 801725c:	f143 0300 	adc.w	r3, r3, #0
 8017260:	0299      	lsls	r1, r3, #10
 8017262:	2300      	movs	r3, #0
 8017264:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8017268:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 801726c:	f7f9 fd74 	bl	8010d58 <__aeabi_uldivmod>
 8017270:	e7d1      	b.n	8017216 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8017272:	4803      	ldr	r0, [pc, #12]	@ (8017280 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017274:	e000      	b.n	8017278 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017276:	4803      	ldr	r0, [pc, #12]	@ (8017284 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8017278:	bd08      	pop	{r3, pc}
 801727a:	bf00      	nop
 801727c:	40023800 	.word	0x40023800
 8017280:	007a1200 	.word	0x007a1200
 8017284:	00f42400 	.word	0x00f42400

08017288 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8017288:	2800      	cmp	r0, #0
 801728a:	f000 809b 	beq.w	80173c4 <HAL_RCC_ClockConfig+0x13c>
{
 801728e:	b570      	push	{r4, r5, r6, lr}
 8017290:	460d      	mov	r5, r1
 8017292:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017294:	4b4f      	ldr	r3, [pc, #316]	@ (80173d4 <HAL_RCC_ClockConfig+0x14c>)
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	f003 0307 	and.w	r3, r3, #7
 801729c:	428b      	cmp	r3, r1
 801729e:	d208      	bcs.n	80172b2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80172a0:	b2cb      	uxtb	r3, r1
 80172a2:	4a4c      	ldr	r2, [pc, #304]	@ (80173d4 <HAL_RCC_ClockConfig+0x14c>)
 80172a4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80172a6:	6813      	ldr	r3, [r2, #0]
 80172a8:	f003 0307 	and.w	r3, r3, #7
 80172ac:	428b      	cmp	r3, r1
 80172ae:	f040 808b 	bne.w	80173c8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80172b2:	6823      	ldr	r3, [r4, #0]
 80172b4:	f013 0f02 	tst.w	r3, #2
 80172b8:	d017      	beq.n	80172ea <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80172ba:	f013 0f04 	tst.w	r3, #4
 80172be:	d004      	beq.n	80172ca <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80172c0:	4a45      	ldr	r2, [pc, #276]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 80172c2:	6893      	ldr	r3, [r2, #8]
 80172c4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80172c8:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80172ca:	6823      	ldr	r3, [r4, #0]
 80172cc:	f013 0f08 	tst.w	r3, #8
 80172d0:	d004      	beq.n	80172dc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80172d2:	4a41      	ldr	r2, [pc, #260]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 80172d4:	6893      	ldr	r3, [r2, #8]
 80172d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80172da:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80172dc:	4a3e      	ldr	r2, [pc, #248]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 80172de:	6893      	ldr	r3, [r2, #8]
 80172e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80172e4:	68a1      	ldr	r1, [r4, #8]
 80172e6:	430b      	orrs	r3, r1
 80172e8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80172ea:	6823      	ldr	r3, [r4, #0]
 80172ec:	f013 0f01 	tst.w	r3, #1
 80172f0:	d032      	beq.n	8017358 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80172f2:	6863      	ldr	r3, [r4, #4]
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	d021      	beq.n	801733c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80172f8:	1e9a      	subs	r2, r3, #2
 80172fa:	2a01      	cmp	r2, #1
 80172fc:	d925      	bls.n	801734a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80172fe:	4a36      	ldr	r2, [pc, #216]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 8017300:	6812      	ldr	r2, [r2, #0]
 8017302:	f012 0f02 	tst.w	r2, #2
 8017306:	d061      	beq.n	80173cc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017308:	4933      	ldr	r1, [pc, #204]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 801730a:	688a      	ldr	r2, [r1, #8]
 801730c:	f022 0203 	bic.w	r2, r2, #3
 8017310:	4313      	orrs	r3, r2
 8017312:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8017314:	f7fe fefc 	bl	8016110 <HAL_GetTick>
 8017318:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801731a:	4b2f      	ldr	r3, [pc, #188]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 801731c:	689b      	ldr	r3, [r3, #8]
 801731e:	f003 030c 	and.w	r3, r3, #12
 8017322:	6862      	ldr	r2, [r4, #4]
 8017324:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8017328:	d016      	beq.n	8017358 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801732a:	f7fe fef1 	bl	8016110 <HAL_GetTick>
 801732e:	1b80      	subs	r0, r0, r6
 8017330:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017334:	4298      	cmp	r0, r3
 8017336:	d9f0      	bls.n	801731a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8017338:	2003      	movs	r0, #3
 801733a:	e042      	b.n	80173c2 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801733c:	4a26      	ldr	r2, [pc, #152]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 801733e:	6812      	ldr	r2, [r2, #0]
 8017340:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8017344:	d1e0      	bne.n	8017308 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017346:	2001      	movs	r0, #1
 8017348:	e03b      	b.n	80173c2 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801734a:	4a23      	ldr	r2, [pc, #140]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 801734c:	6812      	ldr	r2, [r2, #0]
 801734e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8017352:	d1d9      	bne.n	8017308 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8017354:	2001      	movs	r0, #1
 8017356:	e034      	b.n	80173c2 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017358:	4b1e      	ldr	r3, [pc, #120]	@ (80173d4 <HAL_RCC_ClockConfig+0x14c>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	f003 0307 	and.w	r3, r3, #7
 8017360:	42ab      	cmp	r3, r5
 8017362:	d907      	bls.n	8017374 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017364:	b2ea      	uxtb	r2, r5
 8017366:	4b1b      	ldr	r3, [pc, #108]	@ (80173d4 <HAL_RCC_ClockConfig+0x14c>)
 8017368:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f003 0307 	and.w	r3, r3, #7
 8017370:	42ab      	cmp	r3, r5
 8017372:	d12d      	bne.n	80173d0 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	f013 0f04 	tst.w	r3, #4
 801737a:	d006      	beq.n	801738a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801737c:	4a16      	ldr	r2, [pc, #88]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 801737e:	6893      	ldr	r3, [r2, #8]
 8017380:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8017384:	68e1      	ldr	r1, [r4, #12]
 8017386:	430b      	orrs	r3, r1
 8017388:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801738a:	6823      	ldr	r3, [r4, #0]
 801738c:	f013 0f08 	tst.w	r3, #8
 8017390:	d007      	beq.n	80173a2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017392:	4a11      	ldr	r2, [pc, #68]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 8017394:	6893      	ldr	r3, [r2, #8]
 8017396:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801739a:	6921      	ldr	r1, [r4, #16]
 801739c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80173a0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80173a2:	f7ff ff03 	bl	80171ac <HAL_RCC_GetSysClockFreq>
 80173a6:	4b0c      	ldr	r3, [pc, #48]	@ (80173d8 <HAL_RCC_ClockConfig+0x150>)
 80173a8:	689b      	ldr	r3, [r3, #8]
 80173aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80173ae:	4a0b      	ldr	r2, [pc, #44]	@ (80173dc <HAL_RCC_ClockConfig+0x154>)
 80173b0:	5cd3      	ldrb	r3, [r2, r3]
 80173b2:	40d8      	lsrs	r0, r3
 80173b4:	4b0a      	ldr	r3, [pc, #40]	@ (80173e0 <HAL_RCC_ClockConfig+0x158>)
 80173b6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80173b8:	4b0a      	ldr	r3, [pc, #40]	@ (80173e4 <HAL_RCC_ClockConfig+0x15c>)
 80173ba:	6818      	ldr	r0, [r3, #0]
 80173bc:	f7fa ff8e 	bl	80122dc <HAL_InitTick>
  return HAL_OK;
 80173c0:	2000      	movs	r0, #0
}
 80173c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80173c4:	2001      	movs	r0, #1
}
 80173c6:	4770      	bx	lr
      return HAL_ERROR;
 80173c8:	2001      	movs	r0, #1
 80173ca:	e7fa      	b.n	80173c2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80173cc:	2001      	movs	r0, #1
 80173ce:	e7f8      	b.n	80173c2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80173d0:	2001      	movs	r0, #1
 80173d2:	e7f6      	b.n	80173c2 <HAL_RCC_ClockConfig+0x13a>
 80173d4:	40023c00 	.word	0x40023c00
 80173d8:	40023800 	.word	0x40023800
 80173dc:	08036318 	.word	0x08036318
 80173e0:	20000018 	.word	0x20000018
 80173e4:	20000108 	.word	0x20000108

080173e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80173e8:	4b01      	ldr	r3, [pc, #4]	@ (80173f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80173ea:	6818      	ldr	r0, [r3, #0]
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	20000018 	.word	0x20000018

080173f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80173f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80173f6:	f7ff fff7 	bl	80173e8 <HAL_RCC_GetHCLKFreq>
 80173fa:	4b04      	ldr	r3, [pc, #16]	@ (801740c <HAL_RCC_GetPCLK1Freq+0x18>)
 80173fc:	689b      	ldr	r3, [r3, #8]
 80173fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8017402:	4a03      	ldr	r2, [pc, #12]	@ (8017410 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8017404:	5cd3      	ldrb	r3, [r2, r3]
}
 8017406:	40d8      	lsrs	r0, r3
 8017408:	bd08      	pop	{r3, pc}
 801740a:	bf00      	nop
 801740c:	40023800 	.word	0x40023800
 8017410:	08036310 	.word	0x08036310

08017414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017414:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017416:	f7ff ffe7 	bl	80173e8 <HAL_RCC_GetHCLKFreq>
 801741a:	4b04      	ldr	r3, [pc, #16]	@ (801742c <HAL_RCC_GetPCLK2Freq+0x18>)
 801741c:	689b      	ldr	r3, [r3, #8]
 801741e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8017422:	4a03      	ldr	r2, [pc, #12]	@ (8017430 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8017424:	5cd3      	ldrb	r3, [r2, r3]
}
 8017426:	40d8      	lsrs	r0, r3
 8017428:	bd08      	pop	{r3, pc}
 801742a:	bf00      	nop
 801742c:	40023800 	.word	0x40023800
 8017430:	08036310 	.word	0x08036310

08017434 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017434:	230f      	movs	r3, #15
 8017436:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8017438:	4b0b      	ldr	r3, [pc, #44]	@ (8017468 <HAL_RCC_GetClockConfig+0x34>)
 801743a:	689a      	ldr	r2, [r3, #8]
 801743c:	f002 0203 	and.w	r2, r2, #3
 8017440:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017442:	689a      	ldr	r2, [r3, #8]
 8017444:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8017448:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801744a:	689a      	ldr	r2, [r3, #8]
 801744c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8017450:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017452:	689b      	ldr	r3, [r3, #8]
 8017454:	08db      	lsrs	r3, r3, #3
 8017456:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 801745a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801745c:	4b03      	ldr	r3, [pc, #12]	@ (801746c <HAL_RCC_GetClockConfig+0x38>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	f003 0307 	and.w	r3, r3, #7
 8017464:	600b      	str	r3, [r1, #0]
}
 8017466:	4770      	bx	lr
 8017468:	40023800 	.word	0x40023800
 801746c:	40023c00 	.word	0x40023c00

08017470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017474:	b082      	sub	sp, #8
 8017476:	4605      	mov	r5, r0
 8017478:	4688      	mov	r8, r1
 801747a:	4617      	mov	r7, r2
 801747c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801747e:	f7fe fe47 	bl	8016110 <HAL_GetTick>
 8017482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017484:	1a1b      	subs	r3, r3, r0
 8017486:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 801748a:	f7fe fe41 	bl	8016110 <HAL_GetTick>
 801748e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017490:	4b28      	ldr	r3, [pc, #160]	@ (8017534 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8017498:	fb09 f303 	mul.w	r3, r9, r3
 801749c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801749e:	682b      	ldr	r3, [r5, #0]
 80174a0:	689c      	ldr	r4, [r3, #8]
 80174a2:	ea38 0404 	bics.w	r4, r8, r4
 80174a6:	bf0c      	ite	eq
 80174a8:	2301      	moveq	r3, #1
 80174aa:	2300      	movne	r3, #0
 80174ac:	42bb      	cmp	r3, r7
 80174ae:	d03d      	beq.n	801752c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80174b0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80174b4:	d0f3      	beq.n	801749e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80174b6:	f7fe fe2b 	bl	8016110 <HAL_GetTick>
 80174ba:	eba0 000a 	sub.w	r0, r0, sl
 80174be:	4548      	cmp	r0, r9
 80174c0:	d207      	bcs.n	80174d2 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80174c2:	9a01      	ldr	r2, [sp, #4]
 80174c4:	b102      	cbz	r2, 80174c8 <SPI_WaitFlagStateUntilTimeout+0x58>
 80174c6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80174c8:	9b01      	ldr	r3, [sp, #4]
 80174ca:	3b01      	subs	r3, #1
 80174cc:	9301      	str	r3, [sp, #4]
 80174ce:	4691      	mov	r9, r2
 80174d0:	e7e5      	b.n	801749e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80174d2:	682a      	ldr	r2, [r5, #0]
 80174d4:	6853      	ldr	r3, [r2, #4]
 80174d6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80174da:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80174dc:	686b      	ldr	r3, [r5, #4]
 80174de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80174e2:	d00b      	beq.n	80174fc <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80174e4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80174e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80174ea:	d014      	beq.n	8017516 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80174ec:	2301      	movs	r3, #1
 80174ee:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80174f2:	2300      	movs	r3, #0
 80174f4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80174f8:	2003      	movs	r0, #3
 80174fa:	e018      	b.n	801752e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80174fc:	68ab      	ldr	r3, [r5, #8]
 80174fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017502:	d002      	beq.n	801750a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017508:	d1ec      	bne.n	80174e4 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 801750a:	682a      	ldr	r2, [r5, #0]
 801750c:	6813      	ldr	r3, [r2, #0]
 801750e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017512:	6013      	str	r3, [r2, #0]
 8017514:	e7e6      	b.n	80174e4 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8017516:	682a      	ldr	r2, [r5, #0]
 8017518:	6813      	ldr	r3, [r2, #0]
 801751a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801751e:	6013      	str	r3, [r2, #0]
 8017520:	682a      	ldr	r2, [r5, #0]
 8017522:	6813      	ldr	r3, [r2, #0]
 8017524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017528:	6013      	str	r3, [r2, #0]
 801752a:	e7df      	b.n	80174ec <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 801752c:	2000      	movs	r0, #0
}
 801752e:	b002      	add	sp, #8
 8017530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017534:	20000018 	.word	0x20000018

08017538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017538:	b570      	push	{r4, r5, r6, lr}
 801753a:	b084      	sub	sp, #16
 801753c:	4604      	mov	r4, r0
 801753e:	460d      	mov	r5, r1
 8017540:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017542:	9200      	str	r2, [sp, #0]
 8017544:	460b      	mov	r3, r1
 8017546:	2201      	movs	r2, #1
 8017548:	2102      	movs	r1, #2
 801754a:	f7ff ff91 	bl	8017470 <SPI_WaitFlagStateUntilTimeout>
 801754e:	b9d0      	cbnz	r0, 8017586 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8017550:	4b17      	ldr	r3, [pc, #92]	@ (80175b0 <SPI_EndRxTxTransaction+0x78>)
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	4a17      	ldr	r2, [pc, #92]	@ (80175b4 <SPI_EndRxTxTransaction+0x7c>)
 8017556:	fba2 2303 	umull	r2, r3, r2, r3
 801755a:	0d5b      	lsrs	r3, r3, #21
 801755c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017560:	fb02 f303 	mul.w	r3, r2, r3
 8017564:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017566:	6863      	ldr	r3, [r4, #4]
 8017568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801756c:	d011      	beq.n	8017592 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801756e:	9b03      	ldr	r3, [sp, #12]
 8017570:	b13b      	cbz	r3, 8017582 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8017572:	9b03      	ldr	r3, [sp, #12]
 8017574:	3b01      	subs	r3, #1
 8017576:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017578:	6823      	ldr	r3, [r4, #0]
 801757a:	689b      	ldr	r3, [r3, #8]
 801757c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017580:	d1f5      	bne.n	801756e <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8017582:	b004      	add	sp, #16
 8017584:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017586:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017588:	f043 0320 	orr.w	r3, r3, #32
 801758c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 801758e:	2003      	movs	r0, #3
 8017590:	e7f7      	b.n	8017582 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017592:	9600      	str	r6, [sp, #0]
 8017594:	462b      	mov	r3, r5
 8017596:	2200      	movs	r2, #0
 8017598:	2180      	movs	r1, #128	@ 0x80
 801759a:	4620      	mov	r0, r4
 801759c:	f7ff ff68 	bl	8017470 <SPI_WaitFlagStateUntilTimeout>
 80175a0:	2800      	cmp	r0, #0
 80175a2:	d0ee      	beq.n	8017582 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80175a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80175a6:	f043 0320 	orr.w	r3, r3, #32
 80175aa:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80175ac:	2003      	movs	r0, #3
 80175ae:	e7e8      	b.n	8017582 <SPI_EndRxTxTransaction+0x4a>
 80175b0:	20000018 	.word	0x20000018
 80175b4:	165e9f81 	.word	0x165e9f81

080175b8 <SPI_EndRxTransaction>:
{
 80175b8:	b510      	push	{r4, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	4604      	mov	r4, r0
 80175be:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80175c0:	6841      	ldr	r1, [r0, #4]
 80175c2:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 80175c6:	d014      	beq.n	80175f2 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80175c8:	6861      	ldr	r1, [r4, #4]
 80175ca:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 80175ce:	d12a      	bne.n	8017626 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80175d0:	68a1      	ldr	r1, [r4, #8]
 80175d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80175d6:	d019      	beq.n	801760c <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80175d8:	9200      	str	r2, [sp, #0]
 80175da:	2200      	movs	r2, #0
 80175dc:	2180      	movs	r1, #128	@ 0x80
 80175de:	4620      	mov	r0, r4
 80175e0:	f7ff ff46 	bl	8017470 <SPI_WaitFlagStateUntilTimeout>
 80175e4:	b330      	cbz	r0, 8017634 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80175e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80175e8:	f043 0320 	orr.w	r3, r3, #32
 80175ec:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80175ee:	2003      	movs	r0, #3
 80175f0:	e020      	b.n	8017634 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80175f2:	6881      	ldr	r1, [r0, #8]
 80175f4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80175f8:	d002      	beq.n	8017600 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80175fa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80175fe:	d1e3      	bne.n	80175c8 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8017600:	6820      	ldr	r0, [r4, #0]
 8017602:	6801      	ldr	r1, [r0, #0]
 8017604:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8017608:	6001      	str	r1, [r0, #0]
 801760a:	e7dd      	b.n	80175c8 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801760c:	9200      	str	r2, [sp, #0]
 801760e:	2200      	movs	r2, #0
 8017610:	2101      	movs	r1, #1
 8017612:	4620      	mov	r0, r4
 8017614:	f7ff ff2c 	bl	8017470 <SPI_WaitFlagStateUntilTimeout>
 8017618:	b160      	cbz	r0, 8017634 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801761a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801761c:	f043 0320 	orr.w	r3, r3, #32
 8017620:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017622:	2003      	movs	r0, #3
 8017624:	e006      	b.n	8017634 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017626:	9200      	str	r2, [sp, #0]
 8017628:	2200      	movs	r2, #0
 801762a:	2101      	movs	r1, #1
 801762c:	4620      	mov	r0, r4
 801762e:	f7ff ff1f 	bl	8017470 <SPI_WaitFlagStateUntilTimeout>
 8017632:	b908      	cbnz	r0, 8017638 <SPI_EndRxTransaction+0x80>
}
 8017634:	b002      	add	sp, #8
 8017636:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017638:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801763a:	f043 0320 	orr.w	r3, r3, #32
 801763e:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017640:	2003      	movs	r0, #3
 8017642:	e7f7      	b.n	8017634 <SPI_EndRxTransaction+0x7c>

08017644 <HAL_SPI_Init>:
  if (hspi == NULL)
 8017644:	2800      	cmp	r0, #0
 8017646:	d05a      	beq.n	80176fe <HAL_SPI_Init+0xba>
{
 8017648:	b510      	push	{r4, lr}
 801764a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801764c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801764e:	b933      	cbnz	r3, 801765e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017650:	6843      	ldr	r3, [r0, #4]
 8017652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017656:	d005      	beq.n	8017664 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017658:	2300      	movs	r3, #0
 801765a:	61c3      	str	r3, [r0, #28]
 801765c:	e002      	b.n	8017664 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801765e:	2300      	movs	r3, #0
 8017660:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017662:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017664:	2300      	movs	r3, #0
 8017666:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8017668:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 801766c:	2b00      	cmp	r3, #0
 801766e:	d040      	beq.n	80176f2 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8017670:	2302      	movs	r3, #2
 8017672:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8017676:	6822      	ldr	r2, [r4, #0]
 8017678:	6813      	ldr	r3, [r2, #0]
 801767a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801767e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017680:	6863      	ldr	r3, [r4, #4]
 8017682:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8017686:	68a2      	ldr	r2, [r4, #8]
 8017688:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 801768c:	4313      	orrs	r3, r2
 801768e:	68e2      	ldr	r2, [r4, #12]
 8017690:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8017694:	4313      	orrs	r3, r2
 8017696:	6922      	ldr	r2, [r4, #16]
 8017698:	f002 0202 	and.w	r2, r2, #2
 801769c:	4313      	orrs	r3, r2
 801769e:	6962      	ldr	r2, [r4, #20]
 80176a0:	f002 0201 	and.w	r2, r2, #1
 80176a4:	4313      	orrs	r3, r2
 80176a6:	69a2      	ldr	r2, [r4, #24]
 80176a8:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80176ac:	4313      	orrs	r3, r2
 80176ae:	69e2      	ldr	r2, [r4, #28]
 80176b0:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80176b4:	4313      	orrs	r3, r2
 80176b6:	6a22      	ldr	r2, [r4, #32]
 80176b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80176bc:	4313      	orrs	r3, r2
 80176be:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80176c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80176c4:	6821      	ldr	r1, [r4, #0]
 80176c6:	4313      	orrs	r3, r2
 80176c8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80176ca:	8b63      	ldrh	r3, [r4, #26]
 80176cc:	f003 0304 	and.w	r3, r3, #4
 80176d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80176d2:	f002 0210 	and.w	r2, r2, #16
 80176d6:	6821      	ldr	r1, [r4, #0]
 80176d8:	4313      	orrs	r3, r2
 80176da:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80176dc:	6822      	ldr	r2, [r4, #0]
 80176de:	69d3      	ldr	r3, [r2, #28]
 80176e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80176e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80176e6:	2000      	movs	r0, #0
 80176e8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80176ea:	2301      	movs	r3, #1
 80176ec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80176f0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80176f2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80176f6:	4620      	mov	r0, r4
 80176f8:	f7fa fd6c 	bl	80121d4 <HAL_SPI_MspInit>
 80176fc:	e7b8      	b.n	8017670 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80176fe:	2001      	movs	r0, #1
}
 8017700:	4770      	bx	lr

08017702 <HAL_SPI_Transmit>:
{
 8017702:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017706:	b083      	sub	sp, #12
 8017708:	4604      	mov	r4, r0
 801770a:	4689      	mov	r9, r1
 801770c:	4690      	mov	r8, r2
 801770e:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8017710:	f7fe fcfe 	bl	8016110 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8017714:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8017718:	b2f6      	uxtb	r6, r6
 801771a:	2e01      	cmp	r6, #1
 801771c:	f040 80cc 	bne.w	80178b8 <HAL_SPI_Transmit+0x1b6>
 8017720:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017722:	f1b9 0f00 	cmp.w	r9, #0
 8017726:	f000 80c8 	beq.w	80178ba <HAL_SPI_Transmit+0x1b8>
 801772a:	f1b8 0f00 	cmp.w	r8, #0
 801772e:	f000 80c4 	beq.w	80178ba <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8017732:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017736:	2b01      	cmp	r3, #1
 8017738:	f000 80c3 	beq.w	80178c2 <HAL_SPI_Transmit+0x1c0>
 801773c:	2301      	movs	r3, #1
 801773e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017742:	2303      	movs	r3, #3
 8017744:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017748:	2300      	movs	r3, #0
 801774a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801774c:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017750:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8017754:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017758:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 801775a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 801775c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 801775e:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017760:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017762:	68a3      	ldr	r3, [r4, #8]
 8017764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017768:	d01e      	beq.n	80177a8 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801776a:	6823      	ldr	r3, [r4, #0]
 801776c:	681a      	ldr	r2, [r3, #0]
 801776e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017772:	d103      	bne.n	801777c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801777a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801777c:	68e3      	ldr	r3, [r4, #12]
 801777e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017782:	d01c      	beq.n	80177be <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017784:	6863      	ldr	r3, [r4, #4]
 8017786:	b113      	cbz	r3, 801778e <HAL_SPI_Transmit+0x8c>
 8017788:	f1b8 0f01 	cmp.w	r8, #1
 801778c:	d15f      	bne.n	801784e <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801778e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017790:	6823      	ldr	r3, [r4, #0]
 8017792:	7812      	ldrb	r2, [r2, #0]
 8017794:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017796:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017798:	3301      	adds	r3, #1
 801779a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801779c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801779e:	b29b      	uxth	r3, r3
 80177a0:	3b01      	subs	r3, #1
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80177a6:	e052      	b.n	801784e <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 80177a8:	6822      	ldr	r2, [r4, #0]
 80177aa:	6813      	ldr	r3, [r2, #0]
 80177ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80177b0:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80177b2:	6822      	ldr	r2, [r4, #0]
 80177b4:	6813      	ldr	r3, [r2, #0]
 80177b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80177ba:	6013      	str	r3, [r2, #0]
 80177bc:	e7d5      	b.n	801776a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80177be:	6863      	ldr	r3, [r4, #4]
 80177c0:	b113      	cbz	r3, 80177c8 <HAL_SPI_Transmit+0xc6>
 80177c2:	f1b8 0f01 	cmp.w	r8, #1
 80177c6:	d115      	bne.n	80177f4 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80177c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	8812      	ldrh	r2, [r2, #0]
 80177ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80177d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177d2:	3302      	adds	r3, #2
 80177d4:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80177d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80177d8:	b29b      	uxth	r3, r3
 80177da:	3b01      	subs	r3, #1
 80177dc:	b29b      	uxth	r3, r3
 80177de:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80177e0:	e008      	b.n	80177f4 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80177e2:	f7fe fc95 	bl	8016110 <HAL_GetTick>
 80177e6:	1bc0      	subs	r0, r0, r7
 80177e8:	42a8      	cmp	r0, r5
 80177ea:	d302      	bcc.n	80177f2 <HAL_SPI_Transmit+0xf0>
 80177ec:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80177f0:	d115      	bne.n	801781e <HAL_SPI_Transmit+0x11c>
 80177f2:	b1a5      	cbz	r5, 801781e <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 80177f4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d042      	beq.n	8017882 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80177fc:	6823      	ldr	r3, [r4, #0]
 80177fe:	689a      	ldr	r2, [r3, #8]
 8017800:	f012 0f02 	tst.w	r2, #2
 8017804:	d0ed      	beq.n	80177e2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017806:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017808:	8812      	ldrh	r2, [r2, #0]
 801780a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801780c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801780e:	3302      	adds	r3, #2
 8017810:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017812:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017814:	b29b      	uxth	r3, r3
 8017816:	3b01      	subs	r3, #1
 8017818:	b29b      	uxth	r3, r3
 801781a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801781c:	e7ea      	b.n	80177f4 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 801781e:	2301      	movs	r3, #1
 8017820:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017824:	2300      	movs	r3, #0
 8017826:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801782a:	2603      	movs	r6, #3
 801782c:	e045      	b.n	80178ba <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801782e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017830:	7812      	ldrb	r2, [r2, #0]
 8017832:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8017834:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017836:	3301      	adds	r3, #1
 8017838:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 801783a:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 801783e:	fa1f fc8c 	uxth.w	ip, ip
 8017842:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017846:	fa1f fc8c 	uxth.w	ip, ip
 801784a:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 801784e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017850:	b29b      	uxth	r3, r3
 8017852:	b1b3      	cbz	r3, 8017882 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017854:	6823      	ldr	r3, [r4, #0]
 8017856:	689a      	ldr	r2, [r3, #8]
 8017858:	f012 0f02 	tst.w	r2, #2
 801785c:	d1e7      	bne.n	801782e <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801785e:	f7fe fc57 	bl	8016110 <HAL_GetTick>
 8017862:	1bc0      	subs	r0, r0, r7
 8017864:	42a8      	cmp	r0, r5
 8017866:	d302      	bcc.n	801786e <HAL_SPI_Transmit+0x16c>
 8017868:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801786c:	d101      	bne.n	8017872 <HAL_SPI_Transmit+0x170>
 801786e:	2d00      	cmp	r5, #0
 8017870:	d1ed      	bne.n	801784e <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8017872:	2301      	movs	r3, #1
 8017874:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017878:	2300      	movs	r3, #0
 801787a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 801787e:	2603      	movs	r6, #3
 8017880:	e01b      	b.n	80178ba <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017882:	463a      	mov	r2, r7
 8017884:	4629      	mov	r1, r5
 8017886:	4620      	mov	r0, r4
 8017888:	f7ff fe56 	bl	8017538 <SPI_EndRxTxTransaction>
 801788c:	b108      	cbz	r0, 8017892 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801788e:	2320      	movs	r3, #32
 8017890:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017892:	68a3      	ldr	r3, [r4, #8]
 8017894:	b933      	cbnz	r3, 80178a4 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017896:	9301      	str	r3, [sp, #4]
 8017898:	6823      	ldr	r3, [r4, #0]
 801789a:	68da      	ldr	r2, [r3, #12]
 801789c:	9201      	str	r2, [sp, #4]
 801789e:	689b      	ldr	r3, [r3, #8]
 80178a0:	9301      	str	r3, [sp, #4]
 80178a2:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80178a4:	2301      	movs	r3, #1
 80178a6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80178aa:	2300      	movs	r3, #0
 80178ac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80178b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80178b2:	b913      	cbnz	r3, 80178ba <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 80178b4:	2600      	movs	r6, #0
 80178b6:	e000      	b.n	80178ba <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 80178b8:	2602      	movs	r6, #2
}
 80178ba:	4630      	mov	r0, r6
 80178bc:	b003      	add	sp, #12
 80178be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80178c2:	2602      	movs	r6, #2
 80178c4:	e7f9      	b.n	80178ba <HAL_SPI_Transmit+0x1b8>

080178c6 <HAL_SPI_TransmitReceive>:
{
 80178c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178ca:	b083      	sub	sp, #12
 80178cc:	4604      	mov	r4, r0
 80178ce:	4688      	mov	r8, r1
 80178d0:	4691      	mov	r9, r2
 80178d2:	461f      	mov	r7, r3
 80178d4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80178d6:	f7fe fc1b 	bl	8016110 <HAL_GetTick>
 80178da:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80178dc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80178e0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80178e2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80178e4:	2b01      	cmp	r3, #1
 80178e6:	d00a      	beq.n	80178fe <HAL_SPI_TransmitReceive+0x38>
 80178e8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80178ec:	f040 8105 	bne.w	8017afa <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80178f0:	68a2      	ldr	r2, [r4, #8]
 80178f2:	2a00      	cmp	r2, #0
 80178f4:	f040 8105 	bne.w	8017b02 <HAL_SPI_TransmitReceive+0x23c>
 80178f8:	2b04      	cmp	r3, #4
 80178fa:	f040 8104 	bne.w	8017b06 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80178fe:	f1b8 0f00 	cmp.w	r8, #0
 8017902:	f000 8102 	beq.w	8017b0a <HAL_SPI_TransmitReceive+0x244>
 8017906:	f1b9 0f00 	cmp.w	r9, #0
 801790a:	f000 8100 	beq.w	8017b0e <HAL_SPI_TransmitReceive+0x248>
 801790e:	2f00      	cmp	r7, #0
 8017910:	f000 80ff 	beq.w	8017b12 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8017914:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017918:	2b01      	cmp	r3, #1
 801791a:	f000 80fc 	beq.w	8017b16 <HAL_SPI_TransmitReceive+0x250>
 801791e:	2301      	movs	r3, #1
 8017920:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017924:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8017928:	b2db      	uxtb	r3, r3
 801792a:	2b04      	cmp	r3, #4
 801792c:	d002      	beq.n	8017934 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801792e:	2305      	movs	r3, #5
 8017930:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017934:	2300      	movs	r3, #0
 8017936:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017938:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 801793c:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 801793e:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8017940:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017944:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8017946:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8017948:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801794a:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801794c:	6823      	ldr	r3, [r4, #0]
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017954:	d103      	bne.n	801795e <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8017956:	681a      	ldr	r2, [r3, #0]
 8017958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801795c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801795e:	68e3      	ldr	r3, [r4, #12]
 8017960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017964:	d011      	beq.n	801798a <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017966:	6863      	ldr	r3, [r4, #4]
 8017968:	b10b      	cbz	r3, 801796e <HAL_SPI_TransmitReceive+0xa8>
 801796a:	2f01      	cmp	r7, #1
 801796c:	d10b      	bne.n	8017986 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801796e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017970:	6823      	ldr	r3, [r4, #0]
 8017972:	7812      	ldrb	r2, [r2, #0]
 8017974:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017976:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017978:	3301      	adds	r3, #1
 801797a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801797c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801797e:	b29b      	uxth	r3, r3
 8017980:	3b01      	subs	r3, #1
 8017982:	b29b      	uxth	r3, r3
 8017984:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017986:	2701      	movs	r7, #1
 8017988:	e071      	b.n	8017a6e <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801798a:	6863      	ldr	r3, [r4, #4]
 801798c:	b10b      	cbz	r3, 8017992 <HAL_SPI_TransmitReceive+0xcc>
 801798e:	2f01      	cmp	r7, #1
 8017990:	d10b      	bne.n	80179aa <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017992:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017994:	6823      	ldr	r3, [r4, #0]
 8017996:	8812      	ldrh	r2, [r2, #0]
 8017998:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801799a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801799c:	3302      	adds	r3, #2
 801799e:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80179a0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	3b01      	subs	r3, #1
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80179aa:	2701      	movs	r7, #1
 80179ac:	e01b      	b.n	80179e6 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80179ae:	6823      	ldr	r3, [r4, #0]
 80179b0:	689a      	ldr	r2, [r3, #8]
 80179b2:	f012 0f01 	tst.w	r2, #1
 80179b6:	d00e      	beq.n	80179d6 <HAL_SPI_TransmitReceive+0x110>
 80179b8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80179ba:	b292      	uxth	r2, r2
 80179bc:	b15a      	cbz	r2, 80179d6 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80179be:	68da      	ldr	r2, [r3, #12]
 80179c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80179c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80179c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80179c6:	3302      	adds	r3, #2
 80179c8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80179ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80179cc:	b29b      	uxth	r3, r3
 80179ce:	3b01      	subs	r3, #1
 80179d0:	b29b      	uxth	r3, r3
 80179d2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80179d4:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80179d6:	f7fe fb9b 	bl	8016110 <HAL_GetTick>
 80179da:	1b80      	subs	r0, r0, r6
 80179dc:	42a8      	cmp	r0, r5
 80179de:	d302      	bcc.n	80179e6 <HAL_SPI_TransmitReceive+0x120>
 80179e0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80179e4:	d11e      	bne.n	8017a24 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80179e6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	b91b      	cbnz	r3, 80179f4 <HAL_SPI_TransmitReceive+0x12e>
 80179ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80179ee:	b29b      	uxth	r3, r3
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d062      	beq.n	8017aba <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80179f4:	6823      	ldr	r3, [r4, #0]
 80179f6:	689a      	ldr	r2, [r3, #8]
 80179f8:	f012 0f02 	tst.w	r2, #2
 80179fc:	d0d7      	beq.n	80179ae <HAL_SPI_TransmitReceive+0xe8>
 80179fe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017a00:	b292      	uxth	r2, r2
 8017a02:	2a00      	cmp	r2, #0
 8017a04:	d0d3      	beq.n	80179ae <HAL_SPI_TransmitReceive+0xe8>
 8017a06:	2f00      	cmp	r7, #0
 8017a08:	d0d1      	beq.n	80179ae <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017a0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017a0c:	8812      	ldrh	r2, [r2, #0]
 8017a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017a10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a12:	3302      	adds	r3, #2
 8017a14:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017a16:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	3b01      	subs	r3, #1
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017a20:	2700      	movs	r7, #0
 8017a22:	e7c4      	b.n	80179ae <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8017a24:	2301      	movs	r3, #1
 8017a26:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017a30:	2003      	movs	r0, #3
 8017a32:	e063      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017a34:	6823      	ldr	r3, [r4, #0]
 8017a36:	689a      	ldr	r2, [r3, #8]
 8017a38:	f012 0f01 	tst.w	r2, #1
 8017a3c:	d00e      	beq.n	8017a5c <HAL_SPI_TransmitReceive+0x196>
 8017a3e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017a40:	b292      	uxth	r2, r2
 8017a42:	b15a      	cbz	r2, 8017a5c <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8017a44:	68da      	ldr	r2, [r3, #12]
 8017a46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017a48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017a4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017a50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017a52:	b29b      	uxth	r3, r3
 8017a54:	3b01      	subs	r3, #1
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017a5a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017a5c:	f7fe fb58 	bl	8016110 <HAL_GetTick>
 8017a60:	1b83      	subs	r3, r0, r6
 8017a62:	42ab      	cmp	r3, r5
 8017a64:	d302      	bcc.n	8017a6c <HAL_SPI_TransmitReceive+0x1a6>
 8017a66:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017a6a:	d11e      	bne.n	8017aaa <HAL_SPI_TransmitReceive+0x1e4>
 8017a6c:	b1ed      	cbz	r5, 8017aaa <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017a6e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	b913      	cbnz	r3, 8017a7a <HAL_SPI_TransmitReceive+0x1b4>
 8017a74:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017a76:	b29b      	uxth	r3, r3
 8017a78:	b1fb      	cbz	r3, 8017aba <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	689a      	ldr	r2, [r3, #8]
 8017a7e:	f012 0f02 	tst.w	r2, #2
 8017a82:	d0d7      	beq.n	8017a34 <HAL_SPI_TransmitReceive+0x16e>
 8017a84:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017a86:	b292      	uxth	r2, r2
 8017a88:	2a00      	cmp	r2, #0
 8017a8a:	d0d3      	beq.n	8017a34 <HAL_SPI_TransmitReceive+0x16e>
 8017a8c:	2f00      	cmp	r7, #0
 8017a8e:	d0d1      	beq.n	8017a34 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8017a90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017a92:	7812      	ldrb	r2, [r2, #0]
 8017a94:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8017a96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017a98:	3301      	adds	r3, #1
 8017a9a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017a9c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017a9e:	b29b      	uxth	r3, r3
 8017aa0:	3b01      	subs	r3, #1
 8017aa2:	b29b      	uxth	r3, r3
 8017aa4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8017aa6:	2700      	movs	r7, #0
 8017aa8:	e7c4      	b.n	8017a34 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8017aaa:	2301      	movs	r3, #1
 8017aac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8017ab6:	2003      	movs	r0, #3
 8017ab8:	e020      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017aba:	4632      	mov	r2, r6
 8017abc:	4629      	mov	r1, r5
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f7ff fd3a 	bl	8017538 <SPI_EndRxTxTransaction>
 8017ac4:	b990      	cbnz	r0, 8017aec <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017ac6:	68a3      	ldr	r3, [r4, #8]
 8017ac8:	b933      	cbnz	r3, 8017ad8 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017aca:	9301      	str	r3, [sp, #4]
 8017acc:	6823      	ldr	r3, [r4, #0]
 8017ace:	68da      	ldr	r2, [r3, #12]
 8017ad0:	9201      	str	r2, [sp, #4]
 8017ad2:	689b      	ldr	r3, [r3, #8]
 8017ad4:	9301      	str	r3, [sp, #4]
 8017ad6:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8017ad8:	2301      	movs	r3, #1
 8017ada:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017ade:	2300      	movs	r3, #0
 8017ae0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017ae4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017ae6:	b14b      	cbz	r3, 8017afc <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017ae8:	2001      	movs	r0, #1
 8017aea:	e007      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017aec:	2320      	movs	r3, #32
 8017aee:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8017af0:	2300      	movs	r3, #0
 8017af2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8017af6:	2001      	movs	r0, #1
 8017af8:	e000      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8017afa:	2002      	movs	r0, #2
}
 8017afc:	b003      	add	sp, #12
 8017afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8017b02:	2002      	movs	r0, #2
 8017b04:	e7fa      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
 8017b06:	2002      	movs	r0, #2
 8017b08:	e7f8      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8017b0a:	2001      	movs	r0, #1
 8017b0c:	e7f6      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
 8017b0e:	2001      	movs	r0, #1
 8017b10:	e7f4      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
 8017b12:	2001      	movs	r0, #1
 8017b14:	e7f2      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8017b16:	2002      	movs	r0, #2
 8017b18:	e7f0      	b.n	8017afc <HAL_SPI_TransmitReceive+0x236>

08017b1a <HAL_SPI_Receive>:
{
 8017b1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b1e:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8017b20:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8017b24:	b2f6      	uxtb	r6, r6
 8017b26:	2e01      	cmp	r6, #1
 8017b28:	f040 80b4 	bne.w	8017c94 <HAL_SPI_Receive+0x17a>
 8017b2c:	4604      	mov	r4, r0
 8017b2e:	4689      	mov	r9, r1
 8017b30:	4690      	mov	r8, r2
 8017b32:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017b34:	6843      	ldr	r3, [r0, #4]
 8017b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017b3a:	d101      	bne.n	8017b40 <HAL_SPI_Receive+0x26>
 8017b3c:	6883      	ldr	r3, [r0, #8]
 8017b3e:	b393      	cbz	r3, 8017ba6 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8017b40:	f7fe fae6 	bl	8016110 <HAL_GetTick>
 8017b44:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8017b46:	f1b9 0f00 	cmp.w	r9, #0
 8017b4a:	f000 80a4 	beq.w	8017c96 <HAL_SPI_Receive+0x17c>
 8017b4e:	f1b8 0f00 	cmp.w	r8, #0
 8017b52:	f000 80a0 	beq.w	8017c96 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8017b56:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017b5a:	2b01      	cmp	r3, #1
 8017b5c:	f000 809f 	beq.w	8017c9e <HAL_SPI_Receive+0x184>
 8017b60:	2301      	movs	r3, #1
 8017b62:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8017b66:	2304      	movs	r3, #4
 8017b68:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017b70:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8017b74:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017b78:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017b7c:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8017b7e:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8017b80:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8017b82:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017b84:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017b86:	68a3      	ldr	r3, [r4, #8]
 8017b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017b8c:	d015      	beq.n	8017bba <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017b8e:	6823      	ldr	r3, [r4, #0]
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8017b96:	d103      	bne.n	8017ba0 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017b9e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8017ba0:	68e3      	ldr	r3, [r4, #12]
 8017ba2:	b1f3      	cbz	r3, 8017be2 <HAL_SPI_Receive+0xc8>
 8017ba4:	e043      	b.n	8017c2e <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017ba6:	2304      	movs	r3, #4
 8017ba8:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017bac:	9500      	str	r5, [sp, #0]
 8017bae:	4613      	mov	r3, r2
 8017bb0:	460a      	mov	r2, r1
 8017bb2:	f7ff fe88 	bl	80178c6 <HAL_SPI_TransmitReceive>
 8017bb6:	4606      	mov	r6, r0
 8017bb8:	e06d      	b.n	8017c96 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8017bba:	6822      	ldr	r2, [r4, #0]
 8017bbc:	6813      	ldr	r3, [r2, #0]
 8017bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017bc2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8017bc4:	6822      	ldr	r2, [r4, #0]
 8017bc6:	6813      	ldr	r3, [r2, #0]
 8017bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017bcc:	6013      	str	r3, [r2, #0]
 8017bce:	e7de      	b.n	8017b8e <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017bd0:	f7fe fa9e 	bl	8016110 <HAL_GetTick>
 8017bd4:	1bc0      	subs	r0, r0, r7
 8017bd6:	42a8      	cmp	r0, r5
 8017bd8:	d302      	bcc.n	8017be0 <HAL_SPI_Receive+0xc6>
 8017bda:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017bde:	d115      	bne.n	8017c0c <HAL_SPI_Receive+0xf2>
 8017be0:	b1a5      	cbz	r5, 8017c0c <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 8017be2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017be4:	b29b      	uxth	r3, r3
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d042      	beq.n	8017c70 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017bea:	6823      	ldr	r3, [r4, #0]
 8017bec:	689a      	ldr	r2, [r3, #8]
 8017bee:	f012 0f01 	tst.w	r2, #1
 8017bf2:	d0ed      	beq.n	8017bd0 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017bf4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8017bf6:	7b1b      	ldrb	r3, [r3, #12]
 8017bf8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8017bfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017c00:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	3b01      	subs	r3, #1
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8017c0a:	e7ea      	b.n	8017be2 <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8017c0c:	2301      	movs	r3, #1
 8017c0e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017c12:	2300      	movs	r3, #0
 8017c14:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017c18:	2603      	movs	r6, #3
 8017c1a:	e03c      	b.n	8017c96 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017c1c:	f7fe fa78 	bl	8016110 <HAL_GetTick>
 8017c20:	1bc0      	subs	r0, r0, r7
 8017c22:	42a8      	cmp	r0, r5
 8017c24:	d302      	bcc.n	8017c2c <HAL_SPI_Receive+0x112>
 8017c26:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017c2a:	d119      	bne.n	8017c60 <HAL_SPI_Receive+0x146>
 8017c2c:	b1c5      	cbz	r5, 8017c60 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 8017c2e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	b1eb      	cbz	r3, 8017c70 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017c34:	6823      	ldr	r3, [r4, #0]
 8017c36:	689a      	ldr	r2, [r3, #8]
 8017c38:	f012 0f01 	tst.w	r2, #1
 8017c3c:	d0ee      	beq.n	8017c1c <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017c3e:	68da      	ldr	r2, [r3, #12]
 8017c40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017c44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017c46:	3302      	adds	r3, #2
 8017c48:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017c4a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8017c4e:	fa1f fc8c 	uxth.w	ip, ip
 8017c52:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8017c56:	fa1f fc8c 	uxth.w	ip, ip
 8017c5a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8017c5e:	e7e6      	b.n	8017c2e <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8017c60:	2301      	movs	r3, #1
 8017c62:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017c66:	2300      	movs	r3, #0
 8017c68:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017c6c:	2603      	movs	r6, #3
 8017c6e:	e012      	b.n	8017c96 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017c70:	463a      	mov	r2, r7
 8017c72:	4629      	mov	r1, r5
 8017c74:	4620      	mov	r0, r4
 8017c76:	f7ff fc9f 	bl	80175b8 <SPI_EndRxTransaction>
 8017c7a:	b108      	cbz	r0, 8017c80 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017c7c:	2320      	movs	r3, #32
 8017c7e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8017c80:	2301      	movs	r3, #1
 8017c82:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017c86:	2300      	movs	r3, #0
 8017c88:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017c8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017c8e:	b913      	cbnz	r3, 8017c96 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8017c90:	2600      	movs	r6, #0
 8017c92:	e000      	b.n	8017c96 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8017c94:	2602      	movs	r6, #2
}
 8017c96:	4630      	mov	r0, r6
 8017c98:	b003      	add	sp, #12
 8017c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017c9e:	2602      	movs	r6, #2
 8017ca0:	e7f9      	b.n	8017c96 <HAL_SPI_Receive+0x17c>

08017ca2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8017ca2:	4770      	bx	lr

08017ca4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017ca4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	2b01      	cmp	r3, #1
 8017cac:	d12f      	bne.n	8017d0e <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017cae:	2302      	movs	r3, #2
 8017cb0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017cb4:	6802      	ldr	r2, [r0, #0]
 8017cb6:	68d3      	ldr	r3, [r2, #12]
 8017cb8:	f043 0301 	orr.w	r3, r3, #1
 8017cbc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017cbe:	6803      	ldr	r3, [r0, #0]
 8017cc0:	4a15      	ldr	r2, [pc, #84]	@ (8017d18 <HAL_TIM_Base_Start_IT+0x74>)
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	d018      	beq.n	8017cf8 <HAL_TIM_Base_Start_IT+0x54>
 8017cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017cca:	d015      	beq.n	8017cf8 <HAL_TIM_Base_Start_IT+0x54>
 8017ccc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d011      	beq.n	8017cf8 <HAL_TIM_Base_Start_IT+0x54>
 8017cd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d00d      	beq.n	8017cf8 <HAL_TIM_Base_Start_IT+0x54>
 8017cdc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	d009      	beq.n	8017cf8 <HAL_TIM_Base_Start_IT+0x54>
 8017ce4:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d005      	beq.n	8017cf8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017cec:	681a      	ldr	r2, [r3, #0]
 8017cee:	f042 0201 	orr.w	r2, r2, #1
 8017cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017cf8:	689a      	ldr	r2, [r3, #8]
 8017cfa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017cfe:	2a06      	cmp	r2, #6
 8017d00:	d007      	beq.n	8017d12 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8017d02:	681a      	ldr	r2, [r3, #0]
 8017d04:	f042 0201 	orr.w	r2, r2, #1
 8017d08:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	4770      	bx	lr
    return HAL_ERROR;
 8017d0e:	2001      	movs	r0, #1
 8017d10:	4770      	bx	lr
  return HAL_OK;
 8017d12:	2000      	movs	r0, #0
}
 8017d14:	4770      	bx	lr
 8017d16:	bf00      	nop
 8017d18:	40010000 	.word	0x40010000

08017d1c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017d1c:	4770      	bx	lr

08017d1e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017d1e:	4770      	bx	lr

08017d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017d20:	4770      	bx	lr

08017d22 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017d22:	4770      	bx	lr

08017d24 <HAL_TIM_IRQHandler>:
{
 8017d24:	b570      	push	{r4, r5, r6, lr}
 8017d26:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8017d28:	6803      	ldr	r3, [r0, #0]
 8017d2a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017d2c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017d2e:	f015 0f02 	tst.w	r5, #2
 8017d32:	d010      	beq.n	8017d56 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017d34:	f016 0f02 	tst.w	r6, #2
 8017d38:	d00d      	beq.n	8017d56 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017d3a:	f06f 0202 	mvn.w	r2, #2
 8017d3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017d40:	2301      	movs	r3, #1
 8017d42:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017d44:	6803      	ldr	r3, [r0, #0]
 8017d46:	699b      	ldr	r3, [r3, #24]
 8017d48:	f013 0f03 	tst.w	r3, #3
 8017d4c:	d05e      	beq.n	8017e0c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8017d4e:	f7ff ffe6 	bl	8017d1e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017d52:	2300      	movs	r3, #0
 8017d54:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017d56:	f015 0f04 	tst.w	r5, #4
 8017d5a:	d012      	beq.n	8017d82 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017d5c:	f016 0f04 	tst.w	r6, #4
 8017d60:	d00f      	beq.n	8017d82 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017d62:	6823      	ldr	r3, [r4, #0]
 8017d64:	f06f 0204 	mvn.w	r2, #4
 8017d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017d6a:	2302      	movs	r3, #2
 8017d6c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	699b      	ldr	r3, [r3, #24]
 8017d72:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017d76:	d04f      	beq.n	8017e18 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f7ff ffd0 	bl	8017d1e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017d82:	f015 0f08 	tst.w	r5, #8
 8017d86:	d012      	beq.n	8017dae <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017d88:	f016 0f08 	tst.w	r6, #8
 8017d8c:	d00f      	beq.n	8017dae <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017d8e:	6823      	ldr	r3, [r4, #0]
 8017d90:	f06f 0208 	mvn.w	r2, #8
 8017d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017d96:	2304      	movs	r3, #4
 8017d98:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	69db      	ldr	r3, [r3, #28]
 8017d9e:	f013 0f03 	tst.w	r3, #3
 8017da2:	d040      	beq.n	8017e26 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8017da4:	4620      	mov	r0, r4
 8017da6:	f7ff ffba 	bl	8017d1e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017daa:	2300      	movs	r3, #0
 8017dac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017dae:	f015 0f10 	tst.w	r5, #16
 8017db2:	d012      	beq.n	8017dda <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017db4:	f016 0f10 	tst.w	r6, #16
 8017db8:	d00f      	beq.n	8017dda <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017dba:	6823      	ldr	r3, [r4, #0]
 8017dbc:	f06f 0210 	mvn.w	r2, #16
 8017dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017dc2:	2308      	movs	r3, #8
 8017dc4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017dc6:	6823      	ldr	r3, [r4, #0]
 8017dc8:	69db      	ldr	r3, [r3, #28]
 8017dca:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017dce:	d031      	beq.n	8017e34 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f7ff ffa4 	bl	8017d1e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017dda:	f015 0f01 	tst.w	r5, #1
 8017dde:	d002      	beq.n	8017de6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017de0:	f016 0f01 	tst.w	r6, #1
 8017de4:	d12d      	bne.n	8017e42 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017de6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8017dea:	d002      	beq.n	8017df2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017dec:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8017df0:	d12f      	bne.n	8017e52 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017df2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8017df6:	d002      	beq.n	8017dfe <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017df8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8017dfc:	d131      	bne.n	8017e62 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017dfe:	f015 0f20 	tst.w	r5, #32
 8017e02:	d002      	beq.n	8017e0a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017e04:	f016 0f20 	tst.w	r6, #32
 8017e08:	d133      	bne.n	8017e72 <HAL_TIM_IRQHandler+0x14e>
}
 8017e0a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017e0c:	f7ff ff86 	bl	8017d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017e10:	4620      	mov	r0, r4
 8017e12:	f7ff ff85 	bl	8017d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8017e16:	e79c      	b.n	8017d52 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f7ff ff7f 	bl	8017d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017e1e:	4620      	mov	r0, r4
 8017e20:	f7ff ff7e 	bl	8017d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8017e24:	e7ab      	b.n	8017d7e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017e26:	4620      	mov	r0, r4
 8017e28:	f7ff ff78 	bl	8017d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	f7ff ff77 	bl	8017d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8017e32:	e7ba      	b.n	8017daa <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017e34:	4620      	mov	r0, r4
 8017e36:	f7ff ff71 	bl	8017d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	f7ff ff70 	bl	8017d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8017e40:	e7c9      	b.n	8017dd6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017e42:	6823      	ldr	r3, [r4, #0]
 8017e44:	f06f 0201 	mvn.w	r2, #1
 8017e48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	f7fa f8f4 	bl	8012038 <HAL_TIM_PeriodElapsedCallback>
 8017e50:	e7c9      	b.n	8017de6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017e52:	6823      	ldr	r3, [r4, #0]
 8017e54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017e58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f000 f895 	bl	8017f8a <HAL_TIMEx_BreakCallback>
 8017e60:	e7c7      	b.n	8017df2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017e62:	6823      	ldr	r3, [r4, #0]
 8017e64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017e68:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8017e6a:	4620      	mov	r0, r4
 8017e6c:	f7ff ff59 	bl	8017d22 <HAL_TIM_TriggerCallback>
 8017e70:	e7c5      	b.n	8017dfe <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017e72:	6823      	ldr	r3, [r4, #0]
 8017e74:	f06f 0220 	mvn.w	r2, #32
 8017e78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	f000 f884 	bl	8017f88 <HAL_TIMEx_CommutCallback>
}
 8017e80:	e7c3      	b.n	8017e0a <HAL_TIM_IRQHandler+0xe6>
	...

08017e84 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017e84:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017e86:	4a29      	ldr	r2, [pc, #164]	@ (8017f2c <TIM_Base_SetConfig+0xa8>)
 8017e88:	4290      	cmp	r0, r2
 8017e8a:	d00e      	beq.n	8017eaa <TIM_Base_SetConfig+0x26>
 8017e8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017e90:	d00b      	beq.n	8017eaa <TIM_Base_SetConfig+0x26>
 8017e92:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017e96:	4290      	cmp	r0, r2
 8017e98:	d007      	beq.n	8017eaa <TIM_Base_SetConfig+0x26>
 8017e9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017e9e:	4290      	cmp	r0, r2
 8017ea0:	d003      	beq.n	8017eaa <TIM_Base_SetConfig+0x26>
 8017ea2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017ea6:	4290      	cmp	r0, r2
 8017ea8:	d103      	bne.n	8017eb2 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8017eae:	684a      	ldr	r2, [r1, #4]
 8017eb0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8017f2c <TIM_Base_SetConfig+0xa8>)
 8017eb4:	4290      	cmp	r0, r2
 8017eb6:	d01a      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017eb8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017ebc:	d017      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017ebe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017ec2:	4290      	cmp	r0, r2
 8017ec4:	d013      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017ec6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017eca:	4290      	cmp	r0, r2
 8017ecc:	d00f      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017ece:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017ed2:	4290      	cmp	r0, r2
 8017ed4:	d00b      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017ed6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8017eda:	4290      	cmp	r0, r2
 8017edc:	d007      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017ede:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017ee2:	4290      	cmp	r0, r2
 8017ee4:	d003      	beq.n	8017eee <TIM_Base_SetConfig+0x6a>
 8017ee6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017eea:	4290      	cmp	r0, r2
 8017eec:	d103      	bne.n	8017ef6 <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017ef2:	68ca      	ldr	r2, [r1, #12]
 8017ef4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017efa:	694a      	ldr	r2, [r1, #20]
 8017efc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8017efe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017f00:	688b      	ldr	r3, [r1, #8]
 8017f02:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017f04:	680b      	ldr	r3, [r1, #0]
 8017f06:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017f08:	4b08      	ldr	r3, [pc, #32]	@ (8017f2c <TIM_Base_SetConfig+0xa8>)
 8017f0a:	4298      	cmp	r0, r3
 8017f0c:	d00a      	beq.n	8017f24 <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017f0e:	2301      	movs	r3, #1
 8017f10:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017f12:	6903      	ldr	r3, [r0, #16]
 8017f14:	f013 0f01 	tst.w	r3, #1
 8017f18:	d003      	beq.n	8017f22 <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8017f1a:	6903      	ldr	r3, [r0, #16]
 8017f1c:	f023 0301 	bic.w	r3, r3, #1
 8017f20:	6103      	str	r3, [r0, #16]
  }
}
 8017f22:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8017f24:	690b      	ldr	r3, [r1, #16]
 8017f26:	6303      	str	r3, [r0, #48]	@ 0x30
 8017f28:	e7f1      	b.n	8017f0e <TIM_Base_SetConfig+0x8a>
 8017f2a:	bf00      	nop
 8017f2c:	40010000 	.word	0x40010000

08017f30 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8017f30:	b340      	cbz	r0, 8017f84 <HAL_TIM_Base_Init+0x54>
{
 8017f32:	b510      	push	{r4, lr}
 8017f34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8017f36:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017f3a:	b1f3      	cbz	r3, 8017f7a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8017f3c:	2302      	movs	r3, #2
 8017f3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017f42:	4621      	mov	r1, r4
 8017f44:	f851 0b04 	ldr.w	r0, [r1], #4
 8017f48:	f7ff ff9c 	bl	8017e84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017f4c:	2301      	movs	r3, #1
 8017f4e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017f52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8017f56:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8017f5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8017f5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017f62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017f6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8017f72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8017f76:	2000      	movs	r0, #0
}
 8017f78:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8017f7a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8017f7e:	f7ff fe90 	bl	8017ca2 <HAL_TIM_Base_MspInit>
 8017f82:	e7db      	b.n	8017f3c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8017f84:	2001      	movs	r0, #1
}
 8017f86:	4770      	bx	lr

08017f88 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017f88:	4770      	bx	lr

08017f8a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017f8a:	4770      	bx	lr

08017f8c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8017f8c:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8017f8e:	b930      	cbnz	r0, 8017f9e <SSD1306_Fill+0x12>
 8017f90:	2100      	movs	r1, #0
 8017f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017f96:	4803      	ldr	r0, [pc, #12]	@ (8017fa4 <SSD1306_Fill+0x18>)
 8017f98:	f014 fc72 	bl	802c880 <memset>
}
 8017f9c:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8017f9e:	21ff      	movs	r1, #255	@ 0xff
 8017fa0:	e7f7      	b.n	8017f92 <SSD1306_Fill+0x6>
 8017fa2:	bf00      	nop
 8017fa4:	20002968 	.word	0x20002968

08017fa8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8017fa8:	287f      	cmp	r0, #127	@ 0x7f
 8017faa:	d825      	bhi.n	8017ff8 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8017fac:	293f      	cmp	r1, #63	@ 0x3f
 8017fae:	d823      	bhi.n	8017ff8 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8017fb0:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8017fb2:	4b12      	ldr	r3, [pc, #72]	@ (8017ffc <SSD1306_DrawPixel+0x54>)
 8017fb4:	791b      	ldrb	r3, [r3, #4]
 8017fb6:	b113      	cbz	r3, 8017fbe <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8017fb8:	fab2 f282 	clz	r2, r2
 8017fbc:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8017fbe:	2a01      	cmp	r2, #1
 8017fc0:	d00f      	beq.n	8017fe2 <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8017fc2:	08cb      	lsrs	r3, r1, #3
 8017fc4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8017fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8018000 <SSD1306_DrawPixel+0x58>)
 8017fca:	5c22      	ldrb	r2, [r4, r0]
 8017fcc:	f001 0107 	and.w	r1, r1, #7
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	408b      	lsls	r3, r1
 8017fd4:	43db      	mvns	r3, r3
 8017fd6:	b25b      	sxtb	r3, r3
 8017fd8:	4013      	ands	r3, r2
 8017fda:	5423      	strb	r3, [r4, r0]
	}
}
 8017fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fe0:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8017fe2:	08cb      	lsrs	r3, r1, #3
 8017fe4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8017fe8:	4c05      	ldr	r4, [pc, #20]	@ (8018000 <SSD1306_DrawPixel+0x58>)
 8017fea:	5c23      	ldrb	r3, [r4, r0]
 8017fec:	f001 0107 	and.w	r1, r1, #7
 8017ff0:	408a      	lsls	r2, r1
 8017ff2:	4313      	orrs	r3, r2
 8017ff4:	5423      	strb	r3, [r4, r0]
 8017ff6:	e7f1      	b.n	8017fdc <SSD1306_DrawPixel+0x34>
 8017ff8:	4770      	bx	lr
 8017ffa:	bf00      	nop
 8017ffc:	20002960 	.word	0x20002960
 8018000:	20002968 	.word	0x20002968

08018004 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8018004:	4b01      	ldr	r3, [pc, #4]	@ (801800c <SSD1306_GotoXY+0x8>)
 8018006:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8018008:	8059      	strh	r1, [r3, #2]
}
 801800a:	4770      	bx	lr
 801800c:	20002960 	.word	0x20002960

08018010 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8018010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018014:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8018016:	4b24      	ldr	r3, [pc, #144]	@ (80180a8 <SSD1306_Putc+0x98>)
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	780a      	ldrb	r2, [r1, #0]
 801801c:	4413      	add	r3, r2
	if (
 801801e:	2b7f      	cmp	r3, #127	@ 0x7f
 8018020:	dc3e      	bgt.n	80180a0 <SSD1306_Putc+0x90>
 8018022:	4681      	mov	r9, r0
 8018024:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8018026:	4b20      	ldr	r3, [pc, #128]	@ (80180a8 <SSD1306_Putc+0x98>)
 8018028:	885b      	ldrh	r3, [r3, #2]
 801802a:	784a      	ldrb	r2, [r1, #1]
 801802c:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801802e:	2b3f      	cmp	r3, #63	@ 0x3f
 8018030:	dc38      	bgt.n	80180a4 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8018032:	2600      	movs	r6, #0
 8018034:	e020      	b.n	8018078 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8018036:	4b1c      	ldr	r3, [pc, #112]	@ (80180a8 <SSD1306_Putc+0x98>)
 8018038:	8818      	ldrh	r0, [r3, #0]
 801803a:	8859      	ldrh	r1, [r3, #2]
 801803c:	4431      	add	r1, r6
 801803e:	4420      	add	r0, r4
 8018040:	fab8 f288 	clz	r2, r8
 8018044:	0952      	lsrs	r2, r2, #5
 8018046:	b289      	uxth	r1, r1
 8018048:	b280      	uxth	r0, r0
 801804a:	f7ff ffad 	bl	8017fa8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 801804e:	3401      	adds	r4, #1
 8018050:	782b      	ldrb	r3, [r5, #0]
 8018052:	42a3      	cmp	r3, r4
 8018054:	d90f      	bls.n	8018076 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8018056:	fa07 f304 	lsl.w	r3, r7, r4
 801805a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 801805e:	d0ea      	beq.n	8018036 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8018060:	4b11      	ldr	r3, [pc, #68]	@ (80180a8 <SSD1306_Putc+0x98>)
 8018062:	8818      	ldrh	r0, [r3, #0]
 8018064:	8859      	ldrh	r1, [r3, #2]
 8018066:	4431      	add	r1, r6
 8018068:	4420      	add	r0, r4
 801806a:	4642      	mov	r2, r8
 801806c:	b289      	uxth	r1, r1
 801806e:	b280      	uxth	r0, r0
 8018070:	f7ff ff9a 	bl	8017fa8 <SSD1306_DrawPixel>
 8018074:	e7eb      	b.n	801804e <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8018076:	3601      	adds	r6, #1
 8018078:	786a      	ldrb	r2, [r5, #1]
 801807a:	42b2      	cmp	r2, r6
 801807c:	d908      	bls.n	8018090 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 801807e:	6869      	ldr	r1, [r5, #4]
 8018080:	f1a9 0320 	sub.w	r3, r9, #32
 8018084:	fb02 6303 	mla	r3, r2, r3, r6
 8018088:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 801808c:	2400      	movs	r4, #0
 801808e:	e7df      	b.n	8018050 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8018090:	4a05      	ldr	r2, [pc, #20]	@ (80180a8 <SSD1306_Putc+0x98>)
 8018092:	8813      	ldrh	r3, [r2, #0]
 8018094:	7829      	ldrb	r1, [r5, #0]
 8018096:	440b      	add	r3, r1
 8018098:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 801809a:	4648      	mov	r0, r9
}
 801809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 80180a0:	2000      	movs	r0, #0
 80180a2:	e7fb      	b.n	801809c <SSD1306_Putc+0x8c>
 80180a4:	2000      	movs	r0, #0
 80180a6:	e7f9      	b.n	801809c <SSD1306_Putc+0x8c>
 80180a8:	20002960 	.word	0x20002960

080180ac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80180ac:	b570      	push	{r4, r5, r6, lr}
 80180ae:	4604      	mov	r4, r0
 80180b0:	460e      	mov	r6, r1
 80180b2:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 80180b4:	e000      	b.n	80180b8 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 80180b6:	3401      	adds	r4, #1
	while (*str) {
 80180b8:	7820      	ldrb	r0, [r4, #0]
 80180ba:	b138      	cbz	r0, 80180cc <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80180bc:	462a      	mov	r2, r5
 80180be:	4631      	mov	r1, r6
 80180c0:	f7ff ffa6 	bl	8018010 <SSD1306_Putc>
 80180c4:	4603      	mov	r3, r0
 80180c6:	7820      	ldrb	r0, [r4, #0]
 80180c8:	4283      	cmp	r3, r0
 80180ca:	d0f4      	beq.n	80180b6 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80180cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080180d0 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80180d0:	b500      	push	{lr}
 80180d2:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 80180d4:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80180d8:	f04f 0c00 	mov.w	ip, #0
 80180dc:	e009      	b.n	80180f2 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 80180de:	f10c 0e01 	add.w	lr, ip, #1
 80180e2:	f812 100c 	ldrb.w	r1, [r2, ip]
 80180e6:	f10d 0c08 	add.w	ip, sp, #8
 80180ea:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80180ee:	fa5f fc8e 	uxtb.w	ip, lr
 80180f2:	459c      	cmp	ip, r3
 80180f4:	d3f3      	bcc.n	80180de <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80180f6:	3301      	adds	r3, #1
 80180f8:	220a      	movs	r2, #10
 80180fa:	9200      	str	r2, [sp, #0]
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	aa02      	add	r2, sp, #8
 8018100:	4601      	mov	r1, r0
 8018102:	4803      	ldr	r0, [pc, #12]	@ (8018110 <ssd1306_I2C_WriteMulti+0x40>)
 8018104:	f7fe fc9e 	bl	8016a44 <HAL_I2C_Master_Transmit>
}
 8018108:	b043      	add	sp, #268	@ 0x10c
 801810a:	f85d fb04 	ldr.w	pc, [sp], #4
 801810e:	bf00      	nop
 8018110:	200008c8 	.word	0x200008c8

08018114 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8018114:	b500      	push	{lr}
 8018116:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8018118:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 801811c:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8018120:	230a      	movs	r3, #10
 8018122:	9300      	str	r3, [sp, #0]
 8018124:	2302      	movs	r3, #2
 8018126:	aa03      	add	r2, sp, #12
 8018128:	4601      	mov	r1, r0
 801812a:	4803      	ldr	r0, [pc, #12]	@ (8018138 <ssd1306_I2C_Write+0x24>)
 801812c:	f7fe fc8a 	bl	8016a44 <HAL_I2C_Master_Transmit>
}
 8018130:	b005      	add	sp, #20
 8018132:	f85d fb04 	ldr.w	pc, [sp], #4
 8018136:	bf00      	nop
 8018138:	200008c8 	.word	0x200008c8

0801813c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 801813c:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 801813e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8018142:	2201      	movs	r2, #1
 8018144:	2178      	movs	r1, #120	@ 0x78
 8018146:	4850      	ldr	r0, [pc, #320]	@ (8018288 <SSD1306_Init+0x14c>)
 8018148:	f7fe fd38 	bl	8016bbc <HAL_I2C_IsDeviceReady>
 801814c:	2800      	cmp	r0, #0
 801814e:	f040 8099 	bne.w	8018284 <SSD1306_Init+0x148>
	uint32_t p = 2500;
 8018152:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8018156:	e000      	b.n	801815a <SSD1306_Init+0x1e>
		p--;
 8018158:	3b01      	subs	r3, #1
	while(p>0)
 801815a:	2b00      	cmp	r3, #0
 801815c:	d1fc      	bne.n	8018158 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 801815e:	22ae      	movs	r2, #174	@ 0xae
 8018160:	2100      	movs	r1, #0
 8018162:	2078      	movs	r0, #120	@ 0x78
 8018164:	f7ff ffd6 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8018168:	2220      	movs	r2, #32
 801816a:	2100      	movs	r1, #0
 801816c:	2078      	movs	r0, #120	@ 0x78
 801816e:	f7ff ffd1 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8018172:	2210      	movs	r2, #16
 8018174:	2100      	movs	r1, #0
 8018176:	2078      	movs	r0, #120	@ 0x78
 8018178:	f7ff ffcc 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 801817c:	22b0      	movs	r2, #176	@ 0xb0
 801817e:	2100      	movs	r1, #0
 8018180:	2078      	movs	r0, #120	@ 0x78
 8018182:	f7ff ffc7 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8018186:	22c8      	movs	r2, #200	@ 0xc8
 8018188:	2100      	movs	r1, #0
 801818a:	2078      	movs	r0, #120	@ 0x78
 801818c:	f7ff ffc2 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8018190:	2200      	movs	r2, #0
 8018192:	4611      	mov	r1, r2
 8018194:	2078      	movs	r0, #120	@ 0x78
 8018196:	f7ff ffbd 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 801819a:	2210      	movs	r2, #16
 801819c:	2100      	movs	r1, #0
 801819e:	2078      	movs	r0, #120	@ 0x78
 80181a0:	f7ff ffb8 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80181a4:	2240      	movs	r2, #64	@ 0x40
 80181a6:	2100      	movs	r1, #0
 80181a8:	2078      	movs	r0, #120	@ 0x78
 80181aa:	f7ff ffb3 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80181ae:	2281      	movs	r2, #129	@ 0x81
 80181b0:	2100      	movs	r1, #0
 80181b2:	2078      	movs	r0, #120	@ 0x78
 80181b4:	f7ff ffae 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80181b8:	22ff      	movs	r2, #255	@ 0xff
 80181ba:	2100      	movs	r1, #0
 80181bc:	2078      	movs	r0, #120	@ 0x78
 80181be:	f7ff ffa9 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80181c2:	22a1      	movs	r2, #161	@ 0xa1
 80181c4:	2100      	movs	r1, #0
 80181c6:	2078      	movs	r0, #120	@ 0x78
 80181c8:	f7ff ffa4 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80181cc:	22a6      	movs	r2, #166	@ 0xa6
 80181ce:	2100      	movs	r1, #0
 80181d0:	2078      	movs	r0, #120	@ 0x78
 80181d2:	f7ff ff9f 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80181d6:	22a8      	movs	r2, #168	@ 0xa8
 80181d8:	2100      	movs	r1, #0
 80181da:	2078      	movs	r0, #120	@ 0x78
 80181dc:	f7ff ff9a 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80181e0:	223f      	movs	r2, #63	@ 0x3f
 80181e2:	2100      	movs	r1, #0
 80181e4:	2078      	movs	r0, #120	@ 0x78
 80181e6:	f7ff ff95 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80181ea:	22a4      	movs	r2, #164	@ 0xa4
 80181ec:	2100      	movs	r1, #0
 80181ee:	2078      	movs	r0, #120	@ 0x78
 80181f0:	f7ff ff90 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80181f4:	22d3      	movs	r2, #211	@ 0xd3
 80181f6:	2100      	movs	r1, #0
 80181f8:	2078      	movs	r0, #120	@ 0x78
 80181fa:	f7ff ff8b 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80181fe:	2200      	movs	r2, #0
 8018200:	4611      	mov	r1, r2
 8018202:	2078      	movs	r0, #120	@ 0x78
 8018204:	f7ff ff86 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8018208:	22d5      	movs	r2, #213	@ 0xd5
 801820a:	2100      	movs	r1, #0
 801820c:	2078      	movs	r0, #120	@ 0x78
 801820e:	f7ff ff81 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8018212:	22f0      	movs	r2, #240	@ 0xf0
 8018214:	2100      	movs	r1, #0
 8018216:	2078      	movs	r0, #120	@ 0x78
 8018218:	f7ff ff7c 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 801821c:	22d9      	movs	r2, #217	@ 0xd9
 801821e:	2100      	movs	r1, #0
 8018220:	2078      	movs	r0, #120	@ 0x78
 8018222:	f7ff ff77 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8018226:	2222      	movs	r2, #34	@ 0x22
 8018228:	2100      	movs	r1, #0
 801822a:	2078      	movs	r0, #120	@ 0x78
 801822c:	f7ff ff72 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8018230:	22da      	movs	r2, #218	@ 0xda
 8018232:	2100      	movs	r1, #0
 8018234:	2078      	movs	r0, #120	@ 0x78
 8018236:	f7ff ff6d 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 801823a:	2212      	movs	r2, #18
 801823c:	2100      	movs	r1, #0
 801823e:	2078      	movs	r0, #120	@ 0x78
 8018240:	f7ff ff68 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8018244:	22db      	movs	r2, #219	@ 0xdb
 8018246:	2100      	movs	r1, #0
 8018248:	2078      	movs	r0, #120	@ 0x78
 801824a:	f7ff ff63 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 801824e:	2220      	movs	r2, #32
 8018250:	2100      	movs	r1, #0
 8018252:	2078      	movs	r0, #120	@ 0x78
 8018254:	f7ff ff5e 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8018258:	228d      	movs	r2, #141	@ 0x8d
 801825a:	2100      	movs	r1, #0
 801825c:	2078      	movs	r0, #120	@ 0x78
 801825e:	f7ff ff59 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8018262:	2214      	movs	r2, #20
 8018264:	2100      	movs	r1, #0
 8018266:	2078      	movs	r0, #120	@ 0x78
 8018268:	f7ff ff54 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 801826c:	22af      	movs	r2, #175	@ 0xaf
 801826e:	2100      	movs	r1, #0
 8018270:	2078      	movs	r0, #120	@ 0x78
 8018272:	f7ff ff4f 	bl	8018114 <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8018276:	4b05      	ldr	r3, [pc, #20]	@ (801828c <SSD1306_Init+0x150>)
 8018278:	2200      	movs	r2, #0
 801827a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 801827c:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 801827e:	2001      	movs	r0, #1
 8018280:	7158      	strb	r0, [r3, #5]
}
 8018282:	bd08      	pop	{r3, pc}
		return 0;
 8018284:	2000      	movs	r0, #0
 8018286:	e7fc      	b.n	8018282 <SSD1306_Init+0x146>
 8018288:	200008c8 	.word	0x200008c8
 801828c:	20002960 	.word	0x20002960

08018290 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8018290:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8018292:	2400      	movs	r4, #0
 8018294:	e01a      	b.n	80182cc <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8018296:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 801829a:	b2d2      	uxtb	r2, r2
 801829c:	2100      	movs	r1, #0
 801829e:	2078      	movs	r0, #120	@ 0x78
 80182a0:	f7ff ff38 	bl	8018114 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80182a4:	2200      	movs	r2, #0
 80182a6:	4611      	mov	r1, r2
 80182a8:	2078      	movs	r0, #120	@ 0x78
 80182aa:	f7ff ff33 	bl	8018114 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80182ae:	2210      	movs	r2, #16
 80182b0:	2100      	movs	r1, #0
 80182b2:	2078      	movs	r0, #120	@ 0x78
 80182b4:	f7ff ff2e 	bl	8018114 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80182b8:	2380      	movs	r3, #128	@ 0x80
 80182ba:	4a06      	ldr	r2, [pc, #24]	@ (80182d4 <SSD1306_UpdateScreen+0x44>)
 80182bc:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80182c0:	2140      	movs	r1, #64	@ 0x40
 80182c2:	2078      	movs	r0, #120	@ 0x78
 80182c4:	f7ff ff04 	bl	80180d0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80182c8:	3401      	adds	r4, #1
 80182ca:	b2e4      	uxtb	r4, r4
 80182cc:	2c07      	cmp	r4, #7
 80182ce:	d9e2      	bls.n	8018296 <SSD1306_UpdateScreen+0x6>
}
 80182d0:	bd10      	pop	{r4, pc}
 80182d2:	bf00      	nop
 80182d4:	20002968 	.word	0x20002968

080182d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80182d8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80182da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80182de:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80182e0:	f001 fd4a 	bl	8019d78 <xTaskGetSchedulerState>
 80182e4:	2801      	cmp	r0, #1
 80182e6:	d100      	bne.n	80182ea <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80182e8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80182ea:	f002 f94b 	bl	801a584 <xPortSysTickHandler>
}
 80182ee:	e7fb      	b.n	80182e8 <SysTick_Handler+0x10>

080182f0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80182f0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80182f4:	b92b      	cbnz	r3, 8018302 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80182f6:	4b06      	ldr	r3, [pc, #24]	@ (8018310 <osKernelInitialize+0x20>)
 80182f8:	6818      	ldr	r0, [r3, #0]
 80182fa:	b928      	cbnz	r0, 8018308 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80182fc:	2201      	movs	r2, #1
 80182fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018300:	4770      	bx	lr
    stat = osErrorISR;
 8018302:	f06f 0005 	mvn.w	r0, #5
 8018306:	4770      	bx	lr
    } else {
      stat = osError;
 8018308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 801830c:	4770      	bx	lr
 801830e:	bf00      	nop
 8018310:	20003668 	.word	0x20003668

08018314 <osKernelStart>:
 8018314:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8018318:	b973      	cbnz	r3, 8018338 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 801831a:	4b0a      	ldr	r3, [pc, #40]	@ (8018344 <osKernelStart+0x30>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b01      	cmp	r3, #1
 8018320:	d10d      	bne.n	801833e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8018322:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018324:	2400      	movs	r4, #0
 8018326:	4b08      	ldr	r3, [pc, #32]	@ (8018348 <osKernelStart+0x34>)
 8018328:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801832a:	4b06      	ldr	r3, [pc, #24]	@ (8018344 <osKernelStart+0x30>)
 801832c:	2202      	movs	r2, #2
 801832e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018330:	f001 fa6a 	bl	8019808 <vTaskStartScheduler>
      stat = osOK;
 8018334:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8018336:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8018338:	f06f 0005 	mvn.w	r0, #5
 801833c:	4770      	bx	lr
      stat = osError;
 801833e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8018342:	4770      	bx	lr
 8018344:	20003668 	.word	0x20003668
 8018348:	e000ed00 	.word	0xe000ed00

0801834c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018350:	2400      	movs	r4, #0
 8018352:	9405      	str	r4, [sp, #20]
 8018354:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8018358:	bb7c      	cbnz	r4, 80183ba <osThreadNew+0x6e>
 801835a:	b370      	cbz	r0, 80183ba <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 801835c:	b32a      	cbz	r2, 80183aa <osThreadNew+0x5e>
      if (attr->name != NULL) {
 801835e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8018360:	6993      	ldr	r3, [r2, #24]
 8018362:	b903      	cbnz	r3, 8018366 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8018364:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018366:	1e5c      	subs	r4, r3, #1
 8018368:	2c37      	cmp	r4, #55	@ 0x37
 801836a:	d84a      	bhi.n	8018402 <osThreadNew+0xb6>
 801836c:	6854      	ldr	r4, [r2, #4]
 801836e:	f014 0f01 	tst.w	r4, #1
 8018372:	d148      	bne.n	8018406 <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8018374:	6956      	ldr	r6, [r2, #20]
 8018376:	b176      	cbz	r6, 8018396 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018378:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801837c:	6894      	ldr	r4, [r2, #8]
 801837e:	b134      	cbz	r4, 801838e <osThreadNew+0x42>
 8018380:	68d7      	ldr	r7, [r2, #12]
 8018382:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8018386:	d302      	bcc.n	801838e <osThreadNew+0x42>
 8018388:	6917      	ldr	r7, [r2, #16]
 801838a:	b107      	cbz	r7, 801838e <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801838c:	b9c6      	cbnz	r6, 80183c0 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801838e:	b12c      	cbz	r4, 801839c <osThreadNew+0x50>
    mem  = -1;
 8018390:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018394:	e00e      	b.n	80183b4 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8018396:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 801839a:	e7ef      	b.n	801837c <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801839c:	68d4      	ldr	r4, [r2, #12]
 801839e:	b98c      	cbnz	r4, 80183c4 <osThreadNew+0x78>
 80183a0:	6914      	ldr	r4, [r2, #16]
 80183a2:	b194      	cbz	r4, 80183ca <osThreadNew+0x7e>
    mem  = -1;
 80183a4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80183a8:	e004      	b.n	80183b4 <osThreadNew+0x68>
    name = NULL;
 80183aa:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80183ac:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80183ae:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80183b0:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 80183b4:	2c01      	cmp	r4, #1
 80183b6:	d00a      	beq.n	80183ce <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80183b8:	b1ac      	cbz	r4, 80183e6 <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80183ba:	9805      	ldr	r0, [sp, #20]
}
 80183bc:	b007      	add	sp, #28
 80183be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80183c0:	2401      	movs	r4, #1
 80183c2:	e7f7      	b.n	80183b4 <osThreadNew+0x68>
    mem  = -1;
 80183c4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80183c8:	e7f4      	b.n	80183b4 <osThreadNew+0x68>
          mem = 0;
 80183ca:	2400      	movs	r4, #0
 80183cc:	e7f2      	b.n	80183b4 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80183ce:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80183d0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80183d2:	9202      	str	r2, [sp, #8]
 80183d4:	9401      	str	r4, [sp, #4]
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	460b      	mov	r3, r1
 80183da:	4662      	mov	r2, ip
 80183dc:	4629      	mov	r1, r5
 80183de:	f001 f9a3 	bl	8019728 <xTaskCreateStatic>
 80183e2:	9005      	str	r0, [sp, #20]
 80183e4:	e7e9      	b.n	80183ba <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80183e6:	aa05      	add	r2, sp, #20
 80183e8:	9201      	str	r2, [sp, #4]
 80183ea:	9300      	str	r3, [sp, #0]
 80183ec:	460b      	mov	r3, r1
 80183ee:	fa1f f28c 	uxth.w	r2, ip
 80183f2:	4629      	mov	r1, r5
 80183f4:	f001 f9d5 	bl	80197a2 <xTaskCreate>
 80183f8:	2801      	cmp	r0, #1
 80183fa:	d0de      	beq.n	80183ba <osThreadNew+0x6e>
            hTask = NULL;
 80183fc:	2300      	movs	r3, #0
 80183fe:	9305      	str	r3, [sp, #20]
 8018400:	e7db      	b.n	80183ba <osThreadNew+0x6e>
        return (NULL);
 8018402:	2000      	movs	r0, #0
 8018404:	e7da      	b.n	80183bc <osThreadNew+0x70>
 8018406:	2000      	movs	r0, #0
 8018408:	e7d8      	b.n	80183bc <osThreadNew+0x70>

0801840a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801840a:	b508      	push	{r3, lr}
 801840c:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8018410:	b933      	cbnz	r3, 8018420 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8018412:	b908      	cbnz	r0, 8018418 <osDelay+0xe>
    stat = osOK;
 8018414:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8018416:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8018418:	f001 fb62 	bl	8019ae0 <vTaskDelay>
    stat = osOK;
 801841c:	2000      	movs	r0, #0
 801841e:	e7fa      	b.n	8018416 <osDelay+0xc>
    stat = osErrorISR;
 8018420:	f06f 0005 	mvn.w	r0, #5
 8018424:	e7f7      	b.n	8018416 <osDelay+0xc>

08018426 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8018426:	b570      	push	{r4, r5, r6, lr}
 8018428:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 801842c:	2b00      	cmp	r3, #0
 801842e:	d13c      	bne.n	80184aa <osMutexNew+0x84>
 8018430:	4604      	mov	r4, r0
    if (attr != NULL) {
 8018432:	b100      	cbz	r0, 8018436 <osMutexNew+0x10>
      type = attr->attr_bits;
 8018434:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8018436:	f013 0601 	ands.w	r6, r3, #1
 801843a:	d000      	beq.n	801843e <osMutexNew+0x18>
      rmtx = 1U;
 801843c:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801843e:	f013 0f08 	tst.w	r3, #8
 8018442:	d135      	bne.n	80184b0 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8018444:	b344      	cbz	r4, 8018498 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8018446:	68a1      	ldr	r1, [r4, #8]
 8018448:	b111      	cbz	r1, 8018450 <osMutexNew+0x2a>
 801844a:	68e3      	ldr	r3, [r4, #12]
 801844c:	2b4f      	cmp	r3, #79	@ 0x4f
 801844e:	d818      	bhi.n	8018482 <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018450:	b191      	cbz	r1, 8018478 <osMutexNew+0x52>
      mem = -1;
 8018452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8018456:	bb6b      	cbnz	r3, 80184b4 <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8018458:	b316      	cbz	r6, 80184a0 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801845a:	2004      	movs	r0, #4
 801845c:	f000 fc04 	bl	8018c68 <xQueueCreateMutex>
 8018460:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8018462:	b31d      	cbz	r5, 80184ac <osMutexNew+0x86>
        if (attr != NULL) {
 8018464:	b104      	cbz	r4, 8018468 <osMutexNew+0x42>
          name = attr->name;
 8018466:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8018468:	4621      	mov	r1, r4
 801846a:	4628      	mov	r0, r5
 801846c:	f000 ff64 	bl	8019338 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8018470:	b1e6      	cbz	r6, 80184ac <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8018472:	f045 0501 	orr.w	r5, r5, #1
 8018476:	e019      	b.n	80184ac <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018478:	68e3      	ldr	r3, [r4, #12]
 801847a:	b17b      	cbz	r3, 801849c <osMutexNew+0x76>
      mem = -1;
 801847c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018480:	e7e9      	b.n	8018456 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8018482:	b126      	cbz	r6, 801848e <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8018484:	2004      	movs	r0, #4
 8018486:	f000 fbfa 	bl	8018c7e <xQueueCreateMutexStatic>
 801848a:	4605      	mov	r5, r0
 801848c:	e7e9      	b.n	8018462 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801848e:	2001      	movs	r0, #1
 8018490:	f000 fbf5 	bl	8018c7e <xQueueCreateMutexStatic>
 8018494:	4605      	mov	r5, r0
 8018496:	e7e4      	b.n	8018462 <osMutexNew+0x3c>
        mem = 0;
 8018498:	2300      	movs	r3, #0
 801849a:	e7dc      	b.n	8018456 <osMutexNew+0x30>
            mem = 0;
 801849c:	2300      	movs	r3, #0
 801849e:	e7da      	b.n	8018456 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80184a0:	2001      	movs	r0, #1
 80184a2:	f000 fbe1 	bl	8018c68 <xQueueCreateMutex>
 80184a6:	4605      	mov	r5, r0
 80184a8:	e7db      	b.n	8018462 <osMutexNew+0x3c>
  hMutex = NULL;
 80184aa:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80184ac:	4628      	mov	r0, r5
 80184ae:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 80184b0:	2500      	movs	r5, #0
 80184b2:	e7fb      	b.n	80184ac <osMutexNew+0x86>
 80184b4:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 80184b6:	e7f9      	b.n	80184ac <osMutexNew+0x86>

080184b8 <osMutexAcquire>:
 80184b8:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80184bc:	b9da      	cbnz	r2, 80184f6 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80184be:	b510      	push	{r4, lr}
 80184c0:	4603      	mov	r3, r0
 80184c2:	460c      	mov	r4, r1
 80184c4:	f020 0001 	bic.w	r0, r0, #1
 80184c8:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	d915      	bls.n	80184fc <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80184d0:	b141      	cbz	r1, 80184e4 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80184d2:	4621      	mov	r1, r4
 80184d4:	f000 fdeb 	bl	80190ae <xQueueTakeMutexRecursive>
 80184d8:	2801      	cmp	r0, #1
 80184da:	d012      	beq.n	8018502 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 80184dc:	b19c      	cbz	r4, 8018506 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 80184de:	f06f 0001 	mvn.w	r0, #1
 80184e2:	e00f      	b.n	8018504 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80184e4:	4621      	mov	r1, r4
 80184e6:	f000 fd0f 	bl	8018f08 <xQueueSemaphoreTake>
 80184ea:	2801      	cmp	r0, #1
 80184ec:	d00e      	beq.n	801850c <osMutexAcquire+0x54>
        if (timeout != 0U) {
 80184ee:	b17c      	cbz	r4, 8018510 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 80184f0:	f06f 0001 	mvn.w	r0, #1
 80184f4:	e006      	b.n	8018504 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 80184f6:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80184fa:	4770      	bx	lr
    stat = osErrorParameter;
 80184fc:	f06f 0003 	mvn.w	r0, #3
 8018500:	e000      	b.n	8018504 <osMutexAcquire+0x4c>
  stat = osOK;
 8018502:	2000      	movs	r0, #0
}
 8018504:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8018506:	f06f 0002 	mvn.w	r0, #2
 801850a:	e7fb      	b.n	8018504 <osMutexAcquire+0x4c>
  stat = osOK;
 801850c:	2000      	movs	r0, #0
 801850e:	e7f9      	b.n	8018504 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8018510:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018514:	e7f6      	b.n	8018504 <osMutexAcquire+0x4c>

08018516 <osMutexRelease>:
 8018516:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 801851a:	b9ba      	cbnz	r2, 801854c <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801851c:	b508      	push	{r3, lr}
 801851e:	4603      	mov	r3, r0
 8018520:	f020 0001 	bic.w	r0, r0, #1
 8018524:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8018528:	2b01      	cmp	r3, #1
 801852a:	d912      	bls.n	8018552 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 801852c:	b129      	cbz	r1, 801853a <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801852e:	f000 fbb5 	bl	8018c9c <xQueueGiveMutexRecursive>
 8018532:	2801      	cmp	r0, #1
 8018534:	d110      	bne.n	8018558 <osMutexRelease+0x42>
  stat = osOK;
 8018536:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018538:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801853a:	2300      	movs	r3, #0
 801853c:	461a      	mov	r2, r3
 801853e:	4619      	mov	r1, r3
 8018540:	f000 fac2 	bl	8018ac8 <xQueueGenericSend>
 8018544:	2801      	cmp	r0, #1
 8018546:	d10a      	bne.n	801855e <osMutexRelease+0x48>
  stat = osOK;
 8018548:	2000      	movs	r0, #0
 801854a:	e7f5      	b.n	8018538 <osMutexRelease+0x22>
    stat = osErrorISR;
 801854c:	f06f 0005 	mvn.w	r0, #5
}
 8018550:	4770      	bx	lr
    stat = osErrorParameter;
 8018552:	f06f 0003 	mvn.w	r0, #3
 8018556:	e7ef      	b.n	8018538 <osMutexRelease+0x22>
        stat = osErrorResource;
 8018558:	f06f 0002 	mvn.w	r0, #2
 801855c:	e7ec      	b.n	8018538 <osMutexRelease+0x22>
        stat = osErrorResource;
 801855e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8018562:	e7e9      	b.n	8018538 <osMutexRelease+0x22>

08018564 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018564:	b570      	push	{r4, r5, r6, lr}
 8018566:	b082      	sub	sp, #8
 8018568:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801856c:	2b00      	cmp	r3, #0
 801856e:	d13a      	bne.n	80185e6 <osMessageQueueNew+0x82>
 8018570:	4614      	mov	r4, r2
 8018572:	2800      	cmp	r0, #0
 8018574:	d03b      	beq.n	80185ee <osMessageQueueNew+0x8a>
 8018576:	2900      	cmp	r1, #0
 8018578:	d03b      	beq.n	80185f2 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 801857a:	b36a      	cbz	r2, 80185d8 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801857c:	6893      	ldr	r3, [r2, #8]
 801857e:	b14b      	cbz	r3, 8018594 <osMessageQueueNew+0x30>
 8018580:	68d2      	ldr	r2, [r2, #12]
 8018582:	2a4f      	cmp	r2, #79	@ 0x4f
 8018584:	d906      	bls.n	8018594 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018586:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018588:	b122      	cbz	r2, 8018594 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801858a:	fb01 f500 	mul.w	r5, r1, r0
 801858e:	6966      	ldr	r6, [r4, #20]
 8018590:	42ae      	cmp	r6, r5
 8018592:	d21b      	bcs.n	80185cc <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018594:	b173      	cbz	r3, 80185b4 <osMessageQueueNew+0x50>
    mem = -1;
 8018596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 801859a:	bb63      	cbnz	r3, 80185f6 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801859c:	2200      	movs	r2, #0
 801859e:	f000 fa6f 	bl	8018a80 <xQueueGenericCreate>
 80185a2:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80185a4:	b305      	cbz	r5, 80185e8 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80185a6:	b104      	cbz	r4, 80185aa <osMessageQueueNew+0x46>
        name = attr->name;
 80185a8:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80185aa:	4621      	mov	r1, r4
 80185ac:	4628      	mov	r0, r5
 80185ae:	f000 fec3 	bl	8019338 <vQueueAddToRegistry>
 80185b2:	e019      	b.n	80185e8 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80185b4:	68e3      	ldr	r3, [r4, #12]
 80185b6:	b98b      	cbnz	r3, 80185dc <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80185b8:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80185ba:	b113      	cbz	r3, 80185c2 <osMessageQueueNew+0x5e>
    mem = -1;
 80185bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185c0:	e7eb      	b.n	801859a <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80185c2:	6963      	ldr	r3, [r4, #20]
 80185c4:	b16b      	cbz	r3, 80185e2 <osMessageQueueNew+0x7e>
    mem = -1;
 80185c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185ca:	e7e6      	b.n	801859a <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80185cc:	2500      	movs	r5, #0
 80185ce:	9500      	str	r5, [sp, #0]
 80185d0:	f000 fa0c 	bl	80189ec <xQueueGenericCreateStatic>
 80185d4:	4605      	mov	r5, r0
 80185d6:	e7e5      	b.n	80185a4 <osMessageQueueNew+0x40>
      mem = 0;
 80185d8:	2300      	movs	r3, #0
 80185da:	e7de      	b.n	801859a <osMessageQueueNew+0x36>
    mem = -1;
 80185dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185e0:	e7db      	b.n	801859a <osMessageQueueNew+0x36>
          mem = 0;
 80185e2:	2300      	movs	r3, #0
 80185e4:	e7d9      	b.n	801859a <osMessageQueueNew+0x36>
  hQueue = NULL;
 80185e6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80185e8:	4628      	mov	r0, r5
 80185ea:	b002      	add	sp, #8
 80185ec:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 80185ee:	2500      	movs	r5, #0
 80185f0:	e7fa      	b.n	80185e8 <osMessageQueueNew+0x84>
 80185f2:	2500      	movs	r5, #0
 80185f4:	e7f8      	b.n	80185e8 <osMessageQueueNew+0x84>
 80185f6:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80185f8:	e7f6      	b.n	80185e8 <osMessageQueueNew+0x84>

080185fa <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80185fa:	b510      	push	{r4, lr}
 80185fc:	b082      	sub	sp, #8
 80185fe:	461c      	mov	r4, r3
 8018600:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018604:	b1c3      	cbz	r3, 8018638 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018606:	b318      	cbz	r0, 8018650 <osMessageQueuePut+0x56>
 8018608:	b329      	cbz	r1, 8018656 <osMessageQueuePut+0x5c>
 801860a:	bb3c      	cbnz	r4, 801865c <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 801860c:	2300      	movs	r3, #0
 801860e:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018610:	aa01      	add	r2, sp, #4
 8018612:	f000 fb63 	bl	8018cdc <xQueueGenericSendFromISR>
 8018616:	2801      	cmp	r0, #1
 8018618:	d123      	bne.n	8018662 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 801861a:	9801      	ldr	r0, [sp, #4]
 801861c:	b150      	cbz	r0, 8018634 <osMessageQueuePut+0x3a>
 801861e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018626:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801862a:	f3bf 8f4f 	dsb	sy
 801862e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8018632:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8018634:	b002      	add	sp, #8
 8018636:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018638:	b1b0      	cbz	r0, 8018668 <osMessageQueuePut+0x6e>
 801863a:	b1c1      	cbz	r1, 801866e <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801863c:	2300      	movs	r3, #0
 801863e:	4622      	mov	r2, r4
 8018640:	f000 fa42 	bl	8018ac8 <xQueueGenericSend>
 8018644:	2801      	cmp	r0, #1
 8018646:	d015      	beq.n	8018674 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8018648:	b1b4      	cbz	r4, 8018678 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 801864a:	f06f 0001 	mvn.w	r0, #1
 801864e:	e7f1      	b.n	8018634 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018650:	f06f 0003 	mvn.w	r0, #3
 8018654:	e7ee      	b.n	8018634 <osMessageQueuePut+0x3a>
 8018656:	f06f 0003 	mvn.w	r0, #3
 801865a:	e7eb      	b.n	8018634 <osMessageQueuePut+0x3a>
 801865c:	f06f 0003 	mvn.w	r0, #3
 8018660:	e7e8      	b.n	8018634 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8018662:	f06f 0002 	mvn.w	r0, #2
 8018666:	e7e5      	b.n	8018634 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8018668:	f06f 0003 	mvn.w	r0, #3
 801866c:	e7e2      	b.n	8018634 <osMessageQueuePut+0x3a>
 801866e:	f06f 0003 	mvn.w	r0, #3
 8018672:	e7df      	b.n	8018634 <osMessageQueuePut+0x3a>
  stat = osOK;
 8018674:	2000      	movs	r0, #0
 8018676:	e7dd      	b.n	8018634 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8018678:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 801867c:	e7da      	b.n	8018634 <osMessageQueuePut+0x3a>

0801867e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801867e:	b510      	push	{r4, lr}
 8018680:	b082      	sub	sp, #8
 8018682:	461c      	mov	r4, r3
 8018684:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8018688:	b1c3      	cbz	r3, 80186bc <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801868a:	b310      	cbz	r0, 80186d2 <osMessageQueueGet+0x54>
 801868c:	b321      	cbz	r1, 80186d8 <osMessageQueueGet+0x5a>
 801868e:	bb34      	cbnz	r4, 80186de <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8018690:	2300      	movs	r3, #0
 8018692:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8018694:	aa01      	add	r2, sp, #4
 8018696:	f000 fdd9 	bl	801924c <xQueueReceiveFromISR>
 801869a:	2801      	cmp	r0, #1
 801869c:	d122      	bne.n	80186e4 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 801869e:	9801      	ldr	r0, [sp, #4]
 80186a0:	b150      	cbz	r0, 80186b8 <osMessageQueueGet+0x3a>
 80186a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80186a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80186aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80186ae:	f3bf 8f4f 	dsb	sy
 80186b2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80186b6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80186b8:	b002      	add	sp, #8
 80186ba:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80186bc:	b1a8      	cbz	r0, 80186ea <osMessageQueueGet+0x6c>
 80186be:	b1b9      	cbz	r1, 80186f0 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80186c0:	4622      	mov	r2, r4
 80186c2:	f000 fb72 	bl	8018daa <xQueueReceive>
 80186c6:	2801      	cmp	r0, #1
 80186c8:	d015      	beq.n	80186f6 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 80186ca:	b1b4      	cbz	r4, 80186fa <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 80186cc:	f06f 0001 	mvn.w	r0, #1
 80186d0:	e7f2      	b.n	80186b8 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80186d2:	f06f 0003 	mvn.w	r0, #3
 80186d6:	e7ef      	b.n	80186b8 <osMessageQueueGet+0x3a>
 80186d8:	f06f 0003 	mvn.w	r0, #3
 80186dc:	e7ec      	b.n	80186b8 <osMessageQueueGet+0x3a>
 80186de:	f06f 0003 	mvn.w	r0, #3
 80186e2:	e7e9      	b.n	80186b8 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 80186e4:	f06f 0002 	mvn.w	r0, #2
 80186e8:	e7e6      	b.n	80186b8 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80186ea:	f06f 0003 	mvn.w	r0, #3
 80186ee:	e7e3      	b.n	80186b8 <osMessageQueueGet+0x3a>
 80186f0:	f06f 0003 	mvn.w	r0, #3
 80186f4:	e7e0      	b.n	80186b8 <osMessageQueueGet+0x3a>
  stat = osOK;
 80186f6:	2000      	movs	r0, #0
 80186f8:	e7de      	b.n	80186b8 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 80186fa:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80186fe:	e7db      	b.n	80186b8 <osMessageQueueGet+0x3a>

08018700 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8018700:	b148      	cbz	r0, 8018716 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8018702:	b508      	push	{r3, lr}
 8018704:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8018708:	b112      	cbz	r2, 8018710 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801870a:	f000 fe09 	bl	8019320 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 801870e:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8018710:	f000 fdf3 	bl	80192fa <uxQueueMessagesWaiting>
 8018714:	e7fb      	b.n	801870e <osMessageQueueGetCount+0xe>
    count = 0U;
 8018716:	2000      	movs	r0, #0
}
 8018718:	4770      	bx	lr

0801871a <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801871a:	b508      	push	{r3, lr}
 801871c:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018720:	b92b      	cbnz	r3, 801872e <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8018722:	b138      	cbz	r0, 8018734 <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8018724:	2100      	movs	r1, #0
 8018726:	f000 f90e 	bl	8018946 <xQueueGenericReset>
    stat = osOK;
 801872a:	2000      	movs	r0, #0
  }

  return (stat);
}
 801872c:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 801872e:	f06f 0005 	mvn.w	r0, #5
 8018732:	e7fb      	b.n	801872c <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8018734:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8018738:	e7f8      	b.n	801872c <osMessageQueueReset+0x12>
	...

0801873c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801873c:	4b03      	ldr	r3, [pc, #12]	@ (801874c <vApplicationGetIdleTaskMemory+0x10>)
 801873e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018740:	4b03      	ldr	r3, [pc, #12]	@ (8018750 <vApplicationGetIdleTaskMemory+0x14>)
 8018742:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018744:	2380      	movs	r3, #128	@ 0x80
 8018746:	6013      	str	r3, [r2, #0]
}
 8018748:	4770      	bx	lr
 801874a:	bf00      	nop
 801874c:	200034e8 	.word	0x200034e8
 8018750:	200032e8 	.word	0x200032e8

08018754 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018754:	4b03      	ldr	r3, [pc, #12]	@ (8018764 <vApplicationGetTimerTaskMemory+0x10>)
 8018756:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018758:	4b03      	ldr	r3, [pc, #12]	@ (8018768 <vApplicationGetTimerTaskMemory+0x14>)
 801875a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801875c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018760:	6013      	str	r3, [r2, #0]
}
 8018762:	4770      	bx	lr
 8018764:	20003168 	.word	0x20003168
 8018768:	20002d68 	.word	0x20002d68

0801876c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801876c:	f100 0308 	add.w	r3, r0, #8
 8018770:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018772:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018776:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018778:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801877a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801877c:	2300      	movs	r3, #0
 801877e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018780:	4770      	bx	lr

08018782 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018782:	2300      	movs	r3, #0
 8018784:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018786:	4770      	bx	lr

08018788 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8018788:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801878a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801878c:	689a      	ldr	r2, [r3, #8]
 801878e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018790:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018792:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018794:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018796:	6803      	ldr	r3, [r0, #0]
 8018798:	3301      	adds	r3, #1
 801879a:	6003      	str	r3, [r0, #0]
}
 801879c:	4770      	bx	lr

0801879e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801879e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80187a0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80187a2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80187a6:	d011      	beq.n	80187cc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80187a8:	f100 0308 	add.w	r3, r0, #8
 80187ac:	461c      	mov	r4, r3
 80187ae:	685b      	ldr	r3, [r3, #4]
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	42aa      	cmp	r2, r5
 80187b4:	d9fa      	bls.n	80187ac <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80187b6:	6863      	ldr	r3, [r4, #4]
 80187b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80187ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80187bc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80187be:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80187c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80187c2:	6803      	ldr	r3, [r0, #0]
 80187c4:	3301      	adds	r3, #1
 80187c6:	6003      	str	r3, [r0, #0]
}
 80187c8:	bc30      	pop	{r4, r5}
 80187ca:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80187cc:	6904      	ldr	r4, [r0, #16]
 80187ce:	e7f2      	b.n	80187b6 <vListInsert+0x18>

080187d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80187d0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80187d2:	6841      	ldr	r1, [r0, #4]
 80187d4:	6882      	ldr	r2, [r0, #8]
 80187d6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80187d8:	6841      	ldr	r1, [r0, #4]
 80187da:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80187dc:	685a      	ldr	r2, [r3, #4]
 80187de:	4282      	cmp	r2, r0
 80187e0:	d006      	beq.n	80187f0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80187e2:	2200      	movs	r2, #0
 80187e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	3a01      	subs	r2, #1
 80187ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80187ec:	6818      	ldr	r0, [r3, #0]
}
 80187ee:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80187f0:	6882      	ldr	r2, [r0, #8]
 80187f2:	605a      	str	r2, [r3, #4]
 80187f4:	e7f5      	b.n	80187e2 <uxListRemove+0x12>

080187f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80187f6:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80187f8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80187fa:	b118      	cbz	r0, 8018804 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80187fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80187fe:	6818      	ldr	r0, [r3, #0]
 8018800:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018804:	4770      	bx	lr

08018806 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018806:	b510      	push	{r4, lr}
 8018808:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801880a:	f001 fe4b 	bl	801a4a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801880e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018810:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018812:	429a      	cmp	r2, r3
 8018814:	d004      	beq.n	8018820 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8018816:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8018818:	f001 fe66 	bl	801a4e8 <vPortExitCritical>

	return xReturn;
}
 801881c:	4620      	mov	r0, r4
 801881e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8018820:	2401      	movs	r4, #1
 8018822:	e7f9      	b.n	8018818 <prvIsQueueFull+0x12>

08018824 <prvIsQueueEmpty>:
{
 8018824:	b510      	push	{r4, lr}
 8018826:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018828:	f001 fe3c 	bl	801a4a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801882c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801882e:	b923      	cbnz	r3, 801883a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8018830:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8018832:	f001 fe59 	bl	801a4e8 <vPortExitCritical>
}
 8018836:	4620      	mov	r0, r4
 8018838:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 801883a:	2400      	movs	r4, #0
 801883c:	e7f9      	b.n	8018832 <prvIsQueueEmpty+0xe>

0801883e <prvCopyDataToQueue>:
{
 801883e:	b570      	push	{r4, r5, r6, lr}
 8018840:	4604      	mov	r4, r0
 8018842:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018844:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018846:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018848:	b95a      	cbnz	r2, 8018862 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801884a:	6803      	ldr	r3, [r0, #0]
 801884c:	b11b      	cbz	r3, 8018856 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 801884e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018850:	3601      	adds	r6, #1
 8018852:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8018854:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018856:	6880      	ldr	r0, [r0, #8]
 8018858:	f001 faea 	bl	8019e30 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801885c:	2300      	movs	r3, #0
 801885e:	60a3      	str	r3, [r4, #8]
 8018860:	e7f6      	b.n	8018850 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8018862:	b96d      	cbnz	r5, 8018880 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018864:	6840      	ldr	r0, [r0, #4]
 8018866:	f015 fa47 	bl	802dcf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801886a:	6863      	ldr	r3, [r4, #4]
 801886c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801886e:	4413      	add	r3, r2
 8018870:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018872:	68a2      	ldr	r2, [r4, #8]
 8018874:	4293      	cmp	r3, r2
 8018876:	d319      	bcc.n	80188ac <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018878:	6823      	ldr	r3, [r4, #0]
 801887a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 801887c:	4628      	mov	r0, r5
 801887e:	e7e7      	b.n	8018850 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018880:	68c0      	ldr	r0, [r0, #12]
 8018882:	f015 fa39 	bl	802dcf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018886:	68e3      	ldr	r3, [r4, #12]
 8018888:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801888a:	4251      	negs	r1, r2
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018890:	6822      	ldr	r2, [r4, #0]
 8018892:	4293      	cmp	r3, r2
 8018894:	d202      	bcs.n	801889c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018896:	68a3      	ldr	r3, [r4, #8]
 8018898:	440b      	add	r3, r1
 801889a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801889c:	2d02      	cmp	r5, #2
 801889e:	d001      	beq.n	80188a4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80188a0:	2000      	movs	r0, #0
 80188a2:	e7d5      	b.n	8018850 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80188a4:	b126      	cbz	r6, 80188b0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80188a6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80188a8:	2000      	movs	r0, #0
 80188aa:	e7d1      	b.n	8018850 <prvCopyDataToQueue+0x12>
 80188ac:	4628      	mov	r0, r5
 80188ae:	e7cf      	b.n	8018850 <prvCopyDataToQueue+0x12>
 80188b0:	2000      	movs	r0, #0
 80188b2:	e7cd      	b.n	8018850 <prvCopyDataToQueue+0x12>

080188b4 <prvCopyDataFromQueue>:
{
 80188b4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80188b6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80188b8:	b16a      	cbz	r2, 80188d6 <prvCopyDataFromQueue+0x22>
{
 80188ba:	b510      	push	{r4, lr}
 80188bc:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80188be:	68d9      	ldr	r1, [r3, #12]
 80188c0:	4411      	add	r1, r2
 80188c2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80188c4:	689c      	ldr	r4, [r3, #8]
 80188c6:	42a1      	cmp	r1, r4
 80188c8:	d301      	bcc.n	80188ce <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80188ca:	6819      	ldr	r1, [r3, #0]
 80188cc:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80188ce:	68d9      	ldr	r1, [r3, #12]
 80188d0:	f015 fa12 	bl	802dcf8 <memcpy>
}
 80188d4:	bd10      	pop	{r4, pc}
 80188d6:	4770      	bx	lr

080188d8 <prvUnlockQueue>:
{
 80188d8:	b538      	push	{r3, r4, r5, lr}
 80188da:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80188dc:	f001 fde2 	bl	801a4a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80188e0:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80188e4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80188e6:	e001      	b.n	80188ec <prvUnlockQueue+0x14>
			--cTxLock;
 80188e8:	3c01      	subs	r4, #1
 80188ea:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80188ec:	2c00      	cmp	r4, #0
 80188ee:	dd0a      	ble.n	8018906 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80188f0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80188f2:	b143      	cbz	r3, 8018906 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80188f4:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80188f8:	f001 f99e 	bl	8019c38 <xTaskRemoveFromEventList>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	d0f3      	beq.n	80188e8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8018900:	f001 fa2e 	bl	8019d60 <vTaskMissedYield>
 8018904:	e7f0      	b.n	80188e8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8018906:	23ff      	movs	r3, #255	@ 0xff
 8018908:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 801890c:	f001 fdec 	bl	801a4e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8018910:	f001 fdc8 	bl	801a4a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8018914:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8018918:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801891a:	e001      	b.n	8018920 <prvUnlockQueue+0x48>
				--cRxLock;
 801891c:	3c01      	subs	r4, #1
 801891e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018920:	2c00      	cmp	r4, #0
 8018922:	dd0a      	ble.n	801893a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018924:	692b      	ldr	r3, [r5, #16]
 8018926:	b143      	cbz	r3, 801893a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018928:	f105 0010 	add.w	r0, r5, #16
 801892c:	f001 f984 	bl	8019c38 <xTaskRemoveFromEventList>
 8018930:	2800      	cmp	r0, #0
 8018932:	d0f3      	beq.n	801891c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8018934:	f001 fa14 	bl	8019d60 <vTaskMissedYield>
 8018938:	e7f0      	b.n	801891c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 801893a:	23ff      	movs	r3, #255	@ 0xff
 801893c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8018940:	f001 fdd2 	bl	801a4e8 <vPortExitCritical>
}
 8018944:	bd38      	pop	{r3, r4, r5, pc}

08018946 <xQueueGenericReset>:
{
 8018946:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8018948:	b1e0      	cbz	r0, 8018984 <xQueueGenericReset+0x3e>
 801894a:	460d      	mov	r5, r1
 801894c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801894e:	f001 fda9 	bl	801a4a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018952:	6823      	ldr	r3, [r4, #0]
 8018954:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8018956:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018958:	fb01 3002 	mla	r0, r1, r2, r3
 801895c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801895e:	2000      	movs	r0, #0
 8018960:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018962:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018964:	3a01      	subs	r2, #1
 8018966:	fb02 3301 	mla	r3, r2, r1, r3
 801896a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801896c:	23ff      	movs	r3, #255	@ 0xff
 801896e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018972:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8018976:	b9fd      	cbnz	r5, 80189b8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018978:	6923      	ldr	r3, [r4, #16]
 801897a:	b963      	cbnz	r3, 8018996 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 801897c:	f001 fdb4 	bl	801a4e8 <vPortExitCritical>
}
 8018980:	2001      	movs	r0, #1
 8018982:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018988:	f383 8811 	msr	BASEPRI, r3
 801898c:	f3bf 8f6f 	isb	sy
 8018990:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018994:	e7fe      	b.n	8018994 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018996:	f104 0010 	add.w	r0, r4, #16
 801899a:	f001 f94d 	bl	8019c38 <xTaskRemoveFromEventList>
 801899e:	2800      	cmp	r0, #0
 80189a0:	d0ec      	beq.n	801897c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80189a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80189a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80189aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80189ae:	f3bf 8f4f 	dsb	sy
 80189b2:	f3bf 8f6f 	isb	sy
 80189b6:	e7e1      	b.n	801897c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80189b8:	f104 0010 	add.w	r0, r4, #16
 80189bc:	f7ff fed6 	bl	801876c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80189c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80189c4:	f7ff fed2 	bl	801876c <vListInitialise>
 80189c8:	e7d8      	b.n	801897c <xQueueGenericReset+0x36>

080189ca <prvInitialiseNewQueue>:
{
 80189ca:	b538      	push	{r3, r4, r5, lr}
 80189cc:	461d      	mov	r5, r3
 80189ce:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80189d0:	460b      	mov	r3, r1
 80189d2:	b949      	cbnz	r1, 80189e8 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80189d4:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80189d6:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80189d8:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80189da:	2101      	movs	r1, #1
 80189dc:	4620      	mov	r0, r4
 80189de:	f7ff ffb2 	bl	8018946 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80189e2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 80189e6:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80189e8:	6022      	str	r2, [r4, #0]
 80189ea:	e7f4      	b.n	80189d6 <prvInitialiseNewQueue+0xc>

080189ec <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80189ec:	b940      	cbnz	r0, 8018a00 <xQueueGenericCreateStatic+0x14>
 80189ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189f2:	f383 8811 	msr	BASEPRI, r3
 80189f6:	f3bf 8f6f 	isb	sy
 80189fa:	f3bf 8f4f 	dsb	sy
 80189fe:	e7fe      	b.n	80189fe <xQueueGenericCreateStatic+0x12>
	{
 8018a00:	b510      	push	{r4, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	461c      	mov	r4, r3
 8018a06:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8018a08:	b153      	cbz	r3, 8018a20 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018a0a:	b192      	cbz	r2, 8018a32 <xQueueGenericCreateStatic+0x46>
 8018a0c:	b989      	cbnz	r1, 8018a32 <xQueueGenericCreateStatic+0x46>
 8018a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a12:	f383 8811 	msr	BASEPRI, r3
 8018a16:	f3bf 8f6f 	isb	sy
 8018a1a:	f3bf 8f4f 	dsb	sy
 8018a1e:	e7fe      	b.n	8018a1e <xQueueGenericCreateStatic+0x32>
 8018a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a24:	f383 8811 	msr	BASEPRI, r3
 8018a28:	f3bf 8f6f 	isb	sy
 8018a2c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8018a30:	e7fe      	b.n	8018a30 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018a32:	b16a      	cbz	r2, 8018a50 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018a34:	2350      	movs	r3, #80	@ 0x50
 8018a36:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018a38:	9b03      	ldr	r3, [sp, #12]
 8018a3a:	2b50      	cmp	r3, #80	@ 0x50
 8018a3c:	d013      	beq.n	8018a66 <xQueueGenericCreateStatic+0x7a>
 8018a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a42:	f383 8811 	msr	BASEPRI, r3
 8018a46:	f3bf 8f6f 	isb	sy
 8018a4a:	f3bf 8f4f 	dsb	sy
 8018a4e:	e7fe      	b.n	8018a4e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018a50:	2900      	cmp	r1, #0
 8018a52:	d0ef      	beq.n	8018a34 <xQueueGenericCreateStatic+0x48>
 8018a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a58:	f383 8811 	msr	BASEPRI, r3
 8018a5c:	f3bf 8f6f 	isb	sy
 8018a60:	f3bf 8f4f 	dsb	sy
 8018a64:	e7fe      	b.n	8018a64 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018a66:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018a68:	2301      	movs	r3, #1
 8018a6a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018a6e:	9400      	str	r4, [sp, #0]
 8018a70:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018a74:	4660      	mov	r0, ip
 8018a76:	f7ff ffa8 	bl	80189ca <prvInitialiseNewQueue>
	}
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	b004      	add	sp, #16
 8018a7e:	bd10      	pop	{r4, pc}

08018a80 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018a80:	b940      	cbnz	r0, 8018a94 <xQueueGenericCreate+0x14>
 8018a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a86:	f383 8811 	msr	BASEPRI, r3
 8018a8a:	f3bf 8f6f 	isb	sy
 8018a8e:	f3bf 8f4f 	dsb	sy
 8018a92:	e7fe      	b.n	8018a92 <xQueueGenericCreate+0x12>
	{
 8018a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a96:	b083      	sub	sp, #12
 8018a98:	460d      	mov	r5, r1
 8018a9a:	4614      	mov	r4, r2
 8018a9c:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a9e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018aa2:	3050      	adds	r0, #80	@ 0x50
 8018aa4:	f001 feb8 	bl	801a818 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8018aa8:	4607      	mov	r7, r0
 8018aaa:	b150      	cbz	r0, 8018ac2 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018aac:	2300      	movs	r3, #0
 8018aae:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018ab2:	9000      	str	r0, [sp, #0]
 8018ab4:	4623      	mov	r3, r4
 8018ab6:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8018aba:	4629      	mov	r1, r5
 8018abc:	4630      	mov	r0, r6
 8018abe:	f7ff ff84 	bl	80189ca <prvInitialiseNewQueue>
	}
 8018ac2:	4638      	mov	r0, r7
 8018ac4:	b003      	add	sp, #12
 8018ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ac8 <xQueueGenericSend>:
{
 8018ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018aca:	b085      	sub	sp, #20
 8018acc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8018ace:	b188      	cbz	r0, 8018af4 <xQueueGenericSend+0x2c>
 8018ad0:	460f      	mov	r7, r1
 8018ad2:	461d      	mov	r5, r3
 8018ad4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ad6:	b1b1      	cbz	r1, 8018b06 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018ad8:	2d02      	cmp	r5, #2
 8018ada:	d120      	bne.n	8018b1e <xQueueGenericSend+0x56>
 8018adc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018ade:	2b01      	cmp	r3, #1
 8018ae0:	d01d      	beq.n	8018b1e <xQueueGenericSend+0x56>
 8018ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ae6:	f383 8811 	msr	BASEPRI, r3
 8018aea:	f3bf 8f6f 	isb	sy
 8018aee:	f3bf 8f4f 	dsb	sy
 8018af2:	e7fe      	b.n	8018af2 <xQueueGenericSend+0x2a>
 8018af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018af8:	f383 8811 	msr	BASEPRI, r3
 8018afc:	f3bf 8f6f 	isb	sy
 8018b00:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018b04:	e7fe      	b.n	8018b04 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018b06:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d0e5      	beq.n	8018ad8 <xQueueGenericSend+0x10>
 8018b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b10:	f383 8811 	msr	BASEPRI, r3
 8018b14:	f3bf 8f6f 	isb	sy
 8018b18:	f3bf 8f4f 	dsb	sy
 8018b1c:	e7fe      	b.n	8018b1c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018b1e:	f001 f92b 	bl	8019d78 <xTaskGetSchedulerState>
 8018b22:	4606      	mov	r6, r0
 8018b24:	b958      	cbnz	r0, 8018b3e <xQueueGenericSend+0x76>
 8018b26:	9b01      	ldr	r3, [sp, #4]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d048      	beq.n	8018bbe <xQueueGenericSend+0xf6>
 8018b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b30:	f383 8811 	msr	BASEPRI, r3
 8018b34:	f3bf 8f6f 	isb	sy
 8018b38:	f3bf 8f4f 	dsb	sy
 8018b3c:	e7fe      	b.n	8018b3c <xQueueGenericSend+0x74>
 8018b3e:	2600      	movs	r6, #0
 8018b40:	e03d      	b.n	8018bbe <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018b42:	462a      	mov	r2, r5
 8018b44:	4639      	mov	r1, r7
 8018b46:	4620      	mov	r0, r4
 8018b48:	f7ff fe79 	bl	801883e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018b4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018b4e:	b97b      	cbnz	r3, 8018b70 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8018b50:	b148      	cbz	r0, 8018b66 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8018b52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018b5e:	f3bf 8f4f 	dsb	sy
 8018b62:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8018b66:	f001 fcbf 	bl	801a4e8 <vPortExitCritical>
				return pdPASS;
 8018b6a:	2001      	movs	r0, #1
}
 8018b6c:	b005      	add	sp, #20
 8018b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018b70:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018b74:	f001 f860 	bl	8019c38 <xTaskRemoveFromEventList>
 8018b78:	2800      	cmp	r0, #0
 8018b7a:	d0f4      	beq.n	8018b66 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8018b7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018b88:	f3bf 8f4f 	dsb	sy
 8018b8c:	f3bf 8f6f 	isb	sy
 8018b90:	e7e9      	b.n	8018b66 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8018b92:	f001 fca9 	bl	801a4e8 <vPortExitCritical>
					return errQUEUE_FULL;
 8018b96:	2000      	movs	r0, #0
 8018b98:	e7e8      	b.n	8018b6c <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018b9a:	a802      	add	r0, sp, #8
 8018b9c:	f001 f892 	bl	8019cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018ba0:	2601      	movs	r6, #1
 8018ba2:	e019      	b.n	8018bd8 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018baa:	e021      	b.n	8018bf0 <xQueueGenericSend+0x128>
 8018bac:	2300      	movs	r3, #0
 8018bae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018bb2:	e023      	b.n	8018bfc <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f7ff fe8f 	bl	80188d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018bba:	f000 ff15 	bl	80199e8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8018bbe:	f001 fc71 	bl	801a4a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018bc2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8018bc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018bc6:	429a      	cmp	r2, r3
 8018bc8:	d3bb      	bcc.n	8018b42 <xQueueGenericSend+0x7a>
 8018bca:	2d02      	cmp	r5, #2
 8018bcc:	d0b9      	beq.n	8018b42 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018bce:	9b01      	ldr	r3, [sp, #4]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d0de      	beq.n	8018b92 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8018bd4:	2e00      	cmp	r6, #0
 8018bd6:	d0e0      	beq.n	8018b9a <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8018bd8:	f001 fc86 	bl	801a4e8 <vPortExitCritical>
		vTaskSuspendAll();
 8018bdc:	f000 fe6a 	bl	80198b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018be0:	f001 fc60 	bl	801a4a4 <vPortEnterCritical>
 8018be4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8018be8:	b252      	sxtb	r2, r2
 8018bea:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018bee:	d0d9      	beq.n	8018ba4 <xQueueGenericSend+0xdc>
 8018bf0:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8018bf4:	b252      	sxtb	r2, r2
 8018bf6:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8018bfa:	d0d7      	beq.n	8018bac <xQueueGenericSend+0xe4>
 8018bfc:	f001 fc74 	bl	801a4e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018c00:	a901      	add	r1, sp, #4
 8018c02:	a802      	add	r0, sp, #8
 8018c04:	f001 f86a 	bl	8019cdc <xTaskCheckForTimeOut>
 8018c08:	b9d8      	cbnz	r0, 8018c42 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018c0a:	4620      	mov	r0, r4
 8018c0c:	f7ff fdfb 	bl	8018806 <prvIsQueueFull>
 8018c10:	2800      	cmp	r0, #0
 8018c12:	d0cf      	beq.n	8018bb4 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018c14:	9901      	ldr	r1, [sp, #4]
 8018c16:	f104 0010 	add.w	r0, r4, #16
 8018c1a:	f000 ffd9 	bl	8019bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018c1e:	4620      	mov	r0, r4
 8018c20:	f7ff fe5a 	bl	80188d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018c24:	f000 fee0 	bl	80199e8 <xTaskResumeAll>
 8018c28:	2800      	cmp	r0, #0
 8018c2a:	d1c8      	bne.n	8018bbe <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8018c2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018c38:	f3bf 8f4f 	dsb	sy
 8018c3c:	f3bf 8f6f 	isb	sy
 8018c40:	e7bd      	b.n	8018bbe <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8018c42:	4620      	mov	r0, r4
 8018c44:	f7ff fe48 	bl	80188d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018c48:	f000 fece 	bl	80199e8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8018c4c:	2000      	movs	r0, #0
 8018c4e:	e78d      	b.n	8018b6c <xQueueGenericSend+0xa4>

08018c50 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8018c50:	b148      	cbz	r0, 8018c66 <prvInitialiseMutex+0x16>
	{
 8018c52:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8018c54:	2100      	movs	r1, #0
 8018c56:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018c58:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018c5a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018c5c:	460b      	mov	r3, r1
 8018c5e:	460a      	mov	r2, r1
 8018c60:	f7ff ff32 	bl	8018ac8 <xQueueGenericSend>
	}
 8018c64:	bd08      	pop	{r3, pc}
 8018c66:	4770      	bx	lr

08018c68 <xQueueCreateMutex>:
	{
 8018c68:	b510      	push	{r4, lr}
 8018c6a:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	2001      	movs	r0, #1
 8018c70:	f7ff ff06 	bl	8018a80 <xQueueGenericCreate>
 8018c74:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018c76:	f7ff ffeb 	bl	8018c50 <prvInitialiseMutex>
	}
 8018c7a:	4620      	mov	r0, r4
 8018c7c:	bd10      	pop	{r4, pc}

08018c7e <xQueueCreateMutexStatic>:
	{
 8018c7e:	b510      	push	{r4, lr}
 8018c80:	b082      	sub	sp, #8
 8018c82:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018c84:	9000      	str	r0, [sp, #0]
 8018c86:	2200      	movs	r2, #0
 8018c88:	4611      	mov	r1, r2
 8018c8a:	2001      	movs	r0, #1
 8018c8c:	f7ff feae 	bl	80189ec <xQueueGenericCreateStatic>
 8018c90:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018c92:	f7ff ffdd 	bl	8018c50 <prvInitialiseMutex>
	}
 8018c96:	4620      	mov	r0, r4
 8018c98:	b002      	add	sp, #8
 8018c9a:	bd10      	pop	{r4, pc}

08018c9c <xQueueGiveMutexRecursive>:
	{
 8018c9c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8018c9e:	b138      	cbz	r0, 8018cb0 <xQueueGiveMutexRecursive+0x14>
 8018ca0:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018ca2:	6885      	ldr	r5, [r0, #8]
 8018ca4:	f001 f862 	bl	8019d6c <xTaskGetCurrentTaskHandle>
 8018ca8:	4285      	cmp	r5, r0
 8018caa:	d00a      	beq.n	8018cc2 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8018cac:	2000      	movs	r0, #0
	}
 8018cae:	bd38      	pop	{r3, r4, r5, pc}
 8018cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cb4:	f383 8811 	msr	BASEPRI, r3
 8018cb8:	f3bf 8f6f 	isb	sy
 8018cbc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8018cc0:	e7fe      	b.n	8018cc0 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8018cc2:	68e3      	ldr	r3, [r4, #12]
 8018cc4:	3b01      	subs	r3, #1
 8018cc6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018cc8:	b10b      	cbz	r3, 8018cce <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8018cca:	2001      	movs	r0, #1
		return xReturn;
 8018ccc:	e7ef      	b.n	8018cae <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018cce:	461a      	mov	r2, r3
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	4620      	mov	r0, r4
 8018cd4:	f7ff fef8 	bl	8018ac8 <xQueueGenericSend>
			xReturn = pdPASS;
 8018cd8:	2001      	movs	r0, #1
 8018cda:	e7e8      	b.n	8018cae <xQueueGiveMutexRecursive+0x12>

08018cdc <xQueueGenericSendFromISR>:
{
 8018cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8018ce0:	b190      	cbz	r0, 8018d08 <xQueueGenericSendFromISR+0x2c>
 8018ce2:	460f      	mov	r7, r1
 8018ce4:	4616      	mov	r6, r2
 8018ce6:	461c      	mov	r4, r3
 8018ce8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018cea:	b1b1      	cbz	r1, 8018d1a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018cec:	2c02      	cmp	r4, #2
 8018cee:	d120      	bne.n	8018d32 <xQueueGenericSendFromISR+0x56>
 8018cf0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d01d      	beq.n	8018d32 <xQueueGenericSendFromISR+0x56>
 8018cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cfa:	f383 8811 	msr	BASEPRI, r3
 8018cfe:	f3bf 8f6f 	isb	sy
 8018d02:	f3bf 8f4f 	dsb	sy
 8018d06:	e7fe      	b.n	8018d06 <xQueueGenericSendFromISR+0x2a>
 8018d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d0c:	f383 8811 	msr	BASEPRI, r3
 8018d10:	f3bf 8f6f 	isb	sy
 8018d14:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018d18:	e7fe      	b.n	8018d18 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018d1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d0e5      	beq.n	8018cec <xQueueGenericSendFromISR+0x10>
 8018d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d24:	f383 8811 	msr	BASEPRI, r3
 8018d28:	f3bf 8f6f 	isb	sy
 8018d2c:	f3bf 8f4f 	dsb	sy
 8018d30:	e7fe      	b.n	8018d30 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018d32:	f001 fcdd 	bl	801a6f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018d36:	f3ef 8811 	mrs	r8, BASEPRI
 8018d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d3e:	f383 8811 	msr	BASEPRI, r3
 8018d42:	f3bf 8f6f 	isb	sy
 8018d46:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018d4a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8018d4c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d306      	bcc.n	8018d60 <xQueueGenericSendFromISR+0x84>
 8018d52:	2c02      	cmp	r4, #2
 8018d54:	d004      	beq.n	8018d60 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8018d56:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018d58:	f388 8811 	msr	BASEPRI, r8
}
 8018d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8018d60:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8018d64:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018d68:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018d6a:	4622      	mov	r2, r4
 8018d6c:	4639      	mov	r1, r7
 8018d6e:	4628      	mov	r0, r5
 8018d70:	f7ff fd65 	bl	801883e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8018d74:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018d78:	d006      	beq.n	8018d88 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018d7a:	f109 0301 	add.w	r3, r9, #1
 8018d7e:	b25b      	sxtb	r3, r3
 8018d80:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8018d84:	2001      	movs	r0, #1
 8018d86:	e7e7      	b.n	8018d58 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018d88:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018d8a:	b90b      	cbnz	r3, 8018d90 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8018d8c:	2001      	movs	r0, #1
 8018d8e:	e7e3      	b.n	8018d58 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018d90:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8018d94:	f000 ff50 	bl	8019c38 <xTaskRemoveFromEventList>
 8018d98:	b118      	cbz	r0, 8018da2 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8018d9a:	b126      	cbz	r6, 8018da6 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018d9c:	2001      	movs	r0, #1
 8018d9e:	6030      	str	r0, [r6, #0]
 8018da0:	e7da      	b.n	8018d58 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8018da2:	2001      	movs	r0, #1
 8018da4:	e7d8      	b.n	8018d58 <xQueueGenericSendFromISR+0x7c>
 8018da6:	2001      	movs	r0, #1
 8018da8:	e7d6      	b.n	8018d58 <xQueueGenericSendFromISR+0x7c>

08018daa <xQueueReceive>:
{
 8018daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dac:	b085      	sub	sp, #20
 8018dae:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018db0:	b190      	cbz	r0, 8018dd8 <xQueueReceive+0x2e>
 8018db2:	460f      	mov	r7, r1
 8018db4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018db6:	b1c1      	cbz	r1, 8018dea <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018db8:	f000 ffde 	bl	8019d78 <xTaskGetSchedulerState>
 8018dbc:	4606      	mov	r6, r0
 8018dbe:	bb00      	cbnz	r0, 8018e02 <xQueueReceive+0x58>
 8018dc0:	9b01      	ldr	r3, [sp, #4]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d05e      	beq.n	8018e84 <xQueueReceive+0xda>
	__asm volatile
 8018dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018dca:	f383 8811 	msr	BASEPRI, r3
 8018dce:	f3bf 8f6f 	isb	sy
 8018dd2:	f3bf 8f4f 	dsb	sy
 8018dd6:	e7fe      	b.n	8018dd6 <xQueueReceive+0x2c>
 8018dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ddc:	f383 8811 	msr	BASEPRI, r3
 8018de0:	f3bf 8f6f 	isb	sy
 8018de4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018de8:	e7fe      	b.n	8018de8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018dea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d0e3      	beq.n	8018db8 <xQueueReceive+0xe>
 8018df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018df4:	f383 8811 	msr	BASEPRI, r3
 8018df8:	f3bf 8f6f 	isb	sy
 8018dfc:	f3bf 8f4f 	dsb	sy
 8018e00:	e7fe      	b.n	8018e00 <xQueueReceive+0x56>
 8018e02:	2600      	movs	r6, #0
 8018e04:	e03e      	b.n	8018e84 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018e06:	4639      	mov	r1, r7
 8018e08:	4620      	mov	r0, r4
 8018e0a:	f7ff fd53 	bl	80188b4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018e0e:	3d01      	subs	r5, #1
 8018e10:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018e12:	6923      	ldr	r3, [r4, #16]
 8018e14:	b923      	cbnz	r3, 8018e20 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8018e16:	f001 fb67 	bl	801a4e8 <vPortExitCritical>
				return pdPASS;
 8018e1a:	2001      	movs	r0, #1
}
 8018e1c:	b005      	add	sp, #20
 8018e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018e20:	f104 0010 	add.w	r0, r4, #16
 8018e24:	f000 ff08 	bl	8019c38 <xTaskRemoveFromEventList>
 8018e28:	2800      	cmp	r0, #0
 8018e2a:	d0f4      	beq.n	8018e16 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8018e2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018e38:	f3bf 8f4f 	dsb	sy
 8018e3c:	f3bf 8f6f 	isb	sy
 8018e40:	e7e9      	b.n	8018e16 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8018e42:	f001 fb51 	bl	801a4e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018e46:	2000      	movs	r0, #0
 8018e48:	e7e8      	b.n	8018e1c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018e4a:	a802      	add	r0, sp, #8
 8018e4c:	f000 ff3a 	bl	8019cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018e50:	2601      	movs	r6, #1
 8018e52:	e021      	b.n	8018e98 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8018e54:	2300      	movs	r3, #0
 8018e56:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018e5a:	e029      	b.n	8018eb0 <xQueueReceive+0x106>
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018e62:	e02b      	b.n	8018ebc <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8018e64:	4620      	mov	r0, r4
 8018e66:	f7ff fd37 	bl	80188d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018e6a:	f000 fdbd 	bl	80199e8 <xTaskResumeAll>
 8018e6e:	e009      	b.n	8018e84 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8018e70:	4620      	mov	r0, r4
 8018e72:	f7ff fd31 	bl	80188d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018e76:	f000 fdb7 	bl	80199e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018e7a:	4620      	mov	r0, r4
 8018e7c:	f7ff fcd2 	bl	8018824 <prvIsQueueEmpty>
 8018e80:	2800      	cmp	r0, #0
 8018e82:	d13f      	bne.n	8018f04 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8018e84:	f001 fb0e 	bl	801a4a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018e88:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018e8a:	2d00      	cmp	r5, #0
 8018e8c:	d1bb      	bne.n	8018e06 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018e8e:	9b01      	ldr	r3, [sp, #4]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d0d6      	beq.n	8018e42 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8018e94:	2e00      	cmp	r6, #0
 8018e96:	d0d8      	beq.n	8018e4a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8018e98:	f001 fb26 	bl	801a4e8 <vPortExitCritical>
		vTaskSuspendAll();
 8018e9c:	f000 fd0a 	bl	80198b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018ea0:	f001 fb00 	bl	801a4a4 <vPortEnterCritical>
 8018ea4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018ea8:	b25b      	sxtb	r3, r3
 8018eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018eae:	d0d1      	beq.n	8018e54 <xQueueReceive+0xaa>
 8018eb0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018eb4:	b25b      	sxtb	r3, r3
 8018eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018eba:	d0cf      	beq.n	8018e5c <xQueueReceive+0xb2>
 8018ebc:	f001 fb14 	bl	801a4e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018ec0:	a901      	add	r1, sp, #4
 8018ec2:	a802      	add	r0, sp, #8
 8018ec4:	f000 ff0a 	bl	8019cdc <xTaskCheckForTimeOut>
 8018ec8:	2800      	cmp	r0, #0
 8018eca:	d1d1      	bne.n	8018e70 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018ecc:	4620      	mov	r0, r4
 8018ece:	f7ff fca9 	bl	8018824 <prvIsQueueEmpty>
 8018ed2:	2800      	cmp	r0, #0
 8018ed4:	d0c6      	beq.n	8018e64 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018ed6:	9901      	ldr	r1, [sp, #4]
 8018ed8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018edc:	f000 fe78 	bl	8019bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	f7ff fcf9 	bl	80188d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018ee6:	f000 fd7f 	bl	80199e8 <xTaskResumeAll>
 8018eea:	2800      	cmp	r0, #0
 8018eec:	d1ca      	bne.n	8018e84 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8018eee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018ef6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018efa:	f3bf 8f4f 	dsb	sy
 8018efe:	f3bf 8f6f 	isb	sy
 8018f02:	e7bf      	b.n	8018e84 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8018f04:	2000      	movs	r0, #0
 8018f06:	e789      	b.n	8018e1c <xQueueReceive+0x72>

08018f08 <xQueueSemaphoreTake>:
{
 8018f08:	b570      	push	{r4, r5, r6, lr}
 8018f0a:	b084      	sub	sp, #16
 8018f0c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018f0e:	b158      	cbz	r0, 8018f28 <xQueueSemaphoreTake+0x20>
 8018f10:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8018f12:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018f14:	b18b      	cbz	r3, 8018f3a <xQueueSemaphoreTake+0x32>
 8018f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f1a:	f383 8811 	msr	BASEPRI, r3
 8018f1e:	f3bf 8f6f 	isb	sy
 8018f22:	f3bf 8f4f 	dsb	sy
 8018f26:	e7fe      	b.n	8018f26 <xQueueSemaphoreTake+0x1e>
 8018f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f2c:	f383 8811 	msr	BASEPRI, r3
 8018f30:	f3bf 8f6f 	isb	sy
 8018f34:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018f38:	e7fe      	b.n	8018f38 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f3a:	f000 ff1d 	bl	8019d78 <xTaskGetSchedulerState>
 8018f3e:	4605      	mov	r5, r0
 8018f40:	b950      	cbnz	r0, 8018f58 <xQueueSemaphoreTake+0x50>
 8018f42:	9b01      	ldr	r3, [sp, #4]
 8018f44:	b15b      	cbz	r3, 8018f5e <xQueueSemaphoreTake+0x56>
 8018f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f4a:	f383 8811 	msr	BASEPRI, r3
 8018f4e:	f3bf 8f6f 	isb	sy
 8018f52:	f3bf 8f4f 	dsb	sy
 8018f56:	e7fe      	b.n	8018f56 <xQueueSemaphoreTake+0x4e>
 8018f58:	2600      	movs	r6, #0
 8018f5a:	4635      	mov	r5, r6
 8018f5c:	e055      	b.n	801900a <xQueueSemaphoreTake+0x102>
 8018f5e:	4606      	mov	r6, r0
 8018f60:	e053      	b.n	801900a <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018f62:	3b01      	subs	r3, #1
 8018f64:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018f66:	6823      	ldr	r3, [r4, #0]
 8018f68:	b13b      	cbz	r3, 8018f7a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018f6a:	6923      	ldr	r3, [r4, #16]
 8018f6c:	b94b      	cbnz	r3, 8018f82 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8018f6e:	f001 fabb 	bl	801a4e8 <vPortExitCritical>
				return pdPASS;
 8018f72:	2601      	movs	r6, #1
}
 8018f74:	4630      	mov	r0, r6
 8018f76:	b004      	add	sp, #16
 8018f78:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018f7a:	f000 fff1 	bl	8019f60 <pvTaskIncrementMutexHeldCount>
 8018f7e:	60a0      	str	r0, [r4, #8]
 8018f80:	e7f3      	b.n	8018f6a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018f82:	f104 0010 	add.w	r0, r4, #16
 8018f86:	f000 fe57 	bl	8019c38 <xTaskRemoveFromEventList>
 8018f8a:	2800      	cmp	r0, #0
 8018f8c:	d0ef      	beq.n	8018f6e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8018f8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018f9a:	f3bf 8f4f 	dsb	sy
 8018f9e:	f3bf 8f6f 	isb	sy
 8018fa2:	e7e4      	b.n	8018f6e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018fa4:	b146      	cbz	r6, 8018fb8 <xQueueSemaphoreTake+0xb0>
 8018fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018faa:	f383 8811 	msr	BASEPRI, r3
 8018fae:	f3bf 8f6f 	isb	sy
 8018fb2:	f3bf 8f4f 	dsb	sy
 8018fb6:	e7fe      	b.n	8018fb6 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8018fb8:	f001 fa96 	bl	801a4e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018fbc:	e7da      	b.n	8018f74 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018fbe:	a802      	add	r0, sp, #8
 8018fc0:	f000 fe80 	bl	8019cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018fc4:	2501      	movs	r5, #1
 8018fc6:	e02a      	b.n	801901e <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8018fc8:	2300      	movs	r3, #0
 8018fca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018fce:	e032      	b.n	8019036 <xQueueSemaphoreTake+0x12e>
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018fd6:	e034      	b.n	8019042 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8018fd8:	f001 fa64 	bl	801a4a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018fdc:	68a0      	ldr	r0, [r4, #8]
 8018fde:	f000 fedb 	bl	8019d98 <xTaskPriorityInherit>
 8018fe2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8018fe4:	f001 fa80 	bl	801a4e8 <vPortExitCritical>
 8018fe8:	e03b      	b.n	8019062 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8018fea:	4620      	mov	r0, r4
 8018fec:	f7ff fc74 	bl	80188d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018ff0:	f000 fcfa 	bl	80199e8 <xTaskResumeAll>
 8018ff4:	e009      	b.n	801900a <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8018ff6:	4620      	mov	r0, r4
 8018ff8:	f7ff fc6e 	bl	80188d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018ffc:	f000 fcf4 	bl	80199e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019000:	4620      	mov	r0, r4
 8019002:	f7ff fc0f 	bl	8018824 <prvIsQueueEmpty>
 8019006:	2800      	cmp	r0, #0
 8019008:	d142      	bne.n	8019090 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801900a:	f001 fa4b 	bl	801a4a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801900e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019010:	2b00      	cmp	r3, #0
 8019012:	d1a6      	bne.n	8018f62 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019014:	9b01      	ldr	r3, [sp, #4]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d0c4      	beq.n	8018fa4 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801901a:	2d00      	cmp	r5, #0
 801901c:	d0cf      	beq.n	8018fbe <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 801901e:	f001 fa63 	bl	801a4e8 <vPortExitCritical>
		vTaskSuspendAll();
 8019022:	f000 fc47 	bl	80198b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019026:	f001 fa3d 	bl	801a4a4 <vPortEnterCritical>
 801902a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801902e:	b25b      	sxtb	r3, r3
 8019030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019034:	d0c8      	beq.n	8018fc8 <xQueueSemaphoreTake+0xc0>
 8019036:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801903a:	b25b      	sxtb	r3, r3
 801903c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019040:	d0c6      	beq.n	8018fd0 <xQueueSemaphoreTake+0xc8>
 8019042:	f001 fa51 	bl	801a4e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019046:	a901      	add	r1, sp, #4
 8019048:	a802      	add	r0, sp, #8
 801904a:	f000 fe47 	bl	8019cdc <xTaskCheckForTimeOut>
 801904e:	2800      	cmp	r0, #0
 8019050:	d1d1      	bne.n	8018ff6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019052:	4620      	mov	r0, r4
 8019054:	f7ff fbe6 	bl	8018824 <prvIsQueueEmpty>
 8019058:	2800      	cmp	r0, #0
 801905a:	d0c6      	beq.n	8018fea <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801905c:	6823      	ldr	r3, [r4, #0]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d0ba      	beq.n	8018fd8 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019062:	9901      	ldr	r1, [sp, #4]
 8019064:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019068:	f000 fdb2 	bl	8019bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801906c:	4620      	mov	r0, r4
 801906e:	f7ff fc33 	bl	80188d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019072:	f000 fcb9 	bl	80199e8 <xTaskResumeAll>
 8019076:	2800      	cmp	r0, #0
 8019078:	d1c7      	bne.n	801900a <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801907a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801907e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019082:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019086:	f3bf 8f4f 	dsb	sy
 801908a:	f3bf 8f6f 	isb	sy
 801908e:	e7bc      	b.n	801900a <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8019090:	b90e      	cbnz	r6, 8019096 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8019092:	2600      	movs	r6, #0
 8019094:	e76e      	b.n	8018f74 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8019096:	f001 fa05 	bl	801a4a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801909a:	4620      	mov	r0, r4
 801909c:	f7ff fbab 	bl	80187f6 <prvGetDisinheritPriorityAfterTimeout>
 80190a0:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80190a2:	68a0      	ldr	r0, [r4, #8]
 80190a4:	f000 ff0c 	bl	8019ec0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80190a8:	f001 fa1e 	bl	801a4e8 <vPortExitCritical>
 80190ac:	e7f1      	b.n	8019092 <xQueueSemaphoreTake+0x18a>

080190ae <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80190ae:	b180      	cbz	r0, 80190d2 <xQueueTakeMutexRecursive+0x24>
	{
 80190b0:	b570      	push	{r4, r5, r6, lr}
 80190b2:	460c      	mov	r4, r1
 80190b4:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80190b6:	6886      	ldr	r6, [r0, #8]
 80190b8:	f000 fe58 	bl	8019d6c <xTaskGetCurrentTaskHandle>
 80190bc:	4286      	cmp	r6, r0
 80190be:	d011      	beq.n	80190e4 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80190c0:	4621      	mov	r1, r4
 80190c2:	4628      	mov	r0, r5
 80190c4:	f7ff ff20 	bl	8018f08 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80190c8:	b180      	cbz	r0, 80190ec <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80190ca:	68eb      	ldr	r3, [r5, #12]
 80190cc:	3301      	adds	r3, #1
 80190ce:	60eb      	str	r3, [r5, #12]
		return xReturn;
 80190d0:	e00c      	b.n	80190ec <xQueueTakeMutexRecursive+0x3e>
 80190d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190d6:	f383 8811 	msr	BASEPRI, r3
 80190da:	f3bf 8f6f 	isb	sy
 80190de:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80190e2:	e7fe      	b.n	80190e2 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80190e4:	68eb      	ldr	r3, [r5, #12]
 80190e6:	3301      	adds	r3, #1
 80190e8:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80190ea:	2001      	movs	r0, #1
	}
 80190ec:	bd70      	pop	{r4, r5, r6, pc}

080190ee <xQueuePeek>:
{
 80190ee:	b570      	push	{r4, r5, r6, lr}
 80190f0:	b084      	sub	sp, #16
 80190f2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80190f4:	b190      	cbz	r0, 801911c <xQueuePeek+0x2e>
 80190f6:	460e      	mov	r6, r1
 80190f8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80190fa:	b1c1      	cbz	r1, 801912e <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80190fc:	f000 fe3c 	bl	8019d78 <xTaskGetSchedulerState>
 8019100:	4605      	mov	r5, r0
 8019102:	bb00      	cbnz	r0, 8019146 <xQueuePeek+0x58>
 8019104:	9b01      	ldr	r3, [sp, #4]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d05e      	beq.n	80191c8 <xQueuePeek+0xda>
 801910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801910e:	f383 8811 	msr	BASEPRI, r3
 8019112:	f3bf 8f6f 	isb	sy
 8019116:	f3bf 8f4f 	dsb	sy
 801911a:	e7fe      	b.n	801911a <xQueuePeek+0x2c>
 801911c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019120:	f383 8811 	msr	BASEPRI, r3
 8019124:	f3bf 8f6f 	isb	sy
 8019128:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 801912c:	e7fe      	b.n	801912c <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801912e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019130:	2b00      	cmp	r3, #0
 8019132:	d0e3      	beq.n	80190fc <xQueuePeek+0xe>
 8019134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019138:	f383 8811 	msr	BASEPRI, r3
 801913c:	f3bf 8f6f 	isb	sy
 8019140:	f3bf 8f4f 	dsb	sy
 8019144:	e7fe      	b.n	8019144 <xQueuePeek+0x56>
 8019146:	2500      	movs	r5, #0
 8019148:	e03e      	b.n	80191c8 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 801914a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801914c:	4631      	mov	r1, r6
 801914e:	4620      	mov	r0, r4
 8019150:	f7ff fbb0 	bl	80188b4 <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8019154:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019158:	b923      	cbnz	r3, 8019164 <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 801915a:	f001 f9c5 	bl	801a4e8 <vPortExitCritical>
				return pdPASS;
 801915e:	2001      	movs	r0, #1
}
 8019160:	b004      	add	sp, #16
 8019162:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019164:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019168:	f000 fd66 	bl	8019c38 <xTaskRemoveFromEventList>
 801916c:	2800      	cmp	r0, #0
 801916e:	d0f4      	beq.n	801915a <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8019170:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019178:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801917c:	f3bf 8f4f 	dsb	sy
 8019180:	f3bf 8f6f 	isb	sy
 8019184:	e7e9      	b.n	801915a <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 8019186:	f001 f9af 	bl	801a4e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801918a:	2000      	movs	r0, #0
 801918c:	e7e8      	b.n	8019160 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801918e:	a802      	add	r0, sp, #8
 8019190:	f000 fd98 	bl	8019cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019194:	2501      	movs	r5, #1
 8019196:	e021      	b.n	80191dc <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8019198:	2300      	movs	r3, #0
 801919a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801919e:	e029      	b.n	80191f4 <xQueuePeek+0x106>
 80191a0:	2300      	movs	r3, #0
 80191a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80191a6:	e02b      	b.n	8019200 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 80191a8:	4620      	mov	r0, r4
 80191aa:	f7ff fb95 	bl	80188d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80191ae:	f000 fc1b 	bl	80199e8 <xTaskResumeAll>
 80191b2:	e009      	b.n	80191c8 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 80191b4:	4620      	mov	r0, r4
 80191b6:	f7ff fb8f 	bl	80188d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80191ba:	f000 fc15 	bl	80199e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80191be:	4620      	mov	r0, r4
 80191c0:	f7ff fb30 	bl	8018824 <prvIsQueueEmpty>
 80191c4:	2800      	cmp	r0, #0
 80191c6:	d13f      	bne.n	8019248 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 80191c8:	f001 f96c 	bl	801a4a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80191cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d1bb      	bne.n	801914a <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80191d2:	9b01      	ldr	r3, [sp, #4]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d0d6      	beq.n	8019186 <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80191d8:	2d00      	cmp	r5, #0
 80191da:	d0d8      	beq.n	801918e <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 80191dc:	f001 f984 	bl	801a4e8 <vPortExitCritical>
		vTaskSuspendAll();
 80191e0:	f000 fb68 	bl	80198b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80191e4:	f001 f95e 	bl	801a4a4 <vPortEnterCritical>
 80191e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80191ec:	b25b      	sxtb	r3, r3
 80191ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80191f2:	d0d1      	beq.n	8019198 <xQueuePeek+0xaa>
 80191f4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80191f8:	b25b      	sxtb	r3, r3
 80191fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80191fe:	d0cf      	beq.n	80191a0 <xQueuePeek+0xb2>
 8019200:	f001 f972 	bl	801a4e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019204:	a901      	add	r1, sp, #4
 8019206:	a802      	add	r0, sp, #8
 8019208:	f000 fd68 	bl	8019cdc <xTaskCheckForTimeOut>
 801920c:	2800      	cmp	r0, #0
 801920e:	d1d1      	bne.n	80191b4 <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019210:	4620      	mov	r0, r4
 8019212:	f7ff fb07 	bl	8018824 <prvIsQueueEmpty>
 8019216:	2800      	cmp	r0, #0
 8019218:	d0c6      	beq.n	80191a8 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801921a:	9901      	ldr	r1, [sp, #4]
 801921c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019220:	f000 fcd6 	bl	8019bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019224:	4620      	mov	r0, r4
 8019226:	f7ff fb57 	bl	80188d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801922a:	f000 fbdd 	bl	80199e8 <xTaskResumeAll>
 801922e:	2800      	cmp	r0, #0
 8019230:	d1ca      	bne.n	80191c8 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8019232:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801923a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801923e:	f3bf 8f4f 	dsb	sy
 8019242:	f3bf 8f6f 	isb	sy
 8019246:	e7bf      	b.n	80191c8 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8019248:	2000      	movs	r0, #0
 801924a:	e789      	b.n	8019160 <xQueuePeek+0x72>

0801924c <xQueueReceiveFromISR>:
{
 801924c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8019250:	b1b0      	cbz	r0, 8019280 <xQueueReceiveFromISR+0x34>
 8019252:	460d      	mov	r5, r1
 8019254:	4690      	mov	r8, r2
 8019256:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019258:	b1d9      	cbz	r1, 8019292 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801925a:	f001 fa49 	bl	801a6f0 <vPortValidateInterruptPriority>
	__asm volatile
 801925e:	f3ef 8711 	mrs	r7, BASEPRI
 8019262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019266:	f383 8811 	msr	BASEPRI, r3
 801926a:	f3bf 8f6f 	isb	sy
 801926e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019272:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019274:	b9ce      	cbnz	r6, 80192aa <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8019276:	2000      	movs	r0, #0
	__asm volatile
 8019278:	f387 8811 	msr	BASEPRI, r7
}
 801927c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8019280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019284:	f383 8811 	msr	BASEPRI, r3
 8019288:	f3bf 8f6f 	isb	sy
 801928c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019290:	e7fe      	b.n	8019290 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019292:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019294:	2b00      	cmp	r3, #0
 8019296:	d0e0      	beq.n	801925a <xQueueReceiveFromISR+0xe>
 8019298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801929c:	f383 8811 	msr	BASEPRI, r3
 80192a0:	f3bf 8f6f 	isb	sy
 80192a4:	f3bf 8f4f 	dsb	sy
 80192a8:	e7fe      	b.n	80192a8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80192aa:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 80192ae:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80192b2:	4629      	mov	r1, r5
 80192b4:	4620      	mov	r0, r4
 80192b6:	f7ff fafd 	bl	80188b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80192ba:	1e73      	subs	r3, r6, #1
 80192bc:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80192be:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80192c2:	d006      	beq.n	80192d2 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80192c4:	f109 0301 	add.w	r3, r9, #1
 80192c8:	b25b      	sxtb	r3, r3
 80192ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80192ce:	2001      	movs	r0, #1
 80192d0:	e7d2      	b.n	8019278 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80192d2:	6923      	ldr	r3, [r4, #16]
 80192d4:	b90b      	cbnz	r3, 80192da <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80192d6:	2001      	movs	r0, #1
 80192d8:	e7ce      	b.n	8019278 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80192da:	f104 0010 	add.w	r0, r4, #16
 80192de:	f000 fcab 	bl	8019c38 <xTaskRemoveFromEventList>
 80192e2:	b130      	cbz	r0, 80192f2 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80192e4:	f1b8 0f00 	cmp.w	r8, #0
 80192e8:	d005      	beq.n	80192f6 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80192ea:	2001      	movs	r0, #1
 80192ec:	f8c8 0000 	str.w	r0, [r8]
 80192f0:	e7c2      	b.n	8019278 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80192f2:	2001      	movs	r0, #1
 80192f4:	e7c0      	b.n	8019278 <xQueueReceiveFromISR+0x2c>
 80192f6:	2001      	movs	r0, #1
 80192f8:	e7be      	b.n	8019278 <xQueueReceiveFromISR+0x2c>

080192fa <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80192fa:	b140      	cbz	r0, 801930e <uxQueueMessagesWaiting+0x14>
{
 80192fc:	b510      	push	{r4, lr}
 80192fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019300:	f001 f8d0 	bl	801a4a4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019304:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8019306:	f001 f8ef 	bl	801a4e8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801930a:	4620      	mov	r0, r4
 801930c:	bd10      	pop	{r4, pc}
 801930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019312:	f383 8811 	msr	BASEPRI, r3
 8019316:	f3bf 8f6f 	isb	sy
 801931a:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 801931e:	e7fe      	b.n	801931e <uxQueueMessagesWaiting+0x24>

08019320 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8019320:	b108      	cbz	r0, 8019326 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019322:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019324:	4770      	bx	lr
 8019326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801932a:	f383 8811 	msr	BASEPRI, r3
 801932e:	f3bf 8f6f 	isb	sy
 8019332:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8019336:	e7fe      	b.n	8019336 <uxQueueMessagesWaitingFromISR+0x16>

08019338 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019338:	2300      	movs	r3, #0
 801933a:	2b07      	cmp	r3, #7
 801933c:	d80c      	bhi.n	8019358 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801933e:	4a07      	ldr	r2, [pc, #28]	@ (801935c <vQueueAddToRegistry+0x24>)
 8019340:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019344:	b10a      	cbz	r2, 801934a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019346:	3301      	adds	r3, #1
 8019348:	e7f7      	b.n	801933a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801934a:	4a04      	ldr	r2, [pc, #16]	@ (801935c <vQueueAddToRegistry+0x24>)
 801934c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019350:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019354:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019356:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019358:	4770      	bx	lr
 801935a:	bf00      	nop
 801935c:	2000366c 	.word	0x2000366c

08019360 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019360:	b570      	push	{r4, r5, r6, lr}
 8019362:	4604      	mov	r4, r0
 8019364:	460d      	mov	r5, r1
 8019366:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019368:	f001 f89c 	bl	801a4a4 <vPortEnterCritical>
 801936c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019370:	b25b      	sxtb	r3, r3
 8019372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019376:	d00d      	beq.n	8019394 <vQueueWaitForMessageRestricted+0x34>
 8019378:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801937c:	b25b      	sxtb	r3, r3
 801937e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019382:	d00b      	beq.n	801939c <vQueueWaitForMessageRestricted+0x3c>
 8019384:	f001 f8b0 	bl	801a4e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019388:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801938a:	b15b      	cbz	r3, 80193a4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801938c:	4620      	mov	r0, r4
 801938e:	f7ff faa3 	bl	80188d8 <prvUnlockQueue>
	}
 8019392:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8019394:	2300      	movs	r3, #0
 8019396:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801939a:	e7ed      	b.n	8019378 <vQueueWaitForMessageRestricted+0x18>
 801939c:	2300      	movs	r3, #0
 801939e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80193a2:	e7ef      	b.n	8019384 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80193a4:	4632      	mov	r2, r6
 80193a6:	4629      	mov	r1, r5
 80193a8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80193ac:	f000 fc28 	bl	8019c00 <vTaskPlaceOnEventListRestricted>
 80193b0:	e7ec      	b.n	801938c <vQueueWaitForMessageRestricted+0x2c>
	...

080193b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80193b4:	4b08      	ldr	r3, [pc, #32]	@ (80193d8 <prvResetNextTaskUnblockTime+0x24>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	b923      	cbnz	r3, 80193c6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80193bc:	4b07      	ldr	r3, [pc, #28]	@ (80193dc <prvResetNextTaskUnblockTime+0x28>)
 80193be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80193c2:	601a      	str	r2, [r3, #0]
 80193c4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80193c6:	4b04      	ldr	r3, [pc, #16]	@ (80193d8 <prvResetNextTaskUnblockTime+0x24>)
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	68db      	ldr	r3, [r3, #12]
 80193cc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80193ce:	685a      	ldr	r2, [r3, #4]
 80193d0:	4b02      	ldr	r3, [pc, #8]	@ (80193dc <prvResetNextTaskUnblockTime+0x28>)
 80193d2:	601a      	str	r2, [r3, #0]
	}
}
 80193d4:	4770      	bx	lr
 80193d6:	bf00      	nop
 80193d8:	2000371c 	.word	0x2000371c
 80193dc:	200036b4 	.word	0x200036b4

080193e0 <prvInitialiseNewTask>:
{
 80193e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193e4:	4680      	mov	r8, r0
 80193e6:	460d      	mov	r5, r1
 80193e8:	4617      	mov	r7, r2
 80193ea:	4699      	mov	r9, r3
 80193ec:	9e08      	ldr	r6, [sp, #32]
 80193ee:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80193f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80193f4:	0092      	lsls	r2, r2, #2
 80193f6:	21a5      	movs	r1, #165	@ 0xa5
 80193f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80193fa:	f013 fa41 	bl	802c880 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80193fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019400:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8019404:	3a01      	subs	r2, #1
 8019406:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801940a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 801940e:	2d00      	cmp	r5, #0
 8019410:	d061      	beq.n	80194d6 <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019412:	f04f 0c00 	mov.w	ip, #0
 8019416:	f1bc 0f0f 	cmp.w	ip, #15
 801941a:	d809      	bhi.n	8019430 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801941c:	f815 300c 	ldrb.w	r3, [r5, ip]
 8019420:	eb04 020c 	add.w	r2, r4, ip
 8019424:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8019428:	b113      	cbz	r3, 8019430 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801942a:	f10c 0c01 	add.w	ip, ip, #1
 801942e:	e7f2      	b.n	8019416 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019430:	2300      	movs	r3, #0
 8019432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019436:	2e37      	cmp	r6, #55	@ 0x37
 8019438:	d900      	bls.n	801943c <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801943a:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 801943c:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801943e:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019440:	2500      	movs	r5, #0
 8019442:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019444:	1d20      	adds	r0, r4, #4
 8019446:	f7ff f99c 	bl	8018782 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801944a:	f104 0018 	add.w	r0, r4, #24
 801944e:	f7ff f998 	bl	8018782 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019452:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019454:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8019458:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801945a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 801945c:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019460:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019464:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8019468:	4629      	mov	r1, r5
 801946a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801946e:	f013 fa07 	bl	802c880 <memset>
 8019472:	4b1b      	ldr	r3, [pc, #108]	@ (80194e0 <prvInitialiseNewTask+0x100>)
 8019474:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8019476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801947a:	6622      	str	r2, [r4, #96]	@ 0x60
 801947c:	33d0      	adds	r3, #208	@ 0xd0
 801947e:	6663      	str	r3, [r4, #100]	@ 0x64
 8019480:	2201      	movs	r2, #1
 8019482:	2300      	movs	r3, #0
 8019484:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8019488:	f243 330e 	movw	r3, #13070	@ 0x330e
 801948c:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8019490:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8019494:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8019498:	f241 2334 	movw	r3, #4660	@ 0x1234
 801949c:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 80194a0:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 80194a4:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 80194a8:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 80194ac:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 80194b0:	2305      	movs	r3, #5
 80194b2:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 80194b6:	230b      	movs	r3, #11
 80194b8:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80194bc:	464a      	mov	r2, r9
 80194be:	4641      	mov	r1, r8
 80194c0:	4638      	mov	r0, r7
 80194c2:	f000 ffc3 	bl	801a44c <pxPortInitialiseStack>
 80194c6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80194c8:	f1ba 0f00 	cmp.w	sl, #0
 80194cc:	d001      	beq.n	80194d2 <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80194ce:	f8ca 4000 	str.w	r4, [sl]
}
 80194d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80194d6:	2300      	movs	r3, #0
 80194d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80194dc:	e7ab      	b.n	8019436 <prvInitialiseNewTask+0x56>
 80194de:	bf00      	nop
 80194e0:	20019ee4 	.word	0x20019ee4

080194e4 <prvInitialiseTaskLists>:
{
 80194e4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80194e6:	2400      	movs	r4, #0
 80194e8:	e007      	b.n	80194fa <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80194ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80194ee:	0093      	lsls	r3, r2, #2
 80194f0:	480e      	ldr	r0, [pc, #56]	@ (801952c <prvInitialiseTaskLists+0x48>)
 80194f2:	4418      	add	r0, r3
 80194f4:	f7ff f93a 	bl	801876c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80194f8:	3401      	adds	r4, #1
 80194fa:	2c37      	cmp	r4, #55	@ 0x37
 80194fc:	d9f5      	bls.n	80194ea <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80194fe:	4d0c      	ldr	r5, [pc, #48]	@ (8019530 <prvInitialiseTaskLists+0x4c>)
 8019500:	4628      	mov	r0, r5
 8019502:	f7ff f933 	bl	801876c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019506:	4c0b      	ldr	r4, [pc, #44]	@ (8019534 <prvInitialiseTaskLists+0x50>)
 8019508:	4620      	mov	r0, r4
 801950a:	f7ff f92f 	bl	801876c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801950e:	480a      	ldr	r0, [pc, #40]	@ (8019538 <prvInitialiseTaskLists+0x54>)
 8019510:	f7ff f92c 	bl	801876c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8019514:	4809      	ldr	r0, [pc, #36]	@ (801953c <prvInitialiseTaskLists+0x58>)
 8019516:	f7ff f929 	bl	801876c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801951a:	4809      	ldr	r0, [pc, #36]	@ (8019540 <prvInitialiseTaskLists+0x5c>)
 801951c:	f7ff f926 	bl	801876c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8019520:	4b08      	ldr	r3, [pc, #32]	@ (8019544 <prvInitialiseTaskLists+0x60>)
 8019522:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019524:	4b08      	ldr	r3, [pc, #32]	@ (8019548 <prvInitialiseTaskLists+0x64>)
 8019526:	601c      	str	r4, [r3, #0]
}
 8019528:	bd38      	pop	{r3, r4, r5, pc}
 801952a:	bf00      	nop
 801952c:	20003748 	.word	0x20003748
 8019530:	20003734 	.word	0x20003734
 8019534:	20003720 	.word	0x20003720
 8019538:	20003704 	.word	0x20003704
 801953c:	200036f0 	.word	0x200036f0
 8019540:	200036d8 	.word	0x200036d8
 8019544:	2000371c 	.word	0x2000371c
 8019548:	20003718 	.word	0x20003718

0801954c <prvAddNewTaskToReadyList>:
{
 801954c:	b510      	push	{r4, lr}
 801954e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019550:	f000 ffa8 	bl	801a4a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8019554:	4a22      	ldr	r2, [pc, #136]	@ (80195e0 <prvAddNewTaskToReadyList+0x94>)
 8019556:	6813      	ldr	r3, [r2, #0]
 8019558:	3301      	adds	r3, #1
 801955a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801955c:	4b21      	ldr	r3, [pc, #132]	@ (80195e4 <prvAddNewTaskToReadyList+0x98>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	b15b      	cbz	r3, 801957a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8019562:	4b21      	ldr	r3, [pc, #132]	@ (80195e8 <prvAddNewTaskToReadyList+0x9c>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	b96b      	cbnz	r3, 8019584 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019568:	4b1e      	ldr	r3, [pc, #120]	@ (80195e4 <prvAddNewTaskToReadyList+0x98>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801956e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019570:	429a      	cmp	r2, r3
 8019572:	d807      	bhi.n	8019584 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8019574:	4b1b      	ldr	r3, [pc, #108]	@ (80195e4 <prvAddNewTaskToReadyList+0x98>)
 8019576:	601c      	str	r4, [r3, #0]
 8019578:	e004      	b.n	8019584 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 801957a:	4b1a      	ldr	r3, [pc, #104]	@ (80195e4 <prvAddNewTaskToReadyList+0x98>)
 801957c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801957e:	6813      	ldr	r3, [r2, #0]
 8019580:	2b01      	cmp	r3, #1
 8019582:	d029      	beq.n	80195d8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8019584:	4a19      	ldr	r2, [pc, #100]	@ (80195ec <prvAddNewTaskToReadyList+0xa0>)
 8019586:	6813      	ldr	r3, [r2, #0]
 8019588:	3301      	adds	r3, #1
 801958a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801958c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801958e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019590:	4b17      	ldr	r3, [pc, #92]	@ (80195f0 <prvAddNewTaskToReadyList+0xa4>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	4298      	cmp	r0, r3
 8019596:	d901      	bls.n	801959c <prvAddNewTaskToReadyList+0x50>
 8019598:	4b15      	ldr	r3, [pc, #84]	@ (80195f0 <prvAddNewTaskToReadyList+0xa4>)
 801959a:	6018      	str	r0, [r3, #0]
 801959c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80195a0:	1d21      	adds	r1, r4, #4
 80195a2:	4b14      	ldr	r3, [pc, #80]	@ (80195f4 <prvAddNewTaskToReadyList+0xa8>)
 80195a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195a8:	f7ff f8ee 	bl	8018788 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80195ac:	f000 ff9c 	bl	801a4e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80195b0:	4b0d      	ldr	r3, [pc, #52]	@ (80195e8 <prvAddNewTaskToReadyList+0x9c>)
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	b17b      	cbz	r3, 80195d6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80195b6:	4b0b      	ldr	r3, [pc, #44]	@ (80195e4 <prvAddNewTaskToReadyList+0x98>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80195bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80195be:	429a      	cmp	r2, r3
 80195c0:	d209      	bcs.n	80195d6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80195c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80195c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80195ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80195ce:	f3bf 8f4f 	dsb	sy
 80195d2:	f3bf 8f6f 	isb	sy
}
 80195d6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80195d8:	f7ff ff84 	bl	80194e4 <prvInitialiseTaskLists>
 80195dc:	e7d2      	b.n	8019584 <prvAddNewTaskToReadyList+0x38>
 80195de:	bf00      	nop
 80195e0:	200036d4 	.word	0x200036d4
 80195e4:	20003ba8 	.word	0x20003ba8
 80195e8:	200036c8 	.word	0x200036c8
 80195ec:	200036b8 	.word	0x200036b8
 80195f0:	200036cc 	.word	0x200036cc
 80195f4:	20003748 	.word	0x20003748

080195f8 <prvDeleteTCB>:
	{
 80195f8:	b510      	push	{r4, lr}
 80195fa:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80195fc:	3058      	adds	r0, #88	@ 0x58
 80195fe:	f014 fae1 	bl	802dbc4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019602:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8019606:	b163      	cbz	r3, 8019622 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019608:	2b01      	cmp	r3, #1
 801960a:	d011      	beq.n	8019630 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801960c:	2b02      	cmp	r3, #2
 801960e:	d00e      	beq.n	801962e <prvDeleteTCB+0x36>
 8019610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019614:	f383 8811 	msr	BASEPRI, r3
 8019618:	f3bf 8f6f 	isb	sy
 801961c:	f3bf 8f4f 	dsb	sy
 8019620:	e7fe      	b.n	8019620 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8019622:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019624:	f001 f97a 	bl	801a91c <vPortFree>
				vPortFree( pxTCB );
 8019628:	4620      	mov	r0, r4
 801962a:	f001 f977 	bl	801a91c <vPortFree>
	}
 801962e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8019630:	4620      	mov	r0, r4
 8019632:	f001 f973 	bl	801a91c <vPortFree>
 8019636:	e7fa      	b.n	801962e <prvDeleteTCB+0x36>

08019638 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019638:	4b0f      	ldr	r3, [pc, #60]	@ (8019678 <prvCheckTasksWaitingTermination+0x40>)
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	b1d3      	cbz	r3, 8019674 <prvCheckTasksWaitingTermination+0x3c>
{
 801963e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8019640:	f000 ff30 	bl	801a4a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019644:	4b0d      	ldr	r3, [pc, #52]	@ (801967c <prvCheckTasksWaitingTermination+0x44>)
 8019646:	68db      	ldr	r3, [r3, #12]
 8019648:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801964a:	1d20      	adds	r0, r4, #4
 801964c:	f7ff f8c0 	bl	80187d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019650:	4a0b      	ldr	r2, [pc, #44]	@ (8019680 <prvCheckTasksWaitingTermination+0x48>)
 8019652:	6813      	ldr	r3, [r2, #0]
 8019654:	3b01      	subs	r3, #1
 8019656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019658:	4a07      	ldr	r2, [pc, #28]	@ (8019678 <prvCheckTasksWaitingTermination+0x40>)
 801965a:	6813      	ldr	r3, [r2, #0]
 801965c:	3b01      	subs	r3, #1
 801965e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8019660:	f000 ff42 	bl	801a4e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8019664:	4620      	mov	r0, r4
 8019666:	f7ff ffc7 	bl	80195f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801966a:	4b03      	ldr	r3, [pc, #12]	@ (8019678 <prvCheckTasksWaitingTermination+0x40>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d1e6      	bne.n	8019640 <prvCheckTasksWaitingTermination+0x8>
}
 8019672:	bd10      	pop	{r4, pc}
 8019674:	4770      	bx	lr
 8019676:	bf00      	nop
 8019678:	200036ec 	.word	0x200036ec
 801967c:	200036f0 	.word	0x200036f0
 8019680:	200036d4 	.word	0x200036d4

08019684 <prvIdleTask>:
{
 8019684:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8019686:	f7ff ffd7 	bl	8019638 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801968a:	4b07      	ldr	r3, [pc, #28]	@ (80196a8 <prvIdleTask+0x24>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	2b01      	cmp	r3, #1
 8019690:	d9f9      	bls.n	8019686 <prvIdleTask+0x2>
				taskYIELD();
 8019692:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801969a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801969e:	f3bf 8f4f 	dsb	sy
 80196a2:	f3bf 8f6f 	isb	sy
 80196a6:	e7ee      	b.n	8019686 <prvIdleTask+0x2>
 80196a8:	20003748 	.word	0x20003748

080196ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80196ac:	b570      	push	{r4, r5, r6, lr}
 80196ae:	4604      	mov	r4, r0
 80196b0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80196b2:	4b17      	ldr	r3, [pc, #92]	@ (8019710 <prvAddCurrentTaskToDelayedList+0x64>)
 80196b4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80196b6:	4b17      	ldr	r3, [pc, #92]	@ (8019714 <prvAddCurrentTaskToDelayedList+0x68>)
 80196b8:	6818      	ldr	r0, [r3, #0]
 80196ba:	3004      	adds	r0, #4
 80196bc:	f7ff f888 	bl	80187d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80196c0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80196c4:	d00d      	beq.n	80196e2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80196c6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80196c8:	4b12      	ldr	r3, [pc, #72]	@ (8019714 <prvAddCurrentTaskToDelayedList+0x68>)
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80196ce:	42a6      	cmp	r6, r4
 80196d0:	d910      	bls.n	80196f4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80196d2:	4b11      	ldr	r3, [pc, #68]	@ (8019718 <prvAddCurrentTaskToDelayedList+0x6c>)
 80196d4:	6818      	ldr	r0, [r3, #0]
 80196d6:	4b0f      	ldr	r3, [pc, #60]	@ (8019714 <prvAddCurrentTaskToDelayedList+0x68>)
 80196d8:	6819      	ldr	r1, [r3, #0]
 80196da:	3104      	adds	r1, #4
 80196dc:	f7ff f85f 	bl	801879e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80196e0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80196e2:	2d00      	cmp	r5, #0
 80196e4:	d0ef      	beq.n	80196c6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80196e6:	4b0b      	ldr	r3, [pc, #44]	@ (8019714 <prvAddCurrentTaskToDelayedList+0x68>)
 80196e8:	6819      	ldr	r1, [r3, #0]
 80196ea:	3104      	adds	r1, #4
 80196ec:	480b      	ldr	r0, [pc, #44]	@ (801971c <prvAddCurrentTaskToDelayedList+0x70>)
 80196ee:	f7ff f84b 	bl	8018788 <vListInsertEnd>
 80196f2:	e7f5      	b.n	80196e0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80196f4:	4b0a      	ldr	r3, [pc, #40]	@ (8019720 <prvAddCurrentTaskToDelayedList+0x74>)
 80196f6:	6818      	ldr	r0, [r3, #0]
 80196f8:	4b06      	ldr	r3, [pc, #24]	@ (8019714 <prvAddCurrentTaskToDelayedList+0x68>)
 80196fa:	6819      	ldr	r1, [r3, #0]
 80196fc:	3104      	adds	r1, #4
 80196fe:	f7ff f84e 	bl	801879e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019702:	4b08      	ldr	r3, [pc, #32]	@ (8019724 <prvAddCurrentTaskToDelayedList+0x78>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	42a3      	cmp	r3, r4
 8019708:	d9ea      	bls.n	80196e0 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 801970a:	4b06      	ldr	r3, [pc, #24]	@ (8019724 <prvAddCurrentTaskToDelayedList+0x78>)
 801970c:	601c      	str	r4, [r3, #0]
}
 801970e:	e7e7      	b.n	80196e0 <prvAddCurrentTaskToDelayedList+0x34>
 8019710:	200036d0 	.word	0x200036d0
 8019714:	20003ba8 	.word	0x20003ba8
 8019718:	20003718 	.word	0x20003718
 801971c:	200036d8 	.word	0x200036d8
 8019720:	2000371c 	.word	0x2000371c
 8019724:	200036b4 	.word	0x200036b4

08019728 <xTaskCreateStatic>:
	{
 8019728:	b530      	push	{r4, r5, lr}
 801972a:	b087      	sub	sp, #28
 801972c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 801972e:	b18c      	cbz	r4, 8019754 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8019730:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019732:	b1c5      	cbz	r5, 8019766 <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8019734:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8019738:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801973a:	9d04      	ldr	r5, [sp, #16]
 801973c:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8019740:	d01a      	beq.n	8019778 <xTaskCreateStatic+0x50>
 8019742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019746:	f383 8811 	msr	BASEPRI, r3
 801974a:	f3bf 8f6f 	isb	sy
 801974e:	f3bf 8f4f 	dsb	sy
 8019752:	e7fe      	b.n	8019752 <xTaskCreateStatic+0x2a>
 8019754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019758:	f383 8811 	msr	BASEPRI, r3
 801975c:	f3bf 8f6f 	isb	sy
 8019760:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8019764:	e7fe      	b.n	8019764 <xTaskCreateStatic+0x3c>
 8019766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801976a:	f383 8811 	msr	BASEPRI, r3
 801976e:	f3bf 8f6f 	isb	sy
 8019772:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8019776:	e7fe      	b.n	8019776 <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019778:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801977a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801977c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801977e:	2402      	movs	r4, #2
 8019780:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019784:	2400      	movs	r4, #0
 8019786:	9403      	str	r4, [sp, #12]
 8019788:	9502      	str	r5, [sp, #8]
 801978a:	ac05      	add	r4, sp, #20
 801978c:	9401      	str	r4, [sp, #4]
 801978e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019790:	9400      	str	r4, [sp, #0]
 8019792:	f7ff fe25 	bl	80193e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019796:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019798:	f7ff fed8 	bl	801954c <prvAddNewTaskToReadyList>
	}
 801979c:	9805      	ldr	r0, [sp, #20]
 801979e:	b007      	add	sp, #28
 80197a0:	bd30      	pop	{r4, r5, pc}

080197a2 <xTaskCreate>:
	{
 80197a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197a6:	b085      	sub	sp, #20
 80197a8:	4607      	mov	r7, r0
 80197aa:	4688      	mov	r8, r1
 80197ac:	4614      	mov	r4, r2
 80197ae:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80197b0:	0090      	lsls	r0, r2, #2
 80197b2:	f001 f831 	bl	801a818 <pvPortMalloc>
			if( pxStack != NULL )
 80197b6:	b310      	cbz	r0, 80197fe <xTaskCreate+0x5c>
 80197b8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80197ba:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80197be:	f001 f82b 	bl	801a818 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80197c2:	4605      	mov	r5, r0
 80197c4:	b1a8      	cbz	r0, 80197f2 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80197c6:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80197ca:	2300      	movs	r3, #0
 80197cc:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80197d0:	9303      	str	r3, [sp, #12]
 80197d2:	9002      	str	r0, [sp, #8]
 80197d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80197d6:	9301      	str	r3, [sp, #4]
 80197d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80197da:	9300      	str	r3, [sp, #0]
 80197dc:	4633      	mov	r3, r6
 80197de:	4622      	mov	r2, r4
 80197e0:	4641      	mov	r1, r8
 80197e2:	4638      	mov	r0, r7
 80197e4:	f7ff fdfc 	bl	80193e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80197e8:	4628      	mov	r0, r5
 80197ea:	f7ff feaf 	bl	801954c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80197ee:	2001      	movs	r0, #1
 80197f0:	e007      	b.n	8019802 <xTaskCreate+0x60>
					vPortFree( pxStack );
 80197f2:	4648      	mov	r0, r9
 80197f4:	f001 f892 	bl	801a91c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80197f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197fc:	e001      	b.n	8019802 <xTaskCreate+0x60>
 80197fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8019802:	b005      	add	sp, #20
 8019804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019808 <vTaskStartScheduler>:
{
 8019808:	b510      	push	{r4, lr}
 801980a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801980c:	2400      	movs	r4, #0
 801980e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019810:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019812:	aa07      	add	r2, sp, #28
 8019814:	a906      	add	r1, sp, #24
 8019816:	a805      	add	r0, sp, #20
 8019818:	f7fe ff90 	bl	801873c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801981c:	9b05      	ldr	r3, [sp, #20]
 801981e:	9302      	str	r3, [sp, #8]
 8019820:	9b06      	ldr	r3, [sp, #24]
 8019822:	9301      	str	r3, [sp, #4]
 8019824:	9400      	str	r4, [sp, #0]
 8019826:	4623      	mov	r3, r4
 8019828:	9a07      	ldr	r2, [sp, #28]
 801982a:	491a      	ldr	r1, [pc, #104]	@ (8019894 <vTaskStartScheduler+0x8c>)
 801982c:	481a      	ldr	r0, [pc, #104]	@ (8019898 <vTaskStartScheduler+0x90>)
 801982e:	f7ff ff7b 	bl	8019728 <xTaskCreateStatic>
 8019832:	4b1a      	ldr	r3, [pc, #104]	@ (801989c <vTaskStartScheduler+0x94>)
 8019834:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8019836:	b1e8      	cbz	r0, 8019874 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8019838:	f000 fc0c 	bl	801a054 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801983c:	2801      	cmp	r0, #1
 801983e:	d11a      	bne.n	8019876 <vTaskStartScheduler+0x6e>
 8019840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019844:	f383 8811 	msr	BASEPRI, r3
 8019848:	f3bf 8f6f 	isb	sy
 801984c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019850:	4b13      	ldr	r3, [pc, #76]	@ (80198a0 <vTaskStartScheduler+0x98>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	3358      	adds	r3, #88	@ 0x58
 8019856:	4a13      	ldr	r2, [pc, #76]	@ (80198a4 <vTaskStartScheduler+0x9c>)
 8019858:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801985a:	4b13      	ldr	r3, [pc, #76]	@ (80198a8 <vTaskStartScheduler+0xa0>)
 801985c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019862:	4b12      	ldr	r3, [pc, #72]	@ (80198ac <vTaskStartScheduler+0xa4>)
 8019864:	2201      	movs	r2, #1
 8019866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019868:	4b11      	ldr	r3, [pc, #68]	@ (80198b0 <vTaskStartScheduler+0xa8>)
 801986a:	2200      	movs	r2, #0
 801986c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801986e:	f000 feb3 	bl	801a5d8 <xPortStartScheduler>
 8019872:	e003      	b.n	801987c <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 8019874:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019876:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801987a:	d001      	beq.n	8019880 <vTaskStartScheduler+0x78>
}
 801987c:	b008      	add	sp, #32
 801987e:	bd10      	pop	{r4, pc}
 8019880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019884:	f383 8811 	msr	BASEPRI, r3
 8019888:	f3bf 8f6f 	isb	sy
 801988c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019890:	e7fe      	b.n	8019890 <vTaskStartScheduler+0x88>
 8019892:	bf00      	nop
 8019894:	08038dc4 	.word	0x08038dc4
 8019898:	08019685 	.word	0x08019685
 801989c:	200036b0 	.word	0x200036b0
 80198a0:	20003ba8 	.word	0x20003ba8
 80198a4:	200002d8 	.word	0x200002d8
 80198a8:	200036b4 	.word	0x200036b4
 80198ac:	200036c8 	.word	0x200036c8
 80198b0:	200036d0 	.word	0x200036d0

080198b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80198b4:	4a02      	ldr	r2, [pc, #8]	@ (80198c0 <vTaskSuspendAll+0xc>)
 80198b6:	6813      	ldr	r3, [r2, #0]
 80198b8:	3301      	adds	r3, #1
 80198ba:	6013      	str	r3, [r2, #0]
}
 80198bc:	4770      	bx	lr
 80198be:	bf00      	nop
 80198c0:	200036ac 	.word	0x200036ac

080198c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80198c4:	4b01      	ldr	r3, [pc, #4]	@ (80198cc <xTaskGetTickCount+0x8>)
 80198c6:	6818      	ldr	r0, [r3, #0]
}
 80198c8:	4770      	bx	lr
 80198ca:	bf00      	nop
 80198cc:	200036d0 	.word	0x200036d0

080198d0 <xTaskIncrementTick>:
{
 80198d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80198d2:	4b3a      	ldr	r3, [pc, #232]	@ (80199bc <xTaskIncrementTick+0xec>)
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d169      	bne.n	80199ae <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80198da:	4b39      	ldr	r3, [pc, #228]	@ (80199c0 <xTaskIncrementTick+0xf0>)
 80198dc:	681d      	ldr	r5, [r3, #0]
 80198de:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80198e0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80198e2:	b9c5      	cbnz	r5, 8019916 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80198e4:	4b37      	ldr	r3, [pc, #220]	@ (80199c4 <xTaskIncrementTick+0xf4>)
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	b143      	cbz	r3, 80198fe <xTaskIncrementTick+0x2e>
 80198ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80198f0:	f383 8811 	msr	BASEPRI, r3
 80198f4:	f3bf 8f6f 	isb	sy
 80198f8:	f3bf 8f4f 	dsb	sy
 80198fc:	e7fe      	b.n	80198fc <xTaskIncrementTick+0x2c>
 80198fe:	4a31      	ldr	r2, [pc, #196]	@ (80199c4 <xTaskIncrementTick+0xf4>)
 8019900:	6811      	ldr	r1, [r2, #0]
 8019902:	4b31      	ldr	r3, [pc, #196]	@ (80199c8 <xTaskIncrementTick+0xf8>)
 8019904:	6818      	ldr	r0, [r3, #0]
 8019906:	6010      	str	r0, [r2, #0]
 8019908:	6019      	str	r1, [r3, #0]
 801990a:	4a30      	ldr	r2, [pc, #192]	@ (80199cc <xTaskIncrementTick+0xfc>)
 801990c:	6813      	ldr	r3, [r2, #0]
 801990e:	3301      	adds	r3, #1
 8019910:	6013      	str	r3, [r2, #0]
 8019912:	f7ff fd4f 	bl	80193b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019916:	4b2e      	ldr	r3, [pc, #184]	@ (80199d0 <xTaskIncrementTick+0x100>)
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	42ab      	cmp	r3, r5
 801991c:	d93d      	bls.n	801999a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 801991e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019920:	4b2c      	ldr	r3, [pc, #176]	@ (80199d4 <xTaskIncrementTick+0x104>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019926:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801992a:	009a      	lsls	r2, r3, #2
 801992c:	4b2a      	ldr	r3, [pc, #168]	@ (80199d8 <xTaskIncrementTick+0x108>)
 801992e:	589b      	ldr	r3, [r3, r2]
 8019930:	2b01      	cmp	r3, #1
 8019932:	d900      	bls.n	8019936 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8019934:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8019936:	4b29      	ldr	r3, [pc, #164]	@ (80199dc <xTaskIncrementTick+0x10c>)
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d03c      	beq.n	80199b8 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 801993e:	2701      	movs	r7, #1
	return xSwitchRequired;
 8019940:	e03a      	b.n	80199b8 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8019942:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019944:	4b1f      	ldr	r3, [pc, #124]	@ (80199c4 <xTaskIncrementTick+0xf4>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	b343      	cbz	r3, 801999e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801994c:	4b1d      	ldr	r3, [pc, #116]	@ (80199c4 <xTaskIncrementTick+0xf4>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	68db      	ldr	r3, [r3, #12]
 8019952:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019954:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8019956:	429d      	cmp	r5, r3
 8019958:	d326      	bcc.n	80199a8 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801995a:	1d26      	adds	r6, r4, #4
 801995c:	4630      	mov	r0, r6
 801995e:	f7fe ff37 	bl	80187d0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019962:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019964:	b11b      	cbz	r3, 801996e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019966:	f104 0018 	add.w	r0, r4, #24
 801996a:	f7fe ff31 	bl	80187d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801996e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019970:	4a1b      	ldr	r2, [pc, #108]	@ (80199e0 <xTaskIncrementTick+0x110>)
 8019972:	6812      	ldr	r2, [r2, #0]
 8019974:	4293      	cmp	r3, r2
 8019976:	d901      	bls.n	801997c <xTaskIncrementTick+0xac>
 8019978:	4a19      	ldr	r2, [pc, #100]	@ (80199e0 <xTaskIncrementTick+0x110>)
 801997a:	6013      	str	r3, [r2, #0]
 801997c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019980:	009a      	lsls	r2, r3, #2
 8019982:	4631      	mov	r1, r6
 8019984:	4814      	ldr	r0, [pc, #80]	@ (80199d8 <xTaskIncrementTick+0x108>)
 8019986:	4410      	add	r0, r2
 8019988:	f7fe fefe 	bl	8018788 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801998c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801998e:	4b11      	ldr	r3, [pc, #68]	@ (80199d4 <xTaskIncrementTick+0x104>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019994:	429a      	cmp	r2, r3
 8019996:	d2d4      	bcs.n	8019942 <xTaskIncrementTick+0x72>
 8019998:	e7d4      	b.n	8019944 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 801999a:	2700      	movs	r7, #0
 801999c:	e7d2      	b.n	8019944 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801999e:	4b0c      	ldr	r3, [pc, #48]	@ (80199d0 <xTaskIncrementTick+0x100>)
 80199a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80199a4:	601a      	str	r2, [r3, #0]
					break;
 80199a6:	e7bb      	b.n	8019920 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80199a8:	4a09      	ldr	r2, [pc, #36]	@ (80199d0 <xTaskIncrementTick+0x100>)
 80199aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80199ac:	e7b8      	b.n	8019920 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80199ae:	4a0d      	ldr	r2, [pc, #52]	@ (80199e4 <xTaskIncrementTick+0x114>)
 80199b0:	6813      	ldr	r3, [r2, #0]
 80199b2:	3301      	adds	r3, #1
 80199b4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80199b6:	2700      	movs	r7, #0
}
 80199b8:	4638      	mov	r0, r7
 80199ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199bc:	200036ac 	.word	0x200036ac
 80199c0:	200036d0 	.word	0x200036d0
 80199c4:	2000371c 	.word	0x2000371c
 80199c8:	20003718 	.word	0x20003718
 80199cc:	200036bc 	.word	0x200036bc
 80199d0:	200036b4 	.word	0x200036b4
 80199d4:	20003ba8 	.word	0x20003ba8
 80199d8:	20003748 	.word	0x20003748
 80199dc:	200036c0 	.word	0x200036c0
 80199e0:	200036cc 	.word	0x200036cc
 80199e4:	200036c4 	.word	0x200036c4

080199e8 <xTaskResumeAll>:
{
 80199e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80199ea:	4b35      	ldr	r3, [pc, #212]	@ (8019ac0 <xTaskResumeAll+0xd8>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	b943      	cbnz	r3, 8019a02 <xTaskResumeAll+0x1a>
 80199f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199f4:	f383 8811 	msr	BASEPRI, r3
 80199f8:	f3bf 8f6f 	isb	sy
 80199fc:	f3bf 8f4f 	dsb	sy
 8019a00:	e7fe      	b.n	8019a00 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8019a02:	f000 fd4f 	bl	801a4a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8019a06:	4b2e      	ldr	r3, [pc, #184]	@ (8019ac0 <xTaskResumeAll+0xd8>)
 8019a08:	681a      	ldr	r2, [r3, #0]
 8019a0a:	3a01      	subs	r2, #1
 8019a0c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d14f      	bne.n	8019ab4 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019a14:	4b2b      	ldr	r3, [pc, #172]	@ (8019ac4 <xTaskResumeAll+0xdc>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	b90b      	cbnz	r3, 8019a1e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8019a1a:	2400      	movs	r4, #0
 8019a1c:	e04b      	b.n	8019ab6 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8019a1e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019a20:	4b29      	ldr	r3, [pc, #164]	@ (8019ac8 <xTaskResumeAll+0xe0>)
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	b31b      	cbz	r3, 8019a6e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a26:	4b28      	ldr	r3, [pc, #160]	@ (8019ac8 <xTaskResumeAll+0xe0>)
 8019a28:	68db      	ldr	r3, [r3, #12]
 8019a2a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019a2c:	f104 0018 	add.w	r0, r4, #24
 8019a30:	f7fe fece 	bl	80187d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019a34:	1d25      	adds	r5, r4, #4
 8019a36:	4628      	mov	r0, r5
 8019a38:	f7fe feca 	bl	80187d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019a3c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019a3e:	4b23      	ldr	r3, [pc, #140]	@ (8019acc <xTaskResumeAll+0xe4>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	4298      	cmp	r0, r3
 8019a44:	d901      	bls.n	8019a4a <xTaskResumeAll+0x62>
 8019a46:	4b21      	ldr	r3, [pc, #132]	@ (8019acc <xTaskResumeAll+0xe4>)
 8019a48:	6018      	str	r0, [r3, #0]
 8019a4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019a4e:	4629      	mov	r1, r5
 8019a50:	4b1f      	ldr	r3, [pc, #124]	@ (8019ad0 <xTaskResumeAll+0xe8>)
 8019a52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019a56:	f7fe fe97 	bl	8018788 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019a5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8019ad4 <xTaskResumeAll+0xec>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d3dc      	bcc.n	8019a20 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8019a66:	4b1c      	ldr	r3, [pc, #112]	@ (8019ad8 <xTaskResumeAll+0xf0>)
 8019a68:	2201      	movs	r2, #1
 8019a6a:	601a      	str	r2, [r3, #0]
 8019a6c:	e7d8      	b.n	8019a20 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8019a6e:	b10c      	cbz	r4, 8019a74 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8019a70:	f7ff fca0 	bl	80193b4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019a74:	4b19      	ldr	r3, [pc, #100]	@ (8019adc <xTaskResumeAll+0xf4>)
 8019a76:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8019a78:	b984      	cbnz	r4, 8019a9c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8019a7a:	4b17      	ldr	r3, [pc, #92]	@ (8019ad8 <xTaskResumeAll+0xf0>)
 8019a7c:	681c      	ldr	r4, [r3, #0]
 8019a7e:	b1d4      	cbz	r4, 8019ab6 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8019a80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019a88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019a8c:	f3bf 8f4f 	dsb	sy
 8019a90:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8019a94:	2401      	movs	r4, #1
 8019a96:	e00e      	b.n	8019ab6 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019a98:	3c01      	subs	r4, #1
 8019a9a:	d007      	beq.n	8019aac <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8019a9c:	f7ff ff18 	bl	80198d0 <xTaskIncrementTick>
 8019aa0:	2800      	cmp	r0, #0
 8019aa2:	d0f9      	beq.n	8019a98 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8019aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8019ad8 <xTaskResumeAll+0xf0>)
 8019aa6:	2201      	movs	r2, #1
 8019aa8:	601a      	str	r2, [r3, #0]
 8019aaa:	e7f5      	b.n	8019a98 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8019aac:	4b0b      	ldr	r3, [pc, #44]	@ (8019adc <xTaskResumeAll+0xf4>)
 8019aae:	2200      	movs	r2, #0
 8019ab0:	601a      	str	r2, [r3, #0]
 8019ab2:	e7e2      	b.n	8019a7a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8019ab4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019ab6:	f000 fd17 	bl	801a4e8 <vPortExitCritical>
}
 8019aba:	4620      	mov	r0, r4
 8019abc:	bd38      	pop	{r3, r4, r5, pc}
 8019abe:	bf00      	nop
 8019ac0:	200036ac 	.word	0x200036ac
 8019ac4:	200036d4 	.word	0x200036d4
 8019ac8:	20003704 	.word	0x20003704
 8019acc:	200036cc 	.word	0x200036cc
 8019ad0:	20003748 	.word	0x20003748
 8019ad4:	20003ba8 	.word	0x20003ba8
 8019ad8:	200036c0 	.word	0x200036c0
 8019adc:	200036c4 	.word	0x200036c4

08019ae0 <vTaskDelay>:
	{
 8019ae0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019ae2:	b1a8      	cbz	r0, 8019b10 <vTaskDelay+0x30>
 8019ae4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8019ae6:	4b10      	ldr	r3, [pc, #64]	@ (8019b28 <vTaskDelay+0x48>)
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	b143      	cbz	r3, 8019afe <vTaskDelay+0x1e>
 8019aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019af0:	f383 8811 	msr	BASEPRI, r3
 8019af4:	f3bf 8f6f 	isb	sy
 8019af8:	f3bf 8f4f 	dsb	sy
 8019afc:	e7fe      	b.n	8019afc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8019afe:	f7ff fed9 	bl	80198b4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019b02:	2100      	movs	r1, #0
 8019b04:	4620      	mov	r0, r4
 8019b06:	f7ff fdd1 	bl	80196ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8019b0a:	f7ff ff6d 	bl	80199e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8019b0e:	b948      	cbnz	r0, 8019b24 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8019b10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019b18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019b1c:	f3bf 8f4f 	dsb	sy
 8019b20:	f3bf 8f6f 	isb	sy
	}
 8019b24:	bd10      	pop	{r4, pc}
 8019b26:	bf00      	nop
 8019b28:	200036ac 	.word	0x200036ac

08019b2c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019b2c:	4b22      	ldr	r3, [pc, #136]	@ (8019bb8 <vTaskSwitchContext+0x8c>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	b11b      	cbz	r3, 8019b3a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8019b32:	4b22      	ldr	r3, [pc, #136]	@ (8019bbc <vTaskSwitchContext+0x90>)
 8019b34:	2201      	movs	r2, #1
 8019b36:	601a      	str	r2, [r3, #0]
 8019b38:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8019b3a:	4b20      	ldr	r3, [pc, #128]	@ (8019bbc <vTaskSwitchContext+0x90>)
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b40:	4b1f      	ldr	r3, [pc, #124]	@ (8019bc0 <vTaskSwitchContext+0x94>)
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019b48:	008a      	lsls	r2, r1, #2
 8019b4a:	491e      	ldr	r1, [pc, #120]	@ (8019bc4 <vTaskSwitchContext+0x98>)
 8019b4c:	588a      	ldr	r2, [r1, r2]
 8019b4e:	b95a      	cbnz	r2, 8019b68 <vTaskSwitchContext+0x3c>
 8019b50:	b10b      	cbz	r3, 8019b56 <vTaskSwitchContext+0x2a>
 8019b52:	3b01      	subs	r3, #1
 8019b54:	e7f6      	b.n	8019b44 <vTaskSwitchContext+0x18>
 8019b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019b5a:	f383 8811 	msr	BASEPRI, r3
 8019b5e:	f3bf 8f6f 	isb	sy
 8019b62:	f3bf 8f4f 	dsb	sy
 8019b66:	e7fe      	b.n	8019b66 <vTaskSwitchContext+0x3a>
 8019b68:	4608      	mov	r0, r1
 8019b6a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019b6e:	008a      	lsls	r2, r1, #2
 8019b70:	4402      	add	r2, r0
 8019b72:	6851      	ldr	r1, [r2, #4]
 8019b74:	6849      	ldr	r1, [r1, #4]
 8019b76:	6051      	str	r1, [r2, #4]
 8019b78:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8019b7c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8019b80:	3208      	adds	r2, #8
 8019b82:	4402      	add	r2, r0
 8019b84:	4291      	cmp	r1, r2
 8019b86:	d00f      	beq.n	8019ba8 <vTaskSwitchContext+0x7c>
 8019b88:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8019b8c:	0091      	lsls	r1, r2, #2
 8019b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8019bc4 <vTaskSwitchContext+0x98>)
 8019b90:	440a      	add	r2, r1
 8019b92:	6852      	ldr	r2, [r2, #4]
 8019b94:	68d1      	ldr	r1, [r2, #12]
 8019b96:	4a0c      	ldr	r2, [pc, #48]	@ (8019bc8 <vTaskSwitchContext+0x9c>)
 8019b98:	6011      	str	r1, [r2, #0]
 8019b9a:	4909      	ldr	r1, [pc, #36]	@ (8019bc0 <vTaskSwitchContext+0x94>)
 8019b9c:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019b9e:	6813      	ldr	r3, [r2, #0]
 8019ba0:	3358      	adds	r3, #88	@ 0x58
 8019ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8019bcc <vTaskSwitchContext+0xa0>)
 8019ba4:	6013      	str	r3, [r2, #0]
}
 8019ba6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ba8:	6848      	ldr	r0, [r1, #4]
 8019baa:	4662      	mov	r2, ip
 8019bac:	0091      	lsls	r1, r2, #2
 8019bae:	4a05      	ldr	r2, [pc, #20]	@ (8019bc4 <vTaskSwitchContext+0x98>)
 8019bb0:	440a      	add	r2, r1
 8019bb2:	6050      	str	r0, [r2, #4]
 8019bb4:	e7e8      	b.n	8019b88 <vTaskSwitchContext+0x5c>
 8019bb6:	bf00      	nop
 8019bb8:	200036ac 	.word	0x200036ac
 8019bbc:	200036c0 	.word	0x200036c0
 8019bc0:	200036cc 	.word	0x200036cc
 8019bc4:	20003748 	.word	0x20003748
 8019bc8:	20003ba8 	.word	0x20003ba8
 8019bcc:	200002d8 	.word	0x200002d8

08019bd0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8019bd0:	b158      	cbz	r0, 8019bea <vTaskPlaceOnEventList+0x1a>
{
 8019bd2:	b510      	push	{r4, lr}
 8019bd4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019bd6:	4a09      	ldr	r2, [pc, #36]	@ (8019bfc <vTaskPlaceOnEventList+0x2c>)
 8019bd8:	6811      	ldr	r1, [r2, #0]
 8019bda:	3118      	adds	r1, #24
 8019bdc:	f7fe fddf 	bl	801879e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019be0:	2101      	movs	r1, #1
 8019be2:	4620      	mov	r0, r4
 8019be4:	f7ff fd62 	bl	80196ac <prvAddCurrentTaskToDelayedList>
}
 8019be8:	bd10      	pop	{r4, pc}
 8019bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bee:	f383 8811 	msr	BASEPRI, r3
 8019bf2:	f3bf 8f6f 	isb	sy
 8019bf6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8019bfa:	e7fe      	b.n	8019bfa <vTaskPlaceOnEventList+0x2a>
 8019bfc:	20003ba8 	.word	0x20003ba8

08019c00 <vTaskPlaceOnEventListRestricted>:
	{
 8019c00:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8019c02:	b170      	cbz	r0, 8019c22 <vTaskPlaceOnEventListRestricted+0x22>
 8019c04:	460d      	mov	r5, r1
 8019c06:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019c08:	4a0a      	ldr	r2, [pc, #40]	@ (8019c34 <vTaskPlaceOnEventListRestricted+0x34>)
 8019c0a:	6811      	ldr	r1, [r2, #0]
 8019c0c:	3118      	adds	r1, #24
 8019c0e:	f7fe fdbb 	bl	8018788 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8019c12:	b10c      	cbz	r4, 8019c18 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8019c14:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019c18:	4621      	mov	r1, r4
 8019c1a:	4628      	mov	r0, r5
 8019c1c:	f7ff fd46 	bl	80196ac <prvAddCurrentTaskToDelayedList>
	}
 8019c20:	bd38      	pop	{r3, r4, r5, pc}
 8019c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c26:	f383 8811 	msr	BASEPRI, r3
 8019c2a:	f3bf 8f6f 	isb	sy
 8019c2e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8019c32:	e7fe      	b.n	8019c32 <vTaskPlaceOnEventListRestricted+0x32>
 8019c34:	20003ba8 	.word	0x20003ba8

08019c38 <xTaskRemoveFromEventList>:
{
 8019c38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c3a:	68c3      	ldr	r3, [r0, #12]
 8019c3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8019c3e:	b324      	cbz	r4, 8019c8a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019c40:	f104 0518 	add.w	r5, r4, #24
 8019c44:	4628      	mov	r0, r5
 8019c46:	f7fe fdc3 	bl	80187d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019c4a:	4b18      	ldr	r3, [pc, #96]	@ (8019cac <xTaskRemoveFromEventList+0x74>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	bb2b      	cbnz	r3, 8019c9c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019c50:	1d25      	adds	r5, r4, #4
 8019c52:	4628      	mov	r0, r5
 8019c54:	f7fe fdbc 	bl	80187d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019c58:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019c5a:	4b15      	ldr	r3, [pc, #84]	@ (8019cb0 <xTaskRemoveFromEventList+0x78>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	4298      	cmp	r0, r3
 8019c60:	d901      	bls.n	8019c66 <xTaskRemoveFromEventList+0x2e>
 8019c62:	4b13      	ldr	r3, [pc, #76]	@ (8019cb0 <xTaskRemoveFromEventList+0x78>)
 8019c64:	6018      	str	r0, [r3, #0]
 8019c66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019c6a:	4629      	mov	r1, r5
 8019c6c:	4b11      	ldr	r3, [pc, #68]	@ (8019cb4 <xTaskRemoveFromEventList+0x7c>)
 8019c6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019c72:	f7fe fd89 	bl	8018788 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019c76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019c78:	4b0f      	ldr	r3, [pc, #60]	@ (8019cb8 <xTaskRemoveFromEventList+0x80>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	d911      	bls.n	8019ca6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8019c82:	2001      	movs	r0, #1
 8019c84:	4b0d      	ldr	r3, [pc, #52]	@ (8019cbc <xTaskRemoveFromEventList+0x84>)
 8019c86:	6018      	str	r0, [r3, #0]
}
 8019c88:	bd38      	pop	{r3, r4, r5, pc}
 8019c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c8e:	f383 8811 	msr	BASEPRI, r3
 8019c92:	f3bf 8f6f 	isb	sy
 8019c96:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8019c9a:	e7fe      	b.n	8019c9a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019c9c:	4629      	mov	r1, r5
 8019c9e:	4808      	ldr	r0, [pc, #32]	@ (8019cc0 <xTaskRemoveFromEventList+0x88>)
 8019ca0:	f7fe fd72 	bl	8018788 <vListInsertEnd>
 8019ca4:	e7e7      	b.n	8019c76 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8019ca6:	2000      	movs	r0, #0
	return xReturn;
 8019ca8:	e7ee      	b.n	8019c88 <xTaskRemoveFromEventList+0x50>
 8019caa:	bf00      	nop
 8019cac:	200036ac 	.word	0x200036ac
 8019cb0:	200036cc 	.word	0x200036cc
 8019cb4:	20003748 	.word	0x20003748
 8019cb8:	20003ba8 	.word	0x20003ba8
 8019cbc:	200036c0 	.word	0x200036c0
 8019cc0:	20003704 	.word	0x20003704

08019cc4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019cc4:	4b03      	ldr	r3, [pc, #12]	@ (8019cd4 <vTaskInternalSetTimeOutState+0x10>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019cca:	4b03      	ldr	r3, [pc, #12]	@ (8019cd8 <vTaskInternalSetTimeOutState+0x14>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	6043      	str	r3, [r0, #4]
}
 8019cd0:	4770      	bx	lr
 8019cd2:	bf00      	nop
 8019cd4:	200036bc 	.word	0x200036bc
 8019cd8:	200036d0 	.word	0x200036d0

08019cdc <xTaskCheckForTimeOut>:
{
 8019cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8019cde:	b1c8      	cbz	r0, 8019d14 <xTaskCheckForTimeOut+0x38>
 8019ce0:	460c      	mov	r4, r1
 8019ce2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8019ce4:	b1f9      	cbz	r1, 8019d26 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8019ce6:	f000 fbdd 	bl	801a4a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8019cea:	4b1b      	ldr	r3, [pc, #108]	@ (8019d58 <xTaskCheckForTimeOut+0x7c>)
 8019cec:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019cee:	686b      	ldr	r3, [r5, #4]
 8019cf0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8019cf2:	6822      	ldr	r2, [r4, #0]
 8019cf4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8019cf8:	d026      	beq.n	8019d48 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019cfa:	4e18      	ldr	r6, [pc, #96]	@ (8019d5c <xTaskCheckForTimeOut+0x80>)
 8019cfc:	6836      	ldr	r6, [r6, #0]
 8019cfe:	682f      	ldr	r7, [r5, #0]
 8019d00:	42b7      	cmp	r7, r6
 8019d02:	d001      	beq.n	8019d08 <xTaskCheckForTimeOut+0x2c>
 8019d04:	428b      	cmp	r3, r1
 8019d06:	d924      	bls.n	8019d52 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019d08:	4282      	cmp	r2, r0
 8019d0a:	d815      	bhi.n	8019d38 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8019d10:	2401      	movs	r4, #1
 8019d12:	e01a      	b.n	8019d4a <xTaskCheckForTimeOut+0x6e>
 8019d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d18:	f383 8811 	msr	BASEPRI, r3
 8019d1c:	f3bf 8f6f 	isb	sy
 8019d20:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8019d24:	e7fe      	b.n	8019d24 <xTaskCheckForTimeOut+0x48>
 8019d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d2a:	f383 8811 	msr	BASEPRI, r3
 8019d2e:	f3bf 8f6f 	isb	sy
 8019d32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8019d36:	e7fe      	b.n	8019d36 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8019d38:	1a5b      	subs	r3, r3, r1
 8019d3a:	4413      	add	r3, r2
 8019d3c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019d3e:	4628      	mov	r0, r5
 8019d40:	f7ff ffc0 	bl	8019cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019d44:	2400      	movs	r4, #0
 8019d46:	e000      	b.n	8019d4a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8019d48:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019d4a:	f000 fbcd 	bl	801a4e8 <vPortExitCritical>
}
 8019d4e:	4620      	mov	r0, r4
 8019d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8019d52:	2401      	movs	r4, #1
 8019d54:	e7f9      	b.n	8019d4a <xTaskCheckForTimeOut+0x6e>
 8019d56:	bf00      	nop
 8019d58:	200036d0 	.word	0x200036d0
 8019d5c:	200036bc 	.word	0x200036bc

08019d60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8019d60:	4b01      	ldr	r3, [pc, #4]	@ (8019d68 <vTaskMissedYield+0x8>)
 8019d62:	2201      	movs	r2, #1
 8019d64:	601a      	str	r2, [r3, #0]
}
 8019d66:	4770      	bx	lr
 8019d68:	200036c0 	.word	0x200036c0

08019d6c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8019d6c:	4b01      	ldr	r3, [pc, #4]	@ (8019d74 <xTaskGetCurrentTaskHandle+0x8>)
 8019d6e:	6818      	ldr	r0, [r3, #0]
	}
 8019d70:	4770      	bx	lr
 8019d72:	bf00      	nop
 8019d74:	20003ba8 	.word	0x20003ba8

08019d78 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8019d78:	4b05      	ldr	r3, [pc, #20]	@ (8019d90 <xTaskGetSchedulerState+0x18>)
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	b133      	cbz	r3, 8019d8c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019d7e:	4b05      	ldr	r3, [pc, #20]	@ (8019d94 <xTaskGetSchedulerState+0x1c>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	b10b      	cbz	r3, 8019d88 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8019d84:	2000      	movs	r0, #0
	}
 8019d86:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8019d88:	2002      	movs	r0, #2
 8019d8a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019d8c:	2001      	movs	r0, #1
 8019d8e:	4770      	bx	lr
 8019d90:	200036c8 	.word	0x200036c8
 8019d94:	200036ac 	.word	0x200036ac

08019d98 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8019d98:	2800      	cmp	r0, #0
 8019d9a:	d03e      	beq.n	8019e1a <xTaskPriorityInherit+0x82>
	{
 8019d9c:	b538      	push	{r3, r4, r5, lr}
 8019d9e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019da0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019da2:	4a20      	ldr	r2, [pc, #128]	@ (8019e24 <xTaskPriorityInherit+0x8c>)
 8019da4:	6812      	ldr	r2, [r2, #0]
 8019da6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019da8:	4293      	cmp	r3, r2
 8019daa:	d22e      	bcs.n	8019e0a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019dac:	6982      	ldr	r2, [r0, #24]
 8019dae:	2a00      	cmp	r2, #0
 8019db0:	db05      	blt.n	8019dbe <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019db2:	4a1c      	ldr	r2, [pc, #112]	@ (8019e24 <xTaskPriorityInherit+0x8c>)
 8019db4:	6812      	ldr	r2, [r2, #0]
 8019db6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019db8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019dbc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019dbe:	6961      	ldr	r1, [r4, #20]
 8019dc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019dc4:	4a18      	ldr	r2, [pc, #96]	@ (8019e28 <xTaskPriorityInherit+0x90>)
 8019dc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019dca:	4299      	cmp	r1, r3
 8019dcc:	d005      	beq.n	8019dda <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019dce:	4b15      	ldr	r3, [pc, #84]	@ (8019e24 <xTaskPriorityInherit+0x8c>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8019dd6:	2001      	movs	r0, #1
	}
 8019dd8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019dda:	1d25      	adds	r5, r4, #4
 8019ddc:	4628      	mov	r0, r5
 8019dde:	f7fe fcf7 	bl	80187d0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019de2:	4b10      	ldr	r3, [pc, #64]	@ (8019e24 <xTaskPriorityInherit+0x8c>)
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019de8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019dea:	4b10      	ldr	r3, [pc, #64]	@ (8019e2c <xTaskPriorityInherit+0x94>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	4298      	cmp	r0, r3
 8019df0:	d901      	bls.n	8019df6 <xTaskPriorityInherit+0x5e>
 8019df2:	4b0e      	ldr	r3, [pc, #56]	@ (8019e2c <xTaskPriorityInherit+0x94>)
 8019df4:	6018      	str	r0, [r3, #0]
 8019df6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019dfa:	4629      	mov	r1, r5
 8019dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8019e28 <xTaskPriorityInherit+0x90>)
 8019dfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019e02:	f7fe fcc1 	bl	8018788 <vListInsertEnd>
				xReturn = pdTRUE;
 8019e06:	2001      	movs	r0, #1
 8019e08:	e7e6      	b.n	8019dd8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019e0a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019e0c:	4b05      	ldr	r3, [pc, #20]	@ (8019e24 <xTaskPriorityInherit+0x8c>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e12:	429a      	cmp	r2, r3
 8019e14:	d303      	bcc.n	8019e1e <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8019e16:	2000      	movs	r0, #0
 8019e18:	e7de      	b.n	8019dd8 <xTaskPriorityInherit+0x40>
 8019e1a:	2000      	movs	r0, #0
	}
 8019e1c:	4770      	bx	lr
					xReturn = pdTRUE;
 8019e1e:	2001      	movs	r0, #1
		return xReturn;
 8019e20:	e7da      	b.n	8019dd8 <xTaskPriorityInherit+0x40>
 8019e22:	bf00      	nop
 8019e24:	20003ba8 	.word	0x20003ba8
 8019e28:	20003748 	.word	0x20003748
 8019e2c:	200036cc 	.word	0x200036cc

08019e30 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8019e30:	2800      	cmp	r0, #0
 8019e32:	d03b      	beq.n	8019eac <xTaskPriorityDisinherit+0x7c>
	{
 8019e34:	b538      	push	{r3, r4, r5, lr}
 8019e36:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019e38:	4b1e      	ldr	r3, [pc, #120]	@ (8019eb4 <xTaskPriorityDisinherit+0x84>)
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	4283      	cmp	r3, r0
 8019e3e:	d008      	beq.n	8019e52 <xTaskPriorityDisinherit+0x22>
 8019e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e44:	f383 8811 	msr	BASEPRI, r3
 8019e48:	f3bf 8f6f 	isb	sy
 8019e4c:	f3bf 8f4f 	dsb	sy
 8019e50:	e7fe      	b.n	8019e50 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8019e52:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019e54:	b943      	cbnz	r3, 8019e68 <xTaskPriorityDisinherit+0x38>
 8019e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e5a:	f383 8811 	msr	BASEPRI, r3
 8019e5e:	f3bf 8f6f 	isb	sy
 8019e62:	f3bf 8f4f 	dsb	sy
 8019e66:	e7fe      	b.n	8019e66 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8019e68:	3b01      	subs	r3, #1
 8019e6a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019e6c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8019e6e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019e70:	4291      	cmp	r1, r2
 8019e72:	d01d      	beq.n	8019eb0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019e74:	b10b      	cbz	r3, 8019e7a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8019e76:	2000      	movs	r0, #0
	}
 8019e78:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019e7a:	1d05      	adds	r5, r0, #4
 8019e7c:	4628      	mov	r0, r5
 8019e7e:	f7fe fca7 	bl	80187d0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019e82:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8019e84:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019e86:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8019e8a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8019e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8019eb8 <xTaskPriorityDisinherit+0x88>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4298      	cmp	r0, r3
 8019e92:	d901      	bls.n	8019e98 <xTaskPriorityDisinherit+0x68>
 8019e94:	4b08      	ldr	r3, [pc, #32]	@ (8019eb8 <xTaskPriorityDisinherit+0x88>)
 8019e96:	6018      	str	r0, [r3, #0]
 8019e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019e9c:	4629      	mov	r1, r5
 8019e9e:	4b07      	ldr	r3, [pc, #28]	@ (8019ebc <xTaskPriorityDisinherit+0x8c>)
 8019ea0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019ea4:	f7fe fc70 	bl	8018788 <vListInsertEnd>
					xReturn = pdTRUE;
 8019ea8:	2001      	movs	r0, #1
 8019eaa:	e7e5      	b.n	8019e78 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8019eac:	2000      	movs	r0, #0
	}
 8019eae:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	e7e1      	b.n	8019e78 <xTaskPriorityDisinherit+0x48>
 8019eb4:	20003ba8 	.word	0x20003ba8
 8019eb8:	200036cc 	.word	0x200036cc
 8019ebc:	20003748 	.word	0x20003748

08019ec0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	d046      	beq.n	8019f52 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8019ec4:	b538      	push	{r3, r4, r5, lr}
 8019ec6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8019ec8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019eca:	b943      	cbnz	r3, 8019ede <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8019ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ed0:	f383 8811 	msr	BASEPRI, r3
 8019ed4:	f3bf 8f6f 	isb	sy
 8019ed8:	f3bf 8f4f 	dsb	sy
 8019edc:	e7fe      	b.n	8019edc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019ede:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019ee0:	428a      	cmp	r2, r1
 8019ee2:	d200      	bcs.n	8019ee6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8019ee4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019ee6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019ee8:	4291      	cmp	r1, r2
 8019eea:	d001      	beq.n	8019ef0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019eec:	2b01      	cmp	r3, #1
 8019eee:	d000      	beq.n	8019ef2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8019ef0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8019ef2:	4b18      	ldr	r3, [pc, #96]	@ (8019f54 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	42a3      	cmp	r3, r4
 8019ef8:	d022      	beq.n	8019f40 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8019efa:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019efc:	69a3      	ldr	r3, [r4, #24]
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	db02      	blt.n	8019f08 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f02:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019f06:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019f08:	6962      	ldr	r2, [r4, #20]
 8019f0a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8019f0e:	4b12      	ldr	r3, [pc, #72]	@ (8019f58 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8019f10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d1eb      	bne.n	8019ef0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019f18:	1d25      	adds	r5, r4, #4
 8019f1a:	4628      	mov	r0, r5
 8019f1c:	f7fe fc58 	bl	80187d0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8019f20:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019f22:	4b0e      	ldr	r3, [pc, #56]	@ (8019f5c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	4298      	cmp	r0, r3
 8019f28:	d901      	bls.n	8019f2e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8019f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8019f5c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8019f2c:	6018      	str	r0, [r3, #0]
 8019f2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019f32:	4629      	mov	r1, r5
 8019f34:	4b08      	ldr	r3, [pc, #32]	@ (8019f58 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8019f36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019f3a:	f7fe fc25 	bl	8018788 <vListInsertEnd>
	}
 8019f3e:	e7d7      	b.n	8019ef0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8019f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f44:	f383 8811 	msr	BASEPRI, r3
 8019f48:	f3bf 8f6f 	isb	sy
 8019f4c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8019f50:	e7fe      	b.n	8019f50 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8019f52:	4770      	bx	lr
 8019f54:	20003ba8 	.word	0x20003ba8
 8019f58:	20003748 	.word	0x20003748
 8019f5c:	200036cc 	.word	0x200036cc

08019f60 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8019f60:	4b05      	ldr	r3, [pc, #20]	@ (8019f78 <pvTaskIncrementMutexHeldCount+0x18>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	b123      	cbz	r3, 8019f70 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8019f66:	4b04      	ldr	r3, [pc, #16]	@ (8019f78 <pvTaskIncrementMutexHeldCount+0x18>)
 8019f68:	681a      	ldr	r2, [r3, #0]
 8019f6a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8019f6c:	3301      	adds	r3, #1
 8019f6e:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8019f70:	4b01      	ldr	r3, [pc, #4]	@ (8019f78 <pvTaskIncrementMutexHeldCount+0x18>)
 8019f72:	6818      	ldr	r0, [r3, #0]
	}
 8019f74:	4770      	bx	lr
 8019f76:	bf00      	nop
 8019f78:	20003ba8 	.word	0x20003ba8

08019f7c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019f7c:	4b06      	ldr	r3, [pc, #24]	@ (8019f98 <prvGetNextExpireTime+0x1c>)
 8019f7e:	681a      	ldr	r2, [r3, #0]
 8019f80:	6813      	ldr	r3, [r2, #0]
 8019f82:	b92b      	cbnz	r3, 8019f90 <prvGetNextExpireTime+0x14>
 8019f84:	2301      	movs	r3, #1
 8019f86:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019f88:	b923      	cbnz	r3, 8019f94 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019f8a:	68d3      	ldr	r3, [r2, #12]
 8019f8c:	6818      	ldr	r0, [r3, #0]
 8019f8e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019f90:	2300      	movs	r3, #0
 8019f92:	e7f8      	b.n	8019f86 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019f94:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8019f96:	4770      	bx	lr
 8019f98:	20003cac 	.word	0x20003cac

08019f9c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019f9c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019f9e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019fa0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019fa2:	4291      	cmp	r1, r2
 8019fa4:	d80c      	bhi.n	8019fc0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019fa6:	1ad2      	subs	r2, r2, r3
 8019fa8:	6983      	ldr	r3, [r0, #24]
 8019faa:	429a      	cmp	r2, r3
 8019fac:	d301      	bcc.n	8019fb2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019fae:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8019fb0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019fb2:	1d01      	adds	r1, r0, #4
 8019fb4:	4b09      	ldr	r3, [pc, #36]	@ (8019fdc <prvInsertTimerInActiveList+0x40>)
 8019fb6:	6818      	ldr	r0, [r3, #0]
 8019fb8:	f7fe fbf1 	bl	801879e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8019fbc:	2000      	movs	r0, #0
 8019fbe:	e7f7      	b.n	8019fb0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d201      	bcs.n	8019fc8 <prvInsertTimerInActiveList+0x2c>
 8019fc4:	4299      	cmp	r1, r3
 8019fc6:	d206      	bcs.n	8019fd6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019fc8:	1d01      	adds	r1, r0, #4
 8019fca:	4b05      	ldr	r3, [pc, #20]	@ (8019fe0 <prvInsertTimerInActiveList+0x44>)
 8019fcc:	6818      	ldr	r0, [r3, #0]
 8019fce:	f7fe fbe6 	bl	801879e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8019fd2:	2000      	movs	r0, #0
 8019fd4:	e7ec      	b.n	8019fb0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8019fd6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8019fd8:	e7ea      	b.n	8019fb0 <prvInsertTimerInActiveList+0x14>
 8019fda:	bf00      	nop
 8019fdc:	20003ca8 	.word	0x20003ca8
 8019fe0:	20003cac 	.word	0x20003cac

08019fe4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019fe4:	b530      	push	{r4, r5, lr}
 8019fe6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019fe8:	f000 fa5c 	bl	801a4a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019fec:	4b11      	ldr	r3, [pc, #68]	@ (801a034 <prvCheckForValidListAndQueue+0x50>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	b11b      	cbz	r3, 8019ffa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019ff2:	f000 fa79 	bl	801a4e8 <vPortExitCritical>
}
 8019ff6:	b003      	add	sp, #12
 8019ff8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8019ffa:	4d0f      	ldr	r5, [pc, #60]	@ (801a038 <prvCheckForValidListAndQueue+0x54>)
 8019ffc:	4628      	mov	r0, r5
 8019ffe:	f7fe fbb5 	bl	801876c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a002:	4c0e      	ldr	r4, [pc, #56]	@ (801a03c <prvCheckForValidListAndQueue+0x58>)
 801a004:	4620      	mov	r0, r4
 801a006:	f7fe fbb1 	bl	801876c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a00a:	4b0d      	ldr	r3, [pc, #52]	@ (801a040 <prvCheckForValidListAndQueue+0x5c>)
 801a00c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a00e:	4b0d      	ldr	r3, [pc, #52]	@ (801a044 <prvCheckForValidListAndQueue+0x60>)
 801a010:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a012:	2300      	movs	r3, #0
 801a014:	9300      	str	r3, [sp, #0]
 801a016:	4b0c      	ldr	r3, [pc, #48]	@ (801a048 <prvCheckForValidListAndQueue+0x64>)
 801a018:	4a0c      	ldr	r2, [pc, #48]	@ (801a04c <prvCheckForValidListAndQueue+0x68>)
 801a01a:	2110      	movs	r1, #16
 801a01c:	200a      	movs	r0, #10
 801a01e:	f7fe fce5 	bl	80189ec <xQueueGenericCreateStatic>
 801a022:	4b04      	ldr	r3, [pc, #16]	@ (801a034 <prvCheckForValidListAndQueue+0x50>)
 801a024:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801a026:	2800      	cmp	r0, #0
 801a028:	d0e3      	beq.n	8019ff2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a02a:	4909      	ldr	r1, [pc, #36]	@ (801a050 <prvCheckForValidListAndQueue+0x6c>)
 801a02c:	f7ff f984 	bl	8019338 <vQueueAddToRegistry>
 801a030:	e7df      	b.n	8019ff2 <prvCheckForValidListAndQueue+0xe>
 801a032:	bf00      	nop
 801a034:	20003ca4 	.word	0x20003ca4
 801a038:	20003cc4 	.word	0x20003cc4
 801a03c:	20003cb0 	.word	0x20003cb0
 801a040:	20003cac 	.word	0x20003cac
 801a044:	20003ca8 	.word	0x20003ca8
 801a048:	20003bac 	.word	0x20003bac
 801a04c:	20003bfc 	.word	0x20003bfc
 801a050:	08038dcc 	.word	0x08038dcc

0801a054 <xTimerCreateTimerTask>:
{
 801a054:	b510      	push	{r4, lr}
 801a056:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801a058:	f7ff ffc4 	bl	8019fe4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801a05c:	4b12      	ldr	r3, [pc, #72]	@ (801a0a8 <xTimerCreateTimerTask+0x54>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	b1cb      	cbz	r3, 801a096 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a062:	2400      	movs	r4, #0
 801a064:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a066:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a068:	aa07      	add	r2, sp, #28
 801a06a:	a906      	add	r1, sp, #24
 801a06c:	a805      	add	r0, sp, #20
 801a06e:	f7fe fb71 	bl	8018754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a072:	9b05      	ldr	r3, [sp, #20]
 801a074:	9302      	str	r3, [sp, #8]
 801a076:	9b06      	ldr	r3, [sp, #24]
 801a078:	9301      	str	r3, [sp, #4]
 801a07a:	2302      	movs	r3, #2
 801a07c:	9300      	str	r3, [sp, #0]
 801a07e:	4623      	mov	r3, r4
 801a080:	9a07      	ldr	r2, [sp, #28]
 801a082:	490a      	ldr	r1, [pc, #40]	@ (801a0ac <xTimerCreateTimerTask+0x58>)
 801a084:	480a      	ldr	r0, [pc, #40]	@ (801a0b0 <xTimerCreateTimerTask+0x5c>)
 801a086:	f7ff fb4f 	bl	8019728 <xTaskCreateStatic>
 801a08a:	4b0a      	ldr	r3, [pc, #40]	@ (801a0b4 <xTimerCreateTimerTask+0x60>)
 801a08c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801a08e:	b110      	cbz	r0, 801a096 <xTimerCreateTimerTask+0x42>
}
 801a090:	2001      	movs	r0, #1
 801a092:	b008      	add	sp, #32
 801a094:	bd10      	pop	{r4, pc}
 801a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a09a:	f383 8811 	msr	BASEPRI, r3
 801a09e:	f3bf 8f6f 	isb	sy
 801a0a2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801a0a6:	e7fe      	b.n	801a0a6 <xTimerCreateTimerTask+0x52>
 801a0a8:	20003ca4 	.word	0x20003ca4
 801a0ac:	08038dd4 	.word	0x08038dd4
 801a0b0:	0801a3b9 	.word	0x0801a3b9
 801a0b4:	20003ca0 	.word	0x20003ca0

0801a0b8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 801a0b8:	b1b8      	cbz	r0, 801a0ea <xTimerGenericCommand+0x32>
 801a0ba:	469c      	mov	ip, r3
 801a0bc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 801a0be:	4818      	ldr	r0, [pc, #96]	@ (801a120 <xTimerGenericCommand+0x68>)
 801a0c0:	6800      	ldr	r0, [r0, #0]
 801a0c2:	b358      	cbz	r0, 801a11c <xTimerGenericCommand+0x64>
{
 801a0c4:	b500      	push	{lr}
 801a0c6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801a0c8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a0ca:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a0cc:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a0ce:	2905      	cmp	r1, #5
 801a0d0:	dc1c      	bgt.n	801a10c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a0d2:	f7ff fe51 	bl	8019d78 <xTaskGetSchedulerState>
 801a0d6:	2802      	cmp	r0, #2
 801a0d8:	d010      	beq.n	801a0fc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a0da:	2300      	movs	r3, #0
 801a0dc:	461a      	mov	r2, r3
 801a0de:	4669      	mov	r1, sp
 801a0e0:	480f      	ldr	r0, [pc, #60]	@ (801a120 <xTimerGenericCommand+0x68>)
 801a0e2:	6800      	ldr	r0, [r0, #0]
 801a0e4:	f7fe fcf0 	bl	8018ac8 <xQueueGenericSend>
 801a0e8:	e015      	b.n	801a116 <xTimerGenericCommand+0x5e>
 801a0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0ee:	f383 8811 	msr	BASEPRI, r3
 801a0f2:	f3bf 8f6f 	isb	sy
 801a0f6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 801a0fa:	e7fe      	b.n	801a0fa <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	9a06      	ldr	r2, [sp, #24]
 801a100:	4669      	mov	r1, sp
 801a102:	4807      	ldr	r0, [pc, #28]	@ (801a120 <xTimerGenericCommand+0x68>)
 801a104:	6800      	ldr	r0, [r0, #0]
 801a106:	f7fe fcdf 	bl	8018ac8 <xQueueGenericSend>
 801a10a:	e004      	b.n	801a116 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a10c:	2300      	movs	r3, #0
 801a10e:	4662      	mov	r2, ip
 801a110:	4669      	mov	r1, sp
 801a112:	f7fe fde3 	bl	8018cdc <xQueueGenericSendFromISR>
}
 801a116:	b005      	add	sp, #20
 801a118:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 801a11c:	2000      	movs	r0, #0
}
 801a11e:	4770      	bx	lr
 801a120:	20003ca4 	.word	0x20003ca4

0801a124 <prvSwitchTimerLists>:
{
 801a124:	b570      	push	{r4, r5, r6, lr}
 801a126:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a128:	4b1b      	ldr	r3, [pc, #108]	@ (801a198 <prvSwitchTimerLists+0x74>)
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	681a      	ldr	r2, [r3, #0]
 801a12e:	b362      	cbz	r2, 801a18a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a130:	68db      	ldr	r3, [r3, #12]
 801a132:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a134:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a136:	1d25      	adds	r5, r4, #4
 801a138:	4628      	mov	r0, r5
 801a13a:	f7fe fb49 	bl	80187d0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a13e:	6a23      	ldr	r3, [r4, #32]
 801a140:	4620      	mov	r0, r4
 801a142:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a144:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a148:	f013 0f04 	tst.w	r3, #4
 801a14c:	d0ec      	beq.n	801a128 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a14e:	69a3      	ldr	r3, [r4, #24]
 801a150:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801a152:	429e      	cmp	r6, r3
 801a154:	d207      	bcs.n	801a166 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a156:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a158:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a15a:	4629      	mov	r1, r5
 801a15c:	4b0e      	ldr	r3, [pc, #56]	@ (801a198 <prvSwitchTimerLists+0x74>)
 801a15e:	6818      	ldr	r0, [r3, #0]
 801a160:	f7fe fb1d 	bl	801879e <vListInsert>
 801a164:	e7e0      	b.n	801a128 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a166:	2100      	movs	r1, #0
 801a168:	9100      	str	r1, [sp, #0]
 801a16a:	460b      	mov	r3, r1
 801a16c:	4632      	mov	r2, r6
 801a16e:	4620      	mov	r0, r4
 801a170:	f7ff ffa2 	bl	801a0b8 <xTimerGenericCommand>
				configASSERT( xResult );
 801a174:	2800      	cmp	r0, #0
 801a176:	d1d7      	bne.n	801a128 <prvSwitchTimerLists+0x4>
 801a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a17c:	f383 8811 	msr	BASEPRI, r3
 801a180:	f3bf 8f6f 	isb	sy
 801a184:	f3bf 8f4f 	dsb	sy
 801a188:	e7fe      	b.n	801a188 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801a18a:	4a04      	ldr	r2, [pc, #16]	@ (801a19c <prvSwitchTimerLists+0x78>)
 801a18c:	6810      	ldr	r0, [r2, #0]
 801a18e:	4902      	ldr	r1, [pc, #8]	@ (801a198 <prvSwitchTimerLists+0x74>)
 801a190:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801a192:	6013      	str	r3, [r2, #0]
}
 801a194:	b002      	add	sp, #8
 801a196:	bd70      	pop	{r4, r5, r6, pc}
 801a198:	20003cac 	.word	0x20003cac
 801a19c:	20003ca8 	.word	0x20003ca8

0801a1a0 <prvSampleTimeNow>:
{
 801a1a0:	b538      	push	{r3, r4, r5, lr}
 801a1a2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801a1a4:	f7ff fb8e 	bl	80198c4 <xTaskGetTickCount>
 801a1a8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801a1aa:	4b07      	ldr	r3, [pc, #28]	@ (801a1c8 <prvSampleTimeNow+0x28>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	4283      	cmp	r3, r0
 801a1b0:	d805      	bhi.n	801a1be <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801a1b6:	4b04      	ldr	r3, [pc, #16]	@ (801a1c8 <prvSampleTimeNow+0x28>)
 801a1b8:	601c      	str	r4, [r3, #0]
}
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 801a1be:	f7ff ffb1 	bl	801a124 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	602b      	str	r3, [r5, #0]
 801a1c6:	e7f6      	b.n	801a1b6 <prvSampleTimeNow+0x16>
 801a1c8:	20003c9c 	.word	0x20003c9c

0801a1cc <prvProcessExpiredTimer>:
{
 801a1cc:	b570      	push	{r4, r5, r6, lr}
 801a1ce:	b082      	sub	sp, #8
 801a1d0:	4606      	mov	r6, r0
 801a1d2:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1d4:	4917      	ldr	r1, [pc, #92]	@ (801a234 <prvProcessExpiredTimer+0x68>)
 801a1d6:	6809      	ldr	r1, [r1, #0]
 801a1d8:	68c9      	ldr	r1, [r1, #12]
 801a1da:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a1dc:	1d20      	adds	r0, r4, #4
 801a1de:	f7fe faf7 	bl	80187d0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a1e2:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801a1e6:	f01c 0f04 	tst.w	ip, #4
 801a1ea:	d108      	bne.n	801a1fe <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a1ec:	f02c 0c01 	bic.w	ip, ip, #1
 801a1f0:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a1f4:	6a23      	ldr	r3, [r4, #32]
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	4798      	blx	r3
}
 801a1fa:	b002      	add	sp, #8
 801a1fc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a1fe:	69a1      	ldr	r1, [r4, #24]
 801a200:	4633      	mov	r3, r6
 801a202:	462a      	mov	r2, r5
 801a204:	4431      	add	r1, r6
 801a206:	4620      	mov	r0, r4
 801a208:	f7ff fec8 	bl	8019f9c <prvInsertTimerInActiveList>
 801a20c:	2800      	cmp	r0, #0
 801a20e:	d0f1      	beq.n	801a1f4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a210:	2100      	movs	r1, #0
 801a212:	9100      	str	r1, [sp, #0]
 801a214:	460b      	mov	r3, r1
 801a216:	4632      	mov	r2, r6
 801a218:	4620      	mov	r0, r4
 801a21a:	f7ff ff4d 	bl	801a0b8 <xTimerGenericCommand>
			configASSERT( xResult );
 801a21e:	2800      	cmp	r0, #0
 801a220:	d1e8      	bne.n	801a1f4 <prvProcessExpiredTimer+0x28>
 801a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a226:	f383 8811 	msr	BASEPRI, r3
 801a22a:	f3bf 8f6f 	isb	sy
 801a22e:	f3bf 8f4f 	dsb	sy
 801a232:	e7fe      	b.n	801a232 <prvProcessExpiredTimer+0x66>
 801a234:	20003cac 	.word	0x20003cac

0801a238 <prvProcessTimerOrBlockTask>:
{
 801a238:	b570      	push	{r4, r5, r6, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	4606      	mov	r6, r0
 801a23e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 801a240:	f7ff fb38 	bl	80198b4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a244:	a801      	add	r0, sp, #4
 801a246:	f7ff ffab 	bl	801a1a0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801a24a:	9b01      	ldr	r3, [sp, #4]
 801a24c:	bb33      	cbnz	r3, 801a29c <prvProcessTimerOrBlockTask+0x64>
 801a24e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a250:	b9e4      	cbnz	r4, 801a28c <prvProcessTimerOrBlockTask+0x54>
 801a252:	42b0      	cmp	r0, r6
 801a254:	d213      	bcs.n	801a27e <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a256:	4622      	mov	r2, r4
 801a258:	1b71      	subs	r1, r6, r5
 801a25a:	4b12      	ldr	r3, [pc, #72]	@ (801a2a4 <prvProcessTimerOrBlockTask+0x6c>)
 801a25c:	6818      	ldr	r0, [r3, #0]
 801a25e:	f7ff f87f 	bl	8019360 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a262:	f7ff fbc1 	bl	80199e8 <xTaskResumeAll>
 801a266:	b9d8      	cbnz	r0, 801a2a0 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801a268:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a26c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a270:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801a274:	f3bf 8f4f 	dsb	sy
 801a278:	f3bf 8f6f 	isb	sy
 801a27c:	e010      	b.n	801a2a0 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 801a27e:	f7ff fbb3 	bl	80199e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a282:	4629      	mov	r1, r5
 801a284:	4630      	mov	r0, r6
 801a286:	f7ff ffa1 	bl	801a1cc <prvProcessExpiredTimer>
 801a28a:	e009      	b.n	801a2a0 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a28c:	4a06      	ldr	r2, [pc, #24]	@ (801a2a8 <prvProcessTimerOrBlockTask+0x70>)
 801a28e:	6812      	ldr	r2, [r2, #0]
 801a290:	6812      	ldr	r2, [r2, #0]
 801a292:	b90a      	cbnz	r2, 801a298 <prvProcessTimerOrBlockTask+0x60>
 801a294:	2401      	movs	r4, #1
 801a296:	e7de      	b.n	801a256 <prvProcessTimerOrBlockTask+0x1e>
 801a298:	461c      	mov	r4, r3
 801a29a:	e7dc      	b.n	801a256 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 801a29c:	f7ff fba4 	bl	80199e8 <xTaskResumeAll>
}
 801a2a0:	b002      	add	sp, #8
 801a2a2:	bd70      	pop	{r4, r5, r6, pc}
 801a2a4:	20003ca4 	.word	0x20003ca4
 801a2a8:	20003ca8 	.word	0x20003ca8

0801a2ac <prvProcessReceivedCommands>:
{
 801a2ac:	b510      	push	{r4, lr}
 801a2ae:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a2b0:	e002      	b.n	801a2b8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a2b2:	9b04      	ldr	r3, [sp, #16]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	da0f      	bge.n	801a2d8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	a904      	add	r1, sp, #16
 801a2bc:	4b3d      	ldr	r3, [pc, #244]	@ (801a3b4 <prvProcessReceivedCommands+0x108>)
 801a2be:	6818      	ldr	r0, [r3, #0]
 801a2c0:	f7fe fd73 	bl	8018daa <xQueueReceive>
 801a2c4:	2800      	cmp	r0, #0
 801a2c6:	d073      	beq.n	801a3b0 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a2c8:	9b04      	ldr	r3, [sp, #16]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	daf1      	bge.n	801a2b2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a2ce:	9907      	ldr	r1, [sp, #28]
 801a2d0:	9806      	ldr	r0, [sp, #24]
 801a2d2:	9b05      	ldr	r3, [sp, #20]
 801a2d4:	4798      	blx	r3
 801a2d6:	e7ec      	b.n	801a2b2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a2d8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a2da:	6963      	ldr	r3, [r4, #20]
 801a2dc:	b113      	cbz	r3, 801a2e4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a2de:	1d20      	adds	r0, r4, #4
 801a2e0:	f7fe fa76 	bl	80187d0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a2e4:	a803      	add	r0, sp, #12
 801a2e6:	f7ff ff5b 	bl	801a1a0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801a2ea:	9b04      	ldr	r3, [sp, #16]
 801a2ec:	2b09      	cmp	r3, #9
 801a2ee:	d8e3      	bhi.n	801a2b8 <prvProcessReceivedCommands+0xc>
 801a2f0:	e8df f003 	tbb	[pc, r3]
 801a2f4:	30050505 	.word	0x30050505
 801a2f8:	05055037 	.word	0x05055037
 801a2fc:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a2fe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a302:	f043 0301 	orr.w	r3, r3, #1
 801a306:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a30a:	9b05      	ldr	r3, [sp, #20]
 801a30c:	69a1      	ldr	r1, [r4, #24]
 801a30e:	4602      	mov	r2, r0
 801a310:	4419      	add	r1, r3
 801a312:	4620      	mov	r0, r4
 801a314:	f7ff fe42 	bl	8019f9c <prvInsertTimerInActiveList>
 801a318:	2800      	cmp	r0, #0
 801a31a:	d0cd      	beq.n	801a2b8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a31c:	6a23      	ldr	r3, [r4, #32]
 801a31e:	4620      	mov	r0, r4
 801a320:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a322:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a326:	f013 0f04 	tst.w	r3, #4
 801a32a:	d0c5      	beq.n	801a2b8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a32c:	69a2      	ldr	r2, [r4, #24]
 801a32e:	2100      	movs	r1, #0
 801a330:	9100      	str	r1, [sp, #0]
 801a332:	460b      	mov	r3, r1
 801a334:	9805      	ldr	r0, [sp, #20]
 801a336:	4402      	add	r2, r0
 801a338:	4620      	mov	r0, r4
 801a33a:	f7ff febd 	bl	801a0b8 <xTimerGenericCommand>
							configASSERT( xResult );
 801a33e:	2800      	cmp	r0, #0
 801a340:	d1ba      	bne.n	801a2b8 <prvProcessReceivedCommands+0xc>
 801a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a346:	f383 8811 	msr	BASEPRI, r3
 801a34a:	f3bf 8f6f 	isb	sy
 801a34e:	f3bf 8f4f 	dsb	sy
 801a352:	e7fe      	b.n	801a352 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a354:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a358:	f023 0301 	bic.w	r3, r3, #1
 801a35c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 801a360:	e7aa      	b.n	801a2b8 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a362:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a366:	f043 0301 	orr.w	r3, r3, #1
 801a36a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a36e:	9905      	ldr	r1, [sp, #20]
 801a370:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a372:	b131      	cbz	r1, 801a382 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a374:	4603      	mov	r3, r0
 801a376:	4602      	mov	r2, r0
 801a378:	4401      	add	r1, r0
 801a37a:	4620      	mov	r0, r4
 801a37c:	f7ff fe0e 	bl	8019f9c <prvInsertTimerInActiveList>
					break;
 801a380:	e79a      	b.n	801a2b8 <prvProcessReceivedCommands+0xc>
 801a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a386:	f383 8811 	msr	BASEPRI, r3
 801a38a:	f3bf 8f6f 	isb	sy
 801a38e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a392:	e7fe      	b.n	801a392 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a394:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a398:	f013 0f02 	tst.w	r3, #2
 801a39c:	d004      	beq.n	801a3a8 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a39e:	f023 0301 	bic.w	r3, r3, #1
 801a3a2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801a3a6:	e787      	b.n	801a2b8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f000 fab7 	bl	801a91c <vPortFree>
 801a3ae:	e783      	b.n	801a2b8 <prvProcessReceivedCommands+0xc>
}
 801a3b0:	b008      	add	sp, #32
 801a3b2:	bd10      	pop	{r4, pc}
 801a3b4:	20003ca4 	.word	0x20003ca4

0801a3b8 <prvTimerTask>:
{
 801a3b8:	b500      	push	{lr}
 801a3ba:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a3bc:	a801      	add	r0, sp, #4
 801a3be:	f7ff fddd 	bl	8019f7c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a3c2:	9901      	ldr	r1, [sp, #4]
 801a3c4:	f7ff ff38 	bl	801a238 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801a3c8:	f7ff ff70 	bl	801a2ac <prvProcessReceivedCommands>
	for( ;; )
 801a3cc:	e7f6      	b.n	801a3bc <prvTimerTask+0x4>
	...

0801a3d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a3d0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a3d6:	4b0d      	ldr	r3, [pc, #52]	@ (801a40c <prvTaskExitError+0x3c>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a3de:	d008      	beq.n	801a3f2 <prvTaskExitError+0x22>
 801a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3e4:	f383 8811 	msr	BASEPRI, r3
 801a3e8:	f3bf 8f6f 	isb	sy
 801a3ec:	f3bf 8f4f 	dsb	sy
 801a3f0:	e7fe      	b.n	801a3f0 <prvTaskExitError+0x20>
 801a3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a3f6:	f383 8811 	msr	BASEPRI, r3
 801a3fa:	f3bf 8f6f 	isb	sy
 801a3fe:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a402:	9b01      	ldr	r3, [sp, #4]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d0fc      	beq.n	801a402 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a408:	b002      	add	sp, #8
 801a40a:	4770      	bx	lr
 801a40c:	20000114 	.word	0x20000114

0801a410 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a410:	4808      	ldr	r0, [pc, #32]	@ (801a434 <prvPortStartFirstTask+0x24>)
 801a412:	6800      	ldr	r0, [r0, #0]
 801a414:	6800      	ldr	r0, [r0, #0]
 801a416:	f380 8808 	msr	MSP, r0
 801a41a:	f04f 0000 	mov.w	r0, #0
 801a41e:	f380 8814 	msr	CONTROL, r0
 801a422:	b662      	cpsie	i
 801a424:	b661      	cpsie	f
 801a426:	f3bf 8f4f 	dsb	sy
 801a42a:	f3bf 8f6f 	isb	sy
 801a42e:	df00      	svc	0
 801a430:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a432:	0000      	.short	0x0000
 801a434:	e000ed08 	.word	0xe000ed08

0801a438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a438:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a448 <vPortEnableVFP+0x10>
 801a43c:	6801      	ldr	r1, [r0, #0]
 801a43e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a442:	6001      	str	r1, [r0, #0]
 801a444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a446:	0000      	.short	0x0000
 801a448:	e000ed88 	.word	0xe000ed88

0801a44c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a44c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a450:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a454:	f021 0101 	bic.w	r1, r1, #1
 801a458:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a45c:	4b05      	ldr	r3, [pc, #20]	@ (801a474 <pxPortInitialiseStack+0x28>)
 801a45e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a462:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a466:	f06f 0302 	mvn.w	r3, #2
 801a46a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801a46e:	3844      	subs	r0, #68	@ 0x44
 801a470:	4770      	bx	lr
 801a472:	bf00      	nop
 801a474:	0801a3d1 	.word	0x0801a3d1
	...

0801a480 <SVC_Handler>:
	__asm volatile (
 801a480:	4b07      	ldr	r3, [pc, #28]	@ (801a4a0 <pxCurrentTCBConst2>)
 801a482:	6819      	ldr	r1, [r3, #0]
 801a484:	6808      	ldr	r0, [r1, #0]
 801a486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a48a:	f380 8809 	msr	PSP, r0
 801a48e:	f3bf 8f6f 	isb	sy
 801a492:	f04f 0000 	mov.w	r0, #0
 801a496:	f380 8811 	msr	BASEPRI, r0
 801a49a:	4770      	bx	lr
 801a49c:	f3af 8000 	nop.w

0801a4a0 <pxCurrentTCBConst2>:
 801a4a0:	20003ba8 	.word	0x20003ba8

0801a4a4 <vPortEnterCritical>:
 801a4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4a8:	f383 8811 	msr	BASEPRI, r3
 801a4ac:	f3bf 8f6f 	isb	sy
 801a4b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801a4b4:	4a0b      	ldr	r2, [pc, #44]	@ (801a4e4 <vPortEnterCritical+0x40>)
 801a4b6:	6813      	ldr	r3, [r2, #0]
 801a4b8:	3301      	adds	r3, #1
 801a4ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801a4bc:	2b01      	cmp	r3, #1
 801a4be:	d000      	beq.n	801a4c2 <vPortEnterCritical+0x1e>
}
 801a4c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a4c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a4c6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 801a4ca:	f013 0fff 	tst.w	r3, #255	@ 0xff
 801a4ce:	d0f7      	beq.n	801a4c0 <vPortEnterCritical+0x1c>
 801a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4d4:	f383 8811 	msr	BASEPRI, r3
 801a4d8:	f3bf 8f6f 	isb	sy
 801a4dc:	f3bf 8f4f 	dsb	sy
 801a4e0:	e7fe      	b.n	801a4e0 <vPortEnterCritical+0x3c>
 801a4e2:	bf00      	nop
 801a4e4:	20000114 	.word	0x20000114

0801a4e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801a4e8:	4b09      	ldr	r3, [pc, #36]	@ (801a510 <vPortExitCritical+0x28>)
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	b943      	cbnz	r3, 801a500 <vPortExitCritical+0x18>
 801a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a4f2:	f383 8811 	msr	BASEPRI, r3
 801a4f6:	f3bf 8f6f 	isb	sy
 801a4fa:	f3bf 8f4f 	dsb	sy
 801a4fe:	e7fe      	b.n	801a4fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801a500:	3b01      	subs	r3, #1
 801a502:	4a03      	ldr	r2, [pc, #12]	@ (801a510 <vPortExitCritical+0x28>)
 801a504:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a506:	b90b      	cbnz	r3, 801a50c <vPortExitCritical+0x24>
	__asm volatile
 801a508:	f383 8811 	msr	BASEPRI, r3
}
 801a50c:	4770      	bx	lr
 801a50e:	bf00      	nop
 801a510:	20000114 	.word	0x20000114
	...

0801a520 <PendSV_Handler>:
	__asm volatile
 801a520:	f3ef 8009 	mrs	r0, PSP
 801a524:	f3bf 8f6f 	isb	sy
 801a528:	4b15      	ldr	r3, [pc, #84]	@ (801a580 <pxCurrentTCBConst>)
 801a52a:	681a      	ldr	r2, [r3, #0]
 801a52c:	f01e 0f10 	tst.w	lr, #16
 801a530:	bf08      	it	eq
 801a532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a53a:	6010      	str	r0, [r2, #0]
 801a53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a540:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a544:	f380 8811 	msr	BASEPRI, r0
 801a548:	f3bf 8f4f 	dsb	sy
 801a54c:	f3bf 8f6f 	isb	sy
 801a550:	f7ff faec 	bl	8019b2c <vTaskSwitchContext>
 801a554:	f04f 0000 	mov.w	r0, #0
 801a558:	f380 8811 	msr	BASEPRI, r0
 801a55c:	bc09      	pop	{r0, r3}
 801a55e:	6819      	ldr	r1, [r3, #0]
 801a560:	6808      	ldr	r0, [r1, #0]
 801a562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a566:	f01e 0f10 	tst.w	lr, #16
 801a56a:	bf08      	it	eq
 801a56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a570:	f380 8809 	msr	PSP, r0
 801a574:	f3bf 8f6f 	isb	sy
 801a578:	4770      	bx	lr
 801a57a:	bf00      	nop
 801a57c:	f3af 8000 	nop.w

0801a580 <pxCurrentTCBConst>:
 801a580:	20003ba8 	.word	0x20003ba8

0801a584 <xPortSysTickHandler>:
{
 801a584:	b508      	push	{r3, lr}
	__asm volatile
 801a586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a58a:	f383 8811 	msr	BASEPRI, r3
 801a58e:	f3bf 8f6f 	isb	sy
 801a592:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801a596:	f7ff f99b 	bl	80198d0 <xTaskIncrementTick>
 801a59a:	b128      	cbz	r0, 801a5a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a59c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a5a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a5a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	f383 8811 	msr	BASEPRI, r3
}
 801a5ae:	bd08      	pop	{r3, pc}

0801a5b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a5b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a5b8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a5ba:	4b05      	ldr	r3, [pc, #20]	@ (801a5d0 <vPortSetupTimerInterrupt+0x20>)
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4905      	ldr	r1, [pc, #20]	@ (801a5d4 <vPortSetupTimerInterrupt+0x24>)
 801a5c0:	fba1 1303 	umull	r1, r3, r1, r3
 801a5c4:	099b      	lsrs	r3, r3, #6
 801a5c6:	3b01      	subs	r3, #1
 801a5c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a5ca:	2307      	movs	r3, #7
 801a5cc:	6113      	str	r3, [r2, #16]
}
 801a5ce:	4770      	bx	lr
 801a5d0:	20000018 	.word	0x20000018
 801a5d4:	10624dd3 	.word	0x10624dd3

0801a5d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a5d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a5dc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a5e0:	4b3d      	ldr	r3, [pc, #244]	@ (801a6d8 <xPortStartScheduler+0x100>)
 801a5e2:	429a      	cmp	r2, r3
 801a5e4:	d01c      	beq.n	801a620 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a5e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a5ea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801a5ee:	4b3b      	ldr	r3, [pc, #236]	@ (801a6dc <xPortStartScheduler+0x104>)
 801a5f0:	429a      	cmp	r2, r3
 801a5f2:	d01e      	beq.n	801a632 <xPortStartScheduler+0x5a>
{
 801a5f4:	b530      	push	{r4, r5, lr}
 801a5f6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a5f8:	4b39      	ldr	r3, [pc, #228]	@ (801a6e0 <xPortStartScheduler+0x108>)
 801a5fa:	781a      	ldrb	r2, [r3, #0]
 801a5fc:	b2d2      	uxtb	r2, r2
 801a5fe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a600:	22ff      	movs	r2, #255	@ 0xff
 801a602:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a604:	781b      	ldrb	r3, [r3, #0]
 801a606:	b2db      	uxtb	r3, r3
 801a608:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a60c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a610:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a614:	4a33      	ldr	r2, [pc, #204]	@ (801a6e4 <xPortStartScheduler+0x10c>)
 801a616:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a618:	4b33      	ldr	r3, [pc, #204]	@ (801a6e8 <xPortStartScheduler+0x110>)
 801a61a:	2207      	movs	r2, #7
 801a61c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a61e:	e01b      	b.n	801a658 <xPortStartScheduler+0x80>
	__asm volatile
 801a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a624:	f383 8811 	msr	BASEPRI, r3
 801a628:	f3bf 8f6f 	isb	sy
 801a62c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a630:	e7fe      	b.n	801a630 <xPortStartScheduler+0x58>
 801a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a636:	f383 8811 	msr	BASEPRI, r3
 801a63a:	f3bf 8f6f 	isb	sy
 801a63e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a642:	e7fe      	b.n	801a642 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 801a644:	4a28      	ldr	r2, [pc, #160]	@ (801a6e8 <xPortStartScheduler+0x110>)
 801a646:	6813      	ldr	r3, [r2, #0]
 801a648:	3b01      	subs	r3, #1
 801a64a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a64c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a650:	005b      	lsls	r3, r3, #1
 801a652:	b2db      	uxtb	r3, r3
 801a654:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a658:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a65c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a660:	d1f0      	bne.n	801a644 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a662:	4b21      	ldr	r3, [pc, #132]	@ (801a6e8 <xPortStartScheduler+0x110>)
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	2b03      	cmp	r3, #3
 801a668:	d008      	beq.n	801a67c <xPortStartScheduler+0xa4>
 801a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a66e:	f383 8811 	msr	BASEPRI, r3
 801a672:	f3bf 8f6f 	isb	sy
 801a676:	f3bf 8f4f 	dsb	sy
 801a67a:	e7fe      	b.n	801a67a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a67c:	021b      	lsls	r3, r3, #8
 801a67e:	4a1a      	ldr	r2, [pc, #104]	@ (801a6e8 <xPortStartScheduler+0x110>)
 801a680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a682:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a686:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a688:	9b01      	ldr	r3, [sp, #4]
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	4a14      	ldr	r2, [pc, #80]	@ (801a6e0 <xPortStartScheduler+0x108>)
 801a68e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a690:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 801a694:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a69c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a6a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801a6a4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a6a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 801a6ac:	f7ff ff80 	bl	801a5b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801a6b0:	2500      	movs	r5, #0
 801a6b2:	4b0e      	ldr	r3, [pc, #56]	@ (801a6ec <xPortStartScheduler+0x114>)
 801a6b4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801a6b6:	f7ff febf 	bl	801a438 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a6ba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 801a6be:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a6c2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801a6c6:	f7ff fea3 	bl	801a410 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801a6ca:	f7ff fa2f 	bl	8019b2c <vTaskSwitchContext>
	prvTaskExitError();
 801a6ce:	f7ff fe7f 	bl	801a3d0 <prvTaskExitError>
}
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	b003      	add	sp, #12
 801a6d6:	bd30      	pop	{r4, r5, pc}
 801a6d8:	410fc271 	.word	0x410fc271
 801a6dc:	410fc270 	.word	0x410fc270
 801a6e0:	e000e400 	.word	0xe000e400
 801a6e4:	20003cdc 	.word	0x20003cdc
 801a6e8:	20003cd8 	.word	0x20003cd8
 801a6ec:	20000114 	.word	0x20000114

0801a6f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a6f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a6f4:	2b0f      	cmp	r3, #15
 801a6f6:	d90f      	bls.n	801a718 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a6f8:	4a11      	ldr	r2, [pc, #68]	@ (801a740 <vPortValidateInterruptPriority+0x50>)
 801a6fa:	5c9b      	ldrb	r3, [r3, r2]
 801a6fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a6fe:	4a11      	ldr	r2, [pc, #68]	@ (801a744 <vPortValidateInterruptPriority+0x54>)
 801a700:	7812      	ldrb	r2, [r2, #0]
 801a702:	429a      	cmp	r2, r3
 801a704:	d908      	bls.n	801a718 <vPortValidateInterruptPriority+0x28>
 801a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a70a:	f383 8811 	msr	BASEPRI, r3
 801a70e:	f3bf 8f6f 	isb	sy
 801a712:	f3bf 8f4f 	dsb	sy
 801a716:	e7fe      	b.n	801a716 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a718:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801a71c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 801a720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a724:	4a08      	ldr	r2, [pc, #32]	@ (801a748 <vPortValidateInterruptPriority+0x58>)
 801a726:	6812      	ldr	r2, [r2, #0]
 801a728:	4293      	cmp	r3, r2
 801a72a:	d908      	bls.n	801a73e <vPortValidateInterruptPriority+0x4e>
 801a72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a730:	f383 8811 	msr	BASEPRI, r3
 801a734:	f3bf 8f6f 	isb	sy
 801a738:	f3bf 8f4f 	dsb	sy
 801a73c:	e7fe      	b.n	801a73c <vPortValidateInterruptPriority+0x4c>
	}
 801a73e:	4770      	bx	lr
 801a740:	e000e3f0 	.word	0xe000e3f0
 801a744:	20003cdc 	.word	0x20003cdc
 801a748:	20003cd8 	.word	0x20003cd8

0801a74c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a74c:	4a12      	ldr	r2, [pc, #72]	@ (801a798 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a74e:	f012 0f07 	tst.w	r2, #7
 801a752:	d01f      	beq.n	801a794 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a754:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a756:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a75a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801a75e:	33f8      	adds	r3, #248	@ 0xf8
 801a760:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a762:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a764:	480d      	ldr	r0, [pc, #52]	@ (801a79c <prvHeapInit+0x50>)
 801a766:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a768:	2100      	movs	r1, #0
 801a76a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a76c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801a76e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a770:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801a774:	480a      	ldr	r0, [pc, #40]	@ (801a7a0 <prvHeapInit+0x54>)
 801a776:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801a778:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a77a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a77c:	1a99      	subs	r1, r3, r2
 801a77e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a780:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a782:	4b08      	ldr	r3, [pc, #32]	@ (801a7a4 <prvHeapInit+0x58>)
 801a784:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a786:	4b08      	ldr	r3, [pc, #32]	@ (801a7a8 <prvHeapInit+0x5c>)
 801a788:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a78a:	4b08      	ldr	r3, [pc, #32]	@ (801a7ac <prvHeapInit+0x60>)
 801a78c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801a790:	601a      	str	r2, [r3, #0]
}
 801a792:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a794:	4b06      	ldr	r3, [pc, #24]	@ (801a7b0 <prvHeapInit+0x64>)
 801a796:	e7e5      	b.n	801a764 <prvHeapInit+0x18>
 801a798:	20003d00 	.word	0x20003d00
 801a79c:	20003cf8 	.word	0x20003cf8
 801a7a0:	20003cf4 	.word	0x20003cf4
 801a7a4:	20003cec 	.word	0x20003cec
 801a7a8:	20003cf0 	.word	0x20003cf0
 801a7ac:	20003ce0 	.word	0x20003ce0
 801a7b0:	000160f8 	.word	0x000160f8

0801a7b4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a7b4:	4b16      	ldr	r3, [pc, #88]	@ (801a810 <prvInsertBlockIntoFreeList+0x5c>)
 801a7b6:	461a      	mov	r2, r3
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	4283      	cmp	r3, r0
 801a7bc:	d3fb      	bcc.n	801a7b6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a7be:	6851      	ldr	r1, [r2, #4]
 801a7c0:	eb02 0c01 	add.w	ip, r2, r1
 801a7c4:	4584      	cmp	ip, r0
 801a7c6:	d009      	beq.n	801a7dc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a7c8:	6841      	ldr	r1, [r0, #4]
 801a7ca:	eb00 0c01 	add.w	ip, r0, r1
 801a7ce:	4563      	cmp	r3, ip
 801a7d0:	d009      	beq.n	801a7e6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a7d2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a7d4:	4290      	cmp	r0, r2
 801a7d6:	d019      	beq.n	801a80c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a7d8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801a7da:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a7dc:	6840      	ldr	r0, [r0, #4]
 801a7de:	4401      	add	r1, r0
 801a7e0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801a7e2:	4610      	mov	r0, r2
 801a7e4:	e7f0      	b.n	801a7c8 <prvInsertBlockIntoFreeList+0x14>
{
 801a7e6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a7e8:	4c0a      	ldr	r4, [pc, #40]	@ (801a814 <prvInsertBlockIntoFreeList+0x60>)
 801a7ea:	6824      	ldr	r4, [r4, #0]
 801a7ec:	42a3      	cmp	r3, r4
 801a7ee:	d00b      	beq.n	801a808 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a7f0:	685b      	ldr	r3, [r3, #4]
 801a7f2:	4419      	add	r1, r3
 801a7f4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a7f6:	6813      	ldr	r3, [r2, #0]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801a7fc:	4290      	cmp	r0, r2
 801a7fe:	d000      	beq.n	801a802 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a800:	6010      	str	r0, [r2, #0]
	}
}
 801a802:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a806:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a808:	6004      	str	r4, [r0, #0]
 801a80a:	e7f7      	b.n	801a7fc <prvInsertBlockIntoFreeList+0x48>
 801a80c:	4770      	bx	lr
 801a80e:	bf00      	nop
 801a810:	20003cf8 	.word	0x20003cf8
 801a814:	20003cf4 	.word	0x20003cf4

0801a818 <pvPortMalloc>:
{
 801a818:	b538      	push	{r3, r4, r5, lr}
 801a81a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801a81c:	f7ff f84a 	bl	80198b4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801a820:	4b38      	ldr	r3, [pc, #224]	@ (801a904 <pvPortMalloc+0xec>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	b1b3      	cbz	r3, 801a854 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a826:	4b38      	ldr	r3, [pc, #224]	@ (801a908 <pvPortMalloc+0xf0>)
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	421c      	tst	r4, r3
 801a82c:	d150      	bne.n	801a8d0 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801a82e:	2c00      	cmp	r4, #0
 801a830:	d050      	beq.n	801a8d4 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801a832:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a836:	f014 0f07 	tst.w	r4, #7
 801a83a:	d002      	beq.n	801a842 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a83c:	f022 0207 	bic.w	r2, r2, #7
 801a840:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a842:	2a00      	cmp	r2, #0
 801a844:	d055      	beq.n	801a8f2 <pvPortMalloc+0xda>
 801a846:	4b31      	ldr	r3, [pc, #196]	@ (801a90c <pvPortMalloc+0xf4>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d353      	bcc.n	801a8f6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801a84e:	4930      	ldr	r1, [pc, #192]	@ (801a910 <pvPortMalloc+0xf8>)
 801a850:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a852:	e004      	b.n	801a85e <pvPortMalloc+0x46>
			prvHeapInit();
 801a854:	f7ff ff7a 	bl	801a74c <prvHeapInit>
 801a858:	e7e5      	b.n	801a826 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801a85a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801a85c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a85e:	6863      	ldr	r3, [r4, #4]
 801a860:	4293      	cmp	r3, r2
 801a862:	d202      	bcs.n	801a86a <pvPortMalloc+0x52>
 801a864:	6823      	ldr	r3, [r4, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d1f7      	bne.n	801a85a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801a86a:	4b26      	ldr	r3, [pc, #152]	@ (801a904 <pvPortMalloc+0xec>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	42a3      	cmp	r3, r4
 801a870:	d043      	beq.n	801a8fa <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a872:	680d      	ldr	r5, [r1, #0]
 801a874:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a876:	6823      	ldr	r3, [r4, #0]
 801a878:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a87a:	6863      	ldr	r3, [r4, #4]
 801a87c:	1a9b      	subs	r3, r3, r2
 801a87e:	2b10      	cmp	r3, #16
 801a880:	d910      	bls.n	801a8a4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a882:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a884:	f010 0f07 	tst.w	r0, #7
 801a888:	d008      	beq.n	801a89c <pvPortMalloc+0x84>
 801a88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a88e:	f383 8811 	msr	BASEPRI, r3
 801a892:	f3bf 8f6f 	isb	sy
 801a896:	f3bf 8f4f 	dsb	sy
 801a89a:	e7fe      	b.n	801a89a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a89c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a89e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a8a0:	f7ff ff88 	bl	801a7b4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a8a4:	6862      	ldr	r2, [r4, #4]
 801a8a6:	4919      	ldr	r1, [pc, #100]	@ (801a90c <pvPortMalloc+0xf4>)
 801a8a8:	680b      	ldr	r3, [r1, #0]
 801a8aa:	1a9b      	subs	r3, r3, r2
 801a8ac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a8ae:	4919      	ldr	r1, [pc, #100]	@ (801a914 <pvPortMalloc+0xfc>)
 801a8b0:	6809      	ldr	r1, [r1, #0]
 801a8b2:	428b      	cmp	r3, r1
 801a8b4:	d201      	bcs.n	801a8ba <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a8b6:	4917      	ldr	r1, [pc, #92]	@ (801a914 <pvPortMalloc+0xfc>)
 801a8b8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a8ba:	4b13      	ldr	r3, [pc, #76]	@ (801a908 <pvPortMalloc+0xf0>)
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	4313      	orrs	r3, r2
 801a8c0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a8c2:	2300      	movs	r3, #0
 801a8c4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801a8c6:	4a14      	ldr	r2, [pc, #80]	@ (801a918 <pvPortMalloc+0x100>)
 801a8c8:	6813      	ldr	r3, [r2, #0]
 801a8ca:	3301      	adds	r3, #1
 801a8cc:	6013      	str	r3, [r2, #0]
 801a8ce:	e002      	b.n	801a8d6 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801a8d0:	2500      	movs	r5, #0
 801a8d2:	e000      	b.n	801a8d6 <pvPortMalloc+0xbe>
 801a8d4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801a8d6:	f7ff f887 	bl	80199e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a8da:	f015 0f07 	tst.w	r5, #7
 801a8de:	d00e      	beq.n	801a8fe <pvPortMalloc+0xe6>
 801a8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8e4:	f383 8811 	msr	BASEPRI, r3
 801a8e8:	f3bf 8f6f 	isb	sy
 801a8ec:	f3bf 8f4f 	dsb	sy
 801a8f0:	e7fe      	b.n	801a8f0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801a8f2:	2500      	movs	r5, #0
 801a8f4:	e7ef      	b.n	801a8d6 <pvPortMalloc+0xbe>
 801a8f6:	2500      	movs	r5, #0
 801a8f8:	e7ed      	b.n	801a8d6 <pvPortMalloc+0xbe>
 801a8fa:	2500      	movs	r5, #0
 801a8fc:	e7eb      	b.n	801a8d6 <pvPortMalloc+0xbe>
}
 801a8fe:	4628      	mov	r0, r5
 801a900:	bd38      	pop	{r3, r4, r5, pc}
 801a902:	bf00      	nop
 801a904:	20003cf4 	.word	0x20003cf4
 801a908:	20003ce0 	.word	0x20003ce0
 801a90c:	20003cf0 	.word	0x20003cf0
 801a910:	20003cf8 	.word	0x20003cf8
 801a914:	20003cec 	.word	0x20003cec
 801a918:	20003ce8 	.word	0x20003ce8

0801a91c <vPortFree>:
	if( pv != NULL )
 801a91c:	2800      	cmp	r0, #0
 801a91e:	d034      	beq.n	801a98a <vPortFree+0x6e>
{
 801a920:	b538      	push	{r3, r4, r5, lr}
 801a922:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801a924:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a928:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a92c:	4a17      	ldr	r2, [pc, #92]	@ (801a98c <vPortFree+0x70>)
 801a92e:	6812      	ldr	r2, [r2, #0]
 801a930:	4213      	tst	r3, r2
 801a932:	d108      	bne.n	801a946 <vPortFree+0x2a>
 801a934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a938:	f383 8811 	msr	BASEPRI, r3
 801a93c:	f3bf 8f6f 	isb	sy
 801a940:	f3bf 8f4f 	dsb	sy
 801a944:	e7fe      	b.n	801a944 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a946:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801a94a:	b141      	cbz	r1, 801a95e <vPortFree+0x42>
 801a94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a950:	f383 8811 	msr	BASEPRI, r3
 801a954:	f3bf 8f6f 	isb	sy
 801a958:	f3bf 8f4f 	dsb	sy
 801a95c:	e7fe      	b.n	801a95c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a95e:	ea23 0302 	bic.w	r3, r3, r2
 801a962:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801a966:	f7fe ffa5 	bl	80198b4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a96a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801a96e:	4a08      	ldr	r2, [pc, #32]	@ (801a990 <vPortFree+0x74>)
 801a970:	6813      	ldr	r3, [r2, #0]
 801a972:	440b      	add	r3, r1
 801a974:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a976:	4628      	mov	r0, r5
 801a978:	f7ff ff1c 	bl	801a7b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a97c:	4a05      	ldr	r2, [pc, #20]	@ (801a994 <vPortFree+0x78>)
 801a97e:	6813      	ldr	r3, [r2, #0]
 801a980:	3301      	adds	r3, #1
 801a982:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801a984:	f7ff f830 	bl	80199e8 <xTaskResumeAll>
}
 801a988:	bd38      	pop	{r3, r4, r5, pc}
 801a98a:	4770      	bx	lr
 801a98c:	20003ce0 	.word	0x20003ce0
 801a990:	20003cf0 	.word	0x20003cf0
 801a994:	20003ce4 	.word	0x20003ce4

0801a998 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a99a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801a99c:	f7fe ff8a 	bl	80198b4 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801a9a0:	4b17      	ldr	r3, [pc, #92]	@ (801aa00 <vPortGetHeapStats+0x68>)
 801a9a2:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801a9a4:	b193      	cbz	r3, 801a9cc <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801a9a6:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a9aa:	2500      	movs	r5, #0
 801a9ac:	462c      	mov	r4, r5
 801a9ae:	e004      	b.n	801a9ba <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801a9b0:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801a9b2:	4a14      	ldr	r2, [pc, #80]	@ (801aa04 <vPortGetHeapStats+0x6c>)
 801a9b4:	6812      	ldr	r2, [r2, #0]
 801a9b6:	429a      	cmp	r2, r3
 801a9b8:	d00c      	beq.n	801a9d4 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801a9ba:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801a9bc:	685a      	ldr	r2, [r3, #4]
 801a9be:	42aa      	cmp	r2, r5
 801a9c0:	d900      	bls.n	801a9c4 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801a9c2:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801a9c4:	42b2      	cmp	r2, r6
 801a9c6:	d2f3      	bcs.n	801a9b0 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801a9c8:	4616      	mov	r6, r2
 801a9ca:	e7f1      	b.n	801a9b0 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801a9cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a9d0:	2500      	movs	r5, #0
 801a9d2:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801a9d4:	f7ff f808 	bl	80199e8 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801a9d8:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801a9da:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801a9dc:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801a9de:	f7ff fd61 	bl	801a4a4 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801a9e2:	4b09      	ldr	r3, [pc, #36]	@ (801aa08 <vPortGetHeapStats+0x70>)
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801a9e8:	4b08      	ldr	r3, [pc, #32]	@ (801aa0c <vPortGetHeapStats+0x74>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801a9ee:	4b08      	ldr	r3, [pc, #32]	@ (801aa10 <vPortGetHeapStats+0x78>)
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801a9f4:	4b07      	ldr	r3, [pc, #28]	@ (801aa14 <vPortGetHeapStats+0x7c>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801a9fa:	f7ff fd75 	bl	801a4e8 <vPortExitCritical>
}
 801a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa00:	20003cf8 	.word	0x20003cf8
 801aa04:	20003cf4 	.word	0x20003cf4
 801aa08:	20003cf0 	.word	0x20003cf0
 801aa0c:	20003ce8 	.word	0x20003ce8
 801aa10:	20003ce4 	.word	0x20003ce4
 801aa14:	20003cec 	.word	0x20003cec

0801aa18 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801aa18:	2000      	movs	r0, #0
 801aa1a:	4770      	bx	lr

0801aa1c <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801aa1c:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801aa1e:	fb01 f400 	mul.w	r4, r1, r0
 801aa22:	4620      	mov	r0, r4
 801aa24:	f7ff fef8 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801aa28:	4605      	mov	r5, r0
 801aa2a:	b118      	cbz	r0, 801aa34 <mg_calloc+0x18>
 801aa2c:	4622      	mov	r2, r4
 801aa2e:	2100      	movs	r1, #0
 801aa30:	f011 ff26 	bl	802c880 <memset>
}
 801aa34:	4628      	mov	r0, r5
 801aa36:	bd38      	pop	{r3, r4, r5, pc}

0801aa38 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801aa38:	b508      	push	{r3, lr}
 801aa3a:	4684      	mov	ip, r0
 801aa3c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801aa3e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801aa42:	428b      	cmp	r3, r1
 801aa44:	d90a      	bls.n	801aa5c <block_device_read+0x24>
 801aa46:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801aa48:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801aa4c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801aa50:	fb01 e103 	mla	r1, r1, r3, lr
 801aa54:	f7fb f955 	bl	8015d02 <sFLASH_ReadBuffer>
}
 801aa58:	2000      	movs	r0, #0
 801aa5a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801aa5c:	4b03      	ldr	r3, [pc, #12]	@ (801aa6c <block_device_read+0x34>)
 801aa5e:	4a04      	ldr	r2, [pc, #16]	@ (801aa70 <block_device_read+0x38>)
 801aa60:	f240 1119 	movw	r1, #281	@ 0x119
 801aa64:	4803      	ldr	r0, [pc, #12]	@ (801aa74 <block_device_read+0x3c>)
 801aa66:	f00f f9b9 	bl	8029ddc <__assert_func>
 801aa6a:	bf00      	nop
 801aa6c:	08038ddc 	.word	0x08038ddc
 801aa70:	08038e58 	.word	0x08038e58
 801aa74:	08038df4 	.word	0x08038df4

0801aa78 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801aa78:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801aa7a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801aa7c:	428b      	cmp	r3, r1
 801aa7e:	d906      	bls.n	801aa8e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801aa80:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801aa82:	fb01 f000 	mul.w	r0, r1, r0
 801aa86:	f7fb fa79 	bl	8015f7c <sFLASH_EraseSector>
}
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801aa8e:	4b03      	ldr	r3, [pc, #12]	@ (801aa9c <block_device_erase+0x24>)
 801aa90:	4a03      	ldr	r2, [pc, #12]	@ (801aaa0 <block_device_erase+0x28>)
 801aa92:	f240 1121 	movw	r1, #289	@ 0x121
 801aa96:	4803      	ldr	r0, [pc, #12]	@ (801aaa4 <block_device_erase+0x2c>)
 801aa98:	f00f f9a0 	bl	8029ddc <__assert_func>
 801aa9c:	08038ddc 	.word	0x08038ddc
 801aaa0:	08038e44 	.word	0x08038e44
 801aaa4:	08038df4 	.word	0x08038df4

0801aaa8 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801aaa8:	b508      	push	{r3, lr}
 801aaaa:	4684      	mov	ip, r0
 801aaac:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801aaae:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801aab2:	428b      	cmp	r3, r1
 801aab4:	d90a      	bls.n	801aacc <block_device_prog+0x24>
 801aab6:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801aab8:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801aabc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801aac0:	fb01 e103 	mla	r1, r1, r3, lr
 801aac4:	f7fb fa98 	bl	8015ff8 <sFLASH_WriteBuffer>
}
 801aac8:	2000      	movs	r0, #0
 801aaca:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801aacc:	4b03      	ldr	r3, [pc, #12]	@ (801aadc <block_device_prog+0x34>)
 801aace:	4a04      	ldr	r2, [pc, #16]	@ (801aae0 <block_device_prog+0x38>)
 801aad0:	f240 1129 	movw	r1, #297	@ 0x129
 801aad4:	4803      	ldr	r0, [pc, #12]	@ (801aae4 <block_device_prog+0x3c>)
 801aad6:	f00f f981 	bl	8029ddc <__assert_func>
 801aada:	bf00      	nop
 801aadc:	08038ddc 	.word	0x08038ddc
 801aae0:	08038e30 	.word	0x08038e30
 801aae4:	08038df4 	.word	0x08038df4

0801aae8 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801aae8:	b530      	push	{r4, r5, lr}
 801aaea:	b0c3      	sub	sp, #268	@ 0x10c
 801aaec:	460d      	mov	r5, r1
 801aaee:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801aaf0:	466a      	mov	r2, sp
 801aaf2:	4601      	mov	r1, r0
 801aaf4:	480b      	ldr	r0, [pc, #44]	@ (801ab24 <mg_fs_lfs_status+0x3c>)
 801aaf6:	f004 fd97 	bl	801f628 <lfs_stat>
 801aafa:	b110      	cbz	r0, 801ab02 <mg_fs_lfs_status+0x1a>
    return 0;
 801aafc:	2000      	movs	r0, #0
}
 801aafe:	b043      	add	sp, #268	@ 0x10c
 801ab00:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801ab02:	b10d      	cbz	r5, 801ab08 <mg_fs_lfs_status+0x20>
 801ab04:	9b01      	ldr	r3, [sp, #4]
 801ab06:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801ab08:	b11c      	cbz	r4, 801ab12 <mg_fs_lfs_status+0x2a>
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801ab12:	f89d 3000 	ldrb.w	r3, [sp]
 801ab16:	2b02      	cmp	r3, #2
 801ab18:	d001      	beq.n	801ab1e <mg_fs_lfs_status+0x36>
 801ab1a:	2001      	movs	r0, #1
 801ab1c:	e7ef      	b.n	801aafe <mg_fs_lfs_status+0x16>
 801ab1e:	2004      	movs	r0, #4
 801ab20:	e7ed      	b.n	801aafe <mg_fs_lfs_status+0x16>
 801ab22:	bf00      	nop
 801ab24:	20019e58 	.word	0x20019e58

0801ab28 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801ab28:	b530      	push	{r4, r5, lr}
 801ab2a:	b0d1      	sub	sp, #324	@ 0x144
 801ab2c:	460d      	mov	r5, r1
 801ab2e:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801ab30:	4602      	mov	r2, r0
 801ab32:	a901      	add	r1, sp, #4
 801ab34:	480a      	ldr	r0, [pc, #40]	@ (801ab60 <mg_fs_lfs_list+0x38>)
 801ab36:	f004 fe9d 	bl	801f874 <lfs_dir_open>
 801ab3a:	b120      	cbz	r0, 801ab46 <mg_fs_lfs_list+0x1e>
}
 801ab3c:	b051      	add	sp, #324	@ 0x144
 801ab3e:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801ab40:	4621      	mov	r1, r4
 801ab42:	a810      	add	r0, sp, #64	@ 0x40
 801ab44:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801ab46:	aa0e      	add	r2, sp, #56	@ 0x38
 801ab48:	a901      	add	r1, sp, #4
 801ab4a:	4805      	ldr	r0, [pc, #20]	@ (801ab60 <mg_fs_lfs_list+0x38>)
 801ab4c:	f004 fecd 	bl	801f8ea <lfs_dir_read>
 801ab50:	2800      	cmp	r0, #0
 801ab52:	dcf5      	bgt.n	801ab40 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801ab54:	a901      	add	r1, sp, #4
 801ab56:	4802      	ldr	r0, [pc, #8]	@ (801ab60 <mg_fs_lfs_list+0x38>)
 801ab58:	f004 feb4 	bl	801f8c4 <lfs_dir_close>
}
 801ab5c:	e7ee      	b.n	801ab3c <mg_fs_lfs_list+0x14>
 801ab5e:	bf00      	nop
 801ab60:	20019e58 	.word	0x20019e58

0801ab64 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801ab64:	b570      	push	{r4, r5, r6, lr}
 801ab66:	4605      	mov	r5, r0
 801ab68:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801ab6a:	2054      	movs	r0, #84	@ 0x54
 801ab6c:	f7ff fe54 	bl	801a818 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801ab70:	4606      	mov	r6, r0
 801ab72:	b188      	cbz	r0, 801ab98 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801ab74:	f014 0301 	ands.w	r3, r4, #1
 801ab78:	d000      	beq.n	801ab7c <mg_fs_lfs_open+0x18>
 801ab7a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801ab7c:	f014 0f02 	tst.w	r4, #2
 801ab80:	d003      	beq.n	801ab8a <mg_fs_lfs_open+0x26>
 801ab82:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801ab86:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801ab8a:	462a      	mov	r2, r5
 801ab8c:	4631      	mov	r1, r6
 801ab8e:	4806      	ldr	r0, [pc, #24]	@ (801aba8 <mg_fs_lfs_open+0x44>)
 801ab90:	f004 fd60 	bl	801f654 <lfs_file_open>
 801ab94:	2800      	cmp	r0, #0
 801ab96:	db01      	blt.n	801ab9c <mg_fs_lfs_open+0x38>
}
 801ab98:	4630      	mov	r0, r6
 801ab9a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	f7ff febd 	bl	801a91c <vPortFree>
        return NULL;
 801aba2:	2600      	movs	r6, #0
 801aba4:	e7f8      	b.n	801ab98 <mg_fs_lfs_open+0x34>
 801aba6:	bf00      	nop
 801aba8:	20019e58 	.word	0x20019e58

0801abac <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801abac:	b510      	push	{r4, lr}
 801abae:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801abb0:	4601      	mov	r1, r0
 801abb2:	4803      	ldr	r0, [pc, #12]	@ (801abc0 <mg_fs_lfs_close+0x14>)
 801abb4:	f004 fd7a 	bl	801f6ac <lfs_file_close>
    free(file);
 801abb8:	4620      	mov	r0, r4
 801abba:	f7ff feaf 	bl	801a91c <vPortFree>
}
 801abbe:	bd10      	pop	{r4, pc}
 801abc0:	20019e58 	.word	0x20019e58

0801abc4 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801abc4:	b508      	push	{r3, lr}
 801abc6:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801abc8:	460a      	mov	r2, r1
 801abca:	4601      	mov	r1, r0
 801abcc:	4802      	ldr	r0, [pc, #8]	@ (801abd8 <mg_fs_lfs_read+0x14>)
 801abce:	f004 fd93 	bl	801f6f8 <lfs_file_read>
}
 801abd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801abd6:	bd08      	pop	{r3, pc}
 801abd8:	20019e58 	.word	0x20019e58

0801abdc <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801abdc:	b508      	push	{r3, lr}
 801abde:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801abe0:	460a      	mov	r2, r1
 801abe2:	4601      	mov	r1, r0
 801abe4:	4802      	ldr	r0, [pc, #8]	@ (801abf0 <mg_fs_lfs_write+0x14>)
 801abe6:	f004 fdb3 	bl	801f750 <lfs_file_write>
}
 801abea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801abee:	bd08      	pop	{r3, pc}
 801abf0:	20019e58 	.word	0x20019e58

0801abf4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801abf4:	b510      	push	{r4, lr}
 801abf6:	4604      	mov	r4, r0
 801abf8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801abfa:	2300      	movs	r3, #0
 801abfc:	4601      	mov	r1, r0
 801abfe:	4809      	ldr	r0, [pc, #36]	@ (801ac24 <mg_fs_lfs_seek+0x30>)
 801ac00:	f004 fdd2 	bl	801f7a8 <lfs_file_seek>
 801ac04:	2800      	cmp	r0, #0
 801ac06:	db06      	blt.n	801ac16 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801ac08:	4621      	mov	r1, r4
 801ac0a:	4806      	ldr	r0, [pc, #24]	@ (801ac24 <mg_fs_lfs_seek+0x30>)
 801ac0c:	f004 fdf8 	bl	801f800 <lfs_file_tell>
     if (pos < 0) {
 801ac10:	2800      	cmp	r0, #0
 801ac12:	db03      	blt.n	801ac1c <mg_fs_lfs_seek+0x28>
}
 801ac14:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801ac16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac1a:	e7fb      	b.n	801ac14 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801ac1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ac20:	e7f8      	b.n	801ac14 <mg_fs_lfs_seek+0x20>
 801ac22:	bf00      	nop
 801ac24:	20019e58 	.word	0x20019e58

0801ac28 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801ac28:	b508      	push	{r3, lr}
 801ac2a:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801ac2c:	4601      	mov	r1, r0
 801ac2e:	4803      	ldr	r0, [pc, #12]	@ (801ac3c <mg_fs_lfs_rename+0x14>)
 801ac30:	f004 fce5 	bl	801f5fe <lfs_rename>
}
 801ac34:	fab0 f080 	clz	r0, r0
 801ac38:	0940      	lsrs	r0, r0, #5
 801ac3a:	bd08      	pop	{r3, pc}
 801ac3c:	20019e58 	.word	0x20019e58

0801ac40 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801ac40:	b508      	push	{r3, lr}
 801ac42:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801ac44:	4803      	ldr	r0, [pc, #12]	@ (801ac54 <mg_fs_lfs_remove+0x14>)
 801ac46:	f004 fcc7 	bl	801f5d8 <lfs_remove>
}
 801ac4a:	fab0 f080 	clz	r0, r0
 801ac4e:	0940      	lsrs	r0, r0, #5
 801ac50:	bd08      	pop	{r3, pc}
 801ac52:	bf00      	nop
 801ac54:	20019e58 	.word	0x20019e58

0801ac58 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801ac58:	b508      	push	{r3, lr}
 801ac5a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801ac5c:	4803      	ldr	r0, [pc, #12]	@ (801ac6c <mg_fs_lfs_mkdir+0x14>)
 801ac5e:	f004 fdf5 	bl	801f84c <lfs_mkdir>
}
 801ac62:	fab0 f080 	clz	r0, r0
 801ac66:	0940      	lsrs	r0, r0, #5
 801ac68:	bd08      	pop	{r3, pc}
 801ac6a:	bf00      	nop
 801ac6c:	20019e58 	.word	0x20019e58

0801ac70 <mg_fs_mounted>:
}
 801ac70:	4b01      	ldr	r3, [pc, #4]	@ (801ac78 <mg_fs_mounted+0x8>)
 801ac72:	7818      	ldrb	r0, [r3, #0]
 801ac74:	4770      	bx	lr
 801ac76:	bf00      	nop
 801ac78:	20019df8 	.word	0x20019df8

0801ac7c <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac80:	b090      	sub	sp, #64	@ 0x40
 801ac82:	4680      	mov	r8, r0
 801ac84:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 801ac86:	4668      	mov	r0, sp
 801ac88:	f7fb f894 	bl	8015db4 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801ac8c:	9b00      	ldr	r3, [sp, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d054      	beq.n	801ad3c <lfs_fs_ll_init+0xc0>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801ac92:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801ac96:	4621      	mov	r1, r4
 801ac98:	2001      	movs	r0, #1
 801ac9a:	f7ff febf 	bl	801aa1c <mg_calloc>
 801ac9e:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801aca0:	4621      	mov	r1, r4
 801aca2:	2001      	movs	r0, #1
 801aca4:	f7ff feba 	bl	801aa1c <mg_calloc>
 801aca8:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801acaa:	4621      	mov	r1, r4
 801acac:	2001      	movs	r0, #1
 801acae:	f7ff feb5 	bl	801aa1c <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801acb2:	2d00      	cmp	r5, #0
 801acb4:	d02b      	beq.n	801ad0e <lfs_fs_ll_init+0x92>
	cfg.read_size         = flash_info.read_size;
 801acb6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801acba:	4922      	ldr	r1, [pc, #136]	@ (801ad44 <lfs_fs_ll_init+0xc8>)
 801acbc:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801acbe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801acc2:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801acc4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801acc8:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801acca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801acce:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801acd0:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801acd2:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801acd4:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801acd6:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801acd8:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801acda:	4b1b      	ldr	r3, [pc, #108]	@ (801ad48 <lfs_fs_ll_init+0xcc>)
 801acdc:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801acde:	4b1b      	ldr	r3, [pc, #108]	@ (801ad4c <lfs_fs_ll_init+0xd0>)
 801ace0:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801ace2:	4b1b      	ldr	r3, [pc, #108]	@ (801ad50 <lfs_fs_ll_init+0xd4>)
 801ace4:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801ace6:	4b1b      	ldr	r3, [pc, #108]	@ (801ad54 <lfs_fs_ll_init+0xd8>)
 801ace8:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801acea:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 801acee:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801acf0:	f242 7310 	movw	r3, #10000	@ 0x2710
 801acf4:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801acf6:	4818      	ldr	r0, [pc, #96]	@ (801ad58 <lfs_fs_ll_init+0xdc>)
 801acf8:	f004 fc5b 	bl	801f5b2 <lfs_mount>
 801acfc:	2800      	cmp	r0, #0
 801acfe:	db0d      	blt.n	801ad1c <lfs_fs_ll_init+0xa0>
    	fs_mounted = 1;
 801ad00:	4b16      	ldr	r3, [pc, #88]	@ (801ad5c <lfs_fs_ll_init+0xe0>)
 801ad02:	2201      	movs	r2, #1
 801ad04:	701a      	strb	r2, [r3, #0]
    	return 0;
 801ad06:	2000      	movs	r0, #0
}
 801ad08:	b010      	add	sp, #64	@ 0x40
 801ad0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801ad0e:	2e00      	cmp	r6, #0
 801ad10:	d1d1      	bne.n	801acb6 <lfs_fs_ll_init+0x3a>
 801ad12:	2800      	cmp	r0, #0
 801ad14:	d1cf      	bne.n	801acb6 <lfs_fs_ll_init+0x3a>
		return -2;
 801ad16:	f06f 0001 	mvn.w	r0, #1
 801ad1a:	e7f5      	b.n	801ad08 <lfs_fs_ll_init+0x8c>
    	lfs_format(&lfs, &cfg);
 801ad1c:	4d09      	ldr	r5, [pc, #36]	@ (801ad44 <lfs_fs_ll_init+0xc8>)
 801ad1e:	4c0e      	ldr	r4, [pc, #56]	@ (801ad58 <lfs_fs_ll_init+0xdc>)
 801ad20:	4629      	mov	r1, r5
 801ad22:	4620      	mov	r0, r4
 801ad24:	f004 fc32 	bl	801f58c <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801ad28:	4629      	mov	r1, r5
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	f004 fc41 	bl	801f5b2 <lfs_mount>
 801ad30:	2800      	cmp	r0, #0
 801ad32:	d1e9      	bne.n	801ad08 <lfs_fs_ll_init+0x8c>
 801ad34:	4b09      	ldr	r3, [pc, #36]	@ (801ad5c <lfs_fs_ll_init+0xe0>)
 801ad36:	2201      	movs	r2, #1
 801ad38:	701a      	strb	r2, [r3, #0]
    	return err;
 801ad3a:	e7e5      	b.n	801ad08 <lfs_fs_ll_init+0x8c>
	if (flash_info.flash_id == 0x0) return -1;
 801ad3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad40:	e7e2      	b.n	801ad08 <lfs_fs_ll_init+0x8c>
 801ad42:	bf00      	nop
 801ad44:	20019dfc 	.word	0x20019dfc
 801ad48:	0801aa39 	.word	0x0801aa39
 801ad4c:	0801aaa9 	.word	0x0801aaa9
 801ad50:	0801aa79 	.word	0x0801aa79
 801ad54:	0801aa19 	.word	0x0801aa19
 801ad58:	20019e58 	.word	0x20019e58
 801ad5c:	20019df8 	.word	0x20019df8

0801ad60 <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801ad60:	6803      	ldr	r3, [r0, #0]
 801ad62:	680a      	ldr	r2, [r1, #0]
 801ad64:	4293      	cmp	r3, r2
 801ad66:	d004      	beq.n	801ad72 <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801ad68:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801ad6a:	428b      	cmp	r3, r1
 801ad6c:	d015      	beq.n	801ad9a <lfs_pair_issync+0x3a>
 801ad6e:	2000      	movs	r0, #0
 801ad70:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801ad72:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801ad74:	6844      	ldr	r4, [r0, #4]
 801ad76:	684d      	ldr	r5, [r1, #4]
 801ad78:	42ac      	cmp	r4, r5
 801ad7a:	d00a      	beq.n	801ad92 <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801ad7c:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801ad7e:	428b      	cmp	r3, r1
 801ad80:	d002      	beq.n	801ad88 <lfs_pair_issync+0x28>
 801ad82:	2000      	movs	r0, #0
}
 801ad84:	bc30      	pop	{r4, r5}
 801ad86:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801ad88:	6843      	ldr	r3, [r0, #4]
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d003      	beq.n	801ad96 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801ad8e:	2000      	movs	r0, #0
 801ad90:	e7f8      	b.n	801ad84 <lfs_pair_issync+0x24>
 801ad92:	2001      	movs	r0, #1
 801ad94:	e7f6      	b.n	801ad84 <lfs_pair_issync+0x24>
 801ad96:	2001      	movs	r0, #1
 801ad98:	e7f4      	b.n	801ad84 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801ad9a:	6843      	ldr	r3, [r0, #4]
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d001      	beq.n	801ada4 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801ada0:	2000      	movs	r0, #0
 801ada2:	4770      	bx	lr
 801ada4:	2001      	movs	r0, #1
}
 801ada6:	4770      	bx	lr

0801ada8 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801ada8:	2300      	movs	r3, #0
 801adaa:	2b02      	cmp	r3, #2
 801adac:	dc0d      	bgt.n	801adca <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801adae:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801adb0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801adb4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801adb8:	4062      	eors	r2, r4
 801adba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801adbe:	3301      	adds	r3, #1
 801adc0:	2b02      	cmp	r3, #2
 801adc2:	ddf5      	ble.n	801adb0 <lfs_gstate_xor+0x8>
    }
}
 801adc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adc8:	4770      	bx	lr
 801adca:	4770      	bx	lr

0801adcc <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801adcc:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801adce:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801add0:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801add4:	d00f      	beq.n	801adf6 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801add6:	6843      	ldr	r3, [r0, #4]
 801add8:	680a      	ldr	r2, [r1, #0]
 801adda:	4293      	cmp	r3, r2
 801addc:	d00d      	beq.n	801adfa <lfs_gstate_hasmovehere+0x2e>
 801adde:	6880      	ldr	r0, [r0, #8]
 801ade0:	6849      	ldr	r1, [r1, #4]
 801ade2:	4288      	cmp	r0, r1
 801ade4:	d00b      	beq.n	801adfe <lfs_gstate_hasmovehere+0x32>
 801ade6:	428b      	cmp	r3, r1
 801ade8:	d00b      	beq.n	801ae02 <lfs_gstate_hasmovehere+0x36>
 801adea:	4282      	cmp	r2, r0
 801adec:	d001      	beq.n	801adf2 <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801adee:	2000      	movs	r0, #0
}
 801adf0:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801adf2:	2001      	movs	r0, #1
 801adf4:	4770      	bx	lr
 801adf6:	2000      	movs	r0, #0
 801adf8:	4770      	bx	lr
 801adfa:	2001      	movs	r0, #1
 801adfc:	4770      	bx	lr
 801adfe:	2001      	movs	r0, #1
 801ae00:	4770      	bx	lr
 801ae02:	2001      	movs	r0, #1
 801ae04:	4770      	bx	lr

0801ae06 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801ae06:	b082      	sub	sp, #8
 801ae08:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801ae0a:	ab01      	add	r3, sp, #4
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	b11b      	cbz	r3, 801ae18 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801ae10:	428b      	cmp	r3, r1
 801ae12:	d1fb      	bne.n	801ae0c <lfs_mlist_isopen+0x6>
            return true;
 801ae14:	2001      	movs	r0, #1
 801ae16:	e000      	b.n	801ae1a <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801ae18:	2000      	movs	r0, #0
}
 801ae1a:	b002      	add	sp, #8
 801ae1c:	4770      	bx	lr

0801ae1e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801ae1e:	3028      	adds	r0, #40	@ 0x28
 801ae20:	e000      	b.n	801ae24 <lfs_mlist_remove+0x6>
 801ae22:	4618      	mov	r0, r3
 801ae24:	6803      	ldr	r3, [r0, #0]
 801ae26:	b123      	cbz	r3, 801ae32 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801ae28:	428b      	cmp	r3, r1
 801ae2a:	d1fa      	bne.n	801ae22 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	6003      	str	r3, [r0, #0]
            break;
 801ae30:	4770      	bx	lr
        }
    }
}
 801ae32:	4770      	bx	lr

0801ae34 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801ae34:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ae36:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801ae38:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801ae3a:	4770      	bx	lr

0801ae3c <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801ae3c:	4800      	ldr	r0, [pc, #0]	@ (801ae40 <lfs_fs_disk_version+0x4>)
 801ae3e:	4770      	bx	lr
 801ae40:	00020001 	.word	0x00020001

0801ae44 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801ae44:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801ae46:	f7ff fff9 	bl	801ae3c <lfs_fs_disk_version>

}
 801ae4a:	0c00      	lsrs	r0, r0, #16
 801ae4c:	bd08      	pop	{r3, pc}

0801ae4e <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801ae4e:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801ae50:	f7ff fff4 	bl	801ae3c <lfs_fs_disk_version>
}
 801ae54:	b280      	uxth	r0, r0
 801ae56:	bd08      	pop	{r3, pc}

0801ae58 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801ae58:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ae5a:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801ae5c:	4770      	bx	lr

0801ae5e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801ae5e:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801ae60:	2200      	movs	r2, #0
 801ae62:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801ae64:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801ae66:	f7ff fff7 	bl	801ae58 <lfs_alloc_ckpoint>
}
 801ae6a:	bd08      	pop	{r3, pc}

0801ae6c <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801ae6c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ae6e:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801ae70:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ae72:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801ae74:	fbb1 f2f3 	udiv	r2, r1, r3
 801ae78:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801ae7c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801ae7e:	428b      	cmp	r3, r1
 801ae80:	d90d      	bls.n	801ae9e <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801ae82:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801ae84:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801ae86:	08c8      	lsrs	r0, r1, #3
 801ae88:	5c23      	ldrb	r3, [r4, r0]
 801ae8a:	f001 0107 	and.w	r1, r1, #7
 801ae8e:	2201      	movs	r2, #1
 801ae90:	408a      	lsls	r2, r1
 801ae92:	4313      	orrs	r3, r2
 801ae94:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801ae96:	2000      	movs	r0, #0
 801ae98:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae9c:	4770      	bx	lr
 801ae9e:	2000      	movs	r0, #0
 801aea0:	4770      	bx	lr
	...

0801aea4 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801aea4:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801aea6:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801aeaa:	d01c      	beq.n	801aee6 <lfs_dir_traverse_filter+0x42>
 801aeac:	4a19      	ldr	r2, [pc, #100]	@ (801af14 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801aeae:	6803      	ldr	r3, [r0, #0]
 801aeb0:	ea83 0401 	eor.w	r4, r3, r1
 801aeb4:	4214      	tst	r4, r2
 801aeb6:	d018      	beq.n	801aeea <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801aeb8:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801aebc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801aec0:	d013      	beq.n	801aeea <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801aec2:	4c14      	ldr	r4, [pc, #80]	@ (801af14 <lfs_dir_traverse_filter+0x70>)
 801aec4:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801aec6:	4a14      	ldr	r2, [pc, #80]	@ (801af18 <lfs_dir_traverse_filter+0x74>)
 801aec8:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801aeca:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801aece:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801aed2:	4294      	cmp	r4, r2
 801aed4:	d009      	beq.n	801aeea <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801aed6:	0d0a      	lsrs	r2, r1, #20
 801aed8:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801aedc:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801aee0:	d009      	beq.n	801aef6 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801aee2:	2000      	movs	r0, #0
 801aee4:	e004      	b.n	801aef0 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801aee6:	4a0d      	ldr	r2, [pc, #52]	@ (801af1c <lfs_dir_traverse_filter+0x78>)
 801aee8:	e7e1      	b.n	801aeae <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801aeea:	2300      	movs	r3, #0
 801aeec:	6003      	str	r3, [r0, #0]
        return true;
 801aeee:	2001      	movs	r0, #1
}
 801aef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aef4:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801aef6:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801aefa:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801aefe:	428c      	cmp	r4, r1
 801af00:	d305      	bcc.n	801af0e <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801af02:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801af04:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801af08:	6003      	str	r3, [r0, #0]
    return false;
 801af0a:	2000      	movs	r0, #0
 801af0c:	e7f0      	b.n	801aef0 <lfs_dir_traverse_filter+0x4c>
 801af0e:	2000      	movs	r0, #0
 801af10:	e7ee      	b.n	801aef0 <lfs_dir_traverse_filter+0x4c>
 801af12:	bf00      	nop
 801af14:	7ffffc00 	.word	0x7ffffc00
 801af18:	000ffc00 	.word	0x000ffc00
 801af1c:	700ffc00 	.word	0x700ffc00

0801af20 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801af20:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801af24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801af28:	bf08      	it	eq
 801af2a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801af2c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801af30:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801af32:	6803      	ldr	r3, [r0, #0]
 801af34:	440b      	add	r3, r1
 801af36:	6003      	str	r3, [r0, #0]
    return 0;
}
 801af38:	2000      	movs	r0, #0
 801af3a:	4770      	bx	lr

0801af3c <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801af3c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801af3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801af40:	2b00      	cmp	r3, #0
 801af42:	dd0b      	ble.n	801af5c <lfs_dir_needsrelocation+0x20>
 801af44:	688a      	ldr	r2, [r1, #8]
 801af46:	3201      	adds	r2, #1
 801af48:	3301      	adds	r3, #1
 801af4a:	f043 0301 	orr.w	r3, r3, #1
 801af4e:	fbb2 f1f3 	udiv	r1, r2, r3
 801af52:	fb03 2211 	mls	r2, r3, r1, r2
 801af56:	b11a      	cbz	r2, 801af60 <lfs_dir_needsrelocation+0x24>
 801af58:	2000      	movs	r0, #0
 801af5a:	4770      	bx	lr
 801af5c:	2000      	movs	r0, #0
 801af5e:	4770      	bx	lr
 801af60:	2001      	movs	r0, #1
}
 801af62:	4770      	bx	lr

0801af64 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801af64:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801af66:	f7ff ff5a 	bl	801ae1e <lfs_mlist_remove>

    return 0;
}
 801af6a:	2000      	movs	r0, #0
 801af6c:	bd08      	pop	{r3, pc}

0801af6e <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801af6e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801af70:	4770      	bx	lr

0801af72 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801af72:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801af74:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801af78:	d101      	bne.n	801af7e <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801af7a:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801af7c:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801af7e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801af80:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801af82:	4298      	cmp	r0, r3
 801af84:	bf38      	it	cc
 801af86:	4618      	movcc	r0, r3
 801af88:	4770      	bx	lr

0801af8a <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801af8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801af8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801af90:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801af94:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801af96:	4770      	bx	lr

0801af98 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801af98:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801af9a:	4b13      	ldr	r3, [pc, #76]	@ (801afe8 <lfs_fs_prepmove+0x50>)
 801af9c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801af9e:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801afa0:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801afa4:	4561      	cmp	r1, ip
 801afa6:	d017      	beq.n	801afd8 <lfs_fs_prepmove+0x40>
 801afa8:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801afac:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801afb0:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801afb4:	ea43 030c 	orr.w	r3, r3, ip
 801afb8:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801afba:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801afbe:	4299      	cmp	r1, r3
 801afc0:	d00d      	beq.n	801afde <lfs_fs_prepmove+0x46>
 801afc2:	6813      	ldr	r3, [r2, #0]
 801afc4:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801afc6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801afca:	4299      	cmp	r1, r3
 801afcc:	d009      	beq.n	801afe2 <lfs_fs_prepmove+0x4a>
 801afce:	6853      	ldr	r3, [r2, #4]
 801afd0:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801afd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afd6:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801afd8:	f04f 0c00 	mov.w	ip, #0
 801afdc:	e7ea      	b.n	801afb4 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801afde:	2300      	movs	r3, #0
 801afe0:	e7f0      	b.n	801afc4 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801afe2:	2300      	movs	r3, #0
 801afe4:	e7f4      	b.n	801afd0 <lfs_fs_prepmove+0x38>
 801afe6:	bf00      	nop
 801afe8:	800003ff 	.word	0x800003ff

0801afec <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801afec:	6803      	ldr	r3, [r0, #0]
 801afee:	3301      	adds	r3, #1
 801aff0:	6003      	str	r3, [r0, #0]
    return 0;
}
 801aff2:	2000      	movs	r0, #0
 801aff4:	4770      	bx	lr
	...

0801aff8 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801aff8:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801affa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801affc:	428b      	cmp	r3, r1
 801affe:	d905      	bls.n	801b00c <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801b000:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b002:	68c3      	ldr	r3, [r0, #12]
 801b004:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b006:	2800      	cmp	r0, #0
 801b008:	dc07      	bgt.n	801b01a <lfs_bd_erase+0x22>
}
 801b00a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801b00c:	4b06      	ldr	r3, [pc, #24]	@ (801b028 <lfs_bd_erase+0x30>)
 801b00e:	4a07      	ldr	r2, [pc, #28]	@ (801b02c <lfs_bd_erase+0x34>)
 801b010:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801b014:	4806      	ldr	r0, [pc, #24]	@ (801b030 <lfs_bd_erase+0x38>)
 801b016:	f00e fee1 	bl	8029ddc <__assert_func>
    LFS_ASSERT(err <= 0);
 801b01a:	4b06      	ldr	r3, [pc, #24]	@ (801b034 <lfs_bd_erase+0x3c>)
 801b01c:	4a03      	ldr	r2, [pc, #12]	@ (801b02c <lfs_bd_erase+0x34>)
 801b01e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801b022:	4803      	ldr	r0, [pc, #12]	@ (801b030 <lfs_bd_erase+0x38>)
 801b024:	f00e feda 	bl	8029ddc <__assert_func>
 801b028:	08038f58 	.word	0x08038f58
 801b02c:	08039bb8 	.word	0x08039bb8
 801b030:	08038e6c 	.word	0x08038e6c
 801b034:	08038e9c 	.word	0x08038e9c

0801b038 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801b038:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b03a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801b03c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b040:	b90a      	cbnz	r2, 801b046 <lfs_fs_preporphans+0xe>
 801b042:	2900      	cmp	r1, #0
 801b044:	db12      	blt.n	801b06c <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b046:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801b04a:	d901      	bls.n	801b050 <lfs_fs_preporphans+0x18>
 801b04c:	2900      	cmp	r1, #0
 801b04e:	dc14      	bgt.n	801b07a <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801b050:	4419      	add	r1, r3
 801b052:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b054:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801b058:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801b05c:	3900      	subs	r1, #0
 801b05e:	bf18      	it	ne
 801b060:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801b062:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801b066:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801b068:	2000      	movs	r0, #0
 801b06a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801b06c:	4b06      	ldr	r3, [pc, #24]	@ (801b088 <lfs_fs_preporphans+0x50>)
 801b06e:	4a07      	ldr	r2, [pc, #28]	@ (801b08c <lfs_fs_preporphans+0x54>)
 801b070:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801b074:	4806      	ldr	r0, [pc, #24]	@ (801b090 <lfs_fs_preporphans+0x58>)
 801b076:	f00e feb1 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801b07a:	4b06      	ldr	r3, [pc, #24]	@ (801b094 <lfs_fs_preporphans+0x5c>)
 801b07c:	4a03      	ldr	r2, [pc, #12]	@ (801b08c <lfs_fs_preporphans+0x54>)
 801b07e:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801b082:	4803      	ldr	r0, [pc, #12]	@ (801b090 <lfs_fs_preporphans+0x58>)
 801b084:	f00e feaa 	bl	8029ddc <__assert_func>
 801b088:	08038ea8 	.word	0x08038ea8
 801b08c:	08039b88 	.word	0x08039b88
 801b090:	08038e6c 	.word	0x08038e6c
 801b094:	08038ee0 	.word	0x08038ee0

0801b098 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801b098:	b510      	push	{r4, lr}
 801b09a:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801b09c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b09e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b0a0:	21ff      	movs	r1, #255	@ 0xff
 801b0a2:	68e0      	ldr	r0, [r4, #12]
 801b0a4:	f011 fbec 	bl	802c880 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801b0a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0ac:	6023      	str	r3, [r4, #0]
}
 801b0ae:	bd10      	pop	{r4, pc}

0801b0b0 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801b0b2:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801b0b4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b0b6:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801b0b8:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801b0ba:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801b0be:	42bd      	cmp	r5, r7
 801b0c0:	d312      	bcc.n	801b0e8 <lfs_ctz_index+0x38>
 801b0c2:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801b0c4:	3801      	subs	r0, #1
 801b0c6:	f7f5 fe5f 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801b0ca:	1c84      	adds	r4, r0, #2
 801b0cc:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801b0d0:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801b0d4:	fb04 5517 	mls	r5, r4, r7, r5
 801b0d8:	4620      	mov	r0, r4
 801b0da:	f7f5 fe55 	bl	8010d88 <__popcountsi2>
 801b0de:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801b0e2:	6035      	str	r5, [r6, #0]
    return i;
 801b0e4:	4620      	mov	r0, r4
}
 801b0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801b0e8:	2000      	movs	r0, #0
 801b0ea:	e7fc      	b.n	801b0e6 <lfs_ctz_index+0x36>

0801b0ec <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f0:	b087      	sub	sp, #28
 801b0f2:	4615      	mov	r5, r2
 801b0f4:	469b      	mov	fp, r3
 801b0f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b0f8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b0fa:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801b0fe:	eb04 020a 	add.w	r2, r4, sl
 801b102:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b106:	429a      	cmp	r2, r3
 801b108:	f200 80d0 	bhi.w	801b2ac <lfs_bd_read+0x1c0>
 801b10c:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801b10e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b110:	2b00      	cmp	r3, #0
 801b112:	f000 80c7 	beq.w	801b2a4 <lfs_bd_read+0x1b8>
 801b116:	42bb      	cmp	r3, r7
 801b118:	f240 80cb 	bls.w	801b2b2 <lfs_bd_read+0x1c6>
 801b11c:	9003      	str	r0, [sp, #12]
 801b11e:	e084      	b.n	801b22a <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801b120:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b124:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b128:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801b12a:	42a1      	cmp	r1, r4
 801b12c:	d91e      	bls.n	801b16c <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801b12e:	42a3      	cmp	r3, r4
 801b130:	d905      	bls.n	801b13e <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801b132:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801b134:	4553      	cmp	r3, sl
 801b136:	bf28      	it	cs
 801b138:	4653      	movcs	r3, sl
 801b13a:	4698      	mov	r8, r3
 801b13c:	e081      	b.n	801b242 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b13e:	1b19      	subs	r1, r3, r4
 801b140:	eb02 0801 	add.w	r8, r2, r1
 801b144:	45d0      	cmp	r8, sl
 801b146:	bf28      	it	cs
 801b148:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b14a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801b14e:	1ae3      	subs	r3, r4, r3
 801b150:	4642      	mov	r2, r8
 801b152:	4419      	add	r1, r3
 801b154:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b156:	f012 fdcf 	bl	802dcf8 <memcpy>
                data += diff;
 801b15a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b15c:	4443      	add	r3, r8
 801b15e:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b160:	4444      	add	r4, r8
                size -= diff;
 801b162:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b166:	e060      	b.n	801b22a <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801b168:	46d0      	mov	r8, sl
 801b16a:	e06a      	b.n	801b242 <lfs_bd_read+0x156>
 801b16c:	46d0      	mov	r8, sl
 801b16e:	e068      	b.n	801b242 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801b170:	686b      	ldr	r3, [r5, #4]
 801b172:	68aa      	ldr	r2, [r5, #8]
 801b174:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801b176:	42a1      	cmp	r1, r4
 801b178:	d966      	bls.n	801b248 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801b17a:	42a3      	cmp	r3, r4
 801b17c:	d904      	bls.n	801b188 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801b17e:	1b1b      	subs	r3, r3, r4
 801b180:	4598      	cmp	r8, r3
 801b182:	bf28      	it	cs
 801b184:	4698      	movcs	r8, r3
 801b186:	e05f      	b.n	801b248 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b188:	1b19      	subs	r1, r3, r4
 801b18a:	440a      	add	r2, r1
 801b18c:	4590      	cmp	r8, r2
 801b18e:	bf28      	it	cs
 801b190:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b192:	68e9      	ldr	r1, [r5, #12]
 801b194:	1ae3      	subs	r3, r4, r3
 801b196:	4642      	mov	r2, r8
 801b198:	4419      	add	r1, r3
 801b19a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b19c:	f012 fdac 	bl	802dcf8 <memcpy>
                data += diff;
 801b1a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b1a2:	4443      	add	r3, r8
 801b1a4:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801b1a6:	4444      	add	r4, r8
                size -= diff;
 801b1a8:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801b1ac:	e03d      	b.n	801b22a <lfs_bd_read+0x13e>
            data += diff;
 801b1ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b1b0:	9b04      	ldr	r3, [sp, #16]
 801b1b2:	441a      	add	r2, r3
 801b1b4:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801b1b6:	441c      	add	r4, r3
            size -= diff;
 801b1b8:	9b05      	ldr	r3, [sp, #20]
 801b1ba:	eba3 0308 	sub.w	r3, r3, r8
 801b1be:	449a      	add	sl, r3
            continue;
 801b1c0:	e033      	b.n	801b22a <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b1c2:	9b03      	ldr	r3, [sp, #12]
 801b1c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1c6:	b10b      	cbz	r3, 801b1cc <lfs_bd_read+0xe0>
 801b1c8:	42bb      	cmp	r3, r7
 801b1ca:	d95f      	bls.n	801b28c <lfs_bd_read+0x1a0>
        rcache->block = block;
 801b1cc:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b1ce:	9e03      	ldr	r6, [sp, #12]
 801b1d0:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b1d2:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801b1d4:	fbb4 f3f2 	udiv	r3, r4, r2
 801b1d8:	fb02 4313 	mls	r3, r2, r3, r4
 801b1dc:	1ae2      	subs	r2, r4, r3
 801b1de:	606a      	str	r2, [r5, #4]
                lfs_min(
 801b1e0:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801b1e4:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801b1e8:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b1ec:	4401      	add	r1, r0
 801b1ee:	3901      	subs	r1, #1
    return a - (a % alignment);
 801b1f0:	fbb1 fef0 	udiv	lr, r1, r0
 801b1f4:	fb00 101e 	mls	r0, r0, lr, r1
 801b1f8:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801b1fa:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801b1fe:	1b1b      	subs	r3, r3, r4
 801b200:	4288      	cmp	r0, r1
 801b202:	bf94      	ite	ls
 801b204:	181b      	addls	r3, r3, r0
 801b206:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801b208:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801b20c:	428b      	cmp	r3, r1
 801b20e:	bf28      	it	cs
 801b210:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801b212:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801b214:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801b216:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b21a:	9300      	str	r3, [sp, #0]
 801b21c:	68eb      	ldr	r3, [r5, #12]
 801b21e:	4639      	mov	r1, r7
 801b220:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801b222:	1e03      	subs	r3, r0, #0
 801b224:	dc38      	bgt.n	801b298 <lfs_bd_read+0x1ac>
        if (err) {
 801b226:	2b00      	cmp	r3, #0
 801b228:	d146      	bne.n	801b2b8 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801b22a:	f1ba 0f00 	cmp.w	sl, #0
 801b22e:	d03b      	beq.n	801b2a8 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801b230:	f1b9 0f00 	cmp.w	r9, #0
 801b234:	d098      	beq.n	801b168 <lfs_bd_read+0x7c>
 801b236:	f8d9 3000 	ldr.w	r3, [r9]
 801b23a:	42bb      	cmp	r3, r7
 801b23c:	f43f af70 	beq.w	801b120 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801b240:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801b242:	682b      	ldr	r3, [r5, #0]
 801b244:	42bb      	cmp	r3, r7
 801b246:	d093      	beq.n	801b170 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801b248:	45da      	cmp	sl, fp
 801b24a:	d3ba      	bcc.n	801b1c2 <lfs_bd_read+0xd6>
 801b24c:	9b03      	ldr	r3, [sp, #12]
 801b24e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b250:	69c2      	ldr	r2, [r0, #28]
 801b252:	fbb4 f3f2 	udiv	r3, r4, r2
 801b256:	fb02 4313 	mls	r3, r2, r3, r4
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d1b1      	bne.n	801b1c2 <lfs_bd_read+0xd6>
 801b25e:	4552      	cmp	r2, sl
 801b260:	d8af      	bhi.n	801b1c2 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801b262:	fbb8 f3f2 	udiv	r3, r8, r2
 801b266:	fb02 8313 	mls	r3, r2, r3, r8
 801b26a:	9305      	str	r3, [sp, #20]
 801b26c:	eba8 0203 	sub.w	r2, r8, r3
 801b270:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801b272:	6842      	ldr	r2, [r0, #4]
 801b274:	4616      	mov	r6, r2
 801b276:	9304      	str	r3, [sp, #16]
 801b278:	9300      	str	r3, [sp, #0]
 801b27a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b27c:	4622      	mov	r2, r4
 801b27e:	4639      	mov	r1, r7
 801b280:	47b0      	blx	r6
            if (err) {
 801b282:	2800      	cmp	r0, #0
 801b284:	d093      	beq.n	801b1ae <lfs_bd_read+0xc2>
}
 801b286:	b007      	add	sp, #28
 801b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801b28c:	4b0b      	ldr	r3, [pc, #44]	@ (801b2bc <lfs_bd_read+0x1d0>)
 801b28e:	4a0c      	ldr	r2, [pc, #48]	@ (801b2c0 <lfs_bd_read+0x1d4>)
 801b290:	216b      	movs	r1, #107	@ 0x6b
 801b292:	480c      	ldr	r0, [pc, #48]	@ (801b2c4 <lfs_bd_read+0x1d8>)
 801b294:	f00e fda2 	bl	8029ddc <__assert_func>
        LFS_ASSERT(err <= 0);
 801b298:	4b0b      	ldr	r3, [pc, #44]	@ (801b2c8 <lfs_bd_read+0x1dc>)
 801b29a:	4a09      	ldr	r2, [pc, #36]	@ (801b2c0 <lfs_bd_read+0x1d4>)
 801b29c:	2176      	movs	r1, #118	@ 0x76
 801b29e:	4809      	ldr	r0, [pc, #36]	@ (801b2c4 <lfs_bd_read+0x1d8>)
 801b2a0:	f00e fd9c 	bl	8029ddc <__assert_func>
 801b2a4:	9003      	str	r0, [sp, #12]
 801b2a6:	e7c0      	b.n	801b22a <lfs_bd_read+0x13e>
    return 0;
 801b2a8:	2000      	movs	r0, #0
 801b2aa:	e7ec      	b.n	801b286 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801b2ac:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b2b0:	e7e9      	b.n	801b286 <lfs_bd_read+0x19a>
 801b2b2:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b2b6:	e7e6      	b.n	801b286 <lfs_bd_read+0x19a>
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	e7e4      	b.n	801b286 <lfs_bd_read+0x19a>
 801b2bc:	08038f18 	.word	0x08038f18
 801b2c0:	08039be0 	.word	0x08039be0
 801b2c4:	08038e6c 	.word	0x08038e6c
 801b2c8:	08038e9c 	.word	0x08038e9c

0801b2cc <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d0:	b089      	sub	sp, #36	@ 0x24
 801b2d2:	4607      	mov	r7, r0
 801b2d4:	468a      	mov	sl, r1
 801b2d6:	4690      	mov	r8, r2
 801b2d8:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801b2da:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801b2dc:	690b      	ldr	r3, [r1, #16]
 801b2de:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b2e0:	303c      	adds	r0, #60	@ 0x3c
 801b2e2:	f7ff fd73 	bl	801adcc <lfs_gstate_hasmovehere>
 801b2e6:	2800      	cmp	r0, #0
 801b2e8:	f000 808d 	beq.w	801b406 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801b2ec:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	f000 808a 	beq.w	801b40a <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b2f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801b2f8:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801b2fc:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801b300:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801b304:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801b308:	404b      	eors	r3, r1
 801b30a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b30e:	2b00      	cmp	r3, #0
 801b310:	f000 8085 	beq.w	801b41e <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801b314:	4282      	cmp	r2, r0
 801b316:	d37a      	bcc.n	801b40e <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801b318:	2600      	movs	r6, #0
 801b31a:	e006      	b.n	801b32a <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801b31c:	9605      	str	r6, [sp, #20]
 801b31e:	ebab 0306 	sub.w	r3, fp, r6
 801b322:	4063      	eors	r3, r4
 801b324:	ea13 0f08 	tst.w	r3, r8
 801b328:	d048      	beq.n	801b3bc <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b32a:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b32c:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b330:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b334:	bf14      	ite	ne
 801b336:	4623      	movne	r3, r4
 801b338:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801b33a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b33e:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801b340:	3308      	adds	r3, #8
 801b342:	42ab      	cmp	r3, r5
 801b344:	d865      	bhi.n	801b412 <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801b346:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801b348:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801b34c:	2304      	movs	r3, #4
 801b34e:	9303      	str	r3, [sp, #12]
 801b350:	a907      	add	r1, sp, #28
 801b352:	9102      	str	r1, [sp, #8]
 801b354:	9501      	str	r5, [sp, #4]
 801b356:	9200      	str	r2, [sp, #0]
 801b358:	463a      	mov	r2, r7
 801b35a:	2100      	movs	r1, #0
 801b35c:	4638      	mov	r0, r7
 801b35e:	f7ff fec5 	bl	801b0ec <lfs_bd_read>
        if (err) {
 801b362:	4603      	mov	r3, r0
 801b364:	2800      	cmp	r0, #0
 801b366:	d156      	bne.n	801b416 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801b368:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801b36a:	ba1b      	rev	r3, r3
 801b36c:	4063      	eors	r3, r4
 801b36e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b372:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801b374:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d0cf      	beq.n	801b31c <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801b37c:	0d23      	lsrs	r3, r4, #20
 801b37e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801b382:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b386:	d1c9      	bne.n	801b31c <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801b388:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801b38c:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801b390:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801b394:	4584      	cmp	ip, r0
 801b396:	d3c1      	bcc.n	801b31c <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801b398:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801b39c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801b3a0:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801b3a4:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801b3a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801b3ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801b3b0:	42a2      	cmp	r2, r4
 801b3b2:	d037      	beq.n	801b424 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801b3b4:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b3b6:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801b3ba:	e7af      	b.n	801b31c <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801b3bc:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801b3c0:	d033      	beq.n	801b42a <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801b3c2:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801b3c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b3c8:	429e      	cmp	r6, r3
 801b3ca:	bf28      	it	cs
 801b3cc:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801b3ce:	f8da 2000 	ldr.w	r2, [sl]
 801b3d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b3d4:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801b3d6:	9603      	str	r6, [sp, #12]
 801b3d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b3da:	9102      	str	r1, [sp, #8]
 801b3dc:	3304      	adds	r3, #4
 801b3de:	9301      	str	r3, [sp, #4]
 801b3e0:	9200      	str	r2, [sp, #0]
 801b3e2:	4633      	mov	r3, r6
 801b3e4:	463a      	mov	r2, r7
 801b3e6:	2100      	movs	r1, #0
 801b3e8:	4638      	mov	r0, r7
 801b3ea:	f7ff fe7f 	bl	801b0ec <lfs_bd_read>
            if (err) {
 801b3ee:	4603      	mov	r3, r0
 801b3f0:	b988      	cbnz	r0, 801b416 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801b3f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b3f4:	1b9a      	subs	r2, r3, r6
 801b3f6:	2100      	movs	r1, #0
 801b3f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b3fa:	1998      	adds	r0, r3, r6
 801b3fc:	f011 fa40 	bl	802c880 <memset>
            return tag + gdiff;
 801b400:	9b05      	ldr	r3, [sp, #20]
 801b402:	4423      	add	r3, r4
 801b404:	e007      	b.n	801b416 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801b406:	2600      	movs	r6, #0
 801b408:	e78f      	b.n	801b32a <lfs_dir_getslice+0x5e>
 801b40a:	2600      	movs	r6, #0
 801b40c:	e78d      	b.n	801b32a <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801b40e:	4e08      	ldr	r6, [pc, #32]	@ (801b430 <lfs_dir_getslice+0x164>)
 801b410:	e78b      	b.n	801b32a <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801b412:	f06f 0301 	mvn.w	r3, #1
}
 801b416:	4618      	mov	r0, r3
 801b418:	b009      	add	sp, #36	@ 0x24
 801b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801b41e:	f06f 0301 	mvn.w	r3, #1
 801b422:	e7f8      	b.n	801b416 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b424:	f06f 0301 	mvn.w	r3, #1
 801b428:	e7f5      	b.n	801b416 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801b42a:	f06f 0301 	mvn.w	r3, #1
 801b42e:	e7f2      	b.n	801b416 <lfs_dir_getslice+0x14a>
 801b430:	fffffc00 	.word	0xfffffc00

0801b434 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801b434:	b510      	push	{r4, lr}
 801b436:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801b438:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801b43c:	9402      	str	r4, [sp, #8]
 801b43e:	9c06      	ldr	r4, [sp, #24]
 801b440:	9401      	str	r4, [sp, #4]
 801b442:	2400      	movs	r4, #0
 801b444:	9400      	str	r4, [sp, #0]
 801b446:	f7ff ff41 	bl	801b2cc <lfs_dir_getslice>
}
 801b44a:	b004      	add	sp, #16
 801b44c:	bd10      	pop	{r4, pc}
	...

0801b450 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801b450:	b510      	push	{r4, lr}
 801b452:	b086      	sub	sp, #24
 801b454:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801b456:	ab03      	add	r3, sp, #12
 801b458:	9300      	str	r3, [sp, #0]
 801b45a:	4b09      	ldr	r3, [pc, #36]	@ (801b480 <lfs_dir_getgstate+0x30>)
 801b45c:	4a09      	ldr	r2, [pc, #36]	@ (801b484 <lfs_dir_getgstate+0x34>)
 801b45e:	f7ff ffe9 	bl	801b434 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801b462:	2800      	cmp	r0, #0
 801b464:	da04      	bge.n	801b470 <lfs_dir_getgstate+0x20>
 801b466:	f110 0f02 	cmn.w	r0, #2
 801b46a:	d106      	bne.n	801b47a <lfs_dir_getgstate+0x2a>
    return 0;
 801b46c:	2000      	movs	r0, #0
 801b46e:	e004      	b.n	801b47a <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801b470:	a903      	add	r1, sp, #12
 801b472:	4620      	mov	r0, r4
 801b474:	f7ff fc98 	bl	801ada8 <lfs_gstate_xor>
    return 0;
 801b478:	2000      	movs	r0, #0
}
 801b47a:	b006      	add	sp, #24
 801b47c:	bd10      	pop	{r4, pc}
 801b47e:	bf00      	nop
 801b480:	7ff0000c 	.word	0x7ff0000c
 801b484:	7ff00000 	.word	0x7ff00000

0801b488 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b48c:	b089      	sub	sp, #36	@ 0x24
 801b48e:	461c      	mov	r4, r3
 801b490:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b492:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b494:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801b496:	b923      	cbnz	r3, 801b4a2 <lfs_ctz_traverse+0x1a>
        return 0;
 801b498:	2300      	movs	r3, #0
}
 801b49a:	4618      	mov	r0, r3
 801b49c:	b009      	add	sp, #36	@ 0x24
 801b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4a2:	4680      	mov	r8, r0
 801b4a4:	4689      	mov	r9, r1
 801b4a6:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801b4a8:	3b01      	subs	r3, #1
 801b4aa:	9307      	str	r3, [sp, #28]
 801b4ac:	a907      	add	r1, sp, #28
 801b4ae:	f7ff fdff 	bl	801b0b0 <lfs_ctz_index>
 801b4b2:	4605      	mov	r5, r0
        int err = cb(data, head);
 801b4b4:	4621      	mov	r1, r4
 801b4b6:	4638      	mov	r0, r7
 801b4b8:	47b0      	blx	r6
        if (err) {
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	2800      	cmp	r0, #0
 801b4be:	d1ec      	bne.n	801b49a <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801b4c0:	2d00      	cmp	r5, #0
 801b4c2:	d0ea      	beq.n	801b49a <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801b4c4:	f005 0b01 	and.w	fp, r5, #1
 801b4c8:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801b4cc:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801b4ce:	9303      	str	r3, [sp, #12]
 801b4d0:	aa05      	add	r2, sp, #20
 801b4d2:	9202      	str	r2, [sp, #8]
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	9201      	str	r2, [sp, #4]
 801b4d8:	9400      	str	r4, [sp, #0]
 801b4da:	4652      	mov	r2, sl
 801b4dc:	4649      	mov	r1, r9
 801b4de:	4640      	mov	r0, r8
 801b4e0:	f7ff fe04 	bl	801b0ec <lfs_bd_read>
        if (err) {
 801b4e4:	4604      	mov	r4, r0
 801b4e6:	b9c8      	cbnz	r0, 801b51c <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801b4e8:	43eb      	mvns	r3, r5
 801b4ea:	f003 0301 	and.w	r3, r3, #1
 801b4ee:	42a3      	cmp	r3, r4
 801b4f0:	dd0b      	ble.n	801b50a <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801b4f2:	ab08      	add	r3, sp, #32
 801b4f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b4f8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801b4fc:	4638      	mov	r0, r7
 801b4fe:	47b0      	blx	r6
            if (err) {
 801b500:	4603      	mov	r3, r0
 801b502:	2800      	cmp	r0, #0
 801b504:	d1c9      	bne.n	801b49a <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801b506:	3401      	adds	r4, #1
 801b508:	e7ee      	b.n	801b4e8 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801b50a:	aa08      	add	r2, sp, #32
 801b50c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b510:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801b514:	f1ab 0b02 	sub.w	fp, fp, #2
 801b518:	445d      	add	r5, fp
    while (true) {
 801b51a:	e7cb      	b.n	801b4b4 <lfs_ctz_traverse+0x2c>
            return err;
 801b51c:	4603      	mov	r3, r0
 801b51e:	e7bc      	b.n	801b49a <lfs_ctz_traverse+0x12>

0801b520 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801b520:	b530      	push	{r4, r5, lr}
 801b522:	b087      	sub	sp, #28
 801b524:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801b526:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801b528:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801b52c:	6811      	ldr	r1, [r2, #0]
 801b52e:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801b530:	2508      	movs	r5, #8
 801b532:	9503      	str	r5, [sp, #12]
 801b534:	ad04      	add	r5, sp, #16
 801b536:	9502      	str	r5, [sp, #8]
 801b538:	9201      	str	r2, [sp, #4]
 801b53a:	9100      	str	r1, [sp, #0]
 801b53c:	4602      	mov	r2, r0
 801b53e:	f100 0110 	add.w	r1, r0, #16
 801b542:	f7ff fdd3 	bl	801b0ec <lfs_bd_read>
    if (err) {
 801b546:	4603      	mov	r3, r0
 801b548:	b978      	cbnz	r0, 801b56a <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801b54a:	9a04      	ldr	r2, [sp, #16]
 801b54c:	6861      	ldr	r1, [r4, #4]
 801b54e:	4291      	cmp	r1, r2
 801b550:	d008      	beq.n	801b564 <lfs_fs_parent_match+0x44>
 801b552:	9d05      	ldr	r5, [sp, #20]
 801b554:	68a0      	ldr	r0, [r4, #8]
 801b556:	4285      	cmp	r5, r0
 801b558:	d004      	beq.n	801b564 <lfs_fs_parent_match+0x44>
 801b55a:	4282      	cmp	r2, r0
 801b55c:	d002      	beq.n	801b564 <lfs_fs_parent_match+0x44>
 801b55e:	42a9      	cmp	r1, r5
 801b560:	d000      	beq.n	801b564 <lfs_fs_parent_match+0x44>
 801b562:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801b564:	3b00      	subs	r3, #0
 801b566:	bf18      	it	ne
 801b568:	2301      	movne	r3, #1
}
 801b56a:	4618      	mov	r0, r3
 801b56c:	b007      	add	sp, #28
 801b56e:	bd30      	pop	{r4, r5, pc}

0801b570 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b574:	b0af      	sub	sp, #188	@ 0xbc
 801b576:	9007      	str	r0, [sp, #28]
 801b578:	460e      	mov	r6, r1
 801b57a:	4617      	mov	r7, r2
 801b57c:	461c      	mov	r4, r3
 801b57e:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801b582:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801b586:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801b58a:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801b58e:	9304      	str	r3, [sp, #16]
 801b590:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801b594:	9305      	str	r3, [sp, #20]
 801b596:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801b59a:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801b59c:	2500      	movs	r5, #0
 801b59e:	950d      	str	r5, [sp, #52]	@ 0x34
 801b5a0:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b5a2:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b5a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b5aa:	bf14      	ite	ne
 801b5ac:	46a1      	movne	r9, r4
 801b5ae:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801b5b2:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b5b6:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801b5ba:	44b9      	add	r9, r7
 801b5bc:	68f3      	ldr	r3, [r6, #12]
 801b5be:	4599      	cmp	r9, r3
 801b5c0:	d35e      	bcc.n	801b680 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801b5c2:	f1bb 0f00 	cmp.w	fp, #0
 801b5c6:	f340 80fa 	ble.w	801b7be <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801b5ca:	f8d8 3000 	ldr.w	r3, [r8]
 801b5ce:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801b5d0:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801b5d4:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801b5d8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801b5dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b5de:	4ba9      	ldr	r3, [pc, #676]	@ (801b884 <lfs_dir_traverse+0x314>)
 801b5e0:	ea0a 0303 	and.w	r3, sl, r3
 801b5e4:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b5e6:	404a      	eors	r2, r1
 801b5e8:	401a      	ands	r2, r3
 801b5ea:	d1da      	bne.n	801b5a2 <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801b5ec:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	f000 8116 	beq.w	801b822 <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b5f6:	2d02      	cmp	r5, #2
 801b5f8:	d862      	bhi.n	801b6c0 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801b5fa:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b5fe:	a82e      	add	r0, sp, #184	@ 0xb8
 801b600:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801b604:	f843 6c78 	str.w	r6, [r3, #-120]
 801b608:	f843 7c74 	str.w	r7, [r3, #-116]
 801b60c:	f843 4c70 	str.w	r4, [r3, #-112]
 801b610:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b614:	f843 bc68 	str.w	fp, [r3, #-104]
 801b618:	f843 ac64 	str.w	sl, [r3, #-100]
 801b61c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801b61e:	f843 0c60 	str.w	r0, [r3, #-96]
 801b622:	9804      	ldr	r0, [sp, #16]
 801b624:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801b628:	9805      	ldr	r0, [sp, #20]
 801b62a:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801b62e:	9806      	ldr	r0, [sp, #24]
 801b630:	f823 0c58 	strh.w	r0, [r3, #-88]
 801b634:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801b636:	f843 0c54 	str.w	r0, [r3, #-84]
 801b63a:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b63c:	f843 0c50 	str.w	r0, [r3, #-80]
 801b640:	f843 1c4c 	str.w	r1, [r3, #-76]
 801b644:	f843 9c48 	str.w	r9, [r3, #-72]
 801b648:	3b44      	subs	r3, #68	@ 0x44
 801b64a:	a90d      	add	r1, sp, #52	@ 0x34
 801b64c:	c903      	ldmia	r1, {r0, r1}
 801b64e:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801b652:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b656:	009b      	lsls	r3, r3, #2
 801b658:	3328      	adds	r3, #40	@ 0x28
 801b65a:	a910      	add	r1, sp, #64	@ 0x40
 801b65c:	440b      	add	r3, r1
 801b65e:	3304      	adds	r3, #4
 801b660:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801b662:	3501      	adds	r5, #1
                ttag = 0;
 801b664:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801b666:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801b668:	4b87      	ldr	r3, [pc, #540]	@ (801b888 <lfs_dir_traverse+0x318>)
 801b66a:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801b66c:	2300      	movs	r3, #0
 801b66e:	9306      	str	r3, [sp, #24]
                end = 0;
 801b670:	9305      	str	r3, [sp, #20]
                begin = 0;
 801b672:	9304      	str	r3, [sp, #16]
 801b674:	e795      	b.n	801b5a2 <lfs_dir_traverse+0x32>
 801b676:	9d08      	ldr	r5, [sp, #32]
 801b678:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b67a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b67c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b67e:	e790      	b.n	801b5a2 <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801b680:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801b682:	2304      	movs	r3, #4
 801b684:	9303      	str	r3, [sp, #12]
 801b686:	a90f      	add	r1, sp, #60	@ 0x3c
 801b688:	9102      	str	r1, [sp, #8]
 801b68a:	f8cd 9004 	str.w	r9, [sp, #4]
 801b68e:	9200      	str	r2, [sp, #0]
 801b690:	9a07      	ldr	r2, [sp, #28]
 801b692:	2100      	movs	r1, #0
 801b694:	4610      	mov	r0, r2
 801b696:	f7ff fd29 	bl	801b0ec <lfs_bd_read>
                if (err) {
 801b69a:	4603      	mov	r3, r0
 801b69c:	2800      	cmp	r0, #0
 801b69e:	f040 80ec 	bne.w	801b87a <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801b6a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801b6a4:	ba1b      	rev	r3, r3
 801b6a6:	4063      	eors	r3, r4
 801b6a8:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801b6ac:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801b6ae:	6833      	ldr	r3, [r6, #0]
 801b6b0:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801b6b2:	f109 0304 	add.w	r3, r9, #4
 801b6b6:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801b6b8:	464f      	mov	r7, r9
                buffer = &disk;
 801b6ba:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801b6be:	e78d      	b.n	801b5dc <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801b6c0:	4b72      	ldr	r3, [pc, #456]	@ (801b88c <lfs_dir_traverse+0x31c>)
 801b6c2:	4a73      	ldr	r2, [pc, #460]	@ (801b890 <lfs_dir_traverse+0x320>)
 801b6c4:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801b6c8:	4872      	ldr	r0, [pc, #456]	@ (801b894 <lfs_dir_traverse+0x324>)
 801b6ca:	f00e fb87 	bl	8029ddc <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801b6ce:	4b6e      	ldr	r3, [pc, #440]	@ (801b888 <lfs_dir_traverse+0x318>)
 801b6d0:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b6d2:	429a      	cmp	r2, r3
 801b6d4:	f43f af65 	beq.w	801b5a2 <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801b6d8:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b6dc:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b6de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b6e2:	223c      	movs	r2, #60	@ 0x3c
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6e8:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801b6ec:	f011 f8c8 	bl	802c880 <memset>
 801b6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6f2:	f843 6c78 	str.w	r6, [r3, #-120]
 801b6f6:	f843 7c74 	str.w	r7, [r3, #-116]
 801b6fa:	f843 4c70 	str.w	r4, [r3, #-112]
 801b6fe:	f843 8c6c 	str.w	r8, [r3, #-108]
 801b702:	f843 bc68 	str.w	fp, [r3, #-104]
 801b706:	f843 ac64 	str.w	sl, [r3, #-100]
 801b70a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801b70c:	f843 2c60 	str.w	r2, [r3, #-96]
 801b710:	9a04      	ldr	r2, [sp, #16]
 801b712:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801b716:	9a05      	ldr	r2, [sp, #20]
 801b718:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801b71c:	9906      	ldr	r1, [sp, #24]
 801b71e:	f823 1c58 	strh.w	r1, [r3, #-88]
 801b722:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801b724:	f843 2c54 	str.w	r2, [r3, #-84]
 801b728:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801b72a:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801b72e:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801b730:	9b08      	ldr	r3, [sp, #32]
 801b732:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801b736:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801b738:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801b73c:	1c50      	adds	r0, r2, #1
 801b73e:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801b740:	1a9b      	subs	r3, r3, r2
 801b742:	fa11 f383 	uxtah	r3, r1, r3
 801b746:	b21b      	sxth	r3, r3
 801b748:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801b74a:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801b74c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801b750:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801b752:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b898 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801b756:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801b75a:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801b75c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801b760:	465f      	mov	r7, fp
 801b762:	e71e      	b.n	801b5a2 <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b764:	2300      	movs	r3, #0
 801b766:	9508      	str	r5, [sp, #32]
 801b768:	9609      	str	r6, [sp, #36]	@ 0x24
 801b76a:	970a      	str	r7, [sp, #40]	@ 0x28
 801b76c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b76e:	461c      	mov	r4, r3
 801b770:	9d06      	ldr	r5, [sp, #24]
 801b772:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801b774:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801b776:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801b778:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b77c:	4294      	cmp	r4, r2
 801b77e:	d219      	bcs.n	801b7b4 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b780:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b784:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801b788:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801b78c:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801b790:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b794:	442b      	add	r3, r5
 801b796:	029b      	lsls	r3, r3, #10
 801b798:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801b79c:	6891      	ldr	r1, [r2, #8]
 801b79e:	6852      	ldr	r2, [r2, #4]
 801b7a0:	4319      	orrs	r1, r3
 801b7a2:	4638      	mov	r0, r7
 801b7a4:	47b0      	blx	r6
                if (res < 0) {
 801b7a6:	2800      	cmp	r0, #0
 801b7a8:	db66      	blt.n	801b878 <lfs_dir_traverse+0x308>
                if (res) {
 801b7aa:	2800      	cmp	r0, #0
 801b7ac:	f47f af63 	bne.w	801b676 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b7b0:	3401      	adds	r4, #1
 801b7b2:	e7e0      	b.n	801b776 <lfs_dir_traverse+0x206>
 801b7b4:	9d08      	ldr	r5, [sp, #32]
 801b7b6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b7b8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b7ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b7bc:	e6f1      	b.n	801b5a2 <lfs_dir_traverse+0x32>
                res = 0;
 801b7be:	2300      	movs	r3, #0
    if (sp > 0) {
 801b7c0:	2d00      	cmp	r5, #0
 801b7c2:	d05a      	beq.n	801b87a <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801b7c4:	3d01      	subs	r5, #1
 801b7c6:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b7ca:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b7cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b7d0:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801b7d4:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801b7d8:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801b7dc:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801b7e0:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801b7e4:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801b7e8:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801b7ec:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801b7ee:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801b7f2:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801b7f4:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801b7f8:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801b7fa:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801b7fe:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801b800:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801b804:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801b806:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801b80a:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801b80c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801b810:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801b812:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801b816:	aa0d      	add	r2, sp, #52	@ 0x34
 801b818:	3b44      	subs	r3, #68	@ 0x44
 801b81a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b81e:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801b822:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b826:	b153      	cbz	r3, 801b83e <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801b828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b82a:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b82e:	9a04      	ldr	r2, [sp, #16]
 801b830:	429a      	cmp	r2, r3
 801b832:	f63f aeb6 	bhi.w	801b5a2 <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801b836:	9a05      	ldr	r2, [sp, #20]
 801b838:	429a      	cmp	r2, r3
 801b83a:	f67f aeb2 	bls.w	801b5a2 <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b83e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b840:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801b842:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b846:	2b00      	cmp	r3, #0
 801b848:	f43f aeab 	beq.w	801b5a2 <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801b84c:	f240 1201 	movw	r2, #257	@ 0x101
 801b850:	4293      	cmp	r3, r2
 801b852:	f43f af3c 	beq.w	801b6ce <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801b856:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801b85a:	d083      	beq.n	801b764 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801b85c:	464a      	mov	r2, r9
 801b85e:	9b08      	ldr	r3, [sp, #32]
 801b860:	9906      	ldr	r1, [sp, #24]
 801b862:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801b866:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b868:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801b86a:	4798      	blx	r3
            if (res < 0) {
 801b86c:	1e03      	subs	r3, r0, #0
 801b86e:	db04      	blt.n	801b87a <lfs_dir_traverse+0x30a>
            if (res) {
 801b870:	2b00      	cmp	r3, #0
 801b872:	f43f ae96 	beq.w	801b5a2 <lfs_dir_traverse+0x32>
 801b876:	e7a3      	b.n	801b7c0 <lfs_dir_traverse+0x250>
 801b878:	4603      	mov	r3, r0
}
 801b87a:	4618      	mov	r0, r3
 801b87c:	b02f      	add	sp, #188	@ 0xbc
 801b87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b882:	bf00      	nop
 801b884:	7ff00000 	.word	0x7ff00000
 801b888:	0801aea5 	.word	0x0801aea5
 801b88c:	08038f48 	.word	0x08038f48
 801b890:	08039b58 	.word	0x08039b58
 801b894:	08038e6c 	.word	0x08038e6c
 801b898:	600ffc00 	.word	0x600ffc00

0801b89c <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a0:	b087      	sub	sp, #28
 801b8a2:	4606      	mov	r6, r0
 801b8a4:	468a      	mov	sl, r1
 801b8a6:	4617      	mov	r7, r2
 801b8a8:	461c      	mov	r4, r3
 801b8aa:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801b8ae:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801b8b2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b8b4:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801b8b8:	eb05 0208 	add.w	r2, r5, r8
 801b8bc:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8c0:	429a      	cmp	r2, r3
 801b8c2:	d94d      	bls.n	801b960 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801b8c4:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b8c8:	e076      	b.n	801b9b8 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	68ba      	ldr	r2, [r7, #8]
 801b8ce:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801b8d0:	42a9      	cmp	r1, r5
 801b8d2:	d91c      	bls.n	801b90e <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801b8d4:	42ab      	cmp	r3, r5
 801b8d6:	d904      	bls.n	801b8e2 <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801b8d8:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801b8da:	4543      	cmp	r3, r8
 801b8dc:	bf28      	it	cs
 801b8de:	4643      	movcs	r3, r8
 801b8e0:	e048      	b.n	801b974 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b8e2:	1b59      	subs	r1, r3, r5
 801b8e4:	440a      	add	r2, r1
 801b8e6:	4542      	cmp	r2, r8
 801b8e8:	bf28      	it	cs
 801b8ea:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b8ec:	68f9      	ldr	r1, [r7, #12]
 801b8ee:	1aeb      	subs	r3, r5, r3
 801b8f0:	9205      	str	r2, [sp, #20]
 801b8f2:	4419      	add	r1, r3
 801b8f4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b8f6:	f012 f9ff 	bl	802dcf8 <memcpy>
                data += diff;
 801b8fa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b8fc:	9b05      	ldr	r3, [sp, #20]
 801b8fe:	4419      	add	r1, r3
 801b900:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801b902:	441d      	add	r5, r3
                size -= diff;
 801b904:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801b908:	e02a      	b.n	801b960 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801b90a:	4643      	mov	r3, r8
 801b90c:	e032      	b.n	801b974 <lfs_dir_getread+0xd8>
 801b90e:	4643      	mov	r3, r8
 801b910:	e030      	b.n	801b974 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801b912:	f06f 0301 	mvn.w	r3, #1
 801b916:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b918:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b91a:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801b91c:	fbb5 f2f3 	udiv	r2, r5, r3
 801b920:	fb03 5212 	mls	r2, r3, r2, r5
 801b924:	1aaa      	subs	r2, r5, r2
 801b926:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801b928:	eb05 030b 	add.w	r3, r5, fp
 801b92c:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801b92e:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b930:	4403      	add	r3, r0
 801b932:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801b934:	fbb3 fcf0 	udiv	ip, r3, r0
 801b938:	fb00 301c 	mls	r0, r0, ip, r3
 801b93c:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801b93e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801b940:	428b      	cmp	r3, r1
 801b942:	bf28      	it	cs
 801b944:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801b946:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801b948:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801b94a:	9302      	str	r3, [sp, #8]
 801b94c:	9101      	str	r1, [sp, #4]
 801b94e:	9200      	str	r2, [sp, #0]
 801b950:	464b      	mov	r3, r9
 801b952:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b954:	4651      	mov	r1, sl
 801b956:	4630      	mov	r0, r6
 801b958:	f7ff fcb8 	bl	801b2cc <lfs_dir_getslice>
        if (err < 0) {
 801b95c:	2800      	cmp	r0, #0
 801b95e:	db2b      	blt.n	801b9b8 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801b960:	f1b8 0f00 	cmp.w	r8, #0
 801b964:	d027      	beq.n	801b9b6 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801b966:	2f00      	cmp	r7, #0
 801b968:	d0cf      	beq.n	801b90a <lfs_dir_getread+0x6e>
 801b96a:	683b      	ldr	r3, [r7, #0]
 801b96c:	f113 0f02 	cmn.w	r3, #2
 801b970:	d0ab      	beq.n	801b8ca <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801b972:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801b974:	6822      	ldr	r2, [r4, #0]
 801b976:	f112 0f02 	cmn.w	r2, #2
 801b97a:	d1ca      	bne.n	801b912 <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801b97c:	6862      	ldr	r2, [r4, #4]
 801b97e:	68a1      	ldr	r1, [r4, #8]
 801b980:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801b982:	42a8      	cmp	r0, r5
 801b984:	d9c5      	bls.n	801b912 <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801b986:	42aa      	cmp	r2, r5
 801b988:	d8c3      	bhi.n	801b912 <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b98a:	1b50      	subs	r0, r2, r5
 801b98c:	4401      	add	r1, r0
 801b98e:	4608      	mov	r0, r1
 801b990:	4299      	cmp	r1, r3
 801b992:	bf28      	it	cs
 801b994:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b996:	68e3      	ldr	r3, [r4, #12]
 801b998:	1aa9      	subs	r1, r5, r2
 801b99a:	9005      	str	r0, [sp, #20]
 801b99c:	4602      	mov	r2, r0
 801b99e:	4419      	add	r1, r3
 801b9a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b9a2:	f012 f9a9 	bl	802dcf8 <memcpy>
                data += diff;
 801b9a6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b9a8:	9b05      	ldr	r3, [sp, #20]
 801b9aa:	4419      	add	r1, r3
 801b9ac:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801b9ae:	441d      	add	r5, r3
                size -= diff;
 801b9b0:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801b9b4:	e7d4      	b.n	801b960 <lfs_dir_getread+0xc4>
    return 0;
 801b9b6:	2000      	movs	r0, #0
}
 801b9b8:	b007      	add	sp, #28
 801b9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9be <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801b9be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9c2:	b089      	sub	sp, #36	@ 0x24
 801b9c4:	4682      	mov	sl, r0
 801b9c6:	4689      	mov	r9, r1
 801b9c8:	9205      	str	r2, [sp, #20]
 801b9ca:	461f      	mov	r7, r3
 801b9cc:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801b9d0:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801b9d4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b9d6:	2400      	movs	r4, #0
 801b9d8:	e002      	b.n	801b9e0 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801b9da:	2301      	movs	r3, #1
 801b9dc:	e023      	b.n	801ba26 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b9de:	442c      	add	r4, r5
 801b9e0:	42b4      	cmp	r4, r6
 801b9e2:	d21f      	bcs.n	801ba24 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801b9e4:	1b35      	subs	r5, r6, r4
 801b9e6:	2d08      	cmp	r5, #8
 801b9e8:	bf28      	it	cs
 801b9ea:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801b9ec:	9503      	str	r5, [sp, #12]
 801b9ee:	ab06      	add	r3, sp, #24
 801b9f0:	9302      	str	r3, [sp, #8]
 801b9f2:	eb04 0308 	add.w	r3, r4, r8
 801b9f6:	9301      	str	r3, [sp, #4]
 801b9f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b9fa:	9300      	str	r3, [sp, #0]
 801b9fc:	1b3b      	subs	r3, r7, r4
 801b9fe:	9a05      	ldr	r2, [sp, #20]
 801ba00:	4649      	mov	r1, r9
 801ba02:	4650      	mov	r0, sl
 801ba04:	f7ff fb72 	bl	801b0ec <lfs_bd_read>
        if (err) {
 801ba08:	4603      	mov	r3, r0
 801ba0a:	b960      	cbnz	r0, 801ba26 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801ba0c:	462a      	mov	r2, r5
 801ba0e:	eb0b 0104 	add.w	r1, fp, r4
 801ba12:	a806      	add	r0, sp, #24
 801ba14:	f010 fea0 	bl	802c758 <memcmp>
        if (res) {
 801ba18:	2800      	cmp	r0, #0
 801ba1a:	d0e0      	beq.n	801b9de <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801ba1c:	2800      	cmp	r0, #0
 801ba1e:	dbdc      	blt.n	801b9da <lfs_bd_cmp+0x1c>
 801ba20:	2302      	movs	r3, #2
 801ba22:	e000      	b.n	801ba26 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801ba24:	2300      	movs	r3, #0
}
 801ba26:	4618      	mov	r0, r3
 801ba28:	b009      	add	sp, #36	@ 0x24
 801ba2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ba30 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801ba30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba34:	b085      	sub	sp, #20
 801ba36:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801ba38:	6809      	ldr	r1, [r1, #0]
 801ba3a:	f111 0f03 	cmn.w	r1, #3
 801ba3e:	d83f      	bhi.n	801bac0 <lfs_bd_flush+0x90>
 801ba40:	4607      	mov	r7, r0
 801ba42:	4691      	mov	r9, r2
 801ba44:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801ba46:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ba48:	4299      	cmp	r1, r3
 801ba4a:	d22d      	bcs.n	801baa8 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801ba4c:	68a5      	ldr	r5, [r4, #8]
 801ba4e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ba50:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801ba52:	4415      	add	r5, r2
 801ba54:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801ba56:	fbb5 f3f2 	udiv	r3, r5, r2
 801ba5a:	fb02 5313 	mls	r3, r2, r3, r5
 801ba5e:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801ba60:	6885      	ldr	r5, [r0, #8]
 801ba62:	9600      	str	r6, [sp, #0]
 801ba64:	68e3      	ldr	r3, [r4, #12]
 801ba66:	6862      	ldr	r2, [r4, #4]
 801ba68:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801ba6a:	1e05      	subs	r5, r0, #0
 801ba6c:	dc22      	bgt.n	801bab4 <lfs_bd_flush+0x84>
        if (err) {
 801ba6e:	bb45      	cbnz	r5, 801bac2 <lfs_bd_flush+0x92>
        if (validate) {
 801ba70:	f1b8 0f00 	cmp.w	r8, #0
 801ba74:	d013      	beq.n	801ba9e <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801ba76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba7a:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801ba7e:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801ba80:	9603      	str	r6, [sp, #12]
 801ba82:	9302      	str	r3, [sp, #8]
 801ba84:	6863      	ldr	r3, [r4, #4]
 801ba86:	9301      	str	r3, [sp, #4]
 801ba88:	6823      	ldr	r3, [r4, #0]
 801ba8a:	9300      	str	r3, [sp, #0]
 801ba8c:	4633      	mov	r3, r6
 801ba8e:	464a      	mov	r2, r9
 801ba90:	2100      	movs	r1, #0
 801ba92:	4638      	mov	r0, r7
 801ba94:	f7ff ff93 	bl	801b9be <lfs_bd_cmp>
            if (res < 0) {
 801ba98:	2800      	cmp	r0, #0
 801ba9a:	db16      	blt.n	801baca <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801ba9c:	b9b8      	cbnz	r0, 801bace <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801ba9e:	4621      	mov	r1, r4
 801baa0:	4638      	mov	r0, r7
 801baa2:	f7ff faf9 	bl	801b098 <lfs_cache_zero>
 801baa6:	e00c      	b.n	801bac2 <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801baa8:	4b0a      	ldr	r3, [pc, #40]	@ (801bad4 <lfs_bd_flush+0xa4>)
 801baaa:	4a0b      	ldr	r2, [pc, #44]	@ (801bad8 <lfs_bd_flush+0xa8>)
 801baac:	21b3      	movs	r1, #179	@ 0xb3
 801baae:	480b      	ldr	r0, [pc, #44]	@ (801badc <lfs_bd_flush+0xac>)
 801bab0:	f00e f994 	bl	8029ddc <__assert_func>
        LFS_ASSERT(err <= 0);
 801bab4:	4b0a      	ldr	r3, [pc, #40]	@ (801bae0 <lfs_bd_flush+0xb0>)
 801bab6:	4a08      	ldr	r2, [pc, #32]	@ (801bad8 <lfs_bd_flush+0xa8>)
 801bab8:	21b7      	movs	r1, #183	@ 0xb7
 801baba:	4808      	ldr	r0, [pc, #32]	@ (801badc <lfs_bd_flush+0xac>)
 801babc:	f00e f98e 	bl	8029ddc <__assert_func>
    return 0;
 801bac0:	2500      	movs	r5, #0
}
 801bac2:	4628      	mov	r0, r5
 801bac4:	b005      	add	sp, #20
 801bac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801baca:	4605      	mov	r5, r0
 801bacc:	e7f9      	b.n	801bac2 <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801bace:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801bad2:	e7f6      	b.n	801bac2 <lfs_bd_flush+0x92>
 801bad4:	08038f50 	.word	0x08038f50
 801bad8:	08039b9c 	.word	0x08039b9c
 801badc:	08038e6c 	.word	0x08038e6c
 801bae0:	08038e9c 	.word	0x08038e9c

0801bae4 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae8:	b083      	sub	sp, #12
 801baea:	4607      	mov	r7, r0
 801baec:	460c      	mov	r4, r1
 801baee:	9201      	str	r2, [sp, #4]
 801baf0:	469b      	mov	fp, r3
 801baf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801baf4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801baf6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bafa:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bafe:	f116 0f02 	cmn.w	r6, #2
 801bb02:	d002      	beq.n	801bb0a <lfs_bd_prog+0x26>
 801bb04:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bb06:	42b3      	cmp	r3, r6
 801bb08:	d90b      	bls.n	801bb22 <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801bb0a:	eb05 0308 	add.w	r3, r5, r8
 801bb0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bb10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801bb12:	4293      	cmp	r3, r2
 801bb14:	d919      	bls.n	801bb4a <lfs_bd_prog+0x66>
 801bb16:	4b2b      	ldr	r3, [pc, #172]	@ (801bbc4 <lfs_bd_prog+0xe0>)
 801bb18:	4a2b      	ldr	r2, [pc, #172]	@ (801bbc8 <lfs_bd_prog+0xe4>)
 801bb1a:	21e9      	movs	r1, #233	@ 0xe9
 801bb1c:	482b      	ldr	r0, [pc, #172]	@ (801bbcc <lfs_bd_prog+0xe8>)
 801bb1e:	f00e f95d 	bl	8029ddc <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801bb22:	4b2b      	ldr	r3, [pc, #172]	@ (801bbd0 <lfs_bd_prog+0xec>)
 801bb24:	4a28      	ldr	r2, [pc, #160]	@ (801bbc8 <lfs_bd_prog+0xe4>)
 801bb26:	21e8      	movs	r1, #232	@ 0xe8
 801bb28:	4828      	ldr	r0, [pc, #160]	@ (801bbcc <lfs_bd_prog+0xe8>)
 801bb2a:	f00e f957 	bl	8029ddc <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bb32:	d13c      	bne.n	801bbae <lfs_bd_prog+0xca>
        pcache->block = block;
 801bb34:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801bb36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb38:	6a1a      	ldr	r2, [r3, #32]
 801bb3a:	fbb5 f3f2 	udiv	r3, r5, r2
 801bb3e:	fb02 5313 	mls	r3, r2, r3, r5
 801bb42:	1aeb      	subs	r3, r5, r3
 801bb44:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801bb46:	2300      	movs	r3, #0
 801bb48:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801bb4a:	f1b8 0f00 	cmp.w	r8, #0
 801bb4e:	d035      	beq.n	801bbbc <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801bb50:	6823      	ldr	r3, [r4, #0]
 801bb52:	42b3      	cmp	r3, r6
 801bb54:	d1eb      	bne.n	801bb2e <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801bb56:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801bb58:	42aa      	cmp	r2, r5
 801bb5a:	d8e8      	bhi.n	801bb2e <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801bb5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801bb5e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801bb60:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801bb62:	42a8      	cmp	r0, r5
 801bb64:	d9e3      	bls.n	801bb2e <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801bb66:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801bb68:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801bb6c:	45c1      	cmp	r9, r8
 801bb6e:	bf28      	it	cs
 801bb70:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801bb72:	68e3      	ldr	r3, [r4, #12]
 801bb74:	1aa8      	subs	r0, r5, r2
 801bb76:	464a      	mov	r2, r9
 801bb78:	4651      	mov	r1, sl
 801bb7a:	4418      	add	r0, r3
 801bb7c:	f012 f8bc 	bl	802dcf8 <memcpy>
            data += diff;
 801bb80:	44ca      	add	sl, r9
            off += diff;
 801bb82:	444d      	add	r5, r9
            size -= diff;
 801bb84:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801bb88:	68a2      	ldr	r2, [r4, #8]
 801bb8a:	6863      	ldr	r3, [r4, #4]
 801bb8c:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801bb8e:	4293      	cmp	r3, r2
 801bb90:	bf38      	it	cc
 801bb92:	4613      	movcc	r3, r2
 801bb94:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801bb96:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bb98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	d1d5      	bne.n	801bb4a <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bb9e:	465b      	mov	r3, fp
 801bba0:	9a01      	ldr	r2, [sp, #4]
 801bba2:	4621      	mov	r1, r4
 801bba4:	4638      	mov	r0, r7
 801bba6:	f7ff ff43 	bl	801ba30 <lfs_bd_flush>
                if (err) {
 801bbaa:	b940      	cbnz	r0, 801bbbe <lfs_bd_prog+0xda>
 801bbac:	e7cd      	b.n	801bb4a <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801bbae:	4b09      	ldr	r3, [pc, #36]	@ (801bbd4 <lfs_bd_prog+0xf0>)
 801bbb0:	4a05      	ldr	r2, [pc, #20]	@ (801bbc8 <lfs_bd_prog+0xe4>)
 801bbb2:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801bbb6:	4805      	ldr	r0, [pc, #20]	@ (801bbcc <lfs_bd_prog+0xe8>)
 801bbb8:	f00e f910 	bl	8029ddc <__assert_func>
    return 0;
 801bbbc:	2000      	movs	r0, #0
}
 801bbbe:	b003      	add	sp, #12
 801bbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbc4:	08038fac 	.word	0x08038fac
 801bbc8:	08039bac 	.word	0x08039bac
 801bbcc:	08038e6c 	.word	0x08038e6c
 801bbd0:	08038f74 	.word	0x08038f74
 801bbd4:	08038fd0 	.word	0x08038fd0

0801bbd8 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801bbd8:	b538      	push	{r3, r4, r5, lr}
 801bbda:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801bbdc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bbe0:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801bbe2:	f7ff ff25 	bl	801ba30 <lfs_bd_flush>
    if (err) {
 801bbe6:	4603      	mov	r3, r0
 801bbe8:	b920      	cbnz	r0, 801bbf4 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801bbea:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801bbec:	6903      	ldr	r3, [r0, #16]
 801bbee:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801bbf0:	1e03      	subs	r3, r0, #0
 801bbf2:	dc01      	bgt.n	801bbf8 <lfs_bd_sync+0x20>
}
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801bbf8:	4b02      	ldr	r3, [pc, #8]	@ (801bc04 <lfs_bd_sync+0x2c>)
 801bbfa:	4a03      	ldr	r2, [pc, #12]	@ (801bc08 <lfs_bd_sync+0x30>)
 801bbfc:	21dd      	movs	r1, #221	@ 0xdd
 801bbfe:	4803      	ldr	r0, [pc, #12]	@ (801bc0c <lfs_bd_sync+0x34>)
 801bc00:	f00e f8ec 	bl	8029ddc <__assert_func>
 801bc04:	08038e9c 	.word	0x08038e9c
 801bc08:	08039b4c 	.word	0x08039b4c
 801bc0c:	08038e6c 	.word	0x08038e6c

0801bc10 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801bc10:	b570      	push	{r4, r5, r6, lr}
 801bc12:	b084      	sub	sp, #16
 801bc14:	4604      	mov	r4, r0
 801bc16:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801bc18:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801bc1a:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801bc1c:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801bc20:	42ab      	cmp	r3, r5
 801bc22:	bf28      	it	cs
 801bc24:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801bc26:	6812      	ldr	r2, [r2, #0]
 801bc28:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801bc2c:	9303      	str	r3, [sp, #12]
 801bc2e:	6866      	ldr	r6, [r4, #4]
 801bc30:	9602      	str	r6, [sp, #8]
 801bc32:	9101      	str	r1, [sp, #4]
 801bc34:	9200      	str	r2, [sp, #0]
 801bc36:	4602      	mov	r2, r0
 801bc38:	2100      	movs	r1, #0
 801bc3a:	f7ff fec0 	bl	801b9be <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801bc3e:	b920      	cbnz	r0, 801bc4a <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801bc40:	68a3      	ldr	r3, [r4, #8]
 801bc42:	42ab      	cmp	r3, r5
 801bc44:	d001      	beq.n	801bc4a <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801bc46:	d202      	bcs.n	801bc4e <lfs_dir_find_match+0x3e>
 801bc48:	2001      	movs	r0, #1
}
 801bc4a:	b004      	add	sp, #16
 801bc4c:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801bc4e:	2002      	movs	r0, #2
 801bc50:	e7fb      	b.n	801bc4a <lfs_dir_find_match+0x3a>

0801bc52 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801bc52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc56:	b089      	sub	sp, #36	@ 0x24
 801bc58:	9305      	str	r3, [sp, #20]
 801bc5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801bc5c:	b953      	cbnz	r3, 801bc74 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801bc5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bc62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bc64:	6013      	str	r3, [r2, #0]
        *off = 0;
 801bc66:	2300      	movs	r3, #0
 801bc68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bc6a:	6013      	str	r3, [r2, #0]
}
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	b009      	add	sp, #36	@ 0x24
 801bc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc74:	4607      	mov	r7, r0
 801bc76:	4688      	mov	r8, r1
 801bc78:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801bc7a:	3b01      	subs	r3, #1
 801bc7c:	9307      	str	r3, [sp, #28]
 801bc7e:	a907      	add	r1, sp, #28
 801bc80:	f7ff fa16 	bl	801b0b0 <lfs_ctz_index>
 801bc84:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801bc86:	a911      	add	r1, sp, #68	@ 0x44
 801bc88:	4638      	mov	r0, r7
 801bc8a:	f7ff fa11 	bl	801b0b0 <lfs_ctz_index>
 801bc8e:	4606      	mov	r6, r0
    while (current > target) {
 801bc90:	42b5      	cmp	r5, r6
 801bc92:	d91f      	bls.n	801bcd4 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801bc94:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801bc96:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801bc9a:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801bc9e:	fa95 f3a5 	rbit	r3, r5
 801bca2:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801bca6:	429c      	cmp	r4, r3
 801bca8:	bf28      	it	cs
 801bcaa:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801bcac:	2304      	movs	r3, #4
 801bcae:	9303      	str	r3, [sp, #12]
 801bcb0:	aa05      	add	r2, sp, #20
 801bcb2:	9202      	str	r2, [sp, #8]
 801bcb4:	00a2      	lsls	r2, r4, #2
 801bcb6:	9201      	str	r2, [sp, #4]
 801bcb8:	9a05      	ldr	r2, [sp, #20]
 801bcba:	9200      	str	r2, [sp, #0]
 801bcbc:	464a      	mov	r2, r9
 801bcbe:	4641      	mov	r1, r8
 801bcc0:	4638      	mov	r0, r7
 801bcc2:	f7ff fa13 	bl	801b0ec <lfs_bd_read>
        if (err) {
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	2800      	cmp	r0, #0
 801bcca:	d1cf      	bne.n	801bc6c <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801bccc:	2301      	movs	r3, #1
 801bcce:	40a3      	lsls	r3, r4
 801bcd0:	1aed      	subs	r5, r5, r3
 801bcd2:	e7dd      	b.n	801bc90 <lfs_ctz_find+0x3e>
    *block = head;
 801bcd4:	9b05      	ldr	r3, [sp, #20]
 801bcd6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bcd8:	6013      	str	r3, [r2, #0]
    *off = pos;
 801bcda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bcdc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bcde:	6013      	str	r3, [r2, #0]
    return 0;
 801bce0:	2300      	movs	r3, #0
 801bce2:	e7c3      	b.n	801bc6c <lfs_ctz_find+0x1a>

0801bce4 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801bce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bce8:	b087      	sub	sp, #28
 801bcea:	460c      	mov	r4, r1
 801bcec:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801bcee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801bcf0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801bcf2:	4291      	cmp	r1, r2
 801bcf4:	d272      	bcs.n	801bddc <lfs_file_flushedread+0xf8>
 801bcf6:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801bcf8:	eba2 0901 	sub.w	r9, r2, r1
 801bcfc:	4599      	cmp	r9, r3
 801bcfe:	bf28      	it	cs
 801bd00:	4699      	movcs	r9, r3
    nsize = size;
 801bd02:	464e      	mov	r6, r9
    while (nsize > 0) {
 801bd04:	e037      	b.n	801bd76 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801bd06:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801bd0a:	d041      	beq.n	801bd90 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801bd0c:	f06f 0301 	mvn.w	r3, #1
 801bd10:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801bd12:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd14:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801bd16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bd18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801bd1c:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801bd1e:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801bd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd24:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801bd26:	1a9d      	subs	r5, r3, r2
 801bd28:	42b5      	cmp	r5, r6
 801bd2a:	bf28      	it	cs
 801bd2c:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801bd2e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801bd30:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801bd34:	d041      	beq.n	801bdba <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801bd36:	88a1      	ldrh	r1, [r4, #4]
 801bd38:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801bd3a:	9505      	str	r5, [sp, #20]
 801bd3c:	9704      	str	r7, [sp, #16]
 801bd3e:	9203      	str	r2, [sp, #12]
 801bd40:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801bd44:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801bd48:	9102      	str	r1, [sp, #8]
 801bd4a:	4a27      	ldr	r2, [pc, #156]	@ (801bde8 <lfs_file_flushedread+0x104>)
 801bd4c:	9201      	str	r2, [sp, #4]
 801bd4e:	9300      	str	r3, [sp, #0]
 801bd50:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801bd54:	2200      	movs	r2, #0
 801bd56:	f104 0108 	add.w	r1, r4, #8
 801bd5a:	4640      	mov	r0, r8
 801bd5c:	f7ff fd9e 	bl	801b89c <lfs_dir_getread>
            if (err) {
 801bd60:	4603      	mov	r3, r0
 801bd62:	2800      	cmp	r0, #0
 801bd64:	d13b      	bne.n	801bdde <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801bd66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd68:	442b      	add	r3, r5
 801bd6a:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801bd6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801bd6e:	442b      	add	r3, r5
 801bd70:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801bd72:	442f      	add	r7, r5
        nsize -= diff;
 801bd74:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801bd76:	2e00      	cmp	r6, #0
 801bd78:	d02e      	beq.n	801bdd8 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801bd7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bd7c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801bd80:	d0c1      	beq.n	801bd06 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801bd82:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801bd84:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801bd88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801bd8a:	4291      	cmp	r1, r2
 801bd8c:	d1c7      	bne.n	801bd1e <lfs_file_flushedread+0x3a>
 801bd8e:	e7ba      	b.n	801bd06 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801bd90:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801bd94:	9303      	str	r3, [sp, #12]
 801bd96:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801bd9a:	9302      	str	r3, [sp, #8]
 801bd9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd9e:	9301      	str	r3, [sp, #4]
 801bda0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801bda2:	9300      	str	r3, [sp, #0]
 801bda4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801bda6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801bdaa:	2100      	movs	r1, #0
 801bdac:	4640      	mov	r0, r8
 801bdae:	f7ff ff50 	bl	801bc52 <lfs_ctz_find>
                if (err) {
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	2800      	cmp	r0, #0
 801bdb6:	d0ae      	beq.n	801bd16 <lfs_file_flushedread+0x32>
 801bdb8:	e011      	b.n	801bdde <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801bdba:	9503      	str	r5, [sp, #12]
 801bdbc:	9702      	str	r7, [sp, #8]
 801bdbe:	9201      	str	r2, [sp, #4]
 801bdc0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801bdc2:	9200      	str	r2, [sp, #0]
 801bdc4:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801bdc8:	2100      	movs	r1, #0
 801bdca:	4640      	mov	r0, r8
 801bdcc:	f7ff f98e 	bl	801b0ec <lfs_bd_read>
            if (err) {
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d0c7      	beq.n	801bd66 <lfs_file_flushedread+0x82>
 801bdd6:	e002      	b.n	801bdde <lfs_file_flushedread+0xfa>
    return size;
 801bdd8:	464b      	mov	r3, r9
 801bdda:	e000      	b.n	801bdde <lfs_file_flushedread+0xfa>
        return 0;
 801bddc:	2300      	movs	r3, #0
}
 801bdde:	4618      	mov	r0, r3
 801bde0:	b007      	add	sp, #28
 801bde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bde6:	bf00      	nop
 801bde8:	fff7fc00 	.word	0xfff7fc00

0801bdec <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf0:	b089      	sub	sp, #36	@ 0x24
 801bdf2:	4683      	mov	fp, r0
 801bdf4:	468a      	mov	sl, r1
 801bdf6:	9205      	str	r2, [sp, #20]
 801bdf8:	4698      	mov	r8, r3
 801bdfa:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801bdfe:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801be00:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801be02:	2400      	movs	r4, #0
 801be04:	e006      	b.n	801be14 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801be06:	462a      	mov	r2, r5
 801be08:	a906      	add	r1, sp, #24
 801be0a:	6838      	ldr	r0, [r7, #0]
 801be0c:	f003 fd82 	bl	801f914 <lfs_crc>
 801be10:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801be12:	442c      	add	r4, r5
 801be14:	42b4      	cmp	r4, r6
 801be16:	d216      	bcs.n	801be46 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801be18:	1b35      	subs	r5, r6, r4
 801be1a:	2d08      	cmp	r5, #8
 801be1c:	bf28      	it	cs
 801be1e:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801be20:	9503      	str	r5, [sp, #12]
 801be22:	ab06      	add	r3, sp, #24
 801be24:	9302      	str	r3, [sp, #8]
 801be26:	eb04 0309 	add.w	r3, r4, r9
 801be2a:	9301      	str	r3, [sp, #4]
 801be2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801be2e:	9300      	str	r3, [sp, #0]
 801be30:	eba8 0304 	sub.w	r3, r8, r4
 801be34:	9a05      	ldr	r2, [sp, #20]
 801be36:	4651      	mov	r1, sl
 801be38:	4658      	mov	r0, fp
 801be3a:	f7ff f957 	bl	801b0ec <lfs_bd_read>
        if (err) {
 801be3e:	4603      	mov	r3, r0
 801be40:	2800      	cmp	r0, #0
 801be42:	d0e0      	beq.n	801be06 <lfs_bd_crc+0x1a>
 801be44:	e000      	b.n	801be48 <lfs_bd_crc+0x5c>
    return 0;
 801be46:	2300      	movs	r3, #0
}
 801be48:	4618      	mov	r0, r3
 801be4a:	b009      	add	sp, #36	@ 0x24
 801be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be50 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be54:	b097      	sub	sp, #92	@ 0x5c
 801be56:	4605      	mov	r5, r0
 801be58:	460e      	mov	r6, r1
 801be5a:	4617      	mov	r7, r2
 801be5c:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801be5e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801be60:	b13b      	cbz	r3, 801be72 <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801be62:	6812      	ldr	r2, [r2, #0]
 801be64:	4293      	cmp	r3, r2
 801be66:	f240 825a 	bls.w	801c31e <lfs_dir_fetchmatch+0x4ce>
 801be6a:	687a      	ldr	r2, [r7, #4]
 801be6c:	4293      	cmp	r3, r2
 801be6e:	f240 8259 	bls.w	801c324 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801be72:	2400      	movs	r4, #0
 801be74:	9412      	str	r4, [sp, #72]	@ 0x48
 801be76:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801be78:	46a0      	mov	r8, r4
 801be7a:	e010      	b.n	801be9e <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801be7c:	f118 0301 	adds.w	r3, r8, #1
 801be80:	f003 0301 	and.w	r3, r3, #1
 801be84:	bf48      	it	mi
 801be86:	425b      	negmi	r3, r3
 801be88:	a916      	add	r1, sp, #88	@ 0x58
 801be8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801be8e:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801be92:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801be94:	2a00      	cmp	r2, #0
 801be96:	dd00      	ble.n	801be9a <lfs_dir_fetchmatch+0x4a>
            r = i;
 801be98:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801be9a:	f108 0801 	add.w	r8, r8, #1
 801be9e:	f1b8 0f01 	cmp.w	r8, #1
 801bea2:	dc1d      	bgt.n	801bee0 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801bea4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801bea8:	ab12      	add	r3, sp, #72	@ 0x48
 801beaa:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801beae:	2304      	movs	r3, #4
 801beb0:	9303      	str	r3, [sp, #12]
 801beb2:	9202      	str	r2, [sp, #8]
 801beb4:	2100      	movs	r1, #0
 801beb6:	9101      	str	r1, [sp, #4]
 801beb8:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801bebc:	9200      	str	r2, [sp, #0]
 801bebe:	462a      	mov	r2, r5
 801bec0:	4628      	mov	r0, r5
 801bec2:	f7ff f913 	bl	801b0ec <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801bec6:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801beca:	eb0d 0903 	add.w	r9, sp, r3
 801bece:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801bed2:	4683      	mov	fp, r0
 801bed4:	2800      	cmp	r0, #0
 801bed6:	d0d1      	beq.n	801be7c <lfs_dir_fetchmatch+0x2c>
 801bed8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bedc:	d0dd      	beq.n	801be9a <lfs_dir_fetchmatch+0x4a>
 801bede:	e21a      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801bee0:	2c00      	cmp	r4, #0
 801bee2:	f004 0301 	and.w	r3, r4, #1
 801bee6:	bfb8      	it	lt
 801bee8:	425b      	neglt	r3, r3
 801beea:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801beee:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801bef0:	f114 0c01 	adds.w	ip, r4, #1
 801bef4:	f00c 0c01 	and.w	ip, ip, #1
 801bef8:	bf48      	it	mi
 801befa:	f1cc 0c00 	rsbmi	ip, ip, #0
 801befe:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801bf02:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801bf04:	aa16      	add	r2, sp, #88	@ 0x58
 801bf06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bf0a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801bf0e:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801bf10:	2400      	movs	r4, #0
 801bf12:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801bf14:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801bf18:	f8cd c01c 	str.w	ip, [sp, #28]
 801bf1c:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801bf1e:	f1b9 0f01 	cmp.w	r9, #1
 801bf22:	f300 81eb 	bgt.w	801c2fc <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801bf26:	4a90      	ldr	r2, [pc, #576]	@ (801c168 <lfs_dir_fetchmatch+0x318>)
 801bf28:	ab0e      	add	r3, sp, #56	@ 0x38
 801bf2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bf2e:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801bf32:	2204      	movs	r2, #4
 801bf34:	f106 0108 	add.w	r1, r6, #8
 801bf38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bf3c:	f003 fcea 	bl	801f914 <lfs_crc>
 801bf40:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801bf42:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801bf46:	2300      	movs	r3, #0
 801bf48:	461c      	mov	r4, r3
 801bf4a:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801bf4c:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801bf4e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801bf52:	461f      	mov	r7, r3
 801bf54:	e110      	b.n	801c178 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801bf56:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bf5a:	d101      	bne.n	801bf60 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	e01e      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
                return err;
 801bf60:	4683      	mov	fp, r0
 801bf62:	e1d8      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801bf64:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801bf68:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801bf6c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801bf70:	bf14      	ite	ne
 801bf72:	2300      	movne	r3, #0
 801bf74:	2301      	moveq	r3, #1
                break;
 801bf76:	e012      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801bf78:	2204      	movs	r2, #4
 801bf7a:	9203      	str	r2, [sp, #12]
 801bf7c:	aa0d      	add	r2, sp, #52	@ 0x34
 801bf7e:	9202      	str	r2, [sp, #8]
 801bf80:	1d22      	adds	r2, r4, #4
 801bf82:	9201      	str	r2, [sp, #4]
 801bf84:	6832      	ldr	r2, [r6, #0]
 801bf86:	9200      	str	r2, [sp, #0]
 801bf88:	462a      	mov	r2, r5
 801bf8a:	2100      	movs	r1, #0
 801bf8c:	4628      	mov	r0, r5
 801bf8e:	f7ff f8ad 	bl	801b0ec <lfs_bd_read>
                if (err) {
 801bf92:	bb80      	cbnz	r0, 801bff6 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801bf94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bf96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf98:	429a      	cmp	r2, r3
 801bf9a:	d031      	beq.n	801c000 <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801bf9c:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801bf9e:	68f2      	ldr	r2, [r6, #12]
 801bfa0:	2a00      	cmp	r2, #0
 801bfa2:	f000 8165 	beq.w	801c270 <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801bfa6:	2100      	movs	r1, #0
 801bfa8:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801bfaa:	b153      	cbz	r3, 801bfc2 <lfs_dir_fetchmatch+0x172>
 801bfac:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801bfae:	6a01      	ldr	r1, [r0, #32]
 801bfb0:	fbb2 f3f1 	udiv	r3, r2, r1
 801bfb4:	fb01 2313 	mls	r3, r1, r3, r2
 801bfb8:	b91b      	cbnz	r3, 801bfc2 <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801bfba:	9b08      	ldr	r3, [sp, #32]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	f040 8165 	bne.w	801c28c <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801bfc2:	4631      	mov	r1, r6
 801bfc4:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801bfc8:	f7fe ff00 	bl	801adcc <lfs_gstate_hasmovehere>
 801bfcc:	2800      	cmp	r0, #0
 801bfce:	f000 817d 	beq.w	801c2cc <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801bfd2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801bfd4:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801bfd8:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	f000 8173 	beq.w	801c2c8 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801bfe2:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801bfe6:	f000 8171 	beq.w	801c2cc <lfs_dir_fetchmatch+0x47c>
 801bfea:	429a      	cmp	r2, r3
 801bfec:	f240 816e 	bls.w	801c2cc <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801bff0:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801bff4:	e16a      	b.n	801c2cc <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801bff6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bffa:	d0cf      	beq.n	801bf9c <lfs_dir_fetchmatch+0x14c>
                    return err;
 801bffc:	4683      	mov	fp, r0
 801bffe:	e18a      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801c000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c002:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801c006:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801c00a:	2204      	movs	r2, #4
 801c00c:	a90b      	add	r1, sp, #44	@ 0x2c
 801c00e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c010:	f003 fc80 	bl	801f914 <lfs_crc>
 801c014:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801c016:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c018:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c01c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c020:	bf08      	it	eq
 801c022:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801c024:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c028:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801c02a:	4423      	add	r3, r4
 801c02c:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801c02e:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801c032:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801c034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c036:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801c038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c03a:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801c03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c03e:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801c040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c044:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801c046:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c04a:	e095      	b.n	801c178 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801c04c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c050:	d101      	bne.n	801c056 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801c052:	2300      	movs	r3, #0
 801c054:	e7a3      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
                return err;
 801c056:	4683      	mov	fp, r0
 801c058:	e15d      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801c05a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801c05e:	d021      	beq.n	801c0a4 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801c060:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801c064:	d046      	beq.n	801c0f4 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801c066:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801c06a:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801c06e:	429a      	cmp	r2, r3
 801c070:	f040 80e3 	bne.w	801c23a <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c074:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c078:	2208      	movs	r2, #8
 801c07a:	9203      	str	r2, [sp, #12]
 801c07c:	aa10      	add	r2, sp, #64	@ 0x40
 801c07e:	9202      	str	r2, [sp, #8]
 801c080:	f8cd 8004 	str.w	r8, [sp, #4]
 801c084:	6832      	ldr	r2, [r6, #0]
 801c086:	9200      	str	r2, [sp, #0]
 801c088:	462a      	mov	r2, r5
 801c08a:	2100      	movs	r1, #0
 801c08c:	4628      	mov	r0, r5
 801c08e:	f7ff f82d 	bl	801b0ec <lfs_bd_read>
                if (err) {
 801c092:	2800      	cmp	r0, #0
 801c094:	d04a      	beq.n	801c12c <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801c096:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c09a:	f000 80e7 	beq.w	801c26c <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801c09e:	2301      	movs	r3, #1
 801c0a0:	9308      	str	r3, [sp, #32]
 801c0a2:	e0ca      	b.n	801c23a <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801c0a4:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801c0a6:	fa17 f280 	uxtah	r2, r7, r0
 801c0aa:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801c0ac:	9a06      	ldr	r2, [sp, #24]
 801c0ae:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801c0b0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801c0b4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801c0b8:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801c0bc:	f022 0203 	bic.w	r2, r2, #3
 801c0c0:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801c0c4:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801c0c8:	4293      	cmp	r3, r2
 801c0ca:	d00f      	beq.n	801c0ec <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801c0cc:	9a06      	ldr	r2, [sp, #24]
 801c0ce:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c0d2:	f000 80b2 	beq.w	801c23a <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801c0d6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801c0da:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	f0c0 80ab 	bcc.w	801c23a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801c0e4:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801c0e8:	9306      	str	r3, [sp, #24]
 801c0ea:	e0a6      	b.n	801c23a <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801c0ec:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801c0f0:	9306      	str	r3, [sp, #24]
 801c0f2:	e0a2      	b.n	801c23a <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801c0f4:	f000 0301 	and.w	r3, r0, #1
 801c0f8:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c0fa:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801c0fe:	2208      	movs	r2, #8
 801c100:	9203      	str	r2, [sp, #12]
 801c102:	aa0e      	add	r2, sp, #56	@ 0x38
 801c104:	9202      	str	r2, [sp, #8]
 801c106:	f8cd 8004 	str.w	r8, [sp, #4]
 801c10a:	6832      	ldr	r2, [r6, #0]
 801c10c:	9200      	str	r2, [sp, #0]
 801c10e:	462a      	mov	r2, r5
 801c110:	2100      	movs	r1, #0
 801c112:	4628      	mov	r0, r5
 801c114:	f7fe ffea 	bl	801b0ec <lfs_bd_read>
                if (err) {
 801c118:	2800      	cmp	r0, #0
 801c11a:	f000 808e 	beq.w	801c23a <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801c11e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c122:	d101      	bne.n	801c128 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801c124:	2300      	movs	r3, #0
 801c126:	e73a      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
                    return err;
 801c128:	4683      	mov	fp, r0
 801c12a:	e0f4      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801c12c:	2301      	movs	r3, #1
 801c12e:	9308      	str	r3, [sp, #32]
 801c130:	e083      	b.n	801c23a <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801c132:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c136:	d101      	bne.n	801c13c <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801c138:	2300      	movs	r3, #0
 801c13a:	e730      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
                    return res;
 801c13c:	4683      	mov	fp, r0
 801c13e:	e0ea      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801c140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c142:	9b06      	ldr	r3, [sp, #24]
 801c144:	469c      	mov	ip, r3
 801c146:	ea82 0103 	eor.w	r1, r2, r3
 801c14a:	4b08      	ldr	r3, [pc, #32]	@ (801c16c <lfs_dir_fetchmatch+0x31c>)
 801c14c:	400b      	ands	r3, r1
 801c14e:	b17b      	cbz	r3, 801c170 <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801c150:	2802      	cmp	r0, #2
 801c152:	d110      	bne.n	801c176 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801c154:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801c158:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801c15c:	459c      	cmp	ip, r3
 801c15e:	d30a      	bcc.n	801c176 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801c160:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801c164:	9306      	str	r3, [sp, #24]
 801c166:	e006      	b.n	801c176 <lfs_dir_fetchmatch+0x326>
 801c168:	08035bc4 	.word	0x08035bc4
 801c16c:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801c170:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c174:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801c176:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c178:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c17c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801c180:	bf14      	ite	ne
 801c182:	4643      	movne	r3, r8
 801c184:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801c188:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c18c:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801c18e:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801c190:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801c194:	2204      	movs	r2, #4
 801c196:	9203      	str	r2, [sp, #12]
 801c198:	aa0c      	add	r2, sp, #48	@ 0x30
 801c19a:	9202      	str	r2, [sp, #8]
 801c19c:	9401      	str	r4, [sp, #4]
 801c19e:	6832      	ldr	r2, [r6, #0]
 801c1a0:	9200      	str	r2, [sp, #0]
 801c1a2:	462a      	mov	r2, r5
 801c1a4:	2100      	movs	r1, #0
 801c1a6:	4628      	mov	r0, r5
 801c1a8:	f7fe ffa0 	bl	801b0ec <lfs_bd_read>
            if (err) {
 801c1ac:	2800      	cmp	r0, #0
 801c1ae:	f47f aed2 	bne.w	801bf56 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801c1b2:	2204      	movs	r2, #4
 801c1b4:	a90c      	add	r1, sp, #48	@ 0x30
 801c1b6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c1b8:	f003 fbac 	bl	801f914 <lfs_crc>
 801c1bc:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801c1be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801c1c0:	ba1b      	rev	r3, r3
 801c1c2:	ea88 0a03 	eor.w	sl, r8, r3
 801c1c6:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801c1ca:	f1ba 0f00 	cmp.w	sl, #0
 801c1ce:	f6ff aec9 	blt.w	801bf64 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c1d2:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c1da:	bf14      	ite	ne
 801c1dc:	4652      	movne	r2, sl
 801c1de:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801c1e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c1e6:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801c1e8:	4421      	add	r1, r4
 801c1ea:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1ee:	4299      	cmp	r1, r3
 801c1f0:	d83a      	bhi.n	801c268 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801c1f2:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801c1f6:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801c1fa:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801c1fe:	f43f aebb 	beq.w	801bf78 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801c202:	f104 0804 	add.w	r8, r4, #4
 801c206:	a90b      	add	r1, sp, #44	@ 0x2c
 801c208:	9103      	str	r1, [sp, #12]
 801c20a:	9202      	str	r2, [sp, #8]
 801c20c:	f8cd 8004 	str.w	r8, [sp, #4]
 801c210:	6832      	ldr	r2, [r6, #0]
 801c212:	9200      	str	r2, [sp, #0]
 801c214:	462a      	mov	r2, r5
 801c216:	2100      	movs	r1, #0
 801c218:	4628      	mov	r0, r5
 801c21a:	f7ff fde7 	bl	801bdec <lfs_bd_crc>
            if (err) {
 801c21e:	2800      	cmp	r0, #0
 801c220:	f47f af14 	bne.w	801c04c <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801c226:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801c228:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801c22c:	f47f af15 	bne.w	801c05a <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801c230:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801c234:	429f      	cmp	r7, r3
 801c236:	d800      	bhi.n	801c23a <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801c238:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801c23a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c23c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c23e:	404b      	eors	r3, r1
 801c240:	9a05      	ldr	r2, [sp, #20]
 801c242:	4213      	tst	r3, r2
 801c244:	d197      	bne.n	801c176 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801c246:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801c248:	9314      	str	r3, [sp, #80]	@ 0x50
 801c24a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801c24e:	aa14      	add	r2, sp, #80	@ 0x50
 801c250:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801c252:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c254:	4798      	blx	r3
                if (res < 0) {
 801c256:	2800      	cmp	r0, #0
 801c258:	f6ff af6b 	blt.w	801c132 <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801c25c:	2800      	cmp	r0, #0
 801c25e:	f47f af6f 	bne.w	801c140 <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801c262:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c264:	9306      	str	r3, [sp, #24]
 801c266:	e786      	b.n	801c176 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801c268:	2300      	movs	r3, #0
 801c26a:	e698      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
 801c26c:	2300      	movs	r3, #0
 801c26e:	e696      	b.n	801bf9e <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801c270:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801c272:	6872      	ldr	r2, [r6, #4]
 801c274:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801c276:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801c278:	aa16      	add	r2, sp, #88	@ 0x58
 801c27a:	9b07      	ldr	r3, [sp, #28]
 801c27c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c280:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801c284:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801c286:	f109 0901 	add.w	r9, r9, #1
 801c28a:	e648      	b.n	801bf1e <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801c28c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c290:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801c292:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801c294:	a90d      	add	r1, sp, #52	@ 0x34
 801c296:	9103      	str	r1, [sp, #12]
 801c298:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c29a:	9102      	str	r1, [sp, #8]
 801c29c:	9201      	str	r2, [sp, #4]
 801c29e:	6832      	ldr	r2, [r6, #0]
 801c2a0:	9200      	str	r2, [sp, #0]
 801c2a2:	462a      	mov	r2, r5
 801c2a4:	2100      	movs	r1, #0
 801c2a6:	4628      	mov	r0, r5
 801c2a8:	f7ff fda0 	bl	801bdec <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801c2ac:	b120      	cbz	r0, 801c2b8 <lfs_dir_fetchmatch+0x468>
 801c2ae:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c2b2:	d001      	beq.n	801c2b8 <lfs_dir_fetchmatch+0x468>
                    return err;
 801c2b4:	4683      	mov	fp, r0
 801c2b6:	e02e      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801c2b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c2ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c2bc:	4293      	cmp	r3, r2
 801c2be:	bf14      	ite	ne
 801c2c0:	2300      	movne	r3, #0
 801c2c2:	2301      	moveq	r3, #1
 801c2c4:	75b3      	strb	r3, [r6, #22]
 801c2c6:	e67c      	b.n	801bfc2 <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801c2c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801c2cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c2ce:	b13b      	cbz	r3, 801c2e0 <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801c2d0:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801c2d4:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801c2d6:	4293      	cmp	r3, r2
 801c2d8:	bf28      	it	cs
 801c2da:	4613      	movcs	r3, r2
 801c2dc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c2de:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801c2e0:	f1bb 0f00 	cmp.w	fp, #0
 801c2e4:	da17      	bge.n	801c316 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801c2e6:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801c2ea:	8ab2      	ldrh	r2, [r6, #20]
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	d902      	bls.n	801c2f6 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801c2f0:	f06f 0b01 	mvn.w	fp, #1
 801c2f4:	e00f      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801c2f6:	f04f 0b00 	mov.w	fp, #0
 801c2fa:	e00c      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801c2fc:	4b0b      	ldr	r3, [pc, #44]	@ (801c32c <lfs_dir_fetchmatch+0x4dc>)
 801c2fe:	9301      	str	r3, [sp, #4]
 801c300:	6873      	ldr	r3, [r6, #4]
 801c302:	9300      	str	r3, [sp, #0]
 801c304:	6833      	ldr	r3, [r6, #0]
 801c306:	f240 5259 	movw	r2, #1369	@ 0x559
 801c30a:	4909      	ldr	r1, [pc, #36]	@ (801c330 <lfs_dir_fetchmatch+0x4e0>)
 801c30c:	4809      	ldr	r0, [pc, #36]	@ (801c334 <lfs_dir_fetchmatch+0x4e4>)
 801c30e:	f00d fd99 	bl	8029e44 <printf>
    return LFS_ERR_CORRUPT;
 801c312:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801c316:	4658      	mov	r0, fp
 801c318:	b017      	add	sp, #92	@ 0x5c
 801c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801c31e:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c322:	e7f8      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
 801c324:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801c328:	e7f5      	b.n	801c316 <lfs_dir_fetchmatch+0x4c6>
 801c32a:	bf00      	nop
 801c32c:	08036a40 	.word	0x08036a40
 801c330:	08038e6c 	.word	0x08038e6c
 801c334:	08038ff4 	.word	0x08038ff4

0801c338 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801c338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c33c:	b08a      	sub	sp, #40	@ 0x28
 801c33e:	4681      	mov	r9, r0
 801c340:	4688      	mov	r8, r1
 801c342:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801c344:	2300      	movs	r3, #0
 801c346:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801c348:	2501      	movs	r5, #1
 801c34a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c34c:	4a29      	ldr	r2, [pc, #164]	@ (801c3f4 <lfs_fs_parent+0xbc>)
 801c34e:	ab05      	add	r3, sp, #20
 801c350:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c354:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c358:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801c35a:	e03a      	b.n	801c3d2 <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801c35c:	4b26      	ldr	r3, [pc, #152]	@ (801c3f8 <lfs_fs_parent+0xc0>)
 801c35e:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801c362:	4926      	ldr	r1, [pc, #152]	@ (801c3fc <lfs_fs_parent+0xc4>)
 801c364:	4826      	ldr	r0, [pc, #152]	@ (801c400 <lfs_fs_parent+0xc8>)
 801c366:	f00d fd6d 	bl	8029e44 <printf>
            return LFS_ERR_CORRUPT;
 801c36a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c36e:	e03c      	b.n	801c3ea <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801c370:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801c372:	69e3      	ldr	r3, [r4, #28]
 801c374:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801c376:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c37a:	2500      	movs	r5, #0
 801c37c:	e00d      	b.n	801c39a <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c37e:	2301      	movs	r3, #1
 801c380:	e000      	b.n	801c384 <lfs_fs_parent+0x4c>
 801c382:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801c384:	bb7b      	cbnz	r3, 801c3e6 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801c386:	f104 0618 	add.w	r6, r4, #24
 801c38a:	a905      	add	r1, sp, #20
 801c38c:	4630      	mov	r0, r6
 801c38e:	f7fe fce7 	bl	801ad60 <lfs_pair_issync>
 801c392:	2800      	cmp	r0, #0
 801c394:	d1e2      	bne.n	801c35c <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801c396:	4555      	cmp	r5, sl
 801c398:	d0ea      	beq.n	801c370 <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801c39a:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c39c:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801c3a0:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c3a4:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801c3a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801c3aa:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801c3ac:	ab07      	add	r3, sp, #28
 801c3ae:	9303      	str	r3, [sp, #12]
 801c3b0:	4b14      	ldr	r3, [pc, #80]	@ (801c404 <lfs_fs_parent+0xcc>)
 801c3b2:	9302      	str	r3, [sp, #8]
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	9301      	str	r3, [sp, #4]
 801c3b8:	4b13      	ldr	r3, [pc, #76]	@ (801c408 <lfs_fs_parent+0xd0>)
 801c3ba:	9300      	str	r3, [sp, #0]
 801c3bc:	4b13      	ldr	r3, [pc, #76]	@ (801c40c <lfs_fs_parent+0xd4>)
 801c3be:	4632      	mov	r2, r6
 801c3c0:	4621      	mov	r1, r4
 801c3c2:	4648      	mov	r0, r9
 801c3c4:	f7ff fd44 	bl	801be50 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801c3c8:	4603      	mov	r3, r0
 801c3ca:	b110      	cbz	r0, 801c3d2 <lfs_fs_parent+0x9a>
 801c3cc:	f110 0f02 	cmn.w	r0, #2
 801c3d0:	d10b      	bne.n	801c3ea <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c3d2:	69a7      	ldr	r7, [r4, #24]
 801c3d4:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c3d8:	d0d3      	beq.n	801c382 <lfs_fs_parent+0x4a>
 801c3da:	69e3      	ldr	r3, [r4, #28]
 801c3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c3e0:	d0cd      	beq.n	801c37e <lfs_fs_parent+0x46>
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	e7ce      	b.n	801c384 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801c3e6:	f06f 0301 	mvn.w	r3, #1
}
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	b00a      	add	sp, #40	@ 0x28
 801c3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3f2:	bf00      	nop
 801c3f4:	08035bc4 	.word	0x08035bc4
 801c3f8:	08036a40 	.word	0x08036a40
 801c3fc:	08038e6c 	.word	0x08038e6c
 801c400:	0803902c 	.word	0x0803902c
 801c404:	0801b521 	.word	0x0801b521
 801c408:	20000008 	.word	0x20000008
 801c40c:	7ff003ff 	.word	0x7ff003ff

0801c410 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801c410:	b500      	push	{lr}
 801c412:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801c414:	2300      	movs	r3, #0
 801c416:	9303      	str	r3, [sp, #12]
 801c418:	9302      	str	r3, [sp, #8]
 801c41a:	9301      	str	r3, [sp, #4]
 801c41c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c420:	9300      	str	r3, [sp, #0]
 801c422:	f7ff fd15 	bl	801be50 <lfs_dir_fetchmatch>
}
 801c426:	b005      	add	sp, #20
 801c428:	f85d fb04 	ldr.w	pc, [sp], #4

0801c42c <lfs_fs_traverse_>:
        bool includeorphans) {
 801c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c430:	b093      	sub	sp, #76	@ 0x4c
 801c432:	4606      	mov	r6, r0
 801c434:	460f      	mov	r7, r1
 801c436:	4690      	mov	r8, r2
 801c438:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801c43a:	2220      	movs	r2, #32
 801c43c:	2100      	movs	r1, #0
 801c43e:	a80a      	add	r0, sp, #40	@ 0x28
 801c440:	f010 fa1e 	bl	802c880 <memset>
 801c444:	2501      	movs	r5, #1
 801c446:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c448:	4a62      	ldr	r2, [pc, #392]	@ (801c5d4 <lfs_fs_traverse_+0x1a8>)
 801c44a:	ab08      	add	r3, sp, #32
 801c44c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c450:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c454:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c456:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c458:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801c45c:	f000 8081 	beq.w	801c562 <lfs_fs_traverse_+0x136>
 801c460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c466:	d07a      	beq.n	801c55e <lfs_fs_traverse_+0x132>
 801c468:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d17b      	bne.n	801c566 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801c46e:	a908      	add	r1, sp, #32
 801c470:	a810      	add	r0, sp, #64	@ 0x40
 801c472:	f7fe fc75 	bl	801ad60 <lfs_pair_issync>
 801c476:	b988      	cbnz	r0, 801c49c <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801c478:	4555      	cmp	r5, sl
 801c47a:	d019      	beq.n	801c4b0 <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801c47c:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801c47e:	2400      	movs	r4, #0
 801c480:	2c01      	cmp	r4, #1
 801c482:	dc1c      	bgt.n	801c4be <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801c484:	1da3      	adds	r3, r4, #6
 801c486:	aa12      	add	r2, sp, #72	@ 0x48
 801c488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c48c:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801c490:	4640      	mov	r0, r8
 801c492:	47b8      	blx	r7
            if (err) {
 801c494:	4603      	mov	r3, r0
 801c496:	b9f8      	cbnz	r0, 801c4d8 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801c498:	3401      	adds	r4, #1
 801c49a:	e7f1      	b.n	801c480 <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801c49c:	4b4e      	ldr	r3, [pc, #312]	@ (801c5d8 <lfs_fs_traverse_+0x1ac>)
 801c49e:	f241 2222 	movw	r2, #4642	@ 0x1222
 801c4a2:	494e      	ldr	r1, [pc, #312]	@ (801c5dc <lfs_fs_traverse_+0x1b0>)
 801c4a4:	484e      	ldr	r0, [pc, #312]	@ (801c5e0 <lfs_fs_traverse_+0x1b4>)
 801c4a6:	f00d fccd 	bl	8029e44 <printf>
            return LFS_ERR_CORRUPT;
 801c4aa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801c4ae:	e013      	b.n	801c4d8 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801c4b0:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801c4b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c4b4:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801c4b6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801c4ba:	2500      	movs	r5, #0
 801c4bc:	e7de      	b.n	801c47c <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801c4be:	aa10      	add	r2, sp, #64	@ 0x40
 801c4c0:	a90a      	add	r1, sp, #40	@ 0x28
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f7ff ffa4 	bl	801c410 <lfs_dir_fetch>
        if (err) {
 801c4c8:	9005      	str	r0, [sp, #20]
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	d17f      	bne.n	801c5ce <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c4ce:	2400      	movs	r4, #0
 801c4d0:	e016      	b.n	801c500 <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801c4d2:	f113 0f02 	cmn.w	r3, #2
 801c4d6:	d011      	beq.n	801c4fc <lfs_fs_traverse_+0xd0>
}
 801c4d8:	4618      	mov	r0, r3
 801c4da:	b013      	add	sp, #76	@ 0x4c
 801c4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801c4e0:	f8cd 8008 	str.w	r8, [sp, #8]
 801c4e4:	9701      	str	r7, [sp, #4]
 801c4e6:	9b07      	ldr	r3, [sp, #28]
 801c4e8:	9300      	str	r3, [sp, #0]
 801c4ea:	9b06      	ldr	r3, [sp, #24]
 801c4ec:	4632      	mov	r2, r6
 801c4ee:	2100      	movs	r1, #0
 801c4f0:	4630      	mov	r0, r6
 801c4f2:	f7fe ffc9 	bl	801b488 <lfs_ctz_traverse>
                if (err) {
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	2800      	cmp	r0, #0
 801c4fa:	d1ed      	bne.n	801c4d8 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801c4fc:	3401      	adds	r4, #1
 801c4fe:	b2a4      	uxth	r4, r4
 801c500:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801c504:	42a3      	cmp	r3, r4
 801c506:	d9a6      	bls.n	801c456 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801c508:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801c50a:	aa06      	add	r2, sp, #24
 801c50c:	9200      	str	r2, [sp, #0]
 801c50e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801c512:	f043 0308 	orr.w	r3, r3, #8
 801c516:	4a33      	ldr	r2, [pc, #204]	@ (801c5e4 <lfs_fs_traverse_+0x1b8>)
 801c518:	a90a      	add	r1, sp, #40	@ 0x28
 801c51a:	4630      	mov	r0, r6
 801c51c:	f7fe ff8a 	bl	801b434 <lfs_dir_get>
            if (tag < 0) {
 801c520:	1e03      	subs	r3, r0, #0
 801c522:	dbd6      	blt.n	801c4d2 <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801c524:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801c528:	f240 2202 	movw	r2, #514	@ 0x202
 801c52c:	4293      	cmp	r3, r2
 801c52e:	d0d7      	beq.n	801c4e0 <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801c530:	f1b9 0f00 	cmp.w	r9, #0
 801c534:	d0e2      	beq.n	801c4fc <lfs_fs_traverse_+0xd0>
 801c536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c53a:	d1df      	bne.n	801c4fc <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801c53c:	f8dd b014 	ldr.w	fp, [sp, #20]
 801c540:	e001      	b.n	801c546 <lfs_fs_traverse_+0x11a>
 801c542:	f10b 0b01 	add.w	fp, fp, #1
 801c546:	f1bb 0f01 	cmp.w	fp, #1
 801c54a:	dcd7      	bgt.n	801c4fc <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801c54c:	ab06      	add	r3, sp, #24
 801c54e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801c552:	4640      	mov	r0, r8
 801c554:	47b8      	blx	r7
                    if (err) {
 801c556:	4603      	mov	r3, r0
 801c558:	2800      	cmp	r0, #0
 801c55a:	d0f2      	beq.n	801c542 <lfs_fs_traverse_+0x116>
 801c55c:	e7bc      	b.n	801c4d8 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c55e:	2301      	movs	r3, #1
 801c560:	e783      	b.n	801c46a <lfs_fs_traverse_+0x3e>
 801c562:	2301      	movs	r3, #1
 801c564:	e781      	b.n	801c46a <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c566:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801c568:	e00f      	b.n	801c58a <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c56a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c56c:	f8cd 8008 	str.w	r8, [sp, #8]
 801c570:	9701      	str	r7, [sp, #4]
 801c572:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c574:	9200      	str	r2, [sp, #0]
 801c576:	4632      	mov	r2, r6
 801c578:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c57c:	4630      	mov	r0, r6
 801c57e:	f7fe ff83 	bl	801b488 <lfs_ctz_traverse>
            if (err) {
 801c582:	4603      	mov	r3, r0
 801c584:	b158      	cbz	r0, 801c59e <lfs_fs_traverse_+0x172>
 801c586:	e7a7      	b.n	801c4d8 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801c588:	6824      	ldr	r4, [r4, #0]
 801c58a:	b1f4      	cbz	r4, 801c5ca <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801c58c:	79a3      	ldrb	r3, [r4, #6]
 801c58e:	2b01      	cmp	r3, #1
 801c590:	d1fa      	bne.n	801c588 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801c592:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c594:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801c598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c59c:	d0e5      	beq.n	801c56a <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801c59e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c5a0:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801c5a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c5a8:	d1ee      	bne.n	801c588 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801c5aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c5ac:	f8cd 8008 	str.w	r8, [sp, #8]
 801c5b0:	9701      	str	r7, [sp, #4]
 801c5b2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c5b4:	9200      	str	r2, [sp, #0]
 801c5b6:	4632      	mov	r2, r6
 801c5b8:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c5bc:	4630      	mov	r0, r6
 801c5be:	f7fe ff63 	bl	801b488 <lfs_ctz_traverse>
            if (err) {
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	2800      	cmp	r0, #0
 801c5c6:	d0df      	beq.n	801c588 <lfs_fs_traverse_+0x15c>
 801c5c8:	e786      	b.n	801c4d8 <lfs_fs_traverse_+0xac>
    return 0;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	e784      	b.n	801c4d8 <lfs_fs_traverse_+0xac>
            return err;
 801c5ce:	9b05      	ldr	r3, [sp, #20]
 801c5d0:	e782      	b.n	801c4d8 <lfs_fs_traverse_+0xac>
 801c5d2:	bf00      	nop
 801c5d4:	08035bc4 	.word	0x08035bc4
 801c5d8:	08036a40 	.word	0x08036a40
 801c5dc:	08038e6c 	.word	0x08038e6c
 801c5e0:	0803902c 	.word	0x0803902c
 801c5e4:	700ffc00 	.word	0x700ffc00

0801c5e8 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801c5e8:	b538      	push	{r3, r4, r5, lr}
 801c5ea:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c5ec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801c5ee:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801c5f0:	4413      	add	r3, r2
            % lfs->block_count;
 801c5f2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801c5f4:	fbb3 f1f2 	udiv	r1, r3, r2
 801c5f8:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801c5fc:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801c5fe:	2100      	movs	r1, #0
 801c600:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801c602:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c604:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801c606:	00db      	lsls	r3, r3, #3
 801c608:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c60a:	4283      	cmp	r3, r0
 801c60c:	bf28      	it	cs
 801c60e:	4603      	movcs	r3, r0
 801c610:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801c612:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801c614:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801c616:	f010 f933 	bl	802c880 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801c61a:	2301      	movs	r3, #1
 801c61c:	4622      	mov	r2, r4
 801c61e:	4906      	ldr	r1, [pc, #24]	@ (801c638 <lfs_alloc_scan+0x50>)
 801c620:	4620      	mov	r0, r4
 801c622:	f7ff ff03 	bl	801c42c <lfs_fs_traverse_>
    if (err) {
 801c626:	4605      	mov	r5, r0
 801c628:	b908      	cbnz	r0, 801c62e <lfs_alloc_scan+0x46>
}
 801c62a:	4628      	mov	r0, r5
 801c62c:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801c62e:	4620      	mov	r0, r4
 801c630:	f7fe fc15 	bl	801ae5e <lfs_alloc_drop>
        return err;
 801c634:	e7f9      	b.n	801c62a <lfs_alloc_scan+0x42>
 801c636:	bf00      	nop
 801c638:	0801ae6d 	.word	0x0801ae6d

0801c63c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801c63c:	b530      	push	{r4, r5, lr}
 801c63e:	b083      	sub	sp, #12
 801c640:	4604      	mov	r4, r0
 801c642:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801c644:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c646:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c648:	4293      	cmp	r3, r2
 801c64a:	d22b      	bcs.n	801c6a4 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c64c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c64e:	08da      	lsrs	r2, r3, #3
 801c650:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801c652:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c656:	40ca      	lsrs	r2, r1
 801c658:	f012 0f01 	tst.w	r2, #1
 801c65c:	d005      	beq.n	801c66a <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801c65e:	3301      	adds	r3, #1
 801c660:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801c662:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801c664:	3b01      	subs	r3, #1
 801c666:	6623      	str	r3, [r4, #96]	@ 0x60
 801c668:	e7ec      	b.n	801c644 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c66a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c66c:	4413      	add	r3, r2
                        % lfs->block_count;
 801c66e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c670:	fbb3 f1f2 	udiv	r1, r3, r2
 801c674:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801c678:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801c67a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801c67c:	3301      	adds	r3, #1
 801c67e:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801c680:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c682:	3a01      	subs	r2, #1
 801c684:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801c686:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801c688:	4293      	cmp	r3, r2
 801c68a:	d225      	bcs.n	801c6d8 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c68c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801c68e:	08da      	lsrs	r2, r3, #3
 801c690:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801c692:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801c696:	fa22 f303 	lsr.w	r3, r2, r3
 801c69a:	f013 0f01 	tst.w	r3, #1
 801c69e:	d1ec      	bne.n	801c67a <lfs_alloc+0x3e>
                        return 0;
 801c6a0:	2000      	movs	r0, #0
 801c6a2:	e01a      	b.n	801c6da <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801c6a4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801c6a6:	b12a      	cbz	r2, 801c6b4 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801c6a8:	4620      	mov	r0, r4
 801c6aa:	f7ff ff9d 	bl	801c5e8 <lfs_alloc_scan>
        if(err) {
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	d0c8      	beq.n	801c644 <lfs_alloc+0x8>
 801c6b2:	e012      	b.n	801c6da <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801c6b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c6b6:	4413      	add	r3, r2
 801c6b8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801c6ba:	fbb3 f1f2 	udiv	r1, r3, r2
 801c6be:	4808      	ldr	r0, [pc, #32]	@ (801c6e0 <lfs_alloc+0xa4>)
 801c6c0:	9000      	str	r0, [sp, #0]
 801c6c2:	fb02 3311 	mls	r3, r2, r1, r3
 801c6c6:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801c6ca:	4906      	ldr	r1, [pc, #24]	@ (801c6e4 <lfs_alloc+0xa8>)
 801c6cc:	4806      	ldr	r0, [pc, #24]	@ (801c6e8 <lfs_alloc+0xac>)
 801c6ce:	f00d fbb9 	bl	8029e44 <printf>
            return LFS_ERR_NOSPC;
 801c6d2:	f06f 001b 	mvn.w	r0, #27
 801c6d6:	e000      	b.n	801c6da <lfs_alloc+0x9e>
                        return 0;
 801c6d8:	2000      	movs	r0, #0
}
 801c6da:	b003      	add	sp, #12
 801c6dc:	bd30      	pop	{r4, r5, pc}
 801c6de:	bf00      	nop
 801c6e0:	08036a40 	.word	0x08036a40
 801c6e4:	08038e6c 	.word	0x08038e6c
 801c6e8:	08039058 	.word	0x08039058

0801c6ec <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801c6ec:	b570      	push	{r4, r5, r6, lr}
 801c6ee:	b084      	sub	sp, #16
 801c6f0:	4606      	mov	r6, r0
 801c6f2:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801c6f4:	2500      	movs	r5, #0
 801c6f6:	2d01      	cmp	r5, #1
 801c6f8:	dc0d      	bgt.n	801c716 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801c6fa:	3501      	adds	r5, #1
 801c6fc:	f005 0101 	and.w	r1, r5, #1
 801c700:	bf48      	it	mi
 801c702:	4249      	negmi	r1, r1
 801c704:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c708:	4630      	mov	r0, r6
 801c70a:	f7ff ff97 	bl	801c63c <lfs_alloc>
        if (err) {
 801c70e:	4603      	mov	r3, r0
 801c710:	2800      	cmp	r0, #0
 801c712:	d0f0      	beq.n	801c6f6 <lfs_dir_alloc+0xa>
 801c714:	e02d      	b.n	801c772 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801c716:	2100      	movs	r1, #0
 801c718:	4622      	mov	r2, r4
 801c71a:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801c71e:	2304      	movs	r3, #4
 801c720:	9303      	str	r3, [sp, #12]
 801c722:	9202      	str	r2, [sp, #8]
 801c724:	9101      	str	r1, [sp, #4]
 801c726:	6822      	ldr	r2, [r4, #0]
 801c728:	9200      	str	r2, [sp, #0]
 801c72a:	4632      	mov	r2, r6
 801c72c:	4630      	mov	r0, r6
 801c72e:	f7fe fcdd 	bl	801b0ec <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801c732:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801c734:	4603      	mov	r3, r0
 801c736:	b110      	cbz	r0, 801c73e <lfs_dir_alloc+0x52>
 801c738:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c73c:	d119      	bne.n	801c772 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801c73e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c742:	2b00      	cmp	r3, #0
 801c744:	dd0a      	ble.n	801c75c <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801c746:	3301      	adds	r3, #1
 801c748:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801c74c:	1853      	adds	r3, r2, r1
 801c74e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c750:	fbb3 f2f1 	udiv	r2, r3, r1
 801c754:	fb01 3212 	mls	r2, r1, r2, r3
 801c758:	1a9b      	subs	r3, r3, r2
 801c75a:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801c75c:	2304      	movs	r3, #4
 801c75e:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801c760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c764:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801c766:	2300      	movs	r3, #0
 801c768:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801c76a:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801c76c:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801c76e:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801c770:	75e3      	strb	r3, [r4, #23]
}
 801c772:	4618      	mov	r0, r3
 801c774:	b004      	add	sp, #16
 801c776:	bd70      	pop	{r4, r5, r6, pc}

0801c778 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801c778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c77a:	b089      	sub	sp, #36	@ 0x24
 801c77c:	4605      	mov	r5, r0
 801c77e:	460e      	mov	r6, r1
 801c780:	e053      	b.n	801c82a <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801c782:	2201      	movs	r2, #1
 801c784:	9203      	str	r2, [sp, #12]
 801c786:	f10d 021b 	add.w	r2, sp, #27
 801c78a:	9202      	str	r2, [sp, #8]
 801c78c:	9401      	str	r4, [sp, #4]
 801c78e:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801c790:	9200      	str	r2, [sp, #0]
 801c792:	1b1b      	subs	r3, r3, r4
 801c794:	462a      	mov	r2, r5
 801c796:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801c79a:	4628      	mov	r0, r5
 801c79c:	f7fe fca6 	bl	801b0ec <lfs_bd_read>
                if (err) {
 801c7a0:	2800      	cmp	r0, #0
 801c7a2:	d152      	bne.n	801c84a <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801c7a4:	2301      	movs	r3, #1
 801c7a6:	9303      	str	r3, [sp, #12]
 801c7a8:	f10d 021b 	add.w	r2, sp, #27
 801c7ac:	9202      	str	r2, [sp, #8]
 801c7ae:	9401      	str	r4, [sp, #4]
 801c7b0:	9a07      	ldr	r2, [sp, #28]
 801c7b2:	9200      	str	r2, [sp, #0]
 801c7b4:	462a      	mov	r2, r5
 801c7b6:	f105 0110 	add.w	r1, r5, #16
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	f7ff f992 	bl	801bae4 <lfs_bd_prog>
            if (err) {
 801c7c0:	bb20      	cbnz	r0, 801c80c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c7c2:	3401      	adds	r4, #1
 801c7c4:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801c7c6:	42a3      	cmp	r3, r4
 801c7c8:	d945      	bls.n	801c856 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801c7ca:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801c7cc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801c7d0:	d0d7      	beq.n	801c782 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c7d2:	88b2      	ldrh	r2, [r6, #4]
 801c7d4:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801c7d6:	2101      	movs	r1, #1
 801c7d8:	9105      	str	r1, [sp, #20]
 801c7da:	f10d 011b 	add.w	r1, sp, #27
 801c7de:	9104      	str	r1, [sp, #16]
 801c7e0:	9403      	str	r4, [sp, #12]
 801c7e2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801c7e6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801c7ea:	9202      	str	r2, [sp, #8]
 801c7ec:	4a27      	ldr	r2, [pc, #156]	@ (801c88c <lfs_file_relocate+0x114>)
 801c7ee:	9201      	str	r2, [sp, #4]
 801c7f0:	1b1b      	subs	r3, r3, r4
 801c7f2:	9300      	str	r3, [sp, #0]
 801c7f4:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801c7f8:	2200      	movs	r2, #0
 801c7fa:	f106 0108 	add.w	r1, r6, #8
 801c7fe:	4628      	mov	r0, r5
 801c800:	f7ff f84c 	bl	801b89c <lfs_dir_getread>
                if (err) {
 801c804:	2800      	cmp	r0, #0
 801c806:	d0cd      	beq.n	801c7a4 <lfs_file_relocate+0x2c>
                    return err;
 801c808:	4607      	mov	r7, r0
 801c80a:	e03b      	b.n	801c884 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801c80c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c810:	d11d      	bne.n	801c84e <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c812:	4b1f      	ldr	r3, [pc, #124]	@ (801c890 <lfs_file_relocate+0x118>)
 801c814:	9300      	str	r3, [sp, #0]
 801c816:	9b07      	ldr	r3, [sp, #28]
 801c818:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801c81c:	491d      	ldr	r1, [pc, #116]	@ (801c894 <lfs_file_relocate+0x11c>)
 801c81e:	481e      	ldr	r0, [pc, #120]	@ (801c898 <lfs_file_relocate+0x120>)
 801c820:	f00d fb10 	bl	8029e44 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c828:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801c82a:	a907      	add	r1, sp, #28
 801c82c:	4628      	mov	r0, r5
 801c82e:	f7ff ff05 	bl	801c63c <lfs_alloc>
        if (err) {
 801c832:	4607      	mov	r7, r0
 801c834:	bb30      	cbnz	r0, 801c884 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801c836:	9907      	ldr	r1, [sp, #28]
 801c838:	4628      	mov	r0, r5
 801c83a:	f7fe fbdd 	bl	801aff8 <lfs_bd_erase>
        if (err) {
 801c83e:	4607      	mov	r7, r0
 801c840:	b138      	cbz	r0, 801c852 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801c842:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c846:	d0e4      	beq.n	801c812 <lfs_file_relocate+0x9a>
 801c848:	e01c      	b.n	801c884 <lfs_file_relocate+0x10c>
                    return err;
 801c84a:	4607      	mov	r7, r0
 801c84c:	e01a      	b.n	801c884 <lfs_file_relocate+0x10c>
                return err;
 801c84e:	4607      	mov	r7, r0
 801c850:	e018      	b.n	801c884 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c852:	2400      	movs	r4, #0
 801c854:	e7b6      	b.n	801c7c4 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801c856:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c85a:	69e9      	ldr	r1, [r5, #28]
 801c85c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801c85e:	f011 fa4b 	bl	802dcf8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801c862:	692b      	ldr	r3, [r5, #16]
 801c864:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801c866:	696b      	ldr	r3, [r5, #20]
 801c868:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801c86a:	69ab      	ldr	r3, [r5, #24]
 801c86c:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801c86e:	f105 0110 	add.w	r1, r5, #16
 801c872:	4628      	mov	r0, r5
 801c874:	f7fe fc10 	bl	801b098 <lfs_cache_zero>
        file->block = nblock;
 801c878:	9b07      	ldr	r3, [sp, #28]
 801c87a:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801c87c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801c87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c882:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801c884:	4638      	mov	r0, r7
 801c886:	b009      	add	sp, #36	@ 0x24
 801c888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c88a:	bf00      	nop
 801c88c:	fff7fc00 	.word	0xfff7fc00
 801c890:	08036a40 	.word	0x08036a40
 801c894:	08038e6c 	.word	0x08038e6c
 801c898:	08039084 	.word	0x08039084

0801c89c <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801c89c:	b538      	push	{r3, r4, r5, lr}
 801c89e:	4605      	mov	r5, r0
 801c8a0:	460c      	mov	r4, r1
    file->off = file->pos;
 801c8a2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c8a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801c8a6:	f7fe fad7 	bl	801ae58 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801c8aa:	4621      	mov	r1, r4
 801c8ac:	4628      	mov	r0, r5
 801c8ae:	f7ff ff63 	bl	801c778 <lfs_file_relocate>
    if (err) {
 801c8b2:	b918      	cbnz	r0, 801c8bc <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801c8b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c8b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c8ba:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c8bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c8c0 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8c4:	b08b      	sub	sp, #44	@ 0x2c
 801c8c6:	4605      	mov	r5, r0
 801c8c8:	460f      	mov	r7, r1
 801c8ca:	4616      	mov	r6, r2
 801c8cc:	9305      	str	r3, [sp, #20]
 801c8ce:	e04d      	b.n	801c96c <lfs_ctz_extend+0xac>
            if (size == 0) {
 801c8d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d032      	beq.n	801c93c <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801c8d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c8d8:	3b01      	subs	r3, #1
 801c8da:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801c8dc:	a908      	add	r1, sp, #32
 801c8de:	4628      	mov	r0, r5
 801c8e0:	f7fe fbe6 	bl	801b0b0 <lfs_ctz_index>
            noff = noff + 1;
 801c8e4:	9b08      	ldr	r3, [sp, #32]
 801c8e6:	3301      	adds	r3, #1
 801c8e8:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801c8ea:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801c8ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c8ee:	4293      	cmp	r3, r2
 801c8f0:	d05b      	beq.n	801c9aa <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801c8f2:	2400      	movs	r4, #0
 801c8f4:	46b9      	mov	r9, r7
 801c8f6:	9f05      	ldr	r7, [sp, #20]
 801c8f8:	9b08      	ldr	r3, [sp, #32]
 801c8fa:	42a3      	cmp	r3, r4
 801c8fc:	d94a      	bls.n	801c994 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801c8fe:	2201      	movs	r2, #1
 801c900:	9203      	str	r2, [sp, #12]
 801c902:	aa09      	add	r2, sp, #36	@ 0x24
 801c904:	9202      	str	r2, [sp, #8]
 801c906:	9401      	str	r4, [sp, #4]
 801c908:	9700      	str	r7, [sp, #0]
 801c90a:	1b1b      	subs	r3, r3, r4
 801c90c:	4632      	mov	r2, r6
 801c90e:	2100      	movs	r1, #0
 801c910:	4628      	mov	r0, r5
 801c912:	f7fe fbeb 	bl	801b0ec <lfs_bd_read>
                    if (err) {
 801c916:	4603      	mov	r3, r0
 801c918:	2800      	cmp	r0, #0
 801c91a:	d139      	bne.n	801c990 <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801c91c:	2301      	movs	r3, #1
 801c91e:	9303      	str	r3, [sp, #12]
 801c920:	aa09      	add	r2, sp, #36	@ 0x24
 801c922:	9202      	str	r2, [sp, #8]
 801c924:	9401      	str	r4, [sp, #4]
 801c926:	9a07      	ldr	r2, [sp, #28]
 801c928:	9200      	str	r2, [sp, #0]
 801c92a:	4632      	mov	r2, r6
 801c92c:	4649      	mov	r1, r9
 801c92e:	4628      	mov	r0, r5
 801c930:	f7ff f8d8 	bl	801bae4 <lfs_bd_prog>
                    if (err) {
 801c934:	4603      	mov	r3, r0
 801c936:	b948      	cbnz	r0, 801c94c <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801c938:	3401      	adds	r4, #1
 801c93a:	e7dd      	b.n	801c8f8 <lfs_ctz_extend+0x38>
                *block = nblock;
 801c93c:	4682      	mov	sl, r0
 801c93e:	9b07      	ldr	r3, [sp, #28]
 801c940:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c942:	6013      	str	r3, [r2, #0]
                *off = 0;
 801c944:	2300      	movs	r3, #0
 801c946:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c948:	6013      	str	r3, [r2, #0]
                return 0;
 801c94a:	e02a      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801c94c:	464f      	mov	r7, r9
 801c94e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c952:	d11d      	bne.n	801c990 <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c954:	4b36      	ldr	r3, [pc, #216]	@ (801ca30 <lfs_ctz_extend+0x170>)
 801c956:	9300      	str	r3, [sp, #0]
 801c958:	9b07      	ldr	r3, [sp, #28]
 801c95a:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801c95e:	4935      	ldr	r1, [pc, #212]	@ (801ca34 <lfs_ctz_extend+0x174>)
 801c960:	4835      	ldr	r0, [pc, #212]	@ (801ca38 <lfs_ctz_extend+0x178>)
 801c962:	f00d fa6f 	bl	8029e44 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c96a:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801c96c:	a907      	add	r1, sp, #28
 801c96e:	4628      	mov	r0, r5
 801c970:	f7ff fe64 	bl	801c63c <lfs_alloc>
        if (err) {
 801c974:	2800      	cmp	r0, #0
 801c976:	d159      	bne.n	801ca2c <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801c978:	9907      	ldr	r1, [sp, #28]
 801c97a:	4628      	mov	r0, r5
 801c97c:	f7fe fb3c 	bl	801aff8 <lfs_bd_erase>
            if (err) {
 801c980:	4680      	mov	r8, r0
 801c982:	2800      	cmp	r0, #0
 801c984:	d0a4      	beq.n	801c8d0 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801c986:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c98a:	d0e3      	beq.n	801c954 <lfs_ctz_extend+0x94>
 801c98c:	4682      	mov	sl, r0
 801c98e:	e008      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
                        return err;
 801c990:	469a      	mov	sl, r3
 801c992:	e006      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
                *block = nblock;
 801c994:	46c2      	mov	sl, r8
 801c996:	9b07      	ldr	r3, [sp, #28]
 801c998:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c99a:	6013      	str	r3, [r2, #0]
                *off = noff;
 801c99c:	9b08      	ldr	r3, [sp, #32]
 801c99e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c9a0:	6013      	str	r3, [r2, #0]
}
 801c9a2:	4650      	mov	r0, sl
 801c9a4:	b00b      	add	sp, #44	@ 0x2c
 801c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801c9aa:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801c9ac:	fa90 f9a0 	rbit	r9, r0
 801c9b0:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801c9b4:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801c9b8:	9b05      	ldr	r3, [sp, #20]
 801c9ba:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801c9bc:	2400      	movs	r4, #0
 801c9be:	46ab      	mov	fp, r5
 801c9c0:	e006      	b.n	801c9d0 <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801c9c2:	465d      	mov	r5, fp
 801c9c4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c9c8:	d0c4      	beq.n	801c954 <lfs_ctz_extend+0x94>
                    return err;
 801c9ca:	4682      	mov	sl, r0
 801c9cc:	e7e9      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801c9ce:	3401      	adds	r4, #1
 801c9d0:	4554      	cmp	r4, sl
 801c9d2:	d221      	bcs.n	801ca18 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801c9d4:	00a5      	lsls	r5, r4, #2
 801c9d6:	2304      	movs	r3, #4
 801c9d8:	9303      	str	r3, [sp, #12]
 801c9da:	ab09      	add	r3, sp, #36	@ 0x24
 801c9dc:	9302      	str	r3, [sp, #8]
 801c9de:	9501      	str	r5, [sp, #4]
 801c9e0:	9b07      	ldr	r3, [sp, #28]
 801c9e2:	9300      	str	r3, [sp, #0]
 801c9e4:	2301      	movs	r3, #1
 801c9e6:	4632      	mov	r2, r6
 801c9e8:	4639      	mov	r1, r7
 801c9ea:	4658      	mov	r0, fp
 801c9ec:	f7ff f87a 	bl	801bae4 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801c9f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801c9f2:	2800      	cmp	r0, #0
 801c9f4:	d1e5      	bne.n	801c9c2 <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801c9f6:	454c      	cmp	r4, r9
 801c9f8:	d0e9      	beq.n	801c9ce <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801c9fa:	2304      	movs	r3, #4
 801c9fc:	9303      	str	r3, [sp, #12]
 801c9fe:	a909      	add	r1, sp, #36	@ 0x24
 801ca00:	9102      	str	r1, [sp, #8]
 801ca02:	9501      	str	r5, [sp, #4]
 801ca04:	9200      	str	r2, [sp, #0]
 801ca06:	4632      	mov	r2, r6
 801ca08:	2100      	movs	r1, #0
 801ca0a:	4658      	mov	r0, fp
 801ca0c:	f7fe fb6e 	bl	801b0ec <lfs_bd_read>
                    if (err) {
 801ca10:	2800      	cmp	r0, #0
 801ca12:	d0dc      	beq.n	801c9ce <lfs_ctz_extend+0x10e>
                        return err;
 801ca14:	4682      	mov	sl, r0
 801ca16:	e7c4      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
            *block = nblock;
 801ca18:	46d1      	mov	r9, sl
 801ca1a:	46c2      	mov	sl, r8
 801ca1c:	9b07      	ldr	r3, [sp, #28]
 801ca1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ca20:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801ca22:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801ca26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ca28:	6019      	str	r1, [r3, #0]
            return 0;
 801ca2a:	e7ba      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
 801ca2c:	4682      	mov	sl, r0
 801ca2e:	e7b8      	b.n	801c9a2 <lfs_ctz_extend+0xe2>
 801ca30:	08036a40 	.word	0x08036a40
 801ca34:	08038e6c 	.word	0x08038e6c
 801ca38:	08039084 	.word	0x08039084

0801ca3c <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801ca3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca40:	b087      	sub	sp, #28
 801ca42:	4605      	mov	r5, r0
 801ca44:	460c      	mov	r4, r1
 801ca46:	4617      	mov	r7, r2
 801ca48:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801ca4a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ca4c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ca50:	d008      	beq.n	801ca64 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801ca52:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801ca54:	444b      	add	r3, r9
 801ca56:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801ca58:	4293      	cmp	r3, r2
 801ca5a:	bf38      	it	cc
 801ca5c:	4613      	movcc	r3, r2
 801ca5e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801ca60:	429a      	cmp	r2, r3
 801ca62:	d32d      	bcc.n	801cac0 <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801ca64:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801ca66:	f1b8 0f00 	cmp.w	r8, #0
 801ca6a:	f000 8094 	beq.w	801cb96 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801ca6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ca70:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801ca74:	d004      	beq.n	801ca80 <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801ca76:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801ca78:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801ca7a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801ca7c:	4288      	cmp	r0, r1
 801ca7e:	d150      	bne.n	801cb22 <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801ca80:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801ca84:	d144      	bne.n	801cb10 <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801ca86:	b90a      	cbnz	r2, 801ca8c <lfs_file_flushedwrite+0x50>
 801ca88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ca8a:	bb1b      	cbnz	r3, 801cad4 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801ca8c:	4628      	mov	r0, r5
 801ca8e:	f7fe f9e3 	bl	801ae58 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801ca92:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801ca96:	9302      	str	r3, [sp, #8]
 801ca98:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801ca9c:	9301      	str	r3, [sp, #4]
 801ca9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801caa0:	9300      	str	r3, [sp, #0]
 801caa2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801caa4:	462a      	mov	r2, r5
 801caa6:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801caaa:	4628      	mov	r0, r5
 801caac:	f7ff ff08 	bl	801c8c0 <lfs_ctz_extend>
                if (err) {
 801cab0:	4601      	mov	r1, r0
 801cab2:	2800      	cmp	r0, #0
 801cab4:	d031      	beq.n	801cb1a <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801cab6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cab8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cabc:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801cabe:	e059      	b.n	801cb74 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801cac0:	f7ff feec 	bl	801c89c <lfs_file_outline>
        if (err) {
 801cac4:	4601      	mov	r1, r0
 801cac6:	2800      	cmp	r0, #0
 801cac8:	d0cc      	beq.n	801ca64 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801caca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cacc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cad0:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801cad2:	e04f      	b.n	801cb74 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cad4:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801cad8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801cada:	2100      	movs	r1, #0
 801cadc:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801cade:	a805      	add	r0, sp, #20
 801cae0:	9003      	str	r0, [sp, #12]
 801cae2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801cae6:	9002      	str	r0, [sp, #8]
 801cae8:	3b01      	subs	r3, #1
 801caea:	9301      	str	r3, [sp, #4]
 801caec:	9200      	str	r2, [sp, #0]
 801caee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801caf0:	4632      	mov	r2, r6
 801caf2:	4628      	mov	r0, r5
 801caf4:	f7ff f8ad 	bl	801bc52 <lfs_ctz_find>
                    if (err) {
 801caf8:	4601      	mov	r1, r0
 801cafa:	b920      	cbnz	r0, 801cb06 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801cafc:	4631      	mov	r1, r6
 801cafe:	4628      	mov	r0, r5
 801cb00:	f7fe faca 	bl	801b098 <lfs_cache_zero>
 801cb04:	e7c2      	b.n	801ca8c <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801cb06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cb0c:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801cb0e:	e031      	b.n	801cb74 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801cb10:	f06f 0301 	mvn.w	r3, #1
 801cb14:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801cb16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cb18:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801cb1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cb20:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801cb22:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801cb24:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801cb26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cb28:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801cb2a:	4546      	cmp	r6, r8
 801cb2c:	bf28      	it	cs
 801cb2e:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801cb30:	9603      	str	r6, [sp, #12]
 801cb32:	9702      	str	r7, [sp, #8]
 801cb34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cb36:	9301      	str	r3, [sp, #4]
 801cb38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cb3a:	9300      	str	r3, [sp, #0]
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	462a      	mov	r2, r5
 801cb40:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cb44:	4628      	mov	r0, r5
 801cb46:	f7fe ffcd 	bl	801bae4 <lfs_bd_prog>
            if (err) {
 801cb4a:	4601      	mov	r1, r0
 801cb4c:	b1b0      	cbz	r0, 801cb7c <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801cb4e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cb52:	d10b      	bne.n	801cb6c <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801cb54:	4621      	mov	r1, r4
 801cb56:	4628      	mov	r0, r5
 801cb58:	f7ff fe0e 	bl	801c778 <lfs_file_relocate>
            if (err) {
 801cb5c:	4601      	mov	r1, r0
 801cb5e:	2800      	cmp	r0, #0
 801cb60:	d0e6      	beq.n	801cb30 <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801cb62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cb68:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801cb6a:	e003      	b.n	801cb74 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801cb6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cb6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801cb72:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801cb74:	4608      	mov	r0, r1
 801cb76:	b007      	add	sp, #28
 801cb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801cb7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cb7e:	4433      	add	r3, r6
 801cb80:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801cb82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cb84:	4433      	add	r3, r6
 801cb86:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801cb88:	4437      	add	r7, r6
        nsize -= diff;
 801cb8a:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801cb8e:	4628      	mov	r0, r5
 801cb90:	f7fe f962 	bl	801ae58 <lfs_alloc_ckpoint>
 801cb94:	e767      	b.n	801ca66 <lfs_file_flushedwrite+0x2a>
    return size;
 801cb96:	4649      	mov	r1, r9
 801cb98:	e7ec      	b.n	801cb74 <lfs_file_flushedwrite+0x138>
	...

0801cb9c <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801cb9c:	b570      	push	{r4, r5, r6, lr}
 801cb9e:	b098      	sub	sp, #96	@ 0x60
 801cba0:	4605      	mov	r5, r0
 801cba2:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801cba4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cba6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801cbaa:	d008      	beq.n	801cbbe <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801cbac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cbb0:	d102      	bne.n	801cbb8 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801cbb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cbb6:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801cbb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cbbc:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801cbbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cbc0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cbc4:	d068      	beq.n	801cc98 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801cbc6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801cbc8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801cbcc:	d151      	bne.n	801cc72 <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801cbce:	2254      	movs	r2, #84	@ 0x54
 801cbd0:	2100      	movs	r1, #0
 801cbd2:	a803      	add	r0, sp, #12
 801cbd4:	f00f fe54 	bl	802c880 <memset>
                .ctz.head = file->ctz.head,
 801cbd8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801cbda:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801cbdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801cbde:	930e      	str	r3, [sp, #56]	@ 0x38
 801cbe0:	2301      	movs	r3, #1
 801cbe2:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801cbe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801cbe6:	9310      	str	r3, [sp, #64]	@ 0x40
 801cbe8:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801cbec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cbf0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801cbf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cbf8:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801cbfa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cbfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cbfe:	429a      	cmp	r2, r3
 801cc00:	d21a      	bcs.n	801cc38 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801cc02:	2301      	movs	r3, #1
 801cc04:	f10d 020b 	add.w	r2, sp, #11
 801cc08:	a903      	add	r1, sp, #12
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	f7ff f86a 	bl	801bce4 <lfs_file_flushedread>
                if (res < 0) {
 801cc10:	1e03      	subs	r3, r0, #0
 801cc12:	db42      	blt.n	801cc9a <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801cc14:	2301      	movs	r3, #1
 801cc16:	f10d 020b 	add.w	r2, sp, #11
 801cc1a:	4621      	mov	r1, r4
 801cc1c:	4628      	mov	r0, r5
 801cc1e:	f7ff ff0d 	bl	801ca3c <lfs_file_flushedwrite>
                if (res < 0) {
 801cc22:	1e03      	subs	r3, r0, #0
 801cc24:	db39      	blt.n	801cc9a <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801cc26:	682b      	ldr	r3, [r5, #0]
 801cc28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cc2c:	d0e5      	beq.n	801cbfa <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801cc2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cc32:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cc34:	602b      	str	r3, [r5, #0]
}
 801cc36:	e7e0      	b.n	801cbfa <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801cc38:	2301      	movs	r3, #1
 801cc3a:	462a      	mov	r2, r5
 801cc3c:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801cc40:	4628      	mov	r0, r5
 801cc42:	f7fe fef5 	bl	801ba30 <lfs_bd_flush>
                if (err) {
 801cc46:	4603      	mov	r3, r0
 801cc48:	b1c0      	cbz	r0, 801cc7c <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801cc4a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cc4e:	d124      	bne.n	801cc9a <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801cc50:	4b13      	ldr	r3, [pc, #76]	@ (801cca0 <lfs_file_flush+0x104>)
 801cc52:	9300      	str	r3, [sp, #0]
 801cc54:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cc56:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801cc5a:	4912      	ldr	r1, [pc, #72]	@ (801cca4 <lfs_file_flush+0x108>)
 801cc5c:	4812      	ldr	r0, [pc, #72]	@ (801cca8 <lfs_file_flush+0x10c>)
 801cc5e:	f00d f8f1 	bl	8029e44 <printf>
                err = lfs_file_relocate(lfs, file);
 801cc62:	4621      	mov	r1, r4
 801cc64:	4628      	mov	r0, r5
 801cc66:	f7ff fd87 	bl	801c778 <lfs_file_relocate>
                if (err) {
 801cc6a:	4603      	mov	r3, r0
 801cc6c:	2800      	cmp	r0, #0
 801cc6e:	d0e3      	beq.n	801cc38 <lfs_file_flush+0x9c>
 801cc70:	e013      	b.n	801cc9a <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801cc72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801cc74:	42b3      	cmp	r3, r6
 801cc76:	bf38      	it	cc
 801cc78:	4633      	movcc	r3, r6
 801cc7a:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801cc7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cc7e:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801cc80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cc82:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801cc84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc86:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801cc8a:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801cc8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cc90:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801cc92:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801cc94:	2300      	movs	r3, #0
 801cc96:	e000      	b.n	801cc9a <lfs_file_flush+0xfe>
 801cc98:	2300      	movs	r3, #0
}
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	b018      	add	sp, #96	@ 0x60
 801cc9e:	bd70      	pop	{r4, r5, r6, pc}
 801cca0:	08036a40 	.word	0x08036a40
 801cca4:	08038e6c 	.word	0x08038e6c
 801cca8:	08039084 	.word	0x08039084

0801ccac <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccae:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801ccb0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801ccb2:	f013 0f01 	tst.w	r3, #1
 801ccb6:	d00f      	beq.n	801ccd8 <lfs_file_read_+0x2c>
 801ccb8:	4605      	mov	r5, r0
 801ccba:	460c      	mov	r4, r1
 801ccbc:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801ccbe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801ccc2:	d002      	beq.n	801ccca <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801ccc4:	f7ff ff6a 	bl	801cb9c <lfs_file_flush>
        if (err) {
 801ccc8:	b928      	cbnz	r0, 801ccd6 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801ccca:	463b      	mov	r3, r7
 801cccc:	4632      	mov	r2, r6
 801ccce:	4621      	mov	r1, r4
 801ccd0:	4628      	mov	r0, r5
 801ccd2:	f7ff f807 	bl	801bce4 <lfs_file_flushedread>
}
 801ccd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801ccd8:	4b03      	ldr	r3, [pc, #12]	@ (801cce8 <lfs_file_read_+0x3c>)
 801ccda:	4a04      	ldr	r2, [pc, #16]	@ (801ccec <lfs_file_read_+0x40>)
 801ccdc:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801cce0:	4803      	ldr	r0, [pc, #12]	@ (801ccf0 <lfs_file_read_+0x44>)
 801cce2:	f00d f87b 	bl	8029ddc <__assert_func>
 801cce6:	bf00      	nop
 801cce8:	080390a8 	.word	0x080390a8
 801ccec:	08039ae0 	.word	0x08039ae0
 801ccf0:	08038e6c 	.word	0x08038e6c

0801ccf4 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801ccf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccf6:	b083      	sub	sp, #12
 801ccf8:	4606      	mov	r6, r0
 801ccfa:	460d      	mov	r5, r1
 801ccfc:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801ccfe:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801cd00:	b123      	cbz	r3, 801cd0c <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801cd02:	2b01      	cmp	r3, #1
 801cd04:	d021      	beq.n	801cd4a <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801cd06:	2b02      	cmp	r3, #2
 801cd08:	d023      	beq.n	801cd52 <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801cd0a:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801cd0c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801cd0e:	42a3      	cmp	r3, r4
 801cd10:	d339      	bcc.n	801cd86 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801cd12:	42bc      	cmp	r4, r7
 801cd14:	d023      	beq.n	801cd5e <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801cd16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801cd18:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cd1c:	d10c      	bne.n	801cd38 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801cd1e:	9701      	str	r7, [sp, #4]
 801cd20:	a901      	add	r1, sp, #4
 801cd22:	4630      	mov	r0, r6
 801cd24:	f7fe f9c4 	bl	801b0b0 <lfs_ctz_index>
 801cd28:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801cd2a:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801cd2c:	4669      	mov	r1, sp
 801cd2e:	4630      	mov	r0, r6
 801cd30:	f7fe f9be 	bl	801b0b0 <lfs_ctz_index>
        if (oindex == nindex
 801cd34:	4287      	cmp	r7, r0
 801cd36:	d014      	beq.n	801cd62 <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801cd38:	4629      	mov	r1, r5
 801cd3a:	4630      	mov	r0, r6
 801cd3c:	f7ff ff2e 	bl	801cb9c <lfs_file_flush>
    if (err) {
 801cd40:	b908      	cbnz	r0, 801cd46 <lfs_file_seek_+0x52>
    file->pos = npos;
 801cd42:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801cd44:	4620      	mov	r0, r4
}
 801cd46:	b003      	add	sp, #12
 801cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801cd4a:	42e7      	cmn	r7, r4
 801cd4c:	d415      	bmi.n	801cd7a <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801cd4e:	443c      	add	r4, r7
 801cd50:	e7dc      	b.n	801cd0c <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801cd52:	f7fe f90e 	bl	801af72 <lfs_file_size_>
        if (res < 0) {
 801cd56:	1900      	adds	r0, r0, r4
 801cd58:	d412      	bmi.n	801cd80 <lfs_file_seek_+0x8c>
            npos = res;
 801cd5a:	4604      	mov	r4, r0
 801cd5c:	e7d6      	b.n	801cd0c <lfs_file_seek_+0x18>
        return npos;
 801cd5e:	4620      	mov	r0, r4
 801cd60:	e7f1      	b.n	801cd46 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801cd62:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801cd64:	9a00      	ldr	r2, [sp, #0]
 801cd66:	4293      	cmp	r3, r2
 801cd68:	d8e6      	bhi.n	801cd38 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801cd6a:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801cd6c:	440b      	add	r3, r1
 801cd6e:	429a      	cmp	r2, r3
 801cd70:	d2e2      	bcs.n	801cd38 <lfs_file_seek_+0x44>
            file->pos = npos;
 801cd72:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801cd74:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801cd76:	4620      	mov	r0, r4
 801cd78:	e7e5      	b.n	801cd46 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801cd7a:	f06f 0015 	mvn.w	r0, #21
 801cd7e:	e7e2      	b.n	801cd46 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801cd80:	f06f 0015 	mvn.w	r0, #21
 801cd84:	e7df      	b.n	801cd46 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801cd86:	f06f 0015 	mvn.w	r0, #21
 801cd8a:	e7dc      	b.n	801cd46 <lfs_file_seek_+0x52>

0801cd8c <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd90:	b082      	sub	sp, #8
 801cd92:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801cd94:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801cd96:	f013 0f02 	tst.w	r3, #2
 801cd9a:	d02a      	beq.n	801cdf2 <lfs_file_write_+0x66>
 801cd9c:	4605      	mov	r5, r0
 801cd9e:	460c      	mov	r4, r1
 801cda0:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801cda2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801cda6:	d12b      	bne.n	801ce00 <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801cda8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cdaa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801cdae:	d004      	beq.n	801cdba <lfs_file_write_+0x2e>
 801cdb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cdb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801cdb4:	4291      	cmp	r1, r2
 801cdb6:	d200      	bcs.n	801cdba <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801cdb8:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801cdba:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801cdbc:	19f1      	adds	r1, r6, r7
 801cdbe:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801cdc0:	4291      	cmp	r1, r2
 801cdc2:	d831      	bhi.n	801ce28 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801cdc4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801cdc8:	d11f      	bne.n	801ce0a <lfs_file_write_+0x7e>
 801cdca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cdcc:	429e      	cmp	r6, r3
 801cdce:	d91c      	bls.n	801ce0a <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801cdd0:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801cdd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cdd4:	428e      	cmp	r6, r1
 801cdd6:	d918      	bls.n	801ce0a <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801cdd8:	2300      	movs	r3, #0
 801cdda:	f88d 3007 	strb.w	r3, [sp, #7]
 801cdde:	2301      	movs	r3, #1
 801cde0:	f10d 0207 	add.w	r2, sp, #7
 801cde4:	4621      	mov	r1, r4
 801cde6:	4628      	mov	r0, r5
 801cde8:	f7ff fe28 	bl	801ca3c <lfs_file_flushedwrite>
            if (res < 0) {
 801cdec:	2800      	cmp	r0, #0
 801cdee:	daf0      	bge.n	801cdd2 <lfs_file_write_+0x46>
 801cdf0:	e017      	b.n	801ce22 <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801cdf2:	4b0f      	ldr	r3, [pc, #60]	@ (801ce30 <lfs_file_write_+0xa4>)
 801cdf4:	4a0f      	ldr	r2, [pc, #60]	@ (801ce34 <lfs_file_write_+0xa8>)
 801cdf6:	f640 6126 	movw	r1, #3622	@ 0xe26
 801cdfa:	480f      	ldr	r0, [pc, #60]	@ (801ce38 <lfs_file_write_+0xac>)
 801cdfc:	f00c ffee 	bl	8029ddc <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801ce00:	f7ff fecc 	bl	801cb9c <lfs_file_flush>
        if (err) {
 801ce04:	2800      	cmp	r0, #0
 801ce06:	d0cf      	beq.n	801cda8 <lfs_file_write_+0x1c>
 801ce08:	e00b      	b.n	801ce22 <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801ce0a:	463b      	mov	r3, r7
 801ce0c:	4642      	mov	r2, r8
 801ce0e:	4621      	mov	r1, r4
 801ce10:	4628      	mov	r0, r5
 801ce12:	f7ff fe13 	bl	801ca3c <lfs_file_flushedwrite>
    if (nsize < 0) {
 801ce16:	2800      	cmp	r0, #0
 801ce18:	db03      	blt.n	801ce22 <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801ce1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ce1c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801ce20:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801ce22:	b002      	add	sp, #8
 801ce24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801ce28:	f06f 001a 	mvn.w	r0, #26
 801ce2c:	e7f9      	b.n	801ce22 <lfs_file_write_+0x96>
 801ce2e:	bf00      	nop
 801ce30:	080390d8 	.word	0x080390d8
 801ce34:	08039ac0 	.word	0x08039ac0
 801ce38:	08038e6c 	.word	0x08038e6c

0801ce3c <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801ce3c:	b500      	push	{lr}
 801ce3e:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801ce40:	2300      	movs	r3, #0
 801ce42:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801ce44:	aa01      	add	r2, sp, #4
 801ce46:	4904      	ldr	r1, [pc, #16]	@ (801ce58 <lfs_fs_size_+0x1c>)
 801ce48:	f7ff faf0 	bl	801c42c <lfs_fs_traverse_>
    if (err) {
 801ce4c:	b900      	cbnz	r0, 801ce50 <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801ce4e:	9801      	ldr	r0, [sp, #4]
}
 801ce50:	b003      	add	sp, #12
 801ce52:	f85d fb04 	ldr.w	pc, [sp], #4
 801ce56:	bf00      	nop
 801ce58:	0801afed 	.word	0x0801afed

0801ce5c <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce60:	b082      	sub	sp, #8
 801ce62:	4680      	mov	r8, r0
 801ce64:	460e      	mov	r6, r1
 801ce66:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801ce68:	2300      	movs	r3, #0
 801ce6a:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801ce6c:	2501      	movs	r5, #1
 801ce6e:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801ce70:	4b27      	ldr	r3, [pc, #156]	@ (801cf10 <lfs_fs_pred+0xb4>)
 801ce72:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ce76:	ab02      	add	r3, sp, #8
 801ce78:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801ce7c:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ce7e:	69a7      	ldr	r7, [r4, #24]
 801ce80:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801ce84:	d035      	beq.n	801cef2 <lfs_fs_pred+0x96>
 801ce86:	69e3      	ldr	r3, [r4, #28]
 801ce88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ce8c:	d02f      	beq.n	801ceee <lfs_fs_pred+0x92>
 801ce8e:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801ce90:	bb8b      	cbnz	r3, 801cef6 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801ce92:	f104 0a18 	add.w	sl, r4, #24
 801ce96:	4669      	mov	r1, sp
 801ce98:	4650      	mov	r0, sl
 801ce9a:	f7fd ff61 	bl	801ad60 <lfs_pair_issync>
 801ce9e:	b9a8      	cbnz	r0, 801cecc <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801cea0:	454d      	cmp	r5, r9
 801cea2:	d01d      	beq.n	801cee0 <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801cea4:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cea6:	6833      	ldr	r3, [r6, #0]
 801cea8:	42bb      	cmp	r3, r7
 801ceaa:	d027      	beq.n	801cefc <lfs_fs_pred+0xa0>
 801ceac:	69e1      	ldr	r1, [r4, #28]
 801ceae:	6872      	ldr	r2, [r6, #4]
 801ceb0:	4291      	cmp	r1, r2
 801ceb2:	d027      	beq.n	801cf04 <lfs_fs_pred+0xa8>
 801ceb4:	42ba      	cmp	r2, r7
 801ceb6:	d027      	beq.n	801cf08 <lfs_fs_pred+0xac>
 801ceb8:	4299      	cmp	r1, r3
 801ceba:	d027      	beq.n	801cf0c <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801cebc:	4652      	mov	r2, sl
 801cebe:	4621      	mov	r1, r4
 801cec0:	4640      	mov	r0, r8
 801cec2:	f7ff faa5 	bl	801c410 <lfs_dir_fetch>
        if (err) {
 801cec6:	2800      	cmp	r0, #0
 801cec8:	d0d9      	beq.n	801ce7e <lfs_fs_pred+0x22>
 801ceca:	e018      	b.n	801cefe <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801cecc:	4b11      	ldr	r3, [pc, #68]	@ (801cf14 <lfs_fs_pred+0xb8>)
 801cece:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801ced2:	4911      	ldr	r1, [pc, #68]	@ (801cf18 <lfs_fs_pred+0xbc>)
 801ced4:	4811      	ldr	r0, [pc, #68]	@ (801cf1c <lfs_fs_pred+0xc0>)
 801ced6:	f00c ffb5 	bl	8029e44 <printf>
            return LFS_ERR_CORRUPT;
 801ceda:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801cede:	e00e      	b.n	801cefe <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801cee0:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801cee2:	69e3      	ldr	r3, [r4, #28]
 801cee4:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801cee6:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801ceea:	2500      	movs	r5, #0
 801ceec:	e7da      	b.n	801cea4 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801ceee:	2301      	movs	r3, #1
 801cef0:	e7ce      	b.n	801ce90 <lfs_fs_pred+0x34>
 801cef2:	2301      	movs	r3, #1
 801cef4:	e7cc      	b.n	801ce90 <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801cef6:	f06f 0001 	mvn.w	r0, #1
 801cefa:	e000      	b.n	801cefe <lfs_fs_pred+0xa2>
            return 0;
 801cefc:	2000      	movs	r0, #0
}
 801cefe:	b002      	add	sp, #8
 801cf00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801cf04:	2000      	movs	r0, #0
 801cf06:	e7fa      	b.n	801cefe <lfs_fs_pred+0xa2>
 801cf08:	2000      	movs	r0, #0
 801cf0a:	e7f8      	b.n	801cefe <lfs_fs_pred+0xa2>
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	e7f6      	b.n	801cefe <lfs_fs_pred+0xa2>
 801cf10:	08035bc4 	.word	0x08035bc4
 801cf14:	08036a40 	.word	0x08036a40
 801cf18:	08038e6c 	.word	0x08038e6c
 801cf1c:	0803902c 	.word	0x0803902c

0801cf20 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801cf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf22:	b085      	sub	sp, #20
 801cf24:	460c      	mov	r4, r1
 801cf26:	4616      	mov	r6, r2
 801cf28:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801cf2a:	9303      	str	r3, [sp, #12]
 801cf2c:	9202      	str	r2, [sp, #8]
 801cf2e:	684b      	ldr	r3, [r1, #4]
 801cf30:	9301      	str	r3, [sp, #4]
 801cf32:	680b      	ldr	r3, [r1, #0]
 801cf34:	9300      	str	r3, [sp, #0]
 801cf36:	2300      	movs	r3, #0
 801cf38:	4602      	mov	r2, r0
 801cf3a:	f100 0110 	add.w	r1, r0, #16
 801cf3e:	f7fe fdd1 	bl	801bae4 <lfs_bd_prog>
    if (err) {
 801cf42:	4607      	mov	r7, r0
 801cf44:	b110      	cbz	r0, 801cf4c <lfs_dir_commitprog+0x2c>
}
 801cf46:	4638      	mov	r0, r7
 801cf48:	b005      	add	sp, #20
 801cf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801cf4c:	462a      	mov	r2, r5
 801cf4e:	4631      	mov	r1, r6
 801cf50:	68e0      	ldr	r0, [r4, #12]
 801cf52:	f002 fcdf 	bl	801f914 <lfs_crc>
 801cf56:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801cf58:	6863      	ldr	r3, [r4, #4]
 801cf5a:	442b      	add	r3, r5
 801cf5c:	6063      	str	r3, [r4, #4]
    return 0;
 801cf5e:	e7f2      	b.n	801cf46 <lfs_dir_commitprog+0x26>

0801cf60 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf64:	b087      	sub	sp, #28
 801cf66:	4614      	mov	r4, r2
 801cf68:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801cf6a:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cf6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801cf72:	bf14      	ite	ne
 801cf74:	4690      	movne	r8, r2
 801cf76:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801cf7a:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801cf7e:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801cf82:	684b      	ldr	r3, [r1, #4]
 801cf84:	444b      	add	r3, r9
 801cf86:	694a      	ldr	r2, [r1, #20]
 801cf88:	4293      	cmp	r3, r2
 801cf8a:	d841      	bhi.n	801d010 <lfs_dir_commitattr+0xb0>
 801cf8c:	4605      	mov	r5, r0
 801cf8e:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801cf90:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801cf94:	688b      	ldr	r3, [r1, #8]
 801cf96:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801cf9a:	ba1b      	rev	r3, r3
 801cf9c:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801cf9e:	2304      	movs	r3, #4
 801cfa0:	aa05      	add	r2, sp, #20
 801cfa2:	f7ff ffbd 	bl	801cf20 <lfs_dir_commitprog>
    if (err) {
 801cfa6:	4682      	mov	sl, r0
 801cfa8:	bb60      	cbnz	r0, 801d004 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801cfaa:	2c00      	cmp	r4, #0
 801cfac:	da21      	bge.n	801cff2 <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801cfae:	2400      	movs	r4, #0
 801cfb0:	4544      	cmp	r4, r8
 801cfb2:	d225      	bcs.n	801d000 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801cfb4:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801cfb8:	6839      	ldr	r1, [r7, #0]
 801cfba:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801cfbc:	2001      	movs	r0, #1
 801cfbe:	9003      	str	r0, [sp, #12]
 801cfc0:	f10d 0013 	add.w	r0, sp, #19
 801cfc4:	9002      	str	r0, [sp, #8]
 801cfc6:	4422      	add	r2, r4
 801cfc8:	9201      	str	r2, [sp, #4]
 801cfca:	9100      	str	r1, [sp, #0]
 801cfcc:	3b04      	subs	r3, #4
 801cfce:	462a      	mov	r2, r5
 801cfd0:	2100      	movs	r1, #0
 801cfd2:	4628      	mov	r0, r5
 801cfd4:	f7fe f88a 	bl	801b0ec <lfs_bd_read>
            if (err) {
 801cfd8:	4603      	mov	r3, r0
 801cfda:	b9b8      	cbnz	r0, 801d00c <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801cfdc:	2301      	movs	r3, #1
 801cfde:	f10d 0213 	add.w	r2, sp, #19
 801cfe2:	4631      	mov	r1, r6
 801cfe4:	4628      	mov	r0, r5
 801cfe6:	f7ff ff9b 	bl	801cf20 <lfs_dir_commitprog>
            if (err) {
 801cfea:	4603      	mov	r3, r0
 801cfec:	b970      	cbnz	r0, 801d00c <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801cfee:	3401      	adds	r4, #1
 801cff0:	e7de      	b.n	801cfb0 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801cff2:	4643      	mov	r3, r8
 801cff4:	463a      	mov	r2, r7
 801cff6:	4631      	mov	r1, r6
 801cff8:	4628      	mov	r0, r5
 801cffa:	f7ff ff91 	bl	801cf20 <lfs_dir_commitprog>
        if (err) {
 801cffe:	b950      	cbnz	r0, 801d016 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801d000:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801d004:	4650      	mov	r0, sl
 801d006:	b007      	add	sp, #28
 801d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801d00c:	469a      	mov	sl, r3
 801d00e:	e7f9      	b.n	801d004 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801d010:	f06f 0a1b 	mvn.w	sl, #27
 801d014:	e7f6      	b.n	801d004 <lfs_dir_commitattr+0xa4>
            return err;
 801d016:	4682      	mov	sl, r0
 801d018:	e7f4      	b.n	801d004 <lfs_dir_commitattr+0xa4>

0801d01a <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801d01a:	b508      	push	{r3, lr}
 801d01c:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801d01e:	460a      	mov	r2, r1
 801d020:	6841      	ldr	r1, [r0, #4]
 801d022:	6800      	ldr	r0, [r0, #0]
 801d024:	f7ff ff9c 	bl	801cf60 <lfs_dir_commitattr>
}
 801d028:	bd08      	pop	{r3, pc}
	...

0801d02c <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d030:	b08b      	sub	sp, #44	@ 0x2c
 801d032:	4607      	mov	r7, r0
 801d034:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d036:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801d038:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801d03a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801d03c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801d03e:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d040:	428b      	cmp	r3, r1
 801d042:	bf94      	ite	ls
 801d044:	eb02 0803 	addls.w	r8, r2, r3
 801d048:	eb02 0801 	addhi.w	r8, r2, r1
 801d04c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801d050:	fbb8 f3f2 	udiv	r3, r8, r2
 801d054:	fb02 8313 	mls	r3, r2, r3, r8
 801d058:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801d05c:	2300      	movs	r3, #0
 801d05e:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801d060:	469b      	mov	fp, r3
    while (commit->off < end) {
 801d062:	e03c      	b.n	801d0de <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801d064:	2201      	movs	r2, #1
 801d066:	9203      	str	r2, [sp, #12]
 801d068:	f10d 021b 	add.w	r2, sp, #27
 801d06c:	9202      	str	r2, [sp, #8]
 801d06e:	9401      	str	r4, [sp, #4]
 801d070:	6832      	ldr	r2, [r6, #0]
 801d072:	9200      	str	r2, [sp, #0]
 801d074:	463a      	mov	r2, r7
 801d076:	2100      	movs	r1, #0
 801d078:	4638      	mov	r0, r7
 801d07a:	f7fe f837 	bl	801b0ec <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801d07e:	4603      	mov	r3, r0
 801d080:	b118      	cbz	r0, 801d08a <lfs_dir_commitcrc+0x5e>
 801d082:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d086:	f040 80c0 	bne.w	801d20a <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801d08a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d08c:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801d08e:	9307      	str	r3, [sp, #28]
 801d090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d094:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801d096:	aa08      	add	r2, sp, #32
 801d098:	9203      	str	r2, [sp, #12]
 801d09a:	9302      	str	r3, [sp, #8]
 801d09c:	9401      	str	r4, [sp, #4]
 801d09e:	6832      	ldr	r2, [r6, #0]
 801d0a0:	9200      	str	r2, [sp, #0]
 801d0a2:	463a      	mov	r2, r7
 801d0a4:	2100      	movs	r1, #0
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	f7fe fea0 	bl	801bdec <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801d0ac:	4603      	mov	r3, r0
 801d0ae:	b118      	cbz	r0, 801d0b8 <lfs_dir_commitcrc+0x8c>
 801d0b0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d0b4:	f040 80a9 	bne.w	801d20a <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801d0b8:	ab07      	add	r3, sp, #28
 801d0ba:	4a59      	ldr	r2, [pc, #356]	@ (801d220 <lfs_dir_commitcrc+0x1f4>)
 801d0bc:	4631      	mov	r1, r6
 801d0be:	4638      	mov	r0, r7
 801d0c0:	f7ff ff4e 	bl	801cf60 <lfs_dir_commitattr>
                if (err) {
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	b348      	cbz	r0, 801d11c <lfs_dir_commitcrc+0xf0>
 801d0c8:	e09f      	b.n	801d20a <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	463a      	mov	r2, r7
 801d0ce:	4651      	mov	r1, sl
 801d0d0:	4638      	mov	r0, r7
 801d0d2:	f7fe fd81 	bl	801bbd8 <lfs_bd_sync>
            if (err) {
 801d0d6:	4603      	mov	r3, r0
 801d0d8:	2800      	cmp	r0, #0
 801d0da:	f040 8096 	bne.w	801d20a <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801d0de:	6874      	ldr	r4, [r6, #4]
 801d0e0:	4544      	cmp	r4, r8
 801d0e2:	d268      	bcs.n	801d1b6 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801d0e4:	eba8 0304 	sub.w	r3, r8, r4
 801d0e8:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801d0ea:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	bf94      	ite	ls
 801d0f2:	18e4      	addls	r4, r4, r3
 801d0f4:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801d0f6:	3404      	adds	r4, #4
        if (noff < end) {
 801d0f8:	4544      	cmp	r4, r8
 801d0fa:	d204      	bcs.n	801d106 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801d0fc:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801d100:	429c      	cmp	r4, r3
 801d102:	bf28      	it	cs
 801d104:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801d106:	23ff      	movs	r3, #255	@ 0xff
 801d108:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801d10c:	4544      	cmp	r4, r8
 801d10e:	d305      	bcc.n	801d11c <lfs_dir_commitcrc+0xf0>
 801d110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d114:	6a1b      	ldr	r3, [r3, #32]
 801d116:	1ad2      	subs	r2, r2, r3
 801d118:	42a2      	cmp	r2, r4
 801d11a:	d2a3      	bcs.n	801d064 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801d11c:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801d120:	43d2      	mvns	r2, r2
 801d122:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801d126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801d12a:	6873      	ldr	r3, [r6, #4]
 801d12c:	1ae5      	subs	r5, r4, r3
 801d12e:	3d04      	subs	r5, #4
 801d130:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801d134:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801d138:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801d13c:	68b3      	ldr	r3, [r6, #8]
 801d13e:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801d140:	ba1b      	rev	r3, r3
 801d142:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801d144:	f10d 091c 	add.w	r9, sp, #28
 801d148:	2204      	movs	r2, #4
 801d14a:	4649      	mov	r1, r9
 801d14c:	68f0      	ldr	r0, [r6, #12]
 801d14e:	f002 fbe1 	bl	801f914 <lfs_crc>
 801d152:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801d154:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801d156:	f107 0a10 	add.w	sl, r7, #16
 801d15a:	2308      	movs	r3, #8
 801d15c:	9303      	str	r3, [sp, #12]
 801d15e:	f8cd 9008 	str.w	r9, [sp, #8]
 801d162:	6873      	ldr	r3, [r6, #4]
 801d164:	9301      	str	r3, [sp, #4]
 801d166:	6833      	ldr	r3, [r6, #0]
 801d168:	9300      	str	r3, [sp, #0]
 801d16a:	2300      	movs	r3, #0
 801d16c:	463a      	mov	r2, r7
 801d16e:	4651      	mov	r1, sl
 801d170:	4638      	mov	r0, r7
 801d172:	f7fe fcb7 	bl	801bae4 <lfs_bd_prog>
        if (err) {
 801d176:	4603      	mov	r3, r0
 801d178:	2800      	cmp	r0, #0
 801d17a:	d146      	bne.n	801d20a <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801d17c:	f1bb 0f00 	cmp.w	fp, #0
 801d180:	d104      	bne.n	801d18c <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801d182:	6873      	ldr	r3, [r6, #4]
 801d184:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801d188:	68f3      	ldr	r3, [r6, #12]
 801d18a:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801d18c:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801d18e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d192:	43db      	mvns	r3, r3
 801d194:	061b      	lsls	r3, r3, #24
 801d196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801d19a:	406b      	eors	r3, r5
 801d19c:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801d19e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d1a2:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801d1a4:	4544      	cmp	r4, r8
 801d1a6:	d290      	bcs.n	801d0ca <lfs_dir_commitcrc+0x9e>
 801d1a8:	697b      	ldr	r3, [r7, #20]
 801d1aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d1ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801d1ae:	4413      	add	r3, r2
 801d1b0:	42a3      	cmp	r3, r4
 801d1b2:	d894      	bhi.n	801d0de <lfs_dir_commitcrc+0xb2>
 801d1b4:	e789      	b.n	801d0ca <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801d1b6:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801d1b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d1bc:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801d1be:	aa09      	add	r2, sp, #36	@ 0x24
 801d1c0:	9203      	str	r2, [sp, #12]
 801d1c2:	ebab 0203 	sub.w	r2, fp, r3
 801d1c6:	9202      	str	r2, [sp, #8]
 801d1c8:	9301      	str	r3, [sp, #4]
 801d1ca:	6833      	ldr	r3, [r6, #0]
 801d1cc:	9300      	str	r3, [sp, #0]
 801d1ce:	f10b 0304 	add.w	r3, fp, #4
 801d1d2:	463a      	mov	r2, r7
 801d1d4:	2100      	movs	r1, #0
 801d1d6:	4638      	mov	r0, r7
 801d1d8:	f7fe fe08 	bl	801bdec <lfs_bd_crc>
    if (err) {
 801d1dc:	4603      	mov	r3, r0
 801d1de:	b9a0      	cbnz	r0, 801d20a <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801d1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1e2:	9a05      	ldr	r2, [sp, #20]
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	d114      	bne.n	801d212 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801d1e8:	ab09      	add	r3, sp, #36	@ 0x24
 801d1ea:	9303      	str	r3, [sp, #12]
 801d1ec:	2304      	movs	r3, #4
 801d1ee:	9302      	str	r3, [sp, #8]
 801d1f0:	f8cd b004 	str.w	fp, [sp, #4]
 801d1f4:	6832      	ldr	r2, [r6, #0]
 801d1f6:	9200      	str	r2, [sp, #0]
 801d1f8:	463a      	mov	r2, r7
 801d1fa:	2100      	movs	r1, #0
 801d1fc:	4638      	mov	r0, r7
 801d1fe:	f7fe fdf5 	bl	801bdec <lfs_bd_crc>
    if (err) {
 801d202:	4603      	mov	r3, r0
 801d204:	b908      	cbnz	r0, 801d20a <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801d206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d208:	b932      	cbnz	r2, 801d218 <lfs_dir_commitcrc+0x1ec>
}
 801d20a:	4618      	mov	r0, r3
 801d20c:	b00b      	add	sp, #44	@ 0x2c
 801d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801d212:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d216:	e7f8      	b.n	801d20a <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801d218:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801d21c:	e7f5      	b.n	801d20a <lfs_dir_commitcrc+0x1de>
 801d21e:	bf00      	nop
 801d220:	5ffffc08 	.word	0x5ffffc08

0801d224 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d228:	b09b      	sub	sp, #108	@ 0x6c
 801d22a:	4605      	mov	r5, r0
 801d22c:	460c      	mov	r4, r1
 801d22e:	4616      	mov	r6, r2
 801d230:	461f      	mov	r7, r3
 801d232:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801d236:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801d23a:	f7fd fe7f 	bl	801af3c <lfs_dir_needsrelocation>
    dir->rev += 1;
 801d23e:	68a3      	ldr	r3, [r4, #8]
 801d240:	3301      	adds	r3, #1
 801d242:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801d244:	4681      	mov	r9, r0
 801d246:	2800      	cmp	r0, #0
 801d248:	d034      	beq.n	801d2b4 <lfs_dir_compact+0x90>
 801d24a:	2300      	movs	r3, #0
 801d24c:	9314      	str	r3, [sp, #80]	@ 0x50
 801d24e:	2301      	movs	r3, #1
 801d250:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d252:	6823      	ldr	r3, [r4, #0]
 801d254:	b373      	cbz	r3, 801d2b4 <lfs_dir_compact+0x90>
 801d256:	6862      	ldr	r2, [r4, #4]
 801d258:	2a01      	cmp	r2, #1
 801d25a:	d02b      	beq.n	801d2b4 <lfs_dir_compact+0x90>
 801d25c:	2b01      	cmp	r3, #1
 801d25e:	d029      	beq.n	801d2b4 <lfs_dir_compact+0x90>
 801d260:	b342      	cbz	r2, 801d2b4 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801d262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d266:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801d268:	f1b9 0f00 	cmp.w	r9, #0
 801d26c:	f000 810d 	beq.w	801d48a <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d270:	2300      	movs	r3, #0
 801d272:	9318      	str	r3, [sp, #96]	@ 0x60
 801d274:	2301      	movs	r3, #1
 801d276:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d278:	6823      	ldr	r3, [r4, #0]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	f000 810f 	beq.w	801d49e <lfs_dir_compact+0x27a>
 801d280:	6862      	ldr	r2, [r4, #4]
 801d282:	2a01      	cmp	r2, #1
 801d284:	f000 810b 	beq.w	801d49e <lfs_dir_compact+0x27a>
 801d288:	2b01      	cmp	r3, #1
 801d28a:	f000 8108 	beq.w	801d49e <lfs_dir_compact+0x27a>
 801d28e:	2a00      	cmp	r2, #0
 801d290:	f000 8105 	beq.w	801d49e <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801d294:	1d21      	adds	r1, r4, #4
 801d296:	4628      	mov	r0, r5
 801d298:	f7ff f9d0 	bl	801c63c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801d29c:	4603      	mov	r3, r0
 801d29e:	b330      	cbz	r0, 801d2ee <lfs_dir_compact+0xca>
 801d2a0:	f110 0f1c 	cmn.w	r0, #28
 801d2a4:	d11f      	bne.n	801d2e6 <lfs_dir_compact+0xc2>
 801d2a6:	f1b9 0f00 	cmp.w	r9, #0
 801d2aa:	d01c      	beq.n	801d2e6 <lfs_dir_compact+0xc2>
        relocated = true;
 801d2ac:	46cb      	mov	fp, r9
        tired = false;
 801d2ae:	f04f 0900 	mov.w	r9, #0
 801d2b2:	e001      	b.n	801d2b8 <lfs_dir_compact+0x94>
    bool relocated = false;
 801d2b4:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801d2b8:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801d2ba:	930e      	str	r3, [sp, #56]	@ 0x38
 801d2bc:	2300      	movs	r3, #0
 801d2be:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d2c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d2c4:	9210      	str	r2, [sp, #64]	@ 0x40
 801d2c6:	9211      	str	r2, [sp, #68]	@ 0x44
 801d2c8:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801d2ca:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d2cc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d2ce:	b19b      	cbz	r3, 801d2f8 <lfs_dir_compact+0xd4>
 801d2d0:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801d2d2:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801d2d4:	6861      	ldr	r1, [r4, #4]
 801d2d6:	4628      	mov	r0, r5
 801d2d8:	f7fd fe8e 	bl	801aff8 <lfs_bd_erase>
            if (err) {
 801d2dc:	4603      	mov	r3, r0
 801d2de:	b170      	cbz	r0, 801d2fe <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801d2e0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d2e4:	d0bd      	beq.n	801d262 <lfs_dir_compact+0x3e>
}
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	b01b      	add	sp, #108	@ 0x6c
 801d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801d2ee:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801d2f2:	f04f 0b01 	mov.w	fp, #1
 801d2f6:	e7df      	b.n	801d2b8 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d2f8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d2fa:	3b08      	subs	r3, #8
 801d2fc:	e7e9      	b.n	801d2d2 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801d2fe:	2304      	movs	r3, #4
 801d300:	f104 0208 	add.w	r2, r4, #8
 801d304:	a90e      	add	r1, sp, #56	@ 0x38
 801d306:	4628      	mov	r0, r5
 801d308:	f7ff fe0a 	bl	801cf20 <lfs_dir_commitprog>
            if (err) {
 801d30c:	4603      	mov	r3, r0
 801d30e:	b118      	cbz	r0, 801d318 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801d310:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d314:	d1e7      	bne.n	801d2e6 <lfs_dir_compact+0xc2>
 801d316:	e7a4      	b.n	801d262 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d318:	9516      	str	r5, [sp, #88]	@ 0x58
 801d31a:	ab0e      	add	r3, sp, #56	@ 0x38
 801d31c:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801d31e:	ab16      	add	r3, sp, #88	@ 0x58
 801d320:	9308      	str	r3, [sp, #32]
 801d322:	4b65      	ldr	r3, [pc, #404]	@ (801d4b8 <lfs_dir_compact+0x294>)
 801d324:	9307      	str	r3, [sp, #28]
 801d326:	f1c8 0300 	rsb	r3, r8, #0
 801d32a:	b21b      	sxth	r3, r3
 801d32c:	9306      	str	r3, [sp, #24]
 801d32e:	f8cd a014 	str.w	sl, [sp, #20]
 801d332:	f8cd 8010 	str.w	r8, [sp, #16]
 801d336:	2200      	movs	r2, #0
 801d338:	9203      	str	r2, [sp, #12]
 801d33a:	4b60      	ldr	r3, [pc, #384]	@ (801d4bc <lfs_dir_compact+0x298>)
 801d33c:	9302      	str	r3, [sp, #8]
 801d33e:	9701      	str	r7, [sp, #4]
 801d340:	9600      	str	r6, [sp, #0]
 801d342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d346:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801d348:	4628      	mov	r0, r5
 801d34a:	f7fe f911 	bl	801b570 <lfs_dir_traverse>
            if (err) {
 801d34e:	4603      	mov	r3, r0
 801d350:	b118      	cbz	r0, 801d35a <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801d352:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d356:	d1c6      	bne.n	801d2e6 <lfs_dir_compact+0xc2>
 801d358:	e783      	b.n	801d262 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d35a:	69a2      	ldr	r2, [r4, #24]
 801d35c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d360:	d02c      	beq.n	801d3bc <lfs_dir_compact+0x198>
 801d362:	69e2      	ldr	r2, [r4, #28]
 801d364:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d368:	d026      	beq.n	801d3b8 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801d36a:	f013 0f01 	tst.w	r3, #1
 801d36e:	d027      	beq.n	801d3c0 <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801d370:	2300      	movs	r3, #0
 801d372:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d374:	930c      	str	r3, [sp, #48]	@ 0x30
 801d376:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801d378:	f1bb 0f00 	cmp.w	fp, #0
 801d37c:	d033      	beq.n	801d3e6 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801d37e:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801d382:	a80b      	add	r0, sp, #44	@ 0x2c
 801d384:	f7fd fd10 	bl	801ada8 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d38a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d38e:	f023 0303 	bic.w	r3, r3, #3
 801d392:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d394:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d396:	4621      	mov	r1, r4
 801d398:	4628      	mov	r0, r5
 801d39a:	f7fe f859 	bl	801b450 <lfs_dir_getgstate>
            if (err) {
 801d39e:	4603      	mov	r3, r0
 801d3a0:	2800      	cmp	r0, #0
 801d3a2:	d1a0      	bne.n	801d2e6 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801d3a4:	2b02      	cmp	r3, #2
 801d3a6:	dc29      	bgt.n	801d3fc <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801d3a8:	aa1a      	add	r2, sp, #104	@ 0x68
 801d3aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d3ae:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801d3b2:	bb92      	cbnz	r2, 801d41a <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	e7f5      	b.n	801d3a4 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d3b8:	2301      	movs	r3, #1
 801d3ba:	e7d6      	b.n	801d36a <lfs_dir_compact+0x146>
 801d3bc:	2301      	movs	r3, #1
 801d3be:	e7d4      	b.n	801d36a <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801d3c0:	7de2      	ldrb	r2, [r4, #23]
 801d3c2:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801d3c6:	f104 0318 	add.w	r3, r4, #24
 801d3ca:	493d      	ldr	r1, [pc, #244]	@ (801d4c0 <lfs_dir_compact+0x29c>)
 801d3cc:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801d3d0:	a90e      	add	r1, sp, #56	@ 0x38
 801d3d2:	4628      	mov	r0, r5
 801d3d4:	f7ff fdc4 	bl	801cf60 <lfs_dir_commitattr>
                if (err) {
 801d3d8:	4603      	mov	r3, r0
 801d3da:	2800      	cmp	r0, #0
 801d3dc:	d0c8      	beq.n	801d370 <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801d3de:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d3e2:	d180      	bne.n	801d2e6 <lfs_dir_compact+0xc2>
 801d3e4:	e73d      	b.n	801d262 <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801d3e6:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801d3ea:	a80b      	add	r0, sp, #44	@ 0x2c
 801d3ec:	f7fd fcdc 	bl	801ada8 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801d3f0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801d3f4:	a80b      	add	r0, sp, #44	@ 0x2c
 801d3f6:	f7fd fcd7 	bl	801ada8 <lfs_gstate_xor>
 801d3fa:	e7c0      	b.n	801d37e <lfs_dir_compact+0x15a>
    return true;
 801d3fc:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801d3fe:	b973      	cbnz	r3, 801d41e <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801d400:	ab0b      	add	r3, sp, #44	@ 0x2c
 801d402:	4a30      	ldr	r2, [pc, #192]	@ (801d4c4 <lfs_dir_compact+0x2a0>)
 801d404:	a90e      	add	r1, sp, #56	@ 0x38
 801d406:	4628      	mov	r0, r5
 801d408:	f7ff fdaa 	bl	801cf60 <lfs_dir_commitattr>
                if (err) {
 801d40c:	4603      	mov	r3, r0
 801d40e:	b130      	cbz	r0, 801d41e <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801d410:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d414:	f47f af67 	bne.w	801d2e6 <lfs_dir_compact+0xc2>
 801d418:	e723      	b.n	801d262 <lfs_dir_compact+0x3e>
            return false;
 801d41a:	2300      	movs	r3, #0
 801d41c:	e7ef      	b.n	801d3fe <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801d41e:	a90e      	add	r1, sp, #56	@ 0x38
 801d420:	4628      	mov	r0, r5
 801d422:	f7ff fe03 	bl	801d02c <lfs_dir_commitcrc>
            if (err) {
 801d426:	4603      	mov	r3, r0
 801d428:	b120      	cbz	r0, 801d434 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801d42a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d42e:	f47f af5a 	bne.w	801d2e6 <lfs_dir_compact+0xc2>
 801d432:	e716      	b.n	801d262 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d436:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801d438:	6a12      	ldr	r2, [r2, #32]
 801d43a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d43e:	fb02 3311 	mls	r3, r2, r1, r3
 801d442:	b9db      	cbnz	r3, 801d47c <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801d444:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801d446:	6862      	ldr	r2, [r4, #4]
 801d448:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801d44a:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801d44c:	ebaa 0808 	sub.w	r8, sl, r8
 801d450:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801d454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d456:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801d458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d45a:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801d45c:	2200      	movs	r2, #0
 801d45e:	64aa      	str	r2, [r5, #72]	@ 0x48
 801d460:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801d462:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801d464:	f1bb 0f00 	cmp.w	fp, #0
 801d468:	d106      	bne.n	801d478 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801d46a:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801d46e:	3530      	adds	r5, #48	@ 0x30
 801d470:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801d478:	465b      	mov	r3, fp
 801d47a:	e734      	b.n	801d2e6 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d47c:	4b12      	ldr	r3, [pc, #72]	@ (801d4c8 <lfs_dir_compact+0x2a4>)
 801d47e:	4a13      	ldr	r2, [pc, #76]	@ (801d4cc <lfs_dir_compact+0x2a8>)
 801d480:	f640 0106 	movw	r1, #2054	@ 0x806
 801d484:	4812      	ldr	r0, [pc, #72]	@ (801d4d0 <lfs_dir_compact+0x2ac>)
 801d486:	f00c fca9 	bl	8029ddc <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801d48a:	4b12      	ldr	r3, [pc, #72]	@ (801d4d4 <lfs_dir_compact+0x2b0>)
 801d48c:	9300      	str	r3, [sp, #0]
 801d48e:	6863      	ldr	r3, [r4, #4]
 801d490:	f640 0218 	movw	r2, #2072	@ 0x818
 801d494:	490e      	ldr	r1, [pc, #56]	@ (801d4d0 <lfs_dir_compact+0x2ac>)
 801d496:	4810      	ldr	r0, [pc, #64]	@ (801d4d8 <lfs_dir_compact+0x2b4>)
 801d498:	f00c fcd4 	bl	8029e44 <printf>
 801d49c:	e6e8      	b.n	801d270 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801d49e:	4b0d      	ldr	r3, [pc, #52]	@ (801d4d4 <lfs_dir_compact+0x2b0>)
 801d4a0:	9300      	str	r3, [sp, #0]
 801d4a2:	6863      	ldr	r3, [r4, #4]
 801d4a4:	f640 021d 	movw	r2, #2077	@ 0x81d
 801d4a8:	4909      	ldr	r1, [pc, #36]	@ (801d4d0 <lfs_dir_compact+0x2ac>)
 801d4aa:	480c      	ldr	r0, [pc, #48]	@ (801d4dc <lfs_dir_compact+0x2b8>)
 801d4ac:	f00c fcca 	bl	8029e44 <printf>
            return LFS_ERR_NOSPC;
 801d4b0:	f06f 031b 	mvn.w	r3, #27
 801d4b4:	e717      	b.n	801d2e6 <lfs_dir_compact+0xc2>
 801d4b6:	bf00      	nop
 801d4b8:	0801d01b 	.word	0x0801d01b
 801d4bc:	400ffc00 	.word	0x400ffc00
 801d4c0:	000ffc08 	.word	0x000ffc08
 801d4c4:	7ffffc0c 	.word	0x7ffffc0c
 801d4c8:	08039108 	.word	0x08039108
 801d4cc:	08039b3c 	.word	0x08039b3c
 801d4d0:	08038e6c 	.word	0x08038e6c
 801d4d4:	08036a40 	.word	0x08036a40
 801d4d8:	08039084 	.word	0x08039084
 801d4dc:	08039130 	.word	0x08039130

0801d4e0 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801d4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d4e4:	b08d      	sub	sp, #52	@ 0x34
 801d4e6:	4605      	mov	r5, r0
 801d4e8:	460c      	mov	r4, r1
 801d4ea:	4691      	mov	r9, r2
 801d4ec:	461e      	mov	r6, r3
 801d4ee:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801d4f2:	a904      	add	r1, sp, #16
 801d4f4:	f7ff f8fa 	bl	801c6ec <lfs_dir_alloc>
    if (err) {
 801d4f8:	4607      	mov	r7, r0
 801d4fa:	b118      	cbz	r0, 801d504 <lfs_dir_split+0x24>
}
 801d4fc:	4638      	mov	r0, r7
 801d4fe:	b00d      	add	sp, #52	@ 0x34
 801d500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801d504:	7de3      	ldrb	r3, [r4, #23]
 801d506:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801d50a:	69a3      	ldr	r3, [r4, #24]
 801d50c:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801d50e:	69e3      	ldr	r3, [r4, #28]
 801d510:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801d512:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d516:	9302      	str	r3, [sp, #8]
 801d518:	f8cd 8004 	str.w	r8, [sp, #4]
 801d51c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d51e:	9300      	str	r3, [sp, #0]
 801d520:	4633      	mov	r3, r6
 801d522:	464a      	mov	r2, r9
 801d524:	a904      	add	r1, sp, #16
 801d526:	4628      	mov	r0, r5
 801d528:	f7ff fe7c 	bl	801d224 <lfs_dir_compact>
    if (res < 0) {
 801d52c:	2800      	cmp	r0, #0
 801d52e:	db17      	blt.n	801d560 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801d530:	9904      	ldr	r1, [sp, #16]
 801d532:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801d534:	9a05      	ldr	r2, [sp, #20]
 801d536:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801d538:	2301      	movs	r3, #1
 801d53a:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d53c:	6823      	ldr	r3, [r4, #0]
 801d53e:	6a28      	ldr	r0, [r5, #32]
 801d540:	4283      	cmp	r3, r0
 801d542:	d007      	beq.n	801d554 <lfs_dir_split+0x74>
 801d544:	6866      	ldr	r6, [r4, #4]
 801d546:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801d548:	42a6      	cmp	r6, r4
 801d54a:	d003      	beq.n	801d554 <lfs_dir_split+0x74>
 801d54c:	42a3      	cmp	r3, r4
 801d54e:	d001      	beq.n	801d554 <lfs_dir_split+0x74>
 801d550:	42b0      	cmp	r0, r6
 801d552:	d1d3      	bne.n	801d4fc <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801d554:	f1b8 0f00 	cmp.w	r8, #0
 801d558:	d1d0      	bne.n	801d4fc <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801d55a:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801d55c:	626a      	str	r2, [r5, #36]	@ 0x24
 801d55e:	e7cd      	b.n	801d4fc <lfs_dir_split+0x1c>
        return res;
 801d560:	4607      	mov	r7, r0
 801d562:	e7cb      	b.n	801d4fc <lfs_dir_split+0x1c>

0801d564 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d568:	b091      	sub	sp, #68	@ 0x44
 801d56a:	4607      	mov	r7, r0
 801d56c:	4615      	mov	r5, r2
 801d56e:	4699      	mov	r9, r3
 801d570:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801d574:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801d578:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801d57c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d57e:	e04c      	b.n	801d61a <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801d580:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801d582:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801d584:	4403      	add	r3, r0
 801d586:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801d588:	fbb3 f1f0 	udiv	r1, r3, r0
 801d58c:	fb00 3111 	mls	r1, r0, r1, r3
 801d590:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801d592:	4293      	cmp	r3, r2
 801d594:	bf28      	it	cs
 801d596:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801d598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d59a:	429a      	cmp	r2, r3
 801d59c:	d92d      	bls.n	801d5fa <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801d59e:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801d5a2:	eba6 0804 	sub.w	r8, r6, r4
 801d5a6:	f1b8 0f01 	cmp.w	r8, #1
 801d5aa:	d926      	bls.n	801d5fa <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801d5b0:	b2a1      	uxth	r1, r4
 801d5b2:	ab0d      	add	r3, sp, #52	@ 0x34
 801d5b4:	9308      	str	r3, [sp, #32]
 801d5b6:	4b4d      	ldr	r3, [pc, #308]	@ (801d6ec <lfs_dir_splittingcompact+0x188>)
 801d5b8:	9307      	str	r3, [sp, #28]
 801d5ba:	424b      	negs	r3, r1
 801d5bc:	b21b      	sxth	r3, r3
 801d5be:	9306      	str	r3, [sp, #24]
 801d5c0:	9605      	str	r6, [sp, #20]
 801d5c2:	9104      	str	r1, [sp, #16]
 801d5c4:	9203      	str	r2, [sp, #12]
 801d5c6:	4b4a      	ldr	r3, [pc, #296]	@ (801d6f0 <lfs_dir_splittingcompact+0x18c>)
 801d5c8:	9302      	str	r3, [sp, #8]
 801d5ca:	f8cd 9004 	str.w	r9, [sp, #4]
 801d5ce:	9500      	str	r5, [sp, #0]
 801d5d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d5d4:	4651      	mov	r1, sl
 801d5d6:	4638      	mov	r0, r7
 801d5d8:	f7fd ffca 	bl	801b570 <lfs_dir_traverse>
            if (err) {
 801d5dc:	4603      	mov	r3, r0
 801d5de:	2800      	cmp	r0, #0
 801d5e0:	d15b      	bne.n	801d69a <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801d5e2:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801d5e6:	d8da      	bhi.n	801d59e <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801d5e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801d5ea:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801d5ec:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801d5f0:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801d5f2:	2800      	cmp	r0, #0
 801d5f4:	d0c4      	beq.n	801d580 <lfs_dir_splittingcompact+0x1c>
 801d5f6:	0843      	lsrs	r3, r0, #1
 801d5f8:	e7c3      	b.n	801d582 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801d5fa:	455c      	cmp	r4, fp
 801d5fc:	d022      	beq.n	801d644 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d5fe:	b2a4      	uxth	r4, r4
 801d600:	9602      	str	r6, [sp, #8]
 801d602:	9401      	str	r4, [sp, #4]
 801d604:	f8cd a000 	str.w	sl, [sp]
 801d608:	464b      	mov	r3, r9
 801d60a:	462a      	mov	r2, r5
 801d60c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d60e:	4638      	mov	r0, r7
 801d610:	f7ff ff66 	bl	801d4e0 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801d614:	4603      	mov	r3, r0
 801d616:	b910      	cbnz	r0, 801d61e <lfs_dir_splittingcompact+0xba>
            end = split;
 801d618:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801d61a:	465c      	mov	r4, fp
        while (end - split > 1) {
 801d61c:	e7c1      	b.n	801d5a2 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801d61e:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801d622:	f110 0f1c 	cmn.w	r0, #28
 801d626:	d138      	bne.n	801d69a <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801d628:	4b32      	ldr	r3, [pc, #200]	@ (801d6f4 <lfs_dir_splittingcompact+0x190>)
 801d62a:	9301      	str	r3, [sp, #4]
 801d62c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d630:	9300      	str	r3, [sp, #0]
 801d632:	f8d8 3000 	ldr.w	r3, [r8]
 801d636:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801d63a:	492f      	ldr	r1, [pc, #188]	@ (801d6f8 <lfs_dir_splittingcompact+0x194>)
 801d63c:	482f      	ldr	r0, [pc, #188]	@ (801d6fc <lfs_dir_splittingcompact+0x198>)
 801d63e:	f00c fc01 	bl	8029e44 <printf>
            break;
 801d642:	e001      	b.n	801d648 <lfs_dir_splittingcompact+0xe4>
 801d644:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801d648:	4641      	mov	r1, r8
 801d64a:	4638      	mov	r0, r7
 801d64c:	f7fd fc76 	bl	801af3c <lfs_dir_needsrelocation>
 801d650:	b1b8      	cbz	r0, 801d682 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801d652:	2300      	movs	r3, #0
 801d654:	930e      	str	r3, [sp, #56]	@ 0x38
 801d656:	2301      	movs	r3, #1
 801d658:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d65a:	f8d8 2000 	ldr.w	r2, [r8]
 801d65e:	b132      	cbz	r2, 801d66e <lfs_dir_splittingcompact+0x10a>
 801d660:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d664:	2b01      	cmp	r3, #1
 801d666:	d002      	beq.n	801d66e <lfs_dir_splittingcompact+0x10a>
 801d668:	2a01      	cmp	r2, #1
 801d66a:	d000      	beq.n	801d66e <lfs_dir_splittingcompact+0x10a>
 801d66c:	b94b      	cbnz	r3, 801d682 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801d66e:	4638      	mov	r0, r7
 801d670:	f7ff fbe4 	bl	801ce3c <lfs_fs_size_>
        if (size < 0) {
 801d674:	1e03      	subs	r3, r0, #0
 801d676:	db10      	blt.n	801d69a <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801d678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801d67a:	1ad3      	subs	r3, r2, r3
 801d67c:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801d680:	d80f      	bhi.n	801d6a2 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801d682:	9602      	str	r6, [sp, #8]
 801d684:	f8cd b004 	str.w	fp, [sp, #4]
 801d688:	f8cd a000 	str.w	sl, [sp]
 801d68c:	464b      	mov	r3, r9
 801d68e:	462a      	mov	r2, r5
 801d690:	4641      	mov	r1, r8
 801d692:	4638      	mov	r0, r7
 801d694:	f7ff fdc6 	bl	801d224 <lfs_dir_compact>
 801d698:	4603      	mov	r3, r0
}
 801d69a:	4618      	mov	r0, r3
 801d69c:	b011      	add	sp, #68	@ 0x44
 801d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801d6a2:	4b14      	ldr	r3, [pc, #80]	@ (801d6f4 <lfs_dir_splittingcompact+0x190>)
 801d6a4:	9300      	str	r3, [sp, #0]
 801d6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d6aa:	f640 0286 	movw	r2, #2182	@ 0x886
 801d6ae:	4912      	ldr	r1, [pc, #72]	@ (801d6f8 <lfs_dir_splittingcompact+0x194>)
 801d6b0:	4813      	ldr	r0, [pc, #76]	@ (801d700 <lfs_dir_splittingcompact+0x19c>)
 801d6b2:	f00c fbc7 	bl	8029e44 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801d6b6:	9602      	str	r6, [sp, #8]
 801d6b8:	f8cd b004 	str.w	fp, [sp, #4]
 801d6bc:	f8cd a000 	str.w	sl, [sp]
 801d6c0:	464b      	mov	r3, r9
 801d6c2:	462a      	mov	r2, r5
 801d6c4:	4641      	mov	r1, r8
 801d6c6:	4638      	mov	r0, r7
 801d6c8:	f7ff ff0a 	bl	801d4e0 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801d6cc:	4603      	mov	r3, r0
 801d6ce:	b150      	cbz	r0, 801d6e6 <lfs_dir_splittingcompact+0x182>
 801d6d0:	f110 0f1c 	cmn.w	r0, #28
 801d6d4:	d1e1      	bne.n	801d69a <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801d6d6:	4b07      	ldr	r3, [pc, #28]	@ (801d6f4 <lfs_dir_splittingcompact+0x190>)
 801d6d8:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801d6dc:	4906      	ldr	r1, [pc, #24]	@ (801d6f8 <lfs_dir_splittingcompact+0x194>)
 801d6de:	4809      	ldr	r0, [pc, #36]	@ (801d704 <lfs_dir_splittingcompact+0x1a0>)
 801d6e0:	f00c fbb0 	bl	8029e44 <printf>
 801d6e4:	e7cd      	b.n	801d682 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801d6e6:	2601      	movs	r6, #1
 801d6e8:	e7cb      	b.n	801d682 <lfs_dir_splittingcompact+0x11e>
 801d6ea:	bf00      	nop
 801d6ec:	0801af21 	.word	0x0801af21
 801d6f0:	400ffc00 	.word	0x400ffc00
 801d6f4:	08036a40 	.word	0x08036a40
 801d6f8:	08038e6c 	.word	0x08038e6c
 801d6fc:	08039168 	.word	0x08039168
 801d700:	08039198 	.word	0x08039198
 801d704:	080391c8 	.word	0x080391c8

0801d708 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d70c:	b09b      	sub	sp, #108	@ 0x6c
 801d70e:	4607      	mov	r7, r0
 801d710:	460e      	mov	r6, r1
 801d712:	4691      	mov	r9, r2
 801d714:	461d      	mov	r5, r3
 801d716:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801d71a:	2300      	movs	r3, #0
    bool hasdelete = false;
 801d71c:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801d71e:	e003      	b.n	801d728 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801d720:	8ab2      	ldrh	r2, [r6, #20]
 801d722:	3201      	adds	r2, #1
 801d724:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801d726:	3301      	adds	r3, #1
 801d728:	4543      	cmp	r3, r8
 801d72a:	da2d      	bge.n	801d788 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d72c:	00d8      	lsls	r0, r3, #3
 801d72e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801d732:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d736:	0d11      	lsrs	r1, r2, #20
 801d738:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801d73c:	f240 4e01 	movw	lr, #1025	@ 0x401
 801d740:	4572      	cmp	r2, lr
 801d742:	d0ed      	beq.n	801d720 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801d744:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801d748:	4572      	cmp	r2, lr
 801d74a:	d00f      	beq.n	801d76c <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801d74c:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801d750:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d754:	d1e7      	bne.n	801d726 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801d756:	6862      	ldr	r2, [r4, #4]
 801d758:	6812      	ldr	r2, [r2, #0]
 801d75a:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801d75c:	6862      	ldr	r2, [r4, #4]
 801d75e:	6852      	ldr	r2, [r2, #4]
 801d760:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801d762:	582a      	ldr	r2, [r5, r0]
 801d764:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801d768:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801d76a:	e7dc      	b.n	801d726 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d76c:	8ab2      	ldrh	r2, [r6, #20]
 801d76e:	b122      	cbz	r2, 801d77a <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801d770:	3a01      	subs	r2, #1
 801d772:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801d774:	f04f 0c01 	mov.w	ip, #1
 801d778:	e7d5      	b.n	801d726 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d77a:	4ba0      	ldr	r3, [pc, #640]	@ (801d9fc <lfs_dir_relocatingcommit+0x2f4>)
 801d77c:	4aa0      	ldr	r2, [pc, #640]	@ (801da00 <lfs_dir_relocatingcommit+0x2f8>)
 801d77e:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801d782:	48a0      	ldr	r0, [pc, #640]	@ (801da04 <lfs_dir_relocatingcommit+0x2fc>)
 801d784:	f00c fb2a 	bl	8029ddc <__assert_func>
    if (hasdelete && dir->count == 0) {
 801d788:	f1bc 0f00 	cmp.w	ip, #0
 801d78c:	d01b      	beq.n	801d7c6 <lfs_dir_relocatingcommit+0xbe>
 801d78e:	8ab3      	ldrh	r3, [r6, #20]
 801d790:	b9cb      	cbnz	r3, 801d7c6 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d792:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d794:	b15b      	cbz	r3, 801d7ae <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801d796:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d798:	4631      	mov	r1, r6
 801d79a:	4638      	mov	r0, r7
 801d79c:	f7ff fb5e 	bl	801ce5c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d7a0:	4682      	mov	sl, r0
 801d7a2:	b158      	cbz	r0, 801d7bc <lfs_dir_relocatingcommit+0xb4>
 801d7a4:	f110 0f02 	cmn.w	r0, #2
 801d7a8:	f040 8159 	bne.w	801da5e <lfs_dir_relocatingcommit+0x356>
 801d7ac:	e00b      	b.n	801d7c6 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d7ae:	4b96      	ldr	r3, [pc, #600]	@ (801da08 <lfs_dir_relocatingcommit+0x300>)
 801d7b0:	4a93      	ldr	r2, [pc, #588]	@ (801da00 <lfs_dir_relocatingcommit+0x2f8>)
 801d7b2:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801d7b6:	4893      	ldr	r0, [pc, #588]	@ (801da04 <lfs_dir_relocatingcommit+0x2fc>)
 801d7b8:	f00c fb10 	bl	8029ddc <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801d7bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d7be:	7ddb      	ldrb	r3, [r3, #23]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	f040 80bf 	bne.w	801d944 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801d7c6:	7db4      	ldrb	r4, [r6, #22]
 801d7c8:	2c00      	cmp	r4, #0
 801d7ca:	d02e      	beq.n	801d82a <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801d7cc:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801d7ce:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801d7d0:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801d7d2:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801d7d4:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801d7d6:	9212      	str	r2, [sp, #72]	@ 0x48
 801d7d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d7dc:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d7de:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801d7e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d7e2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d03c      	beq.n	801d862 <lfs_dir_relocatingcommit+0x15a>
 801d7e8:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801d7ea:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d7ec:	9718      	str	r7, [sp, #96]	@ 0x60
 801d7ee:	ab10      	add	r3, sp, #64	@ 0x40
 801d7f0:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801d7f2:	ab18      	add	r3, sp, #96	@ 0x60
 801d7f4:	9308      	str	r3, [sp, #32]
 801d7f6:	4b85      	ldr	r3, [pc, #532]	@ (801da0c <lfs_dir_relocatingcommit+0x304>)
 801d7f8:	9307      	str	r3, [sp, #28]
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	9306      	str	r3, [sp, #24]
 801d7fe:	9305      	str	r3, [sp, #20]
 801d800:	9304      	str	r3, [sp, #16]
 801d802:	9303      	str	r3, [sp, #12]
 801d804:	9302      	str	r3, [sp, #8]
 801d806:	f8cd 8004 	str.w	r8, [sp, #4]
 801d80a:	9500      	str	r5, [sp, #0]
 801d80c:	6933      	ldr	r3, [r6, #16]
 801d80e:	68f2      	ldr	r2, [r6, #12]
 801d810:	4631      	mov	r1, r6
 801d812:	4638      	mov	r0, r7
 801d814:	f7fd feac 	bl	801b570 <lfs_dir_traverse>
        if (err) {
 801d818:	4682      	mov	sl, r0
 801d81a:	b328      	cbz	r0, 801d868 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d81c:	f110 0f1c 	cmn.w	r0, #28
 801d820:	d003      	beq.n	801d82a <lfs_dir_relocatingcommit+0x122>
 801d822:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d826:	f040 811a 	bne.w	801da5e <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801d82a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d82e:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801d830:	8ab3      	ldrh	r3, [r6, #20]
 801d832:	9302      	str	r3, [sp, #8]
 801d834:	2300      	movs	r3, #0
 801d836:	9301      	str	r3, [sp, #4]
 801d838:	9600      	str	r6, [sp, #0]
 801d83a:	4643      	mov	r3, r8
 801d83c:	462a      	mov	r2, r5
 801d83e:	4631      	mov	r1, r6
 801d840:	4638      	mov	r0, r7
 801d842:	f7ff fe8f 	bl	801d564 <lfs_dir_splittingcompact>
    if (state < 0) {
 801d846:	1e01      	subs	r1, r0, #0
 801d848:	f2c0 8106 	blt.w	801da58 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801d84c:	f8d9 b000 	ldr.w	fp, [r9]
 801d850:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801d854:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801d858:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d85a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801d85c:	4692      	mov	sl, r2
 801d85e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d860:	e0db      	b.n	801da1a <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d862:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d864:	3b08      	subs	r3, #8
 801d866:	e7c0      	b.n	801d7ea <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801d868:	2300      	movs	r3, #0
 801d86a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d86c:	930e      	str	r3, [sp, #56]	@ 0x38
 801d86e:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801d870:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d874:	a80d      	add	r0, sp, #52	@ 0x34
 801d876:	f7fd fa97 	bl	801ada8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801d87a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801d87e:	a80d      	add	r0, sp, #52	@ 0x34
 801d880:	f7fd fa92 	bl	801ada8 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801d884:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d888:	a80d      	add	r0, sp, #52	@ 0x34
 801d88a:	f7fd fa8d 	bl	801ada8 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d88e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d890:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d894:	f023 0303 	bic.w	r3, r3, #3
 801d898:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801d89a:	e001      	b.n	801d8a0 <lfs_dir_relocatingcommit+0x198>
 801d89c:	f10a 0a01 	add.w	sl, sl, #1
 801d8a0:	f1ba 0f02 	cmp.w	sl, #2
 801d8a4:	dc07      	bgt.n	801d8b6 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801d8a6:	ab1a      	add	r3, sp, #104	@ 0x68
 801d8a8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d8ac:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d0f3      	beq.n	801d89c <lfs_dir_relocatingcommit+0x194>
            return false;
 801d8b4:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801d8b6:	b9c4      	cbnz	r4, 801d8ea <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d8b8:	aa0d      	add	r2, sp, #52	@ 0x34
 801d8ba:	4631      	mov	r1, r6
 801d8bc:	4638      	mov	r0, r7
 801d8be:	f7fd fdc7 	bl	801b450 <lfs_dir_getgstate>
            if (err) {
 801d8c2:	4682      	mov	sl, r0
 801d8c4:	2800      	cmp	r0, #0
 801d8c6:	f040 80ca 	bne.w	801da5e <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801d8ca:	ab0d      	add	r3, sp, #52	@ 0x34
 801d8cc:	4a50      	ldr	r2, [pc, #320]	@ (801da10 <lfs_dir_relocatingcommit+0x308>)
 801d8ce:	a910      	add	r1, sp, #64	@ 0x40
 801d8d0:	4638      	mov	r0, r7
 801d8d2:	f7ff fb45 	bl	801cf60 <lfs_dir_commitattr>
            if (err) {
 801d8d6:	4682      	mov	sl, r0
 801d8d8:	b138      	cbz	r0, 801d8ea <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d8da:	f110 0f1c 	cmn.w	r0, #28
 801d8de:	d0a4      	beq.n	801d82a <lfs_dir_relocatingcommit+0x122>
 801d8e0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d8e4:	f040 80bb 	bne.w	801da5e <lfs_dir_relocatingcommit+0x356>
 801d8e8:	e79f      	b.n	801d82a <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801d8ea:	a910      	add	r1, sp, #64	@ 0x40
 801d8ec:	4638      	mov	r0, r7
 801d8ee:	f7ff fb9d 	bl	801d02c <lfs_dir_commitcrc>
        if (err) {
 801d8f2:	4682      	mov	sl, r0
 801d8f4:	b138      	cbz	r0, 801d906 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d8f6:	f110 0f1c 	cmn.w	r0, #28
 801d8fa:	d096      	beq.n	801d82a <lfs_dir_relocatingcommit+0x122>
 801d8fc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d900:	f040 80ad 	bne.w	801da5e <lfs_dir_relocatingcommit+0x356>
 801d904:	e791      	b.n	801d82a <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d908:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d90a:	6a11      	ldr	r1, [r2, #32]
 801d90c:	fbb3 f2f1 	udiv	r2, r3, r1
 801d910:	fb01 3212 	mls	r2, r1, r2, r3
 801d914:	b97a      	cbnz	r2, 801d936 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801d916:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801d918:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d91a:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801d91c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801d920:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d924:	ca07      	ldmia	r2, {r0, r1, r2}
 801d926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801d92a:	2200      	movs	r2, #0
 801d92c:	64ba      	str	r2, [r7, #72]	@ 0x48
 801d92e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801d930:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801d932:	4651      	mov	r1, sl
 801d934:	e78a      	b.n	801d84c <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d936:	4b37      	ldr	r3, [pc, #220]	@ (801da14 <lfs_dir_relocatingcommit+0x30c>)
 801d938:	4a31      	ldr	r2, [pc, #196]	@ (801da00 <lfs_dir_relocatingcommit+0x2f8>)
 801d93a:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801d93e:	4831      	ldr	r0, [pc, #196]	@ (801da04 <lfs_dir_relocatingcommit+0x2fc>)
 801d940:	f00c fa4c 	bl	8029ddc <__assert_func>
            state = LFS_OK_DROPPED;
 801d944:	2102      	movs	r1, #2
 801d946:	e781      	b.n	801d84c <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801d948:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d94c:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d950:	4584      	cmp	ip, r0
 801d952:	d10e      	bne.n	801d972 <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801d954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d958:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801d95a:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801d95c:	3301      	adds	r3, #1
 801d95e:	4543      	cmp	r3, r8
 801d960:	da34      	bge.n	801d9cc <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d962:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d966:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d96a:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801d96e:	4282      	cmp	r2, r0
 801d970:	d0ea      	beq.n	801d948 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d972:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801d976:	4282      	cmp	r2, r0
 801d978:	d011      	beq.n	801d99e <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801d97a:	f240 4001 	movw	r0, #1025	@ 0x401
 801d97e:	4282      	cmp	r2, r0
 801d980:	d1ec      	bne.n	801d95c <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801d982:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d984:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801d988:	428a      	cmp	r2, r1
 801d98a:	d3e7      	bcc.n	801d95c <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801d98c:	3201      	adds	r2, #1
 801d98e:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801d990:	79a2      	ldrb	r2, [r4, #6]
 801d992:	2a02      	cmp	r2, #2
 801d994:	d1e2      	bne.n	801d95c <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801d996:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d998:	3201      	adds	r2, #1
 801d99a:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d99c:	e7de      	b.n	801d95c <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801d99e:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d9a0:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d9a4:	4560      	cmp	r0, ip
 801d9a6:	d9e8      	bls.n	801d97a <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801d9a8:	3801      	subs	r0, #1
 801d9aa:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801d9ac:	79a2      	ldrb	r2, [r4, #6]
 801d9ae:	2a02      	cmp	r2, #2
 801d9b0:	d1d4      	bne.n	801d95c <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801d9b2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d9b4:	3a01      	subs	r2, #1
 801d9b6:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d9b8:	e7d0      	b.n	801d95c <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801d9ba:	f104 0220 	add.w	r2, r4, #32
 801d9be:	f104 0108 	add.w	r1, r4, #8
 801d9c2:	4638      	mov	r0, r7
 801d9c4:	f7fe fd24 	bl	801c410 <lfs_dir_fetch>
                if (err) {
 801d9c8:	2800      	cmp	r0, #0
 801d9ca:	d147      	bne.n	801da5c <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801d9cc:	88a3      	ldrh	r3, [r4, #4]
 801d9ce:	8ba1      	ldrh	r1, [r4, #28]
 801d9d0:	428b      	cmp	r3, r1
 801d9d2:	d321      	bcc.n	801da18 <lfs_dir_relocatingcommit+0x310>
 801d9d4:	7fe2      	ldrb	r2, [r4, #31]
 801d9d6:	b1fa      	cbz	r2, 801da18 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d9d8:	6a22      	ldr	r2, [r4, #32]
 801d9da:	6a38      	ldr	r0, [r7, #32]
 801d9dc:	4282      	cmp	r2, r0
 801d9de:	d0ec      	beq.n	801d9ba <lfs_dir_relocatingcommit+0x2b2>
 801d9e0:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801d9e4:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801d9e8:	45e6      	cmp	lr, ip
 801d9ea:	d0e6      	beq.n	801d9ba <lfs_dir_relocatingcommit+0x2b2>
 801d9ec:	4562      	cmp	r2, ip
 801d9ee:	d0e4      	beq.n	801d9ba <lfs_dir_relocatingcommit+0x2b2>
 801d9f0:	4570      	cmp	r0, lr
 801d9f2:	d0e2      	beq.n	801d9ba <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801d9f4:	1a5b      	subs	r3, r3, r1
 801d9f6:	80a3      	strh	r3, [r4, #4]
 801d9f8:	e7df      	b.n	801d9ba <lfs_dir_relocatingcommit+0x2b2>
 801d9fa:	bf00      	nop
 801d9fc:	080391f4 	.word	0x080391f4
 801da00:	08039b6c 	.word	0x08039b6c
 801da04:	08038e6c 	.word	0x08038e6c
 801da08:	08039204 	.word	0x08039204
 801da0c:	0801d01b 	.word	0x0801d01b
 801da10:	7ffffc0c 	.word	0x7ffffc0c
 801da14:	08039108 	.word	0x08039108
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801da18:	6824      	ldr	r4, [r4, #0]
 801da1a:	b1d4      	cbz	r4, 801da52 <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801da1c:	68a3      	ldr	r3, [r4, #8]
 801da1e:	459b      	cmp	fp, r3
 801da20:	d006      	beq.n	801da30 <lfs_dir_relocatingcommit+0x328>
 801da22:	68e2      	ldr	r2, [r4, #12]
 801da24:	4592      	cmp	sl, r2
 801da26:	d003      	beq.n	801da30 <lfs_dir_relocatingcommit+0x328>
 801da28:	459a      	cmp	sl, r3
 801da2a:	d001      	beq.n	801da30 <lfs_dir_relocatingcommit+0x328>
 801da2c:	4593      	cmp	fp, r2
 801da2e:	d1f3      	bne.n	801da18 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801da30:	f104 0c08 	add.w	ip, r4, #8
 801da34:	46b6      	mov	lr, r6
 801da36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801da3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801da3e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801da42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801da46:	f104 0308 	add.w	r3, r4, #8
 801da4a:	454b      	cmp	r3, r9
 801da4c:	d0be      	beq.n	801d9cc <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801da4e:	2300      	movs	r3, #0
 801da50:	e785      	b.n	801d95e <lfs_dir_relocatingcommit+0x256>
    return state;
 801da52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801da54:	468a      	mov	sl, r1
 801da56:	e002      	b.n	801da5e <lfs_dir_relocatingcommit+0x356>
        return state;
 801da58:	468a      	mov	sl, r1
 801da5a:	e000      	b.n	801da5e <lfs_dir_relocatingcommit+0x356>
 801da5c:	4682      	mov	sl, r0
}
 801da5e:	4650      	mov	r0, sl
 801da60:	b01b      	add	sp, #108	@ 0x6c
 801da62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da66:	bf00      	nop

0801da68 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801da68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da6c:	b0a3      	sub	sp, #140	@ 0x8c
 801da6e:	4605      	mov	r5, r0
 801da70:	460e      	mov	r6, r1
 801da72:	4690      	mov	r8, r2
 801da74:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801da76:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801da78:	e003      	b.n	801da82 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801da7a:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801da7c:	2b01      	cmp	r3, #1
 801da7e:	d012      	beq.n	801daa6 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801da80:	6824      	ldr	r4, [r4, #0]
 801da82:	b34c      	cbz	r4, 801dad8 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801da84:	f104 0108 	add.w	r1, r4, #8
 801da88:	42b1      	cmp	r1, r6
 801da8a:	d0f9      	beq.n	801da80 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801da8c:	68a1      	ldr	r1, [r4, #8]
 801da8e:	6833      	ldr	r3, [r6, #0]
 801da90:	428b      	cmp	r3, r1
 801da92:	d0f2      	beq.n	801da7a <lfs_dir_orphaningcommit+0x12>
 801da94:	68e0      	ldr	r0, [r4, #12]
 801da96:	6872      	ldr	r2, [r6, #4]
 801da98:	4282      	cmp	r2, r0
 801da9a:	d0ee      	beq.n	801da7a <lfs_dir_orphaningcommit+0x12>
 801da9c:	428a      	cmp	r2, r1
 801da9e:	d0ec      	beq.n	801da7a <lfs_dir_orphaningcommit+0x12>
 801daa0:	4298      	cmp	r0, r3
 801daa2:	d1ed      	bne.n	801da80 <lfs_dir_orphaningcommit+0x18>
 801daa4:	e7e9      	b.n	801da7a <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801daa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801daa8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801daac:	d0e8      	beq.n	801da80 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801daae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801dab0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801dab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801dab4:	429a      	cmp	r2, r3
 801dab6:	d9e3      	bls.n	801da80 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801dab8:	4621      	mov	r1, r4
 801daba:	4628      	mov	r0, r5
 801dabc:	f7fe feee 	bl	801c89c <lfs_file_outline>
            if (err) {
 801dac0:	4607      	mov	r7, r0
 801dac2:	2800      	cmp	r0, #0
 801dac4:	f040 81bc 	bne.w	801de40 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801dac8:	4621      	mov	r1, r4
 801daca:	4628      	mov	r0, r5
 801dacc:	f7ff f866 	bl	801cb9c <lfs_file_flush>
            if (err) {
 801dad0:	4607      	mov	r7, r0
 801dad2:	2800      	cmp	r0, #0
 801dad4:	d0d4      	beq.n	801da80 <lfs_dir_orphaningcommit+0x18>
 801dad6:	e1b3      	b.n	801de40 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801dad8:	6833      	ldr	r3, [r6, #0]
 801dada:	9316      	str	r3, [sp, #88]	@ 0x58
 801dadc:	6873      	ldr	r3, [r6, #4]
 801dade:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801dae0:	ac0e      	add	r4, sp, #56	@ 0x38
 801dae2:	4637      	mov	r7, r6
 801dae4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801dae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dae8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801daec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801daf0:	ab06      	add	r3, sp, #24
 801daf2:	9301      	str	r3, [sp, #4]
 801daf4:	f8cd 9000 	str.w	r9, [sp]
 801daf8:	4643      	mov	r3, r8
 801dafa:	4632      	mov	r2, r6
 801dafc:	a90e      	add	r1, sp, #56	@ 0x38
 801dafe:	4628      	mov	r0, r5
 801db00:	f7ff fe02 	bl	801d708 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801db04:	1e07      	subs	r7, r0, #0
 801db06:	f2c0 819b 	blt.w	801de40 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801db0a:	6833      	ldr	r3, [r6, #0]
 801db0c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801db0e:	429a      	cmp	r2, r3
 801db10:	d007      	beq.n	801db22 <lfs_dir_orphaningcommit+0xba>
 801db12:	6870      	ldr	r0, [r6, #4]
 801db14:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801db16:	4281      	cmp	r1, r0
 801db18:	d003      	beq.n	801db22 <lfs_dir_orphaningcommit+0xba>
 801db1a:	4299      	cmp	r1, r3
 801db1c:	d001      	beq.n	801db22 <lfs_dir_orphaningcommit+0xba>
 801db1e:	4290      	cmp	r0, r2
 801db20:	d109      	bne.n	801db36 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801db22:	4634      	mov	r4, r6
 801db24:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801db28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801db2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801db2e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801db32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801db36:	2f02      	cmp	r7, #2
 801db38:	d001      	beq.n	801db3e <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801db3a:	2600      	movs	r6, #0
 801db3c:	e0b8      	b.n	801dcb0 <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801db3e:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801db42:	4631      	mov	r1, r6
 801db44:	4628      	mov	r0, r5
 801db46:	f7fd fc83 	bl	801b450 <lfs_dir_getgstate>
        if (err) {
 801db4a:	4607      	mov	r7, r0
 801db4c:	2800      	cmp	r0, #0
 801db4e:	f040 8177 	bne.w	801de40 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801db52:	9b06      	ldr	r3, [sp, #24]
 801db54:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801db56:	9b07      	ldr	r3, [sp, #28]
 801db58:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801db5a:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801db5e:	7df2      	ldrb	r2, [r6, #23]
 801db60:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801db64:	4ba2      	ldr	r3, [pc, #648]	@ (801ddf0 <lfs_dir_orphaningcommit+0x388>)
 801db66:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801db6a:	9318      	str	r3, [sp, #96]	@ 0x60
 801db6c:	9119      	str	r1, [sp, #100]	@ 0x64
 801db6e:	2300      	movs	r3, #0
 801db70:	9301      	str	r3, [sp, #4]
 801db72:	2301      	movs	r3, #1
 801db74:	9300      	str	r3, [sp, #0]
 801db76:	ab18      	add	r3, sp, #96	@ 0x60
 801db78:	aa16      	add	r2, sp, #88	@ 0x58
 801db7a:	a906      	add	r1, sp, #24
 801db7c:	4628      	mov	r0, r5
 801db7e:	f7ff fdc3 	bl	801d708 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801db82:	1e07      	subs	r7, r0, #0
 801db84:	f2c0 815c 	blt.w	801de40 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801db88:	ac0e      	add	r4, sp, #56	@ 0x38
 801db8a:	ae06      	add	r6, sp, #24
 801db8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801db8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801db90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801db94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801db98:	e7cf      	b.n	801db3a <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801db9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db9c:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801db9e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dba0:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801dba2:	799a      	ldrb	r2, [r3, #6]
 801dba4:	2a02      	cmp	r2, #2
 801dba6:	d00d      	beq.n	801dbc4 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	b1db      	cbz	r3, 801dbe4 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dbac:	689a      	ldr	r2, [r3, #8]
 801dbae:	4291      	cmp	r1, r2
 801dbb0:	d0f3      	beq.n	801db9a <lfs_dir_orphaningcommit+0x132>
 801dbb2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801dbb4:	68dc      	ldr	r4, [r3, #12]
 801dbb6:	4284      	cmp	r4, r0
 801dbb8:	d0ef      	beq.n	801db9a <lfs_dir_orphaningcommit+0x132>
 801dbba:	428c      	cmp	r4, r1
 801dbbc:	d0ed      	beq.n	801db9a <lfs_dir_orphaningcommit+0x132>
 801dbbe:	4290      	cmp	r0, r2
 801dbc0:	d1ef      	bne.n	801dba2 <lfs_dir_orphaningcommit+0x13a>
 801dbc2:	e7ea      	b.n	801db9a <lfs_dir_orphaningcommit+0x132>
 801dbc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dbc6:	428a      	cmp	r2, r1
 801dbc8:	d007      	beq.n	801dbda <lfs_dir_orphaningcommit+0x172>
 801dbca:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dbcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801dbce:	42a0      	cmp	r0, r4
 801dbd0:	d003      	beq.n	801dbda <lfs_dir_orphaningcommit+0x172>
 801dbd2:	4288      	cmp	r0, r1
 801dbd4:	d001      	beq.n	801dbda <lfs_dir_orphaningcommit+0x172>
 801dbd6:	4294      	cmp	r4, r2
 801dbd8:	d1e6      	bne.n	801dba8 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801dbda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbdc:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801dbde:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dbe0:	631a      	str	r2, [r3, #48]	@ 0x30
 801dbe2:	e7e1      	b.n	801dba8 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801dbe4:	aa06      	add	r2, sp, #24
 801dbe6:	a916      	add	r1, sp, #88	@ 0x58
 801dbe8:	4628      	mov	r0, r5
 801dbea:	f7fe fba5 	bl	801c338 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801dbee:	1e04      	subs	r4, r0, #0
 801dbf0:	f280 8082 	bge.w	801dcf8 <lfs_dir_orphaningcommit+0x290>
 801dbf4:	f114 0f02 	cmn.w	r4, #2
 801dbf8:	f040 8128 	bne.w	801de4c <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801dbfc:	f114 0802 	adds.w	r8, r4, #2
 801dc00:	bf18      	it	ne
 801dc02:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801dc06:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801dc08:	aa06      	add	r2, sp, #24
 801dc0a:	a916      	add	r1, sp, #88	@ 0x58
 801dc0c:	4628      	mov	r0, r5
 801dc0e:	f7ff f925 	bl	801ce5c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801dc12:	4603      	mov	r3, r0
 801dc14:	b118      	cbz	r0, 801dc1e <lfs_dir_orphaningcommit+0x1b6>
 801dc16:	f110 0f02 	cmn.w	r0, #2
 801dc1a:	f040 8119 	bne.w	801de50 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801dc1e:	f114 0f02 	cmn.w	r4, #2
 801dc22:	f000 80d6 	beq.w	801ddd2 <lfs_dir_orphaningcommit+0x36a>
 801dc26:	f113 0f02 	cmn.w	r3, #2
 801dc2a:	f000 80cb 	beq.w	801ddc4 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801dc2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801dc30:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	f040 80d1 	bne.w	801dddc <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801dc3a:	a906      	add	r1, sp, #24
 801dc3c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801dc40:	f7fd f8c4 	bl	801adcc <lfs_gstate_hasmovehere>
 801dc44:	2800      	cmp	r0, #0
 801dc46:	f040 80e1 	bne.w	801de0c <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801dc4a:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801dc4e:	9b06      	ldr	r3, [sp, #24]
 801dc50:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801dc52:	9b07      	ldr	r3, [sp, #28]
 801dc54:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801dc56:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dc5a:	429c      	cmp	r4, r3
 801dc5c:	f000 80ec 	beq.w	801de38 <lfs_dir_orphaningcommit+0x3d0>
 801dc60:	02a3      	lsls	r3, r4, #10
 801dc62:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801dc66:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801dc6a:	931e      	str	r3, [sp, #120]	@ 0x78
 801dc6c:	2100      	movs	r1, #0
 801dc6e:	911f      	str	r1, [sp, #124]	@ 0x7c
 801dc70:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801dc74:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801dc78:	4b5d      	ldr	r3, [pc, #372]	@ (801ddf0 <lfs_dir_orphaningcommit+0x388>)
 801dc7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801dc7e:	9320      	str	r3, [sp, #128]	@ 0x80
 801dc80:	ab0e      	add	r3, sp, #56	@ 0x38
 801dc82:	9321      	str	r3, [sp, #132]	@ 0x84
 801dc84:	9101      	str	r1, [sp, #4]
 801dc86:	2302      	movs	r3, #2
 801dc88:	9300      	str	r3, [sp, #0]
 801dc8a:	ab1e      	add	r3, sp, #120	@ 0x78
 801dc8c:	aa16      	add	r2, sp, #88	@ 0x58
 801dc8e:	a906      	add	r1, sp, #24
 801dc90:	4628      	mov	r0, r5
 801dc92:	f7ff fd39 	bl	801d708 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801dc96:	1e07      	subs	r7, r0, #0
 801dc98:	f2c0 80d2 	blt.w	801de40 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801dc9c:	ac0e      	add	r4, sp, #56	@ 0x38
 801dc9e:	f10d 0c18 	add.w	ip, sp, #24
 801dca2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801dca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dca8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801dcac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801dcb0:	2f01      	cmp	r7, #1
 801dcb2:	f040 80c3 	bne.w	801de3c <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801dcb6:	4b4f      	ldr	r3, [pc, #316]	@ (801ddf4 <lfs_dir_orphaningcommit+0x38c>)
 801dcb8:	9303      	str	r3, [sp, #12]
 801dcba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcbc:	9302      	str	r3, [sp, #8]
 801dcbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dcc0:	9301      	str	r3, [sp, #4]
 801dcc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dcc4:	9300      	str	r3, [sp, #0]
 801dcc6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dcc8:	f640 128c 	movw	r2, #2444	@ 0x98c
 801dccc:	494a      	ldr	r1, [pc, #296]	@ (801ddf8 <lfs_dir_orphaningcommit+0x390>)
 801dcce:	484b      	ldr	r0, [pc, #300]	@ (801ddfc <lfs_dir_orphaningcommit+0x394>)
 801dcd0:	f00c f8b8 	bl	8029e44 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801dcd4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801dcd6:	6a2b      	ldr	r3, [r5, #32]
 801dcd8:	428b      	cmp	r3, r1
 801dcda:	d007      	beq.n	801dcec <lfs_dir_orphaningcommit+0x284>
 801dcdc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801dcde:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801dce0:	4282      	cmp	r2, r0
 801dce2:	d003      	beq.n	801dcec <lfs_dir_orphaningcommit+0x284>
 801dce4:	428a      	cmp	r2, r1
 801dce6:	d001      	beq.n	801dcec <lfs_dir_orphaningcommit+0x284>
 801dce8:	4298      	cmp	r0, r3
 801dcea:	d103      	bne.n	801dcf4 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801dcec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dcee:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801dcf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcf2:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801dcf4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801dcf6:	e758      	b.n	801dbaa <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801dcf8:	f114 0802 	adds.w	r8, r4, #2
 801dcfc:	bf18      	it	ne
 801dcfe:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801dd02:	2101      	movs	r1, #1
 801dd04:	4628      	mov	r0, r5
 801dd06:	f7fd f997 	bl	801b038 <lfs_fs_preporphans>
            if (err) {
 801dd0a:	4607      	mov	r7, r0
 801dd0c:	2800      	cmp	r0, #0
 801dd0e:	f040 8097 	bne.w	801de40 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801dd12:	a906      	add	r1, sp, #24
 801dd14:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801dd18:	f7fd f858 	bl	801adcc <lfs_gstate_hasmovehere>
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	d131      	bne.n	801dd84 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801dd20:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801dd22:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801dd26:	9b06      	ldr	r3, [sp, #24]
 801dd28:	9304      	str	r3, [sp, #16]
 801dd2a:	9b07      	ldr	r3, [sp, #28]
 801dd2c:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801dd2e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dd32:	429f      	cmp	r7, r3
 801dd34:	d044      	beq.n	801ddc0 <lfs_dir_orphaningcommit+0x358>
 801dd36:	02bb      	lsls	r3, r7, #10
 801dd38:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801dd3c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801dd40:	931a      	str	r3, [sp, #104]	@ 0x68
 801dd42:	2300      	movs	r3, #0
 801dd44:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dd46:	921c      	str	r2, [sp, #112]	@ 0x70
 801dd48:	aa0e      	add	r2, sp, #56	@ 0x38
 801dd4a:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd4c:	9301      	str	r3, [sp, #4]
 801dd4e:	2302      	movs	r3, #2
 801dd50:	9300      	str	r3, [sp, #0]
 801dd52:	ab1a      	add	r3, sp, #104	@ 0x68
 801dd54:	aa04      	add	r2, sp, #16
 801dd56:	a906      	add	r1, sp, #24
 801dd58:	4628      	mov	r0, r5
 801dd5a:	f7ff fcd5 	bl	801d708 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801dd5e:	1e07      	subs	r7, r0, #0
 801dd60:	db6e      	blt.n	801de40 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801dd62:	2f01      	cmp	r7, #1
 801dd64:	f47f af50 	bne.w	801dc08 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801dd68:	9b04      	ldr	r3, [sp, #16]
 801dd6a:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801dd6c:	9b05      	ldr	r3, [sp, #20]
 801dd6e:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801dd70:	ac0e      	add	r4, sp, #56	@ 0x38
 801dd72:	ae06      	add	r6, sp, #24
 801dd74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801dd76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dd78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801dd7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801dd80:	2601      	movs	r6, #1
 801dd82:	e795      	b.n	801dcb0 <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801dd84:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801dd86:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801dd8a:	4b1a      	ldr	r3, [pc, #104]	@ (801ddf4 <lfs_dir_orphaningcommit+0x38c>)
 801dd8c:	9302      	str	r3, [sp, #8]
 801dd8e:	9701      	str	r7, [sp, #4]
 801dd90:	9b07      	ldr	r3, [sp, #28]
 801dd92:	9300      	str	r3, [sp, #0]
 801dd94:	9b06      	ldr	r3, [sp, #24]
 801dd96:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801dd9a:	4917      	ldr	r1, [pc, #92]	@ (801ddf8 <lfs_dir_orphaningcommit+0x390>)
 801dd9c:	4818      	ldr	r0, [pc, #96]	@ (801de00 <lfs_dir_orphaningcommit+0x398>)
 801dd9e:	f00c f851 	bl	8029e44 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801dda2:	2200      	movs	r2, #0
 801dda4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801dda8:	4628      	mov	r0, r5
 801ddaa:	f7fd f8f5 	bl	801af98 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801ddae:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801ddb2:	42bb      	cmp	r3, r7
 801ddb4:	d902      	bls.n	801ddbc <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801ddb6:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801ddba:	e7b4      	b.n	801dd26 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801ddbc:	4622      	mov	r2, r4
 801ddbe:	e7b2      	b.n	801dd26 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	e7bd      	b.n	801dd40 <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801ddc4:	4b0f      	ldr	r3, [pc, #60]	@ (801de04 <lfs_dir_orphaningcommit+0x39c>)
 801ddc6:	4a10      	ldr	r2, [pc, #64]	@ (801de08 <lfs_dir_orphaningcommit+0x3a0>)
 801ddc8:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801ddcc:	480a      	ldr	r0, [pc, #40]	@ (801ddf8 <lfs_dir_orphaningcommit+0x390>)
 801ddce:	f00c f805 	bl	8029ddc <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801ddd2:	f113 0f02 	cmn.w	r3, #2
 801ddd6:	f47f af2a 	bne.w	801dc2e <lfs_dir_orphaningcommit+0x1c6>
 801ddda:	e769      	b.n	801dcb0 <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801dddc:	f1c8 0100 	rsb	r1, r8, #0
 801dde0:	4628      	mov	r0, r5
 801dde2:	f7fd f929 	bl	801b038 <lfs_fs_preporphans>
                if (err) {
 801dde6:	4607      	mov	r7, r0
 801dde8:	2800      	cmp	r0, #0
 801ddea:	f43f af26 	beq.w	801dc3a <lfs_dir_orphaningcommit+0x1d2>
 801ddee:	e027      	b.n	801de40 <lfs_dir_orphaningcommit+0x3d8>
 801ddf0:	000ffc08 	.word	0x000ffc08
 801ddf4:	08036a40 	.word	0x08036a40
 801ddf8:	08038e6c 	.word	0x08038e6c
 801ddfc:	0803920c 	.word	0x0803920c
 801de00:	08039248 	.word	0x08039248
 801de04:	0803928c 	.word	0x0803928c
 801de08:	08039bc8 	.word	0x08039bc8
                moveid = lfs_tag_id(lfs->gstate.tag);
 801de0c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801de0e:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801de12:	4b10      	ldr	r3, [pc, #64]	@ (801de54 <lfs_dir_orphaningcommit+0x3ec>)
 801de14:	9302      	str	r3, [sp, #8]
 801de16:	9401      	str	r4, [sp, #4]
 801de18:	9b07      	ldr	r3, [sp, #28]
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	9b06      	ldr	r3, [sp, #24]
 801de1e:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801de22:	490d      	ldr	r1, [pc, #52]	@ (801de58 <lfs_dir_orphaningcommit+0x3f0>)
 801de24:	480d      	ldr	r0, [pc, #52]	@ (801de5c <lfs_dir_orphaningcommit+0x3f4>)
 801de26:	f00c f80d 	bl	8029e44 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801de2a:	2200      	movs	r2, #0
 801de2c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801de30:	4628      	mov	r0, r5
 801de32:	f7fd f8b1 	bl	801af98 <lfs_fs_prepmove>
 801de36:	e70a      	b.n	801dc4e <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801de38:	2300      	movs	r3, #0
 801de3a:	e716      	b.n	801dc6a <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801de3c:	b926      	cbnz	r6, 801de48 <lfs_dir_orphaningcommit+0x3e0>
 801de3e:	2700      	movs	r7, #0
}
 801de40:	4638      	mov	r0, r7
 801de42:	b023      	add	sp, #140	@ 0x8c
 801de44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801de48:	2703      	movs	r7, #3
 801de4a:	e7f9      	b.n	801de40 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801de4c:	4627      	mov	r7, r4
 801de4e:	e7f7      	b.n	801de40 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801de50:	4607      	mov	r7, r0
 801de52:	e7f5      	b.n	801de40 <lfs_dir_orphaningcommit+0x3d8>
 801de54:	08036a40 	.word	0x08036a40
 801de58:	08038e6c 	.word	0x08038e6c
 801de5c:	08039248 	.word	0x08039248

0801de60 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de64:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801de66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801de68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	f000 80ea 	beq.w	801e046 <lfs_fs_deorphan+0x1e6>
 801de72:	4605      	mov	r5, r0
 801de74:	460f      	mov	r7, r1
    int pass = 0;
 801de76:	2600      	movs	r6, #0
    while (pass < 2) {
 801de78:	2e01      	cmp	r6, #1
 801de7a:	f300 80db 	bgt.w	801e034 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801de7e:	2220      	movs	r2, #32
 801de80:	2100      	movs	r1, #0
 801de82:	a806      	add	r0, sp, #24
 801de84:	f00e fcfc 	bl	802c880 <memset>
 801de88:	2301      	movs	r3, #1
 801de8a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801de8e:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801de90:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801de94:	e0bd      	b.n	801e012 <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801de96:	aa16      	add	r2, sp, #88	@ 0x58
 801de98:	a90c      	add	r1, sp, #48	@ 0x30
 801de9a:	4628      	mov	r0, r5
 801de9c:	f7fe fa4c 	bl	801c338 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801dea0:	1e04      	subs	r4, r0, #0
 801dea2:	db39      	blt.n	801df18 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801dea4:	b916      	cbnz	r6, 801deac <lfs_fs_deorphan+0x4c>
 801dea6:	f114 0f02 	cmn.w	r4, #2
 801deaa:	d139      	bne.n	801df20 <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801deac:	2e01      	cmp	r6, #1
 801deae:	f040 80a4 	bne.w	801dffa <lfs_fs_deorphan+0x19a>
 801deb2:	f114 0f02 	cmn.w	r4, #2
 801deb6:	f040 80a0 	bne.w	801dffa <lfs_fs_deorphan+0x19a>
 801deba:	2f00      	cmp	r7, #0
 801debc:	f000 809d 	beq.w	801dffa <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801dec0:	4b63      	ldr	r3, [pc, #396]	@ (801e050 <lfs_fs_deorphan+0x1f0>)
 801dec2:	9301      	str	r3, [sp, #4]
 801dec4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dec6:	9300      	str	r3, [sp, #0]
 801dec8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deca:	f241 329c 	movw	r2, #5020	@ 0x139c
 801dece:	4961      	ldr	r1, [pc, #388]	@ (801e054 <lfs_fs_deorphan+0x1f4>)
 801ded0:	4861      	ldr	r0, [pc, #388]	@ (801e058 <lfs_fs_deorphan+0x1f8>)
 801ded2:	f00b ffb7 	bl	8029e44 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801ded6:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801deda:	a90e      	add	r1, sp, #56	@ 0x38
 801dedc:	4628      	mov	r0, r5
 801dede:	f7fd fab7 	bl	801b450 <lfs_dir_getgstate>
                    if (err) {
 801dee2:	4604      	mov	r4, r0
 801dee4:	2800      	cmp	r0, #0
 801dee6:	f040 80af 	bne.w	801e048 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801deea:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801deee:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801def2:	4b5a      	ldr	r3, [pc, #360]	@ (801e05c <lfs_fs_deorphan+0x1fc>)
 801def4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801def8:	9322      	str	r3, [sp, #136]	@ 0x88
 801defa:	ab14      	add	r3, sp, #80	@ 0x50
 801defc:	9323      	str	r3, [sp, #140]	@ 0x8c
 801defe:	2301      	movs	r3, #1
 801df00:	aa22      	add	r2, sp, #136	@ 0x88
 801df02:	a906      	add	r1, sp, #24
 801df04:	4628      	mov	r0, r5
 801df06:	f7ff fdaf 	bl	801da68 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801df0a:	1e04      	subs	r4, r0, #0
 801df0c:	f2c0 809c 	blt.w	801e048 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801df10:	2c03      	cmp	r4, #3
 801df12:	d17e      	bne.n	801e012 <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801df14:	46b8      	mov	r8, r7
                    continue;
 801df16:	e07c      	b.n	801e012 <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801df18:	f114 0f02 	cmn.w	r4, #2
 801df1c:	d0c2      	beq.n	801dea4 <lfs_fs_deorphan+0x44>
 801df1e:	e093      	b.n	801e048 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801df20:	ab04      	add	r3, sp, #16
 801df22:	9300      	str	r3, [sp, #0]
 801df24:	4623      	mov	r3, r4
 801df26:	4a4e      	ldr	r2, [pc, #312]	@ (801e060 <lfs_fs_deorphan+0x200>)
 801df28:	a916      	add	r1, sp, #88	@ 0x58
 801df2a:	4628      	mov	r0, r5
 801df2c:	f7fd fa82 	bl	801b434 <lfs_dir_get>
                    if (state < 0) {
 801df30:	2800      	cmp	r0, #0
 801df32:	db50      	blt.n	801dfd6 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801df34:	a90c      	add	r1, sp, #48	@ 0x30
 801df36:	a804      	add	r0, sp, #16
 801df38:	f7fc ff12 	bl	801ad60 <lfs_pair_issync>
 801df3c:	2800      	cmp	r0, #0
 801df3e:	d1b5      	bne.n	801deac <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801df40:	4b43      	ldr	r3, [pc, #268]	@ (801e050 <lfs_fs_deorphan+0x1f0>)
 801df42:	9303      	str	r3, [sp, #12]
 801df44:	9b05      	ldr	r3, [sp, #20]
 801df46:	9302      	str	r3, [sp, #8]
 801df48:	9b04      	ldr	r3, [sp, #16]
 801df4a:	9301      	str	r3, [sp, #4]
 801df4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df4e:	9300      	str	r3, [sp, #0]
 801df50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df52:	f241 3271 	movw	r2, #4977	@ 0x1371
 801df56:	493f      	ldr	r1, [pc, #252]	@ (801e054 <lfs_fs_deorphan+0x1f4>)
 801df58:	4842      	ldr	r0, [pc, #264]	@ (801e064 <lfs_fs_deorphan+0x204>)
 801df5a:	f00b ff73 	bl	8029e44 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801df5e:	a906      	add	r1, sp, #24
 801df60:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801df64:	f7fc ff32 	bl	801adcc <lfs_gstate_hasmovehere>
 801df68:	b9a0      	cbnz	r0, 801df94 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801df6a:	2300      	movs	r3, #0
 801df6c:	931e      	str	r3, [sp, #120]	@ 0x78
 801df6e:	2300      	movs	r3, #0
 801df70:	931f      	str	r3, [sp, #124]	@ 0x7c
 801df72:	4b3d      	ldr	r3, [pc, #244]	@ (801e068 <lfs_fs_deorphan+0x208>)
 801df74:	9320      	str	r3, [sp, #128]	@ 0x80
 801df76:	ab04      	add	r3, sp, #16
 801df78:	9321      	str	r3, [sp, #132]	@ 0x84
 801df7a:	2302      	movs	r3, #2
 801df7c:	aa1e      	add	r2, sp, #120	@ 0x78
 801df7e:	a906      	add	r1, sp, #24
 801df80:	4628      	mov	r0, r5
 801df82:	f7ff fd71 	bl	801da68 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801df86:	1e04      	subs	r4, r0, #0
 801df88:	db5e      	blt.n	801e048 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801df8a:	2c03      	cmp	r4, #3
 801df8c:	d141      	bne.n	801e012 <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801df8e:	f04f 0801 	mov.w	r8, #1
                        continue;
 801df92:	e03e      	b.n	801e012 <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801df94:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801df96:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801df9a:	4b2d      	ldr	r3, [pc, #180]	@ (801e050 <lfs_fs_deorphan+0x1f0>)
 801df9c:	9302      	str	r3, [sp, #8]
 801df9e:	9401      	str	r4, [sp, #4]
 801dfa0:	9b07      	ldr	r3, [sp, #28]
 801dfa2:	9300      	str	r3, [sp, #0]
 801dfa4:	9b06      	ldr	r3, [sp, #24]
 801dfa6:	f241 327c 	movw	r2, #4988	@ 0x137c
 801dfaa:	492a      	ldr	r1, [pc, #168]	@ (801e054 <lfs_fs_deorphan+0x1f4>)
 801dfac:	482f      	ldr	r0, [pc, #188]	@ (801e06c <lfs_fs_deorphan+0x20c>)
 801dfae:	f00b ff49 	bl	8029e44 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801dfb2:	2200      	movs	r2, #0
 801dfb4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801dfb8:	4628      	mov	r0, r5
 801dfba:	f7fc ffed 	bl	801af98 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801dfbe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801dfc2:	429c      	cmp	r4, r3
 801dfc4:	d005      	beq.n	801dfd2 <lfs_fs_deorphan+0x172>
 801dfc6:	02a3      	lsls	r3, r4, #10
 801dfc8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801dfcc:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801dfd0:	e7cc      	b.n	801df6c <lfs_fs_deorphan+0x10c>
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	e7ca      	b.n	801df6c <lfs_fs_deorphan+0x10c>
                        return state;
 801dfd6:	4604      	mov	r4, r0
 801dfd8:	e036      	b.n	801e048 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801dfda:	2301      	movs	r3, #1
 801dfdc:	e000      	b.n	801dfe0 <lfs_fs_deorphan+0x180>
 801dfde:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801dfe0:	bb0b      	cbnz	r3, 801e026 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801dfe2:	aa0c      	add	r2, sp, #48	@ 0x30
 801dfe4:	a90e      	add	r1, sp, #56	@ 0x38
 801dfe6:	4628      	mov	r0, r5
 801dfe8:	f7fe fa12 	bl	801c410 <lfs_dir_fetch>
            if (err) {
 801dfec:	4604      	mov	r4, r0
 801dfee:	bb58      	cbnz	r0, 801e048 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801dff0:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	f43f af4e 	beq.w	801de96 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801dffa:	f10d 0c18 	add.w	ip, sp, #24
 801dffe:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801e002:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e006:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e00a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801e00e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e018:	d0e1      	beq.n	801dfde <lfs_fs_deorphan+0x17e>
 801e01a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e01c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e020:	d0db      	beq.n	801dfda <lfs_fs_deorphan+0x17a>
 801e022:	2300      	movs	r3, #0
 801e024:	e7dc      	b.n	801dfe0 <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801e026:	f1b8 0f00 	cmp.w	r8, #0
 801e02a:	d101      	bne.n	801e030 <lfs_fs_deorphan+0x1d0>
 801e02c:	3601      	adds	r6, #1
 801e02e:	e723      	b.n	801de78 <lfs_fs_deorphan+0x18>
 801e030:	2600      	movs	r6, #0
 801e032:	e721      	b.n	801de78 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801e034:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801e038:	4249      	negs	r1, r1
 801e03a:	b249      	sxtb	r1, r1
 801e03c:	4628      	mov	r0, r5
 801e03e:	f7fc fffb 	bl	801b038 <lfs_fs_preporphans>
 801e042:	4604      	mov	r4, r0
 801e044:	e000      	b.n	801e048 <lfs_fs_deorphan+0x1e8>
        return 0;
 801e046:	2400      	movs	r4, #0
}
 801e048:	4620      	mov	r0, r4
 801e04a:	b024      	add	sp, #144	@ 0x90
 801e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e050:	08036a40 	.word	0x08036a40
 801e054:	08038e6c 	.word	0x08038e6c
 801e058:	08039340 	.word	0x08039340
 801e05c:	000ffc08 	.word	0x000ffc08
 801e060:	7ffffc00 	.word	0x7ffffc00
 801e064:	080392b4 	.word	0x080392b4
 801e068:	600ffc08 	.word	0x600ffc08
 801e06c:	080392f8 	.word	0x080392f8

0801e070 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801e070:	b510      	push	{r4, lr}
 801e072:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801e074:	f7ff fcf8 	bl	801da68 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801e078:	2800      	cmp	r0, #0
 801e07a:	db00      	blt.n	801e07e <lfs_dir_commit+0xe>
    if (orphans) {
 801e07c:	b900      	cbnz	r0, 801e080 <lfs_dir_commit+0x10>
}
 801e07e:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801e080:	2100      	movs	r1, #0
 801e082:	4620      	mov	r0, r4
 801e084:	f7ff feec 	bl	801de60 <lfs_fs_deorphan>
        if (err) {
 801e088:	e7f9      	b.n	801e07e <lfs_dir_commit+0xe>
	...

0801e08c <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801e08c:	b530      	push	{r4, r5, lr}
 801e08e:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801e090:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801e092:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801e096:	d103      	bne.n	801e0a0 <lfs_fs_desuperblock+0x14>
        return 0;
 801e098:	2500      	movs	r5, #0
}
 801e09a:	4628      	mov	r0, r5
 801e09c:	b013      	add	sp, #76	@ 0x4c
 801e09e:	bd30      	pop	{r4, r5, pc}
 801e0a0:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801e0a2:	4b1a      	ldr	r3, [pc, #104]	@ (801e10c <lfs_fs_desuperblock+0x80>)
 801e0a4:	9301      	str	r3, [sp, #4]
 801e0a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e0a8:	9300      	str	r3, [sp, #0]
 801e0aa:	6a03      	ldr	r3, [r0, #32]
 801e0ac:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801e0b0:	4917      	ldr	r1, [pc, #92]	@ (801e110 <lfs_fs_desuperblock+0x84>)
 801e0b2:	4818      	ldr	r0, [pc, #96]	@ (801e114 <lfs_fs_desuperblock+0x88>)
 801e0b4:	f00b fec6 	bl	8029e44 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801e0b8:	f104 0220 	add.w	r2, r4, #32
 801e0bc:	a908      	add	r1, sp, #32
 801e0be:	4620      	mov	r0, r4
 801e0c0:	f7fe f9a6 	bl	801c410 <lfs_dir_fetch>
    if (err) {
 801e0c4:	4605      	mov	r5, r0
 801e0c6:	2800      	cmp	r0, #0
 801e0c8:	d1e7      	bne.n	801e09a <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	f7fc feb6 	bl	801ae3c <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801e0d0:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801e0d2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801e0d6:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801e0d8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801e0da:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801e0dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801e0de:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801e0e0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801e0e2:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801e0e4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801e0e6:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e0e8:	4b0b      	ldr	r3, [pc, #44]	@ (801e118 <lfs_fs_desuperblock+0x8c>)
 801e0ea:	9310      	str	r3, [sp, #64]	@ 0x40
 801e0ec:	ab02      	add	r3, sp, #8
 801e0ee:	9311      	str	r3, [sp, #68]	@ 0x44
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	aa10      	add	r2, sp, #64	@ 0x40
 801e0f4:	a908      	add	r1, sp, #32
 801e0f6:	4620      	mov	r0, r4
 801e0f8:	f7ff ffba 	bl	801e070 <lfs_dir_commit>
    if (err) {
 801e0fc:	4605      	mov	r5, r0
 801e0fe:	2800      	cmp	r0, #0
 801e100:	d1cb      	bne.n	801e09a <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801e102:	2100      	movs	r1, #0
 801e104:	4620      	mov	r0, r4
 801e106:	f7fc ff40 	bl	801af8a <lfs_fs_prepsuperblock>
    return 0;
 801e10a:	e7c6      	b.n	801e09a <lfs_fs_desuperblock+0xe>
 801e10c:	08036a40 	.word	0x08036a40
 801e110:	08038e6c 	.word	0x08038e6c
 801e114:	08039370 	.word	0x08039370
 801e118:	20100018 	.word	0x20100018

0801e11c <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801e11c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801e11e:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801e120:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801e124:	d101      	bne.n	801e12a <lfs_fs_demove+0xe>
        return 0;
 801e126:	2000      	movs	r0, #0
}
 801e128:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801e12a:	b530      	push	{r4, r5, lr}
 801e12c:	b08f      	sub	sp, #60	@ 0x3c
 801e12e:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801e130:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801e134:	4a1d      	ldr	r2, [pc, #116]	@ (801e1ac <lfs_fs_demove+0x90>)
 801e136:	9202      	str	r2, [sp, #8]
 801e138:	9301      	str	r3, [sp, #4]
 801e13a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e13c:	9300      	str	r3, [sp, #0]
 801e13e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e140:	f241 3224 	movw	r2, #4900	@ 0x1324
 801e144:	491a      	ldr	r1, [pc, #104]	@ (801e1b0 <lfs_fs_demove+0x94>)
 801e146:	481b      	ldr	r0, [pc, #108]	@ (801e1b4 <lfs_fs_demove+0x98>)
 801e148:	f00b fe7c 	bl	8029e44 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e14c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801e14e:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e152:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801e156:	4293      	cmp	r3, r2
 801e158:	d108      	bne.n	801e16c <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801e15a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801e15e:	a904      	add	r1, sp, #16
 801e160:	4620      	mov	r0, r4
 801e162:	f7fe f955 	bl	801c410 <lfs_dir_fetch>
    if (err) {
 801e166:	b140      	cbz	r0, 801e17a <lfs_fs_demove+0x5e>
}
 801e168:	b00f      	add	sp, #60	@ 0x3c
 801e16a:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801e16c:	4b12      	ldr	r3, [pc, #72]	@ (801e1b8 <lfs_fs_demove+0x9c>)
 801e16e:	4a13      	ldr	r2, [pc, #76]	@ (801e1bc <lfs_fs_demove+0xa0>)
 801e170:	f241 312b 	movw	r1, #4907	@ 0x132b
 801e174:	480e      	ldr	r0, [pc, #56]	@ (801e1b0 <lfs_fs_demove+0x94>)
 801e176:	f00b fe31 	bl	8029ddc <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801e17a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801e17c:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e180:	2200      	movs	r2, #0
 801e182:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e186:	4620      	mov	r0, r4
 801e188:	f7fc ff06 	bl	801af98 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801e18c:	02ab      	lsls	r3, r5, #10
 801e18e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e192:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e196:	930c      	str	r3, [sp, #48]	@ 0x30
 801e198:	2300      	movs	r3, #0
 801e19a:	930d      	str	r3, [sp, #52]	@ 0x34
 801e19c:	2301      	movs	r3, #1
 801e19e:	aa0c      	add	r2, sp, #48	@ 0x30
 801e1a0:	a904      	add	r1, sp, #16
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f7ff ff64 	bl	801e070 <lfs_dir_commit>
    if (err) {
 801e1a8:	e7de      	b.n	801e168 <lfs_fs_demove+0x4c>
 801e1aa:	bf00      	nop
 801e1ac:	08036a40 	.word	0x08036a40
 801e1b0:	08038e6c 	.word	0x08038e6c
 801e1b4:	080393a4 	.word	0x080393a4
 801e1b8:	080393d8 	.word	0x080393d8
 801e1bc:	08039b2c 	.word	0x08039b2c

0801e1c0 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801e1c0:	b510      	push	{r4, lr}
 801e1c2:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801e1c4:	f7ff ff62 	bl	801e08c <lfs_fs_desuperblock>
    if (err) {
 801e1c8:	4603      	mov	r3, r0
 801e1ca:	b108      	cbz	r0, 801e1d0 <lfs_fs_forceconsistency+0x10>
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801e1d0:	4620      	mov	r0, r4
 801e1d2:	f7ff ffa3 	bl	801e11c <lfs_fs_demove>
    if (err) {
 801e1d6:	4603      	mov	r3, r0
 801e1d8:	2800      	cmp	r0, #0
 801e1da:	d1f7      	bne.n	801e1cc <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801e1dc:	2101      	movs	r1, #1
 801e1de:	4620      	mov	r0, r4
 801e1e0:	f7ff fe3e 	bl	801de60 <lfs_fs_deorphan>
 801e1e4:	4603      	mov	r3, r0
    if (err) {
 801e1e6:	e7f1      	b.n	801e1cc <lfs_fs_forceconsistency+0xc>

0801e1e8 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801e1e8:	b570      	push	{r4, r5, r6, lr}
 801e1ea:	b082      	sub	sp, #8
 801e1ec:	4605      	mov	r5, r0
 801e1ee:	460e      	mov	r6, r1
 801e1f0:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801e1f2:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801e1f6:	4621      	mov	r1, r4
 801e1f8:	f7fd f92a 	bl	801b450 <lfs_dir_getgstate>
    if (err) {
 801e1fc:	b108      	cbz	r0, 801e202 <lfs_dir_drop+0x1a>
}
 801e1fe:	b002      	add	sp, #8
 801e200:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801e202:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801e206:	7de2      	ldrb	r2, [r4, #23]
 801e208:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801e20c:	4b05      	ldr	r3, [pc, #20]	@ (801e224 <lfs_dir_drop+0x3c>)
 801e20e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801e212:	9300      	str	r3, [sp, #0]
 801e214:	9101      	str	r1, [sp, #4]
 801e216:	2301      	movs	r3, #1
 801e218:	466a      	mov	r2, sp
 801e21a:	4631      	mov	r1, r6
 801e21c:	4628      	mov	r0, r5
 801e21e:	f7ff ff27 	bl	801e070 <lfs_dir_commit>
    if (err) {
 801e222:	e7ec      	b.n	801e1fe <lfs_dir_drop+0x16>
 801e224:	000ffc08 	.word	0x000ffc08

0801e228 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801e228:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801e22a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801e22e:	d001      	beq.n	801e234 <lfs_file_sync_+0xc>
        return 0;
 801e230:	2000      	movs	r0, #0
}
 801e232:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801e234:	b530      	push	{r4, r5, lr}
 801e236:	b087      	sub	sp, #28
 801e238:	4605      	mov	r5, r0
 801e23a:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801e23c:	f7fe fcae 	bl	801cb9c <lfs_file_flush>
    if (err) {
 801e240:	2800      	cmp	r0, #0
 801e242:	d136      	bne.n	801e2b2 <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801e244:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e246:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801e24a:	d036      	beq.n	801e2ba <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e24c:	68a2      	ldr	r2, [r4, #8]
 801e24e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e252:	d036      	beq.n	801e2c2 <lfs_file_sync_+0x9a>
 801e254:	68e2      	ldr	r2, [r4, #12]
 801e256:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801e25a:	d030      	beq.n	801e2be <lfs_file_sync_+0x96>
 801e25c:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801e25e:	f012 0f01 	tst.w	r2, #1
 801e262:	d12a      	bne.n	801e2ba <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801e264:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e268:	d02d      	beq.n	801e2c6 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801e26a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e26c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801e270:	d033      	beq.n	801e2da <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801e272:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801e274:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801e276:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801e27a:	88a3      	ldrh	r3, [r4, #4]
 801e27c:	029b      	lsls	r3, r3, #10
 801e27e:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801e282:	4302      	orrs	r2, r0
 801e284:	9202      	str	r2, [sp, #8]
 801e286:	9103      	str	r1, [sp, #12]
 801e288:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801e28a:	6891      	ldr	r1, [r2, #8]
 801e28c:	430b      	orrs	r3, r1
 801e28e:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801e292:	9304      	str	r3, [sp, #16]
 801e294:	6853      	ldr	r3, [r2, #4]
 801e296:	9305      	str	r3, [sp, #20]
 801e298:	2302      	movs	r3, #2
 801e29a:	aa02      	add	r2, sp, #8
 801e29c:	f104 0108 	add.w	r1, r4, #8
 801e2a0:	4628      	mov	r0, r5
 801e2a2:	f7ff fee5 	bl	801e070 <lfs_dir_commit>
        if (err) {
 801e2a6:	bb20      	cbnz	r0, 801e2f2 <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801e2a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e2aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e2ae:	6323      	str	r3, [r4, #48]	@ 0x30
 801e2b0:	e003      	b.n	801e2ba <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801e2b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e2b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e2b8:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801e2ba:	b007      	add	sp, #28
 801e2bc:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e2be:	2201      	movs	r2, #1
 801e2c0:	e7cd      	b.n	801e25e <lfs_file_sync_+0x36>
 801e2c2:	2201      	movs	r2, #1
 801e2c4:	e7cb      	b.n	801e25e <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	462a      	mov	r2, r5
 801e2ca:	f105 0110 	add.w	r1, r5, #16
 801e2ce:	4628      	mov	r0, r5
 801e2d0:	f7fd fc82 	bl	801bbd8 <lfs_bd_sync>
            if (err) {
 801e2d4:	2800      	cmp	r0, #0
 801e2d6:	d0c8      	beq.n	801e26a <lfs_file_sync_+0x42>
 801e2d8:	e7ef      	b.n	801e2ba <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801e2da:	466b      	mov	r3, sp
 801e2dc:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801e2e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e2e4:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801e2e8:	2008      	movs	r0, #8
            buffer = &ctz;
 801e2ea:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801e2ec:	f240 2202 	movw	r2, #514	@ 0x202
 801e2f0:	e7c3      	b.n	801e27a <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801e2f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e2f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e2f8:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801e2fa:	e7de      	b.n	801e2ba <lfs_file_sync_+0x92>

0801e2fc <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801e2fc:	b510      	push	{r4, lr}
 801e2fe:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801e300:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801e302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e304:	b13b      	cbz	r3, 801e316 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801e306:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e30a:	b143      	cbz	r3, 801e31e <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801e30c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e310:	b14b      	cbz	r3, 801e326 <lfs_deinit+0x2a>
}
 801e312:	2000      	movs	r0, #0
 801e314:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801e316:	68c0      	ldr	r0, [r0, #12]
 801e318:	f7fc fb00 	bl	801a91c <vPortFree>
#else
    (void)p;
#endif
}
 801e31c:	e7f3      	b.n	801e306 <lfs_deinit+0xa>
    free(p);
 801e31e:	69e0      	ldr	r0, [r4, #28]
 801e320:	f7fc fafc 	bl	801a91c <vPortFree>
}
 801e324:	e7f2      	b.n	801e30c <lfs_deinit+0x10>
    free(p);
 801e326:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e328:	f7fc faf8 	bl	801a91c <vPortFree>
}
 801e32c:	e7f1      	b.n	801e312 <lfs_deinit+0x16>
	...

0801e330 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801e330:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801e332:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801e334:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801e336:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e338:	69cb      	ldr	r3, [r1, #28]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	f000 80b1 	beq.w	801e4a2 <lfs_init+0x172>
 801e340:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e342:	6a0a      	ldr	r2, [r1, #32]
 801e344:	2a00      	cmp	r2, #0
 801e346:	f000 80b3 	beq.w	801e4b0 <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e34a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801e34c:	2800      	cmp	r0, #0
 801e34e:	f000 80b6 	beq.w	801e4be <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e352:	fbb0 fcf3 	udiv	ip, r0, r3
 801e356:	fb03 031c 	mls	r3, r3, ip, r0
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	f040 80b6 	bne.w	801e4cc <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e360:	fbb0 f3f2 	udiv	r3, r0, r2
 801e364:	fb02 0313 	mls	r3, r2, r3, r0
 801e368:	2b00      	cmp	r3, #0
 801e36a:	f040 80b6 	bne.w	801e4da <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e36e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801e370:	fbb2 f3f0 	udiv	r3, r2, r0
 801e374:	fb00 2313 	mls	r3, r0, r3, r2
 801e378:	2b00      	cmp	r3, #0
 801e37a:	f040 80b5 	bne.w	801e4e8 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e37e:	2a7f      	cmp	r2, #127	@ 0x7f
 801e380:	f240 80b9 	bls.w	801e4f6 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e384:	f1a2 0c08 	sub.w	ip, r2, #8
 801e388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e38c:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801e390:	3b01      	subs	r3, #1
 801e392:	fab3 f383 	clz	r3, r3
 801e396:	f1c3 0320 	rsb	r3, r3, #32
 801e39a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801e39e:	f0c0 80b1 	bcc.w	801e504 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e3a2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	f000 80b4 	beq.w	801e512 <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e3aa:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801e3ac:	b11b      	cbz	r3, 801e3b6 <lfs_init+0x86>
 801e3ae:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801e3b2:	f0c0 80b5 	bcc.w	801e520 <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e3ba:	d002      	beq.n	801e3c2 <lfs_init+0x92>
 801e3bc:	429a      	cmp	r2, r3
 801e3be:	f0c0 80b6 	bcc.w	801e52e <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801e3c2:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	f000 80b9 	beq.w	801e53c <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801e3ca:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801e3cc:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e3ce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	f000 80bf 	beq.w	801e554 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801e3d6:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801e3d8:	4621      	mov	r1, r4
 801e3da:	4620      	mov	r0, r4
 801e3dc:	f7fc fe5c 	bl	801b098 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801e3e0:	f104 0110 	add.w	r1, r4, #16
 801e3e4:	4620      	mov	r0, r4
 801e3e6:	f7fc fe57 	bl	801b098 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e3ea:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e3ec:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801e3ee:	2800      	cmp	r0, #0
 801e3f0:	f000 80b8 	beq.w	801e564 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801e3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	f000 80bb 	beq.w	801e572 <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801e3fc:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e3fe:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e400:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801e402:	2bff      	cmp	r3, #255	@ 0xff
 801e404:	f200 80bc 	bhi.w	801e580 <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801e408:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801e40a:	b90b      	cbnz	r3, 801e410 <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801e40c:	23ff      	movs	r3, #255	@ 0xff
 801e40e:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e410:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801e412:	2b00      	cmp	r3, #0
 801e414:	f2c0 80bb 	blt.w	801e58e <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801e418:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801e41a:	b913      	cbnz	r3, 801e422 <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801e41c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e420:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e422:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801e424:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801e428:	428b      	cmp	r3, r1
 801e42a:	f200 80b7 	bhi.w	801e59c <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801e42e:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801e430:	b913      	cbnz	r3, 801e438 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801e432:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e436:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e438:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801e43a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801e43c:	4288      	cmp	r0, r1
 801e43e:	f200 80b4 	bhi.w	801e5aa <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e442:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801e444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e448:	d003      	beq.n	801e452 <lfs_init+0x122>
 801e44a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801e44c:	42ab      	cmp	r3, r5
 801e44e:	f200 80b3 	bhi.w	801e5b8 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e456:	d003      	beq.n	801e460 <lfs_init+0x130>
 801e458:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801e45a:	42ab      	cmp	r3, r5
 801e45c:	f200 80b3 	bhi.w	801e5c6 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e464:	d006      	beq.n	801e474 <lfs_init+0x144>
 801e466:	2800      	cmp	r0, #0
 801e468:	f000 80b4 	beq.w	801e5d4 <lfs_init+0x2a4>
 801e46c:	08c1      	lsrs	r1, r0, #3
 801e46e:	428b      	cmp	r3, r1
 801e470:	f200 80b2 	bhi.w	801e5d8 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801e474:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801e476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e47a:	f000 80b4 	beq.w	801e5e6 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801e47e:	2b00      	cmp	r3, #0
 801e480:	f040 80b3 	bne.w	801e5ea <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801e484:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801e486:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801e488:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	f000 80be 	beq.w	801e60c <lfs_init+0x2dc>
 801e490:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801e492:	4283      	cmp	r3, r0
 801e494:	bf28      	it	cs
 801e496:	4603      	movcs	r3, r0
 801e498:	428b      	cmp	r3, r1
 801e49a:	bf28      	it	cs
 801e49c:	460b      	movcs	r3, r1
 801e49e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801e4a0:	e0a3      	b.n	801e5ea <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801e4a2:	4b5c      	ldr	r3, [pc, #368]	@ (801e614 <lfs_init+0x2e4>)
 801e4a4:	4a5c      	ldr	r2, [pc, #368]	@ (801e618 <lfs_init+0x2e8>)
 801e4a6:	f241 0152 	movw	r1, #4178	@ 0x1052
 801e4aa:	485c      	ldr	r0, [pc, #368]	@ (801e61c <lfs_init+0x2ec>)
 801e4ac:	f00b fc96 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801e4b0:	4b5b      	ldr	r3, [pc, #364]	@ (801e620 <lfs_init+0x2f0>)
 801e4b2:	4a59      	ldr	r2, [pc, #356]	@ (801e618 <lfs_init+0x2e8>)
 801e4b4:	f241 0153 	movw	r1, #4179	@ 0x1053
 801e4b8:	4858      	ldr	r0, [pc, #352]	@ (801e61c <lfs_init+0x2ec>)
 801e4ba:	f00b fc8f 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801e4be:	4b59      	ldr	r3, [pc, #356]	@ (801e624 <lfs_init+0x2f4>)
 801e4c0:	4a55      	ldr	r2, [pc, #340]	@ (801e618 <lfs_init+0x2e8>)
 801e4c2:	f241 0154 	movw	r1, #4180	@ 0x1054
 801e4c6:	4855      	ldr	r0, [pc, #340]	@ (801e61c <lfs_init+0x2ec>)
 801e4c8:	f00b fc88 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801e4cc:	4b56      	ldr	r3, [pc, #344]	@ (801e628 <lfs_init+0x2f8>)
 801e4ce:	4a52      	ldr	r2, [pc, #328]	@ (801e618 <lfs_init+0x2e8>)
 801e4d0:	f241 0158 	movw	r1, #4184	@ 0x1058
 801e4d4:	4851      	ldr	r0, [pc, #324]	@ (801e61c <lfs_init+0x2ec>)
 801e4d6:	f00b fc81 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801e4da:	4b54      	ldr	r3, [pc, #336]	@ (801e62c <lfs_init+0x2fc>)
 801e4dc:	4a4e      	ldr	r2, [pc, #312]	@ (801e618 <lfs_init+0x2e8>)
 801e4de:	f241 0159 	movw	r1, #4185	@ 0x1059
 801e4e2:	484e      	ldr	r0, [pc, #312]	@ (801e61c <lfs_init+0x2ec>)
 801e4e4:	f00b fc7a 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801e4e8:	4b51      	ldr	r3, [pc, #324]	@ (801e630 <lfs_init+0x300>)
 801e4ea:	4a4b      	ldr	r2, [pc, #300]	@ (801e618 <lfs_init+0x2e8>)
 801e4ec:	f241 015a 	movw	r1, #4186	@ 0x105a
 801e4f0:	484a      	ldr	r0, [pc, #296]	@ (801e61c <lfs_init+0x2ec>)
 801e4f2:	f00b fc73 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801e4f6:	4b4f      	ldr	r3, [pc, #316]	@ (801e634 <lfs_init+0x304>)
 801e4f8:	4a47      	ldr	r2, [pc, #284]	@ (801e618 <lfs_init+0x2e8>)
 801e4fa:	f241 015d 	movw	r1, #4189	@ 0x105d
 801e4fe:	4847      	ldr	r0, [pc, #284]	@ (801e61c <lfs_init+0x2ec>)
 801e500:	f00b fc6c 	bl	8029ddc <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801e504:	4b4c      	ldr	r3, [pc, #304]	@ (801e638 <lfs_init+0x308>)
 801e506:	4a44      	ldr	r2, [pc, #272]	@ (801e618 <lfs_init+0x2e8>)
 801e508:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801e50c:	4843      	ldr	r0, [pc, #268]	@ (801e61c <lfs_init+0x2ec>)
 801e50e:	f00b fc65 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801e512:	4b4a      	ldr	r3, [pc, #296]	@ (801e63c <lfs_init+0x30c>)
 801e514:	4a40      	ldr	r2, [pc, #256]	@ (801e618 <lfs_init+0x2e8>)
 801e516:	f241 0169 	movw	r1, #4201	@ 0x1069
 801e51a:	4840      	ldr	r0, [pc, #256]	@ (801e61c <lfs_init+0x2ec>)
 801e51c:	f00b fc5e 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801e520:	4b47      	ldr	r3, [pc, #284]	@ (801e640 <lfs_init+0x310>)
 801e522:	4a3d      	ldr	r2, [pc, #244]	@ (801e618 <lfs_init+0x2e8>)
 801e524:	f241 016f 	movw	r1, #4207	@ 0x106f
 801e528:	483c      	ldr	r0, [pc, #240]	@ (801e61c <lfs_init+0x2ec>)
 801e52a:	f00b fc57 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801e52e:	4b45      	ldr	r3, [pc, #276]	@ (801e644 <lfs_init+0x314>)
 801e530:	4a39      	ldr	r2, [pc, #228]	@ (801e618 <lfs_init+0x2e8>)
 801e532:	f241 0171 	movw	r1, #4209	@ 0x1071
 801e536:	4839      	ldr	r0, [pc, #228]	@ (801e61c <lfs_init+0x2ec>)
 801e538:	f00b fc50 	bl	8029ddc <__assert_func>
    return malloc(size);
 801e53c:	f7fc f96c 	bl	801a818 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e540:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801e542:	2800      	cmp	r0, #0
 801e544:	f47f af42 	bne.w	801e3cc <lfs_init+0x9c>
    lfs_deinit(lfs);
 801e548:	4620      	mov	r0, r4
 801e54a:	f7ff fed7 	bl	801e2fc <lfs_deinit>
    return err;
 801e54e:	f06f 000b 	mvn.w	r0, #11
 801e552:	e05a      	b.n	801e60a <lfs_init+0x2da>
 801e554:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801e556:	f7fc f95f 	bl	801a818 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801e55a:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801e55c:	2800      	cmp	r0, #0
 801e55e:	f47f af3b 	bne.w	801e3d8 <lfs_init+0xa8>
 801e562:	e7f1      	b.n	801e548 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801e564:	4b38      	ldr	r3, [pc, #224]	@ (801e648 <lfs_init+0x318>)
 801e566:	4a2c      	ldr	r2, [pc, #176]	@ (801e618 <lfs_init+0x2e8>)
 801e568:	f241 0190 	movw	r1, #4240	@ 0x1090
 801e56c:	482b      	ldr	r0, [pc, #172]	@ (801e61c <lfs_init+0x2ec>)
 801e56e:	f00b fc35 	bl	8029ddc <__assert_func>
 801e572:	f7fc f951 	bl	801a818 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801e576:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801e578:	2800      	cmp	r0, #0
 801e57a:	f47f af40 	bne.w	801e3fe <lfs_init+0xce>
 801e57e:	e7e3      	b.n	801e548 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801e580:	4b32      	ldr	r3, [pc, #200]	@ (801e64c <lfs_init+0x31c>)
 801e582:	4a25      	ldr	r2, [pc, #148]	@ (801e618 <lfs_init+0x2e8>)
 801e584:	f241 019c 	movw	r1, #4252	@ 0x109c
 801e588:	4824      	ldr	r0, [pc, #144]	@ (801e61c <lfs_init+0x2ec>)
 801e58a:	f00b fc27 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801e58e:	4b30      	ldr	r3, [pc, #192]	@ (801e650 <lfs_init+0x320>)
 801e590:	4a21      	ldr	r2, [pc, #132]	@ (801e618 <lfs_init+0x2e8>)
 801e592:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801e596:	4821      	ldr	r0, [pc, #132]	@ (801e61c <lfs_init+0x2ec>)
 801e598:	f00b fc20 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801e59c:	4b2d      	ldr	r3, [pc, #180]	@ (801e654 <lfs_init+0x324>)
 801e59e:	4a1e      	ldr	r2, [pc, #120]	@ (801e618 <lfs_init+0x2e8>)
 801e5a0:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801e5a4:	481d      	ldr	r0, [pc, #116]	@ (801e61c <lfs_init+0x2ec>)
 801e5a6:	f00b fc19 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801e5aa:	4b2b      	ldr	r3, [pc, #172]	@ (801e658 <lfs_init+0x328>)
 801e5ac:	4a1a      	ldr	r2, [pc, #104]	@ (801e618 <lfs_init+0x2e8>)
 801e5ae:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801e5b2:	481a      	ldr	r0, [pc, #104]	@ (801e61c <lfs_init+0x2ec>)
 801e5b4:	f00b fc12 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5b8:	4b28      	ldr	r3, [pc, #160]	@ (801e65c <lfs_init+0x32c>)
 801e5ba:	4a17      	ldr	r2, [pc, #92]	@ (801e618 <lfs_init+0x2e8>)
 801e5bc:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801e5c0:	4816      	ldr	r0, [pc, #88]	@ (801e61c <lfs_init+0x2ec>)
 801e5c2:	f00b fc0b 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5c6:	4b26      	ldr	r3, [pc, #152]	@ (801e660 <lfs_init+0x330>)
 801e5c8:	4a13      	ldr	r2, [pc, #76]	@ (801e618 <lfs_init+0x2e8>)
 801e5ca:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801e5ce:	4813      	ldr	r0, [pc, #76]	@ (801e61c <lfs_init+0x2ec>)
 801e5d0:	f00b fc04 	bl	8029ddc <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801e5d4:	08c9      	lsrs	r1, r1, #3
 801e5d6:	e74a      	b.n	801e46e <lfs_init+0x13e>
 801e5d8:	4b22      	ldr	r3, [pc, #136]	@ (801e664 <lfs_init+0x334>)
 801e5da:	4a0f      	ldr	r2, [pc, #60]	@ (801e618 <lfs_init+0x2e8>)
 801e5dc:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801e5e0:	480e      	ldr	r0, [pc, #56]	@ (801e61c <lfs_init+0x2ec>)
 801e5e2:	f00b fbfb 	bl	8029ddc <__assert_func>
        lfs->inline_max = 0;
 801e5e6:	2300      	movs	r3, #0
 801e5e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801e5ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e5ee:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801e5f0:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801e5f2:	2000      	movs	r0, #0
 801e5f4:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801e5f6:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801e5f8:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801e5fa:	6420      	str	r0, [r4, #64]	@ 0x40
 801e5fc:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801e5fe:	6320      	str	r0, [r4, #48]	@ 0x30
 801e600:	6360      	str	r0, [r4, #52]	@ 0x34
 801e602:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801e604:	64a0      	str	r0, [r4, #72]	@ 0x48
 801e606:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801e608:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801e60a:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801e60c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801e60e:	08db      	lsrs	r3, r3, #3
 801e610:	e73f      	b.n	801e492 <lfs_init+0x162>
 801e612:	bf00      	nop
 801e614:	0803940c 	.word	0x0803940c
 801e618:	08039bec 	.word	0x08039bec
 801e61c:	08038e6c 	.word	0x08038e6c
 801e620:	08039428 	.word	0x08039428
 801e624:	08039444 	.word	0x08039444
 801e628:	08039460 	.word	0x08039460
 801e62c:	08039490 	.word	0x08039490
 801e630:	080394c0 	.word	0x080394c0
 801e634:	080394f4 	.word	0x080394f4
 801e638:	08039510 	.word	0x08039510
 801e63c:	0803955c 	.word	0x0803955c
 801e640:	08039578 	.word	0x08039578
 801e644:	080395cc 	.word	0x080395cc
 801e648:	0803962c 	.word	0x0803962c
 801e64c:	0803964c 	.word	0x0803964c
 801e650:	08039668 	.word	0x08039668
 801e654:	0803968c 	.word	0x0803968c
 801e658:	080396a8 	.word	0x080396a8
 801e65c:	080396d8 	.word	0x080396d8
 801e660:	08039730 	.word	0x08039730
 801e664:	08039780 	.word	0x08039780

0801e668 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e668:	b570      	push	{r4, r5, r6, lr}
 801e66a:	b096      	sub	sp, #88	@ 0x58
 801e66c:	4604      	mov	r4, r0
 801e66e:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801e670:	f7ff fe5e 	bl	801e330 <lfs_init>
        if (err) {
 801e674:	4606      	mov	r6, r0
 801e676:	b9f0      	cbnz	r0, 801e6b6 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801e678:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801e67a:	b1fb      	cbz	r3, 801e6bc <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801e67c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e67e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e680:	2100      	movs	r1, #0
 801e682:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801e684:	f00e f8fc 	bl	802c880 <memset>
        lfs->lookahead.start = 0;
 801e688:	2200      	movs	r2, #0
 801e68a:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801e68c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e690:	00db      	lsls	r3, r3, #3
 801e692:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801e694:	428b      	cmp	r3, r1
 801e696:	bf28      	it	cs
 801e698:	460b      	movcs	r3, r1
 801e69a:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801e69c:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801e69e:	4620      	mov	r0, r4
 801e6a0:	f7fc fbda 	bl	801ae58 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801e6a4:	a906      	add	r1, sp, #24
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	f7fe f820 	bl	801c6ec <lfs_dir_alloc>
        if (err) {
 801e6ac:	4606      	mov	r6, r0
 801e6ae:	b160      	cbz	r0, 801e6ca <lfs_format_+0x62>
    lfs_deinit(lfs);
 801e6b0:	4620      	mov	r0, r4
 801e6b2:	f7ff fe23 	bl	801e2fc <lfs_deinit>
}
 801e6b6:	4630      	mov	r0, r6
 801e6b8:	b016      	add	sp, #88	@ 0x58
 801e6ba:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801e6bc:	4b20      	ldr	r3, [pc, #128]	@ (801e740 <lfs_format_+0xd8>)
 801e6be:	4a21      	ldr	r2, [pc, #132]	@ (801e744 <lfs_format_+0xdc>)
 801e6c0:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801e6c4:	4820      	ldr	r0, [pc, #128]	@ (801e748 <lfs_format_+0xe0>)
 801e6c6:	f00b fb89 	bl	8029ddc <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801e6ca:	4620      	mov	r0, r4
 801e6cc:	f7fc fbb6 	bl	801ae3c <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801e6d0:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801e6d2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801e6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801e6d6:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801e6d8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801e6da:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801e6dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801e6de:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801e6e0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801e6e2:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801e6e4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801e6e6:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801e6e8:	4b18      	ldr	r3, [pc, #96]	@ (801e74c <lfs_format_+0xe4>)
 801e6ea:	930e      	str	r3, [sp, #56]	@ 0x38
 801e6ec:	2300      	movs	r3, #0
 801e6ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e6f0:	4b17      	ldr	r3, [pc, #92]	@ (801e750 <lfs_format_+0xe8>)
 801e6f2:	9310      	str	r3, [sp, #64]	@ 0x40
 801e6f4:	4b17      	ldr	r3, [pc, #92]	@ (801e754 <lfs_format_+0xec>)
 801e6f6:	9311      	str	r3, [sp, #68]	@ 0x44
 801e6f8:	4b17      	ldr	r3, [pc, #92]	@ (801e758 <lfs_format_+0xf0>)
 801e6fa:	9312      	str	r3, [sp, #72]	@ 0x48
 801e6fc:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801e700:	2303      	movs	r3, #3
 801e702:	aa0e      	add	r2, sp, #56	@ 0x38
 801e704:	a906      	add	r1, sp, #24
 801e706:	4620      	mov	r0, r4
 801e708:	f7ff fcb2 	bl	801e070 <lfs_dir_commit>
        if (err) {
 801e70c:	4606      	mov	r6, r0
 801e70e:	2800      	cmp	r0, #0
 801e710:	d1ce      	bne.n	801e6b0 <lfs_format_+0x48>
        root.erased = false;
 801e712:	2200      	movs	r2, #0
 801e714:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801e718:	4613      	mov	r3, r2
 801e71a:	a906      	add	r1, sp, #24
 801e71c:	4620      	mov	r0, r4
 801e71e:	f7ff fca7 	bl	801e070 <lfs_dir_commit>
        if (err) {
 801e722:	4606      	mov	r6, r0
 801e724:	2800      	cmp	r0, #0
 801e726:	d1c3      	bne.n	801e6b0 <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801e728:	2300      	movs	r3, #0
 801e72a:	9314      	str	r3, [sp, #80]	@ 0x50
 801e72c:	2301      	movs	r3, #1
 801e72e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e730:	aa14      	add	r2, sp, #80	@ 0x50
 801e732:	a906      	add	r1, sp, #24
 801e734:	4620      	mov	r0, r4
 801e736:	f7fd fe6b 	bl	801c410 <lfs_dir_fetch>
 801e73a:	4606      	mov	r6, r0
        if (err) {
 801e73c:	e7b8      	b.n	801e6b0 <lfs_format_+0x48>
 801e73e:	bf00      	nop
 801e740:	08039810 	.word	0x08039810
 801e744:	08039bf8 	.word	0x08039bf8
 801e748:	08038e6c 	.word	0x08038e6c
 801e74c:	40100000 	.word	0x40100000
 801e750:	0ff00008 	.word	0x0ff00008
 801e754:	08039828 	.word	0x08039828
 801e758:	20100018 	.word	0x20100018

0801e75c <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801e75c:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801e75e:	f7ff fdcd 	bl	801e2fc <lfs_deinit>
}
 801e762:	bd08      	pop	{r3, pc}

0801e764 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e768:	b09b      	sub	sp, #108	@ 0x6c
 801e76a:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801e76c:	f7ff fde0 	bl	801e330 <lfs_init>
    if (err) {
 801e770:	9005      	str	r0, [sp, #20]
 801e772:	b9d8      	cbnz	r0, 801e7ac <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801e774:	2220      	movs	r2, #32
 801e776:	2100      	movs	r1, #0
 801e778:	a80f      	add	r0, sp, #60	@ 0x3c
 801e77a:	f00e f881 	bl	802c880 <memset>
 801e77e:	2501      	movs	r5, #1
 801e780:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801e782:	4aa1      	ldr	r2, [pc, #644]	@ (801ea08 <lfs_mount_+0x2a4>)
 801e784:	ab0d      	add	r3, sp, #52	@ 0x34
 801e786:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e78a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801e78e:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801e790:	e073      	b.n	801e87a <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801e792:	4b9e      	ldr	r3, [pc, #632]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e794:	f241 123d 	movw	r2, #4413	@ 0x113d
 801e798:	499d      	ldr	r1, [pc, #628]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e79a:	489e      	ldr	r0, [pc, #632]	@ (801ea14 <lfs_mount_+0x2b0>)
 801e79c:	f00b fb52 	bl	8029e44 <printf>
            err = LFS_ERR_CORRUPT;
 801e7a0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e7a4:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	f7ff ffd8 	bl	801e75c <lfs_unmount_>
}
 801e7ac:	9805      	ldr	r0, [sp, #20]
 801e7ae:	b01b      	add	sp, #108	@ 0x6c
 801e7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801e7b4:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801e7b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e7b8:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801e7ba:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801e7bc:	2500      	movs	r5, #0
 801e7be:	e075      	b.n	801e8ac <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801e7c0:	4620      	mov	r0, r4
 801e7c2:	f7fc fb44 	bl	801ae4e <lfs_fs_disk_version_minor>
 801e7c6:	4b91      	ldr	r3, [pc, #580]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e7c8:	9303      	str	r3, [sp, #12]
 801e7ca:	9002      	str	r0, [sp, #8]
 801e7cc:	f8cd 9004 	str.w	r9, [sp, #4]
 801e7d0:	b2bf      	uxth	r7, r7
 801e7d2:	9700      	str	r7, [sp, #0]
 801e7d4:	4643      	mov	r3, r8
 801e7d6:	f241 126b 	movw	r2, #4459	@ 0x116b
 801e7da:	498d      	ldr	r1, [pc, #564]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e7dc:	488e      	ldr	r0, [pc, #568]	@ (801ea18 <lfs_mount_+0x2b4>)
 801e7de:	f00b fb31 	bl	8029e44 <printf>
                err = LFS_ERR_INVAL;
 801e7e2:	f06f 0315 	mvn.w	r3, #21
 801e7e6:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e7e8:	e7dd      	b.n	801e7a6 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801e7ea:	4b88      	ldr	r3, [pc, #544]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e7ec:	9303      	str	r3, [sp, #12]
 801e7ee:	9002      	str	r0, [sp, #8]
 801e7f0:	f8cd 9004 	str.w	r9, [sp, #4]
 801e7f4:	b2bf      	uxth	r7, r7
 801e7f6:	9700      	str	r7, [sp, #0]
 801e7f8:	4643      	mov	r3, r8
 801e7fa:	f241 127a 	movw	r2, #4474	@ 0x117a
 801e7fe:	4984      	ldr	r1, [pc, #528]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e800:	4886      	ldr	r0, [pc, #536]	@ (801ea1c <lfs_mount_+0x2b8>)
 801e802:	f00b fb1f 	bl	8029e44 <printf>
                needssuperblock = true;
 801e806:	2301      	movs	r3, #1
 801e808:	9304      	str	r3, [sp, #16]
 801e80a:	e08f      	b.n	801e92c <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801e80c:	497f      	ldr	r1, [pc, #508]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e80e:	9101      	str	r1, [sp, #4]
 801e810:	9200      	str	r2, [sp, #0]
 801e812:	f241 1289 	movw	r2, #4489	@ 0x1189
 801e816:	497e      	ldr	r1, [pc, #504]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e818:	4881      	ldr	r0, [pc, #516]	@ (801ea20 <lfs_mount_+0x2bc>)
 801e81a:	f00b fb13 	bl	8029e44 <printf>
                    err = LFS_ERR_INVAL;
 801e81e:	f06f 0315 	mvn.w	r3, #21
 801e822:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e824:	e7bf      	b.n	801e7a6 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801e826:	4979      	ldr	r1, [pc, #484]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e828:	9101      	str	r1, [sp, #4]
 801e82a:	9200      	str	r2, [sp, #0]
 801e82c:	f241 1294 	movw	r2, #4500	@ 0x1194
 801e830:	4977      	ldr	r1, [pc, #476]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e832:	487c      	ldr	r0, [pc, #496]	@ (801ea24 <lfs_mount_+0x2c0>)
 801e834:	f00b fb06 	bl	8029e44 <printf>
                    err = LFS_ERR_INVAL;
 801e838:	f06f 0315 	mvn.w	r3, #21
 801e83c:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e83e:	e7b2      	b.n	801e7a6 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801e840:	4972      	ldr	r1, [pc, #456]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e842:	9101      	str	r1, [sp, #4]
 801e844:	9200      	str	r2, [sp, #0]
 801e846:	f241 129f 	movw	r2, #4511	@ 0x119f
 801e84a:	4971      	ldr	r1, [pc, #452]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e84c:	4876      	ldr	r0, [pc, #472]	@ (801ea28 <lfs_mount_+0x2c4>)
 801e84e:	f00b faf9 	bl	8029e44 <printf>
                    err = LFS_ERR_INVAL;
 801e852:	f06f 0315 	mvn.w	r3, #21
 801e856:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e858:	e7a5      	b.n	801e7a6 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801e85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e85c:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801e85e:	9b08      	ldr	r3, [sp, #32]
 801e860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801e862:	4293      	cmp	r3, r2
 801e864:	f040 8096 	bne.w	801e994 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e868:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e86c:	a90f      	add	r1, sp, #60	@ 0x3c
 801e86e:	4620      	mov	r0, r4
 801e870:	f7fc fdee 	bl	801b450 <lfs_dir_getgstate>
        if (err) {
 801e874:	2800      	cmp	r0, #0
 801e876:	f040 809e 	bne.w	801e9b6 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e87a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e87c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801e880:	f000 809d 	beq.w	801e9be <lfs_mount_+0x25a>
 801e884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e88a:	f000 8096 	beq.w	801e9ba <lfs_mount_+0x256>
 801e88e:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801e890:	f013 0301 	ands.w	r3, r3, #1
 801e894:	f040 8095 	bne.w	801e9c2 <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801e898:	a90d      	add	r1, sp, #52	@ 0x34
 801e89a:	a815      	add	r0, sp, #84	@ 0x54
 801e89c:	f7fc fa60 	bl	801ad60 <lfs_pair_issync>
 801e8a0:	9004      	str	r0, [sp, #16]
 801e8a2:	2800      	cmp	r0, #0
 801e8a4:	f47f af75 	bne.w	801e792 <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801e8a8:	42b5      	cmp	r5, r6
 801e8aa:	d083      	beq.n	801e7b4 <lfs_mount_+0x50>
        tortoise_i += 1;
 801e8ac:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801e8ae:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e8b0:	4b5e      	ldr	r3, [pc, #376]	@ (801ea2c <lfs_mount_+0x2c8>)
 801e8b2:	9318      	str	r3, [sp, #96]	@ 0x60
 801e8b4:	2308      	movs	r3, #8
 801e8b6:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801e8b8:	ab17      	add	r3, sp, #92	@ 0x5c
 801e8ba:	9303      	str	r3, [sp, #12]
 801e8bc:	4b5c      	ldr	r3, [pc, #368]	@ (801ea30 <lfs_mount_+0x2cc>)
 801e8be:	9302      	str	r3, [sp, #8]
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	9301      	str	r3, [sp, #4]
 801e8c4:	4b5b      	ldr	r3, [pc, #364]	@ (801ea34 <lfs_mount_+0x2d0>)
 801e8c6:	9300      	str	r3, [sp, #0]
 801e8c8:	4b5b      	ldr	r3, [pc, #364]	@ (801ea38 <lfs_mount_+0x2d4>)
 801e8ca:	aa15      	add	r2, sp, #84	@ 0x54
 801e8cc:	a90f      	add	r1, sp, #60	@ 0x3c
 801e8ce:	4620      	mov	r0, r4
 801e8d0:	f7fd fabe 	bl	801be50 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801e8d4:	2800      	cmp	r0, #0
 801e8d6:	db6c      	blt.n	801e9b2 <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801e8d8:	2800      	cmp	r0, #0
 801e8da:	d0c5      	beq.n	801e868 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801e8dc:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801e8e0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801e8e4:	d0c0      	beq.n	801e868 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801e8e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e8e8:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801e8ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8ec:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801e8ee:	ab07      	add	r3, sp, #28
 801e8f0:	9300      	str	r3, [sp, #0]
 801e8f2:	4b52      	ldr	r3, [pc, #328]	@ (801ea3c <lfs_mount_+0x2d8>)
 801e8f4:	4a50      	ldr	r2, [pc, #320]	@ (801ea38 <lfs_mount_+0x2d4>)
 801e8f6:	a90f      	add	r1, sp, #60	@ 0x3c
 801e8f8:	4620      	mov	r0, r4
 801e8fa:	f7fc fd9b 	bl	801b434 <lfs_dir_get>
            if (tag < 0) {
 801e8fe:	2800      	cmp	r0, #0
 801e900:	db55      	blt.n	801e9ae <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801e902:	9f07      	ldr	r7, [sp, #28]
 801e904:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801e908:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7fc fa99 	bl	801ae44 <lfs_fs_disk_version_major>
 801e912:	4681      	mov	r9, r0
 801e914:	4540      	cmp	r0, r8
 801e916:	f47f af53 	bne.w	801e7c0 <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801e91a:	4620      	mov	r0, r4
 801e91c:	f7fc fa97 	bl	801ae4e <lfs_fs_disk_version_minor>
 801e920:	4550      	cmp	r0, sl
 801e922:	f4ff af4d 	bcc.w	801e7c0 <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801e926:	4550      	cmp	r0, sl
 801e928:	f63f af5f 	bhi.w	801e7ea <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801e92c:	9904      	ldr	r1, [sp, #16]
 801e92e:	4620      	mov	r0, r4
 801e930:	f7fc fb2b 	bl	801af8a <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801e934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e936:	b123      	cbz	r3, 801e942 <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801e938:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801e93a:	4293      	cmp	r3, r2
 801e93c:	f63f af66 	bhi.w	801e80c <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801e940:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801e942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e944:	b123      	cbz	r3, 801e950 <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801e946:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801e948:	4293      	cmp	r3, r2
 801e94a:	f63f af6c 	bhi.w	801e826 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801e94e:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801e950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e952:	b14b      	cbz	r3, 801e968 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801e954:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e956:	4293      	cmp	r3, r2
 801e958:	f63f af72 	bhi.w	801e840 <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801e95c:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801e95e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801e960:	4293      	cmp	r3, r2
 801e962:	bf28      	it	cs
 801e964:	4613      	movcs	r3, r2
 801e966:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801e968:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e96a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801e96c:	2900      	cmp	r1, #0
 801e96e:	f43f af74 	beq.w	801e85a <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801e972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e974:	4299      	cmp	r1, r3
 801e976:	f43f af70 	beq.w	801e85a <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801e97a:	4a24      	ldr	r2, [pc, #144]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e97c:	9201      	str	r2, [sp, #4]
 801e97e:	9100      	str	r1, [sp, #0]
 801e980:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801e984:	4922      	ldr	r1, [pc, #136]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e986:	482e      	ldr	r0, [pc, #184]	@ (801ea40 <lfs_mount_+0x2dc>)
 801e988:	f00b fa5c 	bl	8029e44 <printf>
                err = LFS_ERR_INVAL;
 801e98c:	f06f 0315 	mvn.w	r3, #21
 801e990:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e992:	e708      	b.n	801e7a6 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801e994:	491d      	ldr	r1, [pc, #116]	@ (801ea0c <lfs_mount_+0x2a8>)
 801e996:	9101      	str	r1, [sp, #4]
 801e998:	9200      	str	r2, [sp, #0]
 801e99a:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801e99e:	491c      	ldr	r1, [pc, #112]	@ (801ea10 <lfs_mount_+0x2ac>)
 801e9a0:	4828      	ldr	r0, [pc, #160]	@ (801ea44 <lfs_mount_+0x2e0>)
 801e9a2:	f00b fa4f 	bl	8029e44 <printf>
                err = LFS_ERR_INVAL;
 801e9a6:	f06f 0315 	mvn.w	r3, #21
 801e9aa:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e9ac:	e6fb      	b.n	801e7a6 <lfs_mount_+0x42>
                err = tag;
 801e9ae:	9005      	str	r0, [sp, #20]
 801e9b0:	e6f9      	b.n	801e7a6 <lfs_mount_+0x42>
            err = tag;
 801e9b2:	9005      	str	r0, [sp, #20]
 801e9b4:	e6f7      	b.n	801e7a6 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e9b6:	9005      	str	r0, [sp, #20]
 801e9b8:	e6f5      	b.n	801e7a6 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e9ba:	2301      	movs	r3, #1
 801e9bc:	e768      	b.n	801e890 <lfs_mount_+0x12c>
 801e9be:	2301      	movs	r3, #1
 801e9c0:	e766      	b.n	801e890 <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801e9c2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801e9c6:	9a05      	ldr	r2, [sp, #20]
 801e9c8:	2a02      	cmp	r2, #2
 801e9ca:	dc05      	bgt.n	801e9d8 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801e9cc:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801e9d0:	b909      	cbnz	r1, 801e9d6 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801e9d2:	3201      	adds	r2, #1
 801e9d4:	e7f8      	b.n	801e9c8 <lfs_mount_+0x264>
            return false;
 801e9d6:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801e9d8:	b3b3      	cbz	r3, 801ea48 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801e9da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e9dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801e9e0:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801e9e2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801e9e6:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e9ea:	ca07      	ldmia	r2, {r0, r1, r2}
 801e9ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801e9f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801e9f2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801e9f4:	fbb3 f1f2 	udiv	r1, r3, r2
 801e9f8:	fb02 3311 	mls	r3, r2, r1, r3
 801e9fc:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801e9fe:	4620      	mov	r0, r4
 801ea00:	f7fc fa2d 	bl	801ae5e <lfs_alloc_drop>
    return 0;
 801ea04:	e6d2      	b.n	801e7ac <lfs_mount_+0x48>
 801ea06:	bf00      	nop
 801ea08:	08035bc4 	.word	0x08035bc4
 801ea0c:	08036a40 	.word	0x08036a40
 801ea10:	08038e6c 	.word	0x08038e6c
 801ea14:	0803902c 	.word	0x0803902c
 801ea18:	08039834 	.word	0x08039834
 801ea1c:	0803986c 	.word	0x0803986c
 801ea20:	080398ac 	.word	0x080398ac
 801ea24:	080398e0 	.word	0x080398e0
 801ea28:	08039914 	.word	0x08039914
 801ea2c:	08039828 	.word	0x08039828
 801ea30:	0801bc11 	.word	0x0801bc11
 801ea34:	0ff00008 	.word	0x0ff00008
 801ea38:	7ffffc00 	.word	0x7ffffc00
 801ea3c:	20100018 	.word	0x20100018
 801ea40:	08039948 	.word	0x08039948
 801ea44:	0803997c 	.word	0x0803997c
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801ea48:	4b06      	ldr	r3, [pc, #24]	@ (801ea64 <lfs_mount_+0x300>)
 801ea4a:	9302      	str	r3, [sp, #8]
 801ea4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801ea4e:	9301      	str	r3, [sp, #4]
 801ea50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ea52:	9300      	str	r3, [sp, #0]
 801ea54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ea56:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801ea5a:	4903      	ldr	r1, [pc, #12]	@ (801ea68 <lfs_mount_+0x304>)
 801ea5c:	4803      	ldr	r0, [pc, #12]	@ (801ea6c <lfs_mount_+0x308>)
 801ea5e:	f00b f9f1 	bl	8029e44 <printf>
 801ea62:	e7ba      	b.n	801e9da <lfs_mount_+0x276>
 801ea64:	08036a40 	.word	0x08036a40
 801ea68:	08038e6c 	.word	0x08038e6c
 801ea6c:	080399ac 	.word	0x080399ac

0801ea70 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801ea70:	b570      	push	{r4, r5, r6, lr}
 801ea72:	4606      	mov	r6, r0
 801ea74:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801ea76:	f7ff fbd7 	bl	801e228 <lfs_file_sync_>
 801ea7a:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801ea7c:	4621      	mov	r1, r4
 801ea7e:	4630      	mov	r0, r6
 801ea80:	f7fc f9cd 	bl	801ae1e <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801ea84:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ea86:	681b      	ldr	r3, [r3, #0]
 801ea88:	b10b      	cbz	r3, 801ea8e <lfs_file_close_+0x1e>
}
 801ea8a:	4628      	mov	r0, r5
 801ea8c:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801ea8e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801ea90:	f7fb ff44 	bl	801a91c <vPortFree>
    return err;
 801ea94:	e7f9      	b.n	801ea8a <lfs_file_close_+0x1a>
	...

0801ea98 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea9c:	b08d      	sub	sp, #52	@ 0x34
 801ea9e:	4682      	mov	sl, r0
 801eaa0:	4688      	mov	r8, r1
 801eaa2:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801eaa4:	6812      	ldr	r2, [r2, #0]
 801eaa6:	9205      	str	r2, [sp, #20]
    if (id) {
 801eaa8:	9306      	str	r3, [sp, #24]
 801eaaa:	b11b      	cbz	r3, 801eab4 <lfs_dir_find+0x1c>
 801eaac:	461a      	mov	r2, r3
        *id = 0x3ff;
 801eaae:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801eab2:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801eab4:	f8da 3020 	ldr.w	r3, [sl, #32]
 801eab8:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801eabc:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801eac0:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801eac4:	4e4d      	ldr	r6, [pc, #308]	@ (801ebfc <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801eac6:	4d4e      	ldr	r5, [pc, #312]	@ (801ec00 <lfs_dir_find+0x168>)
 801eac8:	4629      	mov	r1, r5
 801eaca:	9f05      	ldr	r7, [sp, #20]
 801eacc:	4638      	mov	r0, r7
 801eace:	f00d ff47 	bl	802c960 <strspn>
 801ead2:	4604      	mov	r4, r0
 801ead4:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801ead8:	4629      	mov	r1, r5
 801eada:	4648      	mov	r0, r9
 801eadc:	f00d fef4 	bl	802c8c8 <strcspn>
 801eae0:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801eae2:	2801      	cmp	r0, #1
 801eae4:	d00a      	beq.n	801eafc <lfs_dir_find+0x64>
 801eae6:	2d02      	cmp	r5, #2
 801eae8:	d00c      	beq.n	801eb04 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801eaea:	eb09 0305 	add.w	r3, r9, r5
 801eaee:	9305      	str	r3, [sp, #20]
 801eaf0:	469b      	mov	fp, r3
        int depth = 1;
 801eaf2:	2701      	movs	r7, #1
 801eaf4:	e013      	b.n	801eb1e <lfs_dir_find+0x86>
 801eaf6:	46b2      	mov	sl, r6
 801eaf8:	4606      	mov	r6, r0
 801eafa:	e7e4      	b.n	801eac6 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801eafc:	5d3b      	ldrb	r3, [r7, r4]
 801eafe:	2b2e      	cmp	r3, #46	@ 0x2e
 801eb00:	d1f1      	bne.n	801eae6 <lfs_dir_find+0x4e>
 801eb02:	e006      	b.n	801eb12 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801eb04:	2202      	movs	r2, #2
 801eb06:	493f      	ldr	r1, [pc, #252]	@ (801ec04 <lfs_dir_find+0x16c>)
 801eb08:	4648      	mov	r0, r9
 801eb0a:	f00d fe25 	bl	802c758 <memcmp>
 801eb0e:	2800      	cmp	r0, #0
 801eb10:	d1eb      	bne.n	801eaea <lfs_dir_find+0x52>
            name += namelen;
 801eb12:	eb09 0305 	add.w	r3, r9, r5
 801eb16:	9305      	str	r3, [sp, #20]
            goto nextname;
 801eb18:	e7d5      	b.n	801eac6 <lfs_dir_find+0x2e>
                depth += 1;
 801eb1a:	3701      	adds	r7, #1
            suffix += sufflen;
 801eb1c:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801eb1e:	4c38      	ldr	r4, [pc, #224]	@ (801ec00 <lfs_dir_find+0x168>)
 801eb20:	4621      	mov	r1, r4
 801eb22:	4658      	mov	r0, fp
 801eb24:	f00d ff1c 	bl	802c960 <strspn>
 801eb28:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801eb2a:	4621      	mov	r1, r4
 801eb2c:	4658      	mov	r0, fp
 801eb2e:	f00d fecb 	bl	802c8c8 <strcspn>
            if (sufflen == 0) {
 801eb32:	4604      	mov	r4, r0
 801eb34:	b170      	cbz	r0, 801eb54 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801eb36:	2802      	cmp	r0, #2
 801eb38:	d1ef      	bne.n	801eb1a <lfs_dir_find+0x82>
 801eb3a:	2202      	movs	r2, #2
 801eb3c:	4931      	ldr	r1, [pc, #196]	@ (801ec04 <lfs_dir_find+0x16c>)
 801eb3e:	4658      	mov	r0, fp
 801eb40:	f00d fe0a 	bl	802c758 <memcmp>
 801eb44:	2800      	cmp	r0, #0
 801eb46:	d1e8      	bne.n	801eb1a <lfs_dir_find+0x82>
                if (depth == 0) {
 801eb48:	3f01      	subs	r7, #1
 801eb4a:	d1e7      	bne.n	801eb1c <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801eb4c:	eb0b 0304 	add.w	r3, fp, r4
 801eb50:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801eb52:	e7b8      	b.n	801eac6 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801eb54:	f899 3000 	ldrb.w	r3, [r9]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d04a      	beq.n	801ebf2 <lfs_dir_find+0x15a>
        *path = name;
 801eb5c:	9b07      	ldr	r3, [sp, #28]
 801eb5e:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801eb62:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801eb66:	2b02      	cmp	r3, #2
 801eb68:	d13f      	bne.n	801ebea <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801eb6a:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801eb6e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801eb72:	429e      	cmp	r6, r3
 801eb74:	d102      	bne.n	801eb7c <lfs_dir_find+0xe4>
 801eb76:	464c      	mov	r4, r9
 801eb78:	4656      	mov	r6, sl
 801eb7a:	e029      	b.n	801ebd0 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801eb7c:	02b6      	lsls	r6, r6, #10
 801eb7e:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801eb82:	9300      	str	r3, [sp, #0]
 801eb84:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801eb88:	f043 0308 	orr.w	r3, r3, #8
 801eb8c:	4a1e      	ldr	r2, [pc, #120]	@ (801ec08 <lfs_dir_find+0x170>)
 801eb8e:	4641      	mov	r1, r8
 801eb90:	4650      	mov	r0, sl
 801eb92:	f7fc fc4f 	bl	801b434 <lfs_dir_get>
            if (res < 0) {
 801eb96:	1e06      	subs	r6, r0, #0
 801eb98:	db2b      	blt.n	801ebf2 <lfs_dir_find+0x15a>
 801eb9a:	464c      	mov	r4, r9
 801eb9c:	4656      	mov	r6, sl
 801eb9e:	e017      	b.n	801ebd0 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801eba0:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801eba2:	9609      	str	r6, [sp, #36]	@ 0x24
 801eba4:	940a      	str	r4, [sp, #40]	@ 0x28
 801eba6:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801eba8:	aa09      	add	r2, sp, #36	@ 0x24
 801ebaa:	9203      	str	r2, [sp, #12]
 801ebac:	4a17      	ldr	r2, [pc, #92]	@ (801ec0c <lfs_dir_find+0x174>)
 801ebae:	9202      	str	r2, [sp, #8]
 801ebb0:	9301      	str	r3, [sp, #4]
 801ebb2:	9500      	str	r5, [sp, #0]
 801ebb4:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801ebb8:	463a      	mov	r2, r7
 801ebba:	4641      	mov	r1, r8
 801ebbc:	4630      	mov	r0, r6
 801ebbe:	f7fd f947 	bl	801be50 <lfs_dir_fetchmatch>
            if (tag < 0) {
 801ebc2:	2800      	cmp	r0, #0
 801ebc4:	db14      	blt.n	801ebf0 <lfs_dir_find+0x158>
            if (tag) {
 801ebc6:	2800      	cmp	r0, #0
 801ebc8:	d195      	bne.n	801eaf6 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801ebca:	f898 3017 	ldrb.w	r3, [r8, #23]
 801ebce:	b14b      	cbz	r3, 801ebe4 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ebd0:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801ebd4:	212f      	movs	r1, #47	@ 0x2f
 801ebd6:	4620      	mov	r0, r4
 801ebd8:	f00d fe69 	bl	802c8ae <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801ebdc:	2800      	cmp	r0, #0
 801ebde:	d0df      	beq.n	801eba0 <lfs_dir_find+0x108>
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	e7de      	b.n	801eba2 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801ebe4:	f06f 0601 	mvn.w	r6, #1
 801ebe8:	e003      	b.n	801ebf2 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801ebea:	f06f 0613 	mvn.w	r6, #19
 801ebee:	e000      	b.n	801ebf2 <lfs_dir_find+0x15a>
 801ebf0:	4606      	mov	r6, r0
}
 801ebf2:	4630      	mov	r0, r6
 801ebf4:	b00d      	add	sp, #52	@ 0x34
 801ebf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebfa:	bf00      	nop
 801ebfc:	002ffc00 	.word	0x002ffc00
 801ec00:	0803a224 	.word	0x0803a224
 801ec04:	080399e4 	.word	0x080399e4
 801ec08:	700ffc00 	.word	0x700ffc00
 801ec0c:	0801bc11 	.word	0x0801bc11

0801ec10 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801ec10:	b570      	push	{r4, r5, r6, lr}
 801ec12:	b09a      	sub	sp, #104	@ 0x68
 801ec14:	4604      	mov	r4, r0
 801ec16:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801ec18:	f7ff fad2 	bl	801e1c0 <lfs_fs_forceconsistency>
    if (err) {
 801ec1c:	4603      	mov	r3, r0
 801ec1e:	b110      	cbz	r0, 801ec26 <lfs_remove_+0x16>
}
 801ec20:	4618      	mov	r0, r3
 801ec22:	b01a      	add	sp, #104	@ 0x68
 801ec24:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801ec26:	2300      	movs	r3, #0
 801ec28:	aa03      	add	r2, sp, #12
 801ec2a:	a910      	add	r1, sp, #64	@ 0x40
 801ec2c:	4620      	mov	r0, r4
 801ec2e:	f7ff ff33 	bl	801ea98 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801ec32:	1e03      	subs	r3, r0, #0
 801ec34:	dbf4      	blt.n	801ec20 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801ec36:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801ec3a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801ec3e:	4295      	cmp	r5, r2
 801ec40:	d031      	beq.n	801eca6 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801ec42:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801ec44:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801ec46:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801ec4a:	2e02      	cmp	r6, #2
 801ec4c:	d02e      	beq.n	801ecac <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801ec4e:	02ad      	lsls	r5, r5, #10
 801ec50:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801ec54:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801ec58:	9518      	str	r5, [sp, #96]	@ 0x60
 801ec5a:	2300      	movs	r3, #0
 801ec5c:	9319      	str	r3, [sp, #100]	@ 0x64
 801ec5e:	2301      	movs	r3, #1
 801ec60:	aa18      	add	r2, sp, #96	@ 0x60
 801ec62:	a910      	add	r1, sp, #64	@ 0x40
 801ec64:	4620      	mov	r0, r4
 801ec66:	f7ff fa03 	bl	801e070 <lfs_dir_commit>
    if (err) {
 801ec6a:	4603      	mov	r3, r0
 801ec6c:	2800      	cmp	r0, #0
 801ec6e:	d142      	bne.n	801ecf6 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801ec70:	9a06      	ldr	r2, [sp, #24]
 801ec72:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801ec74:	2e02      	cmp	r6, #2
 801ec76:	d1d3      	bne.n	801ec20 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801ec78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ec7c:	4620      	mov	r0, r4
 801ec7e:	f7fc f9db 	bl	801b038 <lfs_fs_preporphans>
        if (err) {
 801ec82:	4603      	mov	r3, r0
 801ec84:	2800      	cmp	r0, #0
 801ec86:	d1cb      	bne.n	801ec20 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801ec88:	aa10      	add	r2, sp, #64	@ 0x40
 801ec8a:	a908      	add	r1, sp, #32
 801ec8c:	4620      	mov	r0, r4
 801ec8e:	f7fe f8e5 	bl	801ce5c <lfs_fs_pred>
        if (err) {
 801ec92:	4603      	mov	r3, r0
 801ec94:	2800      	cmp	r0, #0
 801ec96:	d1c3      	bne.n	801ec20 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801ec98:	aa08      	add	r2, sp, #32
 801ec9a:	a910      	add	r1, sp, #64	@ 0x40
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	f7ff faa3 	bl	801e1e8 <lfs_dir_drop>
 801eca2:	4603      	mov	r3, r0
        if (err) {
 801eca4:	e7bc      	b.n	801ec20 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801eca6:	f06f 0315 	mvn.w	r3, #21
 801ecaa:	e7b9      	b.n	801ec20 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801ecac:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801ecae:	aa04      	add	r2, sp, #16
 801ecb0:	9200      	str	r2, [sp, #0]
 801ecb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ecb6:	f043 0308 	orr.w	r3, r3, #8
 801ecba:	4a10      	ldr	r2, [pc, #64]	@ (801ecfc <lfs_remove_+0xec>)
 801ecbc:	a910      	add	r1, sp, #64	@ 0x40
 801ecbe:	4620      	mov	r0, r4
 801ecc0:	f7fc fbb8 	bl	801b434 <lfs_dir_get>
        if (res < 0) {
 801ecc4:	1e03      	subs	r3, r0, #0
 801ecc6:	dbab      	blt.n	801ec20 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801ecc8:	aa04      	add	r2, sp, #16
 801ecca:	a908      	add	r1, sp, #32
 801eccc:	4620      	mov	r0, r4
 801ecce:	f7fd fb9f 	bl	801c410 <lfs_dir_fetch>
        if (err) {
 801ecd2:	4603      	mov	r3, r0
 801ecd4:	2800      	cmp	r0, #0
 801ecd6:	d1a3      	bne.n	801ec20 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801ecd8:	2101      	movs	r1, #1
 801ecda:	4620      	mov	r0, r4
 801ecdc:	f7fc f9ac 	bl	801b038 <lfs_fs_preporphans>
        if (err) {
 801ece0:	4603      	mov	r3, r0
 801ece2:	2800      	cmp	r0, #0
 801ece4:	d19c      	bne.n	801ec20 <lfs_remove_+0x10>
        dir.type = 0;
 801ece6:	2300      	movs	r3, #0
 801ece8:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801ecec:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801ecf0:	ab06      	add	r3, sp, #24
 801ecf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ecf4:	e7ab      	b.n	801ec4e <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801ecf6:	9a06      	ldr	r2, [sp, #24]
 801ecf8:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801ecfa:	e791      	b.n	801ec20 <lfs_remove_+0x10>
 801ecfc:	700ffc00 	.word	0x700ffc00

0801ed00 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801ed00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed02:	b087      	sub	sp, #28
 801ed04:	4607      	mov	r7, r0
 801ed06:	460d      	mov	r5, r1
 801ed08:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801ed0a:	f101 0608 	add.w	r6, r1, #8
 801ed0e:	2300      	movs	r3, #0
 801ed10:	aa03      	add	r2, sp, #12
 801ed12:	4631      	mov	r1, r6
 801ed14:	f7ff fec0 	bl	801ea98 <lfs_dir_find>
    if (tag < 0) {
 801ed18:	1e04      	subs	r4, r0, #0
 801ed1a:	db14      	blt.n	801ed46 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801ed1c:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801ed20:	2b02      	cmp	r3, #2
 801ed22:	d130      	bne.n	801ed86 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801ed24:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801ed28:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ed2c:	429c      	cmp	r4, r3
 801ed2e:	d10d      	bne.n	801ed4c <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801ed30:	6a3b      	ldr	r3, [r7, #32]
 801ed32:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801ed34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed36:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801ed38:	aa04      	add	r2, sp, #16
 801ed3a:	4631      	mov	r1, r6
 801ed3c:	4638      	mov	r0, r7
 801ed3e:	f7fd fb67 	bl	801c410 <lfs_dir_fetch>
    if (err) {
 801ed42:	4604      	mov	r4, r0
 801ed44:	b188      	cbz	r0, 801ed6a <lfs_dir_open_+0x6a>
}
 801ed46:	4620      	mov	r0, r4
 801ed48:	b007      	add	sp, #28
 801ed4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801ed4c:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801ed4e:	ab04      	add	r3, sp, #16
 801ed50:	9300      	str	r3, [sp, #0]
 801ed52:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801ed56:	f043 0308 	orr.w	r3, r3, #8
 801ed5a:	4a0c      	ldr	r2, [pc, #48]	@ (801ed8c <lfs_dir_open_+0x8c>)
 801ed5c:	4631      	mov	r1, r6
 801ed5e:	4638      	mov	r0, r7
 801ed60:	f7fc fb68 	bl	801b434 <lfs_dir_get>
        if (res < 0) {
 801ed64:	1e04      	subs	r4, r0, #0
 801ed66:	dae7      	bge.n	801ed38 <lfs_dir_open_+0x38>
 801ed68:	e7ed      	b.n	801ed46 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801ed6a:	68ab      	ldr	r3, [r5, #8]
 801ed6c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801ed6e:	68eb      	ldr	r3, [r5, #12]
 801ed70:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801ed72:	2300      	movs	r3, #0
 801ed74:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801ed76:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801ed78:	2302      	movs	r3, #2
 801ed7a:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801ed7c:	4629      	mov	r1, r5
 801ed7e:	4638      	mov	r0, r7
 801ed80:	f7fc f858 	bl	801ae34 <lfs_mlist_append>
    return 0;
 801ed84:	e7df      	b.n	801ed46 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801ed86:	f06f 0413 	mvn.w	r4, #19
 801ed8a:	e7dc      	b.n	801ed46 <lfs_dir_open_+0x46>
 801ed8c:	700ffc00 	.word	0x700ffc00

0801ed90 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed94:	b0ad      	sub	sp, #180	@ 0xb4
 801ed96:	4604      	mov	r4, r0
 801ed98:	9103      	str	r1, [sp, #12]
 801ed9a:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801ed9c:	f7ff fa10 	bl	801e1c0 <lfs_fs_forceconsistency>
    if (err) {
 801eda0:	4606      	mov	r6, r0
 801eda2:	b118      	cbz	r0, 801edac <lfs_rename_+0x1c>
}
 801eda4:	4630      	mov	r0, r6
 801eda6:	b02d      	add	sp, #180	@ 0xb4
 801eda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801edac:	2300      	movs	r3, #0
 801edae:	aa03      	add	r2, sp, #12
 801edb0:	a922      	add	r1, sp, #136	@ 0x88
 801edb2:	4620      	mov	r0, r4
 801edb4:	f7ff fe70 	bl	801ea98 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801edb8:	2800      	cmp	r0, #0
 801edba:	f2c0 809e 	blt.w	801eefa <lfs_rename_+0x16a>
 801edbe:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801edc0:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801edc4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801edc8:	429d      	cmp	r5, r3
 801edca:	f000 8094 	beq.w	801eef6 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801edce:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801edd2:	aa02      	add	r2, sp, #8
 801edd4:	a91a      	add	r1, sp, #104	@ 0x68
 801edd6:	4620      	mov	r0, r4
 801edd8:	f7ff fe5e 	bl	801ea98 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801eddc:	f1b0 0900 	subs.w	r9, r0, #0
 801ede0:	f2c0 808d 	blt.w	801eefe <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801ede4:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801ede8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801edec:	429a      	cmp	r2, r3
 801edee:	f000 8086 	beq.w	801eefe <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801edf2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801edf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801edf6:	429a      	cmp	r2, r3
 801edf8:	d008      	beq.n	801ee0c <lfs_rename_+0x7c>
 801edfa:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801edfc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801edfe:	4281      	cmp	r1, r0
 801ee00:	d004      	beq.n	801ee0c <lfs_rename_+0x7c>
 801ee02:	4299      	cmp	r1, r3
 801ee04:	d002      	beq.n	801ee0c <lfs_rename_+0x7c>
 801ee06:	4290      	cmp	r0, r2
 801ee08:	d000      	beq.n	801ee0c <lfs_rename_+0x7c>
 801ee0a:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801ee0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ee0e:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801ee10:	f119 0f02 	cmn.w	r9, #2
 801ee14:	f000 8085 	beq.w	801ef22 <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801ee18:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801ee1c:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801ee20:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801ee24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	f040 808a 	bne.w	801ef42 <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801ee2e:	b91e      	cbnz	r6, 801ee38 <lfs_rename_+0xa8>
 801ee30:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ee34:	42ab      	cmp	r3, r5
 801ee36:	d0b5      	beq.n	801eda4 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801ee38:	2a02      	cmp	r2, #2
 801ee3a:	f000 808a 	beq.w	801ef52 <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801ee3e:	46aa      	mov	sl, r5
    if (!samepair) {
 801ee40:	b126      	cbz	r6, 801ee4c <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801ee42:	aa22      	add	r2, sp, #136	@ 0x88
 801ee44:	4651      	mov	r1, sl
 801ee46:	4620      	mov	r0, r4
 801ee48:	f7fc f8a6 	bl	801af98 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801ee4c:	f119 0f02 	cmn.w	r9, #2
 801ee50:	f000 80b4 	beq.w	801efbc <lfs_rename_+0x22c>
 801ee54:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ee58:	029b      	lsls	r3, r3, #10
 801ee5a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801ee5e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801ee62:	9305      	str	r3, [sp, #20]
 801ee64:	2200      	movs	r2, #0
 801ee66:	9206      	str	r2, [sp, #24]
 801ee68:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801ee6c:	02bf      	lsls	r7, r7, #10
 801ee6e:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801ee72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ee76:	9307      	str	r3, [sp, #28]
 801ee78:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801ee7a:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801ee7e:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801ee82:	f8dd b008 	ldr.w	fp, [sp, #8]
 801ee86:	4658      	mov	r0, fp
 801ee88:	f7f1 fa0a 	bl	80102a0 <strlen>
 801ee8c:	ea48 0000 	orr.w	r0, r8, r0
 801ee90:	9009      	str	r0, [sp, #36]	@ 0x24
 801ee92:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801ee96:	432f      	orrs	r7, r5
 801ee98:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801ee9c:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801eea0:	970b      	str	r7, [sp, #44]	@ 0x2c
 801eea2:	ab22      	add	r3, sp, #136	@ 0x88
 801eea4:	930c      	str	r3, [sp, #48]	@ 0x30
 801eea6:	2e00      	cmp	r6, #0
 801eea8:	f040 808a 	bne.w	801efc0 <lfs_rename_+0x230>
 801eeac:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801eeb0:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801eeb4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801eeb8:	930d      	str	r3, [sp, #52]	@ 0x34
 801eeba:	2300      	movs	r3, #0
 801eebc:	930e      	str	r3, [sp, #56]	@ 0x38
 801eebe:	2305      	movs	r3, #5
 801eec0:	aa05      	add	r2, sp, #20
 801eec2:	a91a      	add	r1, sp, #104	@ 0x68
 801eec4:	4620      	mov	r0, r4
 801eec6:	f7ff f8d3 	bl	801e070 <lfs_dir_commit>
    if (err) {
 801eeca:	4607      	mov	r7, r0
 801eecc:	2800      	cmp	r0, #0
 801eece:	d179      	bne.n	801efc4 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801eed0:	b126      	cbz	r6, 801eedc <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801eed2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801eed4:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801eed6:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801eeda:	d177      	bne.n	801efcc <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801eedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eede:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801eee0:	f119 0f02 	cmn.w	r9, #2
 801eee4:	f000 80a9 	beq.w	801f03a <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801eee8:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801eeec:	2802      	cmp	r0, #2
 801eeee:	f000 8088 	beq.w	801f002 <lfs_rename_+0x272>
    return 0;
 801eef2:	463e      	mov	r6, r7
 801eef4:	e756      	b.n	801eda4 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801eef6:	f06f 0015 	mvn.w	r0, #21
 801eefa:	4606      	mov	r6, r0
 801eefc:	e752      	b.n	801eda4 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801eefe:	f119 0f02 	cmn.w	r9, #2
 801ef02:	d106      	bne.n	801ef12 <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801ef04:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801ef08:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ef0c:	429a      	cmp	r2, r3
 801ef0e:	f47f af70 	bne.w	801edf2 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801ef12:	f1b9 0f00 	cmp.w	r9, #0
 801ef16:	db02      	blt.n	801ef1e <lfs_rename_+0x18e>
 801ef18:	f06f 0615 	mvn.w	r6, #21
 801ef1c:	e742      	b.n	801eda4 <lfs_rename_+0x14>
 801ef1e:	464e      	mov	r6, r9
 801ef20:	e740      	b.n	801eda4 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801ef22:	9802      	ldr	r0, [sp, #8]
 801ef24:	f7f1 f9bc 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801ef28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ef2a:	4283      	cmp	r3, r0
 801ef2c:	f0c0 8082 	bcc.w	801f034 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801ef30:	2e00      	cmp	r6, #0
 801ef32:	d141      	bne.n	801efb8 <lfs_rename_+0x228>
 801ef34:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ef38:	42ab      	cmp	r3, r5
 801ef3a:	d83b      	bhi.n	801efb4 <lfs_rename_+0x224>
            newoldid += 1;
 801ef3c:	f105 0a01 	add.w	sl, r5, #1
 801ef40:	e77e      	b.n	801ee40 <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801ef42:	2a02      	cmp	r2, #2
 801ef44:	d002      	beq.n	801ef4c <lfs_rename_+0x1bc>
 801ef46:	f06f 0613 	mvn.w	r6, #19
 801ef4a:	e72b      	b.n	801eda4 <lfs_rename_+0x14>
 801ef4c:	f06f 0614 	mvn.w	r6, #20
 801ef50:	e728      	b.n	801eda4 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801ef52:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801ef56:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801ef58:	aa05      	add	r2, sp, #20
 801ef5a:	9200      	str	r2, [sp, #0]
 801ef5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ef60:	f043 0308 	orr.w	r3, r3, #8
 801ef64:	4a36      	ldr	r2, [pc, #216]	@ (801f040 <lfs_rename_+0x2b0>)
 801ef66:	a91a      	add	r1, sp, #104	@ 0x68
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f7fc fa63 	bl	801b434 <lfs_dir_get>
        if (res < 0) {
 801ef6e:	2800      	cmp	r0, #0
 801ef70:	db1a      	blt.n	801efa8 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801ef72:	aa05      	add	r2, sp, #20
 801ef74:	a911      	add	r1, sp, #68	@ 0x44
 801ef76:	4620      	mov	r0, r4
 801ef78:	f7fd fa4a 	bl	801c410 <lfs_dir_fetch>
        if (err) {
 801ef7c:	b9b0      	cbnz	r0, 801efac <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801ef7e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef80:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801ef84:	d002      	beq.n	801ef8c <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801ef86:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801ef8a:	e70b      	b.n	801eda4 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801ef8c:	2101      	movs	r1, #1
 801ef8e:	4620      	mov	r0, r4
 801ef90:	f7fc f852 	bl	801b038 <lfs_fs_preporphans>
        if (err) {
 801ef94:	b960      	cbnz	r0, 801efb0 <lfs_rename_+0x220>
        prevdir.type = 0;
 801ef96:	2300      	movs	r3, #0
 801ef98:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801ef9c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801efa0:	ab0f      	add	r3, sp, #60	@ 0x3c
 801efa2:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801efa4:	46aa      	mov	sl, r5
 801efa6:	e74b      	b.n	801ee40 <lfs_rename_+0xb0>
            return (int)res;
 801efa8:	4606      	mov	r6, r0
 801efaa:	e6fb      	b.n	801eda4 <lfs_rename_+0x14>
            return err;
 801efac:	4606      	mov	r6, r0
 801efae:	e6f9      	b.n	801eda4 <lfs_rename_+0x14>
            return err;
 801efb0:	4606      	mov	r6, r0
 801efb2:	e6f7      	b.n	801eda4 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801efb4:	46aa      	mov	sl, r5
 801efb6:	e743      	b.n	801ee40 <lfs_rename_+0xb0>
 801efb8:	46aa      	mov	sl, r5
 801efba:	e742      	b.n	801ee42 <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801efbc:	2300      	movs	r3, #0
 801efbe:	e750      	b.n	801ee62 <lfs_rename_+0xd2>
 801efc0:	2300      	movs	r3, #0
 801efc2:	e779      	b.n	801eeb8 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801efc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801efc6:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801efc8:	4606      	mov	r6, r0
 801efca:	e6eb      	b.n	801eda4 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801efcc:	2200      	movs	r2, #0
 801efce:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801efd2:	4620      	mov	r0, r4
 801efd4:	f7fb ffe0 	bl	801af98 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801efd8:	02ab      	lsls	r3, r5, #10
 801efda:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801efde:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801efe2:	932a      	str	r3, [sp, #168]	@ 0xa8
 801efe4:	2300      	movs	r3, #0
 801efe6:	932b      	str	r3, [sp, #172]	@ 0xac
 801efe8:	2301      	movs	r3, #1
 801efea:	aa2a      	add	r2, sp, #168	@ 0xa8
 801efec:	a922      	add	r1, sp, #136	@ 0x88
 801efee:	4620      	mov	r0, r4
 801eff0:	f7ff f83e 	bl	801e070 <lfs_dir_commit>
        if (err) {
 801eff4:	4606      	mov	r6, r0
 801eff6:	2800      	cmp	r0, #0
 801eff8:	f43f af70 	beq.w	801eedc <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801effc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801effe:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801f000:	e6d0      	b.n	801eda4 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801f002:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f006:	4620      	mov	r0, r4
 801f008:	f7fc f816 	bl	801b038 <lfs_fs_preporphans>
        if (err) {
 801f00c:	4606      	mov	r6, r0
 801f00e:	2800      	cmp	r0, #0
 801f010:	f47f aec8 	bne.w	801eda4 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801f014:	aa1a      	add	r2, sp, #104	@ 0x68
 801f016:	a911      	add	r1, sp, #68	@ 0x44
 801f018:	4620      	mov	r0, r4
 801f01a:	f7fd ff1f 	bl	801ce5c <lfs_fs_pred>
        if (err) {
 801f01e:	4606      	mov	r6, r0
 801f020:	2800      	cmp	r0, #0
 801f022:	f47f aebf 	bne.w	801eda4 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801f026:	aa11      	add	r2, sp, #68	@ 0x44
 801f028:	a91a      	add	r1, sp, #104	@ 0x68
 801f02a:	4620      	mov	r0, r4
 801f02c:	f7ff f8dc 	bl	801e1e8 <lfs_dir_drop>
 801f030:	4606      	mov	r6, r0
        if (err) {
 801f032:	e6b7      	b.n	801eda4 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801f034:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f038:	e6b4      	b.n	801eda4 <lfs_rename_+0x14>
    return 0;
 801f03a:	463e      	mov	r6, r7
 801f03c:	e6b2      	b.n	801eda4 <lfs_rename_+0x14>
 801f03e:	bf00      	nop
 801f040:	700ffc00 	.word	0x700ffc00

0801f044 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801f044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f048:	b08b      	sub	sp, #44	@ 0x2c
 801f04a:	4607      	mov	r7, r0
 801f04c:	460c      	mov	r4, r1
 801f04e:	9203      	str	r2, [sp, #12]
 801f050:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f052:	f013 0f02 	tst.w	r3, #2
 801f056:	d005      	beq.n	801f064 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801f058:	f7ff f8b2 	bl	801e1c0 <lfs_fs_forceconsistency>
        if (err) {
 801f05c:	4606      	mov	r6, r0
 801f05e:	2800      	cmp	r0, #0
 801f060:	f040 8109 	bne.w	801f276 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801f064:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f066:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801f068:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801f06a:	2300      	movs	r3, #0
 801f06c:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801f06e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801f070:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801f072:	f104 0808 	add.w	r8, r4, #8
 801f076:	1d23      	adds	r3, r4, #4
 801f078:	aa03      	add	r2, sp, #12
 801f07a:	4641      	mov	r1, r8
 801f07c:	4638      	mov	r0, r7
 801f07e:	f7ff fd0b 	bl	801ea98 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801f082:	1e06      	subs	r6, r0, #0
 801f084:	da09      	bge.n	801f09a <lfs_file_opencfg_+0x56>
 801f086:	f116 0f02 	cmn.w	r6, #2
 801f08a:	f040 80ec 	bne.w	801f266 <lfs_file_opencfg_+0x222>
 801f08e:	88a2      	ldrh	r2, [r4, #4]
 801f090:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f094:	429a      	cmp	r2, r3
 801f096:	f000 80e6 	beq.w	801f266 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801f09a:	2301      	movs	r3, #1
 801f09c:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801f09e:	4621      	mov	r1, r4
 801f0a0:	4638      	mov	r0, r7
 801f0a2:	f7fb fec7 	bl	801ae34 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801f0a6:	f116 0f02 	cmn.w	r6, #2
 801f0aa:	d019      	beq.n	801f0e0 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801f0ac:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801f0b0:	f040 80d7 	bne.w	801f262 <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801f0b4:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801f0b8:	2e01      	cmp	r6, #1
 801f0ba:	f040 80e0 	bne.w	801f27e <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801f0be:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801f0c2:	d042      	beq.n	801f14a <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801f0c4:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801f0c8:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801f0cc:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801f0d0:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801f0d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f0d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f0da:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f0dc:	2500      	movs	r5, #0
 801f0de:	e064      	b.n	801f1aa <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801f0e0:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801f0e4:	f000 80bf 	beq.w	801f266 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801f0e8:	9d03      	ldr	r5, [sp, #12]
 801f0ea:	4628      	mov	r0, r5
 801f0ec:	f7f1 f8d8 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801f0f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f0f2:	4283      	cmp	r3, r0
 801f0f4:	d202      	bcs.n	801f0fc <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801f0f6:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801f0fa:	e0b4      	b.n	801f266 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801f0fc:	88a3      	ldrh	r3, [r4, #4]
 801f0fe:	029b      	lsls	r3, r3, #10
 801f100:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f104:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f108:	9204      	str	r2, [sp, #16]
 801f10a:	2200      	movs	r2, #0
 801f10c:	9205      	str	r2, [sp, #20]
 801f10e:	4318      	orrs	r0, r3
 801f110:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801f114:	9006      	str	r0, [sp, #24]
 801f116:	9507      	str	r5, [sp, #28]
 801f118:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f11c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f120:	9308      	str	r3, [sp, #32]
 801f122:	9209      	str	r2, [sp, #36]	@ 0x24
 801f124:	2303      	movs	r3, #3
 801f126:	aa04      	add	r2, sp, #16
 801f128:	4641      	mov	r1, r8
 801f12a:	4638      	mov	r0, r7
 801f12c:	f7fe ffa0 	bl	801e070 <lfs_dir_commit>
 801f130:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f132:	f110 0f1c 	cmn.w	r0, #28
 801f136:	d005      	beq.n	801f144 <lfs_file_opencfg_+0x100>
        if (err) {
 801f138:	2800      	cmp	r0, #0
 801f13a:	f040 8094 	bne.w	801f266 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801f13e:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801f294 <lfs_file_opencfg_+0x250>
 801f142:	e7cb      	b.n	801f0dc <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801f144:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801f148:	e08d      	b.n	801f266 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801f14a:	88a3      	ldrh	r3, [r4, #4]
 801f14c:	029b      	lsls	r3, r3, #10
 801f14e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801f152:	9200      	str	r2, [sp, #0]
 801f154:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f158:	f043 0308 	orr.w	r3, r3, #8
 801f15c:	4a4b      	ldr	r2, [pc, #300]	@ (801f28c <lfs_file_opencfg_+0x248>)
 801f15e:	4641      	mov	r1, r8
 801f160:	4638      	mov	r0, r7
 801f162:	f7fc f967 	bl	801b434 <lfs_dir_get>
        if (tag < 0) {
 801f166:	f1b0 0900 	subs.w	r9, r0, #0
 801f16a:	dab7      	bge.n	801f0dc <lfs_file_opencfg_+0x98>
            err = tag;
 801f16c:	464e      	mov	r6, r9
 801f16e:	e07a      	b.n	801f266 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801f170:	685b      	ldr	r3, [r3, #4]
 801f172:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801f176:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f17a:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801f17e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801f182:	88a3      	ldrh	r3, [r4, #4]
 801f184:	029b      	lsls	r3, r3, #10
 801f186:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801f18a:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f18c:	6849      	ldr	r1, [r1, #4]
 801f18e:	9100      	str	r1, [sp, #0]
 801f190:	4313      	orrs	r3, r2
 801f192:	4a3f      	ldr	r2, [pc, #252]	@ (801f290 <lfs_file_opencfg_+0x24c>)
 801f194:	4641      	mov	r1, r8
 801f196:	4638      	mov	r0, r7
 801f198:	f7fc f94c 	bl	801b434 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801f19c:	1e06      	subs	r6, r0, #0
 801f19e:	da0c      	bge.n	801f1ba <lfs_file_opencfg_+0x176>
 801f1a0:	f116 0f02 	cmn.w	r6, #2
 801f1a4:	d009      	beq.n	801f1ba <lfs_file_opencfg_+0x176>
 801f1a6:	e05e      	b.n	801f266 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801f1a8:	3501      	adds	r5, #1
 801f1aa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f1ac:	689a      	ldr	r2, [r3, #8]
 801f1ae:	42aa      	cmp	r2, r5
 801f1b0:	d915      	bls.n	801f1de <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801f1b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801f1b4:	f012 0f01 	tst.w	r2, #1
 801f1b8:	d1da      	bne.n	801f170 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801f1ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f1bc:	f013 0f02 	tst.w	r3, #2
 801f1c0:	d0f2      	beq.n	801f1a8 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801f1c2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f1c4:	6852      	ldr	r2, [r2, #4]
 801f1c6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f1ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f1ce:	6891      	ldr	r1, [r2, #8]
 801f1d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801f1d2:	4291      	cmp	r1, r2
 801f1d4:	d856      	bhi.n	801f284 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801f1d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f1da:	6323      	str	r3, [r4, #48]	@ 0x30
 801f1dc:	e7e4      	b.n	801f1a8 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	b16b      	cbz	r3, 801f1fe <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801f1e2:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801f1e4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801f1e8:	4638      	mov	r0, r7
 801f1ea:	f7fb ff55 	bl	801b098 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801f1ee:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f1f2:	f240 2301 	movw	r3, #513	@ 0x201
 801f1f6:	429a      	cmp	r2, r3
 801f1f8:	d00b      	beq.n	801f212 <lfs_file_opencfg_+0x1ce>
    return 0;
 801f1fa:	2600      	movs	r6, #0
 801f1fc:	e03b      	b.n	801f276 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801f1fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801f200:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801f202:	f7fb fb09 	bl	801a818 <pvPortMalloc>
 801f206:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801f208:	2800      	cmp	r0, #0
 801f20a:	d1eb      	bne.n	801f1e4 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801f20c:	f06f 060b 	mvn.w	r6, #11
 801f210:	e029      	b.n	801f266 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801f212:	f06f 0101 	mvn.w	r1, #1
 801f216:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801f218:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801f21c:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801f21e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f220:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f224:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801f226:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801f228:	2300      	movs	r3, #0
 801f22a:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801f22c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f230:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801f232:	b90a      	cbnz	r2, 801f238 <lfs_file_opencfg_+0x1f4>
    return 0;
 801f234:	2600      	movs	r6, #0
 801f236:	e01e      	b.n	801f276 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801f238:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801f23a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801f23e:	4293      	cmp	r3, r2
 801f240:	bf28      	it	cs
 801f242:	4613      	movcs	r3, r2
 801f244:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801f248:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801f24a:	9200      	str	r2, [sp, #0]
 801f24c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f250:	4a0e      	ldr	r2, [pc, #56]	@ (801f28c <lfs_file_opencfg_+0x248>)
 801f252:	4641      	mov	r1, r8
 801f254:	4638      	mov	r0, r7
 801f256:	f7fc f8ed 	bl	801b434 <lfs_dir_get>
            if (res < 0) {
 801f25a:	1e06      	subs	r6, r0, #0
 801f25c:	db03      	blt.n	801f266 <lfs_file_opencfg_+0x222>
    return 0;
 801f25e:	2600      	movs	r6, #0
 801f260:	e009      	b.n	801f276 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801f262:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801f266:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f26c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801f26e:	4621      	mov	r1, r4
 801f270:	4638      	mov	r0, r7
 801f272:	f7ff fbfd 	bl	801ea70 <lfs_file_close_>
}
 801f276:	4630      	mov	r0, r6
 801f278:	b00b      	add	sp, #44	@ 0x2c
 801f27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801f27e:	f06f 0614 	mvn.w	r6, #20
 801f282:	e7f0      	b.n	801f266 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801f284:	f06f 061b 	mvn.w	r6, #27
 801f288:	e7ed      	b.n	801f266 <lfs_file_opencfg_+0x222>
 801f28a:	bf00      	nop
 801f28c:	700ffc00 	.word	0x700ffc00
 801f290:	7ffffc00 	.word	0x7ffffc00
 801f294:	20100000 	.word	0x20100000

0801f298 <lfs_file_open_>:
        const char *path, int flags) {
 801f298:	b510      	push	{r4, lr}
 801f29a:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801f29c:	4c02      	ldr	r4, [pc, #8]	@ (801f2a8 <lfs_file_open_+0x10>)
 801f29e:	9400      	str	r4, [sp, #0]
 801f2a0:	f7ff fed0 	bl	801f044 <lfs_file_opencfg_>
}
 801f2a4:	b002      	add	sp, #8
 801f2a6:	bd10      	pop	{r4, pc}
 801f2a8:	08039b10 	.word	0x08039b10

0801f2ac <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801f2ac:	b530      	push	{r4, r5, lr}
 801f2ae:	b0ab      	sub	sp, #172	@ 0xac
 801f2b0:	4604      	mov	r4, r0
 801f2b2:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801f2b4:	f7fe ff84 	bl	801e1c0 <lfs_fs_forceconsistency>
    if (err) {
 801f2b8:	4603      	mov	r3, r0
 801f2ba:	b110      	cbz	r0, 801f2c2 <lfs_mkdir_+0x16>
}
 801f2bc:	4618      	mov	r0, r3
 801f2be:	b02b      	add	sp, #172	@ 0xac
 801f2c0:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801f2c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f2c4:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801f2c6:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801f2ca:	aa01      	add	r2, sp, #4
 801f2cc:	a91e      	add	r1, sp, #120	@ 0x78
 801f2ce:	4620      	mov	r0, r4
 801f2d0:	f7ff fbe2 	bl	801ea98 <lfs_dir_find>
 801f2d4:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801f2d6:	f110 0f02 	cmn.w	r0, #2
 801f2da:	d12f      	bne.n	801f33c <lfs_mkdir_+0x90>
 801f2dc:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801f2e0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801f2e4:	4291      	cmp	r1, r2
 801f2e6:	d029      	beq.n	801f33c <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801f2e8:	9801      	ldr	r0, [sp, #4]
 801f2ea:	f7f0 ffd9 	bl	80102a0 <strlen>
 801f2ee:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801f2f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801f2f2:	4283      	cmp	r3, r0
 801f2f4:	f0c0 8089 	bcc.w	801f40a <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	f7fb fdad 	bl	801ae58 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801f2fe:	a913      	add	r1, sp, #76	@ 0x4c
 801f300:	4620      	mov	r0, r4
 801f302:	f7fd f9f3 	bl	801c6ec <lfs_dir_alloc>
    if (err) {
 801f306:	4603      	mov	r3, r0
 801f308:	2800      	cmp	r0, #0
 801f30a:	d1d7      	bne.n	801f2bc <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801f30c:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801f310:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801f314:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f318:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f31c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801f320:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801f324:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801f328:	b16b      	cbz	r3, 801f346 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801f32a:	aa11      	add	r2, sp, #68	@ 0x44
 801f32c:	a90b      	add	r1, sp, #44	@ 0x2c
 801f32e:	4620      	mov	r0, r4
 801f330:	f7fd f86e 	bl	801c410 <lfs_dir_fetch>
        if (err) {
 801f334:	4603      	mov	r3, r0
 801f336:	2800      	cmp	r0, #0
 801f338:	d0f4      	beq.n	801f324 <lfs_mkdir_+0x78>
 801f33a:	e7bf      	b.n	801f2bc <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	dbbd      	blt.n	801f2bc <lfs_mkdir_+0x10>
 801f340:	f06f 0310 	mvn.w	r3, #16
 801f344:	e7ba      	b.n	801f2bc <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801f346:	4b32      	ldr	r3, [pc, #200]	@ (801f410 <lfs_mkdir_+0x164>)
 801f348:	9326      	str	r3, [sp, #152]	@ 0x98
 801f34a:	ab11      	add	r3, sp, #68	@ 0x44
 801f34c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f34e:	2301      	movs	r3, #1
 801f350:	aa26      	add	r2, sp, #152	@ 0x98
 801f352:	a913      	add	r1, sp, #76	@ 0x4c
 801f354:	4620      	mov	r0, r4
 801f356:	f7fe fe8b 	bl	801e070 <lfs_dir_commit>
    if (err) {
 801f35a:	4603      	mov	r3, r0
 801f35c:	2800      	cmp	r0, #0
 801f35e:	d1ad      	bne.n	801f2bc <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801f360:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f364:	bb33      	cbnz	r3, 801f3b4 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f366:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801f36a:	029b      	lsls	r3, r3, #10
 801f36c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801f370:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801f374:	9203      	str	r2, [sp, #12]
 801f376:	2200      	movs	r2, #0
 801f378:	9204      	str	r2, [sp, #16]
 801f37a:	431d      	orrs	r5, r3
 801f37c:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801f380:	9505      	str	r5, [sp, #20]
 801f382:	9a01      	ldr	r2, [sp, #4]
 801f384:	9206      	str	r2, [sp, #24]
 801f386:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801f38a:	f043 0308 	orr.w	r3, r3, #8
 801f38e:	9307      	str	r3, [sp, #28]
 801f390:	ab13      	add	r3, sp, #76	@ 0x4c
 801f392:	9308      	str	r3, [sp, #32]
 801f394:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d134      	bne.n	801f406 <lfs_mkdir_+0x15a>
 801f39c:	4b1c      	ldr	r3, [pc, #112]	@ (801f410 <lfs_mkdir_+0x164>)
 801f39e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3a0:	ab13      	add	r3, sp, #76	@ 0x4c
 801f3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3a4:	2304      	movs	r3, #4
 801f3a6:	aa03      	add	r2, sp, #12
 801f3a8:	a91e      	add	r1, sp, #120	@ 0x78
 801f3aa:	4620      	mov	r0, r4
 801f3ac:	f7fe fe60 	bl	801e070 <lfs_dir_commit>
 801f3b0:	4603      	mov	r3, r0
    if (err) {
 801f3b2:	e783      	b.n	801f2bc <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801f3b4:	2101      	movs	r1, #1
 801f3b6:	4620      	mov	r0, r4
 801f3b8:	f7fb fe3e 	bl	801b038 <lfs_fs_preporphans>
        if (err) {
 801f3bc:	4603      	mov	r3, r0
 801f3be:	2800      	cmp	r0, #0
 801f3c0:	f47f af7c 	bne.w	801f2bc <lfs_mkdir_+0x10>
        cwd.type = 0;
 801f3c4:	2300      	movs	r3, #0
 801f3c6:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801f3ca:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801f3ce:	ab1c      	add	r3, sp, #112	@ 0x70
 801f3d0:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801f3d2:	4b0f      	ldr	r3, [pc, #60]	@ (801f410 <lfs_mkdir_+0x164>)
 801f3d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f3d6:	ab13      	add	r3, sp, #76	@ 0x4c
 801f3d8:	9329      	str	r3, [sp, #164]	@ 0xa4
 801f3da:	2301      	movs	r3, #1
 801f3dc:	aa28      	add	r2, sp, #160	@ 0xa0
 801f3de:	a90b      	add	r1, sp, #44	@ 0x2c
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f7fe fe45 	bl	801e070 <lfs_dir_commit>
        if (err) {
 801f3e6:	4603      	mov	r3, r0
 801f3e8:	b110      	cbz	r0, 801f3f0 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801f3ea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801f3ec:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801f3ee:	e765      	b.n	801f2bc <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801f3f0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f3f2:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801f3f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f3f8:	4620      	mov	r0, r4
 801f3fa:	f7fb fe1d 	bl	801b038 <lfs_fs_preporphans>
        if (err) {
 801f3fe:	4603      	mov	r3, r0
 801f400:	2800      	cmp	r0, #0
 801f402:	d0b0      	beq.n	801f366 <lfs_mkdir_+0xba>
 801f404:	e75a      	b.n	801f2bc <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801f406:	2300      	movs	r3, #0
 801f408:	e7c9      	b.n	801f39e <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801f40a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801f40e:	e755      	b.n	801f2bc <lfs_mkdir_+0x10>
 801f410:	600ffc08 	.word	0x600ffc08

0801f414 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801f414:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f416:	b085      	sub	sp, #20
 801f418:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801f41a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801f41e:	429a      	cmp	r2, r3
 801f420:	d02b      	beq.n	801f47a <lfs_dir_getinfo+0x66>
 801f422:	4604      	mov	r4, r0
 801f424:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801f426:	0297      	lsls	r7, r2, #10
 801f428:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801f42a:	3301      	adds	r3, #1
 801f42c:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801f430:	9100      	str	r1, [sp, #0]
 801f432:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801f436:	4a19      	ldr	r2, [pc, #100]	@ (801f49c <lfs_dir_getinfo+0x88>)
 801f438:	4631      	mov	r1, r6
 801f43a:	f7fb fffb 	bl	801b434 <lfs_dir_get>
    if (tag < 0) {
 801f43e:	2800      	cmp	r0, #0
 801f440:	db21      	blt.n	801f486 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f442:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801f446:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801f448:	ab02      	add	r3, sp, #8
 801f44a:	9300      	str	r3, [sp, #0]
 801f44c:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801f450:	f043 0308 	orr.w	r3, r3, #8
 801f454:	4a12      	ldr	r2, [pc, #72]	@ (801f4a0 <lfs_dir_getinfo+0x8c>)
 801f456:	4631      	mov	r1, r6
 801f458:	4620      	mov	r0, r4
 801f45a:	f7fb ffeb 	bl	801b434 <lfs_dir_get>
    if (tag < 0) {
 801f45e:	2800      	cmp	r0, #0
 801f460:	db11      	blt.n	801f486 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801f462:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801f466:	f240 2202 	movw	r2, #514	@ 0x202
 801f46a:	4293      	cmp	r3, r2
 801f46c:	d00d      	beq.n	801f48a <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801f46e:	f240 2201 	movw	r2, #513	@ 0x201
 801f472:	4293      	cmp	r3, r2
 801f474:	d00d      	beq.n	801f492 <lfs_dir_getinfo+0x7e>
    return 0;
 801f476:	2000      	movs	r0, #0
 801f478:	e005      	b.n	801f486 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801f47a:	4b0a      	ldr	r3, [pc, #40]	@ (801f4a4 <lfs_dir_getinfo+0x90>)
 801f47c:	881b      	ldrh	r3, [r3, #0]
 801f47e:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801f480:	2302      	movs	r3, #2
 801f482:	702b      	strb	r3, [r5, #0]
        return 0;
 801f484:	2000      	movs	r0, #0
}
 801f486:	b005      	add	sp, #20
 801f488:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801f48a:	9b03      	ldr	r3, [sp, #12]
 801f48c:	606b      	str	r3, [r5, #4]
    return 0;
 801f48e:	2000      	movs	r0, #0
 801f490:	e7f9      	b.n	801f486 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801f492:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801f496:	6068      	str	r0, [r5, #4]
    return 0;
 801f498:	2000      	movs	r0, #0
 801f49a:	e7f4      	b.n	801f486 <lfs_dir_getinfo+0x72>
 801f49c:	780ffc00 	.word	0x780ffc00
 801f4a0:	700ffc00 	.word	0x700ffc00
 801f4a4:	0803a224 	.word	0x0803a224

0801f4a8 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f4a8:	b530      	push	{r4, r5, lr}
 801f4aa:	b08b      	sub	sp, #44	@ 0x2c
 801f4ac:	4604      	mov	r4, r0
 801f4ae:	9101      	str	r1, [sp, #4]
 801f4b0:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	aa01      	add	r2, sp, #4
 801f4b6:	a902      	add	r1, sp, #8
 801f4b8:	f7ff faee 	bl	801ea98 <lfs_dir_find>
    if (tag < 0) {
 801f4bc:	2800      	cmp	r0, #0
 801f4be:	db06      	blt.n	801f4ce <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801f4c0:	462b      	mov	r3, r5
 801f4c2:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801f4c6:	a902      	add	r1, sp, #8
 801f4c8:	4620      	mov	r0, r4
 801f4ca:	f7ff ffa3 	bl	801f414 <lfs_dir_getinfo>
}
 801f4ce:	b00b      	add	sp, #44	@ 0x2c
 801f4d0:	bd30      	pop	{r4, r5, pc}
	...

0801f4d4 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f4d4:	b570      	push	{r4, r5, r6, lr}
 801f4d6:	4605      	mov	r5, r0
 801f4d8:	460c      	mov	r4, r1
 801f4da:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801f4dc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801f4e0:	2100      	movs	r1, #0
 801f4e2:	4630      	mov	r0, r6
 801f4e4:	f00d f9cc 	bl	802c880 <memset>
    if (dir->pos == 0) {
 801f4e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f4ea:	b183      	cbz	r3, 801f50e <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801f4ec:	2b01      	cmp	r3, #1
 801f4ee:	d11f      	bne.n	801f530 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801f4f0:	4633      	mov	r3, r6
 801f4f2:	2202      	movs	r2, #2
 801f4f4:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801f4f8:	4a22      	ldr	r2, [pc, #136]	@ (801f584 <lfs_dir_read_+0xb0>)
 801f4fa:	8811      	ldrh	r1, [r2, #0]
 801f4fc:	7892      	ldrb	r2, [r2, #2]
 801f4fe:	8131      	strh	r1, [r6, #8]
 801f500:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801f502:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f504:	3301      	adds	r3, #1
 801f506:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f508:	f04f 0c01 	mov.w	ip, #1
 801f50c:	e034      	b.n	801f578 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801f50e:	2302      	movs	r3, #2
 801f510:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801f512:	4b1d      	ldr	r3, [pc, #116]	@ (801f588 <lfs_dir_read_+0xb4>)
 801f514:	881b      	ldrh	r3, [r3, #0]
 801f516:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801f518:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f51a:	3301      	adds	r3, #1
 801f51c:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801f51e:	f04f 0c01 	mov.w	ip, #1
 801f522:	e029      	b.n	801f578 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801f524:	88a1      	ldrh	r1, [r4, #4]
 801f526:	3101      	adds	r1, #1
 801f528:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801f52a:	f11c 0f02 	cmn.w	ip, #2
 801f52e:	d11e      	bne.n	801f56e <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801f530:	88a3      	ldrh	r3, [r4, #4]
 801f532:	8ba1      	ldrh	r1, [r4, #28]
 801f534:	428b      	cmp	r3, r1
 801f536:	d10c      	bne.n	801f552 <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801f538:	7fe3      	ldrb	r3, [r4, #31]
 801f53a:	b1fb      	cbz	r3, 801f57c <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801f53c:	f104 0220 	add.w	r2, r4, #32
 801f540:	f104 0108 	add.w	r1, r4, #8
 801f544:	4628      	mov	r0, r5
 801f546:	f7fc ff63 	bl	801c410 <lfs_dir_fetch>
            if (err) {
 801f54a:	4684      	mov	ip, r0
 801f54c:	b9a0      	cbnz	r0, 801f578 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801f54e:	2300      	movs	r3, #0
 801f550:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801f552:	4633      	mov	r3, r6
 801f554:	88a2      	ldrh	r2, [r4, #4]
 801f556:	f104 0108 	add.w	r1, r4, #8
 801f55a:	4628      	mov	r0, r5
 801f55c:	f7ff ff5a 	bl	801f414 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801f560:	4684      	mov	ip, r0
 801f562:	2800      	cmp	r0, #0
 801f564:	d0de      	beq.n	801f524 <lfs_dir_read_+0x50>
 801f566:	f110 0f02 	cmn.w	r0, #2
 801f56a:	d0db      	beq.n	801f524 <lfs_dir_read_+0x50>
 801f56c:	e004      	b.n	801f578 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801f56e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801f570:	3301      	adds	r3, #1
 801f572:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801f574:	f04f 0c01 	mov.w	ip, #1
}
 801f578:	4660      	mov	r0, ip
 801f57a:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801f57c:	f04f 0c00 	mov.w	ip, #0
 801f580:	e7fa      	b.n	801f578 <lfs_dir_read_+0xa4>
 801f582:	bf00      	nop
 801f584:	080399e4 	.word	0x080399e4
 801f588:	08035f70 	.word	0x08035f70

0801f58c <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801f58c:	b570      	push	{r4, r5, r6, lr}
 801f58e:	4605      	mov	r5, r0
 801f590:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f592:	694b      	ldr	r3, [r1, #20]
 801f594:	4608      	mov	r0, r1
 801f596:	4798      	blx	r3
    if (err) {
 801f598:	4606      	mov	r6, r0
 801f59a:	b108      	cbz	r0, 801f5a0 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f59c:	4630      	mov	r0, r6
 801f59e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801f5a0:	4621      	mov	r1, r4
 801f5a2:	4628      	mov	r0, r5
 801f5a4:	f7ff f860 	bl	801e668 <lfs_format_>
 801f5a8:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f5aa:	69a3      	ldr	r3, [r4, #24]
 801f5ac:	4620      	mov	r0, r4
 801f5ae:	4798      	blx	r3
    return err;
 801f5b0:	e7f4      	b.n	801f59c <lfs_format+0x10>

0801f5b2 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801f5b2:	b570      	push	{r4, r5, r6, lr}
 801f5b4:	4605      	mov	r5, r0
 801f5b6:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801f5b8:	694b      	ldr	r3, [r1, #20]
 801f5ba:	4608      	mov	r0, r1
 801f5bc:	4798      	blx	r3
    if (err) {
 801f5be:	4606      	mov	r6, r0
 801f5c0:	b108      	cbz	r0, 801f5c6 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801f5c2:	4630      	mov	r0, r6
 801f5c4:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801f5c6:	4621      	mov	r1, r4
 801f5c8:	4628      	mov	r0, r5
 801f5ca:	f7ff f8cb 	bl	801e764 <lfs_mount_>
 801f5ce:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801f5d0:	69a3      	ldr	r3, [r4, #24]
 801f5d2:	4620      	mov	r0, r4
 801f5d4:	4798      	blx	r3
    return err;
 801f5d6:	e7f4      	b.n	801f5c2 <lfs_mount+0x10>

0801f5d8 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801f5d8:	b570      	push	{r4, r5, r6, lr}
 801f5da:	4604      	mov	r4, r0
 801f5dc:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f5de:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f5e0:	6943      	ldr	r3, [r0, #20]
 801f5e2:	4798      	blx	r3
    if (err) {
 801f5e4:	4606      	mov	r6, r0
 801f5e6:	b108      	cbz	r0, 801f5ec <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f5e8:	4630      	mov	r0, r6
 801f5ea:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801f5ec:	4629      	mov	r1, r5
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	f7ff fb0e 	bl	801ec10 <lfs_remove_>
 801f5f4:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f5f6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f5f8:	6983      	ldr	r3, [r0, #24]
 801f5fa:	4798      	blx	r3
    return err;
 801f5fc:	e7f4      	b.n	801f5e8 <lfs_remove+0x10>

0801f5fe <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801f5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f600:	4604      	mov	r4, r0
 801f602:	460d      	mov	r5, r1
 801f604:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f606:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f608:	6943      	ldr	r3, [r0, #20]
 801f60a:	4798      	blx	r3
    if (err) {
 801f60c:	4607      	mov	r7, r0
 801f60e:	b108      	cbz	r0, 801f614 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f610:	4638      	mov	r0, r7
 801f612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801f614:	4632      	mov	r2, r6
 801f616:	4629      	mov	r1, r5
 801f618:	4620      	mov	r0, r4
 801f61a:	f7ff fbb9 	bl	801ed90 <lfs_rename_>
 801f61e:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f620:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f622:	6983      	ldr	r3, [r0, #24]
 801f624:	4798      	blx	r3
    return err;
 801f626:	e7f3      	b.n	801f610 <lfs_rename+0x12>

0801f628 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f62a:	4604      	mov	r4, r0
 801f62c:	460d      	mov	r5, r1
 801f62e:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f630:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f632:	6943      	ldr	r3, [r0, #20]
 801f634:	4798      	blx	r3
    if (err) {
 801f636:	4607      	mov	r7, r0
 801f638:	b108      	cbz	r0, 801f63e <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f63a:	4638      	mov	r0, r7
 801f63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801f63e:	4632      	mov	r2, r6
 801f640:	4629      	mov	r1, r5
 801f642:	4620      	mov	r0, r4
 801f644:	f7ff ff30 	bl	801f4a8 <lfs_stat_>
 801f648:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f64a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f64c:	6983      	ldr	r3, [r0, #24]
 801f64e:	4798      	blx	r3
    return err;
 801f650:	e7f3      	b.n	801f63a <lfs_stat+0x12>
	...

0801f654 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801f654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f658:	4604      	mov	r4, r0
 801f65a:	460d      	mov	r5, r1
 801f65c:	4616      	mov	r6, r2
 801f65e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f660:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f662:	6942      	ldr	r2, [r0, #20]
 801f664:	4790      	blx	r2
    if (err) {
 801f666:	4607      	mov	r7, r0
 801f668:	b110      	cbz	r0, 801f670 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f66a:	4638      	mov	r0, r7
 801f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f670:	4629      	mov	r1, r5
 801f672:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f674:	f7fb fbc7 	bl	801ae06 <lfs_mlist_isopen>
 801f678:	b950      	cbnz	r0, 801f690 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801f67a:	4643      	mov	r3, r8
 801f67c:	4632      	mov	r2, r6
 801f67e:	4629      	mov	r1, r5
 801f680:	4620      	mov	r0, r4
 801f682:	f7ff fe09 	bl	801f298 <lfs_file_open_>
 801f686:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f688:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f68a:	6983      	ldr	r3, [r0, #24]
 801f68c:	4798      	blx	r3
    return err;
 801f68e:	e7ec      	b.n	801f66a <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f690:	4b03      	ldr	r3, [pc, #12]	@ (801f6a0 <lfs_file_open+0x4c>)
 801f692:	4a04      	ldr	r2, [pc, #16]	@ (801f6a4 <lfs_file_open+0x50>)
 801f694:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801f698:	4803      	ldr	r0, [pc, #12]	@ (801f6a8 <lfs_file_open+0x54>)
 801f69a:	f00a fb9f 	bl	8029ddc <__assert_func>
 801f69e:	bf00      	nop
 801f6a0:	080399e8 	.word	0x080399e8
 801f6a4:	08039b1c 	.word	0x08039b1c
 801f6a8:	08038e6c 	.word	0x08038e6c

0801f6ac <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801f6ac:	b570      	push	{r4, r5, r6, lr}
 801f6ae:	4604      	mov	r4, r0
 801f6b0:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f6b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f6b4:	6943      	ldr	r3, [r0, #20]
 801f6b6:	4798      	blx	r3
    if (err) {
 801f6b8:	4606      	mov	r6, r0
 801f6ba:	b108      	cbz	r0, 801f6c0 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f6bc:	4630      	mov	r0, r6
 801f6be:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f6c0:	4629      	mov	r1, r5
 801f6c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f6c4:	f7fb fb9f 	bl	801ae06 <lfs_mlist_isopen>
 801f6c8:	b140      	cbz	r0, 801f6dc <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801f6ca:	4629      	mov	r1, r5
 801f6cc:	4620      	mov	r0, r4
 801f6ce:	f7ff f9cf 	bl	801ea70 <lfs_file_close_>
 801f6d2:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f6d4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f6d6:	6983      	ldr	r3, [r0, #24]
 801f6d8:	4798      	blx	r3
    return err;
 801f6da:	e7ef      	b.n	801f6bc <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f6dc:	4b03      	ldr	r3, [pc, #12]	@ (801f6ec <lfs_file_close+0x40>)
 801f6de:	4a04      	ldr	r2, [pc, #16]	@ (801f6f0 <lfs_file_close+0x44>)
 801f6e0:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801f6e4:	4803      	ldr	r0, [pc, #12]	@ (801f6f4 <lfs_file_close+0x48>)
 801f6e6:	f00a fb79 	bl	8029ddc <__assert_func>
 801f6ea:	bf00      	nop
 801f6ec:	08039a20 	.word	0x08039a20
 801f6f0:	08039b00 	.word	0x08039b00
 801f6f4:	08038e6c 	.word	0x08038e6c

0801f6f8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801f6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6fc:	4604      	mov	r4, r0
 801f6fe:	460d      	mov	r5, r1
 801f700:	4616      	mov	r6, r2
 801f702:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f704:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f706:	6942      	ldr	r2, [r0, #20]
 801f708:	4790      	blx	r2
    if (err) {
 801f70a:	4607      	mov	r7, r0
 801f70c:	b110      	cbz	r0, 801f714 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f70e:	4638      	mov	r0, r7
 801f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f714:	4629      	mov	r1, r5
 801f716:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f718:	f7fb fb75 	bl	801ae06 <lfs_mlist_isopen>
 801f71c:	b150      	cbz	r0, 801f734 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801f71e:	4643      	mov	r3, r8
 801f720:	4632      	mov	r2, r6
 801f722:	4629      	mov	r1, r5
 801f724:	4620      	mov	r0, r4
 801f726:	f7fd fac1 	bl	801ccac <lfs_file_read_>
 801f72a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f72c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f72e:	6983      	ldr	r3, [r0, #24]
 801f730:	4798      	blx	r3
    return res;
 801f732:	e7ec      	b.n	801f70e <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f734:	4b03      	ldr	r3, [pc, #12]	@ (801f744 <lfs_file_read+0x4c>)
 801f736:	4a04      	ldr	r2, [pc, #16]	@ (801f748 <lfs_file_read+0x50>)
 801f738:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801f73c:	4803      	ldr	r0, [pc, #12]	@ (801f74c <lfs_file_read+0x54>)
 801f73e:	f00a fb4d 	bl	8029ddc <__assert_func>
 801f742:	bf00      	nop
 801f744:	08039a20 	.word	0x08039a20
 801f748:	08039af0 	.word	0x08039af0
 801f74c:	08038e6c 	.word	0x08038e6c

0801f750 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f754:	4604      	mov	r4, r0
 801f756:	460d      	mov	r5, r1
 801f758:	4616      	mov	r6, r2
 801f75a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f75c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f75e:	6942      	ldr	r2, [r0, #20]
 801f760:	4790      	blx	r2
    if (err) {
 801f762:	4607      	mov	r7, r0
 801f764:	b110      	cbz	r0, 801f76c <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f766:	4638      	mov	r0, r7
 801f768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f76c:	4629      	mov	r1, r5
 801f76e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f770:	f7fb fb49 	bl	801ae06 <lfs_mlist_isopen>
 801f774:	b150      	cbz	r0, 801f78c <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801f776:	4643      	mov	r3, r8
 801f778:	4632      	mov	r2, r6
 801f77a:	4629      	mov	r1, r5
 801f77c:	4620      	mov	r0, r4
 801f77e:	f7fd fb05 	bl	801cd8c <lfs_file_write_>
 801f782:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f784:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f786:	6983      	ldr	r3, [r0, #24]
 801f788:	4798      	blx	r3
    return res;
 801f78a:	e7ec      	b.n	801f766 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f78c:	4b03      	ldr	r3, [pc, #12]	@ (801f79c <lfs_file_write+0x4c>)
 801f78e:	4a04      	ldr	r2, [pc, #16]	@ (801f7a0 <lfs_file_write+0x50>)
 801f790:	f641 0105 	movw	r1, #6149	@ 0x1805
 801f794:	4803      	ldr	r0, [pc, #12]	@ (801f7a4 <lfs_file_write+0x54>)
 801f796:	f00a fb21 	bl	8029ddc <__assert_func>
 801f79a:	bf00      	nop
 801f79c:	08039a20 	.word	0x08039a20
 801f7a0:	08039ad0 	.word	0x08039ad0
 801f7a4:	08038e6c 	.word	0x08038e6c

0801f7a8 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ac:	4604      	mov	r4, r0
 801f7ae:	460d      	mov	r5, r1
 801f7b0:	4616      	mov	r6, r2
 801f7b2:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f7b4:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f7b6:	6942      	ldr	r2, [r0, #20]
 801f7b8:	4790      	blx	r2
    if (err) {
 801f7ba:	4607      	mov	r7, r0
 801f7bc:	b110      	cbz	r0, 801f7c4 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f7be:	4638      	mov	r0, r7
 801f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f7c4:	4629      	mov	r1, r5
 801f7c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f7c8:	f7fb fb1d 	bl	801ae06 <lfs_mlist_isopen>
 801f7cc:	b150      	cbz	r0, 801f7e4 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801f7ce:	4643      	mov	r3, r8
 801f7d0:	4632      	mov	r2, r6
 801f7d2:	4629      	mov	r1, r5
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	f7fd fa8d 	bl	801ccf4 <lfs_file_seek_>
 801f7da:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f7dc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f7de:	6983      	ldr	r3, [r0, #24]
 801f7e0:	4798      	blx	r3
    return res;
 801f7e2:	e7ec      	b.n	801f7be <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f7e4:	4b03      	ldr	r3, [pc, #12]	@ (801f7f4 <lfs_file_seek+0x4c>)
 801f7e6:	4a04      	ldr	r2, [pc, #16]	@ (801f7f8 <lfs_file_seek+0x50>)
 801f7e8:	f641 0117 	movw	r1, #6167	@ 0x1817
 801f7ec:	4803      	ldr	r0, [pc, #12]	@ (801f7fc <lfs_file_seek+0x54>)
 801f7ee:	f00a faf5 	bl	8029ddc <__assert_func>
 801f7f2:	bf00      	nop
 801f7f4:	08039a20 	.word	0x08039a20
 801f7f8:	08039ab0 	.word	0x08039ab0
 801f7fc:	08038e6c 	.word	0x08038e6c

0801f800 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801f800:	b570      	push	{r4, r5, r6, lr}
 801f802:	4604      	mov	r4, r0
 801f804:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f806:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f808:	6943      	ldr	r3, [r0, #20]
 801f80a:	4798      	blx	r3
    if (err) {
 801f80c:	4606      	mov	r6, r0
 801f80e:	b108      	cbz	r0, 801f814 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f810:	4630      	mov	r0, r6
 801f812:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f814:	4629      	mov	r1, r5
 801f816:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f818:	f7fb faf5 	bl	801ae06 <lfs_mlist_isopen>
 801f81c:	b140      	cbz	r0, 801f830 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801f81e:	4629      	mov	r1, r5
 801f820:	4620      	mov	r0, r4
 801f822:	f7fb fba4 	bl	801af6e <lfs_file_tell_>
 801f826:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f828:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f82a:	6983      	ldr	r3, [r0, #24]
 801f82c:	4798      	blx	r3
    return res;
 801f82e:	e7ef      	b.n	801f810 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f830:	4b03      	ldr	r3, [pc, #12]	@ (801f840 <lfs_file_tell+0x40>)
 801f832:	4a04      	ldr	r2, [pc, #16]	@ (801f844 <lfs_file_tell+0x44>)
 801f834:	f641 0138 	movw	r1, #6200	@ 0x1838
 801f838:	4803      	ldr	r0, [pc, #12]	@ (801f848 <lfs_file_tell+0x48>)
 801f83a:	f00a facf 	bl	8029ddc <__assert_func>
 801f83e:	bf00      	nop
 801f840:	08039a20 	.word	0x08039a20
 801f844:	08039aa0 	.word	0x08039aa0
 801f848:	08038e6c 	.word	0x08038e6c

0801f84c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801f84c:	b570      	push	{r4, r5, r6, lr}
 801f84e:	4604      	mov	r4, r0
 801f850:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f852:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f854:	6943      	ldr	r3, [r0, #20]
 801f856:	4798      	blx	r3
    if (err) {
 801f858:	4606      	mov	r6, r0
 801f85a:	b108      	cbz	r0, 801f860 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f85c:	4630      	mov	r0, r6
 801f85e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801f860:	4629      	mov	r1, r5
 801f862:	4620      	mov	r0, r4
 801f864:	f7ff fd22 	bl	801f2ac <lfs_mkdir_>
 801f868:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f86a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f86c:	6983      	ldr	r3, [r0, #24]
 801f86e:	4798      	blx	r3
    return err;
 801f870:	e7f4      	b.n	801f85c <lfs_mkdir+0x10>
	...

0801f874 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f876:	4604      	mov	r4, r0
 801f878:	460f      	mov	r7, r1
 801f87a:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801f87c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f87e:	6943      	ldr	r3, [r0, #20]
 801f880:	4798      	blx	r3
    if (err) {
 801f882:	4606      	mov	r6, r0
 801f884:	b108      	cbz	r0, 801f88a <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f886:	4630      	mov	r0, r6
 801f888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f88a:	4639      	mov	r1, r7
 801f88c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f88e:	f7fb faba 	bl	801ae06 <lfs_mlist_isopen>
 801f892:	b948      	cbnz	r0, 801f8a8 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801f894:	462a      	mov	r2, r5
 801f896:	4639      	mov	r1, r7
 801f898:	4620      	mov	r0, r4
 801f89a:	f7ff fa31 	bl	801ed00 <lfs_dir_open_>
 801f89e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f8a0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f8a2:	6983      	ldr	r3, [r0, #24]
 801f8a4:	4798      	blx	r3
    return err;
 801f8a6:	e7ee      	b.n	801f886 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f8a8:	4b03      	ldr	r3, [pc, #12]	@ (801f8b8 <lfs_dir_open+0x44>)
 801f8aa:	4a04      	ldr	r2, [pc, #16]	@ (801f8bc <lfs_dir_open+0x48>)
 801f8ac:	f641 0174 	movw	r1, #6260	@ 0x1874
 801f8b0:	4803      	ldr	r0, [pc, #12]	@ (801f8c0 <lfs_dir_open+0x4c>)
 801f8b2:	f00a fa93 	bl	8029ddc <__assert_func>
 801f8b6:	bf00      	nop
 801f8b8:	08039a58 	.word	0x08039a58
 801f8bc:	08039a90 	.word	0x08039a90
 801f8c0:	08038e6c 	.word	0x08038e6c

0801f8c4 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801f8c4:	b570      	push	{r4, r5, r6, lr}
 801f8c6:	4604      	mov	r4, r0
 801f8c8:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f8ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f8cc:	6943      	ldr	r3, [r0, #20]
 801f8ce:	4798      	blx	r3
    if (err) {
 801f8d0:	4606      	mov	r6, r0
 801f8d2:	b108      	cbz	r0, 801f8d8 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f8d4:	4630      	mov	r0, r6
 801f8d6:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801f8d8:	4629      	mov	r1, r5
 801f8da:	4620      	mov	r0, r4
 801f8dc:	f7fb fb42 	bl	801af64 <lfs_dir_close_>
 801f8e0:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f8e2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f8e4:	6983      	ldr	r3, [r0, #24]
 801f8e6:	4798      	blx	r3
    return err;
 801f8e8:	e7f4      	b.n	801f8d4 <lfs_dir_close+0x10>

0801f8ea <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8ec:	4604      	mov	r4, r0
 801f8ee:	460d      	mov	r5, r1
 801f8f0:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f8f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f8f4:	6943      	ldr	r3, [r0, #20]
 801f8f6:	4798      	blx	r3
    if (err) {
 801f8f8:	4607      	mov	r7, r0
 801f8fa:	b108      	cbz	r0, 801f900 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f8fc:	4638      	mov	r0, r7
 801f8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801f900:	4632      	mov	r2, r6
 801f902:	4629      	mov	r1, r5
 801f904:	4620      	mov	r0, r4
 801f906:	f7ff fde5 	bl	801f4d4 <lfs_dir_read_>
 801f90a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f90c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f90e:	6983      	ldr	r3, [r0, #24]
 801f910:	4798      	blx	r3
    return err;
 801f912:	e7f3      	b.n	801f8fc <lfs_dir_read+0x12>

0801f914 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801f914:	f04f 0c00 	mov.w	ip, #0
 801f918:	4594      	cmp	ip, r2
 801f91a:	d218      	bcs.n	801f94e <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801f91c:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801f91e:	f811 300c 	ldrb.w	r3, [r1, ip]
 801f922:	ea83 0e00 	eor.w	lr, r3, r0
 801f926:	f00e 0e0f 	and.w	lr, lr, #15
 801f92a:	4c09      	ldr	r4, [pc, #36]	@ (801f950 <lfs_crc+0x3c>)
 801f92c:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801f930:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801f934:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801f938:	f003 030f 	and.w	r3, r3, #15
 801f93c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f940:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801f944:	f10c 0c01 	add.w	ip, ip, #1
 801f948:	4594      	cmp	ip, r2
 801f94a:	d3e8      	bcc.n	801f91e <lfs_crc+0xa>
    }

    return crc;
}
 801f94c:	bd30      	pop	{r4, r5, pc}
 801f94e:	4770      	bx	lr
 801f950:	08039c04 	.word	0x08039c04

0801f954 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801f954:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f958:	2b19      	cmp	r3, #25
 801f95a:	d913      	bls.n	801f984 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801f95c:	283d      	cmp	r0, #61	@ 0x3d
 801f95e:	dc18      	bgt.n	801f992 <mg_base64_decode_single+0x3e>
 801f960:	282b      	cmp	r0, #43	@ 0x2b
 801f962:	db20      	blt.n	801f9a6 <mg_base64_decode_single+0x52>
 801f964:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801f968:	2b12      	cmp	r3, #18
 801f96a:	d80f      	bhi.n	801f98c <mg_base64_decode_single+0x38>
 801f96c:	e8df f003 	tbb	[pc, r3]
 801f970:	0e0e0e0c 	.word	0x0e0e0e0c
 801f974:	1717171e 	.word	0x1717171e
 801f978:	17171717 	.word	0x17171717
 801f97c:	0e171717 	.word	0x0e171717
 801f980:	0e0e      	.short	0x0e0e
 801f982:	19          	.byte	0x19
 801f983:	00          	.byte	0x00
    return c - 'A';
 801f984:	4618      	mov	r0, r3
 801f986:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801f988:	203e      	movs	r0, #62	@ 0x3e
 801f98a:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801f98c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f990:	4770      	bx	lr
 801f992:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f996:	2b19      	cmp	r3, #25
 801f998:	d80a      	bhi.n	801f9b0 <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801f99a:	3847      	subs	r0, #71	@ 0x47
 801f99c:	4770      	bx	lr
    return c + 52 - '0';
 801f99e:	3004      	adds	r0, #4
 801f9a0:	4770      	bx	lr
    return 64;
 801f9a2:	2040      	movs	r0, #64	@ 0x40
 801f9a4:	4770      	bx	lr
    return -1;
 801f9a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f9aa:	4770      	bx	lr
    return 63;
 801f9ac:	203f      	movs	r0, #63	@ 0x3f
 801f9ae:	4770      	bx	lr
    return -1;
 801f9b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801f9b4:	4770      	bx	lr

0801f9b6 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801f9b6:	3830      	subs	r0, #48	@ 0x30
}
 801f9b8:	2809      	cmp	r0, #9
 801f9ba:	bf8c      	ite	hi
 801f9bc:	2000      	movhi	r0, #0
 801f9be:	2001      	movls	r0, #1
 801f9c0:	4770      	bx	lr
	...

0801f9c4 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801f9c4:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801f9c6:	2365      	movs	r3, #101	@ 0x65
 801f9c8:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801f9ca:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801f9cc:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801f9d0:	dc2c      	bgt.n	801fa2c <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801f9d2:	2909      	cmp	r1, #9
 801f9d4:	dc03      	bgt.n	801f9de <addexp+0x1a>
 801f9d6:	2330      	movs	r3, #48	@ 0x30
 801f9d8:	7083      	strb	r3, [r0, #2]
 801f9da:	2303      	movs	r3, #3
 801f9dc:	e000      	b.n	801f9e0 <addexp+0x1c>
  buf[n++] = (char) sign;
 801f9de:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801f9e0:	2963      	cmp	r1, #99	@ 0x63
 801f9e2:	dd0d      	ble.n	801fa00 <addexp+0x3c>
 801f9e4:	4812      	ldr	r0, [pc, #72]	@ (801fa30 <addexp+0x6c>)
 801f9e6:	fb80 2001 	smull	r2, r0, r0, r1
 801f9ea:	17ca      	asrs	r2, r1, #31
 801f9ec:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801f9f0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801f9f4:	f80c 0003 	strb.w	r0, [ip, r3]
 801f9f8:	2064      	movs	r0, #100	@ 0x64
 801f9fa:	fb00 1112 	mls	r1, r0, r2, r1
 801f9fe:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801fa00:	2909      	cmp	r1, #9
 801fa02:	dd0e      	ble.n	801fa22 <addexp+0x5e>
 801fa04:	480b      	ldr	r0, [pc, #44]	@ (801fa34 <addexp+0x70>)
 801fa06:	fb80 2001 	smull	r2, r0, r0, r1
 801fa0a:	17ca      	asrs	r2, r1, #31
 801fa0c:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801fa10:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801fa14:	f80c 0003 	strb.w	r0, [ip, r3]
 801fa18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fa1c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801fa20:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801fa22:	1c58      	adds	r0, r3, #1
 801fa24:	3130      	adds	r1, #48	@ 0x30
 801fa26:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801fa2a:	4770      	bx	lr
  if (e > 400) return 0;
 801fa2c:	2000      	movs	r0, #0
}
 801fa2e:	4770      	bx	lr
 801fa30:	51eb851f 	.word	0x51eb851f
 801fa34:	66666667 	.word	0x66666667

0801fa38 <xisinf>:

static int xisinf(double x) {
 801fa38:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801fa3c:	4611      	mov	r1, r2
 801fa3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fa42:	4a05      	ldr	r2, [pc, #20]	@ (801fa58 <xisinf+0x20>)
 801fa44:	4293      	cmp	r3, r2
 801fa46:	d001      	beq.n	801fa4c <xisinf+0x14>
 801fa48:	2000      	movs	r0, #0
 801fa4a:	4770      	bx	lr
 801fa4c:	b109      	cbz	r1, 801fa52 <xisinf+0x1a>
 801fa4e:	2000      	movs	r0, #0
 801fa50:	4770      	bx	lr
 801fa52:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801fa54:	4770      	bx	lr
 801fa56:	bf00      	nop
 801fa58:	7ff00000 	.word	0x7ff00000

0801fa5c <xisnan>:

static int xisnan(double x) {
 801fa5c:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801fa60:	4602      	mov	r2, r0
 801fa62:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801fa66:	2a00      	cmp	r2, #0
 801fa68:	bf18      	it	ne
 801fa6a:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801fa6c:	4b02      	ldr	r3, [pc, #8]	@ (801fa78 <xisnan+0x1c>)
 801fa6e:	4298      	cmp	r0, r3
 801fa70:	bf94      	ite	ls
 801fa72:	2000      	movls	r0, #0
 801fa74:	2001      	movhi	r0, #1
 801fa76:	4770      	bx	lr
 801fa78:	7ff00000 	.word	0x7ff00000

0801fa7c <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801fa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa80:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801fa84:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801fa88:	4694      	mov	ip, r2
 801fa8a:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fa8c:	b15c      	cbz	r4, 801faa6 <mg_lld+0x2a>
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	db01      	blt.n	801fa96 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801fa92:	2500      	movs	r5, #0
 801fa94:	e008      	b.n	801faa8 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801fa96:	242d      	movs	r4, #45	@ 0x2d
 801fa98:	7004      	strb	r4, [r0, #0]
 801fa9a:	f1d2 0c00 	rsbs	ip, r2, #0
 801fa9e:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801faa2:	2501      	movs	r5, #1
 801faa4:	e000      	b.n	801faa8 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801faa6:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801faa8:	b909      	cbnz	r1, 801faae <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801faaa:	2400      	movs	r4, #0
 801faac:	e02f      	b.n	801fb0e <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801faae:	2400      	movs	r4, #0
 801fab0:	ea5c 010e 	orrs.w	r1, ip, lr
 801fab4:	d05a      	beq.n	801fb6c <mg_lld+0xf0>
 801fab6:	f00c 060f 	and.w	r6, ip, #15
 801faba:	1929      	adds	r1, r5, r4
 801fabc:	4f38      	ldr	r7, [pc, #224]	@ (801fba0 <mg_lld+0x124>)
 801fabe:	5dbe      	ldrb	r6, [r7, r6]
 801fac0:	5446      	strb	r6, [r0, r1]
 801fac2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801fac6:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801faca:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801face:	3401      	adds	r4, #1
 801fad0:	e7ee      	b.n	801fab0 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801fad2:	2601      	movs	r6, #1
 801fad4:	e022      	b.n	801fb1c <mg_lld+0xa0>
 801fad6:	4421      	add	r1, r4
 801fad8:	4f32      	ldr	r7, [pc, #200]	@ (801fba4 <mg_lld+0x128>)
 801fada:	fba7 4801 	umull	r4, r8, r7, r1
 801fade:	f028 0403 	bic.w	r4, r8, #3
 801fae2:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801fae6:	1b09      	subs	r1, r1, r4
 801fae8:	ebbc 0101 	subs.w	r1, ip, r1
 801faec:	f16e 0e00 	sbc.w	lr, lr, #0
 801faf0:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801faf4:	fb01 f404 	mul.w	r4, r1, r4
 801faf8:	fb07 440e 	mla	r4, r7, lr, r4
 801fafc:	fba1 1707 	umull	r1, r7, r1, r7
 801fb00:	443c      	add	r4, r7
 801fb02:	0849      	lsrs	r1, r1, #1
 801fb04:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801fb08:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801fb0c:	4634      	mov	r4, r6
 801fb0e:	ea5c 010e 	orrs.w	r1, ip, lr
 801fb12:	d02b      	beq.n	801fb6c <mg_lld+0xf0>
 801fb14:	2600      	movs	r6, #0
 801fb16:	eb1c 010e 	adds.w	r1, ip, lr
 801fb1a:	d2da      	bcs.n	801fad2 <mg_lld+0x56>
 801fb1c:	4431      	add	r1, r6
 801fb1e:	4f21      	ldr	r7, [pc, #132]	@ (801fba4 <mg_lld+0x128>)
 801fb20:	fba7 6801 	umull	r6, r8, r7, r1
 801fb24:	f028 0603 	bic.w	r6, r8, #3
 801fb28:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801fb2c:	1b89      	subs	r1, r1, r6
 801fb2e:	ebbc 0101 	subs.w	r1, ip, r1
 801fb32:	f16e 0800 	sbc.w	r8, lr, #0
 801fb36:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801fb3a:	fb01 f606 	mul.w	r6, r1, r6
 801fb3e:	fb07 6608 	mla	r6, r7, r8, r6
 801fb42:	fba1 1707 	umull	r1, r7, r1, r7
 801fb46:	443e      	add	r6, r7
 801fb48:	0849      	lsrs	r1, r1, #1
 801fb4a:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801fb4e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801fb52:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801fb56:	1c66      	adds	r6, r4, #1
 801fb58:	442c      	add	r4, r5
 801fb5a:	4f11      	ldr	r7, [pc, #68]	@ (801fba0 <mg_lld+0x124>)
 801fb5c:	5c79      	ldrb	r1, [r7, r1]
 801fb5e:	5501      	strb	r1, [r0, r4]
 801fb60:	2400      	movs	r4, #0
 801fb62:	eb1c 010e 	adds.w	r1, ip, lr
 801fb66:	d3b6      	bcc.n	801fad6 <mg_lld+0x5a>
 801fb68:	2401      	movs	r4, #1
 801fb6a:	e7b4      	b.n	801fad6 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801fb6c:	2600      	movs	r6, #0
 801fb6e:	e00c      	b.n	801fb8a <mg_lld+0x10e>
    char t = buf[s + i];
 801fb70:	19af      	adds	r7, r5, r6
 801fb72:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801fb76:	1929      	adds	r1, r5, r4
 801fb78:	1b89      	subs	r1, r1, r6
 801fb7a:	3901      	subs	r1, #1
 801fb7c:	f810 e001 	ldrb.w	lr, [r0, r1]
 801fb80:	f800 e007 	strb.w	lr, [r0, r7]
 801fb84:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801fb88:	3601      	adds	r6, #1
 801fb8a:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801fb8e:	d3ef      	bcc.n	801fb70 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801fb90:	4313      	orrs	r3, r2
 801fb92:	d102      	bne.n	801fb9a <mg_lld+0x11e>
 801fb94:	2330      	movs	r3, #48	@ 0x30
 801fb96:	5503      	strb	r3, [r0, r4]
 801fb98:	3401      	adds	r4, #1
  return n + s;
}
 801fb9a:	1928      	adds	r0, r5, r4
 801fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fba0:	08039c44 	.word	0x08039c44
 801fba4:	cccccccd 	.word	0xcccccccd

0801fba8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbac:	4680      	mov	r8, r0
 801fbae:	460f      	mov	r7, r1
 801fbb0:	4616      	mov	r6, r2
 801fbb2:	461d      	mov	r5, r3
  size_t i = 0;
 801fbb4:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801fbb6:	e002      	b.n	801fbbe <scpy+0x16>
 801fbb8:	3401      	adds	r4, #1
 801fbba:	4639      	mov	r1, r7
 801fbbc:	47c0      	blx	r8
 801fbbe:	42ac      	cmp	r4, r5
 801fbc0:	d202      	bcs.n	801fbc8 <scpy+0x20>
 801fbc2:	5d30      	ldrb	r0, [r6, r4]
 801fbc4:	2800      	cmp	r0, #0
 801fbc6:	d1f7      	bne.n	801fbb8 <scpy+0x10>
  return i;
}
 801fbc8:	4620      	mov	r0, r4
 801fbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801fbce <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801fbce:	2000      	movs	r0, #0
 801fbd0:	4770      	bx	lr

0801fbd2 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801fbd2:	4770      	bx	lr

0801fbd4 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801fbd4:	2000      	movs	r0, #0
 801fbd6:	4770      	bx	lr

0801fbd8 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801fbd8:	4770      	bx	lr

0801fbda <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801fbda:	2000      	movs	r0, #0
 801fbdc:	4770      	bx	lr

0801fbde <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801fbde:	2000      	movs	r0, #0
 801fbe0:	4770      	bx	lr

0801fbe2 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801fbe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fbe6:	4770      	bx	lr

0801fbe8 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801fbe8:	2000      	movs	r0, #0
 801fbea:	4770      	bx	lr

0801fbec <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801fbec:	2000      	movs	r0, #0
 801fbee:	4770      	bx	lr

0801fbf0 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801fbf0:	2000      	movs	r0, #0
 801fbf2:	4770      	bx	lr

0801fbf4 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801fbf4:	b530      	push	{r4, r5, lr}
 801fbf6:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801fbf8:	4614      	mov	r4, r2
 801fbfa:	b94a      	cbnz	r2, 801fc10 <mg_ncasecmp+0x1c>
  int diff = 0;
 801fbfc:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801fbfe:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801fc00:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801fc04:	1a18      	subs	r0, r3, r0
 801fc06:	d1fa      	bne.n	801fbfe <mg_ncasecmp+0xa>
 801fc08:	2a00      	cmp	r2, #0
 801fc0a:	d0f8      	beq.n	801fbfe <mg_ncasecmp+0xa>
 801fc0c:	3c01      	subs	r4, #1
 801fc0e:	d0f6      	beq.n	801fbfe <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801fc10:	f89e 2000 	ldrb.w	r2, [lr]
 801fc14:	f10e 0e01 	add.w	lr, lr, #1
 801fc18:	4613      	mov	r3, r2
 801fc1a:	f891 c000 	ldrb.w	ip, [r1]
 801fc1e:	3101      	adds	r1, #1
 801fc20:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801fc22:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801fc26:	2d19      	cmp	r5, #25
 801fc28:	d801      	bhi.n	801fc2e <mg_ncasecmp+0x3a>
 801fc2a:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801fc2e:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801fc32:	2d19      	cmp	r5, #25
 801fc34:	d8e6      	bhi.n	801fc04 <mg_ncasecmp+0x10>
 801fc36:	e7e3      	b.n	801fc00 <mg_ncasecmp+0xc>

0801fc38 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fc38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801fc3c:	2b09      	cmp	r3, #9
 801fc3e:	d908      	bls.n	801fc52 <isx+0x1a>
 801fc40:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801fc44:	2b05      	cmp	r3, #5
 801fc46:	d906      	bls.n	801fc56 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801fc48:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fc4a:	2805      	cmp	r0, #5
 801fc4c:	d805      	bhi.n	801fc5a <isx+0x22>
 801fc4e:	2001      	movs	r0, #1
 801fc50:	4770      	bx	lr
 801fc52:	2001      	movs	r0, #1
 801fc54:	4770      	bx	lr
 801fc56:	2001      	movs	r0, #1
 801fc58:	4770      	bx	lr
 801fc5a:	2000      	movs	r0, #0
}
 801fc5c:	4770      	bx	lr

0801fc5e <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801fc5e:	280a      	cmp	r0, #10
 801fc60:	d007      	beq.n	801fc72 <isok+0x14>
 801fc62:	280d      	cmp	r0, #13
 801fc64:	d007      	beq.n	801fc76 <isok+0x18>
 801fc66:	2809      	cmp	r0, #9
 801fc68:	d007      	beq.n	801fc7a <isok+0x1c>
 801fc6a:	281f      	cmp	r0, #31
 801fc6c:	d907      	bls.n	801fc7e <isok+0x20>
 801fc6e:	2001      	movs	r0, #1
 801fc70:	4770      	bx	lr
 801fc72:	2001      	movs	r0, #1
 801fc74:	4770      	bx	lr
 801fc76:	2001      	movs	r0, #1
 801fc78:	4770      	bx	lr
 801fc7a:	2001      	movs	r0, #1
 801fc7c:	4770      	bx	lr
 801fc7e:	2000      	movs	r0, #0
}
 801fc80:	4770      	bx	lr

0801fc82 <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801fc82:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801fc86:	2880      	cmp	r0, #128	@ 0x80
 801fc88:	bf14      	ite	ne
 801fc8a:	2000      	movne	r0, #0
 801fc8c:	2001      	moveq	r0, #1
 801fc8e:	4770      	bx	lr

0801fc90 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801fc90:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801fc92:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801fc94:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801fc96:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801fc9a:	b2db      	uxtb	r3, r3
 801fc9c:	2b5c      	cmp	r3, #92	@ 0x5c
 801fc9e:	d936      	bls.n	801fd0e <clen+0x7e>
 801fca0:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801fca2:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801fca6:	2bc0      	cmp	r3, #192	@ 0xc0
 801fca8:	d009      	beq.n	801fcbe <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801fcaa:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801fcae:	2be0      	cmp	r3, #224	@ 0xe0
 801fcb0:	d00e      	beq.n	801fcd0 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801fcb2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fcb6:	2df0      	cmp	r5, #240	@ 0xf0
 801fcb8:	d018      	beq.n	801fcec <clen+0x5c>
    return 4;
  return 0;
 801fcba:	2000      	movs	r0, #0
}
 801fcbc:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801fcbe:	2e01      	cmp	r6, #1
 801fcc0:	ddf3      	ble.n	801fcaa <clen+0x1a>
 801fcc2:	7840      	ldrb	r0, [r0, #1]
 801fcc4:	f7ff ffdd 	bl	801fc82 <vcb>
 801fcc8:	2800      	cmp	r0, #0
 801fcca:	d0ee      	beq.n	801fcaa <clen+0x1a>
 801fccc:	2002      	movs	r0, #2
 801fcce:	e7f5      	b.n	801fcbc <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801fcd0:	2e02      	cmp	r6, #2
 801fcd2:	ddee      	ble.n	801fcb2 <clen+0x22>
 801fcd4:	7860      	ldrb	r0, [r4, #1]
 801fcd6:	f7ff ffd4 	bl	801fc82 <vcb>
 801fcda:	2800      	cmp	r0, #0
 801fcdc:	d0e9      	beq.n	801fcb2 <clen+0x22>
 801fcde:	78a0      	ldrb	r0, [r4, #2]
 801fce0:	f7ff ffcf 	bl	801fc82 <vcb>
 801fce4:	2800      	cmp	r0, #0
 801fce6:	d0e4      	beq.n	801fcb2 <clen+0x22>
 801fce8:	2003      	movs	r0, #3
 801fcea:	e7e7      	b.n	801fcbc <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801fcec:	2e03      	cmp	r6, #3
 801fcee:	dd10      	ble.n	801fd12 <clen+0x82>
 801fcf0:	7860      	ldrb	r0, [r4, #1]
 801fcf2:	f7ff ffc6 	bl	801fc82 <vcb>
 801fcf6:	b170      	cbz	r0, 801fd16 <clen+0x86>
 801fcf8:	78a0      	ldrb	r0, [r4, #2]
 801fcfa:	f7ff ffc2 	bl	801fc82 <vcb>
 801fcfe:	b160      	cbz	r0, 801fd1a <clen+0x8a>
 801fd00:	78e0      	ldrb	r0, [r4, #3]
 801fd02:	f7ff ffbe 	bl	801fc82 <vcb>
 801fd06:	2800      	cmp	r0, #0
 801fd08:	d0d8      	beq.n	801fcbc <clen+0x2c>
    return 4;
 801fd0a:	2004      	movs	r0, #4
 801fd0c:	e7d6      	b.n	801fcbc <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801fd0e:	2001      	movs	r0, #1
 801fd10:	e7d4      	b.n	801fcbc <clen+0x2c>
  return 0;
 801fd12:	2000      	movs	r0, #0
 801fd14:	e7d2      	b.n	801fcbc <clen+0x2c>
 801fd16:	2000      	movs	r0, #0
 801fd18:	e7d0      	b.n	801fcbc <clen+0x2c>
 801fd1a:	2000      	movs	r0, #0
 801fd1c:	e7ce      	b.n	801fcbc <clen+0x2c>

0801fd1e <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801fd1e:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801fd20:	e003      	b.n	801fd2a <skiptorn+0xc>
 801fd22:	3001      	adds	r0, #1
 801fd24:	6853      	ldr	r3, [r2, #4]
 801fd26:	3301      	adds	r3, #1
 801fd28:	6053      	str	r3, [r2, #4]
 801fd2a:	4288      	cmp	r0, r1
 801fd2c:	d204      	bcs.n	801fd38 <skiptorn+0x1a>
 801fd2e:	7803      	ldrb	r3, [r0, #0]
 801fd30:	2b0a      	cmp	r3, #10
 801fd32:	d001      	beq.n	801fd38 <skiptorn+0x1a>
 801fd34:	2b0d      	cmp	r3, #13
 801fd36:	d1f4      	bne.n	801fd22 <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fd38:	4288      	cmp	r0, r1
 801fd3a:	d212      	bcs.n	801fd62 <skiptorn+0x44>
 801fd3c:	7803      	ldrb	r3, [r0, #0]
 801fd3e:	2b0d      	cmp	r3, #13
 801fd40:	d008      	beq.n	801fd54 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801fd42:	2b0d      	cmp	r3, #13
 801fd44:	d00b      	beq.n	801fd5e <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801fd46:	4288      	cmp	r0, r1
 801fd48:	d20d      	bcs.n	801fd66 <skiptorn+0x48>
 801fd4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fd4e:	2b0a      	cmp	r3, #10
 801fd50:	d10b      	bne.n	801fd6a <skiptorn+0x4c>
  return s;
}
 801fd52:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fd54:	7842      	ldrb	r2, [r0, #1]
 801fd56:	2a0a      	cmp	r2, #10
 801fd58:	d0f3      	beq.n	801fd42 <skiptorn+0x24>
 801fd5a:	2000      	movs	r0, #0
 801fd5c:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801fd5e:	3001      	adds	r0, #1
 801fd60:	e7f1      	b.n	801fd46 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801fd62:	2000      	movs	r0, #0
 801fd64:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801fd66:	2000      	movs	r0, #0
 801fd68:	4770      	bx	lr
 801fd6a:	2000      	movs	r0, #0
 801fd6c:	e7f1      	b.n	801fd52 <skiptorn+0x34>

0801fd6e <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801fd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd72:	b084      	sub	sp, #16
 801fd74:	4604      	mov	r4, r0
 801fd76:	460d      	mov	r5, r1
 801fd78:	4690      	mov	r8, r2
 801fd7a:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801fd7c:	2600      	movs	r6, #0
 801fd7e:	e04d      	b.n	801fe1c <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801fd80:	7863      	ldrb	r3, [r4, #1]
 801fd82:	2b0a      	cmp	r3, #10
 801fd84:	d158      	bne.n	801fe38 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801fd86:	2001      	movs	r0, #1
 801fd88:	e01e      	b.n	801fdc8 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801fd8a:	4414      	add	r4, r2
 801fd8c:	9b01      	ldr	r3, [sp, #4]
 801fd8e:	4413      	add	r3, r2
 801fd90:	9301      	str	r3, [sp, #4]
 801fd92:	42ac      	cmp	r4, r5
 801fd94:	d209      	bcs.n	801fdaa <mg_http_parse_headers+0x3c>
 801fd96:	7823      	ldrb	r3, [r4, #0]
 801fd98:	2b3a      	cmp	r3, #58	@ 0x3a
 801fd9a:	d006      	beq.n	801fdaa <mg_http_parse_headers+0x3c>
 801fd9c:	4629      	mov	r1, r5
 801fd9e:	4620      	mov	r0, r4
 801fda0:	f7ff ff76 	bl	801fc90 <clen>
 801fda4:	4602      	mov	r2, r0
 801fda6:	2800      	cmp	r0, #0
 801fda8:	d1ef      	bne.n	801fd8a <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801fdaa:	9b01      	ldr	r3, [sp, #4]
 801fdac:	b15b      	cbz	r3, 801fdc6 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801fdae:	42ac      	cmp	r4, r5
 801fdb0:	d209      	bcs.n	801fdc6 <mg_http_parse_headers+0x58>
 801fdb2:	4629      	mov	r1, r5
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f7ff ff6b 	bl	801fc90 <clen>
 801fdba:	b120      	cbz	r0, 801fdc6 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fdc2:	2b3a      	cmp	r3, #58	@ 0x3a
 801fdc4:	d004      	beq.n	801fdd0 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801fdc6:	2000      	movs	r0, #0
}
 801fdc8:	b004      	add	sp, #16
 801fdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801fdce:	3001      	adds	r0, #1
 801fdd0:	42a8      	cmp	r0, r5
 801fdd2:	d204      	bcs.n	801fdde <mg_http_parse_headers+0x70>
 801fdd4:	7803      	ldrb	r3, [r0, #0]
 801fdd6:	2b20      	cmp	r3, #32
 801fdd8:	d0f9      	beq.n	801fdce <mg_http_parse_headers+0x60>
 801fdda:	2b09      	cmp	r3, #9
 801fddc:	d0f7      	beq.n	801fdce <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801fdde:	aa02      	add	r2, sp, #8
 801fde0:	4629      	mov	r1, r5
 801fde2:	f7ff ff9c 	bl	801fd1e <skiptorn>
 801fde6:	4604      	mov	r4, r0
 801fde8:	b908      	cbnz	r0, 801fdee <mg_http_parse_headers+0x80>
 801fdea:	e7ec      	b.n	801fdc6 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801fdec:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801fdee:	9803      	ldr	r0, [sp, #12]
 801fdf0:	b130      	cbz	r0, 801fe00 <mg_http_parse_headers+0x92>
 801fdf2:	3801      	subs	r0, #1
 801fdf4:	9b02      	ldr	r3, [sp, #8]
 801fdf6:	5c1b      	ldrb	r3, [r3, r0]
 801fdf8:	2b20      	cmp	r3, #32
 801fdfa:	d0f7      	beq.n	801fdec <mg_http_parse_headers+0x7e>
 801fdfc:	2b09      	cmp	r3, #9
 801fdfe:	d0f5      	beq.n	801fdec <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801fe00:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801fe04:	466a      	mov	r2, sp
 801fe06:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fe0a:	e883 0003 	stmia.w	r3, {r0, r1}
 801fe0e:	3308      	adds	r3, #8
 801fe10:	aa04      	add	r2, sp, #16
 801fe12:	e912 0003 	ldmdb	r2, {r0, r1}
 801fe16:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801fe1a:	3601      	adds	r6, #1
 801fe1c:	42be      	cmp	r6, r7
 801fe1e:	d20d      	bcs.n	801fe3c <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801fe20:	2300      	movs	r3, #0
 801fe22:	9300      	str	r3, [sp, #0]
 801fe24:	9301      	str	r3, [sp, #4]
 801fe26:	9302      	str	r3, [sp, #8]
 801fe28:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801fe2a:	42ac      	cmp	r4, r5
 801fe2c:	d2cb      	bcs.n	801fdc6 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801fe2e:	7823      	ldrb	r3, [r4, #0]
 801fe30:	2b0a      	cmp	r3, #10
 801fe32:	d0a8      	beq.n	801fd86 <mg_http_parse_headers+0x18>
 801fe34:	2b0d      	cmp	r3, #13
 801fe36:	d0a3      	beq.n	801fd80 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801fe38:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801fe3a:	e7aa      	b.n	801fd92 <mg_http_parse_headers+0x24>
  return true;
 801fe3c:	2001      	movs	r0, #1
 801fe3e:	e7c3      	b.n	801fdc8 <mg_http_parse_headers+0x5a>

0801fe40 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801fe40:	3864      	subs	r0, #100	@ 0x64
 801fe42:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801fe46:	4298      	cmp	r0, r3
 801fe48:	f200 8272 	bhi.w	8020330 <mg_http_status_code_str+0x4f0>
 801fe4c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801fe50:	027201f4 	.word	0x027201f4
 801fe54:	027001f6 	.word	0x027001f6
 801fe58:	02700270 	.word	0x02700270
 801fe5c:	02700270 	.word	0x02700270
 801fe60:	02700270 	.word	0x02700270
 801fe64:	02700270 	.word	0x02700270
 801fe68:	02700270 	.word	0x02700270
 801fe6c:	02700270 	.word	0x02700270
 801fe70:	02700270 	.word	0x02700270
 801fe74:	02700270 	.word	0x02700270
 801fe78:	02700270 	.word	0x02700270
 801fe7c:	02700270 	.word	0x02700270
 801fe80:	02700270 	.word	0x02700270
 801fe84:	02700270 	.word	0x02700270
 801fe88:	02700270 	.word	0x02700270
 801fe8c:	02700270 	.word	0x02700270
 801fe90:	02700270 	.word	0x02700270
 801fe94:	02700270 	.word	0x02700270
 801fe98:	02700270 	.word	0x02700270
 801fe9c:	02700270 	.word	0x02700270
 801fea0:	02700270 	.word	0x02700270
 801fea4:	02700270 	.word	0x02700270
 801fea8:	02700270 	.word	0x02700270
 801feac:	02700270 	.word	0x02700270
 801feb0:	02700270 	.word	0x02700270
 801feb4:	02700270 	.word	0x02700270
 801feb8:	02700270 	.word	0x02700270
 801febc:	02700270 	.word	0x02700270
 801fec0:	02700270 	.word	0x02700270
 801fec4:	02700270 	.word	0x02700270
 801fec8:	02700270 	.word	0x02700270
 801fecc:	02700270 	.word	0x02700270
 801fed0:	02700270 	.word	0x02700270
 801fed4:	02700270 	.word	0x02700270
 801fed8:	02700270 	.word	0x02700270
 801fedc:	02700270 	.word	0x02700270
 801fee0:	02700270 	.word	0x02700270
 801fee4:	02700270 	.word	0x02700270
 801fee8:	02700270 	.word	0x02700270
 801feec:	02700270 	.word	0x02700270
 801fef0:	02700270 	.word	0x02700270
 801fef4:	02700270 	.word	0x02700270
 801fef8:	02700270 	.word	0x02700270
 801fefc:	02700270 	.word	0x02700270
 801ff00:	02700270 	.word	0x02700270
 801ff04:	02700270 	.word	0x02700270
 801ff08:	02700270 	.word	0x02700270
 801ff0c:	02700270 	.word	0x02700270
 801ff10:	02700270 	.word	0x02700270
 801ff14:	02700270 	.word	0x02700270
 801ff18:	01fa01f8 	.word	0x01fa01f8
 801ff1c:	01fe01fc 	.word	0x01fe01fc
 801ff20:	02020200 	.word	0x02020200
 801ff24:	02060204 	.word	0x02060204
 801ff28:	02700208 	.word	0x02700208
 801ff2c:	02700270 	.word	0x02700270
 801ff30:	02700270 	.word	0x02700270
 801ff34:	02700270 	.word	0x02700270
 801ff38:	02700270 	.word	0x02700270
 801ff3c:	02700270 	.word	0x02700270
 801ff40:	02700270 	.word	0x02700270
 801ff44:	02700270 	.word	0x02700270
 801ff48:	02700270 	.word	0x02700270
 801ff4c:	0270020a 	.word	0x0270020a
 801ff50:	02700270 	.word	0x02700270
 801ff54:	02700270 	.word	0x02700270
 801ff58:	02700270 	.word	0x02700270
 801ff5c:	02700270 	.word	0x02700270
 801ff60:	02700270 	.word	0x02700270
 801ff64:	02700270 	.word	0x02700270
 801ff68:	02700270 	.word	0x02700270
 801ff6c:	02700270 	.word	0x02700270
 801ff70:	02700270 	.word	0x02700270
 801ff74:	02700270 	.word	0x02700270
 801ff78:	02700270 	.word	0x02700270
 801ff7c:	02700270 	.word	0x02700270
 801ff80:	02700270 	.word	0x02700270
 801ff84:	02700270 	.word	0x02700270
 801ff88:	02700270 	.word	0x02700270
 801ff8c:	02700270 	.word	0x02700270
 801ff90:	02700270 	.word	0x02700270
 801ff94:	02700270 	.word	0x02700270
 801ff98:	02700270 	.word	0x02700270
 801ff9c:	02700270 	.word	0x02700270
 801ffa0:	02700270 	.word	0x02700270
 801ffa4:	02700270 	.word	0x02700270
 801ffa8:	02700270 	.word	0x02700270
 801ffac:	02700270 	.word	0x02700270
 801ffb0:	02700270 	.word	0x02700270
 801ffb4:	02700270 	.word	0x02700270
 801ffb8:	02700270 	.word	0x02700270
 801ffbc:	02700270 	.word	0x02700270
 801ffc0:	02700270 	.word	0x02700270
 801ffc4:	02700270 	.word	0x02700270
 801ffc8:	02700270 	.word	0x02700270
 801ffcc:	02700270 	.word	0x02700270
 801ffd0:	02700270 	.word	0x02700270
 801ffd4:	02700270 	.word	0x02700270
 801ffd8:	02700270 	.word	0x02700270
 801ffdc:	02700270 	.word	0x02700270
 801ffe0:	020e020c 	.word	0x020e020c
 801ffe4:	02120210 	.word	0x02120210
 801ffe8:	02160214 	.word	0x02160214
 801ffec:	02180270 	.word	0x02180270
 801fff0:	0270021a 	.word	0x0270021a
 801fff4:	02700270 	.word	0x02700270
 801fff8:	02700270 	.word	0x02700270
 801fffc:	02700270 	.word	0x02700270
 8020000:	02700270 	.word	0x02700270
 8020004:	02700270 	.word	0x02700270
 8020008:	02700270 	.word	0x02700270
 802000c:	02700270 	.word	0x02700270
 8020010:	02700270 	.word	0x02700270
 8020014:	02700270 	.word	0x02700270
 8020018:	02700270 	.word	0x02700270
 802001c:	02700270 	.word	0x02700270
 8020020:	02700270 	.word	0x02700270
 8020024:	02700270 	.word	0x02700270
 8020028:	02700270 	.word	0x02700270
 802002c:	02700270 	.word	0x02700270
 8020030:	02700270 	.word	0x02700270
 8020034:	02700270 	.word	0x02700270
 8020038:	02700270 	.word	0x02700270
 802003c:	02700270 	.word	0x02700270
 8020040:	02700270 	.word	0x02700270
 8020044:	02700270 	.word	0x02700270
 8020048:	02700270 	.word	0x02700270
 802004c:	02700270 	.word	0x02700270
 8020050:	02700270 	.word	0x02700270
 8020054:	02700270 	.word	0x02700270
 8020058:	02700270 	.word	0x02700270
 802005c:	02700270 	.word	0x02700270
 8020060:	02700270 	.word	0x02700270
 8020064:	02700270 	.word	0x02700270
 8020068:	02700270 	.word	0x02700270
 802006c:	02700270 	.word	0x02700270
 8020070:	02700270 	.word	0x02700270
 8020074:	02700270 	.word	0x02700270
 8020078:	02700270 	.word	0x02700270
 802007c:	02700270 	.word	0x02700270
 8020080:	02700270 	.word	0x02700270
 8020084:	02700270 	.word	0x02700270
 8020088:	02700270 	.word	0x02700270
 802008c:	02700270 	.word	0x02700270
 8020090:	02700270 	.word	0x02700270
 8020094:	02700270 	.word	0x02700270
 8020098:	02700270 	.word	0x02700270
 802009c:	02700270 	.word	0x02700270
 80200a0:	02700270 	.word	0x02700270
 80200a4:	02700270 	.word	0x02700270
 80200a8:	021e021c 	.word	0x021e021c
 80200ac:	02220220 	.word	0x02220220
 80200b0:	02260224 	.word	0x02260224
 80200b4:	022a0228 	.word	0x022a0228
 80200b8:	022e022c 	.word	0x022e022c
 80200bc:	02320230 	.word	0x02320230
 80200c0:	02360234 	.word	0x02360234
 80200c4:	023a0238 	.word	0x023a0238
 80200c8:	023e023c 	.word	0x023e023c
 80200cc:	02700240 	.word	0x02700240
 80200d0:	02420270 	.word	0x02420270
 80200d4:	02460244 	.word	0x02460244
 80200d8:	02700248 	.word	0x02700248
 80200dc:	0270024a 	.word	0x0270024a
 80200e0:	024e024c 	.word	0x024e024c
 80200e4:	02500270 	.word	0x02500270
 80200e8:	02700270 	.word	0x02700270
 80200ec:	02700270 	.word	0x02700270
 80200f0:	02700270 	.word	0x02700270
 80200f4:	02700270 	.word	0x02700270
 80200f8:	02700270 	.word	0x02700270
 80200fc:	02700270 	.word	0x02700270
 8020100:	02700252 	.word	0x02700252
 8020104:	02700270 	.word	0x02700270
 8020108:	02700270 	.word	0x02700270
 802010c:	02540270 	.word	0x02540270
 8020110:	02700270 	.word	0x02700270
 8020114:	02700270 	.word	0x02700270
 8020118:	02700270 	.word	0x02700270
 802011c:	02700270 	.word	0x02700270
 8020120:	02700270 	.word	0x02700270
 8020124:	02700270 	.word	0x02700270
 8020128:	02700270 	.word	0x02700270
 802012c:	02700270 	.word	0x02700270
 8020130:	02700270 	.word	0x02700270
 8020134:	02700270 	.word	0x02700270
 8020138:	02700270 	.word	0x02700270
 802013c:	02700270 	.word	0x02700270
 8020140:	02700270 	.word	0x02700270
 8020144:	02700270 	.word	0x02700270
 8020148:	02700270 	.word	0x02700270
 802014c:	02700270 	.word	0x02700270
 8020150:	02700270 	.word	0x02700270
 8020154:	02700270 	.word	0x02700270
 8020158:	02700270 	.word	0x02700270
 802015c:	02700270 	.word	0x02700270
 8020160:	02700270 	.word	0x02700270
 8020164:	02700270 	.word	0x02700270
 8020168:	02700270 	.word	0x02700270
 802016c:	02560270 	.word	0x02560270
 8020170:	025a0258 	.word	0x025a0258
 8020174:	025e025c 	.word	0x025e025c
 8020178:	02620260 	.word	0x02620260
 802017c:	02660264 	.word	0x02660264
 8020180:	02700268 	.word	0x02700268
 8020184:	026c026a 	.word	0x026c026a
 8020188:	02700270 	.word	0x02700270
 802018c:	02700270 	.word	0x02700270
 8020190:	02700270 	.word	0x02700270
 8020194:	02700270 	.word	0x02700270
 8020198:	02700270 	.word	0x02700270
 802019c:	02700270 	.word	0x02700270
 80201a0:	02700270 	.word	0x02700270
 80201a4:	02700270 	.word	0x02700270
 80201a8:	02700270 	.word	0x02700270
 80201ac:	02700270 	.word	0x02700270
 80201b0:	02700270 	.word	0x02700270
 80201b4:	02700270 	.word	0x02700270
 80201b8:	02700270 	.word	0x02700270
 80201bc:	02700270 	.word	0x02700270
 80201c0:	02700270 	.word	0x02700270
 80201c4:	02700270 	.word	0x02700270
 80201c8:	02700270 	.word	0x02700270
 80201cc:	02700270 	.word	0x02700270
 80201d0:	02700270 	.word	0x02700270
 80201d4:	02700270 	.word	0x02700270
 80201d8:	02700270 	.word	0x02700270
 80201dc:	02700270 	.word	0x02700270
 80201e0:	02700270 	.word	0x02700270
 80201e4:	02700270 	.word	0x02700270
 80201e8:	02700270 	.word	0x02700270
 80201ec:	02700270 	.word	0x02700270
 80201f0:	02700270 	.word	0x02700270
 80201f4:	02700270 	.word	0x02700270
 80201f8:	02700270 	.word	0x02700270
 80201fc:	02700270 	.word	0x02700270
 8020200:	02700270 	.word	0x02700270
 8020204:	02700270 	.word	0x02700270
 8020208:	02700270 	.word	0x02700270
 802020c:	02700270 	.word	0x02700270
 8020210:	02700270 	.word	0x02700270
 8020214:	02700270 	.word	0x02700270
 8020218:	02700270 	.word	0x02700270
 802021c:	02700270 	.word	0x02700270
 8020220:	02700270 	.word	0x02700270
 8020224:	02700270 	.word	0x02700270
 8020228:	02700270 	.word	0x02700270
 802022c:	02700270 	.word	0x02700270
 8020230:	02700270 	.word	0x02700270
 8020234:	026e0270 	.word	0x026e0270
 8020238:	483f      	ldr	r0, [pc, #252]	@ (8020338 <mg_http_status_code_str+0x4f8>)
 802023a:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 802023c:	483f      	ldr	r0, [pc, #252]	@ (802033c <mg_http_status_code_str+0x4fc>)
 802023e:	4770      	bx	lr
    case 200: return "OK";
 8020240:	483f      	ldr	r0, [pc, #252]	@ (8020340 <mg_http_status_code_str+0x500>)
 8020242:	4770      	bx	lr
    case 201: return "Created";
 8020244:	483f      	ldr	r0, [pc, #252]	@ (8020344 <mg_http_status_code_str+0x504>)
 8020246:	4770      	bx	lr
    case 202: return "Accepted";
 8020248:	483f      	ldr	r0, [pc, #252]	@ (8020348 <mg_http_status_code_str+0x508>)
 802024a:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 802024c:	483f      	ldr	r0, [pc, #252]	@ (802034c <mg_http_status_code_str+0x50c>)
 802024e:	4770      	bx	lr
    case 204: return "No Content";
 8020250:	483f      	ldr	r0, [pc, #252]	@ (8020350 <mg_http_status_code_str+0x510>)
 8020252:	4770      	bx	lr
    case 205: return "Reset Content";
 8020254:	483f      	ldr	r0, [pc, #252]	@ (8020354 <mg_http_status_code_str+0x514>)
 8020256:	4770      	bx	lr
    case 206: return "Partial Content";
 8020258:	483f      	ldr	r0, [pc, #252]	@ (8020358 <mg_http_status_code_str+0x518>)
 802025a:	4770      	bx	lr
    case 207: return "Multi-Status";
 802025c:	483f      	ldr	r0, [pc, #252]	@ (802035c <mg_http_status_code_str+0x51c>)
 802025e:	4770      	bx	lr
    case 208: return "Already Reported";
 8020260:	483f      	ldr	r0, [pc, #252]	@ (8020360 <mg_http_status_code_str+0x520>)
 8020262:	4770      	bx	lr
    case 226: return "IM Used";
 8020264:	483f      	ldr	r0, [pc, #252]	@ (8020364 <mg_http_status_code_str+0x524>)
 8020266:	4770      	bx	lr
    case 300: return "Multiple Choices";
 8020268:	483f      	ldr	r0, [pc, #252]	@ (8020368 <mg_http_status_code_str+0x528>)
 802026a:	4770      	bx	lr
    case 301: return "Moved Permanently";
 802026c:	483f      	ldr	r0, [pc, #252]	@ (802036c <mg_http_status_code_str+0x52c>)
 802026e:	4770      	bx	lr
    case 302: return "Found";
 8020270:	483f      	ldr	r0, [pc, #252]	@ (8020370 <mg_http_status_code_str+0x530>)
 8020272:	4770      	bx	lr
    case 303: return "See Other";
 8020274:	483f      	ldr	r0, [pc, #252]	@ (8020374 <mg_http_status_code_str+0x534>)
 8020276:	4770      	bx	lr
    case 304: return "Not Modified";
 8020278:	483f      	ldr	r0, [pc, #252]	@ (8020378 <mg_http_status_code_str+0x538>)
 802027a:	4770      	bx	lr
    case 305: return "Use Proxy";
 802027c:	483f      	ldr	r0, [pc, #252]	@ (802037c <mg_http_status_code_str+0x53c>)
 802027e:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 8020280:	483f      	ldr	r0, [pc, #252]	@ (8020380 <mg_http_status_code_str+0x540>)
 8020282:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 8020284:	483f      	ldr	r0, [pc, #252]	@ (8020384 <mg_http_status_code_str+0x544>)
 8020286:	4770      	bx	lr
    case 400: return "Bad Request";
 8020288:	483f      	ldr	r0, [pc, #252]	@ (8020388 <mg_http_status_code_str+0x548>)
 802028a:	4770      	bx	lr
    case 401: return "Unauthorized";
 802028c:	483f      	ldr	r0, [pc, #252]	@ (802038c <mg_http_status_code_str+0x54c>)
 802028e:	4770      	bx	lr
    case 402: return "Payment Required";
 8020290:	483f      	ldr	r0, [pc, #252]	@ (8020390 <mg_http_status_code_str+0x550>)
 8020292:	4770      	bx	lr
    case 403: return "Forbidden";
 8020294:	483f      	ldr	r0, [pc, #252]	@ (8020394 <mg_http_status_code_str+0x554>)
 8020296:	4770      	bx	lr
    case 404: return "Not Found";
 8020298:	483f      	ldr	r0, [pc, #252]	@ (8020398 <mg_http_status_code_str+0x558>)
 802029a:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 802029c:	483f      	ldr	r0, [pc, #252]	@ (802039c <mg_http_status_code_str+0x55c>)
 802029e:	4770      	bx	lr
    case 406: return "Not Acceptable";
 80202a0:	483f      	ldr	r0, [pc, #252]	@ (80203a0 <mg_http_status_code_str+0x560>)
 80202a2:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 80202a4:	483f      	ldr	r0, [pc, #252]	@ (80203a4 <mg_http_status_code_str+0x564>)
 80202a6:	4770      	bx	lr
    case 408: return "Request Timeout";
 80202a8:	483f      	ldr	r0, [pc, #252]	@ (80203a8 <mg_http_status_code_str+0x568>)
 80202aa:	4770      	bx	lr
    case 409: return "Conflict";
 80202ac:	483f      	ldr	r0, [pc, #252]	@ (80203ac <mg_http_status_code_str+0x56c>)
 80202ae:	4770      	bx	lr
    case 410: return "Gone";
 80202b0:	483f      	ldr	r0, [pc, #252]	@ (80203b0 <mg_http_status_code_str+0x570>)
 80202b2:	4770      	bx	lr
    case 411: return "Length Required";
 80202b4:	483f      	ldr	r0, [pc, #252]	@ (80203b4 <mg_http_status_code_str+0x574>)
 80202b6:	4770      	bx	lr
    case 412: return "Precondition Failed";
 80202b8:	483f      	ldr	r0, [pc, #252]	@ (80203b8 <mg_http_status_code_str+0x578>)
 80202ba:	4770      	bx	lr
    case 413: return "Payload Too Large";
 80202bc:	483f      	ldr	r0, [pc, #252]	@ (80203bc <mg_http_status_code_str+0x57c>)
 80202be:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 80202c0:	483f      	ldr	r0, [pc, #252]	@ (80203c0 <mg_http_status_code_str+0x580>)
 80202c2:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 80202c4:	483f      	ldr	r0, [pc, #252]	@ (80203c4 <mg_http_status_code_str+0x584>)
 80202c6:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 80202c8:	483f      	ldr	r0, [pc, #252]	@ (80203c8 <mg_http_status_code_str+0x588>)
 80202ca:	4770      	bx	lr
    case 417: return "Expectation Failed";
 80202cc:	483f      	ldr	r0, [pc, #252]	@ (80203cc <mg_http_status_code_str+0x58c>)
 80202ce:	4770      	bx	lr
    case 418: return "I'm a teapot";
 80202d0:	483f      	ldr	r0, [pc, #252]	@ (80203d0 <mg_http_status_code_str+0x590>)
 80202d2:	4770      	bx	lr
    case 421: return "Misdirected Request";
 80202d4:	483f      	ldr	r0, [pc, #252]	@ (80203d4 <mg_http_status_code_str+0x594>)
 80202d6:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 80202d8:	483f      	ldr	r0, [pc, #252]	@ (80203d8 <mg_http_status_code_str+0x598>)
 80202da:	4770      	bx	lr
    case 423: return "Locked";
 80202dc:	483f      	ldr	r0, [pc, #252]	@ (80203dc <mg_http_status_code_str+0x59c>)
 80202de:	4770      	bx	lr
    case 424: return "Failed Dependency";
 80202e0:	483f      	ldr	r0, [pc, #252]	@ (80203e0 <mg_http_status_code_str+0x5a0>)
 80202e2:	4770      	bx	lr
    case 426: return "Upgrade Required";
 80202e4:	483f      	ldr	r0, [pc, #252]	@ (80203e4 <mg_http_status_code_str+0x5a4>)
 80202e6:	4770      	bx	lr
    case 428: return "Precondition Required";
 80202e8:	483f      	ldr	r0, [pc, #252]	@ (80203e8 <mg_http_status_code_str+0x5a8>)
 80202ea:	4770      	bx	lr
    case 429: return "Too Many Requests";
 80202ec:	483f      	ldr	r0, [pc, #252]	@ (80203ec <mg_http_status_code_str+0x5ac>)
 80202ee:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 80202f0:	483f      	ldr	r0, [pc, #252]	@ (80203f0 <mg_http_status_code_str+0x5b0>)
 80202f2:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 80202f4:	483f      	ldr	r0, [pc, #252]	@ (80203f4 <mg_http_status_code_str+0x5b4>)
 80202f6:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 80202f8:	483f      	ldr	r0, [pc, #252]	@ (80203f8 <mg_http_status_code_str+0x5b8>)
 80202fa:	4770      	bx	lr
    case 499: return "Client Closed Request";
 80202fc:	483f      	ldr	r0, [pc, #252]	@ (80203fc <mg_http_status_code_str+0x5bc>)
 80202fe:	4770      	bx	lr
    case 500: return "Internal Server Error";
 8020300:	483f      	ldr	r0, [pc, #252]	@ (8020400 <mg_http_status_code_str+0x5c0>)
 8020302:	4770      	bx	lr
    case 501: return "Not Implemented";
 8020304:	483f      	ldr	r0, [pc, #252]	@ (8020404 <mg_http_status_code_str+0x5c4>)
 8020306:	4770      	bx	lr
    case 502: return "Bad Gateway";
 8020308:	483f      	ldr	r0, [pc, #252]	@ (8020408 <mg_http_status_code_str+0x5c8>)
 802030a:	4770      	bx	lr
    case 503: return "Service Unavailable";
 802030c:	483f      	ldr	r0, [pc, #252]	@ (802040c <mg_http_status_code_str+0x5cc>)
 802030e:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 8020310:	483f      	ldr	r0, [pc, #252]	@ (8020410 <mg_http_status_code_str+0x5d0>)
 8020312:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 8020314:	483f      	ldr	r0, [pc, #252]	@ (8020414 <mg_http_status_code_str+0x5d4>)
 8020316:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 8020318:	483f      	ldr	r0, [pc, #252]	@ (8020418 <mg_http_status_code_str+0x5d8>)
 802031a:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 802031c:	483f      	ldr	r0, [pc, #252]	@ (802041c <mg_http_status_code_str+0x5dc>)
 802031e:	4770      	bx	lr
    case 508: return "Loop Detected";
 8020320:	483f      	ldr	r0, [pc, #252]	@ (8020420 <mg_http_status_code_str+0x5e0>)
 8020322:	4770      	bx	lr
    case 510: return "Not Extended";
 8020324:	483f      	ldr	r0, [pc, #252]	@ (8020424 <mg_http_status_code_str+0x5e4>)
 8020326:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 8020328:	483f      	ldr	r0, [pc, #252]	@ (8020428 <mg_http_status_code_str+0x5e8>)
 802032a:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 802032c:	483f      	ldr	r0, [pc, #252]	@ (802042c <mg_http_status_code_str+0x5ec>)
 802032e:	4770      	bx	lr
    default: return "";
 8020330:	483f      	ldr	r0, [pc, #252]	@ (8020430 <mg_http_status_code_str+0x5f0>)
 8020332:	4770      	bx	lr
    case 101: return "Switching Protocols";
 8020334:	483f      	ldr	r0, [pc, #252]	@ (8020434 <mg_http_status_code_str+0x5f4>)
  }
}
 8020336:	4770      	bx	lr
 8020338:	08039c58 	.word	0x08039c58
 802033c:	08039c78 	.word	0x08039c78
 8020340:	08039c84 	.word	0x08039c84
 8020344:	08039c88 	.word	0x08039c88
 8020348:	08039c90 	.word	0x08039c90
 802034c:	08039c9c 	.word	0x08039c9c
 8020350:	08039cbc 	.word	0x08039cbc
 8020354:	08039cc8 	.word	0x08039cc8
 8020358:	08039cd8 	.word	0x08039cd8
 802035c:	08039ce8 	.word	0x08039ce8
 8020360:	08039cf8 	.word	0x08039cf8
 8020364:	08039d0c 	.word	0x08039d0c
 8020368:	08039d14 	.word	0x08039d14
 802036c:	08039d28 	.word	0x08039d28
 8020370:	08039dcc 	.word	0x08039dcc
 8020374:	08039d3c 	.word	0x08039d3c
 8020378:	08039d48 	.word	0x08039d48
 802037c:	08039d58 	.word	0x08039d58
 8020380:	08039d64 	.word	0x08039d64
 8020384:	08039d78 	.word	0x08039d78
 8020388:	08039d8c 	.word	0x08039d8c
 802038c:	08039d98 	.word	0x08039d98
 8020390:	08039da8 	.word	0x08039da8
 8020394:	08039dbc 	.word	0x08039dbc
 8020398:	08039dc8 	.word	0x08039dc8
 802039c:	08039dd4 	.word	0x08039dd4
 80203a0:	08039de8 	.word	0x08039de8
 80203a4:	08039df8 	.word	0x08039df8
 80203a8:	08039e18 	.word	0x08039e18
 80203ac:	08039e28 	.word	0x08039e28
 80203b0:	08039e34 	.word	0x08039e34
 80203b4:	08039e3c 	.word	0x08039e3c
 80203b8:	08039e4c 	.word	0x08039e4c
 80203bc:	08039e60 	.word	0x08039e60
 80203c0:	08039e74 	.word	0x08039e74
 80203c4:	08039e8c 	.word	0x08039e8c
 80203c8:	08039ea4 	.word	0x08039ea4
 80203cc:	08039ec4 	.word	0x08039ec4
 80203d0:	08039ed8 	.word	0x08039ed8
 80203d4:	08039ee8 	.word	0x08039ee8
 80203d8:	08039efc 	.word	0x08039efc
 80203dc:	08039f14 	.word	0x08039f14
 80203e0:	08039f1c 	.word	0x08039f1c
 80203e4:	08039f30 	.word	0x08039f30
 80203e8:	08039f44 	.word	0x08039f44
 80203ec:	08039f5c 	.word	0x08039f5c
 80203f0:	08039f70 	.word	0x08039f70
 80203f4:	08039f90 	.word	0x08039f90
 80203f8:	08039fb4 	.word	0x08039fb4
 80203fc:	08039fd4 	.word	0x08039fd4
 8020400:	08039fec 	.word	0x08039fec
 8020404:	0803a004 	.word	0x0803a004
 8020408:	0803a014 	.word	0x0803a014
 802040c:	0803a020 	.word	0x0803a020
 8020410:	0803a034 	.word	0x0803a034
 8020414:	0803a044 	.word	0x0803a044
 8020418:	0803a060 	.word	0x0803a060
 802041c:	0803a078 	.word	0x0803a078
 8020420:	0803a090 	.word	0x0803a090
 8020424:	0803a0a0 	.word	0x0803a0a0
 8020428:	0803a0b0 	.word	0x0803a0b0
 802042c:	0803a0d0 	.word	0x0803a0d0
 8020430:	08036a40 	.word	0x08036a40
 8020434:	08039c64 	.word	0x08039c64

08020438 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8020438:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 802043c:	2b09      	cmp	r3, #9
 802043e:	d91c      	bls.n	802047a <mg_is_url_safe+0x42>
 8020440:	285f      	cmp	r0, #95	@ 0x5f
 8020442:	d01c      	beq.n	802047e <mg_is_url_safe+0x46>
 8020444:	dc0d      	bgt.n	8020462 <mg_is_url_safe+0x2a>
 8020446:	282e      	cmp	r0, #46	@ 0x2e
 8020448:	d01b      	beq.n	8020482 <mg_is_url_safe+0x4a>
 802044a:	dd04      	ble.n	8020456 <mg_is_url_safe+0x1e>
 802044c:	3841      	subs	r0, #65	@ 0x41
 802044e:	2819      	cmp	r0, #25
 8020450:	d805      	bhi.n	802045e <mg_is_url_safe+0x26>
 8020452:	2001      	movs	r0, #1
 8020454:	4770      	bx	lr
 8020456:	282d      	cmp	r0, #45	@ 0x2d
 8020458:	d115      	bne.n	8020486 <mg_is_url_safe+0x4e>
 802045a:	2001      	movs	r0, #1
 802045c:	4770      	bx	lr
 802045e:	2000      	movs	r0, #0
 8020460:	4770      	bx	lr
 8020462:	287a      	cmp	r0, #122	@ 0x7a
 8020464:	dd03      	ble.n	802046e <mg_is_url_safe+0x36>
 8020466:	287e      	cmp	r0, #126	@ 0x7e
 8020468:	d10f      	bne.n	802048a <mg_is_url_safe+0x52>
 802046a:	2001      	movs	r0, #1
 802046c:	4770      	bx	lr
 802046e:	2861      	cmp	r0, #97	@ 0x61
 8020470:	da01      	bge.n	8020476 <mg_is_url_safe+0x3e>
 8020472:	2000      	movs	r0, #0
 8020474:	4770      	bx	lr
 8020476:	2001      	movs	r0, #1
 8020478:	4770      	bx	lr
 802047a:	2001      	movs	r0, #1
 802047c:	4770      	bx	lr
 802047e:	2001      	movs	r0, #1
 8020480:	4770      	bx	lr
 8020482:	2001      	movs	r0, #1
 8020484:	4770      	bx	lr
 8020486:	2000      	movs	r0, #0
 8020488:	4770      	bx	lr
 802048a:	2000      	movs	r0, #0
}
 802048c:	4770      	bx	lr

0802048e <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 802048e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020492:	2b09      	cmp	r3, #9
 8020494:	d908      	bls.n	80204a8 <is_hex_digit+0x1a>
 8020496:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802049a:	2b05      	cmp	r3, #5
 802049c:	d906      	bls.n	80204ac <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 802049e:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80204a0:	2805      	cmp	r0, #5
 80204a2:	d805      	bhi.n	80204b0 <is_hex_digit+0x22>
 80204a4:	2001      	movs	r0, #1
 80204a6:	4770      	bx	lr
 80204a8:	2001      	movs	r0, #1
 80204aa:	4770      	bx	lr
 80204ac:	2001      	movs	r0, #1
 80204ae:	4770      	bx	lr
 80204b0:	2000      	movs	r0, #0
}
 80204b2:	4770      	bx	lr

080204b4 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 80204b4:	b129      	cbz	r1, 80204c2 <roundup+0xe>
 80204b6:	4408      	add	r0, r1
 80204b8:	3801      	subs	r0, #1
 80204ba:	fbb0 f0f1 	udiv	r0, r0, r1
 80204be:	fb01 f000 	mul.w	r0, r1, r0
}
 80204c2:	4770      	bx	lr

080204c4 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 80204c4:	b108      	cbz	r0, 80204ca <escapeseq+0x6>
 80204c6:	4802      	ldr	r0, [pc, #8]	@ (80204d0 <escapeseq+0xc>)
 80204c8:	4770      	bx	lr
 80204ca:	4802      	ldr	r0, [pc, #8]	@ (80204d4 <escapeseq+0x10>)
}
 80204cc:	4770      	bx	lr
 80204ce:	bf00      	nop
 80204d0:	0803a0f0 	.word	0x0803a0f0
 80204d4:	0803a0f8 	.word	0x0803a0f8

080204d8 <json_esc>:

static char json_esc(int c, int esc) {
 80204d8:	b570      	push	{r4, r5, r6, lr}
 80204da:	4604      	mov	r4, r0
 80204dc:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 80204de:	4608      	mov	r0, r1
 80204e0:	f7ff fff0 	bl	80204c4 <escapeseq>
 80204e4:	4606      	mov	r6, r0
 80204e6:	fab5 f085 	clz	r0, r5
 80204ea:	0940      	lsrs	r0, r0, #5
 80204ec:	f7ff ffea 	bl	80204c4 <escapeseq>
 80204f0:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 80204f2:	4633      	mov	r3, r6
 80204f4:	e000      	b.n	80204f8 <json_esc+0x20>
 80204f6:	3301      	adds	r3, #1
 80204f8:	7818      	ldrb	r0, [r3, #0]
 80204fa:	b118      	cbz	r0, 8020504 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 80204fc:	42a0      	cmp	r0, r4
 80204fe:	d1fa      	bne.n	80204f6 <json_esc+0x1e>
 8020500:	1b9b      	subs	r3, r3, r6
 8020502:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8020504:	bd70      	pop	{r4, r5, r6, pc}

08020506 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8020506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802050a:	4607      	mov	r7, r0
 802050c:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 802050e:	2400      	movs	r4, #0
 8020510:	e003      	b.n	802051a <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 8020512:	b1d5      	cbz	r5, 802054a <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 8020514:	2d22      	cmp	r5, #34	@ 0x22
 8020516:	d015      	beq.n	8020544 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 8020518:	3401      	adds	r4, #1
 802051a:	42b4      	cmp	r4, r6
 802051c:	da10      	bge.n	8020540 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 802051e:	4623      	mov	r3, r4
 8020520:	5d3d      	ldrb	r5, [r7, r4]
 8020522:	2d5c      	cmp	r5, #92	@ 0x5c
 8020524:	d1f5      	bne.n	8020512 <mg_pass_string+0xc>
 8020526:	f104 0801 	add.w	r8, r4, #1
 802052a:	45b0      	cmp	r8, r6
 802052c:	daf1      	bge.n	8020512 <mg_pass_string+0xc>
 802052e:	443b      	add	r3, r7
 8020530:	2101      	movs	r1, #1
 8020532:	7858      	ldrb	r0, [r3, #1]
 8020534:	f7ff ffd0 	bl	80204d8 <json_esc>
 8020538:	2800      	cmp	r0, #0
 802053a:	d0ea      	beq.n	8020512 <mg_pass_string+0xc>
      i++;
 802053c:	4644      	mov	r4, r8
 802053e:	e7eb      	b.n	8020518 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 8020540:	f06f 0401 	mvn.w	r4, #1
}
 8020544:	4620      	mov	r0, r4
 8020546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 802054a:	f06f 0401 	mvn.w	r4, #1
 802054e:	e7f9      	b.n	8020544 <mg_pass_string+0x3e>

08020550 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8020550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020554:	ed2d 8b02 	vpush	{d8}
 8020558:	b085      	sub	sp, #20
 802055a:	4681      	mov	r9, r0
 802055c:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 802055e:	f1b1 0800 	subs.w	r8, r1, #0
 8020562:	dd49      	ble.n	80205f8 <mg_atod+0xa8>
 8020564:	7803      	ldrb	r3, [r0, #0]
 8020566:	2b2d      	cmp	r3, #45	@ 0x2d
 8020568:	d04c      	beq.n	8020604 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 802056a:	2b2b      	cmp	r3, #43	@ 0x2b
 802056c:	d04e      	beq.n	802060c <mg_atod+0xbc>
  int i = 0, sign = 1;
 802056e:	f04f 0a01 	mov.w	sl, #1
 8020572:	2400      	movs	r4, #0
 8020574:	e043      	b.n	80205fe <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 8020576:	2200      	movs	r2, #0
 8020578:	4b71      	ldr	r3, [pc, #452]	@ (8020740 <mg_atod+0x1f0>)
 802057a:	4630      	mov	r0, r6
 802057c:	4639      	mov	r1, r7
 802057e:	f7f0 f853 	bl	8010628 <__aeabi_dmul>
 8020582:	4606      	mov	r6, r0
 8020584:	460f      	mov	r7, r1
    d += p[i] - '0';
 8020586:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 802058a:	f7ef ffe3 	bl	8010554 <__aeabi_i2d>
 802058e:	4632      	mov	r2, r6
 8020590:	463b      	mov	r3, r7
 8020592:	f7ef fe93 	bl	80102bc <__adddf3>
 8020596:	4606      	mov	r6, r0
 8020598:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 802059a:	3401      	adds	r4, #1
 802059c:	4544      	cmp	r4, r8
 802059e:	da05      	bge.n	80205ac <mg_atod+0x5c>
 80205a0:	f819 5004 	ldrb.w	r5, [r9, r4]
 80205a4:	2d2f      	cmp	r5, #47	@ 0x2f
 80205a6:	d901      	bls.n	80205ac <mg_atod+0x5c>
 80205a8:	2d39      	cmp	r5, #57	@ 0x39
 80205aa:	d9e4      	bls.n	8020576 <mg_atod+0x26>
  }
  d *= sign;
 80205ac:	4650      	mov	r0, sl
 80205ae:	f7ef ffd1 	bl	8010554 <__aeabi_i2d>
 80205b2:	4602      	mov	r2, r0
 80205b4:	460b      	mov	r3, r1
 80205b6:	ec43 2b18 	vmov	d8, r2, r3
 80205ba:	4632      	mov	r2, r6
 80205bc:	463b      	mov	r3, r7
 80205be:	f7f0 f833 	bl	8010628 <__aeabi_dmul>
 80205c2:	4606      	mov	r6, r0
 80205c4:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 80205c6:	4544      	cmp	r4, r8
 80205c8:	da03      	bge.n	80205d2 <mg_atod+0x82>
 80205ca:	f819 3004 	ldrb.w	r3, [r9, r4]
 80205ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80205d0:	d020      	beq.n	8020614 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80205d2:	4544      	cmp	r4, r8
 80205d4:	f280 80a1 	bge.w	802071a <mg_atod+0x1ca>
 80205d8:	f819 3004 	ldrb.w	r3, [r9, r4]
 80205dc:	2b65      	cmp	r3, #101	@ 0x65
 80205de:	d002      	beq.n	80205e6 <mg_atod+0x96>
 80205e0:	2b45      	cmp	r3, #69	@ 0x45
 80205e2:	f040 809a 	bne.w	802071a <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 80205e6:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 80205e8:	4598      	cmp	r8, r3
 80205ea:	dd58      	ble.n	802069e <mg_atod+0x14e>
 80205ec:	f819 2003 	ldrb.w	r2, [r9, r3]
 80205f0:	2a2d      	cmp	r2, #45	@ 0x2d
 80205f2:	d051      	beq.n	8020698 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 80205f4:	2200      	movs	r2, #0
 80205f6:	e053      	b.n	80206a0 <mg_atod+0x150>
  int i = 0, sign = 1;
 80205f8:	f04f 0a01 	mov.w	sl, #1
 80205fc:	2400      	movs	r4, #0
    i++;
 80205fe:	2600      	movs	r6, #0
 8020600:	2700      	movs	r7, #0
 8020602:	e7cb      	b.n	802059c <mg_atod+0x4c>
    sign = -1, i++;
 8020604:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8020608:	2401      	movs	r4, #1
 802060a:	e7f8      	b.n	80205fe <mg_atod+0xae>
  int i = 0, sign = 1;
 802060c:	f04f 0a01 	mov.w	sl, #1
    i++;
 8020610:	4654      	mov	r4, sl
 8020612:	e7f4      	b.n	80205fe <mg_atod+0xae>
    i++;
 8020614:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 8020616:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 802061a:	e9db ab00 	ldrd	sl, fp, [fp]
 802061e:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8020738 <mg_atod+0x1e8>
 8020622:	ec53 2b17 	vmov	r2, r3, d7
 8020626:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802062a:	464f      	mov	r7, r9
 802062c:	4645      	mov	r5, r8
 802062e:	4690      	mov	r8, r2
 8020630:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020632:	e017      	b.n	8020664 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 8020634:	3830      	subs	r0, #48	@ 0x30
 8020636:	f7ef ff8d 	bl	8010554 <__aeabi_i2d>
 802063a:	4652      	mov	r2, sl
 802063c:	465b      	mov	r3, fp
 802063e:	f7ef fff3 	bl	8010628 <__aeabi_dmul>
 8020642:	4602      	mov	r2, r0
 8020644:	460b      	mov	r3, r1
 8020646:	4640      	mov	r0, r8
 8020648:	4649      	mov	r1, r9
 802064a:	f7ef fe37 	bl	80102bc <__adddf3>
 802064e:	4680      	mov	r8, r0
 8020650:	4689      	mov	r9, r1
      base /= 10.0;
 8020652:	2200      	movs	r2, #0
 8020654:	4b3a      	ldr	r3, [pc, #232]	@ (8020740 <mg_atod+0x1f0>)
 8020656:	4650      	mov	r0, sl
 8020658:	4659      	mov	r1, fp
 802065a:	f7f0 f90f 	bl	801087c <__aeabi_ddiv>
 802065e:	4682      	mov	sl, r0
 8020660:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8020662:	3401      	adds	r4, #1
 8020664:	42ac      	cmp	r4, r5
 8020666:	da04      	bge.n	8020672 <mg_atod+0x122>
 8020668:	5d38      	ldrb	r0, [r7, r4]
 802066a:	282f      	cmp	r0, #47	@ 0x2f
 802066c:	d901      	bls.n	8020672 <mg_atod+0x122>
 802066e:	2839      	cmp	r0, #57	@ 0x39
 8020670:	d9e0      	bls.n	8020634 <mg_atod+0xe4>
    d += frac * sign;
 8020672:	4642      	mov	r2, r8
 8020674:	464b      	mov	r3, r9
 8020676:	46b9      	mov	r9, r7
 8020678:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802067c:	46a8      	mov	r8, r5
 802067e:	ec51 0b18 	vmov	r0, r1, d8
 8020682:	f7ef ffd1 	bl	8010628 <__aeabi_dmul>
 8020686:	4602      	mov	r2, r0
 8020688:	460b      	mov	r3, r1
 802068a:	4630      	mov	r0, r6
 802068c:	4639      	mov	r1, r7
 802068e:	f7ef fe15 	bl	80102bc <__adddf3>
 8020692:	4606      	mov	r6, r0
 8020694:	460f      	mov	r7, r1
 8020696:	e79c      	b.n	80205d2 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 8020698:	1ca3      	adds	r3, r4, #2
 802069a:	2201      	movs	r2, #1
 802069c:	e000      	b.n	80206a0 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 802069e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 80206a0:	4543      	cmp	r3, r8
 80206a2:	da03      	bge.n	80206ac <mg_atod+0x15c>
 80206a4:	f819 1003 	ldrb.w	r1, [r9, r3]
 80206a8:	292b      	cmp	r1, #43	@ 0x2b
 80206aa:	d013      	beq.n	80206d4 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 80206ac:	461c      	mov	r4, r3
 80206ae:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80206b0:	4544      	cmp	r4, r8
 80206b2:	da11      	bge.n	80206d8 <mg_atod+0x188>
 80206b4:	f819 3004 	ldrb.w	r3, [r9, r4]
 80206b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80206ba:	d90d      	bls.n	80206d8 <mg_atod+0x188>
 80206bc:	2b39      	cmp	r3, #57	@ 0x39
 80206be:	d80b      	bhi.n	80206d8 <mg_atod+0x188>
 80206c0:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 80206c4:	da08      	bge.n	80206d8 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 80206c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80206ca:	3401      	adds	r4, #1
 80206cc:	3b30      	subs	r3, #48	@ 0x30
 80206ce:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80206d2:	e7ed      	b.n	80206b0 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 80206d4:	3301      	adds	r3, #1
 80206d6:	e7e9      	b.n	80206ac <mg_atod+0x15c>
    if (minus) exp = -exp;
 80206d8:	b102      	cbz	r2, 80206dc <mg_atod+0x18c>
 80206da:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 80206dc:	f04f 0800 	mov.w	r8, #0
 80206e0:	e009      	b.n	80206f6 <mg_atod+0x1a6>
 80206e2:	2200      	movs	r2, #0
 80206e4:	4b16      	ldr	r3, [pc, #88]	@ (8020740 <mg_atod+0x1f0>)
 80206e6:	4630      	mov	r0, r6
 80206e8:	4639      	mov	r1, r7
 80206ea:	f7ef ff9d 	bl	8010628 <__aeabi_dmul>
 80206ee:	4606      	mov	r6, r0
 80206f0:	460f      	mov	r7, r1
 80206f2:	f108 0801 	add.w	r8, r8, #1
 80206f6:	45a8      	cmp	r8, r5
 80206f8:	dbf3      	blt.n	80206e2 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 80206fa:	f04f 0800 	mov.w	r8, #0
 80206fe:	e009      	b.n	8020714 <mg_atod+0x1c4>
 8020700:	2200      	movs	r2, #0
 8020702:	4b0f      	ldr	r3, [pc, #60]	@ (8020740 <mg_atod+0x1f0>)
 8020704:	4630      	mov	r0, r6
 8020706:	4639      	mov	r1, r7
 8020708:	f7f0 f8b8 	bl	801087c <__aeabi_ddiv>
 802070c:	4606      	mov	r6, r0
 802070e:	460f      	mov	r7, r1
 8020710:	f108 0801 	add.w	r8, r8, #1
 8020714:	426b      	negs	r3, r5
 8020716:	4543      	cmp	r3, r8
 8020718:	dcf2      	bgt.n	8020700 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 802071a:	9b01      	ldr	r3, [sp, #4]
 802071c:	b103      	cbz	r3, 8020720 <mg_atod+0x1d0>
 802071e:	601c      	str	r4, [r3, #0]
  return d;
}
 8020720:	ec47 6b10 	vmov	d0, r6, r7
 8020724:	b005      	add	sp, #20
 8020726:	ecbd 8b02 	vpop	{d8}
 802072a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802072e:	bf00      	nop
 8020730:	9999999a 	.word	0x9999999a
 8020734:	3fb99999 	.word	0x3fb99999
	...
 8020740:	40240000 	.word	0x40240000

08020744 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020744:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020746:	4b03      	ldr	r3, [pc, #12]	@ (8020754 <logc+0x10>)
 8020748:	681b      	ldr	r3, [r3, #0]
 802074a:	4a03      	ldr	r2, [pc, #12]	@ (8020758 <logc+0x14>)
 802074c:	6811      	ldr	r1, [r2, #0]
 802074e:	4798      	blx	r3
}
 8020750:	bd08      	pop	{r3, pc}
 8020752:	bf00      	nop
 8020754:	20000128 	.word	0x20000128
 8020758:	20019ee0 	.word	0x20019ee0

0802075c <logs>:

static void logs(const char *buf, size_t len) {
 802075c:	b570      	push	{r4, r5, r6, lr}
 802075e:	4606      	mov	r6, r0
 8020760:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8020762:	2400      	movs	r4, #0
 8020764:	e003      	b.n	802076e <logs+0x12>
 8020766:	5d30      	ldrb	r0, [r6, r4]
 8020768:	f7ff ffec 	bl	8020744 <logc>
 802076c:	3401      	adds	r4, #1
 802076e:	42ac      	cmp	r4, r5
 8020770:	d3f9      	bcc.n	8020766 <logs+0xa>
}
 8020772:	bd70      	pop	{r4, r5, r6, pc}

08020774 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8020774:	2809      	cmp	r0, #9
 8020776:	d803      	bhi.n	8020780 <nibble+0xc>
 8020778:	b2c0      	uxtb	r0, r0
 802077a:	3030      	adds	r0, #48	@ 0x30
 802077c:	b2c0      	uxtb	r0, r0
 802077e:	4770      	bx	lr
 8020780:	b2c0      	uxtb	r0, r0
 8020782:	3057      	adds	r0, #87	@ 0x57
 8020784:	b2c0      	uxtb	r0, r0
}
 8020786:	4770      	bx	lr

08020788 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8020788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802078c:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 802078e:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8020790:	6883      	ldr	r3, [r0, #8]
 8020792:	68c2      	ldr	r2, [r0, #12]
 8020794:	4053      	eors	r3, r2
 8020796:	4033      	ands	r3, r6
 8020798:	4053      	eors	r3, r2
 802079a:	f8d1 a000 	ldr.w	sl, [r1]
 802079e:	4453      	add	r3, sl
 80207a0:	6802      	ldr	r2, [r0, #0]
 80207a2:	4413      	add	r3, r2
 80207a4:	4ae0      	ldr	r2, [pc, #896]	@ (8020b28 <mg_md5_transform+0x3a0>)
 80207a6:	441a      	add	r2, r3
 80207a8:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 80207ac:	6883      	ldr	r3, [r0, #8]
 80207ae:	ea86 0503 	eor.w	r5, r6, r3
 80207b2:	4015      	ands	r5, r2
 80207b4:	405d      	eors	r5, r3
 80207b6:	684b      	ldr	r3, [r1, #4]
 80207b8:	9301      	str	r3, [sp, #4]
 80207ba:	441d      	add	r5, r3
 80207bc:	68c4      	ldr	r4, [r0, #12]
 80207be:	4425      	add	r5, r4
 80207c0:	4bda      	ldr	r3, [pc, #872]	@ (8020b2c <mg_md5_transform+0x3a4>)
 80207c2:	442b      	add	r3, r5
 80207c4:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 80207c8:	ea86 0502 	eor.w	r5, r6, r2
 80207cc:	401d      	ands	r5, r3
 80207ce:	960b      	str	r6, [sp, #44]	@ 0x2c
 80207d0:	4075      	eors	r5, r6
 80207d2:	688c      	ldr	r4, [r1, #8]
 80207d4:	4425      	add	r5, r4
 80207d6:	6886      	ldr	r6, [r0, #8]
 80207d8:	4435      	add	r5, r6
 80207da:	4ed5      	ldr	r6, [pc, #852]	@ (8020b30 <mg_md5_transform+0x3a8>)
 80207dc:	442e      	add	r6, r5
 80207de:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 80207e2:	ea82 0703 	eor.w	r7, r2, r3
 80207e6:	ea07 070c 	and.w	r7, r7, ip
 80207ea:	4057      	eors	r7, r2
 80207ec:	68cd      	ldr	r5, [r1, #12]
 80207ee:	950a      	str	r5, [sp, #40]	@ 0x28
 80207f0:	442f      	add	r7, r5
 80207f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80207f4:	4437      	add	r7, r6
 80207f6:	4dcf      	ldr	r5, [pc, #828]	@ (8020b34 <mg_md5_transform+0x3ac>)
 80207f8:	443d      	add	r5, r7
 80207fa:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 80207fe:	ea83 070c 	eor.w	r7, r3, ip
 8020802:	402f      	ands	r7, r5
 8020804:	405f      	eors	r7, r3
 8020806:	690e      	ldr	r6, [r1, #16]
 8020808:	9602      	str	r6, [sp, #8]
 802080a:	4437      	add	r7, r6
 802080c:	4417      	add	r7, r2
 802080e:	4aca      	ldr	r2, [pc, #808]	@ (8020b38 <mg_md5_transform+0x3b0>)
 8020810:	443a      	add	r2, r7
 8020812:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 8020816:	ea8c 0705 	eor.w	r7, ip, r5
 802081a:	4017      	ands	r7, r2
 802081c:	ea87 070c 	eor.w	r7, r7, ip
 8020820:	694e      	ldr	r6, [r1, #20]
 8020822:	9603      	str	r6, [sp, #12]
 8020824:	4437      	add	r7, r6
 8020826:	441f      	add	r7, r3
 8020828:	4bc4      	ldr	r3, [pc, #784]	@ (8020b3c <mg_md5_transform+0x3b4>)
 802082a:	443b      	add	r3, r7
 802082c:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 8020830:	ea85 0702 	eor.w	r7, r5, r2
 8020834:	401f      	ands	r7, r3
 8020836:	406f      	eors	r7, r5
 8020838:	698e      	ldr	r6, [r1, #24]
 802083a:	9604      	str	r6, [sp, #16]
 802083c:	4437      	add	r7, r6
 802083e:	eb0c 0607 	add.w	r6, ip, r7
 8020842:	4fbf      	ldr	r7, [pc, #764]	@ (8020b40 <mg_md5_transform+0x3b8>)
 8020844:	4437      	add	r7, r6
 8020846:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802084a:	ea82 0603 	eor.w	r6, r2, r3
 802084e:	ea06 060c 	and.w	r6, r6, ip
 8020852:	4056      	eors	r6, r2
 8020854:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8020858:	444e      	add	r6, r9
 802085a:	4435      	add	r5, r6
 802085c:	4fb9      	ldr	r7, [pc, #740]	@ (8020b44 <mg_md5_transform+0x3bc>)
 802085e:	442f      	add	r7, r5
 8020860:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 8020864:	ea83 050c 	eor.w	r5, r3, ip
 8020868:	403d      	ands	r5, r7
 802086a:	405d      	eors	r5, r3
 802086c:	6a0e      	ldr	r6, [r1, #32]
 802086e:	9605      	str	r6, [sp, #20]
 8020870:	4435      	add	r5, r6
 8020872:	442a      	add	r2, r5
 8020874:	4eb4      	ldr	r6, [pc, #720]	@ (8020b48 <mg_md5_transform+0x3c0>)
 8020876:	4416      	add	r6, r2
 8020878:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 802087c:	ea8c 0207 	eor.w	r2, ip, r7
 8020880:	4032      	ands	r2, r6
 8020882:	ea82 020c 	eor.w	r2, r2, ip
 8020886:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8020888:	9506      	str	r5, [sp, #24]
 802088a:	442a      	add	r2, r5
 802088c:	4413      	add	r3, r2
 802088e:	4daf      	ldr	r5, [pc, #700]	@ (8020b4c <mg_md5_transform+0x3c4>)
 8020890:	441d      	add	r5, r3
 8020892:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8020896:	ea87 0306 	eor.w	r3, r7, r6
 802089a:	402b      	ands	r3, r5
 802089c:	407b      	eors	r3, r7
 802089e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80208a0:	9207      	str	r2, [sp, #28]
 80208a2:	4413      	add	r3, r2
 80208a4:	4463      	add	r3, ip
 80208a6:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 80208aa:	3b4f      	subs	r3, #79	@ 0x4f
 80208ac:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 80208b0:	ea86 0c05 	eor.w	ip, r6, r5
 80208b4:	ea0c 0c03 	and.w	ip, ip, r3
 80208b8:	ea8c 0c06 	eor.w	ip, ip, r6
 80208bc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80208be:	9208      	str	r2, [sp, #32]
 80208c0:	4494      	add	ip, r2
 80208c2:	4467      	add	r7, ip
 80208c4:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8020b70 <mg_md5_transform+0x3e8>
 80208c8:	44be      	add	lr, r7
 80208ca:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 80208ce:	ea85 0c03 	eor.w	ip, r5, r3
 80208d2:	ea0c 0c0e 	and.w	ip, ip, lr
 80208d6:	ea8c 0c05 	eor.w	ip, ip, r5
 80208da:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 80208dc:	44bc      	add	ip, r7
 80208de:	4466      	add	r6, ip
 80208e0:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8020b74 <mg_md5_transform+0x3ec>
 80208e4:	44b4      	add	ip, r6
 80208e6:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 80208ea:	ea83 080e 	eor.w	r8, r3, lr
 80208ee:	ea08 080c 	and.w	r8, r8, ip
 80208f2:	ea88 0803 	eor.w	r8, r8, r3
 80208f6:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 80208f8:	44b0      	add	r8, r6
 80208fa:	44a8      	add	r8, r5
 80208fc:	4d94      	ldr	r5, [pc, #592]	@ (8020b50 <mg_md5_transform+0x3c8>)
 80208fe:	4445      	add	r5, r8
 8020900:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 8020904:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020908:	ea0b 0b05 	and.w	fp, fp, r5
 802090c:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020910:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 8020914:	44c3      	add	fp, r8
 8020916:	449b      	add	fp, r3
 8020918:	4b8e      	ldr	r3, [pc, #568]	@ (8020b54 <mg_md5_transform+0x3cc>)
 802091a:	445b      	add	r3, fp
 802091c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 8020920:	ea8c 0b05 	eor.w	fp, ip, r5
 8020924:	ea0b 0b03 	and.w	fp, fp, r3
 8020928:	ea8b 0b0c 	eor.w	fp, fp, ip
 802092c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 802092e:	9109      	str	r1, [sp, #36]	@ 0x24
 8020930:	448b      	add	fp, r1
 8020932:	44f3      	add	fp, lr
 8020934:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8020b78 <mg_md5_transform+0x3f0>
 8020938:	44de      	add	lr, fp
 802093a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 802093e:	ea83 0b0e 	eor.w	fp, r3, lr
 8020942:	ea0b 0b05 	and.w	fp, fp, r5
 8020946:	ea8b 0b03 	eor.w	fp, fp, r3
 802094a:	9a01      	ldr	r2, [sp, #4]
 802094c:	4493      	add	fp, r2
 802094e:	44e3      	add	fp, ip
 8020950:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020b7c <mg_md5_transform+0x3f4>
 8020954:	44dc      	add	ip, fp
 8020956:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 802095a:	ea8e 0b0c 	eor.w	fp, lr, ip
 802095e:	ea0b 0b03 	and.w	fp, fp, r3
 8020962:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020966:	9a04      	ldr	r2, [sp, #16]
 8020968:	4493      	add	fp, r2
 802096a:	44ab      	add	fp, r5
 802096c:	4d7a      	ldr	r5, [pc, #488]	@ (8020b58 <mg_md5_transform+0x3d0>)
 802096e:	445d      	add	r5, fp
 8020970:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8020974:	ea8c 0b05 	eor.w	fp, ip, r5
 8020978:	ea0b 0b0e 	and.w	fp, fp, lr
 802097c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020980:	9908      	ldr	r1, [sp, #32]
 8020982:	448b      	add	fp, r1
 8020984:	445b      	add	r3, fp
 8020986:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8020b80 <mg_md5_transform+0x3f8>
 802098a:	449b      	add	fp, r3
 802098c:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8020990:	ea85 030b 	eor.w	r3, r5, fp
 8020994:	ea03 030c 	and.w	r3, r3, ip
 8020998:	406b      	eors	r3, r5
 802099a:	4453      	add	r3, sl
 802099c:	4473      	add	r3, lr
 802099e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8020b84 <mg_md5_transform+0x3fc>
 80209a2:	449e      	add	lr, r3
 80209a4:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 80209a8:	ea8b 030e 	eor.w	r3, fp, lr
 80209ac:	402b      	ands	r3, r5
 80209ae:	ea83 030b 	eor.w	r3, r3, fp
 80209b2:	9a03      	ldr	r2, [sp, #12]
 80209b4:	4413      	add	r3, r2
 80209b6:	449c      	add	ip, r3
 80209b8:	4b68      	ldr	r3, [pc, #416]	@ (8020b5c <mg_md5_transform+0x3d4>)
 80209ba:	4463      	add	r3, ip
 80209bc:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 80209c0:	ea8e 0c03 	eor.w	ip, lr, r3
 80209c4:	ea0c 0c0b 	and.w	ip, ip, fp
 80209c8:	ea8c 0c0e 	eor.w	ip, ip, lr
 80209cc:	9a07      	ldr	r2, [sp, #28]
 80209ce:	4494      	add	ip, r2
 80209d0:	4465      	add	r5, ip
 80209d2:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020b88 <mg_md5_transform+0x400>
 80209d6:	44ac      	add	ip, r5
 80209d8:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 80209dc:	ea83 050c 	eor.w	r5, r3, ip
 80209e0:	ea05 050e 	and.w	r5, r5, lr
 80209e4:	405d      	eors	r5, r3
 80209e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80209e8:	440d      	add	r5, r1
 80209ea:	445d      	add	r5, fp
 80209ec:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8020b8c <mg_md5_transform+0x404>
 80209f0:	44ab      	add	fp, r5
 80209f2:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 80209f6:	ea8c 050b 	eor.w	r5, ip, fp
 80209fa:	401d      	ands	r5, r3
 80209fc:	ea85 050c 	eor.w	r5, r5, ip
 8020a00:	9a02      	ldr	r2, [sp, #8]
 8020a02:	4415      	add	r5, r2
 8020a04:	44ae      	add	lr, r5
 8020a06:	4d56      	ldr	r5, [pc, #344]	@ (8020b60 <mg_md5_transform+0x3d8>)
 8020a08:	4475      	add	r5, lr
 8020a0a:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 8020a0e:	ea8b 0e05 	eor.w	lr, fp, r5
 8020a12:	ea0e 0e0c 	and.w	lr, lr, ip
 8020a16:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020a1a:	9906      	ldr	r1, [sp, #24]
 8020a1c:	448e      	add	lr, r1
 8020a1e:	4473      	add	r3, lr
 8020a20:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8020b90 <mg_md5_transform+0x408>
 8020a24:	449e      	add	lr, r3
 8020a26:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 8020a2a:	ea85 030e 	eor.w	r3, r5, lr
 8020a2e:	ea03 030b 	and.w	r3, r3, fp
 8020a32:	406b      	eors	r3, r5
 8020a34:	4443      	add	r3, r8
 8020a36:	4463      	add	r3, ip
 8020a38:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8020b94 <mg_md5_transform+0x40c>
 8020a3c:	449c      	add	ip, r3
 8020a3e:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8020a42:	ea8e 030c 	eor.w	r3, lr, ip
 8020a46:	402b      	ands	r3, r5
 8020a48:	ea83 030e 	eor.w	r3, r3, lr
 8020a4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a4e:	4413      	add	r3, r2
 8020a50:	449b      	add	fp, r3
 8020a52:	4b44      	ldr	r3, [pc, #272]	@ (8020b64 <mg_md5_transform+0x3dc>)
 8020a54:	445b      	add	r3, fp
 8020a56:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 8020a5a:	ea8c 0b03 	eor.w	fp, ip, r3
 8020a5e:	ea0b 0b0e 	and.w	fp, fp, lr
 8020a62:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020a66:	9905      	ldr	r1, [sp, #20]
 8020a68:	448b      	add	fp, r1
 8020a6a:	445d      	add	r5, fp
 8020a6c:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8020b98 <mg_md5_transform+0x410>
 8020a70:	44ab      	add	fp, r5
 8020a72:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8020a76:	ea83 050b 	eor.w	r5, r3, fp
 8020a7a:	ea05 050c 	and.w	r5, r5, ip
 8020a7e:	405d      	eors	r5, r3
 8020a80:	4435      	add	r5, r6
 8020a82:	4475      	add	r5, lr
 8020a84:	f8df e114 	ldr.w	lr, [pc, #276]	@ 8020b9c <mg_md5_transform+0x414>
 8020a88:	44ae      	add	lr, r5
 8020a8a:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 8020a8e:	ea8b 050e 	eor.w	r5, fp, lr
 8020a92:	401d      	ands	r5, r3
 8020a94:	ea85 050b 	eor.w	r5, r5, fp
 8020a98:	4425      	add	r5, r4
 8020a9a:	44ac      	add	ip, r5
 8020a9c:	4d32      	ldr	r5, [pc, #200]	@ (8020b68 <mg_md5_transform+0x3e0>)
 8020a9e:	4465      	add	r5, ip
 8020aa0:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8020aa4:	ea8e 0c05 	eor.w	ip, lr, r5
 8020aa8:	ea0c 0c0b 	and.w	ip, ip, fp
 8020aac:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020ab0:	44cc      	add	ip, r9
 8020ab2:	4463      	add	r3, ip
 8020ab4:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8020ba0 <mg_md5_transform+0x418>
 8020ab8:	449c      	add	ip, r3
 8020aba:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 8020abe:	ea85 030c 	eor.w	r3, r5, ip
 8020ac2:	ea03 030e 	and.w	r3, r3, lr
 8020ac6:	406b      	eors	r3, r5
 8020ac8:	443b      	add	r3, r7
 8020aca:	445b      	add	r3, fp
 8020acc:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8020ba4 <mg_md5_transform+0x41c>
 8020ad0:	449b      	add	fp, r3
 8020ad2:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8020ad6:	ea8c 030b 	eor.w	r3, ip, fp
 8020ada:	406b      	eors	r3, r5
 8020adc:	9a03      	ldr	r2, [sp, #12]
 8020ade:	4413      	add	r3, r2
 8020ae0:	4473      	add	r3, lr
 8020ae2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 8020ae6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 8020aea:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 8020aee:	ea8b 0e03 	eor.w	lr, fp, r3
 8020af2:	ea8e 0e0c 	eor.w	lr, lr, ip
 8020af6:	448e      	add	lr, r1
 8020af8:	44ae      	add	lr, r5
 8020afa:	4d1c      	ldr	r5, [pc, #112]	@ (8020b6c <mg_md5_transform+0x3e4>)
 8020afc:	4475      	add	r5, lr
 8020afe:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 8020b02:	ea83 0e05 	eor.w	lr, r3, r5
 8020b06:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020b0a:	9908      	ldr	r1, [sp, #32]
 8020b0c:	448e      	add	lr, r1
 8020b0e:	44f4      	add	ip, lr
 8020b10:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8020ba8 <mg_md5_transform+0x420>
 8020b14:	44e6      	add	lr, ip
 8020b16:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 8020b1a:	ea85 0c0e 	eor.w	ip, r5, lr
 8020b1e:	ea8c 0c03 	eor.w	ip, ip, r3
 8020b22:	44c4      	add	ip, r8
 8020b24:	44e3      	add	fp, ip
 8020b26:	e041      	b.n	8020bac <mg_md5_transform+0x424>
 8020b28:	d76aa478 	.word	0xd76aa478
 8020b2c:	e8c7b756 	.word	0xe8c7b756
 8020b30:	242070db 	.word	0x242070db
 8020b34:	c1bdceee 	.word	0xc1bdceee
 8020b38:	f57c0faf 	.word	0xf57c0faf
 8020b3c:	4787c62a 	.word	0x4787c62a
 8020b40:	a8304613 	.word	0xa8304613
 8020b44:	fd469501 	.word	0xfd469501
 8020b48:	698098d8 	.word	0x698098d8
 8020b4c:	8b44f7af 	.word	0x8b44f7af
 8020b50:	fd987193 	.word	0xfd987193
 8020b54:	a679438e 	.word	0xa679438e
 8020b58:	c040b340 	.word	0xc040b340
 8020b5c:	d62f105d 	.word	0xd62f105d
 8020b60:	e7d3fbc8 	.word	0xe7d3fbc8
 8020b64:	f4d50d87 	.word	0xf4d50d87
 8020b68:	fcefa3f8 	.word	0xfcefa3f8
 8020b6c:	8771f681 	.word	0x8771f681
 8020b70:	895cd7be 	.word	0x895cd7be
 8020b74:	6b901122 	.word	0x6b901122
 8020b78:	49b40821 	.word	0x49b40821
 8020b7c:	f61e2562 	.word	0xf61e2562
 8020b80:	265e5a51 	.word	0x265e5a51
 8020b84:	e9b6c7aa 	.word	0xe9b6c7aa
 8020b88:	02441453 	.word	0x02441453
 8020b8c:	d8a1e681 	.word	0xd8a1e681
 8020b90:	21e1cde6 	.word	0x21e1cde6
 8020b94:	c33707d6 	.word	0xc33707d6
 8020b98:	455a14ed 	.word	0x455a14ed
 8020b9c:	a9e3e905 	.word	0xa9e3e905
 8020ba0:	676f02d9 	.word	0x676f02d9
 8020ba4:	8d2a4c8a 	.word	0x8d2a4c8a
 8020ba8:	6d9d6122 	.word	0x6d9d6122
 8020bac:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8020e74 <mg_md5_transform+0x6ec>
 8020bb0:	44dc      	add	ip, fp
 8020bb2:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8020bb6:	ea8e 0b0c 	eor.w	fp, lr, ip
 8020bba:	ea8b 0b05 	eor.w	fp, fp, r5
 8020bbe:	9a01      	ldr	r2, [sp, #4]
 8020bc0:	4493      	add	fp, r2
 8020bc2:	449b      	add	fp, r3
 8020bc4:	4b99      	ldr	r3, [pc, #612]	@ (8020e2c <mg_md5_transform+0x6a4>)
 8020bc6:	445b      	add	r3, fp
 8020bc8:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 8020bcc:	ea8c 0b03 	eor.w	fp, ip, r3
 8020bd0:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020bd4:	9a02      	ldr	r2, [sp, #8]
 8020bd6:	4493      	add	fp, r2
 8020bd8:	445d      	add	r5, fp
 8020bda:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8020e78 <mg_md5_transform+0x6f0>
 8020bde:	44ab      	add	fp, r5
 8020be0:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 8020be4:	ea83 050b 	eor.w	r5, r3, fp
 8020be8:	ea85 050c 	eor.w	r5, r5, ip
 8020bec:	444d      	add	r5, r9
 8020bee:	44ae      	add	lr, r5
 8020bf0:	4d8f      	ldr	r5, [pc, #572]	@ (8020e30 <mg_md5_transform+0x6a8>)
 8020bf2:	4475      	add	r5, lr
 8020bf4:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 8020bf8:	ea8b 0e05 	eor.w	lr, fp, r5
 8020bfc:	ea8e 0e03 	eor.w	lr, lr, r3
 8020c00:	9a07      	ldr	r2, [sp, #28]
 8020c02:	4496      	add	lr, r2
 8020c04:	44e6      	add	lr, ip
 8020c06:	f8df c274 	ldr.w	ip, [pc, #628]	@ 8020e7c <mg_md5_transform+0x6f4>
 8020c0a:	44f4      	add	ip, lr
 8020c0c:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 8020c10:	ea85 0e0c 	eor.w	lr, r5, ip
 8020c14:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020c18:	44b6      	add	lr, r6
 8020c1a:	4473      	add	r3, lr
 8020c1c:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8020e80 <mg_md5_transform+0x6f8>
 8020c20:	449e      	add	lr, r3
 8020c22:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 8020c26:	ea8c 030e 	eor.w	r3, ip, lr
 8020c2a:	406b      	eors	r3, r5
 8020c2c:	4453      	add	r3, sl
 8020c2e:	449b      	add	fp, r3
 8020c30:	4b80      	ldr	r3, [pc, #512]	@ (8020e34 <mg_md5_transform+0x6ac>)
 8020c32:	445b      	add	r3, fp
 8020c34:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 8020c38:	ea8e 0b03 	eor.w	fp, lr, r3
 8020c3c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020c40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020c42:	4493      	add	fp, r2
 8020c44:	445d      	add	r5, fp
 8020c46:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8020e84 <mg_md5_transform+0x6fc>
 8020c4a:	44ab      	add	fp, r5
 8020c4c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8020c50:	ea83 050b 	eor.w	r5, r3, fp
 8020c54:	ea85 050e 	eor.w	r5, r5, lr
 8020c58:	9904      	ldr	r1, [sp, #16]
 8020c5a:	440d      	add	r5, r1
 8020c5c:	4465      	add	r5, ip
 8020c5e:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020e88 <mg_md5_transform+0x700>
 8020c62:	44ac      	add	ip, r5
 8020c64:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8020c68:	ea8b 050c 	eor.w	r5, fp, ip
 8020c6c:	405d      	eors	r5, r3
 8020c6e:	9906      	ldr	r1, [sp, #24]
 8020c70:	440d      	add	r5, r1
 8020c72:	44ae      	add	lr, r5
 8020c74:	4d70      	ldr	r5, [pc, #448]	@ (8020e38 <mg_md5_transform+0x6b0>)
 8020c76:	4475      	add	r5, lr
 8020c78:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 8020c7c:	ea8c 0e05 	eor.w	lr, ip, r5
 8020c80:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020c84:	44be      	add	lr, r7
 8020c86:	4473      	add	r3, lr
 8020c88:	f8df e200 	ldr.w	lr, [pc, #512]	@ 8020e8c <mg_md5_transform+0x704>
 8020c8c:	449e      	add	lr, r3
 8020c8e:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8020c92:	ea85 030e 	eor.w	r3, r5, lr
 8020c96:	ea83 030c 	eor.w	r3, r3, ip
 8020c9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020c9c:	440b      	add	r3, r1
 8020c9e:	445b      	add	r3, fp
 8020ca0:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8020e90 <mg_md5_transform+0x708>
 8020ca4:	449b      	add	fp, r3
 8020ca6:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 8020caa:	ea8e 030b 	eor.w	r3, lr, fp
 8020cae:	406b      	eors	r3, r5
 8020cb0:	940a      	str	r4, [sp, #40]	@ 0x28
 8020cb2:	4423      	add	r3, r4
 8020cb4:	449c      	add	ip, r3
 8020cb6:	4b61      	ldr	r3, [pc, #388]	@ (8020e3c <mg_md5_transform+0x6b4>)
 8020cb8:	4463      	add	r3, ip
 8020cba:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 8020cbe:	ea63 0c0e 	orn	ip, r3, lr
 8020cc2:	ea8c 0c0b 	eor.w	ip, ip, fp
 8020cc6:	44e2      	add	sl, ip
 8020cc8:	44aa      	add	sl, r5
 8020cca:	4d5d      	ldr	r5, [pc, #372]	@ (8020e40 <mg_md5_transform+0x6b8>)
 8020ccc:	4455      	add	r5, sl
 8020cce:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8020cd2:	ea65 0c0b 	orn	ip, r5, fp
 8020cd6:	ea8c 0c03 	eor.w	ip, ip, r3
 8020cda:	44e1      	add	r9, ip
 8020cdc:	44f1      	add	r9, lr
 8020cde:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020e94 <mg_md5_transform+0x70c>
 8020ce2:	44cc      	add	ip, r9
 8020ce4:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 8020ce8:	ea6c 0e03 	orn	lr, ip, r3
 8020cec:	ea8e 0e05 	eor.w	lr, lr, r5
 8020cf0:	44f0      	add	r8, lr
 8020cf2:	44d8      	add	r8, fp
 8020cf4:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8020e98 <mg_md5_transform+0x710>
 8020cf8:	44c6      	add	lr, r8
 8020cfa:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 8020cfe:	ea6e 0805 	orn	r8, lr, r5
 8020d02:	ea88 080c 	eor.w	r8, r8, ip
 8020d06:	9c03      	ldr	r4, [sp, #12]
 8020d08:	44a0      	add	r8, r4
 8020d0a:	4498      	add	r8, r3
 8020d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8020e44 <mg_md5_transform+0x6bc>)
 8020d0e:	4443      	add	r3, r8
 8020d10:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 8020d14:	ea63 080c 	orn	r8, r3, ip
 8020d18:	ea88 080e 	eor.w	r8, r8, lr
 8020d1c:	4447      	add	r7, r8
 8020d1e:	442f      	add	r7, r5
 8020d20:	4d49      	ldr	r5, [pc, #292]	@ (8020e48 <mg_md5_transform+0x6c0>)
 8020d22:	443d      	add	r5, r7
 8020d24:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 8020d28:	ea65 070e 	orn	r7, r5, lr
 8020d2c:	405f      	eors	r7, r3
 8020d2e:	4417      	add	r7, r2
 8020d30:	44bc      	add	ip, r7
 8020d32:	4f46      	ldr	r7, [pc, #280]	@ (8020e4c <mg_md5_transform+0x6c4>)
 8020d34:	4467      	add	r7, ip
 8020d36:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 8020d3a:	ea67 0c03 	orn	ip, r7, r3
 8020d3e:	ea8c 0c05 	eor.w	ip, ip, r5
 8020d42:	9a07      	ldr	r2, [sp, #28]
 8020d44:	4462      	add	r2, ip
 8020d46:	4472      	add	r2, lr
 8020d48:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8020d4c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8020d50:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8020d54:	ea62 0c05 	orn	ip, r2, r5
 8020d58:	ea8c 0c07 	eor.w	ip, ip, r7
 8020d5c:	9c01      	ldr	r4, [sp, #4]
 8020d5e:	44a4      	add	ip, r4
 8020d60:	449c      	add	ip, r3
 8020d62:	4b3b      	ldr	r3, [pc, #236]	@ (8020e50 <mg_md5_transform+0x6c8>)
 8020d64:	4463      	add	r3, ip
 8020d66:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 8020d6a:	ea63 0c07 	orn	ip, r3, r7
 8020d6e:	ea8c 0c02 	eor.w	ip, ip, r2
 8020d72:	9905      	ldr	r1, [sp, #20]
 8020d74:	448c      	add	ip, r1
 8020d76:	44ac      	add	ip, r5
 8020d78:	4d36      	ldr	r5, [pc, #216]	@ (8020e54 <mg_md5_transform+0x6cc>)
 8020d7a:	4465      	add	r5, ip
 8020d7c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8020d80:	ea65 0c02 	orn	ip, r5, r2
 8020d84:	ea8c 0c03 	eor.w	ip, ip, r3
 8020d88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020d8a:	4461      	add	r1, ip
 8020d8c:	440f      	add	r7, r1
 8020d8e:	4932      	ldr	r1, [pc, #200]	@ (8020e58 <mg_md5_transform+0x6d0>)
 8020d90:	4439      	add	r1, r7
 8020d92:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8020d96:	ea61 0703 	orn	r7, r1, r3
 8020d9a:	406f      	eors	r7, r5
 8020d9c:	9c04      	ldr	r4, [sp, #16]
 8020d9e:	4427      	add	r7, r4
 8020da0:	4417      	add	r7, r2
 8020da2:	4a2e      	ldr	r2, [pc, #184]	@ (8020e5c <mg_md5_transform+0x6d4>)
 8020da4:	443a      	add	r2, r7
 8020da6:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 8020daa:	ea62 0705 	orn	r7, r2, r5
 8020dae:	404f      	eors	r7, r1
 8020db0:	443e      	add	r6, r7
 8020db2:	4433      	add	r3, r6
 8020db4:	4e2a      	ldr	r6, [pc, #168]	@ (8020e60 <mg_md5_transform+0x6d8>)
 8020db6:	441e      	add	r6, r3
 8020db8:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 8020dbc:	ea66 0301 	orn	r3, r6, r1
 8020dc0:	4053      	eors	r3, r2
 8020dc2:	9f02      	ldr	r7, [sp, #8]
 8020dc4:	443b      	add	r3, r7
 8020dc6:	441d      	add	r5, r3
 8020dc8:	4b26      	ldr	r3, [pc, #152]	@ (8020e64 <mg_md5_transform+0x6dc>)
 8020dca:	442b      	add	r3, r5
 8020dcc:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8020dd0:	ea63 0502 	orn	r5, r3, r2
 8020dd4:	4075      	eors	r5, r6
 8020dd6:	9f08      	ldr	r7, [sp, #32]
 8020dd8:	443d      	add	r5, r7
 8020dda:	440d      	add	r5, r1
 8020ddc:	4922      	ldr	r1, [pc, #136]	@ (8020e68 <mg_md5_transform+0x6e0>)
 8020dde:	4429      	add	r1, r5
 8020de0:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 8020de4:	ea61 0506 	orn	r5, r1, r6
 8020de8:	405d      	eors	r5, r3
 8020dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020dec:	4425      	add	r5, r4
 8020dee:	442a      	add	r2, r5
 8020df0:	4d1e      	ldr	r5, [pc, #120]	@ (8020e6c <mg_md5_transform+0x6e4>)
 8020df2:	4415      	add	r5, r2
 8020df4:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 8020df8:	ea65 0203 	orn	r2, r5, r3
 8020dfc:	404a      	eors	r2, r1
 8020dfe:	9c06      	ldr	r4, [sp, #24]
 8020e00:	4422      	add	r2, r4
 8020e02:	4432      	add	r2, r6
 8020e04:	4e1a      	ldr	r6, [pc, #104]	@ (8020e70 <mg_md5_transform+0x6e8>)
 8020e06:	4416      	add	r6, r2
 8020e08:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 8020e0c:	6802      	ldr	r2, [r0, #0]
 8020e0e:	4413      	add	r3, r2
 8020e10:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 8020e12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020e14:	4434      	add	r4, r6
 8020e16:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 8020e18:	6883      	ldr	r3, [r0, #8]
 8020e1a:	441d      	add	r5, r3
 8020e1c:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 8020e1e:	68c3      	ldr	r3, [r0, #12]
 8020e20:	4419      	add	r1, r3
 8020e22:	60c1      	str	r1, [r0, #12]
}
 8020e24:	b00d      	add	sp, #52	@ 0x34
 8020e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e2a:	bf00      	nop
 8020e2c:	a4beea44 	.word	0xa4beea44
 8020e30:	f6bb4b60 	.word	0xf6bb4b60
 8020e34:	eaa127fa 	.word	0xeaa127fa
 8020e38:	d9d4d039 	.word	0xd9d4d039
 8020e3c:	c4ac5665 	.word	0xc4ac5665
 8020e40:	f4292244 	.word	0xf4292244
 8020e44:	fc93a039 	.word	0xfc93a039
 8020e48:	655b59c3 	.word	0x655b59c3
 8020e4c:	8f0ccc92 	.word	0x8f0ccc92
 8020e50:	85845dd1 	.word	0x85845dd1
 8020e54:	6fa87e4f 	.word	0x6fa87e4f
 8020e58:	fe2ce6e0 	.word	0xfe2ce6e0
 8020e5c:	a3014314 	.word	0xa3014314
 8020e60:	4e0811a1 	.word	0x4e0811a1
 8020e64:	f7537e82 	.word	0xf7537e82
 8020e68:	bd3af235 	.word	0xbd3af235
 8020e6c:	2ad7d2bb 	.word	0x2ad7d2bb
 8020e70:	eb86d391 	.word	0xeb86d391
 8020e74:	fde5380c 	.word	0xfde5380c
 8020e78:	4bdecfa9 	.word	0x4bdecfa9
 8020e7c:	bebfbc70 	.word	0xbebfbc70
 8020e80:	289b7ec6 	.word	0x289b7ec6
 8020e84:	d4ef3085 	.word	0xd4ef3085
 8020e88:	04881d05 	.word	0x04881d05
 8020e8c:	e6db99e5 	.word	0xe6db99e5
 8020e90:	1fa27cf8 	.word	0x1fa27cf8
 8020e94:	432aff97 	.word	0x432aff97
 8020e98:	ab9423a7 	.word	0xab9423a7

08020e9c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 8020e9c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 8020e9e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8020ea0:	3001      	adds	r0, #1
 8020ea2:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8020ea4:	2a7f      	cmp	r2, #127	@ 0x7f
 8020ea6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 8020eaa:	d8f9      	bhi.n	8020ea0 <varint_size+0x4>
  return bytes_needed;
}
 8020eac:	4770      	bx	lr

08020eae <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 8020eae:	b500      	push	{lr}
 8020eb0:	4686      	mov	lr, r0
  size_t len = 0;
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	e007      	b.n	8020ec6 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8020eb6:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 8020eba:	1c58      	adds	r0, r3, #1
 8020ebc:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8020ec0:	2a7f      	cmp	r2, #127	@ 0x7f
 8020ec2:	d907      	bls.n	8020ed4 <encode_varint+0x26>
    buf[len++] = b;
 8020ec4:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8020ec6:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 8020eca:	460a      	mov	r2, r1
 8020ecc:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 8020ece:	2a7f      	cmp	r2, #127	@ 0x7f
 8020ed0:	d9f3      	bls.n	8020eba <encode_varint+0xc>
 8020ed2:	e7f0      	b.n	8020eb6 <encode_varint+0x8>

  return len;
}
 8020ed4:	f85d fb04 	ldr.w	pc, [sp], #4

08020ed8 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8020ed8:	2300      	movs	r3, #0
 8020eda:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 8020edc:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 8020ee0:	2b03      	cmp	r3, #3
 8020ee2:	d81d      	bhi.n	8020f20 <decode_varint+0x48>
 8020ee4:	428b      	cmp	r3, r1
 8020ee6:	d219      	bcs.n	8020f1c <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 8020ee8:	b530      	push	{r4, r5, lr}
 8020eea:	e003      	b.n	8020ef4 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8020eec:	1c58      	adds	r0, r3, #1
 8020eee:	e012      	b.n	8020f16 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8020ef0:	428b      	cmp	r3, r1
 8020ef2:	d211      	bcs.n	8020f18 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 8020ef4:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 8020ef8:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 8020efc:	6815      	ldr	r5, [r2, #0]
 8020efe:	fb0c 5404 	mla	r4, ip, r4, r5
 8020f02:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 8020f04:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 8020f08:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 8020f0c:	d0ee      	beq.n	8020eec <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 8020f0e:	3301      	adds	r3, #1
 8020f10:	2b03      	cmp	r3, #3
 8020f12:	d9ed      	bls.n	8020ef0 <decode_varint+0x18>
  }

  return 0;
 8020f14:	2000      	movs	r0, #0
}
 8020f16:	bd30      	pop	{r4, r5, pc}
  return 0;
 8020f18:	2000      	movs	r0, #0
 8020f1a:	e7fc      	b.n	8020f16 <decode_varint+0x3e>
 8020f1c:	2000      	movs	r0, #0
 8020f1e:	4770      	bx	lr
 8020f20:	2000      	movs	r0, #0
}
 8020f22:	4770      	bx	lr

08020f24 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 8020f24:	2300      	movs	r3, #0
 8020f26:	2b1a      	cmp	r3, #26
 8020f28:	d80b      	bhi.n	8020f42 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8020f2a:	4a07      	ldr	r2, [pc, #28]	@ (8020f48 <mqtt_prop_type_by_id+0x24>)
 8020f2c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8020f30:	4282      	cmp	r2, r0
 8020f32:	d001      	beq.n	8020f38 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 8020f34:	3301      	adds	r3, #1
 8020f36:	e7f6      	b.n	8020f26 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8020f38:	4a03      	ldr	r2, [pc, #12]	@ (8020f48 <mqtt_prop_type_by_id+0x24>)
 8020f3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020f3e:	7858      	ldrb	r0, [r3, #1]
 8020f40:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8020f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8020f46:	4770      	bx	lr
 8020f48:	0803b4b8 	.word	0x0803b4b8

08020f4c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 8020f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f50:	4606      	mov	r6, r0
 8020f52:	4688      	mov	r8, r1
  size_t i, size = 0;
 8020f54:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8020f56:	462c      	mov	r4, r5
 8020f58:	e005      	b.n	8020f66 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 8020f5a:	697d      	ldr	r5, [r7, #20]
 8020f5c:	68fb      	ldr	r3, [r7, #12]
 8020f5e:	441d      	add	r5, r3
 8020f60:	444d      	add	r5, r9
 8020f62:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8020f64:	3401      	adds	r4, #1
 8020f66:	4544      	cmp	r4, r8
 8020f68:	d231      	bcs.n	8020fce <get_properties_length+0x82>
    size++;  // identifier
 8020f6a:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8020f6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8020f72:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8020f76:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 8020f7a:	f7ff ffd3 	bl	8020f24 <mqtt_prop_type_by_id>
 8020f7e:	2806      	cmp	r0, #6
 8020f80:	d824      	bhi.n	8020fcc <get_properties_length+0x80>
 8020f82:	a301      	add	r3, pc, #4	@ (adr r3, 8020f88 <get_properties_length+0x3c>)
 8020f84:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8020f88:	08020fc9 	.word	0x08020fc9
 8020f8c:	08020fa5 	.word	0x08020fa5
 8020f90:	08020f5b 	.word	0x08020f5b
 8020f94:	08020fad 	.word	0x08020fad
 8020f98:	08020fb5 	.word	0x08020fb5
 8020f9c:	08020fc1 	.word	0x08020fc1
 8020fa0:	08020fc5 	.word	0x08020fc5
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8020fa4:	697d      	ldr	r5, [r7, #20]
 8020fa6:	444d      	add	r5, r9
 8020fa8:	3502      	adds	r5, #2
        break;
 8020faa:	e7db      	b.n	8020f64 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8020fac:	697d      	ldr	r5, [r7, #20]
 8020fae:	444d      	add	r5, r9
 8020fb0:	3502      	adds	r5, #2
        break;
 8020fb2:	e7d7      	b.n	8020f64 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8020fb4:	6878      	ldr	r0, [r7, #4]
 8020fb6:	f7ff ff71 	bl	8020e9c <varint_size>
 8020fba:	eb00 0509 	add.w	r5, r0, r9
        break;
 8020fbe:	e7d1      	b.n	8020f64 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8020fc0:	3505      	adds	r5, #5
        break;
 8020fc2:	e7cf      	b.n	8020f64 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8020fc4:	3503      	adds	r5, #3
        break;
 8020fc6:	e7cd      	b.n	8020f64 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8020fc8:	3502      	adds	r5, #2
        break;
 8020fca:	e7cb      	b.n	8020f64 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8020fcc:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 8020fce:	4628      	mov	r0, r5
 8020fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020fd4 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8020fd4:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8020fd6:	f7ff ffb9 	bl	8020f4c <get_properties_length>
 8020fda:	4604      	mov	r4, r0
  size += varint_size(size);
 8020fdc:	f7ff ff5e 	bl	8020e9c <varint_size>
  return size;
}
 8020fe0:	4420      	add	r0, r4
 8020fe2:	bd10      	pop	{r4, pc}

08020fe4 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8020fe4:	b410      	push	{r4}
 8020fe6:	b085      	sub	sp, #20
 8020fe8:	466b      	mov	r3, sp
 8020fea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 8020fee:	2300      	movs	r3, #0
 8020ff0:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 8020ff2:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 8020ff4:	9901      	ldr	r1, [sp, #4]
 8020ff6:	4299      	cmp	r1, r3
 8020ff8:	d92c      	bls.n	8021054 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 8020ffa:	9c00      	ldr	r4, [sp, #0]
 8020ffc:	5ce1      	ldrb	r1, [r4, r3]
 8020ffe:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 8021002:	b2c0      	uxtb	r0, r0
 8021004:	2809      	cmp	r0, #9
 8021006:	d812      	bhi.n	802102e <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 8021008:	f10c 0010 	add.w	r0, ip, #16
 802100c:	4468      	add	r0, sp
 802100e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8021012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021016:	3930      	subs	r1, #48	@ 0x30
 8021018:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 802101c:	29ff      	cmp	r1, #255	@ 0xff
 802101e:	dc28      	bgt.n	8021072 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 8021020:	f10c 0010 	add.w	r0, ip, #16
 8021024:	4468      	add	r0, sp
 8021026:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 802102a:	3301      	adds	r3, #1
 802102c:	e7e2      	b.n	8020ff4 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 802102e:	292e      	cmp	r1, #46	@ 0x2e
 8021030:	d121      	bne.n	8021076 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021032:	f1bc 0f02 	cmp.w	ip, #2
 8021036:	d820      	bhi.n	802107a <mg_aton4+0x96>
 8021038:	b923      	cbnz	r3, 8021044 <mg_aton4+0x60>
 802103a:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 802103c:	b005      	add	sp, #20
 802103e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021042:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8021044:	441c      	add	r4, r3
 8021046:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802104a:	292e      	cmp	r1, #46	@ 0x2e
 802104c:	d017      	beq.n	802107e <mg_aton4+0x9a>
      num_dots++;
 802104e:	f10c 0c01 	add.w	ip, ip, #1
 8021052:	e7ea      	b.n	802102a <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8021054:	f1bc 0f03 	cmp.w	ip, #3
 8021058:	d113      	bne.n	8021082 <mg_aton4+0x9e>
 802105a:	9900      	ldr	r1, [sp, #0]
 802105c:	4419      	add	r1, r3
 802105e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8021062:	2b2e      	cmp	r3, #46	@ 0x2e
 8021064:	d00f      	beq.n	8021086 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 8021066:	9b03      	ldr	r3, [sp, #12]
 8021068:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 802106a:	2300      	movs	r3, #0
 802106c:	74d3      	strb	r3, [r2, #19]
  return true;
 802106e:	2001      	movs	r0, #1
 8021070:	e7e4      	b.n	802103c <mg_aton4+0x58>
      if (octet > 255) return false;
 8021072:	2000      	movs	r0, #0
 8021074:	e7e2      	b.n	802103c <mg_aton4+0x58>
      return false;
 8021076:	2000      	movs	r0, #0
 8021078:	e7e0      	b.n	802103c <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802107a:	2000      	movs	r0, #0
 802107c:	e7de      	b.n	802103c <mg_aton4+0x58>
 802107e:	2000      	movs	r0, #0
 8021080:	e7dc      	b.n	802103c <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8021082:	2000      	movs	r0, #0
 8021084:	e7da      	b.n	802103c <mg_aton4+0x58>
 8021086:	2000      	movs	r0, #0
 8021088:	e7d8      	b.n	802103c <mg_aton4+0x58>

0802108a <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802108a:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802108c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802108e:	b103      	cbz	r3, 8021092 <mg_tcpip_call+0x8>
 8021090:	4798      	blx	r3
}
 8021092:	bd08      	pop	{r3, pc}

08021094 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8021094:	2300      	movs	r3, #0
 8021096:	e005      	b.n	80210a4 <csumup+0x10>
 8021098:	f811 c003 	ldrb.w	ip, [r1, r3]
 802109c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80210a0:	4460      	add	r0, ip
 80210a2:	3301      	adds	r3, #1
 80210a4:	4293      	cmp	r3, r2
 80210a6:	d205      	bcs.n	80210b4 <csumup+0x20>
 80210a8:	f013 0f01 	tst.w	r3, #1
 80210ac:	d0f4      	beq.n	8021098 <csumup+0x4>
 80210ae:	f811 c003 	ldrb.w	ip, [r1, r3]
 80210b2:	e7f5      	b.n	80210a0 <csumup+0xc>
  return sum;
}
 80210b4:	4770      	bx	lr

080210b6 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 80210b6:	b538      	push	{r3, r4, r5, lr}
 80210b8:	4604      	mov	r4, r0
 80210ba:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 80210bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80210be:	685b      	ldr	r3, [r3, #4]
 80210c0:	4602      	mov	r2, r0
 80210c2:	6940      	ldr	r0, [r0, #20]
 80210c4:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 80210c6:	4285      	cmp	r5, r0
 80210c8:	d000      	beq.n	80210cc <ether_output+0x16>
  return n;
}
 80210ca:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 80210cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80210ce:	3301      	adds	r3, #1
 80210d0:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 80210d2:	e7fa      	b.n	80210ca <ether_output+0x14>

080210d4 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80210d4:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80210d8:	f013 0f28 	tst.w	r3, #40	@ 0x28
 80210dc:	d106      	bne.n	80210ec <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80210de:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80210e0:	b132      	cbz	r2, 80210f0 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80210e2:	f013 0f90 	tst.w	r3, #144	@ 0x90
 80210e6:	d005      	beq.n	80210f4 <can_write+0x20>
 80210e8:	2000      	movs	r0, #0
 80210ea:	4770      	bx	lr
 80210ec:	2000      	movs	r0, #0
 80210ee:	4770      	bx	lr
 80210f0:	2000      	movs	r0, #0
 80210f2:	4770      	bx	lr
 80210f4:	2001      	movs	r0, #1
}
 80210f6:	4770      	bx	lr

080210f8 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 80210f8:	b410      	push	{r4}
 80210fa:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80210fc:	460c      	mov	r4, r1
 80210fe:	b109      	cbz	r1, 8021104 <mg_esc+0xc>
 8021100:	4b0b      	ldr	r3, [pc, #44]	@ (8021130 <mg_esc+0x38>)
 8021102:	e007      	b.n	8021114 <mg_esc+0x1c>
 8021104:	4b0b      	ldr	r3, [pc, #44]	@ (8021134 <mg_esc+0x3c>)
 8021106:	e005      	b.n	8021114 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021108:	4a0a      	ldr	r2, [pc, #40]	@ (8021134 <mg_esc+0x3c>)
 802110a:	1a9b      	subs	r3, r3, r2
 802110c:	4a08      	ldr	r2, [pc, #32]	@ (8021130 <mg_esc+0x38>)
 802110e:	5cd0      	ldrb	r0, [r2, r3]
 8021110:	e00a      	b.n	8021128 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8021112:	3301      	adds	r3, #1
 8021114:	7818      	ldrb	r0, [r3, #0]
 8021116:	b138      	cbz	r0, 8021128 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8021118:	4290      	cmp	r0, r2
 802111a:	d1fa      	bne.n	8021112 <mg_esc+0x1a>
 802111c:	2c00      	cmp	r4, #0
 802111e:	d0f3      	beq.n	8021108 <mg_esc+0x10>
 8021120:	4a03      	ldr	r2, [pc, #12]	@ (8021130 <mg_esc+0x38>)
 8021122:	1a9b      	subs	r3, r3, r2
 8021124:	4a03      	ldr	r2, [pc, #12]	@ (8021134 <mg_esc+0x3c>)
 8021126:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 8021128:	f85d 4b04 	ldr.w	r4, [sp], #4
 802112c:	4770      	bx	lr
 802112e:	bf00      	nop
 8021130:	0803a0f0 	.word	0x0803a0f0
 8021134:	0803a0f8 	.word	0x0803a0f8

08021138 <mg_escape>:

static char mg_escape(int c) {
 8021138:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 802113a:	2101      	movs	r1, #1
 802113c:	f7ff ffdc 	bl	80210f8 <mg_esc>
}
 8021140:	bd08      	pop	{r3, pc}

08021142 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8021142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021146:	4607      	mov	r7, r0
 8021148:	460e      	mov	r6, r1
 802114a:	4692      	mov	sl, r2
 802114c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 802114e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8021152:	465c      	mov	r4, fp
 8021154:	e003      	b.n	802115e <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 8021156:	4631      	mov	r1, r6
 8021158:	4628      	mov	r0, r5
 802115a:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 802115c:	3401      	adds	r4, #1
 802115e:	454c      	cmp	r4, r9
 8021160:	d211      	bcs.n	8021186 <qcpy+0x44>
 8021162:	f81a 5004 	ldrb.w	r5, [sl, r4]
 8021166:	b175      	cbz	r5, 8021186 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8021168:	4628      	mov	r0, r5
 802116a:	f7ff ffe5 	bl	8021138 <mg_escape>
    if (c) {
 802116e:	4680      	mov	r8, r0
 8021170:	2800      	cmp	r0, #0
 8021172:	d0f0      	beq.n	8021156 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8021174:	4631      	mov	r1, r6
 8021176:	205c      	movs	r0, #92	@ 0x5c
 8021178:	47b8      	blx	r7
 802117a:	4631      	mov	r1, r6
 802117c:	4640      	mov	r0, r8
 802117e:	47b8      	blx	r7
 8021180:	f10b 0b01 	add.w	fp, fp, #1
 8021184:	e7ea      	b.n	802115c <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8021186:	eb04 000b 	add.w	r0, r4, fp
 802118a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021190 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8021190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021194:	4607      	mov	r7, r0
 8021196:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8021198:	6811      	ldr	r1, [r2, #0]
 802119a:	1d0b      	adds	r3, r1, #4
 802119c:	6013      	str	r3, [r2, #0]
 802119e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80211a2:	f101 0308 	add.w	r3, r1, #8
 80211a6:	6013      	str	r3, [r2, #0]
 80211a8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 80211ac:	2400      	movs	r4, #0
 80211ae:	e00e      	b.n	80211ce <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 80211b0:	f818 3004 	ldrb.w	r3, [r8, r4]
 80211b4:	091b      	lsrs	r3, r3, #4
 80211b6:	4d09      	ldr	r5, [pc, #36]	@ (80211dc <mg_print_hex+0x4c>)
 80211b8:	4631      	mov	r1, r6
 80211ba:	5ce8      	ldrb	r0, [r5, r3]
 80211bc:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 80211be:	f818 3004 	ldrb.w	r3, [r8, r4]
 80211c2:	f003 030f 	and.w	r3, r3, #15
 80211c6:	4631      	mov	r1, r6
 80211c8:	5ce8      	ldrb	r0, [r5, r3]
 80211ca:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 80211cc:	3401      	adds	r4, #1
 80211ce:	454c      	cmp	r4, r9
 80211d0:	d3ee      	bcc.n	80211b0 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 80211d2:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80211d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80211da:	bf00      	nop
 80211dc:	08039c44 	.word	0x08039c44

080211e0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80211e0:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80211e2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80211e6:	ea4f 2332 	mov.w	r3, r2, ror #8
 80211ea:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80211ee:	ea4f 6232 	mov.w	r2, r2, ror #24
 80211f2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80211f6:	ea43 0002 	orr.w	r0, r3, r2
 80211fa:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 80211fe:	4770      	bx	lr

08021200 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8021200:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021204:	b2db      	uxtb	r3, r3
 8021206:	2b19      	cmp	r3, #25
 8021208:	d800      	bhi.n	802120c <mg_tolc+0xc>
 802120a:	3020      	adds	r0, #32
}
 802120c:	4770      	bx	lr

0802120e <isbyte>:
  return ~crc;
}

static int isbyte(int n) {
  return n >= 0 && n <= 255;
}
 802120e:	28ff      	cmp	r0, #255	@ 0xff
 8021210:	bf8c      	ite	hi
 8021212:	2000      	movhi	r0, #0
 8021214:	2001      	movls	r0, #1
 8021216:	4770      	bx	lr

08021218 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8021218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802121c:	b082      	sub	sp, #8
 802121e:	4605      	mov	r5, r0
 8021220:	9e08      	ldr	r6, [sp, #32]
 8021222:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8021224:	0a10      	lsrs	r0, r2, #8
 8021226:	f88d 0004 	strb.w	r0, [sp, #4]
 802122a:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 802122e:	00c9      	lsls	r1, r1, #3
 8021230:	b249      	sxtb	r1, r1
 8021232:	4698      	mov	r8, r3
 8021234:	b143      	cbz	r3, 8021248 <w5500_txn+0x30>
 8021236:	2304      	movs	r3, #4
 8021238:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 802123a:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 802123e:	686b      	ldr	r3, [r5, #4]
 8021240:	6828      	ldr	r0, [r5, #0]
 8021242:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8021244:	2400      	movs	r4, #0
 8021246:	e00a      	b.n	802125e <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8021248:	2300      	movs	r3, #0
 802124a:	e7f5      	b.n	8021238 <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 802124c:	68eb      	ldr	r3, [r5, #12]
 802124e:	f104 0208 	add.w	r2, r4, #8
 8021252:	446a      	add	r2, sp
 8021254:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8021258:	6828      	ldr	r0, [r5, #0]
 802125a:	4798      	blx	r3
 802125c:	3401      	adds	r4, #1
 802125e:	2c02      	cmp	r4, #2
 8021260:	d9f4      	bls.n	802124c <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8021262:	2400      	movs	r4, #0
 8021264:	e000      	b.n	8021268 <w5500_txn+0x50>
 8021266:	3401      	adds	r4, #1
 8021268:	42bc      	cmp	r4, r7
 802126a:	d208      	bcs.n	802127e <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 802126c:	68eb      	ldr	r3, [r5, #12]
 802126e:	5d31      	ldrb	r1, [r6, r4]
 8021270:	6828      	ldr	r0, [r5, #0]
 8021272:	4798      	blx	r3
    if (!wr) p[i] = r;
 8021274:	f1b8 0f00 	cmp.w	r8, #0
 8021278:	d1f5      	bne.n	8021266 <w5500_txn+0x4e>
 802127a:	5530      	strb	r0, [r6, r4]
 802127c:	e7f3      	b.n	8021266 <w5500_txn+0x4e>
  }
  s->end(s->spi);
 802127e:	68ab      	ldr	r3, [r5, #8]
 8021280:	6828      	ldr	r0, [r5, #0]
 8021282:	4798      	blx	r3
}
 8021284:	b002      	add	sp, #8
 8021286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802128a <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 802128a:	b510      	push	{r4, lr}
 802128c:	b082      	sub	sp, #8
 802128e:	9c04      	ldr	r4, [sp, #16]
 8021290:	9401      	str	r4, [sp, #4]
 8021292:	9300      	str	r3, [sp, #0]
 8021294:	2301      	movs	r3, #1
 8021296:	f7ff ffbf 	bl	8021218 <w5500_txn>
 802129a:	b002      	add	sp, #8
 802129c:	bd10      	pop	{r4, pc}

0802129e <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 802129e:	b500      	push	{lr}
 80212a0:	b085      	sub	sp, #20
 80212a2:	f88d 300f 	strb.w	r3, [sp, #15]
 80212a6:	2301      	movs	r3, #1
 80212a8:	9300      	str	r3, [sp, #0]
 80212aa:	f10d 030f 	add.w	r3, sp, #15
 80212ae:	f7ff ffec 	bl	802128a <w5500_wn>
 80212b2:	b005      	add	sp, #20
 80212b4:	f85d fb04 	ldr.w	pc, [sp], #4

080212b8 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 80212b8:	b500      	push	{lr}
 80212ba:	b085      	sub	sp, #20
 80212bc:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80212c0:	f88d c00c 	strb.w	ip, [sp, #12]
 80212c4:	f88d 300d 	strb.w	r3, [sp, #13]
 80212c8:	2302      	movs	r3, #2
 80212ca:	9300      	str	r3, [sp, #0]
 80212cc:	ab03      	add	r3, sp, #12
 80212ce:	f7ff ffdc 	bl	802128a <w5500_wn>
 80212d2:	b005      	add	sp, #20
 80212d4:	f85d fb04 	ldr.w	pc, [sp], #4

080212d8 <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 80212d8:	b510      	push	{r4, lr}
 80212da:	b082      	sub	sp, #8
 80212dc:	9c04      	ldr	r4, [sp, #16]
 80212de:	9401      	str	r4, [sp, #4]
 80212e0:	9300      	str	r3, [sp, #0]
 80212e2:	2300      	movs	r3, #0
 80212e4:	f7ff ff98 	bl	8021218 <w5500_txn>
 80212e8:	b002      	add	sp, #8
 80212ea:	bd10      	pop	{r4, pc}

080212ec <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 80212ec:	b500      	push	{lr}
 80212ee:	b085      	sub	sp, #20
 80212f0:	2300      	movs	r3, #0
 80212f2:	f88d 300f 	strb.w	r3, [sp, #15]
 80212f6:	2301      	movs	r3, #1
 80212f8:	9300      	str	r3, [sp, #0]
 80212fa:	f10d 030f 	add.w	r3, sp, #15
 80212fe:	f7ff ffeb 	bl	80212d8 <w5500_rn>
 8021302:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8021306:	b005      	add	sp, #20
 8021308:	f85d fb04 	ldr.w	pc, [sp], #4

0802130c <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 802130c:	b500      	push	{lr}
 802130e:	b085      	sub	sp, #20
 8021310:	2300      	movs	r3, #0
 8021312:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021316:	2302      	movs	r3, #2
 8021318:	9300      	str	r3, [sp, #0]
 802131a:	ab03      	add	r3, sp, #12
 802131c:	f7ff ffdc 	bl	80212d8 <w5500_rn>
 8021320:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021324:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8021328:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 802132c:	b005      	add	sp, #20
 802132e:	f85d fb04 	ldr.w	pc, [sp], #4

08021332 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8021332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021336:	b083      	sub	sp, #12
 8021338:	4606      	mov	r6, r0
 802133a:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 802133c:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802133e:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8021340:	4604      	mov	r4, r0
 8021342:	2226      	movs	r2, #38	@ 0x26
 8021344:	2101      	movs	r1, #1
 8021346:	4628      	mov	r0, r5
 8021348:	f7ff ffe0 	bl	802130c <w5500_r2>
 802134c:	4284      	cmp	r4, r0
 802134e:	d3f7      	bcc.n	8021340 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8021350:	b91c      	cbnz	r4, 802135a <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8021352:	4620      	mov	r0, r4
 8021354:	b003      	add	sp, #12
 8021356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 802135a:	2228      	movs	r2, #40	@ 0x28
 802135c:	2101      	movs	r1, #1
 802135e:	4628      	mov	r0, r5
 8021360:	f7ff ffd4 	bl	802130c <w5500_r2>
 8021364:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8021366:	4602      	mov	r2, r0
 8021368:	2103      	movs	r1, #3
 802136a:	4628      	mov	r0, r5
 802136c:	f7ff ffce 	bl	802130c <w5500_r2>
 8021370:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8021372:	fa1f f188 	uxth.w	r1, r8
 8021376:	3102      	adds	r1, #2
 8021378:	4288      	cmp	r0, r1
 802137a:	dc0e      	bgt.n	802139a <w5500_rx+0x68>
 802137c:	2801      	cmp	r0, #1
 802137e:	d801      	bhi.n	8021384 <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8021380:	2400      	movs	r4, #0
 8021382:	e00b      	b.n	802139c <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8021384:	1e84      	subs	r4, r0, #2
 8021386:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8021388:	1cba      	adds	r2, r7, #2
 802138a:	9400      	str	r4, [sp, #0]
 802138c:	4633      	mov	r3, r6
 802138e:	b292      	uxth	r2, r2
 8021390:	2103      	movs	r1, #3
 8021392:	4628      	mov	r0, r5
 8021394:	f7ff ffa0 	bl	80212d8 <w5500_rn>
 8021398:	e000      	b.n	802139c <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 802139a:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 802139c:	eb07 0309 	add.w	r3, r7, r9
 80213a0:	b29b      	uxth	r3, r3
 80213a2:	2228      	movs	r2, #40	@ 0x28
 80213a4:	2101      	movs	r1, #1
 80213a6:	4628      	mov	r0, r5
 80213a8:	f7ff ff86 	bl	80212b8 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 80213ac:	2340      	movs	r3, #64	@ 0x40
 80213ae:	2201      	movs	r2, #1
 80213b0:	4611      	mov	r1, r2
 80213b2:	4628      	mov	r0, r5
 80213b4:	f7ff ff73 	bl	802129e <w5500_w1>
 80213b8:	e7cb      	b.n	8021352 <w5500_rx+0x20>

080213ba <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 80213ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213be:	b082      	sub	sp, #8
 80213c0:	4680      	mov	r8, r0
 80213c2:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 80213c4:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 80213c6:	b28f      	uxth	r7, r1
 80213c8:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 80213ca:	e004      	b.n	80213d6 <w5500_tx+0x1c>
 80213cc:	2220      	movs	r2, #32
 80213ce:	2101      	movs	r1, #1
 80213d0:	4630      	mov	r0, r6
 80213d2:	f7ff ff9b 	bl	802130c <w5500_r2>
 80213d6:	42b8      	cmp	r0, r7
 80213d8:	d3f8      	bcc.n	80213cc <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 80213da:	2224      	movs	r2, #36	@ 0x24
 80213dc:	2101      	movs	r1, #1
 80213de:	4630      	mov	r0, r6
 80213e0:	f7ff ff94 	bl	802130c <w5500_r2>
 80213e4:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 80213e6:	b2ad      	uxth	r5, r5
 80213e8:	9500      	str	r5, [sp, #0]
 80213ea:	4643      	mov	r3, r8
 80213ec:	4602      	mov	r2, r0
 80213ee:	2102      	movs	r1, #2
 80213f0:	4630      	mov	r0, r6
 80213f2:	f7ff ff4a 	bl	802128a <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 80213f6:	193b      	adds	r3, r7, r4
 80213f8:	b29b      	uxth	r3, r3
 80213fa:	2224      	movs	r2, #36	@ 0x24
 80213fc:	2101      	movs	r1, #1
 80213fe:	4630      	mov	r0, r6
 8021400:	f7ff ff5a 	bl	80212b8 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8021404:	2320      	movs	r3, #32
 8021406:	2201      	movs	r2, #1
 8021408:	4611      	mov	r1, r2
 802140a:	4630      	mov	r0, r6
 802140c:	f7ff ff47 	bl	802129e <w5500_w1>
  for (i = 0; i < 40; i++) {
 8021410:	2400      	movs	r4, #0
 8021412:	e004      	b.n	802141e <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8021414:	f015 0f18 	tst.w	r5, #24
 8021418:	d116      	bne.n	8021448 <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 802141a:	3401      	adds	r4, #1
 802141c:	b2a4      	uxth	r4, r4
 802141e:	2c27      	cmp	r4, #39	@ 0x27
 8021420:	d812      	bhi.n	8021448 <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8021422:	2202      	movs	r2, #2
 8021424:	2101      	movs	r1, #1
 8021426:	4630      	mov	r0, r6
 8021428:	f7ff ff60 	bl	80212ec <w5500_r1>
    if (ir == 0) continue;
 802142c:	4605      	mov	r5, r0
 802142e:	2800      	cmp	r0, #0
 8021430:	d0f3      	beq.n	802141a <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8021432:	4603      	mov	r3, r0
 8021434:	2202      	movs	r2, #2
 8021436:	2101      	movs	r1, #1
 8021438:	4630      	mov	r0, r6
 802143a:	f7ff ff30 	bl	802129e <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 802143e:	f015 0f08 	tst.w	r5, #8
 8021442:	d0e7      	beq.n	8021414 <w5500_tx+0x5a>
 8021444:	2700      	movs	r7, #0
 8021446:	e7e5      	b.n	8021414 <w5500_tx+0x5a>
  }
  return len;
}
 8021448:	4638      	mov	r0, r7
 802144a:	b002      	add	sp, #8
 802144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021450 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8021450:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8021452:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8021454:	68a3      	ldr	r3, [r4, #8]
 8021456:	6820      	ldr	r0, [r4, #0]
 8021458:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 802145a:	2380      	movs	r3, #128	@ 0x80
 802145c:	2200      	movs	r2, #0
 802145e:	4611      	mov	r1, r2
 8021460:	4620      	mov	r0, r4
 8021462:	f7ff ff1c 	bl	802129e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8021466:	2300      	movs	r3, #0
 8021468:	222e      	movs	r2, #46	@ 0x2e
 802146a:	4619      	mov	r1, r3
 802146c:	4620      	mov	r0, r4
 802146e:	f7ff ff16 	bl	802129e <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8021472:	23f8      	movs	r3, #248	@ 0xf8
 8021474:	222e      	movs	r2, #46	@ 0x2e
 8021476:	2100      	movs	r1, #0
 8021478:	4620      	mov	r0, r4
 802147a:	f7ff ff10 	bl	802129e <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 802147e:	2310      	movs	r3, #16
 8021480:	221e      	movs	r2, #30
 8021482:	2101      	movs	r1, #1
 8021484:	4620      	mov	r0, r4
 8021486:	f7ff ff0a 	bl	802129e <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 802148a:	2310      	movs	r3, #16
 802148c:	221f      	movs	r2, #31
 802148e:	2101      	movs	r1, #1
 8021490:	4620      	mov	r0, r4
 8021492:	f7ff ff04 	bl	802129e <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8021496:	2304      	movs	r3, #4
 8021498:	2200      	movs	r2, #0
 802149a:	2101      	movs	r1, #1
 802149c:	4620      	mov	r0, r4
 802149e:	f7ff fefe 	bl	802129e <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 80214a2:	2301      	movs	r3, #1
 80214a4:	461a      	mov	r2, r3
 80214a6:	4619      	mov	r1, r3
 80214a8:	4620      	mov	r0, r4
 80214aa:	f7ff fef8 	bl	802129e <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 80214ae:	2203      	movs	r2, #3
 80214b0:	2101      	movs	r1, #1
 80214b2:	4620      	mov	r0, r4
 80214b4:	f7ff ff1a 	bl	80212ec <w5500_r1>
}
 80214b8:	2842      	cmp	r0, #66	@ 0x42
 80214ba:	bf14      	ite	ne
 80214bc:	2000      	movne	r0, #0
 80214be:	2001      	moveq	r0, #1
 80214c0:	bd10      	pop	{r4, pc}

080214c2 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 80214c2:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 80214c4:	222e      	movs	r2, #46	@ 0x2e
 80214c6:	2100      	movs	r1, #0
 80214c8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80214ca:	f7ff ff0f 	bl	80212ec <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 80214ce:	f000 0001 	and.w	r0, r0, #1
 80214d2:	bd08      	pop	{r3, pc}

080214d4 <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 80214d4:	b508      	push	{r3, lr}
 80214d6:	4602      	mov	r2, r0
 80214d8:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 80214da:	e000      	b.n	80214de <mg_dns_free+0xa>
 80214dc:	461a      	mov	r2, r3
 80214de:	6813      	ldr	r3, [r2, #0]
 80214e0:	4283      	cmp	r3, r0
 80214e2:	d1fb      	bne.n	80214dc <mg_dns_free+0x8>
 80214e4:	6803      	ldr	r3, [r0, #0]
 80214e6:	6013      	str	r3, [r2, #0]
  free(d);
 80214e8:	f7f9 fa18 	bl	801a91c <vPortFree>
}
 80214ec:	bd08      	pop	{r3, pc}

080214ee <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 80214ee:	b082      	sub	sp, #8
 80214f0:	ab02      	add	r3, sp, #8
 80214f2:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 80214f6:	b111      	cbz	r1, 80214fe <mg_atone+0x10>
 80214f8:	2000      	movs	r0, #0
}
 80214fa:	b002      	add	sp, #8
 80214fc:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 80214fe:	6011      	str	r1, [r2, #0]
 8021500:	6051      	str	r1, [r2, #4]
 8021502:	6091      	str	r1, [r2, #8]
 8021504:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8021506:	74d1      	strb	r1, [r2, #19]
  return true;
 8021508:	2001      	movs	r0, #1
 802150a:	e7f6      	b.n	80214fa <mg_atone+0xc>

0802150c <urlparse>:
static struct url urlparse(const char *url) {
 802150c:	b510      	push	{r4, lr}
 802150e:	b088      	sub	sp, #32
 8021510:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8021512:	2200      	movs	r2, #0
 8021514:	9201      	str	r2, [sp, #4]
 8021516:	9202      	str	r2, [sp, #8]
 8021518:	9203      	str	r2, [sp, #12]
 802151a:	9204      	str	r2, [sp, #16]
 802151c:	9205      	str	r2, [sp, #20]
 802151e:	9206      	str	r2, [sp, #24]
 8021520:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021522:	e00f      	b.n	8021544 <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021524:	b19a      	cbz	r2, 802154e <urlparse+0x42>
 8021526:	9804      	ldr	r0, [sp, #16]
 8021528:	b988      	cbnz	r0, 802154e <urlparse+0x42>
 802152a:	1888      	adds	r0, r1, r2
 802152c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8021530:	282f      	cmp	r0, #47	@ 0x2f
 8021532:	d10c      	bne.n	802154e <urlparse+0x42>
      u.host = i + 1;
 8021534:	1c53      	adds	r3, r2, #1
 8021536:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8021538:	2300      	movs	r3, #0
 802153a:	9305      	str	r3, [sp, #20]
 802153c:	e001      	b.n	8021542 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 802153e:	2300      	movs	r3, #0
 8021540:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8021542:	3201      	adds	r2, #1
 8021544:	5c8b      	ldrb	r3, [r1, r2]
 8021546:	2b00      	cmp	r3, #0
 8021548:	d02c      	beq.n	80215a4 <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 802154a:	2b2f      	cmp	r3, #47	@ 0x2f
 802154c:	d0ea      	beq.n	8021524 <urlparse+0x18>
    } else if (url[i] == ']') {
 802154e:	2b5d      	cmp	r3, #93	@ 0x5d
 8021550:	d0f5      	beq.n	802153e <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021552:	2b3a      	cmp	r3, #58	@ 0x3a
 8021554:	d00b      	beq.n	802156e <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021556:	2b40      	cmp	r3, #64	@ 0x40
 8021558:	d012      	beq.n	8021580 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 802155a:	2b2f      	cmp	r3, #47	@ 0x2f
 802155c:	d1f1      	bne.n	8021542 <urlparse+0x36>
 802155e:	9b04      	ldr	r3, [sp, #16]
 8021560:	2b00      	cmp	r3, #0
 8021562:	d0ee      	beq.n	8021542 <urlparse+0x36>
 8021564:	9b06      	ldr	r3, [sp, #24]
 8021566:	2b00      	cmp	r3, #0
 8021568:	d1eb      	bne.n	8021542 <urlparse+0x36>
      u.uri = i;
 802156a:	9206      	str	r2, [sp, #24]
 802156c:	e7e9      	b.n	8021542 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 802156e:	9805      	ldr	r0, [sp, #20]
 8021570:	2800      	cmp	r0, #0
 8021572:	d1f0      	bne.n	8021556 <urlparse+0x4a>
 8021574:	9806      	ldr	r0, [sp, #24]
 8021576:	2800      	cmp	r0, #0
 8021578:	d1ed      	bne.n	8021556 <urlparse+0x4a>
      u.port = i + 1;
 802157a:	1c53      	adds	r3, r2, #1
 802157c:	9305      	str	r3, [sp, #20]
 802157e:	e7e0      	b.n	8021542 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021580:	9802      	ldr	r0, [sp, #8]
 8021582:	2800      	cmp	r0, #0
 8021584:	d1e9      	bne.n	802155a <urlparse+0x4e>
 8021586:	9803      	ldr	r0, [sp, #12]
 8021588:	2800      	cmp	r0, #0
 802158a:	d1e6      	bne.n	802155a <urlparse+0x4e>
 802158c:	9806      	ldr	r0, [sp, #24]
 802158e:	2800      	cmp	r0, #0
 8021590:	d1e3      	bne.n	802155a <urlparse+0x4e>
      u.user = u.host;
 8021592:	9b04      	ldr	r3, [sp, #16]
 8021594:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8021596:	9b05      	ldr	r3, [sp, #20]
 8021598:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 802159a:	1c53      	adds	r3, r2, #1
 802159c:	9304      	str	r3, [sp, #16]
      u.port = 0;
 802159e:	2300      	movs	r3, #0
 80215a0:	9305      	str	r3, [sp, #20]
 80215a2:	e7ce      	b.n	8021542 <urlparse+0x36>
  u.end = i;
 80215a4:	9207      	str	r2, [sp, #28]
  return u;
 80215a6:	46a4      	mov	ip, r4
 80215a8:	f10d 0e04 	add.w	lr, sp, #4
 80215ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80215b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80215b4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80215b8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 80215bc:	4620      	mov	r0, r4
 80215be:	b008      	add	sp, #32
 80215c0:	bd10      	pop	{r4, pc}

080215c2 <mg_dns_parse_name_depth>:
                                      int depth) {
 80215c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c6:	b085      	sub	sp, #20
 80215c8:	4681      	mov	r9, r0
 80215ca:	4688      	mov	r8, r1
 80215cc:	4693      	mov	fp, r2
 80215ce:	469a      	mov	sl, r3
 80215d0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80215d2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 80215d4:	b11f      	cbz	r7, 80215de <mg_dns_parse_name_depth+0x1c>
 80215d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80215d8:	b90b      	cbnz	r3, 80215de <mg_dns_parse_name_depth+0x1c>
 80215da:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 80215de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80215e0:	2b05      	cmp	r3, #5
 80215e2:	dc4f      	bgt.n	8021684 <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 80215e4:	2600      	movs	r6, #0
 80215e6:	e02f      	b.n	8021648 <mg_dns_parse_name_depth+0x86>
      i++;
 80215e8:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80215ea:	2f00      	cmp	r7, #0
 80215ec:	d04b      	beq.n	8021686 <mg_dns_parse_name_depth+0xc4>
 80215ee:	3f01      	subs	r7, #1
 80215f0:	2300      	movs	r3, #0
 80215f2:	f80a 3007 	strb.w	r3, [sl, r7]
 80215f6:	e046      	b.n	8021686 <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80215f8:	0222      	lsls	r2, r4, #8
 80215fa:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 80215fe:	f819 3001 	ldrb.w	r3, [r9, r1]
 8021602:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8021604:	1c53      	adds	r3, r2, #1
 8021606:	4543      	cmp	r3, r8
 8021608:	d203      	bcs.n	8021612 <mg_dns_parse_name_depth+0x50>
 802160a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802160e:	2b3f      	cmp	r3, #63	@ 0x3f
 8021610:	d901      	bls.n	8021616 <mg_dns_parse_name_depth+0x54>
      i += 2;
 8021612:	3602      	adds	r6, #2
      break;
 8021614:	e7e9      	b.n	80215ea <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8021616:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021618:	3301      	adds	r3, #1
 802161a:	9302      	str	r3, [sp, #8]
 802161c:	9501      	str	r5, [sp, #4]
 802161e:	9700      	str	r7, [sp, #0]
 8021620:	4653      	mov	r3, sl
 8021622:	4641      	mov	r1, r8
 8021624:	4648      	mov	r0, r9
 8021626:	f7ff ffcc 	bl	80215c2 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 802162a:	2800      	cmp	r0, #0
 802162c:	d1f1      	bne.n	8021612 <mg_dns_parse_name_depth+0x50>
        return 0;
 802162e:	4606      	mov	r6, r0
 8021630:	e029      	b.n	8021686 <mg_dns_parse_name_depth+0xc4>
 8021632:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021634:	1905      	adds	r5, r0, r4
 8021636:	42bd      	cmp	r5, r7
 8021638:	d31e      	bcc.n	8021678 <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 802163a:	4426      	add	r6, r4
 802163c:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 802163e:	42bd      	cmp	r5, r7
 8021640:	d202      	bcs.n	8021648 <mg_dns_parse_name_depth+0x86>
 8021642:	2300      	movs	r3, #0
 8021644:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8021648:	eb06 030b 	add.w	r3, r6, fp
 802164c:	1c59      	adds	r1, r3, #1
 802164e:	4541      	cmp	r1, r8
 8021650:	d2cb      	bcs.n	80215ea <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8021652:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 8021656:	2c00      	cmp	r4, #0
 8021658:	d0c6      	beq.n	80215e8 <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 802165a:	2c3f      	cmp	r4, #63	@ 0x3f
 802165c:	d8cc      	bhi.n	80215f8 <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 802165e:	4423      	add	r3, r4
 8021660:	3301      	adds	r3, #1
 8021662:	4543      	cmp	r3, r8
 8021664:	d213      	bcs.n	802168e <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 8021666:	2d00      	cmp	r5, #0
 8021668:	d0e3      	beq.n	8021632 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 802166a:	42bd      	cmp	r5, r7
 802166c:	d202      	bcs.n	8021674 <mg_dns_parse_name_depth+0xb2>
 802166e:	232e      	movs	r3, #46	@ 0x2e
 8021670:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8021674:	1c68      	adds	r0, r5, #1
 8021676:	e7dd      	b.n	8021634 <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8021678:	4622      	mov	r2, r4
 802167a:	4449      	add	r1, r9
 802167c:	4450      	add	r0, sl
 802167e:	f00c fb3b 	bl	802dcf8 <memcpy>
 8021682:	e7da      	b.n	802163a <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8021684:	2600      	movs	r6, #0
}
 8021686:	4630      	mov	r0, r6
 8021688:	b005      	add	sp, #20
 802168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 802168e:	2600      	movs	r6, #0
 8021690:	e7f9      	b.n	8021686 <mg_dns_parse_name_depth+0xc4>

08021692 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8021692:	b510      	push	{r4, lr}
 8021694:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8021696:	2400      	movs	r4, #0
 8021698:	9402      	str	r4, [sp, #8]
 802169a:	9401      	str	r4, [sp, #4]
 802169c:	9c06      	ldr	r4, [sp, #24]
 802169e:	9400      	str	r4, [sp, #0]
 80216a0:	f7ff ff8f 	bl	80215c2 <mg_dns_parse_name_depth>
}
 80216a4:	b004      	add	sp, #16
 80216a6:	bd10      	pop	{r4, pc}

080216a8 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 80216a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ac:	b09f      	sub	sp, #124	@ 0x7c
 80216ae:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 80216b0:	460c      	mov	r4, r1
 80216b2:	af0e      	add	r7, sp, #56	@ 0x38
 80216b4:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 80216b8:	463e      	mov	r6, r7
 80216ba:	6820      	ldr	r0, [r4, #0]
 80216bc:	6861      	ldr	r1, [r4, #4]
 80216be:	68a2      	ldr	r2, [r4, #8]
 80216c0:	68e3      	ldr	r3, [r4, #12]
 80216c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80216c4:	3410      	adds	r4, #16
 80216c6:	4637      	mov	r7, r6
 80216c8:	42ac      	cmp	r4, r5
 80216ca:	d1f5      	bne.n	80216b8 <mg_sha1_transform+0x10>
  a = state[0];
 80216cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80216ce:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 80216d0:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 80216d2:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 80216d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 80216d8:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 80216dc:	ea84 0608 	eor.w	r6, r4, r8
 80216e0:	403e      	ands	r6, r7
 80216e2:	ea86 0608 	eor.w	r6, r6, r8
 80216e6:	2100      	movs	r1, #0
 80216e8:	a80e      	add	r0, sp, #56	@ 0x38
 80216ea:	f7ff fd79 	bl	80211e0 <blk0>
 80216ee:	1833      	adds	r3, r6, r0
 80216f0:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 80216f4:	4ee4      	ldr	r6, [pc, #912]	@ (8021a88 <mg_sha1_transform+0x3e0>)
 80216f6:	4433      	add	r3, r6
 80216f8:	4499      	add	r9, r3
 80216fa:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 80216fe:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8021702:	402f      	ands	r7, r5
 8021704:	4067      	eors	r7, r4
 8021706:	2101      	movs	r1, #1
 8021708:	a80e      	add	r0, sp, #56	@ 0x38
 802170a:	f7ff fd69 	bl	80211e0 <blk0>
 802170e:	4407      	add	r7, r0
 8021710:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8021714:	4437      	add	r7, r6
 8021716:	4447      	add	r7, r8
 8021718:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 802171c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021720:	ea05 0509 	and.w	r5, r5, r9
 8021724:	ea85 050a 	eor.w	r5, r5, sl
 8021728:	2102      	movs	r1, #2
 802172a:	a80e      	add	r0, sp, #56	@ 0x38
 802172c:	f7ff fd58 	bl	80211e0 <blk0>
 8021730:	4405      	add	r5, r0
 8021732:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8021736:	4435      	add	r5, r6
 8021738:	442c      	add	r4, r5
 802173a:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 802173e:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8021742:	ea09 0907 	and.w	r9, r9, r7
 8021746:	ea89 0908 	eor.w	r9, r9, r8
 802174a:	2103      	movs	r1, #3
 802174c:	a80e      	add	r0, sp, #56	@ 0x38
 802174e:	f7ff fd47 	bl	80211e0 <blk0>
 8021752:	4481      	add	r9, r0
 8021754:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021758:	44b1      	add	r9, r6
 802175a:	44ca      	add	sl, r9
 802175c:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8021760:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 8021764:	4027      	ands	r7, r4
 8021766:	406f      	eors	r7, r5
 8021768:	2104      	movs	r1, #4
 802176a:	a80e      	add	r0, sp, #56	@ 0x38
 802176c:	f7ff fd38 	bl	80211e0 <blk0>
 8021770:	4407      	add	r7, r0
 8021772:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 8021776:	4437      	add	r7, r6
 8021778:	44b8      	add	r8, r7
 802177a:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 802177e:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021782:	ea04 040a 	and.w	r4, r4, sl
 8021786:	ea84 0409 	eor.w	r4, r4, r9
 802178a:	2105      	movs	r1, #5
 802178c:	a80e      	add	r0, sp, #56	@ 0x38
 802178e:	f7ff fd27 	bl	80211e0 <blk0>
 8021792:	4404      	add	r4, r0
 8021794:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021798:	4434      	add	r4, r6
 802179a:	4425      	add	r5, r4
 802179c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 80217a0:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 80217a4:	ea0a 0a08 	and.w	sl, sl, r8
 80217a8:	ea8a 0a07 	eor.w	sl, sl, r7
 80217ac:	2106      	movs	r1, #6
 80217ae:	a80e      	add	r0, sp, #56	@ 0x38
 80217b0:	f7ff fd16 	bl	80211e0 <blk0>
 80217b4:	4482      	add	sl, r0
 80217b6:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 80217ba:	44b2      	add	sl, r6
 80217bc:	44d1      	add	r9, sl
 80217be:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 80217c2:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 80217c6:	ea08 0805 	and.w	r8, r8, r5
 80217ca:	ea88 0804 	eor.w	r8, r8, r4
 80217ce:	2107      	movs	r1, #7
 80217d0:	a80e      	add	r0, sp, #56	@ 0x38
 80217d2:	f7ff fd05 	bl	80211e0 <blk0>
 80217d6:	4480      	add	r8, r0
 80217d8:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 80217dc:	44b0      	add	r8, r6
 80217de:	4447      	add	r7, r8
 80217e0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 80217e4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 80217e8:	ea05 0509 	and.w	r5, r5, r9
 80217ec:	ea85 050a 	eor.w	r5, r5, sl
 80217f0:	2108      	movs	r1, #8
 80217f2:	a80e      	add	r0, sp, #56	@ 0x38
 80217f4:	f7ff fcf4 	bl	80211e0 <blk0>
 80217f8:	4405      	add	r5, r0
 80217fa:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 80217fe:	4435      	add	r5, r6
 8021800:	442c      	add	r4, r5
 8021802:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 8021806:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802180a:	ea09 0907 	and.w	r9, r9, r7
 802180e:	ea89 0908 	eor.w	r9, r9, r8
 8021812:	2109      	movs	r1, #9
 8021814:	a80e      	add	r0, sp, #56	@ 0x38
 8021816:	f7ff fce3 	bl	80211e0 <blk0>
 802181a:	4481      	add	r9, r0
 802181c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021820:	44b1      	add	r9, r6
 8021822:	44ca      	add	sl, r9
 8021824:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 8021828:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 802182c:	4027      	ands	r7, r4
 802182e:	406f      	eors	r7, r5
 8021830:	210a      	movs	r1, #10
 8021832:	a80e      	add	r0, sp, #56	@ 0x38
 8021834:	f7ff fcd4 	bl	80211e0 <blk0>
 8021838:	4407      	add	r7, r0
 802183a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 802183e:	4437      	add	r7, r6
 8021840:	44b8      	add	r8, r7
 8021842:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 8021846:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 802184a:	ea04 040a 	and.w	r4, r4, sl
 802184e:	ea84 0409 	eor.w	r4, r4, r9
 8021852:	210b      	movs	r1, #11
 8021854:	a80e      	add	r0, sp, #56	@ 0x38
 8021856:	f7ff fcc3 	bl	80211e0 <blk0>
 802185a:	4404      	add	r4, r0
 802185c:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021860:	4434      	add	r4, r6
 8021862:	4425      	add	r5, r4
 8021864:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 8021868:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 802186c:	ea0a 0a08 	and.w	sl, sl, r8
 8021870:	ea8a 0a07 	eor.w	sl, sl, r7
 8021874:	210c      	movs	r1, #12
 8021876:	a80e      	add	r0, sp, #56	@ 0x38
 8021878:	f7ff fcb2 	bl	80211e0 <blk0>
 802187c:	4482      	add	sl, r0
 802187e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8021882:	44b2      	add	sl, r6
 8021884:	44d1      	add	r9, sl
 8021886:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 802188a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 802188e:	ea08 0805 	and.w	r8, r8, r5
 8021892:	ea88 0804 	eor.w	r8, r8, r4
 8021896:	210d      	movs	r1, #13
 8021898:	a80e      	add	r0, sp, #56	@ 0x38
 802189a:	f7ff fca1 	bl	80211e0 <blk0>
 802189e:	4480      	add	r8, r0
 80218a0:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 80218a4:	44b0      	add	r8, r6
 80218a6:	4447      	add	r7, r8
 80218a8:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 80218ac:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 80218b0:	ea05 0509 	and.w	r5, r5, r9
 80218b4:	ea85 050a 	eor.w	r5, r5, sl
 80218b8:	210e      	movs	r1, #14
 80218ba:	a80e      	add	r0, sp, #56	@ 0x38
 80218bc:	f7ff fc90 	bl	80211e0 <blk0>
 80218c0:	4405      	add	r5, r0
 80218c2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 80218c6:	4435      	add	r5, r6
 80218c8:	442c      	add	r4, r5
 80218ca:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 80218ce:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 80218d2:	ea09 0907 	and.w	r9, r9, r7
 80218d6:	ea89 0908 	eor.w	r9, r9, r8
 80218da:	210f      	movs	r1, #15
 80218dc:	a80e      	add	r0, sp, #56	@ 0x38
 80218de:	f7ff fc7f 	bl	80211e0 <blk0>
 80218e2:	4481      	add	r9, r0
 80218e4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80218e8:	44b1      	add	r9, r6
 80218ea:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 80218ee:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 80218f2:	4023      	ands	r3, r4
 80218f4:	ea83 0205 	eor.w	r2, r3, r5
 80218f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80218fa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80218fc:	4043      	eors	r3, r0
 80218fe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021900:	ea83 0c00 	eor.w	ip, r3, r0
 8021904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021906:	ea8c 0303 	eor.w	r3, ip, r3
 802190a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 802190e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021910:	9300      	str	r3, [sp, #0]
 8021912:	18d3      	adds	r3, r2, r3
 8021914:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8021918:	4433      	add	r3, r6
 802191a:	eb08 0203 	add.w	r2, r8, r3
 802191e:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 8021922:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 8021926:	ea0c 0c01 	and.w	ip, ip, r1
 802192a:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 802192e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021930:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021932:	ea83 0e04 	eor.w	lr, r3, r4
 8021936:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 802193a:	ea8e 0e09 	eor.w	lr, lr, r9
 802193e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021940:	ea8e 0e03 	eor.w	lr, lr, r3
 8021944:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8021948:	940f      	str	r4, [sp, #60]	@ 0x3c
 802194a:	9401      	str	r4, [sp, #4]
 802194c:	44a4      	add	ip, r4
 802194e:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 8021952:	44b4      	add	ip, r6
 8021954:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 8021956:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 802195a:	4015      	ands	r5, r2
 802195c:	ea85 0508 	eor.w	r5, r5, r8
 8021960:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 8021962:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021964:	ea84 0e03 	eor.w	lr, r4, r3
 8021968:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802196a:	ea8e 0e03 	eor.w	lr, lr, r3
 802196e:	ea80 000e 	eor.w	r0, r0, lr
 8021972:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021976:	9010      	str	r0, [sp, #64]	@ 0x40
 8021978:	9002      	str	r0, [sp, #8]
 802197a:	4405      	add	r5, r0
 802197c:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8021980:	4435      	add	r5, r6
 8021982:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 8021986:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 802198a:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 802198e:	ea00 000c 	and.w	r0, r0, ip
 8021992:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 8021996:	9f00      	ldr	r7, [sp, #0]
 8021998:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802199a:	4067      	eors	r7, r4
 802199c:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80219a0:	ea87 070e 	eor.w	r7, r7, lr
 80219a4:	ea89 0907 	eor.w	r9, r9, r7
 80219a8:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80219ac:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 80219b0:	4448      	add	r0, r9
 80219b2:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80219b6:	4430      	add	r0, r6
 80219b8:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 80219bc:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 80219c0:	4050      	eors	r0, r2
 80219c2:	9e01      	ldr	r6, [sp, #4]
 80219c4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80219c6:	ea86 0807 	eor.w	r8, r6, r7
 80219ca:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80219ce:	ea88 080a 	eor.w	r8, r8, sl
 80219d2:	ea83 0808 	eor.w	r8, r3, r8
 80219d6:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80219da:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80219de:	4440      	add	r0, r8
 80219e0:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80219e4:	4b29      	ldr	r3, [pc, #164]	@ (8021a8c <mg_sha1_transform+0x3e4>)
 80219e6:	4418      	add	r0, r3
 80219e8:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 80219ec:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80219f0:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80219f4:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80219f6:	9f02      	ldr	r7, [sp, #8]
 80219f8:	4077      	eors	r7, r6
 80219fa:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80219fc:	4077      	eors	r7, r6
 80219fe:	ea8e 0707 	eor.w	r7, lr, r7
 8021a02:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021a06:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021a08:	9703      	str	r7, [sp, #12]
 8021a0a:	4439      	add	r1, r7
 8021a0c:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021a10:	4419      	add	r1, r3
 8021a12:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 8021a14:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 8021a18:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 8021a1c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021a1e:	ea87 0e09 	eor.w	lr, r7, r9
 8021a22:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 8021a24:	ea87 0e0e 	eor.w	lr, r7, lr
 8021a28:	ea8a 0e0e 	eor.w	lr, sl, lr
 8021a2c:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021a30:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021a34:	4471      	add	r1, lr
 8021a36:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 8021a3a:	4419      	add	r1, r3
 8021a3c:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 8021a40:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 8021a44:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8021a48:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021a4a:	ea87 0c08 	eor.w	ip, r7, r8
 8021a4e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021a50:	ea87 0c0c 	eor.w	ip, r7, ip
 8021a54:	ea86 0c0c 	eor.w	ip, r6, ip
 8021a58:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021a5c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021a60:	44e3      	add	fp, ip
 8021a62:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 8021a66:	449b      	add	fp, r3
 8021a68:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8021a6c:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8021a70:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8021a74:	9d00      	ldr	r5, [sp, #0]
 8021a76:	9e03      	ldr	r6, [sp, #12]
 8021a78:	406e      	eors	r6, r5
 8021a7a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8021a7c:	406e      	eors	r6, r5
 8021a7e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021a80:	406e      	eors	r6, r5
 8021a82:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021a86:	e003      	b.n	8021a90 <mg_sha1_transform+0x3e8>
 8021a88:	5a827999 	.word	0x5a827999
 8021a8c:	6ed9eba1 	.word	0x6ed9eba1
 8021a90:	9716      	str	r7, [sp, #88]	@ 0x58
 8021a92:	9704      	str	r7, [sp, #16]
 8021a94:	44ba      	add	sl, r7
 8021a96:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8021a9a:	449a      	add	sl, r3
 8021a9c:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8021aa0:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 8021aa4:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8021aa8:	9e01      	ldr	r6, [sp, #4]
 8021aaa:	ea86 040e 	eor.w	r4, r6, lr
 8021aae:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021ab0:	407c      	eors	r4, r7
 8021ab2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021ab4:	407c      	eors	r4, r7
 8021ab6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021aba:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021abc:	9405      	str	r4, [sp, #20]
 8021abe:	4425      	add	r5, r4
 8021ac0:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021ac4:	441d      	add	r5, r3
 8021ac6:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8021aca:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8021ace:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021ad2:	9e02      	ldr	r6, [sp, #8]
 8021ad4:	ea86 000c 	eor.w	r0, r6, ip
 8021ad8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021ada:	4078      	eors	r0, r7
 8021adc:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021ade:	4078      	eors	r0, r7
 8021ae0:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021ae4:	4606      	mov	r6, r0
 8021ae6:	9018      	str	r0, [sp, #96]	@ 0x60
 8021ae8:	4404      	add	r4, r0
 8021aea:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021aee:	441c      	add	r4, r3
 8021af0:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 8021af4:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021af8:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 8021afc:	9f04      	ldr	r7, [sp, #16]
 8021afe:	ea89 0207 	eor.w	r2, r9, r7
 8021b02:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021b04:	407a      	eors	r2, r7
 8021b06:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021b08:	407a      	eors	r2, r7
 8021b0a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021b0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8021b10:	9206      	str	r2, [sp, #24]
 8021b12:	4410      	add	r0, r2
 8021b14:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021b18:	4418      	add	r0, r3
 8021b1a:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 8021b1e:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021b22:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021b26:	9a05      	ldr	r2, [sp, #20]
 8021b28:	ea88 0202 	eor.w	r2, r8, r2
 8021b2c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021b2e:	407a      	eors	r2, r7
 8021b30:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021b32:	407a      	eors	r2, r7
 8021b34:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021b38:	921a      	str	r2, [sp, #104]	@ 0x68
 8021b3a:	9207      	str	r2, [sp, #28]
 8021b3c:	4411      	add	r1, r2
 8021b3e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021b42:	4419      	add	r1, r3
 8021b44:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8021b48:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021b4c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021b50:	960b      	str	r6, [sp, #44]	@ 0x2c
 8021b52:	9f03      	ldr	r7, [sp, #12]
 8021b54:	ea87 0b06 	eor.w	fp, r7, r6
 8021b58:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021b5a:	ea87 0b0b 	eor.w	fp, r7, fp
 8021b5e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021b60:	ea87 0b0b 	eor.w	fp, r7, fp
 8021b64:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021b68:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8021b6c:	f8cd b020 	str.w	fp, [sp, #32]
 8021b70:	445a      	add	r2, fp
 8021b72:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021b76:	441a      	add	r2, r3
 8021b78:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8021b7c:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8021b80:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 8021b84:	9e06      	ldr	r6, [sp, #24]
 8021b86:	ea8e 0b06 	eor.w	fp, lr, r6
 8021b8a:	9e00      	ldr	r6, [sp, #0]
 8021b8c:	ea86 0b0b 	eor.w	fp, r6, fp
 8021b90:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021b92:	ea87 0b0b 	eor.w	fp, r7, fp
 8021b96:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021b9a:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8021b9e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8021ba2:	44da      	add	sl, fp
 8021ba4:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8021ba8:	449a      	add	sl, r3
 8021baa:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8021bae:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021bb2:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021bb6:	9e07      	ldr	r6, [sp, #28]
 8021bb8:	ea8c 0b06 	eor.w	fp, ip, r6
 8021bbc:	9e01      	ldr	r6, [sp, #4]
 8021bbe:	ea86 0b0b 	eor.w	fp, r6, fp
 8021bc2:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021bc4:	ea87 0b0b 	eor.w	fp, r7, fp
 8021bc8:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021bcc:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8021bd0:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8021bd4:	445d      	add	r5, fp
 8021bd6:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021bda:	441d      	add	r5, r3
 8021bdc:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8021be0:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 8021be4:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021be8:	9e08      	ldr	r6, [sp, #32]
 8021bea:	9f04      	ldr	r7, [sp, #16]
 8021bec:	ea87 0b06 	eor.w	fp, r7, r6
 8021bf0:	9e02      	ldr	r6, [sp, #8]
 8021bf2:	ea86 0b0b 	eor.w	fp, r6, fp
 8021bf6:	9e00      	ldr	r6, [sp, #0]
 8021bf8:	ea86 0b0b 	eor.w	fp, r6, fp
 8021bfc:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021c00:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8021c04:	f8cd b000 	str.w	fp, [sp]
 8021c08:	445c      	add	r4, fp
 8021c0a:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021c0e:	441c      	add	r4, r3
 8021c10:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 8021c14:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 8021c18:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021c1c:	9e05      	ldr	r6, [sp, #20]
 8021c1e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021c20:	ea86 0b07 	eor.w	fp, r6, r7
 8021c24:	ea89 0b0b 	eor.w	fp, r9, fp
 8021c28:	9e01      	ldr	r6, [sp, #4]
 8021c2a:	ea86 0b0b 	eor.w	fp, r6, fp
 8021c2e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021c32:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8021c36:	f8cd b004 	str.w	fp, [sp, #4]
 8021c3a:	4458      	add	r0, fp
 8021c3c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021c40:	4418      	add	r0, r3
 8021c42:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 8021c46:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021c4a:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021c4e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021c50:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021c52:	ea86 0b07 	eor.w	fp, r6, r7
 8021c56:	ea88 0b0b 	eor.w	fp, r8, fp
 8021c5a:	9e02      	ldr	r6, [sp, #8]
 8021c5c:	ea86 0b0b 	eor.w	fp, r6, fp
 8021c60:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021c64:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8021c68:	f8cd b008 	str.w	fp, [sp, #8]
 8021c6c:	4459      	add	r1, fp
 8021c6e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021c72:	4419      	add	r1, r3
 8021c74:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8021c78:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021c7c:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021c80:	9e06      	ldr	r6, [sp, #24]
 8021c82:	9f00      	ldr	r7, [sp, #0]
 8021c84:	ea86 0b07 	eor.w	fp, r6, r7
 8021c88:	9e03      	ldr	r6, [sp, #12]
 8021c8a:	ea86 0b0b 	eor.w	fp, r6, fp
 8021c8e:	ea89 090b 	eor.w	r9, r9, fp
 8021c92:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 8021c96:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8021c9a:	445a      	add	r2, fp
 8021c9c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021ca0:	441a      	add	r2, r3
 8021ca2:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 8021ca6:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8021caa:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8021cae:	9e07      	ldr	r6, [sp, #28]
 8021cb0:	9f01      	ldr	r7, [sp, #4]
 8021cb2:	ea86 0a07 	eor.w	sl, r6, r7
 8021cb6:	ea8e 0a0a 	eor.w	sl, lr, sl
 8021cba:	ea88 080a 	eor.w	r8, r8, sl
 8021cbe:	ea4f 7af8 	mov.w	sl, r8, ror #31
 8021cc2:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 8021cc6:	44d1      	add	r9, sl
 8021cc8:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8021ccc:	4499      	add	r9, r3
 8021cce:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 8021cd2:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 8021cd6:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021cda:	9e08      	ldr	r6, [sp, #32]
 8021cdc:	9f02      	ldr	r7, [sp, #8]
 8021cde:	ea86 0907 	eor.w	r9, r6, r7
 8021ce2:	ea8c 0909 	eor.w	r9, ip, r9
 8021ce6:	9e03      	ldr	r6, [sp, #12]
 8021ce8:	ea86 0709 	eor.w	r7, r6, r9
 8021cec:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021cf0:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8021cf4:	444d      	add	r5, r9
 8021cf6:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 8021cfa:	441d      	add	r5, r3
 8021cfc:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 8021d00:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 8021d04:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 8021d08:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021d0a:	ea87 070b 	eor.w	r7, r7, fp
 8021d0e:	9e04      	ldr	r6, [sp, #16]
 8021d10:	4077      	eors	r7, r6
 8021d12:	ea8e 0e07 	eor.w	lr, lr, r7
 8021d16:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8021d1a:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 8021d1e:	4474      	add	r4, lr
 8021d20:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021d24:	441c      	add	r4, r3
 8021d26:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 8021d2a:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 8021d2e:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8021d32:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021d34:	ea87 070a 	eor.w	r7, r7, sl
 8021d38:	9e05      	ldr	r6, [sp, #20]
 8021d3a:	4077      	eors	r7, r6
 8021d3c:	ea8c 0c07 	eor.w	ip, ip, r7
 8021d40:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021d44:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021d48:	f8cd c00c 	str.w	ip, [sp, #12]
 8021d4c:	4460      	add	r0, ip
 8021d4e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 8021d52:	4418      	add	r0, r3
 8021d54:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8021d58:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8021d5c:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8021d60:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 8021d64:	4319      	orrs	r1, r3
 8021d66:	9b00      	ldr	r3, [sp, #0]
 8021d68:	ea83 0309 	eor.w	r3, r3, r9
 8021d6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021d6e:	4073      	eors	r3, r6
 8021d70:	9e04      	ldr	r6, [sp, #16]
 8021d72:	405e      	eors	r6, r3
 8021d74:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021d78:	9316      	str	r3, [sp, #88]	@ 0x58
 8021d7a:	9304      	str	r3, [sp, #16]
 8021d7c:	4419      	add	r1, r3
 8021d7e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8021d82:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021d86:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021d8a:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021d8e:	311c      	adds	r1, #28
 8021d90:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 8021d94:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8021d98:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8021d9c:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8021da0:	4332      	orrs	r2, r6
 8021da2:	9b01      	ldr	r3, [sp, #4]
 8021da4:	ea83 060e 	eor.w	r6, r3, lr
 8021da8:	9b06      	ldr	r3, [sp, #24]
 8021daa:	405e      	eors	r6, r3
 8021dac:	9f05      	ldr	r7, [sp, #20]
 8021dae:	407e      	eors	r6, r7
 8021db0:	ea4f 77f6 	mov.w	r7, r6, ror #31
 8021db4:	9717      	str	r7, [sp, #92]	@ 0x5c
 8021db6:	9705      	str	r7, [sp, #20]
 8021db8:	443a      	add	r2, r7
 8021dba:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021dbe:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8021dc2:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021dc6:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021dca:	321c      	adds	r2, #28
 8021dcc:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8021dd0:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 8021dd4:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8021dd8:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 8021ddc:	433e      	orrs	r6, r7
 8021dde:	9f02      	ldr	r7, [sp, #8]
 8021de0:	4663      	mov	r3, ip
 8021de2:	405f      	eors	r7, r3
 8021de4:	9b07      	ldr	r3, [sp, #28]
 8021de6:	405f      	eors	r7, r3
 8021de8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021dea:	405f      	eors	r7, r3
 8021dec:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021df0:	9718      	str	r7, [sp, #96]	@ 0x60
 8021df2:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021df4:	443e      	add	r6, r7
 8021df6:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021dfa:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021dfe:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021e02:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021e06:	361c      	adds	r6, #28
 8021e08:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 8021e0c:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 8021e10:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 8021e14:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 8021e18:	432f      	orrs	r7, r5
 8021e1a:	9d04      	ldr	r5, [sp, #16]
 8021e1c:	ea8b 0505 	eor.w	r5, fp, r5
 8021e20:	9b08      	ldr	r3, [sp, #32]
 8021e22:	405d      	eors	r5, r3
 8021e24:	9b06      	ldr	r3, [sp, #24]
 8021e26:	405d      	eors	r5, r3
 8021e28:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021e2c:	9519      	str	r5, [sp, #100]	@ 0x64
 8021e2e:	9506      	str	r5, [sp, #24]
 8021e30:	442f      	add	r7, r5
 8021e32:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 8021e36:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021e3a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021e3e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8021e42:	371c      	adds	r7, #28
 8021e44:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8021e48:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8021e4c:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8021e50:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 8021e54:	ea4c 0c04 	orr.w	ip, ip, r4
 8021e58:	9c05      	ldr	r4, [sp, #20]
 8021e5a:	ea8a 0404 	eor.w	r4, sl, r4
 8021e5e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021e60:	406c      	eors	r4, r5
 8021e62:	9b07      	ldr	r3, [sp, #28]
 8021e64:	405c      	eors	r4, r3
 8021e66:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021e6a:	941a      	str	r4, [sp, #104]	@ 0x68
 8021e6c:	9407      	str	r4, [sp, #28]
 8021e6e:	44a4      	add	ip, r4
 8021e70:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 8021e74:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8021e78:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8021e7c:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8021e80:	f10c 0c1c 	add.w	ip, ip, #28
 8021e84:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8021e88:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8021e8c:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8021e90:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 8021e94:	4320      	orrs	r0, r4
 8021e96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e98:	ea89 0404 	eor.w	r4, r9, r4
 8021e9c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021e9e:	406c      	eors	r4, r5
 8021ea0:	9b08      	ldr	r3, [sp, #32]
 8021ea2:	405c      	eors	r4, r3
 8021ea4:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021ea8:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021eaa:	9408      	str	r4, [sp, #32]
 8021eac:	4420      	add	r0, r4
 8021eae:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 8021eb2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8021eb6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021eba:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021ebe:	301c      	adds	r0, #28
 8021ec0:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 8021ec4:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8021ec8:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 8021ecc:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8021ed0:	430d      	orrs	r5, r1
 8021ed2:	9906      	ldr	r1, [sp, #24]
 8021ed4:	ea8e 0101 	eor.w	r1, lr, r1
 8021ed8:	9c00      	ldr	r4, [sp, #0]
 8021eda:	4061      	eors	r1, r4
 8021edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ede:	4059      	eors	r1, r3
 8021ee0:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8021ee4:	911c      	str	r1, [sp, #112]	@ 0x70
 8021ee6:	9109      	str	r1, [sp, #36]	@ 0x24
 8021ee8:	440d      	add	r5, r1
 8021eea:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8021eee:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8021ef2:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8021ef6:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8021efa:	351c      	adds	r5, #28
 8021efc:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 8021f00:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 8021f04:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 8021f08:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 8021f0c:	4314      	orrs	r4, r2
 8021f0e:	9903      	ldr	r1, [sp, #12]
 8021f10:	9a07      	ldr	r2, [sp, #28]
 8021f12:	404a      	eors	r2, r1
 8021f14:	9901      	ldr	r1, [sp, #4]
 8021f16:	404a      	eors	r2, r1
 8021f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021f1a:	405a      	eors	r2, r3
 8021f1c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021f20:	921d      	str	r2, [sp, #116]	@ 0x74
 8021f22:	920a      	str	r2, [sp, #40]	@ 0x28
 8021f24:	4414      	add	r4, r2
 8021f26:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8021f2a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8021f2e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021f32:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021f36:	341c      	adds	r4, #28
 8021f38:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 8021f3c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8021f40:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 8021f44:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8021f48:	4311      	orrs	r1, r2
 8021f4a:	9a04      	ldr	r2, [sp, #16]
 8021f4c:	9e08      	ldr	r6, [sp, #32]
 8021f4e:	4072      	eors	r2, r6
 8021f50:	9e02      	ldr	r6, [sp, #8]
 8021f52:	4072      	eors	r2, r6
 8021f54:	9b00      	ldr	r3, [sp, #0]
 8021f56:	405a      	eors	r2, r3
 8021f58:	ea4f 76f2 	mov.w	r6, r2, ror #31
 8021f5c:	960e      	str	r6, [sp, #56]	@ 0x38
 8021f5e:	9600      	str	r6, [sp, #0]
 8021f60:	4431      	add	r1, r6
 8021f62:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021f66:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021f6a:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021f6e:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021f72:	311c      	adds	r1, #28
 8021f74:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8021f78:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8021f7c:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8021f80:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 8021f84:	4332      	orrs	r2, r6
 8021f86:	9f05      	ldr	r7, [sp, #20]
 8021f88:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021f8a:	407e      	eors	r6, r7
 8021f8c:	ea8b 0606 	eor.w	r6, fp, r6
 8021f90:	9b01      	ldr	r3, [sp, #4]
 8021f92:	405e      	eors	r6, r3
 8021f94:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021f98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f9a:	9301      	str	r3, [sp, #4]
 8021f9c:	441a      	add	r2, r3
 8021f9e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021fa2:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 8021fa6:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021faa:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021fae:	321c      	adds	r2, #28
 8021fb0:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 8021fb4:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8021fb8:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 8021fbc:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8021fc0:	433e      	orrs	r6, r7
 8021fc2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021fc6:	405f      	eors	r7, r3
 8021fc8:	ea8a 0707 	eor.w	r7, sl, r7
 8021fcc:	9b02      	ldr	r3, [sp, #8]
 8021fce:	405f      	eors	r7, r3
 8021fd0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021fd4:	9710      	str	r7, [sp, #64]	@ 0x40
 8021fd6:	9702      	str	r7, [sp, #8]
 8021fd8:	443e      	add	r6, r7
 8021fda:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021fde:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021fe2:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021fe6:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021fea:	361c      	adds	r6, #28
 8021fec:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 8021ff0:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8021ff4:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8021ff8:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 8021ffc:	4338      	orrs	r0, r7
 8021ffe:	9b06      	ldr	r3, [sp, #24]
 8022000:	9f00      	ldr	r7, [sp, #0]
 8022002:	405f      	eors	r7, r3
 8022004:	ea89 0707 	eor.w	r7, r9, r7
 8022008:	ea8b 0b07 	eor.w	fp, fp, r7
 802200c:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 8022010:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8022014:	4460      	add	r0, ip
 8022016:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 802201a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802201e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8022022:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8022026:	301c      	adds	r0, #28
 8022028:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 802202c:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 8022030:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 8022034:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 8022038:	433d      	orrs	r5, r7
 802203a:	9f07      	ldr	r7, [sp, #28]
 802203c:	9b01      	ldr	r3, [sp, #4]
 802203e:	405f      	eors	r7, r3
 8022040:	ea8e 0707 	eor.w	r7, lr, r7
 8022044:	ea8a 0a07 	eor.w	sl, sl, r7
 8022048:	ea4f 78fa 	mov.w	r8, sl, ror #31
 802204c:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8022050:	4445      	add	r5, r8
 8022052:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8022056:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 802205a:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 802205e:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 8022062:	351c      	adds	r5, #28
 8022064:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8022068:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 802206c:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8022070:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 8022074:	433c      	orrs	r4, r7
 8022076:	9b08      	ldr	r3, [sp, #32]
 8022078:	9f02      	ldr	r7, [sp, #8]
 802207a:	405f      	eors	r7, r3
 802207c:	9b03      	ldr	r3, [sp, #12]
 802207e:	405f      	eors	r7, r3
 8022080:	ea89 0707 	eor.w	r7, r9, r7
 8022084:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8022088:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 802208c:	444c      	add	r4, r9
 802208e:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 8022092:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8022096:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 802209a:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 802209e:	341c      	adds	r4, #28
 80220a0:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 80220a4:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 80220a8:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 80220ac:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 80220b0:	4339      	orrs	r1, r7
 80220b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80220b4:	ea83 070c 	eor.w	r7, r3, ip
 80220b8:	9b04      	ldr	r3, [sp, #16]
 80220ba:	405f      	eors	r7, r3
 80220bc:	ea8e 0707 	eor.w	r7, lr, r7
 80220c0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80220c4:	9714      	str	r7, [sp, #80]	@ 0x50
 80220c6:	970c      	str	r7, [sp, #48]	@ 0x30
 80220c8:	4439      	add	r1, r7
 80220ca:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80220ce:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 80220d2:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 80220d6:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 80220da:	311c      	adds	r1, #28
 80220dc:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 80220e0:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 80220e4:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80220e8:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 80220ec:	433a      	orrs	r2, r7
 80220ee:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80220f0:	ea87 0708 	eor.w	r7, r7, r8
 80220f4:	9b05      	ldr	r3, [sp, #20]
 80220f6:	405f      	eors	r7, r3
 80220f8:	9b03      	ldr	r3, [sp, #12]
 80220fa:	405f      	eors	r7, r3
 80220fc:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 8022100:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 8022104:	445a      	add	r2, fp
 8022106:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802210a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802210e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8022112:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8022116:	321c      	adds	r2, #28
 8022118:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 802211c:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 8022120:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 8022124:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 8022128:	4337      	orrs	r7, r6
 802212a:	9e00      	ldr	r6, [sp, #0]
 802212c:	ea86 0609 	eor.w	r6, r6, r9
 8022130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022132:	405e      	eors	r6, r3
 8022134:	9b04      	ldr	r3, [sp, #16]
 8022136:	405e      	eors	r6, r3
 8022138:	ea4f 7af6 	mov.w	sl, r6, ror #31
 802213c:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8022140:	4457      	add	r7, sl
 8022142:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 8022146:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 802214a:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 802214e:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8022152:	371c      	adds	r7, #28
 8022154:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8022158:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 802215c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8022160:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 8022164:	4330      	orrs	r0, r6
 8022166:	9e01      	ldr	r6, [sp, #4]
 8022168:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802216a:	405e      	eors	r6, r3
 802216c:	9b06      	ldr	r3, [sp, #24]
 802216e:	405e      	eors	r6, r3
 8022170:	9b05      	ldr	r3, [sp, #20]
 8022172:	405e      	eors	r6, r3
 8022174:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8022178:	9617      	str	r6, [sp, #92]	@ 0x5c
 802217a:	9603      	str	r6, [sp, #12]
 802217c:	4430      	add	r0, r6
 802217e:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8022182:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8022186:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 802218a:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 802218e:	301c      	adds	r0, #28
 8022190:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8022194:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8022198:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 802219c:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 80221a0:	432e      	orrs	r6, r5
 80221a2:	9d02      	ldr	r5, [sp, #8]
 80221a4:	ea85 050b 	eor.w	r5, r5, fp
 80221a8:	9b07      	ldr	r3, [sp, #28]
 80221aa:	405d      	eors	r5, r3
 80221ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80221ae:	405d      	eors	r5, r3
 80221b0:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80221b4:	9518      	str	r5, [sp, #96]	@ 0x60
 80221b6:	9504      	str	r5, [sp, #16]
 80221b8:	442e      	add	r6, r5
 80221ba:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 80221be:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80221c2:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80221c6:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80221ca:	361c      	adds	r6, #28
 80221cc:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 80221d0:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 80221d4:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 80221d8:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 80221dc:	432c      	orrs	r4, r5
 80221de:	ea8c 050a 	eor.w	r5, ip, sl
 80221e2:	9b08      	ldr	r3, [sp, #32]
 80221e4:	405d      	eors	r5, r3
 80221e6:	9b06      	ldr	r3, [sp, #24]
 80221e8:	405d      	eors	r5, r3
 80221ea:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80221ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80221f0:	9505      	str	r5, [sp, #20]
 80221f2:	442c      	add	r4, r5
 80221f4:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 80221f8:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80221fc:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8022200:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8022204:	341c      	adds	r4, #28
 8022206:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 802220a:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 802220e:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8022212:	9d03      	ldr	r5, [sp, #12]
 8022214:	ea88 0305 	eor.w	r3, r8, r5
 8022218:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802221a:	406b      	eors	r3, r5
 802221c:	9d07      	ldr	r5, [sp, #28]
 802221e:	406b      	eors	r3, r5
 8022220:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022224:	931a      	str	r3, [sp, #104]	@ 0x68
 8022226:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022228:	4419      	add	r1, r3
 802222a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802222e:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 802262c <mg_sha1_transform+0xf84>
 8022232:	4471      	add	r1, lr
 8022234:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8022238:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 802223c:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8022240:	9b04      	ldr	r3, [sp, #16]
 8022242:	ea89 0303 	eor.w	r3, r9, r3
 8022246:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022248:	406b      	eors	r3, r5
 802224a:	9d08      	ldr	r5, [sp, #32]
 802224c:	406b      	eors	r3, r5
 802224e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022252:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022254:	9306      	str	r3, [sp, #24]
 8022256:	441a      	add	r2, r3
 8022258:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802225c:	4472      	add	r2, lr
 802225e:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8022262:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8022266:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 802226a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802226c:	9d05      	ldr	r5, [sp, #20]
 802226e:	406f      	eors	r7, r5
 8022270:	9d00      	ldr	r5, [sp, #0]
 8022272:	406f      	eors	r7, r5
 8022274:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022276:	406f      	eors	r7, r5
 8022278:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802227c:	971c      	str	r7, [sp, #112]	@ 0x70
 802227e:	9707      	str	r7, [sp, #28]
 8022280:	443b      	add	r3, r7
 8022282:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8022286:	4473      	add	r3, lr
 8022288:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 802228c:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8022290:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8022294:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022296:	ea8b 0707 	eor.w	r7, fp, r7
 802229a:	9d01      	ldr	r5, [sp, #4]
 802229c:	406f      	eors	r7, r5
 802229e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80222a0:	406f      	eors	r7, r5
 80222a2:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80222a6:	971d      	str	r7, [sp, #116]	@ 0x74
 80222a8:	9708      	str	r7, [sp, #32]
 80222aa:	4438      	add	r0, r7
 80222ac:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 80222b0:	4470      	add	r0, lr
 80222b2:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 80222b6:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 80222ba:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 80222be:	9e06      	ldr	r6, [sp, #24]
 80222c0:	ea8a 0606 	eor.w	r6, sl, r6
 80222c4:	9d02      	ldr	r5, [sp, #8]
 80222c6:	406e      	eors	r6, r5
 80222c8:	9d00      	ldr	r5, [sp, #0]
 80222ca:	406e      	eors	r6, r5
 80222cc:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80222d0:	960e      	str	r6, [sp, #56]	@ 0x38
 80222d2:	9600      	str	r6, [sp, #0]
 80222d4:	4437      	add	r7, r6
 80222d6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 80222da:	4477      	add	r7, lr
 80222dc:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 80222e0:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 80222e4:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 80222e8:	9c03      	ldr	r4, [sp, #12]
 80222ea:	9d07      	ldr	r5, [sp, #28]
 80222ec:	406c      	eors	r4, r5
 80222ee:	ea8c 0404 	eor.w	r4, ip, r4
 80222f2:	9d01      	ldr	r5, [sp, #4]
 80222f4:	406c      	eors	r4, r5
 80222f6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80222fa:	940f      	str	r4, [sp, #60]	@ 0x3c
 80222fc:	9401      	str	r4, [sp, #4]
 80222fe:	4426      	add	r6, r4
 8022300:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022304:	4476      	add	r6, lr
 8022306:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 802230a:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 802230e:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8022312:	9904      	ldr	r1, [sp, #16]
 8022314:	9c08      	ldr	r4, [sp, #32]
 8022316:	4061      	eors	r1, r4
 8022318:	ea88 0101 	eor.w	r1, r8, r1
 802231c:	9c02      	ldr	r4, [sp, #8]
 802231e:	4061      	eors	r1, r4
 8022320:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8022324:	9110      	str	r1, [sp, #64]	@ 0x40
 8022326:	440d      	add	r5, r1
 8022328:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 802232c:	4475      	add	r5, lr
 802232e:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8022332:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022336:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 802233a:	9a05      	ldr	r2, [sp, #20]
 802233c:	9c00      	ldr	r4, [sp, #0]
 802233e:	4062      	eors	r2, r4
 8022340:	ea89 0202 	eor.w	r2, r9, r2
 8022344:	ea8c 0202 	eor.w	r2, ip, r2
 8022348:	ea4f 72f2 	mov.w	r2, r2, ror #31
 802234c:	9211      	str	r2, [sp, #68]	@ 0x44
 802234e:	4496      	add	lr, r2
 8022350:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8022354:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8022358:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 802235c:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8022360:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8022364:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8022368:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 802236c:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8022370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022372:	9c01      	ldr	r4, [sp, #4]
 8022374:	4063      	eors	r3, r4
 8022376:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022378:	4063      	eors	r3, r4
 802237a:	ea88 0303 	eor.w	r3, r8, r3
 802237e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022382:	9312      	str	r3, [sp, #72]	@ 0x48
 8022384:	449c      	add	ip, r3
 8022386:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 802238a:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 802238e:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8022392:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8022396:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 802239a:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 802239e:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 80223a2:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 80223a6:	9806      	ldr	r0, [sp, #24]
 80223a8:	4048      	eors	r0, r1
 80223aa:	ea8b 0000 	eor.w	r0, fp, r0
 80223ae:	ea89 0000 	eor.w	r0, r9, r0
 80223b2:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80223b6:	9013      	str	r0, [sp, #76]	@ 0x4c
 80223b8:	4480      	add	r8, r0
 80223ba:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 80223be:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 80223c2:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 80223c6:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 80223ca:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 80223ce:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 80223d2:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 80223d6:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 80223da:	9702      	str	r7, [sp, #8]
 80223dc:	9f07      	ldr	r7, [sp, #28]
 80223de:	ea87 0902 	eor.w	r9, r7, r2
 80223e2:	ea8a 0909 	eor.w	r9, sl, r9
 80223e6:	ea84 0909 	eor.w	r9, r4, r9
 80223ea:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80223ee:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80223f2:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80223f6:	9c02      	ldr	r4, [sp, #8]
 80223f8:	444c      	add	r4, r9
 80223fa:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 80223fe:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8022402:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022406:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 802240a:	3756      	adds	r7, #86	@ 0x56
 802240c:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8022410:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022414:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022418:	9c08      	ldr	r4, [sp, #32]
 802241a:	ea84 0903 	eor.w	r9, r4, r3
 802241e:	9c03      	ldr	r4, [sp, #12]
 8022420:	ea84 0909 	eor.w	r9, r4, r9
 8022424:	ea8b 0909 	eor.w	r9, fp, r9
 8022428:	ea4f 79f9 	mov.w	r9, r9, ror #31
 802242c:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8022430:	444e      	add	r6, r9
 8022432:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8022436:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 802243a:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 802243e:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022442:	3656      	adds	r6, #86	@ 0x56
 8022444:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8022448:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 802244c:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8022450:	9c00      	ldr	r4, [sp, #0]
 8022452:	ea84 0b00 	eor.w	fp, r4, r0
 8022456:	9c04      	ldr	r4, [sp, #16]
 8022458:	ea84 0b0b 	eor.w	fp, r4, fp
 802245c:	ea8a 0b0b 	eor.w	fp, sl, fp
 8022460:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8022464:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8022468:	445d      	add	r5, fp
 802246a:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 802246e:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8022472:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8022476:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 802247a:	3556      	adds	r5, #86	@ 0x56
 802247c:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8022480:	9602      	str	r6, [sp, #8]
 8022482:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8022486:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 802248a:	9c01      	ldr	r4, [sp, #4]
 802248c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802248e:	ea84 0a06 	eor.w	sl, r4, r6
 8022492:	9c05      	ldr	r4, [sp, #20]
 8022494:	ea84 0a0a 	eor.w	sl, r4, sl
 8022498:	9c03      	ldr	r4, [sp, #12]
 802249a:	ea84 0a0a 	eor.w	sl, r4, sl
 802249e:	ea4f 7afa 	mov.w	sl, sl, ror #31
 80224a2:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 80224a6:	44d6      	add	lr, sl
 80224a8:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 80224ac:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 80224b0:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 80224b4:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 80224b8:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 80224bc:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 80224c0:	9e02      	ldr	r6, [sp, #8]
 80224c2:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 80224c6:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80224ca:	ea81 0109 	eor.w	r1, r1, r9
 80224ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80224d0:	4071      	eors	r1, r6
 80224d2:	9c04      	ldr	r4, [sp, #16]
 80224d4:	4061      	eors	r1, r4
 80224d6:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80224da:	9118      	str	r1, [sp, #96]	@ 0x60
 80224dc:	448c      	add	ip, r1
 80224de:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 80224e2:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 80224e6:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 80224ea:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 80224ee:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 80224f2:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 80224f6:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 80224fa:	9c02      	ldr	r4, [sp, #8]
 80224fc:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8022500:	ea82 020b 	eor.w	r2, r2, fp
 8022504:	9c06      	ldr	r4, [sp, #24]
 8022506:	4062      	eors	r2, r4
 8022508:	9c05      	ldr	r4, [sp, #20]
 802250a:	4062      	eors	r2, r4
 802250c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8022510:	9219      	str	r2, [sp, #100]	@ 0x64
 8022512:	4490      	add	r8, r2
 8022514:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8022518:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 802251c:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8022520:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8022524:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8022528:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 802252c:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8022530:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8022534:	ea83 030a 	eor.w	r3, r3, sl
 8022538:	9c07      	ldr	r4, [sp, #28]
 802253a:	4063      	eors	r3, r4
 802253c:	4073      	eors	r3, r6
 802253e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8022542:	931a      	str	r3, [sp, #104]	@ 0x68
 8022544:	441f      	add	r7, r3
 8022546:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 802254a:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 802254e:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8022552:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8022556:	3756      	adds	r7, #86	@ 0x56
 8022558:	9e02      	ldr	r6, [sp, #8]
 802255a:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 802255e:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8022562:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8022566:	4048      	eors	r0, r1
 8022568:	9908      	ldr	r1, [sp, #32]
 802256a:	4048      	eors	r0, r1
 802256c:	9c06      	ldr	r4, [sp, #24]
 802256e:	4060      	eors	r0, r4
 8022570:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8022574:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022576:	4406      	add	r6, r0
 8022578:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 802257c:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8022580:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8022584:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8022588:	3656      	adds	r6, #86	@ 0x56
 802258a:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 802258e:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8022592:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8022596:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022598:	406a      	eors	r2, r5
 802259a:	9d00      	ldr	r5, [sp, #0]
 802259c:	406a      	eors	r2, r5
 802259e:	9c07      	ldr	r4, [sp, #28]
 80225a0:	4062      	eors	r2, r4
 80225a2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80225a6:	921c      	str	r2, [sp, #112]	@ 0x70
 80225a8:	4411      	add	r1, r2
 80225aa:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 80225ae:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 80225b2:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 80225b6:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 80225ba:	3156      	adds	r1, #86	@ 0x56
 80225bc:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 80225c0:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 80225c4:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 80225c8:	ea89 0903 	eor.w	r9, r9, r3
 80225cc:	9b01      	ldr	r3, [sp, #4]
 80225ce:	ea83 0909 	eor.w	r9, r3, r9
 80225d2:	9c08      	ldr	r4, [sp, #32]
 80225d4:	ea84 0309 	eor.w	r3, r4, r9
 80225d8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80225dc:	931d      	str	r3, [sp, #116]	@ 0x74
 80225de:	4413      	add	r3, r2
 80225e0:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80225e4:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 80225e8:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 80225ec:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 80225f0:	3356      	adds	r3, #86	@ 0x56
 80225f2:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 80225f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80225f8:	6802      	ldr	r2, [r0, #0]
 80225fa:	441a      	add	r2, r3
 80225fc:	6002      	str	r2, [r0, #0]
  state[1] += b;
 80225fe:	6843      	ldr	r3, [r0, #4]
 8022600:	440b      	add	r3, r1
 8022602:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8022604:	6883      	ldr	r3, [r0, #8]
 8022606:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 802260a:	6083      	str	r3, [r0, #8]
  state[3] += d;
 802260c:	68c3      	ldr	r3, [r0, #12]
 802260e:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8022612:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8022614:	6903      	ldr	r3, [r0, #16]
 8022616:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 802261a:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 802261c:	2240      	movs	r2, #64	@ 0x40
 802261e:	2100      	movs	r1, #0
 8022620:	a80e      	add	r0, sp, #56	@ 0x38
 8022622:	f00a f92d 	bl	802c880 <memset>
}
 8022626:	b01f      	add	sp, #124	@ 0x7c
 8022628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802262c:	ca62c1d6 	.word	0xca62c1d6

08022630 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8022630:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8022632:	fb01 f400 	mul.w	r4, r1, r0
 8022636:	4620      	mov	r0, r4
 8022638:	f7f8 f8ee 	bl	801a818 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 802263c:	4605      	mov	r5, r0
 802263e:	b118      	cbz	r0, 8022648 <mg_calloc+0x18>
 8022640:	4622      	mov	r2, r4
 8022642:	2100      	movs	r1, #0
 8022644:	f00a f91c 	bl	802c880 <memset>
}
 8022648:	4628      	mov	r0, r5
 802264a:	bd38      	pop	{r3, r4, r5, pc}

0802264c <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 802264c:	b570      	push	{r4, r5, r6, lr}
 802264e:	4605      	mov	r5, r0
 8022650:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 8022652:	6811      	ldr	r1, [r2, #0]
 8022654:	1d0c      	adds	r4, r1, #4
 8022656:	6014      	str	r4, [r2, #0]
 8022658:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 802265a:	f101 0408 	add.w	r4, r1, #8
 802265e:	6014      	str	r4, [r2, #0]
 8022660:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8022662:	b923      	cbnz	r3, 802266e <mg_print_esc+0x22>
 8022664:	b11c      	cbz	r4, 802266e <mg_print_esc+0x22>
 8022666:	4620      	mov	r0, r4
 8022668:	f7ed fe1a 	bl	80102a0 <strlen>
 802266c:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 802266e:	4622      	mov	r2, r4
 8022670:	4631      	mov	r1, r6
 8022672:	4628      	mov	r0, r5
 8022674:	f7fe fd65 	bl	8021142 <qcpy>
}
 8022678:	bd70      	pop	{r4, r5, r6, pc}

0802267a <getpeer>:
                                     bool lsn) {
 802267a:	b570      	push	{r4, r5, r6, lr}
 802267c:	460d      	mov	r5, r1
 802267e:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8022680:	6804      	ldr	r4, [r0, #0]
 8022682:	e000      	b.n	8022686 <getpeer+0xc>
 8022684:	6824      	ldr	r4, [r4, #0]
 8022686:	b364      	cbz	r4, 80226e2 <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8022688:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802268c:	f013 0f10 	tst.w	r3, #16
 8022690:	d008      	beq.n	80226a4 <getpeer+0x2a>
 8022692:	69a8      	ldr	r0, [r5, #24]
 8022694:	b130      	cbz	r0, 80226a4 <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8022696:	2204      	movs	r2, #4
 8022698:	f104 011c 	add.w	r1, r4, #28
 802269c:	300e      	adds	r0, #14
 802269e:	f00a f85b 	bl	802c758 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 80226a2:	b1f0      	cbz	r0, 80226e2 <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80226a4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80226a8:	f013 0301 	ands.w	r3, r3, #1
 80226ac:	d005      	beq.n	80226ba <getpeer+0x40>
 80226ae:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80226b0:	b11a      	cbz	r2, 80226ba <getpeer+0x40>
 80226b2:	8b21      	ldrh	r1, [r4, #24]
 80226b4:	8852      	ldrh	r2, [r2, #2]
 80226b6:	4291      	cmp	r1, r2
 80226b8:	d013      	beq.n	80226e2 <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d1e2      	bne.n	8022684 <getpeer+0xa>
 80226be:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80226c0:	2b00      	cmp	r3, #0
 80226c2:	d0df      	beq.n	8022684 <getpeer+0xa>
 80226c4:	8b21      	ldrh	r1, [r4, #24]
 80226c6:	885a      	ldrh	r2, [r3, #2]
 80226c8:	4291      	cmp	r1, r2
 80226ca:	d1db      	bne.n	8022684 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 80226cc:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 80226d0:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 80226d4:	42b2      	cmp	r2, r6
 80226d6:	d1d5      	bne.n	8022684 <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 80226d8:	b91e      	cbnz	r6, 80226e2 <getpeer+0x68>
 80226da:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80226dc:	881b      	ldrh	r3, [r3, #0]
 80226de:	429a      	cmp	r2, r3
 80226e0:	d1d0      	bne.n	8022684 <getpeer+0xa>
}
 80226e2:	4620      	mov	r0, r4
 80226e4:	bd70      	pop	{r4, r5, r6, pc}

080226e6 <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 80226e6:	b508      	push	{r3, lr}
  putchar(c);
 80226e8:	f009 fb24 	bl	802bd34 <putchar>
}
 80226ec:	bd08      	pop	{r3, pc}

080226ee <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 80226ee:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80226f2:	6802      	ldr	r2, [r0, #0]
 80226f4:	6883      	ldr	r3, [r0, #8]
}
 80226f6:	58d0      	ldr	r0, [r2, r3]
 80226f8:	4770      	bx	lr
	...

080226fc <parse_net>:
static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {
 80226fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022700:	b08b      	sub	sp, #44	@ 0x2c
 8022702:	4604      	mov	r4, r0
 8022704:	460e      	mov	r6, r1
 8022706:	4615      	mov	r5, r2
  int n, a, b, c, d, slash = 32, len = 0;
 8022708:	2320      	movs	r3, #32
 802270a:	9304      	str	r3, [sp, #16]
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 802270c:	ab09      	add	r3, sp, #36	@ 0x24
 802270e:	9303      	str	r3, [sp, #12]
 8022710:	ab04      	add	r3, sp, #16
 8022712:	9302      	str	r3, [sp, #8]
 8022714:	ab05      	add	r3, sp, #20
 8022716:	9301      	str	r3, [sp, #4]
 8022718:	ab06      	add	r3, sp, #24
 802271a:	9300      	str	r3, [sp, #0]
 802271c:	ab07      	add	r3, sp, #28
 802271e:	aa08      	add	r2, sp, #32
 8022720:	4928      	ldr	r1, [pc, #160]	@ (80227c4 <parse_net+0xc8>)
 8022722:	f009 fd0b 	bl	802c13c <sscanf>
 8022726:	2805      	cmp	r0, #5
 8022728:	d133      	bne.n	8022792 <parse_net+0x96>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 802272a:	9c08      	ldr	r4, [sp, #32]
 802272c:	4620      	mov	r0, r4
 802272e:	f7fe fd6e 	bl	802120e <isbyte>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022732:	4603      	mov	r3, r0
 8022734:	2800      	cmp	r0, #0
 8022736:	d03b      	beq.n	80227b0 <parse_net+0xb4>
      isbyte(a) && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0 &&
 8022738:	9f07      	ldr	r7, [sp, #28]
 802273a:	4638      	mov	r0, r7
 802273c:	f7fe fd67 	bl	802120e <isbyte>
 8022740:	4603      	mov	r3, r0
 8022742:	2800      	cmp	r0, #0
 8022744:	d034      	beq.n	80227b0 <parse_net+0xb4>
 8022746:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802274a:	4648      	mov	r0, r9
 802274c:	f7fe fd5f 	bl	802120e <isbyte>
 8022750:	4603      	mov	r3, r0
 8022752:	b368      	cbz	r0, 80227b0 <parse_net+0xb4>
 8022754:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022758:	4640      	mov	r0, r8
 802275a:	f7fe fd58 	bl	802120e <isbyte>
 802275e:	4603      	mov	r3, r0
 8022760:	b330      	cbz	r0, 80227b0 <parse_net+0xb4>
 8022762:	9b04      	ldr	r3, [sp, #16]
 8022764:	2b00      	cmp	r3, #0
 8022766:	db29      	blt.n	80227bc <parse_net+0xc0>
 8022768:	2b20      	cmp	r3, #32
 802276a:	dc29      	bgt.n	80227c0 <parse_net+0xc4>
    len = n;
 802276c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    *net = ((uint32_t) a << 24) | ((uint32_t) b << 16) | ((uint32_t) c << 8) |
 802276e:	043a      	lsls	r2, r7, #16
 8022770:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8022774:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8022778:	ea42 0208 	orr.w	r2, r2, r8
 802277c:	6032      	str	r2, [r6, #0]
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 802277e:	9a04      	ldr	r2, [sp, #16]
 8022780:	b1d2      	cbz	r2, 80227b8 <parse_net+0xbc>
 8022782:	f1c2 0220 	rsb	r2, r2, #32
 8022786:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802278a:	fa01 f202 	lsl.w	r2, r1, r2
 802278e:	602a      	str	r2, [r5, #0]
 8022790:	e00e      	b.n	80227b0 <parse_net+0xb4>
       sscanf(spec, "%d.%d.%d.%d%n", &a, &b, &c, &d, &n) == 4) &&
 8022792:	ab09      	add	r3, sp, #36	@ 0x24
 8022794:	9302      	str	r3, [sp, #8]
 8022796:	ab05      	add	r3, sp, #20
 8022798:	9301      	str	r3, [sp, #4]
 802279a:	ab06      	add	r3, sp, #24
 802279c:	9300      	str	r3, [sp, #0]
 802279e:	ab07      	add	r3, sp, #28
 80227a0:	aa08      	add	r2, sp, #32
 80227a2:	4909      	ldr	r1, [pc, #36]	@ (80227c8 <parse_net+0xcc>)
 80227a4:	4620      	mov	r0, r4
 80227a6:	f009 fcc9 	bl	802c13c <sscanf>
  if ((sscanf(spec, "%d.%d.%d.%d/%d%n", &a, &b, &c, &d, &slash, &n) == 5 ||
 80227aa:	2804      	cmp	r0, #4
 80227ac:	d0bd      	beq.n	802272a <parse_net+0x2e>
  int n, a, b, c, d, slash = 32, len = 0;
 80227ae:	2300      	movs	r3, #0
}
 80227b0:	4618      	mov	r0, r3
 80227b2:	b00b      	add	sp, #44	@ 0x2c
 80227b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *mask = slash ? (uint32_t) (0xffffffffU << (32 - slash)) : (uint32_t) 0;
 80227b8:	2200      	movs	r2, #0
 80227ba:	e7e8      	b.n	802278e <parse_net+0x92>
  int n, a, b, c, d, slash = 32, len = 0;
 80227bc:	2300      	movs	r3, #0
 80227be:	e7f7      	b.n	80227b0 <parse_net+0xb4>
 80227c0:	2300      	movs	r3, #0
  return len;
 80227c2:	e7f5      	b.n	80227b0 <parse_net+0xb4>
 80227c4:	0803a100 	.word	0x0803a100
 80227c8:	0803a114 	.word	0x0803a114

080227cc <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80227cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227d0:	4691      	mov	r9, r2
 80227d2:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80227d4:	4604      	mov	r4, r0
 80227d6:	b150      	cbz	r0, 80227ee <mg_base64_decode+0x22>
 80227d8:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 80227dc:	0889      	lsrs	r1, r1, #2
 80227de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80227e2:	3101      	adds	r1, #1
 80227e4:	4559      	cmp	r1, fp
 80227e6:	d847      	bhi.n	8022878 <mg_base64_decode+0xac>
  size_t len = 0;
 80227e8:	f04f 0800 	mov.w	r8, #0
 80227ec:	e003      	b.n	80227f6 <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80227ee:	4682      	mov	sl, r0
 80227f0:	e7f4      	b.n	80227dc <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80227f2:	4690      	mov	r8, r2
    src += 4;
 80227f4:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 80227f6:	2c00      	cmp	r4, #0
 80227f8:	d03a      	beq.n	8022870 <mg_base64_decode+0xa4>
 80227fa:	1ce3      	adds	r3, r4, #3
 80227fc:	4553      	cmp	r3, sl
 80227fe:	d237      	bcs.n	8022870 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8022800:	7820      	ldrb	r0, [r4, #0]
 8022802:	f7fd f8a7 	bl	801f954 <mg_base64_decode_single>
 8022806:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8022808:	7860      	ldrb	r0, [r4, #1]
 802280a:	f7fd f8a3 	bl	801f954 <mg_base64_decode_single>
 802280e:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8022810:	78a0      	ldrb	r0, [r4, #2]
 8022812:	f7fd f89f 	bl	801f954 <mg_base64_decode_single>
 8022816:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8022818:	78e0      	ldrb	r0, [r4, #3]
 802281a:	f7fd f89b 	bl	801f954 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 802281e:	2e40      	cmp	r6, #64	@ 0x40
 8022820:	d02a      	beq.n	8022878 <mg_base64_decode+0xac>
 8022822:	2e00      	cmp	r6, #0
 8022824:	db28      	blt.n	8022878 <mg_base64_decode+0xac>
 8022826:	2d40      	cmp	r5, #64	@ 0x40
 8022828:	d026      	beq.n	8022878 <mg_base64_decode+0xac>
 802282a:	2d00      	cmp	r5, #0
 802282c:	db24      	blt.n	8022878 <mg_base64_decode+0xac>
 802282e:	2f00      	cmp	r7, #0
 8022830:	db22      	blt.n	8022878 <mg_base64_decode+0xac>
 8022832:	2800      	cmp	r0, #0
 8022834:	db20      	blt.n	8022878 <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8022836:	112b      	asrs	r3, r5, #4
 8022838:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 802283c:	f108 0201 	add.w	r2, r8, #1
 8022840:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 8022844:	78a3      	ldrb	r3, [r4, #2]
 8022846:	2b3d      	cmp	r3, #61	@ 0x3d
 8022848:	d0d3      	beq.n	80227f2 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 802284a:	10bb      	asrs	r3, r7, #2
 802284c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8022850:	f108 0102 	add.w	r1, r8, #2
 8022854:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8022858:	78e3      	ldrb	r3, [r4, #3]
 802285a:	2b3d      	cmp	r3, #61	@ 0x3d
 802285c:	d006      	beq.n	802286c <mg_base64_decode+0xa0>
 802285e:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 8022862:	f108 0803 	add.w	r8, r8, #3
 8022866:	f809 0001 	strb.w	r0, [r9, r1]
 802286a:	e7c3      	b.n	80227f4 <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 802286c:	4688      	mov	r8, r1
 802286e:	e7c1      	b.n	80227f4 <mg_base64_decode+0x28>
  dst[len] = '\0';
 8022870:	2300      	movs	r3, #0
 8022872:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 8022876:	e006      	b.n	8022886 <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 8022878:	f1bb 0f00 	cmp.w	fp, #0
 802287c:	d006      	beq.n	802288c <mg_base64_decode+0xc0>
 802287e:	f04f 0800 	mov.w	r8, #0
 8022882:	f889 8000 	strb.w	r8, [r9]
}
 8022886:	4640      	mov	r0, r8
 8022888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 802288c:	46d8      	mov	r8, fp
 802288e:	e7fa      	b.n	8022886 <mg_base64_decode+0xba>

08022890 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8022890:	b570      	push	{r4, r5, r6, lr}
 8022892:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8022894:	6843      	ldr	r3, [r0, #4]
 8022896:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 802289a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802289c:	e000      	b.n	80228a0 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 802289e:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 80228a0:	b139      	cbz	r1, 80228b2 <mg_resolve_cancel+0x22>
    tmp = d->next;
 80228a2:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 80228a4:	684b      	ldr	r3, [r1, #4]
 80228a6:	42ab      	cmp	r3, r5
 80228a8:	d1f9      	bne.n	802289e <mg_resolve_cancel+0xe>
 80228aa:	4630      	mov	r0, r6
 80228ac:	f7fe fe12 	bl	80214d4 <mg_dns_free>
 80228b0:	e7f5      	b.n	802289e <mg_resolve_cancel+0xe>
}
 80228b2:	bd70      	pop	{r4, r5, r6, pc}

080228b4 <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 80228b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228b6:	b083      	sub	sp, #12
 80228b8:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80228ba:	1886      	adds	r6, r0, r2
 80228bc:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 80228be:	f04f 0c00 	mov.w	ip, #0
 80228c2:	f8c4 c000 	str.w	ip, [r4]
 80228c6:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80228ca:	290b      	cmp	r1, #11
 80228cc:	d934      	bls.n	8022938 <mg_dns_parse_rr+0x84>
 80228ce:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 80228d0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80228d4:	d833      	bhi.n	802293e <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 80228d6:	42be      	cmp	r6, r7
 80228d8:	d301      	bcc.n	80228de <mg_dns_parse_rr+0x2a>
 80228da:	2000      	movs	r0, #0
 80228dc:	e02d      	b.n	802293a <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80228de:	4663      	mov	r3, ip
 80228e0:	f8cd c000 	str.w	ip, [sp]
 80228e4:	f7fe fed5 	bl	8021692 <mg_dns_parse_name>
 80228e8:	b283      	uxth	r3, r0
 80228ea:	8023      	strh	r3, [r4, #0]
 80228ec:	b34b      	cbz	r3, 8022942 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 80228ee:	3304      	adds	r3, #4
 80228f0:	441e      	add	r6, r3
  if (s > e) return 0;
 80228f2:	42b7      	cmp	r7, r6
 80228f4:	d327      	bcc.n	8022946 <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80228f6:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 80228fa:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 80228fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022902:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022904:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 8022908:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802290c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022910:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8022912:	b975      	cbnz	r5, 8022932 <mg_dns_parse_rr+0x7e>
  s += 6;
 8022914:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 8022916:	429f      	cmp	r7, r3
 8022918:	d317      	bcc.n	802294a <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 802291a:	7931      	ldrb	r1, [r6, #4]
 802291c:	7972      	ldrb	r2, [r6, #5]
 802291e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022922:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 8022924:	4413      	add	r3, r2
 8022926:	42bb      	cmp	r3, r7
 8022928:	d811      	bhi.n	802294e <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 802292a:	fa12 f080 	uxtah	r0, r2, r0
 802292e:	300a      	adds	r0, #10
 8022930:	e003      	b.n	802293a <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8022932:	b280      	uxth	r0, r0
 8022934:	3004      	adds	r0, #4
 8022936:	e000      	b.n	802293a <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8022938:	2000      	movs	r0, #0
}
 802293a:	b003      	add	sp, #12
 802293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 802293e:	2000      	movs	r0, #0
 8022940:	e7fb      	b.n	802293a <mg_dns_parse_rr+0x86>
    return 0;
 8022942:	2000      	movs	r0, #0
 8022944:	e7f9      	b.n	802293a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022946:	2000      	movs	r0, #0
 8022948:	e7f7      	b.n	802293a <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 802294a:	2000      	movs	r0, #0
 802294c:	e7f5      	b.n	802293a <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 802294e:	2000      	movs	r0, #0
 8022950:	e7f3      	b.n	802293a <mg_dns_parse_rr+0x86>

08022952 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8022952:	b570      	push	{r4, r5, r6, lr}
 8022954:	4604      	mov	r4, r0
 8022956:	460d      	mov	r5, r1
 8022958:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 802295a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 802295e:	b103      	cbz	r3, 8022962 <mg_call+0x10>
 8022960:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8022962:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8022964:	b11b      	cbz	r3, 802296e <mg_call+0x1c>
 8022966:	4632      	mov	r2, r6
 8022968:	4629      	mov	r1, r5
 802296a:	4620      	mov	r0, r4
 802296c:	4798      	blx	r3
}
 802296e:	bd70      	pop	{r4, r5, r6, pc}

08022970 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8022970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022972:	4604      	mov	r4, r0
 8022974:	460d      	mov	r5, r1
 8022976:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8022978:	2108      	movs	r1, #8
 802297a:	2001      	movs	r0, #1
 802297c:	f7ff fe58 	bl	8022630 <mg_calloc>
  if (fd != NULL) {
 8022980:	4607      	mov	r7, r0
 8022982:	b138      	cbz	r0, 8022994 <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 8022984:	68a3      	ldr	r3, [r4, #8]
 8022986:	4631      	mov	r1, r6
 8022988:	4628      	mov	r0, r5
 802298a:	4798      	blx	r3
 802298c:	4605      	mov	r5, r0
 802298e:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8022990:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8022992:	b108      	cbz	r0, 8022998 <mg_fs_open+0x28>
}
 8022994:	4638      	mov	r0, r7
 8022996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 8022998:	4638      	mov	r0, r7
 802299a:	f7f7 ffbf 	bl	801a91c <vPortFree>
      fd = NULL;
 802299e:	462f      	mov	r7, r5
  return fd;
 80229a0:	e7f8      	b.n	8022994 <mg_fs_open+0x24>

080229a2 <mg_fs_close>:
  if (fd != NULL) {
 80229a2:	b148      	cbz	r0, 80229b8 <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 80229a4:	b510      	push	{r4, lr}
 80229a6:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 80229a8:	6843      	ldr	r3, [r0, #4]
 80229aa:	68db      	ldr	r3, [r3, #12]
 80229ac:	6800      	ldr	r0, [r0, #0]
 80229ae:	4798      	blx	r3
    free(fd);
 80229b0:	4620      	mov	r0, r4
 80229b2:	f7f7 ffb3 	bl	801a91c <vPortFree>
}
 80229b6:	bd10      	pop	{r4, pc}
 80229b8:	4770      	bx	lr
	...

080229bc <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 80229bc:	b510      	push	{r4, lr}
 80229be:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80229c0:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80229c4:	f7ff ffed 	bl	80229a2 <mg_fs_close>
  c->pfn_data = NULL;
 80229c8:	2200      	movs	r2, #0
 80229ca:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 80229ce:	4b05      	ldr	r3, [pc, #20]	@ (80229e4 <restore_http_cb+0x28>)
 80229d0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 80229d4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80229d8:	f362 13c7 	bfi	r3, r2, #7, #1
 80229dc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80229e0:	bd10      	pop	{r4, pc}
 80229e2:	bf00      	nop
 80229e4:	0802630d 	.word	0x0802630d

080229e8 <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80229e8:	b470      	push	{r4, r5, r6}
 80229ea:	b083      	sub	sp, #12
 80229ec:	ab02      	add	r3, sp, #8
 80229ee:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80229f2:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80229f4:	e000      	b.n	80229f8 <mg_to_size_t+0x10>
 80229f6:	3301      	adds	r3, #1
 80229f8:	9c01      	ldr	r4, [sp, #4]
 80229fa:	429c      	cmp	r4, r3
 80229fc:	d905      	bls.n	8022a0a <mg_to_size_t+0x22>
 80229fe:	9900      	ldr	r1, [sp, #0]
 8022a00:	5cc9      	ldrb	r1, [r1, r3]
 8022a02:	2920      	cmp	r1, #32
 8022a04:	d0f7      	beq.n	80229f6 <mg_to_size_t+0xe>
 8022a06:	2909      	cmp	r1, #9
 8022a08:	d0f5      	beq.n	80229f6 <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 8022a0a:	429c      	cmp	r4, r3
 8022a0c:	d906      	bls.n	8022a1c <mg_to_size_t+0x34>
 8022a0e:	9900      	ldr	r1, [sp, #0]
 8022a10:	5cc9      	ldrb	r1, [r1, r3]
 8022a12:	292d      	cmp	r1, #45	@ 0x2d
 8022a14:	d02c      	beq.n	8022a70 <mg_to_size_t+0x88>
 8022a16:	2500      	movs	r5, #0
 8022a18:	4628      	mov	r0, r5
 8022a1a:	e001      	b.n	8022a20 <mg_to_size_t+0x38>
 8022a1c:	2500      	movs	r5, #0
 8022a1e:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022a20:	429c      	cmp	r4, r3
 8022a22:	d917      	bls.n	8022a54 <mg_to_size_t+0x6c>
 8022a24:	9900      	ldr	r1, [sp, #0]
 8022a26:	5cc9      	ldrb	r1, [r1, r3]
 8022a28:	292f      	cmp	r1, #47	@ 0x2f
 8022a2a:	d913      	bls.n	8022a54 <mg_to_size_t+0x6c>
 8022a2c:	2939      	cmp	r1, #57	@ 0x39
 8022a2e:	d811      	bhi.n	8022a54 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8022a30:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8022a32:	4e15      	ldr	r6, [pc, #84]	@ (8022a88 <mg_to_size_t+0xa0>)
 8022a34:	42b0      	cmp	r0, r6
 8022a36:	d81d      	bhi.n	8022a74 <mg_to_size_t+0x8c>
    result *= 10;
 8022a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022a3c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8022a40:	43ce      	mvns	r6, r1
 8022a42:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 8022a46:	d317      	bcc.n	8022a78 <mg_to_size_t+0x90>
    result += digit;
 8022a48:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8022a4c:	3301      	adds	r3, #1
 8022a4e:	3501      	adds	r5, #1
 8022a50:	e7e6      	b.n	8022a20 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022a52:	3301      	adds	r3, #1
 8022a54:	429c      	cmp	r4, r3
 8022a56:	d905      	bls.n	8022a64 <mg_to_size_t+0x7c>
 8022a58:	9900      	ldr	r1, [sp, #0]
 8022a5a:	5cc9      	ldrb	r1, [r1, r3]
 8022a5c:	2920      	cmp	r1, #32
 8022a5e:	d0f8      	beq.n	8022a52 <mg_to_size_t+0x6a>
 8022a60:	2909      	cmp	r1, #9
 8022a62:	d0f6      	beq.n	8022a52 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022a64:	b155      	cbz	r5, 8022a7c <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 8022a66:	429c      	cmp	r4, r3
 8022a68:	d10c      	bne.n	8022a84 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 8022a6a:	6010      	str	r0, [r2, #0]
  return true;
 8022a6c:	2001      	movs	r0, #1
 8022a6e:	e006      	b.n	8022a7e <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8022a70:	2000      	movs	r0, #0
 8022a72:	e004      	b.n	8022a7e <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8022a74:	2000      	movs	r0, #0
 8022a76:	e002      	b.n	8022a7e <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 8022a78:	2000      	movs	r0, #0
 8022a7a:	e000      	b.n	8022a7e <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022a7c:	2000      	movs	r0, #0
}
 8022a7e:	b003      	add	sp, #12
 8022a80:	bc70      	pop	{r4, r5, r6}
 8022a82:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8022a84:	2000      	movs	r0, #0
 8022a86:	e7fa      	b.n	8022a7e <mg_to_size_t+0x96>
 8022a88:	19999999 	.word	0x19999999

08022a8c <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8022a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a8e:	4606      	mov	r6, r0
 8022a90:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8022a92:	2400      	movs	r4, #0
 8022a94:	e007      	b.n	8022aa6 <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022a96:	1933      	adds	r3, r6, r4
 8022a98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022a9c:	2b0a      	cmp	r3, #10
 8022a9e:	d10d      	bne.n	8022abc <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8022aa0:	1c60      	adds	r0, r4, #1
 8022aa2:	e01b      	b.n	8022adc <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8022aa4:	3401      	adds	r4, #1
 8022aa6:	42bc      	cmp	r4, r7
 8022aa8:	d217      	bcs.n	8022ada <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 8022aaa:	5d35      	ldrb	r5, [r6, r4]
 8022aac:	4628      	mov	r0, r5
 8022aae:	f7fd f8d6 	bl	801fc5e <isok>
 8022ab2:	b1a0      	cbz	r0, 8022ade <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022ab4:	2c00      	cmp	r4, #0
 8022ab6:	d0f5      	beq.n	8022aa4 <mg_http_get_request_len+0x18>
 8022ab8:	2d0a      	cmp	r5, #10
 8022aba:	d0ec      	beq.n	8022a96 <mg_http_get_request_len+0xa>
 8022abc:	2c03      	cmp	r4, #3
 8022abe:	d9f1      	bls.n	8022aa4 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8022ac0:	2d0a      	cmp	r5, #10
 8022ac2:	d1ef      	bne.n	8022aa4 <mg_http_get_request_len+0x18>
 8022ac4:	1933      	adds	r3, r6, r4
 8022ac6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022aca:	2b0d      	cmp	r3, #13
 8022acc:	d1ea      	bne.n	8022aa4 <mg_http_get_request_len+0x18>
 8022ace:	1933      	adds	r3, r6, r4
 8022ad0:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8022ad4:	2b0a      	cmp	r3, #10
 8022ad6:	d1e5      	bne.n	8022aa4 <mg_http_get_request_len+0x18>
 8022ad8:	e7e2      	b.n	8022aa0 <mg_http_get_request_len+0x14>
  return 0;
 8022ada:	2000      	movs	r0, #0
}
 8022adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 8022ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022ae2:	e7fb      	b.n	8022adc <mg_http_get_request_len+0x50>

08022ae4 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8022ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ae8:	4605      	mov	r5, r0
 8022aea:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8022aec:	4608      	mov	r0, r1
 8022aee:	f7ed fbd7 	bl	80102a0 <strlen>
 8022af2:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8022af4:	2400      	movs	r4, #0
 8022af6:	e000      	b.n	8022afa <mg_http_get_header+0x16>
 8022af8:	3401      	adds	r4, #1
 8022afa:	2c1d      	cmp	r4, #29
 8022afc:	d819      	bhi.n	8022b32 <mg_http_get_header+0x4e>
 8022afe:	1ca3      	adds	r3, r4, #2
 8022b00:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8022b04:	685a      	ldr	r2, [r3, #4]
 8022b06:	b17a      	cbz	r2, 8022b28 <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8022b08:	0123      	lsls	r3, r4, #4
 8022b0a:	3328      	adds	r3, #40	@ 0x28
 8022b0c:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8022b10:	42b2      	cmp	r2, r6
 8022b12:	d1f1      	bne.n	8022af8 <mg_http_get_header+0x14>
 8022b14:	1ca3      	adds	r3, r4, #2
 8022b16:	011b      	lsls	r3, r3, #4
 8022b18:	4632      	mov	r2, r6
 8022b1a:	4639      	mov	r1, r7
 8022b1c:	58e8      	ldr	r0, [r5, r3]
 8022b1e:	f7fd f869 	bl	801fbf4 <mg_ncasecmp>
 8022b22:	2800      	cmp	r0, #0
 8022b24:	d1e8      	bne.n	8022af8 <mg_http_get_header+0x14>
 8022b26:	e001      	b.n	8022b2c <mg_http_get_header+0x48>
  return NULL;
 8022b28:	f04f 0800 	mov.w	r8, #0
}
 8022b2c:	4640      	mov	r0, r8
 8022b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8022b32:	f04f 0800 	mov.w	r8, #0
 8022b36:	e7f9      	b.n	8022b2c <mg_http_get_header+0x48>

08022b38 <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 8022b38:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 8022b3a:	6880      	ldr	r0, [r0, #8]
 8022b3c:	f007 f96c 	bl	8029e18 <atoi>
}
 8022b40:	bd08      	pop	{r3, pc}
	...

08022b44 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8022b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b48:	b095      	sub	sp, #84	@ 0x54
 8022b4a:	ac08      	add	r4, sp, #32
 8022b4c:	e884 0003 	stmia.w	r4, {r0, r1}
 8022b50:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8022b52:	4606      	mov	r6, r0
  int len = (int) json.len;
 8022b54:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 8022b56:	469a      	mov	sl, r3
 8022b58:	b113      	cbz	r3, 8022b60 <mg_json_get+0x1c>
 8022b5a:	2300      	movs	r3, #0
 8022b5c:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8022b60:	9b02      	ldr	r3, [sp, #8]
 8022b62:	781b      	ldrb	r3, [r3, #0]
 8022b64:	2b24      	cmp	r3, #36	@ 0x24
 8022b66:	f040 8232 	bne.w	8022fce <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 8022b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022b6e:	9303      	str	r3, [sp, #12]
 8022b70:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8022b72:	2301      	movs	r3, #1
 8022b74:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 8022b76:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 8022b7a:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8022b7c:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8022b80:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8022b82:	465b      	mov	r3, fp
 8022b84:	f8cd a018 	str.w	sl, [sp, #24]
 8022b88:	e190      	b.n	8022eac <mg_json_get+0x368>
        if (depth == ed) j = i;
 8022b8a:	455f      	cmp	r7, fp
 8022b8c:	d029      	beq.n	8022be2 <mg_json_get+0x9e>
        if (c == '{') {
 8022b8e:	2d7b      	cmp	r5, #123	@ 0x7b
 8022b90:	d029      	beq.n	8022be6 <mg_json_get+0xa2>
        } else if (c == '[') {
 8022b92:	2d5b      	cmp	r5, #91	@ 0x5b
 8022b94:	d047      	beq.n	8022c26 <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022b96:	2d5d      	cmp	r5, #93	@ 0x5d
 8022b98:	d07a      	beq.n	8022c90 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022b9a:	2d74      	cmp	r5, #116	@ 0x74
 8022b9c:	f000 80a4 	beq.w	8022ce8 <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022ba0:	2d6e      	cmp	r5, #110	@ 0x6e
 8022ba2:	f000 80b0 	beq.w	8022d06 <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022ba6:	2d66      	cmp	r5, #102	@ 0x66
 8022ba8:	f000 80bc 	beq.w	8022d24 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8022bac:	2d2d      	cmp	r5, #45	@ 0x2d
 8022bae:	d005      	beq.n	8022bbc <mg_json_get+0x78>
 8022bb0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022bb4:	b2db      	uxtb	r3, r3
 8022bb6:	2b09      	cmp	r3, #9
 8022bb8:	f200 80c3 	bhi.w	8022d42 <mg_json_get+0x1fe>
          int numlen = 0;
 8022bbc:	2300      	movs	r3, #0
 8022bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 8022bc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8022bc2:	eba8 0104 	sub.w	r1, r8, r4
 8022bc6:	4648      	mov	r0, r9
 8022bc8:	f7fd fcc2 	bl	8020550 <mg_atod>
          i += numlen - 1;
 8022bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022bce:	3b01      	subs	r3, #1
 8022bd0:	441c      	add	r4, r3
        MG_CHECKRET('V');
 8022bd2:	455f      	cmp	r7, fp
 8022bd4:	f000 80c6 	beq.w	8022d64 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 8022bd8:	455f      	cmp	r7, fp
 8022bda:	f000 80da 	beq.w	8022d92 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 8022bde:	2303      	movs	r3, #3
 8022be0:	e163      	b.n	8022eaa <mg_json_get+0x366>
        if (depth == ed) j = i;
 8022be2:	9405      	str	r4, [sp, #20]
 8022be4:	e7d3      	b.n	8022b8e <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022be6:	2f1d      	cmp	r7, #29
 8022be8:	f300 81f4 	bgt.w	8022fd4 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022bec:	455f      	cmp	r7, fp
 8022bee:	d007      	beq.n	8022c00 <mg_json_get+0xbc>
          nesting[depth++] = c;
 8022bf0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022bf4:	446b      	add	r3, sp
 8022bf6:	f803 5c20 	strb.w	r5, [r3, #-32]
 8022bfa:	3701      	adds	r7, #1
          expecting = S_KEY;
 8022bfc:	2301      	movs	r3, #1
          break;
 8022bfe:	e154      	b.n	8022eaa <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8022c00:	9b02      	ldr	r3, [sp, #8]
 8022c02:	9a04      	ldr	r2, [sp, #16]
 8022c04:	5c9b      	ldrb	r3, [r3, r2]
 8022c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8022c08:	d1f2      	bne.n	8022bf0 <mg_json_get+0xac>
 8022c0a:	9b01      	ldr	r3, [sp, #4]
 8022c0c:	9a03      	ldr	r2, [sp, #12]
 8022c0e:	4293      	cmp	r3, r2
 8022c10:	d1ee      	bne.n	8022bf0 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 8022c12:	f10b 0b01 	add.w	fp, fp, #1
 8022c16:	9b04      	ldr	r3, [sp, #16]
 8022c18:	3301      	adds	r3, #1
 8022c1a:	9304      	str	r3, [sp, #16]
 8022c1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022c20:	9303      	str	r3, [sp, #12]
 8022c22:	9301      	str	r3, [sp, #4]
 8022c24:	e7e4      	b.n	8022bf0 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022c26:	2f1d      	cmp	r7, #29
 8022c28:	f300 81d7 	bgt.w	8022fda <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022c2c:	455f      	cmp	r7, fp
 8022c2e:	d006      	beq.n	8022c3e <mg_json_get+0xfa>
          nesting[depth++] = c;
 8022c30:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022c34:	446a      	add	r2, sp
 8022c36:	f802 5c20 	strb.w	r5, [r2, #-32]
 8022c3a:	3701      	adds	r7, #1
          break;
 8022c3c:	e135      	b.n	8022eaa <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022c3e:	9a02      	ldr	r2, [sp, #8]
 8022c40:	9904      	ldr	r1, [sp, #16]
 8022c42:	5c52      	ldrb	r2, [r2, r1]
 8022c44:	2a5b      	cmp	r2, #91	@ 0x5b
 8022c46:	d1f3      	bne.n	8022c30 <mg_json_get+0xec>
 8022c48:	9a01      	ldr	r2, [sp, #4]
 8022c4a:	9903      	ldr	r1, [sp, #12]
 8022c4c:	428a      	cmp	r2, r1
 8022c4e:	d1ef      	bne.n	8022c30 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8022c50:	f10b 0b01 	add.w	fp, fp, #1
 8022c54:	9804      	ldr	r0, [sp, #16]
 8022c56:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8022c58:	2100      	movs	r1, #0
 8022c5a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8022c5e:	e005      	b.n	8022c6c <mg_json_get+0x128>
              ei *= 10;
 8022c60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8022c64:	3a30      	subs	r2, #48	@ 0x30
 8022c66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8022c6a:	3001      	adds	r0, #1
 8022c6c:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8022c70:	2a5d      	cmp	r2, #93	@ 0x5d
 8022c72:	d001      	beq.n	8022c78 <mg_json_get+0x134>
 8022c74:	2a00      	cmp	r2, #0
 8022c76:	d1f3      	bne.n	8022c60 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 8022c78:	9004      	str	r0, [sp, #16]
 8022c7a:	9103      	str	r1, [sp, #12]
 8022c7c:	b12a      	cbz	r2, 8022c8a <mg_json_get+0x146>
 8022c7e:	4602      	mov	r2, r0
 8022c80:	3201      	adds	r2, #1
 8022c82:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8022c84:	2200      	movs	r2, #0
 8022c86:	9201      	str	r2, [sp, #4]
 8022c88:	e7d2      	b.n	8022c30 <mg_json_get+0xec>
 8022c8a:	2200      	movs	r2, #0
 8022c8c:	9201      	str	r2, [sp, #4]
 8022c8e:	e7cf      	b.n	8022c30 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022c90:	2f00      	cmp	r7, #0
 8022c92:	dd82      	ble.n	8022b9a <mg_json_get+0x56>
          MG_EOO(']');
 8022c94:	455f      	cmp	r7, fp
 8022c96:	d020      	beq.n	8022cda <mg_json_get+0x196>
 8022c98:	3f01      	subs	r7, #1
 8022c9a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022c9e:	446b      	add	r3, sp
 8022ca0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022ca4:	3302      	adds	r3, #2
 8022ca6:	429d      	cmp	r5, r3
 8022ca8:	f040 819a 	bne.w	8022fe0 <mg_json_get+0x49c>
 8022cac:	455f      	cmp	r7, fp
 8022cae:	d190      	bne.n	8022bd2 <mg_json_get+0x8e>
 8022cb0:	9b02      	ldr	r3, [sp, #8]
 8022cb2:	9a04      	ldr	r2, [sp, #16]
 8022cb4:	5c9b      	ldrb	r3, [r3, r2]
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	d18b      	bne.n	8022bd2 <mg_json_get+0x8e>
 8022cba:	9b01      	ldr	r3, [sp, #4]
 8022cbc:	9a03      	ldr	r2, [sp, #12]
 8022cbe:	4293      	cmp	r3, r2
 8022cc0:	d187      	bne.n	8022bd2 <mg_json_get+0x8e>
 8022cc2:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022cc6:	f1ba 0f00 	cmp.w	sl, #0
 8022cca:	d004      	beq.n	8022cd6 <mg_json_get+0x192>
 8022ccc:	9b05      	ldr	r3, [sp, #20]
 8022cce:	1ae3      	subs	r3, r4, r3
 8022cd0:	3301      	adds	r3, #1
 8022cd2:	f8ca 3000 	str.w	r3, [sl]
 8022cd6:	9d05      	ldr	r5, [sp, #20]
 8022cd8:	e175      	b.n	8022fc6 <mg_json_get+0x482>
 8022cda:	9b01      	ldr	r3, [sp, #4]
 8022cdc:	9a03      	ldr	r2, [sp, #12]
 8022cde:	4293      	cmp	r3, r2
 8022ce0:	d0da      	beq.n	8022c98 <mg_json_get+0x154>
 8022ce2:	f06f 0502 	mvn.w	r5, #2
 8022ce6:	e16e      	b.n	8022fc6 <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8022ce8:	1ce3      	adds	r3, r4, #3
 8022cea:	9307      	str	r3, [sp, #28]
 8022cec:	4543      	cmp	r3, r8
 8022cee:	f6bf af57 	bge.w	8022ba0 <mg_json_get+0x5c>
 8022cf2:	2204      	movs	r2, #4
 8022cf4:	49a3      	ldr	r1, [pc, #652]	@ (8022f84 <mg_json_get+0x440>)
 8022cf6:	4648      	mov	r0, r9
 8022cf8:	f009 fd2e 	bl	802c758 <memcmp>
 8022cfc:	2800      	cmp	r0, #0
 8022cfe:	f47f af4f 	bne.w	8022ba0 <mg_json_get+0x5c>
          i += 3;
 8022d02:	9c07      	ldr	r4, [sp, #28]
 8022d04:	e765      	b.n	8022bd2 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022d06:	1ce3      	adds	r3, r4, #3
 8022d08:	9307      	str	r3, [sp, #28]
 8022d0a:	4543      	cmp	r3, r8
 8022d0c:	f6bf af4b 	bge.w	8022ba6 <mg_json_get+0x62>
 8022d10:	2204      	movs	r2, #4
 8022d12:	499d      	ldr	r1, [pc, #628]	@ (8022f88 <mg_json_get+0x444>)
 8022d14:	4648      	mov	r0, r9
 8022d16:	f009 fd1f 	bl	802c758 <memcmp>
 8022d1a:	2800      	cmp	r0, #0
 8022d1c:	f47f af43 	bne.w	8022ba6 <mg_json_get+0x62>
          i += 3;
 8022d20:	9c07      	ldr	r4, [sp, #28]
 8022d22:	e756      	b.n	8022bd2 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022d24:	1d23      	adds	r3, r4, #4
 8022d26:	9307      	str	r3, [sp, #28]
 8022d28:	4543      	cmp	r3, r8
 8022d2a:	f6bf af3f 	bge.w	8022bac <mg_json_get+0x68>
 8022d2e:	2205      	movs	r2, #5
 8022d30:	4996      	ldr	r1, [pc, #600]	@ (8022f8c <mg_json_get+0x448>)
 8022d32:	4648      	mov	r0, r9
 8022d34:	f009 fd10 	bl	802c758 <memcmp>
 8022d38:	2800      	cmp	r0, #0
 8022d3a:	f47f af37 	bne.w	8022bac <mg_json_get+0x68>
          i += 4;
 8022d3e:	9c07      	ldr	r4, [sp, #28]
 8022d40:	e747      	b.n	8022bd2 <mg_json_get+0x8e>
        } else if (c == '"') {
 8022d42:	2d22      	cmp	r5, #34	@ 0x22
 8022d44:	f040 814f 	bne.w	8022fe6 <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022d48:	f10a 0001 	add.w	r0, sl, #1
 8022d4c:	eba8 0104 	sub.w	r1, r8, r4
 8022d50:	3901      	subs	r1, #1
 8022d52:	4430      	add	r0, r6
 8022d54:	f7fd fbd7 	bl	8020506 <mg_pass_string>
          if (n < 0) return n;
 8022d58:	1e05      	subs	r5, r0, #0
 8022d5a:	f2c0 8134 	blt.w	8022fc6 <mg_json_get+0x482>
          i += n + 1;
 8022d5e:	3501      	adds	r5, #1
 8022d60:	442c      	add	r4, r5
 8022d62:	e736      	b.n	8022bd2 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8022d64:	9b02      	ldr	r3, [sp, #8]
 8022d66:	9a04      	ldr	r2, [sp, #16]
 8022d68:	5c9b      	ldrb	r3, [r3, r2]
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	f47f af34 	bne.w	8022bd8 <mg_json_get+0x94>
 8022d70:	9b01      	ldr	r3, [sp, #4]
 8022d72:	9a03      	ldr	r2, [sp, #12]
 8022d74:	4293      	cmp	r3, r2
 8022d76:	f47f af2f 	bne.w	8022bd8 <mg_json_get+0x94>
 8022d7a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022d7e:	f1ba 0f00 	cmp.w	sl, #0
 8022d82:	d004      	beq.n	8022d8e <mg_json_get+0x24a>
 8022d84:	9b05      	ldr	r3, [sp, #20]
 8022d86:	1ae3      	subs	r3, r4, r3
 8022d88:	3301      	adds	r3, #1
 8022d8a:	f8ca 3000 	str.w	r3, [sl]
 8022d8e:	9d05      	ldr	r5, [sp, #20]
 8022d90:	e119      	b.n	8022fc6 <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8022d92:	9b03      	ldr	r3, [sp, #12]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	f2c0 8110 	blt.w	8022fba <mg_json_get+0x476>
 8022d9a:	9b01      	ldr	r3, [sp, #4]
 8022d9c:	3301      	adds	r3, #1
 8022d9e:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8022da0:	2303      	movs	r3, #3
 8022da2:	e082      	b.n	8022eaa <mg_json_get+0x366>
        if (c == '"') {
 8022da4:	2d22      	cmp	r5, #34	@ 0x22
 8022da6:	d014      	beq.n	8022dd2 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 8022da8:	2d7d      	cmp	r5, #125	@ 0x7d
 8022daa:	f040 8125 	bne.w	8022ff8 <mg_json_get+0x4b4>
          MG_EOO('}');
 8022dae:	455f      	cmp	r7, fp
 8022db0:	d053      	beq.n	8022e5a <mg_json_get+0x316>
 8022db2:	3f01      	subs	r7, #1
 8022db4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022db8:	446b      	add	r3, sp
 8022dba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022dbe:	3302      	adds	r3, #2
 8022dc0:	429d      	cmp	r5, r3
 8022dc2:	f040 811c 	bne.w	8022ffe <mg_json_get+0x4ba>
 8022dc6:	455f      	cmp	r7, fp
 8022dc8:	d04e      	beq.n	8022e68 <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 8022dca:	455f      	cmp	r7, fp
 8022dcc:	d061      	beq.n	8022e92 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 8022dce:	2303      	movs	r3, #3
 8022dd0:	e06b      	b.n	8022eaa <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8022dd2:	f104 0901 	add.w	r9, r4, #1
 8022dd6:	44b1      	add	r9, r6
 8022dd8:	eba8 0104 	sub.w	r1, r8, r4
 8022ddc:	3901      	subs	r1, #1
 8022dde:	4648      	mov	r0, r9
 8022de0:	f7fd fb91 	bl	8020506 <mg_pass_string>
          if (n < 0) return n;
 8022de4:	1e05      	subs	r5, r0, #0
 8022de6:	f2c0 80ee 	blt.w	8022fc6 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8022dea:	1c63      	adds	r3, r4, #1
 8022dec:	442b      	add	r3, r5
 8022dee:	4543      	cmp	r3, r8
 8022df0:	f280 80fc 	bge.w	8022fec <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8022df4:	455f      	cmp	r7, fp
 8022df6:	f2c0 80fc 	blt.w	8022ff2 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8022dfa:	d005      	beq.n	8022e08 <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 8022dfc:	455f      	cmp	r7, fp
 8022dfe:	d00d      	beq.n	8022e1c <mg_json_get+0x2d8>
          i += n + 1;
 8022e00:	3501      	adds	r5, #1
 8022e02:	442c      	add	r4, r5
          expecting = S_COLON;
 8022e04:	2302      	movs	r3, #2
 8022e06:	e050      	b.n	8022eaa <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8022e08:	9b02      	ldr	r3, [sp, #8]
 8022e0a:	9a04      	ldr	r2, [sp, #16]
 8022e0c:	4413      	add	r3, r2
 8022e0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8022e14:	d0f2      	beq.n	8022dfc <mg_json_get+0x2b8>
 8022e16:	f06f 0502 	mvn.w	r5, #2
 8022e1a:	e0d4      	b.n	8022fc6 <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8022e1c:	9b02      	ldr	r3, [sp, #8]
 8022e1e:	9a04      	ldr	r2, [sp, #16]
 8022e20:	4413      	add	r3, r2
 8022e22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8022e28:	d1ea      	bne.n	8022e00 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022e2a:	462a      	mov	r2, r5
 8022e2c:	9b02      	ldr	r3, [sp, #8]
 8022e2e:	9904      	ldr	r1, [sp, #16]
 8022e30:	1859      	adds	r1, r3, r1
 8022e32:	4648      	mov	r0, r9
 8022e34:	f009 fd59 	bl	802c8ea <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 8022e38:	2800      	cmp	r0, #0
 8022e3a:	d1e1      	bne.n	8022e00 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022e3c:	9904      	ldr	r1, [sp, #16]
 8022e3e:	194b      	adds	r3, r1, r5
 8022e40:	9a02      	ldr	r2, [sp, #8]
 8022e42:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022e44:	b12a      	cbz	r2, 8022e52 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022e46:	2a2e      	cmp	r2, #46	@ 0x2e
 8022e48:	d005      	beq.n	8022e56 <mg_json_get+0x312>
 8022e4a:	2a5b      	cmp	r2, #91	@ 0x5b
 8022e4c:	d1d8      	bne.n	8022e00 <mg_json_get+0x2bc>
            pos += n;
 8022e4e:	9304      	str	r3, [sp, #16]
 8022e50:	e7d6      	b.n	8022e00 <mg_json_get+0x2bc>
 8022e52:	9304      	str	r3, [sp, #16]
 8022e54:	e7d4      	b.n	8022e00 <mg_json_get+0x2bc>
 8022e56:	9304      	str	r3, [sp, #16]
 8022e58:	e7d2      	b.n	8022e00 <mg_json_get+0x2bc>
          MG_EOO('}');
 8022e5a:	9b01      	ldr	r3, [sp, #4]
 8022e5c:	9a03      	ldr	r2, [sp, #12]
 8022e5e:	4293      	cmp	r3, r2
 8022e60:	d0a7      	beq.n	8022db2 <mg_json_get+0x26e>
 8022e62:	f06f 0502 	mvn.w	r5, #2
 8022e66:	e0ae      	b.n	8022fc6 <mg_json_get+0x482>
 8022e68:	9b02      	ldr	r3, [sp, #8]
 8022e6a:	9a04      	ldr	r2, [sp, #16]
 8022e6c:	5c9b      	ldrb	r3, [r3, r2]
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d1ab      	bne.n	8022dca <mg_json_get+0x286>
 8022e72:	9b01      	ldr	r3, [sp, #4]
 8022e74:	9a03      	ldr	r2, [sp, #12]
 8022e76:	4293      	cmp	r3, r2
 8022e78:	d1a7      	bne.n	8022dca <mg_json_get+0x286>
 8022e7a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022e7e:	f1ba 0f00 	cmp.w	sl, #0
 8022e82:	d004      	beq.n	8022e8e <mg_json_get+0x34a>
 8022e84:	9b05      	ldr	r3, [sp, #20]
 8022e86:	1ae3      	subs	r3, r4, r3
 8022e88:	3301      	adds	r3, #1
 8022e8a:	f8ca 3000 	str.w	r3, [sl]
 8022e8e:	9d05      	ldr	r5, [sp, #20]
 8022e90:	e099      	b.n	8022fc6 <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8022e92:	9b03      	ldr	r3, [sp, #12]
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	f2c0 8092 	blt.w	8022fbe <mg_json_get+0x47a>
 8022e9a:	9b01      	ldr	r3, [sp, #4]
 8022e9c:	3301      	adds	r3, #1
 8022e9e:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8022ea0:	2303      	movs	r3, #3
 8022ea2:	e002      	b.n	8022eaa <mg_json_get+0x366>
        if (c == ':') {
 8022ea4:	2d3a      	cmp	r5, #58	@ 0x3a
 8022ea6:	d11d      	bne.n	8022ee4 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 8022ea8:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 8022eaa:	3401      	adds	r4, #1
 8022eac:	4544      	cmp	r4, r8
 8022eae:	f280 8088 	bge.w	8022fc2 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8022eb2:	46a2      	mov	sl, r4
 8022eb4:	eb06 0904 	add.w	r9, r6, r4
 8022eb8:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8022eba:	2d20      	cmp	r5, #32
 8022ebc:	d0f5      	beq.n	8022eaa <mg_json_get+0x366>
 8022ebe:	2d09      	cmp	r5, #9
 8022ec0:	d0f3      	beq.n	8022eaa <mg_json_get+0x366>
 8022ec2:	2d0a      	cmp	r5, #10
 8022ec4:	d0f1      	beq.n	8022eaa <mg_json_get+0x366>
 8022ec6:	2d0d      	cmp	r5, #13
 8022ec8:	d0ef      	beq.n	8022eaa <mg_json_get+0x366>
    switch (expecting) {
 8022eca:	2b03      	cmp	r3, #3
 8022ecc:	d8ed      	bhi.n	8022eaa <mg_json_get+0x366>
 8022ece:	a201      	add	r2, pc, #4	@ (adr r2, 8022ed4 <mg_json_get+0x390>)
 8022ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ed4:	08022b8b 	.word	0x08022b8b
 8022ed8:	08022da5 	.word	0x08022da5
 8022edc:	08022ea5 	.word	0x08022ea5
 8022ee0:	08022eeb 	.word	0x08022eeb
          return MG_JSON_INVALID;
 8022ee4:	f06f 0501 	mvn.w	r5, #1
 8022ee8:	e06d      	b.n	8022fc6 <mg_json_get+0x482>
        if (depth <= 0) {
 8022eea:	2f00      	cmp	r7, #0
 8022eec:	f340 808a 	ble.w	8023004 <mg_json_get+0x4c0>
        } else if (c == ',') {
 8022ef0:	2d2c      	cmp	r5, #44	@ 0x2c
 8022ef2:	d01e      	beq.n	8022f32 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 8022ef4:	2d5d      	cmp	r5, #93	@ 0x5d
 8022ef6:	d002      	beq.n	8022efe <mg_json_get+0x3ba>
 8022ef8:	2d7d      	cmp	r5, #125	@ 0x7d
 8022efa:	f040 8086 	bne.w	802300a <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8022efe:	455f      	cmp	r7, fp
 8022f00:	d021      	beq.n	8022f46 <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8022f02:	455f      	cmp	r7, fp
 8022f04:	d02b      	beq.n	8022f5e <mg_json_get+0x41a>
          MG_EOO('O');
 8022f06:	455f      	cmp	r7, fp
 8022f08:	d035      	beq.n	8022f76 <mg_json_get+0x432>
 8022f0a:	3f01      	subs	r7, #1
 8022f0c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022f10:	446a      	add	r2, sp
 8022f12:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8022f16:	3202      	adds	r2, #2
 8022f18:	4295      	cmp	r5, r2
 8022f1a:	d179      	bne.n	8023010 <mg_json_get+0x4cc>
 8022f1c:	455f      	cmp	r7, fp
 8022f1e:	d037      	beq.n	8022f90 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8022f20:	455f      	cmp	r7, fp
 8022f22:	d1c2      	bne.n	8022eaa <mg_json_get+0x366>
 8022f24:	9a03      	ldr	r2, [sp, #12]
 8022f26:	2a00      	cmp	r2, #0
 8022f28:	dbbf      	blt.n	8022eaa <mg_json_get+0x366>
 8022f2a:	9a01      	ldr	r2, [sp, #4]
 8022f2c:	3201      	adds	r2, #1
 8022f2e:	9201      	str	r2, [sp, #4]
 8022f30:	e7bb      	b.n	8022eaa <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8022f32:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8022f36:	446b      	add	r3, sp
 8022f38:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022f3c:	2b7b      	cmp	r3, #123	@ 0x7b
 8022f3e:	bf14      	ite	ne
 8022f40:	2300      	movne	r3, #0
 8022f42:	2301      	moveq	r3, #1
 8022f44:	e7b1      	b.n	8022eaa <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8022f46:	2d7d      	cmp	r5, #125	@ 0x7d
 8022f48:	d1db      	bne.n	8022f02 <mg_json_get+0x3be>
 8022f4a:	9a02      	ldr	r2, [sp, #8]
 8022f4c:	9904      	ldr	r1, [sp, #16]
 8022f4e:	440a      	add	r2, r1
 8022f50:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8022f54:	2a2e      	cmp	r2, #46	@ 0x2e
 8022f56:	d1d4      	bne.n	8022f02 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 8022f58:	f06f 0502 	mvn.w	r5, #2
 8022f5c:	e033      	b.n	8022fc6 <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8022f5e:	2d5d      	cmp	r5, #93	@ 0x5d
 8022f60:	d1d1      	bne.n	8022f06 <mg_json_get+0x3c2>
 8022f62:	9a02      	ldr	r2, [sp, #8]
 8022f64:	9904      	ldr	r1, [sp, #16]
 8022f66:	440a      	add	r2, r1
 8022f68:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8022f6c:	2a2c      	cmp	r2, #44	@ 0x2c
 8022f6e:	d1ca      	bne.n	8022f06 <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8022f70:	f06f 0502 	mvn.w	r5, #2
 8022f74:	e027      	b.n	8022fc6 <mg_json_get+0x482>
          MG_EOO('O');
 8022f76:	9a01      	ldr	r2, [sp, #4]
 8022f78:	9903      	ldr	r1, [sp, #12]
 8022f7a:	428a      	cmp	r2, r1
 8022f7c:	d0c5      	beq.n	8022f0a <mg_json_get+0x3c6>
 8022f7e:	f06f 0502 	mvn.w	r5, #2
 8022f82:	e020      	b.n	8022fc6 <mg_json_get+0x482>
 8022f84:	08036b90 	.word	0x08036b90
 8022f88:	0803a124 	.word	0x0803a124
 8022f8c:	08036b98 	.word	0x08036b98
 8022f90:	9a02      	ldr	r2, [sp, #8]
 8022f92:	9904      	ldr	r1, [sp, #16]
 8022f94:	5c52      	ldrb	r2, [r2, r1]
 8022f96:	2a00      	cmp	r2, #0
 8022f98:	d1c2      	bne.n	8022f20 <mg_json_get+0x3dc>
 8022f9a:	9a01      	ldr	r2, [sp, #4]
 8022f9c:	9903      	ldr	r1, [sp, #12]
 8022f9e:	428a      	cmp	r2, r1
 8022fa0:	d1be      	bne.n	8022f20 <mg_json_get+0x3dc>
 8022fa2:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022fa6:	f1ba 0f00 	cmp.w	sl, #0
 8022faa:	d004      	beq.n	8022fb6 <mg_json_get+0x472>
 8022fac:	9b05      	ldr	r3, [sp, #20]
 8022fae:	1ae3      	subs	r3, r4, r3
 8022fb0:	3301      	adds	r3, #1
 8022fb2:	f8ca 3000 	str.w	r3, [sl]
 8022fb6:	9d05      	ldr	r5, [sp, #20]
 8022fb8:	e005      	b.n	8022fc6 <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 8022fba:	2303      	movs	r3, #3
 8022fbc:	e775      	b.n	8022eaa <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 8022fbe:	2303      	movs	r3, #3
 8022fc0:	e773      	b.n	8022eaa <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 8022fc2:	f06f 0502 	mvn.w	r5, #2
}
 8022fc6:	4628      	mov	r0, r5
 8022fc8:	b015      	add	sp, #84	@ 0x54
 8022fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 8022fce:	f06f 0501 	mvn.w	r5, #1
 8022fd2:	e7f8      	b.n	8022fc6 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022fd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8022fd8:	e7f5      	b.n	8022fc6 <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8022fda:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8022fde:	e7f2      	b.n	8022fc6 <mg_json_get+0x482>
          MG_EOO(']');
 8022fe0:	f06f 0501 	mvn.w	r5, #1
 8022fe4:	e7ef      	b.n	8022fc6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8022fe6:	f06f 0501 	mvn.w	r5, #1
 8022fea:	e7ec      	b.n	8022fc6 <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8022fec:	f06f 0502 	mvn.w	r5, #2
 8022ff0:	e7e9      	b.n	8022fc6 <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8022ff2:	f06f 0502 	mvn.w	r5, #2
 8022ff6:	e7e6      	b.n	8022fc6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8022ff8:	f06f 0501 	mvn.w	r5, #1
 8022ffc:	e7e3      	b.n	8022fc6 <mg_json_get+0x482>
          MG_EOO('}');
 8022ffe:	f06f 0501 	mvn.w	r5, #1
 8023002:	e7e0      	b.n	8022fc6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 8023004:	f06f 0501 	mvn.w	r5, #1
 8023008:	e7dd      	b.n	8022fc6 <mg_json_get+0x482>
          return MG_JSON_INVALID;
 802300a:	f06f 0501 	mvn.w	r5, #1
 802300e:	e7da      	b.n	8022fc6 <mg_json_get+0x482>
          MG_EOO('O');
 8023010:	f06f 0501 	mvn.w	r5, #1
 8023014:	e7d7      	b.n	8022fc6 <mg_json_get+0x482>
 8023016:	bf00      	nop

08023018 <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8023018:	b510      	push	{r4, lr}
 802301a:	b084      	sub	sp, #16
 802301c:	46ec      	mov	ip, sp
 802301e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8023022:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023024:	ab03      	add	r3, sp, #12
 8023026:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802302a:	f7ff fd8b 	bl	8022b44 <mg_json_get>
 802302e:	1e02      	subs	r2, r0, #0
 8023030:	db11      	blt.n	8023056 <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8023032:	9b00      	ldr	r3, [sp, #0]
 8023034:	1898      	adds	r0, r3, r2
 8023036:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8023038:	2a2d      	cmp	r2, #45	@ 0x2d
 802303a:	d003      	beq.n	8023044 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 802303c:	3a30      	subs	r2, #48	@ 0x30
 802303e:	b2d2      	uxtb	r2, r2
 8023040:	2a09      	cmp	r2, #9
 8023042:	d80b      	bhi.n	802305c <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8023044:	b164      	cbz	r4, 8023060 <mg_json_get_num+0x48>
 8023046:	2200      	movs	r2, #0
 8023048:	9903      	ldr	r1, [sp, #12]
 802304a:	f7fd fa81 	bl	8020550 <mg_atod>
 802304e:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 8023052:	2001      	movs	r0, #1
 8023054:	e000      	b.n	8023058 <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 8023056:	2000      	movs	r0, #0
}
 8023058:	b004      	add	sp, #16
 802305a:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 802305c:	2000      	movs	r0, #0
 802305e:	e7fb      	b.n	8023058 <mg_json_get_num+0x40>
    found = 1;
 8023060:	2001      	movs	r0, #1
 8023062:	e7f9      	b.n	8023058 <mg_json_get_num+0x40>

08023064 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8023064:	b510      	push	{r4, lr}
 8023066:	b082      	sub	sp, #8
 8023068:	46ec      	mov	ip, sp
 802306a:	e88c 0003 	stmia.w	ip, {r0, r1}
 802306e:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8023070:	2300      	movs	r3, #0
 8023072:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8023076:	f7ff fd65 	bl	8022b44 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802307a:	2800      	cmp	r0, #0
 802307c:	db0f      	blt.n	802309e <mg_json_get_bool+0x3a>
 802307e:	9b00      	ldr	r3, [sp, #0]
 8023080:	5c1b      	ldrb	r3, [r3, r0]
 8023082:	2b74      	cmp	r3, #116	@ 0x74
 8023084:	d003      	beq.n	802308e <mg_json_get_bool+0x2a>
 8023086:	2b66      	cmp	r3, #102	@ 0x66
 8023088:	d001      	beq.n	802308e <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 802308a:	2000      	movs	r0, #0
 802308c:	e008      	b.n	80230a0 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 802308e:	b14c      	cbz	r4, 80230a4 <mg_json_get_bool+0x40>
 8023090:	2b74      	cmp	r3, #116	@ 0x74
 8023092:	bf14      	ite	ne
 8023094:	2300      	movne	r3, #0
 8023096:	2301      	moveq	r3, #1
 8023098:	7023      	strb	r3, [r4, #0]
    found = 1;
 802309a:	2001      	movs	r0, #1
 802309c:	e000      	b.n	80230a0 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 802309e:	2000      	movs	r0, #0
}
 80230a0:	b002      	add	sp, #8
 80230a2:	bd10      	pop	{r4, pc}
    found = 1;
 80230a4:	2001      	movs	r0, #1
 80230a6:	e7fb      	b.n	80230a0 <mg_json_get_bool+0x3c>

080230a8 <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 80230a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230aa:	b085      	sub	sp, #20
 80230ac:	4606      	mov	r6, r0
 80230ae:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 80230b0:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 80230b2:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 80230b4:	e038      	b.n	8023128 <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80230b6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80230ba:	f7fd fb5b 	bl	8020774 <nibble>
 80230be:	f7fd fb41 	bl	8020744 <logc>
 80230c2:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80230c6:	f7fd fb55 	bl	8020774 <nibble>
 80230ca:	f7fd fb3b 	bl	8020744 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80230ce:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80230d2:	f7fd fb4f 	bl	8020774 <nibble>
 80230d6:	f7fd fb35 	bl	8020744 <logc>
 80230da:	2030      	movs	r0, #48	@ 0x30
 80230dc:	f7fd fb32 	bl	8020744 <logc>
 80230e0:	2103      	movs	r1, #3
 80230e2:	4829      	ldr	r0, [pc, #164]	@ (8023188 <mg_hexdump+0xe0>)
 80230e4:	f7fd fb3a 	bl	802075c <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80230e8:	5d70      	ldrb	r0, [r6, r5]
 80230ea:	0900      	lsrs	r0, r0, #4
 80230ec:	f7fd fb42 	bl	8020774 <nibble>
 80230f0:	f7fd fb28 	bl	8020744 <logc>
 80230f4:	5d70      	ldrb	r0, [r6, r5]
 80230f6:	f000 000f 	and.w	r0, r0, #15
 80230fa:	f7fd fb3b 	bl	8020774 <nibble>
 80230fe:	f7fd fb21 	bl	8020744 <logc>
    logc(' ');                                         // Space after hex number
 8023102:	2020      	movs	r0, #32
 8023104:	f7fd fb1e 	bl	8020744 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023108:	5d72      	ldrb	r2, [r6, r5]
 802310a:	f1a2 0320 	sub.w	r3, r2, #32
 802310e:	b2db      	uxtb	r3, r3
 8023110:	2b5e      	cmp	r3, #94	@ 0x5e
 8023112:	d900      	bls.n	8023116 <mg_hexdump+0x6e>
 8023114:	222e      	movs	r2, #46	@ 0x2e
 8023116:	1c63      	adds	r3, r4, #1
 8023118:	f104 0110 	add.w	r1, r4, #16
 802311c:	eb0d 0401 	add.w	r4, sp, r1
 8023120:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8023124:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8023126:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 8023128:	42bd      	cmp	r5, r7
 802312a:	d21e      	bcs.n	802316a <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 802312c:	f015 0f0f 	tst.w	r5, #15
 8023130:	d1da      	bne.n	80230e8 <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8023132:	2d00      	cmp	r5, #0
 8023134:	d0bf      	beq.n	80230b6 <mg_hexdump+0xe>
 8023136:	2102      	movs	r1, #2
 8023138:	4814      	ldr	r0, [pc, #80]	@ (802318c <mg_hexdump+0xe4>)
 802313a:	f7fd fb0f 	bl	802075c <logs>
 802313e:	2110      	movs	r1, #16
 8023140:	4668      	mov	r0, sp
 8023142:	f7fd fb0b 	bl	802075c <logs>
 8023146:	200a      	movs	r0, #10
 8023148:	f7fd fafc 	bl	8020744 <logc>
 802314c:	2400      	movs	r4, #0
 802314e:	e7b2      	b.n	80230b6 <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8023150:	2103      	movs	r1, #3
 8023152:	480d      	ldr	r0, [pc, #52]	@ (8023188 <mg_hexdump+0xe0>)
 8023154:	f7fd fb02 	bl	802075c <logs>
 8023158:	1c63      	adds	r3, r4, #1
 802315a:	f104 0210 	add.w	r2, r4, #16
 802315e:	eb0d 0402 	add.w	r4, sp, r2
 8023162:	2220      	movs	r2, #32
 8023164:	f804 2c10 	strb.w	r2, [r4, #-16]
 8023168:	b2dc      	uxtb	r4, r3
 802316a:	2c0f      	cmp	r4, #15
 802316c:	d9f0      	bls.n	8023150 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 802316e:	2102      	movs	r1, #2
 8023170:	4806      	ldr	r0, [pc, #24]	@ (802318c <mg_hexdump+0xe4>)
 8023172:	f7fd faf3 	bl	802075c <logs>
 8023176:	2110      	movs	r1, #16
 8023178:	4668      	mov	r0, sp
 802317a:	f7fd faef 	bl	802075c <logs>
 802317e:	200a      	movs	r0, #10
 8023180:	f7fd fae0 	bl	8020744 <logc>
}
 8023184:	b005      	add	sp, #20
 8023186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023188:	0803a130 	.word	0x0803a130
 802318c:	0803a12c 	.word	0x0803a12c

08023190 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8023190:	4b09      	ldr	r3, [pc, #36]	@ (80231b8 <mg_md5_init+0x28>)
 8023192:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8023194:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8023198:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802319a:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802319e:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 80231a2:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 80231a6:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 80231a8:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 80231ac:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 80231ae:	2300      	movs	r3, #0
 80231b0:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 80231b2:	6143      	str	r3, [r0, #20]
}
 80231b4:	4770      	bx	lr
 80231b6:	bf00      	nop
 80231b8:	67452301 	.word	0x67452301

080231bc <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 80231bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231c0:	4606      	mov	r6, r0
 80231c2:	460c      	mov	r4, r1
 80231c4:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80231c6:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80231c8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80231cc:	6102      	str	r2, [r0, #16]
 80231ce:	429a      	cmp	r2, r3
 80231d0:	d202      	bcs.n	80231d8 <mg_md5_update+0x1c>
 80231d2:	6942      	ldr	r2, [r0, #20]
 80231d4:	3201      	adds	r2, #1
 80231d6:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80231d8:	6972      	ldr	r2, [r6, #20]
 80231da:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80231de:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80231e0:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80231e4:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80231e8:	d035      	beq.n	8023256 <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80231ea:	f106 0918 	add.w	r9, r6, #24
 80231ee:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80231f2:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80231f6:	4545      	cmp	r5, r8
 80231f8:	d30b      	bcc.n	8023212 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80231fa:	4642      	mov	r2, r8
 80231fc:	4621      	mov	r1, r4
 80231fe:	f00a fd7b 	bl	802dcf8 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023202:	4649      	mov	r1, r9
 8023204:	4630      	mov	r0, r6
 8023206:	f7fd fabf 	bl	8020788 <mg_md5_transform>
    buf += t;
 802320a:	4444      	add	r4, r8
    len -= t;
 802320c:	3f40      	subs	r7, #64	@ 0x40
 802320e:	443d      	add	r5, r7
 8023210:	e021      	b.n	8023256 <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 8023212:	462a      	mov	r2, r5
 8023214:	4621      	mov	r1, r4
 8023216:	f00a fd6f 	bl	802dcf8 <memcpy>
      return;
 802321a:	e024      	b.n	8023266 <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 802321c:	f106 0118 	add.w	r1, r6, #24
 8023220:	4623      	mov	r3, r4
 8023222:	468c      	mov	ip, r1
 8023224:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8023228:	681f      	ldr	r7, [r3, #0]
 802322a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 802322e:	6898      	ldr	r0, [r3, #8]
 8023230:	68da      	ldr	r2, [r3, #12]
 8023232:	f8cc 7000 	str.w	r7, [ip]
 8023236:	f8cc e004 	str.w	lr, [ip, #4]
 802323a:	f8cc 0008 	str.w	r0, [ip, #8]
 802323e:	f8cc 200c 	str.w	r2, [ip, #12]
 8023242:	3310      	adds	r3, #16
 8023244:	f10c 0c10 	add.w	ip, ip, #16
 8023248:	4543      	cmp	r3, r8
 802324a:	d1ed      	bne.n	8023228 <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 802324c:	4630      	mov	r0, r6
 802324e:	f7fd fa9b 	bl	8020788 <mg_md5_transform>
    buf += 64;
 8023252:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8023254:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8023256:	2d3f      	cmp	r5, #63	@ 0x3f
 8023258:	d8e0      	bhi.n	802321c <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 802325a:	462a      	mov	r2, r5
 802325c:	4621      	mov	r1, r4
 802325e:	f106 0018 	add.w	r0, r6, #24
 8023262:	f00a fd49 	bl	802dcf8 <memcpy>
}
 8023266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802326a <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 802326a:	b570      	push	{r4, r5, r6, lr}
 802326c:	4604      	mov	r4, r0
 802326e:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8023270:	6903      	ldr	r3, [r0, #16]
 8023272:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8023276:	f100 0618 	add.w	r6, r0, #24
 802327a:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 802327c:	3001      	adds	r0, #1
 802327e:	2280      	movs	r2, #128	@ 0x80
 8023280:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8023282:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8023286:	2a07      	cmp	r2, #7
 8023288:	d821      	bhi.n	80232ce <mg_md5_final+0x64>
    memset(p, 0, count);
 802328a:	2100      	movs	r1, #0
 802328c:	f009 faf8 	bl	802c880 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8023290:	4631      	mov	r1, r6
 8023292:	4620      	mov	r0, r4
 8023294:	f7fd fa78 	bl	8020788 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8023298:	2238      	movs	r2, #56	@ 0x38
 802329a:	2100      	movs	r1, #0
 802329c:	4630      	mov	r0, r6
 802329e:	f009 faef 	bl	802c880 <memset>
  a[14] = ctx->bits[0];
 80232a2:	6923      	ldr	r3, [r4, #16]
 80232a4:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 80232a6:	6963      	ldr	r3, [r4, #20]
 80232a8:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80232aa:	4631      	mov	r1, r6
 80232ac:	4620      	mov	r0, r4
 80232ae:	f7fd fa6b 	bl	8020788 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 80232b2:	6820      	ldr	r0, [r4, #0]
 80232b4:	6861      	ldr	r1, [r4, #4]
 80232b6:	68a2      	ldr	r2, [r4, #8]
 80232b8:	68e3      	ldr	r3, [r4, #12]
 80232ba:	6028      	str	r0, [r5, #0]
 80232bc:	6069      	str	r1, [r5, #4]
 80232be:	60aa      	str	r2, [r5, #8]
 80232c0:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 80232c2:	2258      	movs	r2, #88	@ 0x58
 80232c4:	2100      	movs	r1, #0
 80232c6:	4620      	mov	r0, r4
 80232c8:	f009 fada 	bl	802c880 <memset>
}
 80232cc:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 80232ce:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 80232d2:	2100      	movs	r1, #0
 80232d4:	f009 fad4 	bl	802c880 <memset>
 80232d8:	e7e3      	b.n	80232a2 <mg_md5_final+0x38>

080232da <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 80232da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80232de:	4604      	mov	r4, r0
 80232e0:	460d      	mov	r5, r1
 80232e2:	4617      	mov	r7, r2
 80232e4:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 80232e6:	2228      	movs	r2, #40	@ 0x28
 80232e8:	2100      	movs	r1, #0
 80232ea:	4618      	mov	r0, r3
 80232ec:	f009 fac8 	bl	802c880 <memset>
  m->dgram.buf = (char *) buf;
 80232f0:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 80232f2:	2d01      	cmp	r5, #1
 80232f4:	f240 8088 	bls.w	8023408 <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 80232f8:	7820      	ldrb	r0, [r4, #0]
 80232fa:	0900      	lsrs	r0, r0, #4
 80232fc:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 80232fe:	46a4      	mov	ip, r4
 8023300:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8023304:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8023308:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 802330c:	2300      	movs	r3, #0
 802330e:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8023310:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8023312:	ebac 0e04 	sub.w	lr, ip, r4
 8023316:	45ae      	cmp	lr, r5
 8023318:	d211      	bcs.n	802333e <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 802331a:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 802331e:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8023322:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8023326:	fa0e fe08 	lsl.w	lr, lr, r8
 802332a:	4471      	add	r1, lr
    len_len++;
 802332c:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 802332e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023332:	d004      	beq.n	802333e <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8023334:	2b03      	cmp	r3, #3
 8023336:	d9ec      	bls.n	8023312 <mg_mqtt_parse+0x38>
 8023338:	2002      	movs	r0, #2
}
 802333a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 802333e:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8023342:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8023346:	d161      	bne.n	802340c <mg_mqtt_parse+0x132>
 8023348:	4425      	add	r5, r4
 802334a:	4545      	cmp	r5, r8
 802334c:	d360      	bcc.n	8023410 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 802334e:	eba8 0304 	sub.w	r3, r8, r4
 8023352:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8023354:	2803      	cmp	r0, #3
 8023356:	d01c      	beq.n	8023392 <mg_mqtt_parse+0xb8>
 8023358:	d80a      	bhi.n	8023370 <mg_mqtt_parse+0x96>
 802335a:	2802      	cmp	r0, #2
 802335c:	d106      	bne.n	802336c <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 802335e:	2901      	cmp	r1, #1
 8023360:	dd5a      	ble.n	8023418 <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8023362:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023366:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8023368:	2000      	movs	r0, #0
      break;
 802336a:	e7e6      	b.n	802333a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 802336c:	2000      	movs	r0, #0
 802336e:	e7e4      	b.n	802333a <mg_mqtt_parse+0x60>
 8023370:	3804      	subs	r0, #4
 8023372:	b2c0      	uxtb	r0, r0
 8023374:	2807      	cmp	r0, #7
 8023376:	d84d      	bhi.n	8023414 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023378:	f10c 0302 	add.w	r3, ip, #2
 802337c:	4543      	cmp	r3, r8
 802337e:	d84d      	bhi.n	802341c <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8023380:	f89c 2000 	ldrb.w	r2, [ip]
 8023384:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802338c:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 802338e:	2000      	movs	r0, #0
      break;
 8023390:	e7d3      	b.n	802333a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023392:	f10c 0202 	add.w	r2, ip, #2
 8023396:	4542      	cmp	r2, r8
 8023398:	d842      	bhi.n	8023420 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 802339a:	f89c 1000 	ldrb.w	r1, [ip]
 802339e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80233a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80233a6:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 80233a8:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 80233aa:	3302      	adds	r3, #2
 80233ac:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 80233b0:	45a8      	cmp	r8, r5
 80233b2:	d337      	bcc.n	8023424 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 80233b4:	f1b9 0f00 	cmp.w	r9, #0
 80233b8:	d008      	beq.n	80233cc <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 80233ba:	1caa      	adds	r2, r5, #2
 80233bc:	4542      	cmp	r2, r8
 80233be:	d833      	bhi.n	8023428 <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80233c0:	7829      	ldrb	r1, [r5, #0]
 80233c2:	786b      	ldrb	r3, [r5, #1]
 80233c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80233c8:	8333      	strh	r3, [r6, #24]
        p += 2;
 80233ca:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 80233cc:	4545      	cmp	r5, r8
 80233ce:	d82d      	bhi.n	802342c <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 80233d0:	2f05      	cmp	r7, #5
 80233d2:	d007      	beq.n	80233e4 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 80233d4:	4545      	cmp	r5, r8
 80233d6:	d82d      	bhi.n	8023434 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 80233d8:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 80233da:	eba8 0505 	sub.w	r5, r8, r5
 80233de:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 80233e0:	2000      	movs	r0, #0
      break;
 80233e2:	e7aa      	b.n	802333a <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 80233e4:	1cab      	adds	r3, r5, #2
 80233e6:	4543      	cmp	r3, r8
 80233e8:	d2f4      	bcs.n	80233d4 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 80233ea:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 80233ee:	eba8 0105 	sub.w	r1, r8, r5
 80233f2:	4628      	mov	r0, r5
 80233f4:	f7fd fd70 	bl	8020ed8 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 80233f8:	b1d0      	cbz	r0, 8023430 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 80233fa:	182b      	adds	r3, r5, r0
 80233fc:	1b1b      	subs	r3, r3, r4
 80233fe:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8023400:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8023402:	4403      	add	r3, r0
 8023404:	441d      	add	r5, r3
 8023406:	e7e5      	b.n	80233d4 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8023408:	2001      	movs	r0, #1
 802340a:	e796      	b.n	802333a <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 802340c:	2001      	movs	r0, #1
 802340e:	e794      	b.n	802333a <mg_mqtt_parse+0x60>
 8023410:	2001      	movs	r0, #1
 8023412:	e792      	b.n	802333a <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8023414:	2000      	movs	r0, #0
 8023416:	e790      	b.n	802333a <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8023418:	2002      	movs	r0, #2
 802341a:	e78e      	b.n	802333a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 802341c:	2002      	movs	r0, #2
 802341e:	e78c      	b.n	802333a <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8023420:	2002      	movs	r0, #2
 8023422:	e78a      	b.n	802333a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023424:	2002      	movs	r0, #2
 8023426:	e788      	b.n	802333a <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8023428:	2002      	movs	r0, #2
 802342a:	e786      	b.n	802333a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 802342c:	2002      	movs	r0, #2
 802342e:	e784      	b.n	802333a <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8023430:	2002      	movs	r0, #2
 8023432:	e782      	b.n	802333a <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8023434:	2002      	movs	r0, #2
 8023436:	e780      	b.n	802333a <mg_mqtt_parse+0x60>

08023438 <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8023438:	b510      	push	{r4, lr}
 802343a:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 802343c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802343e:	31b0      	adds	r1, #176	@ 0xb0
 8023440:	2001      	movs	r0, #1
 8023442:	f7ff f8f5 	bl	8022630 <mg_calloc>
  if (c != NULL) {
 8023446:	4603      	mov	r3, r0
 8023448:	b148      	cbz	r0, 802345e <mg_alloc_conn+0x26>
    c->mgr = mgr;
 802344a:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 802344c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023450:	6742      	str	r2, [r0, #116]	@ 0x74
 8023452:	6442      	str	r2, [r0, #68]	@ 0x44
 8023454:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8023456:	69e2      	ldr	r2, [r4, #28]
 8023458:	3201      	adds	r2, #1
 802345a:	61e2      	str	r2, [r4, #28]
 802345c:	6342      	str	r2, [r0, #52]	@ 0x34
}
 802345e:	4618      	mov	r0, r3
 8023460:	bd10      	pop	{r4, pc}
	...

08023464 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8023464:	b510      	push	{r4, lr}
 8023466:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8023468:	2248      	movs	r2, #72	@ 0x48
 802346a:	2100      	movs	r1, #0
 802346c:	f009 fa08 	bl	802c880 <memset>
  mgr->epoll_fd = -1;
 8023470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023474:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8023476:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8023478:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802347c:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 802347e:	4b02      	ldr	r3, [pc, #8]	@ (8023488 <mg_mgr_init+0x24>)
 8023480:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8023482:	4b02      	ldr	r3, [pc, #8]	@ (802348c <mg_mgr_init+0x28>)
 8023484:	60e3      	str	r3, [r4, #12]
}
 8023486:	bd10      	pop	{r4, pc}
 8023488:	0803a134 	.word	0x0803a134
 802348c:	0803a148 	.word	0x0803a148

08023490 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8023490:	b40c      	push	{r2, r3}
 8023492:	b500      	push	{lr}
 8023494:	b083      	sub	sp, #12
 8023496:	ab04      	add	r3, sp, #16
 8023498:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 802349c:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 802349e:	ab01      	add	r3, sp, #4
 80234a0:	f000 fcde 	bl	8023e60 <mg_vsnprintf>
}
 80234a4:	b003      	add	sp, #12
 80234a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80234aa:	b002      	add	sp, #8
 80234ac:	4770      	bx	lr
	...

080234b0 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80234b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234b4:	b093      	sub	sp, #76	@ 0x4c
 80234b6:	9005      	str	r0, [sp, #20]
 80234b8:	9106      	str	r1, [sp, #24]
 80234ba:	ec51 0b10 	vmov	r0, r1, d0
 80234be:	ed8d 0b02 	vstr	d0, [sp, #8]
 80234c2:	4690      	mov	r8, r2
 80234c4:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80234c6:	2200      	movs	r2, #0
 80234c8:	2300      	movs	r3, #0
 80234ca:	f7ed fb15 	bl	8010af8 <__aeabi_dcmpeq>
 80234ce:	b9c8      	cbnz	r0, 8023504 <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80234d0:	ed9d 0b02 	vldr	d0, [sp, #8]
 80234d4:	f7fc fab0 	bl	801fa38 <xisinf>
 80234d8:	b9d8      	cbnz	r0, 8023512 <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80234da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80234de:	f7fc fabd 	bl	801fa5c <xisnan>
 80234e2:	4606      	mov	r6, r0
 80234e4:	bb28      	cbnz	r0, 8023532 <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80234e6:	2200      	movs	r2, #0
 80234e8:	2300      	movs	r3, #0
 80234ea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80234ee:	4620      	mov	r0, r4
 80234f0:	4629      	mov	r1, r5
 80234f2:	f7ed fb0b 	bl	8010b0c <__aeabi_dcmplt>
 80234f6:	bb18      	cbnz	r0, 8023540 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 80234f8:	4637      	mov	r7, r6
  mul = 1.0;
 80234fa:	2400      	movs	r4, #0
 80234fc:	4dba      	ldr	r5, [pc, #744]	@ (80237e8 <mg_dtoa+0x338>)
 80234fe:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023502:	e02f      	b.n	8023564 <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8023504:	4bb9      	ldr	r3, [pc, #740]	@ (80237ec <mg_dtoa+0x33c>)
 8023506:	4aba      	ldr	r2, [pc, #744]	@ (80237f0 <mg_dtoa+0x340>)
 8023508:	9906      	ldr	r1, [sp, #24]
 802350a:	9805      	ldr	r0, [sp, #20]
 802350c:	f7ff ffc0 	bl	8023490 <mg_snprintf>
 8023510:	e1d3      	b.n	80238ba <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8023512:	2200      	movs	r2, #0
 8023514:	2300      	movs	r3, #0
 8023516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802351a:	f7ed fb15 	bl	8010b48 <__aeabi_dcmpgt>
 802351e:	b130      	cbz	r0, 802352e <mg_dtoa+0x7e>
 8023520:	4bb4      	ldr	r3, [pc, #720]	@ (80237f4 <mg_dtoa+0x344>)
 8023522:	4ab3      	ldr	r2, [pc, #716]	@ (80237f0 <mg_dtoa+0x340>)
 8023524:	9906      	ldr	r1, [sp, #24]
 8023526:	9805      	ldr	r0, [sp, #20]
 8023528:	f7ff ffb2 	bl	8023490 <mg_snprintf>
 802352c:	e1c5      	b.n	80238ba <mg_dtoa+0x40a>
 802352e:	4bb2      	ldr	r3, [pc, #712]	@ (80237f8 <mg_dtoa+0x348>)
 8023530:	e7f7      	b.n	8023522 <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8023532:	4bb2      	ldr	r3, [pc, #712]	@ (80237fc <mg_dtoa+0x34c>)
 8023534:	4aae      	ldr	r2, [pc, #696]	@ (80237f0 <mg_dtoa+0x340>)
 8023536:	9906      	ldr	r1, [sp, #24]
 8023538:	9805      	ldr	r0, [sp, #20]
 802353a:	f7ff ffa9 	bl	8023490 <mg_snprintf>
 802353e:	e1bc      	b.n	80238ba <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8023540:	4622      	mov	r2, r4
 8023542:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8023546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802354a:	232d      	movs	r3, #45	@ 0x2d
 802354c:	f88d 3020 	strb.w	r3, [sp, #32]
 8023550:	2701      	movs	r7, #1
 8023552:	e7d2      	b.n	80234fa <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8023554:	2200      	movs	r2, #0
 8023556:	4baa      	ldr	r3, [pc, #680]	@ (8023800 <mg_dtoa+0x350>)
 8023558:	4620      	mov	r0, r4
 802355a:	4629      	mov	r1, r5
 802355c:	f7ed f864 	bl	8010628 <__aeabi_dmul>
 8023560:	4604      	mov	r4, r0
 8023562:	460d      	mov	r5, r1
 8023564:	2200      	movs	r2, #0
 8023566:	4ba6      	ldr	r3, [pc, #664]	@ (8023800 <mg_dtoa+0x350>)
 8023568:	4650      	mov	r0, sl
 802356a:	4659      	mov	r1, fp
 802356c:	f7ed fae2 	bl	8010b34 <__aeabi_dcmpge>
 8023570:	b1b0      	cbz	r0, 80235a0 <mg_dtoa+0xf0>
 8023572:	4622      	mov	r2, r4
 8023574:	462b      	mov	r3, r5
 8023576:	4650      	mov	r0, sl
 8023578:	4659      	mov	r1, fp
 802357a:	f7ed f97f 	bl	801087c <__aeabi_ddiv>
 802357e:	2200      	movs	r2, #0
 8023580:	4b9f      	ldr	r3, [pc, #636]	@ (8023800 <mg_dtoa+0x350>)
 8023582:	f7ed fad7 	bl	8010b34 <__aeabi_dcmpge>
 8023586:	2800      	cmp	r0, #0
 8023588:	d1e4      	bne.n	8023554 <mg_dtoa+0xa4>
 802358a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 802358e:	e007      	b.n	80235a0 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8023590:	2200      	movs	r2, #0
 8023592:	4b9b      	ldr	r3, [pc, #620]	@ (8023800 <mg_dtoa+0x350>)
 8023594:	4620      	mov	r0, r4
 8023596:	4629      	mov	r1, r5
 8023598:	f7ed f970 	bl	801087c <__aeabi_ddiv>
 802359c:	4604      	mov	r4, r0
 802359e:	460d      	mov	r5, r1
 80235a0:	2200      	movs	r2, #0
 80235a2:	4b91      	ldr	r3, [pc, #580]	@ (80237e8 <mg_dtoa+0x338>)
 80235a4:	4650      	mov	r0, sl
 80235a6:	4659      	mov	r1, fp
 80235a8:	f7ed faba 	bl	8010b20 <__aeabi_dcmple>
 80235ac:	b158      	cbz	r0, 80235c6 <mg_dtoa+0x116>
 80235ae:	4622      	mov	r2, r4
 80235b0:	462b      	mov	r3, r5
 80235b2:	4650      	mov	r0, sl
 80235b4:	4659      	mov	r1, fp
 80235b6:	f7ed f961 	bl	801087c <__aeabi_ddiv>
 80235ba:	2200      	movs	r2, #0
 80235bc:	4b8a      	ldr	r3, [pc, #552]	@ (80237e8 <mg_dtoa+0x338>)
 80235be:	f7ed faaf 	bl	8010b20 <__aeabi_dcmple>
 80235c2:	2800      	cmp	r0, #0
 80235c4:	d1e4      	bne.n	8023590 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80235c6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80235ca:	2200      	movs	r2, #0
 80235cc:	4b8d      	ldr	r3, [pc, #564]	@ (8023804 <mg_dtoa+0x354>)
 80235ce:	4620      	mov	r0, r4
 80235d0:	4629      	mov	r1, r5
 80235d2:	f7ed f829 	bl	8010628 <__aeabi_dmul>
 80235d6:	4634      	mov	r4, r6
 80235d8:	e004      	b.n	80235e4 <mg_dtoa+0x134>
 80235da:	2200      	movs	r2, #0
 80235dc:	4b88      	ldr	r3, [pc, #544]	@ (8023800 <mg_dtoa+0x350>)
 80235de:	f7ed f94d 	bl	801087c <__aeabi_ddiv>
 80235e2:	3401      	adds	r4, #1
 80235e4:	4544      	cmp	r4, r8
 80235e6:	dbf8      	blt.n	80235da <mg_dtoa+0x12a>
  d += t;
 80235e8:	4602      	mov	r2, r0
 80235ea:	460b      	mov	r3, r1
 80235ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80235f0:	f7ec fe64 	bl	80102bc <__adddf3>
 80235f4:	4682      	mov	sl, r0
 80235f6:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 80235f8:	46b1      	mov	r9, r6
  mul = 1.0;
 80235fa:	2400      	movs	r4, #0
 80235fc:	4d7a      	ldr	r5, [pc, #488]	@ (80237e8 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80235fe:	e009      	b.n	8023614 <mg_dtoa+0x164>
 8023600:	2200      	movs	r2, #0
 8023602:	4b7f      	ldr	r3, [pc, #508]	@ (8023800 <mg_dtoa+0x350>)
 8023604:	4620      	mov	r0, r4
 8023606:	4629      	mov	r1, r5
 8023608:	f7ed f80e 	bl	8010628 <__aeabi_dmul>
 802360c:	4604      	mov	r4, r0
 802360e:	460d      	mov	r5, r1
 8023610:	f109 0901 	add.w	r9, r9, #1
 8023614:	2200      	movs	r2, #0
 8023616:	4b7a      	ldr	r3, [pc, #488]	@ (8023800 <mg_dtoa+0x350>)
 8023618:	4650      	mov	r0, sl
 802361a:	4659      	mov	r1, fp
 802361c:	f7ed fa8a 	bl	8010b34 <__aeabi_dcmpge>
 8023620:	b1b0      	cbz	r0, 8023650 <mg_dtoa+0x1a0>
 8023622:	4622      	mov	r2, r4
 8023624:	462b      	mov	r3, r5
 8023626:	4650      	mov	r0, sl
 8023628:	4659      	mov	r1, fp
 802362a:	f7ed f927 	bl	801087c <__aeabi_ddiv>
 802362e:	2200      	movs	r2, #0
 8023630:	4b73      	ldr	r3, [pc, #460]	@ (8023800 <mg_dtoa+0x350>)
 8023632:	f7ed fa7f 	bl	8010b34 <__aeabi_dcmpge>
 8023636:	2800      	cmp	r0, #0
 8023638:	d1e2      	bne.n	8023600 <mg_dtoa+0x150>
 802363a:	e009      	b.n	8023650 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 802363c:	2200      	movs	r2, #0
 802363e:	4b70      	ldr	r3, [pc, #448]	@ (8023800 <mg_dtoa+0x350>)
 8023640:	4620      	mov	r0, r4
 8023642:	4629      	mov	r1, r5
 8023644:	f7ed f91a 	bl	801087c <__aeabi_ddiv>
 8023648:	4604      	mov	r4, r0
 802364a:	460d      	mov	r5, r1
 802364c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8023650:	2200      	movs	r2, #0
 8023652:	4b65      	ldr	r3, [pc, #404]	@ (80237e8 <mg_dtoa+0x338>)
 8023654:	4650      	mov	r0, sl
 8023656:	4659      	mov	r1, fp
 8023658:	f7ed fa58 	bl	8010b0c <__aeabi_dcmplt>
 802365c:	b158      	cbz	r0, 8023676 <mg_dtoa+0x1c6>
 802365e:	4622      	mov	r2, r4
 8023660:	462b      	mov	r3, r5
 8023662:	4650      	mov	r0, sl
 8023664:	4659      	mov	r1, fp
 8023666:	f7ed f909 	bl	801087c <__aeabi_ddiv>
 802366a:	2200      	movs	r2, #0
 802366c:	4b5e      	ldr	r3, [pc, #376]	@ (80237e8 <mg_dtoa+0x338>)
 802366e:	f7ed fa4d 	bl	8010b0c <__aeabi_dcmplt>
 8023672:	2800      	cmp	r0, #0
 8023674:	d1e2      	bne.n	802363c <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8023676:	45c1      	cmp	r9, r8
 8023678:	db02      	blt.n	8023680 <mg_dtoa+0x1d0>
 802367a:	f1b8 0f01 	cmp.w	r8, #1
 802367e:	dc25      	bgt.n	80236cc <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8023680:	f1c8 0300 	rsb	r3, r8, #0
 8023684:	454b      	cmp	r3, r9
 8023686:	db5e      	blt.n	8023746 <mg_dtoa+0x296>
 8023688:	f1b8 0f01 	cmp.w	r8, #1
 802368c:	dd5b      	ble.n	8023746 <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 802368e:	4622      	mov	r2, r4
 8023690:	462b      	mov	r3, r5
 8023692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023696:	f7ed f8f1 	bl	801087c <__aeabi_ddiv>
 802369a:	ad08      	add	r5, sp, #32
 802369c:	9b07      	ldr	r3, [sp, #28]
 802369e:	4642      	mov	r2, r8
 80236a0:	ec41 0b10 	vmov	d0, r0, r1
 80236a4:	2128      	movs	r1, #40	@ 0x28
 80236a6:	4628      	mov	r0, r5
 80236a8:	f7ff ff02 	bl	80234b0 <mg_dtoa>
 80236ac:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 80236ae:	1838      	adds	r0, r7, r0
 80236b0:	222d      	movs	r2, #45	@ 0x2d
 80236b2:	f1c9 0100 	rsb	r1, r9, #0
 80236b6:	4428      	add	r0, r5
 80236b8:	f7fc f984 	bl	801f9c4 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80236bc:	9500      	str	r5, [sp, #0]
 80236be:	1823      	adds	r3, r4, r0
 80236c0:	4a51      	ldr	r2, [pc, #324]	@ (8023808 <mg_dtoa+0x358>)
 80236c2:	9906      	ldr	r1, [sp, #24]
 80236c4:	9805      	ldr	r0, [sp, #20]
 80236c6:	f7ff fee3 	bl	8023490 <mg_snprintf>
 80236ca:	e0f6      	b.n	80238ba <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80236cc:	4622      	mov	r2, r4
 80236ce:	462b      	mov	r3, r5
 80236d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80236d4:	f7ed f8d2 	bl	801087c <__aeabi_ddiv>
 80236d8:	ad08      	add	r5, sp, #32
 80236da:	9b07      	ldr	r3, [sp, #28]
 80236dc:	4642      	mov	r2, r8
 80236de:	ec41 0b10 	vmov	d0, r0, r1
 80236e2:	2128      	movs	r1, #40	@ 0x28
 80236e4:	4628      	mov	r0, r5
 80236e6:	f7ff fee3 	bl	80234b0 <mg_dtoa>
 80236ea:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 80236ec:	1838      	adds	r0, r7, r0
 80236ee:	222b      	movs	r2, #43	@ 0x2b
 80236f0:	4649      	mov	r1, r9
 80236f2:	4428      	add	r0, r5
 80236f4:	f7fc f966 	bl	801f9c4 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80236f8:	9500      	str	r5, [sp, #0]
 80236fa:	1823      	adds	r3, r4, r0
 80236fc:	4a42      	ldr	r2, [pc, #264]	@ (8023808 <mg_dtoa+0x358>)
 80236fe:	9906      	ldr	r1, [sp, #24]
 8023700:	9805      	ldr	r0, [sp, #20]
 8023702:	f7ff fec5 	bl	8023490 <mg_snprintf>
 8023706:	e0d8      	b.n	80238ba <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8023708:	3601      	adds	r6, #1
 802370a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802370e:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023712:	eb0d 0902 	add.w	r9, sp, r2
 8023716:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802371a:	f7ec ff1b 	bl	8010554 <__aeabi_i2d>
 802371e:	4622      	mov	r2, r4
 8023720:	462b      	mov	r3, r5
 8023722:	f7ec ff81 	bl	8010628 <__aeabi_dmul>
 8023726:	4602      	mov	r2, r0
 8023728:	460b      	mov	r3, r1
 802372a:	4650      	mov	r0, sl
 802372c:	4659      	mov	r1, fp
 802372e:	f7ec fdc3 	bl	80102b8 <__aeabi_dsub>
 8023732:	4682      	mov	sl, r0
 8023734:	468b      	mov	fp, r1
      t /= 10.0;
 8023736:	2200      	movs	r2, #0
 8023738:	4b31      	ldr	r3, [pc, #196]	@ (8023800 <mg_dtoa+0x350>)
 802373a:	4620      	mov	r0, r4
 802373c:	4629      	mov	r1, r5
 802373e:	f7ed f89d 	bl	801087c <__aeabi_ddiv>
 8023742:	4604      	mov	r4, r0
 8023744:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8023746:	2200      	movs	r2, #0
 8023748:	4b27      	ldr	r3, [pc, #156]	@ (80237e8 <mg_dtoa+0x338>)
 802374a:	4620      	mov	r0, r4
 802374c:	4629      	mov	r1, r5
 802374e:	f7ed f9f1 	bl	8010b34 <__aeabi_dcmpge>
 8023752:	b188      	cbz	r0, 8023778 <mg_dtoa+0x2c8>
 8023754:	eb07 0906 	add.w	r9, r7, r6
 8023758:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 802375c:	dc0c      	bgt.n	8023778 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 802375e:	4622      	mov	r2, r4
 8023760:	462b      	mov	r3, r5
 8023762:	4650      	mov	r0, sl
 8023764:	4659      	mov	r1, fp
 8023766:	f7ed f889 	bl	801087c <__aeabi_ddiv>
 802376a:	f7ed fa0d 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 802376e:	2e00      	cmp	r6, #0
 8023770:	dcca      	bgt.n	8023708 <mg_dtoa+0x258>
 8023772:	2800      	cmp	r0, #0
 8023774:	dcc8      	bgt.n	8023708 <mg_dtoa+0x258>
 8023776:	e7d0      	b.n	802371a <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8023778:	b9ce      	cbnz	r6, 80237ae <mg_dtoa+0x2fe>
 802377a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802377e:	446b      	add	r3, sp
 8023780:	2230      	movs	r2, #48	@ 0x30
 8023782:	f803 2c28 	strb.w	r2, [r3, #-40]
 8023786:	3701      	adds	r7, #1
 8023788:	e011      	b.n	80237ae <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 802378a:	f106 0901 	add.w	r9, r6, #1
 802378e:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8023792:	eb0d 0603 	add.w	r6, sp, r3
 8023796:	2330      	movs	r3, #48	@ 0x30
 8023798:	f806 3c28 	strb.w	r3, [r6, #-40]
 802379c:	2200      	movs	r2, #0
 802379e:	4b18      	ldr	r3, [pc, #96]	@ (8023800 <mg_dtoa+0x350>)
 80237a0:	4620      	mov	r0, r4
 80237a2:	4629      	mov	r1, r5
 80237a4:	f7ed f86a 	bl	801087c <__aeabi_ddiv>
 80237a8:	4604      	mov	r4, r0
 80237aa:	460d      	mov	r5, r1
 80237ac:	464e      	mov	r6, r9
 80237ae:	2200      	movs	r2, #0
 80237b0:	4b0d      	ldr	r3, [pc, #52]	@ (80237e8 <mg_dtoa+0x338>)
 80237b2:	4620      	mov	r0, r4
 80237b4:	4629      	mov	r1, r5
 80237b6:	f7ed f9bd 	bl	8010b34 <__aeabi_dcmpge>
 80237ba:	b110      	cbz	r0, 80237c2 <mg_dtoa+0x312>
 80237bc:	19f3      	adds	r3, r6, r7
 80237be:	2b27      	cmp	r3, #39	@ 0x27
 80237c0:	dde3      	ble.n	802378a <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80237c2:	19f3      	adds	r3, r6, r7
 80237c4:	2b27      	cmp	r3, #39	@ 0x27
 80237c6:	dc05      	bgt.n	80237d4 <mg_dtoa+0x324>
 80237c8:	3701      	adds	r7, #1
 80237ca:	3348      	adds	r3, #72	@ 0x48
 80237cc:	446b      	add	r3, sp
 80237ce:	222e      	movs	r2, #46	@ 0x2e
 80237d0:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80237d4:	a502      	add	r5, pc, #8	@ (adr r5, 80237e0 <mg_dtoa+0x330>)
 80237d6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80237da:	e03e      	b.n	802385a <mg_dtoa+0x3aa>
 80237dc:	f3af 8000 	nop.w
 80237e0:	9999999a 	.word	0x9999999a
 80237e4:	3fb99999 	.word	0x3fb99999
 80237e8:	3ff00000 	.word	0x3ff00000
 80237ec:	0803945c 	.word	0x0803945c
 80237f0:	0803ad40 	.word	0x0803ad40
 80237f4:	0803a168 	.word	0x0803a168
 80237f8:	0803a16c 	.word	0x0803a16c
 80237fc:	0803a174 	.word	0x0803a174
 8023800:	40240000 	.word	0x40240000
 8023804:	40140000 	.word	0x40140000
 8023808:	0803a178 	.word	0x0803a178
      int ch = (int) (d / t);
 802380c:	4622      	mov	r2, r4
 802380e:	462b      	mov	r3, r5
 8023810:	4650      	mov	r0, sl
 8023812:	4659      	mov	r1, fp
 8023814:	f7ed f832 	bl	801087c <__aeabi_ddiv>
 8023818:	f7ed f9b6 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 802381c:	3601      	adds	r6, #1
 802381e:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8023822:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8023826:	eb0d 0902 	add.w	r9, sp, r2
 802382a:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 802382e:	f7ec fe91 	bl	8010554 <__aeabi_i2d>
 8023832:	4622      	mov	r2, r4
 8023834:	462b      	mov	r3, r5
 8023836:	f7ec fef7 	bl	8010628 <__aeabi_dmul>
 802383a:	4602      	mov	r2, r0
 802383c:	460b      	mov	r3, r1
 802383e:	4650      	mov	r0, sl
 8023840:	4659      	mov	r1, fp
 8023842:	f7ec fd39 	bl	80102b8 <__aeabi_dsub>
 8023846:	4682      	mov	sl, r0
 8023848:	468b      	mov	fp, r1
      t /= 10.0;
 802384a:	2200      	movs	r2, #0
 802384c:	4b1d      	ldr	r3, [pc, #116]	@ (80238c4 <mg_dtoa+0x414>)
 802384e:	4620      	mov	r0, r4
 8023850:	4629      	mov	r1, r5
 8023852:	f7ed f813 	bl	801087c <__aeabi_ddiv>
 8023856:	4604      	mov	r4, r0
 8023858:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 802385a:	eb07 0906 	add.w	r9, r7, r6
 802385e:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8023862:	dc03      	bgt.n	802386c <mg_dtoa+0x3bc>
 8023864:	4546      	cmp	r6, r8
 8023866:	dbd1      	blt.n	802380c <mg_dtoa+0x35c>
 8023868:	9a07      	ldr	r2, [sp, #28]
 802386a:	e000      	b.n	802386e <mg_dtoa+0x3be>
 802386c:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 802386e:	b152      	cbz	r2, 8023886 <mg_dtoa+0x3d6>
 8023870:	2e00      	cmp	r6, #0
 8023872:	dd08      	ble.n	8023886 <mg_dtoa+0x3d6>
 8023874:	19bb      	adds	r3, r7, r6
 8023876:	3347      	adds	r3, #71	@ 0x47
 8023878:	446b      	add	r3, sp
 802387a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 802387e:	2b30      	cmp	r3, #48	@ 0x30
 8023880:	d101      	bne.n	8023886 <mg_dtoa+0x3d6>
 8023882:	3e01      	subs	r6, #1
 8023884:	e7f3      	b.n	802386e <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8023886:	2e00      	cmp	r6, #0
 8023888:	dd06      	ble.n	8023898 <mg_dtoa+0x3e8>
 802388a:	19bb      	adds	r3, r7, r6
 802388c:	3347      	adds	r3, #71	@ 0x47
 802388e:	446b      	add	r3, sp
 8023890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8023894:	2b2e      	cmp	r3, #46	@ 0x2e
 8023896:	d013      	beq.n	80238c0 <mg_dtoa+0x410>
  n += s;
 8023898:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 802389a:	2f27      	cmp	r7, #39	@ 0x27
 802389c:	dd00      	ble.n	80238a0 <mg_dtoa+0x3f0>
 802389e:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 80238a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80238a4:	eb0d 0703 	add.w	r7, sp, r3
 80238a8:	2300      	movs	r3, #0
 80238aa:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80238ae:	ab08      	add	r3, sp, #32
 80238b0:	4a05      	ldr	r2, [pc, #20]	@ (80238c8 <mg_dtoa+0x418>)
 80238b2:	9906      	ldr	r1, [sp, #24]
 80238b4:	9805      	ldr	r0, [sp, #20]
 80238b6:	f7ff fdeb 	bl	8023490 <mg_snprintf>
}
 80238ba:	b013      	add	sp, #76	@ 0x4c
 80238bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80238c0:	3e01      	subs	r6, #1
 80238c2:	e7e9      	b.n	8023898 <mg_dtoa+0x3e8>
 80238c4:	40240000 	.word	0x40240000
 80238c8:	0803ad40 	.word	0x0803ad40

080238cc <mg_vxprintf>:
                   va_list *ap) {
 80238cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238d0:	b093      	sub	sp, #76	@ 0x4c
 80238d2:	4681      	mov	r9, r0
 80238d4:	468a      	mov	sl, r1
 80238d6:	4693      	mov	fp, r2
 80238d8:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 80238da:	2700      	movs	r7, #0
 80238dc:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 80238de:	e1bc      	b.n	8023c5a <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 80238e0:	2320      	movs	r3, #32
 80238e2:	f88d 301f 	strb.w	r3, [sp, #31]
 80238e6:	1c66      	adds	r6, r4, #1
 80238e8:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 80238ec:	2d23      	cmp	r5, #35	@ 0x23
 80238ee:	d00c      	beq.n	802390a <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80238f0:	2300      	movs	r3, #0
 80238f2:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 80238f4:	2d2d      	cmp	r5, #45	@ 0x2d
 80238f6:	d10e      	bne.n	8023916 <mg_vxprintf+0x4a>
 80238f8:	3601      	adds	r6, #1
 80238fa:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80238fe:	2301      	movs	r3, #1
 8023900:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 8023902:	2d30      	cmp	r5, #48	@ 0x30
 8023904:	d00a      	beq.n	802391c <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 8023906:	2400      	movs	r4, #0
 8023908:	e017      	b.n	802393a <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 802390a:	1ca6      	adds	r6, r4, #2
 802390c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023910:	2301      	movs	r3, #1
 8023912:	9302      	str	r3, [sp, #8]
 8023914:	e7ee      	b.n	80238f4 <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 8023916:	2300      	movs	r3, #0
 8023918:	9304      	str	r3, [sp, #16]
 802391a:	e7f2      	b.n	8023902 <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 802391c:	2330      	movs	r3, #48	@ 0x30
 802391e:	f88d 301f 	strb.w	r3, [sp, #31]
 8023922:	3601      	adds	r6, #1
 8023924:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023928:	e7ed      	b.n	8023906 <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 802392a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802392e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8023932:	3c30      	subs	r4, #48	@ 0x30
 8023934:	3601      	adds	r6, #1
 8023936:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802393a:	4628      	mov	r0, r5
 802393c:	f7fc f83b 	bl	801f9b6 <is_digit>
 8023940:	4601      	mov	r1, r0
 8023942:	2800      	cmp	r0, #0
 8023944:	d1f1      	bne.n	802392a <mg_vxprintf+0x5e>
      if (c == '.') {
 8023946:	2d2e      	cmp	r5, #46	@ 0x2e
 8023948:	d002      	beq.n	8023950 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 802394a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802394e:	e026      	b.n	802399e <mg_vxprintf+0xd2>
        c = fmt[++i];
 8023950:	1c73      	adds	r3, r6, #1
 8023952:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 8023956:	2d2a      	cmp	r5, #42	@ 0x2a
 8023958:	d119      	bne.n	802398e <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 802395a:	9803      	ldr	r0, [sp, #12]
 802395c:	6803      	ldr	r3, [r0, #0]
 802395e:	1d1a      	adds	r2, r3, #4
 8023960:	6002      	str	r2, [r0, #0]
 8023962:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 8023966:	3602      	adds	r6, #2
 8023968:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802396c:	e017      	b.n	802399e <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 802396e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8023972:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 8023976:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 802397a:	3601      	adds	r6, #1
 802397c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023980:	4628      	mov	r0, r5
 8023982:	f7fc f818 	bl	801f9b6 <is_digit>
 8023986:	2800      	cmp	r0, #0
 8023988:	d1f1      	bne.n	802396e <mg_vxprintf+0xa2>
 802398a:	9905      	ldr	r1, [sp, #20]
 802398c:	e007      	b.n	802399e <mg_vxprintf+0xd2>
          pr = 0;
 802398e:	f04f 0800 	mov.w	r8, #0
 8023992:	461e      	mov	r6, r3
 8023994:	9005      	str	r0, [sp, #20]
 8023996:	e7f3      	b.n	8023980 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8023998:	3601      	adds	r6, #1
 802399a:	f81b 5006 	ldrb.w	r5, [fp, r6]
 802399e:	2d68      	cmp	r5, #104	@ 0x68
 80239a0:	d0fa      	beq.n	8023998 <mg_vxprintf+0xcc>
      if (c == 'l') {
 80239a2:	2d6c      	cmp	r5, #108	@ 0x6c
 80239a4:	d05f      	beq.n	8023a66 <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80239a6:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 80239a8:	2d70      	cmp	r5, #112	@ 0x70
 80239aa:	d069      	beq.n	8023a80 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80239ac:	2d64      	cmp	r5, #100	@ 0x64
 80239ae:	d06a      	beq.n	8023a86 <mg_vxprintf+0x1ba>
 80239b0:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 80239b4:	2b53      	cmp	r3, #83	@ 0x53
 80239b6:	f200 81bc 	bhi.w	8023d32 <mg_vxprintf+0x466>
 80239ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80239be:	01b5      	.short	0x01b5
 80239c0:	01ba01ba 	.word	0x01ba01ba
 80239c4:	01ba01ba 	.word	0x01ba01ba
 80239c8:	01ba01ba 	.word	0x01ba01ba
 80239cc:	01ba01ba 	.word	0x01ba01ba
 80239d0:	01ba01ba 	.word	0x01ba01ba
 80239d4:	01ba01ba 	.word	0x01ba01ba
 80239d8:	01ba01ba 	.word	0x01ba01ba
 80239dc:	01ba01ba 	.word	0x01ba01ba
 80239e0:	01ba01ba 	.word	0x01ba01ba
 80239e4:	01ba01ba 	.word	0x01ba01ba
 80239e8:	01ba01ba 	.word	0x01ba01ba
 80239ec:	01ba01ba 	.word	0x01ba01ba
 80239f0:	01ba01ba 	.word	0x01ba01ba
 80239f4:	01ba01ba 	.word	0x01ba01ba
 80239f8:	01ba01ba 	.word	0x01ba01ba
 80239fc:	01ba01ba 	.word	0x01ba01ba
 8023a00:	01ba01ba 	.word	0x01ba01ba
 8023a04:	01ba01ba 	.word	0x01ba01ba
 8023a08:	01ba01ba 	.word	0x01ba01ba
 8023a0c:	014101ba 	.word	0x014101ba
 8023a10:	01ba01ba 	.word	0x01ba01ba
 8023a14:	01ba01ba 	.word	0x01ba01ba
 8023a18:	01ba01ba 	.word	0x01ba01ba
 8023a1c:	01ba01ba 	.word	0x01ba01ba
 8023a20:	01ba01ba 	.word	0x01ba01ba
 8023a24:	01ba0065 	.word	0x01ba0065
 8023a28:	01ba01ba 	.word	0x01ba01ba
 8023a2c:	01ba01ba 	.word	0x01ba01ba
 8023a30:	01ba01ba 	.word	0x01ba01ba
 8023a34:	01ba01ba 	.word	0x01ba01ba
 8023a38:	016801ba 	.word	0x016801ba
 8023a3c:	01ba01ba 	.word	0x01ba01ba
 8023a40:	00650065 	.word	0x00650065
 8023a44:	01ba01ba 	.word	0x01ba01ba
 8023a48:	01ba01ba 	.word	0x01ba01ba
 8023a4c:	015a01ba 	.word	0x015a01ba
 8023a50:	01ba01ba 	.word	0x01ba01ba
 8023a54:	01ba0065 	.word	0x01ba0065
 8023a58:	017101ba 	.word	0x017101ba
 8023a5c:	006501ba 	.word	0x006501ba
 8023a60:	01ba01ba 	.word	0x01ba01ba
 8023a64:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 8023a66:	1c73      	adds	r3, r6, #1
 8023a68:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8023a6c:	2d6c      	cmp	r5, #108	@ 0x6c
 8023a6e:	d002      	beq.n	8023a76 <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8023a70:	461e      	mov	r6, r3
 8023a72:	2201      	movs	r2, #1
 8023a74:	e798      	b.n	80239a8 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 8023a76:	3602      	adds	r6, #2
 8023a78:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023a7c:	2202      	movs	r2, #2
 8023a7e:	e793      	b.n	80239a8 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8023a80:	2201      	movs	r2, #1
 8023a82:	9202      	str	r2, [sp, #8]
 8023a84:	e792      	b.n	80239ac <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023a86:	2101      	movs	r1, #1
 8023a88:	2d58      	cmp	r5, #88	@ 0x58
 8023a8a:	d027      	beq.n	8023adc <mg_vxprintf+0x210>
 8023a8c:	2d70      	cmp	r5, #112	@ 0x70
 8023a8e:	d021      	beq.n	8023ad4 <mg_vxprintf+0x208>
 8023a90:	2300      	movs	r3, #0
 8023a92:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 8023a94:	9b02      	ldr	r3, [sp, #8]
 8023a96:	b10b      	cbz	r3, 8023a9c <mg_vxprintf+0x1d0>
 8023a98:	2302      	movs	r3, #2
 8023a9a:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8023a9c:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8023aa0:	b2db      	uxtb	r3, r3
 8023aa2:	2b01      	cmp	r3, #1
 8023aa4:	d91c      	bls.n	8023ae0 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 8023aa6:	2a02      	cmp	r2, #2
 8023aa8:	d037      	beq.n	8023b1a <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8023aaa:	2a01      	cmp	r2, #1
 8023aac:	d046      	beq.n	8023b3c <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8023aae:	9b03      	ldr	r3, [sp, #12]
 8023ab0:	f8d3 c000 	ldr.w	ip, [r3]
 8023ab4:	f10c 0204 	add.w	r2, ip, #4
 8023ab8:	601a      	str	r2, [r3, #0]
 8023aba:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023abe:	2d64      	cmp	r5, #100	@ 0x64
 8023ac0:	d052      	beq.n	8023b68 <mg_vxprintf+0x29c>
 8023ac2:	461a      	mov	r2, r3
 8023ac4:	2300      	movs	r3, #0
 8023ac6:	9001      	str	r0, [sp, #4]
 8023ac8:	9100      	str	r1, [sp, #0]
 8023aca:	a808      	add	r0, sp, #32
 8023acc:	f7fb ffd6 	bl	801fa7c <mg_lld>
 8023ad0:	4605      	mov	r5, r0
 8023ad2:	e01c      	b.n	8023b0e <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023ad4:	2301      	movs	r3, #1
 8023ad6:	e7dc      	b.n	8023a92 <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023ad8:	2301      	movs	r3, #1
 8023ada:	e7da      	b.n	8023a92 <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8023adc:	2301      	movs	r3, #1
 8023ade:	e7d8      	b.n	8023a92 <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 8023ae0:	9903      	ldr	r1, [sp, #12]
 8023ae2:	680b      	ldr	r3, [r1, #0]
 8023ae4:	3307      	adds	r3, #7
 8023ae6:	f023 0307 	bic.w	r3, r3, #7
 8023aea:	f103 0208 	add.w	r2, r3, #8
 8023aee:	600a      	str	r2, [r1, #0]
 8023af0:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 8023af4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023af8:	d00c      	beq.n	8023b14 <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8023afa:	2d67      	cmp	r5, #103	@ 0x67
 8023afc:	bf14      	ite	ne
 8023afe:	2300      	movne	r3, #0
 8023b00:	2301      	moveq	r3, #1
 8023b02:	4642      	mov	r2, r8
 8023b04:	2128      	movs	r1, #40	@ 0x28
 8023b06:	a808      	add	r0, sp, #32
 8023b08:	f7ff fcd2 	bl	80234b0 <mg_dtoa>
 8023b0c:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 8023b0e:	2300      	movs	r3, #0
 8023b10:	9a02      	ldr	r2, [sp, #8]
 8023b12:	e02e      	b.n	8023b72 <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 8023b14:	f04f 0806 	mov.w	r8, #6
 8023b18:	e7ef      	b.n	8023afa <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8023b1a:	9d03      	ldr	r5, [sp, #12]
 8023b1c:	682b      	ldr	r3, [r5, #0]
 8023b1e:	3307      	adds	r3, #7
 8023b20:	f023 0307 	bic.w	r3, r3, #7
 8023b24:	f103 0208 	add.w	r2, r3, #8
 8023b28:	602a      	str	r2, [r5, #0]
 8023b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8023b2e:	9001      	str	r0, [sp, #4]
 8023b30:	9100      	str	r1, [sp, #0]
 8023b32:	a808      	add	r0, sp, #32
 8023b34:	f7fb ffa2 	bl	801fa7c <mg_lld>
 8023b38:	4605      	mov	r5, r0
 8023b3a:	e7e8      	b.n	8023b0e <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8023b3c:	9b03      	ldr	r3, [sp, #12]
 8023b3e:	f8d3 c000 	ldr.w	ip, [r3]
 8023b42:	f10c 0204 	add.w	r2, ip, #4
 8023b46:	601a      	str	r2, [r3, #0]
 8023b48:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8023b4c:	2d64      	cmp	r5, #100	@ 0x64
 8023b4e:	d008      	beq.n	8023b62 <mg_vxprintf+0x296>
 8023b50:	461a      	mov	r2, r3
 8023b52:	2300      	movs	r3, #0
 8023b54:	9001      	str	r0, [sp, #4]
 8023b56:	9100      	str	r1, [sp, #0]
 8023b58:	a808      	add	r0, sp, #32
 8023b5a:	f7fb ff8f 	bl	801fa7c <mg_lld>
 8023b5e:	4605      	mov	r5, r0
 8023b60:	e7d5      	b.n	8023b0e <mg_vxprintf+0x242>
 8023b62:	461a      	mov	r2, r3
 8023b64:	17db      	asrs	r3, r3, #31
 8023b66:	e7f5      	b.n	8023b54 <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023b68:	461a      	mov	r2, r3
 8023b6a:	17db      	asrs	r3, r3, #31
 8023b6c:	e7ab      	b.n	8023ac6 <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8023b6e:	3c01      	subs	r4, #1
 8023b70:	3301      	adds	r3, #1
 8023b72:	4293      	cmp	r3, r2
 8023b74:	d225      	bcs.n	8023bc2 <mg_vxprintf+0x2f6>
 8023b76:	2c00      	cmp	r4, #0
 8023b78:	d1f9      	bne.n	8023b6e <mg_vxprintf+0x2a2>
 8023b7a:	46a0      	mov	r8, r4
 8023b7c:	9605      	str	r6, [sp, #20]
 8023b7e:	9e04      	ldr	r6, [sp, #16]
 8023b80:	e009      	b.n	8023b96 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023b82:	2301      	movs	r3, #1
 8023b84:	f10d 021f 	add.w	r2, sp, #31
 8023b88:	4651      	mov	r1, sl
 8023b8a:	4648      	mov	r0, r9
 8023b8c:	f7fc f80c 	bl	801fba8 <scpy>
 8023b90:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8023b92:	f108 0801 	add.w	r8, r8, #1
 8023b96:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023b9a:	2b20      	cmp	r3, #32
 8023b9c:	d106      	bne.n	8023bac <mg_vxprintf+0x2e0>
 8023b9e:	b92e      	cbnz	r6, 8023bac <mg_vxprintf+0x2e0>
 8023ba0:	42a5      	cmp	r5, r4
 8023ba2:	d203      	bcs.n	8023bac <mg_vxprintf+0x2e0>
 8023ba4:	eb08 0305 	add.w	r3, r8, r5
 8023ba8:	42a3      	cmp	r3, r4
 8023baa:	d3ea      	bcc.n	8023b82 <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8023bac:	9e05      	ldr	r6, [sp, #20]
 8023bae:	9b02      	ldr	r3, [sp, #8]
 8023bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8023d60 <mg_vxprintf+0x494>)
 8023bb2:	4651      	mov	r1, sl
 8023bb4:	4648      	mov	r0, r9
 8023bb6:	f7fb fff7 	bl	801fba8 <scpy>
 8023bba:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023bbe:	2700      	movs	r7, #0
 8023bc0:	e00d      	b.n	8023bde <mg_vxprintf+0x312>
 8023bc2:	f04f 0800 	mov.w	r8, #0
 8023bc6:	9605      	str	r6, [sp, #20]
 8023bc8:	9e04      	ldr	r6, [sp, #16]
 8023bca:	e7e4      	b.n	8023b96 <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 8023bcc:	2301      	movs	r3, #1
 8023bce:	f10d 021f 	add.w	r2, sp, #31
 8023bd2:	4651      	mov	r1, sl
 8023bd4:	4648      	mov	r0, r9
 8023bd6:	f7fb ffe7 	bl	801fba8 <scpy>
 8023bda:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8023bdc:	3701      	adds	r7, #1
 8023bde:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023be2:	2b30      	cmp	r3, #48	@ 0x30
 8023be4:	d104      	bne.n	8023bf0 <mg_vxprintf+0x324>
 8023be6:	42a5      	cmp	r5, r4
 8023be8:	d202      	bcs.n	8023bf0 <mg_vxprintf+0x324>
 8023bea:	197b      	adds	r3, r7, r5
 8023bec:	42a3      	cmp	r3, r4
 8023bee:	d3ed      	bcc.n	8023bcc <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 8023bf0:	462b      	mov	r3, r5
 8023bf2:	aa08      	add	r2, sp, #32
 8023bf4:	4651      	mov	r1, sl
 8023bf6:	4648      	mov	r0, r9
 8023bf8:	f7fb ffd6 	bl	801fba8 <scpy>
 8023bfc:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023c00:	f04f 0800 	mov.w	r8, #0
 8023c04:	9602      	str	r6, [sp, #8]
 8023c06:	9e04      	ldr	r6, [sp, #16]
 8023c08:	e009      	b.n	8023c1e <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 8023c0a:	2301      	movs	r3, #1
 8023c0c:	f10d 021f 	add.w	r2, sp, #31
 8023c10:	4651      	mov	r1, sl
 8023c12:	4648      	mov	r0, r9
 8023c14:	f7fb ffc8 	bl	801fba8 <scpy>
 8023c18:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023c1a:	f108 0801 	add.w	r8, r8, #1
 8023c1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023c22:	2b20      	cmp	r3, #32
 8023c24:	f040 808d 	bne.w	8023d42 <mg_vxprintf+0x476>
 8023c28:	2e00      	cmp	r6, #0
 8023c2a:	f000 808c 	beq.w	8023d46 <mg_vxprintf+0x47a>
 8023c2e:	42a5      	cmp	r5, r4
 8023c30:	f080 808b 	bcs.w	8023d4a <mg_vxprintf+0x47e>
 8023c34:	eb08 0305 	add.w	r3, r8, r5
 8023c38:	42a3      	cmp	r3, r4
 8023c3a:	d3e6      	bcc.n	8023c0a <mg_vxprintf+0x33e>
 8023c3c:	9e02      	ldr	r6, [sp, #8]
 8023c3e:	e00b      	b.n	8023c58 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023c40:	9903      	ldr	r1, [sp, #12]
 8023c42:	680b      	ldr	r3, [r1, #0]
 8023c44:	1d1a      	adds	r2, r3, #4
 8023c46:	600a      	str	r2, [r1, #0]
 8023c48:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8023c4a:	9a03      	ldr	r2, [sp, #12]
 8023c4c:	4651      	mov	r1, sl
 8023c4e:	4648      	mov	r0, r9
 8023c50:	47a0      	blx	r4
 8023c52:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 8023c54:	2d6d      	cmp	r5, #109	@ 0x6d
 8023c56:	d015      	beq.n	8023c84 <mg_vxprintf+0x3b8>
      i++;
 8023c58:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8023c5a:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	d079      	beq.n	8023d56 <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 8023c62:	2825      	cmp	r0, #37	@ 0x25
 8023c64:	f43f ae3c 	beq.w	80238e0 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8023c68:	4651      	mov	r1, sl
 8023c6a:	47c8      	blx	r9
 8023c6c:	3701      	adds	r7, #1
 8023c6e:	3401      	adds	r4, #1
 8023c70:	e7f3      	b.n	8023c5a <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023c72:	9903      	ldr	r1, [sp, #12]
 8023c74:	680b      	ldr	r3, [r1, #0]
 8023c76:	1d1a      	adds	r2, r3, #4
 8023c78:	600a      	str	r2, [r1, #0]
 8023c7a:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8023c7c:	4651      	mov	r1, sl
 8023c7e:	2022      	movs	r0, #34	@ 0x22
 8023c80:	47c8      	blx	r9
 8023c82:	e7e2      	b.n	8023c4a <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 8023c84:	3702      	adds	r7, #2
 8023c86:	4651      	mov	r1, sl
 8023c88:	2022      	movs	r0, #34	@ 0x22
 8023c8a:	47c8      	blx	r9
 8023c8c:	e7e4      	b.n	8023c58 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8023c8e:	9903      	ldr	r1, [sp, #12]
 8023c90:	680b      	ldr	r3, [r1, #0]
 8023c92:	1d1a      	adds	r2, r3, #4
 8023c94:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 8023c96:	4651      	mov	r1, sl
 8023c98:	7818      	ldrb	r0, [r3, #0]
 8023c9a:	47c8      	blx	r9
        n++;
 8023c9c:	3701      	adds	r7, #1
 8023c9e:	e7db      	b.n	8023c58 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8023ca0:	9903      	ldr	r1, [sp, #12]
 8023ca2:	680b      	ldr	r3, [r1, #0]
 8023ca4:	1d1a      	adds	r2, r3, #4
 8023ca6:	600a      	str	r2, [r1, #0]
 8023ca8:	681b      	ldr	r3, [r3, #0]
 8023caa:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023cac:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023cb0:	d003      	beq.n	8023cba <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023cb2:	2500      	movs	r5, #0
 8023cb4:	9605      	str	r6, [sp, #20]
 8023cb6:	9e04      	ldr	r6, [sp, #16]
 8023cb8:	e011      	b.n	8023cde <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023cba:	4618      	mov	r0, r3
 8023cbc:	b11b      	cbz	r3, 8023cc6 <mg_vxprintf+0x3fa>
 8023cbe:	f7ec faef 	bl	80102a0 <strlen>
 8023cc2:	4680      	mov	r8, r0
 8023cc4:	e7f5      	b.n	8023cb2 <mg_vxprintf+0x3e6>
 8023cc6:	f04f 0800 	mov.w	r8, #0
 8023cca:	e7f2      	b.n	8023cb2 <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 8023ccc:	2301      	movs	r3, #1
 8023cce:	f10d 021f 	add.w	r2, sp, #31
 8023cd2:	4651      	mov	r1, sl
 8023cd4:	4648      	mov	r0, r9
 8023cd6:	f7fb ff67 	bl	801fba8 <scpy>
 8023cda:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8023cdc:	3501      	adds	r5, #1
 8023cde:	b92e      	cbnz	r6, 8023cec <mg_vxprintf+0x420>
 8023ce0:	4544      	cmp	r4, r8
 8023ce2:	d903      	bls.n	8023cec <mg_vxprintf+0x420>
 8023ce4:	eb05 0308 	add.w	r3, r5, r8
 8023ce8:	42a3      	cmp	r3, r4
 8023cea:	d3ef      	bcc.n	8023ccc <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 8023cec:	9e05      	ldr	r6, [sp, #20]
 8023cee:	4643      	mov	r3, r8
 8023cf0:	9a02      	ldr	r2, [sp, #8]
 8023cf2:	4651      	mov	r1, sl
 8023cf4:	4648      	mov	r0, r9
 8023cf6:	f7fb ff57 	bl	801fba8 <scpy>
 8023cfa:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023cfc:	2500      	movs	r5, #0
 8023cfe:	9602      	str	r6, [sp, #8]
 8023d00:	9e04      	ldr	r6, [sp, #16]
 8023d02:	e008      	b.n	8023d16 <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 8023d04:	2301      	movs	r3, #1
 8023d06:	f10d 021f 	add.w	r2, sp, #31
 8023d0a:	4651      	mov	r1, sl
 8023d0c:	4648      	mov	r0, r9
 8023d0e:	f7fb ff4b 	bl	801fba8 <scpy>
 8023d12:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8023d14:	3501      	adds	r5, #1
 8023d16:	b1d6      	cbz	r6, 8023d4e <mg_vxprintf+0x482>
 8023d18:	4544      	cmp	r4, r8
 8023d1a:	d91a      	bls.n	8023d52 <mg_vxprintf+0x486>
 8023d1c:	eb05 0308 	add.w	r3, r5, r8
 8023d20:	42a3      	cmp	r3, r4
 8023d22:	d3ef      	bcc.n	8023d04 <mg_vxprintf+0x438>
 8023d24:	9e02      	ldr	r6, [sp, #8]
 8023d26:	e797      	b.n	8023c58 <mg_vxprintf+0x38c>
        out('%', param);
 8023d28:	4651      	mov	r1, sl
 8023d2a:	2025      	movs	r0, #37	@ 0x25
 8023d2c:	47c8      	blx	r9
        n++;
 8023d2e:	3701      	adds	r7, #1
 8023d30:	e792      	b.n	8023c58 <mg_vxprintf+0x38c>
        out('%', param);
 8023d32:	4651      	mov	r1, sl
 8023d34:	2025      	movs	r0, #37	@ 0x25
 8023d36:	47c8      	blx	r9
        out(c, param);
 8023d38:	4651      	mov	r1, sl
 8023d3a:	4628      	mov	r0, r5
 8023d3c:	47c8      	blx	r9
        n += 2;
 8023d3e:	3702      	adds	r7, #2
 8023d40:	e78a      	b.n	8023c58 <mg_vxprintf+0x38c>
 8023d42:	9e02      	ldr	r6, [sp, #8]
 8023d44:	e788      	b.n	8023c58 <mg_vxprintf+0x38c>
 8023d46:	9e02      	ldr	r6, [sp, #8]
 8023d48:	e786      	b.n	8023c58 <mg_vxprintf+0x38c>
 8023d4a:	9e02      	ldr	r6, [sp, #8]
 8023d4c:	e784      	b.n	8023c58 <mg_vxprintf+0x38c>
 8023d4e:	9e02      	ldr	r6, [sp, #8]
 8023d50:	e782      	b.n	8023c58 <mg_vxprintf+0x38c>
 8023d52:	9e02      	ldr	r6, [sp, #8]
 8023d54:	e780      	b.n	8023c58 <mg_vxprintf+0x38c>
}
 8023d56:	4638      	mov	r0, r7
 8023d58:	b013      	add	sp, #76	@ 0x4c
 8023d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d5e:	bf00      	nop
 8023d60:	0803a180 	.word	0x0803a180

08023d64 <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8023d64:	b40c      	push	{r2, r3}
 8023d66:	b500      	push	{lr}
 8023d68:	b083      	sub	sp, #12
 8023d6a:	ab04      	add	r3, sp, #16
 8023d6c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023d70:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8023d72:	ab01      	add	r3, sp, #4
 8023d74:	f7ff fdaa 	bl	80238cc <mg_vxprintf>
}
 8023d78:	b003      	add	sp, #12
 8023d7a:	f85d eb04 	ldr.w	lr, [sp], #4
 8023d7e:	b002      	add	sp, #8
 8023d80:	4770      	bx	lr
	...

08023d84 <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8023d84:	b530      	push	{r4, r5, lr}
 8023d86:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8023d88:	7853      	ldrb	r3, [r2, #1]
 8023d8a:	7894      	ldrb	r4, [r2, #2]
 8023d8c:	78d5      	ldrb	r5, [r2, #3]
 8023d8e:	9502      	str	r5, [sp, #8]
 8023d90:	9401      	str	r4, [sp, #4]
 8023d92:	9300      	str	r3, [sp, #0]
 8023d94:	7813      	ldrb	r3, [r2, #0]
 8023d96:	4a02      	ldr	r2, [pc, #8]	@ (8023da0 <print_ip4+0x1c>)
 8023d98:	f7ff ffe4 	bl	8023d64 <mg_xprintf>
}
 8023d9c:	b005      	add	sp, #20
 8023d9e:	bd30      	pop	{r4, r5, pc}
 8023da0:	0803a184 	.word	0x0803a184

08023da4 <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8023da4:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023da6:	6813      	ldr	r3, [r2, #0]
 8023da8:	1d1c      	adds	r4, r3, #4
 8023daa:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8023dac:	681a      	ldr	r2, [r3, #0]
 8023dae:	f7ff ffe9 	bl	8023d84 <print_ip4>
}
 8023db2:	bd10      	pop	{r4, pc}

08023db4 <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8023db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023db6:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 8023db8:	6813      	ldr	r3, [r2, #0]
 8023dba:	1d1c      	adds	r4, r3, #4
 8023dbc:	6014      	str	r4, [r2, #0]
 8023dbe:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023dc0:	7813      	ldrb	r3, [r2, #0]
 8023dc2:	7854      	ldrb	r4, [r2, #1]
 8023dc4:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 8023dc6:	78d6      	ldrb	r6, [r2, #3]
 8023dc8:	7917      	ldrb	r7, [r2, #4]
 8023dca:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8023dcc:	9204      	str	r2, [sp, #16]
 8023dce:	9703      	str	r7, [sp, #12]
 8023dd0:	9602      	str	r6, [sp, #8]
 8023dd2:	9501      	str	r5, [sp, #4]
 8023dd4:	9400      	str	r4, [sp, #0]
 8023dd6:	4a02      	ldr	r2, [pc, #8]	@ (8023de0 <mg_print_mac+0x2c>)
 8023dd8:	f7ff ffc4 	bl	8023d64 <mg_xprintf>
}
 8023ddc:	b007      	add	sp, #28
 8023dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023de0:	0803a190 	.word	0x0803a190

08023de4 <mg_log>:
void mg_log(const char *fmt, ...) {
 8023de4:	b40f      	push	{r0, r1, r2, r3}
 8023de6:	b500      	push	{lr}
 8023de8:	b083      	sub	sp, #12
 8023dea:	ab04      	add	r3, sp, #16
 8023dec:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023df0:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8023df2:	ab01      	add	r3, sp, #4
 8023df4:	4907      	ldr	r1, [pc, #28]	@ (8023e14 <mg_log+0x30>)
 8023df6:	6809      	ldr	r1, [r1, #0]
 8023df8:	4807      	ldr	r0, [pc, #28]	@ (8023e18 <mg_log+0x34>)
 8023dfa:	6800      	ldr	r0, [r0, #0]
 8023dfc:	f7ff fd66 	bl	80238cc <mg_vxprintf>
  logs("\r\n", 2);
 8023e00:	2102      	movs	r1, #2
 8023e02:	4806      	ldr	r0, [pc, #24]	@ (8023e1c <mg_log+0x38>)
 8023e04:	f7fc fcaa 	bl	802075c <logs>
}
 8023e08:	b003      	add	sp, #12
 8023e0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8023e0e:	b004      	add	sp, #16
 8023e10:	4770      	bx	lr
 8023e12:	bf00      	nop
 8023e14:	20019ee0 	.word	0x20019ee0
 8023e18:	20000128 	.word	0x20000128
 8023e1c:	0803aba4 	.word	0x0803aba4

08023e20 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8023e20:	b538      	push	{r3, r4, r5, lr}
 8023e22:	4604      	mov	r4, r0
 8023e24:	4613      	mov	r3, r2
  size_t old = c->send.len;
 8023e26:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8023e28:	460a      	mov	r2, r1
 8023e2a:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8023e2e:	4803      	ldr	r0, [pc, #12]	@ (8023e3c <mg_vprintf+0x1c>)
 8023e30:	f7ff fd4c 	bl	80238cc <mg_vxprintf>
  return c->send.len - old;
 8023e34:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 8023e36:	1b40      	subs	r0, r0, r5
 8023e38:	bd38      	pop	{r3, r4, r5, pc}
 8023e3a:	bf00      	nop
 8023e3c:	08026f57 	.word	0x08026f57

08023e40 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8023e40:	b40e      	push	{r1, r2, r3}
 8023e42:	b500      	push	{lr}
 8023e44:	b082      	sub	sp, #8
 8023e46:	ab03      	add	r3, sp, #12
 8023e48:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8023e4c:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8023e4e:	aa01      	add	r2, sp, #4
 8023e50:	f7ff ffe6 	bl	8023e20 <mg_vprintf>
}
 8023e54:	b002      	add	sp, #8
 8023e56:	f85d eb04 	ldr.w	lr, [sp], #4
 8023e5a:	b003      	add	sp, #12
 8023e5c:	4770      	bx	lr
	...

08023e60 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8023e60:	b530      	push	{r4, r5, lr}
 8023e62:	b085      	sub	sp, #20
 8023e64:	4605      	mov	r5, r0
 8023e66:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8023e68:	9000      	str	r0, [sp, #0]
 8023e6a:	9101      	str	r1, [sp, #4]
 8023e6c:	2100      	movs	r1, #0
 8023e6e:	9102      	str	r1, [sp, #8]
 8023e70:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8023e72:	4669      	mov	r1, sp
 8023e74:	4804      	ldr	r0, [pc, #16]	@ (8023e88 <mg_vsnprintf+0x28>)
 8023e76:	f7ff fd29 	bl	80238cc <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8023e7a:	4284      	cmp	r4, r0
 8023e7c:	d901      	bls.n	8023e82 <mg_vsnprintf+0x22>
 8023e7e:	2300      	movs	r3, #0
 8023e80:	542b      	strb	r3, [r5, r0]
}
 8023e82:	b005      	add	sp, #20
 8023e84:	bd30      	pop	{r4, r5, pc}
 8023e86:	bf00      	nop
 8023e88:	08026f61 	.word	0x08026f61

08023e8c <mg_http_reply>:
                   const char *fmt, ...) {
 8023e8c:	b408      	push	{r3}
 8023e8e:	b570      	push	{r4, r5, r6, lr}
 8023e90:	b085      	sub	sp, #20
 8023e92:	4604      	mov	r4, r0
 8023e94:	460e      	mov	r6, r1
 8023e96:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023e98:	4608      	mov	r0, r1
 8023e9a:	f7fb ffd1 	bl	801fe40 <mg_http_status_code_str>
 8023e9e:	4603      	mov	r3, r0
 8023ea0:	b1ed      	cbz	r5, 8023ede <mg_http_reply+0x52>
 8023ea2:	9500      	str	r5, [sp, #0]
 8023ea4:	4632      	mov	r2, r6
 8023ea6:	4916      	ldr	r1, [pc, #88]	@ (8023f00 <mg_http_reply+0x74>)
 8023ea8:	4620      	mov	r0, r4
 8023eaa:	f7ff ffc9 	bl	8023e40 <mg_printf>
  len = c->send.len;
 8023eae:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8023eb0:	ab0a      	add	r3, sp, #40	@ 0x28
 8023eb2:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8023eb4:	ab03      	add	r3, sp, #12
 8023eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023eb8:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8023ebc:	4811      	ldr	r0, [pc, #68]	@ (8023f04 <mg_http_reply+0x78>)
 8023ebe:	f7ff fd05 	bl	80238cc <mg_vxprintf>
  if (c->send.len > 16) {
 8023ec2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8023ec4:	2b10      	cmp	r3, #16
 8023ec6:	d80c      	bhi.n	8023ee2 <mg_http_reply+0x56>
  c->is_resp = 0;
 8023ec8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8023ecc:	f36f 13c7 	bfc	r3, #7, #1
 8023ed0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8023ed4:	b005      	add	sp, #20
 8023ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023eda:	b001      	add	sp, #4
 8023edc:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023ede:	4d0a      	ldr	r5, [pc, #40]	@ (8023f08 <mg_http_reply+0x7c>)
 8023ee0:	e7df      	b.n	8023ea2 <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8023ee2:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 8023ee4:	f1a5 000f 	sub.w	r0, r5, #15
 8023ee8:	1b5b      	subs	r3, r3, r5
 8023eea:	4a08      	ldr	r2, [pc, #32]	@ (8023f0c <mg_http_reply+0x80>)
 8023eec:	210b      	movs	r1, #11
 8023eee:	4430      	add	r0, r6
 8023ef0:	f7ff face 	bl	8023490 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8023ef4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8023ef6:	4405      	add	r5, r0
 8023ef8:	3d0f      	subs	r5, #15
 8023efa:	2220      	movs	r2, #32
 8023efc:	555a      	strb	r2, [r3, r5]
 8023efe:	e7e3      	b.n	8023ec8 <mg_http_reply+0x3c>
 8023f00:	0803a1b0 	.word	0x0803a1b0
 8023f04:	08026f57 	.word	0x08026f57
 8023f08:	08036a40 	.word	0x08036a40
 8023f0c:	0803a1e4 	.word	0x0803a1e4

08023f10 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8023f10:	b510      	push	{r4, lr}
 8023f12:	b084      	sub	sp, #16
 8023f14:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8023f16:	9202      	str	r2, [sp, #8]
 8023f18:	2300      	movs	r3, #0
 8023f1a:	9303      	str	r3, [sp, #12]
 8023f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023f20:	e9cd 2300 	strd	r2, r3, [sp]
 8023f24:	4a02      	ldr	r2, [pc, #8]	@ (8023f30 <mg_http_etag+0x20>)
 8023f26:	f7ff fab3 	bl	8023490 <mg_snprintf>
}
 8023f2a:	4620      	mov	r0, r4
 8023f2c:	b004      	add	sp, #16
 8023f2e:	bd10      	pop	{r4, pc}
 8023f30:	0803a1ec 	.word	0x0803a1ec

08023f34 <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 8023f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f38:	b083      	sub	sp, #12
 8023f3a:	4607      	mov	r7, r0
 8023f3c:	4689      	mov	r9, r1
 8023f3e:	4692      	mov	sl, r2
 8023f40:	4698      	mov	r8, r3
  size_t i, n = 0;
 8023f42:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 8023f44:	462c      	mov	r4, r5
 8023f46:	e00c      	b.n	8023f62 <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8023f48:	f8cd b004 	str.w	fp, [sp, #4]
 8023f4c:	2301      	movs	r3, #1
 8023f4e:	9300      	str	r3, [sp, #0]
 8023f50:	4b16      	ldr	r3, [pc, #88]	@ (8023fac <mg_url_encode+0x78>)
 8023f52:	4a17      	ldr	r2, [pc, #92]	@ (8023fb0 <mg_url_encode+0x7c>)
 8023f54:	2104      	movs	r1, #4
 8023f56:	eb0a 0005 	add.w	r0, sl, r5
 8023f5a:	f7ff fa99 	bl	8023490 <mg_snprintf>
      n += 3;
 8023f5e:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8023f60:	3401      	adds	r4, #1
 8023f62:	454c      	cmp	r4, r9
 8023f64:	d20e      	bcs.n	8023f84 <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 8023f66:	eb07 0b04 	add.w	fp, r7, r4
 8023f6a:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8023f6c:	1d2b      	adds	r3, r5, #4
 8023f6e:	4543      	cmp	r3, r8
 8023f70:	d216      	bcs.n	8023fa0 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 8023f72:	4630      	mov	r0, r6
 8023f74:	f7fc fa60 	bl	8020438 <mg_is_url_safe>
 8023f78:	2800      	cmp	r0, #0
 8023f7a:	d0e5      	beq.n	8023f48 <mg_url_encode+0x14>
      buf[n++] = s[i];
 8023f7c:	f80a 6005 	strb.w	r6, [sl, r5]
 8023f80:	3501      	adds	r5, #1
 8023f82:	e7ed      	b.n	8023f60 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8023f84:	f1b8 0f00 	cmp.w	r8, #0
 8023f88:	d00b      	beq.n	8023fa2 <mg_url_encode+0x6e>
 8023f8a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8023f8e:	45a8      	cmp	r8, r5
 8023f90:	d902      	bls.n	8023f98 <mg_url_encode+0x64>
 8023f92:	2300      	movs	r3, #0
 8023f94:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8023f98:	2300      	movs	r3, #0
 8023f9a:	f80a 3008 	strb.w	r3, [sl, r8]
 8023f9e:	e000      	b.n	8023fa2 <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8023fa0:	2500      	movs	r5, #0
}
 8023fa2:	4628      	mov	r0, r5
 8023fa4:	b003      	add	sp, #12
 8023fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023faa:	bf00      	nop
 8023fac:	08021191 	.word	0x08021191
 8023fb0:	0803a1f8 	.word	0x0803a1f8

08023fb4 <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 8023fb4:	b510      	push	{r4, lr}
 8023fb6:	b084      	sub	sp, #16
 8023fb8:	4602      	mov	r2, r0
 8023fba:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 8023fbc:	2400      	movs	r4, #0
 8023fbe:	9400      	str	r4, [sp, #0]
 8023fc0:	9401      	str	r4, [sp, #4]
 8023fc2:	9402      	str	r4, [sp, #8]
 8023fc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023fc8:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8023fca:	4669      	mov	r1, sp
 8023fcc:	4802      	ldr	r0, [pc, #8]	@ (8023fd8 <mg_vmprintf+0x24>)
 8023fce:	f7ff fc7d 	bl	80238cc <mg_vxprintf>
}
 8023fd2:	9800      	ldr	r0, [sp, #0]
 8023fd4:	b004      	add	sp, #16
 8023fd6:	bd10      	pop	{r4, pc}
 8023fd8:	08026f57 	.word	0x08026f57

08023fdc <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 8023fdc:	b40f      	push	{r0, r1, r2, r3}
 8023fde:	b500      	push	{lr}
 8023fe0:	b083      	sub	sp, #12
 8023fe2:	ab04      	add	r3, sp, #16
 8023fe4:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 8023fe8:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 8023fea:	a901      	add	r1, sp, #4
 8023fec:	f7ff ffe2 	bl	8023fb4 <mg_vmprintf>
}
 8023ff0:	b003      	add	sp, #12
 8023ff2:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ff6:	b004      	add	sp, #16
 8023ff8:	4770      	bx	lr

08023ffa <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8023ffa:	b538      	push	{r3, r4, r5, lr}
 8023ffc:	4604      	mov	r4, r0
 8023ffe:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 8024000:	6882      	ldr	r2, [r0, #8]
 8024002:	68c3      	ldr	r3, [r0, #12]
 8024004:	429a      	cmp	r2, r3
 8024006:	d107      	bne.n	8024018 <mg_queue_next+0x1e>
  size_t len = 0;
 8024008:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 802400a:	b125      	cbz	r5, 8024016 <mg_queue_next+0x1c>
 802400c:	6823      	ldr	r3, [r4, #0]
 802400e:	68a2      	ldr	r2, [r4, #8]
 8024010:	3204      	adds	r2, #4
 8024012:	4413      	add	r3, r2
 8024014:	602b      	str	r3, [r5, #0]
}
 8024016:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8024018:	f7fe fb69 	bl	80226ee <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 802401c:	2800      	cmp	r0, #0
 802401e:	d1f4      	bne.n	802400a <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8024020:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8024022:	68e2      	ldr	r2, [r4, #12]
 8024024:	68a3      	ldr	r3, [r4, #8]
 8024026:	429a      	cmp	r2, r3
 8024028:	d9ef      	bls.n	802400a <mg_queue_next+0x10>
 802402a:	4620      	mov	r0, r4
 802402c:	f7fe fb5f 	bl	80226ee <mg_queue_read_len>
 8024030:	e7eb      	b.n	802400a <mg_queue_next+0x10>

08024032 <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 8024032:	6883      	ldr	r3, [r0, #8]
 8024034:	440b      	add	r3, r1
 8024036:	3304      	adds	r3, #4
 8024038:	6083      	str	r3, [r0, #8]
}
 802403a:	4770      	bx	lr

0802403c <mg_sha1_init>:
  context->state[0] = 0x67452301;
 802403c:	4b0a      	ldr	r3, [pc, #40]	@ (8024068 <mg_sha1_init+0x2c>)
 802403e:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8024040:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 8024044:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 8024046:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 802404a:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 802404e:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 8024052:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 8024054:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8024058:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 802405a:	4b04      	ldr	r3, [pc, #16]	@ (802406c <mg_sha1_init+0x30>)
 802405c:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 802405e:	2300      	movs	r3, #0
 8024060:	6183      	str	r3, [r0, #24]
 8024062:	6143      	str	r3, [r0, #20]
}
 8024064:	4770      	bx	lr
 8024066:	bf00      	nop
 8024068:	67452301 	.word	0x67452301
 802406c:	c3d2e1f0 	.word	0xc3d2e1f0

08024070 <mg_sha1_update>:
                    size_t len) {
 8024070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024072:	4604      	mov	r4, r0
 8024074:	460f      	mov	r7, r1
 8024076:	4616      	mov	r6, r2
  j = context->count[0];
 8024078:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 802407a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802407e:	6142      	str	r2, [r0, #20]
 8024080:	429a      	cmp	r2, r3
 8024082:	d202      	bcs.n	802408a <mg_sha1_update+0x1a>
 8024084:	6982      	ldr	r2, [r0, #24]
 8024086:	3201      	adds	r2, #1
 8024088:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 802408a:	69a2      	ldr	r2, [r4, #24]
 802408c:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8024090:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 8024092:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 8024096:	18f2      	adds	r2, r6, r3
 8024098:	2a3f      	cmp	r2, #63	@ 0x3f
 802409a:	d808      	bhi.n	80240ae <mg_sha1_update+0x3e>
    i = 0;
 802409c:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 802409e:	3318      	adds	r3, #24
 80240a0:	18e0      	adds	r0, r4, r3
 80240a2:	1b72      	subs	r2, r6, r5
 80240a4:	1979      	adds	r1, r7, r5
 80240a6:	3004      	adds	r0, #4
 80240a8:	f009 fe26 	bl	802dcf8 <memcpy>
}
 80240ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80240ae:	f103 0018 	add.w	r0, r3, #24
 80240b2:	4420      	add	r0, r4
 80240b4:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 80240b8:	462a      	mov	r2, r5
 80240ba:	4639      	mov	r1, r7
 80240bc:	3004      	adds	r0, #4
 80240be:	f009 fe1b 	bl	802dcf8 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80240c2:	f104 011c 	add.w	r1, r4, #28
 80240c6:	4620      	mov	r0, r4
 80240c8:	f7fd faee 	bl	80216a8 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80240cc:	e004      	b.n	80240d8 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 80240ce:	1979      	adds	r1, r7, r5
 80240d0:	4620      	mov	r0, r4
 80240d2:	f7fd fae9 	bl	80216a8 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80240d6:	3540      	adds	r5, #64	@ 0x40
 80240d8:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 80240dc:	42b3      	cmp	r3, r6
 80240de:	d3f6      	bcc.n	80240ce <mg_sha1_update+0x5e>
    j = 0;
 80240e0:	2300      	movs	r3, #0
 80240e2:	e7dc      	b.n	802409e <mg_sha1_update+0x2e>

080240e4 <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80240e4:	b570      	push	{r4, r5, r6, lr}
 80240e6:	b084      	sub	sp, #16
 80240e8:	4606      	mov	r6, r0
 80240ea:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 80240ec:	2300      	movs	r3, #0
 80240ee:	e013      	b.n	8024118 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80240f0:	2b03      	cmp	r3, #3
 80240f2:	bf8c      	ite	hi
 80240f4:	2200      	movhi	r2, #0
 80240f6:	2201      	movls	r2, #1
 80240f8:	3204      	adds	r2, #4
 80240fa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80240fe:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 8024100:	43da      	mvns	r2, r3
 8024102:	f002 0203 	and.w	r2, r2, #3
 8024106:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8024108:	fa21 f202 	lsr.w	r2, r1, r2
 802410c:	f103 0110 	add.w	r1, r3, #16
 8024110:	4469      	add	r1, sp
 8024112:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 8024116:	3301      	adds	r3, #1
 8024118:	2b07      	cmp	r3, #7
 802411a:	d9e9      	bls.n	80240f0 <mg_sha1_final+0xc>
  c = 0200;
 802411c:	2380      	movs	r3, #128	@ 0x80
 802411e:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 8024122:	2201      	movs	r2, #1
 8024124:	f10d 0107 	add.w	r1, sp, #7
 8024128:	4628      	mov	r0, r5
 802412a:	f7ff ffa1 	bl	8024070 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802412e:	e008      	b.n	8024142 <mg_sha1_final+0x5e>
    c = 0000;
 8024130:	2300      	movs	r3, #0
 8024132:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 8024136:	2201      	movs	r2, #1
 8024138:	f10d 0107 	add.w	r1, sp, #7
 802413c:	4628      	mov	r0, r5
 802413e:	f7ff ff97 	bl	8024070 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8024142:	696b      	ldr	r3, [r5, #20]
 8024144:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8024148:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 802414c:	d1f0      	bne.n	8024130 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 802414e:	2208      	movs	r2, #8
 8024150:	eb0d 0102 	add.w	r1, sp, r2
 8024154:	4628      	mov	r0, r5
 8024156:	f7ff ff8b 	bl	8024070 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 802415a:	2300      	movs	r3, #0
 802415c:	e00a      	b.n	8024174 <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 802415e:	089a      	lsrs	r2, r3, #2
 8024160:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8024164:	43da      	mvns	r2, r3
 8024166:	f002 0203 	and.w	r2, r2, #3
 802416a:	00d2      	lsls	r2, r2, #3
 802416c:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8024170:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 8024172:	3301      	adds	r3, #1
 8024174:	2b13      	cmp	r3, #19
 8024176:	d9f2      	bls.n	802415e <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8024178:	225c      	movs	r2, #92	@ 0x5c
 802417a:	2100      	movs	r1, #0
 802417c:	4628      	mov	r0, r5
 802417e:	f008 fb7f 	bl	802c880 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8024182:	2300      	movs	r3, #0
 8024184:	9302      	str	r3, [sp, #8]
 8024186:	9303      	str	r3, [sp, #12]
}
 8024188:	b004      	add	sp, #16
 802418a:	bd70      	pop	{r4, r5, r6, pc}

0802418c <mg_http_serve_ssi>:
                       const char *fullpath) {
 802418c:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 802418e:	4b03      	ldr	r3, [pc, #12]	@ (802419c <mg_http_serve_ssi+0x10>)
 8024190:	2200      	movs	r2, #0
 8024192:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8024196:	f7ff fe79 	bl	8023e8c <mg_http_reply>
}
 802419a:	bd08      	pop	{r3, pc}
 802419c:	0803a200 	.word	0x0803a200

080241a0 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 80241a0:	b510      	push	{r4, lr}
 80241a2:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80241a4:	6001      	str	r1, [r0, #0]
 80241a6:	b129      	cbz	r1, 80241b4 <mg_str_s+0x14>
 80241a8:	4608      	mov	r0, r1
 80241aa:	f7ec f879 	bl	80102a0 <strlen>
 80241ae:	6060      	str	r0, [r4, #4]
}
 80241b0:	4620      	mov	r0, r4
 80241b2:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80241b4:	2000      	movs	r0, #0
 80241b6:	e7fa      	b.n	80241ae <mg_str_s+0xe>

080241b8 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 80241b8:	6001      	str	r1, [r0, #0]
 80241ba:	6042      	str	r2, [r0, #4]
}
 80241bc:	4770      	bx	lr

080241be <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 80241be:	b510      	push	{r4, lr}
 80241c0:	b082      	sub	sp, #8
 80241c2:	4604      	mov	r4, r0
 80241c4:	ab02      	add	r3, sp, #8
 80241c6:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 80241ca:	2a01      	cmp	r2, #1
 80241cc:	d902      	bls.n	80241d4 <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80241ce:	780b      	ldrb	r3, [r1, #0]
 80241d0:	2b22      	cmp	r3, #34	@ 0x22
 80241d2:	d007      	beq.n	80241e4 <stripquotes+0x26>
             : s;
 80241d4:	ab02      	add	r3, sp, #8
 80241d6:	e913 0003 	ldmdb	r3, {r0, r1}
 80241da:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80241de:	4620      	mov	r0, r4
 80241e0:	b002      	add	sp, #8
 80241e2:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80241e4:	188b      	adds	r3, r1, r2
 80241e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80241ea:	2b22      	cmp	r3, #34	@ 0x22
 80241ec:	d1f2      	bne.n	80241d4 <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 80241ee:	3a02      	subs	r2, #2
 80241f0:	3101      	adds	r1, #1
 80241f2:	f7ff ffe1 	bl	80241b8 <mg_str_n>
             : s;
 80241f6:	e7f2      	b.n	80241de <stripquotes+0x20>

080241f8 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 80241f8:	b082      	sub	sp, #8
 80241fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241fe:	b084      	sub	sp, #16
 8024200:	4680      	mov	r8, r0
 8024202:	4668      	mov	r0, sp
 8024204:	e880 0006 	stmia.w	r0, {r1, r2}
 8024208:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802420a:	2400      	movs	r4, #0
 802420c:	e01f      	b.n	802424e <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 802420e:	2201      	movs	r2, #1
 8024210:	e037      	b.n	8024282 <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8024212:	7818      	ldrb	r0, [r3, #0]
 8024214:	283b      	cmp	r0, #59	@ 0x3b
 8024216:	d00d      	beq.n	8024234 <mg_http_get_header_var+0x3c>
 8024218:	2820      	cmp	r0, #32
 802421a:	d00b      	beq.n	8024234 <mg_http_get_header_var+0x3c>
 802421c:	282c      	cmp	r0, #44	@ 0x2c
 802421e:	d009      	beq.n	8024234 <mg_http_get_header_var+0x3c>
        p++;
 8024220:	3301      	adds	r3, #1
      while (p < x &&
 8024222:	42bb      	cmp	r3, r7
 8024224:	d206      	bcs.n	8024234 <mg_http_get_header_var+0x3c>
 8024226:	2a00      	cmp	r2, #0
 8024228:	d0f3      	beq.n	8024212 <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 802422a:	428b      	cmp	r3, r1
 802422c:	d0f8      	beq.n	8024220 <mg_http_get_header_var+0x28>
 802422e:	7818      	ldrb	r0, [r3, #0]
 8024230:	2822      	cmp	r0, #34	@ 0x22
 8024232:	d1f5      	bne.n	8024220 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8024234:	1a5b      	subs	r3, r3, r1
 8024236:	ac02      	add	r4, sp, #8
 8024238:	441a      	add	r2, r3
 802423a:	4620      	mov	r0, r4
 802423c:	f7ff ffbc 	bl	80241b8 <mg_str_n>
 8024240:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024244:	4640      	mov	r0, r8
 8024246:	f7ff ffba 	bl	80241be <stripquotes>
 802424a:	e021      	b.n	8024290 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 802424c:	3401      	adds	r4, #1
 802424e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024250:	b1ca      	cbz	r2, 8024286 <mg_http_get_header_var+0x8e>
 8024252:	1915      	adds	r5, r2, r4
 8024254:	1cab      	adds	r3, r5, #2
 8024256:	9f01      	ldr	r7, [sp, #4]
 8024258:	42bb      	cmp	r3, r7
 802425a:	d214      	bcs.n	8024286 <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 802425c:	9e00      	ldr	r6, [sp, #0]
 802425e:	5d73      	ldrb	r3, [r6, r5]
 8024260:	2b3d      	cmp	r3, #61	@ 0x3d
 8024262:	d1f3      	bne.n	802424c <mg_http_get_header_var+0x54>
 8024264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024266:	1930      	adds	r0, r6, r4
 8024268:	f008 fa76 	bl	802c758 <memcmp>
 802426c:	4602      	mov	r2, r0
 802426e:	2800      	cmp	r0, #0
 8024270:	d1ec      	bne.n	802424c <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024272:	3501      	adds	r5, #1
 8024274:	1971      	adds	r1, r6, r5
 8024276:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8024278:	42b9      	cmp	r1, r7
 802427a:	d202      	bcs.n	8024282 <mg_http_get_header_var+0x8a>
 802427c:	5d73      	ldrb	r3, [r6, r5]
 802427e:	2b22      	cmp	r3, #34	@ 0x22
 8024280:	d0c5      	beq.n	802420e <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8024282:	460b      	mov	r3, r1
      while (p < x &&
 8024284:	e7cd      	b.n	8024222 <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8024286:	2200      	movs	r2, #0
 8024288:	4611      	mov	r1, r2
 802428a:	4640      	mov	r0, r8
 802428c:	f7ff ff94 	bl	80241b8 <mg_str_n>
}
 8024290:	4640      	mov	r0, r8
 8024292:	b004      	add	sp, #16
 8024294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024298:	b002      	add	sp, #8
 802429a:	4770      	bx	lr

0802429c <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 802429c:	b530      	push	{r4, r5, lr}
 802429e:	b085      	sub	sp, #20
 80242a0:	466b      	mov	r3, sp
 80242a2:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 80242a6:	290d      	cmp	r1, #13
 80242a8:	d930      	bls.n	802430c <mg_v4mapped+0x70>
 80242aa:	4614      	mov	r4, r2
 80242ac:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 80242ae:	4601      	mov	r1, r0
 80242b0:	7802      	ldrb	r2, [r0, #0]
 80242b2:	2a3a      	cmp	r2, #58	@ 0x3a
 80242b4:	d12d      	bne.n	8024312 <mg_v4mapped+0x76>
 80242b6:	7842      	ldrb	r2, [r0, #1]
 80242b8:	2a3a      	cmp	r2, #58	@ 0x3a
 80242ba:	d12c      	bne.n	8024316 <mg_v4mapped+0x7a>
 80242bc:	7982      	ldrb	r2, [r0, #6]
 80242be:	2a3a      	cmp	r2, #58	@ 0x3a
 80242c0:	d12b      	bne.n	802431a <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 80242c2:	2202      	movs	r2, #2
 80242c4:	e000      	b.n	80242c8 <mg_v4mapped+0x2c>
 80242c6:	3201      	adds	r2, #1
 80242c8:	2a05      	cmp	r2, #5
 80242ca:	dc06      	bgt.n	80242da <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 80242cc:	5c88      	ldrb	r0, [r1, r2]
 80242ce:	2866      	cmp	r0, #102	@ 0x66
 80242d0:	d0f9      	beq.n	80242c6 <mg_v4mapped+0x2a>
 80242d2:	2846      	cmp	r0, #70	@ 0x46
 80242d4:	d0f7      	beq.n	80242c6 <mg_v4mapped+0x2a>
 80242d6:	2000      	movs	r0, #0
 80242d8:	e019      	b.n	802430e <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 80242da:	ad02      	add	r5, sp, #8
 80242dc:	1fda      	subs	r2, r3, #7
 80242de:	3107      	adds	r1, #7
 80242e0:	4628      	mov	r0, r5
 80242e2:	f7ff ff69 	bl	80241b8 <mg_str_n>
 80242e6:	4622      	mov	r2, r4
 80242e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80242ec:	f7fc fe7a 	bl	8020fe4 <mg_aton4>
 80242f0:	b168      	cbz	r0, 802430e <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 80242f2:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 80242f4:	2300      	movs	r3, #0
 80242f6:	6023      	str	r3, [r4, #0]
 80242f8:	6063      	str	r3, [r4, #4]
 80242fa:	60a3      	str	r3, [r4, #8]
 80242fc:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 80242fe:	23ff      	movs	r3, #255	@ 0xff
 8024300:	72e3      	strb	r3, [r4, #11]
 8024302:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8024304:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8024306:	2301      	movs	r3, #1
 8024308:	74e3      	strb	r3, [r4, #19]
  return true;
 802430a:	e000      	b.n	802430e <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 802430c:	2000      	movs	r0, #0
}
 802430e:	b005      	add	sp, #20
 8024310:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8024312:	2000      	movs	r0, #0
 8024314:	e7fb      	b.n	802430e <mg_v4mapped+0x72>
 8024316:	2000      	movs	r0, #0
 8024318:	e7f9      	b.n	802430e <mg_v4mapped+0x72>
 802431a:	2000      	movs	r0, #0
 802431c:	e7f7      	b.n	802430e <mg_v4mapped+0x72>

0802431e <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 802431e:	b530      	push	{r4, r5, lr}
 8024320:	b083      	sub	sp, #12
 8024322:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8024324:	6803      	ldr	r3, [r0, #0]
 8024326:	6842      	ldr	r2, [r0, #4]
 8024328:	441a      	add	r2, r3
 802432a:	466d      	mov	r5, sp
 802432c:	1a52      	subs	r2, r2, r1
 802432e:	4628      	mov	r0, r5
 8024330:	f7ff ff42 	bl	80241b8 <mg_str_n>
 8024334:	3408      	adds	r4, #8
 8024336:	e895 0003 	ldmia.w	r5, {r0, r1}
 802433a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 802433e:	b003      	add	sp, #12
 8024340:	bd30      	pop	{r4, r5, pc}

08024342 <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8024342:	b084      	sub	sp, #16
 8024344:	f10d 0c10 	add.w	ip, sp, #16
 8024348:	e90c 0003 	stmdb	ip, {r0, r1}
 802434c:	4669      	mov	r1, sp
 802434e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8024352:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8024354:	9a03      	ldr	r2, [sp, #12]
 8024356:	429a      	cmp	r2, r3
 8024358:	d90b      	bls.n	8024372 <mg_strcmp+0x30>
 802435a:	9901      	ldr	r1, [sp, #4]
 802435c:	4299      	cmp	r1, r3
 802435e:	d908      	bls.n	8024372 <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8024360:	9a02      	ldr	r2, [sp, #8]
 8024362:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8024364:	9a00      	ldr	r2, [sp, #0]
 8024366:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8024368:	4291      	cmp	r1, r2
 802436a:	db09      	blt.n	8024380 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 802436c:	dc0c      	bgt.n	8024388 <mg_strcmp+0x46>
    i++;
 802436e:	3301      	adds	r3, #1
 8024370:	e7f0      	b.n	8024354 <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8024372:	429a      	cmp	r2, r3
 8024374:	d80a      	bhi.n	802438c <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8024376:	9a01      	ldr	r2, [sp, #4]
 8024378:	429a      	cmp	r2, r3
 802437a:	d809      	bhi.n	8024390 <mg_strcmp+0x4e>
  return 0;
 802437c:	2000      	movs	r0, #0
 802437e:	e001      	b.n	8024384 <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8024380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024384:	b004      	add	sp, #16
 8024386:	4770      	bx	lr
    if (c1 > c2) return 1;
 8024388:	2001      	movs	r0, #1
 802438a:	e7fb      	b.n	8024384 <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 802438c:	2001      	movs	r0, #1
 802438e:	e7f9      	b.n	8024384 <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8024390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024394:	e7f6      	b.n	8024384 <mg_strcmp+0x42>

08024396 <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8024396:	b530      	push	{r4, r5, lr}
 8024398:	b085      	sub	sp, #20
 802439a:	ac04      	add	r4, sp, #16
 802439c:	e904 0003 	stmdb	r4, {r0, r1}
 80243a0:	4669      	mov	r1, sp
 80243a2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80243a6:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 80243a8:	9b03      	ldr	r3, [sp, #12]
 80243aa:	42a3      	cmp	r3, r4
 80243ac:	d910      	bls.n	80243d0 <mg_strcasecmp+0x3a>
 80243ae:	9a01      	ldr	r2, [sp, #4]
 80243b0:	42a2      	cmp	r2, r4
 80243b2:	d90d      	bls.n	80243d0 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 80243b4:	9b02      	ldr	r3, [sp, #8]
 80243b6:	5d18      	ldrb	r0, [r3, r4]
 80243b8:	f7fc ff22 	bl	8021200 <mg_tolc>
 80243bc:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 80243be:	9b00      	ldr	r3, [sp, #0]
 80243c0:	5d18      	ldrb	r0, [r3, r4]
 80243c2:	f7fc ff1d 	bl	8021200 <mg_tolc>
    if (c1 < c2) return -1;
 80243c6:	4285      	cmp	r5, r0
 80243c8:	db09      	blt.n	80243de <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 80243ca:	dc0c      	bgt.n	80243e6 <mg_strcasecmp+0x50>
    i++;
 80243cc:	3401      	adds	r4, #1
 80243ce:	e7eb      	b.n	80243a8 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 80243d0:	42a3      	cmp	r3, r4
 80243d2:	d80a      	bhi.n	80243ea <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 80243d4:	9b01      	ldr	r3, [sp, #4]
 80243d6:	42a3      	cmp	r3, r4
 80243d8:	d809      	bhi.n	80243ee <mg_strcasecmp+0x58>
  return 0;
 80243da:	2000      	movs	r0, #0
 80243dc:	e001      	b.n	80243e2 <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 80243de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80243e2:	b005      	add	sp, #20
 80243e4:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 80243e6:	2001      	movs	r0, #1
 80243e8:	e7fb      	b.n	80243e2 <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 80243ea:	2001      	movs	r0, #1
 80243ec:	e7f9      	b.n	80243e2 <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 80243ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80243f2:	e7f6      	b.n	80243e2 <mg_strcasecmp+0x4c>

080243f4 <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80243f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80243f8:	b086      	sub	sp, #24
 80243fa:	4604      	mov	r4, r0
 80243fc:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80243fe:	f7fe fb45 	bl	8022a8c <mg_http_get_request_len>
 8024402:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8024404:	b1d4      	cbz	r4, 802443c <mg_http_parse+0x48>
 8024406:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8024408:	f44f 7206 	mov.w	r2, #536	@ 0x218
 802440c:	2100      	movs	r1, #0
 802440e:	4630      	mov	r0, r6
 8024410:	f008 fa36 	bl	802c880 <memset>
  if (req_len <= 0) return req_len;
 8024414:	2f00      	cmp	r7, #0
 8024416:	f340 808d 	ble.w	8024534 <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 802441a:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 802441e:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8024422:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8024426:	46b8      	mov	r8, r7
 8024428:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 802442c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8024430:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8024434:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8024438:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 802443a:	e005      	b.n	8024448 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 802443c:	4625      	mov	r5, r4
 802443e:	e7e3      	b.n	8024408 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8024440:	4414      	add	r4, r2
 8024442:	6873      	ldr	r3, [r6, #4]
 8024444:	4413      	add	r3, r2
 8024446:	6073      	str	r3, [r6, #4]
 8024448:	42ac      	cmp	r4, r5
 802444a:	d208      	bcs.n	802445e <mg_http_parse+0x6a>
 802444c:	4629      	mov	r1, r5
 802444e:	4620      	mov	r0, r4
 8024450:	f7fb fc1e 	bl	801fc90 <clen>
 8024454:	4602      	mov	r2, r0
 8024456:	2800      	cmp	r0, #0
 8024458:	d1f2      	bne.n	8024440 <mg_http_parse+0x4c>
 802445a:	e000      	b.n	802445e <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 802445c:	3401      	adds	r4, #1
 802445e:	42ac      	cmp	r4, r5
 8024460:	d202      	bcs.n	8024468 <mg_http_parse+0x74>
 8024462:	7823      	ldrb	r3, [r4, #0]
 8024464:	2b20      	cmp	r3, #32
 8024466:	d0f9      	beq.n	802445c <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8024468:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 802446a:	e003      	b.n	8024474 <mg_http_parse+0x80>
 802446c:	4414      	add	r4, r2
 802446e:	68f3      	ldr	r3, [r6, #12]
 8024470:	4413      	add	r3, r2
 8024472:	60f3      	str	r3, [r6, #12]
 8024474:	42ac      	cmp	r4, r5
 8024476:	d208      	bcs.n	802448a <mg_http_parse+0x96>
 8024478:	4629      	mov	r1, r5
 802447a:	4620      	mov	r0, r4
 802447c:	f7fb fc08 	bl	801fc90 <clen>
 8024480:	4602      	mov	r2, r0
 8024482:	2800      	cmp	r0, #0
 8024484:	d1f2      	bne.n	802446c <mg_http_parse+0x78>
 8024486:	e000      	b.n	802448a <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8024488:	3401      	adds	r4, #1
 802448a:	42ac      	cmp	r4, r5
 802448c:	d202      	bcs.n	8024494 <mg_http_parse+0xa0>
 802448e:	7823      	ldrb	r3, [r4, #0]
 8024490:	2b20      	cmp	r3, #32
 8024492:	d0f9      	beq.n	8024488 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8024494:	f106 0218 	add.w	r2, r6, #24
 8024498:	4629      	mov	r1, r5
 802449a:	4620      	mov	r0, r4
 802449c:	f7fb fc3f 	bl	801fd1e <skiptorn>
 80244a0:	4682      	mov	sl, r0
 80244a2:	2800      	cmp	r0, #0
 80244a4:	f000 8082 	beq.w	80245ac <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 80244a8:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80244ac:	68f4      	ldr	r4, [r6, #12]
 80244ae:	4622      	mov	r2, r4
 80244b0:	213f      	movs	r1, #63	@ 0x3f
 80244b2:	4648      	mov	r0, r9
 80244b4:	f7eb fea4 	bl	8010200 <memchr>
 80244b8:	b138      	cbz	r0, 80244ca <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 80244ba:	1c42      	adds	r2, r0, #1
 80244bc:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 80244be:	444c      	add	r4, r9
 80244c0:	1aa4      	subs	r4, r4, r2
 80244c2:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 80244c4:	eba0 0309 	sub.w	r3, r0, r9
 80244c8:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80244ca:	6873      	ldr	r3, [r6, #4]
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	d06f      	beq.n	80245b0 <mg_http_parse+0x1bc>
 80244d0:	68f3      	ldr	r3, [r6, #12]
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	d06f      	beq.n	80245b6 <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 80244d6:	231e      	movs	r3, #30
 80244d8:	f106 0220 	add.w	r2, r6, #32
 80244dc:	4629      	mov	r1, r5
 80244de:	4650      	mov	r0, sl
 80244e0:	f7fb fc45 	bl	801fd6e <mg_http_parse_headers>
 80244e4:	2800      	cmp	r0, #0
 80244e6:	d069      	beq.n	80245bc <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80244e8:	4939      	ldr	r1, [pc, #228]	@ (80245d0 <mg_http_parse+0x1dc>)
 80244ea:	4630      	mov	r0, r6
 80244ec:	f7fe fafa 	bl	8022ae4 <mg_http_get_header>
 80244f0:	b160      	cbz	r0, 802450c <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80244f2:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 80244f6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80244fa:	f7fe fa75 	bl	80229e8 <mg_to_size_t>
 80244fe:	2800      	cmp	r0, #0
 8024500:	d05f      	beq.n	80245c2 <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8024502:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024506:	4443      	add	r3, r8
 8024508:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 802450c:	2205      	movs	r2, #5
 802450e:	4931      	ldr	r1, [pc, #196]	@ (80245d4 <mg_http_parse+0x1e0>)
 8024510:	6830      	ldr	r0, [r6, #0]
 8024512:	f7fb fb6f 	bl	801fbf4 <mg_ncasecmp>
 8024516:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024518:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 802451c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8024520:	d00c      	beq.n	802453c <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024522:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8024526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802452a:	d029      	beq.n	8024580 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 802452c:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8024530:	4598      	cmp	r8, r3
 8024532:	d849      	bhi.n	80245c8 <mg_http_parse+0x1d4>
}
 8024534:	4638      	mov	r0, r7
 8024536:	b006      	add	sp, #24
 8024538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 802453c:	2800      	cmp	r0, #0
 802453e:	d0f0      	beq.n	8024522 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024540:	466d      	mov	r5, sp
 8024542:	4925      	ldr	r1, [pc, #148]	@ (80245d8 <mg_http_parse+0x1e4>)
 8024544:	4628      	mov	r0, r5
 8024546:	f7ff fe2b 	bl	80241a0 <mg_str_s>
 802454a:	e895 000c 	ldmia.w	r5, {r2, r3}
 802454e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8024552:	f7ff ff20 	bl	8024396 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8024556:	2800      	cmp	r0, #0
 8024558:	d0e3      	beq.n	8024522 <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 802455a:	ad02      	add	r5, sp, #8
 802455c:	491f      	ldr	r1, [pc, #124]	@ (80245dc <mg_http_parse+0x1e8>)
 802455e:	4628      	mov	r0, r5
 8024560:	f7ff fe1e 	bl	80241a0 <mg_str_s>
 8024564:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024568:	e896 0003 	ldmia.w	r6, {r0, r1}
 802456c:	f7ff ff13 	bl	8024396 <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8024570:	2800      	cmp	r0, #0
 8024572:	d0d6      	beq.n	8024522 <mg_http_parse+0x12e>
    hm->body.len = 0;
 8024574:	2300      	movs	r3, #0
 8024576:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 802457a:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 802457e:	e7d0      	b.n	8024522 <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8024580:	2c00      	cmp	r4, #0
 8024582:	d1d3      	bne.n	802452c <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8024584:	ac04      	add	r4, sp, #16
 8024586:	4916      	ldr	r1, [pc, #88]	@ (80245e0 <mg_http_parse+0x1ec>)
 8024588:	4620      	mov	r0, r4
 802458a:	f7ff fe09 	bl	80241a0 <mg_str_s>
 802458e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8024592:	f106 0108 	add.w	r1, r6, #8
 8024596:	c903      	ldmia	r1, {r0, r1}
 8024598:	f7ff fefd 	bl	8024396 <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 802459c:	2800      	cmp	r0, #0
 802459e:	d1c5      	bne.n	802452c <mg_http_parse+0x138>
    hm->body.len = 0;
 80245a0:	2300      	movs	r3, #0
 80245a2:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80245a6:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 80245aa:	e7bf      	b.n	802452c <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80245ac:	2700      	movs	r7, #0
 80245ae:	e7c1      	b.n	8024534 <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80245b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80245b4:	e7be      	b.n	8024534 <mg_http_parse+0x140>
 80245b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80245ba:	e7bb      	b.n	8024534 <mg_http_parse+0x140>
    return -1;  // error when parsing
 80245bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80245c0:	e7b8      	b.n	8024534 <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80245c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80245c6:	e7b5      	b.n	8024534 <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80245c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80245cc:	e7b2      	b.n	8024534 <mg_http_parse+0x140>
 80245ce:	bf00      	nop
 80245d0:	0803a210 	.word	0x0803a210
 80245d4:	0803a220 	.word	0x0803a220
 80245d8:	08037250 	.word	0x08037250
 80245dc:	08036568 	.word	0x08036568
 80245e0:	0803a228 	.word	0x0803a228

080245e4 <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80245e4:	b530      	push	{r4, r5, lr}
 80245e6:	b085      	sub	sp, #20
 80245e8:	ac04      	add	r4, sp, #16
 80245ea:	e904 0003 	stmdb	r4, {r0, r1}
 80245ee:	4669      	mov	r1, sp
 80245f0:	e881 000c 	stmia.w	r1, {r2, r3}
 80245f4:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 80245f6:	b110      	cbz	r0, 80245fe <mg_match+0x1a>
 80245f8:	2300      	movs	r3, #0
 80245fa:	6003      	str	r3, [r0, #0]
 80245fc:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 80245fe:	2400      	movs	r4, #0
 8024600:	46a4      	mov	ip, r4
 8024602:	4621      	mov	r1, r4
 8024604:	4623      	mov	r3, r4
 8024606:	e028      	b.n	802465a <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8024608:	9a02      	ldr	r2, [sp, #8]
 802460a:	440a      	add	r2, r1
 802460c:	6002      	str	r2, [r0, #0]
 802460e:	2201      	movs	r2, #1
 8024610:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8024612:	2200      	movs	r2, #0
 8024614:	6082      	str	r2, [r0, #8]
 8024616:	60c2      	str	r2, [r0, #12]
 8024618:	3008      	adds	r0, #8
      i++, j++;
 802461a:	3301      	adds	r3, #1
 802461c:	3101      	adds	r1, #1
 802461e:	e01c      	b.n	802465a <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8024620:	429a      	cmp	r2, r3
 8024622:	d905      	bls.n	8024630 <mg_match+0x4c>
 8024624:	9a00      	ldr	r2, [sp, #0]
 8024626:	5cd2      	ldrb	r2, [r2, r3]
 8024628:	2a2a      	cmp	r2, #42	@ 0x2a
 802462a:	d045      	beq.n	80246b8 <mg_match+0xd4>
 802462c:	2a23      	cmp	r2, #35	@ 0x23
 802462e:	d043      	beq.n	80246b8 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8024630:	2c00      	cmp	r4, #0
 8024632:	d065      	beq.n	8024700 <mg_match+0x11c>
 8024634:	9b03      	ldr	r3, [sp, #12]
 8024636:	42a3      	cmp	r3, r4
 8024638:	d365      	bcc.n	8024706 <mg_match+0x122>
 802463a:	9b00      	ldr	r3, [sp, #0]
 802463c:	f813 300c 	ldrb.w	r3, [r3, ip]
 8024640:	2b23      	cmp	r3, #35	@ 0x23
 8024642:	d003      	beq.n	802464c <mg_match+0x68>
 8024644:	9b02      	ldr	r3, [sp, #8]
 8024646:	5c5b      	ldrb	r3, [r3, r1]
 8024648:	2b2f      	cmp	r3, #47	@ 0x2f
 802464a:	d05e      	beq.n	802470a <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 802464c:	2800      	cmp	r0, #0
 802464e:	d046      	beq.n	80246de <mg_match+0xfa>
 8024650:	6803      	ldr	r3, [r0, #0]
 8024652:	2b00      	cmp	r3, #0
 8024654:	d03c      	beq.n	80246d0 <mg_match+0xec>
      i = ni, j = nj;
 8024656:	4621      	mov	r1, r4
 8024658:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 802465a:	9a01      	ldr	r2, [sp, #4]
 802465c:	429a      	cmp	r2, r3
 802465e:	d802      	bhi.n	8024666 <mg_match+0x82>
 8024660:	9d03      	ldr	r5, [sp, #12]
 8024662:	428d      	cmp	r5, r1
 8024664:	d941      	bls.n	80246ea <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8024666:	429a      	cmp	r2, r3
 8024668:	d9da      	bls.n	8024620 <mg_match+0x3c>
 802466a:	9d03      	ldr	r5, [sp, #12]
 802466c:	428d      	cmp	r5, r1
 802466e:	d9d7      	bls.n	8024620 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8024670:	9d00      	ldr	r5, [sp, #0]
 8024672:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8024676:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 802467a:	d009      	beq.n	8024690 <mg_match+0xac>
        (p.buf[i] == '?' ||
 802467c:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8024680:	d0ce      	beq.n	8024620 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8024682:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8024686:	d0cb      	beq.n	8024620 <mg_match+0x3c>
 8024688:	9d02      	ldr	r5, [sp, #8]
 802468a:	5c6d      	ldrb	r5, [r5, r1]
 802468c:	45ae      	cmp	lr, r5
 802468e:	d1c7      	bne.n	8024620 <mg_match+0x3c>
      if (caps == NULL) {
 8024690:	2800      	cmp	r0, #0
 8024692:	d0c2      	beq.n	802461a <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8024694:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8024698:	d0b6      	beq.n	8024608 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 802469a:	6802      	ldr	r2, [r0, #0]
 802469c:	2a00      	cmp	r2, #0
 802469e:	d0bc      	beq.n	802461a <mg_match+0x36>
 80246a0:	6845      	ldr	r5, [r0, #4]
 80246a2:	2d00      	cmp	r5, #0
 80246a4:	d1b9      	bne.n	802461a <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 80246a6:	9d02      	ldr	r5, [sp, #8]
 80246a8:	440d      	add	r5, r1
 80246aa:	1aad      	subs	r5, r5, r2
 80246ac:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 80246ae:	2200      	movs	r2, #0
 80246b0:	60c2      	str	r2, [r0, #12]
 80246b2:	6082      	str	r2, [r0, #8]
 80246b4:	3008      	adds	r0, #8
 80246b6:	e7b0      	b.n	802461a <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 80246b8:	b108      	cbz	r0, 80246be <mg_match+0xda>
 80246ba:	6802      	ldr	r2, [r0, #0]
 80246bc:	b11a      	cbz	r2, 80246c6 <mg_match+0xe2>
      ni = i++, nj = j + 1;
 80246be:	1c4c      	adds	r4, r1, #1
 80246c0:	469c      	mov	ip, r3
 80246c2:	3301      	adds	r3, #1
 80246c4:	e7c9      	b.n	802465a <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 80246c6:	6042      	str	r2, [r0, #4]
 80246c8:	9a02      	ldr	r2, [sp, #8]
 80246ca:	440a      	add	r2, r1
 80246cc:	6002      	str	r2, [r0, #0]
 80246ce:	e7f6      	b.n	80246be <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80246d0:	6843      	ldr	r3, [r0, #4]
 80246d2:	b93b      	cbnz	r3, 80246e4 <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 80246d4:	3808      	subs	r0, #8
 80246d6:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 80246d8:	4621      	mov	r1, r4
 80246da:	4663      	mov	r3, ip
 80246dc:	e7bd      	b.n	802465a <mg_match+0x76>
 80246de:	4621      	mov	r1, r4
 80246e0:	4663      	mov	r3, ip
 80246e2:	e7ba      	b.n	802465a <mg_match+0x76>
 80246e4:	4621      	mov	r1, r4
 80246e6:	4663      	mov	r3, ip
 80246e8:	e7b7      	b.n	802465a <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 80246ea:	b180      	cbz	r0, 802470e <mg_match+0x12a>
 80246ec:	6803      	ldr	r3, [r0, #0]
 80246ee:	b183      	cbz	r3, 8024712 <mg_match+0x12e>
 80246f0:	6842      	ldr	r2, [r0, #4]
 80246f2:	b982      	cbnz	r2, 8024716 <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 80246f4:	9a02      	ldr	r2, [sp, #8]
 80246f6:	440a      	add	r2, r1
 80246f8:	1ad3      	subs	r3, r2, r3
 80246fa:	6043      	str	r3, [r0, #4]
  return true;
 80246fc:	2001      	movs	r0, #1
 80246fe:	e000      	b.n	8024702 <mg_match+0x11e>
      return false;
 8024700:	2000      	movs	r0, #0
}
 8024702:	b005      	add	sp, #20
 8024704:	bd30      	pop	{r4, r5, pc}
      return false;
 8024706:	2000      	movs	r0, #0
 8024708:	e7fb      	b.n	8024702 <mg_match+0x11e>
 802470a:	2000      	movs	r0, #0
 802470c:	e7f9      	b.n	8024702 <mg_match+0x11e>
  return true;
 802470e:	2001      	movs	r0, #1
 8024710:	e7f7      	b.n	8024702 <mg_match+0x11e>
 8024712:	2001      	movs	r0, #1
 8024714:	e7f5      	b.n	8024702 <mg_match+0x11e>
 8024716:	2001      	movs	r0, #1
 8024718:	e7f3      	b.n	8024702 <mg_match+0x11e>

0802471a <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 802471a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802471e:	b085      	sub	sp, #20
 8024720:	ac04      	add	r4, sp, #16
 8024722:	e904 0003 	stmdb	r4, {r0, r1}
 8024726:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 802472a:	b379      	cbz	r1, 802478c <mg_span+0x72>
 802472c:	4690      	mov	r8, r2
 802472e:	461f      	mov	r7, r3
 8024730:	460d      	mov	r5, r1
 8024732:	9e02      	ldr	r6, [sp, #8]
 8024734:	b366      	cbz	r6, 8024790 <mg_span+0x76>
    size_t len = 0;
 8024736:	2400      	movs	r4, #0
 8024738:	e000      	b.n	802473c <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 802473a:	3401      	adds	r4, #1
 802473c:	42a5      	cmp	r5, r4
 802473e:	d902      	bls.n	8024746 <mg_span+0x2c>
 8024740:	5d31      	ldrb	r1, [r6, r4]
 8024742:	4281      	cmp	r1, r0
 8024744:	d1f9      	bne.n	802473a <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8024746:	f1b8 0f00 	cmp.w	r8, #0
 802474a:	d009      	beq.n	8024760 <mg_span+0x46>
 802474c:	46e9      	mov	r9, sp
 802474e:	4622      	mov	r2, r4
 8024750:	4631      	mov	r1, r6
 8024752:	4648      	mov	r0, r9
 8024754:	f7ff fd30 	bl	80241b8 <mg_str_n>
 8024758:	e899 0003 	ldmia.w	r9, {r0, r1}
 802475c:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8024760:	b187      	cbz	r7, 8024784 <mg_span+0x6a>
 8024762:	46e8      	mov	r8, sp
 8024764:	1b2a      	subs	r2, r5, r4
 8024766:	1931      	adds	r1, r6, r4
 8024768:	4640      	mov	r0, r8
 802476a:	f7ff fd25 	bl	80241b8 <mg_str_n>
 802476e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024772:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8024776:	42a5      	cmp	r5, r4
 8024778:	d904      	bls.n	8024784 <mg_span+0x6a>
 802477a:	4603      	mov	r3, r0
 802477c:	3301      	adds	r3, #1
 802477e:	603b      	str	r3, [r7, #0]
 8024780:	1e4b      	subs	r3, r1, #1
 8024782:	607b      	str	r3, [r7, #4]
    return true;
 8024784:	2001      	movs	r0, #1
}
 8024786:	b005      	add	sp, #20
 8024788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 802478c:	2000      	movs	r0, #0
 802478e:	e7fa      	b.n	8024786 <mg_span+0x6c>
 8024790:	2000      	movs	r0, #0
 8024792:	e7f8      	b.n	8024786 <mg_span+0x6c>

08024794 <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8024794:	b082      	sub	sp, #8
 8024796:	b510      	push	{r4, lr}
 8024798:	b08a      	sub	sp, #40	@ 0x28
 802479a:	4604      	mov	r4, r0
 802479c:	f10d 0c08 	add.w	ip, sp, #8
 80247a0:	e88c 0006 	stmia.w	ip, {r1, r2}
 80247a4:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80247a6:	2200      	movs	r2, #0
 80247a8:	4611      	mov	r1, r2
 80247aa:	f7ff fd05 	bl	80241b8 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80247ae:	ab02      	add	r3, sp, #8
 80247b0:	2226      	movs	r2, #38	@ 0x26
 80247b2:	9200      	str	r2, [sp, #0]
 80247b4:	aa08      	add	r2, sp, #32
 80247b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80247ba:	f7ff ffae 	bl	802471a <mg_span>
 80247be:	b1c8      	cbz	r0, 80247f4 <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80247c0:	233d      	movs	r3, #61	@ 0x3d
 80247c2:	9300      	str	r3, [sp, #0]
 80247c4:	ab04      	add	r3, sp, #16
 80247c6:	aa06      	add	r2, sp, #24
 80247c8:	a90a      	add	r1, sp, #40	@ 0x28
 80247ca:	e911 0003 	ldmdb	r1, {r0, r1}
 80247ce:	f7ff ffa4 	bl	802471a <mg_span>
 80247d2:	2800      	cmp	r0, #0
 80247d4:	d0eb      	beq.n	80247ae <mg_http_var+0x1a>
 80247d6:	9a07      	ldr	r2, [sp, #28]
 80247d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80247da:	4293      	cmp	r3, r2
 80247dc:	d1e7      	bne.n	80247ae <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 80247de:	9906      	ldr	r1, [sp, #24]
 80247e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80247e2:	f7fb fa07 	bl	801fbf4 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80247e6:	2800      	cmp	r0, #0
 80247e8:	d1e1      	bne.n	80247ae <mg_http_var+0x1a>
      result = v;
 80247ea:	ab04      	add	r3, sp, #16
 80247ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80247f0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80247f4:	4620      	mov	r0, r4
 80247f6:	b00a      	add	sp, #40	@ 0x28
 80247f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247fc:	b002      	add	sp, #8
 80247fe:	4770      	bx	lr

08024800 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8024800:	b530      	push	{r4, r5, lr}
 8024802:	b08d      	sub	sp, #52	@ 0x34
 8024804:	4604      	mov	r4, r0
 8024806:	a802      	add	r0, sp, #8
 8024808:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 802480c:	4619      	mov	r1, r3
 802480e:	a804      	add	r0, sp, #16
 8024810:	f7ff fcc6 	bl	80241a0 <mg_str_s>
  size_t i = 0;
 8024814:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8024816:	e000      	b.n	802481a <guess_content_type+0x1a>
 8024818:	3301      	adds	r3, #1
 802481a:	9803      	ldr	r0, [sp, #12]
 802481c:	4298      	cmp	r0, r3
 802481e:	d906      	bls.n	802482e <guess_content_type+0x2e>
 8024820:	1ac1      	subs	r1, r0, r3
 8024822:	9a02      	ldr	r2, [sp, #8]
 8024824:	440a      	add	r2, r1
 8024826:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 802482a:	2a2e      	cmp	r2, #46	@ 0x2e
 802482c:	d1f4      	bne.n	8024818 <guess_content_type+0x18>
  path.buf += path.len - i;
 802482e:	1ac0      	subs	r0, r0, r3
 8024830:	9a02      	ldr	r2, [sp, #8]
 8024832:	4402      	add	r2, r0
 8024834:	9202      	str	r2, [sp, #8]
  path.len = i;
 8024836:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8024838:	ab04      	add	r3, sp, #16
 802483a:	222c      	movs	r2, #44	@ 0x2c
 802483c:	9200      	str	r2, [sp, #0]
 802483e:	aa0a      	add	r2, sp, #40	@ 0x28
 8024840:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024844:	f7ff ff69 	bl	802471a <mg_span>
 8024848:	b1c0      	cbz	r0, 802487c <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 802484a:	233d      	movs	r3, #61	@ 0x3d
 802484c:	9300      	str	r3, [sp, #0]
 802484e:	ab06      	add	r3, sp, #24
 8024850:	aa08      	add	r2, sp, #32
 8024852:	a90c      	add	r1, sp, #48	@ 0x30
 8024854:	e911 0003 	ldmdb	r1, {r0, r1}
 8024858:	f7ff ff5f 	bl	802471a <mg_span>
 802485c:	2800      	cmp	r0, #0
 802485e:	d0eb      	beq.n	8024838 <guess_content_type+0x38>
 8024860:	ab08      	add	r3, sp, #32
 8024862:	cb0c      	ldmia	r3, {r2, r3}
 8024864:	a902      	add	r1, sp, #8
 8024866:	c903      	ldmia	r1, {r0, r1}
 8024868:	f7ff fd6b 	bl	8024342 <mg_strcmp>
 802486c:	2800      	cmp	r0, #0
 802486e:	d1e3      	bne.n	8024838 <guess_content_type+0x38>
 8024870:	ab06      	add	r3, sp, #24
 8024872:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024876:	e884 0003 	stmia.w	r4, {r0, r1}
 802487a:	e01c      	b.n	80248b6 <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 802487c:	2500      	movs	r5, #0
 802487e:	4b0f      	ldr	r3, [pc, #60]	@ (80248bc <guess_content_type+0xbc>)
 8024880:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 8024884:	b19b      	cbz	r3, 80248ae <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8024886:	4b0d      	ldr	r3, [pc, #52]	@ (80248bc <guess_content_type+0xbc>)
 8024888:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802488c:	cb0c      	ldmia	r3, {r2, r3}
 802488e:	a902      	add	r1, sp, #8
 8024890:	c903      	ldmia	r1, {r0, r1}
 8024892:	f7ff fd56 	bl	8024342 <mg_strcmp>
 8024896:	b108      	cbz	r0, 802489c <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8024898:	3502      	adds	r5, #2
 802489a:	e7f0      	b.n	802487e <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 802489c:	3501      	adds	r5, #1
 802489e:	4b07      	ldr	r3, [pc, #28]	@ (80248bc <guess_content_type+0xbc>)
 80248a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80248a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80248a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80248ac:	e003      	b.n	80248b6 <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 80248ae:	4904      	ldr	r1, [pc, #16]	@ (80248c0 <guess_content_type+0xc0>)
 80248b0:	4620      	mov	r0, r4
 80248b2:	f7ff fc75 	bl	80241a0 <mg_str_s>
}
 80248b6:	4620      	mov	r0, r4
 80248b8:	b00d      	add	sp, #52	@ 0x34
 80248ba:	bd30      	pop	{r4, r5, pc}
 80248bc:	0803b718 	.word	0x0803b718
 80248c0:	0803a22c 	.word	0x0803a22c

080248c4 <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80248c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80248c6:	b087      	sub	sp, #28
 80248c8:	4604      	mov	r4, r0
 80248ca:	460e      	mov	r6, r1
 80248cc:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 80248ce:	2500      	movs	r5, #0
 80248d0:	1da8      	adds	r0, r5, #6
 80248d2:	6863      	ldr	r3, [r4, #4]
 80248d4:	4298      	cmp	r0, r3
 80248d6:	d23c      	bcs.n	8024952 <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80248d8:	6821      	ldr	r1, [r4, #0]
 80248da:	1b5b      	subs	r3, r3, r5
 80248dc:	1f9a      	subs	r2, r3, #6
 80248de:	4401      	add	r1, r0
 80248e0:	a804      	add	r0, sp, #16
 80248e2:	f7ff fc69 	bl	80241b8 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80248e6:	6820      	ldr	r0, [r4, #0]
 80248e8:	2206      	movs	r2, #6
 80248ea:	491b      	ldr	r1, [pc, #108]	@ (8024958 <getrange+0x94>)
 80248ec:	4428      	add	r0, r5
 80248ee:	f007 ff33 	bl	802c758 <memcmp>
 80248f2:	b108      	cbz	r0, 80248f8 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 80248f4:	3501      	adds	r5, #1
 80248f6:	e7eb      	b.n	80248d0 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 80248f8:	ab04      	add	r3, sp, #16
 80248fa:	222d      	movs	r2, #45	@ 0x2d
 80248fc:	9200      	str	r2, [sp, #0]
 80248fe:	aa02      	add	r2, sp, #8
 8024900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024904:	f7ff ff09 	bl	802471a <mg_span>
 8024908:	b1c0      	cbz	r0, 802493c <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 802490a:	4632      	mov	r2, r6
 802490c:	ab02      	add	r3, sp, #8
 802490e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024912:	f7fe f869 	bl	80229e8 <mg_to_size_t>
 8024916:	b928      	cbnz	r0, 8024924 <getrange+0x60>
  size_t i, numparsed = 0;
 8024918:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 802491a:	9b05      	ldr	r3, [sp, #20]
 802491c:	b923      	cbnz	r3, 8024928 <getrange+0x64>
}
 802491e:	4620      	mov	r0, r4
 8024920:	b007      	add	sp, #28
 8024922:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 8024924:	2401      	movs	r4, #1
 8024926:	e7f8      	b.n	802491a <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024928:	463a      	mov	r2, r7
 802492a:	ab06      	add	r3, sp, #24
 802492c:	e913 0003 	ldmdb	r3, {r0, r1}
 8024930:	f7fe f85a 	bl	80229e8 <mg_to_size_t>
 8024934:	2800      	cmp	r0, #0
 8024936:	d0f2      	beq.n	802491e <getrange+0x5a>
 8024938:	3401      	adds	r4, #1
 802493a:	e7f0      	b.n	802491e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 802493c:	4632      	mov	r2, r6
 802493e:	ab06      	add	r3, sp, #24
 8024940:	e913 0003 	ldmdb	r3, {r0, r1}
 8024944:	f7fe f850 	bl	80229e8 <mg_to_size_t>
 8024948:	b908      	cbnz	r0, 802494e <getrange+0x8a>
  size_t i, numparsed = 0;
 802494a:	2400      	movs	r4, #0
 802494c:	e7e7      	b.n	802491e <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 802494e:	2401      	movs	r4, #1
    break;
 8024950:	e7e5      	b.n	802491e <getrange+0x5a>
  size_t i, numparsed = 0;
 8024952:	2400      	movs	r4, #0
 8024954:	e7e3      	b.n	802491e <getrange+0x5a>
 8024956:	bf00      	nop
 8024958:	0803a248 	.word	0x0803a248

0802495c <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 802495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024960:	b0e7      	sub	sp, #412	@ 0x19c
 8024962:	4607      	mov	r7, r0
 8024964:	4688      	mov	r8, r1
 8024966:	4614      	mov	r4, r2
 8024968:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802496a:	f8d3 9014 	ldr.w	r9, [r3, #20]
 802496e:	f1b9 0f00 	cmp.w	r9, #0
 8024972:	d036      	beq.n	80249e2 <mg_http_serve_file+0x86>
  size_t size = 0;
 8024974:	2300      	movs	r3, #0
 8024976:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8024978:	2200      	movs	r2, #0
 802497a:	2300      	movs	r3, #0
 802497c:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8024980:	ae5e      	add	r6, sp, #376	@ 0x178
 8024982:	4621      	mov	r1, r4
 8024984:	4630      	mov	r0, r6
 8024986:	f7ff fc0b 	bl	80241a0 <mg_str_s>
 802498a:	68eb      	ldr	r3, [r5, #12]
 802498c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8024990:	a828      	add	r0, sp, #160	@ 0xa0
 8024992:	f7ff ff35 	bl	8024800 <guess_content_type>
  if (path != NULL) {
 8024996:	2c00      	cmp	r4, #0
 8024998:	d053      	beq.n	8024a42 <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 802499a:	4995      	ldr	r1, [pc, #596]	@ (8024bf0 <mg_http_serve_file+0x294>)
 802499c:	4640      	mov	r0, r8
 802499e:	f7fe f8a1 	bl	8022ae4 <mg_http_get_header>
    if (ae != NULL) {
 80249a2:	4606      	mov	r6, r0
 80249a4:	2800      	cmp	r0, #0
 80249a6:	d042      	beq.n	8024a2e <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80249a8:	6802      	ldr	r2, [r0, #0]
 80249aa:	6841      	ldr	r1, [r0, #4]
 80249ac:	4891      	ldr	r0, [pc, #580]	@ (8024bf4 <mg_http_serve_file+0x298>)
 80249ae:	f7ff fb15 	bl	8023fdc <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80249b2:	4683      	mov	fp, r0
 80249b4:	b1d8      	cbz	r0, 80249ee <mg_http_serve_file+0x92>
 80249b6:	4990      	ldr	r1, [pc, #576]	@ (8024bf8 <mg_http_serve_file+0x29c>)
 80249b8:	f007 ffe2 	bl	802c980 <strstr>
 80249bc:	4606      	mov	r6, r0
 80249be:	b1d0      	cbz	r0, 80249f6 <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80249c0:	4623      	mov	r3, r4
 80249c2:	4a8e      	ldr	r2, [pc, #568]	@ (8024bfc <mg_http_serve_file+0x2a0>)
 80249c4:	2180      	movs	r1, #128	@ 0x80
 80249c6:	a82e      	add	r0, sp, #184	@ 0xb8
 80249c8:	f7fe fd62 	bl	8023490 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80249cc:	2201      	movs	r2, #1
 80249ce:	a92e      	add	r1, sp, #184	@ 0xb8
 80249d0:	4648      	mov	r0, r9
 80249d2:	f7fd ffcd 	bl	8022970 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 80249d6:	4606      	mov	r6, r0
 80249d8:	b130      	cbz	r0, 80249e8 <mg_http_serve_file+0x8c>
 80249da:	f04f 0a01 	mov.w	sl, #1
 80249de:	ac2e      	add	r4, sp, #184	@ 0xb8
 80249e0:	e00b      	b.n	80249fa <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80249e2:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8024c24 <mg_http_serve_file+0x2c8>
 80249e6:	e7c5      	b.n	8024974 <mg_http_serve_file+0x18>
  bool gzip = false;
 80249e8:	f04f 0a00 	mov.w	sl, #0
 80249ec:	e005      	b.n	80249fa <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 80249ee:	4606      	mov	r6, r0
  bool gzip = false;
 80249f0:	f04f 0a00 	mov.w	sl, #0
 80249f4:	e001      	b.n	80249fa <mg_http_serve_file+0x9e>
 80249f6:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 80249fa:	4658      	mov	r0, fp
 80249fc:	f7f5 ff8e 	bl	801a91c <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024a00:	b1c6      	cbz	r6, 8024a34 <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 8024a02:	b316      	cbz	r6, 8024a4a <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024a04:	f8d9 3000 	ldr.w	r3, [r9]
 8024a08:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024a0a:	a92d      	add	r1, sp, #180	@ 0xb4
 8024a0c:	4620      	mov	r0, r4
 8024a0e:	4798      	blx	r3
 8024a10:	2800      	cmp	r0, #0
 8024a12:	d137      	bne.n	8024a84 <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8024a14:	4b7a      	ldr	r3, [pc, #488]	@ (8024c00 <mg_http_serve_file+0x2a4>)
 8024a16:	68aa      	ldr	r2, [r5, #8]
 8024a18:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8024a1c:	4638      	mov	r0, r7
 8024a1e:	f7ff fa35 	bl	8023e8c <mg_http_reply>
    mg_fs_close(fd);
 8024a22:	4630      	mov	r0, r6
 8024a24:	f7fd ffbd 	bl	80229a2 <mg_fs_close>
}
 8024a28:	b067      	add	sp, #412	@ 0x19c
 8024a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8024a2e:	f04f 0a00 	mov.w	sl, #0
 8024a32:	e7e5      	b.n	8024a00 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8024a34:	2201      	movs	r2, #1
 8024a36:	4621      	mov	r1, r4
 8024a38:	4648      	mov	r0, r9
 8024a3a:	f7fd ff99 	bl	8022970 <mg_fs_open>
 8024a3e:	4606      	mov	r6, r0
 8024a40:	e7df      	b.n	8024a02 <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 8024a42:	4626      	mov	r6, r4
  bool gzip = false;
 8024a44:	f04f 0a00 	mov.w	sl, #0
 8024a48:	e7db      	b.n	8024a02 <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8024a4a:	6929      	ldr	r1, [r5, #16]
 8024a4c:	b1b9      	cbz	r1, 8024a7e <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8024a4e:	2201      	movs	r2, #1
 8024a50:	4648      	mov	r0, r9
 8024a52:	f7fd ff8d 	bl	8022970 <mg_fs_open>
 8024a56:	4606      	mov	r6, r0
    path = opts->page404;
 8024a58:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8024a5a:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8024a5e:	4621      	mov	r1, r4
 8024a60:	4658      	mov	r0, fp
 8024a62:	f7ff fb9d 	bl	80241a0 <mg_str_s>
 8024a66:	68eb      	ldr	r3, [r5, #12]
 8024a68:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8024a6c:	a80a      	add	r0, sp, #40	@ 0x28
 8024a6e:	f7ff fec7 	bl	8024800 <guess_content_type>
 8024a72:	ab28      	add	r3, sp, #160	@ 0xa0
 8024a74:	aa0a      	add	r2, sp, #40	@ 0x28
 8024a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024a7a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024a7e:	2e00      	cmp	r6, #0
 8024a80:	d1c0      	bne.n	8024a04 <mg_http_serve_file+0xa8>
 8024a82:	e7c7      	b.n	8024a14 <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024a84:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8024a88:	e9cd 2300 	strd	r2, r3, [sp]
 8024a8c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024a8e:	2140      	movs	r1, #64	@ 0x40
 8024a90:	a84e      	add	r0, sp, #312	@ 0x138
 8024a92:	f7ff fa3d 	bl	8023f10 <mg_http_etag>
 8024a96:	b190      	cbz	r0, 8024abe <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024a98:	495a      	ldr	r1, [pc, #360]	@ (8024c04 <mg_http_serve_file+0x2a8>)
 8024a9a:	4640      	mov	r0, r8
 8024a9c:	f7fe f822 	bl	8022ae4 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024aa0:	4604      	mov	r4, r0
 8024aa2:	b160      	cbz	r0, 8024abe <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8024aa4:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8024aa8:	a94e      	add	r1, sp, #312	@ 0x138
 8024aaa:	4658      	mov	r0, fp
 8024aac:	f7ff fb78 	bl	80241a0 <mg_str_s>
 8024ab0:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8024ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024ab8:	f7ff fc6d 	bl	8024396 <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024abc:	b340      	cbz	r0, 8024b10 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 8024abe:	f04f 0b00 	mov.w	fp, #0
 8024ac2:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8024ac6:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8024aca:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8024acc:	494e      	ldr	r1, [pc, #312]	@ (8024c08 <mg_http_serve_file+0x2ac>)
 8024ace:	4640      	mov	r0, r8
 8024ad0:	f7fe f808 	bl	8022ae4 <mg_http_get_header>
    range[0] = '\0';
 8024ad4:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8024ad8:	2800      	cmp	r0, #0
 8024ada:	d040      	beq.n	8024b5e <mg_http_serve_file+0x202>
 8024adc:	aa0e      	add	r2, sp, #56	@ 0x38
 8024ade:	a90d      	add	r1, sp, #52	@ 0x34
 8024ae0:	f7ff fef0 	bl	80248c4 <getrange>
 8024ae4:	2800      	cmp	r0, #0
 8024ae6:	dd70      	ble.n	8024bca <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 8024ae8:	2801      	cmp	r0, #1
 8024aea:	d01c      	beq.n	8024b26 <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 8024aec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024aee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024af0:	429a      	cmp	r2, r3
 8024af2:	d801      	bhi.n	8024af8 <mg_http_serve_file+0x19c>
 8024af4:	42a3      	cmp	r3, r4
 8024af6:	d319      	bcc.n	8024b2c <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024af8:	2400      	movs	r4, #0
 8024afa:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8024afc:	9300      	str	r3, [sp, #0]
 8024afe:	9401      	str	r4, [sp, #4]
 8024b00:	4a42      	ldr	r2, [pc, #264]	@ (8024c0c <mg_http_serve_file+0x2b0>)
 8024b02:	2164      	movs	r1, #100	@ 0x64
 8024b04:	a80f      	add	r0, sp, #60	@ 0x3c
 8024b06:	f7fe fcc3 	bl	8023490 <mg_snprintf>
        status = 416;
 8024b0a:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8024b0e:	e028      	b.n	8024b62 <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 8024b10:	4630      	mov	r0, r6
 8024b12:	f7fd ff46 	bl	80229a2 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8024b16:	4b3e      	ldr	r3, [pc, #248]	@ (8024c10 <mg_http_serve_file+0x2b4>)
 8024b18:	68aa      	ldr	r2, [r5, #8]
 8024b1a:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8024b1e:	4638      	mov	r0, r7
 8024b20:	f7ff f9b4 	bl	8023e8c <mg_http_reply>
 8024b24:	e780      	b.n	8024a28 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 8024b26:	1e63      	subs	r3, r4, #1
 8024b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8024b2a:	e7df      	b.n	8024aec <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8024b2c:	1a9b      	subs	r3, r3, r2
 8024b2e:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8024b30:	1911      	adds	r1, r2, r4
 8024b32:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 8024b34:	2300      	movs	r3, #0
 8024b36:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8024b38:	9004      	str	r0, [sp, #16]
 8024b3a:	9305      	str	r3, [sp, #20]
 8024b3c:	9102      	str	r1, [sp, #8]
 8024b3e:	9303      	str	r3, [sp, #12]
 8024b40:	9200      	str	r2, [sp, #0]
 8024b42:	9301      	str	r3, [sp, #4]
 8024b44:	4a33      	ldr	r2, [pc, #204]	@ (8024c14 <mg_http_serve_file+0x2b8>)
 8024b46:	2164      	movs	r1, #100	@ 0x64
 8024b48:	a80f      	add	r0, sp, #60	@ 0x3c
 8024b4a:	f7fe fca1 	bl	8023490 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8024b4e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8024b52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024b54:	6830      	ldr	r0, [r6, #0]
 8024b56:	4798      	blx	r3
        status = 206;
 8024b58:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8024b5c:	e001      	b.n	8024b62 <mg_http_serve_file+0x206>
    int n, status = 200;
 8024b5e:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 8024b62:	4648      	mov	r0, r9
 8024b64:	f7fb f96c 	bl	801fe40 <mg_http_status_code_str>
 8024b68:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8024b6a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8024b6c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024b6e:	46a4      	mov	ip, r4
 8024b70:	f1ba 0f00 	cmp.w	sl, #0
 8024b74:	d02c      	beq.n	8024bd0 <mg_http_serve_file+0x274>
 8024b76:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8024c28 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8024b7a:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8024b7c:	b35a      	cbz	r2, 8024bd6 <mg_http_serve_file+0x27a>
 8024b7e:	9208      	str	r2, [sp, #32]
 8024b80:	aa0f      	add	r2, sp, #60	@ 0x3c
 8024b82:	9207      	str	r2, [sp, #28]
 8024b84:	f8cd e018 	str.w	lr, [sp, #24]
 8024b88:	f8cd c010 	str.w	ip, [sp, #16]
 8024b8c:	2200      	movs	r2, #0
 8024b8e:	9205      	str	r2, [sp, #20]
 8024b90:	aa4e      	add	r2, sp, #312	@ 0x138
 8024b92:	9202      	str	r2, [sp, #8]
 8024b94:	9001      	str	r0, [sp, #4]
 8024b96:	9100      	str	r1, [sp, #0]
 8024b98:	464a      	mov	r2, r9
 8024b9a:	491f      	ldr	r1, [pc, #124]	@ (8024c18 <mg_http_serve_file+0x2bc>)
 8024b9c:	4638      	mov	r0, r7
 8024b9e:	f7ff f94f 	bl	8023e40 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8024ba2:	ad64      	add	r5, sp, #400	@ 0x190
 8024ba4:	491d      	ldr	r1, [pc, #116]	@ (8024c1c <mg_http_serve_file+0x2c0>)
 8024ba6:	4628      	mov	r0, r5
 8024ba8:	f7ff fafa 	bl	80241a0 <mg_str_s>
 8024bac:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024bb0:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024bb4:	f7ff fbef 	bl	8024396 <mg_strcasecmp>
 8024bb8:	b178      	cbz	r0, 8024bda <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 8024bba:	4b19      	ldr	r3, [pc, #100]	@ (8024c20 <mg_http_serve_file+0x2c4>)
 8024bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 8024bc0:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 8024bc4:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 8024bc8:	e72e      	b.n	8024a28 <mg_http_serve_file+0xcc>
    int n, status = 200;
 8024bca:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 8024bce:	e7c8      	b.n	8024b62 <mg_http_serve_file+0x206>
    mg_printf(c,
 8024bd0:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8024c10 <mg_http_serve_file+0x2b4>
 8024bd4:	e7d1      	b.n	8024b7a <mg_http_serve_file+0x21e>
 8024bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8024c10 <mg_http_serve_file+0x2b4>)
 8024bd8:	e7d1      	b.n	8024b7e <mg_http_serve_file+0x222>
      c->is_resp = 0;
 8024bda:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8024bde:	f36f 13c7 	bfc	r3, #7, #1
 8024be2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 8024be6:	4630      	mov	r0, r6
 8024be8:	f7fd fedb 	bl	80229a2 <mg_fs_close>
 8024bec:	e71c      	b.n	8024a28 <mg_http_serve_file+0xcc>
 8024bee:	bf00      	nop
 8024bf0:	0803a26c 	.word	0x0803a26c
 8024bf4:	0803a178 	.word	0x0803a178
 8024bf8:	0803b62c 	.word	0x0803b62c
 8024bfc:	0803a27c 	.word	0x0803a27c
 8024c00:	0803a284 	.word	0x0803a284
 8024c04:	0803a290 	.word	0x0803a290
 8024c08:	0803a2a0 	.word	0x0803a2a0
 8024c0c:	0803a2a8 	.word	0x0803a2a8
 8024c10:	08036a40 	.word	0x08036a40
 8024c14:	0803a2c8 	.word	0x0803a2c8
 8024c18:	0803a2f0 	.word	0x0803a2f0
 8024c1c:	0803a340 	.word	0x0803a340
 8024c20:	08026dad 	.word	0x08026dad
 8024c24:	20000130 	.word	0x20000130
 8024c28:	0803a250 	.word	0x0803a250

08024c2c <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c30:	b083      	sub	sp, #12
 8024c32:	ac02      	add	r4, sp, #8
 8024c34:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8024c38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024c3a:	3901      	subs	r1, #1
 8024c3c:	2907      	cmp	r1, #7
 8024c3e:	f200 8128 	bhi.w	8024e92 <mg_str_to_num+0x266>
 8024c42:	e8df f011 	tbh	[pc, r1, lsl #1]
 8024c46:	0008      	.short	0x0008
 8024c48:	01260020 	.word	0x01260020
 8024c4c:	0126000c 	.word	0x0126000c
 8024c50:	01260126 	.word	0x01260126
 8024c54:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024c56:	20ff      	movs	r0, #255	@ 0xff
 8024c58:	f04f 0e00 	mov.w	lr, #0
 8024c5c:	e003      	b.n	8024c66 <mg_str_to_num+0x3a>
 8024c5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024c62:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 8024c66:	b9e2      	cbnz	r2, 8024ca2 <mg_str_to_num+0x76>
 8024c68:	9901      	ldr	r1, [sp, #4]
 8024c6a:	2901      	cmp	r1, #1
 8024c6c:	d926      	bls.n	8024cbc <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 8024c6e:	9a00      	ldr	r2, [sp, #0]
 8024c70:	7811      	ldrb	r1, [r2, #0]
 8024c72:	2930      	cmp	r1, #48	@ 0x30
 8024c74:	d00c      	beq.n	8024c90 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 8024c76:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8024c7a:	220a      	movs	r2, #10
 8024c7c:	e013      	b.n	8024ca6 <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024c82:	4686      	mov	lr, r0
 8024c84:	e7ef      	b.n	8024c66 <mg_str_to_num+0x3a>
 8024c86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8024c8a:	f04f 0e00 	mov.w	lr, #0
 8024c8e:	e7ea      	b.n	8024c66 <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024c90:	7852      	ldrb	r2, [r2, #1]
 8024c92:	2a62      	cmp	r2, #98	@ 0x62
 8024c94:	d015      	beq.n	8024cc2 <mg_str_to_num+0x96>
 8024c96:	2a78      	cmp	r2, #120	@ 0x78
 8024c98:	d017      	beq.n	8024cca <mg_str_to_num+0x9e>
      i++;
 8024c9a:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024c9e:	220a      	movs	r2, #10
 8024ca0:	e001      	b.n	8024ca6 <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 8024ca2:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 8024ca6:	2a0a      	cmp	r2, #10
 8024ca8:	d044      	beq.n	8024d34 <mg_str_to_num+0x108>
 8024caa:	2a10      	cmp	r2, #16
 8024cac:	f000 80d4 	beq.w	8024e58 <mg_str_to_num+0x22c>
 8024cb0:	2a02      	cmp	r2, #2
 8024cb2:	d00e      	beq.n	8024cd2 <mg_str_to_num+0xa6>
 8024cb4:	2000      	movs	r0, #0
}
 8024cb6:	b003      	add	sp, #12
 8024cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 8024cbc:	f04f 0c00 	mov.w	ip, #0
 8024cc0:	e7f1      	b.n	8024ca6 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024cc2:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024cc6:	4662      	mov	r2, ip
 8024cc8:	e7ed      	b.n	8024ca6 <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 8024cca:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024cce:	2210      	movs	r2, #16
 8024cd0:	e7e9      	b.n	8024ca6 <mg_str_to_num+0x7a>
  switch (base) {
 8024cd2:	2200      	movs	r2, #0
 8024cd4:	4611      	mov	r1, r2
 8024cd6:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8024cd8:	9d01      	ldr	r5, [sp, #4]
 8024cda:	4565      	cmp	r5, ip
 8024cdc:	f240 80c0 	bls.w	8024e60 <mg_str_to_num+0x234>
 8024ce0:	9d00      	ldr	r5, [sp, #0]
 8024ce2:	f815 600c 	ldrb.w	r6, [r5, ip]
 8024ce6:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024cea:	b2ff      	uxtb	r7, r7
 8024cec:	2f01      	cmp	r7, #1
 8024cee:	f200 80b7 	bhi.w	8024e60 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8024cf2:	3e30      	subs	r6, #48	@ 0x30
 8024cf4:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 8024cf8:	ea4f 0950 	mov.w	r9, r0, lsr #1
 8024cfc:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 8024d00:	ea4f 075e 	mov.w	r7, lr, lsr #1
 8024d04:	4591      	cmp	r9, r2
 8024d06:	418f      	sbcs	r7, r1
 8024d08:	f0c0 80c5 	bcc.w	8024e96 <mg_str_to_num+0x26a>
        result *= 2;
 8024d0c:	1892      	adds	r2, r2, r2
 8024d0e:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 8024d10:	ebb0 0a06 	subs.w	sl, r0, r6
 8024d14:	eb6e 0708 	sbc.w	r7, lr, r8
 8024d18:	4592      	cmp	sl, r2
 8024d1a:	418f      	sbcs	r7, r1
 8024d1c:	f0c0 80bd 	bcc.w	8024e9a <mg_str_to_num+0x26e>
        result += digit;
 8024d20:	18b2      	adds	r2, r6, r2
 8024d22:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 8024d26:	f10c 0c01 	add.w	ip, ip, #1
 8024d2a:	3401      	adds	r4, #1
 8024d2c:	e7d4      	b.n	8024cd8 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 8024d2e:	f04f 0901 	mov.w	r9, #1
 8024d32:	e017      	b.n	8024d64 <mg_str_to_num+0x138>
  switch (base) {
 8024d34:	2200      	movs	r2, #0
 8024d36:	4611      	mov	r1, r2
 8024d38:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8024d3a:	9d01      	ldr	r5, [sp, #4]
 8024d3c:	4565      	cmp	r5, ip
 8024d3e:	f240 808f 	bls.w	8024e60 <mg_str_to_num+0x234>
 8024d42:	9d00      	ldr	r5, [sp, #0]
 8024d44:	f815 700c 	ldrb.w	r7, [r5, ip]
 8024d48:	2f2f      	cmp	r7, #47	@ 0x2f
 8024d4a:	f240 8089 	bls.w	8024e60 <mg_str_to_num+0x234>
 8024d4e:	2f39      	cmp	r7, #57	@ 0x39
 8024d50:	f200 8086 	bhi.w	8024e60 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8024d54:	3f30      	subs	r7, #48	@ 0x30
 8024d56:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8024d5a:	f04f 0900 	mov.w	r9, #0
 8024d5e:	eb10 060e 	adds.w	r6, r0, lr
 8024d62:	d2e4      	bcs.n	8024d2e <mg_str_to_num+0x102>
 8024d64:	444e      	add	r6, r9
 8024d66:	4d54      	ldr	r5, [pc, #336]	@ (8024eb8 <mg_str_to_num+0x28c>)
 8024d68:	fba5 9b06 	umull	r9, fp, r5, r6
 8024d6c:	f02b 0903 	bic.w	r9, fp, #3
 8024d70:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 8024d74:	eba6 0609 	sub.w	r6, r6, r9
 8024d78:	1b86      	subs	r6, r0, r6
 8024d7a:	f16e 0b00 	sbc.w	fp, lr, #0
 8024d7e:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 8024d82:	fb09 f906 	mul.w	r9, r9, r6
 8024d86:	fb05 990b 	mla	r9, r5, fp, r9
 8024d8a:	fba6 6a05 	umull	r6, sl, r6, r5
 8024d8e:	44d1      	add	r9, sl
 8024d90:	0876      	lsrs	r6, r6, #1
 8024d92:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 8024d96:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8024d9a:	4296      	cmp	r6, r2
 8024d9c:	eb79 0901 	sbcs.w	r9, r9, r1
 8024da0:	d37d      	bcc.n	8024e9e <mg_str_to_num+0x272>
        result *= 10;
 8024da2:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8024da6:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8024daa:	0096      	lsls	r6, r2, #2
 8024dac:	18b2      	adds	r2, r6, r2
 8024dae:	eb41 0909 	adc.w	r9, r1, r9
 8024db2:	1892      	adds	r2, r2, r2
 8024db4:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 8024db8:	ebb0 0a07 	subs.w	sl, r0, r7
 8024dbc:	eb6e 0108 	sbc.w	r1, lr, r8
 8024dc0:	4592      	cmp	sl, r2
 8024dc2:	eb71 0109 	sbcs.w	r1, r1, r9
 8024dc6:	d36c      	bcc.n	8024ea2 <mg_str_to_num+0x276>
        result += digit;
 8024dc8:	18ba      	adds	r2, r7, r2
 8024dca:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 8024dce:	f10c 0c01 	add.w	ip, ip, #1
 8024dd2:	3401      	adds	r4, #1
 8024dd4:	e7b1      	b.n	8024d3a <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024dd6:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 8024dda:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024ddc:	2f05      	cmp	r7, #5
 8024dde:	d832      	bhi.n	8024e46 <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024de0:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024de2:	46b0      	mov	r8, r6
 8024de4:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 8024de6:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8024dea:	bf08      	it	eq
 8024dec:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 8024df0:	d036      	beq.n	8024e60 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 8024df2:	ea4f 1910 	mov.w	r9, r0, lsr #4
 8024df6:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 8024dfa:	ea4f 171e 	mov.w	r7, lr, lsr #4
 8024dfe:	4591      	cmp	r9, r2
 8024e00:	418f      	sbcs	r7, r1
 8024e02:	d350      	bcc.n	8024ea6 <mg_str_to_num+0x27a>
        result *= 16;
 8024e04:	0109      	lsls	r1, r1, #4
 8024e06:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8024e0a:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 8024e0c:	ebb0 0908 	subs.w	r9, r0, r8
 8024e10:	eb6e 0706 	sbc.w	r7, lr, r6
 8024e14:	4591      	cmp	r9, r2
 8024e16:	418f      	sbcs	r7, r1
 8024e18:	d347      	bcc.n	8024eaa <mg_str_to_num+0x27e>
        result += digit;
 8024e1a:	eb18 0202 	adds.w	r2, r8, r2
 8024e1e:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 8024e22:	f10c 0c01 	add.w	ip, ip, #1
 8024e26:	3401      	adds	r4, #1
      while (i < str.len) {
 8024e28:	9d01      	ldr	r5, [sp, #4]
 8024e2a:	4565      	cmp	r5, ip
 8024e2c:	d918      	bls.n	8024e60 <mg_str_to_num+0x234>
        char c = str.buf[i];
 8024e2e:	9d00      	ldr	r5, [sp, #0]
 8024e30:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024e34:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024e38:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024e3a:	2f09      	cmp	r7, #9
 8024e3c:	d8cb      	bhi.n	8024dd6 <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024e3e:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024e40:	46b0      	mov	r8, r6
 8024e42:	17f6      	asrs	r6, r6, #31
 8024e44:	e7cf      	b.n	8024de6 <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024e46:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8024e4a:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8024e4c:	2f05      	cmp	r7, #5
 8024e4e:	d807      	bhi.n	8024e60 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024e50:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8024e52:	46b0      	mov	r8, r6
 8024e54:	17f6      	asrs	r6, r6, #31
 8024e56:	e7c6      	b.n	8024de6 <mg_str_to_num+0x1ba>
  switch (base) {
 8024e58:	2200      	movs	r2, #0
 8024e5a:	4611      	mov	r1, r2
 8024e5c:	4614      	mov	r4, r2
 8024e5e:	e7e3      	b.n	8024e28 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8024e60:	b32c      	cbz	r4, 8024eae <mg_str_to_num+0x282>
  if (i != str.len) return false;
 8024e62:	9801      	ldr	r0, [sp, #4]
 8024e64:	4560      	cmp	r0, ip
 8024e66:	d124      	bne.n	8024eb2 <mg_str_to_num+0x286>
  if (val_len == 1) {
 8024e68:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024e6a:	2801      	cmp	r0, #1
 8024e6c:	d009      	beq.n	8024e82 <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 8024e6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024e70:	2802      	cmp	r0, #2
 8024e72:	d008      	beq.n	8024e86 <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 8024e74:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024e76:	2804      	cmp	r0, #4
 8024e78:	d008      	beq.n	8024e8c <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8024e7a:	601a      	str	r2, [r3, #0]
 8024e7c:	6059      	str	r1, [r3, #4]
  return true;
 8024e7e:	2001      	movs	r0, #1
 8024e80:	e719      	b.n	8024cb6 <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 8024e82:	701a      	strb	r2, [r3, #0]
 8024e84:	e717      	b.n	8024cb6 <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 8024e86:	801a      	strh	r2, [r3, #0]
  return true;
 8024e88:	2001      	movs	r0, #1
 8024e8a:	e714      	b.n	8024cb6 <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8024e8c:	601a      	str	r2, [r3, #0]
  return true;
 8024e8e:	2001      	movs	r0, #1
 8024e90:	e711      	b.n	8024cb6 <mg_str_to_num+0x8a>
  switch (base) {
 8024e92:	2000      	movs	r0, #0
 8024e94:	e70f      	b.n	8024cb6 <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 8024e96:	2000      	movs	r0, #0
 8024e98:	e70d      	b.n	8024cb6 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024e9a:	2000      	movs	r0, #0
 8024e9c:	e70b      	b.n	8024cb6 <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8024e9e:	2000      	movs	r0, #0
 8024ea0:	e709      	b.n	8024cb6 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024ea2:	2000      	movs	r0, #0
 8024ea4:	e707      	b.n	8024cb6 <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 8024ea6:	2000      	movs	r0, #0
 8024ea8:	e705      	b.n	8024cb6 <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024eaa:	2000      	movs	r0, #0
 8024eac:	e703      	b.n	8024cb6 <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 8024eae:	2000      	movs	r0, #0
 8024eb0:	e701      	b.n	8024cb6 <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 8024eb2:	2000      	movs	r0, #0
 8024eb4:	e6ff      	b.n	8024cb6 <mg_str_to_num+0x8a>
 8024eb6:	bf00      	nop
 8024eb8:	cccccccd 	.word	0xcccccccd

08024ebc <mg_url_decode>:
                  int is_form_url_encoded) {
 8024ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ec0:	b087      	sub	sp, #28
 8024ec2:	4606      	mov	r6, r0
 8024ec4:	460f      	mov	r7, r1
 8024ec6:	4693      	mov	fp, r2
 8024ec8:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8024eca:	2400      	movs	r4, #0
 8024ecc:	4623      	mov	r3, r4
 8024ece:	e027      	b.n	8024f20 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8024ed0:	f103 0802 	add.w	r8, r3, #2
 8024ed4:	45b8      	cmp	r8, r7
 8024ed6:	d241      	bcs.n	8024f5c <mg_url_decode+0xa0>
 8024ed8:	3301      	adds	r3, #1
 8024eda:	18f2      	adds	r2, r6, r3
 8024edc:	9203      	str	r2, [sp, #12]
 8024ede:	5cf0      	ldrb	r0, [r6, r3]
 8024ee0:	f7fa feaa 	bl	801fc38 <isx>
 8024ee4:	2800      	cmp	r0, #0
 8024ee6:	d03c      	beq.n	8024f62 <mg_url_decode+0xa6>
 8024ee8:	f816 0008 	ldrb.w	r0, [r6, r8]
 8024eec:	f7fa fea4 	bl	801fc38 <isx>
 8024ef0:	2800      	cmp	r0, #0
 8024ef2:	d039      	beq.n	8024f68 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8024ef4:	f10d 0a10 	add.w	sl, sp, #16
 8024ef8:	2202      	movs	r2, #2
 8024efa:	9903      	ldr	r1, [sp, #12]
 8024efc:	4650      	mov	r0, sl
 8024efe:	f7ff f95b 	bl	80241b8 <mg_str_n>
 8024f02:	2301      	movs	r3, #1
 8024f04:	9300      	str	r3, [sp, #0]
 8024f06:	eb0b 0304 	add.w	r3, fp, r4
 8024f0a:	2210      	movs	r2, #16
 8024f0c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024f10:	f7ff fe8c 	bl	8024c2c <mg_str_to_num>
        i += 2;
 8024f14:	4643      	mov	r3, r8
 8024f16:	e001      	b.n	8024f1c <mg_url_decode+0x60>
      dst[j] = src[i];
 8024f18:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8024f1c:	3301      	adds	r3, #1
 8024f1e:	462c      	mov	r4, r5
 8024f20:	42bb      	cmp	r3, r7
 8024f22:	d20e      	bcs.n	8024f42 <mg_url_decode+0x86>
 8024f24:	1c65      	adds	r5, r4, #1
 8024f26:	454d      	cmp	r5, r9
 8024f28:	d20b      	bcs.n	8024f42 <mg_url_decode+0x86>
    if (src[i] == '%') {
 8024f2a:	5cf2      	ldrb	r2, [r6, r3]
 8024f2c:	2a25      	cmp	r2, #37	@ 0x25
 8024f2e:	d0cf      	beq.n	8024ed0 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8024f30:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024f32:	2900      	cmp	r1, #0
 8024f34:	d0f0      	beq.n	8024f18 <mg_url_decode+0x5c>
 8024f36:	2a2b      	cmp	r2, #43	@ 0x2b
 8024f38:	d1ee      	bne.n	8024f18 <mg_url_decode+0x5c>
      dst[j] = ' ';
 8024f3a:	2220      	movs	r2, #32
 8024f3c:	f80b 2004 	strb.w	r2, [fp, r4]
 8024f40:	e7ec      	b.n	8024f1c <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8024f42:	454c      	cmp	r4, r9
 8024f44:	d202      	bcs.n	8024f4c <mg_url_decode+0x90>
 8024f46:	2200      	movs	r2, #0
 8024f48:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8024f4c:	42bb      	cmp	r3, r7
 8024f4e:	d30e      	bcc.n	8024f6e <mg_url_decode+0xb2>
 8024f50:	454c      	cmp	r4, r9
 8024f52:	d20f      	bcs.n	8024f74 <mg_url_decode+0xb8>
 8024f54:	4620      	mov	r0, r4
}
 8024f56:	b007      	add	sp, #28
 8024f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8024f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f60:	e7f9      	b.n	8024f56 <mg_url_decode+0x9a>
 8024f62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f66:	e7f6      	b.n	8024f56 <mg_url_decode+0x9a>
 8024f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f6c:	e7f3      	b.n	8024f56 <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 8024f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f72:	e7f0      	b.n	8024f56 <mg_url_decode+0x9a>
 8024f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f78:	e7ed      	b.n	8024f56 <mg_url_decode+0x9a>

08024f7a <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 8024f7a:	b352      	cbz	r2, 8024fd2 <mg_http_get_var+0x58>
                    size_t dst_len) {
 8024f7c:	b570      	push	{r4, r5, r6, lr}
 8024f7e:	b086      	sub	sp, #24
 8024f80:	4604      	mov	r4, r0
 8024f82:	461d      	mov	r5, r3
 8024f84:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 8024f86:	b10b      	cbz	r3, 8024f8c <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8024f88:	2300      	movs	r3, #0
 8024f8a:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8024f8c:	b325      	cbz	r5, 8024fd8 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8024f8e:	6823      	ldr	r3, [r4, #0]
 8024f90:	b32b      	cbz	r3, 8024fde <mg_http_get_var+0x64>
 8024f92:	b339      	cbz	r1, 8024fe4 <mg_http_get_var+0x6a>
 8024f94:	6863      	ldr	r3, [r4, #4]
 8024f96:	b343      	cbz	r3, 8024fea <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8024f98:	a804      	add	r0, sp, #16
 8024f9a:	f7ff f901 	bl	80241a0 <mg_str_s>
 8024f9e:	9b05      	ldr	r3, [sp, #20]
 8024fa0:	9300      	str	r3, [sp, #0]
 8024fa2:	9b04      	ldr	r3, [sp, #16]
 8024fa4:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024fa8:	a802      	add	r0, sp, #8
 8024faa:	f7ff fbf3 	bl	8024794 <mg_http_var>
    if (v.buf == NULL) {
 8024fae:	9802      	ldr	r0, [sp, #8]
 8024fb0:	b158      	cbz	r0, 8024fca <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8024fb2:	2301      	movs	r3, #1
 8024fb4:	9300      	str	r3, [sp, #0]
 8024fb6:	462b      	mov	r3, r5
 8024fb8:	4632      	mov	r2, r6
 8024fba:	9903      	ldr	r1, [sp, #12]
 8024fbc:	f7ff ff7e 	bl	8024ebc <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 8024fc0:	2800      	cmp	r0, #0
 8024fc2:	da04      	bge.n	8024fce <mg_http_get_var+0x54>
 8024fc4:	f06f 0002 	mvn.w	r0, #2
 8024fc8:	e001      	b.n	8024fce <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 8024fca:	f06f 0003 	mvn.w	r0, #3
}
 8024fce:	b006      	add	sp, #24
 8024fd0:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 8024fd2:	f06f 0001 	mvn.w	r0, #1
}
 8024fd6:	4770      	bx	lr
    len = -2;  // Bad destination
 8024fd8:	f06f 0001 	mvn.w	r0, #1
 8024fdc:	e7f7      	b.n	8024fce <mg_http_get_var+0x54>
    len = -1;  // Bad source
 8024fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024fe2:	e7f4      	b.n	8024fce <mg_http_get_var+0x54>
 8024fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024fe8:	e7f1      	b.n	8024fce <mg_http_get_var+0x54>
 8024fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 8024fee:	e7ee      	b.n	8024fce <mg_http_get_var+0x54>

08024ff0 <mg_http_creds>:
                   char *pass, size_t passlen) {
 8024ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ff4:	b0c4      	sub	sp, #272	@ 0x110
 8024ff6:	4606      	mov	r6, r0
 8024ff8:	460d      	mov	r5, r1
 8024ffa:	4617      	mov	r7, r2
 8024ffc:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 8024ffe:	493f      	ldr	r1, [pc, #252]	@ (80250fc <mg_http_creds+0x10c>)
 8025000:	f7fd fd70 	bl	8022ae4 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 8025004:	2300      	movs	r3, #0
 8025006:	7023      	strb	r3, [r4, #0]
 8025008:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 802500a:	b1c8      	cbz	r0, 8025040 <mg_http_creds+0x50>
 802500c:	4680      	mov	r8, r0
 802500e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8025012:	f1b9 0f06 	cmp.w	r9, #6
 8025016:	d907      	bls.n	8025028 <mg_http_creds+0x38>
 8025018:	f8d0 a000 	ldr.w	sl, [r0]
 802501c:	2206      	movs	r2, #6
 802501e:	4938      	ldr	r1, [pc, #224]	@ (8025100 <mg_http_creds+0x110>)
 8025020:	4650      	mov	r0, sl
 8025022:	f007 fb99 	bl	802c758 <memcmp>
 8025026:	b328      	cbz	r0, 8025074 <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8025028:	f1b9 0f07 	cmp.w	r9, #7
 802502c:	d908      	bls.n	8025040 <mg_http_creds+0x50>
 802502e:	f8d8 5000 	ldr.w	r5, [r8]
 8025032:	2207      	movs	r2, #7
 8025034:	4933      	ldr	r1, [pc, #204]	@ (8025104 <mg_http_creds+0x114>)
 8025036:	4628      	mov	r0, r5
 8025038:	f007 fb8e 	bl	802c758 <memcmp>
 802503c:	2800      	cmp	r0, #0
 802503e:	d043      	beq.n	80250c8 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8025040:	4931      	ldr	r1, [pc, #196]	@ (8025108 <mg_http_creds+0x118>)
 8025042:	4630      	mov	r0, r6
 8025044:	f7fd fd4e 	bl	8022ae4 <mg_http_get_header>
 8025048:	4605      	mov	r5, r0
 802504a:	2800      	cmp	r0, #0
 802504c:	d04e      	beq.n	80250ec <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 802504e:	220c      	movs	r2, #12
 8025050:	492e      	ldr	r1, [pc, #184]	@ (802510c <mg_http_creds+0x11c>)
 8025052:	a842      	add	r0, sp, #264	@ 0x108
 8025054:	f7ff f8b0 	bl	80241b8 <mg_str_n>
 8025058:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802505a:	9300      	str	r3, [sp, #0]
 802505c:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802505e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8025062:	a802      	add	r0, sp, #8
 8025064:	f7ff f8c8 	bl	80241f8 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8025068:	9b03      	ldr	r3, [sp, #12]
 802506a:	2b00      	cmp	r3, #0
 802506c:	d136      	bne.n	80250dc <mg_http_creds+0xec>
}
 802506e:	b044      	add	sp, #272	@ 0x110
 8025070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 8025074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025078:	aa02      	add	r2, sp, #8
 802507a:	f1a9 0106 	sub.w	r1, r9, #6
 802507e:	f10a 0006 	add.w	r0, sl, #6
 8025082:	f7fd fba3 	bl	80227cc <mg_base64_decode>
 8025086:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8025088:	4602      	mov	r2, r0
 802508a:	213a      	movs	r1, #58	@ 0x3a
 802508c:	a802      	add	r0, sp, #8
 802508e:	f7eb f8b7 	bl	8010200 <memchr>
    if (p != NULL) {
 8025092:	4680      	mov	r8, r0
 8025094:	2800      	cmp	r0, #0
 8025096:	d0ea      	beq.n	802506e <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8025098:	ab02      	add	r3, sp, #8
 802509a:	eba0 0a03 	sub.w	sl, r0, r3
 802509e:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8025110 <mg_http_creds+0x120>
 80250a2:	9300      	str	r3, [sp, #0]
 80250a4:	4653      	mov	r3, sl
 80250a6:	464a      	mov	r2, r9
 80250a8:	4639      	mov	r1, r7
 80250aa:	4628      	mov	r0, r5
 80250ac:	f7fe f9f0 	bl	8023490 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 80250b0:	eba6 030a 	sub.w	r3, r6, sl
 80250b4:	f108 0201 	add.w	r2, r8, #1
 80250b8:	9200      	str	r2, [sp, #0]
 80250ba:	3b01      	subs	r3, #1
 80250bc:	464a      	mov	r2, r9
 80250be:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80250c0:	4620      	mov	r0, r4
 80250c2:	f7fe f9e5 	bl	8023490 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80250c6:	e7d2      	b.n	802506e <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 80250c8:	3507      	adds	r5, #7
 80250ca:	9500      	str	r5, [sp, #0]
 80250cc:	f1a9 0307 	sub.w	r3, r9, #7
 80250d0:	4a0f      	ldr	r2, [pc, #60]	@ (8025110 <mg_http_creds+0x120>)
 80250d2:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80250d4:	4620      	mov	r0, r4
 80250d6:	f7fe f9db 	bl	8023490 <mg_snprintf>
 80250da:	e7c8      	b.n	802506e <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80250dc:	9a02      	ldr	r2, [sp, #8]
 80250de:	9200      	str	r2, [sp, #0]
 80250e0:	4a0b      	ldr	r2, [pc, #44]	@ (8025110 <mg_http_creds+0x120>)
 80250e2:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80250e4:	4620      	mov	r0, r4
 80250e6:	f7fe f9d3 	bl	8023490 <mg_snprintf>
 80250ea:	e7c0      	b.n	802506e <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80250ec:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80250ee:	4622      	mov	r2, r4
 80250f0:	4906      	ldr	r1, [pc, #24]	@ (802510c <mg_http_creds+0x11c>)
 80250f2:	f106 0010 	add.w	r0, r6, #16
 80250f6:	f7ff ff40 	bl	8024f7a <mg_http_get_var>
}
 80250fa:	e7b8      	b.n	802506e <mg_http_creds+0x7e>
 80250fc:	0803a348 	.word	0x0803a348
 8025100:	0803a358 	.word	0x0803a358
 8025104:	0803a360 	.word	0x0803a360
 8025108:	0803a368 	.word	0x0803a368
 802510c:	08036804 	.word	0x08036804
 8025110:	0803a178 	.word	0x0803a178

08025114 <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 8025114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025118:	b0ae      	sub	sp, #184	@ 0xb8
 802511a:	4604      	mov	r4, r0
 802511c:	460d      	mov	r5, r1
 802511e:	4616      	mov	r6, r2
 8025120:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025122:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025126:	f1b8 0f00 	cmp.w	r8, #0
 802512a:	d04f      	beq.n	80251cc <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 802512c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802512e:	952b      	str	r5, [sp, #172]	@ 0xac
 8025130:	962c      	str	r6, [sp, #176]	@ 0xb0
 8025132:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8025134:	2300      	movs	r3, #0
 8025136:	9300      	str	r3, [sp, #0]
 8025138:	2380      	movs	r3, #128	@ 0x80
 802513a:	aa07      	add	r2, sp, #28
 802513c:	68e9      	ldr	r1, [r5, #12]
 802513e:	68a8      	ldr	r0, [r5, #8]
 8025140:	f7ff febc 	bl	8024ebc <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8025144:	1e02      	subs	r2, r0, #0
 8025146:	dd44      	ble.n	80251d2 <listdir+0xbe>
 8025148:	a907      	add	r1, sp, #28
 802514a:	a805      	add	r0, sp, #20
 802514c:	f7ff f834 	bl	80241b8 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8025150:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 8025152:	2a00      	cmp	r2, #0
 8025154:	d044      	beq.n	80251e0 <listdir+0xcc>
 8025156:	4923      	ldr	r1, [pc, #140]	@ (80251e4 <listdir+0xd0>)
 8025158:	4620      	mov	r0, r4
 802515a:	f7fe fe71 	bl	8023e40 <mg_printf>
  off = c->send.len;  // Start of body
 802515e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8025160:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 8025162:	9b05      	ldr	r3, [sp, #20]
 8025164:	9303      	str	r3, [sp, #12]
 8025166:	9202      	str	r2, [sp, #8]
 8025168:	491f      	ldr	r1, [pc, #124]	@ (80251e8 <listdir+0xd4>)
 802516a:	9101      	str	r1, [sp, #4]
 802516c:	491f      	ldr	r1, [pc, #124]	@ (80251ec <listdir+0xd8>)
 802516e:	9100      	str	r1, [sp, #0]
 8025170:	491f      	ldr	r1, [pc, #124]	@ (80251f0 <listdir+0xdc>)
 8025172:	4620      	mov	r0, r4
 8025174:	f7fe fe64 	bl	8023e40 <mg_printf>
  mg_printf(c, "%s",
 8025178:	4a1e      	ldr	r2, [pc, #120]	@ (80251f4 <listdir+0xe0>)
 802517a:	491f      	ldr	r1, [pc, #124]	@ (80251f8 <listdir+0xe4>)
 802517c:	4620      	mov	r0, r4
 802517e:	f7fe fe5f 	bl	8023e40 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 8025182:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025186:	aa2a      	add	r2, sp, #168	@ 0xa8
 8025188:	491c      	ldr	r1, [pc, #112]	@ (80251fc <listdir+0xe8>)
 802518a:	4638      	mov	r0, r7
 802518c:	4798      	blx	r3
  mg_printf(c,
 802518e:	4a1c      	ldr	r2, [pc, #112]	@ (8025200 <listdir+0xec>)
 8025190:	491c      	ldr	r1, [pc, #112]	@ (8025204 <listdir+0xf0>)
 8025192:	4620      	mov	r0, r4
 8025194:	f7fe fe54 	bl	8023e40 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8025198:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802519a:	1b5b      	subs	r3, r3, r5
 802519c:	4a1a      	ldr	r2, [pc, #104]	@ (8025208 <listdir+0xf4>)
 802519e:	210a      	movs	r1, #10
 80251a0:	a827      	add	r0, sp, #156	@ 0x9c
 80251a2:	f7fe f975 	bl	8023490 <mg_snprintf>
 80251a6:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 80251a8:	280a      	cmp	r0, #10
 80251aa:	d900      	bls.n	80251ae <listdir+0x9a>
 80251ac:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 80251ae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80251b0:	3d0c      	subs	r5, #12
 80251b2:	a927      	add	r1, sp, #156	@ 0x9c
 80251b4:	4428      	add	r0, r5
 80251b6:	f008 fd9f 	bl	802dcf8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 80251ba:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80251be:	f36f 13c7 	bfc	r3, #7, #1
 80251c2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80251c6:	b02e      	add	sp, #184	@ 0xb8
 80251c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80251cc:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8025210 <listdir+0xfc>
 80251d0:	e7ac      	b.n	802512c <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80251d2:	ab05      	add	r3, sp, #20
 80251d4:	3508      	adds	r5, #8
 80251d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80251da:	e883 0003 	stmia.w	r3, {r0, r1}
 80251de:	e7b7      	b.n	8025150 <listdir+0x3c>
  mg_printf(c,
 80251e0:	4a0a      	ldr	r2, [pc, #40]	@ (802520c <listdir+0xf8>)
 80251e2:	e7b8      	b.n	8025156 <listdir+0x42>
 80251e4:	0803a370 	.word	0x0803a370
 80251e8:	0803a550 	.word	0x0803a550
 80251ec:	0803a714 	.word	0x0803a714
 80251f0:	0803a3c8 	.word	0x0803a3c8
 80251f4:	0803a8dc 	.word	0x0803a8dc
 80251f8:	0803ad40 	.word	0x0803ad40
 80251fc:	080269bd 	.word	0x080269bd
 8025200:	08038264 	.word	0x08038264
 8025204:	0803a92c 	.word	0x0803a92c
 8025208:	0803aff0 	.word	0x0803aff0
 802520c:	08036a40 	.word	0x08036a40
 8025210:	20000130 	.word	0x20000130

08025214 <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8025214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025218:	b087      	sub	sp, #28
 802521a:	461f      	mov	r7, r3
  int i = 0, n = 0;
 802521c:	2300      	movs	r3, #0
 802521e:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8025220:	2902      	cmp	r1, #2
 8025222:	dd42      	ble.n	80252aa <skip_chunk+0x96>
 8025224:	4606      	mov	r6, r0
 8025226:	460d      	mov	r5, r1
 8025228:	4690      	mov	r8, r2
  int i = 0, n = 0;
 802522a:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 802522c:	42ac      	cmp	r4, r5
 802522e:	da05      	bge.n	802523c <skip_chunk+0x28>
 8025230:	5d30      	ldrb	r0, [r6, r4]
 8025232:	f7fb f92c 	bl	802048e <is_hex_digit>
 8025236:	b108      	cbz	r0, 802523c <skip_chunk+0x28>
 8025238:	3401      	adds	r4, #1
 802523a:	e7f7      	b.n	802522c <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 802523c:	2c00      	cmp	r4, #0
 802523e:	d036      	beq.n	80252ae <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8025240:	2c08      	cmp	r4, #8
 8025242:	dc37      	bgt.n	80252b4 <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8025244:	42ac      	cmp	r4, r5
 8025246:	da38      	bge.n	80252ba <skip_chunk+0xa6>
 8025248:	4622      	mov	r2, r4
 802524a:	5d33      	ldrb	r3, [r6, r4]
 802524c:	2b0d      	cmp	r3, #13
 802524e:	d137      	bne.n	80252c0 <skip_chunk+0xac>
 8025250:	1933      	adds	r3, r6, r4
 8025252:	785b      	ldrb	r3, [r3, #1]
 8025254:	2b0a      	cmp	r3, #10
 8025256:	d136      	bne.n	80252c6 <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8025258:	f10d 0910 	add.w	r9, sp, #16
 802525c:	4631      	mov	r1, r6
 802525e:	4648      	mov	r0, r9
 8025260:	f7fe ffaa 	bl	80241b8 <mg_str_n>
 8025264:	2304      	movs	r3, #4
 8025266:	9300      	str	r3, [sp, #0]
 8025268:	ab03      	add	r3, sp, #12
 802526a:	2210      	movs	r2, #16
 802526c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8025270:	f7ff fcdc 	bl	8024c2c <mg_str_to_num>
 8025274:	b350      	cbz	r0, 80252cc <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8025276:	9b03      	ldr	r3, [sp, #12]
 8025278:	2b00      	cmp	r3, #0
 802527a:	db2a      	blt.n	80252d2 <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 802527c:	1b2d      	subs	r5, r5, r4
 802527e:	3d03      	subs	r5, #3
 8025280:	42ab      	cmp	r3, r5
 8025282:	da29      	bge.n	80252d8 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8025284:	4423      	add	r3, r4
 8025286:	18f2      	adds	r2, r6, r3
 8025288:	7892      	ldrb	r2, [r2, #2]
 802528a:	2a0d      	cmp	r2, #13
 802528c:	d126      	bne.n	80252dc <skip_chunk+0xc8>
 802528e:	441e      	add	r6, r3
 8025290:	78f3      	ldrb	r3, [r6, #3]
 8025292:	2b0a      	cmp	r3, #10
 8025294:	d125      	bne.n	80252e2 <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8025296:	3402      	adds	r4, #2
 8025298:	f8c8 4000 	str.w	r4, [r8]
 802529c:	9b03      	ldr	r3, [sp, #12]
 802529e:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 80252a0:	441c      	add	r4, r3
 80252a2:	1ca0      	adds	r0, r4, #2
}
 80252a4:	b007      	add	sp, #28
 80252a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 80252aa:	2000      	movs	r0, #0
 80252ac:	e7fa      	b.n	80252a4 <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 80252ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252b2:	e7f7      	b.n	80252a4 <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80252b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252b8:	e7f4      	b.n	80252a4 <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80252ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252be:	e7f1      	b.n	80252a4 <skip_chunk+0x90>
 80252c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252c4:	e7ee      	b.n	80252a4 <skip_chunk+0x90>
 80252c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252ca:	e7eb      	b.n	80252a4 <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 80252cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252d0:	e7e8      	b.n	80252a4 <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80252d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252d6:	e7e5      	b.n	80252a4 <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80252d8:	2000      	movs	r0, #0
 80252da:	e7e3      	b.n	80252a4 <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 80252dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252e0:	e7e0      	b.n	80252a4 <skip_chunk+0x90>
 80252e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80252e6:	e7dd      	b.n	80252a4 <skip_chunk+0x90>

080252e8 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 80252e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80252ec:	b086      	sub	sp, #24
 80252ee:	ac02      	add	r4, sp, #8
 80252f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80252f4:	4617      	mov	r7, r2
 80252f6:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80252f8:	2400      	movs	r4, #0
 80252fa:	4621      	mov	r1, r4
 80252fc:	e01c      	b.n	8025338 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 80252fe:	f101 0805 	add.w	r8, r1, #5
 8025302:	45a8      	cmp	r8, r5
 8025304:	d221      	bcs.n	802534a <mg_json_unescape+0x62>
 8025306:	185a      	adds	r2, r3, r1
 8025308:	7852      	ldrb	r2, [r2, #1]
 802530a:	2a75      	cmp	r2, #117	@ 0x75
 802530c:	d11d      	bne.n	802534a <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 802530e:	3102      	adds	r1, #2
 8025310:	ad04      	add	r5, sp, #16
 8025312:	2204      	movs	r2, #4
 8025314:	4419      	add	r1, r3
 8025316:	4628      	mov	r0, r5
 8025318:	f7fe ff4e 	bl	80241b8 <mg_str_n>
 802531c:	2301      	movs	r3, #1
 802531e:	9300      	str	r3, [sp, #0]
 8025320:	193b      	adds	r3, r7, r4
 8025322:	2210      	movs	r2, #16
 8025324:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025328:	f7ff fc80 	bl	8024c2c <mg_str_to_num>
 802532c:	b308      	cbz	r0, 8025372 <mg_json_unescape+0x8a>
      i += 5;
 802532e:	4641      	mov	r1, r8
 8025330:	e000      	b.n	8025334 <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8025332:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8025334:	3101      	adds	r1, #1
 8025336:	3401      	adds	r4, #1
 8025338:	9d03      	ldr	r5, [sp, #12]
 802533a:	428d      	cmp	r5, r1
 802533c:	d914      	bls.n	8025368 <mg_json_unescape+0x80>
 802533e:	42b4      	cmp	r4, r6
 8025340:	d212      	bcs.n	8025368 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8025342:	9b02      	ldr	r3, [sp, #8]
 8025344:	5c58      	ldrb	r0, [r3, r1]
 8025346:	285c      	cmp	r0, #92	@ 0x5c
 8025348:	d0d9      	beq.n	80252fe <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 802534a:	285c      	cmp	r0, #92	@ 0x5c
 802534c:	d1f1      	bne.n	8025332 <mg_json_unescape+0x4a>
 802534e:	f101 0801 	add.w	r8, r1, #1
 8025352:	45a8      	cmp	r8, r5
 8025354:	d2ed      	bcs.n	8025332 <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8025356:	2100      	movs	r1, #0
 8025358:	f813 0008 	ldrb.w	r0, [r3, r8]
 802535c:	f7fb f8bc 	bl	80204d8 <json_esc>
      if (c == 0) return false;
 8025360:	b150      	cbz	r0, 8025378 <mg_json_unescape+0x90>
      to[j] = c;
 8025362:	5538      	strb	r0, [r7, r4]
      i++;
 8025364:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8025366:	e7e5      	b.n	8025334 <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8025368:	42b4      	cmp	r4, r6
 802536a:	d207      	bcs.n	802537c <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 802536c:	2300      	movs	r3, #0
 802536e:	553b      	strb	r3, [r7, r4]
  return true;
 8025370:	2001      	movs	r0, #1
}
 8025372:	b006      	add	sp, #24
 8025374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8025378:	2000      	movs	r0, #0
 802537a:	e7fa      	b.n	8025372 <mg_json_unescape+0x8a>
  if (j >= n) return false;
 802537c:	2000      	movs	r0, #0
 802537e:	e7f8      	b.n	8025372 <mg_json_unescape+0x8a>

08025380 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8025380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025382:	b087      	sub	sp, #28
 8025384:	46ec      	mov	ip, sp
 8025386:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 802538a:	2300      	movs	r3, #0
 802538c:	9303      	str	r3, [sp, #12]
 802538e:	ab03      	add	r3, sp, #12
 8025390:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8025394:	f7fd fbd6 	bl	8022b44 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8025398:	1e04      	subs	r4, r0, #0
 802539a:	db25      	blt.n	80253e8 <mg_json_get_str+0x68>
 802539c:	9903      	ldr	r1, [sp, #12]
 802539e:	2901      	cmp	r1, #1
 80253a0:	dd24      	ble.n	80253ec <mg_json_get_str+0x6c>
 80253a2:	9e00      	ldr	r6, [sp, #0]
 80253a4:	5d33      	ldrb	r3, [r6, r4]
 80253a6:	2b22      	cmp	r3, #34	@ 0x22
 80253a8:	d003      	beq.n	80253b2 <mg_json_get_str+0x32>
  char *result = NULL;
 80253aa:	2500      	movs	r5, #0
}
 80253ac:	4628      	mov	r0, r5
 80253ae:	b007      	add	sp, #28
 80253b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80253b2:	2001      	movs	r0, #1
 80253b4:	f7fd f93c 	bl	8022630 <mg_calloc>
 80253b8:	4605      	mov	r5, r0
 80253ba:	2800      	cmp	r0, #0
 80253bc:	d0f6      	beq.n	80253ac <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 80253be:	1c61      	adds	r1, r4, #1
 80253c0:	9f03      	ldr	r7, [sp, #12]
 80253c2:	ac04      	add	r4, sp, #16
 80253c4:	1eba      	subs	r2, r7, #2
 80253c6:	4431      	add	r1, r6
 80253c8:	4620      	mov	r0, r4
 80253ca:	f7fe fef5 	bl	80241b8 <mg_str_n>
 80253ce:	463b      	mov	r3, r7
 80253d0:	462a      	mov	r2, r5
 80253d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80253d6:	f7ff ff87 	bl	80252e8 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80253da:	2800      	cmp	r0, #0
 80253dc:	d1e6      	bne.n	80253ac <mg_json_get_str+0x2c>
      free(result);
 80253de:	4628      	mov	r0, r5
 80253e0:	f7f5 fa9c 	bl	801a91c <vPortFree>
      result = NULL;
 80253e4:	2500      	movs	r5, #0
 80253e6:	e7e1      	b.n	80253ac <mg_json_get_str+0x2c>
  char *result = NULL;
 80253e8:	2500      	movs	r5, #0
 80253ea:	e7df      	b.n	80253ac <mg_json_get_str+0x2c>
 80253ec:	2500      	movs	r5, #0
 80253ee:	e7dd      	b.n	80253ac <mg_json_get_str+0x2c>

080253f0 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80253f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80253f4:	b08a      	sub	sp, #40	@ 0x28
 80253f6:	ab02      	add	r3, sp, #8
 80253f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80253fc:	4617      	mov	r7, r2
  addr->scope_id = 0;
 80253fe:	2300      	movs	r3, #0
 8025400:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025402:	2902      	cmp	r1, #2
 8025404:	d904      	bls.n	8025410 <mg_aton6+0x20>
 8025406:	460b      	mov	r3, r1
 8025408:	4602      	mov	r2, r0
 802540a:	7801      	ldrb	r1, [r0, #0]
 802540c:	295b      	cmp	r1, #91	@ 0x5b
 802540e:	d00f      	beq.n	8025430 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8025410:	463a      	mov	r2, r7
 8025412:	ab02      	add	r3, sp, #8
 8025414:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025418:	f7fe ff40 	bl	802429c <mg_v4mapped>
 802541c:	4680      	mov	r8, r0
 802541e:	2800      	cmp	r0, #0
 8025420:	f040 8087 	bne.w	8025532 <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8025424:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8025428:	2600      	movs	r6, #0
 802542a:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 802542c:	4634      	mov	r4, r6
 802542e:	e020      	b.n	8025472 <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8025430:	3201      	adds	r2, #1
 8025432:	9202      	str	r2, [sp, #8]
 8025434:	3b02      	subs	r3, #2
 8025436:	9303      	str	r3, [sp, #12]
 8025438:	e7ea      	b.n	8025410 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 802543a:	2300      	movs	r3, #0
 802543c:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 802543e:	1ceb      	adds	r3, r5, #3
 8025440:	42a3      	cmp	r3, r4
 8025442:	d376      	bcc.n	8025532 <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8025444:	1b62      	subs	r2, r4, r5
 8025446:	f10d 0a18 	add.w	sl, sp, #24
 802544a:	3201      	adds	r2, #1
 802544c:	4429      	add	r1, r5
 802544e:	4650      	mov	r0, sl
 8025450:	f7fe feb2 	bl	80241b8 <mg_str_n>
 8025454:	2304      	movs	r3, #4
 8025456:	9300      	str	r3, [sp, #0]
 8025458:	ab05      	add	r3, sp, #20
 802545a:	2210      	movs	r2, #16
 802545c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8025460:	f7ff fbe4 	bl	8024c2c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8025464:	9b05      	ldr	r3, [sp, #20]
 8025466:	f3c3 2207 	ubfx	r2, r3, #8, #8
 802546a:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 802546c:	1c72      	adds	r2, r6, #1
 802546e:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8025470:	3401      	adds	r4, #1
 8025472:	9803      	ldr	r0, [sp, #12]
 8025474:	42a0      	cmp	r0, r4
 8025476:	d941      	bls.n	80254fc <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8025478:	9902      	ldr	r1, [sp, #8]
 802547a:	5d0a      	ldrb	r2, [r1, r4]
 802547c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8025480:	b2db      	uxtb	r3, r3
 8025482:	2b09      	cmp	r3, #9
 8025484:	d9d9      	bls.n	802543a <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025486:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 802548a:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 802548c:	2b05      	cmp	r3, #5
 802548e:	d9d4      	bls.n	802543a <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8025490:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8025494:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8025496:	2b05      	cmp	r3, #5
 8025498:	d9cf      	bls.n	802543a <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 802549a:	2a3a      	cmp	r2, #58	@ 0x3a
 802549c:	d119      	bne.n	80254d2 <mg_aton6+0xe2>
      j = i + 1;
 802549e:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 80254a0:	b12c      	cbz	r4, 80254ae <mg_aton6+0xbe>
 80254a2:	190b      	adds	r3, r1, r4
 80254a4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80254a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80254aa:	d007      	beq.n	80254bc <mg_aton6+0xcc>
        n += 2;
 80254ac:	3602      	adds	r6, #2
      if (n > 14) return false;
 80254ae:	2e0e      	cmp	r6, #14
 80254b0:	d83f      	bhi.n	8025532 <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 80254b2:	1c73      	adds	r3, r6, #1
 80254b4:	2200      	movs	r2, #0
 80254b6:	54fa      	strb	r2, [r7, r3]
 80254b8:	55ba      	strb	r2, [r7, r6]
 80254ba:	e7d9      	b.n	8025470 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 80254bc:	2c01      	cmp	r4, #1
 80254be:	d906      	bls.n	80254ce <mg_aton6+0xde>
 80254c0:	4421      	add	r1, r4
 80254c2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80254c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80254c8:	d033      	beq.n	8025532 <mg_aton6+0x142>
        dc = n;  // Double colon
 80254ca:	46b1      	mov	r9, r6
 80254cc:	e7ef      	b.n	80254ae <mg_aton6+0xbe>
 80254ce:	46b1      	mov	r9, r6
 80254d0:	e7ed      	b.n	80254ae <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 80254d2:	2a25      	cmp	r2, #37	@ 0x25
 80254d4:	d12d      	bne.n	8025532 <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 80254d6:	1c63      	adds	r3, r4, #1
 80254d8:	1b02      	subs	r2, r0, r4
 80254da:	ac08      	add	r4, sp, #32
 80254dc:	3a01      	subs	r2, #1
 80254de:	4419      	add	r1, r3
 80254e0:	4620      	mov	r0, r4
 80254e2:	f7fe fe69 	bl	80241b8 <mg_str_n>
 80254e6:	2301      	movs	r3, #1
 80254e8:	9300      	str	r3, [sp, #0]
 80254ea:	f107 0312 	add.w	r3, r7, #18
 80254ee:	220a      	movs	r2, #10
 80254f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80254f4:	f7ff fb9a 	bl	8024c2c <mg_str_to_num>
 80254f8:	4680      	mov	r8, r0
 80254fa:	e01a      	b.n	8025532 <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 80254fc:	2e0d      	cmp	r6, #13
 80254fe:	d814      	bhi.n	802552a <mg_aton6+0x13a>
 8025500:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8025504:	d015      	beq.n	8025532 <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8025506:	eba9 0006 	sub.w	r0, r9, r6
 802550a:	300e      	adds	r0, #14
 802550c:	eb07 0409 	add.w	r4, r7, r9
 8025510:	eba6 0209 	sub.w	r2, r6, r9
 8025514:	3202      	adds	r2, #2
 8025516:	4621      	mov	r1, r4
 8025518:	4438      	add	r0, r7
 802551a:	f007 f997 	bl	802c84c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 802551e:	f1c6 020e 	rsb	r2, r6, #14
 8025522:	2100      	movs	r1, #0
 8025524:	4620      	mov	r0, r4
 8025526:	f007 f9ab 	bl	802c880 <memset>
  addr->is_ip6 = true;
 802552a:	f04f 0801 	mov.w	r8, #1
 802552e:	f887 8013 	strb.w	r8, [r7, #19]
}
 8025532:	4640      	mov	r0, r8
 8025534:	b00a      	add	sp, #40	@ 0x28
 8025536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802553a <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 802553a:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 802553c:	2400      	movs	r4, #0
 802553e:	600c      	str	r4, [r1, #0]
 8025540:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8025544:	2200      	movs	r2, #0
 8025546:	2300      	movs	r3, #0
 8025548:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 802554c:	9b01      	ldr	r3, [sp, #4]
 802554e:	618b      	str	r3, [r1, #24]
 8025550:	9b02      	ldr	r3, [sp, #8]
 8025552:	61cb      	str	r3, [r1, #28]
 8025554:	9b03      	ldr	r3, [sp, #12]
 8025556:	620b      	str	r3, [r1, #32]
 8025558:	6803      	ldr	r3, [r0, #0]
 802555a:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 802555c:	6001      	str	r1, [r0, #0]
}
 802555e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025562:	4770      	bx	lr

08025564 <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8025564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025566:	b085      	sub	sp, #20
 8025568:	4604      	mov	r4, r0
 802556a:	4616      	mov	r6, r2
 802556c:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 802556e:	2128      	movs	r1, #40	@ 0x28
 8025570:	2001      	movs	r0, #1
 8025572:	f7fd f85d 	bl	8022630 <mg_calloc>
  if (t != NULL) {
 8025576:	4607      	mov	r7, r0
 8025578:	b180      	cbz	r0, 802559c <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 802557a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802557c:	9302      	str	r3, [sp, #8]
 802557e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025580:	9301      	str	r3, [sp, #4]
 8025582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025584:	9300      	str	r3, [sp, #0]
 8025586:	4632      	mov	r2, r6
 8025588:	462b      	mov	r3, r5
 802558a:	4601      	mov	r1, r0
 802558c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8025590:	f7ff ffd3 	bl	802553a <mg_timer_init>
    t->id = mgr->timerid++;
 8025594:	6a23      	ldr	r3, [r4, #32]
 8025596:	1c5a      	adds	r2, r3, #1
 8025598:	6222      	str	r2, [r4, #32]
 802559a:	603b      	str	r3, [r7, #0]
}
 802559c:	4638      	mov	r0, r7
 802559e:	b005      	add	sp, #20
 80255a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80255a2:	0000      	movs	r0, r0
 80255a4:	0000      	movs	r0, r0
	...

080255a8 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80255a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255ac:	4698      	mov	r8, r3
 80255ae:	9906      	ldr	r1, [sp, #24]
 80255b0:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80255b2:	188e      	adds	r6, r1, r2
 80255b4:	eb43 0504 	adc.w	r5, r3, r4
 80255b8:	6847      	ldr	r7, [r0, #4]
 80255ba:	6803      	ldr	r3, [r0, #0]
 80255bc:	429e      	cmp	r6, r3
 80255be:	eb75 0707 	sbcs.w	r7, r5, r7
 80255c2:	d203      	bcs.n	80255cc <mg_timer_expired+0x24>
 80255c4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8025608 <mg_timer_expired+0x60>
 80255c8:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80255cc:	6847      	ldr	r7, [r0, #4]
 80255ce:	6803      	ldr	r3, [r0, #0]
 80255d0:	431f      	orrs	r7, r3
 80255d2:	d101      	bne.n	80255d8 <mg_timer_expired+0x30>
 80255d4:	6006      	str	r6, [r0, #0]
 80255d6:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 80255d8:	6807      	ldr	r7, [r0, #0]
 80255da:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80255de:	42b9      	cmp	r1, r7
 80255e0:	eb74 0e0c 	sbcs.w	lr, r4, ip
 80255e4:	d30e      	bcc.n	8025604 <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80255e6:	1bc9      	subs	r1, r1, r7
 80255e8:	eb64 040c 	sbc.w	r4, r4, ip
 80255ec:	428a      	cmp	r2, r1
 80255ee:	eb78 0404 	sbcs.w	r4, r8, r4
 80255f2:	d302      	bcc.n	80255fa <mg_timer_expired+0x52>
 80255f4:	18be      	adds	r6, r7, r2
 80255f6:	eb4c 0508 	adc.w	r5, ip, r8
 80255fa:	6006      	str	r6, [r0, #0]
 80255fc:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 80255fe:	2001      	movs	r0, #1
}
 8025600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8025604:	2000      	movs	r0, #0
 8025606:	e7fb      	b.n	8025600 <mg_timer_expired+0x58>
	...

08025610 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8025610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025614:	b082      	sub	sp, #8
 8025616:	4617      	mov	r7, r2
 8025618:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 802561a:	6804      	ldr	r4, [r0, #0]
 802561c:	e019      	b.n	8025652 <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 802561e:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8025620:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8025624:	9700      	str	r7, [sp, #0]
 8025626:	9601      	str	r6, [sp, #4]
 8025628:	f104 0010 	add.w	r0, r4, #16
 802562c:	f7ff ffbc 	bl	80255a8 <mg_timer_expired>
    tmp = t->next;
 8025630:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8025634:	b905      	cbnz	r5, 8025638 <mg_timer_poll+0x28>
 8025636:	b158      	cbz	r0, 8025650 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8025638:	69a3      	ldr	r3, [r4, #24]
 802563a:	f003 0305 	and.w	r3, r3, #5
 802563e:	2b04      	cmp	r3, #4
 8025640:	d002      	beq.n	8025648 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8025642:	69e3      	ldr	r3, [r4, #28]
 8025644:	6a20      	ldr	r0, [r4, #32]
 8025646:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8025648:	69a1      	ldr	r1, [r4, #24]
 802564a:	f041 0104 	orr.w	r1, r1, #4
 802564e:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025650:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 8025652:	b164      	cbz	r4, 802566e <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8025654:	6923      	ldr	r3, [r4, #16]
 8025656:	6962      	ldr	r2, [r4, #20]
 8025658:	4313      	orrs	r3, r2
 802565a:	d1e0      	bne.n	802561e <mg_timer_poll+0xe>
 802565c:	69a3      	ldr	r3, [r4, #24]
 802565e:	f003 0306 	and.w	r3, r3, #6
 8025662:	2b02      	cmp	r3, #2
 8025664:	d001      	beq.n	802566a <mg_timer_poll+0x5a>
 8025666:	2500      	movs	r5, #0
 8025668:	e7da      	b.n	8025620 <mg_timer_poll+0x10>
 802566a:	2501      	movs	r5, #1
 802566c:	e7d8      	b.n	8025620 <mg_timer_poll+0x10>
}
 802566e:	b002      	add	sp, #8
 8025670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08025674 <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8025674:	b118      	cbz	r0, 802567e <mg_tls_recv+0xa>
 8025676:	b121      	cbz	r1, 8025682 <mg_tls_recv+0xe>
 8025678:	b92a      	cbnz	r2, 8025686 <mg_tls_recv+0x12>
 802567a:	2000      	movs	r0, #0
 802567c:	4770      	bx	lr
 802567e:	2000      	movs	r0, #0
 8025680:	4770      	bx	lr
 8025682:	2000      	movs	r0, #0
 8025684:	4770      	bx	lr
 8025686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 802568a:	4770      	bx	lr

0802568c <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 802568c:	b118      	cbz	r0, 8025696 <mg_tls_send+0xa>
 802568e:	b121      	cbz	r1, 802569a <mg_tls_send+0xe>
 8025690:	b92a      	cbnz	r2, 802569e <mg_tls_send+0x12>
 8025692:	2000      	movs	r0, #0
 8025694:	4770      	bx	lr
 8025696:	2000      	movs	r0, #0
 8025698:	4770      	bx	lr
 802569a:	2000      	movs	r0, #0
 802569c:	4770      	bx	lr
 802569e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80256a2:	4770      	bx	lr

080256a4 <mg_tls_pending>:
}
 80256a4:	2000      	movs	r0, #0
 80256a6:	4770      	bx	lr

080256a8 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 80256a8:	b510      	push	{r4, lr}
 80256aa:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80256ac:	2204      	movs	r2, #4
 80256ae:	4918      	ldr	r1, [pc, #96]	@ (8025710 <mg_url_is_ssl+0x68>)
 80256b0:	f007 f91b 	bl	802c8ea <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80256b4:	b1f8      	cbz	r0, 80256f6 <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80256b6:	2206      	movs	r2, #6
 80256b8:	4916      	ldr	r1, [pc, #88]	@ (8025714 <mg_url_is_ssl+0x6c>)
 80256ba:	4620      	mov	r0, r4
 80256bc:	f007 f915 	bl	802c8ea <strncmp>
 80256c0:	b1d8      	cbz	r0, 80256fa <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80256c2:	2206      	movs	r2, #6
 80256c4:	4914      	ldr	r1, [pc, #80]	@ (8025718 <mg_url_is_ssl+0x70>)
 80256c6:	4620      	mov	r0, r4
 80256c8:	f007 f90f 	bl	802c8ea <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80256cc:	b1b8      	cbz	r0, 80256fe <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80256ce:	2204      	movs	r2, #4
 80256d0:	4912      	ldr	r1, [pc, #72]	@ (802571c <mg_url_is_ssl+0x74>)
 80256d2:	4620      	mov	r0, r4
 80256d4:	f007 f909 	bl	802c8ea <strncmp>
 80256d8:	b198      	cbz	r0, 8025702 <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80256da:	2204      	movs	r2, #4
 80256dc:	4910      	ldr	r1, [pc, #64]	@ (8025720 <mg_url_is_ssl+0x78>)
 80256de:	4620      	mov	r0, r4
 80256e0:	f007 f903 	bl	802c8ea <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80256e4:	b178      	cbz	r0, 8025706 <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80256e6:	2205      	movs	r2, #5
 80256e8:	490e      	ldr	r1, [pc, #56]	@ (8025724 <mg_url_is_ssl+0x7c>)
 80256ea:	4620      	mov	r0, r4
 80256ec:	f007 f8fd 	bl	802c8ea <strncmp>
 80256f0:	b958      	cbnz	r0, 802570a <mg_url_is_ssl+0x62>
 80256f2:	2001      	movs	r0, #1
 80256f4:	e000      	b.n	80256f8 <mg_url_is_ssl+0x50>
 80256f6:	2001      	movs	r0, #1
}
 80256f8:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80256fa:	2001      	movs	r0, #1
 80256fc:	e7fc      	b.n	80256f8 <mg_url_is_ssl+0x50>
 80256fe:	2001      	movs	r0, #1
 8025700:	e7fa      	b.n	80256f8 <mg_url_is_ssl+0x50>
 8025702:	2001      	movs	r0, #1
 8025704:	e7f8      	b.n	80256f8 <mg_url_is_ssl+0x50>
 8025706:	2001      	movs	r0, #1
 8025708:	e7f6      	b.n	80256f8 <mg_url_is_ssl+0x50>
 802570a:	2000      	movs	r0, #0
 802570c:	e7f4      	b.n	80256f8 <mg_url_is_ssl+0x50>
 802570e:	bf00      	nop
 8025710:	0803a9a0 	.word	0x0803a9a0
 8025714:	0803a9a8 	.word	0x0803a9a8
 8025718:	0803a9b0 	.word	0x0803a9b0
 802571c:	0803a9b8 	.word	0x0803a9b8
 8025720:	0803a9c0 	.word	0x0803a9c0
 8025724:	0803a9c8 	.word	0x0803a9c8

08025728 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8025728:	b530      	push	{r4, r5, lr}
 802572a:	b089      	sub	sp, #36	@ 0x24
 802572c:	4604      	mov	r4, r0
 802572e:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8025730:	a801      	add	r0, sp, #4
 8025732:	f7fb feeb 	bl	802150c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8025736:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8025738:	b152      	cbz	r2, 8025750 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 802573a:	9b04      	ldr	r3, [sp, #16]
 802573c:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 802573e:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8025740:	9904      	ldr	r1, [sp, #16]
 8025742:	4429      	add	r1, r5
 8025744:	4620      	mov	r0, r4
 8025746:	f7fe fd37 	bl	80241b8 <mg_str_n>
}
 802574a:	4620      	mov	r0, r4
 802574c:	b009      	add	sp, #36	@ 0x24
 802574e:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8025750:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8025752:	b112      	cbz	r2, 802575a <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8025754:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8025756:	1ad2      	subs	r2, r2, r3
 8025758:	e7f2      	b.n	8025740 <mg_url_host+0x18>
 802575a:	9a07      	ldr	r2, [sp, #28]
 802575c:	9b04      	ldr	r3, [sp, #16]
 802575e:	1ad2      	subs	r2, r2, r3
 8025760:	e7ee      	b.n	8025740 <mg_url_host+0x18>
	...

08025764 <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8025764:	b530      	push	{r4, r5, lr}
 8025766:	b089      	sub	sp, #36	@ 0x24
 8025768:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 802576a:	4601      	mov	r1, r0
 802576c:	a801      	add	r0, sp, #4
 802576e:	f7fb fecd 	bl	802150c <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8025772:	2205      	movs	r2, #5
 8025774:	491d      	ldr	r1, [pc, #116]	@ (80257ec <mg_url_port+0x88>)
 8025776:	4620      	mov	r0, r4
 8025778:	f007 f8b7 	bl	802c8ea <strncmp>
 802577c:	b138      	cbz	r0, 802578e <mg_url_port+0x2a>
 802577e:	2203      	movs	r2, #3
 8025780:	491b      	ldr	r1, [pc, #108]	@ (80257f0 <mg_url_port+0x8c>)
 8025782:	4620      	mov	r0, r4
 8025784:	f007 f8b1 	bl	802c8ea <strncmp>
 8025788:	b188      	cbz	r0, 80257ae <mg_url_port+0x4a>
  unsigned short port = 0;
 802578a:	2500      	movs	r5, #0
 802578c:	e000      	b.n	8025790 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 802578e:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8025790:	2204      	movs	r2, #4
 8025792:	4918      	ldr	r1, [pc, #96]	@ (80257f4 <mg_url_port+0x90>)
 8025794:	4620      	mov	r0, r4
 8025796:	f007 f8a8 	bl	802c8ea <strncmp>
 802579a:	b150      	cbz	r0, 80257b2 <mg_url_port+0x4e>
 802579c:	2206      	movs	r2, #6
 802579e:	4916      	ldr	r1, [pc, #88]	@ (80257f8 <mg_url_port+0x94>)
 80257a0:	4620      	mov	r0, r4
 80257a2:	f007 f8a2 	bl	802c8ea <strncmp>
 80257a6:	b930      	cbnz	r0, 80257b6 <mg_url_port+0x52>
    port = 443;
 80257a8:	f240 15bb 	movw	r5, #443	@ 0x1bb
 80257ac:	e003      	b.n	80257b6 <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80257ae:	2550      	movs	r5, #80	@ 0x50
 80257b0:	e7ee      	b.n	8025790 <mg_url_port+0x2c>
    port = 443;
 80257b2:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80257b6:	2205      	movs	r2, #5
 80257b8:	4910      	ldr	r1, [pc, #64]	@ (80257fc <mg_url_port+0x98>)
 80257ba:	4620      	mov	r0, r4
 80257bc:	f007 f895 	bl	802c8ea <strncmp>
 80257c0:	b908      	cbnz	r0, 80257c6 <mg_url_port+0x62>
 80257c2:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 80257c6:	2206      	movs	r2, #6
 80257c8:	490d      	ldr	r1, [pc, #52]	@ (8025800 <mg_url_port+0x9c>)
 80257ca:	4620      	mov	r0, r4
 80257cc:	f007 f88d 	bl	802c8ea <strncmp>
 80257d0:	b908      	cbnz	r0, 80257d6 <mg_url_port+0x72>
 80257d2:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 80257d6:	9805      	ldr	r0, [sp, #20]
 80257d8:	b910      	cbnz	r0, 80257e0 <mg_url_port+0x7c>
}
 80257da:	4628      	mov	r0, r5
 80257dc:	b009      	add	sp, #36	@ 0x24
 80257de:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 80257e0:	4420      	add	r0, r4
 80257e2:	f004 fb19 	bl	8029e18 <atoi>
 80257e6:	b285      	uxth	r5, r0
 80257e8:	e7f7      	b.n	80257da <mg_url_port+0x76>
 80257ea:	bf00      	nop
 80257ec:	0803a9d0 	.word	0x0803a9d0
 80257f0:	0803a9d8 	.word	0x0803a9d8
 80257f4:	0803a9a0 	.word	0x0803a9a0
 80257f8:	0803a9a8 	.word	0x0803a9a8
 80257fc:	0803a9dc 	.word	0x0803a9dc
 8025800:	0803a9b0 	.word	0x0803a9b0

08025804 <mg_bzero>:
  if (buf != NULL) {
 8025804:	4603      	mov	r3, r0
 8025806:	b920      	cbnz	r0, 8025812 <mg_bzero+0xe>
 8025808:	4770      	bx	lr
    while (len--) *buf++ = 0;
 802580a:	2100      	movs	r1, #0
 802580c:	f803 1b01 	strb.w	r1, [r3], #1
 8025810:	4611      	mov	r1, r2
 8025812:	1e4a      	subs	r2, r1, #1
 8025814:	2900      	cmp	r1, #0
 8025816:	d1f8      	bne.n	802580a <mg_bzero+0x6>
}
 8025818:	4770      	bx	lr

0802581a <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 802581a:	b538      	push	{r3, r4, r5, lr}
 802581c:	4605      	mov	r5, r0
 802581e:	4608      	mov	r0, r1
 8025820:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 8025822:	68aa      	ldr	r2, [r5, #8]
 8025824:	428a      	cmp	r2, r1
 8025826:	d200      	bcs.n	802582a <mg_iobuf_del+0x10>
 8025828:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 802582a:	1903      	adds	r3, r0, r4
 802582c:	429a      	cmp	r2, r3
 802582e:	d200      	bcs.n	8025832 <mg_iobuf_del+0x18>
 8025830:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8025832:	682b      	ldr	r3, [r5, #0]
 8025834:	b133      	cbz	r3, 8025844 <mg_iobuf_del+0x2a>
 8025836:	1901      	adds	r1, r0, r4
 8025838:	1a12      	subs	r2, r2, r0
 802583a:	1b12      	subs	r2, r2, r4
 802583c:	4419      	add	r1, r3
 802583e:	4418      	add	r0, r3
 8025840:	f007 f804 	bl	802c84c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8025844:	682b      	ldr	r3, [r5, #0]
 8025846:	b12b      	cbz	r3, 8025854 <mg_iobuf_del+0x3a>
 8025848:	68a8      	ldr	r0, [r5, #8]
 802584a:	1b00      	subs	r0, r0, r4
 802584c:	4621      	mov	r1, r4
 802584e:	4418      	add	r0, r3
 8025850:	f7ff ffd8 	bl	8025804 <mg_bzero>
  io->len -= len;
 8025854:	68ab      	ldr	r3, [r5, #8]
 8025856:	1b1b      	subs	r3, r3, r4
 8025858:	60ab      	str	r3, [r5, #8]
}
 802585a:	4620      	mov	r0, r4
 802585c:	bd38      	pop	{r3, r4, r5, pc}

0802585e <mg_random>:
void mg_random(void *buf, size_t len) {
 802585e:	b538      	push	{r3, r4, r5, lr}
 8025860:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 8025862:	e006      	b.n	8025872 <mg_random+0x14>
 8025864:	f006 fac6 	bl	802bdf4 <rand>
 8025868:	4623      	mov	r3, r4
 802586a:	f803 0b01 	strb.w	r0, [r3], #1
 802586e:	461c      	mov	r4, r3
 8025870:	4629      	mov	r1, r5
 8025872:	1e4d      	subs	r5, r1, #1
 8025874:	2900      	cmp	r1, #0
 8025876:	d1f5      	bne.n	8025864 <mg_random+0x6>
}
 8025878:	bd38      	pop	{r3, r4, r5, pc}
	...

0802587c <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 802587c:	b570      	push	{r4, r5, r6, lr}
 802587e:	4604      	mov	r4, r0
 8025880:	460d      	mov	r5, r1
  mg_random(buf, len);
 8025882:	f7ff ffec 	bl	802585e <mg_random>
  for (i = 0; i < len; i++) {
 8025886:	2100      	movs	r1, #0
 8025888:	e00a      	b.n	80258a0 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802588a:	2b33      	cmp	r3, #51	@ 0x33
 802588c:	d802      	bhi.n	8025894 <mg_random_str+0x18>
 802588e:	3327      	adds	r3, #39	@ 0x27
 8025890:	b2db      	uxtb	r3, r3
 8025892:	e003      	b.n	802589c <mg_random_str+0x20>
 8025894:	3b04      	subs	r3, #4
 8025896:	b2db      	uxtb	r3, r3
 8025898:	e000      	b.n	802589c <mg_random_str+0x20>
 802589a:	2300      	movs	r3, #0
 802589c:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 802589e:	3101      	adds	r1, #1
 80258a0:	42a9      	cmp	r1, r5
 80258a2:	d213      	bcs.n	80258cc <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80258a4:	1860      	adds	r0, r4, r1
 80258a6:	5c63      	ldrb	r3, [r4, r1]
 80258a8:	085a      	lsrs	r2, r3, #1
 80258aa:	4e09      	ldr	r6, [pc, #36]	@ (80258d0 <mg_random_str+0x54>)
 80258ac:	fba6 6202 	umull	r6, r2, r6, r2
 80258b0:	0912      	lsrs	r2, r2, #4
 80258b2:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 80258b6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80258ba:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80258bc:	1e6a      	subs	r2, r5, #1
 80258be:	428a      	cmp	r2, r1
 80258c0:	d0eb      	beq.n	802589a <mg_random_str+0x1e>
 80258c2:	2b19      	cmp	r3, #25
 80258c4:	d8e1      	bhi.n	802588a <mg_random_str+0xe>
 80258c6:	3361      	adds	r3, #97	@ 0x61
 80258c8:	b2db      	uxtb	r3, r3
 80258ca:	e7e7      	b.n	802589c <mg_random_str+0x20>
}
 80258cc:	4620      	mov	r0, r4
 80258ce:	bd70      	pop	{r4, r5, r6, pc}
 80258d0:	84210843 	.word	0x84210843

080258d4 <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 80258d4:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 80258d6:	2300      	movs	r3, #0
 80258d8:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 80258da:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80258dc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80258e0:	021b      	lsls	r3, r3, #8
 80258e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80258e6:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80258ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 80258ee:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80258f2:	b002      	add	sp, #8
 80258f4:	4770      	bx	lr
	...

080258f8 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 80258f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258fa:	b085      	sub	sp, #20
 80258fc:	466c      	mov	r4, sp
 80258fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8025902:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 8025904:	480b      	ldr	r0, [pc, #44]	@ (8025934 <mg_atonl+0x3c>)
 8025906:	f7ff ffe5 	bl	80258d4 <mg_ntohl>
 802590a:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 802590c:	ae02      	add	r6, sp, #8
 802590e:	490a      	ldr	r1, [pc, #40]	@ (8025938 <mg_atonl+0x40>)
 8025910:	4630      	mov	r0, r6
 8025912:	f7fe fc45 	bl	80241a0 <mg_str_s>
 8025916:	e896 000c 	ldmia.w	r6, {r2, r3}
 802591a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802591e:	f7fe fd3a 	bl	8024396 <mg_strcasecmp>
 8025922:	b928      	cbnz	r0, 8025930 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 8025924:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 8025926:	2300      	movs	r3, #0
 8025928:	74eb      	strb	r3, [r5, #19]
  return true;
 802592a:	2001      	movs	r0, #1
}
 802592c:	b005      	add	sp, #20
 802592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025930:	2000      	movs	r0, #0
 8025932:	e7fb      	b.n	802592c <mg_atonl+0x34>
 8025934:	7f000001 	.word	0x7f000001
 8025938:	0803a9e4 	.word	0x0803a9e4

0802593c <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 802593c:	b510      	push	{r4, lr}
 802593e:	b082      	sub	sp, #8
 8025940:	466b      	mov	r3, sp
 8025942:	e883 0003 	stmia.w	r3, {r0, r1}
 8025946:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025948:	e893 0003 	ldmia.w	r3, {r0, r1}
 802594c:	f7fb fdcf 	bl	80214ee <mg_atone>
 8025950:	b110      	cbz	r0, 8025958 <mg_aton+0x1c>
 8025952:	2001      	movs	r0, #1
}
 8025954:	b002      	add	sp, #8
 8025956:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025958:	4622      	mov	r2, r4
 802595a:	ab02      	add	r3, sp, #8
 802595c:	e913 0003 	ldmdb	r3, {r0, r1}
 8025960:	f7ff ffca 	bl	80258f8 <mg_atonl>
 8025964:	b108      	cbz	r0, 802596a <mg_aton+0x2e>
 8025966:	2001      	movs	r0, #1
 8025968:	e7f4      	b.n	8025954 <mg_aton+0x18>
 802596a:	4622      	mov	r2, r4
 802596c:	ab02      	add	r3, sp, #8
 802596e:	e913 0003 	ldmdb	r3, {r0, r1}
 8025972:	f7fb fb37 	bl	8020fe4 <mg_aton4>
 8025976:	b108      	cbz	r0, 802597c <mg_aton+0x40>
 8025978:	2001      	movs	r0, #1
 802597a:	e7eb      	b.n	8025954 <mg_aton+0x18>
         mg_aton6(str, addr);
 802597c:	4622      	mov	r2, r4
 802597e:	ab02      	add	r3, sp, #8
 8025980:	e913 0003 	ldmdb	r3, {r0, r1}
 8025984:	f7ff fd34 	bl	80253f0 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025988:	2800      	cmp	r0, #0
 802598a:	d0e3      	beq.n	8025954 <mg_aton+0x18>
 802598c:	2001      	movs	r0, #1
 802598e:	e7e1      	b.n	8025954 <mg_aton+0x18>

08025990 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8025990:	b570      	push	{r4, r5, r6, lr}
 8025992:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8025994:	6800      	ldr	r0, [r0, #0]
 8025996:	f7ff ff9d 	bl	80258d4 <mg_ntohl>
 802599a:	4606      	mov	r6, r0
 802599c:	6860      	ldr	r0, [r4, #4]
 802599e:	f7ff ff99 	bl	80258d4 <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 80259a2:	b12e      	cbz	r6, 80259b0 <gettimestamp+0x20>
 80259a4:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 80259a8:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 80259ac:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 80259b0:	0ef5      	lsrs	r5, r6, #27
 80259b2:	0174      	lsls	r4, r6, #5
 80259b4:	1ba4      	subs	r4, r4, r6
 80259b6:	f165 0500 	sbc.w	r5, r5, #0
 80259ba:	00ad      	lsls	r5, r5, #2
 80259bc:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 80259c0:	00a4      	lsls	r4, r4, #2
 80259c2:	19a4      	adds	r4, r4, r6
 80259c4:	f145 0500 	adc.w	r5, r5, #0
 80259c8:	00ed      	lsls	r5, r5, #3
 80259ca:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 80259ce:	00e4      	lsls	r4, r4, #3
 80259d0:	f7ea fdb0 	bl	8010534 <__aeabi_ui2d>
 80259d4:	a309      	add	r3, pc, #36	@ (adr r3, 80259fc <gettimestamp+0x6c>)
 80259d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259da:	f7ea ff4f 	bl	801087c <__aeabi_ddiv>
 80259de:	2200      	movs	r2, #0
 80259e0:	4b05      	ldr	r3, [pc, #20]	@ (80259f8 <gettimestamp+0x68>)
 80259e2:	f7ea fe21 	bl	8010628 <__aeabi_dmul>
 80259e6:	f7eb f9e3 	bl	8010db0 <__aeabi_d2lz>
 80259ea:	1820      	adds	r0, r4, r0
}
 80259ec:	eb45 0101 	adc.w	r1, r5, r1
 80259f0:	bd70      	pop	{r4, r5, r6, pc}
 80259f2:	bf00      	nop
 80259f4:	f3af 8000 	nop.w
 80259f8:	408f4000 	.word	0x408f4000
 80259fc:	ffe00000 	.word	0xffe00000
 8025a00:	41efffff 	.word	0x41efffff

08025a04 <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 8025a04:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 8025a06:	2300      	movs	r3, #0
 8025a08:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 8025a0c:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8025a10:	b2c3      	uxtb	r3, r0
 8025a12:	021b      	lsls	r3, r3, #8
}
 8025a14:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8025a18:	b002      	add	sp, #8
 8025a1a:	4770      	bx	lr

08025a1c <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8025a1c:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8025a1e:	e001      	b.n	8025a24 <csumfin+0x8>
 8025a20:	fa13 f080 	uxtah	r0, r3, r0
 8025a24:	0c03      	lsrs	r3, r0, #16
 8025a26:	d1fb      	bne.n	8025a20 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8025a28:	43c0      	mvns	r0, r0
 8025a2a:	b280      	uxth	r0, r0
 8025a2c:	f7ff ffea 	bl	8025a04 <mg_ntohs>
}
 8025a30:	bd08      	pop	{r3, pc}

08025a32 <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 8025a32:	b508      	push	{r3, lr}
 8025a34:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 8025a36:	4601      	mov	r1, r0
 8025a38:	2000      	movs	r0, #0
 8025a3a:	f7fb fb2b 	bl	8021094 <csumup>
  return csumfin(sum);
 8025a3e:	f7ff ffed 	bl	8025a1c <csumfin>
}
 8025a42:	bd08      	pop	{r3, pc}

08025a44 <tx_ip>:
                        size_t plen) {
 8025a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a46:	4617      	mov	r7, r2
 8025a48:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025a4a:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8025a4c:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8025a4e:	680b      	ldr	r3, [r1, #0]
 8025a50:	f845 3b0e 	str.w	r3, [r5], #14
 8025a54:	888b      	ldrh	r3, [r1, #4]
 8025a56:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8025a58:	6803      	ldr	r3, [r0, #0]
 8025a5a:	f8c4 3006 	str.w	r3, [r4, #6]
 8025a5e:	8883      	ldrh	r3, [r0, #4]
 8025a60:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 8025a62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025a66:	f7ff ffcd 	bl	8025a04 <mg_ntohs>
 8025a6a:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8025a6c:	2100      	movs	r1, #0
 8025a6e:	f8c4 100e 	str.w	r1, [r4, #14]
 8025a72:	6069      	str	r1, [r5, #4]
 8025a74:	60a9      	str	r1, [r5, #8]
 8025a76:	60e9      	str	r1, [r5, #12]
 8025a78:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8025a7a:	2345      	movs	r3, #69	@ 0x45
 8025a7c:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8025a7e:	2340      	movs	r3, #64	@ 0x40
 8025a80:	7523      	strb	r3, [r4, #20]
 8025a82:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8025a84:	9807      	ldr	r0, [sp, #28]
 8025a86:	3014      	adds	r0, #20
 8025a88:	b280      	uxth	r0, r0
 8025a8a:	f7ff ffbb 	bl	8025a04 <mg_ntohs>
 8025a8e:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8025a90:	2340      	movs	r3, #64	@ 0x40
 8025a92:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 8025a94:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 8025a96:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8025a9a:	9b06      	ldr	r3, [sp, #24]
 8025a9c:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8025aa0:	2114      	movs	r1, #20
 8025aa2:	4628      	mov	r0, r5
 8025aa4:	f7ff ffc5 	bl	8025a32 <ipcsum>
 8025aa8:	8320      	strh	r0, [r4, #24]
}
 8025aaa:	4628      	mov	r0, r5
 8025aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025aae <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025aae:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025ab0:	781b      	ldrb	r3, [r3, #0]
 8025ab2:	2b08      	cmp	r3, #8
 8025ab4:	d000      	beq.n	8025ab8 <rx_icmp+0xa>
 8025ab6:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025abc:	b083      	sub	sp, #12
 8025abe:	4605      	mov	r5, r0
 8025ac0:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025ac2:	69ca      	ldr	r2, [r1, #28]
 8025ac4:	b11a      	cbz	r2, 8025ace <rx_icmp+0x20>
 8025ac6:	6911      	ldr	r1, [r2, #16]
 8025ac8:	6883      	ldr	r3, [r0, #8]
 8025aca:	4299      	cmp	r1, r3
 8025acc:	d002      	beq.n	8025ad4 <rx_icmp+0x26>
}
 8025ace:	b003      	add	sp, #12
 8025ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025ad4:	6986      	ldr	r6, [r0, #24]
 8025ad6:	3e26      	subs	r6, #38	@ 0x26
 8025ad8:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 8025ada:	428e      	cmp	r6, r1
 8025adc:	d300      	bcc.n	8025ae0 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8025ade:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8025ae0:	6921      	ldr	r1, [r4, #16]
 8025ae2:	f106 0804 	add.w	r8, r6, #4
 8025ae6:	f8cd 8004 	str.w	r8, [sp, #4]
 8025aea:	68d2      	ldr	r2, [r2, #12]
 8025aec:	9200      	str	r2, [sp, #0]
 8025aee:	2201      	movs	r2, #1
 8025af0:	3106      	adds	r1, #6
 8025af2:	4628      	mov	r0, r5
 8025af4:	f7ff ffa6 	bl	8025a44 <tx_ip>
 8025af8:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8025afa:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8025afe:	2300      	movs	r3, #0
 8025b00:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8025b02:	4632      	mov	r2, r6
 8025b04:	68a1      	ldr	r1, [r4, #8]
 8025b06:	3018      	adds	r0, #24
 8025b08:	f008 f8f6 	bl	802dcf8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8025b0c:	4641      	mov	r1, r8
 8025b0e:	4648      	mov	r0, r9
 8025b10:	f7ff ff8f 	bl	8025a32 <ipcsum>
 8025b14:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 8025b16:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8025b1a:	4628      	mov	r0, r5
 8025b1c:	f7fb facb 	bl	80210b6 <ether_output>
}
 8025b20:	e7d5      	b.n	8025ace <rx_icmp+0x20>

08025b22 <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025b22:	b538      	push	{r3, r4, r5, lr}
 8025b24:	4605      	mov	r5, r0
 8025b26:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8025b28:	6a09      	ldr	r1, [r1, #32]
 8025b2a:	798b      	ldrb	r3, [r1, #6]
 8025b2c:	2b01      	cmp	r3, #1
 8025b2e:	d00e      	beq.n	8025b4e <rx_ip6+0x2c>
 8025b30:	2b3a      	cmp	r3, #58	@ 0x3a
 8025b32:	d00c      	beq.n	8025b4e <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 8025b34:	2b11      	cmp	r3, #17
 8025b36:	d110      	bne.n	8025b5a <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8025b38:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8025b3e:	68e3      	ldr	r3, [r4, #12]
 8025b40:	2b07      	cmp	r3, #7
 8025b42:	d90a      	bls.n	8025b5a <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 8025b44:	3130      	adds	r1, #48	@ 0x30
 8025b46:	4620      	mov	r0, r4
 8025b48:	f7fe fbe9 	bl	802431e <mkpay>
 8025b4c:	e005      	b.n	8025b5a <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8025b4e:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025b52:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8025b54:	68e3      	ldr	r3, [r4, #12]
 8025b56:	2b03      	cmp	r3, #3
 8025b58:	d800      	bhi.n	8025b5c <rx_ip6+0x3a>
}
 8025b5a:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8025b5c:	312c      	adds	r1, #44	@ 0x2c
 8025b5e:	4620      	mov	r0, r4
 8025b60:	f7fe fbdd 	bl	802431e <mkpay>
    rx_icmp(ifp, pkt);
 8025b64:	4621      	mov	r1, r4
 8025b66:	4628      	mov	r0, r5
 8025b68:	f7ff ffa1 	bl	8025aae <rx_icmp>
 8025b6c:	e7f5      	b.n	8025b5a <rx_ip6+0x38>

08025b6e <tx_udp>:
                   const void *buf, size_t len) {
 8025b6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025b72:	b083      	sub	sp, #12
 8025b74:	4606      	mov	r6, r0
 8025b76:	4698      	mov	r8, r3
 8025b78:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025b7a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8025b7c:	f105 0308 	add.w	r3, r5, #8
 8025b80:	9301      	str	r3, [sp, #4]
 8025b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025b84:	9300      	str	r3, [sp, #0]
 8025b86:	4613      	mov	r3, r2
 8025b88:	2211      	movs	r2, #17
 8025b8a:	f7ff ff5b 	bl	8025a44 <tx_ip>
 8025b8e:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8025b90:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 8025b94:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8025b98:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8025b9c:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8025b9e:	f105 0008 	add.w	r0, r5, #8
 8025ba2:	b280      	uxth	r0, r0
 8025ba4:	f7ff ff2e 	bl	8025a04 <mg_ntohs>
 8025ba8:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8025baa:	2000      	movs	r0, #0
 8025bac:	76a0      	strb	r0, [r4, #26]
 8025bae:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8025bb0:	2208      	movs	r2, #8
 8025bb2:	4649      	mov	r1, r9
 8025bb4:	f7fb fa6e 	bl	8021094 <csumup>
  cs = csumup(cs, buf, len);
 8025bb8:	462a      	mov	r2, r5
 8025bba:	4639      	mov	r1, r7
 8025bbc:	f7fb fa6a 	bl	8021094 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8025bc0:	2204      	movs	r2, #4
 8025bc2:	f104 010c 	add.w	r1, r4, #12
 8025bc6:	f7fb fa65 	bl	8021094 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8025bca:	2204      	movs	r2, #4
 8025bcc:	f104 0110 	add.w	r1, r4, #16
 8025bd0:	f7fb fa60 	bl	8021094 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8025bd4:	7a63      	ldrb	r3, [r4, #9]
 8025bd6:	442b      	add	r3, r5
 8025bd8:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 8025bda:	3008      	adds	r0, #8
 8025bdc:	f7ff ff1e 	bl	8025a1c <csumfin>
 8025be0:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 8025be2:	462a      	mov	r2, r5
 8025be4:	4639      	mov	r1, r7
 8025be6:	f104 001c 	add.w	r0, r4, #28
 8025bea:	f006 fe2f 	bl	802c84c <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8025bee:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8025bf2:	4630      	mov	r0, r6
 8025bf4:	f7fb fa5f 	bl	80210b6 <ether_output>
}
 8025bf8:	b003      	add	sp, #12
 8025bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025bfe <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8025bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c00:	4605      	mov	r5, r0
 8025c02:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025c04:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8025c06:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 8025c08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025c0c:	f846 3b0e 	str.w	r3, [r6], #14
 8025c10:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8025c12:	6803      	ldr	r3, [r0, #0]
 8025c14:	f8c4 3006 	str.w	r3, [r4, #6]
 8025c18:	8883      	ldrh	r3, [r0, #4]
 8025c1a:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8025c1c:	f640 0006 	movw	r0, #2054	@ 0x806
 8025c20:	f7ff fef0 	bl	8025a04 <mg_ntohs>
 8025c24:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 8025c26:	2300      	movs	r3, #0
 8025c28:	f8c4 300e 	str.w	r3, [r4, #14]
 8025c2c:	6073      	str	r3, [r6, #4]
 8025c2e:	60b3      	str	r3, [r6, #8]
 8025c30:	60f3      	str	r3, [r6, #12]
 8025c32:	6133      	str	r3, [r6, #16]
 8025c34:	6173      	str	r3, [r6, #20]
 8025c36:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8025c38:	2001      	movs	r0, #1
 8025c3a:	f7ff fee3 	bl	8025a04 <mg_ntohs>
 8025c3e:	4606      	mov	r6, r0
 8025c40:	81e0      	strh	r0, [r4, #14]
 8025c42:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8025c46:	f7ff fedd 	bl	8025a04 <mg_ntohs>
 8025c4a:	8220      	strh	r0, [r4, #16]
 8025c4c:	2306      	movs	r3, #6
 8025c4e:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8025c50:	2304      	movs	r3, #4
 8025c52:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8025c54:	82a6      	strh	r6, [r4, #20]
 8025c56:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8025c5a:	68ab      	ldr	r3, [r5, #8]
 8025c5c:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8025c5e:	682b      	ldr	r3, [r5, #0]
 8025c60:	f8c4 3016 	str.w	r3, [r4, #22]
 8025c64:	88ab      	ldrh	r3, [r5, #4]
 8025c66:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8025c68:	212a      	movs	r1, #42	@ 0x2a
 8025c6a:	4628      	mov	r0, r5
 8025c6c:	f7fb fa23 	bl	80210b6 <ether_output>
}
 8025c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025c72 <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 8025c72:	b510      	push	{r4, lr}
 8025c74:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 8025c76:	4608      	mov	r0, r1
 8025c78:	f7ff fd74 	bl	8025764 <mg_url_port>
 8025c7c:	f7ff fec2 	bl	8025a04 <mg_ntohs>
 8025c80:	8320      	strh	r0, [r4, #24]
}
 8025c82:	2001      	movs	r0, #1
 8025c84:	bd10      	pop	{r4, pc}
	...

08025c88 <tx_dhcp>:
                    bool ciaddr) {
 8025c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c8c:	b0c8      	sub	sp, #288	@ 0x120
 8025c8e:	4604      	mov	r4, r0
 8025c90:	460e      	mov	r6, r1
 8025c92:	4615      	mov	r5, r2
 8025c94:	4698      	mov	r8, r3
 8025c96:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025c9a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025c9e:	4917      	ldr	r1, [pc, #92]	@ (8025cfc <tx_dhcp+0x74>)
 8025ca0:	a804      	add	r0, sp, #16
 8025ca2:	f008 f829 	bl	802dcf8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8025ca6:	4816      	ldr	r0, [pc, #88]	@ (8025d00 <tx_dhcp+0x78>)
 8025ca8:	f7ff fe14 	bl	80258d4 <mg_ntohl>
 8025cac:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8025cae:	6820      	ldr	r0, [r4, #0]
 8025cb0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8025cb2:	88a3      	ldrh	r3, [r4, #4]
 8025cb4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8025cb8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8025cbc:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 8025cbe:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 8025cc0:	994e      	ldr	r1, [sp, #312]	@ 0x138
 8025cc2:	a840      	add	r0, sp, #256	@ 0x100
 8025cc4:	f008 f818 	bl	802dcf8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8025cc8:	b107      	cbz	r7, 8025ccc <tx_dhcp+0x44>
 8025cca:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8025ccc:	2044      	movs	r0, #68	@ 0x44
 8025cce:	f7ff fe99 	bl	8025a04 <mg_ntohs>
 8025cd2:	4607      	mov	r7, r0
 8025cd4:	2043      	movs	r0, #67	@ 0x43
 8025cd6:	f7ff fe95 	bl	8025a04 <mg_ntohs>
 8025cda:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025cde:	9303      	str	r3, [sp, #12]
 8025ce0:	ab04      	add	r3, sp, #16
 8025ce2:	9302      	str	r3, [sp, #8]
 8025ce4:	9001      	str	r0, [sp, #4]
 8025ce6:	f8cd 8000 	str.w	r8, [sp]
 8025cea:	463b      	mov	r3, r7
 8025cec:	462a      	mov	r2, r5
 8025cee:	4631      	mov	r1, r6
 8025cf0:	4620      	mov	r0, r4
 8025cf2:	f7ff ff3c 	bl	8025b6e <tx_udp>
}
 8025cf6:	b048      	add	sp, #288	@ 0x120
 8025cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cfc:	08035bcc 	.word	0x08035bcc
 8025d00:	63825363 	.word	0x63825363

08025d04 <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8025d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d08:	b0d0      	sub	sp, #320	@ 0x140
 8025d0a:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025d0c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8025d0e:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8025d12:	6809      	ldr	r1, [r1, #0]
 8025d14:	686a      	ldr	r2, [r5, #4]
 8025d16:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8025d1a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8025d1e:	4543      	cmp	r3, r8
 8025d20:	d827      	bhi.n	8025d72 <rx_dhcp_server+0x6e>
 8025d22:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025d24:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025d28:	495e      	ldr	r1, [pc, #376]	@ (8025ea4 <rx_dhcp_server+0x1a0>)
 8025d2a:	a80c      	add	r0, sp, #48	@ 0x30
 8025d2c:	f007 ffe4 	bl	802dcf8 <memcpy>
  res.yiaddr = ifp->ip;
 8025d30:	68b3      	ldr	r3, [r6, #8]
 8025d32:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8025d34:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8025d38:	3301      	adds	r3, #1
 8025d3a:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025d3e:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025d40:	e002      	b.n	8025d48 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 8025d42:	7863      	ldrb	r3, [r4, #1]
 8025d44:	3302      	adds	r3, #2
 8025d46:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025d48:	1c63      	adds	r3, r4, #1
 8025d4a:	4543      	cmp	r3, r8
 8025d4c:	d20c      	bcs.n	8025d68 <rx_dhcp_server+0x64>
 8025d4e:	7823      	ldrb	r3, [r4, #0]
 8025d50:	2bff      	cmp	r3, #255	@ 0xff
 8025d52:	d009      	beq.n	8025d68 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8025d54:	2b35      	cmp	r3, #53	@ 0x35
 8025d56:	d1f4      	bne.n	8025d42 <rx_dhcp_server+0x3e>
 8025d58:	7863      	ldrb	r3, [r4, #1]
 8025d5a:	2b01      	cmp	r3, #1
 8025d5c:	d1f1      	bne.n	8025d42 <rx_dhcp_server+0x3e>
 8025d5e:	1ca3      	adds	r3, r4, #2
 8025d60:	4543      	cmp	r3, r8
 8025d62:	d2ee      	bcs.n	8025d42 <rx_dhcp_server+0x3e>
      op = p[2];
 8025d64:	78a7      	ldrb	r7, [r4, #2]
 8025d66:	e7ec      	b.n	8025d42 <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8025d68:	2f01      	cmp	r7, #1
 8025d6a:	f000 808a 	beq.w	8025e82 <rx_dhcp_server+0x17e>
 8025d6e:	2f03      	cmp	r7, #3
 8025d70:	d002      	beq.n	8025d78 <rx_dhcp_server+0x74>
}
 8025d72:	b050      	add	sp, #320	@ 0x140
 8025d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025d78:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8025d7a:	2335      	movs	r3, #53	@ 0x35
 8025d7c:	f88d 3014 	strb.w	r3, [sp, #20]
 8025d80:	2301      	movs	r3, #1
 8025d82:	f88d 3015 	strb.w	r3, [sp, #21]
 8025d86:	f88d 2016 	strb.w	r2, [sp, #22]
 8025d8a:	f88d 3017 	strb.w	r3, [sp, #23]
 8025d8e:	2204      	movs	r2, #4
 8025d90:	f88d 2018 	strb.w	r2, [sp, #24]
 8025d94:	2300      	movs	r3, #0
 8025d96:	f88d 3019 	strb.w	r3, [sp, #25]
 8025d9a:	f88d 301a 	strb.w	r3, [sp, #26]
 8025d9e:	f88d 301b 	strb.w	r3, [sp, #27]
 8025da2:	f88d 301c 	strb.w	r3, [sp, #28]
 8025da6:	2136      	movs	r1, #54	@ 0x36
 8025da8:	f88d 101d 	strb.w	r1, [sp, #29]
 8025dac:	f88d 201e 	strb.w	r2, [sp, #30]
 8025db0:	f88d 301f 	strb.w	r3, [sp, #31]
 8025db4:	f88d 3020 	strb.w	r3, [sp, #32]
 8025db8:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8025dbc:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8025dc0:	230c      	movs	r3, #12
 8025dc2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8025dc6:	2303      	movs	r3, #3
 8025dc8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8025dcc:	236d      	movs	r3, #109	@ 0x6d
 8025dce:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8025dd2:	2369      	movs	r3, #105	@ 0x69
 8025dd4:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8025dd8:	2370      	movs	r3, #112	@ 0x70
 8025dda:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 8025dde:	2333      	movs	r3, #51	@ 0x33
 8025de0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8025de4:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 8025de8:	23ff      	movs	r3, #255	@ 0xff
 8025dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025dee:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8025df2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8025df6:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 8025dfa:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8025dfe:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 8025e02:	f8de 001c 	ldr.w	r0, [lr, #28]
 8025e06:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025e08:	f8be 3020 	ldrh.w	r3, [lr, #32]
 8025e0c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8025e10:	68f3      	ldr	r3, [r6, #12]
 8025e12:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8025e16:	68b3      	ldr	r3, [r6, #8]
 8025e18:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8025e1c:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8025e20:	ac05      	add	r4, sp, #20
 8025e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8025e28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8025e2c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025e30:	f82c 2b02 	strh.w	r2, [ip], #2
 8025e34:	0c12      	lsrs	r2, r2, #16
 8025e36:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8025e3a:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8025e3e:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8025e40:	f8de 3004 	ldr.w	r3, [lr, #4]
 8025e44:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 8025e46:	7fb3      	ldrb	r3, [r6, #30]
 8025e48:	b9eb      	cbnz	r3, 8025e86 <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025e4a:	692c      	ldr	r4, [r5, #16]
 8025e4c:	3406      	adds	r4, #6
 8025e4e:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8025e52:	2043      	movs	r0, #67	@ 0x43
 8025e54:	f7ff fdd6 	bl	8025a04 <mg_ntohs>
 8025e58:	4605      	mov	r5, r0
 8025e5a:	2f01      	cmp	r7, #1
 8025e5c:	d01e      	beq.n	8025e9c <rx_dhcp_server+0x198>
 8025e5e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025e60:	2044      	movs	r0, #68	@ 0x44
 8025e62:	f7ff fdcf 	bl	8025a04 <mg_ntohs>
 8025e66:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025e6a:	9303      	str	r3, [sp, #12]
 8025e6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8025e6e:	9302      	str	r3, [sp, #8]
 8025e70:	9001      	str	r0, [sp, #4]
 8025e72:	9700      	str	r7, [sp, #0]
 8025e74:	462b      	mov	r3, r5
 8025e76:	4642      	mov	r2, r8
 8025e78:	4621      	mov	r1, r4
 8025e7a:	4630      	mov	r0, r6
 8025e7c:	f7ff fe77 	bl	8025b6e <tx_udp>
 8025e80:	e777      	b.n	8025d72 <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025e82:	2202      	movs	r2, #2
 8025e84:	e779      	b.n	8025d7a <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 8025e86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025e88:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8025e8a:	692b      	ldr	r3, [r5, #16]
 8025e8c:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025e90:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 8025e94:	895b      	ldrh	r3, [r3, #10]
 8025e96:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8025e9a:	e7d6      	b.n	8025e4a <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025e9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025ea0:	e7de      	b.n	8025e60 <rx_dhcp_server+0x15c>
 8025ea2:	bf00      	nop
 8025ea4:	08035cdc 	.word	0x08035cdc

08025ea8 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8025ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eac:	b08b      	sub	sp, #44	@ 0x2c
 8025eae:	4605      	mov	r5, r0
 8025eb0:	9108      	str	r1, [sp, #32]
 8025eb2:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8025eb4:	8810      	ldrh	r0, [r2, #0]
 8025eb6:	f7ff fda5 	bl	8025a04 <mg_ntohs>
 8025eba:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8025ebc:	8860      	ldrh	r0, [r4, #2]
 8025ebe:	f7ff fda1 	bl	8025a04 <mg_ntohs>
 8025ec2:	4606      	mov	r6, r0
 8025ec4:	88a0      	ldrh	r0, [r4, #4]
 8025ec6:	f7ff fd9d 	bl	8025a04 <mg_ntohs>
 8025eca:	4607      	mov	r7, r0
 8025ecc:	88e0      	ldrh	r0, [r4, #6]
 8025ece:	f7ff fd99 	bl	8025a04 <mg_ntohs>
 8025ed2:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8025ed4:	8920      	ldrh	r0, [r4, #8]
 8025ed6:	f7ff fd95 	bl	8025a04 <mg_ntohs>
 8025eda:	4681      	mov	r9, r0
 8025edc:	8960      	ldrh	r0, [r4, #10]
 8025ede:	f7ff fd91 	bl	8025a04 <mg_ntohs>
 8025ee2:	4682      	mov	sl, r0
 8025ee4:	89a0      	ldrh	r0, [r4, #12]
 8025ee6:	f7ff fd8d 	bl	8025a04 <mg_ntohs>
 8025eea:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 8025eec:	89e0      	ldrh	r0, [r4, #14]
 8025eee:	f7ff fd89 	bl	8025a04 <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8025ef2:	9006      	str	r0, [sp, #24]
 8025ef4:	f8cd b014 	str.w	fp, [sp, #20]
 8025ef8:	f8cd a010 	str.w	sl, [sp, #16]
 8025efc:	f8cd 900c 	str.w	r9, [sp, #12]
 8025f00:	f8cd 8008 	str.w	r8, [sp, #8]
 8025f04:	9701      	str	r7, [sp, #4]
 8025f06:	9600      	str	r6, [sp, #0]
 8025f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f0a:	4a04      	ldr	r2, [pc, #16]	@ (8025f1c <print_ip6+0x74>)
 8025f0c:	9908      	ldr	r1, [sp, #32]
 8025f0e:	4628      	mov	r0, r5
 8025f10:	f7fd ff28 	bl	8023d64 <mg_xprintf>
}
 8025f14:	b00b      	add	sp, #44	@ 0x2c
 8025f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f1a:	bf00      	nop
 8025f1c:	0803a9f0 	.word	0x0803a9f0

08025f20 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8025f20:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8025f22:	6813      	ldr	r3, [r2, #0]
 8025f24:	1d1c      	adds	r4, r3, #4
 8025f26:	6014      	str	r4, [r2, #0]
 8025f28:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8025f2a:	7cd3      	ldrb	r3, [r2, #19]
 8025f2c:	b913      	cbnz	r3, 8025f34 <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8025f2e:	f7fd ff29 	bl	8023d84 <print_ip4>
}
 8025f32:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8025f34:	f7ff ffb8 	bl	8025ea8 <print_ip6>
 8025f38:	e7fb      	b.n	8025f32 <mg_print_ip+0x12>
	...

08025f3c <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8025f3c:	b570      	push	{r4, r5, r6, lr}
 8025f3e:	b082      	sub	sp, #8
 8025f40:	4604      	mov	r4, r0
 8025f42:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8025f44:	6813      	ldr	r3, [r2, #0]
 8025f46:	1d19      	adds	r1, r3, #4
 8025f48:	6011      	str	r1, [r2, #0]
 8025f4a:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8025f4c:	8a30      	ldrh	r0, [r6, #16]
 8025f4e:	f7ff fd59 	bl	8025a04 <mg_ntohs>
 8025f52:	9001      	str	r0, [sp, #4]
 8025f54:	9600      	str	r6, [sp, #0]
 8025f56:	4b04      	ldr	r3, [pc, #16]	@ (8025f68 <mg_print_ip_port+0x2c>)
 8025f58:	4a04      	ldr	r2, [pc, #16]	@ (8025f6c <mg_print_ip_port+0x30>)
 8025f5a:	4629      	mov	r1, r5
 8025f5c:	4620      	mov	r0, r4
 8025f5e:	f7fd ff01 	bl	8023d64 <mg_xprintf>
}
 8025f62:	b002      	add	sp, #8
 8025f64:	bd70      	pop	{r4, r5, r6, pc}
 8025f66:	bf00      	nop
 8025f68:	08025f21 	.word	0x08025f21
 8025f6c:	0803aa0c 	.word	0x0803aa0c

08025f70 <mg_crc32>:
  crc = ~crc;
 8025f70:	43c0      	mvns	r0, r0
  while (len--) {
 8025f72:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8025f76:	b1e2      	cbz	r2, 8025fb2 <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8025f78:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 8025f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8025f7e:	ea83 0200 	eor.w	r2, r3, r0
 8025f82:	f002 020f 	and.w	r2, r2, #15
 8025f86:	4c0c      	ldr	r4, [pc, #48]	@ (8025fb8 <mg_crc32+0x48>)
 8025f88:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025f8c:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8025f90:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8025f94:	f003 030f 	and.w	r3, r3, #15
 8025f98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025f9c:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8025fa0:	4662      	mov	r2, ip
 8025fa2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8025fa6:	2a00      	cmp	r2, #0
 8025fa8:	d1e7      	bne.n	8025f7a <mg_crc32+0xa>
}
 8025faa:	43c0      	mvns	r0, r0
 8025fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025fb0:	4770      	bx	lr
 8025fb2:	43c0      	mvns	r0, r0
 8025fb4:	4770      	bx	lr
 8025fb6:	bf00      	nop
 8025fb8:	0803b2a0 	.word	0x0803b2a0

08025fbc <mg_check_ip_acl>:
int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {
 8025fbc:	b530      	push	{r4, r5, lr}
 8025fbe:	b089      	sub	sp, #36	@ 0x24
 8025fc0:	ab02      	add	r3, sp, #8
 8025fc2:	e883 0003 	stmia.w	r3, {r0, r1}
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8025fc6:	bb19      	cbnz	r1, 8026010 <mg_check_ip_acl+0x54>
 8025fc8:	252b      	movs	r5, #43	@ 0x2b
  if (remote_ip->is_ip6) {
 8025fca:	7cd3      	ldrb	r3, [r2, #19]
 8025fcc:	bb73      	cbnz	r3, 802602c <mg_check_ip_acl+0x70>
    memcpy((void *) &remote_ip4, remote_ip->ip, sizeof(remote_ip4));
 8025fce:	6814      	ldr	r4, [r2, #0]
    while (mg_span(acl, &entry, &acl, ',')) {
 8025fd0:	ab02      	add	r3, sp, #8
 8025fd2:	222c      	movs	r2, #44	@ 0x2c
 8025fd4:	9200      	str	r2, [sp, #0]
 8025fd6:	aa06      	add	r2, sp, #24
 8025fd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025fdc:	f7fe fb9d 	bl	802471a <mg_span>
 8025fe0:	b1f0      	cbz	r0, 8026020 <mg_check_ip_acl+0x64>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8025fe2:	9806      	ldr	r0, [sp, #24]
 8025fe4:	7803      	ldrb	r3, [r0, #0]
 8025fe6:	2b2b      	cmp	r3, #43	@ 0x2b
 8025fe8:	d001      	beq.n	8025fee <mg_check_ip_acl+0x32>
 8025fea:	2b2d      	cmp	r3, #45	@ 0x2d
 8025fec:	d112      	bne.n	8026014 <mg_check_ip_acl+0x58>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 8025fee:	aa05      	add	r2, sp, #20
 8025ff0:	a904      	add	r1, sp, #16
 8025ff2:	3001      	adds	r0, #1
 8025ff4:	f7fc fb82 	bl	80226fc <parse_net>
 8025ff8:	b178      	cbz	r0, 802601a <mg_check_ip_acl+0x5e>
      if ((mg_ntohl(remote_ip4) & mask) == net) allowed = entry.buf[0];
 8025ffa:	4620      	mov	r0, r4
 8025ffc:	f7ff fc6a 	bl	80258d4 <mg_ntohl>
 8026000:	9b05      	ldr	r3, [sp, #20]
 8026002:	4018      	ands	r0, r3
 8026004:	9b04      	ldr	r3, [sp, #16]
 8026006:	4298      	cmp	r0, r3
 8026008:	d1e2      	bne.n	8025fd0 <mg_check_ip_acl+0x14>
 802600a:	9b06      	ldr	r3, [sp, #24]
 802600c:	781d      	ldrb	r5, [r3, #0]
 802600e:	e7df      	b.n	8025fd0 <mg_check_ip_acl+0x14>
  int allowed = acl.len == 0 ? '+' : '-';  // If any ACL is set, deny by default
 8026010:	252d      	movs	r5, #45	@ 0x2d
 8026012:	e7da      	b.n	8025fca <mg_check_ip_acl+0xe>
      if (entry.buf[0] != '+' && entry.buf[0] != '-') return -1;
 8026014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026018:	e006      	b.n	8026028 <mg_check_ip_acl+0x6c>
      if (parse_net(&entry.buf[1], &net, &mask) == 0) return -2;
 802601a:	f06f 0001 	mvn.w	r0, #1
 802601e:	e003      	b.n	8026028 <mg_check_ip_acl+0x6c>
  return allowed == '+';
 8026020:	2d2b      	cmp	r5, #43	@ 0x2b
 8026022:	bf14      	ite	ne
 8026024:	2000      	movne	r0, #0
 8026026:	2001      	moveq	r0, #1
}
 8026028:	b009      	add	sp, #36	@ 0x24
 802602a:	bd30      	pop	{r4, r5, pc}
    return -1;  // TODO(): handle IPv6 ACL and addresses
 802602c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026030:	e7fa      	b.n	8026028 <mg_check_ip_acl+0x6c>

08026032 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 8026032:	b082      	sub	sp, #8
 8026034:	ab02      	add	r3, sp, #8
 8026036:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 802603a:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 802603c:	7803      	ldrb	r3, [r0, #0]
 802603e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026040:	d106      	bne.n	8026050 <mg_path_is_sane+0x1e>
 8026042:	7843      	ldrb	r3, [r0, #1]
 8026044:	2b2e      	cmp	r3, #46	@ 0x2e
 8026046:	d103      	bne.n	8026050 <mg_path_is_sane+0x1e>
 8026048:	2000      	movs	r0, #0
 802604a:	e015      	b.n	8026078 <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 802604c:	3201      	adds	r2, #1
 802604e:	3901      	subs	r1, #1
 8026050:	7813      	ldrb	r3, [r2, #0]
 8026052:	b183      	cbz	r3, 8026076 <mg_path_is_sane+0x44>
 8026054:	b169      	cbz	r1, 8026072 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8026056:	2b2f      	cmp	r3, #47	@ 0x2f
 8026058:	d001      	beq.n	802605e <mg_path_is_sane+0x2c>
 802605a:	2b5c      	cmp	r3, #92	@ 0x5c
 802605c:	d1f6      	bne.n	802604c <mg_path_is_sane+0x1a>
 802605e:	2901      	cmp	r1, #1
 8026060:	d9f4      	bls.n	802604c <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8026062:	7853      	ldrb	r3, [r2, #1]
 8026064:	2b2e      	cmp	r3, #46	@ 0x2e
 8026066:	d1f1      	bne.n	802604c <mg_path_is_sane+0x1a>
 8026068:	7893      	ldrb	r3, [r2, #2]
 802606a:	2b2e      	cmp	r3, #46	@ 0x2e
 802606c:	d1ee      	bne.n	802604c <mg_path_is_sane+0x1a>
 802606e:	2000      	movs	r0, #0
 8026070:	e002      	b.n	8026078 <mg_path_is_sane+0x46>
  return true;
 8026072:	2001      	movs	r0, #1
 8026074:	e000      	b.n	8026078 <mg_path_is_sane+0x46>
 8026076:	2001      	movs	r0, #1
}
 8026078:	b002      	add	sp, #8
 802607a:	4770      	bx	lr

0802607c <mg_millis>:
uint64_t mg_millis(void) {
 802607c:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 802607e:	f7f3 fc21 	bl	80198c4 <xTaskGetTickCount>
}
 8026082:	2100      	movs	r1, #0
 8026084:	bd08      	pop	{r3, pc}
	...

08026088 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8026088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802608c:	b092      	sub	sp, #72	@ 0x48
 802608e:	4605      	mov	r5, r0
 8026090:	460c      	mov	r4, r1
 8026092:	4616      	mov	r6, r2
 8026094:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8026096:	212f      	movs	r1, #47	@ 0x2f
 8026098:	4620      	mov	r0, r4
 802609a:	f006 fc4b 	bl	802c934 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802609e:	4680      	mov	r8, r0
 80260a0:	b1a8      	cbz	r0, 80260ce <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80260a2:	f7ff ffeb 	bl	802607c <mg_millis>
 80260a6:	f1b8 0f00 	cmp.w	r8, #0
 80260aa:	d001      	beq.n	80260b0 <mg_log_prefix+0x28>
 80260ac:	f108 0401 	add.w	r4, r8, #1
 80260b0:	9705      	str	r7, [sp, #20]
 80260b2:	9604      	str	r6, [sp, #16]
 80260b4:	9403      	str	r4, [sp, #12]
 80260b6:	9502      	str	r5, [sp, #8]
 80260b8:	9000      	str	r0, [sp, #0]
 80260ba:	9101      	str	r1, [sp, #4]
 80260bc:	4a0f      	ldr	r2, [pc, #60]	@ (80260fc <mg_log_prefix+0x74>)
 80260be:	2129      	movs	r1, #41	@ 0x29
 80260c0:	a807      	add	r0, sp, #28
 80260c2:	f7fd f9e5 	bl	8023490 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80260c6:	2827      	cmp	r0, #39	@ 0x27
 80260c8:	d90e      	bls.n	80260e8 <mg_log_prefix+0x60>
 80260ca:	2027      	movs	r0, #39	@ 0x27
 80260cc:	e00c      	b.n	80260e8 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 80260ce:	215c      	movs	r1, #92	@ 0x5c
 80260d0:	4620      	mov	r0, r4
 80260d2:	f006 fc2f 	bl	802c934 <strrchr>
 80260d6:	4680      	mov	r8, r0
 80260d8:	e7e3      	b.n	80260a2 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 80260da:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 80260de:	446b      	add	r3, sp
 80260e0:	2220      	movs	r2, #32
 80260e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80260e6:	3001      	adds	r0, #1
 80260e8:	2828      	cmp	r0, #40	@ 0x28
 80260ea:	d9f6      	bls.n	80260da <mg_log_prefix+0x52>
  logs(buf, n - 1);
 80260ec:	1e41      	subs	r1, r0, #1
 80260ee:	a807      	add	r0, sp, #28
 80260f0:	f7fa fb34 	bl	802075c <logs>
}
 80260f4:	b012      	add	sp, #72	@ 0x48
 80260f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260fa:	bf00      	nop
 80260fc:	0803aa14 	.word	0x0803aa14

08026100 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8026100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026104:	b084      	sub	sp, #16
 8026106:	4605      	mov	r5, r0
 8026108:	460e      	mov	r6, r1
 802610a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802610c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8026110:	2100      	movs	r1, #0
 8026112:	4640      	mov	r0, r8
 8026114:	f006 fbb4 	bl	802c880 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026118:	2e0b      	cmp	r6, #11
 802611a:	f240 808b 	bls.w	8026234 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802611e:	88a8      	ldrh	r0, [r5, #4]
 8026120:	f7ff fc70 	bl	8025a04 <mg_ntohs>
 8026124:	2801      	cmp	r0, #1
 8026126:	f200 8089 	bhi.w	802623c <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802612a:	88e8      	ldrh	r0, [r5, #6]
 802612c:	f7ff fc6a 	bl	8025a04 <mg_ntohs>
 8026130:	4604      	mov	r4, r0
 8026132:	4681      	mov	r9, r0
  if (num_answers > 10) {
 8026134:	280a      	cmp	r0, #10
 8026136:	d905      	bls.n	8026144 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026138:	4b43      	ldr	r3, [pc, #268]	@ (8026248 <mg_dns_parse+0x148>)
 802613a:	681b      	ldr	r3, [r3, #0]
 802613c:	2b02      	cmp	r3, #2
 802613e:	dc1a      	bgt.n	8026176 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 8026140:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 8026144:	8828      	ldrh	r0, [r5, #0]
 8026146:	f7ff fc5d 	bl	8025a04 <mg_ntohs>
 802614a:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 802614e:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8026150:	2700      	movs	r7, #0
 8026152:	88a8      	ldrh	r0, [r5, #4]
 8026154:	f7ff fc56 	bl	8025a04 <mg_ntohs>
 8026158:	42b8      	cmp	r0, r7
 802615a:	d91a      	bls.n	8026192 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 802615c:	ab02      	add	r3, sp, #8
 802615e:	9300      	str	r3, [sp, #0]
 8026160:	2301      	movs	r3, #1
 8026162:	4622      	mov	r2, r4
 8026164:	4631      	mov	r1, r6
 8026166:	4628      	mov	r0, r5
 8026168:	f7fc fba4 	bl	80228b4 <mg_dns_parse_rr>
 802616c:	2800      	cmp	r0, #0
 802616e:	d067      	beq.n	8026240 <mg_dns_parse+0x140>
    ofs += n;
 8026170:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8026172:	3701      	adds	r7, #1
 8026174:	e7ed      	b.n	8026152 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8026176:	4b35      	ldr	r3, [pc, #212]	@ (802624c <mg_dns_parse+0x14c>)
 8026178:	f240 4293 	movw	r2, #1171	@ 0x493
 802617c:	4934      	ldr	r1, [pc, #208]	@ (8026250 <mg_dns_parse+0x150>)
 802617e:	2003      	movs	r0, #3
 8026180:	f7ff ff82 	bl	8026088 <mg_log_prefix>
 8026184:	4621      	mov	r1, r4
 8026186:	4833      	ldr	r0, [pc, #204]	@ (8026254 <mg_dns_parse+0x154>)
 8026188:	f7fd fe2c 	bl	8023de4 <mg_log>
    num_answers = 10;  // Sanity cap
 802618c:	f04f 090a 	mov.w	r9, #10
 8026190:	e7d8      	b.n	8026144 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8026192:	2700      	movs	r7, #0
 8026194:	e013      	b.n	80261be <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8026196:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802619a:	2a01      	cmp	r2, #1
 802619c:	d12a      	bne.n	80261f4 <mg_dns_parse+0xf4>
 802619e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80261a2:	2a01      	cmp	r2, #1
 80261a4:	d126      	bne.n	80261f4 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 80261a6:	2300      	movs	r3, #0
 80261a8:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80261ac:	3c04      	subs	r4, #4
 80261ae:	592b      	ldr	r3, [r5, r4]
 80261b0:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 80261b4:	2001      	movs	r0, #1
 80261b6:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 80261ba:	e03c      	b.n	8026236 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 80261bc:	3701      	adds	r7, #1
 80261be:	454f      	cmp	r7, r9
 80261c0:	d236      	bcs.n	8026230 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80261c2:	ab02      	add	r3, sp, #8
 80261c4:	9300      	str	r3, [sp, #0]
 80261c6:	2300      	movs	r3, #0
 80261c8:	4622      	mov	r2, r4
 80261ca:	4631      	mov	r1, r6
 80261cc:	4628      	mov	r0, r5
 80261ce:	f7fc fb71 	bl	80228b4 <mg_dns_parse_rr>
 80261d2:	4682      	mov	sl, r0
 80261d4:	b3b0      	cbz	r0, 8026244 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80261d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80261da:	9300      	str	r3, [sp, #0]
 80261dc:	f108 0318 	add.w	r3, r8, #24
 80261e0:	4622      	mov	r2, r4
 80261e2:	4631      	mov	r1, r6
 80261e4:	4628      	mov	r0, r5
 80261e6:	f7fb fa54 	bl	8021692 <mg_dns_parse_name>
    ofs += n;
 80261ea:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80261ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80261f0:	2b04      	cmp	r3, #4
 80261f2:	d0d0      	beq.n	8026196 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 80261f4:	2b10      	cmp	r3, #16
 80261f6:	d1e1      	bne.n	80261bc <mg_dns_parse+0xbc>
 80261f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80261fc:	2b1c      	cmp	r3, #28
 80261fe:	d1dd      	bne.n	80261bc <mg_dns_parse+0xbc>
 8026200:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8026204:	2b01      	cmp	r3, #1
 8026206:	d1d9      	bne.n	80261bc <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8026208:	2001      	movs	r0, #1
 802620a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802620e:	3c10      	subs	r4, #16
 8026210:	192b      	adds	r3, r5, r4
 8026212:	592c      	ldr	r4, [r5, r4]
 8026214:	6859      	ldr	r1, [r3, #4]
 8026216:	689a      	ldr	r2, [r3, #8]
 8026218:	68db      	ldr	r3, [r3, #12]
 802621a:	f8c8 4004 	str.w	r4, [r8, #4]
 802621e:	f8c8 1008 	str.w	r1, [r8, #8]
 8026222:	f8c8 200c 	str.w	r2, [r8, #12]
 8026226:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802622a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802622e:	e002      	b.n	8026236 <mg_dns_parse+0x136>
  return true;
 8026230:	2001      	movs	r0, #1
 8026232:	e000      	b.n	8026236 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8026234:	2000      	movs	r0, #0
}
 8026236:	b004      	add	sp, #16
 8026238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802623c:	2000      	movs	r0, #0
 802623e:	e7fa      	b.n	8026236 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8026240:	2000      	movs	r0, #0
 8026242:	e7f8      	b.n	8026236 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8026244:	2000      	movs	r0, #0
 8026246:	e7f6      	b.n	8026236 <mg_dns_parse+0x136>
 8026248:	2000012c 	.word	0x2000012c
 802624c:	0803b4a0 	.word	0x0803b4a0
 8026250:	0803aa28 	.word	0x0803aa28
 8026254:	0803aa58 	.word	0x0803aa58

08026258 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8026258:	b40e      	push	{r1, r2, r3}
 802625a:	b510      	push	{r4, lr}
 802625c:	b093      	sub	sp, #76	@ 0x4c
 802625e:	4604      	mov	r4, r0
 8026260:	ab15      	add	r3, sp, #84	@ 0x54
 8026262:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8026266:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8026268:	ab01      	add	r3, sp, #4
 802626a:	2140      	movs	r1, #64	@ 0x40
 802626c:	a802      	add	r0, sp, #8
 802626e:	f7fd fdf7 	bl	8023e60 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8026272:	4b11      	ldr	r3, [pc, #68]	@ (80262b8 <mg_error+0x60>)
 8026274:	681b      	ldr	r3, [r3, #0]
 8026276:	2b00      	cmp	r3, #0
 8026278:	dc0f      	bgt.n	802629a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 802627a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802627e:	f043 0320 	orr.w	r3, r3, #32
 8026282:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8026286:	aa02      	add	r2, sp, #8
 8026288:	2100      	movs	r1, #0
 802628a:	4620      	mov	r0, r4
 802628c:	f7fc fb61 	bl	8022952 <mg_call>
}
 8026290:	b013      	add	sp, #76	@ 0x4c
 8026292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026296:	b003      	add	sp, #12
 8026298:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 802629a:	4b08      	ldr	r3, [pc, #32]	@ (80262bc <mg_error+0x64>)
 802629c:	f240 5253 	movw	r2, #1363	@ 0x553
 80262a0:	4907      	ldr	r1, [pc, #28]	@ (80262c0 <mg_error+0x68>)
 80262a2:	2001      	movs	r0, #1
 80262a4:	f7ff fef0 	bl	8026088 <mg_log_prefix>
 80262a8:	ab02      	add	r3, sp, #8
 80262aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80262ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80262ae:	4805      	ldr	r0, [pc, #20]	@ (80262c4 <mg_error+0x6c>)
 80262b0:	f7fd fd98 	bl	8023de4 <mg_log>
 80262b4:	e7e1      	b.n	802627a <mg_error+0x22>
 80262b6:	bf00      	nop
 80262b8:	2000012c 	.word	0x2000012c
 80262bc:	0803b47c 	.word	0x0803b47c
 80262c0:	0803aa28 	.word	0x0803aa28
 80262c4:	0803aa84 	.word	0x0803aa84

080262c8 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 80262c8:	b570      	push	{r4, r5, r6, lr}
 80262ca:	b082      	sub	sp, #8
 80262cc:	4606      	mov	r6, r0
 80262ce:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 80262d0:	6809      	ldr	r1, [r1, #0]
 80262d2:	68a5      	ldr	r5, [r4, #8]
 80262d4:	6862      	ldr	r2, [r4, #4]
 80262d6:	1b52      	subs	r2, r2, r5
 80262d8:	4429      	add	r1, r5
 80262da:	f7ff f9cb 	bl	8025674 <mg_tls_recv>
 80262de:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 80262e0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80262e4:	d003      	beq.n	80262ee <handle_tls_recv+0x26>
  } else if (n > 0) {
 80262e6:	2800      	cmp	r0, #0
 80262e8:	dc06      	bgt.n	80262f8 <handle_tls_recv+0x30>
}
 80262ea:	b002      	add	sp, #8
 80262ec:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 80262ee:	4906      	ldr	r1, [pc, #24]	@ (8026308 <handle_tls_recv+0x40>)
 80262f0:	4630      	mov	r0, r6
 80262f2:	f7ff ffb1 	bl	8026258 <mg_error>
 80262f6:	e7f8      	b.n	80262ea <handle_tls_recv+0x22>
    io->len += (size_t) n;
 80262f8:	4405      	add	r5, r0
 80262fa:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 80262fc:	aa01      	add	r2, sp, #4
 80262fe:	2107      	movs	r1, #7
 8026300:	4630      	mov	r0, r6
 8026302:	f7fc fb26 	bl	8022952 <mg_call>
}
 8026306:	e7f0      	b.n	80262ea <handle_tls_recv+0x22>
 8026308:	0803aa90 	.word	0x0803aa90

0802630c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 802630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026310:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8026314:	4607      	mov	r7, r0
 8026316:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8026318:	2907      	cmp	r1, #7
 802631a:	f000 80e3 	beq.w	80264e4 <http_cb+0x1d8>
 802631e:	2909      	cmp	r1, #9
 8026320:	f000 814a 	beq.w	80265b8 <http_cb+0x2ac>
 8026324:	2902      	cmp	r1, #2
 8026326:	f040 80d9 	bne.w	80264dc <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 802632a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 802632e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8026332:	f023 030b 	bic.w	r3, r3, #11
 8026336:	04db      	lsls	r3, r3, #19
 8026338:	0cdb      	lsrs	r3, r3, #19
 802633a:	2b04      	cmp	r3, #4
 802633c:	f040 80ce 	bne.w	80264dc <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8026340:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8026342:	2b00      	cmp	r3, #0
 8026344:	f000 80ca 	beq.w	80264dc <http_cb+0x1d0>
 8026348:	f04f 0900 	mov.w	r9, #0
 802634c:	e0cc      	b.n	80264e8 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802634e:	4b9f      	ldr	r3, [pc, #636]	@ (80265cc <http_cb+0x2c0>)
 8026350:	681b      	ldr	r3, [r3, #0]
 8026352:	2b00      	cmp	r3, #0
 8026354:	dc11      	bgt.n	802637a <http_cb+0x6e>
        c->is_draining = 1;
 8026356:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 802635a:	f043 0310 	orr.w	r3, r3, #16
 802635e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8026362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026364:	eba3 0109 	sub.w	r1, r3, r9
 8026368:	2910      	cmp	r1, #16
 802636a:	bf28      	it	cs
 802636c:	2110      	movcs	r1, #16
 802636e:	4620      	mov	r0, r4
 8026370:	f7fc fe9a 	bl	80230a8 <mg_hexdump>
        c->recv.len = 0;
 8026374:	2300      	movs	r3, #0
 8026376:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8026378:	e0b0      	b.n	80264dc <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 802637a:	4b95      	ldr	r3, [pc, #596]	@ (80265d0 <http_cb+0x2c4>)
 802637c:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8026380:	4994      	ldr	r1, [pc, #592]	@ (80265d4 <http_cb+0x2c8>)
 8026382:	2001      	movs	r0, #1
 8026384:	f7ff fe80 	bl	8026088 <mg_log_prefix>
 8026388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802638a:	4893      	ldr	r0, [pc, #588]	@ (80265d8 <http_cb+0x2cc>)
 802638c:	f7fd fd2a 	bl	8023de4 <mg_log>
 8026390:	e7e1      	b.n	8026356 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8026392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026394:	eba3 0309 	sub.w	r3, r3, r9
 8026398:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 802639a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 802639c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 802639e:	1a52      	subs	r2, r2, r1
 80263a0:	1a9b      	subs	r3, r3, r2
 80263a2:	9383      	str	r3, [sp, #524]	@ 0x20c
 80263a4:	e0bf      	b.n	8026526 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 80263a6:	ad88      	add	r5, sp, #544	@ 0x220
 80263a8:	498c      	ldr	r1, [pc, #560]	@ (80265dc <http_cb+0x2d0>)
 80263aa:	4628      	mov	r0, r5
 80263ac:	f7fd fef8 	bl	80241a0 <mg_str_s>
 80263b0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80263b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80263b8:	f7fd ffed 	bl	8024396 <mg_strcasecmp>
 80263bc:	4604      	mov	r4, r0
 80263be:	b950      	cbnz	r0, 80263d6 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 80263c0:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 80263c2:	eb08 0309 	add.w	r3, r8, r9
 80263c6:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 80263c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80263ca:	eba3 0309 	sub.w	r3, r3, r9
 80263ce:	eba3 0b08 	sub.w	fp, r3, r8
 80263d2:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 80263d4:	e04a      	b.n	802646c <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 80263d6:	4982      	ldr	r1, [pc, #520]	@ (80265e0 <http_cb+0x2d4>)
 80263d8:	4638      	mov	r0, r7
 80263da:	f7ff ff3d 	bl	8026258 <mg_error>
          return;
 80263de:	e07d      	b.n	80264dc <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 80263e0:	2205      	movs	r2, #5
 80263e2:	4980      	ldr	r1, [pc, #512]	@ (80265e4 <http_cb+0x2d8>)
 80263e4:	9802      	ldr	r0, [sp, #8]
 80263e6:	f7f9 fc05 	bl	801fbf4 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 80263ea:	2800      	cmp	r0, #0
 80263ec:	d032      	beq.n	8026454 <http_cb+0x148>
 80263ee:	ac8a      	add	r4, sp, #552	@ 0x228
 80263f0:	497d      	ldr	r1, [pc, #500]	@ (80265e8 <http_cb+0x2dc>)
 80263f2:	4620      	mov	r0, r4
 80263f4:	f7fd fed4 	bl	80241a0 <mg_str_s>
 80263f8:	a902      	add	r1, sp, #8
 80263fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80263fe:	c903      	ldmia	r1, {r0, r1}
 8026400:	f7fd ffc9 	bl	8024396 <mg_strcasecmp>
 8026404:	b9c0      	cbnz	r0, 8026438 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8026406:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8026408:	4a78      	ldr	r2, [pc, #480]	@ (80265ec <http_cb+0x2e0>)
 802640a:	4613      	mov	r3, r2
 802640c:	f240 119b 	movw	r1, #411	@ 0x19b
 8026410:	4638      	mov	r0, r7
 8026412:	f7fd fd3b 	bl	8023e8c <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8026416:	4b6d      	ldr	r3, [pc, #436]	@ (80265cc <http_cb+0x2c0>)
 8026418:	681b      	ldr	r3, [r3, #0]
 802641a:	2b00      	cmp	r3, #0
 802641c:	f340 8092 	ble.w	8026544 <http_cb+0x238>
 8026420:	4b6b      	ldr	r3, [pc, #428]	@ (80265d0 <http_cb+0x2c4>)
 8026422:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8026426:	496b      	ldr	r1, [pc, #428]	@ (80265d4 <http_cb+0x2c8>)
 8026428:	2001      	movs	r0, #1
 802642a:	f7ff fe2d 	bl	8026088 <mg_log_prefix>
 802642e:	4970      	ldr	r1, [pc, #448]	@ (80265f0 <http_cb+0x2e4>)
 8026430:	4870      	ldr	r0, [pc, #448]	@ (80265f4 <http_cb+0x2e8>)
 8026432:	f7fd fcd7 	bl	8023de4 <mg_log>
      if (is_chunked) {
 8026436:	e085      	b.n	8026544 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8026438:	ac8c      	add	r4, sp, #560	@ 0x230
 802643a:	496f      	ldr	r1, [pc, #444]	@ (80265f8 <http_cb+0x2ec>)
 802643c:	4620      	mov	r0, r4
 802643e:	f7fd feaf 	bl	80241a0 <mg_str_s>
 8026442:	a902      	add	r1, sp, #8
 8026444:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026448:	c903      	ldmia	r1, {r0, r1}
 802644a:	f7fd ffa4 	bl	8024396 <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 802644e:	2800      	cmp	r0, #0
 8026450:	d178      	bne.n	8026544 <http_cb+0x238>
 8026452:	e7d8      	b.n	8026406 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8026454:	a802      	add	r0, sp, #8
 8026456:	f7fc fb6f 	bl	8022b38 <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 802645a:	28c7      	cmp	r0, #199	@ 0xc7
 802645c:	dd72      	ble.n	8026544 <http_cb+0x238>
 802645e:	28cc      	cmp	r0, #204	@ 0xcc
 8026460:	d070      	beq.n	8026544 <http_cb+0x238>
 8026462:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8026466:	d1cf      	bne.n	8026408 <http_cb+0xfc>
 8026468:	e06c      	b.n	8026544 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 802646a:	4406      	add	r6, r0
 802646c:	ab01      	add	r3, sp, #4
 802646e:	466a      	mov	r2, sp
 8026470:	ebab 0106 	sub.w	r1, fp, r6
 8026474:	19a8      	adds	r0, r5, r6
 8026476:	f7fe fecd 	bl	8025214 <skip_chunk>
 802647a:	2800      	cmp	r0, #0
 802647c:	dd02      	ble.n	8026484 <http_cb+0x178>
 802647e:	9b01      	ldr	r3, [sp, #4]
 8026480:	2b00      	cmp	r3, #0
 8026482:	d1f2      	bne.n	802646a <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8026484:	b338      	cbz	r0, 80264d6 <http_cb+0x1ca>
        if (cl < 0) {
 8026486:	2800      	cmp	r0, #0
 8026488:	db21      	blt.n	80264ce <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 802648a:	2300      	movs	r3, #0
 802648c:	9383      	str	r3, [sp, #524]	@ 0x20c
 802648e:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8026492:	ab01      	add	r3, sp, #4
 8026494:	466a      	mov	r2, sp
 8026496:	ebab 0104 	sub.w	r1, fp, r4
 802649a:	1928      	adds	r0, r5, r4
 802649c:	f7fe feba 	bl	8025214 <skip_chunk>
 80264a0:	1e06      	subs	r6, r0, #0
 80264a2:	dd11      	ble.n	80264c8 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 80264a4:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 80264a6:	9900      	ldr	r1, [sp, #0]
 80264a8:	4421      	add	r1, r4
 80264aa:	9a01      	ldr	r2, [sp, #4]
 80264ac:	4429      	add	r1, r5
 80264ae:	4428      	add	r0, r5
 80264b0:	f006 f9cc 	bl	802c84c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 80264b4:	4434      	add	r4, r6
 80264b6:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 80264b8:	9b01      	ldr	r3, [sp, #4]
 80264ba:	441a      	add	r2, r3
 80264bc:	9283      	str	r2, [sp, #524]	@ 0x20c
 80264be:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 80264c0:	441a      	add	r2, r3
 80264c2:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 80264c4:	2b00      	cmp	r3, #0
 80264c6:	d1e4      	bne.n	8026492 <http_cb+0x186>
        ofs += (size_t) (n + o);
 80264c8:	4444      	add	r4, r8
 80264ca:	44a1      	add	r9, r4
 80264cc:	e044      	b.n	8026558 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 80264ce:	494b      	ldr	r1, [pc, #300]	@ (80265fc <http_cb+0x2f0>)
 80264d0:	4638      	mov	r0, r7
 80264d2:	f7ff fec1 	bl	8026258 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80264d6:	f1b9 0f00 	cmp.w	r9, #0
 80264da:	d170      	bne.n	80265be <http_cb+0x2b2>
}
 80264dc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 80264e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264e4:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 80264e8:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	dbf2      	blt.n	80264d6 <http_cb+0x1ca>
 80264f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80264f2:	4549      	cmp	r1, r9
 80264f4:	d9ef      	bls.n	80264d6 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 80264f6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80264f8:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 80264fa:	aa02      	add	r2, sp, #8
 80264fc:	eba1 0109 	sub.w	r1, r1, r9
 8026500:	4620      	mov	r0, r4
 8026502:	f7fd ff77 	bl	80243f4 <mg_http_parse>
      if (n < 0) {
 8026506:	f1b0 0800 	subs.w	r8, r0, #0
 802650a:	f6ff af20 	blt.w	802634e <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 802650e:	f1b8 0f00 	cmp.w	r8, #0
 8026512:	d0e0      	beq.n	80264d6 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8026514:	aa02      	add	r2, sp, #8
 8026516:	210a      	movs	r1, #10
 8026518:	4638      	mov	r0, r7
 802651a:	f7fc fa1a 	bl	8022952 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 802651e:	f1ba 0f09 	cmp.w	sl, #9
 8026522:	f43f af36 	beq.w	8026392 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8026526:	4936      	ldr	r1, [pc, #216]	@ (8026600 <http_cb+0x2f4>)
 8026528:	a802      	add	r0, sp, #8
 802652a:	f7fc fadb 	bl	8022ae4 <mg_http_get_header>
 802652e:	4604      	mov	r4, r0
 8026530:	2800      	cmp	r0, #0
 8026532:	f47f af38 	bne.w	80263a6 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8026536:	4933      	ldr	r1, [pc, #204]	@ (8026604 <http_cb+0x2f8>)
 8026538:	a802      	add	r0, sp, #8
 802653a:	f7fc fad3 	bl	8022ae4 <mg_http_get_header>
 802653e:	2800      	cmp	r0, #0
 8026540:	f43f af4e 	beq.w	80263e0 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8026544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026546:	eba3 0309 	sub.w	r3, r3, r9
 802654a:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 802654e:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8026550:	429a      	cmp	r2, r3
 8026552:	d8c0      	bhi.n	80264d6 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8026554:	4490      	add	r8, r2
 8026556:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8026558:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802655c:	f013 0f04 	tst.w	r3, #4
 8026560:	d005      	beq.n	802656e <http_cb+0x262>
 8026562:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8026566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802656a:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 802656e:	aa02      	add	r2, sp, #8
 8026570:	210b      	movs	r1, #11
 8026572:	4638      	mov	r0, r7
 8026574:	f7fc f9ed 	bl	8022952 <mg_call>
      if (c->is_accepted) {
 8026578:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802657c:	f013 0f04 	tst.w	r3, #4
 8026580:	d0b2      	beq.n	80264e8 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8026582:	4921      	ldr	r1, [pc, #132]	@ (8026608 <http_cb+0x2fc>)
 8026584:	a802      	add	r0, sp, #8
 8026586:	f7fc faad 	bl	8022ae4 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 802658a:	4605      	mov	r5, r0
 802658c:	2800      	cmp	r0, #0
 802658e:	d0ab      	beq.n	80264e8 <http_cb+0x1dc>
 8026590:	ac8e      	add	r4, sp, #568	@ 0x238
 8026592:	491e      	ldr	r1, [pc, #120]	@ (802660c <http_cb+0x300>)
 8026594:	4620      	mov	r0, r4
 8026596:	f7fd fe03 	bl	80241a0 <mg_str_s>
 802659a:	e894 000c 	ldmia.w	r4, {r2, r3}
 802659e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80265a2:	f7fd fef8 	bl	8024396 <mg_strcasecmp>
 80265a6:	2800      	cmp	r0, #0
 80265a8:	d19e      	bne.n	80264e8 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 80265aa:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80265ae:	f043 0310 	orr.w	r3, r3, #16
 80265b2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 80265b6:	e78e      	b.n	80264d6 <http_cb+0x1ca>
 80265b8:	f04f 0900 	mov.w	r9, #0
 80265bc:	e794      	b.n	80264e8 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80265be:	464a      	mov	r2, r9
 80265c0:	2100      	movs	r1, #0
 80265c2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80265c6:	f7ff f928 	bl	802581a <mg_iobuf_del>
 80265ca:	e787      	b.n	80264dc <http_cb+0x1d0>
 80265cc:	2000012c 	.word	0x2000012c
 80265d0:	0803b474 	.word	0x0803b474
 80265d4:	0803aa28 	.word	0x0803aa28
 80265d8:	0803aaa0 	.word	0x0803aaa0
 80265dc:	0803aab8 	.word	0x0803aab8
 80265e0:	0803aac0 	.word	0x0803aac0
 80265e4:	0803a220 	.word	0x0803a220
 80265e8:	08036568 	.word	0x08036568
 80265ec:	08036a40 	.word	0x08036a40
 80265f0:	0803aaec 	.word	0x0803aaec
 80265f4:	0803ad40 	.word	0x0803ad40
 80265f8:	08037250 	.word	0x08037250
 80265fc:	0803ab10 	.word	0x0803ab10
 8026600:	0803aac8 	.word	0x0803aac8
 8026604:	0803aadc 	.word	0x0803aadc
 8026608:	0803ab20 	.word	0x0803ab20
 802660c:	0803ab2c 	.word	0x0803ab2c

08026610 <uri_to_path2>:
                        char *path, size_t path_size) {
 8026610:	b082      	sub	sp, #8
 8026612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026616:	b086      	sub	sp, #24
 8026618:	4681      	mov	r9, r0
 802661a:	460e      	mov	r6, r1
 802661c:	4690      	mov	r8, r2
 802661e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026620:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026622:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8026624:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026626:	9300      	str	r3, [sp, #0]
 8026628:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802662a:	4a6f      	ldr	r2, [pc, #444]	@ (80267e8 <uri_to_path2+0x1d8>)
 802662c:	4639      	mov	r1, r7
 802662e:	4628      	mov	r0, r5
 8026630:	f7fc ff2e 	bl	8023490 <mg_snprintf>
  if (n + 2 >= path_size) {
 8026634:	1c83      	adds	r3, r0, #2
 8026636:	42bb      	cmp	r3, r7
 8026638:	d227      	bcs.n	802668a <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 802663a:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 802663e:	2300      	movs	r3, #0
 8026640:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8026644:	b150      	cbz	r0, 802665c <uri_to_path2+0x4c>
 8026646:	182b      	adds	r3, r5, r0
 8026648:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802664c:	2b2f      	cmp	r3, #47	@ 0x2f
 802664e:	d005      	beq.n	802665c <uri_to_path2+0x4c>
 8026650:	1c43      	adds	r3, r0, #1
 8026652:	222f      	movs	r2, #47	@ 0x2f
 8026654:	542a      	strb	r2, [r5, r0]
 8026656:	2200      	movs	r2, #0
 8026658:	54ea      	strb	r2, [r5, r3]
 802665a:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 802665c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802665e:	68f1      	ldr	r1, [r6, #12]
 8026660:	428c      	cmp	r4, r1
 8026662:	d31c      	bcc.n	802669e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8026664:	2300      	movs	r3, #0
 8026666:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 802666a:	ac02      	add	r4, sp, #8
 802666c:	463a      	mov	r2, r7
 802666e:	4629      	mov	r1, r5
 8026670:	4620      	mov	r0, r4
 8026672:	f7fd fda1 	bl	80241b8 <mg_str_n>
 8026676:	e894 0003 	ldmia.w	r4, {r0, r1}
 802667a:	f7ff fcda 	bl	8026032 <mg_path_is_sane>
 802667e:	b1c0      	cbz	r0, 80266b2 <uri_to_path2+0xa2>
  n = strlen(path);
 8026680:	4628      	mov	r0, r5
 8026682:	f7e9 fe0d 	bl	80102a0 <strlen>
 8026686:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8026688:	e020      	b.n	80266cc <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 802668a:	4b58      	ldr	r3, [pc, #352]	@ (80267ec <uri_to_path2+0x1dc>)
 802668c:	4a58      	ldr	r2, [pc, #352]	@ (80267f0 <uri_to_path2+0x1e0>)
 802668e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026692:	4648      	mov	r0, r9
 8026694:	f7fd fbfa 	bl	8023e8c <mg_http_reply>
    return -1;
 8026698:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802669c:	e046      	b.n	802672c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 802669e:	2300      	movs	r3, #0
 80266a0:	9300      	str	r3, [sp, #0]
 80266a2:	1a3b      	subs	r3, r7, r0
 80266a4:	182a      	adds	r2, r5, r0
 80266a6:	1b09      	subs	r1, r1, r4
 80266a8:	68b0      	ldr	r0, [r6, #8]
 80266aa:	4420      	add	r0, r4
 80266ac:	f7fe fc06 	bl	8024ebc <mg_url_decode>
 80266b0:	e7d8      	b.n	8026664 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 80266b2:	4b50      	ldr	r3, [pc, #320]	@ (80267f4 <uri_to_path2+0x1e4>)
 80266b4:	4a4e      	ldr	r2, [pc, #312]	@ (80267f0 <uri_to_path2+0x1e0>)
 80266b6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80266ba:	4648      	mov	r0, r9
 80266bc:	f7fd fbe6 	bl	8023e8c <mg_http_reply>
    return -1;
 80266c0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80266c4:	e032      	b.n	802672c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80266c6:	2200      	movs	r2, #0
 80266c8:	54ea      	strb	r2, [r5, r3]
 80266ca:	461c      	mov	r4, r3
 80266cc:	2c01      	cmp	r4, #1
 80266ce:	d905      	bls.n	80266dc <uri_to_path2+0xcc>
 80266d0:	1e63      	subs	r3, r4, #1
 80266d2:	f815 c003 	ldrb.w	ip, [r5, r3]
 80266d6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 80266da:	d0f4      	beq.n	80266c6 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 80266dc:	f10d 0a10 	add.w	sl, sp, #16
 80266e0:	4945      	ldr	r1, [pc, #276]	@ (80267f8 <uri_to_path2+0x1e8>)
 80266e2:	4650      	mov	r0, sl
 80266e4:	f7fd fd5c 	bl	80241a0 <mg_str_s>
 80266e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80266ec:	f106 0108 	add.w	r1, r6, #8
 80266f0:	c903      	ldmia	r1, {r0, r1}
 80266f2:	f7fd fe26 	bl	8024342 <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 80266f6:	b1f8      	cbz	r0, 8026738 <uri_to_path2+0x128>
 80266f8:	f8d8 3000 	ldr.w	r3, [r8]
 80266fc:	2200      	movs	r2, #0
 80266fe:	4611      	mov	r1, r2
 8026700:	4628      	mov	r0, r5
 8026702:	4798      	blx	r3
 8026704:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8026706:	4b3d      	ldr	r3, [pc, #244]	@ (80267fc <uri_to_path2+0x1ec>)
 8026708:	681b      	ldr	r3, [r3, #0]
 802670a:	2b03      	cmp	r3, #3
 802670c:	dc17      	bgt.n	802673e <uri_to_path2+0x12e>
  if (flags == 0) {
 802670e:	f1ba 0f00 	cmp.w	sl, #0
 8026712:	d00b      	beq.n	802672c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026714:	f01a 0104 	ands.w	r1, sl, #4
 8026718:	d007      	beq.n	802672a <uri_to_path2+0x11a>
 802671a:	68f2      	ldr	r2, [r6, #12]
 802671c:	b12a      	cbz	r2, 802672a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 802671e:	68b3      	ldr	r3, [r6, #8]
 8026720:	1898      	adds	r0, r3, r2
 8026722:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8026726:	282f      	cmp	r0, #47	@ 0x2f
 8026728:	d11b      	bne.n	8026762 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 802672a:	bb39      	cbnz	r1, 802677c <uri_to_path2+0x16c>
}
 802672c:	4650      	mov	r0, sl
 802672e:	b006      	add	sp, #24
 8026730:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026734:	b002      	add	sp, #8
 8026736:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8026738:	f04f 0a04 	mov.w	sl, #4
 802673c:	e7e3      	b.n	8026706 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 802673e:	4b30      	ldr	r3, [pc, #192]	@ (8026800 <uri_to_path2+0x1f0>)
 8026740:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8026744:	492f      	ldr	r1, [pc, #188]	@ (8026804 <uri_to_path2+0x1f4>)
 8026746:	2004      	movs	r0, #4
 8026748:	f7ff fc9e 	bl	8026088 <mg_log_prefix>
 802674c:	f8cd a004 	str.w	sl, [sp, #4]
 8026750:	9500      	str	r5, [sp, #0]
 8026752:	68b3      	ldr	r3, [r6, #8]
 8026754:	68f2      	ldr	r2, [r6, #12]
 8026756:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 802675a:	482b      	ldr	r0, [pc, #172]	@ (8026808 <uri_to_path2+0x1f8>)
 802675c:	f7fd fb42 	bl	8023de4 <mg_log>
 8026760:	e7d5      	b.n	802670e <uri_to_path2+0xfe>
    mg_printf(c,
 8026762:	492a      	ldr	r1, [pc, #168]	@ (802680c <uri_to_path2+0x1fc>)
 8026764:	4648      	mov	r0, r9
 8026766:	f7fd fb6b 	bl	8023e40 <mg_printf>
    c->is_resp = 0;
 802676a:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 802676e:	f36f 13c7 	bfc	r3, #7, #1
 8026772:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8026776:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802677a:	e7d7      	b.n	802672c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 802677c:	192e      	adds	r6, r5, r4
 802677e:	1b3f      	subs	r7, r7, r4
 8026780:	4a23      	ldr	r2, [pc, #140]	@ (8026810 <uri_to_path2+0x200>)
 8026782:	4639      	mov	r1, r7
 8026784:	4630      	mov	r0, r6
 8026786:	f7fc fe83 	bl	8023490 <mg_snprintf>
 802678a:	b130      	cbz	r0, 802679a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 802678c:	f8d8 3000 	ldr.w	r3, [r8]
 8026790:	2200      	movs	r2, #0
 8026792:	4611      	mov	r1, r2
 8026794:	4628      	mov	r0, r5
 8026796:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8026798:	bb08      	cbnz	r0, 80267de <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 802679a:	4a1e      	ldr	r2, [pc, #120]	@ (8026814 <uri_to_path2+0x204>)
 802679c:	4639      	mov	r1, r7
 802679e:	4630      	mov	r0, r6
 80267a0:	f7fc fe76 	bl	8023490 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80267a4:	b130      	cbz	r0, 80267b4 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80267a6:	f8d8 3000 	ldr.w	r3, [r8]
 80267aa:	2200      	movs	r2, #0
 80267ac:	4611      	mov	r1, r2
 80267ae:	4628      	mov	r0, r5
 80267b0:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80267b2:	b9b0      	cbnz	r0, 80267e2 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 80267b4:	4a18      	ldr	r2, [pc, #96]	@ (8026818 <uri_to_path2+0x208>)
 80267b6:	4639      	mov	r1, r7
 80267b8:	4630      	mov	r0, r6
 80267ba:	f7fc fe69 	bl	8023490 <mg_snprintf>
 80267be:	b158      	cbz	r0, 80267d8 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 80267c0:	f8d8 3000 	ldr.w	r3, [r8]
 80267c4:	2200      	movs	r2, #0
 80267c6:	4611      	mov	r1, r2
 80267c8:	4628      	mov	r0, r5
 80267ca:	4798      	blx	r3
                    0 &&
 80267cc:	b120      	cbz	r0, 80267d8 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80267ce:	340b      	adds	r4, #11
 80267d0:	2200      	movs	r2, #0
 80267d2:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 80267d4:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 80267d6:	e7a9      	b.n	802672c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 80267d8:	2300      	movs	r3, #0
 80267da:	7033      	strb	r3, [r6, #0]
 80267dc:	e7a6      	b.n	802672c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80267de:	4682      	mov	sl, r0
 80267e0:	e7a4      	b.n	802672c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 80267e2:	4682      	mov	sl, r0
 80267e4:	e7a2      	b.n	802672c <uri_to_path2+0x11c>
 80267e6:	bf00      	nop
 80267e8:	0803a178 	.word	0x0803a178
 80267ec:	0803ab34 	.word	0x0803ab34
 80267f0:	08036a40 	.word	0x08036a40
 80267f4:	0803ab48 	.word	0x0803ab48
 80267f8:	0803a224 	.word	0x0803a224
 80267fc:	2000012c 	.word	0x2000012c
 8026800:	0803b464 	.word	0x0803b464
 8026804:	0803aa28 	.word	0x0803aa28
 8026808:	0803ab58 	.word	0x0803ab58
 802680c:	0803ab6c 	.word	0x0803ab6c
 8026810:	0803aba8 	.word	0x0803aba8
 8026814:	0803abb4 	.word	0x0803abb4
 8026818:	0803abc4 	.word	0x0803abc4

0802681c <uri_to_path>:
                       size_t path_size) {
 802681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026820:	b096      	sub	sp, #88	@ 0x58
 8026822:	4606      	mov	r6, r0
 8026824:	460d      	mov	r5, r1
 8026826:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026828:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802682c:	f1b8 0f00 	cmp.w	r8, #0
 8026830:	d069      	beq.n	8026906 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8026832:	6811      	ldr	r1, [r2, #0]
 8026834:	a80c      	add	r0, sp, #48	@ 0x30
 8026836:	f7fd fcb3 	bl	80241a0 <mg_str_s>
 802683a:	2300      	movs	r3, #0
 802683c:	930a      	str	r3, [sp, #40]	@ 0x28
 802683e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026840:	ab08      	add	r3, sp, #32
 8026842:	aa0a      	add	r2, sp, #40	@ 0x28
 8026844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026848:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 802684c:	ab0c      	add	r3, sp, #48	@ 0x30
 802684e:	222c      	movs	r2, #44	@ 0x2c
 8026850:	9200      	str	r2, [sp, #0]
 8026852:	aa0e      	add	r2, sp, #56	@ 0x38
 8026854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026858:	f7fd ff5f 	bl	802471a <mg_span>
 802685c:	2800      	cmp	r0, #0
 802685e:	d055      	beq.n	802690c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8026860:	233d      	movs	r3, #61	@ 0x3d
 8026862:	9300      	str	r3, [sp, #0]
 8026864:	ab10      	add	r3, sp, #64	@ 0x40
 8026866:	aa12      	add	r2, sp, #72	@ 0x48
 8026868:	ac0e      	add	r4, sp, #56	@ 0x38
 802686a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802686e:	f7fd ff54 	bl	802471a <mg_span>
 8026872:	b978      	cbnz	r0, 8026894 <uri_to_path+0x78>
 8026874:	ab12      	add	r3, sp, #72	@ 0x48
 8026876:	e9d4 0100 	ldrd	r0, r1, [r4]
 802687a:	e883 0003 	stmia.w	r3, {r0, r1}
 802687e:	ac06      	add	r4, sp, #24
 8026880:	2200      	movs	r2, #0
 8026882:	4611      	mov	r1, r2
 8026884:	4620      	mov	r0, r4
 8026886:	f7fd fc97 	bl	80241b8 <mg_str_n>
 802688a:	ab10      	add	r3, sp, #64	@ 0x40
 802688c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026890:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8026894:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026896:	b9c3      	cbnz	r3, 80268ca <uri_to_path+0xae>
 8026898:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 802689c:	ac12      	add	r4, sp, #72	@ 0x48
 802689e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80268a2:	e889 0003 	stmia.w	r9, {r0, r1}
 80268a6:	f10d 0a18 	add.w	sl, sp, #24
 80268aa:	4922      	ldr	r1, [pc, #136]	@ (8026934 <uri_to_path+0x118>)
 80268ac:	4650      	mov	r0, sl
 80268ae:	f7fd fc77 	bl	80241a0 <mg_str_s>
 80268b2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80268b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80268ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80268bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80268c0:	ab08      	add	r3, sp, #32
 80268c2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80268c6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80268ca:	68eb      	ldr	r3, [r5, #12]
 80268cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80268ce:	4293      	cmp	r3, r2
 80268d0:	d3bc      	bcc.n	802684c <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80268d2:	ac14      	add	r4, sp, #80	@ 0x50
 80268d4:	68a9      	ldr	r1, [r5, #8]
 80268d6:	4620      	mov	r0, r4
 80268d8:	f7fd fc6e 	bl	80241b8 <mg_str_n>
 80268dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80268e0:	a912      	add	r1, sp, #72	@ 0x48
 80268e2:	c903      	ldmia	r1, {r0, r1}
 80268e4:	f7fd fd2d 	bl	8024342 <mg_strcmp>
 80268e8:	2800      	cmp	r0, #0
 80268ea:	d1af      	bne.n	802684c <uri_to_path+0x30>
    u = k, p = v;
 80268ec:	ab0a      	add	r3, sp, #40	@ 0x28
 80268ee:	aa12      	add	r2, sp, #72	@ 0x48
 80268f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80268f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80268f8:	ab08      	add	r3, sp, #32
 80268fa:	aa10      	add	r2, sp, #64	@ 0x40
 80268fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026900:	e883 0003 	stmia.w	r3, {r0, r1}
 8026904:	e7a2      	b.n	802684c <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026906:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 8026938 <uri_to_path+0x11c>
 802690a:	e792      	b.n	8026832 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 802690c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802690e:	9304      	str	r3, [sp, #16]
 8026910:	9703      	str	r7, [sp, #12]
 8026912:	ab01      	add	r3, sp, #4
 8026914:	aa08      	add	r2, sp, #32
 8026916:	e892 0003 	ldmia.w	r2, {r0, r1}
 802691a:	e883 0003 	stmia.w	r3, {r0, r1}
 802691e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026920:	9300      	str	r3, [sp, #0]
 8026922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026924:	4642      	mov	r2, r8
 8026926:	4629      	mov	r1, r5
 8026928:	4630      	mov	r0, r6
 802692a:	f7ff fe71 	bl	8026610 <uri_to_path2>
}
 802692e:	b016      	add	sp, #88	@ 0x58
 8026930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026934:	0803a224 	.word	0x0803a224
 8026938:	20000130 	.word	0x20000130

0802693c <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 802693c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026940:	b0a7      	sub	sp, #156	@ 0x9c
 8026942:	4607      	mov	r7, r0
 8026944:	460e      	mov	r6, r1
 8026946:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 8026948:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 802694c:	2380      	movs	r3, #128	@ 0x80
 802694e:	9300      	str	r3, [sp, #0]
 8026950:	ab02      	add	r3, sp, #8
 8026952:	f7ff ff63 	bl	802681c <uri_to_path>
  if (flags < 0) {
 8026956:	2800      	cmp	r0, #0
 8026958:	db20      	blt.n	802699c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 802695a:	f010 0f04 	tst.w	r0, #4
 802695e:	d120      	bne.n	80269a2 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 8026960:	b1b0      	cbz	r0, 8026990 <mg_http_serve_dir+0x54>
 8026962:	f1b8 0f00 	cmp.w	r8, #0
 8026966:	d013      	beq.n	8026990 <mg_http_serve_dir+0x54>
 8026968:	ac22      	add	r4, sp, #136	@ 0x88
 802696a:	a902      	add	r1, sp, #8
 802696c:	4620      	mov	r0, r4
 802696e:	f7fd fc17 	bl	80241a0 <mg_str_s>
 8026972:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 8026976:	4641      	mov	r1, r8
 8026978:	4648      	mov	r0, r9
 802697a:	f7fd fc11 	bl	80241a0 <mg_str_s>
 802697e:	2300      	movs	r3, #0
 8026980:	9300      	str	r3, [sp, #0]
 8026982:	e899 000c 	ldmia.w	r9, {r2, r3}
 8026986:	e894 0003 	ldmia.w	r4, {r0, r1}
 802698a:	f7fd fe2b 	bl	80245e4 <mg_match>
 802698e:	b978      	cbnz	r0, 80269b0 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8026990:	462b      	mov	r3, r5
 8026992:	aa02      	add	r2, sp, #8
 8026994:	4631      	mov	r1, r6
 8026996:	4638      	mov	r0, r7
 8026998:	f7fd ffe0 	bl	802495c <mg_http_serve_file>
}
 802699c:	b027      	add	sp, #156	@ 0x9c
 802699e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 80269a2:	ab02      	add	r3, sp, #8
 80269a4:	462a      	mov	r2, r5
 80269a6:	4631      	mov	r1, r6
 80269a8:	4638      	mov	r0, r7
 80269aa:	f7fe fbb3 	bl	8025114 <listdir>
 80269ae:	e7f5      	b.n	802699c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80269b0:	aa02      	add	r2, sp, #8
 80269b2:	6829      	ldr	r1, [r5, #0]
 80269b4:	4638      	mov	r0, r7
 80269b6:	f7fd fbe9 	bl	802418c <mg_http_serve_ssi>
 80269ba:	e7ef      	b.n	802699c <mg_http_serve_dir+0x60>

080269bc <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 80269bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269be:	b0c3      	sub	sp, #268	@ 0x10c
 80269c0:	4605      	mov	r5, r0
 80269c2:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80269c4:	688b      	ldr	r3, [r1, #8]
 80269c6:	695e      	ldr	r6, [r3, #20]
 80269c8:	b1b6      	cbz	r6, 80269f8 <printdirentry+0x3c>
  size_t size = 0;
 80269ca:	2300      	movs	r3, #0
 80269cc:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 80269ce:	2200      	movs	r2, #0
 80269d0:	2300      	movs	r3, #0
 80269d2:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 80269d6:	9501      	str	r5, [sp, #4]
 80269d8:	232f      	movs	r3, #47	@ 0x2f
 80269da:	9300      	str	r3, [sp, #0]
 80269dc:	68e3      	ldr	r3, [r4, #12]
 80269de:	4a3c      	ldr	r2, [pc, #240]	@ (8026ad0 <printdirentry+0x114>)
 80269e0:	2180      	movs	r1, #128	@ 0x80
 80269e2:	a81e      	add	r0, sp, #120	@ 0x78
 80269e4:	f7fc fd54 	bl	8023490 <mg_snprintf>
 80269e8:	2880      	cmp	r0, #128	@ 0x80
 80269ea:	d913      	bls.n	8026a14 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 80269ec:	4b39      	ldr	r3, [pc, #228]	@ (8026ad4 <printdirentry+0x118>)
 80269ee:	681b      	ldr	r3, [r3, #0]
 80269f0:	2b00      	cmp	r3, #0
 80269f2:	dc03      	bgt.n	80269fc <printdirentry+0x40>
}
 80269f4:	b043      	add	sp, #268	@ 0x10c
 80269f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 80269f8:	4e37      	ldr	r6, [pc, #220]	@ (8026ad8 <printdirentry+0x11c>)
 80269fa:	e7e6      	b.n	80269ca <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 80269fc:	4b37      	ldr	r3, [pc, #220]	@ (8026adc <printdirentry+0x120>)
 80269fe:	f640 3248 	movw	r2, #2888	@ 0xb48
 8026a02:	4937      	ldr	r1, [pc, #220]	@ (8026ae0 <printdirentry+0x124>)
 8026a04:	2001      	movs	r0, #1
 8026a06:	f7ff fb3f 	bl	8026088 <mg_log_prefix>
 8026a0a:	4629      	mov	r1, r5
 8026a0c:	4835      	ldr	r0, [pc, #212]	@ (8026ae4 <printdirentry+0x128>)
 8026a0e:	f7fd f9e9 	bl	8023de4 <mg_log>
 8026a12:	e7ef      	b.n	80269f4 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8026a14:	6833      	ldr	r3, [r6, #0]
 8026a16:	aa3e      	add	r2, sp, #248	@ 0xf8
 8026a18:	a941      	add	r1, sp, #260	@ 0x104
 8026a1a:	a81e      	add	r0, sp, #120	@ 0x78
 8026a1c:	4798      	blx	r3
 8026a1e:	b9a8      	cbnz	r0, 8026a4c <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8026a20:	4b2c      	ldr	r3, [pc, #176]	@ (8026ad4 <printdirentry+0x118>)
 8026a22:	681b      	ldr	r3, [r3, #0]
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	dde5      	ble.n	80269f4 <printdirentry+0x38>
 8026a28:	4b2c      	ldr	r3, [pc, #176]	@ (8026adc <printdirentry+0x120>)
 8026a2a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8026a2e:	492c      	ldr	r1, [pc, #176]	@ (8026ae0 <printdirentry+0x124>)
 8026a30:	2001      	movs	r0, #1
 8026a32:	f7ff fb29 	bl	8026088 <mg_log_prefix>
 8026a36:	6823      	ldr	r3, [r4, #0]
 8026a38:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8026a3a:	f007 f925 	bl	802dc88 <__errno>
 8026a3e:	6803      	ldr	r3, [r0, #0]
 8026a40:	aa1e      	add	r2, sp, #120	@ 0x78
 8026a42:	4621      	mov	r1, r4
 8026a44:	4828      	ldr	r0, [pc, #160]	@ (8026ae8 <printdirentry+0x12c>)
 8026a46:	f7fd f9cd 	bl	8023de4 <mg_log>
 8026a4a:	e7d3      	b.n	80269f4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026a4c:	f010 0604 	ands.w	r6, r0, #4
 8026a50:	d02d      	beq.n	8026aae <printdirentry+0xf2>
 8026a52:	4f26      	ldr	r7, [pc, #152]	@ (8026aec <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 8026a54:	2e00      	cmp	r6, #0
 8026a56:	d02c      	beq.n	8026ab2 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8026a58:	4b25      	ldr	r3, [pc, #148]	@ (8026af0 <printdirentry+0x134>)
 8026a5a:	4a26      	ldr	r2, [pc, #152]	@ (8026af4 <printdirentry+0x138>)
 8026a5c:	2128      	movs	r1, #40	@ 0x28
 8026a5e:	a814      	add	r0, sp, #80	@ 0x50
 8026a60:	f7fc fd16 	bl	8023490 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8026a64:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8026a66:	4a24      	ldr	r2, [pc, #144]	@ (8026af8 <printdirentry+0x13c>)
 8026a68:	2128      	movs	r1, #40	@ 0x28
 8026a6a:	eb0d 0001 	add.w	r0, sp, r1
 8026a6e:	f7fc fd0f 	bl	8023490 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8026a72:	4628      	mov	r0, r5
 8026a74:	f7e9 fc14 	bl	80102a0 <strlen>
 8026a78:	4601      	mov	r1, r0
 8026a7a:	2380      	movs	r3, #128	@ 0x80
 8026a7c:	aa1e      	add	r2, sp, #120	@ 0x78
 8026a7e:	4628      	mov	r0, r5
 8026a80:	f7fd fa58 	bl	8023f34 <mg_url_encode>
 8026a84:	4602      	mov	r2, r0
    mg_printf(d->c,
 8026a86:	6820      	ldr	r0, [r4, #0]
 8026a88:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8026a8a:	b9e6      	cbnz	r6, 8026ac6 <printdirentry+0x10a>
 8026a8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026a8e:	2400      	movs	r4, #0
 8026a90:	ae14      	add	r6, sp, #80	@ 0x50
 8026a92:	9608      	str	r6, [sp, #32]
 8026a94:	9306      	str	r3, [sp, #24]
 8026a96:	9407      	str	r4, [sp, #28]
 8026a98:	ab0a      	add	r3, sp, #40	@ 0x28
 8026a9a:	9304      	str	r3, [sp, #16]
 8026a9c:	9103      	str	r1, [sp, #12]
 8026a9e:	9702      	str	r7, [sp, #8]
 8026aa0:	9501      	str	r5, [sp, #4]
 8026aa2:	9700      	str	r7, [sp, #0]
 8026aa4:	ab1e      	add	r3, sp, #120	@ 0x78
 8026aa6:	4915      	ldr	r1, [pc, #84]	@ (8026afc <printdirentry+0x140>)
 8026aa8:	f7fd f9ca 	bl	8023e40 <mg_printf>
}
 8026aac:	e7a2      	b.n	80269f4 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8026aae:	4f14      	ldr	r7, [pc, #80]	@ (8026b00 <printdirentry+0x144>)
 8026ab0:	e7d0      	b.n	8026a54 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8026ab2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026ab4:	9300      	str	r3, [sp, #0]
 8026ab6:	2300      	movs	r3, #0
 8026ab8:	9301      	str	r3, [sp, #4]
 8026aba:	4a12      	ldr	r2, [pc, #72]	@ (8026b04 <printdirentry+0x148>)
 8026abc:	2128      	movs	r1, #40	@ 0x28
 8026abe:	a814      	add	r0, sp, #80	@ 0x50
 8026ac0:	f7fc fce6 	bl	8023490 <mg_snprintf>
 8026ac4:	e7ce      	b.n	8026a64 <printdirentry+0xa8>
    mg_printf(d->c,
 8026ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026aca:	461c      	mov	r4, r3
 8026acc:	e7e0      	b.n	8026a90 <printdirentry+0xd4>
 8026ace:	bf00      	nop
 8026ad0:	0803abd4 	.word	0x0803abd4
 8026ad4:	2000012c 	.word	0x2000012c
 8026ad8:	20000130 	.word	0x20000130
 8026adc:	0803b454 	.word	0x0803b454
 8026ae0:	0803aa28 	.word	0x0803aa28
 8026ae4:	0803abdc 	.word	0x0803abdc
 8026ae8:	0803abec 	.word	0x0803abec
 8026aec:	0803a224 	.word	0x0803a224
 8026af0:	0803ac00 	.word	0x0803ac00
 8026af4:	0803ad40 	.word	0x0803ad40
 8026af8:	0803aff0 	.word	0x0803aff0
 8026afc:	0803ac10 	.word	0x0803ac10
 8026b00:	08036a40 	.word	0x08036a40
 8026b04:	0803ac08 	.word	0x0803ac08

08026b08 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8026b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b0c:	b0ca      	sub	sp, #296	@ 0x128
 8026b0e:	4607      	mov	r7, r0
 8026b10:	460d      	mov	r5, r1
 8026b12:	4616      	mov	r6, r2
 8026b14:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8026b16:	2330      	movs	r3, #48	@ 0x30
 8026b18:	9343      	str	r3, [sp, #268]	@ 0x10c
 8026b1a:	2400      	movs	r4, #0
 8026b1c:	9444      	str	r4, [sp, #272]	@ 0x110
 8026b1e:	9445      	str	r4, [sp, #276]	@ 0x114
 8026b20:	9446      	str	r4, [sp, #280]	@ 0x118
 8026b22:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8026b24:	f101 0a10 	add.w	sl, r1, #16
 8026b28:	2314      	movs	r3, #20
 8026b2a:	aa43      	add	r2, sp, #268	@ 0x10c
 8026b2c:	4964      	ldr	r1, [pc, #400]	@ (8026cc0 <mg_http_upload+0x1b8>)
 8026b2e:	4650      	mov	r0, sl
 8026b30:	f7fe fa23 	bl	8024f7a <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8026b34:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 8026b38:	2380      	movs	r3, #128	@ 0x80
 8026b3a:	464a      	mov	r2, r9
 8026b3c:	4961      	ldr	r1, [pc, #388]	@ (8026cc4 <mg_http_upload+0x1bc>)
 8026b3e:	4650      	mov	r0, sl
 8026b40:	f7fe fa1b 	bl	8024f7a <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 8026b44:	4622      	mov	r2, r4
 8026b46:	4621      	mov	r1, r4
 8026b48:	a843      	add	r0, sp, #268	@ 0x10c
 8026b4a:	f005 fa1f 	bl	802bf8c <strtol>
 8026b4e:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 8026b50:	f8cd 9004 	str.w	r9, [sp, #4]
 8026b54:	232f      	movs	r3, #47	@ 0x2f
 8026b56:	9300      	str	r3, [sp, #0]
 8026b58:	4643      	mov	r3, r8
 8026b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8026cc8 <mg_http_upload+0x1c0>)
 8026b5c:	2180      	movs	r1, #128	@ 0x80
 8026b5e:	a803      	add	r0, sp, #12
 8026b60:	f7fc fc96 	bl	8023490 <mg_snprintf>
  if (hm->body.len == 0) {
 8026b64:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 8026b68:	f1b8 0f00 	cmp.w	r8, #0
 8026b6c:	d047      	beq.n	8026bfe <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 8026b6e:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8026b72:	2b00      	cmp	r3, #0
 8026b74:	d04c      	beq.n	8026c10 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8026b76:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 8026b7a:	a923      	add	r1, sp, #140	@ 0x8c
 8026b7c:	4648      	mov	r0, r9
 8026b7e:	f7fd fb0f 	bl	80241a0 <mg_str_s>
 8026b82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026b86:	f7ff fa54 	bl	8026032 <mg_path_is_sane>
 8026b8a:	2800      	cmp	r0, #0
 8026b8c:	d04a      	beq.n	8026c24 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 8026b8e:	2c00      	cmp	r4, #0
 8026b90:	db54      	blt.n	8026c3c <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8026b92:	44a0      	add	r8, r4
 8026b94:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8026b96:	4598      	cmp	r8, r3
 8026b98:	d85a      	bhi.n	8026c50 <mg_http_upload+0x148>
    size_t current_size = 0;
 8026b9a:	2300      	movs	r3, #0
 8026b9c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8026ccc <mg_http_upload+0x1c4>)
 8026ba0:	681b      	ldr	r3, [r3, #0]
 8026ba2:	2b02      	cmp	r3, #2
 8026ba4:	dc61      	bgt.n	8026c6a <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8026ba6:	b914      	cbnz	r4, 8026bae <mg_http_upload+0xa6>
 8026ba8:	6a33      	ldr	r3, [r6, #32]
 8026baa:	a803      	add	r0, sp, #12
 8026bac:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8026bae:	6833      	ldr	r3, [r6, #0]
 8026bb0:	2200      	movs	r2, #0
 8026bb2:	a902      	add	r1, sp, #8
 8026bb4:	a803      	add	r0, sp, #12
 8026bb6:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8026bb8:	2c00      	cmp	r4, #0
 8026bba:	dd02      	ble.n	8026bc2 <mg_http_upload+0xba>
 8026bbc:	9b02      	ldr	r3, [sp, #8]
 8026bbe:	429c      	cmp	r4, r3
 8026bc0:	d162      	bne.n	8026c88 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8026bc2:	2202      	movs	r2, #2
 8026bc4:	a903      	add	r1, sp, #12
 8026bc6:	4630      	mov	r0, r6
 8026bc8:	f7fb fed2 	bl	8022970 <mg_fs_open>
 8026bcc:	4680      	mov	r8, r0
 8026bce:	2800      	cmp	r0, #0
 8026bd0:	d066      	beq.n	8026ca0 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8026bd2:	6973      	ldr	r3, [r6, #20]
 8026bd4:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026bd8:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 8026bdc:	6800      	ldr	r0, [r0, #0]
 8026bde:	4798      	blx	r3
 8026be0:	4404      	add	r4, r0
      mg_fs_close(fd);
 8026be2:	4640      	mov	r0, r8
 8026be4:	f7fb fedd 	bl	80229a2 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8026be8:	9400      	str	r4, [sp, #0]
 8026bea:	4b39      	ldr	r3, [pc, #228]	@ (8026cd0 <mg_http_upload+0x1c8>)
 8026bec:	4a39      	ldr	r2, [pc, #228]	@ (8026cd4 <mg_http_upload+0x1cc>)
 8026bee:	21c8      	movs	r1, #200	@ 0xc8
 8026bf0:	4638      	mov	r0, r7
 8026bf2:	f7fd f94b 	bl	8023e8c <mg_http_reply>
}
 8026bf6:	4620      	mov	r0, r4
 8026bf8:	b04a      	add	sp, #296	@ 0x128
 8026bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8026bfe:	2400      	movs	r4, #0
 8026c00:	9400      	str	r4, [sp, #0]
 8026c02:	4b33      	ldr	r3, [pc, #204]	@ (8026cd0 <mg_http_upload+0x1c8>)
 8026c04:	4a33      	ldr	r2, [pc, #204]	@ (8026cd4 <mg_http_upload+0x1cc>)
 8026c06:	21c8      	movs	r1, #200	@ 0xc8
 8026c08:	4638      	mov	r0, r7
 8026c0a:	f7fd f93f 	bl	8023e8c <mg_http_reply>
 8026c0e:	e7f2      	b.n	8026bf6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8026c10:	4b31      	ldr	r3, [pc, #196]	@ (8026cd8 <mg_http_upload+0x1d0>)
 8026c12:	4a32      	ldr	r2, [pc, #200]	@ (8026cdc <mg_http_upload+0x1d4>)
 8026c14:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026c18:	4638      	mov	r0, r7
 8026c1a:	f7fd f937 	bl	8023e8c <mg_http_reply>
    res = -1;
 8026c1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8026c22:	e7e8      	b.n	8026bf6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8026c24:	ab23      	add	r3, sp, #140	@ 0x8c
 8026c26:	9300      	str	r3, [sp, #0]
 8026c28:	4b2d      	ldr	r3, [pc, #180]	@ (8026ce0 <mg_http_upload+0x1d8>)
 8026c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8026cdc <mg_http_upload+0x1d4>)
 8026c2c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026c30:	4638      	mov	r0, r7
 8026c32:	f7fd f92b 	bl	8023e8c <mg_http_reply>
    res = -2;
 8026c36:	f06f 0401 	mvn.w	r4, #1
 8026c3a:	e7dc      	b.n	8026bf6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 8026c3c:	4b29      	ldr	r3, [pc, #164]	@ (8026ce4 <mg_http_upload+0x1dc>)
 8026c3e:	4a27      	ldr	r2, [pc, #156]	@ (8026cdc <mg_http_upload+0x1d4>)
 8026c40:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026c44:	4638      	mov	r0, r7
 8026c46:	f7fd f921 	bl	8023e8c <mg_http_reply>
    res = -3;
 8026c4a:	f06f 0402 	mvn.w	r4, #2
 8026c4e:	e7d2      	b.n	8026bf6 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 8026c50:	9301      	str	r3, [sp, #4]
 8026c52:	ab03      	add	r3, sp, #12
 8026c54:	9300      	str	r3, [sp, #0]
 8026c56:	4b24      	ldr	r3, [pc, #144]	@ (8026ce8 <mg_http_upload+0x1e0>)
 8026c58:	4a20      	ldr	r2, [pc, #128]	@ (8026cdc <mg_http_upload+0x1d4>)
 8026c5a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026c5e:	4638      	mov	r0, r7
 8026c60:	f7fd f914 	bl	8023e8c <mg_http_reply>
    res = -4;
 8026c64:	f06f 0403 	mvn.w	r4, #3
 8026c68:	e7c5      	b.n	8026bf6 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8026c6a:	4b20      	ldr	r3, [pc, #128]	@ (8026cec <mg_http_upload+0x1e4>)
 8026c6c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8026c70:	491f      	ldr	r1, [pc, #124]	@ (8026cf0 <mg_http_upload+0x1e8>)
 8026c72:	2003      	movs	r0, #3
 8026c74:	f7ff fa08 	bl	8026088 <mg_log_prefix>
 8026c78:	4623      	mov	r3, r4
 8026c7a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026c7e:	a903      	add	r1, sp, #12
 8026c80:	481c      	ldr	r0, [pc, #112]	@ (8026cf4 <mg_http_upload+0x1ec>)
 8026c82:	f7fd f8af 	bl	8023de4 <mg_log>
 8026c86:	e78e      	b.n	8026ba6 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 8026c88:	ab03      	add	r3, sp, #12
 8026c8a:	9300      	str	r3, [sp, #0]
 8026c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8026cf8 <mg_http_upload+0x1f0>)
 8026c8e:	4a13      	ldr	r2, [pc, #76]	@ (8026cdc <mg_http_upload+0x1d4>)
 8026c90:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026c94:	4638      	mov	r0, r7
 8026c96:	f7fd f8f9 	bl	8023e8c <mg_http_reply>
      res = -5;
 8026c9a:	f06f 0404 	mvn.w	r4, #4
 8026c9e:	e7aa      	b.n	8026bf6 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8026ca0:	f006 fff2 	bl	802dc88 <__errno>
 8026ca4:	6803      	ldr	r3, [r0, #0]
 8026ca6:	9301      	str	r3, [sp, #4]
 8026ca8:	ab03      	add	r3, sp, #12
 8026caa:	9300      	str	r3, [sp, #0]
 8026cac:	4b13      	ldr	r3, [pc, #76]	@ (8026cfc <mg_http_upload+0x1f4>)
 8026cae:	4a0b      	ldr	r2, [pc, #44]	@ (8026cdc <mg_http_upload+0x1d4>)
 8026cb0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026cb4:	4638      	mov	r0, r7
 8026cb6:	f7fd f8e9 	bl	8023e8c <mg_http_reply>
      res = -6;
 8026cba:	f06f 0405 	mvn.w	r4, #5
 8026cbe:	e79a      	b.n	8026bf6 <mg_http_upload+0xee>
 8026cc0:	0803ac68 	.word	0x0803ac68
 8026cc4:	0803ac90 	.word	0x0803ac90
 8026cc8:	0803abd4 	.word	0x0803abd4
 8026ccc:	2000012c 	.word	0x2000012c
 8026cd0:	0803ac70 	.word	0x0803ac70
 8026cd4:	080364a0 	.word	0x080364a0
 8026cd8:	0803ac74 	.word	0x0803ac74
 8026cdc:	08036a40 	.word	0x08036a40
 8026ce0:	0803ac84 	.word	0x0803ac84
 8026ce4:	0803ac98 	.word	0x0803ac98
 8026ce8:	0803aca8 	.word	0x0803aca8
 8026cec:	0803b444 	.word	0x0803b444
 8026cf0:	0803aa28 	.word	0x0803aa28
 8026cf4:	0803acc4 	.word	0x0803acc4
 8026cf8:	0803acdc 	.word	0x0803acdc
 8026cfc:	0803acf0 	.word	0x0803acf0

08026d00 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8026d00:	b570      	push	{r4, r5, r6, lr}
 8026d02:	b082      	sub	sp, #8
 8026d04:	4604      	mov	r4, r0
 8026d06:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8026d08:	68e1      	ldr	r1, [r4, #12]
 8026d0a:	f7f9 fbd3 	bl	80204b4 <roundup>
  if (new_size == 0) {
 8026d0e:	b130      	cbz	r0, 8026d1e <mg_iobuf_resize+0x1e>
 8026d10:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8026d12:	6863      	ldr	r3, [r4, #4]
 8026d14:	4283      	cmp	r3, r0
 8026d16:	d10f      	bne.n	8026d38 <mg_iobuf_resize+0x38>
  int ok = 1;
 8026d18:	2001      	movs	r0, #1
}
 8026d1a:	b002      	add	sp, #8
 8026d1c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 8026d1e:	6861      	ldr	r1, [r4, #4]
 8026d20:	6820      	ldr	r0, [r4, #0]
 8026d22:	f7fe fd6f 	bl	8025804 <mg_bzero>
    free(io->buf);
 8026d26:	6820      	ldr	r0, [r4, #0]
 8026d28:	f7f3 fdf8 	bl	801a91c <vPortFree>
    io->buf = NULL;
 8026d2c:	2300      	movs	r3, #0
 8026d2e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 8026d30:	6063      	str	r3, [r4, #4]
 8026d32:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 8026d34:	2001      	movs	r0, #1
 8026d36:	e7f0      	b.n	8026d1a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 8026d38:	4601      	mov	r1, r0
 8026d3a:	2001      	movs	r0, #1
 8026d3c:	f7fb fc78 	bl	8022630 <mg_calloc>
    if (p != NULL) {
 8026d40:	4606      	mov	r6, r0
 8026d42:	b198      	cbz	r0, 8026d6c <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 8026d44:	68a2      	ldr	r2, [r4, #8]
 8026d46:	42aa      	cmp	r2, r5
 8026d48:	bf28      	it	cs
 8026d4a:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8026d4c:	b11a      	cbz	r2, 8026d56 <mg_iobuf_resize+0x56>
 8026d4e:	6821      	ldr	r1, [r4, #0]
 8026d50:	b109      	cbz	r1, 8026d56 <mg_iobuf_resize+0x56>
 8026d52:	f005 fd7b 	bl	802c84c <memmove>
      mg_bzero(io->buf, io->size);
 8026d56:	6861      	ldr	r1, [r4, #4]
 8026d58:	6820      	ldr	r0, [r4, #0]
 8026d5a:	f7fe fd53 	bl	8025804 <mg_bzero>
      free(io->buf);
 8026d5e:	6820      	ldr	r0, [r4, #0]
 8026d60:	f7f3 fddc 	bl	801a91c <vPortFree>
      io->buf = (unsigned char *) p;
 8026d64:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 8026d66:	6065      	str	r5, [r4, #4]
  int ok = 1;
 8026d68:	2001      	movs	r0, #1
 8026d6a:	e7d6      	b.n	8026d1a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8026d9c <mg_iobuf_resize+0x9c>)
 8026d6e:	681b      	ldr	r3, [r3, #0]
 8026d70:	2b00      	cmp	r3, #0
 8026d72:	dc01      	bgt.n	8026d78 <mg_iobuf_resize+0x78>
      ok = 0;
 8026d74:	2000      	movs	r0, #0
  return ok;
 8026d76:	e7d0      	b.n	8026d1a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8026d78:	4b09      	ldr	r3, [pc, #36]	@ (8026da0 <mg_iobuf_resize+0xa0>)
 8026d7a:	f640 5244 	movw	r2, #3396	@ 0xd44
 8026d7e:	4909      	ldr	r1, [pc, #36]	@ (8026da4 <mg_iobuf_resize+0xa4>)
 8026d80:	2001      	movs	r0, #1
 8026d82:	f7ff f981 	bl	8026088 <mg_log_prefix>
 8026d86:	2600      	movs	r6, #0
 8026d88:	9500      	str	r5, [sp, #0]
 8026d8a:	9601      	str	r6, [sp, #4]
 8026d8c:	6862      	ldr	r2, [r4, #4]
 8026d8e:	4633      	mov	r3, r6
 8026d90:	4805      	ldr	r0, [pc, #20]	@ (8026da8 <mg_iobuf_resize+0xa8>)
 8026d92:	f7fd f827 	bl	8023de4 <mg_log>
      ok = 0;
 8026d96:	4630      	mov	r0, r6
 8026d98:	e7bf      	b.n	8026d1a <mg_iobuf_resize+0x1a>
 8026d9a:	bf00      	nop
 8026d9c:	2000012c 	.word	0x2000012c
 8026da0:	0803b434 	.word	0x0803b434
 8026da4:	0803aa28 	.word	0x0803aa28
 8026da8:	0803ad00 	.word	0x0803ad00

08026dac <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026dac:	b538      	push	{r3, r4, r5, lr}
 8026dae:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8026db0:	2908      	cmp	r1, #8
 8026db2:	d004      	beq.n	8026dbe <static_cb+0x12>
 8026db4:	2902      	cmp	r1, #2
 8026db6:	d002      	beq.n	8026dbe <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8026db8:	2909      	cmp	r1, #9
 8026dba:	d02b      	beq.n	8026e14 <static_cb+0x68>
}
 8026dbc:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8026dbe:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026dc2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026dc8:	d31d      	bcc.n	8026e06 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8026dca:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8026dcc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026dce:	4299      	cmp	r1, r3
 8026dd0:	d2f4      	bcs.n	8026dbc <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8026dd2:	1a5b      	subs	r3, r3, r1
 8026dd4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8026dd8:	429a      	cmp	r2, r3
 8026dda:	d300      	bcc.n	8026dde <static_cb+0x32>
 8026ddc:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8026dde:	686b      	ldr	r3, [r5, #4]
 8026de0:	691b      	ldr	r3, [r3, #16]
 8026de2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8026de4:	4401      	add	r1, r0
 8026de6:	6828      	ldr	r0, [r5, #0]
 8026de8:	4798      	blx	r3
    c->send.len += n;
 8026dea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026dec:	4403      	add	r3, r0
 8026dee:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8026df0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8026df4:	1a1b      	subs	r3, r3, r0
 8026df6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 8026dfa:	2800      	cmp	r0, #0
 8026dfc:	d1de      	bne.n	8026dbc <static_cb+0x10>
 8026dfe:	4620      	mov	r0, r4
 8026e00:	f7fb fddc 	bl	80229bc <restore_http_cb>
 8026e04:	e7da      	b.n	8026dbc <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026e06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8026e0a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026e0e:	f7ff ff77 	bl	8026d00 <mg_iobuf_resize>
 8026e12:	e7da      	b.n	8026dca <static_cb+0x1e>
    restore_http_cb(c);
 8026e14:	f7fb fdd2 	bl	80229bc <restore_http_cb>
  (void) ev_data;
 8026e18:	e7d0      	b.n	8026dbc <static_cb+0x10>

08026e1a <mg_iobuf_add>:
                    size_t len) {
 8026e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026e1e:	4604      	mov	r4, r0
 8026e20:	460f      	mov	r7, r1
 8026e22:	4690      	mov	r8, r2
 8026e24:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8026e26:	6880      	ldr	r0, [r0, #8]
 8026e28:	68e1      	ldr	r1, [r4, #12]
 8026e2a:	4418      	add	r0, r3
 8026e2c:	f7f9 fb42 	bl	80204b4 <roundup>
 8026e30:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8026e32:	4601      	mov	r1, r0
 8026e34:	4620      	mov	r0, r4
 8026e36:	f7ff ff63 	bl	8026d00 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8026e3a:	6863      	ldr	r3, [r4, #4]
 8026e3c:	42b3      	cmp	r3, r6
 8026e3e:	d000      	beq.n	8026e42 <mg_iobuf_add+0x28>
 8026e40:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026e42:	68a2      	ldr	r2, [r4, #8]
 8026e44:	42ba      	cmp	r2, r7
 8026e46:	d812      	bhi.n	8026e6e <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8026e48:	f1b8 0f00 	cmp.w	r8, #0
 8026e4c:	d005      	beq.n	8026e5a <mg_iobuf_add+0x40>
 8026e4e:	6820      	ldr	r0, [r4, #0]
 8026e50:	462a      	mov	r2, r5
 8026e52:	4641      	mov	r1, r8
 8026e54:	4438      	add	r0, r7
 8026e56:	f005 fcf9 	bl	802c84c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 8026e5a:	68a3      	ldr	r3, [r4, #8]
 8026e5c:	42bb      	cmp	r3, r7
 8026e5e:	d200      	bcs.n	8026e62 <mg_iobuf_add+0x48>
 8026e60:	60a7      	str	r7, [r4, #8]
  io->len += len;
 8026e62:	68a3      	ldr	r3, [r4, #8]
 8026e64:	442b      	add	r3, r5
 8026e66:	60a3      	str	r3, [r4, #8]
}
 8026e68:	4628      	mov	r0, r5
 8026e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8026e6e:	6823      	ldr	r3, [r4, #0]
 8026e70:	19e8      	adds	r0, r5, r7
 8026e72:	1bd2      	subs	r2, r2, r7
 8026e74:	19d9      	adds	r1, r3, r7
 8026e76:	4418      	add	r0, r3
 8026e78:	f005 fce8 	bl	802c84c <memmove>
 8026e7c:	e7e4      	b.n	8026e48 <mg_iobuf_add+0x2e>

08026e7e <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 8026e7e:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 8026e80:	2100      	movs	r1, #0
 8026e82:	f7ff ff3d 	bl	8026d00 <mg_iobuf_resize>
}
 8026e86:	bd08      	pop	{r3, pc}

08026e88 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8026e88:	b538      	push	{r3, r4, r5, lr}
 8026e8a:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8026e8c:	2201      	movs	r2, #1
 8026e8e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026e90:	f7fb fbf3 	bl	802267a <getpeer>
  if (c == NULL) {
 8026e94:	b368      	cbz	r0, 8026ef2 <rx_udp+0x6a>
 8026e96:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8026e98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8026e9a:	881b      	ldrh	r3, [r3, #0]
 8026e9c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8026e9e:	69e3      	ldr	r3, [r4, #28]
 8026ea0:	68db      	ldr	r3, [r3, #12]
 8026ea2:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8026ea4:	6923      	ldr	r3, [r4, #16]
 8026ea6:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8026eaa:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 8026eae:	895b      	ldrh	r3, [r3, #10]
 8026eb0:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8026eb4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8026eb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8026eba:	d21b      	bcs.n	8026ef4 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8026ebc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026ebe:	1ad2      	subs	r2, r2, r3
 8026ec0:	68e1      	ldr	r1, [r4, #12]
 8026ec2:	428a      	cmp	r2, r1
 8026ec4:	d204      	bcs.n	8026ed0 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8026ec6:	4419      	add	r1, r3
 8026ec8:	3038      	adds	r0, #56	@ 0x38
 8026eca:	f7ff ff19 	bl	8026d00 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8026ece:	b1a8      	cbz	r0, 8026efc <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8026ed0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8026ed2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8026ed4:	68e2      	ldr	r2, [r4, #12]
 8026ed6:	68a1      	ldr	r1, [r4, #8]
 8026ed8:	4418      	add	r0, r3
 8026eda:	f006 ff0d 	bl	802dcf8 <memcpy>
      c->recv.len += pkt->pay.len;
 8026ede:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8026ee0:	4622      	mov	r2, r4
 8026ee2:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8026ee6:	440b      	add	r3, r1
 8026ee8:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8026eea:	2107      	movs	r1, #7
 8026eec:	4628      	mov	r0, r5
 8026eee:	f7fb fd30 	bl	8022952 <mg_call>
}
 8026ef2:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8026ef4:	4904      	ldr	r1, [pc, #16]	@ (8026f08 <rx_udp+0x80>)
 8026ef6:	f7ff f9af 	bl	8026258 <mg_error>
 8026efa:	e7fa      	b.n	8026ef2 <rx_udp+0x6a>
      mg_error(c, "oom");
 8026efc:	4903      	ldr	r1, [pc, #12]	@ (8026f0c <rx_udp+0x84>)
 8026efe:	4628      	mov	r0, r5
 8026f00:	f7ff f9aa 	bl	8026258 <mg_error>
 8026f04:	e7f5      	b.n	8026ef2 <rx_udp+0x6a>
 8026f06:	bf00      	nop
 8026f08:	0803ad0c 	.word	0x0803ad0c
 8026f0c:	0803ad28 	.word	0x0803ad28

08026f10 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8026f10:	b538      	push	{r3, r4, r5, lr}
 8026f12:	4605      	mov	r5, r0
 8026f14:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8026f16:	b122      	cbz	r2, 8026f22 <mg_pfn_iobuf_private+0x12>
 8026f18:	6889      	ldr	r1, [r1, #8]
 8026f1a:	3102      	adds	r1, #2
 8026f1c:	6863      	ldr	r3, [r4, #4]
 8026f1e:	4299      	cmp	r1, r3
 8026f20:	d80d      	bhi.n	8026f3e <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8026f22:	68a3      	ldr	r3, [r4, #8]
 8026f24:	1c99      	adds	r1, r3, #2
 8026f26:	6862      	ldr	r2, [r4, #4]
 8026f28:	4291      	cmp	r1, r2
 8026f2a:	d80c      	bhi.n	8026f46 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 8026f2c:	6822      	ldr	r2, [r4, #0]
 8026f2e:	1c59      	adds	r1, r3, #1
 8026f30:	60a1      	str	r1, [r4, #8]
 8026f32:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 8026f34:	6822      	ldr	r2, [r4, #0]
 8026f36:	68a3      	ldr	r3, [r4, #8]
 8026f38:	2100      	movs	r1, #0
 8026f3a:	54d1      	strb	r1, [r2, r3]
}
 8026f3c:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8026f3e:	4620      	mov	r0, r4
 8026f40:	f7ff fede 	bl	8026d00 <mg_iobuf_resize>
 8026f44:	e7ed      	b.n	8026f22 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 8026f46:	4293      	cmp	r3, r2
 8026f48:	d2f8      	bcs.n	8026f3c <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8026f4a:	6822      	ldr	r2, [r4, #0]
 8026f4c:	1c59      	adds	r1, r3, #1
 8026f4e:	60a1      	str	r1, [r4, #8]
 8026f50:	2100      	movs	r1, #0
 8026f52:	54d1      	strb	r1, [r2, r3]
}
 8026f54:	e7f2      	b.n	8026f3c <mg_pfn_iobuf_private+0x2c>

08026f56 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 8026f56:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 8026f58:	2201      	movs	r2, #1
 8026f5a:	f7ff ffd9 	bl	8026f10 <mg_pfn_iobuf_private>
}
 8026f5e:	bd08      	pop	{r3, pc}

08026f60 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 8026f60:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 8026f62:	2200      	movs	r2, #0
 8026f64:	f7ff ffd4 	bl	8026f10 <mg_pfn_iobuf_private>
}
 8026f68:	bd08      	pop	{r3, pc}
	...

08026f6c <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 8026f6c:	b510      	push	{r4, lr}
 8026f6e:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 8026f70:	f7fb fc8e 	bl	8022890 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8026f74:	6862      	ldr	r2, [r4, #4]
 8026f76:	e000      	b.n	8026f7a <mg_close_conn+0xe>
 8026f78:	461a      	mov	r2, r3
 8026f7a:	6813      	ldr	r3, [r2, #0]
 8026f7c:	42a3      	cmp	r3, r4
 8026f7e:	d1fb      	bne.n	8026f78 <mg_close_conn+0xc>
 8026f80:	6823      	ldr	r3, [r4, #0]
 8026f82:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8026f84:	6863      	ldr	r3, [r4, #4]
 8026f86:	689a      	ldr	r2, [r3, #8]
 8026f88:	42a2      	cmp	r2, r4
 8026f8a:	d020      	beq.n	8026fce <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8026f8c:	6863      	ldr	r3, [r4, #4]
 8026f8e:	691a      	ldr	r2, [r3, #16]
 8026f90:	42a2      	cmp	r2, r4
 8026f92:	d01f      	beq.n	8026fd4 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8026f94:	2200      	movs	r2, #0
 8026f96:	2109      	movs	r1, #9
 8026f98:	4620      	mov	r0, r4
 8026f9a:	f7fb fcda 	bl	8022952 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8026f9e:	4b15      	ldr	r3, [pc, #84]	@ (8026ff4 <mg_close_conn+0x88>)
 8026fa0:	681b      	ldr	r3, [r3, #0]
 8026fa2:	2b02      	cmp	r3, #2
 8026fa4:	dc19      	bgt.n	8026fda <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8026fa6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8026faa:	f7ff ff68 	bl	8026e7e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8026fae:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026fb2:	f7ff ff64 	bl	8026e7e <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8026fb6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8026fba:	f7ff ff60 	bl	8026e7e <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 8026fbe:	21b0      	movs	r1, #176	@ 0xb0
 8026fc0:	4620      	mov	r0, r4
 8026fc2:	f7fe fc1f 	bl	8025804 <mg_bzero>
  free(c);
 8026fc6:	4620      	mov	r0, r4
 8026fc8:	f7f3 fca8 	bl	801a91c <vPortFree>
}
 8026fcc:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8026fce:	2200      	movs	r2, #0
 8026fd0:	609a      	str	r2, [r3, #8]
 8026fd2:	e7db      	b.n	8026f8c <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8026fd4:	2200      	movs	r2, #0
 8026fd6:	611a      	str	r2, [r3, #16]
 8026fd8:	e7dc      	b.n	8026f94 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8026fda:	4b07      	ldr	r3, [pc, #28]	@ (8026ff8 <mg_close_conn+0x8c>)
 8026fdc:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8026fe0:	4906      	ldr	r1, [pc, #24]	@ (8026ffc <mg_close_conn+0x90>)
 8026fe2:	2003      	movs	r0, #3
 8026fe4:	f7ff f850 	bl	8026088 <mg_log_prefix>
 8026fe8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8026fea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026fec:	4804      	ldr	r0, [pc, #16]	@ (8027000 <mg_close_conn+0x94>)
 8026fee:	f7fc fef9 	bl	8023de4 <mg_log>
 8026ff2:	e7d8      	b.n	8026fa6 <mg_close_conn+0x3a>
 8026ff4:	2000012c 	.word	0x2000012c
 8026ff8:	0803b410 	.word	0x0803b410
 8026ffc:	0803aa28 	.word	0x0803aa28
 8027000:	0803ad2c 	.word	0x0803ad2c

08027004 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8027004:	b510      	push	{r4, lr}
 8027006:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8027008:	30d0      	adds	r0, #208	@ 0xd0
 802700a:	f7ff ff38 	bl	8026e7e <mg_iobuf_free>
  mg_close_conn(c);
 802700e:	4620      	mov	r0, r4
 8027010:	f7ff ffac 	bl	8026f6c <mg_close_conn>
}
 8027014:	bd10      	pop	{r4, pc}
	...

08027018 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8027018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802701c:	4606      	mov	r6, r0
 802701e:	460d      	mov	r5, r1
 8027020:	4690      	mov	r8, r2
 8027022:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8027024:	f7fc fa08 	bl	8023438 <mg_alloc_conn>
 8027028:	4604      	mov	r4, r0
 802702a:	2800      	cmp	r0, #0
 802702c:	d03f      	beq.n	80270ae <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802702e:	4629      	mov	r1, r5
 8027030:	f7fe fe1f 	bl	8025c72 <mg_open_listener>
 8027034:	2800      	cmp	r0, #0
 8027036:	d04d      	beq.n	80270d4 <mg_listen+0xbc>
    c->is_listening = 1;
 8027038:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802703c:	f043 0301 	orr.w	r3, r3, #1
 8027040:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8027044:	2204      	movs	r2, #4
 8027046:	492f      	ldr	r1, [pc, #188]	@ (8027104 <mg_listen+0xec>)
 8027048:	4628      	mov	r0, r5
 802704a:	f005 fc4e 	bl	802c8ea <strncmp>
 802704e:	fab0 f080 	clz	r0, r0
 8027052:	0940      	lsrs	r0, r0, #5
 8027054:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027058:	f360 0300 	bfi	r3, r0, #0, #1
 802705c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8027060:	6833      	ldr	r3, [r6, #0]
 8027062:	6023      	str	r3, [r4, #0]
 8027064:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 8027066:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 802706a:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 802706c:	2200      	movs	r2, #0
 802706e:	2101      	movs	r1, #1
 8027070:	4620      	mov	r0, r4
 8027072:	f7fb fc6e 	bl	8022952 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8027076:	4628      	mov	r0, r5
 8027078:	f7fe fb16 	bl	80256a8 <mg_url_is_ssl>
 802707c:	b128      	cbz	r0, 802708a <mg_listen+0x72>
 802707e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027086:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 802708a:	4b1f      	ldr	r3, [pc, #124]	@ (8027108 <mg_listen+0xf0>)
 802708c:	681b      	ldr	r3, [r3, #0]
 802708e:	2b02      	cmp	r3, #2
 8027090:	dd11      	ble.n	80270b6 <mg_listen+0x9e>
 8027092:	4b1e      	ldr	r3, [pc, #120]	@ (802710c <mg_listen+0xf4>)
 8027094:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8027098:	491d      	ldr	r1, [pc, #116]	@ (8027110 <mg_listen+0xf8>)
 802709a:	2003      	movs	r0, #3
 802709c:	f7fe fff4 	bl	8026088 <mg_log_prefix>
 80270a0:	462b      	mov	r3, r5
 80270a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80270a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80270a6:	481b      	ldr	r0, [pc, #108]	@ (8027114 <mg_listen+0xfc>)
 80270a8:	f7fc fe9c 	bl	8023de4 <mg_log>
  return c;
 80270ac:	e003      	b.n	80270b6 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 80270ae:	4b16      	ldr	r3, [pc, #88]	@ (8027108 <mg_listen+0xf0>)
 80270b0:	681b      	ldr	r3, [r3, #0]
 80270b2:	2b00      	cmp	r3, #0
 80270b4:	dc02      	bgt.n	80270bc <mg_listen+0xa4>
}
 80270b6:	4620      	mov	r0, r4
 80270b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 80270bc:	4b13      	ldr	r3, [pc, #76]	@ (802710c <mg_listen+0xf4>)
 80270be:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 80270c2:	4913      	ldr	r1, [pc, #76]	@ (8027110 <mg_listen+0xf8>)
 80270c4:	2001      	movs	r0, #1
 80270c6:	f7fe ffdf 	bl	8026088 <mg_log_prefix>
 80270ca:	4629      	mov	r1, r5
 80270cc:	4812      	ldr	r0, [pc, #72]	@ (8027118 <mg_listen+0x100>)
 80270ce:	f7fc fe89 	bl	8023de4 <mg_log>
 80270d2:	e7f0      	b.n	80270b6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80270d4:	4b0c      	ldr	r3, [pc, #48]	@ (8027108 <mg_listen+0xf0>)
 80270d6:	681b      	ldr	r3, [r3, #0]
 80270d8:	2b00      	cmp	r3, #0
 80270da:	dc04      	bgt.n	80270e6 <mg_listen+0xce>
    free(c);
 80270dc:	4620      	mov	r0, r4
 80270de:	f7f3 fc1d 	bl	801a91c <vPortFree>
    c = NULL;
 80270e2:	2400      	movs	r4, #0
 80270e4:	e7e7      	b.n	80270b6 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80270e6:	4b09      	ldr	r3, [pc, #36]	@ (802710c <mg_listen+0xf4>)
 80270e8:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 80270ec:	4908      	ldr	r1, [pc, #32]	@ (8027110 <mg_listen+0xf8>)
 80270ee:	2001      	movs	r0, #1
 80270f0:	f7fe ffca 	bl	8026088 <mg_log_prefix>
 80270f4:	f006 fdc8 	bl	802dc88 <__errno>
 80270f8:	6802      	ldr	r2, [r0, #0]
 80270fa:	4629      	mov	r1, r5
 80270fc:	4807      	ldr	r0, [pc, #28]	@ (802711c <mg_listen+0x104>)
 80270fe:	f7fc fe71 	bl	8023de4 <mg_log>
 8027102:	e7eb      	b.n	80270dc <mg_listen+0xc4>
 8027104:	0803ad5c 	.word	0x0803ad5c
 8027108:	2000012c 	.word	0x2000012c
 802710c:	0803b3f8 	.word	0x0803b3f8
 8027110:	0803aa28 	.word	0x0803aa28
 8027114:	0803aa84 	.word	0x0803aa84
 8027118:	0803ad3c 	.word	0x0803ad3c
 802711c:	0803ad44 	.word	0x0803ad44

08027120 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8027120:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8027122:	f7ff ff79 	bl	8027018 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8027126:	b110      	cbz	r0, 802712e <mg_http_listen+0xe>
 8027128:	4b01      	ldr	r3, [pc, #4]	@ (8027130 <mg_http_listen+0x10>)
 802712a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802712e:	bd08      	pop	{r3, pc}
 8027130:	0802630d 	.word	0x0802630d

08027134 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 8027134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027138:	4605      	mov	r5, r0
 802713a:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802713c:	6843      	ldr	r3, [r0, #4]
 802713e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8027140:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8027144:	f013 0301 	ands.w	r3, r3, #1
 8027148:	d02c      	beq.n	80271a4 <trim_len+0x70>
 802714a:	2608      	movs	r6, #8
  size_t max_headers_len =
 802714c:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8027150:	bb53      	cbnz	r3, 80271a8 <trim_len+0x74>
 8027152:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 8027154:	eb08 0304 	add.w	r3, r8, r4
 8027158:	69ba      	ldr	r2, [r7, #24]
 802715a:	4293      	cmp	r3, r2
 802715c:	d901      	bls.n	8027162 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 802715e:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 8027162:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8027166:	42b3      	cmp	r3, r6
 8027168:	d205      	bcs.n	8027176 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802716a:	4b1c      	ldr	r3, [pc, #112]	@ (80271dc <trim_len+0xa8>)
 802716c:	681b      	ldr	r3, [r3, #0]
 802716e:	2b00      	cmp	r3, #0
 8027170:	dc1c      	bgt.n	80271ac <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 8027172:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8027176:	eb04 0308 	add.w	r3, r4, r8
 802717a:	3b0e      	subs	r3, #14
 802717c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8027180:	4293      	cmp	r3, r2
 8027182:	d90c      	bls.n	802719e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8027184:	eba2 0208 	sub.w	r2, r2, r8
 8027188:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 802718c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027190:	f013 0f01 	tst.w	r3, #1
 8027194:	d003      	beq.n	802719e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8027196:	4b11      	ldr	r3, [pc, #68]	@ (80271dc <trim_len+0xa8>)
 8027198:	681b      	ldr	r3, [r3, #0]
 802719a:	2b00      	cmp	r3, #0
 802719c:	dc12      	bgt.n	80271c4 <trim_len+0x90>
}
 802719e:	4620      	mov	r0, r4
 80271a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80271a4:	263c      	movs	r6, #60	@ 0x3c
 80271a6:	e7d1      	b.n	802714c <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80271a8:	2644      	movs	r6, #68	@ 0x44
 80271aa:	e7d3      	b.n	8027154 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80271ac:	4b0c      	ldr	r3, [pc, #48]	@ (80271e0 <trim_len+0xac>)
 80271ae:	f241 528c 	movw	r2, #5516	@ 0x158c
 80271b2:	490c      	ldr	r1, [pc, #48]	@ (80271e4 <trim_len+0xb0>)
 80271b4:	2001      	movs	r0, #1
 80271b6:	f7fe ff67 	bl	8026088 <mg_log_prefix>
 80271ba:	4631      	mov	r1, r6
 80271bc:	480a      	ldr	r0, [pc, #40]	@ (80271e8 <trim_len+0xb4>)
 80271be:	f7fc fe11 	bl	8023de4 <mg_log>
 80271c2:	e7d6      	b.n	8027172 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80271c4:	4b06      	ldr	r3, [pc, #24]	@ (80271e0 <trim_len+0xac>)
 80271c6:	f241 5293 	movw	r2, #5523	@ 0x1593
 80271ca:	4906      	ldr	r1, [pc, #24]	@ (80271e4 <trim_len+0xb0>)
 80271cc:	2001      	movs	r0, #1
 80271ce:	f7fe ff5b 	bl	8026088 <mg_log_prefix>
 80271d2:	4806      	ldr	r0, [pc, #24]	@ (80271ec <trim_len+0xb8>)
 80271d4:	f7fc fe06 	bl	8023de4 <mg_log>
 80271d8:	e7e1      	b.n	802719e <trim_len+0x6a>
 80271da:	bf00      	nop
 80271dc:	2000012c 	.word	0x2000012c
 80271e0:	0803b3ec 	.word	0x0803b3ec
 80271e4:	0803aa28 	.word	0x0803aa28
 80271e8:	0803ad64 	.word	0x0803ad64
 80271ec:	0803ad90 	.word	0x0803ad90

080271f0 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 80271f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80271f2:	b085      	sub	sp, #20
 80271f4:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80271f6:	6843      	ldr	r3, [r0, #4]
 80271f8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80271fa:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 80271fc:	68ab      	ldr	r3, [r5, #8]
 80271fe:	b123      	cbz	r3, 802720a <mg_send+0x1a>
 8027200:	460e      	mov	r6, r1
 8027202:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8027206:	2b03      	cmp	r3, #3
 8027208:	d006      	beq.n	8027218 <mg_send+0x28>
    mg_error(c, "net down");
 802720a:	4913      	ldr	r1, [pc, #76]	@ (8027258 <mg_send+0x68>)
 802720c:	4620      	mov	r0, r4
 802720e:	f7ff f823 	bl	8026258 <mg_error>
  bool res = false;
 8027212:	2000      	movs	r0, #0
}
 8027214:	b005      	add	sp, #20
 8027216:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8027218:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802721c:	f013 0f01 	tst.w	r3, #1
 8027220:	d010      	beq.n	8027244 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8027222:	4611      	mov	r1, r2
 8027224:	f7ff ff86 	bl	8027134 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8027228:	68aa      	ldr	r2, [r5, #8]
 802722a:	9003      	str	r0, [sp, #12]
 802722c:	9602      	str	r6, [sp, #8]
 802722e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027230:	9301      	str	r3, [sp, #4]
 8027232:	9700      	str	r7, [sp, #0]
 8027234:	8b23      	ldrh	r3, [r4, #24]
 8027236:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 802723a:	4628      	mov	r0, r5
 802723c:	f7fe fc97 	bl	8025b6e <tx_udp>
    res = true;
 8027240:	2001      	movs	r0, #1
 8027242:	e7e7      	b.n	8027214 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8027244:	4613      	mov	r3, r2
 8027246:	460a      	mov	r2, r1
 8027248:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 802724a:	3048      	adds	r0, #72	@ 0x48
 802724c:	f7ff fde5 	bl	8026e1a <mg_iobuf_add>
 8027250:	3800      	subs	r0, #0
 8027252:	bf18      	it	ne
 8027254:	2001      	movne	r0, #1
 8027256:	e7dd      	b.n	8027214 <mg_send+0x24>
 8027258:	0803adbc 	.word	0x0803adbc

0802725c <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 802725c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802725e:	b0c5      	sub	sp, #276	@ 0x114
 8027260:	4606      	mov	r6, r0
 8027262:	460d      	mov	r5, r1
 8027264:	4614      	mov	r4, r2
 8027266:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 8027268:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 802726c:	2100      	movs	r1, #0
 802726e:	a801      	add	r0, sp, #4
 8027270:	f005 fb06 	bl	802c880 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8027274:	4620      	mov	r0, r4
 8027276:	f7fe fbc5 	bl	8025a04 <mg_ntohs>
 802727a:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 802727e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8027282:	f7fe fbbf 	bl	8025a04 <mg_ntohs>
 8027286:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 802728a:	2001      	movs	r0, #1
 802728c:	f7fe fbba 	bl	8025a04 <mg_ntohs>
 8027290:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8027294:	f04f 0c00 	mov.w	ip, #0
 8027298:	4664      	mov	r4, ip
 802729a:	e015      	b.n	80272c8 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 802729c:	eba4 020c 	sub.w	r2, r4, ip
 80272a0:	ab01      	add	r3, sp, #4
 80272a2:	4463      	add	r3, ip
 80272a4:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 80272a6:	f10c 0309 	add.w	r3, ip, #9
 80272aa:	aa01      	add	r2, sp, #4
 80272ac:	18d0      	adds	r0, r2, r3
 80272ae:	6829      	ldr	r1, [r5, #0]
 80272b0:	eba4 020c 	sub.w	r2, r4, ip
 80272b4:	4461      	add	r1, ip
 80272b6:	3004      	adds	r0, #4
 80272b8:	f006 fd1e 	bl	802dcf8 <memcpy>
      n = i + 1;
 80272bc:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 80272c0:	686a      	ldr	r2, [r5, #4]
 80272c2:	42a2      	cmp	r2, r4
 80272c4:	d90a      	bls.n	80272dc <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80272c6:	3401      	adds	r4, #1
 80272c8:	2cfa      	cmp	r4, #250	@ 0xfa
 80272ca:	d807      	bhi.n	80272dc <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 80272cc:	682b      	ldr	r3, [r5, #0]
 80272ce:	5d1a      	ldrb	r2, [r3, r4]
 80272d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80272d2:	d0e3      	beq.n	802729c <mg_dns_send+0x40>
 80272d4:	686b      	ldr	r3, [r5, #4]
 80272d6:	42a3      	cmp	r3, r4
 80272d8:	d8f2      	bhi.n	80272c0 <mg_dns_send+0x64>
 80272da:	e7df      	b.n	802729c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80272dc:	f10c 0308 	add.w	r3, ip, #8
 80272e0:	aa01      	add	r2, sp, #4
 80272e2:	4413      	add	r3, r2
 80272e4:	4a0a      	ldr	r2, [pc, #40]	@ (8027310 <mg_dns_send+0xb4>)
 80272e6:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 80272ea:	6058      	str	r0, [r3, #4]
 80272ec:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 80272f0:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80272f2:	b12f      	cbz	r7, 8027300 <mg_dns_send+0xa4>
 80272f4:	f10c 0302 	add.w	r3, ip, #2
 80272f8:	aa01      	add	r2, sp, #4
 80272fa:	4413      	add	r3, r2
 80272fc:	221c      	movs	r2, #28
 80272fe:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8027300:	f10c 0211 	add.w	r2, ip, #17
 8027304:	a901      	add	r1, sp, #4
 8027306:	4630      	mov	r0, r6
 8027308:	f7ff ff72 	bl	80271f0 <mg_send>
}
 802730c:	b045      	add	sp, #276	@ 0x114
 802730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027310:	08035bcc 	.word	0x08035bcc

08027314 <mg_mqtt_send_header>:
                         uint32_t len) {
 8027314:	b500      	push	{lr}
 8027316:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8027318:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 802731c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8027320:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8027324:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8027328:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 802732a:	2b7f      	cmp	r3, #127	@ 0x7f
 802732c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8027330:	d90e      	bls.n	8027350 <mg_mqtt_send_header+0x3c>
 8027332:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8027336:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 802733a:	f10d 0105 	add.w	r1, sp, #5
 802733e:	428a      	cmp	r2, r1
 8027340:	d3f0      	bcc.n	8027324 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8027342:	4669      	mov	r1, sp
 8027344:	1a52      	subs	r2, r2, r1
 8027346:	f7ff ff53 	bl	80271f0 <mg_send>
}
 802734a:	b003      	add	sp, #12
 802734c:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8027350:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8027352:	e7f6      	b.n	8027342 <mg_mqtt_send_header+0x2e>

08027354 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8027354:	b500      	push	{lr}
 8027356:	b083      	sub	sp, #12
 8027358:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 802735a:	2204      	movs	r2, #4
 802735c:	eb0d 0102 	add.w	r1, sp, r2
 8027360:	f7ff ff46 	bl	80271f0 <mg_send>
}
 8027364:	b003      	add	sp, #12
 8027366:	f85d fb04 	ldr.w	pc, [sp], #4

0802736a <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 802736a:	b500      	push	{lr}
 802736c:	b083      	sub	sp, #12
 802736e:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8027372:	2202      	movs	r2, #2
 8027374:	f10d 0106 	add.w	r1, sp, #6
 8027378:	f7ff ff3a 	bl	80271f0 <mg_send>
}
 802737c:	b003      	add	sp, #12
 802737e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08027384 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8027384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027388:	b083      	sub	sp, #12
 802738a:	4606      	mov	r6, r0
 802738c:	460f      	mov	r7, r1
 802738e:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8027390:	4611      	mov	r1, r2
 8027392:	4638      	mov	r0, r7
 8027394:	f7f9 fdda 	bl	8020f4c <get_properties_length>
 8027398:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 802739a:	2500      	movs	r5, #0
 802739c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 802739e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 80273a0:	4668      	mov	r0, sp
 80273a2:	f7f9 fd84 	bl	8020eae <encode_varint>
 80273a6:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 80273a8:	4669      	mov	r1, sp
 80273aa:	4630      	mov	r0, r6
 80273ac:	f7ff ff20 	bl	80271f0 <mg_send>
  for (i = 0; i < nprops; i++) {
 80273b0:	e018      	b.n	80273e4 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 80273b2:	89a0      	ldrh	r0, [r4, #12]
 80273b4:	f7fe fb26 	bl	8025a04 <mg_ntohs>
 80273b8:	4601      	mov	r1, r0
 80273ba:	4630      	mov	r0, r6
 80273bc:	f7ff ffd5 	bl	802736a <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 80273c0:	68e2      	ldr	r2, [r4, #12]
 80273c2:	68a1      	ldr	r1, [r4, #8]
 80273c4:	4630      	mov	r0, r6
 80273c6:	f7ff ff13 	bl	80271f0 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80273ca:	8aa0      	ldrh	r0, [r4, #20]
 80273cc:	f7fe fb1a 	bl	8025a04 <mg_ntohs>
 80273d0:	4601      	mov	r1, r0
 80273d2:	4630      	mov	r0, r6
 80273d4:	f7ff ffc9 	bl	802736a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 80273d8:	6962      	ldr	r2, [r4, #20]
 80273da:	6921      	ldr	r1, [r4, #16]
 80273dc:	4630      	mov	r0, r6
 80273de:	f7ff ff07 	bl	80271f0 <mg_send>
  for (i = 0; i < nprops; i++) {
 80273e2:	3501      	adds	r5, #1
 80273e4:	454d      	cmp	r5, r9
 80273e6:	d25b      	bcs.n	80274a0 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 80273e8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80273ec:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80273f0:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80273f4:	2201      	movs	r2, #1
 80273f6:	4621      	mov	r1, r4
 80273f8:	4630      	mov	r0, r6
 80273fa:	f7ff fef9 	bl	80271f0 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80273fe:	f817 0008 	ldrb.w	r0, [r7, r8]
 8027402:	f7f9 fd8f 	bl	8020f24 <mqtt_prop_type_by_id>
 8027406:	2806      	cmp	r0, #6
 8027408:	d8eb      	bhi.n	80273e2 <mg_send_mqtt_properties+0x5e>
 802740a:	a301      	add	r3, pc, #4	@ (adr r3, 8027410 <mg_send_mqtt_properties+0x8c>)
 802740c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8027410:	0802742d 	.word	0x0802742d
 8027414:	08027459 	.word	0x08027459
 8027418:	080273b3 	.word	0x080273b3
 802741c:	08027473 	.word	0x08027473
 8027420:	0802748d 	.word	0x0802748d
 8027424:	08027449 	.word	0x08027449
 8027428:	08027439 	.word	0x08027439
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 802742c:	2201      	movs	r2, #1
 802742e:	1d21      	adds	r1, r4, #4
 8027430:	4630      	mov	r0, r6
 8027432:	f7ff fedd 	bl	80271f0 <mg_send>
        break;
 8027436:	e7d4      	b.n	80273e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8027438:	88a0      	ldrh	r0, [r4, #4]
 802743a:	f7fe fae3 	bl	8025a04 <mg_ntohs>
 802743e:	4601      	mov	r1, r0
 8027440:	4630      	mov	r0, r6
 8027442:	f7ff ff92 	bl	802736a <mg_send_u16>
        break;
 8027446:	e7cc      	b.n	80273e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8027448:	6860      	ldr	r0, [r4, #4]
 802744a:	f7fe fa43 	bl	80258d4 <mg_ntohl>
 802744e:	4601      	mov	r1, r0
 8027450:	4630      	mov	r0, r6
 8027452:	f7ff ff7f 	bl	8027354 <mg_send_u32>
        break;
 8027456:	e7c4      	b.n	80273e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027458:	8aa0      	ldrh	r0, [r4, #20]
 802745a:	f7fe fad3 	bl	8025a04 <mg_ntohs>
 802745e:	4601      	mov	r1, r0
 8027460:	4630      	mov	r0, r6
 8027462:	f7ff ff82 	bl	802736a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027466:	6962      	ldr	r2, [r4, #20]
 8027468:	6921      	ldr	r1, [r4, #16]
 802746a:	4630      	mov	r0, r6
 802746c:	f7ff fec0 	bl	80271f0 <mg_send>
        break;
 8027470:	e7b7      	b.n	80273e2 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8027472:	8aa0      	ldrh	r0, [r4, #20]
 8027474:	f7fe fac6 	bl	8025a04 <mg_ntohs>
 8027478:	4601      	mov	r1, r0
 802747a:	4630      	mov	r0, r6
 802747c:	f7ff ff75 	bl	802736a <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8027480:	6962      	ldr	r2, [r4, #20]
 8027482:	6921      	ldr	r1, [r4, #16]
 8027484:	4630      	mov	r0, r6
 8027486:	f7ff feb3 	bl	80271f0 <mg_send>
        break;
 802748a:	e7aa      	b.n	80273e2 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 802748c:	6861      	ldr	r1, [r4, #4]
 802748e:	a801      	add	r0, sp, #4
 8027490:	f7f9 fd0d 	bl	8020eae <encode_varint>
 8027494:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8027496:	a901      	add	r1, sp, #4
 8027498:	4630      	mov	r0, r6
 802749a:	f7ff fea9 	bl	80271f0 <mg_send>
        break;
 802749e:	e7a0      	b.n	80273e2 <mg_send_mqtt_properties+0x5e>
}
 80274a0:	b003      	add	sp, #12
 80274a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80274a6:	bf00      	nop

080274a8 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80274a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80274aa:	b08b      	sub	sp, #44	@ 0x2c
 80274ac:	4605      	mov	r5, r0
 80274ae:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 80274b0:	ab02      	add	r3, sp, #8
 80274b2:	f101 0210 	add.w	r2, r1, #16
 80274b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80274ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 80274be:	2300      	movs	r3, #0
 80274c0:	f88d 3000 	strb.w	r3, [sp]
 80274c4:	2204      	movs	r2, #4
 80274c6:	f88d 2001 	strb.w	r2, [sp, #1]
 80274ca:	224d      	movs	r2, #77	@ 0x4d
 80274cc:	f88d 2002 	strb.w	r2, [sp, #2]
 80274d0:	2251      	movs	r2, #81	@ 0x51
 80274d2:	f88d 2003 	strb.w	r2, [sp, #3]
 80274d6:	2254      	movs	r2, #84	@ 0x54
 80274d8:	f88d 2004 	strb.w	r2, [sp, #4]
 80274dc:	f88d 2005 	strb.w	r2, [sp, #5]
 80274e0:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 80274e4:	f88d 2006 	strb.w	r2, [sp, #6]
 80274e8:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 80274ec:	2900      	cmp	r1, #0
 80274ee:	f000 809f 	beq.w	8027630 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80274f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80274f6:	b913      	cbnz	r3, 80274fe <mg_mqtt_login+0x56>
 80274f8:	2304      	movs	r3, #4
 80274fa:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 80274fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8027502:	2b05      	cmp	r3, #5
 8027504:	bf14      	ite	ne
 8027506:	2300      	movne	r3, #0
 8027508:	2301      	moveq	r3, #1
 802750a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 802750e:	f363 0282 	bfi	r2, r3, #2, #1
 8027512:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8027516:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802751a:	00d2      	lsls	r2, r2, #3
 802751c:	f002 0218 	and.w	r2, r2, #24
 8027520:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8027524:	6863      	ldr	r3, [r4, #4]
 8027526:	2b00      	cmp	r3, #0
 8027528:	f000 808e 	beq.w	8027648 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 802752c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 802752e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8027532:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8027536:	68e2      	ldr	r2, [r4, #12]
 8027538:	b13a      	cbz	r2, 802754a <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 802753a:	441a      	add	r2, r3
 802753c:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 802753e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027542:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8027546:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 802754a:	69e2      	ldr	r2, [r4, #28]
 802754c:	b14a      	cbz	r2, 8027562 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 802754e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8027550:	440a      	add	r2, r1
 8027552:	441a      	add	r2, r3
 8027554:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8027556:	f89d 2007 	ldrb.w	r2, [sp, #7]
 802755a:	f042 0204 	orr.w	r2, r2, #4
 802755e:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8027562:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8027566:	b90a      	cbnz	r2, 802756c <mg_mqtt_login+0xc4>
 8027568:	9a03      	ldr	r2, [sp, #12]
 802756a:	b92a      	cbnz	r2, 8027578 <mg_mqtt_login+0xd0>
 802756c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027570:	f042 0202 	orr.w	r2, r2, #2
 8027574:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8027578:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 802757c:	b12a      	cbz	r2, 802758a <mg_mqtt_login+0xe2>
 802757e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8027582:	f042 0220 	orr.w	r2, r2, #32
 8027586:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 802758a:	9f03      	ldr	r7, [sp, #12]
 802758c:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 802758e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027592:	f013 0f04 	tst.w	r3, #4
 8027596:	d159      	bne.n	802764c <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8027598:	4633      	mov	r3, r6
 802759a:	2200      	movs	r2, #0
 802759c:	2101      	movs	r1, #1
 802759e:	4628      	mov	r0, r5
 80275a0:	f7ff feb8 	bl	8027314 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 80275a4:	2208      	movs	r2, #8
 80275a6:	4669      	mov	r1, sp
 80275a8:	4628      	mov	r0, r5
 80275aa:	f7ff fe21 	bl	80271f0 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 80275ae:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80275b0:	f7fe fa28 	bl	8025a04 <mg_ntohs>
 80275b4:	4601      	mov	r1, r0
 80275b6:	4628      	mov	r0, r5
 80275b8:	f7ff fed7 	bl	802736a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 80275bc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80275c0:	f013 0f04 	tst.w	r3, #4
 80275c4:	d152      	bne.n	802766c <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 80275c6:	b2b8      	uxth	r0, r7
 80275c8:	f7fe fa1c 	bl	8025a04 <mg_ntohs>
 80275cc:	4601      	mov	r1, r0
 80275ce:	4628      	mov	r0, r5
 80275d0:	f7ff fecb 	bl	802736a <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 80275d4:	463a      	mov	r2, r7
 80275d6:	9902      	ldr	r1, [sp, #8]
 80275d8:	4628      	mov	r0, r5
 80275da:	f7ff fe09 	bl	80271f0 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 80275de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80275e2:	f013 0f04 	tst.w	r3, #4
 80275e6:	d01c      	beq.n	8027622 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 80275e8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80275ec:	f013 0f04 	tst.w	r3, #4
 80275f0:	d142      	bne.n	8027678 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80275f2:	8ba0      	ldrh	r0, [r4, #28]
 80275f4:	f7fe fa06 	bl	8025a04 <mg_ntohs>
 80275f8:	4601      	mov	r1, r0
 80275fa:	4628      	mov	r0, r5
 80275fc:	f7ff feb5 	bl	802736a <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8027600:	69e2      	ldr	r2, [r4, #28]
 8027602:	69a1      	ldr	r1, [r4, #24]
 8027604:	4628      	mov	r0, r5
 8027606:	f7ff fdf3 	bl	80271f0 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 802760a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 802760c:	f7fe f9fa 	bl	8025a04 <mg_ntohs>
 8027610:	4601      	mov	r1, r0
 8027612:	4628      	mov	r0, r5
 8027614:	f7ff fea9 	bl	802736a <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8027618:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802761a:	6a21      	ldr	r1, [r4, #32]
 802761c:	4628      	mov	r0, r5
 802761e:	f7ff fde7 	bl	80271f0 <mg_send>
  if (opts->user.len > 0) {
 8027622:	6860      	ldr	r0, [r4, #4]
 8027624:	bb70      	cbnz	r0, 8027684 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8027626:	68e0      	ldr	r0, [r4, #12]
 8027628:	2800      	cmp	r0, #0
 802762a:	d138      	bne.n	802769e <mg_mqtt_login+0x1f6>
}
 802762c:	b00b      	add	sp, #44	@ 0x2c
 802762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8027630:	2114      	movs	r1, #20
 8027632:	a804      	add	r0, sp, #16
 8027634:	f7fe f922 	bl	802587c <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8027638:	2300      	movs	r3, #0
 802763a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 802763e:	a904      	add	r1, sp, #16
 8027640:	a802      	add	r0, sp, #8
 8027642:	f7fc fdad 	bl	80241a0 <mg_str_s>
 8027646:	e754      	b.n	80274f2 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8027648:	230c      	movs	r3, #12
 802764a:	e774      	b.n	8027536 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 802764c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802764e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027650:	f7f9 fcc0 	bl	8020fd4 <get_props_size>
 8027654:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8027656:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802765a:	f013 0f04 	tst.w	r3, #4
 802765e:	d09b      	beq.n	8027598 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8027660:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8027662:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8027664:	f7f9 fcb6 	bl	8020fd4 <get_props_size>
 8027668:	4406      	add	r6, r0
 802766a:	e795      	b.n	8027598 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802766c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802766e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027670:	4628      	mov	r0, r5
 8027672:	f7ff fe87 	bl	8027384 <mg_send_mqtt_properties>
 8027676:	e7a6      	b.n	80275c6 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8027678:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 802767a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802767c:	4628      	mov	r0, r5
 802767e:	f7ff fe81 	bl	8027384 <mg_send_mqtt_properties>
 8027682:	e7b6      	b.n	80275f2 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8027684:	b280      	uxth	r0, r0
 8027686:	f7fe f9bd 	bl	8025a04 <mg_ntohs>
 802768a:	4601      	mov	r1, r0
 802768c:	4628      	mov	r0, r5
 802768e:	f7ff fe6c 	bl	802736a <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8027692:	6862      	ldr	r2, [r4, #4]
 8027694:	6821      	ldr	r1, [r4, #0]
 8027696:	4628      	mov	r0, r5
 8027698:	f7ff fdaa 	bl	80271f0 <mg_send>
 802769c:	e7c3      	b.n	8027626 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 802769e:	b280      	uxth	r0, r0
 80276a0:	f7fe f9b0 	bl	8025a04 <mg_ntohs>
 80276a4:	4601      	mov	r1, r0
 80276a6:	4628      	mov	r0, r5
 80276a8:	f7ff fe5f 	bl	802736a <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 80276ac:	68e2      	ldr	r2, [r4, #12]
 80276ae:	68a1      	ldr	r1, [r4, #8]
 80276b0:	4628      	mov	r0, r5
 80276b2:	f7ff fd9d 	bl	80271f0 <mg_send>
}
 80276b6:	e7b9      	b.n	802762c <mg_mqtt_login+0x184>

080276b8 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 80276b8:	b530      	push	{r4, r5, lr}
 80276ba:	b083      	sub	sp, #12
 80276bc:	4604      	mov	r4, r0
 80276be:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 80276c0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80276c4:	f003 0303 	and.w	r3, r3, #3
 80276c8:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 80276cc:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80276d0:	f013 0f04 	tst.w	r3, #4
 80276d4:	d133      	bne.n	802773e <mg_mqtt_sub+0x86>
 80276d6:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 80276d8:	69eb      	ldr	r3, [r5, #28]
 80276da:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 80276dc:	3305      	adds	r3, #5
 80276de:	2202      	movs	r2, #2
 80276e0:	2108      	movs	r1, #8
 80276e2:	4620      	mov	r0, r4
 80276e4:	f7ff fe16 	bl	8027314 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80276e8:	6862      	ldr	r2, [r4, #4]
 80276ea:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80276ec:	3301      	adds	r3, #1
 80276ee:	b29b      	uxth	r3, r3
 80276f0:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80276f2:	b91b      	cbnz	r3, 80276fc <mg_mqtt_sub+0x44>
 80276f4:	6862      	ldr	r2, [r4, #4]
 80276f6:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80276f8:	3301      	adds	r3, #1
 80276fa:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 80276fc:	6863      	ldr	r3, [r4, #4]
 80276fe:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8027700:	f7fe f980 	bl	8025a04 <mg_ntohs>
 8027704:	4601      	mov	r1, r0
 8027706:	4620      	mov	r0, r4
 8027708:	f7ff fe2f 	bl	802736a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802770c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027710:	f013 0f04 	tst.w	r3, #4
 8027714:	d118      	bne.n	8027748 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8027716:	8ba8      	ldrh	r0, [r5, #28]
 8027718:	f7fe f974 	bl	8025a04 <mg_ntohs>
 802771c:	4601      	mov	r1, r0
 802771e:	4620      	mov	r0, r4
 8027720:	f7ff fe23 	bl	802736a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8027724:	69ea      	ldr	r2, [r5, #28]
 8027726:	69a9      	ldr	r1, [r5, #24]
 8027728:	4620      	mov	r0, r4
 802772a:	f7ff fd61 	bl	80271f0 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 802772e:	2201      	movs	r2, #1
 8027730:	f10d 0107 	add.w	r1, sp, #7
 8027734:	4620      	mov	r0, r4
 8027736:	f7ff fd5b 	bl	80271f0 <mg_send>
}
 802773a:	b003      	add	sp, #12
 802773c:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 802773e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027740:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8027742:	f7f9 fc47 	bl	8020fd4 <get_props_size>
 8027746:	e7c7      	b.n	80276d8 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027748:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 802774a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 802774c:	4620      	mov	r0, r4
 802774e:	f7ff fe19 	bl	8027384 <mg_send_mqtt_properties>
 8027752:	e7e0      	b.n	8027716 <mg_mqtt_sub+0x5e>

08027754 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8027754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027758:	b083      	sub	sp, #12
 802775a:	4605      	mov	r5, r0
 802775c:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 802775e:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027762:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8027766:	005b      	lsls	r3, r3, #1
 8027768:	f003 0306 	and.w	r3, r3, #6
 802776c:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8027770:	2a00      	cmp	r2, #0
 8027772:	d057      	beq.n	8027824 <mg_mqtt_pub+0xd0>
 8027774:	2201      	movs	r2, #1
 8027776:	ea43 0a02 	orr.w	sl, r3, r2
 802777a:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 802777c:	69e7      	ldr	r7, [r4, #28]
 802777e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027780:	441f      	add	r7, r3
 8027782:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027786:	4b3a      	ldr	r3, [pc, #232]	@ (8027870 <mg_mqtt_pub+0x11c>)
 8027788:	681b      	ldr	r3, [r3, #0]
 802778a:	2b02      	cmp	r3, #2
 802778c:	dc4c      	bgt.n	8027828 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 802778e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8027792:	f1bb 0f00 	cmp.w	fp, #0
 8027796:	d001      	beq.n	802779c <mg_mqtt_pub+0x48>
 8027798:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802779c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80277a0:	f013 0f04 	tst.w	r3, #4
 80277a4:	d152      	bne.n	802784c <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 80277a6:	f1bb 0f00 	cmp.w	fp, #0
 80277aa:	d004      	beq.n	80277b6 <mg_mqtt_pub+0x62>
 80277ac:	f1b8 0f00 	cmp.w	r8, #0
 80277b0:	d001      	beq.n	80277b6 <mg_mqtt_pub+0x62>
 80277b2:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 80277b6:	464b      	mov	r3, r9
 80277b8:	4632      	mov	r2, r6
 80277ba:	2103      	movs	r1, #3
 80277bc:	4628      	mov	r0, r5
 80277be:	f7ff fda9 	bl	8027314 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 80277c2:	8ba0      	ldrh	r0, [r4, #28]
 80277c4:	f7fe f91e 	bl	8025a04 <mg_ntohs>
 80277c8:	4601      	mov	r1, r0
 80277ca:	4628      	mov	r0, r5
 80277cc:	f7ff fdcd 	bl	802736a <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 80277d0:	69e2      	ldr	r2, [r4, #28]
 80277d2:	69a1      	ldr	r1, [r4, #24]
 80277d4:	4628      	mov	r0, r5
 80277d6:	f7ff fd0b 	bl	80271f0 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 80277da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80277de:	b1b3      	cbz	r3, 802780e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 80277e0:	f1b8 0f00 	cmp.w	r8, #0
 80277e4:	d10c      	bne.n	8027800 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 80277e6:	686a      	ldr	r2, [r5, #4]
 80277e8:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80277ea:	3301      	adds	r3, #1
 80277ec:	b29b      	uxth	r3, r3
 80277ee:	8593      	strh	r3, [r2, #44]	@ 0x2c
 80277f0:	b91b      	cbnz	r3, 80277fa <mg_mqtt_pub+0xa6>
 80277f2:	686a      	ldr	r2, [r5, #4]
 80277f4:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 80277f6:	3301      	adds	r3, #1
 80277f8:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 80277fa:	686b      	ldr	r3, [r5, #4]
 80277fc:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8027800:	4640      	mov	r0, r8
 8027802:	f7fe f8ff 	bl	8025a04 <mg_ntohs>
 8027806:	4601      	mov	r1, r0
 8027808:	4628      	mov	r0, r5
 802780a:	f7ff fdae 	bl	802736a <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 802780e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027812:	f013 0f04 	tst.w	r3, #4
 8027816:	d11f      	bne.n	8027858 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027818:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802781a:	bb1a      	cbnz	r2, 8027864 <mg_mqtt_pub+0x110>
}
 802781c:	4640      	mov	r0, r8
 802781e:	b003      	add	sp, #12
 8027820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8027824:	2200      	movs	r2, #0
 8027826:	e7a6      	b.n	8027776 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8027828:	4b12      	ldr	r3, [pc, #72]	@ (8027874 <mg_mqtt_pub+0x120>)
 802782a:	f241 123c 	movw	r2, #4412	@ 0x113c
 802782e:	4912      	ldr	r1, [pc, #72]	@ (8027878 <mg_mqtt_pub+0x124>)
 8027830:	2003      	movs	r0, #3
 8027832:	f7fe fc29 	bl	8026088 <mg_log_prefix>
 8027836:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8027838:	6a22      	ldr	r2, [r4, #32]
 802783a:	9201      	str	r2, [sp, #4]
 802783c:	9300      	str	r3, [sp, #0]
 802783e:	69a3      	ldr	r3, [r4, #24]
 8027840:	69e2      	ldr	r2, [r4, #28]
 8027842:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8027844:	480d      	ldr	r0, [pc, #52]	@ (802787c <mg_mqtt_pub+0x128>)
 8027846:	f7fc facd 	bl	8023de4 <mg_log>
 802784a:	e7a0      	b.n	802778e <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 802784c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802784e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027850:	f7f9 fbc0 	bl	8020fd4 <get_props_size>
 8027854:	4481      	add	r9, r0
 8027856:	e7a6      	b.n	80277a6 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8027858:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802785a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802785c:	4628      	mov	r0, r5
 802785e:	f7ff fd91 	bl	8027384 <mg_send_mqtt_properties>
 8027862:	e7d9      	b.n	8027818 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8027864:	6a21      	ldr	r1, [r4, #32]
 8027866:	4628      	mov	r0, r5
 8027868:	f7ff fcc2 	bl	80271f0 <mg_send>
 802786c:	e7d6      	b.n	802781c <mg_mqtt_pub+0xc8>
 802786e:	bf00      	nop
 8027870:	2000012c 	.word	0x2000012c
 8027874:	0803b428 	.word	0x0803b428
 8027878:	0803aa28 	.word	0x0803aa28
 802787c:	0803adc8 	.word	0x0803adc8

08027880 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027880:	b530      	push	{r4, r5, lr}
 8027882:	b08f      	sub	sp, #60	@ 0x3c
 8027884:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8027886:	2907      	cmp	r1, #7
 8027888:	f000 808f 	beq.w	80279aa <mqtt_cb+0x12a>
}
 802788c:	b00f      	add	sp, #60	@ 0x3c
 802788e:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027890:	2204      	movs	r2, #4
 8027892:	e091      	b.n	80279b8 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8027894:	4b73      	ldr	r3, [pc, #460]	@ (8027a64 <mqtt_cb+0x1e4>)
 8027896:	681b      	ldr	r3, [r3, #0]
 8027898:	2b00      	cmp	r3, #0
 802789a:	dc06      	bgt.n	80278aa <mqtt_cb+0x2a>
        c->is_closing = 1;
 802789c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80278a0:	f043 0320 	orr.w	r3, r3, #32
 80278a4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 80278a8:	e7f0      	b.n	802788c <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 80278aa:	4b6f      	ldr	r3, [pc, #444]	@ (8027a68 <mqtt_cb+0x1e8>)
 80278ac:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 80278b0:	496e      	ldr	r1, [pc, #440]	@ (8027a6c <mqtt_cb+0x1ec>)
 80278b2:	2001      	movs	r0, #1
 80278b4:	f7fe fbe8 	bl	8026088 <mg_log_prefix>
 80278b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80278ba:	486d      	ldr	r0, [pc, #436]	@ (8027a70 <mqtt_cb+0x1f0>)
 80278bc:	f7fc fa92 	bl	8023de4 <mg_log>
 80278c0:	e7ec      	b.n	802789c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 80278c2:	4b69      	ldr	r3, [pc, #420]	@ (8027a68 <mqtt_cb+0x1e8>)
 80278c4:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 80278c8:	4968      	ldr	r1, [pc, #416]	@ (8027a6c <mqtt_cb+0x1ec>)
 80278ca:	2004      	movs	r0, #4
 80278cc:	f7fe fbdc 	bl	8026088 <mg_log_prefix>
 80278d0:	9b06      	ldr	r3, [sp, #24]
 80278d2:	9301      	str	r3, [sp, #4]
 80278d4:	9b07      	ldr	r3, [sp, #28]
 80278d6:	9300      	str	r3, [sp, #0]
 80278d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80278da:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 80278de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80278e0:	4864      	ldr	r0, [pc, #400]	@ (8027a74 <mqtt_cb+0x1f4>)
 80278e2:	f7fc fa7f 	bl	8023de4 <mg_log>
 80278e6:	e077      	b.n	80279d8 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 80278e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80278ea:	2111      	movs	r1, #17
 80278ec:	4620      	mov	r0, r4
 80278ee:	f7fb f830 	bl	8022952 <mg_call>
            if (mm.ack == 0) {
 80278f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80278f6:	b97b      	cbnz	r3, 8027918 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 80278f8:	4b5a      	ldr	r3, [pc, #360]	@ (8027a64 <mqtt_cb+0x1e4>)
 80278fa:	681b      	ldr	r3, [r3, #0]
 80278fc:	2b02      	cmp	r3, #2
 80278fe:	dd49      	ble.n	8027994 <mqtt_cb+0x114>
 8027900:	4b59      	ldr	r3, [pc, #356]	@ (8027a68 <mqtt_cb+0x1e8>)
 8027902:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8027906:	4959      	ldr	r1, [pc, #356]	@ (8027a6c <mqtt_cb+0x1ec>)
 8027908:	2003      	movs	r0, #3
 802790a:	f7fe fbbd 	bl	8026088 <mg_log_prefix>
 802790e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027910:	4859      	ldr	r0, [pc, #356]	@ (8027a78 <mqtt_cb+0x1f8>)
 8027912:	f7fc fa67 	bl	8023de4 <mg_log>
 8027916:	e03d      	b.n	8027994 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027918:	4b52      	ldr	r3, [pc, #328]	@ (8027a64 <mqtt_cb+0x1e4>)
 802791a:	681b      	ldr	r3, [r3, #0]
 802791c:	2b00      	cmp	r3, #0
 802791e:	dc06      	bgt.n	802792e <mqtt_cb+0xae>
              c->is_closing = 1;
 8027920:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027924:	f043 0320 	orr.w	r3, r3, #32
 8027928:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802792c:	e032      	b.n	8027994 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802792e:	4b4e      	ldr	r3, [pc, #312]	@ (8027a68 <mqtt_cb+0x1e8>)
 8027930:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 8027934:	494d      	ldr	r1, [pc, #308]	@ (8027a6c <mqtt_cb+0x1ec>)
 8027936:	2001      	movs	r0, #1
 8027938:	f7fe fba6 	bl	8026088 <mg_log_prefix>
 802793c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8027940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027942:	484e      	ldr	r0, [pc, #312]	@ (8027a7c <mqtt_cb+0x1fc>)
 8027944:	f7fc fa4e 	bl	8023de4 <mg_log>
 8027948:	e7ea      	b.n	8027920 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 802794a:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 802794e:	b1e5      	cbz	r5, 802798a <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 8027950:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027954:	f7fe f856 	bl	8025a04 <mg_ntohs>
 8027958:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802795c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027960:	f013 0f04 	tst.w	r3, #4
 8027964:	d14a      	bne.n	80279fc <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 8027966:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 8027968:	2d02      	cmp	r5, #2
 802796a:	d049      	beq.n	8027a00 <mqtt_cb+0x180>
 802796c:	2104      	movs	r1, #4
 802796e:	2200      	movs	r2, #0
 8027970:	4620      	mov	r0, r4
 8027972:	f7ff fccf 	bl	8027314 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 8027976:	2202      	movs	r2, #2
 8027978:	a903      	add	r1, sp, #12
 802797a:	4620      	mov	r0, r4
 802797c:	f7ff fc38 	bl	80271f0 <mg_send>
              if (c->is_mqtt5) {
 8027980:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027984:	f013 0f04 	tst.w	r3, #4
 8027988:	d13c      	bne.n	8027a04 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 802798a:	aa04      	add	r2, sp, #16
 802798c:	2110      	movs	r1, #16
 802798e:	4620      	mov	r0, r4
 8027990:	f7fa ffdf 	bl	8022952 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8027994:	aa04      	add	r2, sp, #16
 8027996:	210f      	movs	r1, #15
 8027998:	4620      	mov	r0, r4
 802799a:	f7fa ffda 	bl	8022952 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802799e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80279a0:	2100      	movs	r1, #0
 80279a2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80279a6:	f7fd ff38 	bl	802581a <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 80279aa:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80279ae:	f013 0f04 	tst.w	r3, #4
 80279b2:	f43f af6d 	beq.w	8027890 <mqtt_cb+0x10>
 80279b6:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 80279b8:	ab04      	add	r3, sp, #16
 80279ba:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80279bc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80279be:	f7fb fc8c 	bl	80232da <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 80279c2:	2802      	cmp	r0, #2
 80279c4:	f43f af66 	beq.w	8027894 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 80279c8:	2800      	cmp	r0, #0
 80279ca:	f47f af5f 	bne.w	802788c <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 80279ce:	4b25      	ldr	r3, [pc, #148]	@ (8027a64 <mqtt_cb+0x1e4>)
 80279d0:	681b      	ldr	r3, [r3, #0]
 80279d2:	2b03      	cmp	r3, #3
 80279d4:	f73f af75 	bgt.w	80278c2 <mqtt_cb+0x42>
        switch (mm.cmd) {
 80279d8:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80279dc:	3b02      	subs	r3, #2
 80279de:	2b04      	cmp	r3, #4
 80279e0:	d8d8      	bhi.n	8027994 <mqtt_cb+0x114>
 80279e2:	a201      	add	r2, pc, #4	@ (adr r2, 80279e8 <mqtt_cb+0x168>)
 80279e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80279e8:	080278e9 	.word	0x080278e9
 80279ec:	0802794b 	.word	0x0802794b
 80279f0:	08027995 	.word	0x08027995
 80279f4:	08027a19 	.word	0x08027a19
 80279f8:	08027a3f 	.word	0x08027a3f
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80279fc:	2304      	movs	r3, #4
 80279fe:	e7b3      	b.n	8027968 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8027a00:	2105      	movs	r1, #5
 8027a02:	e7b4      	b.n	802796e <mqtt_cb+0xee>
                uint16_t zero = 0;
 8027a04:	2300      	movs	r3, #0
 8027a06:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 8027a0a:	2202      	movs	r2, #2
 8027a0c:	f10d 010e 	add.w	r1, sp, #14
 8027a10:	4620      	mov	r0, r4
 8027a12:	f7ff fbed 	bl	80271f0 <mg_send>
 8027a16:	e7b8      	b.n	802798a <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8027a18:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027a1c:	f7fd fff2 	bl	8025a04 <mg_ntohs>
 8027a20:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8027a24:	2302      	movs	r3, #2
 8027a26:	461a      	mov	r2, r3
 8027a28:	2106      	movs	r1, #6
 8027a2a:	4620      	mov	r0, r4
 8027a2c:	f7ff fc72 	bl	8027314 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8027a30:	2202      	movs	r2, #2
 8027a32:	f10d 010e 	add.w	r1, sp, #14
 8027a36:	4620      	mov	r0, r4
 8027a38:	f7ff fbda 	bl	80271f0 <mg_send>
            break;
 8027a3c:	e7aa      	b.n	8027994 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 8027a3e:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8027a42:	f7fd ffdf 	bl	8025a04 <mg_ntohs>
 8027a46:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8027a4a:	2302      	movs	r3, #2
 8027a4c:	2200      	movs	r2, #0
 8027a4e:	2107      	movs	r1, #7
 8027a50:	4620      	mov	r0, r4
 8027a52:	f7ff fc5f 	bl	8027314 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8027a56:	2202      	movs	r2, #2
 8027a58:	f10d 010e 	add.w	r1, sp, #14
 8027a5c:	4620      	mov	r0, r4
 8027a5e:	f7ff fbc7 	bl	80271f0 <mg_send>
            break;
 8027a62:	e797      	b.n	8027994 <mqtt_cb+0x114>
 8027a64:	2000012c 	.word	0x2000012c
 8027a68:	0803b420 	.word	0x0803b420
 8027a6c:	0803aa28 	.word	0x0803aa28
 8027a70:	0803ade0 	.word	0x0803ade0
 8027a74:	0803adfc 	.word	0x0803adfc
 8027a78:	0803ae1c 	.word	0x0803ae1c
 8027a7c:	0803ae2c 	.word	0x0803ae2c

08027a80 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8027a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027a84:	b088      	sub	sp, #32
 8027a86:	4605      	mov	r5, r0
 8027a88:	469a      	mov	sl, r3
 8027a8a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8027a8c:	f107 0614 	add.w	r6, r7, #20
 8027a90:	9601      	str	r6, [sp, #4]
 8027a92:	9200      	str	r2, [sp, #0]
 8027a94:	6883      	ldr	r3, [r0, #8]
 8027a96:	2206      	movs	r2, #6
 8027a98:	f7fd ffd4 	bl	8025a44 <tx_ip>
 8027a9c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8027a9e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8027aa2:	2200      	movs	r2, #0
 8027aa4:	6142      	str	r2, [r0, #20]
 8027aa6:	6182      	str	r2, [r0, #24]
 8027aa8:	61c2      	str	r2, [r0, #28]
 8027aaa:	6202      	str	r2, [r0, #32]
 8027aac:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027aae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027ab0:	b10b      	cbz	r3, 8027ab6 <tx_tcp+0x36>
 8027ab2:	2f00      	cmp	r7, #0
 8027ab4:	d147      	bne.n	8027b46 <tx_tcp+0xc6>
  tcp->sport = sport;
 8027ab6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8027aba:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 8027abc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8027ac0:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8027ac2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027ac4:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8027ac6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027ac8:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 8027aca:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 8027ace:	f241 7070 	movw	r0, #6000	@ 0x1770
 8027ad2:	f7fd ff97 	bl	8025a04 <mg_ntohs>
 8027ad6:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8027ad8:	2350      	movs	r3, #80	@ 0x50
 8027ada:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8027ade:	b2bb      	uxth	r3, r7
 8027ae0:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8027ae2:	2000      	movs	r0, #0
 8027ae4:	f88d 001c 	strb.w	r0, [sp, #28]
 8027ae8:	7a62      	ldrb	r2, [r4, #9]
 8027aea:	f88d 201d 	strb.w	r2, [sp, #29]
 8027aee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8027af2:	f88d 201e 	strb.w	r2, [sp, #30]
 8027af6:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 8027afa:	b2b2      	uxth	r2, r6
 8027afc:	4649      	mov	r1, r9
 8027afe:	f7f9 fac9 	bl	8021094 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8027b02:	f104 060c 	add.w	r6, r4, #12
 8027b06:	2204      	movs	r2, #4
 8027b08:	4631      	mov	r1, r6
 8027b0a:	f7f9 fac3 	bl	8021094 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8027b0e:	f104 0810 	add.w	r8, r4, #16
 8027b12:	2204      	movs	r2, #4
 8027b14:	4641      	mov	r1, r8
 8027b16:	f7f9 fabd 	bl	8021094 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8027b1a:	2204      	movs	r2, #4
 8027b1c:	a907      	add	r1, sp, #28
 8027b1e:	f7f9 fab9 	bl	8021094 <csumup>
  tcp->csum = csumfin(cs);
 8027b22:	f7fd ff7b 	bl	8025a1c <csumfin>
 8027b26:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027b28:	4b18      	ldr	r3, [pc, #96]	@ (8027b8c <tx_tcp+0x10c>)
 8027b2a:	681b      	ldr	r3, [r3, #0]
 8027b2c:	2b03      	cmp	r3, #3
 8027b2e:	dc10      	bgt.n	8027b52 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8027b30:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8027b34:	696b      	ldr	r3, [r5, #20]
 8027b36:	1ac9      	subs	r1, r1, r3
 8027b38:	4439      	add	r1, r7
 8027b3a:	4628      	mov	r0, r5
 8027b3c:	f7f9 fabb 	bl	80210b6 <ether_output>
}
 8027b40:	b008      	add	sp, #32
 8027b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8027b46:	463a      	mov	r2, r7
 8027b48:	4619      	mov	r1, r3
 8027b4a:	3028      	adds	r0, #40	@ 0x28
 8027b4c:	f004 fe7e 	bl	802c84c <memmove>
 8027b50:	e7b1      	b.n	8027ab6 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027b52:	4b0f      	ldr	r3, [pc, #60]	@ (8027b90 <tx_tcp+0x110>)
 8027b54:	f241 5254 	movw	r2, #5460	@ 0x1554
 8027b58:	490e      	ldr	r1, [pc, #56]	@ (8027b94 <tx_tcp+0x114>)
 8027b5a:	2004      	movs	r0, #4
 8027b5c:	f7fe fa94 	bl	8026088 <mg_log_prefix>
 8027b60:	8aa0      	ldrh	r0, [r4, #20]
 8027b62:	f7fd ff4f 	bl	8025a04 <mg_ntohs>
 8027b66:	4681      	mov	r9, r0
 8027b68:	8ae0      	ldrh	r0, [r4, #22]
 8027b6a:	f7fd ff4b 	bl	8025a04 <mg_ntohs>
 8027b6e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8027b72:	4909      	ldr	r1, [pc, #36]	@ (8027b98 <tx_tcp+0x118>)
 8027b74:	9704      	str	r7, [sp, #16]
 8027b76:	9303      	str	r3, [sp, #12]
 8027b78:	9002      	str	r0, [sp, #8]
 8027b7a:	f8cd 8004 	str.w	r8, [sp, #4]
 8027b7e:	9100      	str	r1, [sp, #0]
 8027b80:	464b      	mov	r3, r9
 8027b82:	4632      	mov	r2, r6
 8027b84:	4805      	ldr	r0, [pc, #20]	@ (8027b9c <tx_tcp+0x11c>)
 8027b86:	f7fc f92d 	bl	8023de4 <mg_log>
 8027b8a:	e7d1      	b.n	8027b30 <tx_tcp+0xb0>
 8027b8c:	2000012c 	.word	0x2000012c
 8027b90:	0803b3e4 	.word	0x0803b3e4
 8027b94:	0803aa28 	.word	0x0803aa28
 8027b98:	08023da5 	.word	0x08023da5
 8027b9c:	0803ae4c 	.word	0x0803ae4c

08027ba0 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8027ba0:	b530      	push	{r4, r5, lr}
 8027ba2:	b087      	sub	sp, #28
 8027ba4:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8027ba6:	8b05      	ldrh	r5, [r0, #24]
 8027ba8:	4628      	mov	r0, r5
 8027baa:	f7fd ff2b 	bl	8025a04 <mg_ntohs>
 8027bae:	f7fd fe91 	bl	80258d4 <mg_ntohl>
 8027bb2:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027bb4:	6863      	ldr	r3, [r4, #4]
 8027bb6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8027bb8:	2300      	movs	r3, #0
 8027bba:	9305      	str	r3, [sp, #20]
 8027bbc:	9304      	str	r3, [sp, #16]
 8027bbe:	9303      	str	r3, [sp, #12]
 8027bc0:	9202      	str	r2, [sp, #8]
 8027bc2:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027bc4:	9301      	str	r3, [sp, #4]
 8027bc6:	9500      	str	r5, [sp, #0]
 8027bc8:	2302      	movs	r3, #2
 8027bca:	69e2      	ldr	r2, [r4, #28]
 8027bcc:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027bd0:	f7ff ff56 	bl	8027a80 <tx_tcp>
}
 8027bd4:	b007      	add	sp, #28
 8027bd6:	bd30      	pop	{r4, r5, pc}

08027bd8 <tx_tcp_pkt>:
                         size_t len) {
 8027bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bdc:	b087      	sub	sp, #28
 8027bde:	4605      	mov	r5, r0
 8027be0:	4617      	mov	r7, r2
 8027be2:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8027be4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8027be6:	7b5c      	ldrb	r4, [r3, #13]
 8027be8:	f014 0403 	ands.w	r4, r4, #3
 8027bec:	bf18      	it	ne
 8027bee:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027bf0:	690e      	ldr	r6, [r1, #16]
 8027bf2:	3606      	adds	r6, #6
 8027bf4:	69ca      	ldr	r2, [r1, #28]
 8027bf6:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8027bfa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8027bfe:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8027c02:	6858      	ldr	r0, [r3, #4]
 8027c04:	f7fd fe66 	bl	80258d4 <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027c08:	4420      	add	r0, r4
 8027c0a:	f7fd fe63 	bl	80258d4 <mg_ntohl>
 8027c0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027c10:	9305      	str	r3, [sp, #20]
 8027c12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027c14:	9304      	str	r3, [sp, #16]
 8027c16:	9003      	str	r0, [sp, #12]
 8027c18:	f8cd 8008 	str.w	r8, [sp, #8]
 8027c1c:	f8cd b004 	str.w	fp, [sp, #4]
 8027c20:	f8cd a000 	str.w	sl, [sp]
 8027c24:	463b      	mov	r3, r7
 8027c26:	464a      	mov	r2, r9
 8027c28:	4631      	mov	r1, r6
 8027c2a:	4628      	mov	r0, r5
 8027c2c:	f7ff ff28 	bl	8027a80 <tx_tcp>
}
 8027c30:	b007      	add	sp, #28
 8027c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027c38 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 8027c38:	b530      	push	{r4, r5, lr}
 8027c3a:	b083      	sub	sp, #12
 8027c3c:	4604      	mov	r4, r0
 8027c3e:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027c40:	6843      	ldr	r3, [r0, #4]
 8027c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027c44:	2901      	cmp	r1, #1
 8027c46:	d01a      	beq.n	8027c7e <settmout+0x46>
 8027c48:	2903      	cmp	r1, #3
 8027c4a:	d01a      	beq.n	8027c82 <settmout+0x4a>
 8027c4c:	2904      	cmp	r1, #4
 8027c4e:	d01b      	beq.n	8027c88 <settmout+0x50>
 8027c50:	2902      	cmp	r1, #2
 8027c52:	d012      	beq.n	8027c7a <settmout+0x42>
 8027c54:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 8027c58:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8027c5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8027c5c:	185b      	adds	r3, r3, r1
 8027c5e:	f142 0200 	adc.w	r2, r2, #0
 8027c62:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8027c66:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 8027c6a:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8027c6e:	4b10      	ldr	r3, [pc, #64]	@ (8027cb0 <settmout+0x78>)
 8027c70:	681b      	ldr	r3, [r3, #0]
 8027c72:	2b03      	cmp	r3, #3
 8027c74:	dc0b      	bgt.n	8027c8e <settmout+0x56>
}
 8027c76:	b003      	add	sp, #12
 8027c78:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 8027c7a:	2364      	movs	r3, #100	@ 0x64
 8027c7c:	e7ec      	b.n	8027c58 <settmout+0x20>
 8027c7e:	2396      	movs	r3, #150	@ 0x96
 8027c80:	e7ea      	b.n	8027c58 <settmout+0x20>
 8027c82:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8027c86:	e7e7      	b.n	8027c58 <settmout+0x20>
 8027c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8027c8c:	e7e4      	b.n	8027c58 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8027c8e:	4b09      	ldr	r3, [pc, #36]	@ (8027cb4 <settmout+0x7c>)
 8027c90:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8027c94:	4908      	ldr	r1, [pc, #32]	@ (8027cb8 <settmout+0x80>)
 8027c96:	2004      	movs	r0, #4
 8027c98:	f7fe f9f6 	bl	8026088 <mg_log_prefix>
 8027c9c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8027ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8027ca4:	462a      	mov	r2, r5
 8027ca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027ca8:	4804      	ldr	r0, [pc, #16]	@ (8027cbc <settmout+0x84>)
 8027caa:	f7fc f89b 	bl	8023de4 <mg_log>
}
 8027cae:	e7e2      	b.n	8027c76 <settmout+0x3e>
 8027cb0:	2000012c 	.word	0x2000012c
 8027cb4:	0803b3d8 	.word	0x0803b3d8
 8027cb8:	0803aa28 	.word	0x0803aa28
 8027cbc:	0803ae70 	.word	0x0803ae70

08027cc0 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8027cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cc4:	b089      	sub	sp, #36	@ 0x24
 8027cc6:	4604      	mov	r4, r0
 8027cc8:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027cca:	6843      	ldr	r3, [r0, #4]
 8027ccc:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8027cce:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8027cd2:	4611      	mov	r1, r2
 8027cd4:	f7ff fa2e 	bl	8027134 <trim_len>
 8027cd8:	4605      	mov	r5, r0
  if (c->is_udp) {
 8027cda:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027cde:	f013 0f01 	tst.w	r3, #1
 8027ce2:	d010      	beq.n	8027d06 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8027ce4:	68ba      	ldr	r2, [r7, #8]
 8027ce6:	9003      	str	r0, [sp, #12]
 8027ce8:	9602      	str	r6, [sp, #8]
 8027cea:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027cec:	9301      	str	r3, [sp, #4]
 8027cee:	f8cd 8000 	str.w	r8, [sp]
 8027cf2:	8b23      	ldrh	r3, [r4, #24]
 8027cf4:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027cf8:	4638      	mov	r0, r7
 8027cfa:	f7fd ff38 	bl	8025b6e <tx_udp>
  return (long) len;
 8027cfe:	4628      	mov	r0, r5
}
 8027d00:	b009      	add	sp, #36	@ 0x24
 8027d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8027d06:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8027d0a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8027d0e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8027d12:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027d16:	f7fd fddd 	bl	80258d4 <mg_ntohl>
 8027d1a:	9007      	str	r0, [sp, #28]
 8027d1c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027d20:	f7fd fdd8 	bl	80258d4 <mg_ntohl>
 8027d24:	9505      	str	r5, [sp, #20]
 8027d26:	9604      	str	r6, [sp, #16]
 8027d28:	9003      	str	r0, [sp, #12]
 8027d2a:	9b07      	ldr	r3, [sp, #28]
 8027d2c:	9302      	str	r3, [sp, #8]
 8027d2e:	f8cd b004 	str.w	fp, [sp, #4]
 8027d32:	f8cd a000 	str.w	sl, [sp]
 8027d36:	2318      	movs	r3, #24
 8027d38:	4642      	mov	r2, r8
 8027d3a:	4649      	mov	r1, r9
 8027d3c:	4638      	mov	r0, r7
 8027d3e:	f7ff fe9f 	bl	8027a80 <tx_tcp>
    if (sent == 0) {
 8027d42:	b180      	cbz	r0, 8027d66 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 8027d44:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027d48:	d010      	beq.n	8027d6c <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 8027d4a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8027d4e:	442b      	add	r3, r5
 8027d50:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8027d54:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027d58:	2b01      	cmp	r3, #1
 8027d5a:	d1d0      	bne.n	8027cfe <mg_io_send+0x3e>
 8027d5c:	2100      	movs	r1, #0
 8027d5e:	4620      	mov	r0, r4
 8027d60:	f7ff ff6a 	bl	8027c38 <settmout>
 8027d64:	e7cb      	b.n	8027cfe <mg_io_send+0x3e>
      return MG_IO_WAIT;
 8027d66:	f06f 0001 	mvn.w	r0, #1
 8027d6a:	e7c9      	b.n	8027d00 <mg_io_send+0x40>
      return MG_IO_ERR;
 8027d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8027d70:	e7c6      	b.n	8027d00 <mg_io_send+0x40>
	...

08027d74 <write_conn>:
static void write_conn(struct mg_connection *c) {
 8027d74:	b510      	push	{r4, lr}
 8027d76:	b082      	sub	sp, #8
 8027d78:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027d7a:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 8027d7e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027d82:	d00b      	beq.n	8027d9c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8027d84:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027d86:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027d88:	f7fd fc80 	bl	802568c <mg_tls_send>
 8027d8c:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 8027d8e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027d92:	d008      	beq.n	8027da6 <write_conn+0x32>
  } else if (len > 0) {
 8027d94:	2800      	cmp	r0, #0
 8027d96:	dc0b      	bgt.n	8027db0 <write_conn+0x3c>
}
 8027d98:	b002      	add	sp, #8
 8027d9a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 8027d9c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8027d9e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027da0:	f7ff ff8e 	bl	8027cc0 <mg_io_send>
 8027da4:	e7f2      	b.n	8027d8c <write_conn+0x18>
    mg_error(c, "tx err");
 8027da6:	4908      	ldr	r1, [pc, #32]	@ (8027dc8 <write_conn+0x54>)
 8027da8:	4620      	mov	r0, r4
 8027daa:	f7fe fa55 	bl	8026258 <mg_error>
 8027dae:	e7f3      	b.n	8027d98 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8027db0:	4602      	mov	r2, r0
 8027db2:	2100      	movs	r1, #0
 8027db4:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027db8:	f7fd fd2f 	bl	802581a <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8027dbc:	aa01      	add	r2, sp, #4
 8027dbe:	2108      	movs	r1, #8
 8027dc0:	4620      	mov	r0, r4
 8027dc2:	f7fa fdc6 	bl	8022952 <mg_call>
}
 8027dc6:	e7e7      	b.n	8027d98 <write_conn+0x24>
 8027dc8:	0803ae80 	.word	0x0803ae80

08027dcc <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 8027dcc:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8027dd0:	f240 1221 	movw	r2, #289	@ 0x121
 8027dd4:	421a      	tst	r2, r3
 8027dd6:	d000      	beq.n	8027dda <init_closure+0xe>
 8027dd8:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 8027dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027dde:	b086      	sub	sp, #24
 8027de0:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8027de2:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8027de4:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027de6:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8027dea:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 8027dee:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8027df2:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8027df6:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8027dfa:	f7fd fd6b 	bl	80258d4 <mg_ntohl>
 8027dfe:	4605      	mov	r5, r0
 8027e00:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027e04:	f7fd fd66 	bl	80258d4 <mg_ntohl>
 8027e08:	2300      	movs	r3, #0
 8027e0a:	9305      	str	r3, [sp, #20]
 8027e0c:	9304      	str	r3, [sp, #16]
 8027e0e:	9003      	str	r0, [sp, #12]
 8027e10:	9502      	str	r5, [sp, #8]
 8027e12:	f8cd a004 	str.w	sl, [sp, #4]
 8027e16:	f8cd 9000 	str.w	r9, [sp]
 8027e1a:	2311      	movs	r3, #17
 8027e1c:	4642      	mov	r2, r8
 8027e1e:	4639      	mov	r1, r7
 8027e20:	4630      	mov	r0, r6
 8027e22:	f7ff fe2d 	bl	8027a80 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8027e26:	2104      	movs	r1, #4
 8027e28:	4620      	mov	r0, r4
 8027e2a:	f7ff ff05 	bl	8027c38 <settmout>
}
 8027e2e:	b006      	add	sp, #24
 8027e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08027e34 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 8027e34:	b530      	push	{r4, r5, lr}
 8027e36:	b085      	sub	sp, #20
 8027e38:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027e3a:	6843      	ldr	r3, [r0, #4]
 8027e3c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027e3e:	69c3      	ldr	r3, [r0, #28]
 8027e40:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 8027e42:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027e46:	f36f 03c3 	bfc	r3, #3, #1
 8027e4a:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8027e4e:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 8027e52:	2b00      	cmp	r3, #0
 8027e54:	db03      	blt.n	8027e5e <mg_connect_resolved+0x2a>
 8027e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8027e5a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8027e5e:	68ab      	ldr	r3, [r5, #8]
 8027e60:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 8027e62:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 8027e66:	1c43      	adds	r3, r0, #1
 8027e68:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 8027e6c:	f7fd fdca 	bl	8025a04 <mg_ntohs>
 8027e70:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027e72:	4b51      	ldr	r3, [pc, #324]	@ (8027fb8 <mg_connect_resolved+0x184>)
 8027e74:	681b      	ldr	r3, [r3, #0]
 8027e76:	2b02      	cmp	r3, #2
 8027e78:	dc36      	bgt.n	8027ee8 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 8027e7a:	2200      	movs	r2, #0
 8027e7c:	2103      	movs	r1, #3
 8027e7e:	4620      	mov	r0, r4
 8027e80:	f7fa fd67 	bl	8022952 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8027e84:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027e88:	f013 0301 	ands.w	r3, r3, #1
 8027e8c:	d009      	beq.n	8027ea2 <mg_connect_resolved+0x6e>
 8027e8e:	9903      	ldr	r1, [sp, #12]
 8027e90:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8027e94:	d03b      	beq.n	8027f0e <mg_connect_resolved+0xda>
 8027e96:	68aa      	ldr	r2, [r5, #8]
 8027e98:	68e8      	ldr	r0, [r5, #12]
 8027e9a:	ea62 0200 	orn	r2, r2, r0
 8027e9e:	4291      	cmp	r1, r2
 8027ea0:	d035      	beq.n	8027f0e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027ea2:	68aa      	ldr	r2, [r5, #8]
 8027ea4:	2a00      	cmp	r2, #0
 8027ea6:	d046      	beq.n	8027f36 <mg_connect_resolved+0x102>
 8027ea8:	9903      	ldr	r1, [sp, #12]
 8027eaa:	68e8      	ldr	r0, [r5, #12]
 8027eac:	404a      	eors	r2, r1
 8027eae:	4202      	tst	r2, r0
 8027eb0:	d141      	bne.n	8027f36 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8027eb2:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027eb4:	4291      	cmp	r1, r2
 8027eb6:	d03e      	beq.n	8027f36 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8027eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8027fb8 <mg_connect_resolved+0x184>)
 8027eba:	681b      	ldr	r3, [r3, #0]
 8027ebc:	2b02      	cmp	r3, #2
 8027ebe:	dc2e      	bgt.n	8027f1e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8027ec0:	9903      	ldr	r1, [sp, #12]
 8027ec2:	4628      	mov	r0, r5
 8027ec4:	f7fd fe9b 	bl	8025bfe <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8027ec8:	2102      	movs	r1, #2
 8027eca:	4620      	mov	r0, r4
 8027ecc:	f7ff feb4 	bl	8027c38 <settmout>
    c->is_arplooking = 1;
 8027ed0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027ed4:	f043 0310 	orr.w	r3, r3, #16
 8027ed8:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 8027edc:	b2db      	uxtb	r3, r3
 8027ede:	f043 0320 	orr.w	r3, r3, #32
 8027ee2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8027ee6:	e018      	b.n	8027f1a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027ee8:	4b34      	ldr	r3, [pc, #208]	@ (8027fbc <mg_connect_resolved+0x188>)
 8027eea:	f241 724f 	movw	r2, #5967	@ 0x174f
 8027eee:	4934      	ldr	r1, [pc, #208]	@ (8027fc0 <mg_connect_resolved+0x18c>)
 8027ef0:	2003      	movs	r0, #3
 8027ef2:	f7fe f8c9 	bl	8026088 <mg_log_prefix>
 8027ef6:	4a33      	ldr	r2, [pc, #204]	@ (8027fc4 <mg_connect_resolved+0x190>)
 8027ef8:	f104 031c 	add.w	r3, r4, #28
 8027efc:	9301      	str	r3, [sp, #4]
 8027efe:	9200      	str	r2, [sp, #0]
 8027f00:	f104 0308 	add.w	r3, r4, #8
 8027f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027f06:	4830      	ldr	r0, [pc, #192]	@ (8027fc8 <mg_connect_resolved+0x194>)
 8027f08:	f7fb ff6c 	bl	8023de4 <mg_log>
 8027f0c:	e7b5      	b.n	8027e7a <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8027f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027f12:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8027f16:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 8027f1a:	b005      	add	sp, #20
 8027f1c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8027f1e:	4b27      	ldr	r3, [pc, #156]	@ (8027fbc <mg_connect_resolved+0x188>)
 8027f20:	f241 7258 	movw	r2, #5976	@ 0x1758
 8027f24:	4926      	ldr	r1, [pc, #152]	@ (8027fc0 <mg_connect_resolved+0x18c>)
 8027f26:	2003      	movs	r0, #3
 8027f28:	f7fe f8ae 	bl	8026088 <mg_log_prefix>
 8027f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027f2e:	4827      	ldr	r0, [pc, #156]	@ (8027fcc <mg_connect_resolved+0x198>)
 8027f30:	f7fb ff58 	bl	8023de4 <mg_log>
 8027f34:	e7c4      	b.n	8027ec0 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8027f36:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8027f3a:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 8027f3e:	2ae0      	cmp	r2, #224	@ 0xe0
 8027f40:	d00e      	beq.n	8027f60 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8027f42:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 8027f46:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8027f4a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 8027f4e:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 8027f52:	b31b      	cbz	r3, 8027f9c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 8027f54:	2200      	movs	r2, #0
 8027f56:	2104      	movs	r1, #4
 8027f58:	4620      	mov	r0, r4
 8027f5a:	f7fa fcfa 	bl	8022952 <mg_call>
 8027f5e:	e7dc      	b.n	8027f1a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8027f60:	4b1b      	ldr	r3, [pc, #108]	@ (8027fd0 <mg_connect_resolved+0x19c>)
 8027f62:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8027f66:	f8ad 3008 	strh.w	r3, [sp, #8]
 8027f6a:	0c1b      	lsrs	r3, r3, #16
 8027f6c:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 8027f70:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8027f74:	b2db      	uxtb	r3, r3
 8027f76:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 8027f7a:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 8027f7e:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 8027f82:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8027f86:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 8027f8a:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 8027f8e:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8027f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8027f96:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 8027f9a:	e7be      	b.n	8027f1a <mg_connect_resolved+0xe6>
      send_syn(c);
 8027f9c:	4620      	mov	r0, r4
 8027f9e:	f7ff fdff 	bl	8027ba0 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8027fa2:	2103      	movs	r1, #3
 8027fa4:	4620      	mov	r0, r4
 8027fa6:	f7ff fe47 	bl	8027c38 <settmout>
      c->is_connecting = 1;
 8027faa:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027fae:	f043 0320 	orr.w	r3, r3, #32
 8027fb2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8027fb6:	e7b0      	b.n	8027f1a <mg_connect_resolved+0xe6>
 8027fb8:	2000012c 	.word	0x2000012c
 8027fbc:	0803b3b4 	.word	0x0803b3b4
 8027fc0:	0803aa28 	.word	0x0803aa28
 8027fc4:	08025f3d 	.word	0x08025f3d
 8027fc8:	0803ae88 	.word	0x0803ae88
 8027fcc:	0803ae98 	.word	0x0803ae98
 8027fd0:	08035bcc 	.word	0x08035bcc

08027fd4 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027fd6:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8027fd8:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 8027fda:	2902      	cmp	r1, #2
 8027fdc:	d009      	beq.n	8027ff2 <dns_cb+0x1e>
 8027fde:	4604      	mov	r4, r0
 8027fe0:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8027fe4:	2907      	cmp	r1, #7
 8027fe6:	d016      	beq.n	8028016 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8027fe8:	2909      	cmp	r1, #9
 8027fea:	f000 809a 	beq.w	8028122 <dns_cb+0x14e>
}
 8027fee:	b049      	add	sp, #292	@ 0x124
 8027ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8027ff2:	6816      	ldr	r6, [r2, #0]
 8027ff4:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8027ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027ff8:	e000      	b.n	8027ffc <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027ffa:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 8027ffc:	2b00      	cmp	r3, #0
 8027ffe:	d0f6      	beq.n	8027fee <dns_cb+0x1a>
      tmp = d->next;
 8028000:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8028002:	6899      	ldr	r1, [r3, #8]
 8028004:	68da      	ldr	r2, [r3, #12]
 8028006:	42b1      	cmp	r1, r6
 8028008:	41aa      	sbcs	r2, r5
 802800a:	d2f6      	bcs.n	8027ffa <dns_cb+0x26>
 802800c:	494c      	ldr	r1, [pc, #304]	@ (8028140 <dns_cb+0x16c>)
 802800e:	6858      	ldr	r0, [r3, #4]
 8028010:	f7fe f922 	bl	8026258 <mg_error>
 8028014:	e7f1      	b.n	8027ffa <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8028016:	aa02      	add	r2, sp, #8
 8028018:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802801a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802801c:	f7fe f870 	bl	8026100 <mg_dns_parse>
 8028020:	b9c8      	cbnz	r0, 8028056 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8028022:	4b48      	ldr	r3, [pc, #288]	@ (8028144 <dns_cb+0x170>)
 8028024:	681b      	ldr	r3, [r3, #0]
 8028026:	2b00      	cmp	r3, #0
 8028028:	dc0a      	bgt.n	8028040 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802802a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802802c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802802e:	f7fb f83b 	bl	80230a8 <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028032:	4b44      	ldr	r3, [pc, #272]	@ (8028144 <dns_cb+0x170>)
 8028034:	681b      	ldr	r3, [r3, #0]
 8028036:	2b00      	cmp	r3, #0
 8028038:	dc68      	bgt.n	802810c <dns_cb+0x138>
    c->recv.len = 0;
 802803a:	2300      	movs	r3, #0
 802803c:	6423      	str	r3, [r4, #64]	@ 0x40
 802803e:	e7d6      	b.n	8027fee <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 8028040:	4b41      	ldr	r3, [pc, #260]	@ (8028148 <dns_cb+0x174>)
 8028042:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 8028046:	4941      	ldr	r1, [pc, #260]	@ (802814c <dns_cb+0x178>)
 8028048:	2001      	movs	r0, #1
 802804a:	f7fe f81d 	bl	8026088 <mg_log_prefix>
 802804e:	4840      	ldr	r0, [pc, #256]	@ (8028150 <dns_cb+0x17c>)
 8028050:	f7fb fec8 	bl	8023de4 <mg_log>
 8028054:	e7e9      	b.n	802802a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 8028056:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 8028058:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 802805a:	e008      	b.n	802806e <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 802805c:	6868      	ldr	r0, [r5, #4]
 802805e:	f7ff fee9 	bl	8027e34 <mg_connect_resolved>
        mg_dns_free(head, d);
 8028062:	4629      	mov	r1, r5
 8028064:	4630      	mov	r0, r6
 8028066:	f7f9 fa35 	bl	80214d4 <mg_dns_free>
        resolved = 1;
 802806a:	2101      	movs	r1, #1
 802806c:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 802806e:	2d00      	cmp	r5, #0
 8028070:	d049      	beq.n	8028106 <dns_cb+0x132>
        tmp = d->next;
 8028072:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 8028074:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8028078:	8a2b      	ldrh	r3, [r5, #16]
 802807a:	429a      	cmp	r2, r3
 802807c:	d1f6      	bne.n	802806c <dns_cb+0x98>
        if (d->c->is_resolving) {
 802807e:	6868      	ldr	r0, [r5, #4]
 8028080:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028084:	f013 0f08 	tst.w	r3, #8
 8028088:	d02c      	beq.n	80280e4 <dns_cb+0x110>
          if (dm.resolved) {
 802808a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 802808e:	b323      	cbz	r3, 80280da <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8028090:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8028092:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8028096:	686b      	ldr	r3, [r5, #4]
 8028098:	f103 0c1c 	add.w	ip, r3, #28
 802809c:	f10d 0e0c 	add.w	lr, sp, #12
 80280a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80280a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80280a8:	f8de 3000 	ldr.w	r3, [lr]
 80280ac:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 80280b0:	4b24      	ldr	r3, [pc, #144]	@ (8028144 <dns_cb+0x170>)
 80280b2:	681b      	ldr	r3, [r3, #0]
 80280b4:	2b02      	cmp	r3, #2
 80280b6:	ddd1      	ble.n	802805c <dns_cb+0x88>
 80280b8:	4b23      	ldr	r3, [pc, #140]	@ (8028148 <dns_cb+0x174>)
 80280ba:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 80280be:	4923      	ldr	r1, [pc, #140]	@ (802814c <dns_cb+0x178>)
 80280c0:	2003      	movs	r0, #3
 80280c2:	f7fd ffe1 	bl	8026088 <mg_log_prefix>
 80280c6:	686b      	ldr	r3, [r5, #4]
 80280c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80280ca:	331c      	adds	r3, #28
 80280cc:	9300      	str	r3, [sp, #0]
 80280ce:	4b21      	ldr	r3, [pc, #132]	@ (8028154 <dns_cb+0x180>)
 80280d0:	aa08      	add	r2, sp, #32
 80280d2:	4821      	ldr	r0, [pc, #132]	@ (8028158 <dns_cb+0x184>)
 80280d4:	f7fb fe86 	bl	8023de4 <mg_log>
 80280d8:	e7c0      	b.n	802805c <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 80280da:	aa08      	add	r2, sp, #32
 80280dc:	491f      	ldr	r1, [pc, #124]	@ (802815c <dns_cb+0x188>)
 80280de:	f7fe f8bb 	bl	8026258 <mg_error>
 80280e2:	e7be      	b.n	8028062 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 80280e4:	4b17      	ldr	r3, [pc, #92]	@ (8028144 <dns_cb+0x170>)
 80280e6:	681b      	ldr	r3, [r3, #0]
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	ddba      	ble.n	8028062 <dns_cb+0x8e>
 80280ec:	4b16      	ldr	r3, [pc, #88]	@ (8028148 <dns_cb+0x174>)
 80280ee:	f240 42da 	movw	r2, #1242	@ 0x4da
 80280f2:	4916      	ldr	r1, [pc, #88]	@ (802814c <dns_cb+0x178>)
 80280f4:	2001      	movs	r0, #1
 80280f6:	f7fd ffc7 	bl	8026088 <mg_log_prefix>
 80280fa:	686b      	ldr	r3, [r5, #4]
 80280fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80280fe:	4818      	ldr	r0, [pc, #96]	@ (8028160 <dns_cb+0x18c>)
 8028100:	f7fb fe70 	bl	8023de4 <mg_log>
 8028104:	e7ad      	b.n	8028062 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8028106:	2900      	cmp	r1, #0
 8028108:	d197      	bne.n	802803a <dns_cb+0x66>
 802810a:	e792      	b.n	8028032 <dns_cb+0x5e>
 802810c:	4b0e      	ldr	r3, [pc, #56]	@ (8028148 <dns_cb+0x174>)
 802810e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8028112:	490e      	ldr	r1, [pc, #56]	@ (802814c <dns_cb+0x178>)
 8028114:	2001      	movs	r0, #1
 8028116:	f7fd ffb7 	bl	8026088 <mg_log_prefix>
 802811a:	4812      	ldr	r0, [pc, #72]	@ (8028164 <dns_cb+0x190>)
 802811c:	f7fb fe62 	bl	8023de4 <mg_log>
 8028120:	e78b      	b.n	802803a <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8028122:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8028124:	2c00      	cmp	r4, #0
 8028126:	f43f af62 	beq.w	8027fee <dns_cb+0x1a>
      tmp = d->next;
 802812a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802812c:	490e      	ldr	r1, [pc, #56]	@ (8028168 <dns_cb+0x194>)
 802812e:	6860      	ldr	r0, [r4, #4]
 8028130:	f7fe f892 	bl	8026258 <mg_error>
      mg_dns_free(head, d);
 8028134:	4621      	mov	r1, r4
 8028136:	4630      	mov	r0, r6
 8028138:	f7f9 f9cc 	bl	80214d4 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 802813c:	462c      	mov	r4, r5
 802813e:	e7f1      	b.n	8028124 <dns_cb+0x150>
 8028140:	0803aeac 	.word	0x0803aeac
 8028144:	2000012c 	.word	0x2000012c
 8028148:	0803b488 	.word	0x0803b488
 802814c:	0803aa28 	.word	0x0803aa28
 8028150:	0803aeb8 	.word	0x0803aeb8
 8028154:	08025f21 	.word	0x08025f21
 8028158:	0803aed4 	.word	0x0803aed4
 802815c:	0803aee4 	.word	0x0803aee4
 8028160:	0803aefc 	.word	0x0803aefc
 8028164:	0803af14 	.word	0x0803af14
 8028168:	0803af24 	.word	0x0803af24

0802816c <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 802816c:	b510      	push	{r4, lr}
 802816e:	b086      	sub	sp, #24
 8028170:	4604      	mov	r4, r0
  uint8_t opts[] = {
 8028172:	4a12      	ldr	r2, [pc, #72]	@ (80281bc <tx_dhcp_discover+0x50>)
 8028174:	ab04      	add	r3, sp, #16
 8028176:	e892 0003 	ldmia.w	r2, {r0, r1}
 802817a:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 802817e:	2200      	movs	r2, #0
 8028180:	9202      	str	r2, [sp, #8]
 8028182:	2108      	movs	r1, #8
 8028184:	9101      	str	r1, [sp, #4]
 8028186:	9300      	str	r3, [sp, #0]
 8028188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802818c:	490c      	ldr	r1, [pc, #48]	@ (80281c0 <tx_dhcp_discover+0x54>)
 802818e:	4620      	mov	r0, r4
 8028190:	f7fd fd7a 	bl	8025c88 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8028194:	4b0b      	ldr	r3, [pc, #44]	@ (80281c4 <tx_dhcp_discover+0x58>)
 8028196:	681b      	ldr	r3, [r3, #0]
 8028198:	2b02      	cmp	r3, #2
 802819a:	dc01      	bgt.n	80281a0 <tx_dhcp_discover+0x34>
}
 802819c:	b006      	add	sp, #24
 802819e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 80281a0:	4b09      	ldr	r3, [pc, #36]	@ (80281c8 <tx_dhcp_discover+0x5c>)
 80281a2:	f241 4270 	movw	r2, #5232	@ 0x1470
 80281a6:	4909      	ldr	r1, [pc, #36]	@ (80281cc <tx_dhcp_discover+0x60>)
 80281a8:	2003      	movs	r0, #3
 80281aa:	f7fd ff6d 	bl	8026088 <mg_log_prefix>
 80281ae:	4622      	mov	r2, r4
 80281b0:	4907      	ldr	r1, [pc, #28]	@ (80281d0 <tx_dhcp_discover+0x64>)
 80281b2:	4808      	ldr	r0, [pc, #32]	@ (80281d4 <tx_dhcp_discover+0x68>)
 80281b4:	f7fb fe16 	bl	8023de4 <mg_log>
}
 80281b8:	e7f0      	b.n	802819c <tx_dhcp_discover+0x30>
 80281ba:	bf00      	nop
 80281bc:	0803af50 	.word	0x0803af50
 80281c0:	0803b4b0 	.word	0x0803b4b0
 80281c4:	2000012c 	.word	0x2000012c
 80281c8:	0803b384 	.word	0x0803b384
 80281cc:	0803aa28 	.word	0x0803aa28
 80281d0:	08023db5 	.word	0x08023db5
 80281d4:	0803af30 	.word	0x0803af30

080281d8 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 80281d8:	b510      	push	{r4, lr}
 80281da:	b086      	sub	sp, #24
  uint8_t opts[] = {
 80281dc:	4c0d      	ldr	r4, [pc, #52]	@ (8028214 <tx_dhcp_request_re+0x3c>)
 80281de:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 80281e0:	2401      	movs	r4, #1
 80281e2:	9402      	str	r4, [sp, #8]
 80281e4:	2404      	movs	r4, #4
 80281e6:	9401      	str	r4, [sp, #4]
 80281e8:	ac05      	add	r4, sp, #20
 80281ea:	9400      	str	r4, [sp, #0]
 80281ec:	f7fd fd4c 	bl	8025c88 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 80281f0:	4b09      	ldr	r3, [pc, #36]	@ (8028218 <tx_dhcp_request_re+0x40>)
 80281f2:	681b      	ldr	r3, [r3, #0]
 80281f4:	2b02      	cmp	r3, #2
 80281f6:	dc01      	bgt.n	80281fc <tx_dhcp_request_re+0x24>
}
 80281f8:	b006      	add	sp, #24
 80281fa:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 80281fc:	4b07      	ldr	r3, [pc, #28]	@ (802821c <tx_dhcp_request_re+0x44>)
 80281fe:	f241 4266 	movw	r2, #5222	@ 0x1466
 8028202:	4907      	ldr	r1, [pc, #28]	@ (8028220 <tx_dhcp_request_re+0x48>)
 8028204:	2003      	movs	r0, #3
 8028206:	f7fd ff3f 	bl	8026088 <mg_log_prefix>
 802820a:	4806      	ldr	r0, [pc, #24]	@ (8028224 <tx_dhcp_request_re+0x4c>)
 802820c:	f7fb fdea 	bl	8023de4 <mg_log>
}
 8028210:	e7f2      	b.n	80281f8 <tx_dhcp_request_re+0x20>
 8028212:	bf00      	nop
 8028214:	ff030135 	.word	0xff030135
 8028218:	2000012c 	.word	0x2000012c
 802821c:	0803b360 	.word	0x0803b360
 8028220:	0803aa28 	.word	0x0803aa28
 8028224:	0803af5c 	.word	0x0803af5c

08028228 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028228:	b5f0      	push	{r4, r5, r6, r7, lr}
 802822a:	b083      	sub	sp, #12
 802822c:	4604      	mov	r4, r0
 802822e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8028230:	698e      	ldr	r6, [r1, #24]
 8028232:	88f7      	ldrh	r7, [r6, #6]
 8028234:	2001      	movs	r0, #1
 8028236:	f7fd fbe5 	bl	8025a04 <mg_ntohs>
 802823a:	4287      	cmp	r7, r0
 802823c:	d006      	beq.n	802824c <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 802823e:	2002      	movs	r0, #2
 8028240:	f7fd fbe0 	bl	8025a04 <mg_ntohs>
 8028244:	4287      	cmp	r7, r0
 8028246:	d05a      	beq.n	80282fe <rx_arp+0xd6>
}
 8028248:	b003      	add	sp, #12
 802824a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 802824c:	69b2      	ldr	r2, [r6, #24]
 802824e:	68a3      	ldr	r3, [r4, #8]
 8028250:	429a      	cmp	r2, r3
 8028252:	d1f4      	bne.n	802823e <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8028254:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8028256:	692b      	ldr	r3, [r5, #16]
 8028258:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802825c:	6032      	str	r2, [r6, #0]
 802825e:	895b      	ldrh	r3, [r3, #10]
 8028260:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8028262:	6823      	ldr	r3, [r4, #0]
 8028264:	f8c6 3006 	str.w	r3, [r6, #6]
 8028268:	88a3      	ldrh	r3, [r4, #4]
 802826a:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 802826c:	f640 0006 	movw	r0, #2054	@ 0x806
 8028270:	f7fd fbc8 	bl	8025a04 <mg_ntohs>
 8028274:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 8028276:	69ab      	ldr	r3, [r5, #24]
 8028278:	6818      	ldr	r0, [r3, #0]
 802827a:	6859      	ldr	r1, [r3, #4]
 802827c:	689a      	ldr	r2, [r3, #8]
 802827e:	68df      	ldr	r7, [r3, #12]
 8028280:	f8c6 000e 	str.w	r0, [r6, #14]
 8028284:	f8c6 1012 	str.w	r1, [r6, #18]
 8028288:	f8c6 2016 	str.w	r2, [r6, #22]
 802828c:	f8c6 701a 	str.w	r7, [r6, #26]
 8028290:	6918      	ldr	r0, [r3, #16]
 8028292:	6959      	ldr	r1, [r3, #20]
 8028294:	699a      	ldr	r2, [r3, #24]
 8028296:	f8c6 001e 	str.w	r0, [r6, #30]
 802829a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 802829e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 80282a2:	2002      	movs	r0, #2
 80282a4:	f7fd fbae 	bl	8025a04 <mg_ntohs>
 80282a8:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 80282aa:	69ab      	ldr	r3, [r5, #24]
 80282ac:	689a      	ldr	r2, [r3, #8]
 80282ae:	6232      	str	r2, [r6, #32]
 80282b0:	899b      	ldrh	r3, [r3, #12]
 80282b2:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 80282b4:	6823      	ldr	r3, [r4, #0]
 80282b6:	f8c6 3016 	str.w	r3, [r6, #22]
 80282ba:	88a3      	ldrh	r3, [r4, #4]
 80282bc:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 80282be:	69ab      	ldr	r3, [r5, #24]
 80282c0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80282c4:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 80282c8:	68a3      	ldr	r3, [r4, #8]
 80282ca:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80282cc:	4b32      	ldr	r3, [pc, #200]	@ (8028398 <rx_arp+0x170>)
 80282ce:	681b      	ldr	r3, [r3, #0]
 80282d0:	2b02      	cmp	r3, #2
 80282d2:	dc04      	bgt.n	80282de <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 80282d4:	212a      	movs	r1, #42	@ 0x2a
 80282d6:	4620      	mov	r0, r4
 80282d8:	f7f8 feed 	bl	80210b6 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80282dc:	e7b4      	b.n	8028248 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80282de:	4b2f      	ldr	r3, [pc, #188]	@ (802839c <rx_arp+0x174>)
 80282e0:	f241 4292 	movw	r2, #5266	@ 0x1492
 80282e4:	492e      	ldr	r1, [pc, #184]	@ (80283a0 <rx_arp+0x178>)
 80282e6:	2003      	movs	r0, #3
 80282e8:	f7fd fece 	bl	8026088 <mg_log_prefix>
 80282ec:	9400      	str	r4, [sp, #0]
 80282ee:	4b2d      	ldr	r3, [pc, #180]	@ (80283a4 <rx_arp+0x17c>)
 80282f0:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 80282f4:	492c      	ldr	r1, [pc, #176]	@ (80283a8 <rx_arp+0x180>)
 80282f6:	482d      	ldr	r0, [pc, #180]	@ (80283ac <rx_arp+0x184>)
 80282f8:	f7fb fd74 	bl	8023de4 <mg_log>
 80282fc:	e7ea      	b.n	80282d4 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80282fe:	2206      	movs	r2, #6
 8028300:	4621      	mov	r1, r4
 8028302:	f106 0012 	add.w	r0, r6, #18
 8028306:	f004 fa27 	bl	802c758 <memcmp>
 802830a:	2800      	cmp	r0, #0
 802830c:	d19c      	bne.n	8028248 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 802830e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8028312:	6923      	ldr	r3, [r4, #16]
 8028314:	429a      	cmp	r2, r3
 8028316:	d026      	beq.n	8028366 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028318:	2200      	movs	r2, #0
 802831a:	4629      	mov	r1, r5
 802831c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802831e:	f7fa f9ac 	bl	802267a <getpeer>
      if (c != NULL && c->is_arplooking) {
 8028322:	4604      	mov	r4, r0
 8028324:	2800      	cmp	r0, #0
 8028326:	d08f      	beq.n	8028248 <rx_arp+0x20>
 8028328:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 802832c:	f013 0f10 	tst.w	r3, #16
 8028330:	d08a      	beq.n	8028248 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8028332:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8028336:	68b3      	ldr	r3, [r6, #8]
 8028338:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 802833c:	89b3      	ldrh	r3, [r6, #12]
 802833e:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028342:	4b15      	ldr	r3, [pc, #84]	@ (8028398 <rx_arp+0x170>)
 8028344:	681b      	ldr	r3, [r3, #0]
 8028346:	2b02      	cmp	r3, #2
 8028348:	dc14      	bgt.n	8028374 <rx_arp+0x14c>
        c->is_arplooking = 0;
 802834a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802834e:	f36f 1304 	bfc	r3, #4, #1
 8028352:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8028356:	4620      	mov	r0, r4
 8028358:	f7ff fc22 	bl	8027ba0 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 802835c:	2103      	movs	r1, #3
 802835e:	4620      	mov	r0, r4
 8028360:	f7ff fc6a 	bl	8027c38 <settmout>
 8028364:	e770      	b.n	8028248 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8028366:	68b3      	ldr	r3, [r6, #8]
 8028368:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 802836c:	89b3      	ldrh	r3, [r6, #12]
 802836e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8028372:	e769      	b.n	8028248 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8028374:	4b09      	ldr	r3, [pc, #36]	@ (802839c <rx_arp+0x174>)
 8028376:	f241 429f 	movw	r2, #5279	@ 0x149f
 802837a:	4909      	ldr	r1, [pc, #36]	@ (80283a0 <rx_arp+0x178>)
 802837c:	2003      	movs	r0, #3
 802837e:	f7fd fe83 	bl	8026088 <mg_log_prefix>
 8028382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028384:	9501      	str	r5, [sp, #4]
 8028386:	4b07      	ldr	r3, [pc, #28]	@ (80283a4 <rx_arp+0x17c>)
 8028388:	9300      	str	r3, [sp, #0]
 802838a:	f104 031c 	add.w	r3, r4, #28
 802838e:	4a06      	ldr	r2, [pc, #24]	@ (80283a8 <rx_arp+0x180>)
 8028390:	4807      	ldr	r0, [pc, #28]	@ (80283b0 <rx_arp+0x188>)
 8028392:	f7fb fd27 	bl	8023de4 <mg_log>
 8028396:	e7d8      	b.n	802834a <rx_arp+0x122>
 8028398:	2000012c 	.word	0x2000012c
 802839c:	0803b34c 	.word	0x0803b34c
 80283a0:	0803aa28 	.word	0x0803aa28
 80283a4:	08023db5 	.word	0x08023db5
 80283a8:	08023da5 	.word	0x08023da5
 80283ac:	0803af6c 	.word	0x0803af6c
 80283b0:	0803af84 	.word	0x0803af84

080283b4 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 80283b4:	b570      	push	{r4, r5, r6, lr}
 80283b6:	b08c      	sub	sp, #48	@ 0x30
 80283b8:	4686      	mov	lr, r0
 80283ba:	460d      	mov	r5, r1
 80283bc:	4616      	mov	r6, r2
  uint8_t opts[] = {
 80283be:	f10d 0c14 	add.w	ip, sp, #20
 80283c2:	4c22      	ldr	r4, [pc, #136]	@ (802844c <tx_dhcp_request_sel+0x98>)
 80283c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80283c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80283ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80283ce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80283d2:	f82c 2b02 	strh.w	r2, [ip], #2
 80283d6:	0c12      	lsrs	r2, r2, #16
 80283d8:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 80283dc:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 80283e0:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 80283e2:	f89e 301f 	ldrb.w	r3, [lr, #31]
 80283e6:	b323      	cbz	r3, 8028432 <tx_dhcp_request_sel+0x7e>
 80283e8:	2306      	movs	r3, #6
 80283ea:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80283ee:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 80283f0:	f89e 2020 	ldrb.w	r2, [lr, #32]
 80283f4:	b132      	cbz	r2, 8028404 <tx_dhcp_request_sel+0x50>
 80283f6:	1c5a      	adds	r2, r3, #1
 80283f8:	3348      	adds	r3, #72	@ 0x48
 80283fa:	446b      	add	r3, sp
 80283fc:	212a      	movs	r1, #42	@ 0x2a
 80283fe:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8028402:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8028404:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8028408:	441a      	add	r2, r3
 802840a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 802840e:	2200      	movs	r2, #0
 8028410:	9202      	str	r2, [sp, #8]
 8028412:	3319      	adds	r3, #25
 8028414:	9301      	str	r3, [sp, #4]
 8028416:	ab05      	add	r3, sp, #20
 8028418:	9300      	str	r3, [sp, #0]
 802841a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802841e:	490c      	ldr	r1, [pc, #48]	@ (8028450 <tx_dhcp_request_sel+0x9c>)
 8028420:	4670      	mov	r0, lr
 8028422:	f7fd fc31 	bl	8025c88 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8028426:	4b0b      	ldr	r3, [pc, #44]	@ (8028454 <tx_dhcp_request_sel+0xa0>)
 8028428:	681b      	ldr	r3, [r3, #0]
 802842a:	2b02      	cmp	r3, #2
 802842c:	dc03      	bgt.n	8028436 <tx_dhcp_request_sel+0x82>
}
 802842e:	b00c      	add	sp, #48	@ 0x30
 8028430:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8028432:	2300      	movs	r3, #0
 8028434:	e7dc      	b.n	80283f0 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8028436:	4b08      	ldr	r3, [pc, #32]	@ (8028458 <tx_dhcp_request_sel+0xa4>)
 8028438:	f241 425b 	movw	r2, #5211	@ 0x145b
 802843c:	4907      	ldr	r1, [pc, #28]	@ (802845c <tx_dhcp_request_sel+0xa8>)
 802843e:	2003      	movs	r0, #3
 8028440:	f7fd fe22 	bl	8026088 <mg_log_prefix>
 8028444:	4806      	ldr	r0, [pc, #24]	@ (8028460 <tx_dhcp_request_sel+0xac>)
 8028446:	f7fb fccd 	bl	8023de4 <mg_log>
}
 802844a:	e7f0      	b.n	802842e <tx_dhcp_request_sel+0x7a>
 802844c:	08035df8 	.word	0x08035df8
 8028450:	0803b4b0 	.word	0x0803b4b0
 8028454:	2000012c 	.word	0x2000012c
 8028458:	0803b320 	.word	0x0803b320
 802845c:	0803aa28 	.word	0x0803aa28
 8028460:	0803af5c 	.word	0x0803af5c

08028464 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8028464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028468:	b089      	sub	sp, #36	@ 0x24
 802846a:	4604      	mov	r4, r0
 802846c:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802846e:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028472:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028476:	d049      	beq.n	802850c <read_conn+0xa8>
 8028478:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 802847c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 802847e:	6878      	ldr	r0, [r7, #4]
 8028480:	f7fd fa28 	bl	80258d4 <mg_ntohl>
 8028484:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028486:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8028488:	7b7b      	ldrb	r3, [r7, #13]
 802848a:	f013 0f01 	tst.w	r3, #1
 802848e:	d053      	beq.n	8028538 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8028490:	68eb      	ldr	r3, [r5, #12]
 8028492:	4403      	add	r3, r0
 8028494:	3301      	adds	r3, #1
 8028496:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 802849a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802849e:	f013 0f10 	tst.w	r3, #16
 80284a2:	d003      	beq.n	80284ac <read_conn+0x48>
 80284a4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80284a8:	2b04      	cmp	r3, #4
 80284aa:	d032      	beq.n	8028512 <read_conn+0xae>
      c->is_draining = 1;
 80284ac:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80284b0:	f043 0310 	orr.w	r3, r3, #16
 80284b4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 80284b8:	2104      	movs	r1, #4
 80284ba:	4620      	mov	r0, r4
 80284bc:	f7ff fbbc 	bl	8027c38 <settmout>
      flags |= TH_FIN;
 80284c0:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 80284c4:	6863      	ldr	r3, [r4, #4]
 80284c6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80284c8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 80284cc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 80284d0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 80284d4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80284d8:	f7fd f9fc 	bl	80258d4 <mg_ntohl>
 80284dc:	4605      	mov	r5, r0
 80284de:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80284e2:	f7fd f9f7 	bl	80258d4 <mg_ntohl>
 80284e6:	2300      	movs	r3, #0
 80284e8:	9305      	str	r3, [sp, #20]
 80284ea:	4b9b      	ldr	r3, [pc, #620]	@ (8028758 <read_conn+0x2f4>)
 80284ec:	9304      	str	r3, [sp, #16]
 80284ee:	9003      	str	r0, [sp, #12]
 80284f0:	9502      	str	r5, [sp, #8]
 80284f2:	f8cd a004 	str.w	sl, [sp, #4]
 80284f6:	f8cd 9000 	str.w	r9, [sp]
 80284fa:	465b      	mov	r3, fp
 80284fc:	4632      	mov	r2, r6
 80284fe:	4641      	mov	r1, r8
 8028500:	4638      	mov	r0, r7
 8028502:	f7ff fabd 	bl	8027a80 <tx_tcp>
}
 8028506:	b009      	add	sp, #36	@ 0x24
 8028508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 802850c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8028510:	e7b4      	b.n	802847c <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8028512:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8028516:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028518:	6898      	ldr	r0, [r3, #8]
 802851a:	f7fd f9db 	bl	80258d4 <mg_ntohl>
 802851e:	4287      	cmp	r7, r0
 8028520:	d004      	beq.n	802852c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8028522:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028526:	f04f 0b10 	mov.w	fp, #16
 802852a:	e7cb      	b.n	80284c4 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 802852c:	3701      	adds	r7, #1
 802852e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8028532:	f04f 0b10 	mov.w	fp, #16
 8028536:	e7c5      	b.n	80284c4 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8028538:	68eb      	ldr	r3, [r5, #12]
 802853a:	2b00      	cmp	r3, #0
 802853c:	d0e3      	beq.n	8028506 <read_conn+0xa2>
  } else if (seq != s->ack) {
 802853e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028542:	4282      	cmp	r2, r0
 8028544:	d046      	beq.n	80285d4 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028546:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8028548:	42aa      	cmp	r2, r5
 802854a:	d025      	beq.n	8028598 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 802854c:	4b83      	ldr	r3, [pc, #524]	@ (802875c <read_conn+0x2f8>)
 802854e:	681b      	ldr	r3, [r3, #0]
 8028550:	2b03      	cmp	r3, #3
 8028552:	dc30      	bgt.n	80285b6 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028554:	6863      	ldr	r3, [r4, #4]
 8028556:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8028558:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 802855c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8028560:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8028564:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028568:	f7fd f9b4 	bl	80258d4 <mg_ntohl>
 802856c:	4605      	mov	r5, r0
 802856e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028572:	f7fd f9af 	bl	80258d4 <mg_ntohl>
 8028576:	2300      	movs	r3, #0
 8028578:	9305      	str	r3, [sp, #20]
 802857a:	4b77      	ldr	r3, [pc, #476]	@ (8028758 <read_conn+0x2f4>)
 802857c:	9304      	str	r3, [sp, #16]
 802857e:	9003      	str	r0, [sp, #12]
 8028580:	9502      	str	r5, [sp, #8]
 8028582:	f8cd a004 	str.w	sl, [sp, #4]
 8028586:	f8cd 9000 	str.w	r9, [sp]
 802858a:	2310      	movs	r3, #16
 802858c:	4632      	mov	r2, r6
 802858e:	4641      	mov	r1, r8
 8028590:	4638      	mov	r0, r7
 8028592:	f7ff fa75 	bl	8027a80 <tx_tcp>
 8028596:	e7b6      	b.n	8028506 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8028598:	4b70      	ldr	r3, [pc, #448]	@ (802875c <read_conn+0x2f8>)
 802859a:	681b      	ldr	r3, [r3, #0]
 802859c:	2b03      	cmp	r3, #3
 802859e:	ddb2      	ble.n	8028506 <read_conn+0xa2>
 80285a0:	4b6f      	ldr	r3, [pc, #444]	@ (8028760 <read_conn+0x2fc>)
 80285a2:	f241 52da 	movw	r2, #5594	@ 0x15da
 80285a6:	496f      	ldr	r1, [pc, #444]	@ (8028764 <read_conn+0x300>)
 80285a8:	2004      	movs	r0, #4
 80285aa:	f7fd fd6d 	bl	8026088 <mg_log_prefix>
 80285ae:	486e      	ldr	r0, [pc, #440]	@ (8028768 <read_conn+0x304>)
 80285b0:	f7fb fc18 	bl	8023de4 <mg_log>
 80285b4:	e7a7      	b.n	8028506 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80285b6:	4b6a      	ldr	r3, [pc, #424]	@ (8028760 <read_conn+0x2fc>)
 80285b8:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 80285bc:	4969      	ldr	r1, [pc, #420]	@ (8028764 <read_conn+0x300>)
 80285be:	2004      	movs	r0, #4
 80285c0:	f7fd fd62 	bl	8026088 <mg_log_prefix>
 80285c4:	462b      	mov	r3, r5
 80285c6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80285ca:	4641      	mov	r1, r8
 80285cc:	4867      	ldr	r0, [pc, #412]	@ (802876c <read_conn+0x308>)
 80285ce:	f7fb fc09 	bl	8023de4 <mg_log>
 80285d2:	e7bf      	b.n	8028554 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 80285d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80285d8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80285dc:	1a52      	subs	r2, r2, r1
 80285de:	4293      	cmp	r3, r2
 80285e0:	d905      	bls.n	80285ee <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80285e2:	4419      	add	r1, r3
 80285e4:	4648      	mov	r0, r9
 80285e6:	f7fe fb8b 	bl	8026d00 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 80285ea:	2800      	cmp	r0, #0
 80285ec:	d05c      	beq.n	80286a8 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 80285ee:	f8d9 0000 	ldr.w	r0, [r9]
 80285f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80285f6:	68ea      	ldr	r2, [r5, #12]
 80285f8:	68a9      	ldr	r1, [r5, #8]
 80285fa:	4418      	add	r0, r3
 80285fc:	f005 fb7c 	bl	802dcf8 <memcpy>
    io->len += pkt->pay.len;
 8028600:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028604:	68ea      	ldr	r2, [r5, #12]
 8028606:	4413      	add	r3, r2
 8028608:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 802860c:	4b53      	ldr	r3, [pc, #332]	@ (802875c <read_conn+0x2f8>)
 802860e:	681b      	ldr	r3, [r3, #0]
 8028610:	2b03      	cmp	r3, #3
 8028612:	dc4e      	bgt.n	80286b2 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8028614:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028616:	6858      	ldr	r0, [r3, #4]
 8028618:	f7fd f95c 	bl	80258d4 <mg_ntohl>
 802861c:	68eb      	ldr	r3, [r5, #12]
 802861e:	4418      	add	r0, r3
 8028620:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8028624:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8028628:	68ea      	ldr	r2, [r5, #12]
 802862a:	4413      	add	r3, r2
 802862c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8028630:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8028634:	4293      	cmp	r3, r2
 8028636:	d95e      	bls.n	80286f6 <read_conn+0x292>
 8028638:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 802863c:	4298      	cmp	r0, r3
 802863e:	d05a      	beq.n	80286f6 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8028640:	4b46      	ldr	r3, [pc, #280]	@ (802875c <read_conn+0x2f8>)
 8028642:	681b      	ldr	r3, [r3, #0]
 8028644:	2b03      	cmp	r3, #3
 8028646:	dc48      	bgt.n	80286da <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8028648:	6863      	ldr	r3, [r4, #4]
 802864a:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 802864e:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8028652:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028656:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 802865a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802865e:	f7fd f939 	bl	80258d4 <mg_ntohl>
 8028662:	9007      	str	r0, [sp, #28]
 8028664:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028668:	f7fd f934 	bl	80258d4 <mg_ntohl>
 802866c:	2700      	movs	r7, #0
 802866e:	9705      	str	r7, [sp, #20]
 8028670:	9704      	str	r7, [sp, #16]
 8028672:	9003      	str	r0, [sp, #12]
 8028674:	9b07      	ldr	r3, [sp, #28]
 8028676:	9302      	str	r3, [sp, #8]
 8028678:	f8cd b004 	str.w	fp, [sp, #4]
 802867c:	f8cd a000 	str.w	sl, [sp]
 8028680:	2310      	movs	r3, #16
 8028682:	4632      	mov	r2, r6
 8028684:	4641      	mov	r1, r8
 8028686:	4648      	mov	r0, r9
 8028688:	f7ff f9fa 	bl	8027a80 <tx_tcp>
      s->unacked = 0;
 802868c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8028690:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028694:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8028698:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802869c:	b37b      	cbz	r3, 80286fe <read_conn+0x29a>
 802869e:	4639      	mov	r1, r7
 80286a0:	4620      	mov	r0, r4
 80286a2:	f7ff fac9 	bl	8027c38 <settmout>
 80286a6:	e02a      	b.n	80286fe <read_conn+0x29a>
    mg_error(c, "oom");
 80286a8:	4931      	ldr	r1, [pc, #196]	@ (8028770 <read_conn+0x30c>)
 80286aa:	4620      	mov	r0, r4
 80286ac:	f7fd fdd4 	bl	8026258 <mg_error>
 80286b0:	e729      	b.n	8028506 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 80286b2:	4b2b      	ldr	r3, [pc, #172]	@ (8028760 <read_conn+0x2fc>)
 80286b4:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 80286b8:	492a      	ldr	r1, [pc, #168]	@ (8028764 <read_conn+0x300>)
 80286ba:	2004      	movs	r0, #4
 80286bc:	f7fd fce4 	bl	8026088 <mg_log_prefix>
 80286c0:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80286c2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80286c4:	6858      	ldr	r0, [r3, #4]
 80286c6:	f7fd f905 	bl	80258d4 <mg_ntohl>
 80286ca:	4602      	mov	r2, r0
 80286cc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80286d0:	4639      	mov	r1, r7
 80286d2:	4828      	ldr	r0, [pc, #160]	@ (8028774 <read_conn+0x310>)
 80286d4:	f7fb fb86 	bl	8023de4 <mg_log>
 80286d8:	e79c      	b.n	8028614 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 80286da:	4b21      	ldr	r3, [pc, #132]	@ (8028760 <read_conn+0x2fc>)
 80286dc:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 80286e0:	4920      	ldr	r1, [pc, #128]	@ (8028764 <read_conn+0x300>)
 80286e2:	2004      	movs	r0, #4
 80286e4:	f7fd fcd0 	bl	8026088 <mg_log_prefix>
 80286e8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 80286ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80286ee:	4822      	ldr	r0, [pc, #136]	@ (8028778 <read_conn+0x314>)
 80286f0:	f7fb fb78 	bl	8023de4 <mg_log>
 80286f4:	e7a8      	b.n	8028648 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80286f6:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80286fa:	2b01      	cmp	r3, #1
 80286fc:	d11b      	bne.n	8028736 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 80286fe:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028702:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8028706:	2ac0      	cmp	r2, #192	@ 0xc0
 8028708:	f43f aefd 	beq.w	8028506 <read_conn+0xa2>
    } else if (c->is_tls) {
 802870c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8028710:	d01b      	beq.n	802874a <read_conn+0x2e6>
      io = &c->recv;
 8028712:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8028716:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028718:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802871a:	1a5b      	subs	r3, r3, r1
 802871c:	68ea      	ldr	r2, [r5, #12]
 802871e:	4293      	cmp	r3, r2
 8028720:	d204      	bcs.n	802872c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8028722:	4411      	add	r1, r2
 8028724:	4630      	mov	r0, r6
 8028726:	f7fe faeb 	bl	8026d00 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 802872a:	b148      	cbz	r0, 8028740 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 802872c:	4631      	mov	r1, r6
 802872e:	4620      	mov	r0, r4
 8028730:	f7fd fdca 	bl	80262c8 <handle_tls_recv>
 8028734:	e6e7      	b.n	8028506 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8028736:	2101      	movs	r1, #1
 8028738:	4620      	mov	r0, r4
 802873a:	f7ff fa7d 	bl	8027c38 <settmout>
 802873e:	e7de      	b.n	80286fe <read_conn+0x29a>
        mg_error(c, "oom");
 8028740:	490b      	ldr	r1, [pc, #44]	@ (8028770 <read_conn+0x30c>)
 8028742:	4620      	mov	r0, r4
 8028744:	f7fd fd88 	bl	8026258 <mg_error>
 8028748:	e6dd      	b.n	8028506 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802874a:	f105 020c 	add.w	r2, r5, #12
 802874e:	2107      	movs	r1, #7
 8028750:	4620      	mov	r0, r4
 8028752:	f7fa f8fe 	bl	8022952 <mg_call>
}
 8028756:	e6d6      	b.n	8028506 <read_conn+0xa2>
 8028758:	08036a40 	.word	0x08036a40
 802875c:	2000012c 	.word	0x2000012c
 8028760:	0803b314 	.word	0x0803b314
 8028764:	0803aa28 	.word	0x0803aa28
 8028768:	0803afa0 	.word	0x0803afa0
 802876c:	0803afb8 	.word	0x0803afb8
 8028770:	0803ad28 	.word	0x0803ad28
 8028774:	0803afd0 	.word	0x0803afd0
 8028778:	0803afe4 	.word	0x0803afe4

0802877c <accept_conn>:
                                         struct pkt *pkt) {
 802877c:	b570      	push	{r4, r5, r6, lr}
 802877e:	4605      	mov	r5, r0
 8028780:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8028782:	6840      	ldr	r0, [r0, #4]
 8028784:	f7fa fe58 	bl	8023438 <mg_alloc_conn>
  if (c == NULL) {
 8028788:	4604      	mov	r4, r0
 802878a:	2800      	cmp	r0, #0
 802878c:	d058      	beq.n	8028840 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 802878e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8028790:	6898      	ldr	r0, [r3, #8]
 8028792:	f7fd f89f 	bl	80258d4 <mg_ntohl>
 8028796:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 802879a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 802879c:	6858      	ldr	r0, [r3, #4]
 802879e:	f7fd f899 	bl	80258d4 <mg_ntohl>
 80287a2:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80287a6:	6933      	ldr	r3, [r6, #16]
 80287a8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80287ac:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80287b0:	895b      	ldrh	r3, [r3, #10]
 80287b2:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 80287b6:	2100      	movs	r1, #0
 80287b8:	4620      	mov	r0, r4
 80287ba:	f7ff fa3d 	bl	8027c38 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80287be:	69f3      	ldr	r3, [r6, #28]
 80287c0:	68db      	ldr	r3, [r3, #12]
 80287c2:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 80287c4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80287c6:	881b      	ldrh	r3, [r3, #0]
 80287c8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 80287ca:	4b2c      	ldr	r3, [pc, #176]	@ (802887c <accept_conn+0x100>)
 80287cc:	681b      	ldr	r3, [r3, #0]
 80287ce:	2b02      	cmp	r3, #2
 80287d0:	dc45      	bgt.n	802885e <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 80287d2:	686b      	ldr	r3, [r5, #4]
 80287d4:	681b      	ldr	r3, [r3, #0]
 80287d6:	6023      	str	r3, [r4, #0]
 80287d8:	686b      	ldr	r3, [r5, #4]
 80287da:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 80287dc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80287e0:	f043 0304 	orr.w	r3, r3, #4
 80287e4:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 80287e8:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 80287ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80287f0:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 80287f4:	f363 02c3 	bfi	r2, r3, #3, #1
 80287f8:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 80287fc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8028800:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8028804:	f104 0608 	add.w	r6, r4, #8
 8028808:	f105 0c08 	add.w	ip, r5, #8
 802880c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8028810:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8028812:	f8dc 3000 	ldr.w	r3, [ip]
 8028816:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8028818:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 802881c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8028820:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8028822:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8028824:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8028826:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8028828:	2200      	movs	r2, #0
 802882a:	2101      	movs	r1, #1
 802882c:	4620      	mov	r0, r4
 802882e:	f7fa f890 	bl	8022952 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8028832:	2200      	movs	r2, #0
 8028834:	2105      	movs	r1, #5
 8028836:	4620      	mov	r0, r4
 8028838:	f7fa f88b 	bl	8022952 <mg_call>
}
 802883c:	4620      	mov	r0, r4
 802883e:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8028840:	4b0e      	ldr	r3, [pc, #56]	@ (802887c <accept_conn+0x100>)
 8028842:	681b      	ldr	r3, [r3, #0]
 8028844:	2b00      	cmp	r3, #0
 8028846:	ddf9      	ble.n	802883c <accept_conn+0xc0>
 8028848:	4b0d      	ldr	r3, [pc, #52]	@ (8028880 <accept_conn+0x104>)
 802884a:	f241 5268 	movw	r2, #5480	@ 0x1568
 802884e:	490d      	ldr	r1, [pc, #52]	@ (8028884 <accept_conn+0x108>)
 8028850:	2001      	movs	r0, #1
 8028852:	f7fd fc19 	bl	8026088 <mg_log_prefix>
 8028856:	480c      	ldr	r0, [pc, #48]	@ (8028888 <accept_conn+0x10c>)
 8028858:	f7fb fac4 	bl	8023de4 <mg_log>
    return NULL;
 802885c:	e7ee      	b.n	802883c <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 802885e:	4b08      	ldr	r3, [pc, #32]	@ (8028880 <accept_conn+0x104>)
 8028860:	f241 5271 	movw	r2, #5489	@ 0x1571
 8028864:	4907      	ldr	r1, [pc, #28]	@ (8028884 <accept_conn+0x108>)
 8028866:	2003      	movs	r0, #3
 8028868:	f7fd fc0e 	bl	8026088 <mg_log_prefix>
 802886c:	f104 031c 	add.w	r3, r4, #28
 8028870:	4a06      	ldr	r2, [pc, #24]	@ (802888c <accept_conn+0x110>)
 8028872:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028874:	4806      	ldr	r0, [pc, #24]	@ (8028890 <accept_conn+0x114>)
 8028876:	f7fb fab5 	bl	8023de4 <mg_log>
 802887a:	e7aa      	b.n	80287d2 <accept_conn+0x56>
 802887c:	2000012c 	.word	0x2000012c
 8028880:	0803b308 	.word	0x0803b308
 8028884:	0803aa28 	.word	0x0803aa28
 8028888:	0803b050 	.word	0x0803b050
 802888c:	08025f3d 	.word	0x08025f3d
 8028890:	0803aff4 	.word	0x0803aff4

08028894 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028898:	b083      	sub	sp, #12
 802889a:	4606      	mov	r6, r0
 802889c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802889e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 80288a0:	2200      	movs	r2, #0
 80288a2:	4638      	mov	r0, r7
 80288a4:	f7f9 fee9 	bl	802267a <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 80288a8:	4605      	mov	r5, r0
 80288aa:	b380      	cbz	r0, 802890e <rx_tcp+0x7a>
 80288ac:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 80288b0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80288b4:	f013 0f20 	tst.w	r3, #32
 80288b8:	d02b      	beq.n	8028912 <rx_tcp+0x7e>
 80288ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80288bc:	7b5a      	ldrb	r2, [r3, #13]
 80288be:	2a12      	cmp	r2, #18
 80288c0:	d126      	bne.n	8028910 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 80288c2:	6898      	ldr	r0, [r3, #8]
 80288c4:	f7fd f806 	bl	80258d4 <mg_ntohl>
 80288c8:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 80288cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80288ce:	6858      	ldr	r0, [r3, #4]
 80288d0:	f7fd f800 	bl	80258d4 <mg_ntohl>
 80288d4:	3001      	adds	r0, #1
 80288d6:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 80288da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80288dc:	689b      	ldr	r3, [r3, #8]
 80288de:	2700      	movs	r7, #0
 80288e0:	9701      	str	r7, [sp, #4]
 80288e2:	9700      	str	r7, [sp, #0]
 80288e4:	2210      	movs	r2, #16
 80288e6:	4621      	mov	r1, r4
 80288e8:	4630      	mov	r0, r6
 80288ea:	f7ff f975 	bl	8027bd8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 80288ee:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 80288f2:	f367 1345 	bfi	r3, r7, #5, #1
 80288f6:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 80288fa:	4639      	mov	r1, r7
 80288fc:	4628      	mov	r0, r5
 80288fe:	f7ff f99b 	bl	8027c38 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8028902:	463a      	mov	r2, r7
 8028904:	2104      	movs	r1, #4
 8028906:	4628      	mov	r0, r5
 8028908:	f7fa f823 	bl	8022952 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802890c:	e01b      	b.n	8028946 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802890e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8028910:	b385      	cbz	r5, 8028974 <rx_tcp+0xe0>
 8028912:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028916:	f013 0f20 	tst.w	r3, #32
 802891a:	d004      	beq.n	8028926 <rx_tcp+0x92>
 802891c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802891e:	7b5a      	ldrb	r2, [r3, #13]
 8028920:	2a10      	cmp	r2, #16
 8028922:	d113      	bne.n	802894c <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8028924:	b335      	cbz	r5, 8028974 <rx_tcp+0xe0>
 8028926:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028928:	7b5b      	ldrb	r3, [r3, #13]
 802892a:	f013 0f04 	tst.w	r3, #4
 802892e:	d117      	bne.n	8028960 <rx_tcp+0xcc>
  } else if (c != NULL) {
 8028930:	b305      	cbz	r5, 8028974 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8028932:	2300      	movs	r3, #0
 8028934:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8028938:	f898 301e 	ldrb.w	r3, [r8, #30]
 802893c:	b1ab      	cbz	r3, 802896a <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 802893e:	4621      	mov	r1, r4
 8028940:	4628      	mov	r0, r5
 8028942:	f7ff fd8f 	bl	8028464 <read_conn>
}
 8028946:	b003      	add	sp, #12
 8028948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802894c:	689b      	ldr	r3, [r3, #8]
 802894e:	2200      	movs	r2, #0
 8028950:	9201      	str	r2, [sp, #4]
 8028952:	9200      	str	r2, [sp, #0]
 8028954:	2214      	movs	r2, #20
 8028956:	4621      	mov	r1, r4
 8028958:	4630      	mov	r0, r6
 802895a:	f7ff f93d 	bl	8027bd8 <tx_tcp_pkt>
 802895e:	e7f2      	b.n	8028946 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8028960:	4934      	ldr	r1, [pc, #208]	@ (8028a34 <rx_tcp+0x1a0>)
 8028962:	4628      	mov	r0, r5
 8028964:	f7fd fc78 	bl	8026258 <mg_error>
 8028968:	e7ed      	b.n	8028946 <rx_tcp+0xb2>
      settmout(c,
 802896a:	2100      	movs	r1, #0
 802896c:	4628      	mov	r0, r5
 802896e:	f7ff f963 	bl	8027c38 <settmout>
 8028972:	e7e4      	b.n	802893e <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8028974:	2201      	movs	r2, #1
 8028976:	4621      	mov	r1, r4
 8028978:	4638      	mov	r0, r7
 802897a:	f7f9 fe7e 	bl	802267a <getpeer>
 802897e:	4607      	mov	r7, r0
 8028980:	b168      	cbz	r0, 802899e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 8028982:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8028984:	7b6b      	ldrb	r3, [r5, #13]
 8028986:	f013 0f04 	tst.w	r3, #4
 802898a:	d013      	beq.n	80289b4 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 802898c:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028990:	f013 0f04 	tst.w	r3, #4
 8028994:	d0d7      	beq.n	8028946 <rx_tcp+0xb2>
 8028996:	4927      	ldr	r1, [pc, #156]	@ (8028a34 <rx_tcp+0x1a0>)
 8028998:	f7fd fc5e 	bl	8026258 <mg_error>
 802899c:	e7d3      	b.n	8028946 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802899e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80289a0:	689b      	ldr	r3, [r3, #8]
 80289a2:	2200      	movs	r2, #0
 80289a4:	9201      	str	r2, [sp, #4]
 80289a6:	9200      	str	r2, [sp, #0]
 80289a8:	2214      	movs	r2, #20
 80289aa:	4621      	mov	r1, r4
 80289ac:	4630      	mov	r0, r6
 80289ae:	f7ff f913 	bl	8027bd8 <tx_tcp_pkt>
 80289b2:	e7c8      	b.n	8028946 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 80289b4:	f013 0f02 	tst.w	r3, #2
 80289b8:	d11d      	bne.n	80289f6 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 80289ba:	f013 0f01 	tst.w	r3, #1
 80289be:	d129      	bne.n	8028a14 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 80289c0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80289c4:	4648      	mov	r0, r9
 80289c6:	f7fc ff85 	bl	80258d4 <mg_ntohl>
 80289ca:	4680      	mov	r8, r0
 80289cc:	8828      	ldrh	r0, [r5, #0]
 80289ce:	f7fd f819 	bl	8025a04 <mg_ntohs>
 80289d2:	1c43      	adds	r3, r0, #1
 80289d4:	4598      	cmp	r8, r3
 80289d6:	d027      	beq.n	8028a28 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 80289d8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80289dc:	f013 0f04 	tst.w	r3, #4
 80289e0:	d1b1      	bne.n	8028946 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80289e2:	2300      	movs	r3, #0
 80289e4:	9301      	str	r3, [sp, #4]
 80289e6:	9300      	str	r3, [sp, #0]
 80289e8:	464b      	mov	r3, r9
 80289ea:	2214      	movs	r2, #20
 80289ec:	4621      	mov	r1, r4
 80289ee:	4630      	mov	r0, r6
 80289f0:	f7ff f8f2 	bl	8027bd8 <tx_tcp_pkt>
}
 80289f4:	e7a7      	b.n	8028946 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 80289f6:	8828      	ldrh	r0, [r5, #0]
 80289f8:	f7fd f804 	bl	8025a04 <mg_ntohs>
 80289fc:	f7fc ff6a 	bl	80258d4 <mg_ntohl>
 8028a00:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8028a02:	2200      	movs	r2, #0
 8028a04:	9201      	str	r2, [sp, #4]
 8028a06:	9200      	str	r2, [sp, #0]
 8028a08:	2212      	movs	r2, #18
 8028a0a:	4621      	mov	r1, r4
 8028a0c:	4630      	mov	r0, r6
 8028a0e:	f7ff f8e3 	bl	8027bd8 <tx_tcp_pkt>
 8028a12:	e798      	b.n	8028946 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028a14:	68ab      	ldr	r3, [r5, #8]
 8028a16:	2200      	movs	r2, #0
 8028a18:	9201      	str	r2, [sp, #4]
 8028a1a:	9200      	str	r2, [sp, #0]
 8028a1c:	2211      	movs	r2, #17
 8028a1e:	4621      	mov	r1, r4
 8028a20:	4630      	mov	r0, r6
 8028a22:	f7ff f8d9 	bl	8027bd8 <tx_tcp_pkt>
 8028a26:	e78e      	b.n	8028946 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8028a28:	4621      	mov	r1, r4
 8028a2a:	4638      	mov	r0, r7
 8028a2c:	f7ff fea6 	bl	802877c <accept_conn>
 8028a30:	e789      	b.n	8028946 <rx_tcp+0xb2>
 8028a32:	bf00      	nop
 8028a34:	0803b004 	.word	0x0803b004

08028a38 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 8028a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a3c:	b082      	sub	sp, #8
 8028a3e:	4604      	mov	r4, r0
 8028a40:	4688      	mov	r8, r1
 8028a42:	4617      	mov	r7, r2
 8028a44:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 8028a46:	6819      	ldr	r1, [r3, #0]
 8028a48:	2900      	cmp	r1, #0
 8028a4a:	d037      	beq.n	8028abc <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 8028a4c:	685b      	ldr	r3, [r3, #4]
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	d038      	beq.n	8028ac4 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 8028a52:	686b      	ldr	r3, [r5, #4]
 8028a54:	2b00      	cmp	r3, #0
 8028a56:	d040      	beq.n	8028ada <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8028a58:	2118      	movs	r1, #24
 8028a5a:	2001      	movs	r0, #1
 8028a5c:	f7f9 fde8 	bl	8022630 <mg_calloc>
 8028a60:	4606      	mov	r6, r0
 8028a62:	2800      	cmp	r0, #0
 8028a64:	d03e      	beq.n	8028ae4 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8028a66:	6863      	ldr	r3, [r4, #4]
 8028a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028a6a:	2b00      	cmp	r3, #0
 8028a6c:	d03f      	beq.n	8028aee <mg_sendnsreq+0xb6>
 8028a6e:	8a1b      	ldrh	r3, [r3, #16]
 8028a70:	3301      	adds	r3, #1
 8028a72:	b29b      	uxth	r3, r3
 8028a74:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8028a76:	6863      	ldr	r3, [r4, #4]
 8028a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028a7a:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 8028a7c:	6863      	ldr	r3, [r4, #4]
 8028a7e:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8028a80:	f7fd fafc 	bl	802607c <mg_millis>
 8028a84:	19c0      	adds	r0, r0, r7
 8028a86:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 8028a8a:	60b0      	str	r0, [r6, #8]
 8028a8c:	60f1      	str	r1, [r6, #12]
    d->c = c;
 8028a8e:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8028a90:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028a94:	f043 0308 	orr.w	r3, r3, #8
 8028a98:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028a9c:	4b21      	ldr	r3, [pc, #132]	@ (8028b24 <mg_sendnsreq+0xec>)
 8028a9e:	681b      	ldr	r3, [r3, #0]
 8028aa0:	2b03      	cmp	r3, #3
 8028aa2:	dc26      	bgt.n	8028af2 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8028aa4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028aa8:	8a32      	ldrh	r2, [r6, #16]
 8028aaa:	4641      	mov	r1, r8
 8028aac:	6868      	ldr	r0, [r5, #4]
 8028aae:	f7fe fbd5 	bl	802725c <mg_dns_send>
 8028ab2:	2800      	cmp	r0, #0
 8028ab4:	d031      	beq.n	8028b1a <mg_sendnsreq+0xe2>
}
 8028ab6:	b002      	add	sp, #8
 8028ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8028abc:	491a      	ldr	r1, [pc, #104]	@ (8028b28 <mg_sendnsreq+0xf0>)
 8028abe:	f7fd fbcb 	bl	8026258 <mg_error>
 8028ac2:	e7c6      	b.n	8028a52 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8028ac4:	461a      	mov	r2, r3
 8028ac6:	6840      	ldr	r0, [r0, #4]
 8028ac8:	f000 f866 	bl	8028b98 <mg_connect>
 8028acc:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 8028ace:	2800      	cmp	r0, #0
 8028ad0:	d0bf      	beq.n	8028a52 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8028ad2:	4b16      	ldr	r3, [pc, #88]	@ (8028b2c <mg_sendnsreq+0xf4>)
 8028ad4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8028ad8:	e7bb      	b.n	8028a52 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 8028ada:	4915      	ldr	r1, [pc, #84]	@ (8028b30 <mg_sendnsreq+0xf8>)
 8028adc:	4620      	mov	r0, r4
 8028ade:	f7fd fbbb 	bl	8026258 <mg_error>
 8028ae2:	e7e8      	b.n	8028ab6 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8028ae4:	4913      	ldr	r1, [pc, #76]	@ (8028b34 <mg_sendnsreq+0xfc>)
 8028ae6:	4620      	mov	r0, r4
 8028ae8:	f7fd fbb6 	bl	8026258 <mg_error>
 8028aec:	e7e3      	b.n	8028ab6 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8028aee:	2301      	movs	r3, #1
 8028af0:	e7c0      	b.n	8028a74 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028af2:	4b11      	ldr	r3, [pc, #68]	@ (8028b38 <mg_sendnsreq+0x100>)
 8028af4:	f240 521e 	movw	r2, #1310	@ 0x51e
 8028af8:	4910      	ldr	r1, [pc, #64]	@ (8028b3c <mg_sendnsreq+0x104>)
 8028afa:	2004      	movs	r0, #4
 8028afc:	f7fd fac4 	bl	8026088 <mg_log_prefix>
 8028b00:	8a33      	ldrh	r3, [r6, #16]
 8028b02:	9301      	str	r3, [sp, #4]
 8028b04:	682b      	ldr	r3, [r5, #0]
 8028b06:	9300      	str	r3, [sp, #0]
 8028b08:	f8d8 3000 	ldr.w	r3, [r8]
 8028b0c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8028b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028b12:	480b      	ldr	r0, [pc, #44]	@ (8028b40 <mg_sendnsreq+0x108>)
 8028b14:	f7fb f966 	bl	8023de4 <mg_log>
 8028b18:	e7c4      	b.n	8028aa4 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 8028b1a:	490a      	ldr	r1, [pc, #40]	@ (8028b44 <mg_sendnsreq+0x10c>)
 8028b1c:	6868      	ldr	r0, [r5, #4]
 8028b1e:	f7fd fb9b 	bl	8026258 <mg_error>
}
 8028b22:	e7c8      	b.n	8028ab6 <mg_sendnsreq+0x7e>
 8028b24:	2000012c 	.word	0x2000012c
 8028b28:	0803b010 	.word	0x0803b010
 8028b2c:	08027fd5 	.word	0x08027fd5
 8028b30:	0803b03c 	.word	0x0803b03c
 8028b34:	0803b048 	.word	0x0803b048
 8028b38:	0803b490 	.word	0x0803b490
 8028b3c:	0803aa28 	.word	0x0803aa28
 8028b40:	0803b054 	.word	0x0803b054
 8028b44:	0803b078 	.word	0x0803b078

08028b48 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 8028b48:	b570      	push	{r4, r5, r6, lr}
 8028b4a:	b084      	sub	sp, #16
 8028b4c:	4604      	mov	r4, r0
 8028b4e:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 8028b50:	ad02      	add	r5, sp, #8
 8028b52:	4628      	mov	r0, r5
 8028b54:	f7fc fde8 	bl	8025728 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8028b58:	4630      	mov	r0, r6
 8028b5a:	f7fc fe03 	bl	8025764 <mg_url_port>
 8028b5e:	f7fc ff51 	bl	8025a04 <mg_ntohs>
 8028b62:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8028b64:	f104 021c 	add.w	r2, r4, #28
 8028b68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028b6c:	f7fc fee6 	bl	802593c <mg_aton>
 8028b70:	b960      	cbnz	r0, 8028b8c <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028b72:	6862      	ldr	r2, [r4, #4]
 8028b74:	7e11      	ldrb	r1, [r2, #24]
 8028b76:	b169      	cbz	r1, 8028b94 <mg_resolve+0x4c>
 8028b78:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8028b7c:	6952      	ldr	r2, [r2, #20]
 8028b7e:	9100      	str	r1, [sp, #0]
 8028b80:	a902      	add	r1, sp, #8
 8028b82:	4620      	mov	r0, r4
 8028b84:	f7ff ff58 	bl	8028a38 <mg_sendnsreq>
}
 8028b88:	b004      	add	sp, #16
 8028b8a:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 8028b8c:	4620      	mov	r0, r4
 8028b8e:	f7ff f951 	bl	8027e34 <mg_connect_resolved>
 8028b92:	e7f9      	b.n	8028b88 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028b94:	1d13      	adds	r3, r2, #4
 8028b96:	e7f1      	b.n	8028b7c <mg_resolve+0x34>

08028b98 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8028b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 8028b9c:	b129      	cbz	r1, 8028baa <mg_connect+0x12>
 8028b9e:	4680      	mov	r8, r0
 8028ba0:	4617      	mov	r7, r2
 8028ba2:	461e      	mov	r6, r3
 8028ba4:	460d      	mov	r5, r1
 8028ba6:	780b      	ldrb	r3, [r1, #0]
 8028ba8:	b99b      	cbnz	r3, 8028bd2 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 8028baa:	4b30      	ldr	r3, [pc, #192]	@ (8028c6c <mg_connect+0xd4>)
 8028bac:	681b      	ldr	r3, [r3, #0]
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	dc03      	bgt.n	8028bba <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8028bb2:	2400      	movs	r4, #0
}
 8028bb4:	4620      	mov	r0, r4
 8028bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 8028bba:	4b2d      	ldr	r3, [pc, #180]	@ (8028c70 <mg_connect+0xd8>)
 8028bbc:	f241 22be 	movw	r2, #4798	@ 0x12be
 8028bc0:	492c      	ldr	r1, [pc, #176]	@ (8028c74 <mg_connect+0xdc>)
 8028bc2:	2001      	movs	r0, #1
 8028bc4:	f7fd fa60 	bl	8026088 <mg_log_prefix>
 8028bc8:	482b      	ldr	r0, [pc, #172]	@ (8028c78 <mg_connect+0xe0>)
 8028bca:	f7fb f90b 	bl	8023de4 <mg_log>
  struct mg_connection *c = NULL;
 8028bce:	2400      	movs	r4, #0
 8028bd0:	e7f0      	b.n	8028bb4 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8028bd2:	f7fa fc31 	bl	8023438 <mg_alloc_conn>
 8028bd6:	4604      	mov	r4, r0
 8028bd8:	b358      	cbz	r0, 8028c32 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8028bda:	f8d8 3000 	ldr.w	r3, [r8]
 8028bde:	6003      	str	r3, [r0, #0]
 8028be0:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8028be4:	2204      	movs	r2, #4
 8028be6:	4925      	ldr	r1, [pc, #148]	@ (8028c7c <mg_connect+0xe4>)
 8028be8:	4628      	mov	r0, r5
 8028bea:	f003 fe7e 	bl	802c8ea <strncmp>
 8028bee:	fab0 f080 	clz	r0, r0
 8028bf2:	0940      	lsrs	r0, r0, #5
 8028bf4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028bf8:	f360 0300 	bfi	r3, r0, #0, #1
 8028bfc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8028c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028c04:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8028c06:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8028c08:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028c0c:	f043 0302 	orr.w	r3, r3, #2
 8028c10:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8028c14:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028c16:	4b15      	ldr	r3, [pc, #84]	@ (8028c6c <mg_connect+0xd4>)
 8028c18:	681b      	ldr	r3, [r3, #0]
 8028c1a:	2b02      	cmp	r3, #2
 8028c1c:	dc18      	bgt.n	8028c50 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 8028c1e:	462a      	mov	r2, r5
 8028c20:	2101      	movs	r1, #1
 8028c22:	4620      	mov	r0, r4
 8028c24:	f7f9 fe95 	bl	8022952 <mg_call>
    mg_resolve(c, url);
 8028c28:	4629      	mov	r1, r5
 8028c2a:	4620      	mov	r0, r4
 8028c2c:	f7ff ff8c 	bl	8028b48 <mg_resolve>
 8028c30:	e7c0      	b.n	8028bb4 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 8028c32:	4b0e      	ldr	r3, [pc, #56]	@ (8028c6c <mg_connect+0xd4>)
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	ddbc      	ble.n	8028bb4 <mg_connect+0x1c>
 8028c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8028c70 <mg_connect+0xd8>)
 8028c3c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8028c40:	490c      	ldr	r1, [pc, #48]	@ (8028c74 <mg_connect+0xdc>)
 8028c42:	2001      	movs	r0, #1
 8028c44:	f7fd fa20 	bl	8026088 <mg_log_prefix>
 8028c48:	480d      	ldr	r0, [pc, #52]	@ (8028c80 <mg_connect+0xe8>)
 8028c4a:	f7fb f8cb 	bl	8023de4 <mg_log>
 8028c4e:	e7b1      	b.n	8028bb4 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028c50:	4b07      	ldr	r3, [pc, #28]	@ (8028c70 <mg_connect+0xd8>)
 8028c52:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 8028c56:	4907      	ldr	r1, [pc, #28]	@ (8028c74 <mg_connect+0xdc>)
 8028c58:	2003      	movs	r0, #3
 8028c5a:	f7fd fa15 	bl	8026088 <mg_log_prefix>
 8028c5e:	462b      	mov	r3, r5
 8028c60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8028c62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028c64:	4807      	ldr	r0, [pc, #28]	@ (8028c84 <mg_connect+0xec>)
 8028c66:	f7fb f8bd 	bl	8023de4 <mg_log>
 8028c6a:	e7d8      	b.n	8028c1e <mg_connect+0x86>
 8028c6c:	2000012c 	.word	0x2000012c
 8028c70:	0803b404 	.word	0x0803b404
 8028c74:	0803aa28 	.word	0x0803aa28
 8028c78:	0803b084 	.word	0x0803b084
 8028c7c:	0803ad5c 	.word	0x0803ad5c
 8028c80:	0803b050 	.word	0x0803b050
 8028c84:	0803aa84 	.word	0x0803aa84

08028c88 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 8028c88:	b530      	push	{r4, r5, lr}
 8028c8a:	b091      	sub	sp, #68	@ 0x44
 8028c8c:	4614      	mov	r4, r2
 8028c8e:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8028c90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028c92:	f7ff ff81 	bl	8028b98 <mg_connect>
  if (c != NULL) {
 8028c96:	4605      	mov	r5, r0
 8028c98:	b160      	cbz	r0, 8028cb4 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 8028c9a:	2240      	movs	r2, #64	@ 0x40
 8028c9c:	2100      	movs	r1, #0
 8028c9e:	4668      	mov	r0, sp
 8028ca0:	f003 fdee 	bl	802c880 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028ca4:	b14c      	cbz	r4, 8028cba <mg_mqtt_connect+0x32>
 8028ca6:	4621      	mov	r1, r4
 8028ca8:	4628      	mov	r0, r5
 8028caa:	f7fe fbfd 	bl	80274a8 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8028cae:	4b04      	ldr	r3, [pc, #16]	@ (8028cc0 <mg_mqtt_connect+0x38>)
 8028cb0:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8028cb4:	4628      	mov	r0, r5
 8028cb6:	b011      	add	sp, #68	@ 0x44
 8028cb8:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028cba:	466c      	mov	r4, sp
 8028cbc:	e7f3      	b.n	8028ca6 <mg_mqtt_connect+0x1e>
 8028cbe:	bf00      	nop
 8028cc0:	08027881 	.word	0x08027881

08028cc4 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8028cc4:	b538      	push	{r3, r4, r5, lr}
 8028cc6:	4605      	mov	r5, r0
 8028cc8:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8028cca:	680b      	ldr	r3, [r1, #0]
 8028ccc:	b90b      	cbnz	r3, 8028cd2 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8028cce:	888b      	ldrh	r3, [r1, #4]
 8028cd0:	b1a3      	cbz	r3, 8028cfc <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8028cd2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028cd4:	681b      	ldr	r3, [r3, #0]
 8028cd6:	b34b      	cbz	r3, 8028d2c <mg_tcpip_init+0x68>
 8028cd8:	4620      	mov	r0, r4
 8028cda:	4798      	blx	r3
 8028cdc:	bb30      	cbnz	r0, 8028d2c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 8028cde:	4b3b      	ldr	r3, [pc, #236]	@ (8028dcc <mg_tcpip_init+0x108>)
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	2b00      	cmp	r3, #0
 8028ce4:	dd5f      	ble.n	8028da6 <mg_tcpip_init+0xe2>
 8028ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8028dd0 <mg_tcpip_init+0x10c>)
 8028ce8:	f241 7223 	movw	r2, #5923	@ 0x1723
 8028cec:	4939      	ldr	r1, [pc, #228]	@ (8028dd4 <mg_tcpip_init+0x110>)
 8028cee:	2001      	movs	r0, #1
 8028cf0:	f7fd f9ca 	bl	8026088 <mg_log_prefix>
 8028cf4:	4838      	ldr	r0, [pc, #224]	@ (8028dd8 <mg_tcpip_init+0x114>)
 8028cf6:	f7fb f875 	bl	8023de4 <mg_log>
 8028cfa:	e054      	b.n	8028da6 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8028cfc:	4608      	mov	r0, r1
 8028cfe:	2302      	movs	r3, #2
 8028d00:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8028d04:	2105      	movs	r1, #5
 8028d06:	f7fc fdaa 	bl	802585e <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8028d0a:	4b30      	ldr	r3, [pc, #192]	@ (8028dcc <mg_tcpip_init+0x108>)
 8028d0c:	681b      	ldr	r3, [r3, #0]
 8028d0e:	2b01      	cmp	r3, #1
 8028d10:	dddf      	ble.n	8028cd2 <mg_tcpip_init+0xe>
 8028d12:	4b2f      	ldr	r3, [pc, #188]	@ (8028dd0 <mg_tcpip_init+0x10c>)
 8028d14:	f241 721f 	movw	r2, #5919	@ 0x171f
 8028d18:	492e      	ldr	r1, [pc, #184]	@ (8028dd4 <mg_tcpip_init+0x110>)
 8028d1a:	2002      	movs	r0, #2
 8028d1c:	f7fd f9b4 	bl	8026088 <mg_log_prefix>
 8028d20:	4622      	mov	r2, r4
 8028d22:	492e      	ldr	r1, [pc, #184]	@ (8028ddc <mg_tcpip_init+0x118>)
 8028d24:	482e      	ldr	r0, [pc, #184]	@ (8028de0 <mg_tcpip_init+0x11c>)
 8028d26:	f7fb f85d 	bl	8023de4 <mg_log>
 8028d2a:	e7d2      	b.n	8028cd2 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8028d2c:	f240 6104 	movw	r1, #1540	@ 0x604
 8028d30:	2001      	movs	r0, #1
 8028d32:	f7f9 fc7d 	bl	8022630 <mg_calloc>
 8028d36:	6160      	str	r0, [r4, #20]
 8028d38:	f240 6304 	movw	r3, #1540	@ 0x604
 8028d3c:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 8028d3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8028d40:	b92b      	cbnz	r3, 8028d4e <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028d42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028d44:	689b      	ldr	r3, [r3, #8]
 8028d46:	b37b      	cbz	r3, 8028da8 <mg_tcpip_init+0xe4>
 8028d48:	f240 6304 	movw	r3, #1540	@ 0x604
 8028d4c:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8028d4e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8028d50:	2001      	movs	r0, #1
 8028d52:	f7f9 fc6d 	bl	8022630 <mg_calloc>
 8028d56:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8028d58:	f7fd f990 	bl	802607c <mg_millis>
 8028d5c:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 8028d60:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 8028d62:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8028d64:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8028d68:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 8028d6c:	2330      	movs	r3, #48	@ 0x30
 8028d6e:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8028d70:	68a3      	ldr	r3, [r4, #8]
 8028d72:	b90b      	cbnz	r3, 8028d78 <mg_tcpip_init+0xb4>
 8028d74:	2301      	movs	r3, #1
 8028d76:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 8028d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028d7c:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8028d80:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8028d84:	2102      	movs	r1, #2
 8028d86:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8028d8a:	f7fc fd68 	bl	802585e <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8028d8e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8028d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8028d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8028d9a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8028d9e:	6963      	ldr	r3, [r4, #20]
 8028da0:	b12b      	cbz	r3, 8028dae <mg_tcpip_init+0xea>
 8028da2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028da4:	b11b      	cbz	r3, 8028dae <mg_tcpip_init+0xea>
}
 8028da6:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028da8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8028dac:	e7ce      	b.n	8028d4c <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8028dae:	4b07      	ldr	r3, [pc, #28]	@ (8028dcc <mg_tcpip_init+0x108>)
 8028db0:	681b      	ldr	r3, [r3, #0]
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	ddf7      	ble.n	8028da6 <mg_tcpip_init+0xe2>
 8028db6:	4b06      	ldr	r3, [pc, #24]	@ (8028dd0 <mg_tcpip_init+0x10c>)
 8028db8:	f241 7234 	movw	r2, #5940	@ 0x1734
 8028dbc:	4905      	ldr	r1, [pc, #20]	@ (8028dd4 <mg_tcpip_init+0x110>)
 8028dbe:	2001      	movs	r0, #1
 8028dc0:	f7fd f962 	bl	8026088 <mg_log_prefix>
 8028dc4:	4807      	ldr	r0, [pc, #28]	@ (8028de4 <mg_tcpip_init+0x120>)
 8028dc6:	f7fb f80d 	bl	8023de4 <mg_log>
}
 8028dca:	e7ec      	b.n	8028da6 <mg_tcpip_init+0xe2>
 8028dcc:	2000012c 	.word	0x2000012c
 8028dd0:	0803b3c8 	.word	0x0803b3c8
 8028dd4:	0803aa28 	.word	0x0803aa28
 8028dd8:	0803b0b4 	.word	0x0803b0b4
 8028ddc:	08023db5 	.word	0x08023db5
 8028de0:	0803b090 	.word	0x0803b090
 8028de4:	0803b050 	.word	0x0803b050

08028de8 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8028de8:	b510      	push	{r4, lr}
 8028dea:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8028dec:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8028df0:	2b03      	cmp	r3, #3
 8028df2:	d011      	beq.n	8028e18 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8028df4:	2b01      	cmp	r3, #1
 8028df6:	d04f      	beq.n	8028e98 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8028df8:	b9f3      	cbnz	r3, 8028e38 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 8028dfa:	4b31      	ldr	r3, [pc, #196]	@ (8028ec0 <onstatechange+0xd8>)
 8028dfc:	681b      	ldr	r3, [r3, #0]
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	dd1a      	ble.n	8028e38 <onstatechange+0x50>
 8028e02:	4b30      	ldr	r3, [pc, #192]	@ (8028ec4 <onstatechange+0xdc>)
 8028e04:	f241 4209 	movw	r2, #5129	@ 0x1409
 8028e08:	492f      	ldr	r1, [pc, #188]	@ (8028ec8 <onstatechange+0xe0>)
 8028e0a:	2001      	movs	r0, #1
 8028e0c:	f7fd f93c 	bl	8026088 <mg_log_prefix>
 8028e10:	482e      	ldr	r0, [pc, #184]	@ (8028ecc <onstatechange+0xe4>)
 8028e12:	f7fa ffe7 	bl	8023de4 <mg_log>
 8028e16:	e00f      	b.n	8028e38 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028e18:	4b29      	ldr	r3, [pc, #164]	@ (8028ec0 <onstatechange+0xd8>)
 8028e1a:	681b      	ldr	r3, [r3, #0]
 8028e1c:	2b01      	cmp	r3, #1
 8028e1e:	dc12      	bgt.n	8028e46 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028e20:	4b27      	ldr	r3, [pc, #156]	@ (8028ec0 <onstatechange+0xd8>)
 8028e22:	681b      	ldr	r3, [r3, #0]
 8028e24:	2b01      	cmp	r3, #1
 8028e26:	dc1c      	bgt.n	8028e62 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028e28:	4b25      	ldr	r3, [pc, #148]	@ (8028ec0 <onstatechange+0xd8>)
 8028e2a:	681b      	ldr	r3, [r3, #0]
 8028e2c:	2b01      	cmp	r3, #1
 8028e2e:	dc26      	bgt.n	8028e7e <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 8028e30:	6921      	ldr	r1, [r4, #16]
 8028e32:	4620      	mov	r0, r4
 8028e34:	f7fc fee3 	bl	8025bfe <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8028e38:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 8028e3c:	2100      	movs	r1, #0
 8028e3e:	4620      	mov	r0, r4
 8028e40:	f7f8 f923 	bl	802108a <mg_tcpip_call>
}
 8028e44:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028e46:	4b1f      	ldr	r3, [pc, #124]	@ (8028ec4 <onstatechange+0xdc>)
 8028e48:	f241 4201 	movw	r2, #5121	@ 0x1401
 8028e4c:	491e      	ldr	r1, [pc, #120]	@ (8028ec8 <onstatechange+0xe0>)
 8028e4e:	2002      	movs	r0, #2
 8028e50:	f7fd f91a 	bl	8026088 <mg_log_prefix>
 8028e54:	f104 0208 	add.w	r2, r4, #8
 8028e58:	491d      	ldr	r1, [pc, #116]	@ (8028ed0 <onstatechange+0xe8>)
 8028e5a:	481e      	ldr	r0, [pc, #120]	@ (8028ed4 <onstatechange+0xec>)
 8028e5c:	f7fa ffc2 	bl	8023de4 <mg_log>
 8028e60:	e7de      	b.n	8028e20 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028e62:	4b18      	ldr	r3, [pc, #96]	@ (8028ec4 <onstatechange+0xdc>)
 8028e64:	f241 4202 	movw	r2, #5122	@ 0x1402
 8028e68:	4917      	ldr	r1, [pc, #92]	@ (8028ec8 <onstatechange+0xe0>)
 8028e6a:	2002      	movs	r0, #2
 8028e6c:	f7fd f90c 	bl	8026088 <mg_log_prefix>
 8028e70:	f104 0210 	add.w	r2, r4, #16
 8028e74:	4916      	ldr	r1, [pc, #88]	@ (8028ed0 <onstatechange+0xe8>)
 8028e76:	4818      	ldr	r0, [pc, #96]	@ (8028ed8 <onstatechange+0xf0>)
 8028e78:	f7fa ffb4 	bl	8023de4 <mg_log>
 8028e7c:	e7d4      	b.n	8028e28 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028e7e:	4b11      	ldr	r3, [pc, #68]	@ (8028ec4 <onstatechange+0xdc>)
 8028e80:	f241 4203 	movw	r2, #5123	@ 0x1403
 8028e84:	4910      	ldr	r1, [pc, #64]	@ (8028ec8 <onstatechange+0xe0>)
 8028e86:	2002      	movs	r0, #2
 8028e88:	f7fd f8fe 	bl	8026088 <mg_log_prefix>
 8028e8c:	4622      	mov	r2, r4
 8028e8e:	4913      	ldr	r1, [pc, #76]	@ (8028edc <onstatechange+0xf4>)
 8028e90:	4813      	ldr	r0, [pc, #76]	@ (8028ee0 <onstatechange+0xf8>)
 8028e92:	f7fa ffa7 	bl	8023de4 <mg_log>
 8028e96:	e7cb      	b.n	8028e30 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8028e98:	4b09      	ldr	r3, [pc, #36]	@ (8028ec0 <onstatechange+0xd8>)
 8028e9a:	681b      	ldr	r3, [r3, #0]
 8028e9c:	2b00      	cmp	r3, #0
 8028e9e:	dc04      	bgt.n	8028eaa <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8028ea0:	f7fd f8ec 	bl	802607c <mg_millis>
 8028ea4:	f002 ff9c 	bl	802bde0 <srand>
 8028ea8:	e7c6      	b.n	8028e38 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 8028eaa:	4b06      	ldr	r3, [pc, #24]	@ (8028ec4 <onstatechange+0xdc>)
 8028eac:	f241 4206 	movw	r2, #5126	@ 0x1406
 8028eb0:	4905      	ldr	r1, [pc, #20]	@ (8028ec8 <onstatechange+0xe0>)
 8028eb2:	2001      	movs	r0, #1
 8028eb4:	f7fd f8e8 	bl	8026088 <mg_log_prefix>
 8028eb8:	480a      	ldr	r0, [pc, #40]	@ (8028ee4 <onstatechange+0xfc>)
 8028eba:	f7fa ff93 	bl	8023de4 <mg_log>
 8028ebe:	e7ef      	b.n	8028ea0 <onstatechange+0xb8>
 8028ec0:	2000012c 	.word	0x2000012c
 8028ec4:	0803b374 	.word	0x0803b374
 8028ec8:	0803aa28 	.word	0x0803aa28
 8028ecc:	0803b100 	.word	0x0803b100
 8028ed0:	08023da5 	.word	0x08023da5
 8028ed4:	0803b0c8 	.word	0x0803b0c8
 8028ed8:	0803b0d8 	.word	0x0803b0d8
 8028edc:	08023db5 	.word	0x08023db5
 8028ee0:	0803b0e8 	.word	0x0803b0e8
 8028ee4:	0803b0f8 	.word	0x0803b0f8

08028ee8 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028eec:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8028eee:	2300      	movs	r3, #0
 8028ef0:	9305      	str	r3, [sp, #20]
 8028ef2:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8028ef4:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8028ef8:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8028efc:	680e      	ldr	r6, [r1, #0]
 8028efe:	684b      	ldr	r3, [r1, #4]
 8028f00:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8028f02:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8028f06:	42b3      	cmp	r3, r6
 8028f08:	d87b      	bhi.n	8029002 <rx_dhcp_client+0x11a>
 8028f0a:	4605      	mov	r5, r0
 8028f0c:	460f      	mov	r7, r1
 8028f0e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8028f12:	2204      	movs	r2, #4
 8028f14:	1c81      	adds	r1, r0, #2
 8028f16:	eb08 0002 	add.w	r0, r8, r2
 8028f1a:	f003 fc1d 	bl	802c758 <memcmp>
 8028f1e:	2800      	cmp	r0, #0
 8028f20:	d16f      	bne.n	8029002 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8028f22:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8028f26:	4648      	mov	r0, r9
 8028f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8028f2c:	f8cd 9000 	str.w	r9, [sp]
 8028f30:	46cb      	mov	fp, r9
 8028f32:	e026      	b.n	8028f82 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8028f34:	7862      	ldrb	r2, [r4, #1]
 8028f36:	2a04      	cmp	r2, #4
 8028f38:	d12b      	bne.n	8028f92 <rx_dhcp_client+0xaa>
 8028f3a:	1da2      	adds	r2, r4, #6
 8028f3c:	42b2      	cmp	r2, r6
 8028f3e:	d228      	bcs.n	8028f92 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 8028f40:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8028f44:	9301      	str	r3, [sp, #4]
 8028f46:	e019      	b.n	8028f7c <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8028f48:	7862      	ldrb	r2, [r4, #1]
 8028f4a:	2a04      	cmp	r2, #4
 8028f4c:	d123      	bne.n	8028f96 <rx_dhcp_client+0xae>
 8028f4e:	1da2      	adds	r2, r4, #6
 8028f50:	42b2      	cmp	r2, r6
 8028f52:	d220      	bcs.n	8028f96 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 8028f54:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 8028f58:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8028f5c:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 8028f5e:	e00d      	b.n	8028f7c <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028f60:	7862      	ldrb	r2, [r4, #1]
 8028f62:	2a04      	cmp	r2, #4
 8028f64:	d11b      	bne.n	8028f9e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 8028f66:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028f68:	42b2      	cmp	r2, r6
 8028f6a:	d218      	bcs.n	8028f9e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 8028f6c:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8028f70:	9305      	str	r3, [sp, #20]
 8028f72:	e003      	b.n	8028f7c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8028f74:	2b33      	cmp	r3, #51	@ 0x33
 8028f76:	d022      	beq.n	8028fbe <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8028f78:	2b35      	cmp	r3, #53	@ 0x35
 8028f7a:	d02b      	beq.n	8028fd4 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 8028f7c:	7863      	ldrb	r3, [r4, #1]
 8028f7e:	3302      	adds	r3, #2
 8028f80:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8028f82:	1c63      	adds	r3, r4, #1
 8028f84:	42b3      	cmp	r3, r6
 8028f86:	d22e      	bcs.n	8028fe6 <rx_dhcp_client+0xfe>
 8028f88:	7823      	ldrb	r3, [r4, #0]
 8028f8a:	2bff      	cmp	r3, #255	@ 0xff
 8028f8c:	d02b      	beq.n	8028fe6 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8028f8e:	2b01      	cmp	r3, #1
 8028f90:	d0d0      	beq.n	8028f34 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8028f92:	2b03      	cmp	r3, #3
 8028f94:	d0d8      	beq.n	8028f48 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028f96:	7fea      	ldrb	r2, [r5, #31]
 8028f98:	b10a      	cbz	r2, 8028f9e <rx_dhcp_client+0xb6>
 8028f9a:	2b06      	cmp	r3, #6
 8028f9c:	d0e0      	beq.n	8028f60 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8028f9e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8028fa2:	2a00      	cmp	r2, #0
 8028fa4:	d0e6      	beq.n	8028f74 <rx_dhcp_client+0x8c>
 8028fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8028fa8:	d1e4      	bne.n	8028f74 <rx_dhcp_client+0x8c>
 8028faa:	7862      	ldrb	r2, [r4, #1]
 8028fac:	2a04      	cmp	r2, #4
 8028fae:	d1e1      	bne.n	8028f74 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8028fb0:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8028fb2:	42b2      	cmp	r2, r6
 8028fb4:	d2de      	bcs.n	8028f74 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8028fb6:	f8d4 3002 	ldr.w	r3, [r4, #2]
 8028fba:	9304      	str	r3, [sp, #16]
 8028fbc:	e7de      	b.n	8028f7c <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8028fbe:	7862      	ldrb	r2, [r4, #1]
 8028fc0:	2a04      	cmp	r2, #4
 8028fc2:	d1d9      	bne.n	8028f78 <rx_dhcp_client+0x90>
 8028fc4:	1da2      	adds	r2, r4, #6
 8028fc6:	42b2      	cmp	r2, r6
 8028fc8:	d2d6      	bcs.n	8028f78 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 8028fca:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8028fce:	f7fc fc81 	bl	80258d4 <mg_ntohl>
 8028fd2:	e7d3      	b.n	8028f7c <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8028fd4:	7863      	ldrb	r3, [r4, #1]
 8028fd6:	2b01      	cmp	r3, #1
 8028fd8:	d1d0      	bne.n	8028f7c <rx_dhcp_client+0x94>
 8028fda:	1da3      	adds	r3, r4, #6
 8028fdc:	42b3      	cmp	r3, r6
 8028fde:	d2cd      	bcs.n	8028f7c <rx_dhcp_client+0x94>
      msgtype = p[2];
 8028fe0:	f894 9002 	ldrb.w	r9, [r4, #2]
 8028fe4:	e7ca      	b.n	8028f7c <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8028fe6:	f1b9 0f06 	cmp.w	r9, #6
 8028fea:	d00d      	beq.n	8029008 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8028fec:	f1b9 0f02 	cmp.w	r9, #2
 8028ff0:	d013      	beq.n	802901a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8028ff2:	f1b9 0f05 	cmp.w	r9, #5
 8028ff6:	d028      	beq.n	802904a <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8028ff8:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028ffc:	4553      	cmp	r3, sl
 8028ffe:	f040 80b4 	bne.w	802916a <rx_dhcp_client+0x282>
}
 8029002:	b007      	add	sp, #28
 8029004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8029008:	68ab      	ldr	r3, [r5, #8]
 802900a:	455b      	cmp	r3, fp
 802900c:	d1ee      	bne.n	8028fec <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802900e:	2301      	movs	r3, #1
 8029010:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029014:	2300      	movs	r3, #0
 8029016:	60ab      	str	r3, [r5, #8]
 8029018:	e7ee      	b.n	8028ff8 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802901a:	f1ba 0f01 	cmp.w	sl, #1
 802901e:	d1e8      	bne.n	8028ff2 <rx_dhcp_client+0x10a>
 8029020:	f1bb 0f00 	cmp.w	fp, #0
 8029024:	d0e5      	beq.n	8028ff2 <rx_dhcp_client+0x10a>
 8029026:	9b00      	ldr	r3, [sp, #0]
 8029028:	2b00      	cmp	r3, #0
 802902a:	d0e2      	beq.n	8028ff2 <rx_dhcp_client+0x10a>
 802902c:	2800      	cmp	r0, #0
 802902e:	d0e0      	beq.n	8028ff2 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029030:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 8029034:	b90a      	cbnz	r2, 802903a <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8029036:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 8029038:	68da      	ldr	r2, [r3, #12]
 802903a:	4659      	mov	r1, fp
 802903c:	4628      	mov	r0, r5
 802903e:	f7ff f9b9 	bl	80283b4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8029042:	2302      	movs	r3, #2
 8029044:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029048:	e7d6      	b.n	8028ff8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 802904a:	f1ba 0f02 	cmp.w	sl, #2
 802904e:	d02a      	beq.n	80290a6 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8029050:	f1ba 0f03 	cmp.w	sl, #3
 8029054:	d1d0      	bne.n	8028ff8 <rx_dhcp_client+0x110>
 8029056:	68ab      	ldr	r3, [r5, #8]
 8029058:	455b      	cmp	r3, fp
 802905a:	d1cd      	bne.n	8028ff8 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 802905c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802905e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8029060:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029064:	4604      	mov	r4, r0
 8029066:	fb00 f202 	mul.w	r2, r0, r2
 802906a:	189b      	adds	r3, r3, r2
 802906c:	f141 0100 	adc.w	r1, r1, #0
 8029070:	662b      	str	r3, [r5, #96]	@ 0x60
 8029072:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029074:	4b3f      	ldr	r3, [pc, #252]	@ (8029174 <rx_dhcp_client+0x28c>)
 8029076:	681b      	ldr	r3, [r3, #0]
 8029078:	2b01      	cmp	r3, #1
 802907a:	ddbd      	ble.n	8028ff8 <rx_dhcp_client+0x110>
 802907c:	4b3e      	ldr	r3, [pc, #248]	@ (8029178 <rx_dhcp_client+0x290>)
 802907e:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 8029082:	493e      	ldr	r1, [pc, #248]	@ (802917c <rx_dhcp_client+0x294>)
 8029084:	2002      	movs	r0, #2
 8029086:	f7fc ffff 	bl	8026088 <mg_log_prefix>
 802908a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802908e:	2300      	movs	r3, #0
 8029090:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8029094:	f7e7 fe60 	bl	8010d58 <__aeabi_uldivmod>
 8029098:	4602      	mov	r2, r0
 802909a:	460b      	mov	r3, r1
 802909c:	4621      	mov	r1, r4
 802909e:	4838      	ldr	r0, [pc, #224]	@ (8029180 <rx_dhcp_client+0x298>)
 80290a0:	f7fa fea0 	bl	8023de4 <mg_log>
 80290a4:	e7a8      	b.n	8028ff8 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80290a6:	f1bb 0f00 	cmp.w	fp, #0
 80290aa:	d0d1      	beq.n	8029050 <rx_dhcp_client+0x168>
 80290ac:	9b00      	ldr	r3, [sp, #0]
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	d0ce      	beq.n	8029050 <rx_dhcp_client+0x168>
 80290b2:	4604      	mov	r4, r0
 80290b4:	2800      	cmp	r0, #0
 80290b6:	d0cb      	beq.n	8029050 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 80290b8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80290ba:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80290bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80290c0:	fb00 f202 	mul.w	r2, r0, r2
 80290c4:	189b      	adds	r3, r3, r2
 80290c6:	f141 0100 	adc.w	r1, r1, #0
 80290ca:	662b      	str	r3, [r5, #96]	@ 0x60
 80290cc:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80290ce:	4b29      	ldr	r3, [pc, #164]	@ (8029174 <rx_dhcp_client+0x28c>)
 80290d0:	681b      	ldr	r3, [r3, #0]
 80290d2:	2b01      	cmp	r3, #1
 80290d4:	dc2e      	bgt.n	8029134 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80290d6:	693b      	ldr	r3, [r7, #16]
 80290d8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80290dc:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 80290e0:	895b      	ldrh	r3, [r3, #10]
 80290e2:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 80290e6:	f8c5 b008 	str.w	fp, [r5, #8]
 80290ea:	9b00      	ldr	r3, [sp, #0]
 80290ec:	612b      	str	r3, [r5, #16]
 80290ee:	9b01      	ldr	r3, [sp, #4]
 80290f0:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 80290f2:	2303      	movs	r3, #3
 80290f4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 80290f8:	2108      	movs	r1, #8
 80290fa:	eb0d 0001 	add.w	r0, sp, r1
 80290fe:	f7fc fbae 	bl	802585e <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8029102:	9c02      	ldr	r4, [sp, #8]
 8029104:	f7fc ffba 	bl	802607c <mg_millis>
 8029108:	4420      	add	r0, r4
 802910a:	f002 fe69 	bl	802bde0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802910e:	7feb      	ldrb	r3, [r5, #31]
 8029110:	b10b      	cbz	r3, 8029116 <rx_dhcp_client+0x22e>
 8029112:	9b05      	ldr	r3, [sp, #20]
 8029114:	bb1b      	cbnz	r3, 802915e <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8029116:	f895 3020 	ldrb.w	r3, [r5, #32]
 802911a:	2b00      	cmp	r3, #0
 802911c:	f43f af6c 	beq.w	8028ff8 <rx_dhcp_client+0x110>
 8029120:	9b04      	ldr	r3, [sp, #16]
 8029122:	2b00      	cmp	r3, #0
 8029124:	f43f af68 	beq.w	8028ff8 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8029128:	aa04      	add	r2, sp, #16
 802912a:	2102      	movs	r1, #2
 802912c:	4628      	mov	r0, r5
 802912e:	f7f7 ffac 	bl	802108a <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8029132:	e761      	b.n	8028ff8 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8029134:	4b10      	ldr	r3, [pc, #64]	@ (8029178 <rx_dhcp_client+0x290>)
 8029136:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 802913a:	4910      	ldr	r1, [pc, #64]	@ (802917c <rx_dhcp_client+0x294>)
 802913c:	2002      	movs	r0, #2
 802913e:	f7fc ffa3 	bl	8026088 <mg_log_prefix>
 8029142:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029146:	2300      	movs	r3, #0
 8029148:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 802914c:	f7e7 fe04 	bl	8010d58 <__aeabi_uldivmod>
 8029150:	4602      	mov	r2, r0
 8029152:	460b      	mov	r3, r1
 8029154:	4621      	mov	r1, r4
 8029156:	480a      	ldr	r0, [pc, #40]	@ (8029180 <rx_dhcp_client+0x298>)
 8029158:	f7fa fe44 	bl	8023de4 <mg_log>
 802915c:	e7bb      	b.n	80290d6 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 802915e:	aa05      	add	r2, sp, #20
 8029160:	2101      	movs	r1, #1
 8029162:	4628      	mov	r0, r5
 8029164:	f7f7 ff91 	bl	802108a <mg_tcpip_call>
 8029168:	e7d5      	b.n	8029116 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 802916a:	4628      	mov	r0, r5
 802916c:	f7ff fe3c 	bl	8028de8 <onstatechange>
 8029170:	e747      	b.n	8029002 <rx_dhcp_client+0x11a>
 8029172:	bf00      	nop
 8029174:	2000012c 	.word	0x2000012c
 8029178:	0803b334 	.word	0x0803b334
 802917c:	0803aa28 	.word	0x0803aa28
 8029180:	0803b10c 	.word	0x0803b10c

08029184 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8029184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029188:	b084      	sub	sp, #16
 802918a:	4605      	mov	r5, r0
 802918c:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 802918e:	69c9      	ldr	r1, [r1, #28]
 8029190:	88cb      	ldrh	r3, [r1, #6]
 8029192:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8029196:	b29b      	uxth	r3, r3
 8029198:	b1c3      	cbz	r3, 80291cc <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802919a:	7a4b      	ldrb	r3, [r1, #9]
 802919c:	2b11      	cmp	r3, #17
 802919e:	d00e      	beq.n	80291be <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80291a0:	7a4b      	ldrb	r3, [r1, #9]
 80291a2:	2b06      	cmp	r3, #6
 80291a4:	d00f      	beq.n	80291c6 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80291a6:	2200      	movs	r2, #0
 80291a8:	4621      	mov	r1, r4
 80291aa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80291ac:	f7f9 fa65 	bl	802267a <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 80291b0:	b110      	cbz	r0, 80291b8 <rx_ip+0x34>
 80291b2:	4963      	ldr	r1, [pc, #396]	@ (8029340 <rx_ip+0x1bc>)
 80291b4:	f7fd f850 	bl	8026258 <mg_error>
}
 80291b8:	b004      	add	sp, #16
 80291ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80291be:	f101 0314 	add.w	r3, r1, #20
 80291c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80291c4:	e7ec      	b.n	80291a0 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80291c6:	3114      	adds	r1, #20
 80291c8:	62a1      	str	r1, [r4, #40]	@ 0x28
 80291ca:	e7ec      	b.n	80291a6 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 80291cc:	7a4b      	ldrb	r3, [r1, #9]
 80291ce:	2b01      	cmp	r3, #1
 80291d0:	d024      	beq.n	802921c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 80291d2:	2b11      	cmp	r3, #17
 80291d4:	d031      	beq.n	802923a <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 80291d6:	2b06      	cmp	r3, #6
 80291d8:	d1ee      	bne.n	80291b8 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80291da:	f101 0314 	add.w	r3, r1, #20
 80291de:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80291e0:	68e3      	ldr	r3, [r4, #12]
 80291e2:	2b13      	cmp	r3, #19
 80291e4:	d9e8      	bls.n	80291b8 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 80291e6:	3128      	adds	r1, #40	@ 0x28
 80291e8:	4620      	mov	r0, r4
 80291ea:	f7fb f898 	bl	802431e <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 80291ee:	69e3      	ldr	r3, [r4, #28]
 80291f0:	8858      	ldrh	r0, [r3, #2]
 80291f2:	f7fc fc07 	bl	8025a04 <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 80291f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80291f8:	7b1b      	ldrb	r3, [r3, #12]
 80291fa:	091b      	lsrs	r3, r3, #4
 80291fc:	3305      	adds	r3, #5
 80291fe:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8029200:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8029204:	d301      	bcc.n	802920a <rx_ip+0x86>
 8029206:	1a80      	subs	r0, r0, r2
 8029208:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802920a:	4b4e      	ldr	r3, [pc, #312]	@ (8029344 <rx_ip+0x1c0>)
 802920c:	681b      	ldr	r3, [r3, #0]
 802920e:	2b03      	cmp	r3, #3
 8029210:	dc74      	bgt.n	80292fc <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8029212:	4621      	mov	r1, r4
 8029214:	4628      	mov	r0, r5
 8029216:	f7ff fb3d 	bl	8028894 <rx_tcp>
 802921a:	e7cd      	b.n	80291b8 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802921c:	f101 0314 	add.w	r3, r1, #20
 8029220:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8029222:	68e3      	ldr	r3, [r4, #12]
 8029224:	2b03      	cmp	r3, #3
 8029226:	d9c7      	bls.n	80291b8 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8029228:	3118      	adds	r1, #24
 802922a:	4620      	mov	r0, r4
 802922c:	f7fb f877 	bl	802431e <mkpay>
    rx_icmp(ifp, pkt);
 8029230:	4621      	mov	r1, r4
 8029232:	4628      	mov	r0, r5
 8029234:	f7fc fc3b 	bl	8025aae <rx_icmp>
 8029238:	e7be      	b.n	80291b8 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 802923a:	f101 0314 	add.w	r3, r1, #20
 802923e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8029240:	68e3      	ldr	r3, [r4, #12]
 8029242:	2b07      	cmp	r3, #7
 8029244:	d9b8      	bls.n	80291b8 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 8029246:	311c      	adds	r1, #28
 8029248:	4620      	mov	r0, r4
 802924a:	f7fb f868 	bl	802431e <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802924e:	4b3d      	ldr	r3, [pc, #244]	@ (8029344 <rx_ip+0x1c0>)
 8029250:	681b      	ldr	r3, [r3, #0]
 8029252:	2b03      	cmp	r3, #3
 8029254:	dc16      	bgt.n	8029284 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8029256:	7f2b      	ldrb	r3, [r5, #28]
 8029258:	b133      	cbz	r3, 8029268 <rx_ip+0xe4>
 802925a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802925c:	8877      	ldrh	r7, [r6, #2]
 802925e:	2044      	movs	r0, #68	@ 0x44
 8029260:	f7fc fbd0 	bl	8025a04 <mg_ntohs>
 8029264:	4287      	cmp	r7, r0
 8029266:	d02f      	beq.n	80292c8 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8029268:	7f6b      	ldrb	r3, [r5, #29]
 802926a:	b133      	cbz	r3, 802927a <rx_ip+0xf6>
 802926c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802926e:	8877      	ldrh	r7, [r6, #2]
 8029270:	2043      	movs	r0, #67	@ 0x43
 8029272:	f7fc fbc7 	bl	8025a04 <mg_ntohs>
 8029276:	4287      	cmp	r7, r0
 8029278:	d033      	beq.n	80292e2 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 802927a:	4621      	mov	r1, r4
 802927c:	4628      	mov	r0, r5
 802927e:	f7fd fe03 	bl	8026e88 <rx_udp>
 8029282:	e799      	b.n	80291b8 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8029284:	4b30      	ldr	r3, [pc, #192]	@ (8029348 <rx_ip+0x1c4>)
 8029286:	f241 6255 	movw	r2, #5717	@ 0x1655
 802928a:	4930      	ldr	r1, [pc, #192]	@ (802934c <rx_ip+0x1c8>)
 802928c:	2004      	movs	r0, #4
 802928e:	f7fc fefb 	bl	8026088 <mg_log_prefix>
 8029292:	69e7      	ldr	r7, [r4, #28]
 8029294:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8029298:	f8b8 0000 	ldrh.w	r0, [r8]
 802929c:	f7fc fbb2 	bl	8025a04 <mg_ntohs>
 80292a0:	4606      	mov	r6, r0
 80292a2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80292a6:	f7fc fbad 	bl	8025a04 <mg_ntohs>
 80292aa:	68e3      	ldr	r3, [r4, #12]
 80292ac:	4928      	ldr	r1, [pc, #160]	@ (8029350 <rx_ip+0x1cc>)
 80292ae:	9303      	str	r3, [sp, #12]
 80292b0:	9002      	str	r0, [sp, #8]
 80292b2:	f107 0310 	add.w	r3, r7, #16
 80292b6:	9301      	str	r3, [sp, #4]
 80292b8:	9100      	str	r1, [sp, #0]
 80292ba:	4633      	mov	r3, r6
 80292bc:	f107 020c 	add.w	r2, r7, #12
 80292c0:	4824      	ldr	r0, [pc, #144]	@ (8029354 <rx_ip+0x1d0>)
 80292c2:	f7fa fd8f 	bl	8023de4 <mg_log>
 80292c6:	e7c6      	b.n	8029256 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80292c8:	f106 0308 	add.w	r3, r6, #8
 80292cc:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80292ce:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 80292d2:	4620      	mov	r0, r4
 80292d4:	f7fb f823 	bl	802431e <mkpay>
      rx_dhcp_client(ifp, pkt);
 80292d8:	4621      	mov	r1, r4
 80292da:	4628      	mov	r0, r5
 80292dc:	f7ff fe04 	bl	8028ee8 <rx_dhcp_client>
 80292e0:	e76a      	b.n	80291b8 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80292e2:	f106 0308 	add.w	r3, r6, #8
 80292e6:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80292e8:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 80292ec:	4620      	mov	r0, r4
 80292ee:	f7fb f816 	bl	802431e <mkpay>
      rx_dhcp_server(ifp, pkt);
 80292f2:	4621      	mov	r1, r4
 80292f4:	4628      	mov	r0, r5
 80292f6:	f7fc fd05 	bl	8025d04 <rx_dhcp_server>
 80292fa:	e75d      	b.n	80291b8 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80292fc:	4b12      	ldr	r3, [pc, #72]	@ (8029348 <rx_ip+0x1c4>)
 80292fe:	f241 626a 	movw	r2, #5738	@ 0x166a
 8029302:	4912      	ldr	r1, [pc, #72]	@ (802934c <rx_ip+0x1c8>)
 8029304:	2004      	movs	r0, #4
 8029306:	f7fc febf 	bl	8026088 <mg_log_prefix>
 802930a:	69e7      	ldr	r7, [r4, #28]
 802930c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8029310:	f8b8 0000 	ldrh.w	r0, [r8]
 8029314:	f7fc fb76 	bl	8025a04 <mg_ntohs>
 8029318:	4606      	mov	r6, r0
 802931a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 802931e:	f7fc fb71 	bl	8025a04 <mg_ntohs>
 8029322:	68e3      	ldr	r3, [r4, #12]
 8029324:	490a      	ldr	r1, [pc, #40]	@ (8029350 <rx_ip+0x1cc>)
 8029326:	9303      	str	r3, [sp, #12]
 8029328:	9002      	str	r0, [sp, #8]
 802932a:	f107 0310 	add.w	r3, r7, #16
 802932e:	9301      	str	r3, [sp, #4]
 8029330:	9100      	str	r1, [sp, #0]
 8029332:	4633      	mov	r3, r6
 8029334:	f107 020c 	add.w	r2, r7, #12
 8029338:	4807      	ldr	r0, [pc, #28]	@ (8029358 <rx_ip+0x1d4>)
 802933a:	f7fa fd53 	bl	8023de4 <mg_log>
 802933e:	e768      	b.n	8029212 <rx_ip+0x8e>
 8029340:	0803b124 	.word	0x0803b124
 8029344:	2000012c 	.word	0x2000012c
 8029348:	0803b344 	.word	0x0803b344
 802934c:	0803aa28 	.word	0x0803aa28
 8029350:	08023da5 	.word	0x08023da5
 8029354:	0803b140 	.word	0x0803b140
 8029358:	0803b15c 	.word	0x0803b15c

0802935c <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 802935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029360:	b08e      	sub	sp, #56	@ 0x38
 8029362:	4606      	mov	r6, r0
 8029364:	460c      	mov	r4, r1
 8029366:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8029368:	2234      	movs	r2, #52	@ 0x34
 802936a:	2100      	movs	r1, #0
 802936c:	a801      	add	r0, sp, #4
 802936e:	f003 fa87 	bl	802c880 <memset>
  pkt.raw.buf = (char *) buf;
 8029372:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8029374:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8029376:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8029378:	2d0d      	cmp	r5, #13
 802937a:	d93f      	bls.n	80293fc <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 802937c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8029380:	b15b      	cbz	r3, 802939a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029382:	2206      	movs	r2, #6
 8029384:	4631      	mov	r1, r6
 8029386:	4620      	mov	r0, r4
 8029388:	f003 f9e6 	bl	802c758 <memcmp>
  if (ifp->enable_mac_check &&
 802938c:	b128      	cbz	r0, 802939a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 802938e:	2206      	movs	r2, #6
 8029390:	4945      	ldr	r1, [pc, #276]	@ (80294a8 <mg_tcpip_rx+0x14c>)
 8029392:	4620      	mov	r0, r4
 8029394:	f003 f9e0 	bl	802c758 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8029398:	bb80      	cbnz	r0, 80293fc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 802939a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 802939e:	b18b      	cbz	r3, 80293c4 <mg_tcpip_rx+0x68>
 80293a0:	2d04      	cmp	r5, #4
 80293a2:	d92e      	bls.n	8029402 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 80293a4:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 80293a8:	4642      	mov	r2, r8
 80293aa:	4621      	mov	r1, r4
 80293ac:	2000      	movs	r0, #0
 80293ae:	f7fc fddf 	bl	8025f70 <mg_crc32>
 80293b2:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80293b4:	2204      	movs	r2, #4
 80293b6:	4669      	mov	r1, sp
 80293b8:	eb04 0008 	add.w	r0, r4, r8
 80293bc:	f003 f9cc 	bl	802c758 <memcmp>
 80293c0:	b108      	cbz	r0, 80293c6 <mg_tcpip_rx+0x6a>
 80293c2:	e01b      	b.n	80293fc <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 80293c4:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 80293c6:	89a7      	ldrh	r7, [r4, #12]
 80293c8:	f640 0006 	movw	r0, #2054	@ 0x806
 80293cc:	f7fc fb1a 	bl	8025a04 <mg_ntohs>
 80293d0:	4287      	cmp	r7, r0
 80293d2:	d018      	beq.n	8029406 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 80293d4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 80293d8:	f7fc fb14 	bl	8025a04 <mg_ntohs>
 80293dc:	4287      	cmp	r7, r0
 80293de:	d01b      	beq.n	8029418 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 80293e0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80293e4:	f7fc fb0e 	bl	8025a04 <mg_ntohs>
 80293e8:	4287      	cmp	r7, r0
 80293ea:	d028      	beq.n	802943e <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 80293ec:	4b2f      	ldr	r3, [pc, #188]	@ (80294ac <mg_tcpip_rx+0x150>)
 80293ee:	681b      	ldr	r3, [r3, #0]
 80293f0:	2b02      	cmp	r3, #2
 80293f2:	dc41      	bgt.n	8029478 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80293f4:	4b2d      	ldr	r3, [pc, #180]	@ (80294ac <mg_tcpip_rx+0x150>)
 80293f6:	681b      	ldr	r3, [r3, #0]
 80293f8:	2b03      	cmp	r3, #3
 80293fa:	dc4d      	bgt.n	8029498 <mg_tcpip_rx+0x13c>
}
 80293fc:	b00e      	add	sp, #56	@ 0x38
 80293fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8029402:	46a8      	mov	r8, r5
 8029404:	e7df      	b.n	80293c6 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8029406:	340e      	adds	r4, #14
 8029408:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802940a:	2d29      	cmp	r5, #41	@ 0x29
 802940c:	d9f6      	bls.n	80293fc <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 802940e:	a901      	add	r1, sp, #4
 8029410:	4630      	mov	r0, r6
 8029412:	f7fe ff09 	bl	8028228 <rx_arp>
 8029416:	e7f1      	b.n	80293fc <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8029418:	f104 030e 	add.w	r3, r4, #14
 802941c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802941e:	2d35      	cmp	r5, #53	@ 0x35
 8029420:	d9ec      	bls.n	80293fc <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8029422:	7ba3      	ldrb	r3, [r4, #14]
 8029424:	091b      	lsrs	r3, r3, #4
 8029426:	2b06      	cmp	r3, #6
 8029428:	d1e8      	bne.n	80293fc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 802942a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 802942e:	a801      	add	r0, sp, #4
 8029430:	f7fa ff75 	bl	802431e <mkpay>
    rx_ip6(ifp, &pkt);
 8029434:	a901      	add	r1, sp, #4
 8029436:	4630      	mov	r0, r6
 8029438:	f7fc fb73 	bl	8025b22 <rx_ip6>
 802943c:	e7de      	b.n	80293fc <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 802943e:	f104 030e 	add.w	r3, r4, #14
 8029442:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029444:	2d21      	cmp	r5, #33	@ 0x21
 8029446:	d9d9      	bls.n	80293fc <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8029448:	8a20      	ldrh	r0, [r4, #16]
 802944a:	f7fc fadb 	bl	8025a04 <mg_ntohs>
 802944e:	300e      	adds	r0, #14
 8029450:	42a8      	cmp	r0, r5
 8029452:	d200      	bcs.n	8029456 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8029454:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8029456:	9b02      	ldr	r3, [sp, #8]
 8029458:	2b21      	cmp	r3, #33	@ 0x21
 802945a:	d9cf      	bls.n	80293fc <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802945c:	7ba3      	ldrb	r3, [r4, #14]
 802945e:	091b      	lsrs	r3, r3, #4
 8029460:	2b04      	cmp	r3, #4
 8029462:	d1cb      	bne.n	80293fc <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8029464:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8029468:	a801      	add	r0, sp, #4
 802946a:	f7fa ff58 	bl	802431e <mkpay>
    rx_ip(ifp, &pkt);
 802946e:	a901      	add	r1, sp, #4
 8029470:	4630      	mov	r0, r6
 8029472:	f7ff fe87 	bl	8029184 <rx_ip>
 8029476:	e7c1      	b.n	80293fc <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8029478:	4b0d      	ldr	r3, [pc, #52]	@ (80294b0 <mg_tcpip_rx+0x154>)
 802947a:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 802947e:	490d      	ldr	r1, [pc, #52]	@ (80294b4 <mg_tcpip_rx+0x158>)
 8029480:	2003      	movs	r0, #3
 8029482:	f7fc fe01 	bl	8026088 <mg_log_prefix>
 8029486:	9b05      	ldr	r3, [sp, #20]
 8029488:	8998      	ldrh	r0, [r3, #12]
 802948a:	f7fc fabb 	bl	8025a04 <mg_ntohs>
 802948e:	4601      	mov	r1, r0
 8029490:	4809      	ldr	r0, [pc, #36]	@ (80294b8 <mg_tcpip_rx+0x15c>)
 8029492:	f7fa fca7 	bl	8023de4 <mg_log>
 8029496:	e7ad      	b.n	80293f4 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8029498:	4641      	mov	r1, r8
 802949a:	2920      	cmp	r1, #32
 802949c:	bf28      	it	cs
 802949e:	2120      	movcs	r1, #32
 80294a0:	4620      	mov	r0, r4
 80294a2:	f7f9 fe01 	bl	80230a8 <mg_hexdump>
 80294a6:	e7a9      	b.n	80293fc <mg_tcpip_rx+0xa0>
 80294a8:	0803b4b0 	.word	0x0803b4b0
 80294ac:	2000012c 	.word	0x2000012c
 80294b0:	0803b354 	.word	0x0803b354
 80294b4:	0803aa28 	.word	0x0803aa28
 80294b8:	0803b178 	.word	0x0803b178

080294bc <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 80294bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80294c0:	b08b      	sub	sp, #44	@ 0x2c
 80294c2:	4605      	mov	r5, r0
 80294c4:	4616      	mov	r6, r2
 80294c6:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80294c8:	9200      	str	r2, [sp, #0]
 80294ca:	9301      	str	r3, [sp, #4]
 80294cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80294d0:	2300      	movs	r3, #0
 80294d2:	3058      	adds	r0, #88	@ 0x58
 80294d4:	f7fc f868 	bl	80255a8 <mg_timer_expired>
  ifp->now = now;
 80294d8:	652e      	str	r6, [r5, #80]	@ 0x50
 80294da:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 80294dc:	4604      	mov	r4, r0
 80294de:	b318      	cbz	r0, 8029528 <mg_tcpip_poll+0x6c>
 80294e0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80294e2:	68db      	ldr	r3, [r3, #12]
 80294e4:	b303      	cbz	r3, 8029528 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 80294e6:	4628      	mov	r0, r5
 80294e8:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 80294ea:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 80294ee:	3b00      	subs	r3, #0
 80294f0:	bf18      	it	ne
 80294f2:	2301      	movne	r3, #1
    if (up != current) {
 80294f4:	4298      	cmp	r0, r3
 80294f6:	d010      	beq.n	802951a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80294f8:	b120      	cbz	r0, 8029504 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 80294fa:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80294fc:	2b00      	cmp	r3, #0
 80294fe:	d06e      	beq.n	80295de <mg_tcpip_poll+0x122>
 8029500:	2301      	movs	r3, #1
 8029502:	e000      	b.n	8029506 <mg_tcpip_poll+0x4a>
 8029504:	2300      	movs	r3, #0
 8029506:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802950a:	b918      	cbnz	r0, 8029514 <mg_tcpip_poll+0x58>
 802950c:	7f2b      	ldrb	r3, [r5, #28]
 802950e:	b10b      	cbz	r3, 8029514 <mg_tcpip_poll+0x58>
 8029510:	2300      	movs	r3, #0
 8029512:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029514:	4628      	mov	r0, r5
 8029516:	f7ff fc67 	bl	8028de8 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802951a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802951e:	b91b      	cbnz	r3, 8029528 <mg_tcpip_poll+0x6c>
 8029520:	4ba8      	ldr	r3, [pc, #672]	@ (80297c4 <mg_tcpip_poll+0x308>)
 8029522:	681b      	ldr	r3, [r3, #0]
 8029524:	2b00      	cmp	r3, #0
 8029526:	dc5c      	bgt.n	80295e2 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8029528:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802952c:	2b00      	cmp	r3, #0
 802952e:	f000 8146 	beq.w	80297be <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8029532:	2b01      	cmp	r3, #1
 8029534:	d060      	beq.n	80295f8 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029536:	2c00      	cmp	r4, #0
 8029538:	d05f      	beq.n	80295fa <mg_tcpip_poll+0x13e>
 802953a:	2b03      	cmp	r3, #3
 802953c:	d15d      	bne.n	80295fa <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 802953e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8029540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8029542:	ea52 0103 	orrs.w	r1, r2, r3
 8029546:	d058      	beq.n	80295fa <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8029548:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 802954a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802954c:	4290      	cmp	r0, r2
 802954e:	eb71 0403 	sbcs.w	r4, r1, r3
 8029552:	d262      	bcs.n	802961a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8029554:	4c9c      	ldr	r4, [pc, #624]	@ (80297c8 <mg_tcpip_poll+0x30c>)
 8029556:	1904      	adds	r4, r0, r4
 8029558:	f141 0c00 	adc.w	ip, r1, #0
 802955c:	42a2      	cmp	r2, r4
 802955e:	eb73 030c 	sbcs.w	r3, r3, ip
 8029562:	d24a      	bcs.n	80295fa <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8029564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029568:	2300      	movs	r3, #0
 802956a:	f7e7 fbf5 	bl	8010d58 <__aeabi_uldivmod>
 802956e:	4602      	mov	r2, r0
 8029570:	2000      	movs	r0, #0
 8029572:	1853      	adds	r3, r2, r1
 8029574:	d25a      	bcs.n	802962c <mg_tcpip_poll+0x170>
 8029576:	4403      	add	r3, r0
 8029578:	4894      	ldr	r0, [pc, #592]	@ (80297cc <mg_tcpip_poll+0x310>)
 802957a:	fba0 4003 	umull	r4, r0, r0, r3
 802957e:	08c0      	lsrs	r0, r0, #3
 8029580:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8029584:	1a1b      	subs	r3, r3, r0
 8029586:	1ad3      	subs	r3, r2, r3
 8029588:	f161 0c00 	sbc.w	ip, r1, #0
 802958c:	4c90      	ldr	r4, [pc, #576]	@ (80297d0 <mg_tcpip_poll+0x314>)
 802958e:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8029592:	fb03 f000 	mul.w	r0, r3, r0
 8029596:	fb04 000c 	mla	r0, r4, ip, r0
 802959a:	fba3 3404 	umull	r3, r4, r3, r4
 802959e:	4420      	add	r0, r4
 80295a0:	089b      	lsrs	r3, r3, #2
 80295a2:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 80295a6:	0880      	lsrs	r0, r0, #2
 80295a8:	0104      	lsls	r4, r0, #4
 80295aa:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 80295ae:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 80295b2:	ebbc 0c03 	subs.w	ip, ip, r3
 80295b6:	eb64 0300 	sbc.w	r3, r4, r0
 80295ba:	009b      	lsls	r3, r3, #2
 80295bc:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80295c0:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80295c4:	1a12      	subs	r2, r2, r0
 80295c6:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80295ca:	430a      	orrs	r2, r1
 80295cc:	d115      	bne.n	80295fa <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 80295ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80295d2:	68aa      	ldr	r2, [r5, #8]
 80295d4:	497f      	ldr	r1, [pc, #508]	@ (80297d4 <mg_tcpip_poll+0x318>)
 80295d6:	4628      	mov	r0, r5
 80295d8:	f7fe fdfe 	bl	80281d8 <tx_dhcp_request_re>
 80295dc:	e00d      	b.n	80295fa <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 80295de:	2303      	movs	r3, #3
 80295e0:	e791      	b.n	8029506 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 80295e2:	4b7d      	ldr	r3, [pc, #500]	@ (80297d8 <mg_tcpip_poll+0x31c>)
 80295e4:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 80295e8:	497c      	ldr	r1, [pc, #496]	@ (80297dc <mg_tcpip_poll+0x320>)
 80295ea:	2001      	movs	r0, #1
 80295ec:	f7fc fd4c 	bl	8026088 <mg_log_prefix>
 80295f0:	487b      	ldr	r0, [pc, #492]	@ (80297e0 <mg_tcpip_poll+0x324>)
 80295f2:	f7fa fbf7 	bl	8023de4 <mg_log>
 80295f6:	e797      	b.n	8029528 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 80295f8:	b95c      	cbnz	r4, 8029612 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 80295fa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80295fc:	689b      	ldr	r3, [r3, #8]
 80295fe:	b1fb      	cbz	r3, 8029640 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8029600:	462a      	mov	r2, r5
 8029602:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8029604:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8029606:	4798      	blx	r3
    if (len > 0) {
 8029608:	4602      	mov	r2, r0
 802960a:	b988      	cbnz	r0, 8029630 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 802960c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802960e:	681c      	ldr	r4, [r3, #0]
 8029610:	e0a3      	b.n	802975a <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8029612:	4628      	mov	r0, r5
 8029614:	f7fe fdaa 	bl	802816c <tx_dhcp_discover>
 8029618:	e7ef      	b.n	80295fa <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 802961a:	2301      	movs	r3, #1
 802961c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8029620:	2300      	movs	r3, #0
 8029622:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8029624:	4628      	mov	r0, r5
 8029626:	f7ff fbdf 	bl	8028de8 <onstatechange>
 802962a:	e7e6      	b.n	80295fa <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 802962c:	2001      	movs	r0, #1
 802962e:	e7a2      	b.n	8029576 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8029630:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8029632:	3301      	adds	r3, #1
 8029634:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8029636:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8029638:	4628      	mov	r0, r5
 802963a:	f7ff fe8f 	bl	802935c <mg_tcpip_rx>
 802963e:	e7e5      	b.n	802960c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8029640:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8029644:	a909      	add	r1, sp, #36	@ 0x24
 8029646:	4620      	mov	r0, r4
 8029648:	f7fa fcd7 	bl	8023ffa <mg_queue_next>
    if (len > 0) {
 802964c:	4680      	mov	r8, r0
 802964e:	2800      	cmp	r0, #0
 8029650:	d0dc      	beq.n	802960c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8029652:	4602      	mov	r2, r0
 8029654:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029656:	4628      	mov	r0, r5
 8029658:	f7ff fe80 	bl	802935c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 802965c:	4641      	mov	r1, r8
 802965e:	4620      	mov	r0, r4
 8029660:	f7fa fce7 	bl	8024032 <mg_queue_del>
 8029664:	e7d2      	b.n	802960c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8029666:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 802966a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 802966e:	4291      	cmp	r1, r2
 8029670:	f000 8088 	beq.w	8029784 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8029674:	4b53      	ldr	r3, [pc, #332]	@ (80297c4 <mg_tcpip_poll+0x308>)
 8029676:	681b      	ldr	r3, [r3, #0]
 8029678:	2b03      	cmp	r3, #3
 802967a:	dc23      	bgt.n	80296c4 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802967c:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029680:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029684:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8029688:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 802968c:	f7fc f922 	bl	80258d4 <mg_ntohl>
 8029690:	9007      	str	r0, [sp, #28]
 8029692:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8029696:	f7fc f91d 	bl	80258d4 <mg_ntohl>
 802969a:	2300      	movs	r3, #0
 802969c:	9305      	str	r3, [sp, #20]
 802969e:	9304      	str	r3, [sp, #16]
 80296a0:	9003      	str	r0, [sp, #12]
 80296a2:	9b07      	ldr	r3, [sp, #28]
 80296a4:	9302      	str	r3, [sp, #8]
 80296a6:	f8cd b004 	str.w	fp, [sp, #4]
 80296aa:	f8cd a000 	str.w	sl, [sp]
 80296ae:	2310      	movs	r3, #16
 80296b0:	4642      	mov	r2, r8
 80296b2:	4649      	mov	r1, r9
 80296b4:	4628      	mov	r0, r5
 80296b6:	f7fe f9e3 	bl	8027a80 <tx_tcp>
        s->acked = s->ack;
 80296ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80296be:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 80296c2:	e045      	b.n	8029750 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 80296c4:	4b44      	ldr	r3, [pc, #272]	@ (80297d8 <mg_tcpip_poll+0x31c>)
 80296c6:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 80296ca:	4944      	ldr	r1, [pc, #272]	@ (80297dc <mg_tcpip_poll+0x320>)
 80296cc:	2004      	movs	r0, #4
 80296ce:	f7fc fcdb 	bl	8026088 <mg_log_prefix>
 80296d2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80296d6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 80296da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80296dc:	4841      	ldr	r0, [pc, #260]	@ (80297e4 <mg_tcpip_poll+0x328>)
 80296de:	f7fa fb81 	bl	8023de4 <mg_log>
 80296e2:	e7cb      	b.n	802967c <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 80296e4:	4940      	ldr	r1, [pc, #256]	@ (80297e8 <mg_tcpip_poll+0x32c>)
 80296e6:	4620      	mov	r0, r4
 80296e8:	f7fc fdb6 	bl	8026258 <mg_error>
 80296ec:	e030      	b.n	8029750 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 80296ee:	493f      	ldr	r1, [pc, #252]	@ (80297ec <mg_tcpip_poll+0x330>)
 80296f0:	4620      	mov	r0, r4
 80296f2:	f7fc fdb1 	bl	8026258 <mg_error>
 80296f6:	e02b      	b.n	8029750 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 80296f8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80296fc:	f043 0320 	orr.w	r3, r3, #32
 8029700:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8029704:	e028      	b.n	8029758 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8029706:	493a      	ldr	r1, [pc, #232]	@ (80297f0 <mg_tcpip_poll+0x334>)
 8029708:	4620      	mov	r0, r4
 802970a:	f7fc fda5 	bl	8026258 <mg_error>
 802970e:	e01f      	b.n	8029750 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029710:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8029714:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8029718:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 802971c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8029720:	3801      	subs	r0, #1
 8029722:	f7fc f8d7 	bl	80258d4 <mg_ntohl>
 8029726:	9007      	str	r0, [sp, #28]
 8029728:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 802972c:	f7fc f8d2 	bl	80258d4 <mg_ntohl>
 8029730:	2300      	movs	r3, #0
 8029732:	9305      	str	r3, [sp, #20]
 8029734:	9304      	str	r3, [sp, #16]
 8029736:	9003      	str	r0, [sp, #12]
 8029738:	9b07      	ldr	r3, [sp, #28]
 802973a:	9302      	str	r3, [sp, #8]
 802973c:	f8cd b004 	str.w	fp, [sp, #4]
 8029740:	f8cd a000 	str.w	sl, [sp]
 8029744:	2310      	movs	r3, #16
 8029746:	4642      	mov	r2, r8
 8029748:	4649      	mov	r1, r9
 802974a:	4628      	mov	r0, r5
 802974c:	f7fe f998 	bl	8027a80 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8029750:	2100      	movs	r1, #0
 8029752:	4620      	mov	r0, r4
 8029754:	f7fe fa70 	bl	8027c38 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8029758:	6824      	ldr	r4, [r4, #0]
 802975a:	b384      	cbz	r4, 80297be <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 802975c:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8029760:	f240 1209 	movw	r2, #265	@ 0x109
 8029764:	421a      	tst	r2, r3
 8029766:	d1f7      	bne.n	8029758 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8029768:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 802976c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8029770:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8029774:	42b2      	cmp	r2, r6
 8029776:	41bb      	sbcs	r3, r7
 8029778:	d2ee      	bcs.n	8029758 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 802977a:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 802977e:	2b01      	cmp	r3, #1
 8029780:	f43f af71 	beq.w	8029666 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8029784:	2b02      	cmp	r3, #2
 8029786:	d0ad      	beq.n	80296e4 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8029788:	2b03      	cmp	r3, #3
 802978a:	d0b0      	beq.n	80296ee <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 802978c:	2b04      	cmp	r3, #4
 802978e:	d0b3      	beq.n	80296f8 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8029790:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8029794:	1c5a      	adds	r2, r3, #1
 8029796:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 802979a:	2b02      	cmp	r3, #2
 802979c:	d8b3      	bhi.n	8029706 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 802979e:	4b09      	ldr	r3, [pc, #36]	@ (80297c4 <mg_tcpip_poll+0x308>)
 80297a0:	681b      	ldr	r3, [r3, #0]
 80297a2:	2b03      	cmp	r3, #3
 80297a4:	ddb4      	ble.n	8029710 <mg_tcpip_poll+0x254>
 80297a6:	4b0c      	ldr	r3, [pc, #48]	@ (80297d8 <mg_tcpip_poll+0x31c>)
 80297a8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80297ac:	490b      	ldr	r1, [pc, #44]	@ (80297dc <mg_tcpip_poll+0x320>)
 80297ae:	2004      	movs	r0, #4
 80297b0:	f7fc fc6a 	bl	8026088 <mg_log_prefix>
 80297b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80297b6:	480f      	ldr	r0, [pc, #60]	@ (80297f4 <mg_tcpip_poll+0x338>)
 80297b8:	f7fa fb14 	bl	8023de4 <mg_log>
 80297bc:	e7a8      	b.n	8029710 <mg_tcpip_poll+0x254>
}
 80297be:	b00b      	add	sp, #44	@ 0x2c
 80297c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297c4:	2000012c 	.word	0x2000012c
 80297c8:	001b7740 	.word	0x001b7740
 80297cc:	88888889 	.word	0x88888889
 80297d0:	eeeeeeef 	.word	0xeeeeeeef
 80297d4:	0803b4b0 	.word	0x0803b4b0
 80297d8:	0803b398 	.word	0x0803b398
 80297dc:	0803aa28 	.word	0x0803aa28
 80297e0:	0803b18c 	.word	0x0803b18c
 80297e4:	0803b19c 	.word	0x0803b19c
 80297e8:	0803b1ac 	.word	0x0803b1ac
 80297ec:	0803b1b8 	.word	0x0803b1b8
 80297f0:	0803b1d0 	.word	0x0803b1d0
 80297f4:	0803b1cc 	.word	0x0803b1cc

080297f8 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 80297f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80297fa:	b087      	sub	sp, #28
 80297fc:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 80297fe:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8029800:	f7fc fc3c 	bl	802607c <mg_millis>
 8029804:	4602      	mov	r2, r0
 8029806:	460b      	mov	r3, r1
 8029808:	9004      	str	r0, [sp, #16]
 802980a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 802980c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029810:	f7fb fefe 	bl	8025610 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8029814:	2d00      	cmp	r5, #0
 8029816:	d078      	beq.n	802990a <mg_mgr_poll+0x112>
 8029818:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802981a:	2b00      	cmp	r3, #0
 802981c:	d075      	beq.n	802990a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 802981e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029822:	4628      	mov	r0, r5
 8029824:	f7ff fe4a 	bl	80294bc <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8029828:	6824      	ldr	r4, [r4, #0]
 802982a:	e040      	b.n	80298ae <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802982c:	4b38      	ldr	r3, [pc, #224]	@ (8029910 <mg_mgr_poll+0x118>)
 802982e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8029832:	4938      	ldr	r1, [pc, #224]	@ (8029914 <mg_mgr_poll+0x11c>)
 8029834:	2004      	movs	r0, #4
 8029836:	f7fc fc27 	bl	8026088 <mg_log_prefix>
 802983a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802983c:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8029840:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8029844:	d019      	beq.n	802987a <mg_mgr_poll+0x82>
 8029846:	2254      	movs	r2, #84	@ 0x54
 8029848:	f010 0f20 	tst.w	r0, #32
 802984c:	d017      	beq.n	802987e <mg_mgr_poll+0x86>
 802984e:	2343      	movs	r3, #67	@ 0x43
 8029850:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8029854:	d115      	bne.n	8029882 <mg_mgr_poll+0x8a>
 8029856:	2668      	movs	r6, #104	@ 0x68
 8029858:	f010 0f08 	tst.w	r0, #8
 802985c:	d013      	beq.n	8029886 <mg_mgr_poll+0x8e>
 802985e:	2752      	movs	r7, #82	@ 0x52
 8029860:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 8029864:	f010 0f20 	tst.w	r0, #32
 8029868:	d00f      	beq.n	802988a <mg_mgr_poll+0x92>
 802986a:	2043      	movs	r0, #67	@ 0x43
 802986c:	9002      	str	r0, [sp, #8]
 802986e:	9701      	str	r7, [sp, #4]
 8029870:	9600      	str	r6, [sp, #0]
 8029872:	4829      	ldr	r0, [pc, #164]	@ (8029918 <mg_mgr_poll+0x120>)
 8029874:	f7fa fab6 	bl	8023de4 <mg_log>
 8029878:	e024      	b.n	80298c4 <mg_mgr_poll+0xcc>
 802987a:	2274      	movs	r2, #116	@ 0x74
 802987c:	e7e4      	b.n	8029848 <mg_mgr_poll+0x50>
 802987e:	2363      	movs	r3, #99	@ 0x63
 8029880:	e7e6      	b.n	8029850 <mg_mgr_poll+0x58>
 8029882:	2648      	movs	r6, #72	@ 0x48
 8029884:	e7e8      	b.n	8029858 <mg_mgr_poll+0x60>
 8029886:	2772      	movs	r7, #114	@ 0x72
 8029888:	e7ea      	b.n	8029860 <mg_mgr_poll+0x68>
 802988a:	2063      	movs	r0, #99	@ 0x63
 802988c:	e7ee      	b.n	802986c <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 802988e:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8029892:	4620      	mov	r0, r4
 8029894:	f7fc fd18 	bl	80262c8 <handle_tls_recv>
 8029898:	e01e      	b.n	80298d8 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802989a:	4620      	mov	r0, r4
 802989c:	f7fe fa6a 	bl	8027d74 <write_conn>
 80298a0:	e01f      	b.n	80298e2 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 80298a2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80298a6:	f013 0f20 	tst.w	r3, #32
 80298aa:	d12a      	bne.n	8029902 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80298ac:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 80298ae:	b364      	cbz	r4, 802990a <mg_mgr_poll+0x112>
    tmp = c->next;
 80298b0:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 80298b2:	aa04      	add	r2, sp, #16
 80298b4:	2102      	movs	r1, #2
 80298b6:	4620      	mov	r0, r4
 80298b8:	f7f9 f84b 	bl	8022952 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 80298bc:	4b17      	ldr	r3, [pc, #92]	@ (802991c <mg_mgr_poll+0x124>)
 80298be:	681b      	ldr	r3, [r3, #0]
 80298c0:	2b03      	cmp	r3, #3
 80298c2:	dcb3      	bgt.n	802982c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 80298c4:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80298c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80298cc:	d004      	beq.n	80298d8 <mg_mgr_poll+0xe0>
 80298ce:	4620      	mov	r0, r4
 80298d0:	f7fb fee8 	bl	80256a4 <mg_tls_pending>
 80298d4:	2800      	cmp	r0, #0
 80298d6:	d1da      	bne.n	802988e <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 80298d8:	4620      	mov	r0, r4
 80298da:	f7f7 fbfb 	bl	80210d4 <can_write>
 80298de:	2800      	cmp	r0, #0
 80298e0:	d1db      	bne.n	802989a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 80298e2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80298e6:	f013 0f10 	tst.w	r3, #16
 80298ea:	d0da      	beq.n	80298a2 <mg_mgr_poll+0xaa>
 80298ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80298ee:	2b00      	cmp	r3, #0
 80298f0:	d1d7      	bne.n	80298a2 <mg_mgr_poll+0xaa>
 80298f2:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80298f6:	2b04      	cmp	r3, #4
 80298f8:	d0d3      	beq.n	80298a2 <mg_mgr_poll+0xaa>
      init_closure(c);
 80298fa:	4620      	mov	r0, r4
 80298fc:	f7fe fa66 	bl	8027dcc <init_closure>
 8029900:	e7cf      	b.n	80298a2 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8029902:	4620      	mov	r0, r4
 8029904:	f7fd fb7e 	bl	8027004 <close_conn>
 8029908:	e7d0      	b.n	80298ac <mg_mgr_poll+0xb4>
}
 802990a:	b007      	add	sp, #28
 802990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802990e:	bf00      	nop
 8029910:	0803b3a8 	.word	0x0803b3a8
 8029914:	0803aa28 	.word	0x0803aa28
 8029918:	0803b1dc 	.word	0x0803b1dc
 802991c:	2000012c 	.word	0x2000012c

08029920 <mg_now>:
uint64_t mg_now(void) {
 8029920:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8029922:	f7fc fbab 	bl	802607c <mg_millis>
 8029926:	4a03      	ldr	r2, [pc, #12]	@ (8029934 <mg_now+0x14>)
 8029928:	6813      	ldr	r3, [r2, #0]
 802992a:	6852      	ldr	r2, [r2, #4]
 802992c:	18c0      	adds	r0, r0, r3
}
 802992e:	eb42 0101 	adc.w	r1, r2, r1
 8029932:	bd08      	pop	{r3, pc}
 8029934:	20019ed8 	.word	0x20019ed8

08029938 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8029938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802993c:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 802993e:	460a      	mov	r2, r1
 8029940:	b129      	cbz	r1, 802994e <mg_sntp_parse+0x16>
 8029942:	7801      	ldrb	r1, [r0, #0]
 8029944:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029948:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 802994c:	e001      	b.n	8029952 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 802994e:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8029950:	461d      	mov	r5, r3
  if (len < 48) {
 8029952:	2a2f      	cmp	r2, #47	@ 0x2f
 8029954:	d817      	bhi.n	8029986 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 8029956:	4b4b      	ldr	r3, [pc, #300]	@ (8029a84 <mg_sntp_parse+0x14c>)
 8029958:	681b      	ldr	r3, [r3, #0]
 802995a:	2b00      	cmp	r3, #0
 802995c:	dc04      	bgt.n	8029968 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 802995e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029962:	4601      	mov	r1, r0
}
 8029964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 8029968:	4b47      	ldr	r3, [pc, #284]	@ (8029a88 <mg_sntp_parse+0x150>)
 802996a:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802996e:	4947      	ldr	r1, [pc, #284]	@ (8029a8c <mg_sntp_parse+0x154>)
 8029970:	2001      	movs	r0, #1
 8029972:	f7fc fb89 	bl	8026088 <mg_log_prefix>
 8029976:	4946      	ldr	r1, [pc, #280]	@ (8029a90 <mg_sntp_parse+0x158>)
 8029978:	4846      	ldr	r0, [pc, #280]	@ (8029a94 <mg_sntp_parse+0x15c>)
 802997a:	f7fa fa33 	bl	8023de4 <mg_log>
  int64_t epoch_milliseconds = -1;
 802997e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029982:	4601      	mov	r1, r0
 8029984:	e7ee      	b.n	8029964 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 8029986:	3b04      	subs	r3, #4
 8029988:	2b01      	cmp	r3, #1
 802998a:	d916      	bls.n	80299ba <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 802998c:	4b3d      	ldr	r3, [pc, #244]	@ (8029a84 <mg_sntp_parse+0x14c>)
 802998e:	681b      	ldr	r3, [r3, #0]
 8029990:	2b00      	cmp	r3, #0
 8029992:	dc03      	bgt.n	802999c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8029994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029998:	4601      	mov	r1, r0
 802999a:	e7e3      	b.n	8029964 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802999c:	4b3a      	ldr	r3, [pc, #232]	@ (8029a88 <mg_sntp_parse+0x150>)
 802999e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 80299a2:	493a      	ldr	r1, [pc, #232]	@ (8029a8c <mg_sntp_parse+0x154>)
 80299a4:	2001      	movs	r0, #1
 80299a6:	f7fc fb6f 	bl	8026088 <mg_log_prefix>
 80299aa:	493b      	ldr	r1, [pc, #236]	@ (8029a98 <mg_sntp_parse+0x160>)
 80299ac:	4839      	ldr	r0, [pc, #228]	@ (8029a94 <mg_sntp_parse+0x15c>)
 80299ae:	f7fa fa19 	bl	8023de4 <mg_log>
  int64_t epoch_milliseconds = -1;
 80299b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80299b6:	4601      	mov	r1, r0
 80299b8:	e7d4      	b.n	8029964 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 80299ba:	7863      	ldrb	r3, [r4, #1]
 80299bc:	b9b3      	cbnz	r3, 80299ec <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80299be:	4b31      	ldr	r3, [pc, #196]	@ (8029a84 <mg_sntp_parse+0x14c>)
 80299c0:	681b      	ldr	r3, [r3, #0]
 80299c2:	2b00      	cmp	r3, #0
 80299c4:	dc03      	bgt.n	80299ce <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 80299c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80299ca:	4601      	mov	r1, r0
 80299cc:	e7ca      	b.n	8029964 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80299ce:	4b2e      	ldr	r3, [pc, #184]	@ (8029a88 <mg_sntp_parse+0x150>)
 80299d0:	f641 4212 	movw	r2, #7186	@ 0x1c12
 80299d4:	492d      	ldr	r1, [pc, #180]	@ (8029a8c <mg_sntp_parse+0x154>)
 80299d6:	2001      	movs	r0, #1
 80299d8:	f7fc fb56 	bl	8026088 <mg_log_prefix>
 80299dc:	492f      	ldr	r1, [pc, #188]	@ (8029a9c <mg_sntp_parse+0x164>)
 80299de:	482d      	ldr	r0, [pc, #180]	@ (8029a94 <mg_sntp_parse+0x15c>)
 80299e0:	f7fa fa00 	bl	8023de4 <mg_log>
  int64_t epoch_milliseconds = -1;
 80299e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80299e8:	4601      	mov	r1, r0
 80299ea:	e7bb      	b.n	8029964 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 80299ec:	1eeb      	subs	r3, r5, #3
 80299ee:	2b01      	cmp	r3, #1
 80299f0:	d907      	bls.n	8029a02 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 80299f2:	4b24      	ldr	r3, [pc, #144]	@ (8029a84 <mg_sntp_parse+0x14c>)
 80299f4:	681b      	ldr	r3, [r3, #0]
 80299f6:	2b00      	cmp	r3, #0
 80299f8:	dc35      	bgt.n	8029a66 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 80299fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80299fe:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8029a00:	e7b0      	b.n	8029964 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8029a02:	f104 0018 	add.w	r0, r4, #24
 8029a06:	f7fb ffc3 	bl	8025990 <gettimestamp>
 8029a0a:	4606      	mov	r6, r0
 8029a0c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8029a0e:	f104 0020 	add.w	r0, r4, #32
 8029a12:	f7fb ffbd 	bl	8025990 <gettimestamp>
 8029a16:	4680      	mov	r8, r0
 8029a18:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 8029a1a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8029a1e:	f7fb ffb7 	bl	8025990 <gettimestamp>
 8029a22:	4607      	mov	r7, r0
 8029a24:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8029a26:	f7fc fb29 	bl	802607c <mg_millis>
 8029a2a:	4605      	mov	r5, r0
 8029a2c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 8029a2e:	1b86      	subs	r6, r0, r6
 8029a30:	eb61 020a 	sbc.w	r2, r1, sl
 8029a34:	ebb7 0808 	subs.w	r8, r7, r8
 8029a38:	eb64 0909 	sbc.w	r9, r4, r9
 8029a3c:	ebb6 0608 	subs.w	r6, r6, r8
 8029a40:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 8029a44:	0fd3      	lsrs	r3, r2, #31
 8029a46:	199b      	adds	r3, r3, r6
 8029a48:	f142 0200 	adc.w	r2, r2, #0
 8029a4c:	085b      	lsrs	r3, r3, #1
 8029a4e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8029a52:	19d8      	adds	r0, r3, r7
 8029a54:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8029a58:	1b45      	subs	r5, r0, r5
 8029a5a:	eb61 030c 	sbc.w	r3, r1, ip
 8029a5e:	4a10      	ldr	r2, [pc, #64]	@ (8029aa0 <mg_sntp_parse+0x168>)
 8029a60:	6015      	str	r5, [r2, #0]
 8029a62:	6053      	str	r3, [r2, #4]
 8029a64:	e77e      	b.n	8029964 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 8029a66:	4b08      	ldr	r3, [pc, #32]	@ (8029a88 <mg_sntp_parse+0x150>)
 8029a68:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 8029a6c:	4907      	ldr	r1, [pc, #28]	@ (8029a8c <mg_sntp_parse+0x154>)
 8029a6e:	2001      	movs	r0, #1
 8029a70:	f7fc fb0a 	bl	8026088 <mg_log_prefix>
 8029a74:	4629      	mov	r1, r5
 8029a76:	480b      	ldr	r0, [pc, #44]	@ (8029aa4 <mg_sntp_parse+0x16c>)
 8029a78:	f7fa f9b4 	bl	8023de4 <mg_log>
  int64_t epoch_milliseconds = -1;
 8029a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029a80:	4601      	mov	r1, r0
 8029a82:	e76f      	b.n	8029964 <mg_sntp_parse+0x2c>
 8029a84:	2000012c 	.word	0x2000012c
 8029a88:	0803b2f8 	.word	0x0803b2f8
 8029a8c:	0803aa28 	.word	0x0803aa28
 8029a90:	0803b1f0 	.word	0x0803b1f0
 8029a94:	0803ad40 	.word	0x0803ad40
 8029a98:	0803b200 	.word	0x0803b200
 8029a9c:	0803b214 	.word	0x0803b214
 8029aa0:	20019ed8 	.word	0x20019ed8
 8029aa4:	0803b230 	.word	0x0803b230

08029aa8 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8029aa8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8029aac:	b08c      	sub	sp, #48	@ 0x30
 8029aae:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8029ab0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029ab4:	f013 0f08 	tst.w	r3, #8
 8029ab8:	d012      	beq.n	8029ae0 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 8029aba:	4b2b      	ldr	r3, [pc, #172]	@ (8029b68 <mg_sntp_request+0xc0>)
 8029abc:	681b      	ldr	r3, [r3, #0]
 8029abe:	2b00      	cmp	r3, #0
 8029ac0:	dc02      	bgt.n	8029ac8 <mg_sntp_request+0x20>
}
 8029ac2:	b00c      	add	sp, #48	@ 0x30
 8029ac4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8029ac8:	4b28      	ldr	r3, [pc, #160]	@ (8029b6c <mg_sntp_request+0xc4>)
 8029aca:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 8029ace:	4928      	ldr	r1, [pc, #160]	@ (8029b70 <mg_sntp_request+0xc8>)
 8029ad0:	2001      	movs	r0, #1
 8029ad2:	f7fc fad9 	bl	8026088 <mg_log_prefix>
 8029ad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029ad8:	4826      	ldr	r0, [pc, #152]	@ (8029b74 <mg_sntp_request+0xcc>)
 8029ada:	f7fa f983 	bl	8023de4 <mg_log>
 8029ade:	e7f0      	b.n	8029ac2 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8029ae0:	f7fc facc 	bl	802607c <mg_millis>
 8029ae4:	4606      	mov	r6, r0
 8029ae6:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8029ae8:	2100      	movs	r1, #0
 8029aea:	9100      	str	r1, [sp, #0]
 8029aec:	222c      	movs	r2, #44	@ 0x2c
 8029aee:	a801      	add	r0, sp, #4
 8029af0:	f002 fec6 	bl	802c880 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8029af4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029af8:	2300      	movs	r3, #0
 8029afa:	4630      	mov	r0, r6
 8029afc:	4629      	mov	r1, r5
 8029afe:	f7e7 f8db 	bl	8010cb8 <__aeabi_ldivmod>
 8029b02:	4610      	mov	r0, r2
 8029b04:	4619      	mov	r1, r3
 8029b06:	f7e6 fd61 	bl	80105cc <__aeabi_l2d>
 8029b0a:	2200      	movs	r2, #0
 8029b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8029b78 <mg_sntp_request+0xd0>)
 8029b0e:	f7e6 feb5 	bl	801087c <__aeabi_ddiv>
 8029b12:	a313      	add	r3, pc, #76	@ (adr r3, 8029b60 <mg_sntp_request+0xb8>)
 8029b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029b18:	f7e6 fd86 	bl	8010628 <__aeabi_dmul>
 8029b1c:	4680      	mov	r8, r0
 8029b1e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8029b20:	2323      	movs	r3, #35	@ 0x23
 8029b22:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8029b26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029b2a:	2300      	movs	r3, #0
 8029b2c:	4630      	mov	r0, r6
 8029b2e:	4629      	mov	r1, r5
 8029b30:	f7e7 f8c2 	bl	8010cb8 <__aeabi_ldivmod>
 8029b34:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 8029b38:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 8029b3c:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 8029b40:	f7fb fec8 	bl	80258d4 <mg_ntohl>
 8029b44:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 8029b46:	4640      	mov	r0, r8
 8029b48:	4649      	mov	r1, r9
 8029b4a:	f7e7 f845 	bl	8010bd8 <__aeabi_d2uiz>
 8029b4e:	f7fb fec1 	bl	80258d4 <mg_ntohl>
 8029b52:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 8029b54:	2230      	movs	r2, #48	@ 0x30
 8029b56:	4669      	mov	r1, sp
 8029b58:	4620      	mov	r0, r4
 8029b5a:	f7fd fb49 	bl	80271f0 <mg_send>
}
 8029b5e:	e7b0      	b.n	8029ac2 <mg_sntp_request+0x1a>
 8029b60:	ffe00000 	.word	0xffe00000
 8029b64:	41efffff 	.word	0x41efffff
 8029b68:	2000012c 	.word	0x2000012c
 8029b6c:	0803b2e8 	.word	0x0803b2e8
 8029b70:	0803aa28 	.word	0x0803aa28
 8029b74:	0803b248 	.word	0x0803b248
 8029b78:	408f4000 	.word	0x408f4000

08029b7c <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 8029b7c:	b570      	push	{r4, r5, r6, lr}
 8029b7e:	b082      	sub	sp, #8
 8029b80:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 8029b82:	3901      	subs	r1, #1
 8029b84:	2906      	cmp	r1, #6
 8029b86:	d810      	bhi.n	8029baa <sntp_cb+0x2e>
 8029b88:	e8df f001 	tbb	[pc, r1]
 8029b8c:	110f4604 	.word	0x110f4604
 8029b90:	0f0f      	.short	0x0f0f
 8029b92:	14          	.byte	0x14
 8029b93:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8029b94:	f7fc fa72 	bl	802607c <mg_millis>
 8029b98:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8029b9c:	18c0      	adds	r0, r0, r3
 8029b9e:	f141 0100 	adc.w	r1, r1, #0
 8029ba2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029ba6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 8029baa:	b002      	add	sp, #8
 8029bac:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 8029bae:	f7ff ff7b 	bl	8029aa8 <mg_sntp_request>
 8029bb2:	e7fa      	b.n	8029baa <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8029bb4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8029bb6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8029bb8:	f7ff febe 	bl	8029938 <mg_sntp_parse>
 8029bbc:	4605      	mov	r5, r0
 8029bbe:	460e      	mov	r6, r1
 8029bc0:	9000      	str	r0, [sp, #0]
 8029bc2:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8029bc4:	2801      	cmp	r0, #1
 8029bc6:	f171 0300 	sbcs.w	r3, r1, #0
 8029bca:	da06      	bge.n	8029bda <sntp_cb+0x5e>
    c->is_closing = 1;
 8029bcc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029bd0:	f043 0320 	orr.w	r3, r3, #32
 8029bd4:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8029bd8:	e7e7      	b.n	8029baa <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 8029bda:	f7fc fa4f 	bl	802607c <mg_millis>
 8029bde:	1a2d      	subs	r5, r5, r0
 8029be0:	eb66 0601 	sbc.w	r6, r6, r1
 8029be4:	4b14      	ldr	r3, [pc, #80]	@ (8029c38 <sntp_cb+0xbc>)
 8029be6:	601d      	str	r5, [r3, #0]
 8029be8:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8029bea:	466a      	mov	r2, sp
 8029bec:	2112      	movs	r1, #18
 8029bee:	4620      	mov	r0, r4
 8029bf0:	f7f8 feaf 	bl	8022952 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8029bf4:	4b11      	ldr	r3, [pc, #68]	@ (8029c3c <sntp_cb+0xc0>)
 8029bf6:	681b      	ldr	r3, [r3, #0]
 8029bf8:	2b02      	cmp	r3, #2
 8029bfa:	dde7      	ble.n	8029bcc <sntp_cb+0x50>
 8029bfc:	4b10      	ldr	r3, [pc, #64]	@ (8029c40 <sntp_cb+0xc4>)
 8029bfe:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8029c02:	4910      	ldr	r1, [pc, #64]	@ (8029c44 <sntp_cb+0xc8>)
 8029c04:	2003      	movs	r0, #3
 8029c06:	f7fc fa3f 	bl	8026088 <mg_log_prefix>
 8029c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029c0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029c10:	480d      	ldr	r0, [pc, #52]	@ (8029c48 <sntp_cb+0xcc>)
 8029c12:	f7fa f8e7 	bl	8023de4 <mg_log>
 8029c16:	e7d9      	b.n	8029bcc <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8029c18:	f7fc fa30 	bl	802607c <mg_millis>
 8029c1c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8029c20:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8029c24:	4282      	cmp	r2, r0
 8029c26:	418b      	sbcs	r3, r1
 8029c28:	d2bf      	bcs.n	8029baa <sntp_cb+0x2e>
 8029c2a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029c2e:	f043 0320 	orr.w	r3, r3, #32
 8029c32:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 8029c36:	e7b8      	b.n	8029baa <sntp_cb+0x2e>
 8029c38:	20019ed8 	.word	0x20019ed8
 8029c3c:	2000012c 	.word	0x2000012c
 8029c40:	0803b2e0 	.word	0x0803b2e0
 8029c44:	0803aa28 	.word	0x0803aa28
 8029c48:	0803b260 	.word	0x0803b260

08029c4c <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 8029c4c:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 8029c4e:	460d      	mov	r5, r1
 8029c50:	b169      	cbz	r1, 8029c6e <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8029c52:	4629      	mov	r1, r5
 8029c54:	f7fe ffa0 	bl	8028b98 <mg_connect>
 8029c58:	4604      	mov	r4, r0
 8029c5a:	b130      	cbz	r0, 8029c6a <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 8029c5c:	4b05      	ldr	r3, [pc, #20]	@ (8029c74 <mg_sntp_connect+0x28>)
 8029c5e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8029c62:	462a      	mov	r2, r5
 8029c64:	2101      	movs	r1, #1
 8029c66:	f7ff ff89 	bl	8029b7c <sntp_cb>
}
 8029c6a:	4620      	mov	r0, r4
 8029c6c:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 8029c6e:	4d02      	ldr	r5, [pc, #8]	@ (8029c78 <mg_sntp_connect+0x2c>)
 8029c70:	e7ef      	b.n	8029c52 <mg_sntp_connect+0x6>
 8029c72:	bf00      	nop
 8029c74:	08029b7d 	.word	0x08029b7d
 8029c78:	0803b284 	.word	0x0803b284

08029c7c <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8029c7c:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 8029c7e:	2207      	movs	r2, #7
 8029c80:	4903      	ldr	r1, [pc, #12]	@ (8029c90 <has_mqtt_prefix+0x14>)
 8029c82:	f002 fe32 	bl	802c8ea <strncmp>
}
 8029c86:	fab0 f080 	clz	r0, r0
 8029c8a:	0940      	lsrs	r0, r0, #5
 8029c8c:	bd08      	pop	{r3, pc}
 8029c8e:	bf00      	nop
 8029c90:	0803b900 	.word	0x0803b900

08029c94 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8029c94:	b570      	push	{r4, r5, r6, lr}
 8029c96:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8029c98:	2200      	movs	r2, #0
    int dot_count = 0;
 8029c9a:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 8029c9c:	e001      	b.n	8029ca2 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 8029c9e:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029ca0:	3201      	adds	r2, #1
 8029ca2:	5ca3      	ldrb	r3, [r4, r2]
 8029ca4:	b143      	cbz	r3, 8029cb8 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8029ca6:	2b2e      	cmp	r3, #46	@ 0x2e
 8029ca8:	d0f9      	beq.n	8029c9e <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 8029caa:	491d      	ldr	r1, [pc, #116]	@ (8029d20 <is_valid_ip_or_domain+0x8c>)
 8029cac:	5ccb      	ldrb	r3, [r1, r3]
 8029cae:	f013 0f04 	tst.w	r3, #4
 8029cb2:	d1f5      	bne.n	8029ca0 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8029cb4:	2500      	movs	r5, #0
 8029cb6:	e000      	b.n	8029cba <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8029cb8:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 8029cba:	b335      	cbz	r5, 8029d0a <is_valid_ip_or_domain+0x76>
 8029cbc:	2803      	cmp	r0, #3
 8029cbe:	d013      	beq.n	8029ce8 <is_valid_ip_or_domain+0x54>
 8029cc0:	2200      	movs	r2, #0
 8029cc2:	4615      	mov	r5, r2
 8029cc4:	e014      	b.n	8029cf0 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8029cc6:	3601      	adds	r6, #1
 8029cc8:	2e03      	cmp	r6, #3
 8029cca:	dc24      	bgt.n	8029d16 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 8029ccc:	4620      	mov	r0, r4
 8029cce:	f000 f8a3 	bl	8029e18 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029cd2:	28ff      	cmp	r0, #255	@ 0xff
 8029cd4:	d821      	bhi.n	8029d1a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8029cd6:	212e      	movs	r1, #46	@ 0x2e
 8029cd8:	4620      	mov	r0, r4
 8029cda:	f002 fde8 	bl	802c8ae <strchr>
            if (ptr != NULL) ptr++;
 8029cde:	4604      	mov	r4, r0
 8029ce0:	2800      	cmp	r0, #0
 8029ce2:	d0f0      	beq.n	8029cc6 <is_valid_ip_or_domain+0x32>
 8029ce4:	3401      	adds	r4, #1
 8029ce6:	e7ee      	b.n	8029cc6 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8029ce8:	2600      	movs	r6, #0
 8029cea:	e7ed      	b.n	8029cc8 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 8029cec:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029cee:	3201      	adds	r2, #1
 8029cf0:	5ca3      	ldrb	r3, [r4, r2]
 8029cf2:	b163      	cbz	r3, 8029d0e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8029cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8029cf6:	d0f9      	beq.n	8029cec <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8029cf8:	4909      	ldr	r1, [pc, #36]	@ (8029d20 <is_valid_ip_or_domain+0x8c>)
 8029cfa:	5cc9      	ldrb	r1, [r1, r3]
 8029cfc:	f011 0f07 	tst.w	r1, #7
 8029d00:	d1f5      	bne.n	8029cee <is_valid_ip_or_domain+0x5a>
 8029d02:	2b2d      	cmp	r3, #45	@ 0x2d
 8029d04:	d0f3      	beq.n	8029cee <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8029d06:	2500      	movs	r5, #0
 8029d08:	e005      	b.n	8029d16 <is_valid_ip_or_domain+0x82>
 8029d0a:	462a      	mov	r2, r5
 8029d0c:	e7f0      	b.n	8029cf0 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8029d0e:	2d00      	cmp	r5, #0
 8029d10:	bfd4      	ite	le
 8029d12:	2500      	movle	r5, #0
 8029d14:	2501      	movgt	r5, #1
}
 8029d16:	4628      	mov	r0, r5
 8029d18:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029d1a:	2500      	movs	r5, #0
 8029d1c:	e7fb      	b.n	8029d16 <is_valid_ip_or_domain+0x82>
 8029d1e:	bf00      	nop
 8029d20:	0803bda1 	.word	0x0803bda1

08029d24 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8029d24:	b510      	push	{r4, lr}
 8029d26:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8029d28:	f000 f876 	bl	8029e18 <atoi>
    if (port < 1 || port > MAX_PORT) {
 8029d2c:	3801      	subs	r0, #1
 8029d2e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8029d32:	4298      	cmp	r0, r3
 8029d34:	d80a      	bhi.n	8029d4c <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 8029d36:	7823      	ldrb	r3, [r4, #0]
 8029d38:	b133      	cbz	r3, 8029d48 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 8029d3a:	4a06      	ldr	r2, [pc, #24]	@ (8029d54 <is_valid_port+0x30>)
 8029d3c:	5cd3      	ldrb	r3, [r2, r3]
 8029d3e:	f013 0f04 	tst.w	r3, #4
 8029d42:	d005      	beq.n	8029d50 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 8029d44:	3401      	adds	r4, #1
 8029d46:	e7f6      	b.n	8029d36 <is_valid_port+0x12>
    }
    return 1;
 8029d48:	2001      	movs	r0, #1
 8029d4a:	e000      	b.n	8029d4e <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 8029d4c:	2000      	movs	r0, #0
}
 8029d4e:	bd10      	pop	{r4, pc}
            return 0;
 8029d50:	2000      	movs	r0, #0
 8029d52:	e7fc      	b.n	8029d4e <is_valid_port+0x2a>
 8029d54:	0803bda1 	.word	0x0803bda1

08029d58 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 8029d58:	b570      	push	{r4, r5, r6, lr}
 8029d5a:	b0c0      	sub	sp, #256	@ 0x100
 8029d5c:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 8029d5e:	f7ff ff8d 	bl	8029c7c <has_mqtt_prefix>
 8029d62:	b1d0      	cbz	r0, 8029d9a <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 8029d64:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 8029d66:	213a      	movs	r1, #58	@ 0x3a
 8029d68:	4620      	mov	r0, r4
 8029d6a:	f002 fda0 	bl	802c8ae <strchr>
    if (!colon) {
 8029d6e:	4606      	mov	r6, r0
 8029d70:	b1c8      	cbz	r0, 8029da6 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 8029d72:	1b05      	subs	r5, r0, r4
 8029d74:	462a      	mov	r2, r5
 8029d76:	4621      	mov	r1, r4
 8029d78:	4668      	mov	r0, sp
 8029d7a:	f002 fdc8 	bl	802c90e <strncpy>
    host[colon - host_start] = '\0';
 8029d7e:	2300      	movs	r3, #0
 8029d80:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 8029d84:	4668      	mov	r0, sp
 8029d86:	f7ff ff85 	bl	8029c94 <is_valid_ip_or_domain>
 8029d8a:	b190      	cbz	r0, 8029db2 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 8029d8c:	1c70      	adds	r0, r6, #1
 8029d8e:	f7ff ffc9 	bl	8029d24 <is_valid_port>
 8029d92:	b1a0      	cbz	r0, 8029dbe <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8029d94:	2000      	movs	r0, #0
}
 8029d96:	b040      	add	sp, #256	@ 0x100
 8029d98:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 8029d9a:	480c      	ldr	r0, [pc, #48]	@ (8029dcc <is_valid_mqtt_url+0x74>)
 8029d9c:	f002 f818 	bl	802bdd0 <puts>
        return -1;
 8029da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029da4:	e7f7      	b.n	8029d96 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8029da6:	480a      	ldr	r0, [pc, #40]	@ (8029dd0 <is_valid_mqtt_url+0x78>)
 8029da8:	f002 f812 	bl	802bdd0 <puts>
        return -2;
 8029dac:	f06f 0001 	mvn.w	r0, #1
 8029db0:	e7f1      	b.n	8029d96 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8029db2:	4808      	ldr	r0, [pc, #32]	@ (8029dd4 <is_valid_mqtt_url+0x7c>)
 8029db4:	f002 f80c 	bl	802bdd0 <puts>
        return -3;
 8029db8:	f06f 0002 	mvn.w	r0, #2
 8029dbc:	e7eb      	b.n	8029d96 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 8029dbe:	4806      	ldr	r0, [pc, #24]	@ (8029dd8 <is_valid_mqtt_url+0x80>)
 8029dc0:	f002 f806 	bl	802bdd0 <puts>
        return -4;
 8029dc4:	f06f 0003 	mvn.w	r0, #3
 8029dc8:	e7e5      	b.n	8029d96 <is_valid_mqtt_url+0x3e>
 8029dca:	bf00      	nop
 8029dcc:	0803b908 	.word	0x0803b908
 8029dd0:	0803b934 	.word	0x0803b934
 8029dd4:	0803b968 	.word	0x0803b968
 8029dd8:	0803b98c 	.word	0x0803b98c

08029ddc <__assert_func>:
 8029ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029dde:	4614      	mov	r4, r2
 8029de0:	461a      	mov	r2, r3
 8029de2:	4b09      	ldr	r3, [pc, #36]	@ (8029e08 <__assert_func+0x2c>)
 8029de4:	681b      	ldr	r3, [r3, #0]
 8029de6:	4605      	mov	r5, r0
 8029de8:	68d8      	ldr	r0, [r3, #12]
 8029dea:	b954      	cbnz	r4, 8029e02 <__assert_func+0x26>
 8029dec:	4b07      	ldr	r3, [pc, #28]	@ (8029e0c <__assert_func+0x30>)
 8029dee:	461c      	mov	r4, r3
 8029df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029df4:	9100      	str	r1, [sp, #0]
 8029df6:	462b      	mov	r3, r5
 8029df8:	4905      	ldr	r1, [pc, #20]	@ (8029e10 <__assert_func+0x34>)
 8029dfa:	f000 f811 	bl	8029e20 <fiprintf>
 8029dfe:	f003 ffdf 	bl	802ddc0 <abort>
 8029e02:	4b04      	ldr	r3, [pc, #16]	@ (8029e14 <__assert_func+0x38>)
 8029e04:	e7f4      	b.n	8029df0 <__assert_func+0x14>
 8029e06:	bf00      	nop
 8029e08:	200002d8 	.word	0x200002d8
 8029e0c:	0803b9e2 	.word	0x0803b9e2
 8029e10:	0803b9b4 	.word	0x0803b9b4
 8029e14:	0803b9a7 	.word	0x0803b9a7

08029e18 <atoi>:
 8029e18:	220a      	movs	r2, #10
 8029e1a:	2100      	movs	r1, #0
 8029e1c:	f002 b8b6 	b.w	802bf8c <strtol>

08029e20 <fiprintf>:
 8029e20:	b40e      	push	{r1, r2, r3}
 8029e22:	b503      	push	{r0, r1, lr}
 8029e24:	4601      	mov	r1, r0
 8029e26:	ab03      	add	r3, sp, #12
 8029e28:	4805      	ldr	r0, [pc, #20]	@ (8029e40 <fiprintf+0x20>)
 8029e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029e2e:	6800      	ldr	r0, [r0, #0]
 8029e30:	9301      	str	r3, [sp, #4]
 8029e32:	f001 fab7 	bl	802b3a4 <_vfiprintf_r>
 8029e36:	b002      	add	sp, #8
 8029e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8029e3c:	b003      	add	sp, #12
 8029e3e:	4770      	bx	lr
 8029e40:	200002d8 	.word	0x200002d8

08029e44 <printf>:
 8029e44:	b40f      	push	{r0, r1, r2, r3}
 8029e46:	b507      	push	{r0, r1, r2, lr}
 8029e48:	4906      	ldr	r1, [pc, #24]	@ (8029e64 <printf+0x20>)
 8029e4a:	ab04      	add	r3, sp, #16
 8029e4c:	6808      	ldr	r0, [r1, #0]
 8029e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029e52:	6881      	ldr	r1, [r0, #8]
 8029e54:	9301      	str	r3, [sp, #4]
 8029e56:	f000 f807 	bl	8029e68 <_vfprintf_r>
 8029e5a:	b003      	add	sp, #12
 8029e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029e60:	b004      	add	sp, #16
 8029e62:	4770      	bx	lr
 8029e64:	200002d8 	.word	0x200002d8

08029e68 <_vfprintf_r>:
 8029e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e6c:	b0d3      	sub	sp, #332	@ 0x14c
 8029e6e:	468b      	mov	fp, r1
 8029e70:	4690      	mov	r8, r2
 8029e72:	461c      	mov	r4, r3
 8029e74:	461e      	mov	r6, r3
 8029e76:	9003      	str	r0, [sp, #12]
 8029e78:	f003 fe90 	bl	802db9c <_localeconv_r>
 8029e7c:	6803      	ldr	r3, [r0, #0]
 8029e7e:	9316      	str	r3, [sp, #88]	@ 0x58
 8029e80:	4618      	mov	r0, r3
 8029e82:	f7e6 fa0d 	bl	80102a0 <strlen>
 8029e86:	9b03      	ldr	r3, [sp, #12]
 8029e88:	900d      	str	r0, [sp, #52]	@ 0x34
 8029e8a:	b123      	cbz	r3, 8029e96 <_vfprintf_r+0x2e>
 8029e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029e8e:	b913      	cbnz	r3, 8029e96 <_vfprintf_r+0x2e>
 8029e90:	9803      	ldr	r0, [sp, #12]
 8029e92:	f002 fa4f 	bl	802c334 <__sinit>
 8029e96:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029e9a:	07da      	lsls	r2, r3, #31
 8029e9c:	d407      	bmi.n	8029eae <_vfprintf_r+0x46>
 8029e9e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029ea2:	059b      	lsls	r3, r3, #22
 8029ea4:	d403      	bmi.n	8029eae <_vfprintf_r+0x46>
 8029ea6:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029eaa:	f003 ff22 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 8029eae:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8029eb2:	049f      	lsls	r7, r3, #18
 8029eb4:	d409      	bmi.n	8029eca <_vfprintf_r+0x62>
 8029eb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8029eba:	f8ab 300c 	strh.w	r3, [fp, #12]
 8029ebe:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8029ec6:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 8029eca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029ece:	071d      	lsls	r5, r3, #28
 8029ed0:	d502      	bpl.n	8029ed8 <_vfprintf_r+0x70>
 8029ed2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8029ed6:	b9c3      	cbnz	r3, 8029f0a <_vfprintf_r+0xa2>
 8029ed8:	9803      	ldr	r0, [sp, #12]
 8029eda:	4659      	mov	r1, fp
 8029edc:	f002 fbe6 	bl	802c6ac <__swsetup_r>
 8029ee0:	b198      	cbz	r0, 8029f0a <_vfprintf_r+0xa2>
 8029ee2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029ee6:	07d8      	lsls	r0, r3, #31
 8029ee8:	d506      	bpl.n	8029ef8 <_vfprintf_r+0x90>
 8029eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8029eee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029ef0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8029ef2:	b053      	add	sp, #332	@ 0x14c
 8029ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ef8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029efc:	0599      	lsls	r1, r3, #22
 8029efe:	d4f4      	bmi.n	8029eea <_vfprintf_r+0x82>
 8029f00:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029f04:	f003 fef7 	bl	802dcf6 <__retarget_lock_release_recursive>
 8029f08:	e7ef      	b.n	8029eea <_vfprintf_r+0x82>
 8029f0a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8029f0e:	f003 021a 	and.w	r2, r3, #26
 8029f12:	2a0a      	cmp	r2, #10
 8029f14:	d116      	bne.n	8029f44 <_vfprintf_r+0xdc>
 8029f16:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8029f1a:	2a00      	cmp	r2, #0
 8029f1c:	db12      	blt.n	8029f44 <_vfprintf_r+0xdc>
 8029f1e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8029f22:	07d2      	lsls	r2, r2, #31
 8029f24:	d405      	bmi.n	8029f32 <_vfprintf_r+0xca>
 8029f26:	059b      	lsls	r3, r3, #22
 8029f28:	d403      	bmi.n	8029f32 <_vfprintf_r+0xca>
 8029f2a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029f2e:	f003 fee2 	bl	802dcf6 <__retarget_lock_release_recursive>
 8029f32:	9803      	ldr	r0, [sp, #12]
 8029f34:	4623      	mov	r3, r4
 8029f36:	4642      	mov	r2, r8
 8029f38:	4659      	mov	r1, fp
 8029f3a:	b053      	add	sp, #332	@ 0x14c
 8029f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f40:	f001 b9be 	b.w	802b2c0 <__sbprintf>
 8029f44:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 802a190 <_vfprintf_r+0x328>
 8029f48:	2300      	movs	r3, #0
 8029f4a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8029f4e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8029f52:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8029f56:	ac29      	add	r4, sp, #164	@ 0xa4
 8029f58:	9426      	str	r4, [sp, #152]	@ 0x98
 8029f5a:	9304      	str	r3, [sp, #16]
 8029f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8029f5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8029f60:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029f64:	4643      	mov	r3, r8
 8029f66:	461d      	mov	r5, r3
 8029f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029f6c:	b10a      	cbz	r2, 8029f72 <_vfprintf_r+0x10a>
 8029f6e:	2a25      	cmp	r2, #37	@ 0x25
 8029f70:	d1f9      	bne.n	8029f66 <_vfprintf_r+0xfe>
 8029f72:	ebb5 0708 	subs.w	r7, r5, r8
 8029f76:	d00d      	beq.n	8029f94 <_vfprintf_r+0x12c>
 8029f78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029f7a:	443b      	add	r3, r7
 8029f7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029f7e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029f80:	3301      	adds	r3, #1
 8029f82:	2b07      	cmp	r3, #7
 8029f84:	e9c4 8700 	strd	r8, r7, [r4]
 8029f88:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029f8a:	dc75      	bgt.n	802a078 <_vfprintf_r+0x210>
 8029f8c:	3408      	adds	r4, #8
 8029f8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029f90:	443b      	add	r3, r7
 8029f92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029f94:	782b      	ldrb	r3, [r5, #0]
 8029f96:	2b00      	cmp	r3, #0
 8029f98:	f001 814f 	beq.w	802b23a <_vfprintf_r+0x13d2>
 8029f9c:	2200      	movs	r2, #0
 8029f9e:	1c6b      	adds	r3, r5, #1
 8029fa0:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8029fa4:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8029fa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8029faa:	4615      	mov	r5, r2
 8029fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029fb0:	9206      	str	r2, [sp, #24]
 8029fb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8029fb4:	9b06      	ldr	r3, [sp, #24]
 8029fb6:	3b20      	subs	r3, #32
 8029fb8:	2b5a      	cmp	r3, #90	@ 0x5a
 8029fba:	f200 85aa 	bhi.w	802ab12 <_vfprintf_r+0xcaa>
 8029fbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8029fc2:	009d      	.short	0x009d
 8029fc4:	05a805a8 	.word	0x05a805a8
 8029fc8:	05a800a5 	.word	0x05a800a5
 8029fcc:	05a805a8 	.word	0x05a805a8
 8029fd0:	05a80085 	.word	0x05a80085
 8029fd4:	00a805a8 	.word	0x00a805a8
 8029fd8:	05a800b2 	.word	0x05a800b2
 8029fdc:	00b400af 	.word	0x00b400af
 8029fe0:	00ce05a8 	.word	0x00ce05a8
 8029fe4:	00d100d1 	.word	0x00d100d1
 8029fe8:	00d100d1 	.word	0x00d100d1
 8029fec:	00d100d1 	.word	0x00d100d1
 8029ff0:	00d100d1 	.word	0x00d100d1
 8029ff4:	05a800d1 	.word	0x05a800d1
 8029ff8:	05a805a8 	.word	0x05a805a8
 8029ffc:	05a805a8 	.word	0x05a805a8
 802a000:	05a805a8 	.word	0x05a805a8
 802a004:	05a80146 	.word	0x05a80146
 802a008:	011a0107 	.word	0x011a0107
 802a00c:	01460146 	.word	0x01460146
 802a010:	05a80146 	.word	0x05a80146
 802a014:	05a805a8 	.word	0x05a805a8
 802a018:	00e205a8 	.word	0x00e205a8
 802a01c:	05a805a8 	.word	0x05a805a8
 802a020:	05a804a3 	.word	0x05a804a3
 802a024:	05a805a8 	.word	0x05a805a8
 802a028:	05a804ed 	.word	0x05a804ed
 802a02c:	05a8050e 	.word	0x05a8050e
 802a030:	053005a8 	.word	0x053005a8
 802a034:	05a805a8 	.word	0x05a805a8
 802a038:	05a805a8 	.word	0x05a805a8
 802a03c:	05a805a8 	.word	0x05a805a8
 802a040:	05a805a8 	.word	0x05a805a8
 802a044:	05a80146 	.word	0x05a80146
 802a048:	011c0107 	.word	0x011c0107
 802a04c:	01460146 	.word	0x01460146
 802a050:	00ed0146 	.word	0x00ed0146
 802a054:	0101011c 	.word	0x0101011c
 802a058:	00fa05a8 	.word	0x00fa05a8
 802a05c:	048705a8 	.word	0x048705a8
 802a060:	04dc04a5 	.word	0x04dc04a5
 802a064:	05a80101 	.word	0x05a80101
 802a068:	009b04ed 	.word	0x009b04ed
 802a06c:	05a80510 	.word	0x05a80510
 802a070:	006505a8 	.word	0x006505a8
 802a074:	009b05a8 	.word	0x009b05a8
 802a078:	9803      	ldr	r0, [sp, #12]
 802a07a:	aa26      	add	r2, sp, #152	@ 0x98
 802a07c:	4659      	mov	r1, fp
 802a07e:	f001 f95f 	bl	802b340 <__sprint_r>
 802a082:	2800      	cmp	r0, #0
 802a084:	f040 814d 	bne.w	802a322 <_vfprintf_r+0x4ba>
 802a088:	ac29      	add	r4, sp, #164	@ 0xa4
 802a08a:	e780      	b.n	8029f8e <_vfprintf_r+0x126>
 802a08c:	4b42      	ldr	r3, [pc, #264]	@ (802a198 <_vfprintf_r+0x330>)
 802a08e:	9319      	str	r3, [sp, #100]	@ 0x64
 802a090:	f015 0320 	ands.w	r3, r5, #32
 802a094:	f000 84c8 	beq.w	802aa28 <_vfprintf_r+0xbc0>
 802a098:	3607      	adds	r6, #7
 802a09a:	f026 0307 	bic.w	r3, r6, #7
 802a09e:	461a      	mov	r2, r3
 802a0a0:	685f      	ldr	r7, [r3, #4]
 802a0a2:	f852 6b08 	ldr.w	r6, [r2], #8
 802a0a6:	9207      	str	r2, [sp, #28]
 802a0a8:	07eb      	lsls	r3, r5, #31
 802a0aa:	d50a      	bpl.n	802a0c2 <_vfprintf_r+0x25a>
 802a0ac:	ea56 0307 	orrs.w	r3, r6, r7
 802a0b0:	d007      	beq.n	802a0c2 <_vfprintf_r+0x25a>
 802a0b2:	2330      	movs	r3, #48	@ 0x30
 802a0b4:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a0b8:	9b06      	ldr	r3, [sp, #24]
 802a0ba:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a0be:	f045 0502 	orr.w	r5, r5, #2
 802a0c2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a0c6:	2302      	movs	r3, #2
 802a0c8:	f000 bc2e 	b.w	802a928 <_vfprintf_r+0xac0>
 802a0cc:	9803      	ldr	r0, [sp, #12]
 802a0ce:	f003 fd65 	bl	802db9c <_localeconv_r>
 802a0d2:	6843      	ldr	r3, [r0, #4]
 802a0d4:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a0d6:	4618      	mov	r0, r3
 802a0d8:	f7e6 f8e2 	bl	80102a0 <strlen>
 802a0dc:	9012      	str	r0, [sp, #72]	@ 0x48
 802a0de:	9803      	ldr	r0, [sp, #12]
 802a0e0:	f003 fd5c 	bl	802db9c <_localeconv_r>
 802a0e4:	6883      	ldr	r3, [r0, #8]
 802a0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a0ea:	b12b      	cbz	r3, 802a0f8 <_vfprintf_r+0x290>
 802a0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a0ee:	b11b      	cbz	r3, 802a0f8 <_vfprintf_r+0x290>
 802a0f0:	781b      	ldrb	r3, [r3, #0]
 802a0f2:	b10b      	cbz	r3, 802a0f8 <_vfprintf_r+0x290>
 802a0f4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a0f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a0fa:	e757      	b.n	8029fac <_vfprintf_r+0x144>
 802a0fc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a100:	2b00      	cmp	r3, #0
 802a102:	d1f9      	bne.n	802a0f8 <_vfprintf_r+0x290>
 802a104:	2320      	movs	r3, #32
 802a106:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a10a:	e7f5      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a10c:	f045 0501 	orr.w	r5, r5, #1
 802a110:	e7f2      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a112:	f856 3b04 	ldr.w	r3, [r6], #4
 802a116:	930e      	str	r3, [sp, #56]	@ 0x38
 802a118:	2b00      	cmp	r3, #0
 802a11a:	daed      	bge.n	802a0f8 <_vfprintf_r+0x290>
 802a11c:	425b      	negs	r3, r3
 802a11e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a120:	f045 0504 	orr.w	r5, r5, #4
 802a124:	e7e8      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a126:	232b      	movs	r3, #43	@ 0x2b
 802a128:	e7ed      	b.n	802a106 <_vfprintf_r+0x29e>
 802a12a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a12c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a130:	9206      	str	r2, [sp, #24]
 802a132:	2a2a      	cmp	r2, #42	@ 0x2a
 802a134:	d10f      	bne.n	802a156 <_vfprintf_r+0x2ee>
 802a136:	f856 2b04 	ldr.w	r2, [r6], #4
 802a13a:	930c      	str	r3, [sp, #48]	@ 0x30
 802a13c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 802a140:	e7da      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a142:	fb01 2909 	mla	r9, r1, r9, r2
 802a146:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a14a:	9206      	str	r2, [sp, #24]
 802a14c:	9a06      	ldr	r2, [sp, #24]
 802a14e:	3a30      	subs	r2, #48	@ 0x30
 802a150:	2a09      	cmp	r2, #9
 802a152:	d9f6      	bls.n	802a142 <_vfprintf_r+0x2da>
 802a154:	e72d      	b.n	8029fb2 <_vfprintf_r+0x14a>
 802a156:	f04f 0900 	mov.w	r9, #0
 802a15a:	210a      	movs	r1, #10
 802a15c:	e7f6      	b.n	802a14c <_vfprintf_r+0x2e4>
 802a15e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a162:	e7c9      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a164:	2200      	movs	r2, #0
 802a166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a168:	920e      	str	r2, [sp, #56]	@ 0x38
 802a16a:	210a      	movs	r1, #10
 802a16c:	9a06      	ldr	r2, [sp, #24]
 802a16e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a170:	3a30      	subs	r2, #48	@ 0x30
 802a172:	fb01 2200 	mla	r2, r1, r0, r2
 802a176:	920e      	str	r2, [sp, #56]	@ 0x38
 802a178:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a17c:	9206      	str	r2, [sp, #24]
 802a17e:	3a30      	subs	r2, #48	@ 0x30
 802a180:	2a09      	cmp	r2, #9
 802a182:	d9f3      	bls.n	802a16c <_vfprintf_r+0x304>
 802a184:	e715      	b.n	8029fb2 <_vfprintf_r+0x14a>
 802a186:	f045 0508 	orr.w	r5, r5, #8
 802a18a:	e7b5      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a18c:	f3af 8000 	nop.w
	...
 802a198:	0803b9f3 	.word	0x0803b9f3
 802a19c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a19e:	781b      	ldrb	r3, [r3, #0]
 802a1a0:	2b68      	cmp	r3, #104	@ 0x68
 802a1a2:	bf01      	itttt	eq
 802a1a4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a1a6:	3301      	addeq	r3, #1
 802a1a8:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a1aa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a1ae:	bf18      	it	ne
 802a1b0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a1b4:	e7a0      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a1b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1b8:	781b      	ldrb	r3, [r3, #0]
 802a1ba:	2b6c      	cmp	r3, #108	@ 0x6c
 802a1bc:	d105      	bne.n	802a1ca <_vfprintf_r+0x362>
 802a1be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1c0:	3301      	adds	r3, #1
 802a1c2:	930c      	str	r3, [sp, #48]	@ 0x30
 802a1c4:	f045 0520 	orr.w	r5, r5, #32
 802a1c8:	e796      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a1ca:	f045 0510 	orr.w	r5, r5, #16
 802a1ce:	e793      	b.n	802a0f8 <_vfprintf_r+0x290>
 802a1d0:	4632      	mov	r2, r6
 802a1d2:	f852 3b04 	ldr.w	r3, [r2], #4
 802a1d6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a1da:	2300      	movs	r3, #0
 802a1dc:	9207      	str	r2, [sp, #28]
 802a1de:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a1e2:	469a      	mov	sl, r3
 802a1e4:	f04f 0901 	mov.w	r9, #1
 802a1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 802a1ea:	461f      	mov	r7, r3
 802a1ec:	9308      	str	r3, [sp, #32]
 802a1ee:	461e      	mov	r6, r3
 802a1f0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a1f4:	e1da      	b.n	802a5ac <_vfprintf_r+0x744>
 802a1f6:	f045 0510 	orr.w	r5, r5, #16
 802a1fa:	06af      	lsls	r7, r5, #26
 802a1fc:	d512      	bpl.n	802a224 <_vfprintf_r+0x3bc>
 802a1fe:	3607      	adds	r6, #7
 802a200:	f026 0307 	bic.w	r3, r6, #7
 802a204:	461a      	mov	r2, r3
 802a206:	685f      	ldr	r7, [r3, #4]
 802a208:	f852 6b08 	ldr.w	r6, [r2], #8
 802a20c:	9207      	str	r2, [sp, #28]
 802a20e:	2f00      	cmp	r7, #0
 802a210:	da06      	bge.n	802a220 <_vfprintf_r+0x3b8>
 802a212:	4276      	negs	r6, r6
 802a214:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a218:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a21c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a220:	2301      	movs	r3, #1
 802a222:	e384      	b.n	802a92e <_vfprintf_r+0xac6>
 802a224:	4633      	mov	r3, r6
 802a226:	06ee      	lsls	r6, r5, #27
 802a228:	f853 7b04 	ldr.w	r7, [r3], #4
 802a22c:	9307      	str	r3, [sp, #28]
 802a22e:	d502      	bpl.n	802a236 <_vfprintf_r+0x3ce>
 802a230:	463e      	mov	r6, r7
 802a232:	17ff      	asrs	r7, r7, #31
 802a234:	e7eb      	b.n	802a20e <_vfprintf_r+0x3a6>
 802a236:	0668      	lsls	r0, r5, #25
 802a238:	d503      	bpl.n	802a242 <_vfprintf_r+0x3da>
 802a23a:	b23e      	sxth	r6, r7
 802a23c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a240:	e7e5      	b.n	802a20e <_vfprintf_r+0x3a6>
 802a242:	05a9      	lsls	r1, r5, #22
 802a244:	d5f4      	bpl.n	802a230 <_vfprintf_r+0x3c8>
 802a246:	b27e      	sxtb	r6, r7
 802a248:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a24c:	e7df      	b.n	802a20e <_vfprintf_r+0x3a6>
 802a24e:	3607      	adds	r6, #7
 802a250:	f026 0307 	bic.w	r3, r6, #7
 802a254:	ecb3 7b02 	vldmia	r3!, {d7}
 802a258:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a25c:	9307      	str	r3, [sp, #28]
 802a25e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a260:	931a      	str	r3, [sp, #104]	@ 0x68
 802a262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a268:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a26a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a26e:	4b85      	ldr	r3, [pc, #532]	@ (802a484 <_vfprintf_r+0x61c>)
 802a270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a274:	f7e6 fc72 	bl	8010b5c <__aeabi_dcmpun>
 802a278:	bb10      	cbnz	r0, 802a2c0 <_vfprintf_r+0x458>
 802a27a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a27e:	4b81      	ldr	r3, [pc, #516]	@ (802a484 <_vfprintf_r+0x61c>)
 802a280:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a284:	f7e6 fc4c 	bl	8010b20 <__aeabi_dcmple>
 802a288:	b9d0      	cbnz	r0, 802a2c0 <_vfprintf_r+0x458>
 802a28a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a28e:	2200      	movs	r2, #0
 802a290:	2300      	movs	r3, #0
 802a292:	f7e6 fc3b 	bl	8010b0c <__aeabi_dcmplt>
 802a296:	b110      	cbz	r0, 802a29e <_vfprintf_r+0x436>
 802a298:	232d      	movs	r3, #45	@ 0x2d
 802a29a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a29e:	4a7a      	ldr	r2, [pc, #488]	@ (802a488 <_vfprintf_r+0x620>)
 802a2a0:	4b7a      	ldr	r3, [pc, #488]	@ (802a48c <_vfprintf_r+0x624>)
 802a2a2:	9906      	ldr	r1, [sp, #24]
 802a2a4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a2a8:	2947      	cmp	r1, #71	@ 0x47
 802a2aa:	bfd4      	ite	le
 802a2ac:	4690      	movle	r8, r2
 802a2ae:	4698      	movgt	r8, r3
 802a2b0:	f04f 0a00 	mov.w	sl, #0
 802a2b4:	f04f 0903 	mov.w	r9, #3
 802a2b8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a2bc:	f000 bff8 	b.w	802b2b0 <_vfprintf_r+0x1448>
 802a2c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a2c4:	4610      	mov	r0, r2
 802a2c6:	4619      	mov	r1, r3
 802a2c8:	f7e6 fc48 	bl	8010b5c <__aeabi_dcmpun>
 802a2cc:	4682      	mov	sl, r0
 802a2ce:	b140      	cbz	r0, 802a2e2 <_vfprintf_r+0x47a>
 802a2d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a2d2:	4a6f      	ldr	r2, [pc, #444]	@ (802a490 <_vfprintf_r+0x628>)
 802a2d4:	2b00      	cmp	r3, #0
 802a2d6:	bfbc      	itt	lt
 802a2d8:	232d      	movlt	r3, #45	@ 0x2d
 802a2da:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a2de:	4b6d      	ldr	r3, [pc, #436]	@ (802a494 <_vfprintf_r+0x62c>)
 802a2e0:	e7df      	b.n	802a2a2 <_vfprintf_r+0x43a>
 802a2e2:	9b06      	ldr	r3, [sp, #24]
 802a2e4:	2b61      	cmp	r3, #97	@ 0x61
 802a2e6:	d02e      	beq.n	802a346 <_vfprintf_r+0x4de>
 802a2e8:	2b41      	cmp	r3, #65	@ 0x41
 802a2ea:	d12e      	bne.n	802a34a <_vfprintf_r+0x4e2>
 802a2ec:	2358      	movs	r3, #88	@ 0x58
 802a2ee:	2230      	movs	r2, #48	@ 0x30
 802a2f0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 802a2f4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a2f8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a2fc:	f045 0502 	orr.w	r5, r5, #2
 802a300:	f340 80ae 	ble.w	802a460 <_vfprintf_r+0x5f8>
 802a304:	9803      	ldr	r0, [sp, #12]
 802a306:	f109 0101 	add.w	r1, r9, #1
 802a30a:	f004 fd0f 	bl	802ed2c <_malloc_r>
 802a30e:	4680      	mov	r8, r0
 802a310:	2800      	cmp	r0, #0
 802a312:	f040 80aa 	bne.w	802a46a <_vfprintf_r+0x602>
 802a316:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a31e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a322:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802a326:	07d9      	lsls	r1, r3, #31
 802a328:	d407      	bmi.n	802a33a <_vfprintf_r+0x4d2>
 802a32a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a32e:	059a      	lsls	r2, r3, #22
 802a330:	d403      	bmi.n	802a33a <_vfprintf_r+0x4d2>
 802a332:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802a336:	f003 fcde 	bl	802dcf6 <__retarget_lock_release_recursive>
 802a33a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a33e:	065b      	lsls	r3, r3, #25
 802a340:	f57f add6 	bpl.w	8029ef0 <_vfprintf_r+0x88>
 802a344:	e5d1      	b.n	8029eea <_vfprintf_r+0x82>
 802a346:	2378      	movs	r3, #120	@ 0x78
 802a348:	e7d1      	b.n	802a2ee <_vfprintf_r+0x486>
 802a34a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a34e:	f000 808e 	beq.w	802a46e <_vfprintf_r+0x606>
 802a352:	9b06      	ldr	r3, [sp, #24]
 802a354:	f023 0320 	bic.w	r3, r3, #32
 802a358:	2b47      	cmp	r3, #71	@ 0x47
 802a35a:	d105      	bne.n	802a368 <_vfprintf_r+0x500>
 802a35c:	f1b9 0f00 	cmp.w	r9, #0
 802a360:	d102      	bne.n	802a368 <_vfprintf_r+0x500>
 802a362:	46ca      	mov	sl, r9
 802a364:	f04f 0901 	mov.w	r9, #1
 802a368:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a36c:	9311      	str	r3, [sp, #68]	@ 0x44
 802a36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a370:	2b00      	cmp	r3, #0
 802a372:	da7f      	bge.n	802a474 <_vfprintf_r+0x60c>
 802a374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a376:	9314      	str	r3, [sp, #80]	@ 0x50
 802a378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a37a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a37e:	9315      	str	r3, [sp, #84]	@ 0x54
 802a380:	232d      	movs	r3, #45	@ 0x2d
 802a382:	931c      	str	r3, [sp, #112]	@ 0x70
 802a384:	9b06      	ldr	r3, [sp, #24]
 802a386:	f023 0320 	bic.w	r3, r3, #32
 802a38a:	2b41      	cmp	r3, #65	@ 0x41
 802a38c:	9308      	str	r3, [sp, #32]
 802a38e:	f040 81e7 	bne.w	802a760 <_vfprintf_r+0x8f8>
 802a392:	a820      	add	r0, sp, #128	@ 0x80
 802a394:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a398:	f003 fcd2 	bl	802dd40 <frexp>
 802a39c:	2200      	movs	r2, #0
 802a39e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a3a2:	ec51 0b10 	vmov	r0, r1, d0
 802a3a6:	f7e6 f93f 	bl	8010628 <__aeabi_dmul>
 802a3aa:	4602      	mov	r2, r0
 802a3ac:	460b      	mov	r3, r1
 802a3ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a3b2:	2200      	movs	r2, #0
 802a3b4:	2300      	movs	r3, #0
 802a3b6:	f7e6 fb9f 	bl	8010af8 <__aeabi_dcmpeq>
 802a3ba:	b108      	cbz	r0, 802a3c0 <_vfprintf_r+0x558>
 802a3bc:	2301      	movs	r3, #1
 802a3be:	9320      	str	r3, [sp, #128]	@ 0x80
 802a3c0:	4a35      	ldr	r2, [pc, #212]	@ (802a498 <_vfprintf_r+0x630>)
 802a3c2:	4b36      	ldr	r3, [pc, #216]	@ (802a49c <_vfprintf_r+0x634>)
 802a3c4:	9906      	ldr	r1, [sp, #24]
 802a3c6:	2961      	cmp	r1, #97	@ 0x61
 802a3c8:	bf18      	it	ne
 802a3ca:	461a      	movne	r2, r3
 802a3cc:	9210      	str	r2, [sp, #64]	@ 0x40
 802a3ce:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 802a3d2:	4646      	mov	r6, r8
 802a3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a3d8:	4b31      	ldr	r3, [pc, #196]	@ (802a4a0 <_vfprintf_r+0x638>)
 802a3da:	2200      	movs	r2, #0
 802a3dc:	f7e6 f924 	bl	8010628 <__aeabi_dmul>
 802a3e0:	4602      	mov	r2, r0
 802a3e2:	460b      	mov	r3, r1
 802a3e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a3e8:	f7e6 fbce 	bl	8010b88 <__aeabi_d2iz>
 802a3ec:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a3ee:	f7e6 f8b1 	bl	8010554 <__aeabi_i2d>
 802a3f2:	4602      	mov	r2, r0
 802a3f4:	460b      	mov	r3, r1
 802a3f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a3fa:	f7e5 ff5d 	bl	80102b8 <__aeabi_dsub>
 802a3fe:	4602      	mov	r2, r0
 802a400:	460b      	mov	r3, r1
 802a402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a406:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a40a:	5c9b      	ldrb	r3, [r3, r2]
 802a40c:	f806 3b01 	strb.w	r3, [r6], #1
 802a410:	1c7a      	adds	r2, r7, #1
 802a412:	d006      	beq.n	802a422 <_vfprintf_r+0x5ba>
 802a414:	1e7b      	subs	r3, r7, #1
 802a416:	931d      	str	r3, [sp, #116]	@ 0x74
 802a418:	2200      	movs	r2, #0
 802a41a:	2300      	movs	r3, #0
 802a41c:	f7e6 fb6c 	bl	8010af8 <__aeabi_dcmpeq>
 802a420:	b370      	cbz	r0, 802a480 <_vfprintf_r+0x618>
 802a422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a426:	4b1f      	ldr	r3, [pc, #124]	@ (802a4a4 <_vfprintf_r+0x63c>)
 802a428:	2200      	movs	r2, #0
 802a42a:	f7e6 fb8d 	bl	8010b48 <__aeabi_dcmpgt>
 802a42e:	2800      	cmp	r0, #0
 802a430:	d13a      	bne.n	802a4a8 <_vfprintf_r+0x640>
 802a432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a436:	4b1b      	ldr	r3, [pc, #108]	@ (802a4a4 <_vfprintf_r+0x63c>)
 802a438:	2200      	movs	r2, #0
 802a43a:	f7e6 fb5d 	bl	8010af8 <__aeabi_dcmpeq>
 802a43e:	b110      	cbz	r0, 802a446 <_vfprintf_r+0x5de>
 802a440:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a442:	07db      	lsls	r3, r3, #31
 802a444:	d430      	bmi.n	802a4a8 <_vfprintf_r+0x640>
 802a446:	4633      	mov	r3, r6
 802a448:	19f1      	adds	r1, r6, r7
 802a44a:	2030      	movs	r0, #48	@ 0x30
 802a44c:	1aca      	subs	r2, r1, r3
 802a44e:	2a00      	cmp	r2, #0
 802a450:	f280 8183 	bge.w	802a75a <_vfprintf_r+0x8f2>
 802a454:	1c7b      	adds	r3, r7, #1
 802a456:	3701      	adds	r7, #1
 802a458:	bfb8      	it	lt
 802a45a:	2300      	movlt	r3, #0
 802a45c:	441e      	add	r6, r3
 802a45e:	e037      	b.n	802a4d0 <_vfprintf_r+0x668>
 802a460:	f04f 0a00 	mov.w	sl, #0
 802a464:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 802a468:	e77e      	b.n	802a368 <_vfprintf_r+0x500>
 802a46a:	4682      	mov	sl, r0
 802a46c:	e77c      	b.n	802a368 <_vfprintf_r+0x500>
 802a46e:	f04f 0906 	mov.w	r9, #6
 802a472:	e779      	b.n	802a368 <_vfprintf_r+0x500>
 802a474:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a478:	2300      	movs	r3, #0
 802a47a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a47e:	e780      	b.n	802a382 <_vfprintf_r+0x51a>
 802a480:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a482:	e7a7      	b.n	802a3d4 <_vfprintf_r+0x56c>
 802a484:	7fefffff 	.word	0x7fefffff
 802a488:	0803b9e3 	.word	0x0803b9e3
 802a48c:	0803b9e7 	.word	0x0803b9e7
 802a490:	0803b9eb 	.word	0x0803b9eb
 802a494:	0803b9ef 	.word	0x0803b9ef
 802a498:	0803b9f3 	.word	0x0803b9f3
 802a49c:	0803ba04 	.word	0x0803ba04
 802a4a0:	40300000 	.word	0x40300000
 802a4a4:	3fe00000 	.word	0x3fe00000
 802a4a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a4aa:	9624      	str	r6, [sp, #144]	@ 0x90
 802a4ac:	7bd9      	ldrb	r1, [r3, #15]
 802a4ae:	2030      	movs	r0, #48	@ 0x30
 802a4b0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a4b2:	1e53      	subs	r3, r2, #1
 802a4b4:	9324      	str	r3, [sp, #144]	@ 0x90
 802a4b6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a4ba:	428b      	cmp	r3, r1
 802a4bc:	f000 814a 	beq.w	802a754 <_vfprintf_r+0x8ec>
 802a4c0:	2b39      	cmp	r3, #57	@ 0x39
 802a4c2:	bf0b      	itete	eq
 802a4c4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a4c6:	3301      	addne	r3, #1
 802a4c8:	7a9b      	ldrbeq	r3, [r3, #10]
 802a4ca:	b2db      	uxtbne	r3, r3
 802a4cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a4d0:	eba6 0308 	sub.w	r3, r6, r8
 802a4d4:	9304      	str	r3, [sp, #16]
 802a4d6:	9b08      	ldr	r3, [sp, #32]
 802a4d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a4da:	2b47      	cmp	r3, #71	@ 0x47
 802a4dc:	f040 8189 	bne.w	802a7f2 <_vfprintf_r+0x98a>
 802a4e0:	1cf1      	adds	r1, r6, #3
 802a4e2:	db02      	blt.n	802a4ea <_vfprintf_r+0x682>
 802a4e4:	45b1      	cmp	r9, r6
 802a4e6:	f280 81a7 	bge.w	802a838 <_vfprintf_r+0x9d0>
 802a4ea:	9b06      	ldr	r3, [sp, #24]
 802a4ec:	3b02      	subs	r3, #2
 802a4ee:	9306      	str	r3, [sp, #24]
 802a4f0:	9906      	ldr	r1, [sp, #24]
 802a4f2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a4f6:	f021 0120 	bic.w	r1, r1, #32
 802a4fa:	2941      	cmp	r1, #65	@ 0x41
 802a4fc:	bf08      	it	eq
 802a4fe:	320f      	addeq	r2, #15
 802a500:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a504:	bf06      	itte	eq
 802a506:	b2d2      	uxtbeq	r2, r2
 802a508:	2101      	moveq	r1, #1
 802a50a:	2100      	movne	r1, #0
 802a50c:	2b00      	cmp	r3, #0
 802a50e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a510:	bfb8      	it	lt
 802a512:	f1c6 0301 	rsblt	r3, r6, #1
 802a516:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a51a:	bfb4      	ite	lt
 802a51c:	222d      	movlt	r2, #45	@ 0x2d
 802a51e:	222b      	movge	r2, #43	@ 0x2b
 802a520:	2b09      	cmp	r3, #9
 802a522:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a526:	f340 817a 	ble.w	802a81e <_vfprintf_r+0x9b6>
 802a52a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a52e:	270a      	movs	r7, #10
 802a530:	4602      	mov	r2, r0
 802a532:	fbb3 f6f7 	udiv	r6, r3, r7
 802a536:	fb07 3116 	mls	r1, r7, r6, r3
 802a53a:	3130      	adds	r1, #48	@ 0x30
 802a53c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a540:	4619      	mov	r1, r3
 802a542:	2963      	cmp	r1, #99	@ 0x63
 802a544:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a548:	4633      	mov	r3, r6
 802a54a:	dcf1      	bgt.n	802a530 <_vfprintf_r+0x6c8>
 802a54c:	3330      	adds	r3, #48	@ 0x30
 802a54e:	1e91      	subs	r1, r2, #2
 802a550:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a554:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a558:	460b      	mov	r3, r1
 802a55a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a55e:	4283      	cmp	r3, r0
 802a560:	f0c0 8158 	bcc.w	802a814 <_vfprintf_r+0x9ac>
 802a564:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a568:	1a9b      	subs	r3, r3, r2
 802a56a:	4281      	cmp	r1, r0
 802a56c:	bf88      	it	hi
 802a56e:	2300      	movhi	r3, #0
 802a570:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a574:	441a      	add	r2, r3
 802a576:	ab22      	add	r3, sp, #136	@ 0x88
 802a578:	1ad3      	subs	r3, r2, r3
 802a57a:	9a04      	ldr	r2, [sp, #16]
 802a57c:	9318      	str	r3, [sp, #96]	@ 0x60
 802a57e:	2a01      	cmp	r2, #1
 802a580:	eb03 0902 	add.w	r9, r3, r2
 802a584:	dc01      	bgt.n	802a58a <_vfprintf_r+0x722>
 802a586:	07ea      	lsls	r2, r5, #31
 802a588:	d501      	bpl.n	802a58e <_vfprintf_r+0x726>
 802a58a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a58c:	4499      	add	r9, r3
 802a58e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a592:	2700      	movs	r7, #0
 802a594:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a598:	9311      	str	r3, [sp, #68]	@ 0x44
 802a59a:	9708      	str	r7, [sp, #32]
 802a59c:	463e      	mov	r6, r7
 802a59e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a5a0:	2b00      	cmp	r3, #0
 802a5a2:	f040 8191 	bne.w	802a8c8 <_vfprintf_r+0xa60>
 802a5a6:	2300      	movs	r3, #0
 802a5a8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a5aa:	9310      	str	r3, [sp, #64]	@ 0x40
 802a5ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a5ae:	454b      	cmp	r3, r9
 802a5b0:	bfb8      	it	lt
 802a5b2:	464b      	movlt	r3, r9
 802a5b4:	9311      	str	r3, [sp, #68]	@ 0x44
 802a5b6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a5ba:	b113      	cbz	r3, 802a5c2 <_vfprintf_r+0x75a>
 802a5bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a5be:	3301      	adds	r3, #1
 802a5c0:	9311      	str	r3, [sp, #68]	@ 0x44
 802a5c2:	f015 0302 	ands.w	r3, r5, #2
 802a5c6:	931c      	str	r3, [sp, #112]	@ 0x70
 802a5c8:	bf1e      	ittt	ne
 802a5ca:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a5cc:	3302      	addne	r3, #2
 802a5ce:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a5d0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a5d4:	931d      	str	r3, [sp, #116]	@ 0x74
 802a5d6:	d122      	bne.n	802a61e <_vfprintf_r+0x7b6>
 802a5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a5da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a5dc:	1a9b      	subs	r3, r3, r2
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a5e2:	dd1c      	ble.n	802a61e <_vfprintf_r+0x7b6>
 802a5e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a5e6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a5ea:	2810      	cmp	r0, #16
 802a5ec:	489f      	ldr	r0, [pc, #636]	@ (802a86c <_vfprintf_r+0xa04>)
 802a5ee:	6020      	str	r0, [r4, #0]
 802a5f0:	f102 0201 	add.w	r2, r2, #1
 802a5f4:	f104 0108 	add.w	r1, r4, #8
 802a5f8:	f300 8297 	bgt.w	802ab2a <_vfprintf_r+0xcc2>
 802a5fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a5fe:	6060      	str	r0, [r4, #4]
 802a600:	4403      	add	r3, r0
 802a602:	2a07      	cmp	r2, #7
 802a604:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a608:	f340 82a4 	ble.w	802ab54 <_vfprintf_r+0xcec>
 802a60c:	9803      	ldr	r0, [sp, #12]
 802a60e:	aa26      	add	r2, sp, #152	@ 0x98
 802a610:	4659      	mov	r1, fp
 802a612:	f000 fe95 	bl	802b340 <__sprint_r>
 802a616:	2800      	cmp	r0, #0
 802a618:	f040 85ed 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802a61c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a61e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a622:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a624:	b16a      	cbz	r2, 802a642 <_vfprintf_r+0x7da>
 802a626:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a62a:	6022      	str	r2, [r4, #0]
 802a62c:	2201      	movs	r2, #1
 802a62e:	4413      	add	r3, r2
 802a630:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a632:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a634:	6062      	str	r2, [r4, #4]
 802a636:	4413      	add	r3, r2
 802a638:	2b07      	cmp	r3, #7
 802a63a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a63c:	f300 828c 	bgt.w	802ab58 <_vfprintf_r+0xcf0>
 802a640:	3408      	adds	r4, #8
 802a642:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a644:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a646:	b162      	cbz	r2, 802a662 <_vfprintf_r+0x7fa>
 802a648:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a64a:	6022      	str	r2, [r4, #0]
 802a64c:	2202      	movs	r2, #2
 802a64e:	4413      	add	r3, r2
 802a650:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a652:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a654:	6062      	str	r2, [r4, #4]
 802a656:	3301      	adds	r3, #1
 802a658:	2b07      	cmp	r3, #7
 802a65a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a65c:	f300 8286 	bgt.w	802ab6c <_vfprintf_r+0xd04>
 802a660:	3408      	adds	r4, #8
 802a662:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a664:	2b80      	cmp	r3, #128	@ 0x80
 802a666:	d122      	bne.n	802a6ae <_vfprintf_r+0x846>
 802a668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a66a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a66c:	1a9b      	subs	r3, r3, r2
 802a66e:	2b00      	cmp	r3, #0
 802a670:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a672:	dd1c      	ble.n	802a6ae <_vfprintf_r+0x846>
 802a674:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a676:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a67a:	2810      	cmp	r0, #16
 802a67c:	487c      	ldr	r0, [pc, #496]	@ (802a870 <_vfprintf_r+0xa08>)
 802a67e:	6020      	str	r0, [r4, #0]
 802a680:	f102 0201 	add.w	r2, r2, #1
 802a684:	f104 0108 	add.w	r1, r4, #8
 802a688:	f300 827a 	bgt.w	802ab80 <_vfprintf_r+0xd18>
 802a68c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a68e:	6060      	str	r0, [r4, #4]
 802a690:	4403      	add	r3, r0
 802a692:	2a07      	cmp	r2, #7
 802a694:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a698:	f340 8287 	ble.w	802abaa <_vfprintf_r+0xd42>
 802a69c:	9803      	ldr	r0, [sp, #12]
 802a69e:	aa26      	add	r2, sp, #152	@ 0x98
 802a6a0:	4659      	mov	r1, fp
 802a6a2:	f000 fe4d 	bl	802b340 <__sprint_r>
 802a6a6:	2800      	cmp	r0, #0
 802a6a8:	f040 85a5 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802a6ac:	ac29      	add	r4, sp, #164	@ 0xa4
 802a6ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a6b0:	eba3 0309 	sub.w	r3, r3, r9
 802a6b4:	2b00      	cmp	r3, #0
 802a6b6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a6b8:	dd1c      	ble.n	802a6f4 <_vfprintf_r+0x88c>
 802a6ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a6bc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a6c0:	2810      	cmp	r0, #16
 802a6c2:	486b      	ldr	r0, [pc, #428]	@ (802a870 <_vfprintf_r+0xa08>)
 802a6c4:	6020      	str	r0, [r4, #0]
 802a6c6:	f102 0201 	add.w	r2, r2, #1
 802a6ca:	f104 0108 	add.w	r1, r4, #8
 802a6ce:	f300 826e 	bgt.w	802abae <_vfprintf_r+0xd46>
 802a6d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a6d4:	6060      	str	r0, [r4, #4]
 802a6d6:	4403      	add	r3, r0
 802a6d8:	2a07      	cmp	r2, #7
 802a6da:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a6de:	f340 827b 	ble.w	802abd8 <_vfprintf_r+0xd70>
 802a6e2:	9803      	ldr	r0, [sp, #12]
 802a6e4:	aa26      	add	r2, sp, #152	@ 0x98
 802a6e6:	4659      	mov	r1, fp
 802a6e8:	f000 fe2a 	bl	802b340 <__sprint_r>
 802a6ec:	2800      	cmp	r0, #0
 802a6ee:	f040 8582 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802a6f2:	ac29      	add	r4, sp, #164	@ 0xa4
 802a6f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a6f6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a6f8:	05e8      	lsls	r0, r5, #23
 802a6fa:	f100 8273 	bmi.w	802abe4 <_vfprintf_r+0xd7c>
 802a6fe:	444b      	add	r3, r9
 802a700:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a702:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a704:	3301      	adds	r3, #1
 802a706:	2b07      	cmp	r3, #7
 802a708:	e9c4 8900 	strd	r8, r9, [r4]
 802a70c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a70e:	f300 82af 	bgt.w	802ac70 <_vfprintf_r+0xe08>
 802a712:	3408      	adds	r4, #8
 802a714:	0768      	lsls	r0, r5, #29
 802a716:	f100 8550 	bmi.w	802b1ba <_vfprintf_r+0x1352>
 802a71a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a71e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a720:	428a      	cmp	r2, r1
 802a722:	bfac      	ite	ge
 802a724:	189b      	addge	r3, r3, r2
 802a726:	185b      	addlt	r3, r3, r1
 802a728:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a72a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a72c:	b13b      	cbz	r3, 802a73e <_vfprintf_r+0x8d6>
 802a72e:	9803      	ldr	r0, [sp, #12]
 802a730:	aa26      	add	r2, sp, #152	@ 0x98
 802a732:	4659      	mov	r1, fp
 802a734:	f000 fe04 	bl	802b340 <__sprint_r>
 802a738:	2800      	cmp	r0, #0
 802a73a:	f040 855c 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802a73e:	2300      	movs	r3, #0
 802a740:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a742:	f1ba 0f00 	cmp.w	sl, #0
 802a746:	f040 8572 	bne.w	802b22e <_vfprintf_r+0x13c6>
 802a74a:	9e07      	ldr	r6, [sp, #28]
 802a74c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a74e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 802a752:	e407      	b.n	8029f64 <_vfprintf_r+0xfc>
 802a754:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a758:	e6aa      	b.n	802a4b0 <_vfprintf_r+0x648>
 802a75a:	f803 0b01 	strb.w	r0, [r3], #1
 802a75e:	e675      	b.n	802a44c <_vfprintf_r+0x5e4>
 802a760:	9b08      	ldr	r3, [sp, #32]
 802a762:	2b46      	cmp	r3, #70	@ 0x46
 802a764:	d005      	beq.n	802a772 <_vfprintf_r+0x90a>
 802a766:	2b45      	cmp	r3, #69	@ 0x45
 802a768:	d11a      	bne.n	802a7a0 <_vfprintf_r+0x938>
 802a76a:	f109 0601 	add.w	r6, r9, #1
 802a76e:	2102      	movs	r1, #2
 802a770:	e001      	b.n	802a776 <_vfprintf_r+0x90e>
 802a772:	464e      	mov	r6, r9
 802a774:	2103      	movs	r1, #3
 802a776:	ab24      	add	r3, sp, #144	@ 0x90
 802a778:	9301      	str	r3, [sp, #4]
 802a77a:	ab21      	add	r3, sp, #132	@ 0x84
 802a77c:	9300      	str	r3, [sp, #0]
 802a77e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a782:	ab20      	add	r3, sp, #128	@ 0x80
 802a784:	9803      	ldr	r0, [sp, #12]
 802a786:	4632      	mov	r2, r6
 802a788:	f003 fbb6 	bl	802def8 <_dtoa_r>
 802a78c:	9b08      	ldr	r3, [sp, #32]
 802a78e:	2b47      	cmp	r3, #71	@ 0x47
 802a790:	4680      	mov	r8, r0
 802a792:	d119      	bne.n	802a7c8 <_vfprintf_r+0x960>
 802a794:	07e8      	lsls	r0, r5, #31
 802a796:	d405      	bmi.n	802a7a4 <_vfprintf_r+0x93c>
 802a798:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a79a:	eba3 0308 	sub.w	r3, r3, r8
 802a79e:	e699      	b.n	802a4d4 <_vfprintf_r+0x66c>
 802a7a0:	464e      	mov	r6, r9
 802a7a2:	e7e4      	b.n	802a76e <_vfprintf_r+0x906>
 802a7a4:	eb08 0706 	add.w	r7, r8, r6
 802a7a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a7ac:	2200      	movs	r2, #0
 802a7ae:	2300      	movs	r3, #0
 802a7b0:	f7e6 f9a2 	bl	8010af8 <__aeabi_dcmpeq>
 802a7b4:	b100      	cbz	r0, 802a7b8 <_vfprintf_r+0x950>
 802a7b6:	9724      	str	r7, [sp, #144]	@ 0x90
 802a7b8:	2230      	movs	r2, #48	@ 0x30
 802a7ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a7bc:	429f      	cmp	r7, r3
 802a7be:	d9eb      	bls.n	802a798 <_vfprintf_r+0x930>
 802a7c0:	1c59      	adds	r1, r3, #1
 802a7c2:	9124      	str	r1, [sp, #144]	@ 0x90
 802a7c4:	701a      	strb	r2, [r3, #0]
 802a7c6:	e7f8      	b.n	802a7ba <_vfprintf_r+0x952>
 802a7c8:	9b08      	ldr	r3, [sp, #32]
 802a7ca:	2b46      	cmp	r3, #70	@ 0x46
 802a7cc:	eb00 0706 	add.w	r7, r0, r6
 802a7d0:	d1ea      	bne.n	802a7a8 <_vfprintf_r+0x940>
 802a7d2:	7803      	ldrb	r3, [r0, #0]
 802a7d4:	2b30      	cmp	r3, #48	@ 0x30
 802a7d6:	d109      	bne.n	802a7ec <_vfprintf_r+0x984>
 802a7d8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a7dc:	2200      	movs	r2, #0
 802a7de:	2300      	movs	r3, #0
 802a7e0:	f7e6 f98a 	bl	8010af8 <__aeabi_dcmpeq>
 802a7e4:	b910      	cbnz	r0, 802a7ec <_vfprintf_r+0x984>
 802a7e6:	f1c6 0601 	rsb	r6, r6, #1
 802a7ea:	9620      	str	r6, [sp, #128]	@ 0x80
 802a7ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a7ee:	441f      	add	r7, r3
 802a7f0:	e7da      	b.n	802a7a8 <_vfprintf_r+0x940>
 802a7f2:	9b08      	ldr	r3, [sp, #32]
 802a7f4:	2b46      	cmp	r3, #70	@ 0x46
 802a7f6:	f47f ae7b 	bne.w	802a4f0 <_vfprintf_r+0x688>
 802a7fa:	f005 0301 	and.w	r3, r5, #1
 802a7fe:	2e00      	cmp	r6, #0
 802a800:	ea43 0309 	orr.w	r3, r3, r9
 802a804:	dd25      	ble.n	802a852 <_vfprintf_r+0x9ea>
 802a806:	b37b      	cbz	r3, 802a868 <_vfprintf_r+0xa00>
 802a808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a80a:	18f3      	adds	r3, r6, r3
 802a80c:	4499      	add	r9, r3
 802a80e:	2366      	movs	r3, #102	@ 0x66
 802a810:	9306      	str	r3, [sp, #24]
 802a812:	e033      	b.n	802a87c <_vfprintf_r+0xa14>
 802a814:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a818:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a81c:	e69f      	b.n	802a55e <_vfprintf_r+0x6f6>
 802a81e:	b941      	cbnz	r1, 802a832 <_vfprintf_r+0x9ca>
 802a820:	2230      	movs	r2, #48	@ 0x30
 802a822:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a826:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a82a:	3330      	adds	r3, #48	@ 0x30
 802a82c:	f802 3b01 	strb.w	r3, [r2], #1
 802a830:	e6a1      	b.n	802a576 <_vfprintf_r+0x70e>
 802a832:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a836:	e7f8      	b.n	802a82a <_vfprintf_r+0x9c2>
 802a838:	9b04      	ldr	r3, [sp, #16]
 802a83a:	42b3      	cmp	r3, r6
 802a83c:	dd0d      	ble.n	802a85a <_vfprintf_r+0x9f2>
 802a83e:	9b04      	ldr	r3, [sp, #16]
 802a840:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a842:	2e00      	cmp	r6, #0
 802a844:	eb03 0902 	add.w	r9, r3, r2
 802a848:	dc0c      	bgt.n	802a864 <_vfprintf_r+0x9fc>
 802a84a:	f1c6 0301 	rsb	r3, r6, #1
 802a84e:	4499      	add	r9, r3
 802a850:	e008      	b.n	802a864 <_vfprintf_r+0x9fc>
 802a852:	b17b      	cbz	r3, 802a874 <_vfprintf_r+0xa0c>
 802a854:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a856:	3301      	adds	r3, #1
 802a858:	e7d8      	b.n	802a80c <_vfprintf_r+0x9a4>
 802a85a:	07eb      	lsls	r3, r5, #31
 802a85c:	d521      	bpl.n	802a8a2 <_vfprintf_r+0xa3a>
 802a85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a860:	eb06 0903 	add.w	r9, r6, r3
 802a864:	2367      	movs	r3, #103	@ 0x67
 802a866:	e7d3      	b.n	802a810 <_vfprintf_r+0x9a8>
 802a868:	46b1      	mov	r9, r6
 802a86a:	e7d0      	b.n	802a80e <_vfprintf_r+0x9a6>
 802a86c:	0803ba27 	.word	0x0803ba27
 802a870:	0803ba17 	.word	0x0803ba17
 802a874:	2366      	movs	r3, #102	@ 0x66
 802a876:	9306      	str	r3, [sp, #24]
 802a878:	f04f 0901 	mov.w	r9, #1
 802a87c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a880:	9308      	str	r3, [sp, #32]
 802a882:	d01f      	beq.n	802a8c4 <_vfprintf_r+0xa5c>
 802a884:	2700      	movs	r7, #0
 802a886:	2e00      	cmp	r6, #0
 802a888:	9708      	str	r7, [sp, #32]
 802a88a:	f77f ae88 	ble.w	802a59e <_vfprintf_r+0x736>
 802a88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a890:	781b      	ldrb	r3, [r3, #0]
 802a892:	2bff      	cmp	r3, #255	@ 0xff
 802a894:	d107      	bne.n	802a8a6 <_vfprintf_r+0xa3e>
 802a896:	9b08      	ldr	r3, [sp, #32]
 802a898:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a89a:	443b      	add	r3, r7
 802a89c:	fb02 9903 	mla	r9, r2, r3, r9
 802a8a0:	e67d      	b.n	802a59e <_vfprintf_r+0x736>
 802a8a2:	46b1      	mov	r9, r6
 802a8a4:	e7de      	b.n	802a864 <_vfprintf_r+0x9fc>
 802a8a6:	42b3      	cmp	r3, r6
 802a8a8:	daf5      	bge.n	802a896 <_vfprintf_r+0xa2e>
 802a8aa:	1af6      	subs	r6, r6, r3
 802a8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8ae:	785b      	ldrb	r3, [r3, #1]
 802a8b0:	b133      	cbz	r3, 802a8c0 <_vfprintf_r+0xa58>
 802a8b2:	9b08      	ldr	r3, [sp, #32]
 802a8b4:	3301      	adds	r3, #1
 802a8b6:	9308      	str	r3, [sp, #32]
 802a8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a8ba:	3301      	adds	r3, #1
 802a8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 802a8be:	e7e6      	b.n	802a88e <_vfprintf_r+0xa26>
 802a8c0:	3701      	adds	r7, #1
 802a8c2:	e7e4      	b.n	802a88e <_vfprintf_r+0xa26>
 802a8c4:	9f08      	ldr	r7, [sp, #32]
 802a8c6:	e66a      	b.n	802a59e <_vfprintf_r+0x736>
 802a8c8:	232d      	movs	r3, #45	@ 0x2d
 802a8ca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a8ce:	e66a      	b.n	802a5a6 <_vfprintf_r+0x73e>
 802a8d0:	06af      	lsls	r7, r5, #26
 802a8d2:	d507      	bpl.n	802a8e4 <_vfprintf_r+0xa7c>
 802a8d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a8d6:	6833      	ldr	r3, [r6, #0]
 802a8d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a8da:	17d2      	asrs	r2, r2, #31
 802a8dc:	e9c3 1200 	strd	r1, r2, [r3]
 802a8e0:	3604      	adds	r6, #4
 802a8e2:	e734      	b.n	802a74e <_vfprintf_r+0x8e6>
 802a8e4:	06e8      	lsls	r0, r5, #27
 802a8e6:	d503      	bpl.n	802a8f0 <_vfprintf_r+0xa88>
 802a8e8:	6833      	ldr	r3, [r6, #0]
 802a8ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a8ec:	601a      	str	r2, [r3, #0]
 802a8ee:	e7f7      	b.n	802a8e0 <_vfprintf_r+0xa78>
 802a8f0:	0669      	lsls	r1, r5, #25
 802a8f2:	d503      	bpl.n	802a8fc <_vfprintf_r+0xa94>
 802a8f4:	6833      	ldr	r3, [r6, #0]
 802a8f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a8f8:	801a      	strh	r2, [r3, #0]
 802a8fa:	e7f1      	b.n	802a8e0 <_vfprintf_r+0xa78>
 802a8fc:	05aa      	lsls	r2, r5, #22
 802a8fe:	d5f3      	bpl.n	802a8e8 <_vfprintf_r+0xa80>
 802a900:	6833      	ldr	r3, [r6, #0]
 802a902:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a904:	701a      	strb	r2, [r3, #0]
 802a906:	e7eb      	b.n	802a8e0 <_vfprintf_r+0xa78>
 802a908:	f045 0510 	orr.w	r5, r5, #16
 802a90c:	f015 0320 	ands.w	r3, r5, #32
 802a910:	d020      	beq.n	802a954 <_vfprintf_r+0xaec>
 802a912:	3607      	adds	r6, #7
 802a914:	f026 0307 	bic.w	r3, r6, #7
 802a918:	461a      	mov	r2, r3
 802a91a:	685f      	ldr	r7, [r3, #4]
 802a91c:	f852 6b08 	ldr.w	r6, [r2], #8
 802a920:	9207      	str	r2, [sp, #28]
 802a922:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a926:	2300      	movs	r3, #0
 802a928:	2200      	movs	r2, #0
 802a92a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a92e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a932:	f000 8491 	beq.w	802b258 <_vfprintf_r+0x13f0>
 802a936:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802a93a:	9208      	str	r2, [sp, #32]
 802a93c:	ea56 0207 	orrs.w	r2, r6, r7
 802a940:	f040 848f 	bne.w	802b262 <_vfprintf_r+0x13fa>
 802a944:	f1b9 0f00 	cmp.w	r9, #0
 802a948:	f000 80db 	beq.w	802ab02 <_vfprintf_r+0xc9a>
 802a94c:	2b01      	cmp	r3, #1
 802a94e:	f040 848b 	bne.w	802b268 <_vfprintf_r+0x1400>
 802a952:	e083      	b.n	802aa5c <_vfprintf_r+0xbf4>
 802a954:	4632      	mov	r2, r6
 802a956:	f015 0710 	ands.w	r7, r5, #16
 802a95a:	f852 6b04 	ldr.w	r6, [r2], #4
 802a95e:	9207      	str	r2, [sp, #28]
 802a960:	d001      	beq.n	802a966 <_vfprintf_r+0xafe>
 802a962:	461f      	mov	r7, r3
 802a964:	e7dd      	b.n	802a922 <_vfprintf_r+0xaba>
 802a966:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a96a:	d001      	beq.n	802a970 <_vfprintf_r+0xb08>
 802a96c:	b2b6      	uxth	r6, r6
 802a96e:	e7d8      	b.n	802a922 <_vfprintf_r+0xaba>
 802a970:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a974:	d0d5      	beq.n	802a922 <_vfprintf_r+0xaba>
 802a976:	b2f6      	uxtb	r6, r6
 802a978:	e7f3      	b.n	802a962 <_vfprintf_r+0xafa>
 802a97a:	4633      	mov	r3, r6
 802a97c:	2278      	movs	r2, #120	@ 0x78
 802a97e:	f853 6b04 	ldr.w	r6, [r3], #4
 802a982:	9307      	str	r3, [sp, #28]
 802a984:	f647 0330 	movw	r3, #30768	@ 0x7830
 802a988:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802a98c:	4b93      	ldr	r3, [pc, #588]	@ (802abdc <_vfprintf_r+0xd74>)
 802a98e:	9319      	str	r3, [sp, #100]	@ 0x64
 802a990:	2700      	movs	r7, #0
 802a992:	f045 0502 	orr.w	r5, r5, #2
 802a996:	2302      	movs	r3, #2
 802a998:	9206      	str	r2, [sp, #24]
 802a99a:	e7c5      	b.n	802a928 <_vfprintf_r+0xac0>
 802a99c:	4633      	mov	r3, r6
 802a99e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a9a2:	f853 8b04 	ldr.w	r8, [r3], #4
 802a9a6:	9307      	str	r3, [sp, #28]
 802a9a8:	f04f 0600 	mov.w	r6, #0
 802a9ac:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802a9b0:	d00f      	beq.n	802a9d2 <_vfprintf_r+0xb6a>
 802a9b2:	464a      	mov	r2, r9
 802a9b4:	4631      	mov	r1, r6
 802a9b6:	4640      	mov	r0, r8
 802a9b8:	f7e5 fc22 	bl	8010200 <memchr>
 802a9bc:	4682      	mov	sl, r0
 802a9be:	2800      	cmp	r0, #0
 802a9c0:	f43f ac7a 	beq.w	802a2b8 <_vfprintf_r+0x450>
 802a9c4:	eba0 0908 	sub.w	r9, r0, r8
 802a9c8:	46b2      	mov	sl, r6
 802a9ca:	9610      	str	r6, [sp, #64]	@ 0x40
 802a9cc:	4637      	mov	r7, r6
 802a9ce:	9608      	str	r6, [sp, #32]
 802a9d0:	e5ec      	b.n	802a5ac <_vfprintf_r+0x744>
 802a9d2:	4640      	mov	r0, r8
 802a9d4:	f7e5 fc64 	bl	80102a0 <strlen>
 802a9d8:	46b2      	mov	sl, r6
 802a9da:	4681      	mov	r9, r0
 802a9dc:	e46c      	b.n	802a2b8 <_vfprintf_r+0x450>
 802a9de:	f045 0510 	orr.w	r5, r5, #16
 802a9e2:	f015 0320 	ands.w	r3, r5, #32
 802a9e6:	d009      	beq.n	802a9fc <_vfprintf_r+0xb94>
 802a9e8:	3607      	adds	r6, #7
 802a9ea:	f026 0307 	bic.w	r3, r6, #7
 802a9ee:	461a      	mov	r2, r3
 802a9f0:	685f      	ldr	r7, [r3, #4]
 802a9f2:	f852 6b08 	ldr.w	r6, [r2], #8
 802a9f6:	9207      	str	r2, [sp, #28]
 802a9f8:	2301      	movs	r3, #1
 802a9fa:	e795      	b.n	802a928 <_vfprintf_r+0xac0>
 802a9fc:	4632      	mov	r2, r6
 802a9fe:	f015 0710 	ands.w	r7, r5, #16
 802aa02:	f852 6b04 	ldr.w	r6, [r2], #4
 802aa06:	9207      	str	r2, [sp, #28]
 802aa08:	d001      	beq.n	802aa0e <_vfprintf_r+0xba6>
 802aa0a:	461f      	mov	r7, r3
 802aa0c:	e7f4      	b.n	802a9f8 <_vfprintf_r+0xb90>
 802aa0e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802aa12:	d001      	beq.n	802aa18 <_vfprintf_r+0xbb0>
 802aa14:	b2b6      	uxth	r6, r6
 802aa16:	e7ef      	b.n	802a9f8 <_vfprintf_r+0xb90>
 802aa18:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802aa1c:	d0ec      	beq.n	802a9f8 <_vfprintf_r+0xb90>
 802aa1e:	b2f6      	uxtb	r6, r6
 802aa20:	e7f3      	b.n	802aa0a <_vfprintf_r+0xba2>
 802aa22:	4b6f      	ldr	r3, [pc, #444]	@ (802abe0 <_vfprintf_r+0xd78>)
 802aa24:	f7ff bb33 	b.w	802a08e <_vfprintf_r+0x226>
 802aa28:	4632      	mov	r2, r6
 802aa2a:	f015 0710 	ands.w	r7, r5, #16
 802aa2e:	f852 6b04 	ldr.w	r6, [r2], #4
 802aa32:	9207      	str	r2, [sp, #28]
 802aa34:	d002      	beq.n	802aa3c <_vfprintf_r+0xbd4>
 802aa36:	461f      	mov	r7, r3
 802aa38:	f7ff bb36 	b.w	802a0a8 <_vfprintf_r+0x240>
 802aa3c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802aa40:	d002      	beq.n	802aa48 <_vfprintf_r+0xbe0>
 802aa42:	b2b6      	uxth	r6, r6
 802aa44:	f7ff bb30 	b.w	802a0a8 <_vfprintf_r+0x240>
 802aa48:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802aa4c:	f43f ab2c 	beq.w	802a0a8 <_vfprintf_r+0x240>
 802aa50:	b2f6      	uxtb	r6, r6
 802aa52:	e7f0      	b.n	802aa36 <_vfprintf_r+0xbce>
 802aa54:	2e0a      	cmp	r6, #10
 802aa56:	f177 0300 	sbcs.w	r3, r7, #0
 802aa5a:	d207      	bcs.n	802aa6c <_vfprintf_r+0xc04>
 802aa5c:	3630      	adds	r6, #48	@ 0x30
 802aa5e:	b2f6      	uxtb	r6, r6
 802aa60:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802aa64:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802aa68:	f000 bc1a 	b.w	802b2a0 <_vfprintf_r+0x1438>
 802aa6c:	2300      	movs	r3, #0
 802aa6e:	9304      	str	r3, [sp, #16]
 802aa70:	9b08      	ldr	r3, [sp, #32]
 802aa72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802aa76:	ad52      	add	r5, sp, #328	@ 0x148
 802aa78:	9310      	str	r3, [sp, #64]	@ 0x40
 802aa7a:	220a      	movs	r2, #10
 802aa7c:	2300      	movs	r3, #0
 802aa7e:	4630      	mov	r0, r6
 802aa80:	4639      	mov	r1, r7
 802aa82:	f7e6 f969 	bl	8010d58 <__aeabi_uldivmod>
 802aa86:	9b04      	ldr	r3, [sp, #16]
 802aa88:	9011      	str	r0, [sp, #68]	@ 0x44
 802aa8a:	3301      	adds	r3, #1
 802aa8c:	9304      	str	r3, [sp, #16]
 802aa8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802aa90:	3230      	adds	r2, #48	@ 0x30
 802aa92:	468a      	mov	sl, r1
 802aa94:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802aa98:	f805 2c01 	strb.w	r2, [r5, #-1]
 802aa9c:	b1d3      	cbz	r3, 802aad4 <_vfprintf_r+0xc6c>
 802aa9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aaa0:	9a04      	ldr	r2, [sp, #16]
 802aaa2:	781b      	ldrb	r3, [r3, #0]
 802aaa4:	429a      	cmp	r2, r3
 802aaa6:	d115      	bne.n	802aad4 <_vfprintf_r+0xc6c>
 802aaa8:	2aff      	cmp	r2, #255	@ 0xff
 802aaaa:	d013      	beq.n	802aad4 <_vfprintf_r+0xc6c>
 802aaac:	2e0a      	cmp	r6, #10
 802aaae:	f177 0300 	sbcs.w	r3, r7, #0
 802aab2:	d30f      	bcc.n	802aad4 <_vfprintf_r+0xc6c>
 802aab4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802aab6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802aab8:	eba8 0803 	sub.w	r8, r8, r3
 802aabc:	461a      	mov	r2, r3
 802aabe:	4640      	mov	r0, r8
 802aac0:	f001 ff25 	bl	802c90e <strncpy>
 802aac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aac6:	785b      	ldrb	r3, [r3, #1]
 802aac8:	b11b      	cbz	r3, 802aad2 <_vfprintf_r+0xc6a>
 802aaca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aacc:	3301      	adds	r3, #1
 802aace:	9309      	str	r3, [sp, #36]	@ 0x24
 802aad0:	2300      	movs	r3, #0
 802aad2:	9304      	str	r3, [sp, #16]
 802aad4:	2e0a      	cmp	r6, #10
 802aad6:	f177 0700 	sbcs.w	r7, r7, #0
 802aada:	f0c0 83e1 	bcc.w	802b2a0 <_vfprintf_r+0x1438>
 802aade:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802aae0:	4657      	mov	r7, sl
 802aae2:	4645      	mov	r5, r8
 802aae4:	e7c9      	b.n	802aa7a <_vfprintf_r+0xc12>
 802aae6:	f006 030f 	and.w	r3, r6, #15
 802aaea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802aaec:	0936      	lsrs	r6, r6, #4
 802aaee:	5cd3      	ldrb	r3, [r2, r3]
 802aaf0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802aaf4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802aaf8:	093f      	lsrs	r7, r7, #4
 802aafa:	ea56 0307 	orrs.w	r3, r6, r7
 802aafe:	d1f2      	bne.n	802aae6 <_vfprintf_r+0xc7e>
 802ab00:	e3ce      	b.n	802b2a0 <_vfprintf_r+0x1438>
 802ab02:	b91b      	cbnz	r3, 802ab0c <_vfprintf_r+0xca4>
 802ab04:	07ed      	lsls	r5, r5, #31
 802ab06:	d501      	bpl.n	802ab0c <_vfprintf_r+0xca4>
 802ab08:	2630      	movs	r6, #48	@ 0x30
 802ab0a:	e7a9      	b.n	802aa60 <_vfprintf_r+0xbf8>
 802ab0c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802ab10:	e3c6      	b.n	802b2a0 <_vfprintf_r+0x1438>
 802ab12:	9b06      	ldr	r3, [sp, #24]
 802ab14:	2b00      	cmp	r3, #0
 802ab16:	f000 8390 	beq.w	802b23a <_vfprintf_r+0x13d2>
 802ab1a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802ab1e:	2300      	movs	r3, #0
 802ab20:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ab24:	9607      	str	r6, [sp, #28]
 802ab26:	f7ff bb5c 	b.w	802a1e2 <_vfprintf_r+0x37a>
 802ab2a:	2010      	movs	r0, #16
 802ab2c:	4403      	add	r3, r0
 802ab2e:	2a07      	cmp	r2, #7
 802ab30:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ab34:	6060      	str	r0, [r4, #4]
 802ab36:	dd08      	ble.n	802ab4a <_vfprintf_r+0xce2>
 802ab38:	9803      	ldr	r0, [sp, #12]
 802ab3a:	aa26      	add	r2, sp, #152	@ 0x98
 802ab3c:	4659      	mov	r1, fp
 802ab3e:	f000 fbff 	bl	802b340 <__sprint_r>
 802ab42:	2800      	cmp	r0, #0
 802ab44:	f040 8357 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ab48:	a929      	add	r1, sp, #164	@ 0xa4
 802ab4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ab4c:	3b10      	subs	r3, #16
 802ab4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ab50:	460c      	mov	r4, r1
 802ab52:	e547      	b.n	802a5e4 <_vfprintf_r+0x77c>
 802ab54:	460c      	mov	r4, r1
 802ab56:	e562      	b.n	802a61e <_vfprintf_r+0x7b6>
 802ab58:	9803      	ldr	r0, [sp, #12]
 802ab5a:	aa26      	add	r2, sp, #152	@ 0x98
 802ab5c:	4659      	mov	r1, fp
 802ab5e:	f000 fbef 	bl	802b340 <__sprint_r>
 802ab62:	2800      	cmp	r0, #0
 802ab64:	f040 8347 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ab68:	ac29      	add	r4, sp, #164	@ 0xa4
 802ab6a:	e56a      	b.n	802a642 <_vfprintf_r+0x7da>
 802ab6c:	9803      	ldr	r0, [sp, #12]
 802ab6e:	aa26      	add	r2, sp, #152	@ 0x98
 802ab70:	4659      	mov	r1, fp
 802ab72:	f000 fbe5 	bl	802b340 <__sprint_r>
 802ab76:	2800      	cmp	r0, #0
 802ab78:	f040 833d 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ab7c:	ac29      	add	r4, sp, #164	@ 0xa4
 802ab7e:	e570      	b.n	802a662 <_vfprintf_r+0x7fa>
 802ab80:	2010      	movs	r0, #16
 802ab82:	4403      	add	r3, r0
 802ab84:	2a07      	cmp	r2, #7
 802ab86:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ab8a:	6060      	str	r0, [r4, #4]
 802ab8c:	dd08      	ble.n	802aba0 <_vfprintf_r+0xd38>
 802ab8e:	9803      	ldr	r0, [sp, #12]
 802ab90:	aa26      	add	r2, sp, #152	@ 0x98
 802ab92:	4659      	mov	r1, fp
 802ab94:	f000 fbd4 	bl	802b340 <__sprint_r>
 802ab98:	2800      	cmp	r0, #0
 802ab9a:	f040 832c 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ab9e:	a929      	add	r1, sp, #164	@ 0xa4
 802aba0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802aba2:	3b10      	subs	r3, #16
 802aba4:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aba6:	460c      	mov	r4, r1
 802aba8:	e564      	b.n	802a674 <_vfprintf_r+0x80c>
 802abaa:	460c      	mov	r4, r1
 802abac:	e57f      	b.n	802a6ae <_vfprintf_r+0x846>
 802abae:	2010      	movs	r0, #16
 802abb0:	4403      	add	r3, r0
 802abb2:	2a07      	cmp	r2, #7
 802abb4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802abb8:	6060      	str	r0, [r4, #4]
 802abba:	dd08      	ble.n	802abce <_vfprintf_r+0xd66>
 802abbc:	9803      	ldr	r0, [sp, #12]
 802abbe:	aa26      	add	r2, sp, #152	@ 0x98
 802abc0:	4659      	mov	r1, fp
 802abc2:	f000 fbbd 	bl	802b340 <__sprint_r>
 802abc6:	2800      	cmp	r0, #0
 802abc8:	f040 8315 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802abcc:	a929      	add	r1, sp, #164	@ 0xa4
 802abce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abd0:	3b10      	subs	r3, #16
 802abd2:	9310      	str	r3, [sp, #64]	@ 0x40
 802abd4:	460c      	mov	r4, r1
 802abd6:	e570      	b.n	802a6ba <_vfprintf_r+0x852>
 802abd8:	460c      	mov	r4, r1
 802abda:	e58b      	b.n	802a6f4 <_vfprintf_r+0x88c>
 802abdc:	0803b9f3 	.word	0x0803b9f3
 802abe0:	0803ba04 	.word	0x0803ba04
 802abe4:	9b06      	ldr	r3, [sp, #24]
 802abe6:	2b65      	cmp	r3, #101	@ 0x65
 802abe8:	f340 8245 	ble.w	802b076 <_vfprintf_r+0x120e>
 802abec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802abf0:	2200      	movs	r2, #0
 802abf2:	2300      	movs	r3, #0
 802abf4:	f7e5 ff80 	bl	8010af8 <__aeabi_dcmpeq>
 802abf8:	2800      	cmp	r0, #0
 802abfa:	d06a      	beq.n	802acd2 <_vfprintf_r+0xe6a>
 802abfc:	4b73      	ldr	r3, [pc, #460]	@ (802adcc <_vfprintf_r+0xf64>)
 802abfe:	6023      	str	r3, [r4, #0]
 802ac00:	2301      	movs	r3, #1
 802ac02:	6063      	str	r3, [r4, #4]
 802ac04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ac06:	3301      	adds	r3, #1
 802ac08:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ac0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac0c:	3301      	adds	r3, #1
 802ac0e:	2b07      	cmp	r3, #7
 802ac10:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ac12:	dc37      	bgt.n	802ac84 <_vfprintf_r+0xe1c>
 802ac14:	3408      	adds	r4, #8
 802ac16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ac18:	9a04      	ldr	r2, [sp, #16]
 802ac1a:	4293      	cmp	r3, r2
 802ac1c:	db02      	blt.n	802ac24 <_vfprintf_r+0xdbc>
 802ac1e:	07e9      	lsls	r1, r5, #31
 802ac20:	f57f ad78 	bpl.w	802a714 <_vfprintf_r+0x8ac>
 802ac24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ac26:	6023      	str	r3, [r4, #0]
 802ac28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ac2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ac2c:	6063      	str	r3, [r4, #4]
 802ac2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ac30:	4413      	add	r3, r2
 802ac32:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ac34:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac36:	3301      	adds	r3, #1
 802ac38:	2b07      	cmp	r3, #7
 802ac3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ac3c:	dc2c      	bgt.n	802ac98 <_vfprintf_r+0xe30>
 802ac3e:	3408      	adds	r4, #8
 802ac40:	9b04      	ldr	r3, [sp, #16]
 802ac42:	1e5e      	subs	r6, r3, #1
 802ac44:	2e00      	cmp	r6, #0
 802ac46:	f77f ad65 	ble.w	802a714 <_vfprintf_r+0x8ac>
 802ac4a:	4f61      	ldr	r7, [pc, #388]	@ (802add0 <_vfprintf_r+0xf68>)
 802ac4c:	f04f 0810 	mov.w	r8, #16
 802ac50:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ac54:	2e10      	cmp	r6, #16
 802ac56:	f103 0301 	add.w	r3, r3, #1
 802ac5a:	f104 0108 	add.w	r1, r4, #8
 802ac5e:	6027      	str	r7, [r4, #0]
 802ac60:	dc24      	bgt.n	802acac <_vfprintf_r+0xe44>
 802ac62:	6066      	str	r6, [r4, #4]
 802ac64:	2b07      	cmp	r3, #7
 802ac66:	4416      	add	r6, r2
 802ac68:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802ac6c:	f340 82a2 	ble.w	802b1b4 <_vfprintf_r+0x134c>
 802ac70:	9803      	ldr	r0, [sp, #12]
 802ac72:	aa26      	add	r2, sp, #152	@ 0x98
 802ac74:	4659      	mov	r1, fp
 802ac76:	f000 fb63 	bl	802b340 <__sprint_r>
 802ac7a:	2800      	cmp	r0, #0
 802ac7c:	f040 82bb 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ac80:	ac29      	add	r4, sp, #164	@ 0xa4
 802ac82:	e547      	b.n	802a714 <_vfprintf_r+0x8ac>
 802ac84:	9803      	ldr	r0, [sp, #12]
 802ac86:	aa26      	add	r2, sp, #152	@ 0x98
 802ac88:	4659      	mov	r1, fp
 802ac8a:	f000 fb59 	bl	802b340 <__sprint_r>
 802ac8e:	2800      	cmp	r0, #0
 802ac90:	f040 82b1 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ac94:	ac29      	add	r4, sp, #164	@ 0xa4
 802ac96:	e7be      	b.n	802ac16 <_vfprintf_r+0xdae>
 802ac98:	9803      	ldr	r0, [sp, #12]
 802ac9a:	aa26      	add	r2, sp, #152	@ 0x98
 802ac9c:	4659      	mov	r1, fp
 802ac9e:	f000 fb4f 	bl	802b340 <__sprint_r>
 802aca2:	2800      	cmp	r0, #0
 802aca4:	f040 82a7 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802aca8:	ac29      	add	r4, sp, #164	@ 0xa4
 802acaa:	e7c9      	b.n	802ac40 <_vfprintf_r+0xdd8>
 802acac:	3210      	adds	r2, #16
 802acae:	2b07      	cmp	r3, #7
 802acb0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802acb4:	f8c4 8004 	str.w	r8, [r4, #4]
 802acb8:	dd08      	ble.n	802accc <_vfprintf_r+0xe64>
 802acba:	9803      	ldr	r0, [sp, #12]
 802acbc:	aa26      	add	r2, sp, #152	@ 0x98
 802acbe:	4659      	mov	r1, fp
 802acc0:	f000 fb3e 	bl	802b340 <__sprint_r>
 802acc4:	2800      	cmp	r0, #0
 802acc6:	f040 8296 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802acca:	a929      	add	r1, sp, #164	@ 0xa4
 802accc:	3e10      	subs	r6, #16
 802acce:	460c      	mov	r4, r1
 802acd0:	e7be      	b.n	802ac50 <_vfprintf_r+0xde8>
 802acd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802acd4:	2b00      	cmp	r3, #0
 802acd6:	dc7d      	bgt.n	802add4 <_vfprintf_r+0xf6c>
 802acd8:	4b3c      	ldr	r3, [pc, #240]	@ (802adcc <_vfprintf_r+0xf64>)
 802acda:	6023      	str	r3, [r4, #0]
 802acdc:	2301      	movs	r3, #1
 802acde:	6063      	str	r3, [r4, #4]
 802ace0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ace2:	3301      	adds	r3, #1
 802ace4:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ace6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ace8:	3301      	adds	r3, #1
 802acea:	2b07      	cmp	r3, #7
 802acec:	9327      	str	r3, [sp, #156]	@ 0x9c
 802acee:	dc46      	bgt.n	802ad7e <_vfprintf_r+0xf16>
 802acf0:	3408      	adds	r4, #8
 802acf2:	9904      	ldr	r1, [sp, #16]
 802acf4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802acf6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802acf8:	430b      	orrs	r3, r1
 802acfa:	f005 0101 	and.w	r1, r5, #1
 802acfe:	430b      	orrs	r3, r1
 802ad00:	f43f ad08 	beq.w	802a714 <_vfprintf_r+0x8ac>
 802ad04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ad06:	6023      	str	r3, [r4, #0]
 802ad08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ad0a:	6063      	str	r3, [r4, #4]
 802ad0c:	441a      	add	r2, r3
 802ad0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad10:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ad12:	3301      	adds	r3, #1
 802ad14:	2b07      	cmp	r3, #7
 802ad16:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad18:	dc3b      	bgt.n	802ad92 <_vfprintf_r+0xf2a>
 802ad1a:	f104 0308 	add.w	r3, r4, #8
 802ad1e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ad20:	2e00      	cmp	r6, #0
 802ad22:	da1b      	bge.n	802ad5c <_vfprintf_r+0xef4>
 802ad24:	4f2a      	ldr	r7, [pc, #168]	@ (802add0 <_vfprintf_r+0xf68>)
 802ad26:	4276      	negs	r6, r6
 802ad28:	461a      	mov	r2, r3
 802ad2a:	2410      	movs	r4, #16
 802ad2c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ad30:	2e10      	cmp	r6, #16
 802ad32:	f101 0101 	add.w	r1, r1, #1
 802ad36:	f103 0308 	add.w	r3, r3, #8
 802ad3a:	6017      	str	r7, [r2, #0]
 802ad3c:	dc33      	bgt.n	802ada6 <_vfprintf_r+0xf3e>
 802ad3e:	6056      	str	r6, [r2, #4]
 802ad40:	2907      	cmp	r1, #7
 802ad42:	4406      	add	r6, r0
 802ad44:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ad48:	dd08      	ble.n	802ad5c <_vfprintf_r+0xef4>
 802ad4a:	9803      	ldr	r0, [sp, #12]
 802ad4c:	aa26      	add	r2, sp, #152	@ 0x98
 802ad4e:	4659      	mov	r1, fp
 802ad50:	f000 faf6 	bl	802b340 <__sprint_r>
 802ad54:	2800      	cmp	r0, #0
 802ad56:	f040 824e 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ad5a:	ab29      	add	r3, sp, #164	@ 0xa4
 802ad5c:	9a04      	ldr	r2, [sp, #16]
 802ad5e:	9904      	ldr	r1, [sp, #16]
 802ad60:	605a      	str	r2, [r3, #4]
 802ad62:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ad64:	f8c3 8000 	str.w	r8, [r3]
 802ad68:	440a      	add	r2, r1
 802ad6a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ad6c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802ad6e:	3201      	adds	r2, #1
 802ad70:	2a07      	cmp	r2, #7
 802ad72:	9227      	str	r2, [sp, #156]	@ 0x9c
 802ad74:	f73f af7c 	bgt.w	802ac70 <_vfprintf_r+0xe08>
 802ad78:	f103 0408 	add.w	r4, r3, #8
 802ad7c:	e4ca      	b.n	802a714 <_vfprintf_r+0x8ac>
 802ad7e:	9803      	ldr	r0, [sp, #12]
 802ad80:	aa26      	add	r2, sp, #152	@ 0x98
 802ad82:	4659      	mov	r1, fp
 802ad84:	f000 fadc 	bl	802b340 <__sprint_r>
 802ad88:	2800      	cmp	r0, #0
 802ad8a:	f040 8234 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ad8e:	ac29      	add	r4, sp, #164	@ 0xa4
 802ad90:	e7af      	b.n	802acf2 <_vfprintf_r+0xe8a>
 802ad92:	9803      	ldr	r0, [sp, #12]
 802ad94:	aa26      	add	r2, sp, #152	@ 0x98
 802ad96:	4659      	mov	r1, fp
 802ad98:	f000 fad2 	bl	802b340 <__sprint_r>
 802ad9c:	2800      	cmp	r0, #0
 802ad9e:	f040 822a 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ada2:	ab29      	add	r3, sp, #164	@ 0xa4
 802ada4:	e7bb      	b.n	802ad1e <_vfprintf_r+0xeb6>
 802ada6:	3010      	adds	r0, #16
 802ada8:	2907      	cmp	r1, #7
 802adaa:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802adae:	6054      	str	r4, [r2, #4]
 802adb0:	dd08      	ble.n	802adc4 <_vfprintf_r+0xf5c>
 802adb2:	9803      	ldr	r0, [sp, #12]
 802adb4:	aa26      	add	r2, sp, #152	@ 0x98
 802adb6:	4659      	mov	r1, fp
 802adb8:	f000 fac2 	bl	802b340 <__sprint_r>
 802adbc:	2800      	cmp	r0, #0
 802adbe:	f040 821a 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802adc2:	ab29      	add	r3, sp, #164	@ 0xa4
 802adc4:	3e10      	subs	r6, #16
 802adc6:	461a      	mov	r2, r3
 802adc8:	e7b0      	b.n	802ad2c <_vfprintf_r+0xec4>
 802adca:	bf00      	nop
 802adcc:	0803ba15 	.word	0x0803ba15
 802add0:	0803ba17 	.word	0x0803ba17
 802add4:	9b04      	ldr	r3, [sp, #16]
 802add6:	4443      	add	r3, r8
 802add8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802adda:	9b04      	ldr	r3, [sp, #16]
 802addc:	42b3      	cmp	r3, r6
 802adde:	bfa8      	it	ge
 802ade0:	4633      	movge	r3, r6
 802ade2:	2b00      	cmp	r3, #0
 802ade4:	4699      	mov	r9, r3
 802ade6:	dd0b      	ble.n	802ae00 <_vfprintf_r+0xf98>
 802ade8:	e9c4 8300 	strd	r8, r3, [r4]
 802adec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802adee:	444b      	add	r3, r9
 802adf0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802adf2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802adf4:	3301      	adds	r3, #1
 802adf6:	2b07      	cmp	r3, #7
 802adf8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802adfa:	f300 8089 	bgt.w	802af10 <_vfprintf_r+0x10a8>
 802adfe:	3408      	adds	r4, #8
 802ae00:	f1b9 0f00 	cmp.w	r9, #0
 802ae04:	bfac      	ite	ge
 802ae06:	eba6 0309 	subge.w	r3, r6, r9
 802ae0a:	4633      	movlt	r3, r6
 802ae0c:	2b00      	cmp	r3, #0
 802ae0e:	9306      	str	r3, [sp, #24]
 802ae10:	dd1c      	ble.n	802ae4c <_vfprintf_r+0xfe4>
 802ae12:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802b178 <_vfprintf_r+0x1310>
 802ae16:	9806      	ldr	r0, [sp, #24]
 802ae18:	f8c4 9000 	str.w	r9, [r4]
 802ae1c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802ae20:	2810      	cmp	r0, #16
 802ae22:	f102 0201 	add.w	r2, r2, #1
 802ae26:	f104 0108 	add.w	r1, r4, #8
 802ae2a:	dc7b      	bgt.n	802af24 <_vfprintf_r+0x10bc>
 802ae2c:	4403      	add	r3, r0
 802ae2e:	2a07      	cmp	r2, #7
 802ae30:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ae34:	6060      	str	r0, [r4, #4]
 802ae36:	f340 808a 	ble.w	802af4e <_vfprintf_r+0x10e6>
 802ae3a:	9803      	ldr	r0, [sp, #12]
 802ae3c:	aa26      	add	r2, sp, #152	@ 0x98
 802ae3e:	4659      	mov	r1, fp
 802ae40:	f000 fa7e 	bl	802b340 <__sprint_r>
 802ae44:	2800      	cmp	r0, #0
 802ae46:	f040 81d6 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802ae4a:	ac29      	add	r4, sp, #164	@ 0xa4
 802ae4c:	056a      	lsls	r2, r5, #21
 802ae4e:	44b0      	add	r8, r6
 802ae50:	d508      	bpl.n	802ae64 <_vfprintf_r+0xffc>
 802ae52:	9b08      	ldr	r3, [sp, #32]
 802ae54:	2b00      	cmp	r3, #0
 802ae56:	d17c      	bne.n	802af52 <_vfprintf_r+0x10ea>
 802ae58:	2f00      	cmp	r7, #0
 802ae5a:	d17c      	bne.n	802af56 <_vfprintf_r+0x10ee>
 802ae5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ae5e:	4598      	cmp	r8, r3
 802ae60:	bf28      	it	cs
 802ae62:	4698      	movcs	r8, r3
 802ae64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae66:	9a04      	ldr	r2, [sp, #16]
 802ae68:	4293      	cmp	r3, r2
 802ae6a:	db01      	blt.n	802ae70 <_vfprintf_r+0x1008>
 802ae6c:	07eb      	lsls	r3, r5, #31
 802ae6e:	d50e      	bpl.n	802ae8e <_vfprintf_r+0x1026>
 802ae70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ae72:	6023      	str	r3, [r4, #0]
 802ae74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ae76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ae78:	6063      	str	r3, [r4, #4]
 802ae7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ae7c:	4413      	add	r3, r2
 802ae7e:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae80:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae82:	3301      	adds	r3, #1
 802ae84:	2b07      	cmp	r3, #7
 802ae86:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae88:	f300 80e1 	bgt.w	802b04e <_vfprintf_r+0x11e6>
 802ae8c:	3408      	adds	r4, #8
 802ae8e:	9b04      	ldr	r3, [sp, #16]
 802ae90:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802ae92:	1bdf      	subs	r7, r3, r7
 802ae94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ae96:	eba3 0308 	sub.w	r3, r3, r8
 802ae9a:	429f      	cmp	r7, r3
 802ae9c:	bfa8      	it	ge
 802ae9e:	461f      	movge	r7, r3
 802aea0:	2f00      	cmp	r7, #0
 802aea2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aea4:	dd0a      	ble.n	802aebc <_vfprintf_r+0x1054>
 802aea6:	443b      	add	r3, r7
 802aea8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aeaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aeac:	3301      	adds	r3, #1
 802aeae:	2b07      	cmp	r3, #7
 802aeb0:	e9c4 8700 	strd	r8, r7, [r4]
 802aeb4:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aeb6:	f300 80d4 	bgt.w	802b062 <_vfprintf_r+0x11fa>
 802aeba:	3408      	adds	r4, #8
 802aebc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802aebe:	9b04      	ldr	r3, [sp, #16]
 802aec0:	2f00      	cmp	r7, #0
 802aec2:	eba3 0606 	sub.w	r6, r3, r6
 802aec6:	bfa8      	it	ge
 802aec8:	1bf6      	subge	r6, r6, r7
 802aeca:	2e00      	cmp	r6, #0
 802aecc:	f77f ac22 	ble.w	802a714 <_vfprintf_r+0x8ac>
 802aed0:	4fa9      	ldr	r7, [pc, #676]	@ (802b178 <_vfprintf_r+0x1310>)
 802aed2:	f04f 0810 	mov.w	r8, #16
 802aed6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802aeda:	2e10      	cmp	r6, #16
 802aedc:	f103 0301 	add.w	r3, r3, #1
 802aee0:	f104 0108 	add.w	r1, r4, #8
 802aee4:	6027      	str	r7, [r4, #0]
 802aee6:	f77f aebc 	ble.w	802ac62 <_vfprintf_r+0xdfa>
 802aeea:	3210      	adds	r2, #16
 802aeec:	2b07      	cmp	r3, #7
 802aeee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802aef2:	f8c4 8004 	str.w	r8, [r4, #4]
 802aef6:	dd08      	ble.n	802af0a <_vfprintf_r+0x10a2>
 802aef8:	9803      	ldr	r0, [sp, #12]
 802aefa:	aa26      	add	r2, sp, #152	@ 0x98
 802aefc:	4659      	mov	r1, fp
 802aefe:	f000 fa1f 	bl	802b340 <__sprint_r>
 802af02:	2800      	cmp	r0, #0
 802af04:	f040 8177 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802af08:	a929      	add	r1, sp, #164	@ 0xa4
 802af0a:	3e10      	subs	r6, #16
 802af0c:	460c      	mov	r4, r1
 802af0e:	e7e2      	b.n	802aed6 <_vfprintf_r+0x106e>
 802af10:	9803      	ldr	r0, [sp, #12]
 802af12:	aa26      	add	r2, sp, #152	@ 0x98
 802af14:	4659      	mov	r1, fp
 802af16:	f000 fa13 	bl	802b340 <__sprint_r>
 802af1a:	2800      	cmp	r0, #0
 802af1c:	f040 816b 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802af20:	ac29      	add	r4, sp, #164	@ 0xa4
 802af22:	e76d      	b.n	802ae00 <_vfprintf_r+0xf98>
 802af24:	2010      	movs	r0, #16
 802af26:	4403      	add	r3, r0
 802af28:	2a07      	cmp	r2, #7
 802af2a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af2e:	6060      	str	r0, [r4, #4]
 802af30:	dd08      	ble.n	802af44 <_vfprintf_r+0x10dc>
 802af32:	9803      	ldr	r0, [sp, #12]
 802af34:	aa26      	add	r2, sp, #152	@ 0x98
 802af36:	4659      	mov	r1, fp
 802af38:	f000 fa02 	bl	802b340 <__sprint_r>
 802af3c:	2800      	cmp	r0, #0
 802af3e:	f040 815a 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802af42:	a929      	add	r1, sp, #164	@ 0xa4
 802af44:	9b06      	ldr	r3, [sp, #24]
 802af46:	3b10      	subs	r3, #16
 802af48:	9306      	str	r3, [sp, #24]
 802af4a:	460c      	mov	r4, r1
 802af4c:	e763      	b.n	802ae16 <_vfprintf_r+0xfae>
 802af4e:	460c      	mov	r4, r1
 802af50:	e77c      	b.n	802ae4c <_vfprintf_r+0xfe4>
 802af52:	2f00      	cmp	r7, #0
 802af54:	d04b      	beq.n	802afee <_vfprintf_r+0x1186>
 802af56:	3f01      	subs	r7, #1
 802af58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802af5a:	6023      	str	r3, [r4, #0]
 802af5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802af5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802af60:	6063      	str	r3, [r4, #4]
 802af62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af64:	4413      	add	r3, r2
 802af66:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af68:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af6a:	3301      	adds	r3, #1
 802af6c:	2b07      	cmp	r3, #7
 802af6e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af70:	dc44      	bgt.n	802affc <_vfprintf_r+0x1194>
 802af72:	3408      	adds	r4, #8
 802af74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802af76:	f893 9000 	ldrb.w	r9, [r3]
 802af7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802af7c:	eba3 0308 	sub.w	r3, r3, r8
 802af80:	4599      	cmp	r9, r3
 802af82:	bfa8      	it	ge
 802af84:	4699      	movge	r9, r3
 802af86:	f1b9 0f00 	cmp.w	r9, #0
 802af8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af8c:	dd09      	ble.n	802afa2 <_vfprintf_r+0x113a>
 802af8e:	444b      	add	r3, r9
 802af90:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af92:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af94:	3301      	adds	r3, #1
 802af96:	2b07      	cmp	r3, #7
 802af98:	e9c4 8900 	strd	r8, r9, [r4]
 802af9c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af9e:	dc37      	bgt.n	802b010 <_vfprintf_r+0x11a8>
 802afa0:	3408      	adds	r4, #8
 802afa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802afa4:	781e      	ldrb	r6, [r3, #0]
 802afa6:	f1b9 0f00 	cmp.w	r9, #0
 802afaa:	bfa8      	it	ge
 802afac:	eba6 0609 	subge.w	r6, r6, r9
 802afb0:	2e00      	cmp	r6, #0
 802afb2:	dd18      	ble.n	802afe6 <_vfprintf_r+0x117e>
 802afb4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802afb8:	486f      	ldr	r0, [pc, #444]	@ (802b178 <_vfprintf_r+0x1310>)
 802afba:	6020      	str	r0, [r4, #0]
 802afbc:	2e10      	cmp	r6, #16
 802afbe:	f103 0301 	add.w	r3, r3, #1
 802afc2:	f104 0108 	add.w	r1, r4, #8
 802afc6:	dc2d      	bgt.n	802b024 <_vfprintf_r+0x11bc>
 802afc8:	6066      	str	r6, [r4, #4]
 802afca:	2b07      	cmp	r3, #7
 802afcc:	4416      	add	r6, r2
 802afce:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802afd2:	dd3a      	ble.n	802b04a <_vfprintf_r+0x11e2>
 802afd4:	9803      	ldr	r0, [sp, #12]
 802afd6:	aa26      	add	r2, sp, #152	@ 0x98
 802afd8:	4659      	mov	r1, fp
 802afda:	f000 f9b1 	bl	802b340 <__sprint_r>
 802afde:	2800      	cmp	r0, #0
 802afe0:	f040 8109 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802afe4:	ac29      	add	r4, sp, #164	@ 0xa4
 802afe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802afe8:	781b      	ldrb	r3, [r3, #0]
 802afea:	4498      	add	r8, r3
 802afec:	e731      	b.n	802ae52 <_vfprintf_r+0xfea>
 802afee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aff0:	3b01      	subs	r3, #1
 802aff2:	9309      	str	r3, [sp, #36]	@ 0x24
 802aff4:	9b08      	ldr	r3, [sp, #32]
 802aff6:	3b01      	subs	r3, #1
 802aff8:	9308      	str	r3, [sp, #32]
 802affa:	e7ad      	b.n	802af58 <_vfprintf_r+0x10f0>
 802affc:	9803      	ldr	r0, [sp, #12]
 802affe:	aa26      	add	r2, sp, #152	@ 0x98
 802b000:	4659      	mov	r1, fp
 802b002:	f000 f99d 	bl	802b340 <__sprint_r>
 802b006:	2800      	cmp	r0, #0
 802b008:	f040 80f5 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802b00c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b00e:	e7b1      	b.n	802af74 <_vfprintf_r+0x110c>
 802b010:	9803      	ldr	r0, [sp, #12]
 802b012:	aa26      	add	r2, sp, #152	@ 0x98
 802b014:	4659      	mov	r1, fp
 802b016:	f000 f993 	bl	802b340 <__sprint_r>
 802b01a:	2800      	cmp	r0, #0
 802b01c:	f040 80eb 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802b020:	ac29      	add	r4, sp, #164	@ 0xa4
 802b022:	e7be      	b.n	802afa2 <_vfprintf_r+0x113a>
 802b024:	2010      	movs	r0, #16
 802b026:	4402      	add	r2, r0
 802b028:	2b07      	cmp	r3, #7
 802b02a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b02e:	6060      	str	r0, [r4, #4]
 802b030:	dd08      	ble.n	802b044 <_vfprintf_r+0x11dc>
 802b032:	9803      	ldr	r0, [sp, #12]
 802b034:	aa26      	add	r2, sp, #152	@ 0x98
 802b036:	4659      	mov	r1, fp
 802b038:	f000 f982 	bl	802b340 <__sprint_r>
 802b03c:	2800      	cmp	r0, #0
 802b03e:	f040 80da 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802b042:	a929      	add	r1, sp, #164	@ 0xa4
 802b044:	3e10      	subs	r6, #16
 802b046:	460c      	mov	r4, r1
 802b048:	e7b4      	b.n	802afb4 <_vfprintf_r+0x114c>
 802b04a:	460c      	mov	r4, r1
 802b04c:	e7cb      	b.n	802afe6 <_vfprintf_r+0x117e>
 802b04e:	9803      	ldr	r0, [sp, #12]
 802b050:	aa26      	add	r2, sp, #152	@ 0x98
 802b052:	4659      	mov	r1, fp
 802b054:	f000 f974 	bl	802b340 <__sprint_r>
 802b058:	2800      	cmp	r0, #0
 802b05a:	f040 80cc 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802b05e:	ac29      	add	r4, sp, #164	@ 0xa4
 802b060:	e715      	b.n	802ae8e <_vfprintf_r+0x1026>
 802b062:	9803      	ldr	r0, [sp, #12]
 802b064:	aa26      	add	r2, sp, #152	@ 0x98
 802b066:	4659      	mov	r1, fp
 802b068:	f000 f96a 	bl	802b340 <__sprint_r>
 802b06c:	2800      	cmp	r0, #0
 802b06e:	f040 80c2 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802b072:	ac29      	add	r4, sp, #164	@ 0xa4
 802b074:	e722      	b.n	802aebc <_vfprintf_r+0x1054>
 802b076:	9904      	ldr	r1, [sp, #16]
 802b078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b07a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b07c:	2901      	cmp	r1, #1
 802b07e:	f103 0301 	add.w	r3, r3, #1
 802b082:	f102 0201 	add.w	r2, r2, #1
 802b086:	f104 0608 	add.w	r6, r4, #8
 802b08a:	dc02      	bgt.n	802b092 <_vfprintf_r+0x122a>
 802b08c:	07ef      	lsls	r7, r5, #31
 802b08e:	f140 8086 	bpl.w	802b19e <_vfprintf_r+0x1336>
 802b092:	2101      	movs	r1, #1
 802b094:	2a07      	cmp	r2, #7
 802b096:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b09a:	f8c4 8000 	str.w	r8, [r4]
 802b09e:	6061      	str	r1, [r4, #4]
 802b0a0:	dd08      	ble.n	802b0b4 <_vfprintf_r+0x124c>
 802b0a2:	9803      	ldr	r0, [sp, #12]
 802b0a4:	aa26      	add	r2, sp, #152	@ 0x98
 802b0a6:	4659      	mov	r1, fp
 802b0a8:	f000 f94a 	bl	802b340 <__sprint_r>
 802b0ac:	2800      	cmp	r0, #0
 802b0ae:	f040 80a2 	bne.w	802b1f6 <_vfprintf_r+0x138e>
 802b0b2:	ae29      	add	r6, sp, #164	@ 0xa4
 802b0b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b0b6:	6033      	str	r3, [r6, #0]
 802b0b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b0ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b0bc:	6073      	str	r3, [r6, #4]
 802b0be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0c0:	4413      	add	r3, r2
 802b0c2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0c4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0c6:	3301      	adds	r3, #1
 802b0c8:	2b07      	cmp	r3, #7
 802b0ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0cc:	dc33      	bgt.n	802b136 <_vfprintf_r+0x12ce>
 802b0ce:	3608      	adds	r6, #8
 802b0d0:	9b04      	ldr	r3, [sp, #16]
 802b0d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b0d6:	1e5c      	subs	r4, r3, #1
 802b0d8:	2200      	movs	r2, #0
 802b0da:	2300      	movs	r3, #0
 802b0dc:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802b0e0:	f7e5 fd0a 	bl	8010af8 <__aeabi_dcmpeq>
 802b0e4:	2800      	cmp	r0, #0
 802b0e6:	d12f      	bne.n	802b148 <_vfprintf_r+0x12e0>
 802b0e8:	f108 0201 	add.w	r2, r8, #1
 802b0ec:	e9c6 2400 	strd	r2, r4, [r6]
 802b0f0:	9a04      	ldr	r2, [sp, #16]
 802b0f2:	f109 0301 	add.w	r3, r9, #1
 802b0f6:	3f01      	subs	r7, #1
 802b0f8:	4417      	add	r7, r2
 802b0fa:	2b07      	cmp	r3, #7
 802b0fc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b100:	dd56      	ble.n	802b1b0 <_vfprintf_r+0x1348>
 802b102:	9803      	ldr	r0, [sp, #12]
 802b104:	aa26      	add	r2, sp, #152	@ 0x98
 802b106:	4659      	mov	r1, fp
 802b108:	f000 f91a 	bl	802b340 <__sprint_r>
 802b10c:	2800      	cmp	r0, #0
 802b10e:	d172      	bne.n	802b1f6 <_vfprintf_r+0x138e>
 802b110:	ae29      	add	r6, sp, #164	@ 0xa4
 802b112:	ab22      	add	r3, sp, #136	@ 0x88
 802b114:	6033      	str	r3, [r6, #0]
 802b116:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b118:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b11a:	6073      	str	r3, [r6, #4]
 802b11c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b11e:	4413      	add	r3, r2
 802b120:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b122:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b124:	3301      	adds	r3, #1
 802b126:	2b07      	cmp	r3, #7
 802b128:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b12a:	f73f ada1 	bgt.w	802ac70 <_vfprintf_r+0xe08>
 802b12e:	f106 0408 	add.w	r4, r6, #8
 802b132:	f7ff baef 	b.w	802a714 <_vfprintf_r+0x8ac>
 802b136:	9803      	ldr	r0, [sp, #12]
 802b138:	aa26      	add	r2, sp, #152	@ 0x98
 802b13a:	4659      	mov	r1, fp
 802b13c:	f000 f900 	bl	802b340 <__sprint_r>
 802b140:	2800      	cmp	r0, #0
 802b142:	d158      	bne.n	802b1f6 <_vfprintf_r+0x138e>
 802b144:	ae29      	add	r6, sp, #164	@ 0xa4
 802b146:	e7c3      	b.n	802b0d0 <_vfprintf_r+0x1268>
 802b148:	9b04      	ldr	r3, [sp, #16]
 802b14a:	2b01      	cmp	r3, #1
 802b14c:	dde1      	ble.n	802b112 <_vfprintf_r+0x12aa>
 802b14e:	4f0a      	ldr	r7, [pc, #40]	@ (802b178 <_vfprintf_r+0x1310>)
 802b150:	f04f 0810 	mov.w	r8, #16
 802b154:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b158:	2c10      	cmp	r4, #16
 802b15a:	f103 0301 	add.w	r3, r3, #1
 802b15e:	f106 0108 	add.w	r1, r6, #8
 802b162:	6037      	str	r7, [r6, #0]
 802b164:	dc0a      	bgt.n	802b17c <_vfprintf_r+0x1314>
 802b166:	6074      	str	r4, [r6, #4]
 802b168:	2b07      	cmp	r3, #7
 802b16a:	4414      	add	r4, r2
 802b16c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b170:	dcc7      	bgt.n	802b102 <_vfprintf_r+0x129a>
 802b172:	460e      	mov	r6, r1
 802b174:	e7cd      	b.n	802b112 <_vfprintf_r+0x12aa>
 802b176:	bf00      	nop
 802b178:	0803ba17 	.word	0x0803ba17
 802b17c:	3210      	adds	r2, #16
 802b17e:	2b07      	cmp	r3, #7
 802b180:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b184:	f8c6 8004 	str.w	r8, [r6, #4]
 802b188:	dd06      	ble.n	802b198 <_vfprintf_r+0x1330>
 802b18a:	9803      	ldr	r0, [sp, #12]
 802b18c:	aa26      	add	r2, sp, #152	@ 0x98
 802b18e:	4659      	mov	r1, fp
 802b190:	f000 f8d6 	bl	802b340 <__sprint_r>
 802b194:	bb78      	cbnz	r0, 802b1f6 <_vfprintf_r+0x138e>
 802b196:	a929      	add	r1, sp, #164	@ 0xa4
 802b198:	3c10      	subs	r4, #16
 802b19a:	460e      	mov	r6, r1
 802b19c:	e7da      	b.n	802b154 <_vfprintf_r+0x12ec>
 802b19e:	2101      	movs	r1, #1
 802b1a0:	2a07      	cmp	r2, #7
 802b1a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b1a6:	f8c4 8000 	str.w	r8, [r4]
 802b1aa:	6061      	str	r1, [r4, #4]
 802b1ac:	ddb1      	ble.n	802b112 <_vfprintf_r+0x12aa>
 802b1ae:	e7a8      	b.n	802b102 <_vfprintf_r+0x129a>
 802b1b0:	3608      	adds	r6, #8
 802b1b2:	e7ae      	b.n	802b112 <_vfprintf_r+0x12aa>
 802b1b4:	460c      	mov	r4, r1
 802b1b6:	f7ff baad 	b.w	802a714 <_vfprintf_r+0x8ac>
 802b1ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b1bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b1be:	1a9d      	subs	r5, r3, r2
 802b1c0:	2d00      	cmp	r5, #0
 802b1c2:	f77f aaaa 	ble.w	802a71a <_vfprintf_r+0x8b2>
 802b1c6:	4e3d      	ldr	r6, [pc, #244]	@ (802b2bc <_vfprintf_r+0x1454>)
 802b1c8:	2710      	movs	r7, #16
 802b1ca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b1ce:	2d10      	cmp	r5, #16
 802b1d0:	f103 0301 	add.w	r3, r3, #1
 802b1d4:	6026      	str	r6, [r4, #0]
 802b1d6:	dc18      	bgt.n	802b20a <_vfprintf_r+0x13a2>
 802b1d8:	6065      	str	r5, [r4, #4]
 802b1da:	2b07      	cmp	r3, #7
 802b1dc:	4415      	add	r5, r2
 802b1de:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802b1e2:	f77f aa9a 	ble.w	802a71a <_vfprintf_r+0x8b2>
 802b1e6:	9803      	ldr	r0, [sp, #12]
 802b1e8:	aa26      	add	r2, sp, #152	@ 0x98
 802b1ea:	4659      	mov	r1, fp
 802b1ec:	f000 f8a8 	bl	802b340 <__sprint_r>
 802b1f0:	2800      	cmp	r0, #0
 802b1f2:	f43f aa92 	beq.w	802a71a <_vfprintf_r+0x8b2>
 802b1f6:	f1ba 0f00 	cmp.w	sl, #0
 802b1fa:	f43f a892 	beq.w	802a322 <_vfprintf_r+0x4ba>
 802b1fe:	9803      	ldr	r0, [sp, #12]
 802b200:	4651      	mov	r1, sl
 802b202:	f003 fc7b 	bl	802eafc <_free_r>
 802b206:	f7ff b88c 	b.w	802a322 <_vfprintf_r+0x4ba>
 802b20a:	3210      	adds	r2, #16
 802b20c:	2b07      	cmp	r3, #7
 802b20e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b212:	6067      	str	r7, [r4, #4]
 802b214:	dc02      	bgt.n	802b21c <_vfprintf_r+0x13b4>
 802b216:	3408      	adds	r4, #8
 802b218:	3d10      	subs	r5, #16
 802b21a:	e7d6      	b.n	802b1ca <_vfprintf_r+0x1362>
 802b21c:	9803      	ldr	r0, [sp, #12]
 802b21e:	aa26      	add	r2, sp, #152	@ 0x98
 802b220:	4659      	mov	r1, fp
 802b222:	f000 f88d 	bl	802b340 <__sprint_r>
 802b226:	2800      	cmp	r0, #0
 802b228:	d1e5      	bne.n	802b1f6 <_vfprintf_r+0x138e>
 802b22a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b22c:	e7f4      	b.n	802b218 <_vfprintf_r+0x13b0>
 802b22e:	9803      	ldr	r0, [sp, #12]
 802b230:	4651      	mov	r1, sl
 802b232:	f003 fc63 	bl	802eafc <_free_r>
 802b236:	f7ff ba88 	b.w	802a74a <_vfprintf_r+0x8e2>
 802b23a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b23c:	b91b      	cbnz	r3, 802b246 <_vfprintf_r+0x13de>
 802b23e:	2300      	movs	r3, #0
 802b240:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b242:	f7ff b86e 	b.w	802a322 <_vfprintf_r+0x4ba>
 802b246:	9803      	ldr	r0, [sp, #12]
 802b248:	aa26      	add	r2, sp, #152	@ 0x98
 802b24a:	4659      	mov	r1, fp
 802b24c:	f000 f878 	bl	802b340 <__sprint_r>
 802b250:	2800      	cmp	r0, #0
 802b252:	d0f4      	beq.n	802b23e <_vfprintf_r+0x13d6>
 802b254:	f7ff b865 	b.w	802a322 <_vfprintf_r+0x4ba>
 802b258:	ea56 0207 	orrs.w	r2, r6, r7
 802b25c:	9508      	str	r5, [sp, #32]
 802b25e:	f43f ab75 	beq.w	802a94c <_vfprintf_r+0xae4>
 802b262:	2b01      	cmp	r3, #1
 802b264:	f43f abf6 	beq.w	802aa54 <_vfprintf_r+0xbec>
 802b268:	2b02      	cmp	r3, #2
 802b26a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802b26e:	f43f ac3a 	beq.w	802aae6 <_vfprintf_r+0xc7e>
 802b272:	f006 0307 	and.w	r3, r6, #7
 802b276:	08f6      	lsrs	r6, r6, #3
 802b278:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b27c:	08ff      	lsrs	r7, r7, #3
 802b27e:	3330      	adds	r3, #48	@ 0x30
 802b280:	ea56 0107 	orrs.w	r1, r6, r7
 802b284:	4642      	mov	r2, r8
 802b286:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802b28a:	d1f2      	bne.n	802b272 <_vfprintf_r+0x140a>
 802b28c:	9908      	ldr	r1, [sp, #32]
 802b28e:	07ce      	lsls	r6, r1, #31
 802b290:	d506      	bpl.n	802b2a0 <_vfprintf_r+0x1438>
 802b292:	2b30      	cmp	r3, #48	@ 0x30
 802b294:	d004      	beq.n	802b2a0 <_vfprintf_r+0x1438>
 802b296:	2330      	movs	r3, #48	@ 0x30
 802b298:	f808 3c01 	strb.w	r3, [r8, #-1]
 802b29c:	f1a2 0802 	sub.w	r8, r2, #2
 802b2a0:	ab52      	add	r3, sp, #328	@ 0x148
 802b2a2:	9d08      	ldr	r5, [sp, #32]
 802b2a4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802b2a8:	f04f 0a00 	mov.w	sl, #0
 802b2ac:	eba3 0908 	sub.w	r9, r3, r8
 802b2b0:	4657      	mov	r7, sl
 802b2b2:	f8cd a020 	str.w	sl, [sp, #32]
 802b2b6:	4656      	mov	r6, sl
 802b2b8:	f7ff b978 	b.w	802a5ac <_vfprintf_r+0x744>
 802b2bc:	0803ba27 	.word	0x0803ba27

0802b2c0 <__sbprintf>:
 802b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b2c2:	461f      	mov	r7, r3
 802b2c4:	898b      	ldrh	r3, [r1, #12]
 802b2c6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802b2ca:	f023 0302 	bic.w	r3, r3, #2
 802b2ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b2d2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b2d4:	9319      	str	r3, [sp, #100]	@ 0x64
 802b2d6:	89cb      	ldrh	r3, [r1, #14]
 802b2d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b2dc:	69cb      	ldr	r3, [r1, #28]
 802b2de:	9307      	str	r3, [sp, #28]
 802b2e0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802b2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 802b2e4:	ab1a      	add	r3, sp, #104	@ 0x68
 802b2e6:	9300      	str	r3, [sp, #0]
 802b2e8:	9304      	str	r3, [sp, #16]
 802b2ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b2ee:	4615      	mov	r5, r2
 802b2f0:	4606      	mov	r6, r0
 802b2f2:	9302      	str	r3, [sp, #8]
 802b2f4:	9305      	str	r3, [sp, #20]
 802b2f6:	a816      	add	r0, sp, #88	@ 0x58
 802b2f8:	2300      	movs	r3, #0
 802b2fa:	460c      	mov	r4, r1
 802b2fc:	9306      	str	r3, [sp, #24]
 802b2fe:	f002 fcf5 	bl	802dcec <__retarget_lock_init_recursive>
 802b302:	462a      	mov	r2, r5
 802b304:	463b      	mov	r3, r7
 802b306:	4669      	mov	r1, sp
 802b308:	4630      	mov	r0, r6
 802b30a:	f7fe fdad 	bl	8029e68 <_vfprintf_r>
 802b30e:	1e05      	subs	r5, r0, #0
 802b310:	db07      	blt.n	802b322 <__sbprintf+0x62>
 802b312:	4669      	mov	r1, sp
 802b314:	4630      	mov	r0, r6
 802b316:	f000 fecb 	bl	802c0b0 <_fflush_r>
 802b31a:	2800      	cmp	r0, #0
 802b31c:	bf18      	it	ne
 802b31e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b322:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802b326:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b328:	065b      	lsls	r3, r3, #25
 802b32a:	bf42      	ittt	mi
 802b32c:	89a3      	ldrhmi	r3, [r4, #12]
 802b32e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802b332:	81a3      	strhmi	r3, [r4, #12]
 802b334:	f002 fcdb 	bl	802dcee <__retarget_lock_close_recursive>
 802b338:	4628      	mov	r0, r5
 802b33a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802b33e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b340 <__sprint_r>:
 802b340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b344:	6893      	ldr	r3, [r2, #8]
 802b346:	4680      	mov	r8, r0
 802b348:	460e      	mov	r6, r1
 802b34a:	4614      	mov	r4, r2
 802b34c:	b343      	cbz	r3, 802b3a0 <__sprint_r+0x60>
 802b34e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b350:	049d      	lsls	r5, r3, #18
 802b352:	d522      	bpl.n	802b39a <__sprint_r+0x5a>
 802b354:	6815      	ldr	r5, [r2, #0]
 802b356:	68a0      	ldr	r0, [r4, #8]
 802b358:	3508      	adds	r5, #8
 802b35a:	b928      	cbnz	r0, 802b368 <__sprint_r+0x28>
 802b35c:	2300      	movs	r3, #0
 802b35e:	60a3      	str	r3, [r4, #8]
 802b360:	2300      	movs	r3, #0
 802b362:	6063      	str	r3, [r4, #4]
 802b364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b368:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802b36c:	f04f 0900 	mov.w	r9, #0
 802b370:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802b374:	45ca      	cmp	sl, r9
 802b376:	dc05      	bgt.n	802b384 <__sprint_r+0x44>
 802b378:	68a3      	ldr	r3, [r4, #8]
 802b37a:	f027 0703 	bic.w	r7, r7, #3
 802b37e:	1bdb      	subs	r3, r3, r7
 802b380:	60a3      	str	r3, [r4, #8]
 802b382:	e7e8      	b.n	802b356 <__sprint_r+0x16>
 802b384:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802b388:	4632      	mov	r2, r6
 802b38a:	4640      	mov	r0, r8
 802b38c:	f001 fa35 	bl	802c7fa <_fputwc_r>
 802b390:	1c43      	adds	r3, r0, #1
 802b392:	d0e3      	beq.n	802b35c <__sprint_r+0x1c>
 802b394:	f109 0901 	add.w	r9, r9, #1
 802b398:	e7ec      	b.n	802b374 <__sprint_r+0x34>
 802b39a:	f001 f81d 	bl	802c3d8 <__sfvwrite_r>
 802b39e:	e7dd      	b.n	802b35c <__sprint_r+0x1c>
 802b3a0:	4618      	mov	r0, r3
 802b3a2:	e7dd      	b.n	802b360 <__sprint_r+0x20>

0802b3a4 <_vfiprintf_r>:
 802b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3a8:	b0bb      	sub	sp, #236	@ 0xec
 802b3aa:	460f      	mov	r7, r1
 802b3ac:	4693      	mov	fp, r2
 802b3ae:	461c      	mov	r4, r3
 802b3b0:	461d      	mov	r5, r3
 802b3b2:	9000      	str	r0, [sp, #0]
 802b3b4:	b118      	cbz	r0, 802b3be <_vfiprintf_r+0x1a>
 802b3b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b3b8:	b90b      	cbnz	r3, 802b3be <_vfiprintf_r+0x1a>
 802b3ba:	f000 ffbb 	bl	802c334 <__sinit>
 802b3be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b3c0:	07db      	lsls	r3, r3, #31
 802b3c2:	d405      	bmi.n	802b3d0 <_vfiprintf_r+0x2c>
 802b3c4:	89bb      	ldrh	r3, [r7, #12]
 802b3c6:	059e      	lsls	r6, r3, #22
 802b3c8:	d402      	bmi.n	802b3d0 <_vfiprintf_r+0x2c>
 802b3ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b3cc:	f002 fc91 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 802b3d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b3d4:	0498      	lsls	r0, r3, #18
 802b3d6:	d406      	bmi.n	802b3e6 <_vfiprintf_r+0x42>
 802b3d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b3dc:	81bb      	strh	r3, [r7, #12]
 802b3de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b3e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b3e4:	667b      	str	r3, [r7, #100]	@ 0x64
 802b3e6:	89bb      	ldrh	r3, [r7, #12]
 802b3e8:	0719      	lsls	r1, r3, #28
 802b3ea:	d501      	bpl.n	802b3f0 <_vfiprintf_r+0x4c>
 802b3ec:	693b      	ldr	r3, [r7, #16]
 802b3ee:	b9ab      	cbnz	r3, 802b41c <_vfiprintf_r+0x78>
 802b3f0:	9800      	ldr	r0, [sp, #0]
 802b3f2:	4639      	mov	r1, r7
 802b3f4:	f001 f95a 	bl	802c6ac <__swsetup_r>
 802b3f8:	b180      	cbz	r0, 802b41c <_vfiprintf_r+0x78>
 802b3fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b3fc:	07da      	lsls	r2, r3, #31
 802b3fe:	d506      	bpl.n	802b40e <_vfiprintf_r+0x6a>
 802b400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b404:	9303      	str	r3, [sp, #12]
 802b406:	9803      	ldr	r0, [sp, #12]
 802b408:	b03b      	add	sp, #236	@ 0xec
 802b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b40e:	89bb      	ldrh	r3, [r7, #12]
 802b410:	059b      	lsls	r3, r3, #22
 802b412:	d4f5      	bmi.n	802b400 <_vfiprintf_r+0x5c>
 802b414:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b416:	f002 fc6e 	bl	802dcf6 <__retarget_lock_release_recursive>
 802b41a:	e7f1      	b.n	802b400 <_vfiprintf_r+0x5c>
 802b41c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802b420:	f003 021a 	and.w	r2, r3, #26
 802b424:	2a0a      	cmp	r2, #10
 802b426:	d114      	bne.n	802b452 <_vfiprintf_r+0xae>
 802b428:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802b42c:	2a00      	cmp	r2, #0
 802b42e:	db10      	blt.n	802b452 <_vfiprintf_r+0xae>
 802b430:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802b432:	07d6      	lsls	r6, r2, #31
 802b434:	d404      	bmi.n	802b440 <_vfiprintf_r+0x9c>
 802b436:	059d      	lsls	r5, r3, #22
 802b438:	d402      	bmi.n	802b440 <_vfiprintf_r+0x9c>
 802b43a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b43c:	f002 fc5b 	bl	802dcf6 <__retarget_lock_release_recursive>
 802b440:	9800      	ldr	r0, [sp, #0]
 802b442:	4623      	mov	r3, r4
 802b444:	465a      	mov	r2, fp
 802b446:	4639      	mov	r1, r7
 802b448:	b03b      	add	sp, #236	@ 0xec
 802b44a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b44e:	f000 bc31 	b.w	802bcb4 <__sbprintf>
 802b452:	2300      	movs	r3, #0
 802b454:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802b458:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802b45c:	ae11      	add	r6, sp, #68	@ 0x44
 802b45e:	960e      	str	r6, [sp, #56]	@ 0x38
 802b460:	9307      	str	r3, [sp, #28]
 802b462:	9309      	str	r3, [sp, #36]	@ 0x24
 802b464:	9303      	str	r3, [sp, #12]
 802b466:	465b      	mov	r3, fp
 802b468:	461c      	mov	r4, r3
 802b46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b46e:	b10a      	cbz	r2, 802b474 <_vfiprintf_r+0xd0>
 802b470:	2a25      	cmp	r2, #37	@ 0x25
 802b472:	d1f9      	bne.n	802b468 <_vfiprintf_r+0xc4>
 802b474:	ebb4 080b 	subs.w	r8, r4, fp
 802b478:	d00d      	beq.n	802b496 <_vfiprintf_r+0xf2>
 802b47a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b47c:	4443      	add	r3, r8
 802b47e:	9310      	str	r3, [sp, #64]	@ 0x40
 802b480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b482:	3301      	adds	r3, #1
 802b484:	2b07      	cmp	r3, #7
 802b486:	e9c6 b800 	strd	fp, r8, [r6]
 802b48a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b48c:	dc75      	bgt.n	802b57a <_vfiprintf_r+0x1d6>
 802b48e:	3608      	adds	r6, #8
 802b490:	9b03      	ldr	r3, [sp, #12]
 802b492:	4443      	add	r3, r8
 802b494:	9303      	str	r3, [sp, #12]
 802b496:	7823      	ldrb	r3, [r4, #0]
 802b498:	2b00      	cmp	r3, #0
 802b49a:	f000 83cd 	beq.w	802bc38 <_vfiprintf_r+0x894>
 802b49e:	2300      	movs	r3, #0
 802b4a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b4a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802b4a8:	3401      	adds	r4, #1
 802b4aa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b4ae:	469a      	mov	sl, r3
 802b4b0:	46a3      	mov	fp, r4
 802b4b2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802b4b6:	f1a3 0220 	sub.w	r2, r3, #32
 802b4ba:	2a5a      	cmp	r2, #90	@ 0x5a
 802b4bc:	f200 8316 	bhi.w	802baec <_vfiprintf_r+0x748>
 802b4c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b4c4:	0314009a 	.word	0x0314009a
 802b4c8:	00a20314 	.word	0x00a20314
 802b4cc:	03140314 	.word	0x03140314
 802b4d0:	00820314 	.word	0x00820314
 802b4d4:	03140314 	.word	0x03140314
 802b4d8:	00af00a5 	.word	0x00af00a5
 802b4dc:	00ac0314 	.word	0x00ac0314
 802b4e0:	031400b1 	.word	0x031400b1
 802b4e4:	00d000cd 	.word	0x00d000cd
 802b4e8:	00d000d0 	.word	0x00d000d0
 802b4ec:	00d000d0 	.word	0x00d000d0
 802b4f0:	00d000d0 	.word	0x00d000d0
 802b4f4:	00d000d0 	.word	0x00d000d0
 802b4f8:	03140314 	.word	0x03140314
 802b4fc:	03140314 	.word	0x03140314
 802b500:	03140314 	.word	0x03140314
 802b504:	03140314 	.word	0x03140314
 802b508:	00f70314 	.word	0x00f70314
 802b50c:	03140104 	.word	0x03140104
 802b510:	03140314 	.word	0x03140314
 802b514:	03140314 	.word	0x03140314
 802b518:	03140314 	.word	0x03140314
 802b51c:	03140314 	.word	0x03140314
 802b520:	01520314 	.word	0x01520314
 802b524:	03140314 	.word	0x03140314
 802b528:	019a0314 	.word	0x019a0314
 802b52c:	027a0314 	.word	0x027a0314
 802b530:	03140314 	.word	0x03140314
 802b534:	0314029a 	.word	0x0314029a
 802b538:	03140314 	.word	0x03140314
 802b53c:	03140314 	.word	0x03140314
 802b540:	03140314 	.word	0x03140314
 802b544:	03140314 	.word	0x03140314
 802b548:	00f70314 	.word	0x00f70314
 802b54c:	03140106 	.word	0x03140106
 802b550:	03140314 	.word	0x03140314
 802b554:	010600e0 	.word	0x010600e0
 802b558:	031400f1 	.word	0x031400f1
 802b55c:	031400eb 	.word	0x031400eb
 802b560:	01540132 	.word	0x01540132
 802b564:	00f10189 	.word	0x00f10189
 802b568:	019a0314 	.word	0x019a0314
 802b56c:	027c0098 	.word	0x027c0098
 802b570:	03140314 	.word	0x03140314
 802b574:	03140065 	.word	0x03140065
 802b578:	0098      	.short	0x0098
 802b57a:	9800      	ldr	r0, [sp, #0]
 802b57c:	aa0e      	add	r2, sp, #56	@ 0x38
 802b57e:	4639      	mov	r1, r7
 802b580:	f7ff fede 	bl	802b340 <__sprint_r>
 802b584:	2800      	cmp	r0, #0
 802b586:	f040 8336 	bne.w	802bbf6 <_vfiprintf_r+0x852>
 802b58a:	ae11      	add	r6, sp, #68	@ 0x44
 802b58c:	e780      	b.n	802b490 <_vfiprintf_r+0xec>
 802b58e:	4a99      	ldr	r2, [pc, #612]	@ (802b7f4 <_vfiprintf_r+0x450>)
 802b590:	9205      	str	r2, [sp, #20]
 802b592:	f01a 0220 	ands.w	r2, sl, #32
 802b596:	f000 8231 	beq.w	802b9fc <_vfiprintf_r+0x658>
 802b59a:	3507      	adds	r5, #7
 802b59c:	f025 0507 	bic.w	r5, r5, #7
 802b5a0:	46a8      	mov	r8, r5
 802b5a2:	686d      	ldr	r5, [r5, #4]
 802b5a4:	f858 4b08 	ldr.w	r4, [r8], #8
 802b5a8:	f01a 0f01 	tst.w	sl, #1
 802b5ac:	d009      	beq.n	802b5c2 <_vfiprintf_r+0x21e>
 802b5ae:	ea54 0205 	orrs.w	r2, r4, r5
 802b5b2:	bf1f      	itttt	ne
 802b5b4:	2230      	movne	r2, #48	@ 0x30
 802b5b6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802b5ba:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802b5be:	f04a 0a02 	orrne.w	sl, sl, #2
 802b5c2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b5c6:	e112      	b.n	802b7ee <_vfiprintf_r+0x44a>
 802b5c8:	9800      	ldr	r0, [sp, #0]
 802b5ca:	f002 fae7 	bl	802db9c <_localeconv_r>
 802b5ce:	6843      	ldr	r3, [r0, #4]
 802b5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 802b5d2:	4618      	mov	r0, r3
 802b5d4:	f7e4 fe64 	bl	80102a0 <strlen>
 802b5d8:	9007      	str	r0, [sp, #28]
 802b5da:	9800      	ldr	r0, [sp, #0]
 802b5dc:	f002 fade 	bl	802db9c <_localeconv_r>
 802b5e0:	6883      	ldr	r3, [r0, #8]
 802b5e2:	9306      	str	r3, [sp, #24]
 802b5e4:	9b07      	ldr	r3, [sp, #28]
 802b5e6:	b12b      	cbz	r3, 802b5f4 <_vfiprintf_r+0x250>
 802b5e8:	9b06      	ldr	r3, [sp, #24]
 802b5ea:	b11b      	cbz	r3, 802b5f4 <_vfiprintf_r+0x250>
 802b5ec:	781b      	ldrb	r3, [r3, #0]
 802b5ee:	b10b      	cbz	r3, 802b5f4 <_vfiprintf_r+0x250>
 802b5f0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802b5f4:	465c      	mov	r4, fp
 802b5f6:	e75b      	b.n	802b4b0 <_vfiprintf_r+0x10c>
 802b5f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b5fc:	2b00      	cmp	r3, #0
 802b5fe:	d1f9      	bne.n	802b5f4 <_vfiprintf_r+0x250>
 802b600:	2320      	movs	r3, #32
 802b602:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b606:	e7f5      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b608:	f04a 0a01 	orr.w	sl, sl, #1
 802b60c:	e7f2      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b60e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b612:	9302      	str	r3, [sp, #8]
 802b614:	2b00      	cmp	r3, #0
 802b616:	daed      	bge.n	802b5f4 <_vfiprintf_r+0x250>
 802b618:	425b      	negs	r3, r3
 802b61a:	9302      	str	r3, [sp, #8]
 802b61c:	f04a 0a04 	orr.w	sl, sl, #4
 802b620:	e7e8      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b622:	232b      	movs	r3, #43	@ 0x2b
 802b624:	e7ed      	b.n	802b602 <_vfiprintf_r+0x25e>
 802b626:	465a      	mov	r2, fp
 802b628:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b62c:	2b2a      	cmp	r3, #42	@ 0x2a
 802b62e:	d112      	bne.n	802b656 <_vfiprintf_r+0x2b2>
 802b630:	f855 3b04 	ldr.w	r3, [r5], #4
 802b634:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b638:	9301      	str	r3, [sp, #4]
 802b63a:	4693      	mov	fp, r2
 802b63c:	e7da      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b63e:	9b01      	ldr	r3, [sp, #4]
 802b640:	fb00 1303 	mla	r3, r0, r3, r1
 802b644:	9301      	str	r3, [sp, #4]
 802b646:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b64a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b64e:	2909      	cmp	r1, #9
 802b650:	d9f5      	bls.n	802b63e <_vfiprintf_r+0x29a>
 802b652:	4693      	mov	fp, r2
 802b654:	e72f      	b.n	802b4b6 <_vfiprintf_r+0x112>
 802b656:	2100      	movs	r1, #0
 802b658:	9101      	str	r1, [sp, #4]
 802b65a:	200a      	movs	r0, #10
 802b65c:	e7f5      	b.n	802b64a <_vfiprintf_r+0x2a6>
 802b65e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802b662:	e7c7      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b664:	2100      	movs	r1, #0
 802b666:	465a      	mov	r2, fp
 802b668:	9102      	str	r1, [sp, #8]
 802b66a:	200a      	movs	r0, #10
 802b66c:	9902      	ldr	r1, [sp, #8]
 802b66e:	3b30      	subs	r3, #48	@ 0x30
 802b670:	fb00 3301 	mla	r3, r0, r1, r3
 802b674:	9302      	str	r3, [sp, #8]
 802b676:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b67a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802b67e:	2909      	cmp	r1, #9
 802b680:	d9f4      	bls.n	802b66c <_vfiprintf_r+0x2c8>
 802b682:	e7e6      	b.n	802b652 <_vfiprintf_r+0x2ae>
 802b684:	f89b 3000 	ldrb.w	r3, [fp]
 802b688:	2b68      	cmp	r3, #104	@ 0x68
 802b68a:	bf06      	itte	eq
 802b68c:	f10b 0b01 	addeq.w	fp, fp, #1
 802b690:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802b694:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802b698:	e7ac      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b69a:	f89b 3000 	ldrb.w	r3, [fp]
 802b69e:	2b6c      	cmp	r3, #108	@ 0x6c
 802b6a0:	d104      	bne.n	802b6ac <_vfiprintf_r+0x308>
 802b6a2:	f10b 0b01 	add.w	fp, fp, #1
 802b6a6:	f04a 0a20 	orr.w	sl, sl, #32
 802b6aa:	e7a3      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b6ac:	f04a 0a10 	orr.w	sl, sl, #16
 802b6b0:	e7a0      	b.n	802b5f4 <_vfiprintf_r+0x250>
 802b6b2:	46a8      	mov	r8, r5
 802b6b4:	2400      	movs	r4, #0
 802b6b6:	f858 3b04 	ldr.w	r3, [r8], #4
 802b6ba:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b6be:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b6c2:	2301      	movs	r3, #1
 802b6c4:	9301      	str	r3, [sp, #4]
 802b6c6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802b6ca:	e0ab      	b.n	802b824 <_vfiprintf_r+0x480>
 802b6cc:	f04a 0a10 	orr.w	sl, sl, #16
 802b6d0:	f01a 0f20 	tst.w	sl, #32
 802b6d4:	d011      	beq.n	802b6fa <_vfiprintf_r+0x356>
 802b6d6:	3507      	adds	r5, #7
 802b6d8:	f025 0507 	bic.w	r5, r5, #7
 802b6dc:	46a8      	mov	r8, r5
 802b6de:	686d      	ldr	r5, [r5, #4]
 802b6e0:	f858 4b08 	ldr.w	r4, [r8], #8
 802b6e4:	2d00      	cmp	r5, #0
 802b6e6:	da06      	bge.n	802b6f6 <_vfiprintf_r+0x352>
 802b6e8:	4264      	negs	r4, r4
 802b6ea:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802b6ee:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802b6f2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802b6f6:	2301      	movs	r3, #1
 802b6f8:	e048      	b.n	802b78c <_vfiprintf_r+0x3e8>
 802b6fa:	46a8      	mov	r8, r5
 802b6fc:	f01a 0f10 	tst.w	sl, #16
 802b700:	f858 5b04 	ldr.w	r5, [r8], #4
 802b704:	d002      	beq.n	802b70c <_vfiprintf_r+0x368>
 802b706:	462c      	mov	r4, r5
 802b708:	17ed      	asrs	r5, r5, #31
 802b70a:	e7eb      	b.n	802b6e4 <_vfiprintf_r+0x340>
 802b70c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b710:	d003      	beq.n	802b71a <_vfiprintf_r+0x376>
 802b712:	b22c      	sxth	r4, r5
 802b714:	f345 35c0 	sbfx	r5, r5, #15, #1
 802b718:	e7e4      	b.n	802b6e4 <_vfiprintf_r+0x340>
 802b71a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b71e:	d0f2      	beq.n	802b706 <_vfiprintf_r+0x362>
 802b720:	b26c      	sxtb	r4, r5
 802b722:	f345 15c0 	sbfx	r5, r5, #7, #1
 802b726:	e7dd      	b.n	802b6e4 <_vfiprintf_r+0x340>
 802b728:	f01a 0f20 	tst.w	sl, #32
 802b72c:	d007      	beq.n	802b73e <_vfiprintf_r+0x39a>
 802b72e:	9a03      	ldr	r2, [sp, #12]
 802b730:	682b      	ldr	r3, [r5, #0]
 802b732:	9903      	ldr	r1, [sp, #12]
 802b734:	17d2      	asrs	r2, r2, #31
 802b736:	e9c3 1200 	strd	r1, r2, [r3]
 802b73a:	3504      	adds	r5, #4
 802b73c:	e693      	b.n	802b466 <_vfiprintf_r+0xc2>
 802b73e:	f01a 0f10 	tst.w	sl, #16
 802b742:	d003      	beq.n	802b74c <_vfiprintf_r+0x3a8>
 802b744:	682b      	ldr	r3, [r5, #0]
 802b746:	9a03      	ldr	r2, [sp, #12]
 802b748:	601a      	str	r2, [r3, #0]
 802b74a:	e7f6      	b.n	802b73a <_vfiprintf_r+0x396>
 802b74c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802b750:	d003      	beq.n	802b75a <_vfiprintf_r+0x3b6>
 802b752:	682b      	ldr	r3, [r5, #0]
 802b754:	9a03      	ldr	r2, [sp, #12]
 802b756:	801a      	strh	r2, [r3, #0]
 802b758:	e7ef      	b.n	802b73a <_vfiprintf_r+0x396>
 802b75a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802b75e:	d0f1      	beq.n	802b744 <_vfiprintf_r+0x3a0>
 802b760:	682b      	ldr	r3, [r5, #0]
 802b762:	9a03      	ldr	r2, [sp, #12]
 802b764:	701a      	strb	r2, [r3, #0]
 802b766:	e7e8      	b.n	802b73a <_vfiprintf_r+0x396>
 802b768:	f04a 0a10 	orr.w	sl, sl, #16
 802b76c:	f01a 0320 	ands.w	r3, sl, #32
 802b770:	d01f      	beq.n	802b7b2 <_vfiprintf_r+0x40e>
 802b772:	3507      	adds	r5, #7
 802b774:	f025 0507 	bic.w	r5, r5, #7
 802b778:	46a8      	mov	r8, r5
 802b77a:	686d      	ldr	r5, [r5, #4]
 802b77c:	f858 4b08 	ldr.w	r4, [r8], #8
 802b780:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802b784:	2300      	movs	r3, #0
 802b786:	2200      	movs	r2, #0
 802b788:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802b78c:	9a01      	ldr	r2, [sp, #4]
 802b78e:	3201      	adds	r2, #1
 802b790:	f000 825f 	beq.w	802bc52 <_vfiprintf_r+0x8ae>
 802b794:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802b798:	9204      	str	r2, [sp, #16]
 802b79a:	ea54 0205 	orrs.w	r2, r4, r5
 802b79e:	f040 825e 	bne.w	802bc5e <_vfiprintf_r+0x8ba>
 802b7a2:	9a01      	ldr	r2, [sp, #4]
 802b7a4:	2a00      	cmp	r2, #0
 802b7a6:	f000 8198 	beq.w	802bada <_vfiprintf_r+0x736>
 802b7aa:	2b01      	cmp	r3, #1
 802b7ac:	f040 825a 	bne.w	802bc64 <_vfiprintf_r+0x8c0>
 802b7b0:	e13b      	b.n	802ba2a <_vfiprintf_r+0x686>
 802b7b2:	46a8      	mov	r8, r5
 802b7b4:	f01a 0510 	ands.w	r5, sl, #16
 802b7b8:	f858 4b04 	ldr.w	r4, [r8], #4
 802b7bc:	d001      	beq.n	802b7c2 <_vfiprintf_r+0x41e>
 802b7be:	461d      	mov	r5, r3
 802b7c0:	e7de      	b.n	802b780 <_vfiprintf_r+0x3dc>
 802b7c2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b7c6:	d001      	beq.n	802b7cc <_vfiprintf_r+0x428>
 802b7c8:	b2a4      	uxth	r4, r4
 802b7ca:	e7d9      	b.n	802b780 <_vfiprintf_r+0x3dc>
 802b7cc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b7d0:	d0d6      	beq.n	802b780 <_vfiprintf_r+0x3dc>
 802b7d2:	b2e4      	uxtb	r4, r4
 802b7d4:	e7f3      	b.n	802b7be <_vfiprintf_r+0x41a>
 802b7d6:	46a8      	mov	r8, r5
 802b7d8:	f647 0330 	movw	r3, #30768	@ 0x7830
 802b7dc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802b7e0:	f858 4b04 	ldr.w	r4, [r8], #4
 802b7e4:	4b03      	ldr	r3, [pc, #12]	@ (802b7f4 <_vfiprintf_r+0x450>)
 802b7e6:	9305      	str	r3, [sp, #20]
 802b7e8:	2500      	movs	r5, #0
 802b7ea:	f04a 0a02 	orr.w	sl, sl, #2
 802b7ee:	2302      	movs	r3, #2
 802b7f0:	e7c9      	b.n	802b786 <_vfiprintf_r+0x3e2>
 802b7f2:	bf00      	nop
 802b7f4:	0803b9f3 	.word	0x0803b9f3
 802b7f8:	9b01      	ldr	r3, [sp, #4]
 802b7fa:	46a8      	mov	r8, r5
 802b7fc:	1c5c      	adds	r4, r3, #1
 802b7fe:	f04f 0500 	mov.w	r5, #0
 802b802:	f858 9b04 	ldr.w	r9, [r8], #4
 802b806:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802b80a:	f000 80d0 	beq.w	802b9ae <_vfiprintf_r+0x60a>
 802b80e:	461a      	mov	r2, r3
 802b810:	4629      	mov	r1, r5
 802b812:	4648      	mov	r0, r9
 802b814:	f7e4 fcf4 	bl	8010200 <memchr>
 802b818:	4604      	mov	r4, r0
 802b81a:	b118      	cbz	r0, 802b824 <_vfiprintf_r+0x480>
 802b81c:	eba0 0309 	sub.w	r3, r0, r9
 802b820:	9301      	str	r3, [sp, #4]
 802b822:	462c      	mov	r4, r5
 802b824:	9b01      	ldr	r3, [sp, #4]
 802b826:	42a3      	cmp	r3, r4
 802b828:	bfb8      	it	lt
 802b82a:	4623      	movlt	r3, r4
 802b82c:	9304      	str	r3, [sp, #16]
 802b82e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802b832:	b113      	cbz	r3, 802b83a <_vfiprintf_r+0x496>
 802b834:	9b04      	ldr	r3, [sp, #16]
 802b836:	3301      	adds	r3, #1
 802b838:	9304      	str	r3, [sp, #16]
 802b83a:	f01a 0302 	ands.w	r3, sl, #2
 802b83e:	9308      	str	r3, [sp, #32]
 802b840:	bf1e      	ittt	ne
 802b842:	9b04      	ldrne	r3, [sp, #16]
 802b844:	3302      	addne	r3, #2
 802b846:	9304      	strne	r3, [sp, #16]
 802b848:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802b84c:	930a      	str	r3, [sp, #40]	@ 0x28
 802b84e:	d11f      	bne.n	802b890 <_vfiprintf_r+0x4ec>
 802b850:	9b02      	ldr	r3, [sp, #8]
 802b852:	9a04      	ldr	r2, [sp, #16]
 802b854:	1a9d      	subs	r5, r3, r2
 802b856:	2d00      	cmp	r5, #0
 802b858:	dd1a      	ble.n	802b890 <_vfiprintf_r+0x4ec>
 802b85a:	4ba9      	ldr	r3, [pc, #676]	@ (802bb00 <_vfiprintf_r+0x75c>)
 802b85c:	6033      	str	r3, [r6, #0]
 802b85e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b862:	2d10      	cmp	r5, #16
 802b864:	f102 0201 	add.w	r2, r2, #1
 802b868:	f106 0008 	add.w	r0, r6, #8
 802b86c:	f300 814e 	bgt.w	802bb0c <_vfiprintf_r+0x768>
 802b870:	6075      	str	r5, [r6, #4]
 802b872:	2a07      	cmp	r2, #7
 802b874:	4465      	add	r5, ip
 802b876:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b87a:	f340 815a 	ble.w	802bb32 <_vfiprintf_r+0x78e>
 802b87e:	9800      	ldr	r0, [sp, #0]
 802b880:	aa0e      	add	r2, sp, #56	@ 0x38
 802b882:	4639      	mov	r1, r7
 802b884:	f7ff fd5c 	bl	802b340 <__sprint_r>
 802b888:	2800      	cmp	r0, #0
 802b88a:	f040 81b4 	bne.w	802bbf6 <_vfiprintf_r+0x852>
 802b88e:	ae11      	add	r6, sp, #68	@ 0x44
 802b890:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802b894:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b898:	b161      	cbz	r1, 802b8b4 <_vfiprintf_r+0x510>
 802b89a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802b89e:	3301      	adds	r3, #1
 802b8a0:	6031      	str	r1, [r6, #0]
 802b8a2:	2101      	movs	r1, #1
 802b8a4:	440a      	add	r2, r1
 802b8a6:	2b07      	cmp	r3, #7
 802b8a8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b8ac:	6071      	str	r1, [r6, #4]
 802b8ae:	f300 8142 	bgt.w	802bb36 <_vfiprintf_r+0x792>
 802b8b2:	3608      	adds	r6, #8
 802b8b4:	9908      	ldr	r1, [sp, #32]
 802b8b6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b8ba:	b159      	cbz	r1, 802b8d4 <_vfiprintf_r+0x530>
 802b8bc:	a90d      	add	r1, sp, #52	@ 0x34
 802b8be:	3301      	adds	r3, #1
 802b8c0:	6031      	str	r1, [r6, #0]
 802b8c2:	2102      	movs	r1, #2
 802b8c4:	440a      	add	r2, r1
 802b8c6:	2b07      	cmp	r3, #7
 802b8c8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b8cc:	6071      	str	r1, [r6, #4]
 802b8ce:	f300 813b 	bgt.w	802bb48 <_vfiprintf_r+0x7a4>
 802b8d2:	3608      	adds	r6, #8
 802b8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b8d6:	2b80      	cmp	r3, #128	@ 0x80
 802b8d8:	d11f      	bne.n	802b91a <_vfiprintf_r+0x576>
 802b8da:	9b02      	ldr	r3, [sp, #8]
 802b8dc:	9a04      	ldr	r2, [sp, #16]
 802b8de:	1a9d      	subs	r5, r3, r2
 802b8e0:	2d00      	cmp	r5, #0
 802b8e2:	dd1a      	ble.n	802b91a <_vfiprintf_r+0x576>
 802b8e4:	4b87      	ldr	r3, [pc, #540]	@ (802bb04 <_vfiprintf_r+0x760>)
 802b8e6:	6033      	str	r3, [r6, #0]
 802b8e8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b8ec:	2d10      	cmp	r5, #16
 802b8ee:	f102 0201 	add.w	r2, r2, #1
 802b8f2:	f106 0008 	add.w	r0, r6, #8
 802b8f6:	f300 8130 	bgt.w	802bb5a <_vfiprintf_r+0x7b6>
 802b8fa:	6075      	str	r5, [r6, #4]
 802b8fc:	2a07      	cmp	r2, #7
 802b8fe:	4465      	add	r5, ip
 802b900:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b904:	f340 813c 	ble.w	802bb80 <_vfiprintf_r+0x7dc>
 802b908:	9800      	ldr	r0, [sp, #0]
 802b90a:	aa0e      	add	r2, sp, #56	@ 0x38
 802b90c:	4639      	mov	r1, r7
 802b90e:	f7ff fd17 	bl	802b340 <__sprint_r>
 802b912:	2800      	cmp	r0, #0
 802b914:	f040 816f 	bne.w	802bbf6 <_vfiprintf_r+0x852>
 802b918:	ae11      	add	r6, sp, #68	@ 0x44
 802b91a:	9b01      	ldr	r3, [sp, #4]
 802b91c:	1ae4      	subs	r4, r4, r3
 802b91e:	2c00      	cmp	r4, #0
 802b920:	dd1a      	ble.n	802b958 <_vfiprintf_r+0x5b4>
 802b922:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b926:	4877      	ldr	r0, [pc, #476]	@ (802bb04 <_vfiprintf_r+0x760>)
 802b928:	6030      	str	r0, [r6, #0]
 802b92a:	2c10      	cmp	r4, #16
 802b92c:	f103 0301 	add.w	r3, r3, #1
 802b930:	f106 0108 	add.w	r1, r6, #8
 802b934:	f300 8126 	bgt.w	802bb84 <_vfiprintf_r+0x7e0>
 802b938:	6074      	str	r4, [r6, #4]
 802b93a:	2b07      	cmp	r3, #7
 802b93c:	4414      	add	r4, r2
 802b93e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802b942:	f340 8130 	ble.w	802bba6 <_vfiprintf_r+0x802>
 802b946:	9800      	ldr	r0, [sp, #0]
 802b948:	aa0e      	add	r2, sp, #56	@ 0x38
 802b94a:	4639      	mov	r1, r7
 802b94c:	f7ff fcf8 	bl	802b340 <__sprint_r>
 802b950:	2800      	cmp	r0, #0
 802b952:	f040 8150 	bne.w	802bbf6 <_vfiprintf_r+0x852>
 802b956:	ae11      	add	r6, sp, #68	@ 0x44
 802b958:	9b01      	ldr	r3, [sp, #4]
 802b95a:	9a01      	ldr	r2, [sp, #4]
 802b95c:	6073      	str	r3, [r6, #4]
 802b95e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b960:	f8c6 9000 	str.w	r9, [r6]
 802b964:	4413      	add	r3, r2
 802b966:	9310      	str	r3, [sp, #64]	@ 0x40
 802b968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b96a:	3301      	adds	r3, #1
 802b96c:	2b07      	cmp	r3, #7
 802b96e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b970:	f300 811b 	bgt.w	802bbaa <_vfiprintf_r+0x806>
 802b974:	f106 0308 	add.w	r3, r6, #8
 802b978:	f01a 0f04 	tst.w	sl, #4
 802b97c:	f040 811d 	bne.w	802bbba <_vfiprintf_r+0x816>
 802b980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b984:	9904      	ldr	r1, [sp, #16]
 802b986:	428a      	cmp	r2, r1
 802b988:	bfac      	ite	ge
 802b98a:	189b      	addge	r3, r3, r2
 802b98c:	185b      	addlt	r3, r3, r1
 802b98e:	9303      	str	r3, [sp, #12]
 802b990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b992:	b13b      	cbz	r3, 802b9a4 <_vfiprintf_r+0x600>
 802b994:	9800      	ldr	r0, [sp, #0]
 802b996:	aa0e      	add	r2, sp, #56	@ 0x38
 802b998:	4639      	mov	r1, r7
 802b99a:	f7ff fcd1 	bl	802b340 <__sprint_r>
 802b99e:	2800      	cmp	r0, #0
 802b9a0:	f040 8129 	bne.w	802bbf6 <_vfiprintf_r+0x852>
 802b9a4:	2300      	movs	r3, #0
 802b9a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b9a8:	4645      	mov	r5, r8
 802b9aa:	ae11      	add	r6, sp, #68	@ 0x44
 802b9ac:	e55b      	b.n	802b466 <_vfiprintf_r+0xc2>
 802b9ae:	4648      	mov	r0, r9
 802b9b0:	f7e4 fc76 	bl	80102a0 <strlen>
 802b9b4:	9001      	str	r0, [sp, #4]
 802b9b6:	e734      	b.n	802b822 <_vfiprintf_r+0x47e>
 802b9b8:	f04a 0a10 	orr.w	sl, sl, #16
 802b9bc:	f01a 0320 	ands.w	r3, sl, #32
 802b9c0:	d008      	beq.n	802b9d4 <_vfiprintf_r+0x630>
 802b9c2:	3507      	adds	r5, #7
 802b9c4:	f025 0507 	bic.w	r5, r5, #7
 802b9c8:	46a8      	mov	r8, r5
 802b9ca:	686d      	ldr	r5, [r5, #4]
 802b9cc:	f858 4b08 	ldr.w	r4, [r8], #8
 802b9d0:	2301      	movs	r3, #1
 802b9d2:	e6d8      	b.n	802b786 <_vfiprintf_r+0x3e2>
 802b9d4:	46a8      	mov	r8, r5
 802b9d6:	f01a 0510 	ands.w	r5, sl, #16
 802b9da:	f858 4b04 	ldr.w	r4, [r8], #4
 802b9de:	d001      	beq.n	802b9e4 <_vfiprintf_r+0x640>
 802b9e0:	461d      	mov	r5, r3
 802b9e2:	e7f5      	b.n	802b9d0 <_vfiprintf_r+0x62c>
 802b9e4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b9e8:	d001      	beq.n	802b9ee <_vfiprintf_r+0x64a>
 802b9ea:	b2a4      	uxth	r4, r4
 802b9ec:	e7f0      	b.n	802b9d0 <_vfiprintf_r+0x62c>
 802b9ee:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b9f2:	d0ed      	beq.n	802b9d0 <_vfiprintf_r+0x62c>
 802b9f4:	b2e4      	uxtb	r4, r4
 802b9f6:	e7f3      	b.n	802b9e0 <_vfiprintf_r+0x63c>
 802b9f8:	4a43      	ldr	r2, [pc, #268]	@ (802bb08 <_vfiprintf_r+0x764>)
 802b9fa:	e5c9      	b.n	802b590 <_vfiprintf_r+0x1ec>
 802b9fc:	46a8      	mov	r8, r5
 802b9fe:	f01a 0510 	ands.w	r5, sl, #16
 802ba02:	f858 4b04 	ldr.w	r4, [r8], #4
 802ba06:	d001      	beq.n	802ba0c <_vfiprintf_r+0x668>
 802ba08:	4615      	mov	r5, r2
 802ba0a:	e5cd      	b.n	802b5a8 <_vfiprintf_r+0x204>
 802ba0c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802ba10:	d001      	beq.n	802ba16 <_vfiprintf_r+0x672>
 802ba12:	b2a4      	uxth	r4, r4
 802ba14:	e5c8      	b.n	802b5a8 <_vfiprintf_r+0x204>
 802ba16:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802ba1a:	f43f adc5 	beq.w	802b5a8 <_vfiprintf_r+0x204>
 802ba1e:	b2e4      	uxtb	r4, r4
 802ba20:	e7f2      	b.n	802ba08 <_vfiprintf_r+0x664>
 802ba22:	2c0a      	cmp	r4, #10
 802ba24:	f175 0300 	sbcs.w	r3, r5, #0
 802ba28:	d206      	bcs.n	802ba38 <_vfiprintf_r+0x694>
 802ba2a:	3430      	adds	r4, #48	@ 0x30
 802ba2c:	b2e4      	uxtb	r4, r4
 802ba2e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802ba32:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802ba36:	e131      	b.n	802bc9c <_vfiprintf_r+0x8f8>
 802ba38:	ab3a      	add	r3, sp, #232	@ 0xe8
 802ba3a:	9308      	str	r3, [sp, #32]
 802ba3c:	9b04      	ldr	r3, [sp, #16]
 802ba3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802ba42:	f04f 0a00 	mov.w	sl, #0
 802ba46:	930a      	str	r3, [sp, #40]	@ 0x28
 802ba48:	220a      	movs	r2, #10
 802ba4a:	2300      	movs	r3, #0
 802ba4c:	4620      	mov	r0, r4
 802ba4e:	4629      	mov	r1, r5
 802ba50:	f7e5 f982 	bl	8010d58 <__aeabi_uldivmod>
 802ba54:	460b      	mov	r3, r1
 802ba56:	9908      	ldr	r1, [sp, #32]
 802ba58:	900b      	str	r0, [sp, #44]	@ 0x2c
 802ba5a:	3230      	adds	r2, #48	@ 0x30
 802ba5c:	f801 2c01 	strb.w	r2, [r1, #-1]
 802ba60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802ba62:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802ba66:	f10a 0a01 	add.w	sl, sl, #1
 802ba6a:	b1e2      	cbz	r2, 802baa6 <_vfiprintf_r+0x702>
 802ba6c:	9a06      	ldr	r2, [sp, #24]
 802ba6e:	7812      	ldrb	r2, [r2, #0]
 802ba70:	4552      	cmp	r2, sl
 802ba72:	d118      	bne.n	802baa6 <_vfiprintf_r+0x702>
 802ba74:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802ba78:	d015      	beq.n	802baa6 <_vfiprintf_r+0x702>
 802ba7a:	2c0a      	cmp	r4, #10
 802ba7c:	f175 0200 	sbcs.w	r2, r5, #0
 802ba80:	d311      	bcc.n	802baa6 <_vfiprintf_r+0x702>
 802ba82:	9308      	str	r3, [sp, #32]
 802ba84:	9b07      	ldr	r3, [sp, #28]
 802ba86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ba88:	eba9 0903 	sub.w	r9, r9, r3
 802ba8c:	461a      	mov	r2, r3
 802ba8e:	4648      	mov	r0, r9
 802ba90:	f000 ff3d 	bl	802c90e <strncpy>
 802ba94:	9b06      	ldr	r3, [sp, #24]
 802ba96:	785a      	ldrb	r2, [r3, #1]
 802ba98:	9b08      	ldr	r3, [sp, #32]
 802ba9a:	b172      	cbz	r2, 802baba <_vfiprintf_r+0x716>
 802ba9c:	9a06      	ldr	r2, [sp, #24]
 802ba9e:	3201      	adds	r2, #1
 802baa0:	9206      	str	r2, [sp, #24]
 802baa2:	f04f 0a00 	mov.w	sl, #0
 802baa6:	2c0a      	cmp	r4, #10
 802baa8:	f175 0500 	sbcs.w	r5, r5, #0
 802baac:	f0c0 80f6 	bcc.w	802bc9c <_vfiprintf_r+0x8f8>
 802bab0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802bab2:	f8cd 9020 	str.w	r9, [sp, #32]
 802bab6:	461d      	mov	r5, r3
 802bab8:	e7c6      	b.n	802ba48 <_vfiprintf_r+0x6a4>
 802baba:	4692      	mov	sl, r2
 802babc:	e7f3      	b.n	802baa6 <_vfiprintf_r+0x702>
 802babe:	f004 030f 	and.w	r3, r4, #15
 802bac2:	9a05      	ldr	r2, [sp, #20]
 802bac4:	0924      	lsrs	r4, r4, #4
 802bac6:	5cd3      	ldrb	r3, [r2, r3]
 802bac8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bacc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802bad0:	092d      	lsrs	r5, r5, #4
 802bad2:	ea54 0305 	orrs.w	r3, r4, r5
 802bad6:	d1f2      	bne.n	802babe <_vfiprintf_r+0x71a>
 802bad8:	e0e0      	b.n	802bc9c <_vfiprintf_r+0x8f8>
 802bada:	b923      	cbnz	r3, 802bae6 <_vfiprintf_r+0x742>
 802badc:	f01a 0f01 	tst.w	sl, #1
 802bae0:	d001      	beq.n	802bae6 <_vfiprintf_r+0x742>
 802bae2:	2430      	movs	r4, #48	@ 0x30
 802bae4:	e7a3      	b.n	802ba2e <_vfiprintf_r+0x68a>
 802bae6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802baea:	e0d7      	b.n	802bc9c <_vfiprintf_r+0x8f8>
 802baec:	2b00      	cmp	r3, #0
 802baee:	f000 80a3 	beq.w	802bc38 <_vfiprintf_r+0x894>
 802baf2:	2400      	movs	r4, #0
 802baf4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802baf8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802bafc:	46a8      	mov	r8, r5
 802bafe:	e5e0      	b.n	802b6c2 <_vfiprintf_r+0x31e>
 802bb00:	0803ba47 	.word	0x0803ba47
 802bb04:	0803ba37 	.word	0x0803ba37
 802bb08:	0803ba04 	.word	0x0803ba04
 802bb0c:	2110      	movs	r1, #16
 802bb0e:	6071      	str	r1, [r6, #4]
 802bb10:	2a07      	cmp	r2, #7
 802bb12:	4461      	add	r1, ip
 802bb14:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bb18:	dd08      	ble.n	802bb2c <_vfiprintf_r+0x788>
 802bb1a:	9800      	ldr	r0, [sp, #0]
 802bb1c:	aa0e      	add	r2, sp, #56	@ 0x38
 802bb1e:	4639      	mov	r1, r7
 802bb20:	f7ff fc0e 	bl	802b340 <__sprint_r>
 802bb24:	2800      	cmp	r0, #0
 802bb26:	d166      	bne.n	802bbf6 <_vfiprintf_r+0x852>
 802bb28:	4b60      	ldr	r3, [pc, #384]	@ (802bcac <_vfiprintf_r+0x908>)
 802bb2a:	a811      	add	r0, sp, #68	@ 0x44
 802bb2c:	3d10      	subs	r5, #16
 802bb2e:	4606      	mov	r6, r0
 802bb30:	e694      	b.n	802b85c <_vfiprintf_r+0x4b8>
 802bb32:	4606      	mov	r6, r0
 802bb34:	e6ac      	b.n	802b890 <_vfiprintf_r+0x4ec>
 802bb36:	9800      	ldr	r0, [sp, #0]
 802bb38:	aa0e      	add	r2, sp, #56	@ 0x38
 802bb3a:	4639      	mov	r1, r7
 802bb3c:	f7ff fc00 	bl	802b340 <__sprint_r>
 802bb40:	2800      	cmp	r0, #0
 802bb42:	d158      	bne.n	802bbf6 <_vfiprintf_r+0x852>
 802bb44:	ae11      	add	r6, sp, #68	@ 0x44
 802bb46:	e6b5      	b.n	802b8b4 <_vfiprintf_r+0x510>
 802bb48:	9800      	ldr	r0, [sp, #0]
 802bb4a:	aa0e      	add	r2, sp, #56	@ 0x38
 802bb4c:	4639      	mov	r1, r7
 802bb4e:	f7ff fbf7 	bl	802b340 <__sprint_r>
 802bb52:	2800      	cmp	r0, #0
 802bb54:	d14f      	bne.n	802bbf6 <_vfiprintf_r+0x852>
 802bb56:	ae11      	add	r6, sp, #68	@ 0x44
 802bb58:	e6bc      	b.n	802b8d4 <_vfiprintf_r+0x530>
 802bb5a:	2110      	movs	r1, #16
 802bb5c:	6071      	str	r1, [r6, #4]
 802bb5e:	2a07      	cmp	r2, #7
 802bb60:	4461      	add	r1, ip
 802bb62:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bb66:	dd08      	ble.n	802bb7a <_vfiprintf_r+0x7d6>
 802bb68:	9800      	ldr	r0, [sp, #0]
 802bb6a:	aa0e      	add	r2, sp, #56	@ 0x38
 802bb6c:	4639      	mov	r1, r7
 802bb6e:	f7ff fbe7 	bl	802b340 <__sprint_r>
 802bb72:	2800      	cmp	r0, #0
 802bb74:	d13f      	bne.n	802bbf6 <_vfiprintf_r+0x852>
 802bb76:	4b4e      	ldr	r3, [pc, #312]	@ (802bcb0 <_vfiprintf_r+0x90c>)
 802bb78:	a811      	add	r0, sp, #68	@ 0x44
 802bb7a:	3d10      	subs	r5, #16
 802bb7c:	4606      	mov	r6, r0
 802bb7e:	e6b2      	b.n	802b8e6 <_vfiprintf_r+0x542>
 802bb80:	4606      	mov	r6, r0
 802bb82:	e6ca      	b.n	802b91a <_vfiprintf_r+0x576>
 802bb84:	2010      	movs	r0, #16
 802bb86:	4402      	add	r2, r0
 802bb88:	2b07      	cmp	r3, #7
 802bb8a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802bb8e:	6070      	str	r0, [r6, #4]
 802bb90:	dd06      	ble.n	802bba0 <_vfiprintf_r+0x7fc>
 802bb92:	9800      	ldr	r0, [sp, #0]
 802bb94:	aa0e      	add	r2, sp, #56	@ 0x38
 802bb96:	4639      	mov	r1, r7
 802bb98:	f7ff fbd2 	bl	802b340 <__sprint_r>
 802bb9c:	bb58      	cbnz	r0, 802bbf6 <_vfiprintf_r+0x852>
 802bb9e:	a911      	add	r1, sp, #68	@ 0x44
 802bba0:	3c10      	subs	r4, #16
 802bba2:	460e      	mov	r6, r1
 802bba4:	e6bd      	b.n	802b922 <_vfiprintf_r+0x57e>
 802bba6:	460e      	mov	r6, r1
 802bba8:	e6d6      	b.n	802b958 <_vfiprintf_r+0x5b4>
 802bbaa:	9800      	ldr	r0, [sp, #0]
 802bbac:	aa0e      	add	r2, sp, #56	@ 0x38
 802bbae:	4639      	mov	r1, r7
 802bbb0:	f7ff fbc6 	bl	802b340 <__sprint_r>
 802bbb4:	b9f8      	cbnz	r0, 802bbf6 <_vfiprintf_r+0x852>
 802bbb6:	ab11      	add	r3, sp, #68	@ 0x44
 802bbb8:	e6de      	b.n	802b978 <_vfiprintf_r+0x5d4>
 802bbba:	9a02      	ldr	r2, [sp, #8]
 802bbbc:	9904      	ldr	r1, [sp, #16]
 802bbbe:	1a54      	subs	r4, r2, r1
 802bbc0:	2c00      	cmp	r4, #0
 802bbc2:	f77f aedd 	ble.w	802b980 <_vfiprintf_r+0x5dc>
 802bbc6:	4d39      	ldr	r5, [pc, #228]	@ (802bcac <_vfiprintf_r+0x908>)
 802bbc8:	2610      	movs	r6, #16
 802bbca:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802bbce:	2c10      	cmp	r4, #16
 802bbd0:	f102 0201 	add.w	r2, r2, #1
 802bbd4:	601d      	str	r5, [r3, #0]
 802bbd6:	dc1d      	bgt.n	802bc14 <_vfiprintf_r+0x870>
 802bbd8:	605c      	str	r4, [r3, #4]
 802bbda:	2a07      	cmp	r2, #7
 802bbdc:	440c      	add	r4, r1
 802bbde:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802bbe2:	f77f aecd 	ble.w	802b980 <_vfiprintf_r+0x5dc>
 802bbe6:	9800      	ldr	r0, [sp, #0]
 802bbe8:	aa0e      	add	r2, sp, #56	@ 0x38
 802bbea:	4639      	mov	r1, r7
 802bbec:	f7ff fba8 	bl	802b340 <__sprint_r>
 802bbf0:	2800      	cmp	r0, #0
 802bbf2:	f43f aec5 	beq.w	802b980 <_vfiprintf_r+0x5dc>
 802bbf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802bbf8:	07d9      	lsls	r1, r3, #31
 802bbfa:	d405      	bmi.n	802bc08 <_vfiprintf_r+0x864>
 802bbfc:	89bb      	ldrh	r3, [r7, #12]
 802bbfe:	059a      	lsls	r2, r3, #22
 802bc00:	d402      	bmi.n	802bc08 <_vfiprintf_r+0x864>
 802bc02:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802bc04:	f002 f877 	bl	802dcf6 <__retarget_lock_release_recursive>
 802bc08:	89bb      	ldrh	r3, [r7, #12]
 802bc0a:	065b      	lsls	r3, r3, #25
 802bc0c:	f57f abfb 	bpl.w	802b406 <_vfiprintf_r+0x62>
 802bc10:	f7ff bbf6 	b.w	802b400 <_vfiprintf_r+0x5c>
 802bc14:	3110      	adds	r1, #16
 802bc16:	2a07      	cmp	r2, #7
 802bc18:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802bc1c:	605e      	str	r6, [r3, #4]
 802bc1e:	dc02      	bgt.n	802bc26 <_vfiprintf_r+0x882>
 802bc20:	3308      	adds	r3, #8
 802bc22:	3c10      	subs	r4, #16
 802bc24:	e7d1      	b.n	802bbca <_vfiprintf_r+0x826>
 802bc26:	9800      	ldr	r0, [sp, #0]
 802bc28:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc2a:	4639      	mov	r1, r7
 802bc2c:	f7ff fb88 	bl	802b340 <__sprint_r>
 802bc30:	2800      	cmp	r0, #0
 802bc32:	d1e0      	bne.n	802bbf6 <_vfiprintf_r+0x852>
 802bc34:	ab11      	add	r3, sp, #68	@ 0x44
 802bc36:	e7f4      	b.n	802bc22 <_vfiprintf_r+0x87e>
 802bc38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bc3a:	b913      	cbnz	r3, 802bc42 <_vfiprintf_r+0x89e>
 802bc3c:	2300      	movs	r3, #0
 802bc3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bc40:	e7d9      	b.n	802bbf6 <_vfiprintf_r+0x852>
 802bc42:	9800      	ldr	r0, [sp, #0]
 802bc44:	aa0e      	add	r2, sp, #56	@ 0x38
 802bc46:	4639      	mov	r1, r7
 802bc48:	f7ff fb7a 	bl	802b340 <__sprint_r>
 802bc4c:	2800      	cmp	r0, #0
 802bc4e:	d0f5      	beq.n	802bc3c <_vfiprintf_r+0x898>
 802bc50:	e7d1      	b.n	802bbf6 <_vfiprintf_r+0x852>
 802bc52:	ea54 0205 	orrs.w	r2, r4, r5
 802bc56:	f8cd a010 	str.w	sl, [sp, #16]
 802bc5a:	f43f ada6 	beq.w	802b7aa <_vfiprintf_r+0x406>
 802bc5e:	2b01      	cmp	r3, #1
 802bc60:	f43f aedf 	beq.w	802ba22 <_vfiprintf_r+0x67e>
 802bc64:	2b02      	cmp	r3, #2
 802bc66:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802bc6a:	f43f af28 	beq.w	802babe <_vfiprintf_r+0x71a>
 802bc6e:	f004 0307 	and.w	r3, r4, #7
 802bc72:	08e4      	lsrs	r4, r4, #3
 802bc74:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802bc78:	08ed      	lsrs	r5, r5, #3
 802bc7a:	3330      	adds	r3, #48	@ 0x30
 802bc7c:	ea54 0105 	orrs.w	r1, r4, r5
 802bc80:	464a      	mov	r2, r9
 802bc82:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802bc86:	d1f2      	bne.n	802bc6e <_vfiprintf_r+0x8ca>
 802bc88:	9904      	ldr	r1, [sp, #16]
 802bc8a:	07c8      	lsls	r0, r1, #31
 802bc8c:	d506      	bpl.n	802bc9c <_vfiprintf_r+0x8f8>
 802bc8e:	2b30      	cmp	r3, #48	@ 0x30
 802bc90:	d004      	beq.n	802bc9c <_vfiprintf_r+0x8f8>
 802bc92:	2330      	movs	r3, #48	@ 0x30
 802bc94:	f809 3c01 	strb.w	r3, [r9, #-1]
 802bc98:	f1a2 0902 	sub.w	r9, r2, #2
 802bc9c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802bc9e:	eba3 0309 	sub.w	r3, r3, r9
 802bca2:	9c01      	ldr	r4, [sp, #4]
 802bca4:	f8dd a010 	ldr.w	sl, [sp, #16]
 802bca8:	9301      	str	r3, [sp, #4]
 802bcaa:	e5bb      	b.n	802b824 <_vfiprintf_r+0x480>
 802bcac:	0803ba47 	.word	0x0803ba47
 802bcb0:	0803ba37 	.word	0x0803ba37

0802bcb4 <__sbprintf>:
 802bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bcb6:	461f      	mov	r7, r3
 802bcb8:	898b      	ldrh	r3, [r1, #12]
 802bcba:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802bcbe:	f023 0302 	bic.w	r3, r3, #2
 802bcc2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802bcc6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802bcc8:	9319      	str	r3, [sp, #100]	@ 0x64
 802bcca:	89cb      	ldrh	r3, [r1, #14]
 802bccc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bcd0:	69cb      	ldr	r3, [r1, #28]
 802bcd2:	9307      	str	r3, [sp, #28]
 802bcd4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802bcd6:	9309      	str	r3, [sp, #36]	@ 0x24
 802bcd8:	ab1a      	add	r3, sp, #104	@ 0x68
 802bcda:	9300      	str	r3, [sp, #0]
 802bcdc:	9304      	str	r3, [sp, #16]
 802bcde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bce2:	4615      	mov	r5, r2
 802bce4:	4606      	mov	r6, r0
 802bce6:	9302      	str	r3, [sp, #8]
 802bce8:	9305      	str	r3, [sp, #20]
 802bcea:	a816      	add	r0, sp, #88	@ 0x58
 802bcec:	2300      	movs	r3, #0
 802bcee:	460c      	mov	r4, r1
 802bcf0:	9306      	str	r3, [sp, #24]
 802bcf2:	f001 fffb 	bl	802dcec <__retarget_lock_init_recursive>
 802bcf6:	462a      	mov	r2, r5
 802bcf8:	463b      	mov	r3, r7
 802bcfa:	4669      	mov	r1, sp
 802bcfc:	4630      	mov	r0, r6
 802bcfe:	f7ff fb51 	bl	802b3a4 <_vfiprintf_r>
 802bd02:	1e05      	subs	r5, r0, #0
 802bd04:	db07      	blt.n	802bd16 <__sbprintf+0x62>
 802bd06:	4669      	mov	r1, sp
 802bd08:	4630      	mov	r0, r6
 802bd0a:	f000 f9d1 	bl	802c0b0 <_fflush_r>
 802bd0e:	2800      	cmp	r0, #0
 802bd10:	bf18      	it	ne
 802bd12:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bd16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802bd1a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802bd1c:	065b      	lsls	r3, r3, #25
 802bd1e:	bf42      	ittt	mi
 802bd20:	89a3      	ldrhmi	r3, [r4, #12]
 802bd22:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802bd26:	81a3      	strhmi	r3, [r4, #12]
 802bd28:	f001 ffe1 	bl	802dcee <__retarget_lock_close_recursive>
 802bd2c:	4628      	mov	r0, r5
 802bd2e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802bd32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802bd34 <putchar>:
 802bd34:	4b02      	ldr	r3, [pc, #8]	@ (802bd40 <putchar+0xc>)
 802bd36:	4601      	mov	r1, r0
 802bd38:	6818      	ldr	r0, [r3, #0]
 802bd3a:	6882      	ldr	r2, [r0, #8]
 802bd3c:	f007 bacc 	b.w	80332d8 <_putc_r>
 802bd40:	200002d8 	.word	0x200002d8

0802bd44 <_puts_r>:
 802bd44:	b530      	push	{r4, r5, lr}
 802bd46:	4605      	mov	r5, r0
 802bd48:	b089      	sub	sp, #36	@ 0x24
 802bd4a:	4608      	mov	r0, r1
 802bd4c:	460c      	mov	r4, r1
 802bd4e:	f7e4 faa7 	bl	80102a0 <strlen>
 802bd52:	4b1e      	ldr	r3, [pc, #120]	@ (802bdcc <_puts_r+0x88>)
 802bd54:	9306      	str	r3, [sp, #24]
 802bd56:	2301      	movs	r3, #1
 802bd58:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802bd5c:	9307      	str	r3, [sp, #28]
 802bd5e:	4418      	add	r0, r3
 802bd60:	ab04      	add	r3, sp, #16
 802bd62:	9301      	str	r3, [sp, #4]
 802bd64:	2302      	movs	r3, #2
 802bd66:	9302      	str	r3, [sp, #8]
 802bd68:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802bd6a:	68ac      	ldr	r4, [r5, #8]
 802bd6c:	9003      	str	r0, [sp, #12]
 802bd6e:	b913      	cbnz	r3, 802bd76 <_puts_r+0x32>
 802bd70:	4628      	mov	r0, r5
 802bd72:	f000 fadf 	bl	802c334 <__sinit>
 802bd76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bd78:	07db      	lsls	r3, r3, #31
 802bd7a:	d405      	bmi.n	802bd88 <_puts_r+0x44>
 802bd7c:	89a3      	ldrh	r3, [r4, #12]
 802bd7e:	0598      	lsls	r0, r3, #22
 802bd80:	d402      	bmi.n	802bd88 <_puts_r+0x44>
 802bd82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bd84:	f001 ffb5 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 802bd88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bd8c:	0499      	lsls	r1, r3, #18
 802bd8e:	d406      	bmi.n	802bd9e <_puts_r+0x5a>
 802bd90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bd94:	81a3      	strh	r3, [r4, #12]
 802bd96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bd98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802bd9c:	6663      	str	r3, [r4, #100]	@ 0x64
 802bd9e:	4628      	mov	r0, r5
 802bda0:	aa01      	add	r2, sp, #4
 802bda2:	4621      	mov	r1, r4
 802bda4:	f000 fb18 	bl	802c3d8 <__sfvwrite_r>
 802bda8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bdaa:	2800      	cmp	r0, #0
 802bdac:	bf0c      	ite	eq
 802bdae:	250a      	moveq	r5, #10
 802bdb0:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802bdb4:	07da      	lsls	r2, r3, #31
 802bdb6:	d405      	bmi.n	802bdc4 <_puts_r+0x80>
 802bdb8:	89a3      	ldrh	r3, [r4, #12]
 802bdba:	059b      	lsls	r3, r3, #22
 802bdbc:	d402      	bmi.n	802bdc4 <_puts_r+0x80>
 802bdbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bdc0:	f001 ff99 	bl	802dcf6 <__retarget_lock_release_recursive>
 802bdc4:	4628      	mov	r0, r5
 802bdc6:	b009      	add	sp, #36	@ 0x24
 802bdc8:	bd30      	pop	{r4, r5, pc}
 802bdca:	bf00      	nop
 802bdcc:	0803b9e1 	.word	0x0803b9e1

0802bdd0 <puts>:
 802bdd0:	4b02      	ldr	r3, [pc, #8]	@ (802bddc <puts+0xc>)
 802bdd2:	4601      	mov	r1, r0
 802bdd4:	6818      	ldr	r0, [r3, #0]
 802bdd6:	f7ff bfb5 	b.w	802bd44 <_puts_r>
 802bdda:	bf00      	nop
 802bddc:	200002d8 	.word	0x200002d8

0802bde0 <srand>:
 802bde0:	4b03      	ldr	r3, [pc, #12]	@ (802bdf0 <srand+0x10>)
 802bde2:	681b      	ldr	r3, [r3, #0]
 802bde4:	2200      	movs	r2, #0
 802bde6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802bdea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802bdee:	4770      	bx	lr
 802bdf0:	200002d8 	.word	0x200002d8

0802bdf4 <rand>:
 802bdf4:	4b0a      	ldr	r3, [pc, #40]	@ (802be20 <rand+0x2c>)
 802bdf6:	480b      	ldr	r0, [pc, #44]	@ (802be24 <rand+0x30>)
 802bdf8:	6819      	ldr	r1, [r3, #0]
 802bdfa:	4a0b      	ldr	r2, [pc, #44]	@ (802be28 <rand+0x34>)
 802bdfc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802be00:	b510      	push	{r4, lr}
 802be02:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802be06:	4358      	muls	r0, r3
 802be08:	fb02 0004 	mla	r0, r2, r4, r0
 802be0c:	fba3 3202 	umull	r3, r2, r3, r2
 802be10:	3301      	adds	r3, #1
 802be12:	eb40 0002 	adc.w	r0, r0, r2
 802be16:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802be1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802be1e:	bd10      	pop	{r4, pc}
 802be20:	200002d8 	.word	0x200002d8
 802be24:	5851f42d 	.word	0x5851f42d
 802be28:	4c957f2d 	.word	0x4c957f2d

0802be2c <snprintf>:
 802be2c:	b40c      	push	{r2, r3}
 802be2e:	b530      	push	{r4, r5, lr}
 802be30:	4b17      	ldr	r3, [pc, #92]	@ (802be90 <snprintf+0x64>)
 802be32:	1e0c      	subs	r4, r1, #0
 802be34:	681d      	ldr	r5, [r3, #0]
 802be36:	b09d      	sub	sp, #116	@ 0x74
 802be38:	da08      	bge.n	802be4c <snprintf+0x20>
 802be3a:	238b      	movs	r3, #139	@ 0x8b
 802be3c:	602b      	str	r3, [r5, #0]
 802be3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802be42:	b01d      	add	sp, #116	@ 0x74
 802be44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802be48:	b002      	add	sp, #8
 802be4a:	4770      	bx	lr
 802be4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802be50:	f8ad 3014 	strh.w	r3, [sp, #20]
 802be54:	bf14      	ite	ne
 802be56:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802be5a:	4623      	moveq	r3, r4
 802be5c:	9304      	str	r3, [sp, #16]
 802be5e:	9307      	str	r3, [sp, #28]
 802be60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802be64:	9002      	str	r0, [sp, #8]
 802be66:	9006      	str	r0, [sp, #24]
 802be68:	f8ad 3016 	strh.w	r3, [sp, #22]
 802be6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802be6e:	ab21      	add	r3, sp, #132	@ 0x84
 802be70:	a902      	add	r1, sp, #8
 802be72:	4628      	mov	r0, r5
 802be74:	9301      	str	r3, [sp, #4]
 802be76:	f004 fe7b 	bl	8030b70 <_svfprintf_r>
 802be7a:	1c43      	adds	r3, r0, #1
 802be7c:	bfbc      	itt	lt
 802be7e:	238b      	movlt	r3, #139	@ 0x8b
 802be80:	602b      	strlt	r3, [r5, #0]
 802be82:	2c00      	cmp	r4, #0
 802be84:	d0dd      	beq.n	802be42 <snprintf+0x16>
 802be86:	9b02      	ldr	r3, [sp, #8]
 802be88:	2200      	movs	r2, #0
 802be8a:	701a      	strb	r2, [r3, #0]
 802be8c:	e7d9      	b.n	802be42 <snprintf+0x16>
 802be8e:	bf00      	nop
 802be90:	200002d8 	.word	0x200002d8

0802be94 <_strtol_l.constprop.0>:
 802be94:	2b24      	cmp	r3, #36	@ 0x24
 802be96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802be9a:	4686      	mov	lr, r0
 802be9c:	4690      	mov	r8, r2
 802be9e:	d801      	bhi.n	802bea4 <_strtol_l.constprop.0+0x10>
 802bea0:	2b01      	cmp	r3, #1
 802bea2:	d106      	bne.n	802beb2 <_strtol_l.constprop.0+0x1e>
 802bea4:	f001 fef0 	bl	802dc88 <__errno>
 802bea8:	2316      	movs	r3, #22
 802beaa:	6003      	str	r3, [r0, #0]
 802beac:	2000      	movs	r0, #0
 802beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802beb2:	4834      	ldr	r0, [pc, #208]	@ (802bf84 <_strtol_l.constprop.0+0xf0>)
 802beb4:	460d      	mov	r5, r1
 802beb6:	462a      	mov	r2, r5
 802beb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bebc:	5d06      	ldrb	r6, [r0, r4]
 802bebe:	f016 0608 	ands.w	r6, r6, #8
 802bec2:	d1f8      	bne.n	802beb6 <_strtol_l.constprop.0+0x22>
 802bec4:	2c2d      	cmp	r4, #45	@ 0x2d
 802bec6:	d12d      	bne.n	802bf24 <_strtol_l.constprop.0+0x90>
 802bec8:	782c      	ldrb	r4, [r5, #0]
 802beca:	2601      	movs	r6, #1
 802becc:	1c95      	adds	r5, r2, #2
 802bece:	f033 0210 	bics.w	r2, r3, #16
 802bed2:	d109      	bne.n	802bee8 <_strtol_l.constprop.0+0x54>
 802bed4:	2c30      	cmp	r4, #48	@ 0x30
 802bed6:	d12a      	bne.n	802bf2e <_strtol_l.constprop.0+0x9a>
 802bed8:	782a      	ldrb	r2, [r5, #0]
 802beda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802bede:	2a58      	cmp	r2, #88	@ 0x58
 802bee0:	d125      	bne.n	802bf2e <_strtol_l.constprop.0+0x9a>
 802bee2:	786c      	ldrb	r4, [r5, #1]
 802bee4:	2310      	movs	r3, #16
 802bee6:	3502      	adds	r5, #2
 802bee8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802beec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802bef0:	2200      	movs	r2, #0
 802bef2:	fbbc f9f3 	udiv	r9, ip, r3
 802bef6:	4610      	mov	r0, r2
 802bef8:	fb03 ca19 	mls	sl, r3, r9, ip
 802befc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802bf00:	2f09      	cmp	r7, #9
 802bf02:	d81b      	bhi.n	802bf3c <_strtol_l.constprop.0+0xa8>
 802bf04:	463c      	mov	r4, r7
 802bf06:	42a3      	cmp	r3, r4
 802bf08:	dd27      	ble.n	802bf5a <_strtol_l.constprop.0+0xc6>
 802bf0a:	1c57      	adds	r7, r2, #1
 802bf0c:	d007      	beq.n	802bf1e <_strtol_l.constprop.0+0x8a>
 802bf0e:	4581      	cmp	r9, r0
 802bf10:	d320      	bcc.n	802bf54 <_strtol_l.constprop.0+0xc0>
 802bf12:	d101      	bne.n	802bf18 <_strtol_l.constprop.0+0x84>
 802bf14:	45a2      	cmp	sl, r4
 802bf16:	db1d      	blt.n	802bf54 <_strtol_l.constprop.0+0xc0>
 802bf18:	fb00 4003 	mla	r0, r0, r3, r4
 802bf1c:	2201      	movs	r2, #1
 802bf1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bf22:	e7eb      	b.n	802befc <_strtol_l.constprop.0+0x68>
 802bf24:	2c2b      	cmp	r4, #43	@ 0x2b
 802bf26:	bf04      	itt	eq
 802bf28:	782c      	ldrbeq	r4, [r5, #0]
 802bf2a:	1c95      	addeq	r5, r2, #2
 802bf2c:	e7cf      	b.n	802bece <_strtol_l.constprop.0+0x3a>
 802bf2e:	2b00      	cmp	r3, #0
 802bf30:	d1da      	bne.n	802bee8 <_strtol_l.constprop.0+0x54>
 802bf32:	2c30      	cmp	r4, #48	@ 0x30
 802bf34:	bf0c      	ite	eq
 802bf36:	2308      	moveq	r3, #8
 802bf38:	230a      	movne	r3, #10
 802bf3a:	e7d5      	b.n	802bee8 <_strtol_l.constprop.0+0x54>
 802bf3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802bf40:	2f19      	cmp	r7, #25
 802bf42:	d801      	bhi.n	802bf48 <_strtol_l.constprop.0+0xb4>
 802bf44:	3c37      	subs	r4, #55	@ 0x37
 802bf46:	e7de      	b.n	802bf06 <_strtol_l.constprop.0+0x72>
 802bf48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802bf4c:	2f19      	cmp	r7, #25
 802bf4e:	d804      	bhi.n	802bf5a <_strtol_l.constprop.0+0xc6>
 802bf50:	3c57      	subs	r4, #87	@ 0x57
 802bf52:	e7d8      	b.n	802bf06 <_strtol_l.constprop.0+0x72>
 802bf54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802bf58:	e7e1      	b.n	802bf1e <_strtol_l.constprop.0+0x8a>
 802bf5a:	1c53      	adds	r3, r2, #1
 802bf5c:	d108      	bne.n	802bf70 <_strtol_l.constprop.0+0xdc>
 802bf5e:	2322      	movs	r3, #34	@ 0x22
 802bf60:	f8ce 3000 	str.w	r3, [lr]
 802bf64:	4660      	mov	r0, ip
 802bf66:	f1b8 0f00 	cmp.w	r8, #0
 802bf6a:	d0a0      	beq.n	802beae <_strtol_l.constprop.0+0x1a>
 802bf6c:	1e69      	subs	r1, r5, #1
 802bf6e:	e006      	b.n	802bf7e <_strtol_l.constprop.0+0xea>
 802bf70:	b106      	cbz	r6, 802bf74 <_strtol_l.constprop.0+0xe0>
 802bf72:	4240      	negs	r0, r0
 802bf74:	f1b8 0f00 	cmp.w	r8, #0
 802bf78:	d099      	beq.n	802beae <_strtol_l.constprop.0+0x1a>
 802bf7a:	2a00      	cmp	r2, #0
 802bf7c:	d1f6      	bne.n	802bf6c <_strtol_l.constprop.0+0xd8>
 802bf7e:	f8c8 1000 	str.w	r1, [r8]
 802bf82:	e794      	b.n	802beae <_strtol_l.constprop.0+0x1a>
 802bf84:	0803bda1 	.word	0x0803bda1

0802bf88 <_strtol_r>:
 802bf88:	f7ff bf84 	b.w	802be94 <_strtol_l.constprop.0>

0802bf8c <strtol>:
 802bf8c:	4613      	mov	r3, r2
 802bf8e:	460a      	mov	r2, r1
 802bf90:	4601      	mov	r1, r0
 802bf92:	4802      	ldr	r0, [pc, #8]	@ (802bf9c <strtol+0x10>)
 802bf94:	6800      	ldr	r0, [r0, #0]
 802bf96:	f7ff bf7d 	b.w	802be94 <_strtol_l.constprop.0>
 802bf9a:	bf00      	nop
 802bf9c:	200002d8 	.word	0x200002d8

0802bfa0 <__sflush_r>:
 802bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bfa4:	4605      	mov	r5, r0
 802bfa6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802bfaa:	0706      	lsls	r6, r0, #28
 802bfac:	460c      	mov	r4, r1
 802bfae:	d457      	bmi.n	802c060 <__sflush_r+0xc0>
 802bfb0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802bfb4:	818b      	strh	r3, [r1, #12]
 802bfb6:	684b      	ldr	r3, [r1, #4]
 802bfb8:	2b00      	cmp	r3, #0
 802bfba:	dc02      	bgt.n	802bfc2 <__sflush_r+0x22>
 802bfbc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802bfbe:	2b00      	cmp	r3, #0
 802bfc0:	dd4c      	ble.n	802c05c <__sflush_r+0xbc>
 802bfc2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802bfc4:	2e00      	cmp	r6, #0
 802bfc6:	d049      	beq.n	802c05c <__sflush_r+0xbc>
 802bfc8:	2300      	movs	r3, #0
 802bfca:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802bfce:	682f      	ldr	r7, [r5, #0]
 802bfd0:	69e1      	ldr	r1, [r4, #28]
 802bfd2:	602b      	str	r3, [r5, #0]
 802bfd4:	d034      	beq.n	802c040 <__sflush_r+0xa0>
 802bfd6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802bfd8:	89a3      	ldrh	r3, [r4, #12]
 802bfda:	0759      	lsls	r1, r3, #29
 802bfdc:	d505      	bpl.n	802bfea <__sflush_r+0x4a>
 802bfde:	6863      	ldr	r3, [r4, #4]
 802bfe0:	1ad2      	subs	r2, r2, r3
 802bfe2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802bfe4:	b10b      	cbz	r3, 802bfea <__sflush_r+0x4a>
 802bfe6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802bfe8:	1ad2      	subs	r2, r2, r3
 802bfea:	2300      	movs	r3, #0
 802bfec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802bfee:	69e1      	ldr	r1, [r4, #28]
 802bff0:	4628      	mov	r0, r5
 802bff2:	47b0      	blx	r6
 802bff4:	1c43      	adds	r3, r0, #1
 802bff6:	d106      	bne.n	802c006 <__sflush_r+0x66>
 802bff8:	682a      	ldr	r2, [r5, #0]
 802bffa:	2a1d      	cmp	r2, #29
 802bffc:	d848      	bhi.n	802c090 <__sflush_r+0xf0>
 802bffe:	4b2b      	ldr	r3, [pc, #172]	@ (802c0ac <__sflush_r+0x10c>)
 802c000:	4113      	asrs	r3, r2
 802c002:	07de      	lsls	r6, r3, #31
 802c004:	d444      	bmi.n	802c090 <__sflush_r+0xf0>
 802c006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c00a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802c00e:	81a2      	strh	r2, [r4, #12]
 802c010:	2200      	movs	r2, #0
 802c012:	6062      	str	r2, [r4, #4]
 802c014:	04d9      	lsls	r1, r3, #19
 802c016:	6922      	ldr	r2, [r4, #16]
 802c018:	6022      	str	r2, [r4, #0]
 802c01a:	d504      	bpl.n	802c026 <__sflush_r+0x86>
 802c01c:	1c42      	adds	r2, r0, #1
 802c01e:	d101      	bne.n	802c024 <__sflush_r+0x84>
 802c020:	682b      	ldr	r3, [r5, #0]
 802c022:	b903      	cbnz	r3, 802c026 <__sflush_r+0x86>
 802c024:	6520      	str	r0, [r4, #80]	@ 0x50
 802c026:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c028:	602f      	str	r7, [r5, #0]
 802c02a:	b1b9      	cbz	r1, 802c05c <__sflush_r+0xbc>
 802c02c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c030:	4299      	cmp	r1, r3
 802c032:	d002      	beq.n	802c03a <__sflush_r+0x9a>
 802c034:	4628      	mov	r0, r5
 802c036:	f002 fd61 	bl	802eafc <_free_r>
 802c03a:	2300      	movs	r3, #0
 802c03c:	6323      	str	r3, [r4, #48]	@ 0x30
 802c03e:	e00d      	b.n	802c05c <__sflush_r+0xbc>
 802c040:	2301      	movs	r3, #1
 802c042:	4628      	mov	r0, r5
 802c044:	47b0      	blx	r6
 802c046:	4602      	mov	r2, r0
 802c048:	1c50      	adds	r0, r2, #1
 802c04a:	d1c5      	bne.n	802bfd8 <__sflush_r+0x38>
 802c04c:	682b      	ldr	r3, [r5, #0]
 802c04e:	2b00      	cmp	r3, #0
 802c050:	d0c2      	beq.n	802bfd8 <__sflush_r+0x38>
 802c052:	2b1d      	cmp	r3, #29
 802c054:	d001      	beq.n	802c05a <__sflush_r+0xba>
 802c056:	2b16      	cmp	r3, #22
 802c058:	d11a      	bne.n	802c090 <__sflush_r+0xf0>
 802c05a:	602f      	str	r7, [r5, #0]
 802c05c:	2000      	movs	r0, #0
 802c05e:	e01e      	b.n	802c09e <__sflush_r+0xfe>
 802c060:	690f      	ldr	r7, [r1, #16]
 802c062:	2f00      	cmp	r7, #0
 802c064:	d0fa      	beq.n	802c05c <__sflush_r+0xbc>
 802c066:	0783      	lsls	r3, r0, #30
 802c068:	680e      	ldr	r6, [r1, #0]
 802c06a:	bf08      	it	eq
 802c06c:	694b      	ldreq	r3, [r1, #20]
 802c06e:	600f      	str	r7, [r1, #0]
 802c070:	bf18      	it	ne
 802c072:	2300      	movne	r3, #0
 802c074:	eba6 0807 	sub.w	r8, r6, r7
 802c078:	608b      	str	r3, [r1, #8]
 802c07a:	f1b8 0f00 	cmp.w	r8, #0
 802c07e:	dded      	ble.n	802c05c <__sflush_r+0xbc>
 802c080:	69e1      	ldr	r1, [r4, #28]
 802c082:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802c084:	4643      	mov	r3, r8
 802c086:	463a      	mov	r2, r7
 802c088:	4628      	mov	r0, r5
 802c08a:	47b0      	blx	r6
 802c08c:	2800      	cmp	r0, #0
 802c08e:	dc08      	bgt.n	802c0a2 <__sflush_r+0x102>
 802c090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c098:	81a3      	strh	r3, [r4, #12]
 802c09a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c0a2:	4407      	add	r7, r0
 802c0a4:	eba8 0800 	sub.w	r8, r8, r0
 802c0a8:	e7e7      	b.n	802c07a <__sflush_r+0xda>
 802c0aa:	bf00      	nop
 802c0ac:	dfbffffe 	.word	0xdfbffffe

0802c0b0 <_fflush_r>:
 802c0b0:	b538      	push	{r3, r4, r5, lr}
 802c0b2:	460c      	mov	r4, r1
 802c0b4:	4605      	mov	r5, r0
 802c0b6:	b118      	cbz	r0, 802c0c0 <_fflush_r+0x10>
 802c0b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c0ba:	b90b      	cbnz	r3, 802c0c0 <_fflush_r+0x10>
 802c0bc:	f000 f93a 	bl	802c334 <__sinit>
 802c0c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802c0c4:	b1b8      	cbz	r0, 802c0f6 <_fflush_r+0x46>
 802c0c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c0c8:	07db      	lsls	r3, r3, #31
 802c0ca:	d404      	bmi.n	802c0d6 <_fflush_r+0x26>
 802c0cc:	0581      	lsls	r1, r0, #22
 802c0ce:	d402      	bmi.n	802c0d6 <_fflush_r+0x26>
 802c0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c0d2:	f001 fe0e 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 802c0d6:	4628      	mov	r0, r5
 802c0d8:	4621      	mov	r1, r4
 802c0da:	f7ff ff61 	bl	802bfa0 <__sflush_r>
 802c0de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c0e0:	07da      	lsls	r2, r3, #31
 802c0e2:	4605      	mov	r5, r0
 802c0e4:	d405      	bmi.n	802c0f2 <_fflush_r+0x42>
 802c0e6:	89a3      	ldrh	r3, [r4, #12]
 802c0e8:	059b      	lsls	r3, r3, #22
 802c0ea:	d402      	bmi.n	802c0f2 <_fflush_r+0x42>
 802c0ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c0ee:	f001 fe02 	bl	802dcf6 <__retarget_lock_release_recursive>
 802c0f2:	4628      	mov	r0, r5
 802c0f4:	bd38      	pop	{r3, r4, r5, pc}
 802c0f6:	4605      	mov	r5, r0
 802c0f8:	e7fb      	b.n	802c0f2 <_fflush_r+0x42>
	...

0802c0fc <sprintf>:
 802c0fc:	b40e      	push	{r1, r2, r3}
 802c0fe:	b500      	push	{lr}
 802c100:	b09c      	sub	sp, #112	@ 0x70
 802c102:	ab1d      	add	r3, sp, #116	@ 0x74
 802c104:	9002      	str	r0, [sp, #8]
 802c106:	9006      	str	r0, [sp, #24]
 802c108:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802c10c:	4809      	ldr	r0, [pc, #36]	@ (802c134 <sprintf+0x38>)
 802c10e:	9107      	str	r1, [sp, #28]
 802c110:	9104      	str	r1, [sp, #16]
 802c112:	4909      	ldr	r1, [pc, #36]	@ (802c138 <sprintf+0x3c>)
 802c114:	f853 2b04 	ldr.w	r2, [r3], #4
 802c118:	9105      	str	r1, [sp, #20]
 802c11a:	6800      	ldr	r0, [r0, #0]
 802c11c:	9301      	str	r3, [sp, #4]
 802c11e:	a902      	add	r1, sp, #8
 802c120:	f004 fd26 	bl	8030b70 <_svfprintf_r>
 802c124:	9b02      	ldr	r3, [sp, #8]
 802c126:	2200      	movs	r2, #0
 802c128:	701a      	strb	r2, [r3, #0]
 802c12a:	b01c      	add	sp, #112	@ 0x70
 802c12c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c130:	b003      	add	sp, #12
 802c132:	4770      	bx	lr
 802c134:	200002d8 	.word	0x200002d8
 802c138:	ffff0208 	.word	0xffff0208

0802c13c <sscanf>:
 802c13c:	b40e      	push	{r1, r2, r3}
 802c13e:	b530      	push	{r4, r5, lr}
 802c140:	b09c      	sub	sp, #112	@ 0x70
 802c142:	ac1f      	add	r4, sp, #124	@ 0x7c
 802c144:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802c148:	f854 5b04 	ldr.w	r5, [r4], #4
 802c14c:	f8ad 2014 	strh.w	r2, [sp, #20]
 802c150:	9002      	str	r0, [sp, #8]
 802c152:	9006      	str	r0, [sp, #24]
 802c154:	f7e4 f8a4 	bl	80102a0 <strlen>
 802c158:	4b0b      	ldr	r3, [pc, #44]	@ (802c188 <sscanf+0x4c>)
 802c15a:	9003      	str	r0, [sp, #12]
 802c15c:	9007      	str	r0, [sp, #28]
 802c15e:	930a      	str	r3, [sp, #40]	@ 0x28
 802c160:	480a      	ldr	r0, [pc, #40]	@ (802c18c <sscanf+0x50>)
 802c162:	9401      	str	r4, [sp, #4]
 802c164:	2300      	movs	r3, #0
 802c166:	930e      	str	r3, [sp, #56]	@ 0x38
 802c168:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c16a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c16e:	f8ad 3016 	strh.w	r3, [sp, #22]
 802c172:	462a      	mov	r2, r5
 802c174:	4623      	mov	r3, r4
 802c176:	a902      	add	r1, sp, #8
 802c178:	6800      	ldr	r0, [r0, #0]
 802c17a:	f005 ff3b 	bl	8031ff4 <__ssvfscanf_r>
 802c17e:	b01c      	add	sp, #112	@ 0x70
 802c180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c184:	b003      	add	sp, #12
 802c186:	4770      	bx	lr
 802c188:	0802c1b3 	.word	0x0802c1b3
 802c18c:	200002d8 	.word	0x200002d8

0802c190 <__sread>:
 802c190:	b510      	push	{r4, lr}
 802c192:	460c      	mov	r4, r1
 802c194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c198:	f001 fd52 	bl	802dc40 <_read_r>
 802c19c:	2800      	cmp	r0, #0
 802c19e:	bfab      	itete	ge
 802c1a0:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802c1a2:	89a3      	ldrhlt	r3, [r4, #12]
 802c1a4:	181b      	addge	r3, r3, r0
 802c1a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802c1aa:	bfac      	ite	ge
 802c1ac:	6523      	strge	r3, [r4, #80]	@ 0x50
 802c1ae:	81a3      	strhlt	r3, [r4, #12]
 802c1b0:	bd10      	pop	{r4, pc}

0802c1b2 <__seofread>:
 802c1b2:	2000      	movs	r0, #0
 802c1b4:	4770      	bx	lr

0802c1b6 <__swrite>:
 802c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c1ba:	461f      	mov	r7, r3
 802c1bc:	898b      	ldrh	r3, [r1, #12]
 802c1be:	05db      	lsls	r3, r3, #23
 802c1c0:	4605      	mov	r5, r0
 802c1c2:	460c      	mov	r4, r1
 802c1c4:	4616      	mov	r6, r2
 802c1c6:	d505      	bpl.n	802c1d4 <__swrite+0x1e>
 802c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1cc:	2302      	movs	r3, #2
 802c1ce:	2200      	movs	r2, #0
 802c1d0:	f001 fd24 	bl	802dc1c <_lseek_r>
 802c1d4:	89a3      	ldrh	r3, [r4, #12]
 802c1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c1da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802c1de:	81a3      	strh	r3, [r4, #12]
 802c1e0:	4632      	mov	r2, r6
 802c1e2:	463b      	mov	r3, r7
 802c1e4:	4628      	mov	r0, r5
 802c1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c1ea:	f001 bd3b 	b.w	802dc64 <_write_r>

0802c1ee <__sseek>:
 802c1ee:	b510      	push	{r4, lr}
 802c1f0:	460c      	mov	r4, r1
 802c1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1f6:	f001 fd11 	bl	802dc1c <_lseek_r>
 802c1fa:	1c43      	adds	r3, r0, #1
 802c1fc:	89a3      	ldrh	r3, [r4, #12]
 802c1fe:	bf15      	itete	ne
 802c200:	6520      	strne	r0, [r4, #80]	@ 0x50
 802c202:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802c206:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802c20a:	81a3      	strheq	r3, [r4, #12]
 802c20c:	bf18      	it	ne
 802c20e:	81a3      	strhne	r3, [r4, #12]
 802c210:	bd10      	pop	{r4, pc}

0802c212 <__sclose>:
 802c212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c216:	f001 bcc5 	b.w	802dba4 <_close_r>
	...

0802c21c <std>:
 802c21c:	2300      	movs	r3, #0
 802c21e:	b510      	push	{r4, lr}
 802c220:	4604      	mov	r4, r0
 802c222:	e9c0 3300 	strd	r3, r3, [r0]
 802c226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c22a:	6083      	str	r3, [r0, #8]
 802c22c:	8181      	strh	r1, [r0, #12]
 802c22e:	6643      	str	r3, [r0, #100]	@ 0x64
 802c230:	81c2      	strh	r2, [r0, #14]
 802c232:	6183      	str	r3, [r0, #24]
 802c234:	4619      	mov	r1, r3
 802c236:	2208      	movs	r2, #8
 802c238:	305c      	adds	r0, #92	@ 0x5c
 802c23a:	f000 fb21 	bl	802c880 <memset>
 802c23e:	4b0d      	ldr	r3, [pc, #52]	@ (802c274 <std+0x58>)
 802c240:	6223      	str	r3, [r4, #32]
 802c242:	4b0d      	ldr	r3, [pc, #52]	@ (802c278 <std+0x5c>)
 802c244:	6263      	str	r3, [r4, #36]	@ 0x24
 802c246:	4b0d      	ldr	r3, [pc, #52]	@ (802c27c <std+0x60>)
 802c248:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c24a:	4b0d      	ldr	r3, [pc, #52]	@ (802c280 <std+0x64>)
 802c24c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c24e:	4b0d      	ldr	r3, [pc, #52]	@ (802c284 <std+0x68>)
 802c250:	61e4      	str	r4, [r4, #28]
 802c252:	429c      	cmp	r4, r3
 802c254:	d006      	beq.n	802c264 <std+0x48>
 802c256:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c25a:	4294      	cmp	r4, r2
 802c25c:	d002      	beq.n	802c264 <std+0x48>
 802c25e:	33d0      	adds	r3, #208	@ 0xd0
 802c260:	429c      	cmp	r4, r3
 802c262:	d105      	bne.n	802c270 <std+0x54>
 802c264:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c26c:	f001 bd3e 	b.w	802dcec <__retarget_lock_init_recursive>
 802c270:	bd10      	pop	{r4, pc}
 802c272:	bf00      	nop
 802c274:	0802c191 	.word	0x0802c191
 802c278:	0802c1b7 	.word	0x0802c1b7
 802c27c:	0802c1ef 	.word	0x0802c1ef
 802c280:	0802c213 	.word	0x0802c213
 802c284:	20019ee4 	.word	0x20019ee4

0802c288 <stdio_exit_handler>:
 802c288:	4a02      	ldr	r2, [pc, #8]	@ (802c294 <stdio_exit_handler+0xc>)
 802c28a:	4903      	ldr	r1, [pc, #12]	@ (802c298 <stdio_exit_handler+0x10>)
 802c28c:	4803      	ldr	r0, [pc, #12]	@ (802c29c <stdio_exit_handler+0x14>)
 802c28e:	f000 b9ef 	b.w	802c670 <_fwalk_sglue>
 802c292:	bf00      	nop
 802c294:	20000158 	.word	0x20000158
 802c298:	08033c31 	.word	0x08033c31
 802c29c:	200002e0 	.word	0x200002e0

0802c2a0 <cleanup_stdio>:
 802c2a0:	6841      	ldr	r1, [r0, #4]
 802c2a2:	4b0c      	ldr	r3, [pc, #48]	@ (802c2d4 <cleanup_stdio+0x34>)
 802c2a4:	4299      	cmp	r1, r3
 802c2a6:	b510      	push	{r4, lr}
 802c2a8:	4604      	mov	r4, r0
 802c2aa:	d001      	beq.n	802c2b0 <cleanup_stdio+0x10>
 802c2ac:	f007 fcc0 	bl	8033c30 <_fclose_r>
 802c2b0:	68a1      	ldr	r1, [r4, #8]
 802c2b2:	4b09      	ldr	r3, [pc, #36]	@ (802c2d8 <cleanup_stdio+0x38>)
 802c2b4:	4299      	cmp	r1, r3
 802c2b6:	d002      	beq.n	802c2be <cleanup_stdio+0x1e>
 802c2b8:	4620      	mov	r0, r4
 802c2ba:	f007 fcb9 	bl	8033c30 <_fclose_r>
 802c2be:	68e1      	ldr	r1, [r4, #12]
 802c2c0:	4b06      	ldr	r3, [pc, #24]	@ (802c2dc <cleanup_stdio+0x3c>)
 802c2c2:	4299      	cmp	r1, r3
 802c2c4:	d004      	beq.n	802c2d0 <cleanup_stdio+0x30>
 802c2c6:	4620      	mov	r0, r4
 802c2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c2cc:	f007 bcb0 	b.w	8033c30 <_fclose_r>
 802c2d0:	bd10      	pop	{r4, pc}
 802c2d2:	bf00      	nop
 802c2d4:	20019ee4 	.word	0x20019ee4
 802c2d8:	20019f4c 	.word	0x20019f4c
 802c2dc:	20019fb4 	.word	0x20019fb4

0802c2e0 <global_stdio_init.part.0>:
 802c2e0:	b510      	push	{r4, lr}
 802c2e2:	4b0b      	ldr	r3, [pc, #44]	@ (802c310 <global_stdio_init.part.0+0x30>)
 802c2e4:	4c0b      	ldr	r4, [pc, #44]	@ (802c314 <global_stdio_init.part.0+0x34>)
 802c2e6:	4a0c      	ldr	r2, [pc, #48]	@ (802c318 <global_stdio_init.part.0+0x38>)
 802c2e8:	601a      	str	r2, [r3, #0]
 802c2ea:	4620      	mov	r0, r4
 802c2ec:	2200      	movs	r2, #0
 802c2ee:	2104      	movs	r1, #4
 802c2f0:	f7ff ff94 	bl	802c21c <std>
 802c2f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c2f8:	2201      	movs	r2, #1
 802c2fa:	2109      	movs	r1, #9
 802c2fc:	f7ff ff8e 	bl	802c21c <std>
 802c300:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c304:	2202      	movs	r2, #2
 802c306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c30a:	2112      	movs	r1, #18
 802c30c:	f7ff bf86 	b.w	802c21c <std>
 802c310:	2001a01c 	.word	0x2001a01c
 802c314:	20019ee4 	.word	0x20019ee4
 802c318:	0802c289 	.word	0x0802c289

0802c31c <__sfp_lock_acquire>:
 802c31c:	4801      	ldr	r0, [pc, #4]	@ (802c324 <__sfp_lock_acquire+0x8>)
 802c31e:	f001 bce8 	b.w	802dcf2 <__retarget_lock_acquire_recursive>
 802c322:	bf00      	nop
 802c324:	2001a04c 	.word	0x2001a04c

0802c328 <__sfp_lock_release>:
 802c328:	4801      	ldr	r0, [pc, #4]	@ (802c330 <__sfp_lock_release+0x8>)
 802c32a:	f001 bce4 	b.w	802dcf6 <__retarget_lock_release_recursive>
 802c32e:	bf00      	nop
 802c330:	2001a04c 	.word	0x2001a04c

0802c334 <__sinit>:
 802c334:	b510      	push	{r4, lr}
 802c336:	4604      	mov	r4, r0
 802c338:	f7ff fff0 	bl	802c31c <__sfp_lock_acquire>
 802c33c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c33e:	b11b      	cbz	r3, 802c348 <__sinit+0x14>
 802c340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c344:	f7ff bff0 	b.w	802c328 <__sfp_lock_release>
 802c348:	4b04      	ldr	r3, [pc, #16]	@ (802c35c <__sinit+0x28>)
 802c34a:	6363      	str	r3, [r4, #52]	@ 0x34
 802c34c:	4b04      	ldr	r3, [pc, #16]	@ (802c360 <__sinit+0x2c>)
 802c34e:	681b      	ldr	r3, [r3, #0]
 802c350:	2b00      	cmp	r3, #0
 802c352:	d1f5      	bne.n	802c340 <__sinit+0xc>
 802c354:	f7ff ffc4 	bl	802c2e0 <global_stdio_init.part.0>
 802c358:	e7f2      	b.n	802c340 <__sinit+0xc>
 802c35a:	bf00      	nop
 802c35c:	0802c2a1 	.word	0x0802c2a1
 802c360:	2001a01c 	.word	0x2001a01c

0802c364 <_vsnprintf_r>:
 802c364:	b530      	push	{r4, r5, lr}
 802c366:	4614      	mov	r4, r2
 802c368:	2c00      	cmp	r4, #0
 802c36a:	b09b      	sub	sp, #108	@ 0x6c
 802c36c:	4605      	mov	r5, r0
 802c36e:	461a      	mov	r2, r3
 802c370:	da05      	bge.n	802c37e <_vsnprintf_r+0x1a>
 802c372:	238b      	movs	r3, #139	@ 0x8b
 802c374:	6003      	str	r3, [r0, #0]
 802c376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c37a:	b01b      	add	sp, #108	@ 0x6c
 802c37c:	bd30      	pop	{r4, r5, pc}
 802c37e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802c382:	f8ad 300c 	strh.w	r3, [sp, #12]
 802c386:	bf14      	ite	ne
 802c388:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802c38c:	4623      	moveq	r3, r4
 802c38e:	9302      	str	r3, [sp, #8]
 802c390:	9305      	str	r3, [sp, #20]
 802c392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802c396:	9100      	str	r1, [sp, #0]
 802c398:	9104      	str	r1, [sp, #16]
 802c39a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c39e:	4669      	mov	r1, sp
 802c3a0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802c3a2:	f004 fbe5 	bl	8030b70 <_svfprintf_r>
 802c3a6:	1c43      	adds	r3, r0, #1
 802c3a8:	bfbc      	itt	lt
 802c3aa:	238b      	movlt	r3, #139	@ 0x8b
 802c3ac:	602b      	strlt	r3, [r5, #0]
 802c3ae:	2c00      	cmp	r4, #0
 802c3b0:	d0e3      	beq.n	802c37a <_vsnprintf_r+0x16>
 802c3b2:	9b00      	ldr	r3, [sp, #0]
 802c3b4:	2200      	movs	r2, #0
 802c3b6:	701a      	strb	r2, [r3, #0]
 802c3b8:	e7df      	b.n	802c37a <_vsnprintf_r+0x16>
	...

0802c3bc <vsnprintf>:
 802c3bc:	b507      	push	{r0, r1, r2, lr}
 802c3be:	9300      	str	r3, [sp, #0]
 802c3c0:	4613      	mov	r3, r2
 802c3c2:	460a      	mov	r2, r1
 802c3c4:	4601      	mov	r1, r0
 802c3c6:	4803      	ldr	r0, [pc, #12]	@ (802c3d4 <vsnprintf+0x18>)
 802c3c8:	6800      	ldr	r0, [r0, #0]
 802c3ca:	f7ff ffcb 	bl	802c364 <_vsnprintf_r>
 802c3ce:	b003      	add	sp, #12
 802c3d0:	f85d fb04 	ldr.w	pc, [sp], #4
 802c3d4:	200002d8 	.word	0x200002d8

0802c3d8 <__sfvwrite_r>:
 802c3d8:	6893      	ldr	r3, [r2, #8]
 802c3da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3de:	4606      	mov	r6, r0
 802c3e0:	460c      	mov	r4, r1
 802c3e2:	4691      	mov	r9, r2
 802c3e4:	b91b      	cbnz	r3, 802c3ee <__sfvwrite_r+0x16>
 802c3e6:	2000      	movs	r0, #0
 802c3e8:	b003      	add	sp, #12
 802c3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3ee:	898b      	ldrh	r3, [r1, #12]
 802c3f0:	0718      	lsls	r0, r3, #28
 802c3f2:	d550      	bpl.n	802c496 <__sfvwrite_r+0xbe>
 802c3f4:	690b      	ldr	r3, [r1, #16]
 802c3f6:	2b00      	cmp	r3, #0
 802c3f8:	d04d      	beq.n	802c496 <__sfvwrite_r+0xbe>
 802c3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c3fe:	f8d9 8000 	ldr.w	r8, [r9]
 802c402:	f013 0702 	ands.w	r7, r3, #2
 802c406:	d16b      	bne.n	802c4e0 <__sfvwrite_r+0x108>
 802c408:	f013 0301 	ands.w	r3, r3, #1
 802c40c:	f000 809c 	beq.w	802c548 <__sfvwrite_r+0x170>
 802c410:	4638      	mov	r0, r7
 802c412:	46ba      	mov	sl, r7
 802c414:	46bb      	mov	fp, r7
 802c416:	f1bb 0f00 	cmp.w	fp, #0
 802c41a:	f000 8103 	beq.w	802c624 <__sfvwrite_r+0x24c>
 802c41e:	b950      	cbnz	r0, 802c436 <__sfvwrite_r+0x5e>
 802c420:	465a      	mov	r2, fp
 802c422:	210a      	movs	r1, #10
 802c424:	4650      	mov	r0, sl
 802c426:	f7e3 feeb 	bl	8010200 <memchr>
 802c42a:	2800      	cmp	r0, #0
 802c42c:	f000 8100 	beq.w	802c630 <__sfvwrite_r+0x258>
 802c430:	3001      	adds	r0, #1
 802c432:	eba0 070a 	sub.w	r7, r0, sl
 802c436:	6820      	ldr	r0, [r4, #0]
 802c438:	6921      	ldr	r1, [r4, #16]
 802c43a:	68a5      	ldr	r5, [r4, #8]
 802c43c:	6963      	ldr	r3, [r4, #20]
 802c43e:	455f      	cmp	r7, fp
 802c440:	463a      	mov	r2, r7
 802c442:	bf28      	it	cs
 802c444:	465a      	movcs	r2, fp
 802c446:	4288      	cmp	r0, r1
 802c448:	f240 80f5 	bls.w	802c636 <__sfvwrite_r+0x25e>
 802c44c:	441d      	add	r5, r3
 802c44e:	42aa      	cmp	r2, r5
 802c450:	f340 80f1 	ble.w	802c636 <__sfvwrite_r+0x25e>
 802c454:	4651      	mov	r1, sl
 802c456:	462a      	mov	r2, r5
 802c458:	f000 f9f8 	bl	802c84c <memmove>
 802c45c:	6823      	ldr	r3, [r4, #0]
 802c45e:	442b      	add	r3, r5
 802c460:	6023      	str	r3, [r4, #0]
 802c462:	4621      	mov	r1, r4
 802c464:	4630      	mov	r0, r6
 802c466:	f7ff fe23 	bl	802c0b0 <_fflush_r>
 802c46a:	2800      	cmp	r0, #0
 802c46c:	d167      	bne.n	802c53e <__sfvwrite_r+0x166>
 802c46e:	1b7f      	subs	r7, r7, r5
 802c470:	f040 80f9 	bne.w	802c666 <__sfvwrite_r+0x28e>
 802c474:	4621      	mov	r1, r4
 802c476:	4630      	mov	r0, r6
 802c478:	f7ff fe1a 	bl	802c0b0 <_fflush_r>
 802c47c:	2800      	cmp	r0, #0
 802c47e:	d15e      	bne.n	802c53e <__sfvwrite_r+0x166>
 802c480:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c484:	1b5b      	subs	r3, r3, r5
 802c486:	44aa      	add	sl, r5
 802c488:	ebab 0b05 	sub.w	fp, fp, r5
 802c48c:	f8c9 3008 	str.w	r3, [r9, #8]
 802c490:	2b00      	cmp	r3, #0
 802c492:	d1c0      	bne.n	802c416 <__sfvwrite_r+0x3e>
 802c494:	e7a7      	b.n	802c3e6 <__sfvwrite_r+0xe>
 802c496:	4621      	mov	r1, r4
 802c498:	4630      	mov	r0, r6
 802c49a:	f000 f907 	bl	802c6ac <__swsetup_r>
 802c49e:	2800      	cmp	r0, #0
 802c4a0:	d0ab      	beq.n	802c3fa <__sfvwrite_r+0x22>
 802c4a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c4a6:	e79f      	b.n	802c3e8 <__sfvwrite_r+0x10>
 802c4a8:	e9d8 a500 	ldrd	sl, r5, [r8]
 802c4ac:	f108 0808 	add.w	r8, r8, #8
 802c4b0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802c4b4:	69e1      	ldr	r1, [r4, #28]
 802c4b6:	2d00      	cmp	r5, #0
 802c4b8:	d0f6      	beq.n	802c4a8 <__sfvwrite_r+0xd0>
 802c4ba:	42bd      	cmp	r5, r7
 802c4bc:	462b      	mov	r3, r5
 802c4be:	4652      	mov	r2, sl
 802c4c0:	bf28      	it	cs
 802c4c2:	463b      	movcs	r3, r7
 802c4c4:	4630      	mov	r0, r6
 802c4c6:	47d8      	blx	fp
 802c4c8:	2800      	cmp	r0, #0
 802c4ca:	dd38      	ble.n	802c53e <__sfvwrite_r+0x166>
 802c4cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c4d0:	1a1b      	subs	r3, r3, r0
 802c4d2:	4482      	add	sl, r0
 802c4d4:	1a2d      	subs	r5, r5, r0
 802c4d6:	f8c9 3008 	str.w	r3, [r9, #8]
 802c4da:	2b00      	cmp	r3, #0
 802c4dc:	d1e8      	bne.n	802c4b0 <__sfvwrite_r+0xd8>
 802c4de:	e782      	b.n	802c3e6 <__sfvwrite_r+0xe>
 802c4e0:	f04f 0a00 	mov.w	sl, #0
 802c4e4:	4f61      	ldr	r7, [pc, #388]	@ (802c66c <__sfvwrite_r+0x294>)
 802c4e6:	4655      	mov	r5, sl
 802c4e8:	e7e2      	b.n	802c4b0 <__sfvwrite_r+0xd8>
 802c4ea:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802c4ee:	f108 0808 	add.w	r8, r8, #8
 802c4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c4f6:	6820      	ldr	r0, [r4, #0]
 802c4f8:	68a2      	ldr	r2, [r4, #8]
 802c4fa:	f1ba 0f00 	cmp.w	sl, #0
 802c4fe:	d0f4      	beq.n	802c4ea <__sfvwrite_r+0x112>
 802c500:	0599      	lsls	r1, r3, #22
 802c502:	d563      	bpl.n	802c5cc <__sfvwrite_r+0x1f4>
 802c504:	4552      	cmp	r2, sl
 802c506:	d836      	bhi.n	802c576 <__sfvwrite_r+0x19e>
 802c508:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802c50c:	d033      	beq.n	802c576 <__sfvwrite_r+0x19e>
 802c50e:	6921      	ldr	r1, [r4, #16]
 802c510:	6965      	ldr	r5, [r4, #20]
 802c512:	eba0 0b01 	sub.w	fp, r0, r1
 802c516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802c51a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802c51e:	f10b 0201 	add.w	r2, fp, #1
 802c522:	106d      	asrs	r5, r5, #1
 802c524:	4452      	add	r2, sl
 802c526:	4295      	cmp	r5, r2
 802c528:	bf38      	it	cc
 802c52a:	4615      	movcc	r5, r2
 802c52c:	055b      	lsls	r3, r3, #21
 802c52e:	d53d      	bpl.n	802c5ac <__sfvwrite_r+0x1d4>
 802c530:	4629      	mov	r1, r5
 802c532:	4630      	mov	r0, r6
 802c534:	f002 fbfa 	bl	802ed2c <_malloc_r>
 802c538:	b948      	cbnz	r0, 802c54e <__sfvwrite_r+0x176>
 802c53a:	230c      	movs	r3, #12
 802c53c:	6033      	str	r3, [r6, #0]
 802c53e:	89a3      	ldrh	r3, [r4, #12]
 802c540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c544:	81a3      	strh	r3, [r4, #12]
 802c546:	e7ac      	b.n	802c4a2 <__sfvwrite_r+0xca>
 802c548:	461f      	mov	r7, r3
 802c54a:	469a      	mov	sl, r3
 802c54c:	e7d1      	b.n	802c4f2 <__sfvwrite_r+0x11a>
 802c54e:	465a      	mov	r2, fp
 802c550:	6921      	ldr	r1, [r4, #16]
 802c552:	9001      	str	r0, [sp, #4]
 802c554:	f001 fbd0 	bl	802dcf8 <memcpy>
 802c558:	89a2      	ldrh	r2, [r4, #12]
 802c55a:	9b01      	ldr	r3, [sp, #4]
 802c55c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802c560:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802c564:	81a2      	strh	r2, [r4, #12]
 802c566:	6123      	str	r3, [r4, #16]
 802c568:	6165      	str	r5, [r4, #20]
 802c56a:	445b      	add	r3, fp
 802c56c:	eba5 050b 	sub.w	r5, r5, fp
 802c570:	6023      	str	r3, [r4, #0]
 802c572:	4652      	mov	r2, sl
 802c574:	60a5      	str	r5, [r4, #8]
 802c576:	4552      	cmp	r2, sl
 802c578:	bf28      	it	cs
 802c57a:	4652      	movcs	r2, sl
 802c57c:	6820      	ldr	r0, [r4, #0]
 802c57e:	9201      	str	r2, [sp, #4]
 802c580:	4639      	mov	r1, r7
 802c582:	f000 f963 	bl	802c84c <memmove>
 802c586:	68a3      	ldr	r3, [r4, #8]
 802c588:	9a01      	ldr	r2, [sp, #4]
 802c58a:	1a9b      	subs	r3, r3, r2
 802c58c:	60a3      	str	r3, [r4, #8]
 802c58e:	6823      	ldr	r3, [r4, #0]
 802c590:	4413      	add	r3, r2
 802c592:	4655      	mov	r5, sl
 802c594:	6023      	str	r3, [r4, #0]
 802c596:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802c59a:	1b5b      	subs	r3, r3, r5
 802c59c:	442f      	add	r7, r5
 802c59e:	ebaa 0a05 	sub.w	sl, sl, r5
 802c5a2:	f8c9 3008 	str.w	r3, [r9, #8]
 802c5a6:	2b00      	cmp	r3, #0
 802c5a8:	d1a3      	bne.n	802c4f2 <__sfvwrite_r+0x11a>
 802c5aa:	e71c      	b.n	802c3e6 <__sfvwrite_r+0xe>
 802c5ac:	462a      	mov	r2, r5
 802c5ae:	4630      	mov	r0, r6
 802c5b0:	f007 fbcc 	bl	8033d4c <_realloc_r>
 802c5b4:	4603      	mov	r3, r0
 802c5b6:	2800      	cmp	r0, #0
 802c5b8:	d1d5      	bne.n	802c566 <__sfvwrite_r+0x18e>
 802c5ba:	6921      	ldr	r1, [r4, #16]
 802c5bc:	4630      	mov	r0, r6
 802c5be:	f002 fa9d 	bl	802eafc <_free_r>
 802c5c2:	89a3      	ldrh	r3, [r4, #12]
 802c5c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802c5c8:	81a3      	strh	r3, [r4, #12]
 802c5ca:	e7b6      	b.n	802c53a <__sfvwrite_r+0x162>
 802c5cc:	6923      	ldr	r3, [r4, #16]
 802c5ce:	4283      	cmp	r3, r0
 802c5d0:	d302      	bcc.n	802c5d8 <__sfvwrite_r+0x200>
 802c5d2:	6961      	ldr	r1, [r4, #20]
 802c5d4:	4551      	cmp	r1, sl
 802c5d6:	d915      	bls.n	802c604 <__sfvwrite_r+0x22c>
 802c5d8:	4552      	cmp	r2, sl
 802c5da:	bf28      	it	cs
 802c5dc:	4652      	movcs	r2, sl
 802c5de:	4639      	mov	r1, r7
 802c5e0:	4615      	mov	r5, r2
 802c5e2:	f000 f933 	bl	802c84c <memmove>
 802c5e6:	68a3      	ldr	r3, [r4, #8]
 802c5e8:	6822      	ldr	r2, [r4, #0]
 802c5ea:	1b5b      	subs	r3, r3, r5
 802c5ec:	442a      	add	r2, r5
 802c5ee:	60a3      	str	r3, [r4, #8]
 802c5f0:	6022      	str	r2, [r4, #0]
 802c5f2:	2b00      	cmp	r3, #0
 802c5f4:	d1cf      	bne.n	802c596 <__sfvwrite_r+0x1be>
 802c5f6:	4621      	mov	r1, r4
 802c5f8:	4630      	mov	r0, r6
 802c5fa:	f7ff fd59 	bl	802c0b0 <_fflush_r>
 802c5fe:	2800      	cmp	r0, #0
 802c600:	d0c9      	beq.n	802c596 <__sfvwrite_r+0x1be>
 802c602:	e79c      	b.n	802c53e <__sfvwrite_r+0x166>
 802c604:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802c608:	4553      	cmp	r3, sl
 802c60a:	bf28      	it	cs
 802c60c:	4653      	movcs	r3, sl
 802c60e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c610:	fb93 f3f1 	sdiv	r3, r3, r1
 802c614:	463a      	mov	r2, r7
 802c616:	434b      	muls	r3, r1
 802c618:	4630      	mov	r0, r6
 802c61a:	69e1      	ldr	r1, [r4, #28]
 802c61c:	47a8      	blx	r5
 802c61e:	1e05      	subs	r5, r0, #0
 802c620:	dcb9      	bgt.n	802c596 <__sfvwrite_r+0x1be>
 802c622:	e78c      	b.n	802c53e <__sfvwrite_r+0x166>
 802c624:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802c628:	2000      	movs	r0, #0
 802c62a:	f108 0808 	add.w	r8, r8, #8
 802c62e:	e6f2      	b.n	802c416 <__sfvwrite_r+0x3e>
 802c630:	f10b 0701 	add.w	r7, fp, #1
 802c634:	e6ff      	b.n	802c436 <__sfvwrite_r+0x5e>
 802c636:	4293      	cmp	r3, r2
 802c638:	dc08      	bgt.n	802c64c <__sfvwrite_r+0x274>
 802c63a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802c63c:	69e1      	ldr	r1, [r4, #28]
 802c63e:	4652      	mov	r2, sl
 802c640:	4630      	mov	r0, r6
 802c642:	47a8      	blx	r5
 802c644:	1e05      	subs	r5, r0, #0
 802c646:	f73f af12 	bgt.w	802c46e <__sfvwrite_r+0x96>
 802c64a:	e778      	b.n	802c53e <__sfvwrite_r+0x166>
 802c64c:	4651      	mov	r1, sl
 802c64e:	9201      	str	r2, [sp, #4]
 802c650:	f000 f8fc 	bl	802c84c <memmove>
 802c654:	9a01      	ldr	r2, [sp, #4]
 802c656:	68a3      	ldr	r3, [r4, #8]
 802c658:	1a9b      	subs	r3, r3, r2
 802c65a:	60a3      	str	r3, [r4, #8]
 802c65c:	6823      	ldr	r3, [r4, #0]
 802c65e:	4413      	add	r3, r2
 802c660:	6023      	str	r3, [r4, #0]
 802c662:	4615      	mov	r5, r2
 802c664:	e703      	b.n	802c46e <__sfvwrite_r+0x96>
 802c666:	2001      	movs	r0, #1
 802c668:	e70a      	b.n	802c480 <__sfvwrite_r+0xa8>
 802c66a:	bf00      	nop
 802c66c:	7ffffc00 	.word	0x7ffffc00

0802c670 <_fwalk_sglue>:
 802c670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c674:	4607      	mov	r7, r0
 802c676:	4688      	mov	r8, r1
 802c678:	4614      	mov	r4, r2
 802c67a:	2600      	movs	r6, #0
 802c67c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c680:	f1b9 0901 	subs.w	r9, r9, #1
 802c684:	d505      	bpl.n	802c692 <_fwalk_sglue+0x22>
 802c686:	6824      	ldr	r4, [r4, #0]
 802c688:	2c00      	cmp	r4, #0
 802c68a:	d1f7      	bne.n	802c67c <_fwalk_sglue+0xc>
 802c68c:	4630      	mov	r0, r6
 802c68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c692:	89ab      	ldrh	r3, [r5, #12]
 802c694:	2b01      	cmp	r3, #1
 802c696:	d907      	bls.n	802c6a8 <_fwalk_sglue+0x38>
 802c698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c69c:	3301      	adds	r3, #1
 802c69e:	d003      	beq.n	802c6a8 <_fwalk_sglue+0x38>
 802c6a0:	4629      	mov	r1, r5
 802c6a2:	4638      	mov	r0, r7
 802c6a4:	47c0      	blx	r8
 802c6a6:	4306      	orrs	r6, r0
 802c6a8:	3568      	adds	r5, #104	@ 0x68
 802c6aa:	e7e9      	b.n	802c680 <_fwalk_sglue+0x10>

0802c6ac <__swsetup_r>:
 802c6ac:	b538      	push	{r3, r4, r5, lr}
 802c6ae:	4b29      	ldr	r3, [pc, #164]	@ (802c754 <__swsetup_r+0xa8>)
 802c6b0:	4605      	mov	r5, r0
 802c6b2:	6818      	ldr	r0, [r3, #0]
 802c6b4:	460c      	mov	r4, r1
 802c6b6:	b118      	cbz	r0, 802c6c0 <__swsetup_r+0x14>
 802c6b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c6ba:	b90b      	cbnz	r3, 802c6c0 <__swsetup_r+0x14>
 802c6bc:	f7ff fe3a 	bl	802c334 <__sinit>
 802c6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c6c4:	0719      	lsls	r1, r3, #28
 802c6c6:	d422      	bmi.n	802c70e <__swsetup_r+0x62>
 802c6c8:	06da      	lsls	r2, r3, #27
 802c6ca:	d407      	bmi.n	802c6dc <__swsetup_r+0x30>
 802c6cc:	2209      	movs	r2, #9
 802c6ce:	602a      	str	r2, [r5, #0]
 802c6d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c6d4:	81a3      	strh	r3, [r4, #12]
 802c6d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802c6da:	e033      	b.n	802c744 <__swsetup_r+0x98>
 802c6dc:	0758      	lsls	r0, r3, #29
 802c6de:	d512      	bpl.n	802c706 <__swsetup_r+0x5a>
 802c6e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802c6e2:	b141      	cbz	r1, 802c6f6 <__swsetup_r+0x4a>
 802c6e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802c6e8:	4299      	cmp	r1, r3
 802c6ea:	d002      	beq.n	802c6f2 <__swsetup_r+0x46>
 802c6ec:	4628      	mov	r0, r5
 802c6ee:	f002 fa05 	bl	802eafc <_free_r>
 802c6f2:	2300      	movs	r3, #0
 802c6f4:	6323      	str	r3, [r4, #48]	@ 0x30
 802c6f6:	89a3      	ldrh	r3, [r4, #12]
 802c6f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c6fc:	81a3      	strh	r3, [r4, #12]
 802c6fe:	2300      	movs	r3, #0
 802c700:	6063      	str	r3, [r4, #4]
 802c702:	6923      	ldr	r3, [r4, #16]
 802c704:	6023      	str	r3, [r4, #0]
 802c706:	89a3      	ldrh	r3, [r4, #12]
 802c708:	f043 0308 	orr.w	r3, r3, #8
 802c70c:	81a3      	strh	r3, [r4, #12]
 802c70e:	6923      	ldr	r3, [r4, #16]
 802c710:	b94b      	cbnz	r3, 802c726 <__swsetup_r+0x7a>
 802c712:	89a3      	ldrh	r3, [r4, #12]
 802c714:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c71c:	d003      	beq.n	802c726 <__swsetup_r+0x7a>
 802c71e:	4621      	mov	r1, r4
 802c720:	4628      	mov	r0, r5
 802c722:	f005 fc2b 	bl	8031f7c <__smakebuf_r>
 802c726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c72a:	f013 0201 	ands.w	r2, r3, #1
 802c72e:	d00a      	beq.n	802c746 <__swsetup_r+0x9a>
 802c730:	2200      	movs	r2, #0
 802c732:	60a2      	str	r2, [r4, #8]
 802c734:	6962      	ldr	r2, [r4, #20]
 802c736:	4252      	negs	r2, r2
 802c738:	61a2      	str	r2, [r4, #24]
 802c73a:	6922      	ldr	r2, [r4, #16]
 802c73c:	b942      	cbnz	r2, 802c750 <__swsetup_r+0xa4>
 802c73e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c742:	d1c5      	bne.n	802c6d0 <__swsetup_r+0x24>
 802c744:	bd38      	pop	{r3, r4, r5, pc}
 802c746:	0799      	lsls	r1, r3, #30
 802c748:	bf58      	it	pl
 802c74a:	6962      	ldrpl	r2, [r4, #20]
 802c74c:	60a2      	str	r2, [r4, #8]
 802c74e:	e7f4      	b.n	802c73a <__swsetup_r+0x8e>
 802c750:	2000      	movs	r0, #0
 802c752:	e7f7      	b.n	802c744 <__swsetup_r+0x98>
 802c754:	200002d8 	.word	0x200002d8

0802c758 <memcmp>:
 802c758:	b510      	push	{r4, lr}
 802c75a:	3901      	subs	r1, #1
 802c75c:	4402      	add	r2, r0
 802c75e:	4290      	cmp	r0, r2
 802c760:	d101      	bne.n	802c766 <memcmp+0xe>
 802c762:	2000      	movs	r0, #0
 802c764:	e005      	b.n	802c772 <memcmp+0x1a>
 802c766:	7803      	ldrb	r3, [r0, #0]
 802c768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c76c:	42a3      	cmp	r3, r4
 802c76e:	d001      	beq.n	802c774 <memcmp+0x1c>
 802c770:	1b18      	subs	r0, r3, r4
 802c772:	bd10      	pop	{r4, pc}
 802c774:	3001      	adds	r0, #1
 802c776:	e7f2      	b.n	802c75e <memcmp+0x6>

0802c778 <__fputwc>:
 802c778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c77c:	4680      	mov	r8, r0
 802c77e:	460f      	mov	r7, r1
 802c780:	4614      	mov	r4, r2
 802c782:	f001 fa05 	bl	802db90 <__locale_mb_cur_max>
 802c786:	2801      	cmp	r0, #1
 802c788:	4605      	mov	r5, r0
 802c78a:	d11b      	bne.n	802c7c4 <__fputwc+0x4c>
 802c78c:	1e7b      	subs	r3, r7, #1
 802c78e:	2bfe      	cmp	r3, #254	@ 0xfe
 802c790:	d818      	bhi.n	802c7c4 <__fputwc+0x4c>
 802c792:	f88d 7004 	strb.w	r7, [sp, #4]
 802c796:	2600      	movs	r6, #0
 802c798:	f10d 0904 	add.w	r9, sp, #4
 802c79c:	42ae      	cmp	r6, r5
 802c79e:	d021      	beq.n	802c7e4 <__fputwc+0x6c>
 802c7a0:	68a3      	ldr	r3, [r4, #8]
 802c7a2:	f816 1009 	ldrb.w	r1, [r6, r9]
 802c7a6:	3b01      	subs	r3, #1
 802c7a8:	2b00      	cmp	r3, #0
 802c7aa:	60a3      	str	r3, [r4, #8]
 802c7ac:	da04      	bge.n	802c7b8 <__fputwc+0x40>
 802c7ae:	69a2      	ldr	r2, [r4, #24]
 802c7b0:	4293      	cmp	r3, r2
 802c7b2:	db1b      	blt.n	802c7ec <__fputwc+0x74>
 802c7b4:	290a      	cmp	r1, #10
 802c7b6:	d019      	beq.n	802c7ec <__fputwc+0x74>
 802c7b8:	6823      	ldr	r3, [r4, #0]
 802c7ba:	1c5a      	adds	r2, r3, #1
 802c7bc:	6022      	str	r2, [r4, #0]
 802c7be:	7019      	strb	r1, [r3, #0]
 802c7c0:	3601      	adds	r6, #1
 802c7c2:	e7eb      	b.n	802c79c <__fputwc+0x24>
 802c7c4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802c7c8:	463a      	mov	r2, r7
 802c7ca:	a901      	add	r1, sp, #4
 802c7cc:	4640      	mov	r0, r8
 802c7ce:	f001 faa1 	bl	802dd14 <_wcrtomb_r>
 802c7d2:	1c43      	adds	r3, r0, #1
 802c7d4:	4605      	mov	r5, r0
 802c7d6:	d1de      	bne.n	802c796 <__fputwc+0x1e>
 802c7d8:	89a3      	ldrh	r3, [r4, #12]
 802c7da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c7de:	81a3      	strh	r3, [r4, #12]
 802c7e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802c7e4:	4638      	mov	r0, r7
 802c7e6:	b003      	add	sp, #12
 802c7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c7ec:	4622      	mov	r2, r4
 802c7ee:	4640      	mov	r0, r8
 802c7f0:	f008 fb1d 	bl	8034e2e <__swbuf_r>
 802c7f4:	3001      	adds	r0, #1
 802c7f6:	d1e3      	bne.n	802c7c0 <__fputwc+0x48>
 802c7f8:	e7f2      	b.n	802c7e0 <__fputwc+0x68>

0802c7fa <_fputwc_r>:
 802c7fa:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802c7fc:	07db      	lsls	r3, r3, #31
 802c7fe:	b570      	push	{r4, r5, r6, lr}
 802c800:	4605      	mov	r5, r0
 802c802:	460e      	mov	r6, r1
 802c804:	4614      	mov	r4, r2
 802c806:	d405      	bmi.n	802c814 <_fputwc_r+0x1a>
 802c808:	8993      	ldrh	r3, [r2, #12]
 802c80a:	0598      	lsls	r0, r3, #22
 802c80c:	d402      	bmi.n	802c814 <_fputwc_r+0x1a>
 802c80e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802c810:	f001 fa6f 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 802c814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c818:	0499      	lsls	r1, r3, #18
 802c81a:	d406      	bmi.n	802c82a <_fputwc_r+0x30>
 802c81c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c820:	81a3      	strh	r3, [r4, #12]
 802c822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c824:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802c828:	6663      	str	r3, [r4, #100]	@ 0x64
 802c82a:	4622      	mov	r2, r4
 802c82c:	4628      	mov	r0, r5
 802c82e:	4631      	mov	r1, r6
 802c830:	f7ff ffa2 	bl	802c778 <__fputwc>
 802c834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c836:	07da      	lsls	r2, r3, #31
 802c838:	4605      	mov	r5, r0
 802c83a:	d405      	bmi.n	802c848 <_fputwc_r+0x4e>
 802c83c:	89a3      	ldrh	r3, [r4, #12]
 802c83e:	059b      	lsls	r3, r3, #22
 802c840:	d402      	bmi.n	802c848 <_fputwc_r+0x4e>
 802c842:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c844:	f001 fa57 	bl	802dcf6 <__retarget_lock_release_recursive>
 802c848:	4628      	mov	r0, r5
 802c84a:	bd70      	pop	{r4, r5, r6, pc}

0802c84c <memmove>:
 802c84c:	4288      	cmp	r0, r1
 802c84e:	b510      	push	{r4, lr}
 802c850:	eb01 0402 	add.w	r4, r1, r2
 802c854:	d902      	bls.n	802c85c <memmove+0x10>
 802c856:	4284      	cmp	r4, r0
 802c858:	4623      	mov	r3, r4
 802c85a:	d807      	bhi.n	802c86c <memmove+0x20>
 802c85c:	1e43      	subs	r3, r0, #1
 802c85e:	42a1      	cmp	r1, r4
 802c860:	d008      	beq.n	802c874 <memmove+0x28>
 802c862:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c866:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c86a:	e7f8      	b.n	802c85e <memmove+0x12>
 802c86c:	4402      	add	r2, r0
 802c86e:	4601      	mov	r1, r0
 802c870:	428a      	cmp	r2, r1
 802c872:	d100      	bne.n	802c876 <memmove+0x2a>
 802c874:	bd10      	pop	{r4, pc}
 802c876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c87e:	e7f7      	b.n	802c870 <memmove+0x24>

0802c880 <memset>:
 802c880:	4402      	add	r2, r0
 802c882:	4603      	mov	r3, r0
 802c884:	4293      	cmp	r3, r2
 802c886:	d100      	bne.n	802c88a <memset+0xa>
 802c888:	4770      	bx	lr
 802c88a:	f803 1b01 	strb.w	r1, [r3], #1
 802c88e:	e7f9      	b.n	802c884 <memset+0x4>

0802c890 <strcat>:
 802c890:	b510      	push	{r4, lr}
 802c892:	4602      	mov	r2, r0
 802c894:	7814      	ldrb	r4, [r2, #0]
 802c896:	4613      	mov	r3, r2
 802c898:	3201      	adds	r2, #1
 802c89a:	2c00      	cmp	r4, #0
 802c89c:	d1fa      	bne.n	802c894 <strcat+0x4>
 802c89e:	3b01      	subs	r3, #1
 802c8a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c8a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c8a8:	2a00      	cmp	r2, #0
 802c8aa:	d1f9      	bne.n	802c8a0 <strcat+0x10>
 802c8ac:	bd10      	pop	{r4, pc}

0802c8ae <strchr>:
 802c8ae:	b2c9      	uxtb	r1, r1
 802c8b0:	4603      	mov	r3, r0
 802c8b2:	4618      	mov	r0, r3
 802c8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c8b8:	b112      	cbz	r2, 802c8c0 <strchr+0x12>
 802c8ba:	428a      	cmp	r2, r1
 802c8bc:	d1f9      	bne.n	802c8b2 <strchr+0x4>
 802c8be:	4770      	bx	lr
 802c8c0:	2900      	cmp	r1, #0
 802c8c2:	bf18      	it	ne
 802c8c4:	2000      	movne	r0, #0
 802c8c6:	4770      	bx	lr

0802c8c8 <strcspn>:
 802c8c8:	b570      	push	{r4, r5, r6, lr}
 802c8ca:	4603      	mov	r3, r0
 802c8cc:	461e      	mov	r6, r3
 802c8ce:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c8d2:	b144      	cbz	r4, 802c8e6 <strcspn+0x1e>
 802c8d4:	1e4a      	subs	r2, r1, #1
 802c8d6:	e001      	b.n	802c8dc <strcspn+0x14>
 802c8d8:	42a5      	cmp	r5, r4
 802c8da:	d004      	beq.n	802c8e6 <strcspn+0x1e>
 802c8dc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c8e0:	2d00      	cmp	r5, #0
 802c8e2:	d1f9      	bne.n	802c8d8 <strcspn+0x10>
 802c8e4:	e7f2      	b.n	802c8cc <strcspn+0x4>
 802c8e6:	1a30      	subs	r0, r6, r0
 802c8e8:	bd70      	pop	{r4, r5, r6, pc}

0802c8ea <strncmp>:
 802c8ea:	b510      	push	{r4, lr}
 802c8ec:	b16a      	cbz	r2, 802c90a <strncmp+0x20>
 802c8ee:	3901      	subs	r1, #1
 802c8f0:	1884      	adds	r4, r0, r2
 802c8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c8f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802c8fa:	429a      	cmp	r2, r3
 802c8fc:	d103      	bne.n	802c906 <strncmp+0x1c>
 802c8fe:	42a0      	cmp	r0, r4
 802c900:	d001      	beq.n	802c906 <strncmp+0x1c>
 802c902:	2a00      	cmp	r2, #0
 802c904:	d1f5      	bne.n	802c8f2 <strncmp+0x8>
 802c906:	1ad0      	subs	r0, r2, r3
 802c908:	bd10      	pop	{r4, pc}
 802c90a:	4610      	mov	r0, r2
 802c90c:	e7fc      	b.n	802c908 <strncmp+0x1e>

0802c90e <strncpy>:
 802c90e:	b510      	push	{r4, lr}
 802c910:	3901      	subs	r1, #1
 802c912:	4603      	mov	r3, r0
 802c914:	b132      	cbz	r2, 802c924 <strncpy+0x16>
 802c916:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c91a:	f803 4b01 	strb.w	r4, [r3], #1
 802c91e:	3a01      	subs	r2, #1
 802c920:	2c00      	cmp	r4, #0
 802c922:	d1f7      	bne.n	802c914 <strncpy+0x6>
 802c924:	441a      	add	r2, r3
 802c926:	2100      	movs	r1, #0
 802c928:	4293      	cmp	r3, r2
 802c92a:	d100      	bne.n	802c92e <strncpy+0x20>
 802c92c:	bd10      	pop	{r4, pc}
 802c92e:	f803 1b01 	strb.w	r1, [r3], #1
 802c932:	e7f9      	b.n	802c928 <strncpy+0x1a>

0802c934 <strrchr>:
 802c934:	b538      	push	{r3, r4, r5, lr}
 802c936:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802c93a:	4603      	mov	r3, r0
 802c93c:	d10e      	bne.n	802c95c <strrchr+0x28>
 802c93e:	4621      	mov	r1, r4
 802c940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c944:	f7ff bfb3 	b.w	802c8ae <strchr>
 802c948:	1c43      	adds	r3, r0, #1
 802c94a:	4605      	mov	r5, r0
 802c94c:	4621      	mov	r1, r4
 802c94e:	4618      	mov	r0, r3
 802c950:	f7ff ffad 	bl	802c8ae <strchr>
 802c954:	2800      	cmp	r0, #0
 802c956:	d1f7      	bne.n	802c948 <strrchr+0x14>
 802c958:	4628      	mov	r0, r5
 802c95a:	bd38      	pop	{r3, r4, r5, pc}
 802c95c:	2500      	movs	r5, #0
 802c95e:	e7f5      	b.n	802c94c <strrchr+0x18>

0802c960 <strspn>:
 802c960:	b570      	push	{r4, r5, r6, lr}
 802c962:	4603      	mov	r3, r0
 802c964:	461e      	mov	r6, r3
 802c966:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c96a:	b13c      	cbz	r4, 802c97c <strspn+0x1c>
 802c96c:	1e4a      	subs	r2, r1, #1
 802c96e:	e001      	b.n	802c974 <strspn+0x14>
 802c970:	42a5      	cmp	r5, r4
 802c972:	d0f7      	beq.n	802c964 <strspn+0x4>
 802c974:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c978:	2d00      	cmp	r5, #0
 802c97a:	d1f9      	bne.n	802c970 <strspn+0x10>
 802c97c:	1a30      	subs	r0, r6, r0
 802c97e:	bd70      	pop	{r4, r5, r6, pc}

0802c980 <strstr>:
 802c980:	780a      	ldrb	r2, [r1, #0]
 802c982:	b570      	push	{r4, r5, r6, lr}
 802c984:	b96a      	cbnz	r2, 802c9a2 <strstr+0x22>
 802c986:	bd70      	pop	{r4, r5, r6, pc}
 802c988:	429a      	cmp	r2, r3
 802c98a:	d109      	bne.n	802c9a0 <strstr+0x20>
 802c98c:	460c      	mov	r4, r1
 802c98e:	4605      	mov	r5, r0
 802c990:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802c994:	2b00      	cmp	r3, #0
 802c996:	d0f6      	beq.n	802c986 <strstr+0x6>
 802c998:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802c99c:	429e      	cmp	r6, r3
 802c99e:	d0f7      	beq.n	802c990 <strstr+0x10>
 802c9a0:	3001      	adds	r0, #1
 802c9a2:	7803      	ldrb	r3, [r0, #0]
 802c9a4:	2b00      	cmp	r3, #0
 802c9a6:	d1ef      	bne.n	802c988 <strstr+0x8>
 802c9a8:	4618      	mov	r0, r3
 802c9aa:	e7ec      	b.n	802c986 <strstr+0x6>

0802c9ac <localtime_r>:
 802c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c9b0:	460c      	mov	r4, r1
 802c9b2:	4680      	mov	r8, r0
 802c9b4:	f008 fab6 	bl	8034f24 <__gettzinfo>
 802c9b8:	4621      	mov	r1, r4
 802c9ba:	4605      	mov	r5, r0
 802c9bc:	4640      	mov	r0, r8
 802c9be:	f008 fab5 	bl	8034f2c <gmtime_r>
 802c9c2:	6943      	ldr	r3, [r0, #20]
 802c9c4:	0799      	lsls	r1, r3, #30
 802c9c6:	4604      	mov	r4, r0
 802c9c8:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802c9cc:	d106      	bne.n	802c9dc <localtime_r+0x30>
 802c9ce:	2264      	movs	r2, #100	@ 0x64
 802c9d0:	fb97 f3f2 	sdiv	r3, r7, r2
 802c9d4:	fb02 7313 	mls	r3, r2, r3, r7
 802c9d8:	2b00      	cmp	r3, #0
 802c9da:	d170      	bne.n	802cabe <localtime_r+0x112>
 802c9dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c9e0:	fb97 f3f2 	sdiv	r3, r7, r2
 802c9e4:	fb02 7313 	mls	r3, r2, r3, r7
 802c9e8:	fab3 f383 	clz	r3, r3
 802c9ec:	095b      	lsrs	r3, r3, #5
 802c9ee:	4e64      	ldr	r6, [pc, #400]	@ (802cb80 <localtime_r+0x1d4>)
 802c9f0:	2230      	movs	r2, #48	@ 0x30
 802c9f2:	fb02 6603 	mla	r6, r2, r3, r6
 802c9f6:	f000 fe97 	bl	802d728 <__tz_lock>
 802c9fa:	f000 fea1 	bl	802d740 <_tzset_unlocked>
 802c9fe:	4b61      	ldr	r3, [pc, #388]	@ (802cb84 <localtime_r+0x1d8>)
 802ca00:	681b      	ldr	r3, [r3, #0]
 802ca02:	2b00      	cmp	r3, #0
 802ca04:	d06a      	beq.n	802cadc <localtime_r+0x130>
 802ca06:	686b      	ldr	r3, [r5, #4]
 802ca08:	42bb      	cmp	r3, r7
 802ca0a:	d15a      	bne.n	802cac2 <localtime_r+0x116>
 802ca0c:	682f      	ldr	r7, [r5, #0]
 802ca0e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802ca12:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802ca16:	2f00      	cmp	r7, #0
 802ca18:	d15b      	bne.n	802cad2 <localtime_r+0x126>
 802ca1a:	4282      	cmp	r2, r0
 802ca1c:	eb73 0101 	sbcs.w	r1, r3, r1
 802ca20:	db5e      	blt.n	802cae0 <localtime_r+0x134>
 802ca22:	2301      	movs	r3, #1
 802ca24:	6223      	str	r3, [r4, #32]
 802ca26:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802ca28:	6861      	ldr	r1, [r4, #4]
 802ca2a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802ca2e:	fb93 f0f2 	sdiv	r0, r3, r2
 802ca32:	fb02 3310 	mls	r3, r2, r0, r3
 802ca36:	223c      	movs	r2, #60	@ 0x3c
 802ca38:	fb93 f5f2 	sdiv	r5, r3, r2
 802ca3c:	fb02 3215 	mls	r2, r2, r5, r3
 802ca40:	6823      	ldr	r3, [r4, #0]
 802ca42:	1a9b      	subs	r3, r3, r2
 802ca44:	68a2      	ldr	r2, [r4, #8]
 802ca46:	6023      	str	r3, [r4, #0]
 802ca48:	1b49      	subs	r1, r1, r5
 802ca4a:	1a12      	subs	r2, r2, r0
 802ca4c:	2b3b      	cmp	r3, #59	@ 0x3b
 802ca4e:	6061      	str	r1, [r4, #4]
 802ca50:	60a2      	str	r2, [r4, #8]
 802ca52:	dd51      	ble.n	802caf8 <localtime_r+0x14c>
 802ca54:	3101      	adds	r1, #1
 802ca56:	6061      	str	r1, [r4, #4]
 802ca58:	3b3c      	subs	r3, #60	@ 0x3c
 802ca5a:	6023      	str	r3, [r4, #0]
 802ca5c:	6863      	ldr	r3, [r4, #4]
 802ca5e:	2b3b      	cmp	r3, #59	@ 0x3b
 802ca60:	dd50      	ble.n	802cb04 <localtime_r+0x158>
 802ca62:	3201      	adds	r2, #1
 802ca64:	60a2      	str	r2, [r4, #8]
 802ca66:	3b3c      	subs	r3, #60	@ 0x3c
 802ca68:	6063      	str	r3, [r4, #4]
 802ca6a:	68a3      	ldr	r3, [r4, #8]
 802ca6c:	2b17      	cmp	r3, #23
 802ca6e:	dd4f      	ble.n	802cb10 <localtime_r+0x164>
 802ca70:	69e2      	ldr	r2, [r4, #28]
 802ca72:	3201      	adds	r2, #1
 802ca74:	61e2      	str	r2, [r4, #28]
 802ca76:	69a2      	ldr	r2, [r4, #24]
 802ca78:	3201      	adds	r2, #1
 802ca7a:	2a07      	cmp	r2, #7
 802ca7c:	bfa8      	it	ge
 802ca7e:	2200      	movge	r2, #0
 802ca80:	61a2      	str	r2, [r4, #24]
 802ca82:	68e2      	ldr	r2, [r4, #12]
 802ca84:	3b18      	subs	r3, #24
 802ca86:	3201      	adds	r2, #1
 802ca88:	60a3      	str	r3, [r4, #8]
 802ca8a:	6923      	ldr	r3, [r4, #16]
 802ca8c:	60e2      	str	r2, [r4, #12]
 802ca8e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ca92:	428a      	cmp	r2, r1
 802ca94:	dd0e      	ble.n	802cab4 <localtime_r+0x108>
 802ca96:	2b0b      	cmp	r3, #11
 802ca98:	eba2 0201 	sub.w	r2, r2, r1
 802ca9c:	60e2      	str	r2, [r4, #12]
 802ca9e:	f103 0201 	add.w	r2, r3, #1
 802caa2:	bf09      	itett	eq
 802caa4:	6963      	ldreq	r3, [r4, #20]
 802caa6:	6122      	strne	r2, [r4, #16]
 802caa8:	2200      	moveq	r2, #0
 802caaa:	3301      	addeq	r3, #1
 802caac:	bf02      	ittt	eq
 802caae:	6122      	streq	r2, [r4, #16]
 802cab0:	6163      	streq	r3, [r4, #20]
 802cab2:	61e2      	streq	r2, [r4, #28]
 802cab4:	f000 fe3e 	bl	802d734 <__tz_unlock>
 802cab8:	4620      	mov	r0, r4
 802caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cabe:	2301      	movs	r3, #1
 802cac0:	e795      	b.n	802c9ee <localtime_r+0x42>
 802cac2:	4638      	mov	r0, r7
 802cac4:	f000 fd86 	bl	802d5d4 <__tzcalc_limits>
 802cac8:	2800      	cmp	r0, #0
 802caca:	d19f      	bne.n	802ca0c <localtime_r+0x60>
 802cacc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802cad0:	e004      	b.n	802cadc <localtime_r+0x130>
 802cad2:	4282      	cmp	r2, r0
 802cad4:	eb73 0101 	sbcs.w	r1, r3, r1
 802cad8:	da02      	bge.n	802cae0 <localtime_r+0x134>
 802cada:	2300      	movs	r3, #0
 802cadc:	6223      	str	r3, [r4, #32]
 802cade:	e009      	b.n	802caf4 <localtime_r+0x148>
 802cae0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802cae4:	4282      	cmp	r2, r0
 802cae6:	418b      	sbcs	r3, r1
 802cae8:	bfb4      	ite	lt
 802caea:	2301      	movlt	r3, #1
 802caec:	2300      	movge	r3, #0
 802caee:	6223      	str	r3, [r4, #32]
 802caf0:	2b00      	cmp	r3, #0
 802caf2:	d198      	bne.n	802ca26 <localtime_r+0x7a>
 802caf4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802caf6:	e797      	b.n	802ca28 <localtime_r+0x7c>
 802caf8:	2b00      	cmp	r3, #0
 802cafa:	daaf      	bge.n	802ca5c <localtime_r+0xb0>
 802cafc:	3901      	subs	r1, #1
 802cafe:	6061      	str	r1, [r4, #4]
 802cb00:	333c      	adds	r3, #60	@ 0x3c
 802cb02:	e7aa      	b.n	802ca5a <localtime_r+0xae>
 802cb04:	2b00      	cmp	r3, #0
 802cb06:	dab0      	bge.n	802ca6a <localtime_r+0xbe>
 802cb08:	3a01      	subs	r2, #1
 802cb0a:	60a2      	str	r2, [r4, #8]
 802cb0c:	333c      	adds	r3, #60	@ 0x3c
 802cb0e:	e7ab      	b.n	802ca68 <localtime_r+0xbc>
 802cb10:	2b00      	cmp	r3, #0
 802cb12:	dacf      	bge.n	802cab4 <localtime_r+0x108>
 802cb14:	69e2      	ldr	r2, [r4, #28]
 802cb16:	3a01      	subs	r2, #1
 802cb18:	61e2      	str	r2, [r4, #28]
 802cb1a:	69a2      	ldr	r2, [r4, #24]
 802cb1c:	3a01      	subs	r2, #1
 802cb1e:	bf48      	it	mi
 802cb20:	2206      	movmi	r2, #6
 802cb22:	61a2      	str	r2, [r4, #24]
 802cb24:	68e2      	ldr	r2, [r4, #12]
 802cb26:	3318      	adds	r3, #24
 802cb28:	3a01      	subs	r2, #1
 802cb2a:	60e2      	str	r2, [r4, #12]
 802cb2c:	60a3      	str	r3, [r4, #8]
 802cb2e:	2a00      	cmp	r2, #0
 802cb30:	d1c0      	bne.n	802cab4 <localtime_r+0x108>
 802cb32:	6923      	ldr	r3, [r4, #16]
 802cb34:	3b01      	subs	r3, #1
 802cb36:	d405      	bmi.n	802cb44 <localtime_r+0x198>
 802cb38:	6123      	str	r3, [r4, #16]
 802cb3a:	6923      	ldr	r3, [r4, #16]
 802cb3c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802cb40:	60e3      	str	r3, [r4, #12]
 802cb42:	e7b7      	b.n	802cab4 <localtime_r+0x108>
 802cb44:	230b      	movs	r3, #11
 802cb46:	6123      	str	r3, [r4, #16]
 802cb48:	6963      	ldr	r3, [r4, #20]
 802cb4a:	1e5a      	subs	r2, r3, #1
 802cb4c:	6162      	str	r2, [r4, #20]
 802cb4e:	0792      	lsls	r2, r2, #30
 802cb50:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802cb54:	d105      	bne.n	802cb62 <localtime_r+0x1b6>
 802cb56:	2164      	movs	r1, #100	@ 0x64
 802cb58:	fb93 f2f1 	sdiv	r2, r3, r1
 802cb5c:	fb01 3212 	mls	r2, r1, r2, r3
 802cb60:	b962      	cbnz	r2, 802cb7c <localtime_r+0x1d0>
 802cb62:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cb66:	fb93 f1f2 	sdiv	r1, r3, r2
 802cb6a:	fb02 3311 	mls	r3, r2, r1, r3
 802cb6e:	fab3 f383 	clz	r3, r3
 802cb72:	095b      	lsrs	r3, r3, #5
 802cb74:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802cb78:	61e3      	str	r3, [r4, #28]
 802cb7a:	e7de      	b.n	802cb3a <localtime_r+0x18e>
 802cb7c:	2301      	movs	r3, #1
 802cb7e:	e7f9      	b.n	802cb74 <localtime_r+0x1c8>
 802cb80:	0803ba58 	.word	0x0803ba58
 802cb84:	2001a040 	.word	0x2001a040

0802cb88 <iso_year_adjust>:
 802cb88:	6942      	ldr	r2, [r0, #20]
 802cb8a:	2a00      	cmp	r2, #0
 802cb8c:	f240 736c 	movw	r3, #1900	@ 0x76c
 802cb90:	bfa8      	it	ge
 802cb92:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802cb96:	4413      	add	r3, r2
 802cb98:	0792      	lsls	r2, r2, #30
 802cb9a:	d105      	bne.n	802cba8 <iso_year_adjust+0x20>
 802cb9c:	2164      	movs	r1, #100	@ 0x64
 802cb9e:	fb93 f2f1 	sdiv	r2, r3, r1
 802cba2:	fb01 3212 	mls	r2, r1, r2, r3
 802cba6:	b9ca      	cbnz	r2, 802cbdc <iso_year_adjust+0x54>
 802cba8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cbac:	fb93 f1f2 	sdiv	r1, r3, r2
 802cbb0:	fb02 3311 	mls	r3, r2, r1, r3
 802cbb4:	fab3 f383 	clz	r3, r3
 802cbb8:	095b      	lsrs	r3, r3, #5
 802cbba:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802cbbe:	0040      	lsls	r0, r0, #1
 802cbc0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802cbc4:	4418      	add	r0, r3
 802cbc6:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802cbca:	4298      	cmp	r0, r3
 802cbcc:	d027      	beq.n	802cc1e <iso_year_adjust+0x96>
 802cbce:	dc11      	bgt.n	802cbf4 <iso_year_adjust+0x6c>
 802cbd0:	2801      	cmp	r0, #1
 802cbd2:	dc0a      	bgt.n	802cbea <iso_year_adjust+0x62>
 802cbd4:	43c0      	mvns	r0, r0
 802cbd6:	0fc0      	lsrs	r0, r0, #31
 802cbd8:	4240      	negs	r0, r0
 802cbda:	4770      	bx	lr
 802cbdc:	2301      	movs	r3, #1
 802cbde:	e7ec      	b.n	802cbba <iso_year_adjust+0x32>
 802cbe0:	4b10      	ldr	r3, [pc, #64]	@ (802cc24 <iso_year_adjust+0x9c>)
 802cbe2:	40c3      	lsrs	r3, r0
 802cbe4:	f343 0000 	sbfx	r0, r3, #0, #1
 802cbe8:	4770      	bx	lr
 802cbea:	380a      	subs	r0, #10
 802cbec:	2817      	cmp	r0, #23
 802cbee:	d9f7      	bls.n	802cbe0 <iso_year_adjust+0x58>
 802cbf0:	2000      	movs	r0, #0
 802cbf2:	4770      	bx	lr
 802cbf4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802cbf8:	4298      	cmp	r0, r3
 802cbfa:	dc06      	bgt.n	802cc0a <iso_year_adjust+0x82>
 802cbfc:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802cc00:	4298      	cmp	r0, r3
 802cc02:	bfd4      	ite	le
 802cc04:	2000      	movle	r0, #0
 802cc06:	2001      	movgt	r0, #1
 802cc08:	4770      	bx	lr
 802cc0a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802cc0e:	3802      	subs	r0, #2
 802cc10:	2815      	cmp	r0, #21
 802cc12:	d8ed      	bhi.n	802cbf0 <iso_year_adjust+0x68>
 802cc14:	4b04      	ldr	r3, [pc, #16]	@ (802cc28 <iso_year_adjust+0xa0>)
 802cc16:	40c3      	lsrs	r3, r0
 802cc18:	f003 0001 	and.w	r0, r3, #1
 802cc1c:	4770      	bx	lr
 802cc1e:	2001      	movs	r0, #1
 802cc20:	4770      	bx	lr
 802cc22:	bf00      	nop
 802cc24:	00cc00cf 	.word	0x00cc00cf
 802cc28:	002a001f 	.word	0x002a001f

0802cc2c <__strftime.isra.0>:
 802cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cc30:	b08f      	sub	sp, #60	@ 0x3c
 802cc32:	461e      	mov	r6, r3
 802cc34:	2300      	movs	r3, #0
 802cc36:	4607      	mov	r7, r0
 802cc38:	460d      	mov	r5, r1
 802cc3a:	9302      	str	r3, [sp, #8]
 802cc3c:	461c      	mov	r4, r3
 802cc3e:	7813      	ldrb	r3, [r2, #0]
 802cc40:	2b00      	cmp	r3, #0
 802cc42:	f000 84ae 	beq.w	802d5a2 <__strftime.isra.0+0x976>
 802cc46:	2b25      	cmp	r3, #37	@ 0x25
 802cc48:	d11f      	bne.n	802cc8a <__strftime.isra.0+0x5e>
 802cc4a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802cc4e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802cc52:	d024      	beq.n	802cc9e <__strftime.isra.0+0x72>
 802cc54:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802cc58:	d021      	beq.n	802cc9e <__strftime.isra.0+0x72>
 802cc5a:	f102 0801 	add.w	r8, r2, #1
 802cc5e:	f04f 0900 	mov.w	r9, #0
 802cc62:	f898 2000 	ldrb.w	r2, [r8]
 802cc66:	3a31      	subs	r2, #49	@ 0x31
 802cc68:	2a08      	cmp	r2, #8
 802cc6a:	d81b      	bhi.n	802cca4 <__strftime.isra.0+0x78>
 802cc6c:	220a      	movs	r2, #10
 802cc6e:	4640      	mov	r0, r8
 802cc70:	a906      	add	r1, sp, #24
 802cc72:	f008 f88b 	bl	8034d8c <strtoul>
 802cc76:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802cc7a:	4602      	mov	r2, r0
 802cc7c:	f898 1000 	ldrb.w	r1, [r8]
 802cc80:	2945      	cmp	r1, #69	@ 0x45
 802cc82:	d111      	bne.n	802cca8 <__strftime.isra.0+0x7c>
 802cc84:	f108 0801 	add.w	r8, r8, #1
 802cc88:	e010      	b.n	802ccac <__strftime.isra.0+0x80>
 802cc8a:	1e69      	subs	r1, r5, #1
 802cc8c:	42a1      	cmp	r1, r4
 802cc8e:	f240 815d 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802cc92:	553b      	strb	r3, [r7, r4]
 802cc94:	3201      	adds	r2, #1
 802cc96:	f104 0a01 	add.w	sl, r4, #1
 802cc9a:	4654      	mov	r4, sl
 802cc9c:	e7cf      	b.n	802cc3e <__strftime.isra.0+0x12>
 802cc9e:	f102 0802 	add.w	r8, r2, #2
 802cca2:	e7de      	b.n	802cc62 <__strftime.isra.0+0x36>
 802cca4:	2200      	movs	r2, #0
 802cca6:	e7e9      	b.n	802cc7c <__strftime.isra.0+0x50>
 802cca8:	294f      	cmp	r1, #79	@ 0x4f
 802ccaa:	d0eb      	beq.n	802cc84 <__strftime.isra.0+0x58>
 802ccac:	f898 0000 	ldrb.w	r0, [r8]
 802ccb0:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802ccb4:	2955      	cmp	r1, #85	@ 0x55
 802ccb6:	f200 8149 	bhi.w	802cf4c <__strftime.isra.0+0x320>
 802ccba:	e8df f011 	tbh	[pc, r1, lsl #1]
 802ccbe:	046a      	.short	0x046a
 802ccc0:	01470147 	.word	0x01470147
 802ccc4:	01470147 	.word	0x01470147
 802ccc8:	01470147 	.word	0x01470147
 802cccc:	01470147 	.word	0x01470147
 802ccd0:	01470147 	.word	0x01470147
 802ccd4:	01470147 	.word	0x01470147
 802ccd8:	01470147 	.word	0x01470147
 802ccdc:	01470147 	.word	0x01470147
 802cce0:	01470147 	.word	0x01470147
 802cce4:	01470147 	.word	0x01470147
 802cce8:	01470147 	.word	0x01470147
 802ccec:	01470147 	.word	0x01470147
 802ccf0:	01470147 	.word	0x01470147
 802ccf4:	00750147 	.word	0x00750147
 802ccf8:	00dc00a3 	.word	0x00dc00a3
 802ccfc:	01470128 	.word	0x01470128
 802cd00:	01cb0159 	.word	0x01cb0159
 802cd04:	02590252 	.word	0x02590252
 802cd08:	01470147 	.word	0x01470147
 802cd0c:	02710147 	.word	0x02710147
 802cd10:	01470147 	.word	0x01470147
 802cd14:	0147027c 	.word	0x0147027c
 802cd18:	033402ac 	.word	0x033402ac
 802cd1c:	036a033e 	.word	0x036a033e
 802cd20:	03d80372 	.word	0x03d80372
 802cd24:	03ee00d8 	.word	0x03ee00d8
 802cd28:	01470440 	.word	0x01470440
 802cd2c:	01470147 	.word	0x01470147
 802cd30:	01470147 	.word	0x01470147
 802cd34:	00560147 	.word	0x00560147
 802cd38:	00ba008d 	.word	0x00ba008d
 802cd3c:	011d011d 	.word	0x011d011d
 802cd40:	017e0147 	.word	0x017e0147
 802cd44:	0147008d 	.word	0x0147008d
 802cd48:	0252026a 	.word	0x0252026a
 802cd4c:	026e0259 	.word	0x026e0259
 802cd50:	01470273 	.word	0x01470273
 802cd54:	02a5027c 	.word	0x02a5027c
 802cd58:	02b500d0 	.word	0x02b500d0
 802cd5c:	035d0336 	.word	0x035d0336
 802cd60:	03cf03a4 	.word	0x03cf03a4
 802cd64:	03e000d4 	.word	0x03e000d4
 802cd68:	0403      	.short	0x0403
 802cd6a:	69b3      	ldr	r3, [r6, #24]
 802cd6c:	4aad      	ldr	r2, [pc, #692]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802cd6e:	3318      	adds	r3, #24
 802cd70:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802cd74:	4658      	mov	r0, fp
 802cd76:	f7e3 fa93 	bl	80102a0 <strlen>
 802cd7a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cd7e:	eb04 0a00 	add.w	sl, r4, r0
 802cd82:	1e6b      	subs	r3, r5, #1
 802cd84:	45a2      	cmp	sl, r4
 802cd86:	d107      	bne.n	802cd98 <__strftime.isra.0+0x16c>
 802cd88:	f898 3000 	ldrb.w	r3, [r8]
 802cd8c:	2b00      	cmp	r3, #0
 802cd8e:	f000 8409 	beq.w	802d5a4 <__strftime.isra.0+0x978>
 802cd92:	f108 0201 	add.w	r2, r8, #1
 802cd96:	e780      	b.n	802cc9a <__strftime.isra.0+0x6e>
 802cd98:	42a3      	cmp	r3, r4
 802cd9a:	f240 80d7 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802cd9e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cda2:	553a      	strb	r2, [r7, r4]
 802cda4:	3401      	adds	r4, #1
 802cda6:	e7ed      	b.n	802cd84 <__strftime.isra.0+0x158>
 802cda8:	69b2      	ldr	r2, [r6, #24]
 802cdaa:	4b9e      	ldr	r3, [pc, #632]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802cdac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802cdb0:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802cdb4:	4658      	mov	r0, fp
 802cdb6:	f7e3 fa73 	bl	80102a0 <strlen>
 802cdba:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cdbe:	eb04 0a00 	add.w	sl, r4, r0
 802cdc2:	1e6b      	subs	r3, r5, #1
 802cdc4:	4554      	cmp	r4, sl
 802cdc6:	d0df      	beq.n	802cd88 <__strftime.isra.0+0x15c>
 802cdc8:	42a3      	cmp	r3, r4
 802cdca:	f240 80bf 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802cdce:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cdd2:	553a      	strb	r2, [r7, r4]
 802cdd4:	3401      	adds	r4, #1
 802cdd6:	e7f5      	b.n	802cdc4 <__strftime.isra.0+0x198>
 802cdd8:	4b92      	ldr	r3, [pc, #584]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802cdda:	6932      	ldr	r2, [r6, #16]
 802cddc:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802cde0:	4658      	mov	r0, fp
 802cde2:	f7e3 fa5d 	bl	80102a0 <strlen>
 802cde6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802cdea:	eb04 0a00 	add.w	sl, r4, r0
 802cdee:	1e6b      	subs	r3, r5, #1
 802cdf0:	45a2      	cmp	sl, r4
 802cdf2:	d0c9      	beq.n	802cd88 <__strftime.isra.0+0x15c>
 802cdf4:	42a3      	cmp	r3, r4
 802cdf6:	f240 80a9 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802cdfa:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802cdfe:	553a      	strb	r2, [r7, r4]
 802ce00:	3401      	adds	r4, #1
 802ce02:	e7f5      	b.n	802cdf0 <__strftime.isra.0+0x1c4>
 802ce04:	6933      	ldr	r3, [r6, #16]
 802ce06:	4a87      	ldr	r2, [pc, #540]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802ce08:	330c      	adds	r3, #12
 802ce0a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802ce0e:	4658      	mov	r0, fp
 802ce10:	f7e3 fa46 	bl	80102a0 <strlen>
 802ce14:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802ce18:	eb04 0a00 	add.w	sl, r4, r0
 802ce1c:	1e6b      	subs	r3, r5, #1
 802ce1e:	45a2      	cmp	sl, r4
 802ce20:	d0b2      	beq.n	802cd88 <__strftime.isra.0+0x15c>
 802ce22:	42a3      	cmp	r3, r4
 802ce24:	f240 8092 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802ce28:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802ce2c:	553a      	strb	r2, [r7, r4]
 802ce2e:	3401      	adds	r4, #1
 802ce30:	e7f5      	b.n	802ce1e <__strftime.isra.0+0x1f2>
 802ce32:	4b7c      	ldr	r3, [pc, #496]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802ce34:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802ce38:	4650      	mov	r0, sl
 802ce3a:	f7e3 fa31 	bl	80102a0 <strlen>
 802ce3e:	f89a 3000 	ldrb.w	r3, [sl]
 802ce42:	2b00      	cmp	r3, #0
 802ce44:	f000 8341 	beq.w	802d4ca <__strftime.isra.0+0x89e>
 802ce48:	4633      	mov	r3, r6
 802ce4a:	4652      	mov	r2, sl
 802ce4c:	1b29      	subs	r1, r5, r4
 802ce4e:	1938      	adds	r0, r7, r4
 802ce50:	f7ff feec 	bl	802cc2c <__strftime.isra.0>
 802ce54:	2800      	cmp	r0, #0
 802ce56:	dd79      	ble.n	802cf4c <__strftime.isra.0+0x320>
 802ce58:	eb04 0a00 	add.w	sl, r4, r0
 802ce5c:	e794      	b.n	802cd88 <__strftime.isra.0+0x15c>
 802ce5e:	4b71      	ldr	r3, [pc, #452]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802ce60:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802ce64:	e7e8      	b.n	802ce38 <__strftime.isra.0+0x20c>
 802ce66:	4b6f      	ldr	r3, [pc, #444]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802ce68:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802ce6c:	e7e4      	b.n	802ce38 <__strftime.isra.0+0x20c>
 802ce6e:	4b6d      	ldr	r3, [pc, #436]	@ (802d024 <__strftime.isra.0+0x3f8>)
 802ce70:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802ce74:	e7e0      	b.n	802ce38 <__strftime.isra.0+0x20c>
 802ce76:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802ce7a:	496b      	ldr	r1, [pc, #428]	@ (802d028 <__strftime.isra.0+0x3fc>)
 802ce7c:	458a      	cmp	sl, r1
 802ce7e:	bfac      	ite	ge
 802ce80:	f04f 0b00 	movge.w	fp, #0
 802ce84:	f04f 0b01 	movlt.w	fp, #1
 802ce88:	f1ba 0f00 	cmp.w	sl, #0
 802ce8c:	db12      	blt.n	802ceb4 <__strftime.isra.0+0x288>
 802ce8e:	2064      	movs	r0, #100	@ 0x64
 802ce90:	fb9a f0f0 	sdiv	r0, sl, r0
 802ce94:	3013      	adds	r0, #19
 802ce96:	f1b9 0f00 	cmp.w	r9, #0
 802ce9a:	d015      	beq.n	802cec8 <__strftime.isra.0+0x29c>
 802ce9c:	2863      	cmp	r0, #99	@ 0x63
 802ce9e:	dd28      	ble.n	802cef2 <__strftime.isra.0+0x2c6>
 802cea0:	4b62      	ldr	r3, [pc, #392]	@ (802d02c <__strftime.isra.0+0x400>)
 802cea2:	4963      	ldr	r1, [pc, #396]	@ (802d030 <__strftime.isra.0+0x404>)
 802cea4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802cea8:	bf0c      	ite	eq
 802ceaa:	469c      	moveq	ip, r3
 802ceac:	468c      	movne	ip, r1
 802ceae:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802d04c <__strftime.isra.0+0x420>
 802ceb2:	e00d      	b.n	802ced0 <__strftime.isra.0+0x2a4>
 802ceb4:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802ceb8:	9203      	str	r2, [sp, #12]
 802ceba:	f000 ff88 	bl	802ddce <abs>
 802cebe:	2164      	movs	r1, #100	@ 0x64
 802cec0:	9a03      	ldr	r2, [sp, #12]
 802cec2:	fb90 f0f1 	sdiv	r0, r0, r1
 802cec6:	e7e6      	b.n	802ce96 <__strftime.isra.0+0x26a>
 802cec8:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802d030 <__strftime.isra.0+0x404>
 802cecc:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802d050 <__strftime.isra.0+0x424>
 802ced0:	4b58      	ldr	r3, [pc, #352]	@ (802d034 <__strftime.isra.0+0x408>)
 802ced2:	9001      	str	r0, [sp, #4]
 802ced4:	2a02      	cmp	r2, #2
 802ced6:	bf2c      	ite	cs
 802ced8:	ebcb 0102 	rsbcs	r1, fp, r2
 802cedc:	f1cb 0102 	rsbcc	r1, fp, #2
 802cee0:	4a51      	ldr	r2, [pc, #324]	@ (802d028 <__strftime.isra.0+0x3fc>)
 802cee2:	9100      	str	r1, [sp, #0]
 802cee4:	4592      	cmp	sl, r2
 802cee6:	bfa8      	it	ge
 802cee8:	4663      	movge	r3, ip
 802ceea:	4672      	mov	r2, lr
 802ceec:	1b29      	subs	r1, r5, r4
 802ceee:	1938      	adds	r0, r7, r4
 802cef0:	e023      	b.n	802cf3a <__strftime.isra.0+0x30e>
 802cef2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802d030 <__strftime.isra.0+0x404>
 802cef6:	e7da      	b.n	802ceae <__strftime.isra.0+0x282>
 802cef8:	494f      	ldr	r1, [pc, #316]	@ (802d038 <__strftime.isra.0+0x40c>)
 802cefa:	4a50      	ldr	r2, [pc, #320]	@ (802d03c <__strftime.isra.0+0x410>)
 802cefc:	68f3      	ldr	r3, [r6, #12]
 802cefe:	2864      	cmp	r0, #100	@ 0x64
 802cf00:	bf18      	it	ne
 802cf02:	460a      	movne	r2, r1
 802cf04:	1b29      	subs	r1, r5, r4
 802cf06:	1938      	adds	r0, r7, r4
 802cf08:	f002 f986 	bl	802f218 <sniprintf>
 802cf0c:	e017      	b.n	802cf3e <__strftime.isra.0+0x312>
 802cf0e:	6970      	ldr	r0, [r6, #20]
 802cf10:	6933      	ldr	r3, [r6, #16]
 802cf12:	2800      	cmp	r0, #0
 802cf14:	f103 0a01 	add.w	sl, r3, #1
 802cf18:	eb07 0b04 	add.w	fp, r7, r4
 802cf1c:	68f3      	ldr	r3, [r6, #12]
 802cf1e:	eba5 0904 	sub.w	r9, r5, r4
 802cf22:	db19      	blt.n	802cf58 <__strftime.isra.0+0x32c>
 802cf24:	2264      	movs	r2, #100	@ 0x64
 802cf26:	fb90 fcf2 	sdiv	ip, r0, r2
 802cf2a:	fb02 001c 	mls	r0, r2, ip, r0
 802cf2e:	4a44      	ldr	r2, [pc, #272]	@ (802d040 <__strftime.isra.0+0x414>)
 802cf30:	e9cd 3000 	strd	r3, r0, [sp]
 802cf34:	4649      	mov	r1, r9
 802cf36:	4653      	mov	r3, sl
 802cf38:	4658      	mov	r0, fp
 802cf3a:	f002 f96d 	bl	802f218 <sniprintf>
 802cf3e:	2800      	cmp	r0, #0
 802cf40:	db04      	blt.n	802cf4c <__strftime.isra.0+0x320>
 802cf42:	eb00 0a04 	add.w	sl, r0, r4
 802cf46:	4555      	cmp	r5, sl
 802cf48:	f63f af1e 	bhi.w	802cd88 <__strftime.isra.0+0x15c>
 802cf4c:	f04f 0a00 	mov.w	sl, #0
 802cf50:	4650      	mov	r0, sl
 802cf52:	b00f      	add	sp, #60	@ 0x3c
 802cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf58:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802cf5c:	9303      	str	r3, [sp, #12]
 802cf5e:	f000 ff36 	bl	802ddce <abs>
 802cf62:	2264      	movs	r2, #100	@ 0x64
 802cf64:	9b03      	ldr	r3, [sp, #12]
 802cf66:	fb90 fcf2 	sdiv	ip, r0, r2
 802cf6a:	fb0c 0012 	mls	r0, ip, r2, r0
 802cf6e:	e7de      	b.n	802cf2e <__strftime.isra.0+0x302>
 802cf70:	2125      	movs	r1, #37	@ 0x25
 802cf72:	f88d 1018 	strb.w	r1, [sp, #24]
 802cf76:	f1b9 0f00 	cmp.w	r9, #0
 802cf7a:	d00b      	beq.n	802cf94 <__strftime.isra.0+0x368>
 802cf7c:	2a05      	cmp	r2, #5
 802cf7e:	f88d 9019 	strb.w	r9, [sp, #25]
 802cf82:	d817      	bhi.n	802cfb4 <__strftime.isra.0+0x388>
 802cf84:	f10d 001a 	add.w	r0, sp, #26
 802cf88:	492e      	ldr	r1, [pc, #184]	@ (802d044 <__strftime.isra.0+0x418>)
 802cf8a:	f000 fe83 	bl	802dc94 <strcpy>
 802cf8e:	4633      	mov	r3, r6
 802cf90:	aa06      	add	r2, sp, #24
 802cf92:	e75b      	b.n	802ce4c <__strftime.isra.0+0x220>
 802cf94:	232b      	movs	r3, #43	@ 0x2b
 802cf96:	f88d 3019 	strb.w	r3, [sp, #25]
 802cf9a:	2304      	movs	r3, #4
 802cf9c:	4a2a      	ldr	r2, [pc, #168]	@ (802d048 <__strftime.isra.0+0x41c>)
 802cf9e:	211e      	movs	r1, #30
 802cfa0:	f10d 001a 	add.w	r0, sp, #26
 802cfa4:	f002 f938 	bl	802f218 <sniprintf>
 802cfa8:	2800      	cmp	r0, #0
 802cfaa:	ddeb      	ble.n	802cf84 <__strftime.isra.0+0x358>
 802cfac:	f10d 031a 	add.w	r3, sp, #26
 802cfb0:	4418      	add	r0, r3
 802cfb2:	e7e9      	b.n	802cf88 <__strftime.isra.0+0x35c>
 802cfb4:	1f93      	subs	r3, r2, #6
 802cfb6:	d0e5      	beq.n	802cf84 <__strftime.isra.0+0x358>
 802cfb8:	e7f0      	b.n	802cf9c <__strftime.isra.0+0x370>
 802cfba:	4630      	mov	r0, r6
 802cfbc:	f7ff fde4 	bl	802cb88 <iso_year_adjust>
 802cfc0:	4682      	mov	sl, r0
 802cfc2:	6970      	ldr	r0, [r6, #20]
 802cfc4:	2800      	cmp	r0, #0
 802cfc6:	db11      	blt.n	802cfec <__strftime.isra.0+0x3c0>
 802cfc8:	2364      	movs	r3, #100	@ 0x64
 802cfca:	fb90 f2f3 	sdiv	r2, r0, r3
 802cfce:	fb03 0012 	mls	r0, r3, r2, r0
 802cfd2:	2364      	movs	r3, #100	@ 0x64
 802cfd4:	4482      	add	sl, r0
 802cfd6:	fb9a f2f3 	sdiv	r2, sl, r3
 802cfda:	fb03 aa12 	mls	sl, r3, r2, sl
 802cfde:	449a      	add	sl, r3
 802cfe0:	fbba f2f3 	udiv	r2, sl, r3
 802cfe4:	fb03 a312 	mls	r3, r3, r2, sl
 802cfe8:	4a14      	ldr	r2, [pc, #80]	@ (802d03c <__strftime.isra.0+0x410>)
 802cfea:	e78b      	b.n	802cf04 <__strftime.isra.0+0x2d8>
 802cfec:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802cff0:	f000 feed 	bl	802ddce <abs>
 802cff4:	2364      	movs	r3, #100	@ 0x64
 802cff6:	f1ba 0f00 	cmp.w	sl, #0
 802cffa:	fb90 f2f3 	sdiv	r2, r0, r3
 802cffe:	fb02 0013 	mls	r0, r2, r3, r0
 802d002:	da07      	bge.n	802d014 <__strftime.isra.0+0x3e8>
 802d004:	6972      	ldr	r2, [r6, #20]
 802d006:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802d00a:	429a      	cmp	r2, r3
 802d00c:	bfb8      	it	lt
 802d00e:	f04f 0a01 	movlt.w	sl, #1
 802d012:	e7de      	b.n	802cfd2 <__strftime.isra.0+0x3a6>
 802d014:	d0dd      	beq.n	802cfd2 <__strftime.isra.0+0x3a6>
 802d016:	6972      	ldr	r2, [r6, #20]
 802d018:	4b03      	ldr	r3, [pc, #12]	@ (802d028 <__strftime.isra.0+0x3fc>)
 802d01a:	429a      	cmp	r2, r3
 802d01c:	bfb8      	it	lt
 802d01e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d022:	e7d6      	b.n	802cfd2 <__strftime.isra.0+0x3a6>
 802d024:	0803bca4 	.word	0x0803bca4
 802d028:	fffff894 	.word	0xfffff894
 802d02c:	0803bac7 	.word	0x0803bac7
 802d030:	0803b9e2 	.word	0x0803b9e2
 802d034:	0803bac9 	.word	0x0803bac9
 802d038:	0803bacb 	.word	0x0803bacb
 802d03c:	0803bad9 	.word	0x0803bad9
 802d040:	0803bacf 	.word	0x0803bacf
 802d044:	0803bae2 	.word	0x0803bae2
 802d048:	0803bade 	.word	0x0803bade
 802d04c:	0803babf 	.word	0x0803babf
 802d050:	0803bab8 	.word	0x0803bab8
 802d054:	6971      	ldr	r1, [r6, #20]
 802d056:	48bc      	ldr	r0, [pc, #752]	@ (802d348 <__strftime.isra.0+0x71c>)
 802d058:	9205      	str	r2, [sp, #20]
 802d05a:	4281      	cmp	r1, r0
 802d05c:	bfac      	ite	ge
 802d05e:	2300      	movge	r3, #0
 802d060:	2301      	movlt	r3, #1
 802d062:	4630      	mov	r0, r6
 802d064:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802d068:	f7ff fd8e 	bl	802cb88 <iso_year_adjust>
 802d06c:	9904      	ldr	r1, [sp, #16]
 802d06e:	9a05      	ldr	r2, [sp, #20]
 802d070:	2900      	cmp	r1, #0
 802d072:	4682      	mov	sl, r0
 802d074:	db3a      	blt.n	802d0ec <__strftime.isra.0+0x4c0>
 802d076:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d07a:	fb91 fbfb 	sdiv	fp, r1, fp
 802d07e:	f10b 0b13 	add.w	fp, fp, #19
 802d082:	6970      	ldr	r0, [r6, #20]
 802d084:	2800      	cmp	r0, #0
 802d086:	db3e      	blt.n	802d106 <__strftime.isra.0+0x4da>
 802d088:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d08c:	f1ba 0f00 	cmp.w	sl, #0
 802d090:	fb90 fefc 	sdiv	lr, r0, ip
 802d094:	fb0c 001e 	mls	r0, ip, lr, r0
 802d098:	da4f      	bge.n	802d13a <__strftime.isra.0+0x50e>
 802d09a:	4482      	add	sl, r0
 802d09c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802d0a0:	d157      	bne.n	802d152 <__strftime.isra.0+0x526>
 802d0a2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d0a6:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802d0aa:	9b03      	ldr	r3, [sp, #12]
 802d0ac:	2164      	movs	r1, #100	@ 0x64
 802d0ae:	fb01 aa0b 	mla	sl, r1, fp, sl
 802d0b2:	2b00      	cmp	r3, #0
 802d0b4:	f040 81f7 	bne.w	802d4a6 <__strftime.isra.0+0x87a>
 802d0b8:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802d0bc:	d104      	bne.n	802d0c8 <__strftime.isra.0+0x49c>
 802d0be:	f242 710f 	movw	r1, #9999	@ 0x270f
 802d0c2:	458a      	cmp	sl, r1
 802d0c4:	f200 8275 	bhi.w	802d5b2 <__strftime.isra.0+0x986>
 802d0c8:	a906      	add	r1, sp, #24
 802d0ca:	2025      	movs	r0, #37	@ 0x25
 802d0cc:	7008      	strb	r0, [r1, #0]
 802d0ce:	f1b9 0f00 	cmp.w	r9, #0
 802d0d2:	f040 81f3 	bne.w	802d4bc <__strftime.isra.0+0x890>
 802d0d6:	1c48      	adds	r0, r1, #1
 802d0d8:	499c      	ldr	r1, [pc, #624]	@ (802d34c <__strftime.isra.0+0x720>)
 802d0da:	9203      	str	r2, [sp, #12]
 802d0dc:	f000 fdda 	bl	802dc94 <strcpy>
 802d0e0:	9a03      	ldr	r2, [sp, #12]
 802d0e2:	f8cd a000 	str.w	sl, [sp]
 802d0e6:	4613      	mov	r3, r2
 802d0e8:	aa06      	add	r2, sp, #24
 802d0ea:	e098      	b.n	802d21e <__strftime.isra.0+0x5f2>
 802d0ec:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802d0f0:	9205      	str	r2, [sp, #20]
 802d0f2:	9104      	str	r1, [sp, #16]
 802d0f4:	f000 fe6b 	bl	802ddce <abs>
 802d0f8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d0fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802d100:	fb90 fbfc 	sdiv	fp, r0, ip
 802d104:	e7bd      	b.n	802d082 <__strftime.isra.0+0x456>
 802d106:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d10a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802d10e:	f000 fe5e 	bl	802ddce <abs>
 802d112:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802d116:	f1ba 0f00 	cmp.w	sl, #0
 802d11a:	fb90 fefc 	sdiv	lr, r0, ip
 802d11e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802d122:	fb0e 001c 	mls	r0, lr, ip, r0
 802d126:	da08      	bge.n	802d13a <__strftime.isra.0+0x50e>
 802d128:	6971      	ldr	r1, [r6, #20]
 802d12a:	4b89      	ldr	r3, [pc, #548]	@ (802d350 <__strftime.isra.0+0x724>)
 802d12c:	4299      	cmp	r1, r3
 802d12e:	dab4      	bge.n	802d09a <__strftime.isra.0+0x46e>
 802d130:	f04f 0a01 	mov.w	sl, #1
 802d134:	f8cd a00c 	str.w	sl, [sp, #12]
 802d138:	e7af      	b.n	802d09a <__strftime.isra.0+0x46e>
 802d13a:	f1ba 0f00 	cmp.w	sl, #0
 802d13e:	d0ac      	beq.n	802d09a <__strftime.isra.0+0x46e>
 802d140:	4b81      	ldr	r3, [pc, #516]	@ (802d348 <__strftime.isra.0+0x71c>)
 802d142:	4299      	cmp	r1, r3
 802d144:	9b03      	ldr	r3, [sp, #12]
 802d146:	bfbc      	itt	lt
 802d148:	2301      	movlt	r3, #1
 802d14a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802d14e:	9303      	str	r3, [sp, #12]
 802d150:	e7a3      	b.n	802d09a <__strftime.isra.0+0x46e>
 802d152:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802d156:	bf04      	itt	eq
 802d158:	f10b 0b01 	addeq.w	fp, fp, #1
 802d15c:	f04f 0a00 	moveq.w	sl, #0
 802d160:	e7a3      	b.n	802d0aa <__strftime.isra.0+0x47e>
 802d162:	497c      	ldr	r1, [pc, #496]	@ (802d354 <__strftime.isra.0+0x728>)
 802d164:	4a7c      	ldr	r2, [pc, #496]	@ (802d358 <__strftime.isra.0+0x72c>)
 802d166:	68b3      	ldr	r3, [r6, #8]
 802d168:	286b      	cmp	r0, #107	@ 0x6b
 802d16a:	bf18      	it	ne
 802d16c:	460a      	movne	r2, r1
 802d16e:	e6c9      	b.n	802cf04 <__strftime.isra.0+0x2d8>
 802d170:	68b3      	ldr	r3, [r6, #8]
 802d172:	b163      	cbz	r3, 802d18e <__strftime.isra.0+0x562>
 802d174:	2b0c      	cmp	r3, #12
 802d176:	d004      	beq.n	802d182 <__strftime.isra.0+0x556>
 802d178:	210c      	movs	r1, #12
 802d17a:	fb93 f2f1 	sdiv	r2, r3, r1
 802d17e:	fb01 3312 	mls	r3, r1, r2, r3
 802d182:	4975      	ldr	r1, [pc, #468]	@ (802d358 <__strftime.isra.0+0x72c>)
 802d184:	4a73      	ldr	r2, [pc, #460]	@ (802d354 <__strftime.isra.0+0x728>)
 802d186:	2849      	cmp	r0, #73	@ 0x49
 802d188:	bf18      	it	ne
 802d18a:	460a      	movne	r2, r1
 802d18c:	e6ba      	b.n	802cf04 <__strftime.isra.0+0x2d8>
 802d18e:	230c      	movs	r3, #12
 802d190:	e7f7      	b.n	802d182 <__strftime.isra.0+0x556>
 802d192:	69f3      	ldr	r3, [r6, #28]
 802d194:	4a71      	ldr	r2, [pc, #452]	@ (802d35c <__strftime.isra.0+0x730>)
 802d196:	3301      	adds	r3, #1
 802d198:	e6b4      	b.n	802cf04 <__strftime.isra.0+0x2d8>
 802d19a:	6933      	ldr	r3, [r6, #16]
 802d19c:	3301      	adds	r3, #1
 802d19e:	e723      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d1a0:	6873      	ldr	r3, [r6, #4]
 802d1a2:	e721      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d1a4:	1e6b      	subs	r3, r5, #1
 802d1a6:	429c      	cmp	r4, r3
 802d1a8:	f4bf aed0 	bcs.w	802cf4c <__strftime.isra.0+0x320>
 802d1ac:	f104 0a01 	add.w	sl, r4, #1
 802d1b0:	230a      	movs	r3, #10
 802d1b2:	553b      	strb	r3, [r7, r4]
 802d1b4:	e5e8      	b.n	802cd88 <__strftime.isra.0+0x15c>
 802d1b6:	68b3      	ldr	r3, [r6, #8]
 802d1b8:	2b0b      	cmp	r3, #11
 802d1ba:	4b69      	ldr	r3, [pc, #420]	@ (802d360 <__strftime.isra.0+0x734>)
 802d1bc:	bfd4      	ite	le
 802d1be:	2200      	movle	r2, #0
 802d1c0:	2201      	movgt	r2, #1
 802d1c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d1c6:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802d1ca:	4658      	mov	r0, fp
 802d1cc:	f7e3 f868 	bl	80102a0 <strlen>
 802d1d0:	eb04 0a00 	add.w	sl, r4, r0
 802d1d4:	4863      	ldr	r0, [pc, #396]	@ (802d364 <__strftime.isra.0+0x738>)
 802d1d6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802d1da:	1e69      	subs	r1, r5, #1
 802d1dc:	45a2      	cmp	sl, r4
 802d1de:	f43f add3 	beq.w	802cd88 <__strftime.isra.0+0x15c>
 802d1e2:	42a1      	cmp	r1, r4
 802d1e4:	f67f aeb2 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802d1e8:	f898 2000 	ldrb.w	r2, [r8]
 802d1ec:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802d1f0:	2a50      	cmp	r2, #80	@ 0x50
 802d1f2:	d106      	bne.n	802d202 <__strftime.isra.0+0x5d6>
 802d1f4:	5cc2      	ldrb	r2, [r0, r3]
 802d1f6:	f002 0203 	and.w	r2, r2, #3
 802d1fa:	2a01      	cmp	r2, #1
 802d1fc:	bf08      	it	eq
 802d1fe:	3320      	addeq	r3, #32
 802d200:	b2db      	uxtb	r3, r3
 802d202:	553b      	strb	r3, [r7, r4]
 802d204:	3401      	adds	r4, #1
 802d206:	e7e9      	b.n	802d1dc <__strftime.isra.0+0x5b0>
 802d208:	2203      	movs	r2, #3
 802d20a:	6933      	ldr	r3, [r6, #16]
 802d20c:	fb93 f3f2 	sdiv	r3, r3, r2
 802d210:	4a55      	ldr	r2, [pc, #340]	@ (802d368 <__strftime.isra.0+0x73c>)
 802d212:	3301      	adds	r3, #1
 802d214:	e676      	b.n	802cf04 <__strftime.isra.0+0x2d8>
 802d216:	6873      	ldr	r3, [r6, #4]
 802d218:	9300      	str	r3, [sp, #0]
 802d21a:	68b3      	ldr	r3, [r6, #8]
 802d21c:	4a53      	ldr	r2, [pc, #332]	@ (802d36c <__strftime.isra.0+0x740>)
 802d21e:	1b29      	subs	r1, r5, r4
 802d220:	1938      	adds	r0, r7, r4
 802d222:	f001 fff9 	bl	802f218 <sniprintf>
 802d226:	e68a      	b.n	802cf3e <__strftime.isra.0+0x312>
 802d228:	6a33      	ldr	r3, [r6, #32]
 802d22a:	2b00      	cmp	r3, #0
 802d22c:	db78      	blt.n	802d320 <__strftime.isra.0+0x6f4>
 802d22e:	f000 fa7b 	bl	802d728 <__tz_lock>
 802d232:	9b02      	ldr	r3, [sp, #8]
 802d234:	b90b      	cbnz	r3, 802d23a <__strftime.isra.0+0x60e>
 802d236:	f000 fa83 	bl	802d740 <_tzset_unlocked>
 802d23a:	f007 fe73 	bl	8034f24 <__gettzinfo>
 802d23e:	6a33      	ldr	r3, [r6, #32]
 802d240:	2b00      	cmp	r3, #0
 802d242:	bfd4      	ite	le
 802d244:	2200      	movle	r2, #0
 802d246:	2201      	movgt	r2, #1
 802d248:	2328      	movs	r3, #40	@ 0x28
 802d24a:	fb02 3303 	mla	r3, r2, r3, r3
 802d24e:	58c3      	ldr	r3, [r0, r3]
 802d250:	f1c3 0a00 	rsb	sl, r3, #0
 802d254:	f000 fa6e 	bl	802d734 <__tz_unlock>
 802d258:	2301      	movs	r3, #1
 802d25a:	9302      	str	r3, [sp, #8]
 802d25c:	6972      	ldr	r2, [r6, #20]
 802d25e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802d262:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802d266:	f16c 0c00 	sbc.w	ip, ip, #0
 802d26a:	f1bc 0f00 	cmp.w	ip, #0
 802d26e:	eba5 0104 	sub.w	r1, r5, r4
 802d272:	eb07 0004 	add.w	r0, r7, r4
 802d276:	da02      	bge.n	802d27e <__strftime.isra.0+0x652>
 802d278:	3303      	adds	r3, #3
 802d27a:	f14c 0c00 	adc.w	ip, ip, #0
 802d27e:	089b      	lsrs	r3, r3, #2
 802d280:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802d284:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802d288:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802d28c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802d290:	fb9e fefb 	sdiv	lr, lr, fp
 802d294:	ebb3 030e 	subs.w	r3, r3, lr
 802d298:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802d29c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802d2a0:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802d2a4:	fb9e fefb 	sdiv	lr, lr, fp
 802d2a8:	eb13 030e 	adds.w	r3, r3, lr
 802d2ac:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802d2b0:	3a46      	subs	r2, #70	@ 0x46
 802d2b2:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802d2b6:	fb0e f202 	mul.w	r2, lr, r2
 802d2ba:	189b      	adds	r3, r3, r2
 802d2bc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d2c0:	69f2      	ldr	r2, [r6, #28]
 802d2c2:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802d2c6:	189b      	adds	r3, r3, r2
 802d2c8:	f04f 0e18 	mov.w	lr, #24
 802d2cc:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802d2d0:	fba3 230e 	umull	r2, r3, r3, lr
 802d2d4:	fb0e 330c 	mla	r3, lr, ip, r3
 802d2d8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802d2dc:	eb12 020c 	adds.w	r2, r2, ip
 802d2e0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d2e4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802d2e8:	fba2 2e0c 	umull	r2, lr, r2, ip
 802d2ec:	fb0c ee03 	mla	lr, ip, r3, lr
 802d2f0:	eb12 030b 	adds.w	r3, r2, fp
 802d2f4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802d2f8:	fba3 e30c 	umull	lr, r3, r3, ip
 802d2fc:	fb0c 3302 	mla	r3, ip, r2, r3
 802d300:	f8d6 c000 	ldr.w	ip, [r6]
 802d304:	eb1e 020c 	adds.w	r2, lr, ip
 802d308:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802d30c:	ebb2 020a 	subs.w	r2, r2, sl
 802d310:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802d314:	e9cd 2300 	strd	r2, r3, [sp]
 802d318:	4a15      	ldr	r2, [pc, #84]	@ (802d370 <__strftime.isra.0+0x744>)
 802d31a:	f001 ff7d 	bl	802f218 <sniprintf>
 802d31e:	e60e      	b.n	802cf3e <__strftime.isra.0+0x312>
 802d320:	f04f 0a00 	mov.w	sl, #0
 802d324:	e79a      	b.n	802d25c <__strftime.isra.0+0x630>
 802d326:	6833      	ldr	r3, [r6, #0]
 802d328:	e65e      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d32a:	1e6b      	subs	r3, r5, #1
 802d32c:	429c      	cmp	r4, r3
 802d32e:	f4bf ae0d 	bcs.w	802cf4c <__strftime.isra.0+0x320>
 802d332:	f104 0a01 	add.w	sl, r4, #1
 802d336:	2309      	movs	r3, #9
 802d338:	e73b      	b.n	802d1b2 <__strftime.isra.0+0x586>
 802d33a:	6833      	ldr	r3, [r6, #0]
 802d33c:	9301      	str	r3, [sp, #4]
 802d33e:	6873      	ldr	r3, [r6, #4]
 802d340:	9300      	str	r3, [sp, #0]
 802d342:	68b3      	ldr	r3, [r6, #8]
 802d344:	4a0b      	ldr	r2, [pc, #44]	@ (802d374 <__strftime.isra.0+0x748>)
 802d346:	e5d1      	b.n	802ceec <__strftime.isra.0+0x2c0>
 802d348:	fffff894 	.word	0xfffff894
 802d34c:	0803baea 	.word	0x0803baea
 802d350:	fffff895 	.word	0xfffff895
 802d354:	0803bad9 	.word	0x0803bad9
 802d358:	0803bacb 	.word	0x0803bacb
 802d35c:	0803baee 	.word	0x0803baee
 802d360:	0803bca4 	.word	0x0803bca4
 802d364:	0803bda1 	.word	0x0803bda1
 802d368:	0803baf3 	.word	0x0803baf3
 802d36c:	0803bb02 	.word	0x0803bb02
 802d370:	0803baf8 	.word	0x0803baf8
 802d374:	0803bafd 	.word	0x0803bafd
 802d378:	1e6b      	subs	r3, r5, #1
 802d37a:	429c      	cmp	r4, r3
 802d37c:	f4bf ade6 	bcs.w	802cf4c <__strftime.isra.0+0x320>
 802d380:	69b3      	ldr	r3, [r6, #24]
 802d382:	b91b      	cbnz	r3, 802d38c <__strftime.isra.0+0x760>
 802d384:	2337      	movs	r3, #55	@ 0x37
 802d386:	f104 0a01 	add.w	sl, r4, #1
 802d38a:	e712      	b.n	802d1b2 <__strftime.isra.0+0x586>
 802d38c:	3330      	adds	r3, #48	@ 0x30
 802d38e:	b2db      	uxtb	r3, r3
 802d390:	e7f9      	b.n	802d386 <__strftime.isra.0+0x75a>
 802d392:	69f3      	ldr	r3, [r6, #28]
 802d394:	69b2      	ldr	r2, [r6, #24]
 802d396:	3307      	adds	r3, #7
 802d398:	1a9b      	subs	r3, r3, r2
 802d39a:	2207      	movs	r2, #7
 802d39c:	fb93 f3f2 	sdiv	r3, r3, r2
 802d3a0:	e622      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d3a2:	4630      	mov	r0, r6
 802d3a4:	f7ff fbf0 	bl	802cb88 <iso_year_adjust>
 802d3a8:	69b2      	ldr	r2, [r6, #24]
 802d3aa:	b132      	cbz	r2, 802d3ba <__strftime.isra.0+0x78e>
 802d3ac:	3a01      	subs	r2, #1
 802d3ae:	2800      	cmp	r0, #0
 802d3b0:	69f3      	ldr	r3, [r6, #28]
 802d3b2:	dc26      	bgt.n	802d402 <__strftime.isra.0+0x7d6>
 802d3b4:	d103      	bne.n	802d3be <__strftime.isra.0+0x792>
 802d3b6:	330a      	adds	r3, #10
 802d3b8:	e7ee      	b.n	802d398 <__strftime.isra.0+0x76c>
 802d3ba:	2206      	movs	r2, #6
 802d3bc:	e7f7      	b.n	802d3ae <__strftime.isra.0+0x782>
 802d3be:	1ad2      	subs	r2, r2, r3
 802d3c0:	6973      	ldr	r3, [r6, #20]
 802d3c2:	2b00      	cmp	r3, #0
 802d3c4:	f240 716b 	movw	r1, #1899	@ 0x76b
 802d3c8:	bfa8      	it	ge
 802d3ca:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802d3ce:	440b      	add	r3, r1
 802d3d0:	0799      	lsls	r1, r3, #30
 802d3d2:	d105      	bne.n	802d3e0 <__strftime.isra.0+0x7b4>
 802d3d4:	2064      	movs	r0, #100	@ 0x64
 802d3d6:	fb93 f1f0 	sdiv	r1, r3, r0
 802d3da:	fb00 3111 	mls	r1, r0, r1, r3
 802d3de:	b971      	cbnz	r1, 802d3fe <__strftime.isra.0+0x7d2>
 802d3e0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802d3e4:	fb93 f0f1 	sdiv	r0, r3, r1
 802d3e8:	fb01 3310 	mls	r3, r1, r0, r3
 802d3ec:	fab3 f383 	clz	r3, r3
 802d3f0:	095b      	lsrs	r3, r3, #5
 802d3f2:	1ad2      	subs	r2, r2, r3
 802d3f4:	2a04      	cmp	r2, #4
 802d3f6:	bfcc      	ite	gt
 802d3f8:	2334      	movgt	r3, #52	@ 0x34
 802d3fa:	2335      	movle	r3, #53	@ 0x35
 802d3fc:	e5f4      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d3fe:	2301      	movs	r3, #1
 802d400:	e7f7      	b.n	802d3f2 <__strftime.isra.0+0x7c6>
 802d402:	2301      	movs	r3, #1
 802d404:	e5f0      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d406:	496c      	ldr	r1, [pc, #432]	@ (802d5b8 <__strftime.isra.0+0x98c>)
 802d408:	9203      	str	r2, [sp, #12]
 802d40a:	a806      	add	r0, sp, #24
 802d40c:	f000 fc42 	bl	802dc94 <strcpy>
 802d410:	a806      	add	r0, sp, #24
 802d412:	f7e2 ff45 	bl	80102a0 <strlen>
 802d416:	ab06      	add	r3, sp, #24
 802d418:	eb03 0a00 	add.w	sl, r3, r0
 802d41c:	f10a 0a01 	add.w	sl, sl, #1
 802d420:	46d3      	mov	fp, sl
 802d422:	f1b9 0f00 	cmp.w	r9, #0
 802d426:	d009      	beq.n	802d43c <__strftime.isra.0+0x810>
 802d428:	9a03      	ldr	r2, [sp, #12]
 802d42a:	f803 9000 	strb.w	r9, [r3, r0]
 802d42e:	2a05      	cmp	r2, #5
 802d430:	d901      	bls.n	802d436 <__strftime.isra.0+0x80a>
 802d432:	1f93      	subs	r3, r2, #6
 802d434:	d106      	bne.n	802d444 <__strftime.isra.0+0x818>
 802d436:	4961      	ldr	r1, [pc, #388]	@ (802d5bc <__strftime.isra.0+0x990>)
 802d438:	4658      	mov	r0, fp
 802d43a:	e5a6      	b.n	802cf8a <__strftime.isra.0+0x35e>
 802d43c:	aa06      	add	r2, sp, #24
 802d43e:	232b      	movs	r3, #43	@ 0x2b
 802d440:	5413      	strb	r3, [r2, r0]
 802d442:	2304      	movs	r3, #4
 802d444:	a90e      	add	r1, sp, #56	@ 0x38
 802d446:	4a5e      	ldr	r2, [pc, #376]	@ (802d5c0 <__strftime.isra.0+0x994>)
 802d448:	eba1 010a 	sub.w	r1, r1, sl
 802d44c:	4650      	mov	r0, sl
 802d44e:	f001 fee3 	bl	802f218 <sniprintf>
 802d452:	2800      	cmp	r0, #0
 802d454:	bfc8      	it	gt
 802d456:	eb0a 0b00 	addgt.w	fp, sl, r0
 802d45a:	e7ec      	b.n	802d436 <__strftime.isra.0+0x80a>
 802d45c:	1e6b      	subs	r3, r5, #1
 802d45e:	429c      	cmp	r4, r3
 802d460:	f4bf ad74 	bcs.w	802cf4c <__strftime.isra.0+0x320>
 802d464:	69b3      	ldr	r3, [r6, #24]
 802d466:	f104 0a01 	add.w	sl, r4, #1
 802d46a:	3330      	adds	r3, #48	@ 0x30
 802d46c:	e6a1      	b.n	802d1b2 <__strftime.isra.0+0x586>
 802d46e:	69b2      	ldr	r2, [r6, #24]
 802d470:	b11a      	cbz	r2, 802d47a <__strftime.isra.0+0x84e>
 802d472:	3a01      	subs	r2, #1
 802d474:	69f3      	ldr	r3, [r6, #28]
 802d476:	3307      	adds	r3, #7
 802d478:	e78e      	b.n	802d398 <__strftime.isra.0+0x76c>
 802d47a:	2206      	movs	r2, #6
 802d47c:	e7fa      	b.n	802d474 <__strftime.isra.0+0x848>
 802d47e:	6970      	ldr	r0, [r6, #20]
 802d480:	2800      	cmp	r0, #0
 802d482:	db05      	blt.n	802d490 <__strftime.isra.0+0x864>
 802d484:	2364      	movs	r3, #100	@ 0x64
 802d486:	fb90 f2f3 	sdiv	r2, r0, r3
 802d48a:	fb02 0313 	mls	r3, r2, r3, r0
 802d48e:	e5ab      	b.n	802cfe8 <__strftime.isra.0+0x3bc>
 802d490:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802d494:	f000 fc9b 	bl	802ddce <abs>
 802d498:	e7f4      	b.n	802d484 <__strftime.isra.0+0x858>
 802d49a:	6971      	ldr	r1, [r6, #20]
 802d49c:	4849      	ldr	r0, [pc, #292]	@ (802d5c4 <__strftime.isra.0+0x998>)
 802d49e:	4281      	cmp	r1, r0
 802d4a0:	da09      	bge.n	802d4b6 <__strftime.isra.0+0x88a>
 802d4a2:	eba0 0a01 	sub.w	sl, r0, r1
 802d4a6:	212d      	movs	r1, #45	@ 0x2d
 802d4a8:	f88d 1018 	strb.w	r1, [sp, #24]
 802d4ac:	b102      	cbz	r2, 802d4b0 <__strftime.isra.0+0x884>
 802d4ae:	3a01      	subs	r2, #1
 802d4b0:	f10d 0119 	add.w	r1, sp, #25
 802d4b4:	e609      	b.n	802d0ca <__strftime.isra.0+0x49e>
 802d4b6:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802d4ba:	e5fd      	b.n	802d0b8 <__strftime.isra.0+0x48c>
 802d4bc:	2330      	movs	r3, #48	@ 0x30
 802d4be:	1c88      	adds	r0, r1, #2
 802d4c0:	704b      	strb	r3, [r1, #1]
 802d4c2:	e609      	b.n	802d0d8 <__strftime.isra.0+0x4ac>
 802d4c4:	6a33      	ldr	r3, [r6, #32]
 802d4c6:	2b00      	cmp	r3, #0
 802d4c8:	da01      	bge.n	802d4ce <__strftime.isra.0+0x8a2>
 802d4ca:	46a2      	mov	sl, r4
 802d4cc:	e45c      	b.n	802cd88 <__strftime.isra.0+0x15c>
 802d4ce:	f000 f92b 	bl	802d728 <__tz_lock>
 802d4d2:	9b02      	ldr	r3, [sp, #8]
 802d4d4:	b90b      	cbnz	r3, 802d4da <__strftime.isra.0+0x8ae>
 802d4d6:	f000 f933 	bl	802d740 <_tzset_unlocked>
 802d4da:	f007 fd23 	bl	8034f24 <__gettzinfo>
 802d4de:	6a33      	ldr	r3, [r6, #32]
 802d4e0:	2b00      	cmp	r3, #0
 802d4e2:	bfd4      	ite	le
 802d4e4:	2200      	movle	r2, #0
 802d4e6:	2201      	movgt	r2, #1
 802d4e8:	2328      	movs	r3, #40	@ 0x28
 802d4ea:	fb02 3303 	mla	r3, r2, r3, r3
 802d4ee:	eb07 0a04 	add.w	sl, r7, r4
 802d4f2:	58c3      	ldr	r3, [r0, r3]
 802d4f4:	f1c3 0900 	rsb	r9, r3, #0
 802d4f8:	f000 f91c 	bl	802d734 <__tz_unlock>
 802d4fc:	233c      	movs	r3, #60	@ 0x3c
 802d4fe:	fb99 f0f3 	sdiv	r0, r9, r3
 802d502:	f001 fbfe 	bl	802ed02 <labs>
 802d506:	233c      	movs	r3, #60	@ 0x3c
 802d508:	eba5 0b04 	sub.w	fp, r5, r4
 802d50c:	fb90 f2f3 	sdiv	r2, r0, r3
 802d510:	fb02 0013 	mls	r0, r2, r3, r0
 802d514:	9000      	str	r0, [sp, #0]
 802d516:	4a2c      	ldr	r2, [pc, #176]	@ (802d5c8 <__strftime.isra.0+0x99c>)
 802d518:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802d51c:	4659      	mov	r1, fp
 802d51e:	4650      	mov	r0, sl
 802d520:	fb99 f3f3 	sdiv	r3, r9, r3
 802d524:	f001 fe78 	bl	802f218 <sniprintf>
 802d528:	2800      	cmp	r0, #0
 802d52a:	f6ff ad0f 	blt.w	802cf4c <__strftime.isra.0+0x320>
 802d52e:	eb00 0a04 	add.w	sl, r0, r4
 802d532:	4555      	cmp	r5, sl
 802d534:	f67f ad0a 	bls.w	802cf4c <__strftime.isra.0+0x320>
 802d538:	2301      	movs	r3, #1
 802d53a:	9302      	str	r3, [sp, #8]
 802d53c:	e424      	b.n	802cd88 <__strftime.isra.0+0x15c>
 802d53e:	6a33      	ldr	r3, [r6, #32]
 802d540:	2b00      	cmp	r3, #0
 802d542:	dbc2      	blt.n	802d4ca <__strftime.isra.0+0x89e>
 802d544:	f000 f8f0 	bl	802d728 <__tz_lock>
 802d548:	9b02      	ldr	r3, [sp, #8]
 802d54a:	b90b      	cbnz	r3, 802d550 <__strftime.isra.0+0x924>
 802d54c:	f000 f8f8 	bl	802d740 <_tzset_unlocked>
 802d550:	6a33      	ldr	r3, [r6, #32]
 802d552:	4a1e      	ldr	r2, [pc, #120]	@ (802d5cc <__strftime.isra.0+0x9a0>)
 802d554:	2b00      	cmp	r3, #0
 802d556:	bfd4      	ite	le
 802d558:	2300      	movle	r3, #0
 802d55a:	2301      	movgt	r3, #1
 802d55c:	46a2      	mov	sl, r4
 802d55e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802d562:	4648      	mov	r0, r9
 802d564:	f7e2 fe9c 	bl	80102a0 <strlen>
 802d568:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802d56c:	4420      	add	r0, r4
 802d56e:	1e6b      	subs	r3, r5, #1
 802d570:	4550      	cmp	r0, sl
 802d572:	d102      	bne.n	802d57a <__strftime.isra.0+0x94e>
 802d574:	f000 f8de 	bl	802d734 <__tz_unlock>
 802d578:	e7de      	b.n	802d538 <__strftime.isra.0+0x90c>
 802d57a:	4553      	cmp	r3, sl
 802d57c:	d906      	bls.n	802d58c <__strftime.isra.0+0x960>
 802d57e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802d582:	f807 200a 	strb.w	r2, [r7, sl]
 802d586:	f10a 0a01 	add.w	sl, sl, #1
 802d58a:	e7f1      	b.n	802d570 <__strftime.isra.0+0x944>
 802d58c:	f000 f8d2 	bl	802d734 <__tz_unlock>
 802d590:	e4dc      	b.n	802cf4c <__strftime.isra.0+0x320>
 802d592:	1e6b      	subs	r3, r5, #1
 802d594:	429c      	cmp	r4, r3
 802d596:	f4bf acd9 	bcs.w	802cf4c <__strftime.isra.0+0x320>
 802d59a:	f104 0a01 	add.w	sl, r4, #1
 802d59e:	2325      	movs	r3, #37	@ 0x25
 802d5a0:	e607      	b.n	802d1b2 <__strftime.isra.0+0x586>
 802d5a2:	46a2      	mov	sl, r4
 802d5a4:	2d00      	cmp	r5, #0
 802d5a6:	f43f acd3 	beq.w	802cf50 <__strftime.isra.0+0x324>
 802d5aa:	2300      	movs	r3, #0
 802d5ac:	f807 300a 	strb.w	r3, [r7, sl]
 802d5b0:	e4ce      	b.n	802cf50 <__strftime.isra.0+0x324>
 802d5b2:	4649      	mov	r1, r9
 802d5b4:	e778      	b.n	802d4a8 <__strftime.isra.0+0x87c>
 802d5b6:	bf00      	nop
 802d5b8:	0803bb0c 	.word	0x0803bb0c
 802d5bc:	0803bc74 	.word	0x0803bc74
 802d5c0:	0803bade 	.word	0x0803bade
 802d5c4:	fffff894 	.word	0xfffff894
 802d5c8:	0803bb14 	.word	0x0803bb14
 802d5cc:	20000164 	.word	0x20000164

0802d5d0 <strftime>:
 802d5d0:	f7ff bb2c 	b.w	802cc2c <__strftime.isra.0>

0802d5d4 <__tzcalc_limits>:
 802d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d5d8:	4604      	mov	r4, r0
 802d5da:	f007 fca3 	bl	8034f24 <__gettzinfo>
 802d5de:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802d5e2:	429c      	cmp	r4, r3
 802d5e4:	f340 8099 	ble.w	802d71a <__tzcalc_limits+0x146>
 802d5e8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802d5ec:	19e5      	adds	r5, r4, r7
 802d5ee:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802d5f2:	f240 126d 	movw	r2, #365	@ 0x16d
 802d5f6:	10ad      	asrs	r5, r5, #2
 802d5f8:	fb02 5503 	mla	r5, r2, r3, r5
 802d5fc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802d600:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802d604:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802d608:	4f45      	ldr	r7, [pc, #276]	@ (802d720 <__tzcalc_limits+0x14c>)
 802d60a:	fb93 f3f2 	sdiv	r3, r3, r2
 802d60e:	441d      	add	r5, r3
 802d610:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802d614:	eb04 030c 	add.w	r3, r4, ip
 802d618:	6044      	str	r4, [r0, #4]
 802d61a:	fbb3 f3f2 	udiv	r3, r3, r2
 802d61e:	4601      	mov	r1, r0
 802d620:	441d      	add	r5, r3
 802d622:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802d626:	7a0b      	ldrb	r3, [r1, #8]
 802d628:	694a      	ldr	r2, [r1, #20]
 802d62a:	2b4a      	cmp	r3, #74	@ 0x4a
 802d62c:	d133      	bne.n	802d696 <__tzcalc_limits+0xc2>
 802d62e:	07a6      	lsls	r6, r4, #30
 802d630:	eb05 0302 	add.w	r3, r5, r2
 802d634:	d106      	bne.n	802d644 <__tzcalc_limits+0x70>
 802d636:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802d63a:	fb94 f6fe 	sdiv	r6, r4, lr
 802d63e:	fb0e 4616 	mls	r6, lr, r6, r4
 802d642:	b936      	cbnz	r6, 802d652 <__tzcalc_limits+0x7e>
 802d644:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802d648:	fb94 f6fe 	sdiv	r6, r4, lr
 802d64c:	fb0e 4616 	mls	r6, lr, r6, r4
 802d650:	b9fe      	cbnz	r6, 802d692 <__tzcalc_limits+0xbe>
 802d652:	2a3b      	cmp	r2, #59	@ 0x3b
 802d654:	bfd4      	ite	le
 802d656:	2200      	movle	r2, #0
 802d658:	2201      	movgt	r2, #1
 802d65a:	4413      	add	r3, r2
 802d65c:	3b01      	subs	r3, #1
 802d65e:	698a      	ldr	r2, [r1, #24]
 802d660:	17d6      	asrs	r6, r2, #31
 802d662:	fbc3 2607 	smlal	r2, r6, r3, r7
 802d666:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802d668:	18d2      	adds	r2, r2, r3
 802d66a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802d66e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802d672:	3128      	adds	r1, #40	@ 0x28
 802d674:	458c      	cmp	ip, r1
 802d676:	d1d6      	bne.n	802d626 <__tzcalc_limits+0x52>
 802d678:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802d67c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802d680:	428c      	cmp	r4, r1
 802d682:	4193      	sbcs	r3, r2
 802d684:	bfb4      	ite	lt
 802d686:	2301      	movlt	r3, #1
 802d688:	2300      	movge	r3, #0
 802d68a:	6003      	str	r3, [r0, #0]
 802d68c:	2001      	movs	r0, #1
 802d68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d692:	2200      	movs	r2, #0
 802d694:	e7e1      	b.n	802d65a <__tzcalc_limits+0x86>
 802d696:	2b44      	cmp	r3, #68	@ 0x44
 802d698:	d101      	bne.n	802d69e <__tzcalc_limits+0xca>
 802d69a:	18ab      	adds	r3, r5, r2
 802d69c:	e7df      	b.n	802d65e <__tzcalc_limits+0x8a>
 802d69e:	07a3      	lsls	r3, r4, #30
 802d6a0:	d105      	bne.n	802d6ae <__tzcalc_limits+0xda>
 802d6a2:	2664      	movs	r6, #100	@ 0x64
 802d6a4:	fb94 f3f6 	sdiv	r3, r4, r6
 802d6a8:	fb06 4313 	mls	r3, r6, r3, r4
 802d6ac:	bb7b      	cbnz	r3, 802d70e <__tzcalc_limits+0x13a>
 802d6ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802d6b2:	fb94 f6f3 	sdiv	r6, r4, r3
 802d6b6:	fb03 4616 	mls	r6, r3, r6, r4
 802d6ba:	fab6 f686 	clz	r6, r6
 802d6be:	0976      	lsrs	r6, r6, #5
 802d6c0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802d724 <__tzcalc_limits+0x150>
 802d6c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802d6c8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802d6cc:	462b      	mov	r3, r5
 802d6ce:	f04f 0800 	mov.w	r8, #0
 802d6d2:	fb0a e606 	mla	r6, sl, r6, lr
 802d6d6:	f108 0801 	add.w	r8, r8, #1
 802d6da:	45c1      	cmp	r9, r8
 802d6dc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802d6e0:	dc17      	bgt.n	802d712 <__tzcalc_limits+0x13e>
 802d6e2:	f103 0804 	add.w	r8, r3, #4
 802d6e6:	2607      	movs	r6, #7
 802d6e8:	fb98 f6f6 	sdiv	r6, r8, r6
 802d6ec:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d6f0:	eba8 0606 	sub.w	r6, r8, r6
 802d6f4:	1b92      	subs	r2, r2, r6
 802d6f6:	690e      	ldr	r6, [r1, #16]
 802d6f8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802d6fc:	bf48      	it	mi
 802d6fe:	3207      	addmi	r2, #7
 802d700:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802d704:	4432      	add	r2, r6
 802d706:	4572      	cmp	r2, lr
 802d708:	da05      	bge.n	802d716 <__tzcalc_limits+0x142>
 802d70a:	4413      	add	r3, r2
 802d70c:	e7a7      	b.n	802d65e <__tzcalc_limits+0x8a>
 802d70e:	2601      	movs	r6, #1
 802d710:	e7d6      	b.n	802d6c0 <__tzcalc_limits+0xec>
 802d712:	4473      	add	r3, lr
 802d714:	e7df      	b.n	802d6d6 <__tzcalc_limits+0x102>
 802d716:	3a07      	subs	r2, #7
 802d718:	e7f5      	b.n	802d706 <__tzcalc_limits+0x132>
 802d71a:	2000      	movs	r0, #0
 802d71c:	e7b7      	b.n	802d68e <__tzcalc_limits+0xba>
 802d71e:	bf00      	nop
 802d720:	00015180 	.word	0x00015180
 802d724:	0803ba54 	.word	0x0803ba54

0802d728 <__tz_lock>:
 802d728:	4801      	ldr	r0, [pc, #4]	@ (802d730 <__tz_lock+0x8>)
 802d72a:	f000 bae1 	b.w	802dcf0 <__retarget_lock_acquire>
 802d72e:	bf00      	nop
 802d730:	2001a048 	.word	0x2001a048

0802d734 <__tz_unlock>:
 802d734:	4801      	ldr	r0, [pc, #4]	@ (802d73c <__tz_unlock+0x8>)
 802d736:	f000 badd 	b.w	802dcf4 <__retarget_lock_release>
 802d73a:	bf00      	nop
 802d73c:	2001a048 	.word	0x2001a048

0802d740 <_tzset_unlocked>:
 802d740:	4b01      	ldr	r3, [pc, #4]	@ (802d748 <_tzset_unlocked+0x8>)
 802d742:	6818      	ldr	r0, [r3, #0]
 802d744:	f000 b802 	b.w	802d74c <_tzset_unlocked_r>
 802d748:	200002d8 	.word	0x200002d8

0802d74c <_tzset_unlocked_r>:
 802d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d750:	b08d      	sub	sp, #52	@ 0x34
 802d752:	4607      	mov	r7, r0
 802d754:	f007 fbe6 	bl	8034f24 <__gettzinfo>
 802d758:	49bc      	ldr	r1, [pc, #752]	@ (802da4c <_tzset_unlocked_r+0x300>)
 802d75a:	4dbd      	ldr	r5, [pc, #756]	@ (802da50 <_tzset_unlocked_r+0x304>)
 802d75c:	4604      	mov	r4, r0
 802d75e:	4638      	mov	r0, r7
 802d760:	f001 fac8 	bl	802ecf4 <_getenv_r>
 802d764:	4606      	mov	r6, r0
 802d766:	bb10      	cbnz	r0, 802d7ae <_tzset_unlocked_r+0x62>
 802d768:	4bba      	ldr	r3, [pc, #744]	@ (802da54 <_tzset_unlocked_r+0x308>)
 802d76a:	4abb      	ldr	r2, [pc, #748]	@ (802da58 <_tzset_unlocked_r+0x30c>)
 802d76c:	6018      	str	r0, [r3, #0]
 802d76e:	4bbb      	ldr	r3, [pc, #748]	@ (802da5c <_tzset_unlocked_r+0x310>)
 802d770:	62a0      	str	r0, [r4, #40]	@ 0x28
 802d772:	6018      	str	r0, [r3, #0]
 802d774:	4bba      	ldr	r3, [pc, #744]	@ (802da60 <_tzset_unlocked_r+0x314>)
 802d776:	6520      	str	r0, [r4, #80]	@ 0x50
 802d778:	e9c3 2200 	strd	r2, r2, [r3]
 802d77c:	214a      	movs	r1, #74	@ 0x4a
 802d77e:	2200      	movs	r2, #0
 802d780:	2300      	movs	r3, #0
 802d782:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802d786:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802d78a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802d78e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802d792:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802d796:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802d79a:	6828      	ldr	r0, [r5, #0]
 802d79c:	7221      	strb	r1, [r4, #8]
 802d79e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802d7a2:	f001 fabb 	bl	802ed1c <free>
 802d7a6:	602e      	str	r6, [r5, #0]
 802d7a8:	b00d      	add	sp, #52	@ 0x34
 802d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d7ae:	6829      	ldr	r1, [r5, #0]
 802d7b0:	2900      	cmp	r1, #0
 802d7b2:	f040 808e 	bne.w	802d8d2 <_tzset_unlocked_r+0x186>
 802d7b6:	6828      	ldr	r0, [r5, #0]
 802d7b8:	f001 fab0 	bl	802ed1c <free>
 802d7bc:	4630      	mov	r0, r6
 802d7be:	f7e2 fd6f 	bl	80102a0 <strlen>
 802d7c2:	1c41      	adds	r1, r0, #1
 802d7c4:	4638      	mov	r0, r7
 802d7c6:	f001 fab1 	bl	802ed2c <_malloc_r>
 802d7ca:	6028      	str	r0, [r5, #0]
 802d7cc:	2800      	cmp	r0, #0
 802d7ce:	f040 8086 	bne.w	802d8de <_tzset_unlocked_r+0x192>
 802d7d2:	4aa2      	ldr	r2, [pc, #648]	@ (802da5c <_tzset_unlocked_r+0x310>)
 802d7d4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802da60 <_tzset_unlocked_r+0x314>
 802d7d8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802da54 <_tzset_unlocked_r+0x308>
 802d7dc:	2300      	movs	r3, #0
 802d7de:	6013      	str	r3, [r2, #0]
 802d7e0:	4aa0      	ldr	r2, [pc, #640]	@ (802da64 <_tzset_unlocked_r+0x318>)
 802d7e2:	f8ca 3000 	str.w	r3, [sl]
 802d7e6:	2000      	movs	r0, #0
 802d7e8:	2100      	movs	r1, #0
 802d7ea:	e9c8 2200 	strd	r2, r2, [r8]
 802d7ee:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802d7f2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802d7f6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802d7fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802d7fe:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802d802:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802d806:	224a      	movs	r2, #74	@ 0x4a
 802d808:	7222      	strb	r2, [r4, #8]
 802d80a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802d80c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802d810:	6523      	str	r3, [r4, #80]	@ 0x50
 802d812:	7833      	ldrb	r3, [r6, #0]
 802d814:	2b3a      	cmp	r3, #58	@ 0x3a
 802d816:	bf08      	it	eq
 802d818:	3601      	addeq	r6, #1
 802d81a:	7833      	ldrb	r3, [r6, #0]
 802d81c:	2b3c      	cmp	r3, #60	@ 0x3c
 802d81e:	d162      	bne.n	802d8e6 <_tzset_unlocked_r+0x19a>
 802d820:	1c75      	adds	r5, r6, #1
 802d822:	4a91      	ldr	r2, [pc, #580]	@ (802da68 <_tzset_unlocked_r+0x31c>)
 802d824:	4991      	ldr	r1, [pc, #580]	@ (802da6c <_tzset_unlocked_r+0x320>)
 802d826:	ab0a      	add	r3, sp, #40	@ 0x28
 802d828:	4628      	mov	r0, r5
 802d82a:	f001 fccb 	bl	802f1c4 <siscanf>
 802d82e:	2800      	cmp	r0, #0
 802d830:	ddba      	ble.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d834:	1eda      	subs	r2, r3, #3
 802d836:	2a07      	cmp	r2, #7
 802d838:	d8b6      	bhi.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d83a:	5ceb      	ldrb	r3, [r5, r3]
 802d83c:	2b3e      	cmp	r3, #62	@ 0x3e
 802d83e:	d1b3      	bne.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d840:	3602      	adds	r6, #2
 802d842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d844:	18f5      	adds	r5, r6, r3
 802d846:	5cf3      	ldrb	r3, [r6, r3]
 802d848:	2b2d      	cmp	r3, #45	@ 0x2d
 802d84a:	d15a      	bne.n	802d902 <_tzset_unlocked_r+0x1b6>
 802d84c:	3501      	adds	r5, #1
 802d84e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d852:	2300      	movs	r3, #0
 802d854:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d858:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d85c:	af08      	add	r7, sp, #32
 802d85e:	ab0a      	add	r3, sp, #40	@ 0x28
 802d860:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802d864:	9303      	str	r3, [sp, #12]
 802d866:	f10d 031e 	add.w	r3, sp, #30
 802d86a:	9300      	str	r3, [sp, #0]
 802d86c:	4980      	ldr	r1, [pc, #512]	@ (802da70 <_tzset_unlocked_r+0x324>)
 802d86e:	ab0a      	add	r3, sp, #40	@ 0x28
 802d870:	aa07      	add	r2, sp, #28
 802d872:	4628      	mov	r0, r5
 802d874:	f001 fca6 	bl	802f1c4 <siscanf>
 802d878:	2800      	cmp	r0, #0
 802d87a:	dd95      	ble.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d87c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802d880:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802d884:	223c      	movs	r2, #60	@ 0x3c
 802d886:	fb02 6603 	mla	r6, r2, r3, r6
 802d88a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802d88e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d892:	fb02 6603 	mla	r6, r2, r3, r6
 802d896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d898:	fb09 f606 	mul.w	r6, r9, r6
 802d89c:	eb05 0903 	add.w	r9, r5, r3
 802d8a0:	5ceb      	ldrb	r3, [r5, r3]
 802d8a2:	2b3c      	cmp	r3, #60	@ 0x3c
 802d8a4:	f040 80ee 	bne.w	802da84 <_tzset_unlocked_r+0x338>
 802d8a8:	f109 0501 	add.w	r5, r9, #1
 802d8ac:	4a71      	ldr	r2, [pc, #452]	@ (802da74 <_tzset_unlocked_r+0x328>)
 802d8ae:	496f      	ldr	r1, [pc, #444]	@ (802da6c <_tzset_unlocked_r+0x320>)
 802d8b0:	ab0a      	add	r3, sp, #40	@ 0x28
 802d8b2:	4628      	mov	r0, r5
 802d8b4:	f001 fc86 	bl	802f1c4 <siscanf>
 802d8b8:	2800      	cmp	r0, #0
 802d8ba:	dc28      	bgt.n	802d90e <_tzset_unlocked_r+0x1c2>
 802d8bc:	f899 3001 	ldrb.w	r3, [r9, #1]
 802d8c0:	2b3e      	cmp	r3, #62	@ 0x3e
 802d8c2:	d124      	bne.n	802d90e <_tzset_unlocked_r+0x1c2>
 802d8c4:	4b68      	ldr	r3, [pc, #416]	@ (802da68 <_tzset_unlocked_r+0x31c>)
 802d8c6:	62a6      	str	r6, [r4, #40]	@ 0x28
 802d8c8:	e9c8 3300 	strd	r3, r3, [r8]
 802d8cc:	f8ca 6000 	str.w	r6, [sl]
 802d8d0:	e76a      	b.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d8d2:	f7e2 fc85 	bl	80101e0 <strcmp>
 802d8d6:	2800      	cmp	r0, #0
 802d8d8:	f47f af6d 	bne.w	802d7b6 <_tzset_unlocked_r+0x6a>
 802d8dc:	e764      	b.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d8de:	4631      	mov	r1, r6
 802d8e0:	f000 f9d8 	bl	802dc94 <strcpy>
 802d8e4:	e775      	b.n	802d7d2 <_tzset_unlocked_r+0x86>
 802d8e6:	4a60      	ldr	r2, [pc, #384]	@ (802da68 <_tzset_unlocked_r+0x31c>)
 802d8e8:	4963      	ldr	r1, [pc, #396]	@ (802da78 <_tzset_unlocked_r+0x32c>)
 802d8ea:	ab0a      	add	r3, sp, #40	@ 0x28
 802d8ec:	4630      	mov	r0, r6
 802d8ee:	f001 fc69 	bl	802f1c4 <siscanf>
 802d8f2:	2800      	cmp	r0, #0
 802d8f4:	f77f af58 	ble.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d8fa:	3b03      	subs	r3, #3
 802d8fc:	2b07      	cmp	r3, #7
 802d8fe:	d9a0      	bls.n	802d842 <_tzset_unlocked_r+0xf6>
 802d900:	e752      	b.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802d902:	2b2b      	cmp	r3, #43	@ 0x2b
 802d904:	bf08      	it	eq
 802d906:	3501      	addeq	r5, #1
 802d908:	f04f 0901 	mov.w	r9, #1
 802d90c:	e7a1      	b.n	802d852 <_tzset_unlocked_r+0x106>
 802d90e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d910:	1eda      	subs	r2, r3, #3
 802d912:	2a07      	cmp	r2, #7
 802d914:	f63f af48 	bhi.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d918:	5ceb      	ldrb	r3, [r5, r3]
 802d91a:	2b3e      	cmp	r3, #62	@ 0x3e
 802d91c:	f47f af44 	bne.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d920:	f109 0902 	add.w	r9, r9, #2
 802d924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d926:	eb09 0503 	add.w	r5, r9, r3
 802d92a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802d92e:	2b2d      	cmp	r3, #45	@ 0x2d
 802d930:	f040 80b7 	bne.w	802daa2 <_tzset_unlocked_r+0x356>
 802d934:	3501      	adds	r5, #1
 802d936:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d93a:	2300      	movs	r3, #0
 802d93c:	f8ad 301c 	strh.w	r3, [sp, #28]
 802d940:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d944:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d948:	930a      	str	r3, [sp, #40]	@ 0x28
 802d94a:	ab0a      	add	r3, sp, #40	@ 0x28
 802d94c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802d950:	9301      	str	r3, [sp, #4]
 802d952:	f10d 031e 	add.w	r3, sp, #30
 802d956:	9300      	str	r3, [sp, #0]
 802d958:	4945      	ldr	r1, [pc, #276]	@ (802da70 <_tzset_unlocked_r+0x324>)
 802d95a:	ab0a      	add	r3, sp, #40	@ 0x28
 802d95c:	aa07      	add	r2, sp, #28
 802d95e:	4628      	mov	r0, r5
 802d960:	f001 fc30 	bl	802f1c4 <siscanf>
 802d964:	2800      	cmp	r0, #0
 802d966:	f300 80a2 	bgt.w	802daae <_tzset_unlocked_r+0x362>
 802d96a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802d96e:	9304      	str	r3, [sp, #16]
 802d970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d972:	4627      	mov	r7, r4
 802d974:	441d      	add	r5, r3
 802d976:	f04f 0b00 	mov.w	fp, #0
 802d97a:	782b      	ldrb	r3, [r5, #0]
 802d97c:	2b2c      	cmp	r3, #44	@ 0x2c
 802d97e:	bf08      	it	eq
 802d980:	3501      	addeq	r5, #1
 802d982:	f895 9000 	ldrb.w	r9, [r5]
 802d986:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802d98a:	f040 80a3 	bne.w	802dad4 <_tzset_unlocked_r+0x388>
 802d98e:	ab0a      	add	r3, sp, #40	@ 0x28
 802d990:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802d994:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d998:	aa09      	add	r2, sp, #36	@ 0x24
 802d99a:	9200      	str	r2, [sp, #0]
 802d99c:	4937      	ldr	r1, [pc, #220]	@ (802da7c <_tzset_unlocked_r+0x330>)
 802d99e:	9303      	str	r3, [sp, #12]
 802d9a0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802d9a4:	4628      	mov	r0, r5
 802d9a6:	f001 fc0d 	bl	802f1c4 <siscanf>
 802d9aa:	2803      	cmp	r0, #3
 802d9ac:	f47f aefc 	bne.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d9b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802d9b4:	1e4b      	subs	r3, r1, #1
 802d9b6:	2b0b      	cmp	r3, #11
 802d9b8:	f63f aef6 	bhi.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d9bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802d9c0:	1e53      	subs	r3, r2, #1
 802d9c2:	2b04      	cmp	r3, #4
 802d9c4:	f63f aef0 	bhi.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d9c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802d9cc:	2b06      	cmp	r3, #6
 802d9ce:	f63f aeeb 	bhi.w	802d7a8 <_tzset_unlocked_r+0x5c>
 802d9d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802d9d6:	f887 9008 	strb.w	r9, [r7, #8]
 802d9da:	617b      	str	r3, [r7, #20]
 802d9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d9de:	eb05 0903 	add.w	r9, r5, r3
 802d9e2:	2500      	movs	r5, #0
 802d9e4:	f04f 0302 	mov.w	r3, #2
 802d9e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802d9ec:	f8ad 501e 	strh.w	r5, [sp, #30]
 802d9f0:	f8ad 5020 	strh.w	r5, [sp, #32]
 802d9f4:	950a      	str	r5, [sp, #40]	@ 0x28
 802d9f6:	f899 3000 	ldrb.w	r3, [r9]
 802d9fa:	2b2f      	cmp	r3, #47	@ 0x2f
 802d9fc:	f040 8096 	bne.w	802db2c <_tzset_unlocked_r+0x3e0>
 802da00:	ab0a      	add	r3, sp, #40	@ 0x28
 802da02:	aa08      	add	r2, sp, #32
 802da04:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802da08:	f10d 021e 	add.w	r2, sp, #30
 802da0c:	9200      	str	r2, [sp, #0]
 802da0e:	491c      	ldr	r1, [pc, #112]	@ (802da80 <_tzset_unlocked_r+0x334>)
 802da10:	9303      	str	r3, [sp, #12]
 802da12:	aa07      	add	r2, sp, #28
 802da14:	4648      	mov	r0, r9
 802da16:	f001 fbd5 	bl	802f1c4 <siscanf>
 802da1a:	42a8      	cmp	r0, r5
 802da1c:	f300 8086 	bgt.w	802db2c <_tzset_unlocked_r+0x3e0>
 802da20:	214a      	movs	r1, #74	@ 0x4a
 802da22:	2200      	movs	r2, #0
 802da24:	2300      	movs	r3, #0
 802da26:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802da2a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802da2e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802da32:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802da36:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802da3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802da3e:	7221      	strb	r1, [r4, #8]
 802da40:	62a5      	str	r5, [r4, #40]	@ 0x28
 802da42:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802da46:	6525      	str	r5, [r4, #80]	@ 0x50
 802da48:	e6ae      	b.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802da4a:	bf00      	nop
 802da4c:	0803bb20 	.word	0x0803bb20
 802da50:	2001a020 	.word	0x2001a020
 802da54:	2001a03c 	.word	0x2001a03c
 802da58:	0803bb23 	.word	0x0803bb23
 802da5c:	2001a040 	.word	0x2001a040
 802da60:	20000164 	.word	0x20000164
 802da64:	0803b9e2 	.word	0x0803b9e2
 802da68:	2001a030 	.word	0x2001a030
 802da6c:	0803bb27 	.word	0x0803bb27
 802da70:	0803bb5c 	.word	0x0803bb5c
 802da74:	2001a024 	.word	0x2001a024
 802da78:	0803bb3a 	.word	0x0803bb3a
 802da7c:	0803bb48 	.word	0x0803bb48
 802da80:	0803bb5b 	.word	0x0803bb5b
 802da84:	4a3e      	ldr	r2, [pc, #248]	@ (802db80 <_tzset_unlocked_r+0x434>)
 802da86:	493f      	ldr	r1, [pc, #252]	@ (802db84 <_tzset_unlocked_r+0x438>)
 802da88:	ab0a      	add	r3, sp, #40	@ 0x28
 802da8a:	4648      	mov	r0, r9
 802da8c:	f001 fb9a 	bl	802f1c4 <siscanf>
 802da90:	2800      	cmp	r0, #0
 802da92:	f77f af17 	ble.w	802d8c4 <_tzset_unlocked_r+0x178>
 802da96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802da98:	3b03      	subs	r3, #3
 802da9a:	2b07      	cmp	r3, #7
 802da9c:	f67f af42 	bls.w	802d924 <_tzset_unlocked_r+0x1d8>
 802daa0:	e682      	b.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802daa2:	2b2b      	cmp	r3, #43	@ 0x2b
 802daa4:	bf08      	it	eq
 802daa6:	3501      	addeq	r5, #1
 802daa8:	f04f 0901 	mov.w	r9, #1
 802daac:	e745      	b.n	802d93a <_tzset_unlocked_r+0x1ee>
 802daae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802dab2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802dab6:	213c      	movs	r1, #60	@ 0x3c
 802dab8:	fb01 3302 	mla	r3, r1, r2, r3
 802dabc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802dac0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802dac4:	fb01 3302 	mla	r3, r1, r2, r3
 802dac8:	fb09 f303 	mul.w	r3, r9, r3
 802dacc:	e74f      	b.n	802d96e <_tzset_unlocked_r+0x222>
 802dace:	f04f 0b01 	mov.w	fp, #1
 802dad2:	e752      	b.n	802d97a <_tzset_unlocked_r+0x22e>
 802dad4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802dad8:	bf06      	itte	eq
 802dada:	3501      	addeq	r5, #1
 802dadc:	464b      	moveq	r3, r9
 802dade:	2344      	movne	r3, #68	@ 0x44
 802dae0:	220a      	movs	r2, #10
 802dae2:	a90b      	add	r1, sp, #44	@ 0x2c
 802dae4:	4628      	mov	r0, r5
 802dae6:	9305      	str	r3, [sp, #20]
 802dae8:	f007 f950 	bl	8034d8c <strtoul>
 802daec:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802daf0:	9b05      	ldr	r3, [sp, #20]
 802daf2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802daf6:	45a9      	cmp	r9, r5
 802daf8:	d114      	bne.n	802db24 <_tzset_unlocked_r+0x3d8>
 802dafa:	234d      	movs	r3, #77	@ 0x4d
 802dafc:	f1bb 0f00 	cmp.w	fp, #0
 802db00:	d107      	bne.n	802db12 <_tzset_unlocked_r+0x3c6>
 802db02:	7223      	strb	r3, [r4, #8]
 802db04:	2103      	movs	r1, #3
 802db06:	2302      	movs	r3, #2
 802db08:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802db0c:	f8c4 b014 	str.w	fp, [r4, #20]
 802db10:	e767      	b.n	802d9e2 <_tzset_unlocked_r+0x296>
 802db12:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802db16:	220b      	movs	r2, #11
 802db18:	2301      	movs	r3, #1
 802db1a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802db1e:	2300      	movs	r3, #0
 802db20:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802db22:	e75e      	b.n	802d9e2 <_tzset_unlocked_r+0x296>
 802db24:	b280      	uxth	r0, r0
 802db26:	723b      	strb	r3, [r7, #8]
 802db28:	6178      	str	r0, [r7, #20]
 802db2a:	e75a      	b.n	802d9e2 <_tzset_unlocked_r+0x296>
 802db2c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802db30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802db34:	213c      	movs	r1, #60	@ 0x3c
 802db36:	fb01 3302 	mla	r3, r1, r2, r3
 802db3a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802db3e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802db42:	fb01 3302 	mla	r3, r1, r2, r3
 802db46:	61bb      	str	r3, [r7, #24]
 802db48:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802db4a:	3728      	adds	r7, #40	@ 0x28
 802db4c:	444d      	add	r5, r9
 802db4e:	f1bb 0f00 	cmp.w	fp, #0
 802db52:	d0bc      	beq.n	802dace <_tzset_unlocked_r+0x382>
 802db54:	9b04      	ldr	r3, [sp, #16]
 802db56:	6523      	str	r3, [r4, #80]	@ 0x50
 802db58:	4b0b      	ldr	r3, [pc, #44]	@ (802db88 <_tzset_unlocked_r+0x43c>)
 802db5a:	f8c8 3000 	str.w	r3, [r8]
 802db5e:	6860      	ldr	r0, [r4, #4]
 802db60:	4b07      	ldr	r3, [pc, #28]	@ (802db80 <_tzset_unlocked_r+0x434>)
 802db62:	62a6      	str	r6, [r4, #40]	@ 0x28
 802db64:	f8c8 3004 	str.w	r3, [r8, #4]
 802db68:	f7ff fd34 	bl	802d5d4 <__tzcalc_limits>
 802db6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802db6e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802db70:	f8ca 2000 	str.w	r2, [sl]
 802db74:	1a9b      	subs	r3, r3, r2
 802db76:	4a05      	ldr	r2, [pc, #20]	@ (802db8c <_tzset_unlocked_r+0x440>)
 802db78:	bf18      	it	ne
 802db7a:	2301      	movne	r3, #1
 802db7c:	6013      	str	r3, [r2, #0]
 802db7e:	e613      	b.n	802d7a8 <_tzset_unlocked_r+0x5c>
 802db80:	2001a024 	.word	0x2001a024
 802db84:	0803bb3a 	.word	0x0803bb3a
 802db88:	2001a030 	.word	0x2001a030
 802db8c:	2001a040 	.word	0x2001a040

0802db90 <__locale_mb_cur_max>:
 802db90:	4b01      	ldr	r3, [pc, #4]	@ (802db98 <__locale_mb_cur_max+0x8>)
 802db92:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802db96:	4770      	bx	lr
 802db98:	2000016c 	.word	0x2000016c

0802db9c <_localeconv_r>:
 802db9c:	4800      	ldr	r0, [pc, #0]	@ (802dba0 <_localeconv_r+0x4>)
 802db9e:	4770      	bx	lr
 802dba0:	2000025c 	.word	0x2000025c

0802dba4 <_close_r>:
 802dba4:	b538      	push	{r3, r4, r5, lr}
 802dba6:	4d06      	ldr	r5, [pc, #24]	@ (802dbc0 <_close_r+0x1c>)
 802dba8:	2300      	movs	r3, #0
 802dbaa:	4604      	mov	r4, r0
 802dbac:	4608      	mov	r0, r1
 802dbae:	602b      	str	r3, [r5, #0]
 802dbb0:	f7e4 fc1a 	bl	80123e8 <_close>
 802dbb4:	1c43      	adds	r3, r0, #1
 802dbb6:	d102      	bne.n	802dbbe <_close_r+0x1a>
 802dbb8:	682b      	ldr	r3, [r5, #0]
 802dbba:	b103      	cbz	r3, 802dbbe <_close_r+0x1a>
 802dbbc:	6023      	str	r3, [r4, #0]
 802dbbe:	bd38      	pop	{r3, r4, r5, pc}
 802dbc0:	2001a044 	.word	0x2001a044

0802dbc4 <_reclaim_reent>:
 802dbc4:	4b14      	ldr	r3, [pc, #80]	@ (802dc18 <_reclaim_reent+0x54>)
 802dbc6:	681b      	ldr	r3, [r3, #0]
 802dbc8:	4283      	cmp	r3, r0
 802dbca:	b570      	push	{r4, r5, r6, lr}
 802dbcc:	4604      	mov	r4, r0
 802dbce:	d022      	beq.n	802dc16 <_reclaim_reent+0x52>
 802dbd0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802dbd2:	b153      	cbz	r3, 802dbea <_reclaim_reent+0x26>
 802dbd4:	2500      	movs	r5, #0
 802dbd6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802dbd8:	5959      	ldr	r1, [r3, r5]
 802dbda:	b9b1      	cbnz	r1, 802dc0a <_reclaim_reent+0x46>
 802dbdc:	3504      	adds	r5, #4
 802dbde:	2d80      	cmp	r5, #128	@ 0x80
 802dbe0:	d1f9      	bne.n	802dbd6 <_reclaim_reent+0x12>
 802dbe2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802dbe4:	4620      	mov	r0, r4
 802dbe6:	f000 ff89 	bl	802eafc <_free_r>
 802dbea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802dbec:	b111      	cbz	r1, 802dbf4 <_reclaim_reent+0x30>
 802dbee:	4620      	mov	r0, r4
 802dbf0:	f000 ff84 	bl	802eafc <_free_r>
 802dbf4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802dbf6:	b111      	cbz	r1, 802dbfe <_reclaim_reent+0x3a>
 802dbf8:	4620      	mov	r0, r4
 802dbfa:	f000 ff7f 	bl	802eafc <_free_r>
 802dbfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802dc00:	b14b      	cbz	r3, 802dc16 <_reclaim_reent+0x52>
 802dc02:	4620      	mov	r0, r4
 802dc04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dc08:	4718      	bx	r3
 802dc0a:	680e      	ldr	r6, [r1, #0]
 802dc0c:	4620      	mov	r0, r4
 802dc0e:	f000 ff75 	bl	802eafc <_free_r>
 802dc12:	4631      	mov	r1, r6
 802dc14:	e7e1      	b.n	802dbda <_reclaim_reent+0x16>
 802dc16:	bd70      	pop	{r4, r5, r6, pc}
 802dc18:	200002d8 	.word	0x200002d8

0802dc1c <_lseek_r>:
 802dc1c:	b538      	push	{r3, r4, r5, lr}
 802dc1e:	4d07      	ldr	r5, [pc, #28]	@ (802dc3c <_lseek_r+0x20>)
 802dc20:	4604      	mov	r4, r0
 802dc22:	4608      	mov	r0, r1
 802dc24:	4611      	mov	r1, r2
 802dc26:	2200      	movs	r2, #0
 802dc28:	602a      	str	r2, [r5, #0]
 802dc2a:	461a      	mov	r2, r3
 802dc2c:	f7e4 fbe6 	bl	80123fc <_lseek>
 802dc30:	1c43      	adds	r3, r0, #1
 802dc32:	d102      	bne.n	802dc3a <_lseek_r+0x1e>
 802dc34:	682b      	ldr	r3, [r5, #0]
 802dc36:	b103      	cbz	r3, 802dc3a <_lseek_r+0x1e>
 802dc38:	6023      	str	r3, [r4, #0]
 802dc3a:	bd38      	pop	{r3, r4, r5, pc}
 802dc3c:	2001a044 	.word	0x2001a044

0802dc40 <_read_r>:
 802dc40:	b538      	push	{r3, r4, r5, lr}
 802dc42:	4d07      	ldr	r5, [pc, #28]	@ (802dc60 <_read_r+0x20>)
 802dc44:	4604      	mov	r4, r0
 802dc46:	4608      	mov	r0, r1
 802dc48:	4611      	mov	r1, r2
 802dc4a:	2200      	movs	r2, #0
 802dc4c:	602a      	str	r2, [r5, #0]
 802dc4e:	461a      	mov	r2, r3
 802dc50:	f7e4 fbac 	bl	80123ac <_read>
 802dc54:	1c43      	adds	r3, r0, #1
 802dc56:	d102      	bne.n	802dc5e <_read_r+0x1e>
 802dc58:	682b      	ldr	r3, [r5, #0]
 802dc5a:	b103      	cbz	r3, 802dc5e <_read_r+0x1e>
 802dc5c:	6023      	str	r3, [r4, #0]
 802dc5e:	bd38      	pop	{r3, r4, r5, pc}
 802dc60:	2001a044 	.word	0x2001a044

0802dc64 <_write_r>:
 802dc64:	b538      	push	{r3, r4, r5, lr}
 802dc66:	4d07      	ldr	r5, [pc, #28]	@ (802dc84 <_write_r+0x20>)
 802dc68:	4604      	mov	r4, r0
 802dc6a:	4608      	mov	r0, r1
 802dc6c:	4611      	mov	r1, r2
 802dc6e:	2200      	movs	r2, #0
 802dc70:	602a      	str	r2, [r5, #0]
 802dc72:	461a      	mov	r2, r3
 802dc74:	f7e4 fbaa 	bl	80123cc <_write>
 802dc78:	1c43      	adds	r3, r0, #1
 802dc7a:	d102      	bne.n	802dc82 <_write_r+0x1e>
 802dc7c:	682b      	ldr	r3, [r5, #0]
 802dc7e:	b103      	cbz	r3, 802dc82 <_write_r+0x1e>
 802dc80:	6023      	str	r3, [r4, #0]
 802dc82:	bd38      	pop	{r3, r4, r5, pc}
 802dc84:	2001a044 	.word	0x2001a044

0802dc88 <__errno>:
 802dc88:	4b01      	ldr	r3, [pc, #4]	@ (802dc90 <__errno+0x8>)
 802dc8a:	6818      	ldr	r0, [r3, #0]
 802dc8c:	4770      	bx	lr
 802dc8e:	bf00      	nop
 802dc90:	200002d8 	.word	0x200002d8

0802dc94 <strcpy>:
 802dc94:	4603      	mov	r3, r0
 802dc96:	f811 2b01 	ldrb.w	r2, [r1], #1
 802dc9a:	f803 2b01 	strb.w	r2, [r3], #1
 802dc9e:	2a00      	cmp	r2, #0
 802dca0:	d1f9      	bne.n	802dc96 <strcpy+0x2>
 802dca2:	4770      	bx	lr

0802dca4 <__libc_init_array>:
 802dca4:	b570      	push	{r4, r5, r6, lr}
 802dca6:	4d0d      	ldr	r5, [pc, #52]	@ (802dcdc <__libc_init_array+0x38>)
 802dca8:	4c0d      	ldr	r4, [pc, #52]	@ (802dce0 <__libc_init_array+0x3c>)
 802dcaa:	1b64      	subs	r4, r4, r5
 802dcac:	10a4      	asrs	r4, r4, #2
 802dcae:	2600      	movs	r6, #0
 802dcb0:	42a6      	cmp	r6, r4
 802dcb2:	d109      	bne.n	802dcc8 <__libc_init_array+0x24>
 802dcb4:	4d0b      	ldr	r5, [pc, #44]	@ (802dce4 <__libc_init_array+0x40>)
 802dcb6:	4c0c      	ldr	r4, [pc, #48]	@ (802dce8 <__libc_init_array+0x44>)
 802dcb8:	f007 ff60 	bl	8035b7c <_init>
 802dcbc:	1b64      	subs	r4, r4, r5
 802dcbe:	10a4      	asrs	r4, r4, #2
 802dcc0:	2600      	movs	r6, #0
 802dcc2:	42a6      	cmp	r6, r4
 802dcc4:	d105      	bne.n	802dcd2 <__libc_init_array+0x2e>
 802dcc6:	bd70      	pop	{r4, r5, r6, pc}
 802dcc8:	f855 3b04 	ldr.w	r3, [r5], #4
 802dccc:	4798      	blx	r3
 802dcce:	3601      	adds	r6, #1
 802dcd0:	e7ee      	b.n	802dcb0 <__libc_init_array+0xc>
 802dcd2:	f855 3b04 	ldr.w	r3, [r5], #4
 802dcd6:	4798      	blx	r3
 802dcd8:	3601      	adds	r6, #1
 802dcda:	e7f2      	b.n	802dcc2 <__libc_init_array+0x1e>
 802dcdc:	0803c1b0 	.word	0x0803c1b0
 802dce0:	0803c1b0 	.word	0x0803c1b0
 802dce4:	0803c1b0 	.word	0x0803c1b0
 802dce8:	0803c1b8 	.word	0x0803c1b8

0802dcec <__retarget_lock_init_recursive>:
 802dcec:	4770      	bx	lr

0802dcee <__retarget_lock_close_recursive>:
 802dcee:	4770      	bx	lr

0802dcf0 <__retarget_lock_acquire>:
 802dcf0:	4770      	bx	lr

0802dcf2 <__retarget_lock_acquire_recursive>:
 802dcf2:	4770      	bx	lr

0802dcf4 <__retarget_lock_release>:
 802dcf4:	4770      	bx	lr

0802dcf6 <__retarget_lock_release_recursive>:
 802dcf6:	4770      	bx	lr

0802dcf8 <memcpy>:
 802dcf8:	440a      	add	r2, r1
 802dcfa:	4291      	cmp	r1, r2
 802dcfc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802dd00:	d100      	bne.n	802dd04 <memcpy+0xc>
 802dd02:	4770      	bx	lr
 802dd04:	b510      	push	{r4, lr}
 802dd06:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dd0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802dd0e:	4291      	cmp	r1, r2
 802dd10:	d1f9      	bne.n	802dd06 <memcpy+0xe>
 802dd12:	bd10      	pop	{r4, pc}

0802dd14 <_wcrtomb_r>:
 802dd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 802dd16:	4c09      	ldr	r4, [pc, #36]	@ (802dd3c <_wcrtomb_r+0x28>)
 802dd18:	b085      	sub	sp, #20
 802dd1a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802dd1e:	4605      	mov	r5, r0
 802dd20:	461e      	mov	r6, r3
 802dd22:	b909      	cbnz	r1, 802dd28 <_wcrtomb_r+0x14>
 802dd24:	460a      	mov	r2, r1
 802dd26:	a901      	add	r1, sp, #4
 802dd28:	47b8      	blx	r7
 802dd2a:	1c43      	adds	r3, r0, #1
 802dd2c:	bf01      	itttt	eq
 802dd2e:	2300      	moveq	r3, #0
 802dd30:	6033      	streq	r3, [r6, #0]
 802dd32:	238a      	moveq	r3, #138	@ 0x8a
 802dd34:	602b      	streq	r3, [r5, #0]
 802dd36:	b005      	add	sp, #20
 802dd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dd3a:	bf00      	nop
 802dd3c:	2000016c 	.word	0x2000016c

0802dd40 <frexp>:
 802dd40:	b570      	push	{r4, r5, r6, lr}
 802dd42:	2100      	movs	r1, #0
 802dd44:	ec55 4b10 	vmov	r4, r5, d0
 802dd48:	6001      	str	r1, [r0, #0]
 802dd4a:	4915      	ldr	r1, [pc, #84]	@ (802dda0 <frexp+0x60>)
 802dd4c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802dd50:	428a      	cmp	r2, r1
 802dd52:	4606      	mov	r6, r0
 802dd54:	462b      	mov	r3, r5
 802dd56:	d820      	bhi.n	802dd9a <frexp+0x5a>
 802dd58:	4621      	mov	r1, r4
 802dd5a:	4311      	orrs	r1, r2
 802dd5c:	d01d      	beq.n	802dd9a <frexp+0x5a>
 802dd5e:	4911      	ldr	r1, [pc, #68]	@ (802dda4 <frexp+0x64>)
 802dd60:	4029      	ands	r1, r5
 802dd62:	b961      	cbnz	r1, 802dd7e <frexp+0x3e>
 802dd64:	4b10      	ldr	r3, [pc, #64]	@ (802dda8 <frexp+0x68>)
 802dd66:	2200      	movs	r2, #0
 802dd68:	4620      	mov	r0, r4
 802dd6a:	4629      	mov	r1, r5
 802dd6c:	f7e2 fc5c 	bl	8010628 <__aeabi_dmul>
 802dd70:	460b      	mov	r3, r1
 802dd72:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802dd76:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802dd7a:	4604      	mov	r4, r0
 802dd7c:	6031      	str	r1, [r6, #0]
 802dd7e:	6831      	ldr	r1, [r6, #0]
 802dd80:	1512      	asrs	r2, r2, #20
 802dd82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802dd86:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802dd8a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802dd8e:	4411      	add	r1, r2
 802dd90:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802dd94:	6031      	str	r1, [r6, #0]
 802dd96:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802dd9a:	ec45 4b10 	vmov	d0, r4, r5
 802dd9e:	bd70      	pop	{r4, r5, r6, pc}
 802dda0:	7fefffff 	.word	0x7fefffff
 802dda4:	7ff00000 	.word	0x7ff00000
 802dda8:	43500000 	.word	0x43500000

0802ddac <register_fini>:
 802ddac:	4b02      	ldr	r3, [pc, #8]	@ (802ddb8 <register_fini+0xc>)
 802ddae:	b113      	cbz	r3, 802ddb6 <register_fini+0xa>
 802ddb0:	4802      	ldr	r0, [pc, #8]	@ (802ddbc <register_fini+0x10>)
 802ddb2:	f000 b810 	b.w	802ddd6 <atexit>
 802ddb6:	4770      	bx	lr
 802ddb8:	00000000 	.word	0x00000000
 802ddbc:	0803523d 	.word	0x0803523d

0802ddc0 <abort>:
 802ddc0:	b508      	push	{r3, lr}
 802ddc2:	2006      	movs	r0, #6
 802ddc4:	f007 f8a6 	bl	8034f14 <raise>
 802ddc8:	2001      	movs	r0, #1
 802ddca:	f7e4 fae9 	bl	80123a0 <_exit>

0802ddce <abs>:
 802ddce:	2800      	cmp	r0, #0
 802ddd0:	bfb8      	it	lt
 802ddd2:	4240      	neglt	r0, r0
 802ddd4:	4770      	bx	lr

0802ddd6 <atexit>:
 802ddd6:	2300      	movs	r3, #0
 802ddd8:	4601      	mov	r1, r0
 802ddda:	461a      	mov	r2, r3
 802dddc:	4618      	mov	r0, r3
 802ddde:	f007 bb01 	b.w	80353e4 <__register_exitproc>

0802dde2 <quorem>:
 802dde2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dde6:	6903      	ldr	r3, [r0, #16]
 802dde8:	690c      	ldr	r4, [r1, #16]
 802ddea:	42a3      	cmp	r3, r4
 802ddec:	4607      	mov	r7, r0
 802ddee:	db7e      	blt.n	802deee <quorem+0x10c>
 802ddf0:	3c01      	subs	r4, #1
 802ddf2:	f101 0814 	add.w	r8, r1, #20
 802ddf6:	00a3      	lsls	r3, r4, #2
 802ddf8:	f100 0514 	add.w	r5, r0, #20
 802ddfc:	9300      	str	r3, [sp, #0]
 802ddfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802de02:	9301      	str	r3, [sp, #4]
 802de04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802de08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802de0c:	3301      	adds	r3, #1
 802de0e:	429a      	cmp	r2, r3
 802de10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802de14:	fbb2 f6f3 	udiv	r6, r2, r3
 802de18:	d32e      	bcc.n	802de78 <quorem+0x96>
 802de1a:	f04f 0a00 	mov.w	sl, #0
 802de1e:	46c4      	mov	ip, r8
 802de20:	46ae      	mov	lr, r5
 802de22:	46d3      	mov	fp, sl
 802de24:	f85c 3b04 	ldr.w	r3, [ip], #4
 802de28:	b298      	uxth	r0, r3
 802de2a:	fb06 a000 	mla	r0, r6, r0, sl
 802de2e:	0c02      	lsrs	r2, r0, #16
 802de30:	0c1b      	lsrs	r3, r3, #16
 802de32:	fb06 2303 	mla	r3, r6, r3, r2
 802de36:	f8de 2000 	ldr.w	r2, [lr]
 802de3a:	b280      	uxth	r0, r0
 802de3c:	b292      	uxth	r2, r2
 802de3e:	1a12      	subs	r2, r2, r0
 802de40:	445a      	add	r2, fp
 802de42:	f8de 0000 	ldr.w	r0, [lr]
 802de46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802de4a:	b29b      	uxth	r3, r3
 802de4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802de50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802de54:	b292      	uxth	r2, r2
 802de56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802de5a:	45e1      	cmp	r9, ip
 802de5c:	f84e 2b04 	str.w	r2, [lr], #4
 802de60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802de64:	d2de      	bcs.n	802de24 <quorem+0x42>
 802de66:	9b00      	ldr	r3, [sp, #0]
 802de68:	58eb      	ldr	r3, [r5, r3]
 802de6a:	b92b      	cbnz	r3, 802de78 <quorem+0x96>
 802de6c:	9b01      	ldr	r3, [sp, #4]
 802de6e:	3b04      	subs	r3, #4
 802de70:	429d      	cmp	r5, r3
 802de72:	461a      	mov	r2, r3
 802de74:	d32f      	bcc.n	802ded6 <quorem+0xf4>
 802de76:	613c      	str	r4, [r7, #16]
 802de78:	4638      	mov	r0, r7
 802de7a:	f005 fce3 	bl	8033844 <__mcmp>
 802de7e:	2800      	cmp	r0, #0
 802de80:	db25      	blt.n	802dece <quorem+0xec>
 802de82:	4629      	mov	r1, r5
 802de84:	2000      	movs	r0, #0
 802de86:	f858 2b04 	ldr.w	r2, [r8], #4
 802de8a:	f8d1 c000 	ldr.w	ip, [r1]
 802de8e:	fa1f fe82 	uxth.w	lr, r2
 802de92:	fa1f f38c 	uxth.w	r3, ip
 802de96:	eba3 030e 	sub.w	r3, r3, lr
 802de9a:	4403      	add	r3, r0
 802de9c:	0c12      	lsrs	r2, r2, #16
 802de9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802dea2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802dea6:	b29b      	uxth	r3, r3
 802dea8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802deac:	45c1      	cmp	r9, r8
 802deae:	f841 3b04 	str.w	r3, [r1], #4
 802deb2:	ea4f 4022 	mov.w	r0, r2, asr #16
 802deb6:	d2e6      	bcs.n	802de86 <quorem+0xa4>
 802deb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802debc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802dec0:	b922      	cbnz	r2, 802decc <quorem+0xea>
 802dec2:	3b04      	subs	r3, #4
 802dec4:	429d      	cmp	r5, r3
 802dec6:	461a      	mov	r2, r3
 802dec8:	d30b      	bcc.n	802dee2 <quorem+0x100>
 802deca:	613c      	str	r4, [r7, #16]
 802decc:	3601      	adds	r6, #1
 802dece:	4630      	mov	r0, r6
 802ded0:	b003      	add	sp, #12
 802ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ded6:	6812      	ldr	r2, [r2, #0]
 802ded8:	3b04      	subs	r3, #4
 802deda:	2a00      	cmp	r2, #0
 802dedc:	d1cb      	bne.n	802de76 <quorem+0x94>
 802dede:	3c01      	subs	r4, #1
 802dee0:	e7c6      	b.n	802de70 <quorem+0x8e>
 802dee2:	6812      	ldr	r2, [r2, #0]
 802dee4:	3b04      	subs	r3, #4
 802dee6:	2a00      	cmp	r2, #0
 802dee8:	d1ef      	bne.n	802deca <quorem+0xe8>
 802deea:	3c01      	subs	r4, #1
 802deec:	e7ea      	b.n	802dec4 <quorem+0xe2>
 802deee:	2000      	movs	r0, #0
 802def0:	e7ee      	b.n	802ded0 <quorem+0xee>
 802def2:	0000      	movs	r0, r0
 802def4:	0000      	movs	r0, r0
	...

0802def8 <_dtoa_r>:
 802def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802defc:	b099      	sub	sp, #100	@ 0x64
 802defe:	ed8d 0b02 	vstr	d0, [sp, #8]
 802df02:	9109      	str	r1, [sp, #36]	@ 0x24
 802df04:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802df06:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802df08:	920e      	str	r2, [sp, #56]	@ 0x38
 802df0a:	ec55 4b10 	vmov	r4, r5, d0
 802df0e:	4683      	mov	fp, r0
 802df10:	9313      	str	r3, [sp, #76]	@ 0x4c
 802df12:	b149      	cbz	r1, 802df28 <_dtoa_r+0x30>
 802df14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802df16:	604a      	str	r2, [r1, #4]
 802df18:	2301      	movs	r3, #1
 802df1a:	4093      	lsls	r3, r2
 802df1c:	608b      	str	r3, [r1, #8]
 802df1e:	f005 fa40 	bl	80333a2 <_Bfree>
 802df22:	2300      	movs	r3, #0
 802df24:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802df28:	1e2b      	subs	r3, r5, #0
 802df2a:	bfb9      	ittee	lt
 802df2c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802df30:	9303      	strlt	r3, [sp, #12]
 802df32:	2300      	movge	r3, #0
 802df34:	6033      	strge	r3, [r6, #0]
 802df36:	9f03      	ldr	r7, [sp, #12]
 802df38:	4b97      	ldr	r3, [pc, #604]	@ (802e198 <_dtoa_r+0x2a0>)
 802df3a:	bfbc      	itt	lt
 802df3c:	2201      	movlt	r2, #1
 802df3e:	6032      	strlt	r2, [r6, #0]
 802df40:	43bb      	bics	r3, r7
 802df42:	d114      	bne.n	802df6e <_dtoa_r+0x76>
 802df44:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802df46:	f242 730f 	movw	r3, #9999	@ 0x270f
 802df4a:	6013      	str	r3, [r2, #0]
 802df4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802df50:	4323      	orrs	r3, r4
 802df52:	f000 854c 	beq.w	802e9ee <_dtoa_r+0xaf6>
 802df56:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802df58:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802e1b0 <_dtoa_r+0x2b8>
 802df5c:	b11b      	cbz	r3, 802df66 <_dtoa_r+0x6e>
 802df5e:	f10a 0303 	add.w	r3, sl, #3
 802df62:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802df64:	6013      	str	r3, [r2, #0]
 802df66:	4650      	mov	r0, sl
 802df68:	b019      	add	sp, #100	@ 0x64
 802df6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802df6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802df72:	2200      	movs	r2, #0
 802df74:	ec51 0b17 	vmov	r0, r1, d7
 802df78:	2300      	movs	r3, #0
 802df7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802df7e:	f7e2 fdbb 	bl	8010af8 <__aeabi_dcmpeq>
 802df82:	4680      	mov	r8, r0
 802df84:	b150      	cbz	r0, 802df9c <_dtoa_r+0xa4>
 802df86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802df88:	2301      	movs	r3, #1
 802df8a:	6013      	str	r3, [r2, #0]
 802df8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802df8e:	b113      	cbz	r3, 802df96 <_dtoa_r+0x9e>
 802df90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802df92:	4b82      	ldr	r3, [pc, #520]	@ (802e19c <_dtoa_r+0x2a4>)
 802df94:	6013      	str	r3, [r2, #0]
 802df96:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802e1b4 <_dtoa_r+0x2bc>
 802df9a:	e7e4      	b.n	802df66 <_dtoa_r+0x6e>
 802df9c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802dfa0:	aa16      	add	r2, sp, #88	@ 0x58
 802dfa2:	a917      	add	r1, sp, #92	@ 0x5c
 802dfa4:	4658      	mov	r0, fp
 802dfa6:	f005 fd6d 	bl	8033a84 <__d2b>
 802dfaa:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802dfae:	4681      	mov	r9, r0
 802dfb0:	2e00      	cmp	r6, #0
 802dfb2:	d077      	beq.n	802e0a4 <_dtoa_r+0x1ac>
 802dfb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802dfb6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802dfba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dfbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dfc2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802dfc6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802dfca:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802dfce:	4619      	mov	r1, r3
 802dfd0:	2200      	movs	r2, #0
 802dfd2:	4b73      	ldr	r3, [pc, #460]	@ (802e1a0 <_dtoa_r+0x2a8>)
 802dfd4:	f7e2 f970 	bl	80102b8 <__aeabi_dsub>
 802dfd8:	a369      	add	r3, pc, #420	@ (adr r3, 802e180 <_dtoa_r+0x288>)
 802dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfde:	f7e2 fb23 	bl	8010628 <__aeabi_dmul>
 802dfe2:	a369      	add	r3, pc, #420	@ (adr r3, 802e188 <_dtoa_r+0x290>)
 802dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfe8:	f7e2 f968 	bl	80102bc <__adddf3>
 802dfec:	4604      	mov	r4, r0
 802dfee:	4630      	mov	r0, r6
 802dff0:	460d      	mov	r5, r1
 802dff2:	f7e2 faaf 	bl	8010554 <__aeabi_i2d>
 802dff6:	a366      	add	r3, pc, #408	@ (adr r3, 802e190 <_dtoa_r+0x298>)
 802dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dffc:	f7e2 fb14 	bl	8010628 <__aeabi_dmul>
 802e000:	4602      	mov	r2, r0
 802e002:	460b      	mov	r3, r1
 802e004:	4620      	mov	r0, r4
 802e006:	4629      	mov	r1, r5
 802e008:	f7e2 f958 	bl	80102bc <__adddf3>
 802e00c:	4604      	mov	r4, r0
 802e00e:	460d      	mov	r5, r1
 802e010:	f7e2 fdba 	bl	8010b88 <__aeabi_d2iz>
 802e014:	2200      	movs	r2, #0
 802e016:	4607      	mov	r7, r0
 802e018:	2300      	movs	r3, #0
 802e01a:	4620      	mov	r0, r4
 802e01c:	4629      	mov	r1, r5
 802e01e:	f7e2 fd75 	bl	8010b0c <__aeabi_dcmplt>
 802e022:	b140      	cbz	r0, 802e036 <_dtoa_r+0x13e>
 802e024:	4638      	mov	r0, r7
 802e026:	f7e2 fa95 	bl	8010554 <__aeabi_i2d>
 802e02a:	4622      	mov	r2, r4
 802e02c:	462b      	mov	r3, r5
 802e02e:	f7e2 fd63 	bl	8010af8 <__aeabi_dcmpeq>
 802e032:	b900      	cbnz	r0, 802e036 <_dtoa_r+0x13e>
 802e034:	3f01      	subs	r7, #1
 802e036:	2f16      	cmp	r7, #22
 802e038:	d851      	bhi.n	802e0de <_dtoa_r+0x1e6>
 802e03a:	4b5a      	ldr	r3, [pc, #360]	@ (802e1a4 <_dtoa_r+0x2ac>)
 802e03c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e048:	f7e2 fd60 	bl	8010b0c <__aeabi_dcmplt>
 802e04c:	2800      	cmp	r0, #0
 802e04e:	d048      	beq.n	802e0e2 <_dtoa_r+0x1ea>
 802e050:	3f01      	subs	r7, #1
 802e052:	2300      	movs	r3, #0
 802e054:	9312      	str	r3, [sp, #72]	@ 0x48
 802e056:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e058:	1b9b      	subs	r3, r3, r6
 802e05a:	1e5a      	subs	r2, r3, #1
 802e05c:	bf44      	itt	mi
 802e05e:	f1c3 0801 	rsbmi	r8, r3, #1
 802e062:	2300      	movmi	r3, #0
 802e064:	9208      	str	r2, [sp, #32]
 802e066:	bf54      	ite	pl
 802e068:	f04f 0800 	movpl.w	r8, #0
 802e06c:	9308      	strmi	r3, [sp, #32]
 802e06e:	2f00      	cmp	r7, #0
 802e070:	db39      	blt.n	802e0e6 <_dtoa_r+0x1ee>
 802e072:	9b08      	ldr	r3, [sp, #32]
 802e074:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e076:	443b      	add	r3, r7
 802e078:	9308      	str	r3, [sp, #32]
 802e07a:	2300      	movs	r3, #0
 802e07c:	930a      	str	r3, [sp, #40]	@ 0x28
 802e07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e080:	2b09      	cmp	r3, #9
 802e082:	d865      	bhi.n	802e150 <_dtoa_r+0x258>
 802e084:	2b05      	cmp	r3, #5
 802e086:	bfc4      	itt	gt
 802e088:	3b04      	subgt	r3, #4
 802e08a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e08e:	f1a3 0302 	sub.w	r3, r3, #2
 802e092:	bfcc      	ite	gt
 802e094:	2400      	movgt	r4, #0
 802e096:	2401      	movle	r4, #1
 802e098:	2b03      	cmp	r3, #3
 802e09a:	d864      	bhi.n	802e166 <_dtoa_r+0x26e>
 802e09c:	e8df f003 	tbb	[pc, r3]
 802e0a0:	5635372a 	.word	0x5635372a
 802e0a4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e0a8:	441e      	add	r6, r3
 802e0aa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e0ae:	2b20      	cmp	r3, #32
 802e0b0:	bfc1      	itttt	gt
 802e0b2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e0b6:	409f      	lslgt	r7, r3
 802e0b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e0bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e0c0:	bfd6      	itet	le
 802e0c2:	f1c3 0320 	rsble	r3, r3, #32
 802e0c6:	ea47 0003 	orrgt.w	r0, r7, r3
 802e0ca:	fa04 f003 	lslle.w	r0, r4, r3
 802e0ce:	f7e2 fa31 	bl	8010534 <__aeabi_ui2d>
 802e0d2:	2201      	movs	r2, #1
 802e0d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e0d8:	3e01      	subs	r6, #1
 802e0da:	9214      	str	r2, [sp, #80]	@ 0x50
 802e0dc:	e777      	b.n	802dfce <_dtoa_r+0xd6>
 802e0de:	2301      	movs	r3, #1
 802e0e0:	e7b8      	b.n	802e054 <_dtoa_r+0x15c>
 802e0e2:	9012      	str	r0, [sp, #72]	@ 0x48
 802e0e4:	e7b7      	b.n	802e056 <_dtoa_r+0x15e>
 802e0e6:	427b      	negs	r3, r7
 802e0e8:	930a      	str	r3, [sp, #40]	@ 0x28
 802e0ea:	2300      	movs	r3, #0
 802e0ec:	eba8 0807 	sub.w	r8, r8, r7
 802e0f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e0f2:	e7c4      	b.n	802e07e <_dtoa_r+0x186>
 802e0f4:	2300      	movs	r3, #0
 802e0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e0f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e0fa:	2b00      	cmp	r3, #0
 802e0fc:	dc36      	bgt.n	802e16c <_dtoa_r+0x274>
 802e0fe:	2301      	movs	r3, #1
 802e100:	9300      	str	r3, [sp, #0]
 802e102:	9307      	str	r3, [sp, #28]
 802e104:	461a      	mov	r2, r3
 802e106:	920e      	str	r2, [sp, #56]	@ 0x38
 802e108:	e00b      	b.n	802e122 <_dtoa_r+0x22a>
 802e10a:	2301      	movs	r3, #1
 802e10c:	e7f3      	b.n	802e0f6 <_dtoa_r+0x1fe>
 802e10e:	2300      	movs	r3, #0
 802e110:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e114:	18fb      	adds	r3, r7, r3
 802e116:	9300      	str	r3, [sp, #0]
 802e118:	3301      	adds	r3, #1
 802e11a:	2b01      	cmp	r3, #1
 802e11c:	9307      	str	r3, [sp, #28]
 802e11e:	bfb8      	it	lt
 802e120:	2301      	movlt	r3, #1
 802e122:	2100      	movs	r1, #0
 802e124:	2204      	movs	r2, #4
 802e126:	f102 0014 	add.w	r0, r2, #20
 802e12a:	4298      	cmp	r0, r3
 802e12c:	d922      	bls.n	802e174 <_dtoa_r+0x27c>
 802e12e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802e132:	4658      	mov	r0, fp
 802e134:	f005 f910 	bl	8033358 <_Balloc>
 802e138:	4682      	mov	sl, r0
 802e13a:	2800      	cmp	r0, #0
 802e13c:	d13c      	bne.n	802e1b8 <_dtoa_r+0x2c0>
 802e13e:	4b1a      	ldr	r3, [pc, #104]	@ (802e1a8 <_dtoa_r+0x2b0>)
 802e140:	4602      	mov	r2, r0
 802e142:	f240 11af 	movw	r1, #431	@ 0x1af
 802e146:	4819      	ldr	r0, [pc, #100]	@ (802e1ac <_dtoa_r+0x2b4>)
 802e148:	f7fb fe48 	bl	8029ddc <__assert_func>
 802e14c:	2301      	movs	r3, #1
 802e14e:	e7df      	b.n	802e110 <_dtoa_r+0x218>
 802e150:	2401      	movs	r4, #1
 802e152:	2300      	movs	r3, #0
 802e154:	9309      	str	r3, [sp, #36]	@ 0x24
 802e156:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e15c:	9300      	str	r3, [sp, #0]
 802e15e:	9307      	str	r3, [sp, #28]
 802e160:	2200      	movs	r2, #0
 802e162:	2312      	movs	r3, #18
 802e164:	e7cf      	b.n	802e106 <_dtoa_r+0x20e>
 802e166:	2301      	movs	r3, #1
 802e168:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e16a:	e7f5      	b.n	802e158 <_dtoa_r+0x260>
 802e16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e16e:	9300      	str	r3, [sp, #0]
 802e170:	9307      	str	r3, [sp, #28]
 802e172:	e7d6      	b.n	802e122 <_dtoa_r+0x22a>
 802e174:	3101      	adds	r1, #1
 802e176:	0052      	lsls	r2, r2, #1
 802e178:	e7d5      	b.n	802e126 <_dtoa_r+0x22e>
 802e17a:	bf00      	nop
 802e17c:	f3af 8000 	nop.w
 802e180:	636f4361 	.word	0x636f4361
 802e184:	3fd287a7 	.word	0x3fd287a7
 802e188:	8b60c8b3 	.word	0x8b60c8b3
 802e18c:	3fc68a28 	.word	0x3fc68a28
 802e190:	509f79fb 	.word	0x509f79fb
 802e194:	3fd34413 	.word	0x3fd34413
 802e198:	7ff00000 	.word	0x7ff00000
 802e19c:	0803ba16 	.word	0x0803ba16
 802e1a0:	3ff80000 	.word	0x3ff80000
 802e1a4:	0803c030 	.word	0x0803c030
 802e1a8:	0803beae 	.word	0x0803beae
 802e1ac:	0803bebf 	.word	0x0803bebf
 802e1b0:	0803beaa 	.word	0x0803beaa
 802e1b4:	0803ba15 	.word	0x0803ba15
 802e1b8:	9b07      	ldr	r3, [sp, #28]
 802e1ba:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802e1be:	2b0e      	cmp	r3, #14
 802e1c0:	f200 80a4 	bhi.w	802e30c <_dtoa_r+0x414>
 802e1c4:	2c00      	cmp	r4, #0
 802e1c6:	f000 80a1 	beq.w	802e30c <_dtoa_r+0x414>
 802e1ca:	2f00      	cmp	r7, #0
 802e1cc:	dd33      	ble.n	802e236 <_dtoa_r+0x33e>
 802e1ce:	4bae      	ldr	r3, [pc, #696]	@ (802e488 <_dtoa_r+0x590>)
 802e1d0:	f007 020f 	and.w	r2, r7, #15
 802e1d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e1d8:	ed93 7b00 	vldr	d7, [r3]
 802e1dc:	05f8      	lsls	r0, r7, #23
 802e1de:	ed8d 7b04 	vstr	d7, [sp, #16]
 802e1e2:	ea4f 1427 	mov.w	r4, r7, asr #4
 802e1e6:	d516      	bpl.n	802e216 <_dtoa_r+0x31e>
 802e1e8:	4ba8      	ldr	r3, [pc, #672]	@ (802e48c <_dtoa_r+0x594>)
 802e1ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e1ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e1f2:	f7e2 fb43 	bl	801087c <__aeabi_ddiv>
 802e1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e1fa:	f004 040f 	and.w	r4, r4, #15
 802e1fe:	2603      	movs	r6, #3
 802e200:	4da2      	ldr	r5, [pc, #648]	@ (802e48c <_dtoa_r+0x594>)
 802e202:	b954      	cbnz	r4, 802e21a <_dtoa_r+0x322>
 802e204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802e208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e20c:	f7e2 fb36 	bl	801087c <__aeabi_ddiv>
 802e210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e214:	e028      	b.n	802e268 <_dtoa_r+0x370>
 802e216:	2602      	movs	r6, #2
 802e218:	e7f2      	b.n	802e200 <_dtoa_r+0x308>
 802e21a:	07e1      	lsls	r1, r4, #31
 802e21c:	d508      	bpl.n	802e230 <_dtoa_r+0x338>
 802e21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e222:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e226:	f7e2 f9ff 	bl	8010628 <__aeabi_dmul>
 802e22a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802e22e:	3601      	adds	r6, #1
 802e230:	1064      	asrs	r4, r4, #1
 802e232:	3508      	adds	r5, #8
 802e234:	e7e5      	b.n	802e202 <_dtoa_r+0x30a>
 802e236:	f000 80d2 	beq.w	802e3de <_dtoa_r+0x4e6>
 802e23a:	427c      	negs	r4, r7
 802e23c:	4b92      	ldr	r3, [pc, #584]	@ (802e488 <_dtoa_r+0x590>)
 802e23e:	4d93      	ldr	r5, [pc, #588]	@ (802e48c <_dtoa_r+0x594>)
 802e240:	f004 020f 	and.w	r2, r4, #15
 802e244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e24c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e250:	f7e2 f9ea 	bl	8010628 <__aeabi_dmul>
 802e254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e258:	1124      	asrs	r4, r4, #4
 802e25a:	2300      	movs	r3, #0
 802e25c:	2602      	movs	r6, #2
 802e25e:	2c00      	cmp	r4, #0
 802e260:	f040 80b2 	bne.w	802e3c8 <_dtoa_r+0x4d0>
 802e264:	2b00      	cmp	r3, #0
 802e266:	d1d3      	bne.n	802e210 <_dtoa_r+0x318>
 802e268:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e26a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e26e:	2b00      	cmp	r3, #0
 802e270:	f000 80b7 	beq.w	802e3e2 <_dtoa_r+0x4ea>
 802e274:	4b86      	ldr	r3, [pc, #536]	@ (802e490 <_dtoa_r+0x598>)
 802e276:	2200      	movs	r2, #0
 802e278:	4620      	mov	r0, r4
 802e27a:	4629      	mov	r1, r5
 802e27c:	f7e2 fc46 	bl	8010b0c <__aeabi_dcmplt>
 802e280:	2800      	cmp	r0, #0
 802e282:	f000 80ae 	beq.w	802e3e2 <_dtoa_r+0x4ea>
 802e286:	9b07      	ldr	r3, [sp, #28]
 802e288:	2b00      	cmp	r3, #0
 802e28a:	f000 80aa 	beq.w	802e3e2 <_dtoa_r+0x4ea>
 802e28e:	9b00      	ldr	r3, [sp, #0]
 802e290:	2b00      	cmp	r3, #0
 802e292:	dd37      	ble.n	802e304 <_dtoa_r+0x40c>
 802e294:	1e7b      	subs	r3, r7, #1
 802e296:	9304      	str	r3, [sp, #16]
 802e298:	4620      	mov	r0, r4
 802e29a:	4b7e      	ldr	r3, [pc, #504]	@ (802e494 <_dtoa_r+0x59c>)
 802e29c:	2200      	movs	r2, #0
 802e29e:	4629      	mov	r1, r5
 802e2a0:	f7e2 f9c2 	bl	8010628 <__aeabi_dmul>
 802e2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e2a8:	9c00      	ldr	r4, [sp, #0]
 802e2aa:	3601      	adds	r6, #1
 802e2ac:	4630      	mov	r0, r6
 802e2ae:	f7e2 f951 	bl	8010554 <__aeabi_i2d>
 802e2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e2b6:	f7e2 f9b7 	bl	8010628 <__aeabi_dmul>
 802e2ba:	4b77      	ldr	r3, [pc, #476]	@ (802e498 <_dtoa_r+0x5a0>)
 802e2bc:	2200      	movs	r2, #0
 802e2be:	f7e1 fffd 	bl	80102bc <__adddf3>
 802e2c2:	4605      	mov	r5, r0
 802e2c4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802e2c8:	2c00      	cmp	r4, #0
 802e2ca:	f040 808d 	bne.w	802e3e8 <_dtoa_r+0x4f0>
 802e2ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e2d2:	4b72      	ldr	r3, [pc, #456]	@ (802e49c <_dtoa_r+0x5a4>)
 802e2d4:	2200      	movs	r2, #0
 802e2d6:	f7e1 ffef 	bl	80102b8 <__aeabi_dsub>
 802e2da:	4602      	mov	r2, r0
 802e2dc:	460b      	mov	r3, r1
 802e2de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e2e2:	462a      	mov	r2, r5
 802e2e4:	4633      	mov	r3, r6
 802e2e6:	f7e2 fc2f 	bl	8010b48 <__aeabi_dcmpgt>
 802e2ea:	2800      	cmp	r0, #0
 802e2ec:	f040 828c 	bne.w	802e808 <_dtoa_r+0x910>
 802e2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e2f4:	462a      	mov	r2, r5
 802e2f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802e2fa:	f7e2 fc07 	bl	8010b0c <__aeabi_dcmplt>
 802e2fe:	2800      	cmp	r0, #0
 802e300:	f040 8129 	bne.w	802e556 <_dtoa_r+0x65e>
 802e304:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802e308:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e30c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802e30e:	2b00      	cmp	r3, #0
 802e310:	f2c0 815b 	blt.w	802e5ca <_dtoa_r+0x6d2>
 802e314:	2f0e      	cmp	r7, #14
 802e316:	f300 8158 	bgt.w	802e5ca <_dtoa_r+0x6d2>
 802e31a:	4b5b      	ldr	r3, [pc, #364]	@ (802e488 <_dtoa_r+0x590>)
 802e31c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e320:	ed93 7b00 	vldr	d7, [r3]
 802e324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e326:	2b00      	cmp	r3, #0
 802e328:	ed8d 7b00 	vstr	d7, [sp]
 802e32c:	da03      	bge.n	802e336 <_dtoa_r+0x43e>
 802e32e:	9b07      	ldr	r3, [sp, #28]
 802e330:	2b00      	cmp	r3, #0
 802e332:	f340 8102 	ble.w	802e53a <_dtoa_r+0x642>
 802e336:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e33a:	4656      	mov	r6, sl
 802e33c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e340:	4620      	mov	r0, r4
 802e342:	4629      	mov	r1, r5
 802e344:	f7e2 fa9a 	bl	801087c <__aeabi_ddiv>
 802e348:	f7e2 fc1e 	bl	8010b88 <__aeabi_d2iz>
 802e34c:	4680      	mov	r8, r0
 802e34e:	f7e2 f901 	bl	8010554 <__aeabi_i2d>
 802e352:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e356:	f7e2 f967 	bl	8010628 <__aeabi_dmul>
 802e35a:	4602      	mov	r2, r0
 802e35c:	460b      	mov	r3, r1
 802e35e:	4620      	mov	r0, r4
 802e360:	4629      	mov	r1, r5
 802e362:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802e366:	f7e1 ffa7 	bl	80102b8 <__aeabi_dsub>
 802e36a:	f806 4b01 	strb.w	r4, [r6], #1
 802e36e:	9d07      	ldr	r5, [sp, #28]
 802e370:	eba6 040a 	sub.w	r4, r6, sl
 802e374:	42a5      	cmp	r5, r4
 802e376:	4602      	mov	r2, r0
 802e378:	460b      	mov	r3, r1
 802e37a:	f040 8118 	bne.w	802e5ae <_dtoa_r+0x6b6>
 802e37e:	f7e1 ff9d 	bl	80102bc <__adddf3>
 802e382:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e386:	4604      	mov	r4, r0
 802e388:	460d      	mov	r5, r1
 802e38a:	f7e2 fbdd 	bl	8010b48 <__aeabi_dcmpgt>
 802e38e:	2800      	cmp	r0, #0
 802e390:	f040 80fa 	bne.w	802e588 <_dtoa_r+0x690>
 802e394:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e398:	4620      	mov	r0, r4
 802e39a:	4629      	mov	r1, r5
 802e39c:	f7e2 fbac 	bl	8010af8 <__aeabi_dcmpeq>
 802e3a0:	b118      	cbz	r0, 802e3aa <_dtoa_r+0x4b2>
 802e3a2:	f018 0f01 	tst.w	r8, #1
 802e3a6:	f040 80ef 	bne.w	802e588 <_dtoa_r+0x690>
 802e3aa:	4649      	mov	r1, r9
 802e3ac:	4658      	mov	r0, fp
 802e3ae:	f004 fff8 	bl	80333a2 <_Bfree>
 802e3b2:	2300      	movs	r3, #0
 802e3b4:	7033      	strb	r3, [r6, #0]
 802e3b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e3b8:	3701      	adds	r7, #1
 802e3ba:	601f      	str	r7, [r3, #0]
 802e3bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e3be:	2b00      	cmp	r3, #0
 802e3c0:	f43f add1 	beq.w	802df66 <_dtoa_r+0x6e>
 802e3c4:	601e      	str	r6, [r3, #0]
 802e3c6:	e5ce      	b.n	802df66 <_dtoa_r+0x6e>
 802e3c8:	07e2      	lsls	r2, r4, #31
 802e3ca:	d505      	bpl.n	802e3d8 <_dtoa_r+0x4e0>
 802e3cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e3d0:	f7e2 f92a 	bl	8010628 <__aeabi_dmul>
 802e3d4:	3601      	adds	r6, #1
 802e3d6:	2301      	movs	r3, #1
 802e3d8:	1064      	asrs	r4, r4, #1
 802e3da:	3508      	adds	r5, #8
 802e3dc:	e73f      	b.n	802e25e <_dtoa_r+0x366>
 802e3de:	2602      	movs	r6, #2
 802e3e0:	e742      	b.n	802e268 <_dtoa_r+0x370>
 802e3e2:	9c07      	ldr	r4, [sp, #28]
 802e3e4:	9704      	str	r7, [sp, #16]
 802e3e6:	e761      	b.n	802e2ac <_dtoa_r+0x3b4>
 802e3e8:	4b27      	ldr	r3, [pc, #156]	@ (802e488 <_dtoa_r+0x590>)
 802e3ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802e3ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802e3f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e3f4:	4454      	add	r4, sl
 802e3f6:	2900      	cmp	r1, #0
 802e3f8:	d054      	beq.n	802e4a4 <_dtoa_r+0x5ac>
 802e3fa:	4929      	ldr	r1, [pc, #164]	@ (802e4a0 <_dtoa_r+0x5a8>)
 802e3fc:	2000      	movs	r0, #0
 802e3fe:	f7e2 fa3d 	bl	801087c <__aeabi_ddiv>
 802e402:	4633      	mov	r3, r6
 802e404:	462a      	mov	r2, r5
 802e406:	f7e1 ff57 	bl	80102b8 <__aeabi_dsub>
 802e40a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e40e:	4656      	mov	r6, sl
 802e410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e414:	f7e2 fbb8 	bl	8010b88 <__aeabi_d2iz>
 802e418:	4605      	mov	r5, r0
 802e41a:	f7e2 f89b 	bl	8010554 <__aeabi_i2d>
 802e41e:	4602      	mov	r2, r0
 802e420:	460b      	mov	r3, r1
 802e422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e426:	f7e1 ff47 	bl	80102b8 <__aeabi_dsub>
 802e42a:	3530      	adds	r5, #48	@ 0x30
 802e42c:	4602      	mov	r2, r0
 802e42e:	460b      	mov	r3, r1
 802e430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e434:	f806 5b01 	strb.w	r5, [r6], #1
 802e438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e43c:	f7e2 fb66 	bl	8010b0c <__aeabi_dcmplt>
 802e440:	2800      	cmp	r0, #0
 802e442:	d172      	bne.n	802e52a <_dtoa_r+0x632>
 802e444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e448:	4911      	ldr	r1, [pc, #68]	@ (802e490 <_dtoa_r+0x598>)
 802e44a:	2000      	movs	r0, #0
 802e44c:	f7e1 ff34 	bl	80102b8 <__aeabi_dsub>
 802e450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e454:	f7e2 fb5a 	bl	8010b0c <__aeabi_dcmplt>
 802e458:	2800      	cmp	r0, #0
 802e45a:	f040 8096 	bne.w	802e58a <_dtoa_r+0x692>
 802e45e:	42a6      	cmp	r6, r4
 802e460:	f43f af50 	beq.w	802e304 <_dtoa_r+0x40c>
 802e464:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e468:	4b0a      	ldr	r3, [pc, #40]	@ (802e494 <_dtoa_r+0x59c>)
 802e46a:	2200      	movs	r2, #0
 802e46c:	f7e2 f8dc 	bl	8010628 <__aeabi_dmul>
 802e470:	4b08      	ldr	r3, [pc, #32]	@ (802e494 <_dtoa_r+0x59c>)
 802e472:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e476:	2200      	movs	r2, #0
 802e478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e47c:	f7e2 f8d4 	bl	8010628 <__aeabi_dmul>
 802e480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e484:	e7c4      	b.n	802e410 <_dtoa_r+0x518>
 802e486:	bf00      	nop
 802e488:	0803c030 	.word	0x0803c030
 802e48c:	0803c008 	.word	0x0803c008
 802e490:	3ff00000 	.word	0x3ff00000
 802e494:	40240000 	.word	0x40240000
 802e498:	401c0000 	.word	0x401c0000
 802e49c:	40140000 	.word	0x40140000
 802e4a0:	3fe00000 	.word	0x3fe00000
 802e4a4:	4631      	mov	r1, r6
 802e4a6:	4628      	mov	r0, r5
 802e4a8:	f7e2 f8be 	bl	8010628 <__aeabi_dmul>
 802e4ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e4b0:	9415      	str	r4, [sp, #84]	@ 0x54
 802e4b2:	4656      	mov	r6, sl
 802e4b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e4b8:	f7e2 fb66 	bl	8010b88 <__aeabi_d2iz>
 802e4bc:	4605      	mov	r5, r0
 802e4be:	f7e2 f849 	bl	8010554 <__aeabi_i2d>
 802e4c2:	4602      	mov	r2, r0
 802e4c4:	460b      	mov	r3, r1
 802e4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e4ca:	f7e1 fef5 	bl	80102b8 <__aeabi_dsub>
 802e4ce:	3530      	adds	r5, #48	@ 0x30
 802e4d0:	f806 5b01 	strb.w	r5, [r6], #1
 802e4d4:	4602      	mov	r2, r0
 802e4d6:	460b      	mov	r3, r1
 802e4d8:	42a6      	cmp	r6, r4
 802e4da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e4de:	f04f 0200 	mov.w	r2, #0
 802e4e2:	d124      	bne.n	802e52e <_dtoa_r+0x636>
 802e4e4:	4bac      	ldr	r3, [pc, #688]	@ (802e798 <_dtoa_r+0x8a0>)
 802e4e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e4ea:	f7e1 fee7 	bl	80102bc <__adddf3>
 802e4ee:	4602      	mov	r2, r0
 802e4f0:	460b      	mov	r3, r1
 802e4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e4f6:	f7e2 fb27 	bl	8010b48 <__aeabi_dcmpgt>
 802e4fa:	2800      	cmp	r0, #0
 802e4fc:	d145      	bne.n	802e58a <_dtoa_r+0x692>
 802e4fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e502:	49a5      	ldr	r1, [pc, #660]	@ (802e798 <_dtoa_r+0x8a0>)
 802e504:	2000      	movs	r0, #0
 802e506:	f7e1 fed7 	bl	80102b8 <__aeabi_dsub>
 802e50a:	4602      	mov	r2, r0
 802e50c:	460b      	mov	r3, r1
 802e50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e512:	f7e2 fafb 	bl	8010b0c <__aeabi_dcmplt>
 802e516:	2800      	cmp	r0, #0
 802e518:	f43f aef4 	beq.w	802e304 <_dtoa_r+0x40c>
 802e51c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802e51e:	1e73      	subs	r3, r6, #1
 802e520:	9315      	str	r3, [sp, #84]	@ 0x54
 802e522:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802e526:	2b30      	cmp	r3, #48	@ 0x30
 802e528:	d0f8      	beq.n	802e51c <_dtoa_r+0x624>
 802e52a:	9f04      	ldr	r7, [sp, #16]
 802e52c:	e73d      	b.n	802e3aa <_dtoa_r+0x4b2>
 802e52e:	4b9b      	ldr	r3, [pc, #620]	@ (802e79c <_dtoa_r+0x8a4>)
 802e530:	f7e2 f87a 	bl	8010628 <__aeabi_dmul>
 802e534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e538:	e7bc      	b.n	802e4b4 <_dtoa_r+0x5bc>
 802e53a:	d10c      	bne.n	802e556 <_dtoa_r+0x65e>
 802e53c:	4b98      	ldr	r3, [pc, #608]	@ (802e7a0 <_dtoa_r+0x8a8>)
 802e53e:	2200      	movs	r2, #0
 802e540:	e9dd 0100 	ldrd	r0, r1, [sp]
 802e544:	f7e2 f870 	bl	8010628 <__aeabi_dmul>
 802e548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e54c:	f7e2 faf2 	bl	8010b34 <__aeabi_dcmpge>
 802e550:	2800      	cmp	r0, #0
 802e552:	f000 8157 	beq.w	802e804 <_dtoa_r+0x90c>
 802e556:	2400      	movs	r4, #0
 802e558:	4625      	mov	r5, r4
 802e55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e55c:	43db      	mvns	r3, r3
 802e55e:	9304      	str	r3, [sp, #16]
 802e560:	4656      	mov	r6, sl
 802e562:	2700      	movs	r7, #0
 802e564:	4621      	mov	r1, r4
 802e566:	4658      	mov	r0, fp
 802e568:	f004 ff1b 	bl	80333a2 <_Bfree>
 802e56c:	2d00      	cmp	r5, #0
 802e56e:	d0dc      	beq.n	802e52a <_dtoa_r+0x632>
 802e570:	b12f      	cbz	r7, 802e57e <_dtoa_r+0x686>
 802e572:	42af      	cmp	r7, r5
 802e574:	d003      	beq.n	802e57e <_dtoa_r+0x686>
 802e576:	4639      	mov	r1, r7
 802e578:	4658      	mov	r0, fp
 802e57a:	f004 ff12 	bl	80333a2 <_Bfree>
 802e57e:	4629      	mov	r1, r5
 802e580:	4658      	mov	r0, fp
 802e582:	f004 ff0e 	bl	80333a2 <_Bfree>
 802e586:	e7d0      	b.n	802e52a <_dtoa_r+0x632>
 802e588:	9704      	str	r7, [sp, #16]
 802e58a:	4633      	mov	r3, r6
 802e58c:	461e      	mov	r6, r3
 802e58e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e592:	2a39      	cmp	r2, #57	@ 0x39
 802e594:	d107      	bne.n	802e5a6 <_dtoa_r+0x6ae>
 802e596:	459a      	cmp	sl, r3
 802e598:	d1f8      	bne.n	802e58c <_dtoa_r+0x694>
 802e59a:	9a04      	ldr	r2, [sp, #16]
 802e59c:	3201      	adds	r2, #1
 802e59e:	9204      	str	r2, [sp, #16]
 802e5a0:	2230      	movs	r2, #48	@ 0x30
 802e5a2:	f88a 2000 	strb.w	r2, [sl]
 802e5a6:	781a      	ldrb	r2, [r3, #0]
 802e5a8:	3201      	adds	r2, #1
 802e5aa:	701a      	strb	r2, [r3, #0]
 802e5ac:	e7bd      	b.n	802e52a <_dtoa_r+0x632>
 802e5ae:	4b7b      	ldr	r3, [pc, #492]	@ (802e79c <_dtoa_r+0x8a4>)
 802e5b0:	2200      	movs	r2, #0
 802e5b2:	f7e2 f839 	bl	8010628 <__aeabi_dmul>
 802e5b6:	2200      	movs	r2, #0
 802e5b8:	2300      	movs	r3, #0
 802e5ba:	4604      	mov	r4, r0
 802e5bc:	460d      	mov	r5, r1
 802e5be:	f7e2 fa9b 	bl	8010af8 <__aeabi_dcmpeq>
 802e5c2:	2800      	cmp	r0, #0
 802e5c4:	f43f aeba 	beq.w	802e33c <_dtoa_r+0x444>
 802e5c8:	e6ef      	b.n	802e3aa <_dtoa_r+0x4b2>
 802e5ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802e5cc:	2a00      	cmp	r2, #0
 802e5ce:	f000 80db 	beq.w	802e788 <_dtoa_r+0x890>
 802e5d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e5d4:	2a01      	cmp	r2, #1
 802e5d6:	f300 80bf 	bgt.w	802e758 <_dtoa_r+0x860>
 802e5da:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802e5dc:	2a00      	cmp	r2, #0
 802e5de:	f000 80b7 	beq.w	802e750 <_dtoa_r+0x858>
 802e5e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802e5e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e5e8:	4646      	mov	r6, r8
 802e5ea:	9a08      	ldr	r2, [sp, #32]
 802e5ec:	2101      	movs	r1, #1
 802e5ee:	441a      	add	r2, r3
 802e5f0:	4658      	mov	r0, fp
 802e5f2:	4498      	add	r8, r3
 802e5f4:	9208      	str	r2, [sp, #32]
 802e5f6:	f004 ffb9 	bl	803356c <__i2b>
 802e5fa:	4605      	mov	r5, r0
 802e5fc:	b15e      	cbz	r6, 802e616 <_dtoa_r+0x71e>
 802e5fe:	9b08      	ldr	r3, [sp, #32]
 802e600:	2b00      	cmp	r3, #0
 802e602:	dd08      	ble.n	802e616 <_dtoa_r+0x71e>
 802e604:	42b3      	cmp	r3, r6
 802e606:	9a08      	ldr	r2, [sp, #32]
 802e608:	bfa8      	it	ge
 802e60a:	4633      	movge	r3, r6
 802e60c:	eba8 0803 	sub.w	r8, r8, r3
 802e610:	1af6      	subs	r6, r6, r3
 802e612:	1ad3      	subs	r3, r2, r3
 802e614:	9308      	str	r3, [sp, #32]
 802e616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e618:	b1f3      	cbz	r3, 802e658 <_dtoa_r+0x760>
 802e61a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e61c:	2b00      	cmp	r3, #0
 802e61e:	f000 80b7 	beq.w	802e790 <_dtoa_r+0x898>
 802e622:	b18c      	cbz	r4, 802e648 <_dtoa_r+0x750>
 802e624:	4629      	mov	r1, r5
 802e626:	4622      	mov	r2, r4
 802e628:	4658      	mov	r0, fp
 802e62a:	f005 f85f 	bl	80336ec <__pow5mult>
 802e62e:	464a      	mov	r2, r9
 802e630:	4601      	mov	r1, r0
 802e632:	4605      	mov	r5, r0
 802e634:	4658      	mov	r0, fp
 802e636:	f004 ffaf 	bl	8033598 <__multiply>
 802e63a:	4649      	mov	r1, r9
 802e63c:	9004      	str	r0, [sp, #16]
 802e63e:	4658      	mov	r0, fp
 802e640:	f004 feaf 	bl	80333a2 <_Bfree>
 802e644:	9b04      	ldr	r3, [sp, #16]
 802e646:	4699      	mov	r9, r3
 802e648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e64a:	1b1a      	subs	r2, r3, r4
 802e64c:	d004      	beq.n	802e658 <_dtoa_r+0x760>
 802e64e:	4649      	mov	r1, r9
 802e650:	4658      	mov	r0, fp
 802e652:	f005 f84b 	bl	80336ec <__pow5mult>
 802e656:	4681      	mov	r9, r0
 802e658:	2101      	movs	r1, #1
 802e65a:	4658      	mov	r0, fp
 802e65c:	f004 ff86 	bl	803356c <__i2b>
 802e660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e662:	4604      	mov	r4, r0
 802e664:	2b00      	cmp	r3, #0
 802e666:	f000 81cc 	beq.w	802ea02 <_dtoa_r+0xb0a>
 802e66a:	461a      	mov	r2, r3
 802e66c:	4601      	mov	r1, r0
 802e66e:	4658      	mov	r0, fp
 802e670:	f005 f83c 	bl	80336ec <__pow5mult>
 802e674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e676:	2b01      	cmp	r3, #1
 802e678:	4604      	mov	r4, r0
 802e67a:	f300 8095 	bgt.w	802e7a8 <_dtoa_r+0x8b0>
 802e67e:	9b02      	ldr	r3, [sp, #8]
 802e680:	2b00      	cmp	r3, #0
 802e682:	f040 8087 	bne.w	802e794 <_dtoa_r+0x89c>
 802e686:	9b03      	ldr	r3, [sp, #12]
 802e688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e68c:	2b00      	cmp	r3, #0
 802e68e:	f040 8089 	bne.w	802e7a4 <_dtoa_r+0x8ac>
 802e692:	9b03      	ldr	r3, [sp, #12]
 802e694:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e698:	0d1b      	lsrs	r3, r3, #20
 802e69a:	051b      	lsls	r3, r3, #20
 802e69c:	b12b      	cbz	r3, 802e6aa <_dtoa_r+0x7b2>
 802e69e:	9b08      	ldr	r3, [sp, #32]
 802e6a0:	3301      	adds	r3, #1
 802e6a2:	9308      	str	r3, [sp, #32]
 802e6a4:	f108 0801 	add.w	r8, r8, #1
 802e6a8:	2301      	movs	r3, #1
 802e6aa:	930a      	str	r3, [sp, #40]	@ 0x28
 802e6ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e6ae:	2b00      	cmp	r3, #0
 802e6b0:	f000 81ad 	beq.w	802ea0e <_dtoa_r+0xb16>
 802e6b4:	6923      	ldr	r3, [r4, #16]
 802e6b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e6ba:	6918      	ldr	r0, [r3, #16]
 802e6bc:	f004 ff0a 	bl	80334d4 <__hi0bits>
 802e6c0:	f1c0 0020 	rsb	r0, r0, #32
 802e6c4:	9b08      	ldr	r3, [sp, #32]
 802e6c6:	4418      	add	r0, r3
 802e6c8:	f010 001f 	ands.w	r0, r0, #31
 802e6cc:	d077      	beq.n	802e7be <_dtoa_r+0x8c6>
 802e6ce:	f1c0 0320 	rsb	r3, r0, #32
 802e6d2:	2b04      	cmp	r3, #4
 802e6d4:	dd6b      	ble.n	802e7ae <_dtoa_r+0x8b6>
 802e6d6:	9b08      	ldr	r3, [sp, #32]
 802e6d8:	f1c0 001c 	rsb	r0, r0, #28
 802e6dc:	4403      	add	r3, r0
 802e6de:	4480      	add	r8, r0
 802e6e0:	4406      	add	r6, r0
 802e6e2:	9308      	str	r3, [sp, #32]
 802e6e4:	f1b8 0f00 	cmp.w	r8, #0
 802e6e8:	dd05      	ble.n	802e6f6 <_dtoa_r+0x7fe>
 802e6ea:	4649      	mov	r1, r9
 802e6ec:	4642      	mov	r2, r8
 802e6ee:	4658      	mov	r0, fp
 802e6f0:	f005 f83c 	bl	803376c <__lshift>
 802e6f4:	4681      	mov	r9, r0
 802e6f6:	9b08      	ldr	r3, [sp, #32]
 802e6f8:	2b00      	cmp	r3, #0
 802e6fa:	dd05      	ble.n	802e708 <_dtoa_r+0x810>
 802e6fc:	4621      	mov	r1, r4
 802e6fe:	461a      	mov	r2, r3
 802e700:	4658      	mov	r0, fp
 802e702:	f005 f833 	bl	803376c <__lshift>
 802e706:	4604      	mov	r4, r0
 802e708:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e70a:	2b00      	cmp	r3, #0
 802e70c:	d059      	beq.n	802e7c2 <_dtoa_r+0x8ca>
 802e70e:	4621      	mov	r1, r4
 802e710:	4648      	mov	r0, r9
 802e712:	f005 f897 	bl	8033844 <__mcmp>
 802e716:	2800      	cmp	r0, #0
 802e718:	da53      	bge.n	802e7c2 <_dtoa_r+0x8ca>
 802e71a:	1e7b      	subs	r3, r7, #1
 802e71c:	9304      	str	r3, [sp, #16]
 802e71e:	4649      	mov	r1, r9
 802e720:	2300      	movs	r3, #0
 802e722:	220a      	movs	r2, #10
 802e724:	4658      	mov	r0, fp
 802e726:	f004 fe45 	bl	80333b4 <__multadd>
 802e72a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e72c:	4681      	mov	r9, r0
 802e72e:	2b00      	cmp	r3, #0
 802e730:	f000 816f 	beq.w	802ea12 <_dtoa_r+0xb1a>
 802e734:	2300      	movs	r3, #0
 802e736:	4629      	mov	r1, r5
 802e738:	220a      	movs	r2, #10
 802e73a:	4658      	mov	r0, fp
 802e73c:	f004 fe3a 	bl	80333b4 <__multadd>
 802e740:	9b00      	ldr	r3, [sp, #0]
 802e742:	2b00      	cmp	r3, #0
 802e744:	4605      	mov	r5, r0
 802e746:	dc67      	bgt.n	802e818 <_dtoa_r+0x920>
 802e748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e74a:	2b02      	cmp	r3, #2
 802e74c:	dc41      	bgt.n	802e7d2 <_dtoa_r+0x8da>
 802e74e:	e063      	b.n	802e818 <_dtoa_r+0x920>
 802e750:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e752:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802e756:	e746      	b.n	802e5e6 <_dtoa_r+0x6ee>
 802e758:	9b07      	ldr	r3, [sp, #28]
 802e75a:	1e5c      	subs	r4, r3, #1
 802e75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e75e:	42a3      	cmp	r3, r4
 802e760:	bfbf      	itttt	lt
 802e762:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802e764:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802e766:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802e768:	1ae3      	sublt	r3, r4, r3
 802e76a:	bfb4      	ite	lt
 802e76c:	18d2      	addlt	r2, r2, r3
 802e76e:	1b1c      	subge	r4, r3, r4
 802e770:	9b07      	ldr	r3, [sp, #28]
 802e772:	bfbc      	itt	lt
 802e774:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802e776:	2400      	movlt	r4, #0
 802e778:	2b00      	cmp	r3, #0
 802e77a:	bfb5      	itete	lt
 802e77c:	eba8 0603 	sublt.w	r6, r8, r3
 802e780:	9b07      	ldrge	r3, [sp, #28]
 802e782:	2300      	movlt	r3, #0
 802e784:	4646      	movge	r6, r8
 802e786:	e730      	b.n	802e5ea <_dtoa_r+0x6f2>
 802e788:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e78a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802e78c:	4646      	mov	r6, r8
 802e78e:	e735      	b.n	802e5fc <_dtoa_r+0x704>
 802e790:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802e792:	e75c      	b.n	802e64e <_dtoa_r+0x756>
 802e794:	2300      	movs	r3, #0
 802e796:	e788      	b.n	802e6aa <_dtoa_r+0x7b2>
 802e798:	3fe00000 	.word	0x3fe00000
 802e79c:	40240000 	.word	0x40240000
 802e7a0:	40140000 	.word	0x40140000
 802e7a4:	9b02      	ldr	r3, [sp, #8]
 802e7a6:	e780      	b.n	802e6aa <_dtoa_r+0x7b2>
 802e7a8:	2300      	movs	r3, #0
 802e7aa:	930a      	str	r3, [sp, #40]	@ 0x28
 802e7ac:	e782      	b.n	802e6b4 <_dtoa_r+0x7bc>
 802e7ae:	d099      	beq.n	802e6e4 <_dtoa_r+0x7ec>
 802e7b0:	9a08      	ldr	r2, [sp, #32]
 802e7b2:	331c      	adds	r3, #28
 802e7b4:	441a      	add	r2, r3
 802e7b6:	4498      	add	r8, r3
 802e7b8:	441e      	add	r6, r3
 802e7ba:	9208      	str	r2, [sp, #32]
 802e7bc:	e792      	b.n	802e6e4 <_dtoa_r+0x7ec>
 802e7be:	4603      	mov	r3, r0
 802e7c0:	e7f6      	b.n	802e7b0 <_dtoa_r+0x8b8>
 802e7c2:	9b07      	ldr	r3, [sp, #28]
 802e7c4:	9704      	str	r7, [sp, #16]
 802e7c6:	2b00      	cmp	r3, #0
 802e7c8:	dc20      	bgt.n	802e80c <_dtoa_r+0x914>
 802e7ca:	9300      	str	r3, [sp, #0]
 802e7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e7ce:	2b02      	cmp	r3, #2
 802e7d0:	dd1e      	ble.n	802e810 <_dtoa_r+0x918>
 802e7d2:	9b00      	ldr	r3, [sp, #0]
 802e7d4:	2b00      	cmp	r3, #0
 802e7d6:	f47f aec0 	bne.w	802e55a <_dtoa_r+0x662>
 802e7da:	4621      	mov	r1, r4
 802e7dc:	2205      	movs	r2, #5
 802e7de:	4658      	mov	r0, fp
 802e7e0:	f004 fde8 	bl	80333b4 <__multadd>
 802e7e4:	4601      	mov	r1, r0
 802e7e6:	4604      	mov	r4, r0
 802e7e8:	4648      	mov	r0, r9
 802e7ea:	f005 f82b 	bl	8033844 <__mcmp>
 802e7ee:	2800      	cmp	r0, #0
 802e7f0:	f77f aeb3 	ble.w	802e55a <_dtoa_r+0x662>
 802e7f4:	4656      	mov	r6, sl
 802e7f6:	2331      	movs	r3, #49	@ 0x31
 802e7f8:	f806 3b01 	strb.w	r3, [r6], #1
 802e7fc:	9b04      	ldr	r3, [sp, #16]
 802e7fe:	3301      	adds	r3, #1
 802e800:	9304      	str	r3, [sp, #16]
 802e802:	e6ae      	b.n	802e562 <_dtoa_r+0x66a>
 802e804:	9c07      	ldr	r4, [sp, #28]
 802e806:	9704      	str	r7, [sp, #16]
 802e808:	4625      	mov	r5, r4
 802e80a:	e7f3      	b.n	802e7f4 <_dtoa_r+0x8fc>
 802e80c:	9b07      	ldr	r3, [sp, #28]
 802e80e:	9300      	str	r3, [sp, #0]
 802e810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e812:	2b00      	cmp	r3, #0
 802e814:	f000 8101 	beq.w	802ea1a <_dtoa_r+0xb22>
 802e818:	2e00      	cmp	r6, #0
 802e81a:	dd05      	ble.n	802e828 <_dtoa_r+0x930>
 802e81c:	4629      	mov	r1, r5
 802e81e:	4632      	mov	r2, r6
 802e820:	4658      	mov	r0, fp
 802e822:	f004 ffa3 	bl	803376c <__lshift>
 802e826:	4605      	mov	r5, r0
 802e828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e82a:	2b00      	cmp	r3, #0
 802e82c:	d059      	beq.n	802e8e2 <_dtoa_r+0x9ea>
 802e82e:	6869      	ldr	r1, [r5, #4]
 802e830:	4658      	mov	r0, fp
 802e832:	f004 fd91 	bl	8033358 <_Balloc>
 802e836:	4606      	mov	r6, r0
 802e838:	b920      	cbnz	r0, 802e844 <_dtoa_r+0x94c>
 802e83a:	4b83      	ldr	r3, [pc, #524]	@ (802ea48 <_dtoa_r+0xb50>)
 802e83c:	4602      	mov	r2, r0
 802e83e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802e842:	e480      	b.n	802e146 <_dtoa_r+0x24e>
 802e844:	692a      	ldr	r2, [r5, #16]
 802e846:	3202      	adds	r2, #2
 802e848:	0092      	lsls	r2, r2, #2
 802e84a:	f105 010c 	add.w	r1, r5, #12
 802e84e:	300c      	adds	r0, #12
 802e850:	f7ff fa52 	bl	802dcf8 <memcpy>
 802e854:	2201      	movs	r2, #1
 802e856:	4631      	mov	r1, r6
 802e858:	4658      	mov	r0, fp
 802e85a:	f004 ff87 	bl	803376c <__lshift>
 802e85e:	f10a 0301 	add.w	r3, sl, #1
 802e862:	9307      	str	r3, [sp, #28]
 802e864:	9b00      	ldr	r3, [sp, #0]
 802e866:	4453      	add	r3, sl
 802e868:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e86a:	9b02      	ldr	r3, [sp, #8]
 802e86c:	f003 0301 	and.w	r3, r3, #1
 802e870:	462f      	mov	r7, r5
 802e872:	930a      	str	r3, [sp, #40]	@ 0x28
 802e874:	4605      	mov	r5, r0
 802e876:	9b07      	ldr	r3, [sp, #28]
 802e878:	4621      	mov	r1, r4
 802e87a:	3b01      	subs	r3, #1
 802e87c:	4648      	mov	r0, r9
 802e87e:	9300      	str	r3, [sp, #0]
 802e880:	f7ff faaf 	bl	802dde2 <quorem>
 802e884:	4639      	mov	r1, r7
 802e886:	9002      	str	r0, [sp, #8]
 802e888:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802e88c:	4648      	mov	r0, r9
 802e88e:	f004 ffd9 	bl	8033844 <__mcmp>
 802e892:	462a      	mov	r2, r5
 802e894:	9008      	str	r0, [sp, #32]
 802e896:	4621      	mov	r1, r4
 802e898:	4658      	mov	r0, fp
 802e89a:	f004 ffef 	bl	803387c <__mdiff>
 802e89e:	68c2      	ldr	r2, [r0, #12]
 802e8a0:	4606      	mov	r6, r0
 802e8a2:	bb02      	cbnz	r2, 802e8e6 <_dtoa_r+0x9ee>
 802e8a4:	4601      	mov	r1, r0
 802e8a6:	4648      	mov	r0, r9
 802e8a8:	f004 ffcc 	bl	8033844 <__mcmp>
 802e8ac:	4602      	mov	r2, r0
 802e8ae:	4631      	mov	r1, r6
 802e8b0:	4658      	mov	r0, fp
 802e8b2:	920e      	str	r2, [sp, #56]	@ 0x38
 802e8b4:	f004 fd75 	bl	80333a2 <_Bfree>
 802e8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e8ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e8bc:	9e07      	ldr	r6, [sp, #28]
 802e8be:	ea43 0102 	orr.w	r1, r3, r2
 802e8c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e8c4:	4319      	orrs	r1, r3
 802e8c6:	d110      	bne.n	802e8ea <_dtoa_r+0x9f2>
 802e8c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e8cc:	d029      	beq.n	802e922 <_dtoa_r+0xa2a>
 802e8ce:	9b08      	ldr	r3, [sp, #32]
 802e8d0:	2b00      	cmp	r3, #0
 802e8d2:	dd02      	ble.n	802e8da <_dtoa_r+0x9e2>
 802e8d4:	9b02      	ldr	r3, [sp, #8]
 802e8d6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802e8da:	9b00      	ldr	r3, [sp, #0]
 802e8dc:	f883 8000 	strb.w	r8, [r3]
 802e8e0:	e640      	b.n	802e564 <_dtoa_r+0x66c>
 802e8e2:	4628      	mov	r0, r5
 802e8e4:	e7bb      	b.n	802e85e <_dtoa_r+0x966>
 802e8e6:	2201      	movs	r2, #1
 802e8e8:	e7e1      	b.n	802e8ae <_dtoa_r+0x9b6>
 802e8ea:	9b08      	ldr	r3, [sp, #32]
 802e8ec:	2b00      	cmp	r3, #0
 802e8ee:	db04      	blt.n	802e8fa <_dtoa_r+0xa02>
 802e8f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802e8f2:	430b      	orrs	r3, r1
 802e8f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802e8f6:	430b      	orrs	r3, r1
 802e8f8:	d120      	bne.n	802e93c <_dtoa_r+0xa44>
 802e8fa:	2a00      	cmp	r2, #0
 802e8fc:	dded      	ble.n	802e8da <_dtoa_r+0x9e2>
 802e8fe:	4649      	mov	r1, r9
 802e900:	2201      	movs	r2, #1
 802e902:	4658      	mov	r0, fp
 802e904:	f004 ff32 	bl	803376c <__lshift>
 802e908:	4621      	mov	r1, r4
 802e90a:	4681      	mov	r9, r0
 802e90c:	f004 ff9a 	bl	8033844 <__mcmp>
 802e910:	2800      	cmp	r0, #0
 802e912:	dc03      	bgt.n	802e91c <_dtoa_r+0xa24>
 802e914:	d1e1      	bne.n	802e8da <_dtoa_r+0x9e2>
 802e916:	f018 0f01 	tst.w	r8, #1
 802e91a:	d0de      	beq.n	802e8da <_dtoa_r+0x9e2>
 802e91c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e920:	d1d8      	bne.n	802e8d4 <_dtoa_r+0x9dc>
 802e922:	9a00      	ldr	r2, [sp, #0]
 802e924:	2339      	movs	r3, #57	@ 0x39
 802e926:	7013      	strb	r3, [r2, #0]
 802e928:	4633      	mov	r3, r6
 802e92a:	461e      	mov	r6, r3
 802e92c:	3b01      	subs	r3, #1
 802e92e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802e932:	2a39      	cmp	r2, #57	@ 0x39
 802e934:	d052      	beq.n	802e9dc <_dtoa_r+0xae4>
 802e936:	3201      	adds	r2, #1
 802e938:	701a      	strb	r2, [r3, #0]
 802e93a:	e613      	b.n	802e564 <_dtoa_r+0x66c>
 802e93c:	2a00      	cmp	r2, #0
 802e93e:	dd07      	ble.n	802e950 <_dtoa_r+0xa58>
 802e940:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e944:	d0ed      	beq.n	802e922 <_dtoa_r+0xa2a>
 802e946:	9a00      	ldr	r2, [sp, #0]
 802e948:	f108 0301 	add.w	r3, r8, #1
 802e94c:	7013      	strb	r3, [r2, #0]
 802e94e:	e609      	b.n	802e564 <_dtoa_r+0x66c>
 802e950:	9b07      	ldr	r3, [sp, #28]
 802e952:	9a07      	ldr	r2, [sp, #28]
 802e954:	f803 8c01 	strb.w	r8, [r3, #-1]
 802e958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e95a:	4293      	cmp	r3, r2
 802e95c:	d028      	beq.n	802e9b0 <_dtoa_r+0xab8>
 802e95e:	4649      	mov	r1, r9
 802e960:	2300      	movs	r3, #0
 802e962:	220a      	movs	r2, #10
 802e964:	4658      	mov	r0, fp
 802e966:	f004 fd25 	bl	80333b4 <__multadd>
 802e96a:	42af      	cmp	r7, r5
 802e96c:	4681      	mov	r9, r0
 802e96e:	f04f 0300 	mov.w	r3, #0
 802e972:	f04f 020a 	mov.w	r2, #10
 802e976:	4639      	mov	r1, r7
 802e978:	4658      	mov	r0, fp
 802e97a:	d107      	bne.n	802e98c <_dtoa_r+0xa94>
 802e97c:	f004 fd1a 	bl	80333b4 <__multadd>
 802e980:	4607      	mov	r7, r0
 802e982:	4605      	mov	r5, r0
 802e984:	9b07      	ldr	r3, [sp, #28]
 802e986:	3301      	adds	r3, #1
 802e988:	9307      	str	r3, [sp, #28]
 802e98a:	e774      	b.n	802e876 <_dtoa_r+0x97e>
 802e98c:	f004 fd12 	bl	80333b4 <__multadd>
 802e990:	4629      	mov	r1, r5
 802e992:	4607      	mov	r7, r0
 802e994:	2300      	movs	r3, #0
 802e996:	220a      	movs	r2, #10
 802e998:	4658      	mov	r0, fp
 802e99a:	f004 fd0b 	bl	80333b4 <__multadd>
 802e99e:	4605      	mov	r5, r0
 802e9a0:	e7f0      	b.n	802e984 <_dtoa_r+0xa8c>
 802e9a2:	9b00      	ldr	r3, [sp, #0]
 802e9a4:	2b00      	cmp	r3, #0
 802e9a6:	bfcc      	ite	gt
 802e9a8:	461e      	movgt	r6, r3
 802e9aa:	2601      	movle	r6, #1
 802e9ac:	4456      	add	r6, sl
 802e9ae:	2700      	movs	r7, #0
 802e9b0:	4649      	mov	r1, r9
 802e9b2:	2201      	movs	r2, #1
 802e9b4:	4658      	mov	r0, fp
 802e9b6:	f004 fed9 	bl	803376c <__lshift>
 802e9ba:	4621      	mov	r1, r4
 802e9bc:	4681      	mov	r9, r0
 802e9be:	f004 ff41 	bl	8033844 <__mcmp>
 802e9c2:	2800      	cmp	r0, #0
 802e9c4:	dcb0      	bgt.n	802e928 <_dtoa_r+0xa30>
 802e9c6:	d102      	bne.n	802e9ce <_dtoa_r+0xad6>
 802e9c8:	f018 0f01 	tst.w	r8, #1
 802e9cc:	d1ac      	bne.n	802e928 <_dtoa_r+0xa30>
 802e9ce:	4633      	mov	r3, r6
 802e9d0:	461e      	mov	r6, r3
 802e9d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e9d6:	2a30      	cmp	r2, #48	@ 0x30
 802e9d8:	d0fa      	beq.n	802e9d0 <_dtoa_r+0xad8>
 802e9da:	e5c3      	b.n	802e564 <_dtoa_r+0x66c>
 802e9dc:	459a      	cmp	sl, r3
 802e9de:	d1a4      	bne.n	802e92a <_dtoa_r+0xa32>
 802e9e0:	9b04      	ldr	r3, [sp, #16]
 802e9e2:	3301      	adds	r3, #1
 802e9e4:	9304      	str	r3, [sp, #16]
 802e9e6:	2331      	movs	r3, #49	@ 0x31
 802e9e8:	f88a 3000 	strb.w	r3, [sl]
 802e9ec:	e5ba      	b.n	802e564 <_dtoa_r+0x66c>
 802e9ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e9f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802ea4c <_dtoa_r+0xb54>
 802e9f4:	2b00      	cmp	r3, #0
 802e9f6:	f43f aab6 	beq.w	802df66 <_dtoa_r+0x6e>
 802e9fa:	f10a 0308 	add.w	r3, sl, #8
 802e9fe:	f7ff bab0 	b.w	802df62 <_dtoa_r+0x6a>
 802ea02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ea04:	2b01      	cmp	r3, #1
 802ea06:	f77f ae3a 	ble.w	802e67e <_dtoa_r+0x786>
 802ea0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ea0c:	930a      	str	r3, [sp, #40]	@ 0x28
 802ea0e:	2001      	movs	r0, #1
 802ea10:	e658      	b.n	802e6c4 <_dtoa_r+0x7cc>
 802ea12:	9b00      	ldr	r3, [sp, #0]
 802ea14:	2b00      	cmp	r3, #0
 802ea16:	f77f aed9 	ble.w	802e7cc <_dtoa_r+0x8d4>
 802ea1a:	4656      	mov	r6, sl
 802ea1c:	4621      	mov	r1, r4
 802ea1e:	4648      	mov	r0, r9
 802ea20:	f7ff f9df 	bl	802dde2 <quorem>
 802ea24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ea28:	f806 8b01 	strb.w	r8, [r6], #1
 802ea2c:	9b00      	ldr	r3, [sp, #0]
 802ea2e:	eba6 020a 	sub.w	r2, r6, sl
 802ea32:	4293      	cmp	r3, r2
 802ea34:	ddb5      	ble.n	802e9a2 <_dtoa_r+0xaaa>
 802ea36:	4649      	mov	r1, r9
 802ea38:	2300      	movs	r3, #0
 802ea3a:	220a      	movs	r2, #10
 802ea3c:	4658      	mov	r0, fp
 802ea3e:	f004 fcb9 	bl	80333b4 <__multadd>
 802ea42:	4681      	mov	r9, r0
 802ea44:	e7ea      	b.n	802ea1c <_dtoa_r+0xb24>
 802ea46:	bf00      	nop
 802ea48:	0803beae 	.word	0x0803beae
 802ea4c:	0803bea1 	.word	0x0803bea1

0802ea50 <_malloc_trim_r>:
 802ea50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ea54:	4606      	mov	r6, r0
 802ea56:	2008      	movs	r0, #8
 802ea58:	4689      	mov	r9, r1
 802ea5a:	f006 fb53 	bl	8035104 <sysconf>
 802ea5e:	4f24      	ldr	r7, [pc, #144]	@ (802eaf0 <_malloc_trim_r+0xa0>)
 802ea60:	4680      	mov	r8, r0
 802ea62:	4630      	mov	r0, r6
 802ea64:	f004 fc6c 	bl	8033340 <__malloc_lock>
 802ea68:	68bb      	ldr	r3, [r7, #8]
 802ea6a:	685d      	ldr	r5, [r3, #4]
 802ea6c:	f025 0503 	bic.w	r5, r5, #3
 802ea70:	f1a5 0411 	sub.w	r4, r5, #17
 802ea74:	eba4 0409 	sub.w	r4, r4, r9
 802ea78:	4444      	add	r4, r8
 802ea7a:	fbb4 f4f8 	udiv	r4, r4, r8
 802ea7e:	3c01      	subs	r4, #1
 802ea80:	fb08 f404 	mul.w	r4, r8, r4
 802ea84:	45a0      	cmp	r8, r4
 802ea86:	dd05      	ble.n	802ea94 <_malloc_trim_r+0x44>
 802ea88:	4630      	mov	r0, r6
 802ea8a:	f004 fc5f 	bl	803334c <__malloc_unlock>
 802ea8e:	2000      	movs	r0, #0
 802ea90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ea94:	2100      	movs	r1, #0
 802ea96:	4630      	mov	r0, r6
 802ea98:	f006 fb24 	bl	80350e4 <_sbrk_r>
 802ea9c:	68bb      	ldr	r3, [r7, #8]
 802ea9e:	442b      	add	r3, r5
 802eaa0:	4298      	cmp	r0, r3
 802eaa2:	d1f1      	bne.n	802ea88 <_malloc_trim_r+0x38>
 802eaa4:	4261      	negs	r1, r4
 802eaa6:	4630      	mov	r0, r6
 802eaa8:	f006 fb1c 	bl	80350e4 <_sbrk_r>
 802eaac:	3001      	adds	r0, #1
 802eaae:	d110      	bne.n	802ead2 <_malloc_trim_r+0x82>
 802eab0:	2100      	movs	r1, #0
 802eab2:	4630      	mov	r0, r6
 802eab4:	f006 fb16 	bl	80350e4 <_sbrk_r>
 802eab8:	68ba      	ldr	r2, [r7, #8]
 802eaba:	1a83      	subs	r3, r0, r2
 802eabc:	2b0f      	cmp	r3, #15
 802eabe:	dde3      	ble.n	802ea88 <_malloc_trim_r+0x38>
 802eac0:	490c      	ldr	r1, [pc, #48]	@ (802eaf4 <_malloc_trim_r+0xa4>)
 802eac2:	6809      	ldr	r1, [r1, #0]
 802eac4:	1a40      	subs	r0, r0, r1
 802eac6:	490c      	ldr	r1, [pc, #48]	@ (802eaf8 <_malloc_trim_r+0xa8>)
 802eac8:	f043 0301 	orr.w	r3, r3, #1
 802eacc:	6008      	str	r0, [r1, #0]
 802eace:	6053      	str	r3, [r2, #4]
 802ead0:	e7da      	b.n	802ea88 <_malloc_trim_r+0x38>
 802ead2:	68bb      	ldr	r3, [r7, #8]
 802ead4:	4a08      	ldr	r2, [pc, #32]	@ (802eaf8 <_malloc_trim_r+0xa8>)
 802ead6:	1b2d      	subs	r5, r5, r4
 802ead8:	f045 0501 	orr.w	r5, r5, #1
 802eadc:	605d      	str	r5, [r3, #4]
 802eade:	6813      	ldr	r3, [r2, #0]
 802eae0:	4630      	mov	r0, r6
 802eae2:	1b1b      	subs	r3, r3, r4
 802eae4:	6013      	str	r3, [r2, #0]
 802eae6:	f004 fc31 	bl	803334c <__malloc_unlock>
 802eaea:	2001      	movs	r0, #1
 802eaec:	e7d0      	b.n	802ea90 <_malloc_trim_r+0x40>
 802eaee:	bf00      	nop
 802eaf0:	2000040c 	.word	0x2000040c
 802eaf4:	20000404 	.word	0x20000404
 802eaf8:	2001a054 	.word	0x2001a054

0802eafc <_free_r>:
 802eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eafe:	4604      	mov	r4, r0
 802eb00:	460f      	mov	r7, r1
 802eb02:	2900      	cmp	r1, #0
 802eb04:	f000 80b1 	beq.w	802ec6a <_free_r+0x16e>
 802eb08:	f004 fc1a 	bl	8033340 <__malloc_lock>
 802eb0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802eb10:	4d56      	ldr	r5, [pc, #344]	@ (802ec6c <_free_r+0x170>)
 802eb12:	f022 0001 	bic.w	r0, r2, #1
 802eb16:	f1a7 0308 	sub.w	r3, r7, #8
 802eb1a:	eb03 0c00 	add.w	ip, r3, r0
 802eb1e:	68a9      	ldr	r1, [r5, #8]
 802eb20:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802eb24:	4561      	cmp	r1, ip
 802eb26:	f026 0603 	bic.w	r6, r6, #3
 802eb2a:	f002 0201 	and.w	r2, r2, #1
 802eb2e:	d11b      	bne.n	802eb68 <_free_r+0x6c>
 802eb30:	4406      	add	r6, r0
 802eb32:	b93a      	cbnz	r2, 802eb44 <_free_r+0x48>
 802eb34:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802eb38:	1a9b      	subs	r3, r3, r2
 802eb3a:	4416      	add	r6, r2
 802eb3c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802eb40:	60ca      	str	r2, [r1, #12]
 802eb42:	6091      	str	r1, [r2, #8]
 802eb44:	f046 0201 	orr.w	r2, r6, #1
 802eb48:	605a      	str	r2, [r3, #4]
 802eb4a:	60ab      	str	r3, [r5, #8]
 802eb4c:	4b48      	ldr	r3, [pc, #288]	@ (802ec70 <_free_r+0x174>)
 802eb4e:	681b      	ldr	r3, [r3, #0]
 802eb50:	42b3      	cmp	r3, r6
 802eb52:	d804      	bhi.n	802eb5e <_free_r+0x62>
 802eb54:	4b47      	ldr	r3, [pc, #284]	@ (802ec74 <_free_r+0x178>)
 802eb56:	4620      	mov	r0, r4
 802eb58:	6819      	ldr	r1, [r3, #0]
 802eb5a:	f7ff ff79 	bl	802ea50 <_malloc_trim_r>
 802eb5e:	4620      	mov	r0, r4
 802eb60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802eb64:	f004 bbf2 	b.w	803334c <__malloc_unlock>
 802eb68:	f8cc 6004 	str.w	r6, [ip, #4]
 802eb6c:	2a00      	cmp	r2, #0
 802eb6e:	d138      	bne.n	802ebe2 <_free_r+0xe6>
 802eb70:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802eb74:	1a5b      	subs	r3, r3, r1
 802eb76:	4408      	add	r0, r1
 802eb78:	6899      	ldr	r1, [r3, #8]
 802eb7a:	f105 0708 	add.w	r7, r5, #8
 802eb7e:	42b9      	cmp	r1, r7
 802eb80:	d031      	beq.n	802ebe6 <_free_r+0xea>
 802eb82:	68df      	ldr	r7, [r3, #12]
 802eb84:	60cf      	str	r7, [r1, #12]
 802eb86:	60b9      	str	r1, [r7, #8]
 802eb88:	eb0c 0106 	add.w	r1, ip, r6
 802eb8c:	6849      	ldr	r1, [r1, #4]
 802eb8e:	07c9      	lsls	r1, r1, #31
 802eb90:	d40b      	bmi.n	802ebaa <_free_r+0xae>
 802eb92:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802eb96:	4430      	add	r0, r6
 802eb98:	bb3a      	cbnz	r2, 802ebea <_free_r+0xee>
 802eb9a:	4e37      	ldr	r6, [pc, #220]	@ (802ec78 <_free_r+0x17c>)
 802eb9c:	42b1      	cmp	r1, r6
 802eb9e:	d124      	bne.n	802ebea <_free_r+0xee>
 802eba0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802eba4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802eba8:	2201      	movs	r2, #1
 802ebaa:	f040 0101 	orr.w	r1, r0, #1
 802ebae:	6059      	str	r1, [r3, #4]
 802ebb0:	5018      	str	r0, [r3, r0]
 802ebb2:	2a00      	cmp	r2, #0
 802ebb4:	d1d3      	bne.n	802eb5e <_free_r+0x62>
 802ebb6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802ebba:	d21b      	bcs.n	802ebf4 <_free_r+0xf8>
 802ebbc:	08c2      	lsrs	r2, r0, #3
 802ebbe:	2101      	movs	r1, #1
 802ebc0:	0940      	lsrs	r0, r0, #5
 802ebc2:	4081      	lsls	r1, r0
 802ebc4:	6868      	ldr	r0, [r5, #4]
 802ebc6:	3201      	adds	r2, #1
 802ebc8:	4301      	orrs	r1, r0
 802ebca:	6069      	str	r1, [r5, #4]
 802ebcc:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802ebd0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802ebd4:	3908      	subs	r1, #8
 802ebd6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802ebda:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802ebde:	60c3      	str	r3, [r0, #12]
 802ebe0:	e7bd      	b.n	802eb5e <_free_r+0x62>
 802ebe2:	2200      	movs	r2, #0
 802ebe4:	e7d0      	b.n	802eb88 <_free_r+0x8c>
 802ebe6:	2201      	movs	r2, #1
 802ebe8:	e7ce      	b.n	802eb88 <_free_r+0x8c>
 802ebea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802ebee:	60ce      	str	r6, [r1, #12]
 802ebf0:	60b1      	str	r1, [r6, #8]
 802ebf2:	e7da      	b.n	802ebaa <_free_r+0xae>
 802ebf4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802ebf8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802ebfc:	d214      	bcs.n	802ec28 <_free_r+0x12c>
 802ebfe:	0982      	lsrs	r2, r0, #6
 802ec00:	3238      	adds	r2, #56	@ 0x38
 802ec02:	1c51      	adds	r1, r2, #1
 802ec04:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802ec08:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802ec0c:	428e      	cmp	r6, r1
 802ec0e:	d125      	bne.n	802ec5c <_free_r+0x160>
 802ec10:	2001      	movs	r0, #1
 802ec12:	1092      	asrs	r2, r2, #2
 802ec14:	fa00 f202 	lsl.w	r2, r0, r2
 802ec18:	6868      	ldr	r0, [r5, #4]
 802ec1a:	4302      	orrs	r2, r0
 802ec1c:	606a      	str	r2, [r5, #4]
 802ec1e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802ec22:	60b3      	str	r3, [r6, #8]
 802ec24:	60cb      	str	r3, [r1, #12]
 802ec26:	e79a      	b.n	802eb5e <_free_r+0x62>
 802ec28:	2a14      	cmp	r2, #20
 802ec2a:	d801      	bhi.n	802ec30 <_free_r+0x134>
 802ec2c:	325b      	adds	r2, #91	@ 0x5b
 802ec2e:	e7e8      	b.n	802ec02 <_free_r+0x106>
 802ec30:	2a54      	cmp	r2, #84	@ 0x54
 802ec32:	d802      	bhi.n	802ec3a <_free_r+0x13e>
 802ec34:	0b02      	lsrs	r2, r0, #12
 802ec36:	326e      	adds	r2, #110	@ 0x6e
 802ec38:	e7e3      	b.n	802ec02 <_free_r+0x106>
 802ec3a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802ec3e:	d802      	bhi.n	802ec46 <_free_r+0x14a>
 802ec40:	0bc2      	lsrs	r2, r0, #15
 802ec42:	3277      	adds	r2, #119	@ 0x77
 802ec44:	e7dd      	b.n	802ec02 <_free_r+0x106>
 802ec46:	f240 5154 	movw	r1, #1364	@ 0x554
 802ec4a:	428a      	cmp	r2, r1
 802ec4c:	bf9a      	itte	ls
 802ec4e:	0c82      	lsrls	r2, r0, #18
 802ec50:	327c      	addls	r2, #124	@ 0x7c
 802ec52:	227e      	movhi	r2, #126	@ 0x7e
 802ec54:	e7d5      	b.n	802ec02 <_free_r+0x106>
 802ec56:	6889      	ldr	r1, [r1, #8]
 802ec58:	428e      	cmp	r6, r1
 802ec5a:	d004      	beq.n	802ec66 <_free_r+0x16a>
 802ec5c:	684a      	ldr	r2, [r1, #4]
 802ec5e:	f022 0203 	bic.w	r2, r2, #3
 802ec62:	4282      	cmp	r2, r0
 802ec64:	d8f7      	bhi.n	802ec56 <_free_r+0x15a>
 802ec66:	68ce      	ldr	r6, [r1, #12]
 802ec68:	e7d9      	b.n	802ec1e <_free_r+0x122>
 802ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ec6c:	2000040c 	.word	0x2000040c
 802ec70:	20000408 	.word	0x20000408
 802ec74:	2001a084 	.word	0x2001a084
 802ec78:	20000414 	.word	0x20000414

0802ec7c <_findenv_r>:
 802ec7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ec80:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802ecf0 <_findenv_r+0x74>
 802ec84:	4606      	mov	r6, r0
 802ec86:	4689      	mov	r9, r1
 802ec88:	4617      	mov	r7, r2
 802ec8a:	f006 fc31 	bl	80354f0 <__env_lock>
 802ec8e:	f8da 4000 	ldr.w	r4, [sl]
 802ec92:	b134      	cbz	r4, 802eca2 <_findenv_r+0x26>
 802ec94:	464b      	mov	r3, r9
 802ec96:	4698      	mov	r8, r3
 802ec98:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ec9c:	b13a      	cbz	r2, 802ecae <_findenv_r+0x32>
 802ec9e:	2a3d      	cmp	r2, #61	@ 0x3d
 802eca0:	d1f9      	bne.n	802ec96 <_findenv_r+0x1a>
 802eca2:	4630      	mov	r0, r6
 802eca4:	f006 fc2a 	bl	80354fc <__env_unlock>
 802eca8:	2000      	movs	r0, #0
 802ecaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ecae:	eba8 0809 	sub.w	r8, r8, r9
 802ecb2:	46a3      	mov	fp, r4
 802ecb4:	f854 0b04 	ldr.w	r0, [r4], #4
 802ecb8:	2800      	cmp	r0, #0
 802ecba:	d0f2      	beq.n	802eca2 <_findenv_r+0x26>
 802ecbc:	4642      	mov	r2, r8
 802ecbe:	4649      	mov	r1, r9
 802ecc0:	f7fd fe13 	bl	802c8ea <strncmp>
 802ecc4:	2800      	cmp	r0, #0
 802ecc6:	d1f4      	bne.n	802ecb2 <_findenv_r+0x36>
 802ecc8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802eccc:	eb03 0508 	add.w	r5, r3, r8
 802ecd0:	f813 3008 	ldrb.w	r3, [r3, r8]
 802ecd4:	2b3d      	cmp	r3, #61	@ 0x3d
 802ecd6:	d1ec      	bne.n	802ecb2 <_findenv_r+0x36>
 802ecd8:	f8da 3000 	ldr.w	r3, [sl]
 802ecdc:	ebab 0303 	sub.w	r3, fp, r3
 802ece0:	109b      	asrs	r3, r3, #2
 802ece2:	4630      	mov	r0, r6
 802ece4:	603b      	str	r3, [r7, #0]
 802ece6:	f006 fc09 	bl	80354fc <__env_unlock>
 802ecea:	1c68      	adds	r0, r5, #1
 802ecec:	e7dd      	b.n	802ecaa <_findenv_r+0x2e>
 802ecee:	bf00      	nop
 802ecf0:	20000014 	.word	0x20000014

0802ecf4 <_getenv_r>:
 802ecf4:	b507      	push	{r0, r1, r2, lr}
 802ecf6:	aa01      	add	r2, sp, #4
 802ecf8:	f7ff ffc0 	bl	802ec7c <_findenv_r>
 802ecfc:	b003      	add	sp, #12
 802ecfe:	f85d fb04 	ldr.w	pc, [sp], #4

0802ed02 <labs>:
 802ed02:	2800      	cmp	r0, #0
 802ed04:	bfb8      	it	lt
 802ed06:	4240      	neglt	r0, r0
 802ed08:	4770      	bx	lr
	...

0802ed0c <malloc>:
 802ed0c:	4b02      	ldr	r3, [pc, #8]	@ (802ed18 <malloc+0xc>)
 802ed0e:	4601      	mov	r1, r0
 802ed10:	6818      	ldr	r0, [r3, #0]
 802ed12:	f000 b80b 	b.w	802ed2c <_malloc_r>
 802ed16:	bf00      	nop
 802ed18:	200002d8 	.word	0x200002d8

0802ed1c <free>:
 802ed1c:	4b02      	ldr	r3, [pc, #8]	@ (802ed28 <free+0xc>)
 802ed1e:	4601      	mov	r1, r0
 802ed20:	6818      	ldr	r0, [r3, #0]
 802ed22:	f7ff beeb 	b.w	802eafc <_free_r>
 802ed26:	bf00      	nop
 802ed28:	200002d8 	.word	0x200002d8

0802ed2c <_malloc_r>:
 802ed2c:	f101 030b 	add.w	r3, r1, #11
 802ed30:	2b16      	cmp	r3, #22
 802ed32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed36:	4605      	mov	r5, r0
 802ed38:	d906      	bls.n	802ed48 <_malloc_r+0x1c>
 802ed3a:	f033 0707 	bics.w	r7, r3, #7
 802ed3e:	d504      	bpl.n	802ed4a <_malloc_r+0x1e>
 802ed40:	230c      	movs	r3, #12
 802ed42:	602b      	str	r3, [r5, #0]
 802ed44:	2400      	movs	r4, #0
 802ed46:	e1a3      	b.n	802f090 <_malloc_r+0x364>
 802ed48:	2710      	movs	r7, #16
 802ed4a:	42b9      	cmp	r1, r7
 802ed4c:	d8f8      	bhi.n	802ed40 <_malloc_r+0x14>
 802ed4e:	4628      	mov	r0, r5
 802ed50:	f004 faf6 	bl	8033340 <__malloc_lock>
 802ed54:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802ed58:	4eaf      	ldr	r6, [pc, #700]	@ (802f018 <_malloc_r+0x2ec>)
 802ed5a:	d237      	bcs.n	802edcc <_malloc_r+0xa0>
 802ed5c:	f107 0208 	add.w	r2, r7, #8
 802ed60:	4432      	add	r2, r6
 802ed62:	f1a2 0108 	sub.w	r1, r2, #8
 802ed66:	6854      	ldr	r4, [r2, #4]
 802ed68:	428c      	cmp	r4, r1
 802ed6a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802ed6e:	d102      	bne.n	802ed76 <_malloc_r+0x4a>
 802ed70:	68d4      	ldr	r4, [r2, #12]
 802ed72:	42a2      	cmp	r2, r4
 802ed74:	d010      	beq.n	802ed98 <_malloc_r+0x6c>
 802ed76:	6863      	ldr	r3, [r4, #4]
 802ed78:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802ed7c:	f023 0303 	bic.w	r3, r3, #3
 802ed80:	60ca      	str	r2, [r1, #12]
 802ed82:	4423      	add	r3, r4
 802ed84:	6091      	str	r1, [r2, #8]
 802ed86:	685a      	ldr	r2, [r3, #4]
 802ed88:	f042 0201 	orr.w	r2, r2, #1
 802ed8c:	605a      	str	r2, [r3, #4]
 802ed8e:	4628      	mov	r0, r5
 802ed90:	f004 fadc 	bl	803334c <__malloc_unlock>
 802ed94:	3408      	adds	r4, #8
 802ed96:	e17b      	b.n	802f090 <_malloc_r+0x364>
 802ed98:	3302      	adds	r3, #2
 802ed9a:	6934      	ldr	r4, [r6, #16]
 802ed9c:	499f      	ldr	r1, [pc, #636]	@ (802f01c <_malloc_r+0x2f0>)
 802ed9e:	428c      	cmp	r4, r1
 802eda0:	d077      	beq.n	802ee92 <_malloc_r+0x166>
 802eda2:	6862      	ldr	r2, [r4, #4]
 802eda4:	f022 0c03 	bic.w	ip, r2, #3
 802eda8:	ebac 0007 	sub.w	r0, ip, r7
 802edac:	280f      	cmp	r0, #15
 802edae:	dd48      	ble.n	802ee42 <_malloc_r+0x116>
 802edb0:	19e2      	adds	r2, r4, r7
 802edb2:	f040 0301 	orr.w	r3, r0, #1
 802edb6:	f047 0701 	orr.w	r7, r7, #1
 802edba:	6067      	str	r7, [r4, #4]
 802edbc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802edc0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802edc4:	6053      	str	r3, [r2, #4]
 802edc6:	f844 000c 	str.w	r0, [r4, ip]
 802edca:	e7e0      	b.n	802ed8e <_malloc_r+0x62>
 802edcc:	0a7b      	lsrs	r3, r7, #9
 802edce:	d02a      	beq.n	802ee26 <_malloc_r+0xfa>
 802edd0:	2b04      	cmp	r3, #4
 802edd2:	d812      	bhi.n	802edfa <_malloc_r+0xce>
 802edd4:	09bb      	lsrs	r3, r7, #6
 802edd6:	3338      	adds	r3, #56	@ 0x38
 802edd8:	1c5a      	adds	r2, r3, #1
 802edda:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802edde:	f1a2 0c08 	sub.w	ip, r2, #8
 802ede2:	6854      	ldr	r4, [r2, #4]
 802ede4:	4564      	cmp	r4, ip
 802ede6:	d006      	beq.n	802edf6 <_malloc_r+0xca>
 802ede8:	6862      	ldr	r2, [r4, #4]
 802edea:	f022 0203 	bic.w	r2, r2, #3
 802edee:	1bd0      	subs	r0, r2, r7
 802edf0:	280f      	cmp	r0, #15
 802edf2:	dd1c      	ble.n	802ee2e <_malloc_r+0x102>
 802edf4:	3b01      	subs	r3, #1
 802edf6:	3301      	adds	r3, #1
 802edf8:	e7cf      	b.n	802ed9a <_malloc_r+0x6e>
 802edfa:	2b14      	cmp	r3, #20
 802edfc:	d801      	bhi.n	802ee02 <_malloc_r+0xd6>
 802edfe:	335b      	adds	r3, #91	@ 0x5b
 802ee00:	e7ea      	b.n	802edd8 <_malloc_r+0xac>
 802ee02:	2b54      	cmp	r3, #84	@ 0x54
 802ee04:	d802      	bhi.n	802ee0c <_malloc_r+0xe0>
 802ee06:	0b3b      	lsrs	r3, r7, #12
 802ee08:	336e      	adds	r3, #110	@ 0x6e
 802ee0a:	e7e5      	b.n	802edd8 <_malloc_r+0xac>
 802ee0c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802ee10:	d802      	bhi.n	802ee18 <_malloc_r+0xec>
 802ee12:	0bfb      	lsrs	r3, r7, #15
 802ee14:	3377      	adds	r3, #119	@ 0x77
 802ee16:	e7df      	b.n	802edd8 <_malloc_r+0xac>
 802ee18:	f240 5254 	movw	r2, #1364	@ 0x554
 802ee1c:	4293      	cmp	r3, r2
 802ee1e:	d804      	bhi.n	802ee2a <_malloc_r+0xfe>
 802ee20:	0cbb      	lsrs	r3, r7, #18
 802ee22:	337c      	adds	r3, #124	@ 0x7c
 802ee24:	e7d8      	b.n	802edd8 <_malloc_r+0xac>
 802ee26:	233f      	movs	r3, #63	@ 0x3f
 802ee28:	e7d6      	b.n	802edd8 <_malloc_r+0xac>
 802ee2a:	237e      	movs	r3, #126	@ 0x7e
 802ee2c:	e7d4      	b.n	802edd8 <_malloc_r+0xac>
 802ee2e:	2800      	cmp	r0, #0
 802ee30:	68e1      	ldr	r1, [r4, #12]
 802ee32:	db04      	blt.n	802ee3e <_malloc_r+0x112>
 802ee34:	68a3      	ldr	r3, [r4, #8]
 802ee36:	60d9      	str	r1, [r3, #12]
 802ee38:	608b      	str	r3, [r1, #8]
 802ee3a:	18a3      	adds	r3, r4, r2
 802ee3c:	e7a3      	b.n	802ed86 <_malloc_r+0x5a>
 802ee3e:	460c      	mov	r4, r1
 802ee40:	e7d0      	b.n	802ede4 <_malloc_r+0xb8>
 802ee42:	2800      	cmp	r0, #0
 802ee44:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802ee48:	db07      	blt.n	802ee5a <_malloc_r+0x12e>
 802ee4a:	44a4      	add	ip, r4
 802ee4c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802ee50:	f043 0301 	orr.w	r3, r3, #1
 802ee54:	f8cc 3004 	str.w	r3, [ip, #4]
 802ee58:	e799      	b.n	802ed8e <_malloc_r+0x62>
 802ee5a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802ee5e:	6870      	ldr	r0, [r6, #4]
 802ee60:	f080 8095 	bcs.w	802ef8e <_malloc_r+0x262>
 802ee64:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802ee68:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802ee6c:	f04f 0c01 	mov.w	ip, #1
 802ee70:	3201      	adds	r2, #1
 802ee72:	fa0c fc0e 	lsl.w	ip, ip, lr
 802ee76:	ea4c 0000 	orr.w	r0, ip, r0
 802ee7a:	6070      	str	r0, [r6, #4]
 802ee7c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802ee80:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802ee84:	3808      	subs	r0, #8
 802ee86:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802ee8a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802ee8e:	f8cc 400c 	str.w	r4, [ip, #12]
 802ee92:	1098      	asrs	r0, r3, #2
 802ee94:	2201      	movs	r2, #1
 802ee96:	4082      	lsls	r2, r0
 802ee98:	6870      	ldr	r0, [r6, #4]
 802ee9a:	4290      	cmp	r0, r2
 802ee9c:	d326      	bcc.n	802eeec <_malloc_r+0x1c0>
 802ee9e:	4210      	tst	r0, r2
 802eea0:	d106      	bne.n	802eeb0 <_malloc_r+0x184>
 802eea2:	f023 0303 	bic.w	r3, r3, #3
 802eea6:	0052      	lsls	r2, r2, #1
 802eea8:	4210      	tst	r0, r2
 802eeaa:	f103 0304 	add.w	r3, r3, #4
 802eeae:	d0fa      	beq.n	802eea6 <_malloc_r+0x17a>
 802eeb0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802eeb4:	46c1      	mov	r9, r8
 802eeb6:	469e      	mov	lr, r3
 802eeb8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802eebc:	454c      	cmp	r4, r9
 802eebe:	f040 80b9 	bne.w	802f034 <_malloc_r+0x308>
 802eec2:	f10e 0e01 	add.w	lr, lr, #1
 802eec6:	f01e 0f03 	tst.w	lr, #3
 802eeca:	f109 0908 	add.w	r9, r9, #8
 802eece:	d1f3      	bne.n	802eeb8 <_malloc_r+0x18c>
 802eed0:	0798      	lsls	r0, r3, #30
 802eed2:	f040 80e3 	bne.w	802f09c <_malloc_r+0x370>
 802eed6:	6873      	ldr	r3, [r6, #4]
 802eed8:	ea23 0302 	bic.w	r3, r3, r2
 802eedc:	6073      	str	r3, [r6, #4]
 802eede:	6870      	ldr	r0, [r6, #4]
 802eee0:	0052      	lsls	r2, r2, #1
 802eee2:	4290      	cmp	r0, r2
 802eee4:	d302      	bcc.n	802eeec <_malloc_r+0x1c0>
 802eee6:	2a00      	cmp	r2, #0
 802eee8:	f040 80e5 	bne.w	802f0b6 <_malloc_r+0x38a>
 802eeec:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802eef0:	f8da 3004 	ldr.w	r3, [sl, #4]
 802eef4:	f023 0903 	bic.w	r9, r3, #3
 802eef8:	45b9      	cmp	r9, r7
 802eefa:	d304      	bcc.n	802ef06 <_malloc_r+0x1da>
 802eefc:	eba9 0207 	sub.w	r2, r9, r7
 802ef00:	2a0f      	cmp	r2, #15
 802ef02:	f300 8141 	bgt.w	802f188 <_malloc_r+0x45c>
 802ef06:	4b46      	ldr	r3, [pc, #280]	@ (802f020 <_malloc_r+0x2f4>)
 802ef08:	6819      	ldr	r1, [r3, #0]
 802ef0a:	3110      	adds	r1, #16
 802ef0c:	4439      	add	r1, r7
 802ef0e:	2008      	movs	r0, #8
 802ef10:	9101      	str	r1, [sp, #4]
 802ef12:	f006 f8f7 	bl	8035104 <sysconf>
 802ef16:	4a43      	ldr	r2, [pc, #268]	@ (802f024 <_malloc_r+0x2f8>)
 802ef18:	9901      	ldr	r1, [sp, #4]
 802ef1a:	6813      	ldr	r3, [r2, #0]
 802ef1c:	3301      	adds	r3, #1
 802ef1e:	bf1f      	itttt	ne
 802ef20:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802ef24:	1809      	addne	r1, r1, r0
 802ef26:	4243      	negne	r3, r0
 802ef28:	4019      	andne	r1, r3
 802ef2a:	4680      	mov	r8, r0
 802ef2c:	4628      	mov	r0, r5
 802ef2e:	9101      	str	r1, [sp, #4]
 802ef30:	f006 f8d8 	bl	80350e4 <_sbrk_r>
 802ef34:	1c42      	adds	r2, r0, #1
 802ef36:	eb0a 0b09 	add.w	fp, sl, r9
 802ef3a:	4604      	mov	r4, r0
 802ef3c:	f000 80f7 	beq.w	802f12e <_malloc_r+0x402>
 802ef40:	4583      	cmp	fp, r0
 802ef42:	9901      	ldr	r1, [sp, #4]
 802ef44:	4a37      	ldr	r2, [pc, #220]	@ (802f024 <_malloc_r+0x2f8>)
 802ef46:	d902      	bls.n	802ef4e <_malloc_r+0x222>
 802ef48:	45b2      	cmp	sl, r6
 802ef4a:	f040 80f0 	bne.w	802f12e <_malloc_r+0x402>
 802ef4e:	4b36      	ldr	r3, [pc, #216]	@ (802f028 <_malloc_r+0x2fc>)
 802ef50:	6818      	ldr	r0, [r3, #0]
 802ef52:	45a3      	cmp	fp, r4
 802ef54:	eb00 0e01 	add.w	lr, r0, r1
 802ef58:	f8c3 e000 	str.w	lr, [r3]
 802ef5c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802ef60:	f040 80ab 	bne.w	802f0ba <_malloc_r+0x38e>
 802ef64:	ea1b 0f0c 	tst.w	fp, ip
 802ef68:	f040 80a7 	bne.w	802f0ba <_malloc_r+0x38e>
 802ef6c:	68b2      	ldr	r2, [r6, #8]
 802ef6e:	4449      	add	r1, r9
 802ef70:	f041 0101 	orr.w	r1, r1, #1
 802ef74:	6051      	str	r1, [r2, #4]
 802ef76:	4a2d      	ldr	r2, [pc, #180]	@ (802f02c <_malloc_r+0x300>)
 802ef78:	681b      	ldr	r3, [r3, #0]
 802ef7a:	6811      	ldr	r1, [r2, #0]
 802ef7c:	428b      	cmp	r3, r1
 802ef7e:	bf88      	it	hi
 802ef80:	6013      	strhi	r3, [r2, #0]
 802ef82:	4a2b      	ldr	r2, [pc, #172]	@ (802f030 <_malloc_r+0x304>)
 802ef84:	6811      	ldr	r1, [r2, #0]
 802ef86:	428b      	cmp	r3, r1
 802ef88:	bf88      	it	hi
 802ef8a:	6013      	strhi	r3, [r2, #0]
 802ef8c:	e0cf      	b.n	802f12e <_malloc_r+0x402>
 802ef8e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802ef92:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802ef96:	d218      	bcs.n	802efca <_malloc_r+0x29e>
 802ef98:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802ef9c:	3238      	adds	r2, #56	@ 0x38
 802ef9e:	f102 0e01 	add.w	lr, r2, #1
 802efa2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802efa6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802efaa:	45f0      	cmp	r8, lr
 802efac:	d12b      	bne.n	802f006 <_malloc_r+0x2da>
 802efae:	1092      	asrs	r2, r2, #2
 802efb0:	f04f 0c01 	mov.w	ip, #1
 802efb4:	fa0c f202 	lsl.w	r2, ip, r2
 802efb8:	4302      	orrs	r2, r0
 802efba:	6072      	str	r2, [r6, #4]
 802efbc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802efc0:	f8c8 4008 	str.w	r4, [r8, #8]
 802efc4:	f8ce 400c 	str.w	r4, [lr, #12]
 802efc8:	e763      	b.n	802ee92 <_malloc_r+0x166>
 802efca:	2a14      	cmp	r2, #20
 802efcc:	d801      	bhi.n	802efd2 <_malloc_r+0x2a6>
 802efce:	325b      	adds	r2, #91	@ 0x5b
 802efd0:	e7e5      	b.n	802ef9e <_malloc_r+0x272>
 802efd2:	2a54      	cmp	r2, #84	@ 0x54
 802efd4:	d803      	bhi.n	802efde <_malloc_r+0x2b2>
 802efd6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802efda:	326e      	adds	r2, #110	@ 0x6e
 802efdc:	e7df      	b.n	802ef9e <_malloc_r+0x272>
 802efde:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802efe2:	d803      	bhi.n	802efec <_malloc_r+0x2c0>
 802efe4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802efe8:	3277      	adds	r2, #119	@ 0x77
 802efea:	e7d8      	b.n	802ef9e <_malloc_r+0x272>
 802efec:	f240 5e54 	movw	lr, #1364	@ 0x554
 802eff0:	4572      	cmp	r2, lr
 802eff2:	bf9a      	itte	ls
 802eff4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802eff8:	327c      	addls	r2, #124	@ 0x7c
 802effa:	227e      	movhi	r2, #126	@ 0x7e
 802effc:	e7cf      	b.n	802ef9e <_malloc_r+0x272>
 802effe:	f8de e008 	ldr.w	lr, [lr, #8]
 802f002:	45f0      	cmp	r8, lr
 802f004:	d005      	beq.n	802f012 <_malloc_r+0x2e6>
 802f006:	f8de 2004 	ldr.w	r2, [lr, #4]
 802f00a:	f022 0203 	bic.w	r2, r2, #3
 802f00e:	4562      	cmp	r2, ip
 802f010:	d8f5      	bhi.n	802effe <_malloc_r+0x2d2>
 802f012:	f8de 800c 	ldr.w	r8, [lr, #12]
 802f016:	e7d1      	b.n	802efbc <_malloc_r+0x290>
 802f018:	2000040c 	.word	0x2000040c
 802f01c:	20000414 	.word	0x20000414
 802f020:	2001a084 	.word	0x2001a084
 802f024:	20000404 	.word	0x20000404
 802f028:	2001a054 	.word	0x2001a054
 802f02c:	2001a080 	.word	0x2001a080
 802f030:	2001a07c 	.word	0x2001a07c
 802f034:	6860      	ldr	r0, [r4, #4]
 802f036:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802f03a:	f020 0003 	bic.w	r0, r0, #3
 802f03e:	eba0 0a07 	sub.w	sl, r0, r7
 802f042:	f1ba 0f0f 	cmp.w	sl, #15
 802f046:	dd12      	ble.n	802f06e <_malloc_r+0x342>
 802f048:	68a3      	ldr	r3, [r4, #8]
 802f04a:	19e2      	adds	r2, r4, r7
 802f04c:	f047 0701 	orr.w	r7, r7, #1
 802f050:	6067      	str	r7, [r4, #4]
 802f052:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f056:	f8cc 3008 	str.w	r3, [ip, #8]
 802f05a:	f04a 0301 	orr.w	r3, sl, #1
 802f05e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802f062:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802f066:	6053      	str	r3, [r2, #4]
 802f068:	f844 a000 	str.w	sl, [r4, r0]
 802f06c:	e68f      	b.n	802ed8e <_malloc_r+0x62>
 802f06e:	f1ba 0f00 	cmp.w	sl, #0
 802f072:	db11      	blt.n	802f098 <_malloc_r+0x36c>
 802f074:	4420      	add	r0, r4
 802f076:	6843      	ldr	r3, [r0, #4]
 802f078:	f043 0301 	orr.w	r3, r3, #1
 802f07c:	6043      	str	r3, [r0, #4]
 802f07e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802f082:	4628      	mov	r0, r5
 802f084:	f8c3 c00c 	str.w	ip, [r3, #12]
 802f088:	f8cc 3008 	str.w	r3, [ip, #8]
 802f08c:	f004 f95e 	bl	803334c <__malloc_unlock>
 802f090:	4620      	mov	r0, r4
 802f092:	b003      	add	sp, #12
 802f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f098:	4664      	mov	r4, ip
 802f09a:	e70f      	b.n	802eebc <_malloc_r+0x190>
 802f09c:	f858 0908 	ldr.w	r0, [r8], #-8
 802f0a0:	4540      	cmp	r0, r8
 802f0a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802f0a6:	f43f af13 	beq.w	802eed0 <_malloc_r+0x1a4>
 802f0aa:	e718      	b.n	802eede <_malloc_r+0x1b2>
 802f0ac:	3304      	adds	r3, #4
 802f0ae:	0052      	lsls	r2, r2, #1
 802f0b0:	4210      	tst	r0, r2
 802f0b2:	d0fb      	beq.n	802f0ac <_malloc_r+0x380>
 802f0b4:	e6fc      	b.n	802eeb0 <_malloc_r+0x184>
 802f0b6:	4673      	mov	r3, lr
 802f0b8:	e7fa      	b.n	802f0b0 <_malloc_r+0x384>
 802f0ba:	6810      	ldr	r0, [r2, #0]
 802f0bc:	3001      	adds	r0, #1
 802f0be:	bf1b      	ittet	ne
 802f0c0:	eba4 0b0b 	subne.w	fp, r4, fp
 802f0c4:	eb0b 020e 	addne.w	r2, fp, lr
 802f0c8:	6014      	streq	r4, [r2, #0]
 802f0ca:	601a      	strne	r2, [r3, #0]
 802f0cc:	f014 0b07 	ands.w	fp, r4, #7
 802f0d0:	bf1a      	itte	ne
 802f0d2:	f1cb 0008 	rsbne	r0, fp, #8
 802f0d6:	1824      	addne	r4, r4, r0
 802f0d8:	4658      	moveq	r0, fp
 802f0da:	1862      	adds	r2, r4, r1
 802f0dc:	ea02 010c 	and.w	r1, r2, ip
 802f0e0:	4480      	add	r8, r0
 802f0e2:	eba8 0801 	sub.w	r8, r8, r1
 802f0e6:	ea08 080c 	and.w	r8, r8, ip
 802f0ea:	4641      	mov	r1, r8
 802f0ec:	4628      	mov	r0, r5
 802f0ee:	9201      	str	r2, [sp, #4]
 802f0f0:	f005 fff8 	bl	80350e4 <_sbrk_r>
 802f0f4:	1c43      	adds	r3, r0, #1
 802f0f6:	9a01      	ldr	r2, [sp, #4]
 802f0f8:	4b28      	ldr	r3, [pc, #160]	@ (802f19c <_malloc_r+0x470>)
 802f0fa:	d107      	bne.n	802f10c <_malloc_r+0x3e0>
 802f0fc:	f1bb 0f00 	cmp.w	fp, #0
 802f100:	d023      	beq.n	802f14a <_malloc_r+0x41e>
 802f102:	f1ab 0008 	sub.w	r0, fp, #8
 802f106:	4410      	add	r0, r2
 802f108:	f04f 0800 	mov.w	r8, #0
 802f10c:	681a      	ldr	r2, [r3, #0]
 802f10e:	60b4      	str	r4, [r6, #8]
 802f110:	1b00      	subs	r0, r0, r4
 802f112:	4440      	add	r0, r8
 802f114:	4442      	add	r2, r8
 802f116:	f040 0001 	orr.w	r0, r0, #1
 802f11a:	45b2      	cmp	sl, r6
 802f11c:	601a      	str	r2, [r3, #0]
 802f11e:	6060      	str	r0, [r4, #4]
 802f120:	f43f af29 	beq.w	802ef76 <_malloc_r+0x24a>
 802f124:	f1b9 0f0f 	cmp.w	r9, #15
 802f128:	d812      	bhi.n	802f150 <_malloc_r+0x424>
 802f12a:	2301      	movs	r3, #1
 802f12c:	6063      	str	r3, [r4, #4]
 802f12e:	68b3      	ldr	r3, [r6, #8]
 802f130:	685b      	ldr	r3, [r3, #4]
 802f132:	f023 0303 	bic.w	r3, r3, #3
 802f136:	42bb      	cmp	r3, r7
 802f138:	eba3 0207 	sub.w	r2, r3, r7
 802f13c:	d301      	bcc.n	802f142 <_malloc_r+0x416>
 802f13e:	2a0f      	cmp	r2, #15
 802f140:	dc22      	bgt.n	802f188 <_malloc_r+0x45c>
 802f142:	4628      	mov	r0, r5
 802f144:	f004 f902 	bl	803334c <__malloc_unlock>
 802f148:	e5fc      	b.n	802ed44 <_malloc_r+0x18>
 802f14a:	4610      	mov	r0, r2
 802f14c:	46d8      	mov	r8, fp
 802f14e:	e7dd      	b.n	802f10c <_malloc_r+0x3e0>
 802f150:	f8da 2004 	ldr.w	r2, [sl, #4]
 802f154:	f1a9 090c 	sub.w	r9, r9, #12
 802f158:	f029 0907 	bic.w	r9, r9, #7
 802f15c:	f002 0201 	and.w	r2, r2, #1
 802f160:	ea42 0209 	orr.w	r2, r2, r9
 802f164:	f8ca 2004 	str.w	r2, [sl, #4]
 802f168:	2105      	movs	r1, #5
 802f16a:	eb0a 0209 	add.w	r2, sl, r9
 802f16e:	f1b9 0f0f 	cmp.w	r9, #15
 802f172:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802f176:	f67f aefe 	bls.w	802ef76 <_malloc_r+0x24a>
 802f17a:	f10a 0108 	add.w	r1, sl, #8
 802f17e:	4628      	mov	r0, r5
 802f180:	f7ff fcbc 	bl	802eafc <_free_r>
 802f184:	4b05      	ldr	r3, [pc, #20]	@ (802f19c <_malloc_r+0x470>)
 802f186:	e6f6      	b.n	802ef76 <_malloc_r+0x24a>
 802f188:	68b4      	ldr	r4, [r6, #8]
 802f18a:	f047 0301 	orr.w	r3, r7, #1
 802f18e:	4427      	add	r7, r4
 802f190:	f042 0201 	orr.w	r2, r2, #1
 802f194:	6063      	str	r3, [r4, #4]
 802f196:	60b7      	str	r7, [r6, #8]
 802f198:	607a      	str	r2, [r7, #4]
 802f19a:	e5f8      	b.n	802ed8e <_malloc_r+0x62>
 802f19c:	2001a054 	.word	0x2001a054

0802f1a0 <__ascii_mbtowc>:
 802f1a0:	b082      	sub	sp, #8
 802f1a2:	b901      	cbnz	r1, 802f1a6 <__ascii_mbtowc+0x6>
 802f1a4:	a901      	add	r1, sp, #4
 802f1a6:	b142      	cbz	r2, 802f1ba <__ascii_mbtowc+0x1a>
 802f1a8:	b14b      	cbz	r3, 802f1be <__ascii_mbtowc+0x1e>
 802f1aa:	7813      	ldrb	r3, [r2, #0]
 802f1ac:	600b      	str	r3, [r1, #0]
 802f1ae:	7812      	ldrb	r2, [r2, #0]
 802f1b0:	1e10      	subs	r0, r2, #0
 802f1b2:	bf18      	it	ne
 802f1b4:	2001      	movne	r0, #1
 802f1b6:	b002      	add	sp, #8
 802f1b8:	4770      	bx	lr
 802f1ba:	4610      	mov	r0, r2
 802f1bc:	e7fb      	b.n	802f1b6 <__ascii_mbtowc+0x16>
 802f1be:	f06f 0001 	mvn.w	r0, #1
 802f1c2:	e7f8      	b.n	802f1b6 <__ascii_mbtowc+0x16>

0802f1c4 <siscanf>:
 802f1c4:	b40e      	push	{r1, r2, r3}
 802f1c6:	b530      	push	{r4, r5, lr}
 802f1c8:	b09c      	sub	sp, #112	@ 0x70
 802f1ca:	ac1f      	add	r4, sp, #124	@ 0x7c
 802f1cc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802f1d0:	f854 5b04 	ldr.w	r5, [r4], #4
 802f1d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 802f1d8:	9002      	str	r0, [sp, #8]
 802f1da:	9006      	str	r0, [sp, #24]
 802f1dc:	f7e1 f860 	bl	80102a0 <strlen>
 802f1e0:	4b0b      	ldr	r3, [pc, #44]	@ (802f210 <siscanf+0x4c>)
 802f1e2:	9003      	str	r0, [sp, #12]
 802f1e4:	9007      	str	r0, [sp, #28]
 802f1e6:	930a      	str	r3, [sp, #40]	@ 0x28
 802f1e8:	480a      	ldr	r0, [pc, #40]	@ (802f214 <siscanf+0x50>)
 802f1ea:	9401      	str	r4, [sp, #4]
 802f1ec:	2300      	movs	r3, #0
 802f1ee:	930e      	str	r3, [sp, #56]	@ 0x38
 802f1f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802f1f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f1f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f1fa:	462a      	mov	r2, r5
 802f1fc:	4623      	mov	r3, r4
 802f1fe:	a902      	add	r1, sp, #8
 802f200:	6800      	ldr	r0, [r0, #0]
 802f202:	f000 fd99 	bl	802fd38 <__ssvfiscanf_r>
 802f206:	b01c      	add	sp, #112	@ 0x70
 802f208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f20c:	b003      	add	sp, #12
 802f20e:	4770      	bx	lr
 802f210:	0802c1b3 	.word	0x0802c1b3
 802f214:	200002d8 	.word	0x200002d8

0802f218 <sniprintf>:
 802f218:	b40c      	push	{r2, r3}
 802f21a:	b530      	push	{r4, r5, lr}
 802f21c:	4b17      	ldr	r3, [pc, #92]	@ (802f27c <sniprintf+0x64>)
 802f21e:	1e0c      	subs	r4, r1, #0
 802f220:	681d      	ldr	r5, [r3, #0]
 802f222:	b09d      	sub	sp, #116	@ 0x74
 802f224:	da08      	bge.n	802f238 <sniprintf+0x20>
 802f226:	238b      	movs	r3, #139	@ 0x8b
 802f228:	602b      	str	r3, [r5, #0]
 802f22a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f22e:	b01d      	add	sp, #116	@ 0x74
 802f230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802f234:	b002      	add	sp, #8
 802f236:	4770      	bx	lr
 802f238:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802f23c:	f8ad 3014 	strh.w	r3, [sp, #20]
 802f240:	bf14      	ite	ne
 802f242:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802f246:	4623      	moveq	r3, r4
 802f248:	9304      	str	r3, [sp, #16]
 802f24a:	9307      	str	r3, [sp, #28]
 802f24c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802f250:	9002      	str	r0, [sp, #8]
 802f252:	9006      	str	r0, [sp, #24]
 802f254:	f8ad 3016 	strh.w	r3, [sp, #22]
 802f258:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802f25a:	ab21      	add	r3, sp, #132	@ 0x84
 802f25c:	a902      	add	r1, sp, #8
 802f25e:	4628      	mov	r0, r5
 802f260:	9301      	str	r3, [sp, #4]
 802f262:	f000 f88b 	bl	802f37c <_svfiprintf_r>
 802f266:	1c43      	adds	r3, r0, #1
 802f268:	bfbc      	itt	lt
 802f26a:	238b      	movlt	r3, #139	@ 0x8b
 802f26c:	602b      	strlt	r3, [r5, #0]
 802f26e:	2c00      	cmp	r4, #0
 802f270:	d0dd      	beq.n	802f22e <sniprintf+0x16>
 802f272:	9b02      	ldr	r3, [sp, #8]
 802f274:	2200      	movs	r2, #0
 802f276:	701a      	strb	r2, [r3, #0]
 802f278:	e7d9      	b.n	802f22e <sniprintf+0x16>
 802f27a:	bf00      	nop
 802f27c:	200002d8 	.word	0x200002d8

0802f280 <__ssprint_r>:
 802f280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f284:	6893      	ldr	r3, [r2, #8]
 802f286:	f8d2 b000 	ldr.w	fp, [r2]
 802f28a:	9001      	str	r0, [sp, #4]
 802f28c:	460c      	mov	r4, r1
 802f28e:	4617      	mov	r7, r2
 802f290:	2b00      	cmp	r3, #0
 802f292:	d157      	bne.n	802f344 <__ssprint_r+0xc4>
 802f294:	2000      	movs	r0, #0
 802f296:	2300      	movs	r3, #0
 802f298:	607b      	str	r3, [r7, #4]
 802f29a:	b003      	add	sp, #12
 802f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f2a0:	e9db a800 	ldrd	sl, r8, [fp]
 802f2a4:	f10b 0b08 	add.w	fp, fp, #8
 802f2a8:	68a6      	ldr	r6, [r4, #8]
 802f2aa:	6820      	ldr	r0, [r4, #0]
 802f2ac:	f1b8 0f00 	cmp.w	r8, #0
 802f2b0:	d0f6      	beq.n	802f2a0 <__ssprint_r+0x20>
 802f2b2:	45b0      	cmp	r8, r6
 802f2b4:	d32e      	bcc.n	802f314 <__ssprint_r+0x94>
 802f2b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f2ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802f2be:	d029      	beq.n	802f314 <__ssprint_r+0x94>
 802f2c0:	6921      	ldr	r1, [r4, #16]
 802f2c2:	6965      	ldr	r5, [r4, #20]
 802f2c4:	eba0 0901 	sub.w	r9, r0, r1
 802f2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802f2d0:	f109 0001 	add.w	r0, r9, #1
 802f2d4:	106d      	asrs	r5, r5, #1
 802f2d6:	4440      	add	r0, r8
 802f2d8:	4285      	cmp	r5, r0
 802f2da:	bf38      	it	cc
 802f2dc:	4605      	movcc	r5, r0
 802f2de:	0553      	lsls	r3, r2, #21
 802f2e0:	d534      	bpl.n	802f34c <__ssprint_r+0xcc>
 802f2e2:	9801      	ldr	r0, [sp, #4]
 802f2e4:	4629      	mov	r1, r5
 802f2e6:	f7ff fd21 	bl	802ed2c <_malloc_r>
 802f2ea:	4606      	mov	r6, r0
 802f2ec:	2800      	cmp	r0, #0
 802f2ee:	d038      	beq.n	802f362 <__ssprint_r+0xe2>
 802f2f0:	464a      	mov	r2, r9
 802f2f2:	6921      	ldr	r1, [r4, #16]
 802f2f4:	f7fe fd00 	bl	802dcf8 <memcpy>
 802f2f8:	89a2      	ldrh	r2, [r4, #12]
 802f2fa:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802f2fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802f302:	81a2      	strh	r2, [r4, #12]
 802f304:	6126      	str	r6, [r4, #16]
 802f306:	6165      	str	r5, [r4, #20]
 802f308:	444e      	add	r6, r9
 802f30a:	eba5 0509 	sub.w	r5, r5, r9
 802f30e:	6026      	str	r6, [r4, #0]
 802f310:	60a5      	str	r5, [r4, #8]
 802f312:	4646      	mov	r6, r8
 802f314:	4546      	cmp	r6, r8
 802f316:	bf28      	it	cs
 802f318:	4646      	movcs	r6, r8
 802f31a:	4632      	mov	r2, r6
 802f31c:	4651      	mov	r1, sl
 802f31e:	6820      	ldr	r0, [r4, #0]
 802f320:	f7fd fa94 	bl	802c84c <memmove>
 802f324:	68a2      	ldr	r2, [r4, #8]
 802f326:	1b92      	subs	r2, r2, r6
 802f328:	60a2      	str	r2, [r4, #8]
 802f32a:	6822      	ldr	r2, [r4, #0]
 802f32c:	4432      	add	r2, r6
 802f32e:	6022      	str	r2, [r4, #0]
 802f330:	68ba      	ldr	r2, [r7, #8]
 802f332:	eba2 0308 	sub.w	r3, r2, r8
 802f336:	44c2      	add	sl, r8
 802f338:	60bb      	str	r3, [r7, #8]
 802f33a:	2b00      	cmp	r3, #0
 802f33c:	d0aa      	beq.n	802f294 <__ssprint_r+0x14>
 802f33e:	f04f 0800 	mov.w	r8, #0
 802f342:	e7b1      	b.n	802f2a8 <__ssprint_r+0x28>
 802f344:	f04f 0a00 	mov.w	sl, #0
 802f348:	46d0      	mov	r8, sl
 802f34a:	e7ad      	b.n	802f2a8 <__ssprint_r+0x28>
 802f34c:	9801      	ldr	r0, [sp, #4]
 802f34e:	462a      	mov	r2, r5
 802f350:	f004 fcfc 	bl	8033d4c <_realloc_r>
 802f354:	4606      	mov	r6, r0
 802f356:	2800      	cmp	r0, #0
 802f358:	d1d4      	bne.n	802f304 <__ssprint_r+0x84>
 802f35a:	6921      	ldr	r1, [r4, #16]
 802f35c:	9801      	ldr	r0, [sp, #4]
 802f35e:	f7ff fbcd 	bl	802eafc <_free_r>
 802f362:	9a01      	ldr	r2, [sp, #4]
 802f364:	230c      	movs	r3, #12
 802f366:	6013      	str	r3, [r2, #0]
 802f368:	89a3      	ldrh	r3, [r4, #12]
 802f36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802f36e:	81a3      	strh	r3, [r4, #12]
 802f370:	2300      	movs	r3, #0
 802f372:	60bb      	str	r3, [r7, #8]
 802f374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f378:	e78d      	b.n	802f296 <__ssprint_r+0x16>
	...

0802f37c <_svfiprintf_r>:
 802f37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f380:	461d      	mov	r5, r3
 802f382:	898b      	ldrh	r3, [r1, #12]
 802f384:	b0bb      	sub	sp, #236	@ 0xec
 802f386:	468b      	mov	fp, r1
 802f388:	0619      	lsls	r1, r3, #24
 802f38a:	9001      	str	r0, [sp, #4]
 802f38c:	9202      	str	r2, [sp, #8]
 802f38e:	d514      	bpl.n	802f3ba <_svfiprintf_r+0x3e>
 802f390:	f8db 3010 	ldr.w	r3, [fp, #16]
 802f394:	b98b      	cbnz	r3, 802f3ba <_svfiprintf_r+0x3e>
 802f396:	2140      	movs	r1, #64	@ 0x40
 802f398:	f7ff fcc8 	bl	802ed2c <_malloc_r>
 802f39c:	f8cb 0000 	str.w	r0, [fp]
 802f3a0:	f8cb 0010 	str.w	r0, [fp, #16]
 802f3a4:	b930      	cbnz	r0, 802f3b4 <_svfiprintf_r+0x38>
 802f3a6:	9a01      	ldr	r2, [sp, #4]
 802f3a8:	230c      	movs	r3, #12
 802f3aa:	6013      	str	r3, [r2, #0]
 802f3ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f3b0:	9304      	str	r3, [sp, #16]
 802f3b2:	e3df      	b.n	802fb74 <_svfiprintf_r+0x7f8>
 802f3b4:	2340      	movs	r3, #64	@ 0x40
 802f3b6:	f8cb 3014 	str.w	r3, [fp, #20]
 802f3ba:	2300      	movs	r3, #0
 802f3bc:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802f3c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802f3c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802f3c8:	ae11      	add	r6, sp, #68	@ 0x44
 802f3ca:	960e      	str	r6, [sp, #56]	@ 0x38
 802f3cc:	9304      	str	r3, [sp, #16]
 802f3ce:	9b02      	ldr	r3, [sp, #8]
 802f3d0:	461c      	mov	r4, r3
 802f3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f3d6:	b10a      	cbz	r2, 802f3dc <_svfiprintf_r+0x60>
 802f3d8:	2a25      	cmp	r2, #37	@ 0x25
 802f3da:	d1f9      	bne.n	802f3d0 <_svfiprintf_r+0x54>
 802f3dc:	9a02      	ldr	r2, [sp, #8]
 802f3de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f3e0:	1aa7      	subs	r7, r4, r2
 802f3e2:	d00c      	beq.n	802f3fe <_svfiprintf_r+0x82>
 802f3e4:	443b      	add	r3, r7
 802f3e6:	9310      	str	r3, [sp, #64]	@ 0x40
 802f3e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f3ea:	3301      	adds	r3, #1
 802f3ec:	2b07      	cmp	r3, #7
 802f3ee:	e9c6 2700 	strd	r2, r7, [r6]
 802f3f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f3f4:	dc76      	bgt.n	802f4e4 <_svfiprintf_r+0x168>
 802f3f6:	3608      	adds	r6, #8
 802f3f8:	9b04      	ldr	r3, [sp, #16]
 802f3fa:	443b      	add	r3, r7
 802f3fc:	9304      	str	r3, [sp, #16]
 802f3fe:	7823      	ldrb	r3, [r4, #0]
 802f400:	2b00      	cmp	r3, #0
 802f402:	f000 83ce 	beq.w	802fba2 <_svfiprintf_r+0x826>
 802f406:	2300      	movs	r3, #0
 802f408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802f40c:	3401      	adds	r4, #1
 802f40e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f412:	9200      	str	r2, [sp, #0]
 802f414:	9303      	str	r3, [sp, #12]
 802f416:	4699      	mov	r9, r3
 802f418:	4622      	mov	r2, r4
 802f41a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f41e:	9202      	str	r2, [sp, #8]
 802f420:	f1a3 0220 	sub.w	r2, r3, #32
 802f424:	2a5a      	cmp	r2, #90	@ 0x5a
 802f426:	f200 8318 	bhi.w	802fa5a <_svfiprintf_r+0x6de>
 802f42a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802f42e:	009a      	.short	0x009a
 802f430:	03160316 	.word	0x03160316
 802f434:	031600a2 	.word	0x031600a2
 802f438:	03160316 	.word	0x03160316
 802f43c:	03160082 	.word	0x03160082
 802f440:	00a50316 	.word	0x00a50316
 802f444:	031600af 	.word	0x031600af
 802f448:	00b100ac 	.word	0x00b100ac
 802f44c:	00cc0316 	.word	0x00cc0316
 802f450:	00cf00cf 	.word	0x00cf00cf
 802f454:	00cf00cf 	.word	0x00cf00cf
 802f458:	00cf00cf 	.word	0x00cf00cf
 802f45c:	00cf00cf 	.word	0x00cf00cf
 802f460:	031600cf 	.word	0x031600cf
 802f464:	03160316 	.word	0x03160316
 802f468:	03160316 	.word	0x03160316
 802f46c:	03160316 	.word	0x03160316
 802f470:	03160316 	.word	0x03160316
 802f474:	010600f9 	.word	0x010600f9
 802f478:	03160316 	.word	0x03160316
 802f47c:	03160316 	.word	0x03160316
 802f480:	03160316 	.word	0x03160316
 802f484:	03160316 	.word	0x03160316
 802f488:	03160316 	.word	0x03160316
 802f48c:	03160154 	.word	0x03160154
 802f490:	03160316 	.word	0x03160316
 802f494:	0316019b 	.word	0x0316019b
 802f498:	0316027d 	.word	0x0316027d
 802f49c:	029d0316 	.word	0x029d0316
 802f4a0:	03160316 	.word	0x03160316
 802f4a4:	03160316 	.word	0x03160316
 802f4a8:	03160316 	.word	0x03160316
 802f4ac:	03160316 	.word	0x03160316
 802f4b0:	03160316 	.word	0x03160316
 802f4b4:	010800f9 	.word	0x010800f9
 802f4b8:	03160316 	.word	0x03160316
 802f4bc:	00df0316 	.word	0x00df0316
 802f4c0:	00f30108 	.word	0x00f30108
 802f4c4:	00ec0316 	.word	0x00ec0316
 802f4c8:	01340316 	.word	0x01340316
 802f4cc:	018a0156 	.word	0x018a0156
 802f4d0:	031600f3 	.word	0x031600f3
 802f4d4:	0098019b 	.word	0x0098019b
 802f4d8:	0316027f 	.word	0x0316027f
 802f4dc:	00650316 	.word	0x00650316
 802f4e0:	00980316 	.word	0x00980316
 802f4e4:	9801      	ldr	r0, [sp, #4]
 802f4e6:	aa0e      	add	r2, sp, #56	@ 0x38
 802f4e8:	4659      	mov	r1, fp
 802f4ea:	f7ff fec9 	bl	802f280 <__ssprint_r>
 802f4ee:	2800      	cmp	r0, #0
 802f4f0:	f040 833b 	bne.w	802fb6a <_svfiprintf_r+0x7ee>
 802f4f4:	ae11      	add	r6, sp, #68	@ 0x44
 802f4f6:	e77f      	b.n	802f3f8 <_svfiprintf_r+0x7c>
 802f4f8:	4a99      	ldr	r2, [pc, #612]	@ (802f760 <_svfiprintf_r+0x3e4>)
 802f4fa:	9205      	str	r2, [sp, #20]
 802f4fc:	f019 0220 	ands.w	r2, r9, #32
 802f500:	f000 8234 	beq.w	802f96c <_svfiprintf_r+0x5f0>
 802f504:	3507      	adds	r5, #7
 802f506:	f025 0507 	bic.w	r5, r5, #7
 802f50a:	462f      	mov	r7, r5
 802f50c:	686d      	ldr	r5, [r5, #4]
 802f50e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f512:	f019 0f01 	tst.w	r9, #1
 802f516:	d009      	beq.n	802f52c <_svfiprintf_r+0x1b0>
 802f518:	ea54 0205 	orrs.w	r2, r4, r5
 802f51c:	bf1f      	itttt	ne
 802f51e:	2230      	movne	r2, #48	@ 0x30
 802f520:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802f524:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802f528:	f049 0902 	orrne.w	r9, r9, #2
 802f52c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f530:	e113      	b.n	802f75a <_svfiprintf_r+0x3de>
 802f532:	9801      	ldr	r0, [sp, #4]
 802f534:	f7fe fb32 	bl	802db9c <_localeconv_r>
 802f538:	6843      	ldr	r3, [r0, #4]
 802f53a:	9308      	str	r3, [sp, #32]
 802f53c:	4618      	mov	r0, r3
 802f53e:	f7e0 feaf 	bl	80102a0 <strlen>
 802f542:	9007      	str	r0, [sp, #28]
 802f544:	9801      	ldr	r0, [sp, #4]
 802f546:	f7fe fb29 	bl	802db9c <_localeconv_r>
 802f54a:	6883      	ldr	r3, [r0, #8]
 802f54c:	9306      	str	r3, [sp, #24]
 802f54e:	9b07      	ldr	r3, [sp, #28]
 802f550:	b12b      	cbz	r3, 802f55e <_svfiprintf_r+0x1e2>
 802f552:	9b06      	ldr	r3, [sp, #24]
 802f554:	b11b      	cbz	r3, 802f55e <_svfiprintf_r+0x1e2>
 802f556:	781b      	ldrb	r3, [r3, #0]
 802f558:	b10b      	cbz	r3, 802f55e <_svfiprintf_r+0x1e2>
 802f55a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802f55e:	9c02      	ldr	r4, [sp, #8]
 802f560:	e75a      	b.n	802f418 <_svfiprintf_r+0x9c>
 802f562:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f566:	2b00      	cmp	r3, #0
 802f568:	d1f9      	bne.n	802f55e <_svfiprintf_r+0x1e2>
 802f56a:	2320      	movs	r3, #32
 802f56c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f570:	e7f5      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f572:	f049 0901 	orr.w	r9, r9, #1
 802f576:	e7f2      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f578:	f855 3b04 	ldr.w	r3, [r5], #4
 802f57c:	9303      	str	r3, [sp, #12]
 802f57e:	2b00      	cmp	r3, #0
 802f580:	daed      	bge.n	802f55e <_svfiprintf_r+0x1e2>
 802f582:	425b      	negs	r3, r3
 802f584:	9303      	str	r3, [sp, #12]
 802f586:	f049 0904 	orr.w	r9, r9, #4
 802f58a:	e7e8      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f58c:	232b      	movs	r3, #43	@ 0x2b
 802f58e:	e7ed      	b.n	802f56c <_svfiprintf_r+0x1f0>
 802f590:	9a02      	ldr	r2, [sp, #8]
 802f592:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f596:	2b2a      	cmp	r3, #42	@ 0x2a
 802f598:	d111      	bne.n	802f5be <_svfiprintf_r+0x242>
 802f59a:	f855 3b04 	ldr.w	r3, [r5], #4
 802f59e:	9202      	str	r2, [sp, #8]
 802f5a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802f5a4:	9300      	str	r3, [sp, #0]
 802f5a6:	e7da      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f5a8:	9b00      	ldr	r3, [sp, #0]
 802f5aa:	fb00 1303 	mla	r3, r0, r3, r1
 802f5ae:	9300      	str	r3, [sp, #0]
 802f5b0:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f5b4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f5b8:	2909      	cmp	r1, #9
 802f5ba:	d9f5      	bls.n	802f5a8 <_svfiprintf_r+0x22c>
 802f5bc:	e72f      	b.n	802f41e <_svfiprintf_r+0xa2>
 802f5be:	2100      	movs	r1, #0
 802f5c0:	9100      	str	r1, [sp, #0]
 802f5c2:	200a      	movs	r0, #10
 802f5c4:	e7f6      	b.n	802f5b4 <_svfiprintf_r+0x238>
 802f5c6:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802f5ca:	e7c8      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f5cc:	2100      	movs	r1, #0
 802f5ce:	9a02      	ldr	r2, [sp, #8]
 802f5d0:	9103      	str	r1, [sp, #12]
 802f5d2:	200a      	movs	r0, #10
 802f5d4:	9903      	ldr	r1, [sp, #12]
 802f5d6:	3b30      	subs	r3, #48	@ 0x30
 802f5d8:	fb00 3301 	mla	r3, r0, r1, r3
 802f5dc:	9303      	str	r3, [sp, #12]
 802f5de:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f5e2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802f5e6:	2909      	cmp	r1, #9
 802f5e8:	d9f4      	bls.n	802f5d4 <_svfiprintf_r+0x258>
 802f5ea:	e718      	b.n	802f41e <_svfiprintf_r+0xa2>
 802f5ec:	9b02      	ldr	r3, [sp, #8]
 802f5ee:	781b      	ldrb	r3, [r3, #0]
 802f5f0:	2b68      	cmp	r3, #104	@ 0x68
 802f5f2:	bf01      	itttt	eq
 802f5f4:	9b02      	ldreq	r3, [sp, #8]
 802f5f6:	3301      	addeq	r3, #1
 802f5f8:	9302      	streq	r3, [sp, #8]
 802f5fa:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802f5fe:	bf18      	it	ne
 802f600:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802f604:	e7ab      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f606:	9b02      	ldr	r3, [sp, #8]
 802f608:	781b      	ldrb	r3, [r3, #0]
 802f60a:	2b6c      	cmp	r3, #108	@ 0x6c
 802f60c:	d105      	bne.n	802f61a <_svfiprintf_r+0x29e>
 802f60e:	9b02      	ldr	r3, [sp, #8]
 802f610:	3301      	adds	r3, #1
 802f612:	9302      	str	r3, [sp, #8]
 802f614:	f049 0920 	orr.w	r9, r9, #32
 802f618:	e7a1      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f61a:	f049 0910 	orr.w	r9, r9, #16
 802f61e:	e79e      	b.n	802f55e <_svfiprintf_r+0x1e2>
 802f620:	462f      	mov	r7, r5
 802f622:	2400      	movs	r4, #0
 802f624:	f857 3b04 	ldr.w	r3, [r7], #4
 802f628:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f62c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f630:	2301      	movs	r3, #1
 802f632:	9300      	str	r3, [sp, #0]
 802f634:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802f638:	e0aa      	b.n	802f790 <_svfiprintf_r+0x414>
 802f63a:	f049 0910 	orr.w	r9, r9, #16
 802f63e:	f019 0f20 	tst.w	r9, #32
 802f642:	d011      	beq.n	802f668 <_svfiprintf_r+0x2ec>
 802f644:	3507      	adds	r5, #7
 802f646:	f025 0507 	bic.w	r5, r5, #7
 802f64a:	462f      	mov	r7, r5
 802f64c:	686d      	ldr	r5, [r5, #4]
 802f64e:	f857 4b08 	ldr.w	r4, [r7], #8
 802f652:	2d00      	cmp	r5, #0
 802f654:	da06      	bge.n	802f664 <_svfiprintf_r+0x2e8>
 802f656:	4264      	negs	r4, r4
 802f658:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802f65c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802f660:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802f664:	2301      	movs	r3, #1
 802f666:	e048      	b.n	802f6fa <_svfiprintf_r+0x37e>
 802f668:	462f      	mov	r7, r5
 802f66a:	f019 0f10 	tst.w	r9, #16
 802f66e:	f857 5b04 	ldr.w	r5, [r7], #4
 802f672:	d002      	beq.n	802f67a <_svfiprintf_r+0x2fe>
 802f674:	462c      	mov	r4, r5
 802f676:	17ed      	asrs	r5, r5, #31
 802f678:	e7eb      	b.n	802f652 <_svfiprintf_r+0x2d6>
 802f67a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f67e:	d003      	beq.n	802f688 <_svfiprintf_r+0x30c>
 802f680:	b22c      	sxth	r4, r5
 802f682:	f345 35c0 	sbfx	r5, r5, #15, #1
 802f686:	e7e4      	b.n	802f652 <_svfiprintf_r+0x2d6>
 802f688:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f68c:	d0f2      	beq.n	802f674 <_svfiprintf_r+0x2f8>
 802f68e:	b26c      	sxtb	r4, r5
 802f690:	f345 15c0 	sbfx	r5, r5, #7, #1
 802f694:	e7dd      	b.n	802f652 <_svfiprintf_r+0x2d6>
 802f696:	f019 0f20 	tst.w	r9, #32
 802f69a:	d007      	beq.n	802f6ac <_svfiprintf_r+0x330>
 802f69c:	9a04      	ldr	r2, [sp, #16]
 802f69e:	682b      	ldr	r3, [r5, #0]
 802f6a0:	9904      	ldr	r1, [sp, #16]
 802f6a2:	17d2      	asrs	r2, r2, #31
 802f6a4:	e9c3 1200 	strd	r1, r2, [r3]
 802f6a8:	3504      	adds	r5, #4
 802f6aa:	e690      	b.n	802f3ce <_svfiprintf_r+0x52>
 802f6ac:	f019 0f10 	tst.w	r9, #16
 802f6b0:	d003      	beq.n	802f6ba <_svfiprintf_r+0x33e>
 802f6b2:	682b      	ldr	r3, [r5, #0]
 802f6b4:	9a04      	ldr	r2, [sp, #16]
 802f6b6:	601a      	str	r2, [r3, #0]
 802f6b8:	e7f6      	b.n	802f6a8 <_svfiprintf_r+0x32c>
 802f6ba:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802f6be:	d003      	beq.n	802f6c8 <_svfiprintf_r+0x34c>
 802f6c0:	682b      	ldr	r3, [r5, #0]
 802f6c2:	9a04      	ldr	r2, [sp, #16]
 802f6c4:	801a      	strh	r2, [r3, #0]
 802f6c6:	e7ef      	b.n	802f6a8 <_svfiprintf_r+0x32c>
 802f6c8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802f6cc:	d0f1      	beq.n	802f6b2 <_svfiprintf_r+0x336>
 802f6ce:	682b      	ldr	r3, [r5, #0]
 802f6d0:	9a04      	ldr	r2, [sp, #16]
 802f6d2:	701a      	strb	r2, [r3, #0]
 802f6d4:	e7e8      	b.n	802f6a8 <_svfiprintf_r+0x32c>
 802f6d6:	f049 0910 	orr.w	r9, r9, #16
 802f6da:	f019 0320 	ands.w	r3, r9, #32
 802f6de:	d01e      	beq.n	802f71e <_svfiprintf_r+0x3a2>
 802f6e0:	3507      	adds	r5, #7
 802f6e2:	f025 0507 	bic.w	r5, r5, #7
 802f6e6:	462f      	mov	r7, r5
 802f6e8:	686d      	ldr	r5, [r5, #4]
 802f6ea:	f857 4b08 	ldr.w	r4, [r7], #8
 802f6ee:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802f6f2:	2300      	movs	r3, #0
 802f6f4:	2200      	movs	r2, #0
 802f6f6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802f6fa:	9a00      	ldr	r2, [sp, #0]
 802f6fc:	3201      	adds	r2, #1
 802f6fe:	f000 8259 	beq.w	802fbb4 <_svfiprintf_r+0x838>
 802f702:	ea54 0205 	orrs.w	r2, r4, r5
 802f706:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802f70a:	f040 8258 	bne.w	802fbbe <_svfiprintf_r+0x842>
 802f70e:	9a00      	ldr	r2, [sp, #0]
 802f710:	2a00      	cmp	r2, #0
 802f712:	f000 8199 	beq.w	802fa48 <_svfiprintf_r+0x6cc>
 802f716:	2b01      	cmp	r3, #1
 802f718:	f040 8254 	bne.w	802fbc4 <_svfiprintf_r+0x848>
 802f71c:	e13d      	b.n	802f99a <_svfiprintf_r+0x61e>
 802f71e:	462f      	mov	r7, r5
 802f720:	f019 0510 	ands.w	r5, r9, #16
 802f724:	f857 4b04 	ldr.w	r4, [r7], #4
 802f728:	d001      	beq.n	802f72e <_svfiprintf_r+0x3b2>
 802f72a:	461d      	mov	r5, r3
 802f72c:	e7df      	b.n	802f6ee <_svfiprintf_r+0x372>
 802f72e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f732:	d001      	beq.n	802f738 <_svfiprintf_r+0x3bc>
 802f734:	b2a4      	uxth	r4, r4
 802f736:	e7da      	b.n	802f6ee <_svfiprintf_r+0x372>
 802f738:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f73c:	d0d7      	beq.n	802f6ee <_svfiprintf_r+0x372>
 802f73e:	b2e4      	uxtb	r4, r4
 802f740:	e7f3      	b.n	802f72a <_svfiprintf_r+0x3ae>
 802f742:	462f      	mov	r7, r5
 802f744:	f647 0330 	movw	r3, #30768	@ 0x7830
 802f748:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802f74c:	f857 4b04 	ldr.w	r4, [r7], #4
 802f750:	4b03      	ldr	r3, [pc, #12]	@ (802f760 <_svfiprintf_r+0x3e4>)
 802f752:	9305      	str	r3, [sp, #20]
 802f754:	2500      	movs	r5, #0
 802f756:	f049 0902 	orr.w	r9, r9, #2
 802f75a:	2302      	movs	r3, #2
 802f75c:	e7ca      	b.n	802f6f4 <_svfiprintf_r+0x378>
 802f75e:	bf00      	nop
 802f760:	0803b9f3 	.word	0x0803b9f3
 802f764:	9b00      	ldr	r3, [sp, #0]
 802f766:	462f      	mov	r7, r5
 802f768:	1c5a      	adds	r2, r3, #1
 802f76a:	f04f 0500 	mov.w	r5, #0
 802f76e:	f857 8b04 	ldr.w	r8, [r7], #4
 802f772:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802f776:	f000 80d2 	beq.w	802f91e <_svfiprintf_r+0x5a2>
 802f77a:	461a      	mov	r2, r3
 802f77c:	4629      	mov	r1, r5
 802f77e:	4640      	mov	r0, r8
 802f780:	f7e0 fd3e 	bl	8010200 <memchr>
 802f784:	4604      	mov	r4, r0
 802f786:	b118      	cbz	r0, 802f790 <_svfiprintf_r+0x414>
 802f788:	eba0 0308 	sub.w	r3, r0, r8
 802f78c:	9300      	str	r3, [sp, #0]
 802f78e:	462c      	mov	r4, r5
 802f790:	9d00      	ldr	r5, [sp, #0]
 802f792:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802f796:	42a5      	cmp	r5, r4
 802f798:	bfb8      	it	lt
 802f79a:	4625      	movlt	r5, r4
 802f79c:	b103      	cbz	r3, 802f7a0 <_svfiprintf_r+0x424>
 802f79e:	3501      	adds	r5, #1
 802f7a0:	f019 0302 	ands.w	r3, r9, #2
 802f7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 802f7a6:	bf18      	it	ne
 802f7a8:	3502      	addne	r5, #2
 802f7aa:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802f7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 802f7b0:	d123      	bne.n	802f7fa <_svfiprintf_r+0x47e>
 802f7b2:	9b03      	ldr	r3, [sp, #12]
 802f7b4:	eba3 0a05 	sub.w	sl, r3, r5
 802f7b8:	f1ba 0f00 	cmp.w	sl, #0
 802f7bc:	dd1d      	ble.n	802f7fa <_svfiprintf_r+0x47e>
 802f7be:	4bac      	ldr	r3, [pc, #688]	@ (802fa70 <_svfiprintf_r+0x6f4>)
 802f7c0:	6033      	str	r3, [r6, #0]
 802f7c2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f7c6:	f1ba 0f10 	cmp.w	sl, #16
 802f7ca:	f102 0201 	add.w	r2, r2, #1
 802f7ce:	f106 0008 	add.w	r0, r6, #8
 802f7d2:	f300 8153 	bgt.w	802fa7c <_svfiprintf_r+0x700>
 802f7d6:	eb0c 010a 	add.w	r1, ip, sl
 802f7da:	2a07      	cmp	r2, #7
 802f7dc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f7e0:	f8c6 a004 	str.w	sl, [r6, #4]
 802f7e4:	f340 815e 	ble.w	802faa4 <_svfiprintf_r+0x728>
 802f7e8:	9801      	ldr	r0, [sp, #4]
 802f7ea:	aa0e      	add	r2, sp, #56	@ 0x38
 802f7ec:	4659      	mov	r1, fp
 802f7ee:	f7ff fd47 	bl	802f280 <__ssprint_r>
 802f7f2:	2800      	cmp	r0, #0
 802f7f4:	f040 81b9 	bne.w	802fb6a <_svfiprintf_r+0x7ee>
 802f7f8:	ae11      	add	r6, sp, #68	@ 0x44
 802f7fa:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802f7fe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f802:	b161      	cbz	r1, 802f81e <_svfiprintf_r+0x4a2>
 802f804:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802f808:	3301      	adds	r3, #1
 802f80a:	6031      	str	r1, [r6, #0]
 802f80c:	2101      	movs	r1, #1
 802f80e:	440a      	add	r2, r1
 802f810:	2b07      	cmp	r3, #7
 802f812:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f816:	6071      	str	r1, [r6, #4]
 802f818:	f300 8146 	bgt.w	802faa8 <_svfiprintf_r+0x72c>
 802f81c:	3608      	adds	r6, #8
 802f81e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f820:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f824:	b159      	cbz	r1, 802f83e <_svfiprintf_r+0x4c2>
 802f826:	a90d      	add	r1, sp, #52	@ 0x34
 802f828:	3301      	adds	r3, #1
 802f82a:	6031      	str	r1, [r6, #0]
 802f82c:	2102      	movs	r1, #2
 802f82e:	440a      	add	r2, r1
 802f830:	2b07      	cmp	r3, #7
 802f832:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f836:	6071      	str	r1, [r6, #4]
 802f838:	f300 813f 	bgt.w	802faba <_svfiprintf_r+0x73e>
 802f83c:	3608      	adds	r6, #8
 802f83e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802f840:	2b80      	cmp	r3, #128	@ 0x80
 802f842:	d123      	bne.n	802f88c <_svfiprintf_r+0x510>
 802f844:	9b03      	ldr	r3, [sp, #12]
 802f846:	eba3 0a05 	sub.w	sl, r3, r5
 802f84a:	f1ba 0f00 	cmp.w	sl, #0
 802f84e:	dd1d      	ble.n	802f88c <_svfiprintf_r+0x510>
 802f850:	4b88      	ldr	r3, [pc, #544]	@ (802fa74 <_svfiprintf_r+0x6f8>)
 802f852:	6033      	str	r3, [r6, #0]
 802f854:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802f858:	f1ba 0f10 	cmp.w	sl, #16
 802f85c:	f102 0201 	add.w	r2, r2, #1
 802f860:	f106 0008 	add.w	r0, r6, #8
 802f864:	f300 8132 	bgt.w	802facc <_svfiprintf_r+0x750>
 802f868:	eb0c 010a 	add.w	r1, ip, sl
 802f86c:	2a07      	cmp	r2, #7
 802f86e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f872:	f8c6 a004 	str.w	sl, [r6, #4]
 802f876:	f340 813d 	ble.w	802faf4 <_svfiprintf_r+0x778>
 802f87a:	9801      	ldr	r0, [sp, #4]
 802f87c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f87e:	4659      	mov	r1, fp
 802f880:	f7ff fcfe 	bl	802f280 <__ssprint_r>
 802f884:	2800      	cmp	r0, #0
 802f886:	f040 8170 	bne.w	802fb6a <_svfiprintf_r+0x7ee>
 802f88a:	ae11      	add	r6, sp, #68	@ 0x44
 802f88c:	9b00      	ldr	r3, [sp, #0]
 802f88e:	1ae4      	subs	r4, r4, r3
 802f890:	2c00      	cmp	r4, #0
 802f892:	dd1a      	ble.n	802f8ca <_svfiprintf_r+0x54e>
 802f894:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f898:	4876      	ldr	r0, [pc, #472]	@ (802fa74 <_svfiprintf_r+0x6f8>)
 802f89a:	6030      	str	r0, [r6, #0]
 802f89c:	2c10      	cmp	r4, #16
 802f89e:	f103 0301 	add.w	r3, r3, #1
 802f8a2:	f106 0108 	add.w	r1, r6, #8
 802f8a6:	f300 8127 	bgt.w	802faf8 <_svfiprintf_r+0x77c>
 802f8aa:	6074      	str	r4, [r6, #4]
 802f8ac:	2b07      	cmp	r3, #7
 802f8ae:	4414      	add	r4, r2
 802f8b0:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802f8b4:	f340 8131 	ble.w	802fb1a <_svfiprintf_r+0x79e>
 802f8b8:	9801      	ldr	r0, [sp, #4]
 802f8ba:	aa0e      	add	r2, sp, #56	@ 0x38
 802f8bc:	4659      	mov	r1, fp
 802f8be:	f7ff fcdf 	bl	802f280 <__ssprint_r>
 802f8c2:	2800      	cmp	r0, #0
 802f8c4:	f040 8151 	bne.w	802fb6a <_svfiprintf_r+0x7ee>
 802f8c8:	ae11      	add	r6, sp, #68	@ 0x44
 802f8ca:	9b00      	ldr	r3, [sp, #0]
 802f8cc:	9a00      	ldr	r2, [sp, #0]
 802f8ce:	6073      	str	r3, [r6, #4]
 802f8d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f8d2:	f8c6 8000 	str.w	r8, [r6]
 802f8d6:	4413      	add	r3, r2
 802f8d8:	9310      	str	r3, [sp, #64]	@ 0x40
 802f8da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f8dc:	3301      	adds	r3, #1
 802f8de:	2b07      	cmp	r3, #7
 802f8e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f8e2:	f300 811c 	bgt.w	802fb1e <_svfiprintf_r+0x7a2>
 802f8e6:	f106 0308 	add.w	r3, r6, #8
 802f8ea:	f019 0f04 	tst.w	r9, #4
 802f8ee:	f040 811e 	bne.w	802fb2e <_svfiprintf_r+0x7b2>
 802f8f2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802f8f6:	42aa      	cmp	r2, r5
 802f8f8:	bfac      	ite	ge
 802f8fa:	189b      	addge	r3, r3, r2
 802f8fc:	195b      	addlt	r3, r3, r5
 802f8fe:	9304      	str	r3, [sp, #16]
 802f900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f902:	b13b      	cbz	r3, 802f914 <_svfiprintf_r+0x598>
 802f904:	9801      	ldr	r0, [sp, #4]
 802f906:	aa0e      	add	r2, sp, #56	@ 0x38
 802f908:	4659      	mov	r1, fp
 802f90a:	f7ff fcb9 	bl	802f280 <__ssprint_r>
 802f90e:	2800      	cmp	r0, #0
 802f910:	f040 812b 	bne.w	802fb6a <_svfiprintf_r+0x7ee>
 802f914:	2300      	movs	r3, #0
 802f916:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f918:	463d      	mov	r5, r7
 802f91a:	ae11      	add	r6, sp, #68	@ 0x44
 802f91c:	e557      	b.n	802f3ce <_svfiprintf_r+0x52>
 802f91e:	4640      	mov	r0, r8
 802f920:	f7e0 fcbe 	bl	80102a0 <strlen>
 802f924:	9000      	str	r0, [sp, #0]
 802f926:	e732      	b.n	802f78e <_svfiprintf_r+0x412>
 802f928:	f049 0910 	orr.w	r9, r9, #16
 802f92c:	f019 0320 	ands.w	r3, r9, #32
 802f930:	d008      	beq.n	802f944 <_svfiprintf_r+0x5c8>
 802f932:	3507      	adds	r5, #7
 802f934:	f025 0507 	bic.w	r5, r5, #7
 802f938:	462f      	mov	r7, r5
 802f93a:	686d      	ldr	r5, [r5, #4]
 802f93c:	f857 4b08 	ldr.w	r4, [r7], #8
 802f940:	2301      	movs	r3, #1
 802f942:	e6d7      	b.n	802f6f4 <_svfiprintf_r+0x378>
 802f944:	462f      	mov	r7, r5
 802f946:	f019 0510 	ands.w	r5, r9, #16
 802f94a:	f857 4b04 	ldr.w	r4, [r7], #4
 802f94e:	d001      	beq.n	802f954 <_svfiprintf_r+0x5d8>
 802f950:	461d      	mov	r5, r3
 802f952:	e7f5      	b.n	802f940 <_svfiprintf_r+0x5c4>
 802f954:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f958:	d001      	beq.n	802f95e <_svfiprintf_r+0x5e2>
 802f95a:	b2a4      	uxth	r4, r4
 802f95c:	e7f0      	b.n	802f940 <_svfiprintf_r+0x5c4>
 802f95e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f962:	d0ed      	beq.n	802f940 <_svfiprintf_r+0x5c4>
 802f964:	b2e4      	uxtb	r4, r4
 802f966:	e7f3      	b.n	802f950 <_svfiprintf_r+0x5d4>
 802f968:	4a43      	ldr	r2, [pc, #268]	@ (802fa78 <_svfiprintf_r+0x6fc>)
 802f96a:	e5c6      	b.n	802f4fa <_svfiprintf_r+0x17e>
 802f96c:	462f      	mov	r7, r5
 802f96e:	f019 0510 	ands.w	r5, r9, #16
 802f972:	f857 4b04 	ldr.w	r4, [r7], #4
 802f976:	d001      	beq.n	802f97c <_svfiprintf_r+0x600>
 802f978:	4615      	mov	r5, r2
 802f97a:	e5ca      	b.n	802f512 <_svfiprintf_r+0x196>
 802f97c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802f980:	d001      	beq.n	802f986 <_svfiprintf_r+0x60a>
 802f982:	b2a4      	uxth	r4, r4
 802f984:	e5c5      	b.n	802f512 <_svfiprintf_r+0x196>
 802f986:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f98a:	f43f adc2 	beq.w	802f512 <_svfiprintf_r+0x196>
 802f98e:	b2e4      	uxtb	r4, r4
 802f990:	e7f2      	b.n	802f978 <_svfiprintf_r+0x5fc>
 802f992:	2c0a      	cmp	r4, #10
 802f994:	f175 0300 	sbcs.w	r3, r5, #0
 802f998:	d206      	bcs.n	802f9a8 <_svfiprintf_r+0x62c>
 802f99a:	3430      	adds	r4, #48	@ 0x30
 802f99c:	b2e4      	uxtb	r4, r4
 802f99e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802f9a2:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802f9a6:	e129      	b.n	802fbfc <_svfiprintf_r+0x880>
 802f9a8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802f9ac:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802f9b0:	f04f 0900 	mov.w	r9, #0
 802f9b4:	930a      	str	r3, [sp, #40]	@ 0x28
 802f9b6:	220a      	movs	r2, #10
 802f9b8:	2300      	movs	r3, #0
 802f9ba:	4620      	mov	r0, r4
 802f9bc:	4629      	mov	r1, r5
 802f9be:	f7e1 f9cb 	bl	8010d58 <__aeabi_uldivmod>
 802f9c2:	460b      	mov	r3, r1
 802f9c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f9c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 802f9c8:	3230      	adds	r2, #48	@ 0x30
 802f9ca:	f801 2c01 	strb.w	r2, [r1, #-1]
 802f9ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802f9d0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802f9d4:	f109 0901 	add.w	r9, r9, #1
 802f9d8:	b1e2      	cbz	r2, 802fa14 <_svfiprintf_r+0x698>
 802f9da:	9a06      	ldr	r2, [sp, #24]
 802f9dc:	7812      	ldrb	r2, [r2, #0]
 802f9de:	454a      	cmp	r2, r9
 802f9e0:	d118      	bne.n	802fa14 <_svfiprintf_r+0x698>
 802f9e2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802f9e6:	d015      	beq.n	802fa14 <_svfiprintf_r+0x698>
 802f9e8:	2c0a      	cmp	r4, #10
 802f9ea:	f175 0200 	sbcs.w	r2, r5, #0
 802f9ee:	d311      	bcc.n	802fa14 <_svfiprintf_r+0x698>
 802f9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 802f9f2:	9b07      	ldr	r3, [sp, #28]
 802f9f4:	9908      	ldr	r1, [sp, #32]
 802f9f6:	eba8 0803 	sub.w	r8, r8, r3
 802f9fa:	461a      	mov	r2, r3
 802f9fc:	4640      	mov	r0, r8
 802f9fe:	f7fc ff86 	bl	802c90e <strncpy>
 802fa02:	9b06      	ldr	r3, [sp, #24]
 802fa04:	785a      	ldrb	r2, [r3, #1]
 802fa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fa08:	b172      	cbz	r2, 802fa28 <_svfiprintf_r+0x6ac>
 802fa0a:	9a06      	ldr	r2, [sp, #24]
 802fa0c:	3201      	adds	r2, #1
 802fa0e:	9206      	str	r2, [sp, #24]
 802fa10:	f04f 0900 	mov.w	r9, #0
 802fa14:	2c0a      	cmp	r4, #10
 802fa16:	f175 0500 	sbcs.w	r5, r5, #0
 802fa1a:	f0c0 80ef 	bcc.w	802fbfc <_svfiprintf_r+0x880>
 802fa1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802fa20:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802fa24:	461d      	mov	r5, r3
 802fa26:	e7c6      	b.n	802f9b6 <_svfiprintf_r+0x63a>
 802fa28:	4691      	mov	r9, r2
 802fa2a:	e7f3      	b.n	802fa14 <_svfiprintf_r+0x698>
 802fa2c:	f004 030f 	and.w	r3, r4, #15
 802fa30:	9a05      	ldr	r2, [sp, #20]
 802fa32:	0924      	lsrs	r4, r4, #4
 802fa34:	5cd3      	ldrb	r3, [r2, r3]
 802fa36:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fa3a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802fa3e:	092d      	lsrs	r5, r5, #4
 802fa40:	ea54 0305 	orrs.w	r3, r4, r5
 802fa44:	d1f2      	bne.n	802fa2c <_svfiprintf_r+0x6b0>
 802fa46:	e0d9      	b.n	802fbfc <_svfiprintf_r+0x880>
 802fa48:	b923      	cbnz	r3, 802fa54 <_svfiprintf_r+0x6d8>
 802fa4a:	f019 0f01 	tst.w	r9, #1
 802fa4e:	d001      	beq.n	802fa54 <_svfiprintf_r+0x6d8>
 802fa50:	2430      	movs	r4, #48	@ 0x30
 802fa52:	e7a4      	b.n	802f99e <_svfiprintf_r+0x622>
 802fa54:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fa58:	e0d0      	b.n	802fbfc <_svfiprintf_r+0x880>
 802fa5a:	2b00      	cmp	r3, #0
 802fa5c:	f000 80a1 	beq.w	802fba2 <_svfiprintf_r+0x826>
 802fa60:	2400      	movs	r4, #0
 802fa62:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802fa66:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802fa6a:	462f      	mov	r7, r5
 802fa6c:	e5e0      	b.n	802f630 <_svfiprintf_r+0x2b4>
 802fa6e:	bf00      	nop
 802fa70:	0803bf27 	.word	0x0803bf27
 802fa74:	0803bf17 	.word	0x0803bf17
 802fa78:	0803ba04 	.word	0x0803ba04
 802fa7c:	2110      	movs	r1, #16
 802fa7e:	6071      	str	r1, [r6, #4]
 802fa80:	2a07      	cmp	r2, #7
 802fa82:	4461      	add	r1, ip
 802fa84:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fa88:	dd08      	ble.n	802fa9c <_svfiprintf_r+0x720>
 802fa8a:	9801      	ldr	r0, [sp, #4]
 802fa8c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fa8e:	4659      	mov	r1, fp
 802fa90:	f7ff fbf6 	bl	802f280 <__ssprint_r>
 802fa94:	2800      	cmp	r0, #0
 802fa96:	d168      	bne.n	802fb6a <_svfiprintf_r+0x7ee>
 802fa98:	4b5c      	ldr	r3, [pc, #368]	@ (802fc0c <_svfiprintf_r+0x890>)
 802fa9a:	a811      	add	r0, sp, #68	@ 0x44
 802fa9c:	f1aa 0a10 	sub.w	sl, sl, #16
 802faa0:	4606      	mov	r6, r0
 802faa2:	e68d      	b.n	802f7c0 <_svfiprintf_r+0x444>
 802faa4:	4606      	mov	r6, r0
 802faa6:	e6a8      	b.n	802f7fa <_svfiprintf_r+0x47e>
 802faa8:	9801      	ldr	r0, [sp, #4]
 802faaa:	aa0e      	add	r2, sp, #56	@ 0x38
 802faac:	4659      	mov	r1, fp
 802faae:	f7ff fbe7 	bl	802f280 <__ssprint_r>
 802fab2:	2800      	cmp	r0, #0
 802fab4:	d159      	bne.n	802fb6a <_svfiprintf_r+0x7ee>
 802fab6:	ae11      	add	r6, sp, #68	@ 0x44
 802fab8:	e6b1      	b.n	802f81e <_svfiprintf_r+0x4a2>
 802faba:	9801      	ldr	r0, [sp, #4]
 802fabc:	aa0e      	add	r2, sp, #56	@ 0x38
 802fabe:	4659      	mov	r1, fp
 802fac0:	f7ff fbde 	bl	802f280 <__ssprint_r>
 802fac4:	2800      	cmp	r0, #0
 802fac6:	d150      	bne.n	802fb6a <_svfiprintf_r+0x7ee>
 802fac8:	ae11      	add	r6, sp, #68	@ 0x44
 802faca:	e6b8      	b.n	802f83e <_svfiprintf_r+0x4c2>
 802facc:	2110      	movs	r1, #16
 802face:	6071      	str	r1, [r6, #4]
 802fad0:	2a07      	cmp	r2, #7
 802fad2:	4461      	add	r1, ip
 802fad4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fad8:	dd08      	ble.n	802faec <_svfiprintf_r+0x770>
 802fada:	9801      	ldr	r0, [sp, #4]
 802fadc:	aa0e      	add	r2, sp, #56	@ 0x38
 802fade:	4659      	mov	r1, fp
 802fae0:	f7ff fbce 	bl	802f280 <__ssprint_r>
 802fae4:	2800      	cmp	r0, #0
 802fae6:	d140      	bne.n	802fb6a <_svfiprintf_r+0x7ee>
 802fae8:	4b49      	ldr	r3, [pc, #292]	@ (802fc10 <_svfiprintf_r+0x894>)
 802faea:	a811      	add	r0, sp, #68	@ 0x44
 802faec:	f1aa 0a10 	sub.w	sl, sl, #16
 802faf0:	4606      	mov	r6, r0
 802faf2:	e6ae      	b.n	802f852 <_svfiprintf_r+0x4d6>
 802faf4:	4606      	mov	r6, r0
 802faf6:	e6c9      	b.n	802f88c <_svfiprintf_r+0x510>
 802faf8:	2010      	movs	r0, #16
 802fafa:	4402      	add	r2, r0
 802fafc:	2b07      	cmp	r3, #7
 802fafe:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802fb02:	6070      	str	r0, [r6, #4]
 802fb04:	dd06      	ble.n	802fb14 <_svfiprintf_r+0x798>
 802fb06:	9801      	ldr	r0, [sp, #4]
 802fb08:	aa0e      	add	r2, sp, #56	@ 0x38
 802fb0a:	4659      	mov	r1, fp
 802fb0c:	f7ff fbb8 	bl	802f280 <__ssprint_r>
 802fb10:	bb58      	cbnz	r0, 802fb6a <_svfiprintf_r+0x7ee>
 802fb12:	a911      	add	r1, sp, #68	@ 0x44
 802fb14:	3c10      	subs	r4, #16
 802fb16:	460e      	mov	r6, r1
 802fb18:	e6bc      	b.n	802f894 <_svfiprintf_r+0x518>
 802fb1a:	460e      	mov	r6, r1
 802fb1c:	e6d5      	b.n	802f8ca <_svfiprintf_r+0x54e>
 802fb1e:	9801      	ldr	r0, [sp, #4]
 802fb20:	aa0e      	add	r2, sp, #56	@ 0x38
 802fb22:	4659      	mov	r1, fp
 802fb24:	f7ff fbac 	bl	802f280 <__ssprint_r>
 802fb28:	b9f8      	cbnz	r0, 802fb6a <_svfiprintf_r+0x7ee>
 802fb2a:	ab11      	add	r3, sp, #68	@ 0x44
 802fb2c:	e6dd      	b.n	802f8ea <_svfiprintf_r+0x56e>
 802fb2e:	9a03      	ldr	r2, [sp, #12]
 802fb30:	1b54      	subs	r4, r2, r5
 802fb32:	2c00      	cmp	r4, #0
 802fb34:	f77f aedd 	ble.w	802f8f2 <_svfiprintf_r+0x576>
 802fb38:	4e34      	ldr	r6, [pc, #208]	@ (802fc0c <_svfiprintf_r+0x890>)
 802fb3a:	f04f 0810 	mov.w	r8, #16
 802fb3e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802fb42:	2c10      	cmp	r4, #16
 802fb44:	f102 0201 	add.w	r2, r2, #1
 802fb48:	601e      	str	r6, [r3, #0]
 802fb4a:	dc17      	bgt.n	802fb7c <_svfiprintf_r+0x800>
 802fb4c:	605c      	str	r4, [r3, #4]
 802fb4e:	2a07      	cmp	r2, #7
 802fb50:	440c      	add	r4, r1
 802fb52:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802fb56:	f77f aecc 	ble.w	802f8f2 <_svfiprintf_r+0x576>
 802fb5a:	9801      	ldr	r0, [sp, #4]
 802fb5c:	aa0e      	add	r2, sp, #56	@ 0x38
 802fb5e:	4659      	mov	r1, fp
 802fb60:	f7ff fb8e 	bl	802f280 <__ssprint_r>
 802fb64:	2800      	cmp	r0, #0
 802fb66:	f43f aec4 	beq.w	802f8f2 <_svfiprintf_r+0x576>
 802fb6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802fb6e:	065b      	lsls	r3, r3, #25
 802fb70:	f53f ac1c 	bmi.w	802f3ac <_svfiprintf_r+0x30>
 802fb74:	9804      	ldr	r0, [sp, #16]
 802fb76:	b03b      	add	sp, #236	@ 0xec
 802fb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fb7c:	3110      	adds	r1, #16
 802fb7e:	2a07      	cmp	r2, #7
 802fb80:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802fb84:	f8c3 8004 	str.w	r8, [r3, #4]
 802fb88:	dc02      	bgt.n	802fb90 <_svfiprintf_r+0x814>
 802fb8a:	3308      	adds	r3, #8
 802fb8c:	3c10      	subs	r4, #16
 802fb8e:	e7d6      	b.n	802fb3e <_svfiprintf_r+0x7c2>
 802fb90:	9801      	ldr	r0, [sp, #4]
 802fb92:	aa0e      	add	r2, sp, #56	@ 0x38
 802fb94:	4659      	mov	r1, fp
 802fb96:	f7ff fb73 	bl	802f280 <__ssprint_r>
 802fb9a:	2800      	cmp	r0, #0
 802fb9c:	d1e5      	bne.n	802fb6a <_svfiprintf_r+0x7ee>
 802fb9e:	ab11      	add	r3, sp, #68	@ 0x44
 802fba0:	e7f4      	b.n	802fb8c <_svfiprintf_r+0x810>
 802fba2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802fba4:	2b00      	cmp	r3, #0
 802fba6:	d0e0      	beq.n	802fb6a <_svfiprintf_r+0x7ee>
 802fba8:	9801      	ldr	r0, [sp, #4]
 802fbaa:	aa0e      	add	r2, sp, #56	@ 0x38
 802fbac:	4659      	mov	r1, fp
 802fbae:	f7ff fb67 	bl	802f280 <__ssprint_r>
 802fbb2:	e7da      	b.n	802fb6a <_svfiprintf_r+0x7ee>
 802fbb4:	ea54 0205 	orrs.w	r2, r4, r5
 802fbb8:	46ca      	mov	sl, r9
 802fbba:	f43f adac 	beq.w	802f716 <_svfiprintf_r+0x39a>
 802fbbe:	2b01      	cmp	r3, #1
 802fbc0:	f43f aee7 	beq.w	802f992 <_svfiprintf_r+0x616>
 802fbc4:	2b02      	cmp	r3, #2
 802fbc6:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802fbca:	f43f af2f 	beq.w	802fa2c <_svfiprintf_r+0x6b0>
 802fbce:	f004 0307 	and.w	r3, r4, #7
 802fbd2:	08e4      	lsrs	r4, r4, #3
 802fbd4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802fbd8:	08ed      	lsrs	r5, r5, #3
 802fbda:	3330      	adds	r3, #48	@ 0x30
 802fbdc:	ea54 0105 	orrs.w	r1, r4, r5
 802fbe0:	4642      	mov	r2, r8
 802fbe2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802fbe6:	d1f2      	bne.n	802fbce <_svfiprintf_r+0x852>
 802fbe8:	f01a 0f01 	tst.w	sl, #1
 802fbec:	d006      	beq.n	802fbfc <_svfiprintf_r+0x880>
 802fbee:	2b30      	cmp	r3, #48	@ 0x30
 802fbf0:	d004      	beq.n	802fbfc <_svfiprintf_r+0x880>
 802fbf2:	2330      	movs	r3, #48	@ 0x30
 802fbf4:	f808 3c01 	strb.w	r3, [r8, #-1]
 802fbf8:	f1a2 0802 	sub.w	r8, r2, #2
 802fbfc:	ab3a      	add	r3, sp, #232	@ 0xe8
 802fbfe:	eba3 0308 	sub.w	r3, r3, r8
 802fc02:	9c00      	ldr	r4, [sp, #0]
 802fc04:	9300      	str	r3, [sp, #0]
 802fc06:	46d1      	mov	r9, sl
 802fc08:	e5c2      	b.n	802f790 <_svfiprintf_r+0x414>
 802fc0a:	bf00      	nop
 802fc0c:	0803bf27 	.word	0x0803bf27
 802fc10:	0803bf17 	.word	0x0803bf17

0802fc14 <_sungetc_r>:
 802fc14:	b538      	push	{r3, r4, r5, lr}
 802fc16:	1c4b      	adds	r3, r1, #1
 802fc18:	4614      	mov	r4, r2
 802fc1a:	d103      	bne.n	802fc24 <_sungetc_r+0x10>
 802fc1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802fc20:	4628      	mov	r0, r5
 802fc22:	bd38      	pop	{r3, r4, r5, pc}
 802fc24:	8993      	ldrh	r3, [r2, #12]
 802fc26:	f023 0320 	bic.w	r3, r3, #32
 802fc2a:	8193      	strh	r3, [r2, #12]
 802fc2c:	6853      	ldr	r3, [r2, #4]
 802fc2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802fc30:	b2cd      	uxtb	r5, r1
 802fc32:	b18a      	cbz	r2, 802fc58 <_sungetc_r+0x44>
 802fc34:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802fc36:	429a      	cmp	r2, r3
 802fc38:	dd08      	ble.n	802fc4c <_sungetc_r+0x38>
 802fc3a:	6823      	ldr	r3, [r4, #0]
 802fc3c:	1e5a      	subs	r2, r3, #1
 802fc3e:	6022      	str	r2, [r4, #0]
 802fc40:	f803 5c01 	strb.w	r5, [r3, #-1]
 802fc44:	6863      	ldr	r3, [r4, #4]
 802fc46:	3301      	adds	r3, #1
 802fc48:	6063      	str	r3, [r4, #4]
 802fc4a:	e7e9      	b.n	802fc20 <_sungetc_r+0xc>
 802fc4c:	4621      	mov	r1, r4
 802fc4e:	f005 f8a7 	bl	8034da0 <__submore>
 802fc52:	2800      	cmp	r0, #0
 802fc54:	d0f1      	beq.n	802fc3a <_sungetc_r+0x26>
 802fc56:	e7e1      	b.n	802fc1c <_sungetc_r+0x8>
 802fc58:	6921      	ldr	r1, [r4, #16]
 802fc5a:	6822      	ldr	r2, [r4, #0]
 802fc5c:	b141      	cbz	r1, 802fc70 <_sungetc_r+0x5c>
 802fc5e:	4291      	cmp	r1, r2
 802fc60:	d206      	bcs.n	802fc70 <_sungetc_r+0x5c>
 802fc62:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802fc66:	42a9      	cmp	r1, r5
 802fc68:	d102      	bne.n	802fc70 <_sungetc_r+0x5c>
 802fc6a:	3a01      	subs	r2, #1
 802fc6c:	6022      	str	r2, [r4, #0]
 802fc6e:	e7ea      	b.n	802fc46 <_sungetc_r+0x32>
 802fc70:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802fc74:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802fc78:	6323      	str	r3, [r4, #48]	@ 0x30
 802fc7a:	2303      	movs	r3, #3
 802fc7c:	6363      	str	r3, [r4, #52]	@ 0x34
 802fc7e:	4623      	mov	r3, r4
 802fc80:	f803 5f42 	strb.w	r5, [r3, #66]!
 802fc84:	6023      	str	r3, [r4, #0]
 802fc86:	2301      	movs	r3, #1
 802fc88:	e7de      	b.n	802fc48 <_sungetc_r+0x34>

0802fc8a <__ssrefill_r>:
 802fc8a:	b510      	push	{r4, lr}
 802fc8c:	460c      	mov	r4, r1
 802fc8e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802fc90:	b169      	cbz	r1, 802fcae <__ssrefill_r+0x24>
 802fc92:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802fc96:	4299      	cmp	r1, r3
 802fc98:	d001      	beq.n	802fc9e <__ssrefill_r+0x14>
 802fc9a:	f7fe ff2f 	bl	802eafc <_free_r>
 802fc9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802fca0:	6063      	str	r3, [r4, #4]
 802fca2:	2000      	movs	r0, #0
 802fca4:	6320      	str	r0, [r4, #48]	@ 0x30
 802fca6:	b113      	cbz	r3, 802fcae <__ssrefill_r+0x24>
 802fca8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802fcaa:	6023      	str	r3, [r4, #0]
 802fcac:	bd10      	pop	{r4, pc}
 802fcae:	6923      	ldr	r3, [r4, #16]
 802fcb0:	6023      	str	r3, [r4, #0]
 802fcb2:	2300      	movs	r3, #0
 802fcb4:	6063      	str	r3, [r4, #4]
 802fcb6:	89a3      	ldrh	r3, [r4, #12]
 802fcb8:	f043 0320 	orr.w	r3, r3, #32
 802fcbc:	81a3      	strh	r3, [r4, #12]
 802fcbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802fcc2:	e7f3      	b.n	802fcac <__ssrefill_r+0x22>

0802fcc4 <_sfread_r>:
 802fcc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fcc8:	461f      	mov	r7, r3
 802fcca:	4613      	mov	r3, r2
 802fccc:	437b      	muls	r3, r7
 802fcce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802fcd0:	9000      	str	r0, [sp, #0]
 802fcd2:	4688      	mov	r8, r1
 802fcd4:	4691      	mov	r9, r2
 802fcd6:	d028      	beq.n	802fd2a <_sfread_r+0x66>
 802fcd8:	461e      	mov	r6, r3
 802fcda:	f04f 0b00 	mov.w	fp, #0
 802fcde:	e9d4 1500 	ldrd	r1, r5, [r4]
 802fce2:	42b5      	cmp	r5, r6
 802fce4:	d30b      	bcc.n	802fcfe <_sfread_r+0x3a>
 802fce6:	4632      	mov	r2, r6
 802fce8:	4640      	mov	r0, r8
 802fcea:	f7fe f805 	bl	802dcf8 <memcpy>
 802fcee:	6862      	ldr	r2, [r4, #4]
 802fcf0:	6821      	ldr	r1, [r4, #0]
 802fcf2:	1b92      	subs	r2, r2, r6
 802fcf4:	4431      	add	r1, r6
 802fcf6:	6062      	str	r2, [r4, #4]
 802fcf8:	6021      	str	r1, [r4, #0]
 802fcfa:	463b      	mov	r3, r7
 802fcfc:	e015      	b.n	802fd2a <_sfread_r+0x66>
 802fcfe:	462a      	mov	r2, r5
 802fd00:	4640      	mov	r0, r8
 802fd02:	9301      	str	r3, [sp, #4]
 802fd04:	f7fd fff8 	bl	802dcf8 <memcpy>
 802fd08:	6822      	ldr	r2, [r4, #0]
 802fd0a:	9800      	ldr	r0, [sp, #0]
 802fd0c:	442a      	add	r2, r5
 802fd0e:	e9c4 2b00 	strd	r2, fp, [r4]
 802fd12:	4621      	mov	r1, r4
 802fd14:	f7ff ffb9 	bl	802fc8a <__ssrefill_r>
 802fd18:	44a8      	add	r8, r5
 802fd1a:	9b01      	ldr	r3, [sp, #4]
 802fd1c:	eba6 0a05 	sub.w	sl, r6, r5
 802fd20:	b138      	cbz	r0, 802fd32 <_sfread_r+0x6e>
 802fd22:	441d      	add	r5, r3
 802fd24:	1bad      	subs	r5, r5, r6
 802fd26:	fbb5 f3f9 	udiv	r3, r5, r9
 802fd2a:	4618      	mov	r0, r3
 802fd2c:	b003      	add	sp, #12
 802fd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802fd32:	4656      	mov	r6, sl
 802fd34:	e7d3      	b.n	802fcde <_sfread_r+0x1a>
	...

0802fd38 <__ssvfiscanf_r>:
 802fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fd3c:	b0df      	sub	sp, #380	@ 0x17c
 802fd3e:	af02      	add	r7, sp, #8
 802fd40:	460c      	mov	r4, r1
 802fd42:	623b      	str	r3, [r7, #32]
 802fd44:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802fd48:	6278      	str	r0, [r7, #36]	@ 0x24
 802fd4a:	049d      	lsls	r5, r3, #18
 802fd4c:	60ba      	str	r2, [r7, #8]
 802fd4e:	d406      	bmi.n	802fd5e <__ssvfiscanf_r+0x26>
 802fd50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802fd54:	818b      	strh	r3, [r1, #12]
 802fd56:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802fd58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802fd5c:	664b      	str	r3, [r1, #100]	@ 0x64
 802fd5e:	2300      	movs	r3, #0
 802fd60:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802fd64:	60fb      	str	r3, [r7, #12]
 802fd66:	469b      	mov	fp, r3
 802fd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fd6a:	61fb      	str	r3, [r7, #28]
 802fd6c:	e005      	b.n	802fd7a <__ssvfiscanf_r+0x42>
 802fd6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fd70:	4621      	mov	r1, r4
 802fd72:	f7ff ff8a 	bl	802fc8a <__ssrefill_r>
 802fd76:	b168      	cbz	r0, 802fd94 <__ssvfiscanf_r+0x5c>
 802fd78:	60bd      	str	r5, [r7, #8]
 802fd7a:	68bd      	ldr	r5, [r7, #8]
 802fd7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 802fd80:	637b      	str	r3, [r7, #52]	@ 0x34
 802fd82:	b333      	cbz	r3, 802fdd2 <__ssvfiscanf_r+0x9a>
 802fd84:	4a75      	ldr	r2, [pc, #468]	@ (802ff5c <__ssvfiscanf_r+0x224>)
 802fd86:	5cd6      	ldrb	r6, [r2, r3]
 802fd88:	f016 0608 	ands.w	r6, r6, #8
 802fd8c:	d011      	beq.n	802fdb2 <__ssvfiscanf_r+0x7a>
 802fd8e:	6863      	ldr	r3, [r4, #4]
 802fd90:	2b00      	cmp	r3, #0
 802fd92:	ddec      	ble.n	802fd6e <__ssvfiscanf_r+0x36>
 802fd94:	6823      	ldr	r3, [r4, #0]
 802fd96:	4971      	ldr	r1, [pc, #452]	@ (802ff5c <__ssvfiscanf_r+0x224>)
 802fd98:	781a      	ldrb	r2, [r3, #0]
 802fd9a:	5c8a      	ldrb	r2, [r1, r2]
 802fd9c:	0710      	lsls	r0, r2, #28
 802fd9e:	d5eb      	bpl.n	802fd78 <__ssvfiscanf_r+0x40>
 802fda0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802fda2:	3201      	adds	r2, #1
 802fda4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802fda6:	6862      	ldr	r2, [r4, #4]
 802fda8:	3301      	adds	r3, #1
 802fdaa:	3a01      	subs	r2, #1
 802fdac:	6062      	str	r2, [r4, #4]
 802fdae:	6023      	str	r3, [r4, #0]
 802fdb0:	e7ed      	b.n	802fd8e <__ssvfiscanf_r+0x56>
 802fdb2:	2b25      	cmp	r3, #37	@ 0x25
 802fdb4:	d15f      	bne.n	802fe76 <__ssvfiscanf_r+0x13e>
 802fdb6:	62be      	str	r6, [r7, #40]	@ 0x28
 802fdb8:	462a      	mov	r2, r5
 802fdba:	f812 3b01 	ldrb.w	r3, [r2], #1
 802fdbe:	60ba      	str	r2, [r7, #8]
 802fdc0:	2b7a      	cmp	r3, #122	@ 0x7a
 802fdc2:	d806      	bhi.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802fdc4:	2b42      	cmp	r3, #66	@ 0x42
 802fdc6:	d809      	bhi.n	802fddc <__ssvfiscanf_r+0xa4>
 802fdc8:	2b2a      	cmp	r3, #42	@ 0x2a
 802fdca:	d079      	beq.n	802fec0 <__ssvfiscanf_r+0x188>
 802fdcc:	d844      	bhi.n	802fe58 <__ssvfiscanf_r+0x120>
 802fdce:	2b25      	cmp	r3, #37	@ 0x25
 802fdd0:	d050      	beq.n	802fe74 <__ssvfiscanf_r+0x13c>
 802fdd2:	f1bb 0f00 	cmp.w	fp, #0
 802fdd6:	f000 810e 	beq.w	802fff6 <__ssvfiscanf_r+0x2be>
 802fdda:	e107      	b.n	802ffec <__ssvfiscanf_r+0x2b4>
 802fddc:	3b43      	subs	r3, #67	@ 0x43
 802fdde:	2b37      	cmp	r3, #55	@ 0x37
 802fde0:	f200 80fd 	bhi.w	802ffde <__ssvfiscanf_r+0x2a6>
 802fde4:	e8df f013 	tbh	[pc, r3, lsl #1]
 802fde8:	00a40117 	.word	0x00a40117
 802fdec:	00fb00fb 	.word	0x00fb00fb
 802fdf0:	00fb00fb 	.word	0x00fb00fb
 802fdf4:	00fb00fb 	.word	0x00fb00fb
 802fdf8:	008e00fb 	.word	0x008e00fb
 802fdfc:	00fb00fb 	.word	0x00fb00fb
 802fe00:	00fb00a8 	.word	0x00fb00a8
 802fe04:	00fb00fb 	.word	0x00fb00fb
 802fe08:	00fb00c0 	.word	0x00fb00c0
 802fe0c:	00fb00fb 	.word	0x00fb00fb
 802fe10:	00b400fb 	.word	0x00b400fb
 802fe14:	00fb00fb 	.word	0x00fb00fb
 802fe18:	00fb010d 	.word	0x00fb010d
 802fe1c:	00fb00fb 	.word	0x00fb00fb
 802fe20:	00fb00fb 	.word	0x00fb00fb
 802fe24:	00fb00fb 	.word	0x00fb00fb
 802fe28:	00a60119 	.word	0x00a60119
 802fe2c:	00fb00fb 	.word	0x00fb00fb
 802fe30:	008100fb 	.word	0x008100fb
 802fe34:	008e013e 	.word	0x008e013e
 802fe38:	007300fb 	.word	0x007300fb
 802fe3c:	01200095 	.word	0x01200095
 802fe40:	011d00aa 	.word	0x011d00aa
 802fe44:	00fb00fb 	.word	0x00fb00fb
 802fe48:	009200c2 	.word	0x009200c2
 802fe4c:	00fb00b0 	.word	0x00fb00b0
 802fe50:	00b400fb 	.word	0x00b400fb
 802fe54:	009200fb 	.word	0x009200fb
 802fe58:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802fe5c:	2a09      	cmp	r2, #9
 802fe5e:	d8b8      	bhi.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802fe60:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802fe64:	d1b5      	bne.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802fe66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802fe68:	220a      	movs	r2, #10
 802fe6a:	fb02 3301 	mla	r3, r2, r1, r3
 802fe6e:	3b30      	subs	r3, #48	@ 0x30
 802fe70:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fe72:	e02a      	b.n	802feca <__ssvfiscanf_r+0x192>
 802fe74:	68bd      	ldr	r5, [r7, #8]
 802fe76:	6863      	ldr	r3, [r4, #4]
 802fe78:	2b00      	cmp	r3, #0
 802fe7a:	dd0e      	ble.n	802fe9a <__ssvfiscanf_r+0x162>
 802fe7c:	6823      	ldr	r3, [r4, #0]
 802fe7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802fe82:	7819      	ldrb	r1, [r3, #0]
 802fe84:	4291      	cmp	r1, r2
 802fe86:	d1a4      	bne.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802fe88:	3301      	adds	r3, #1
 802fe8a:	6862      	ldr	r2, [r4, #4]
 802fe8c:	6023      	str	r3, [r4, #0]
 802fe8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fe90:	3a01      	subs	r2, #1
 802fe92:	3301      	adds	r3, #1
 802fe94:	6062      	str	r2, [r4, #4]
 802fe96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fe98:	e76e      	b.n	802fd78 <__ssvfiscanf_r+0x40>
 802fe9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fe9c:	4621      	mov	r1, r4
 802fe9e:	f7ff fef4 	bl	802fc8a <__ssrefill_r>
 802fea2:	2800      	cmp	r0, #0
 802fea4:	d0ea      	beq.n	802fe7c <__ssvfiscanf_r+0x144>
 802fea6:	69fb      	ldr	r3, [r7, #28]
 802fea8:	b113      	cbz	r3, 802feb0 <__ssvfiscanf_r+0x178>
 802feaa:	89a3      	ldrh	r3, [r4, #12]
 802feac:	065b      	lsls	r3, r3, #25
 802feae:	d590      	bpl.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802feb0:	f1bb 0f00 	cmp.w	fp, #0
 802feb4:	f040 8654 	bne.w	8030b60 <__ssvfiscanf_r+0xe28>
 802feb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802febc:	61fb      	str	r3, [r7, #28]
 802febe:	e09a      	b.n	802fff6 <__ssvfiscanf_r+0x2be>
 802fec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fec2:	4333      	orrs	r3, r6
 802fec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fec6:	d184      	bne.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802fec8:	2610      	movs	r6, #16
 802feca:	68bd      	ldr	r5, [r7, #8]
 802fecc:	e774      	b.n	802fdb8 <__ssvfiscanf_r+0x80>
 802fece:	0731      	lsls	r1, r6, #28
 802fed0:	f47f af7f 	bne.w	802fdd2 <__ssvfiscanf_r+0x9a>
 802fed4:	786b      	ldrb	r3, [r5, #1]
 802fed6:	2b6c      	cmp	r3, #108	@ 0x6c
 802fed8:	d104      	bne.n	802fee4 <__ssvfiscanf_r+0x1ac>
 802feda:	1cab      	adds	r3, r5, #2
 802fedc:	60bb      	str	r3, [r7, #8]
 802fede:	f046 0602 	orr.w	r6, r6, #2
 802fee2:	e7f2      	b.n	802feca <__ssvfiscanf_r+0x192>
 802fee4:	f046 0601 	orr.w	r6, r6, #1
 802fee8:	e7ef      	b.n	802feca <__ssvfiscanf_r+0x192>
 802feea:	0732      	lsls	r2, r6, #28
 802feec:	f47f af71 	bne.w	802fdd2 <__ssvfiscanf_r+0x9a>
 802fef0:	786b      	ldrb	r3, [r5, #1]
 802fef2:	2b68      	cmp	r3, #104	@ 0x68
 802fef4:	bf03      	ittte	eq
 802fef6:	1cab      	addeq	r3, r5, #2
 802fef8:	60bb      	streq	r3, [r7, #8]
 802fefa:	f046 0608 	orreq.w	r6, r6, #8
 802fefe:	f046 0604 	orrne.w	r6, r6, #4
 802ff02:	e7e2      	b.n	802feca <__ssvfiscanf_r+0x192>
 802ff04:	0733      	lsls	r3, r6, #28
 802ff06:	f47f af64 	bne.w	802fdd2 <__ssvfiscanf_r+0x9a>
 802ff0a:	e7e8      	b.n	802fede <__ssvfiscanf_r+0x1a6>
 802ff0c:	0735      	lsls	r5, r6, #28
 802ff0e:	d0dc      	beq.n	802feca <__ssvfiscanf_r+0x192>
 802ff10:	e75f      	b.n	802fdd2 <__ssvfiscanf_r+0x9a>
 802ff12:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802ff16:	f47f af5c 	bne.w	802fdd2 <__ssvfiscanf_r+0x9a>
 802ff1a:	f1bb 0f00 	cmp.w	fp, #0
 802ff1e:	d104      	bne.n	802ff2a <__ssvfiscanf_r+0x1f2>
 802ff20:	b082      	sub	sp, #8
 802ff22:	f10d 0b08 	add.w	fp, sp, #8
 802ff26:	e9cb 3300 	strd	r3, r3, [fp]
 802ff2a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802ff2e:	e7cc      	b.n	802feca <__ssvfiscanf_r+0x192>
 802ff30:	f046 0601 	orr.w	r6, r6, #1
 802ff34:	4b0a      	ldr	r3, [pc, #40]	@ (802ff60 <__ssvfiscanf_r+0x228>)
 802ff36:	e008      	b.n	802ff4a <__ssvfiscanf_r+0x212>
 802ff38:	f046 0601 	orr.w	r6, r6, #1
 802ff3c:	4b09      	ldr	r3, [pc, #36]	@ (802ff64 <__ssvfiscanf_r+0x22c>)
 802ff3e:	60fb      	str	r3, [r7, #12]
 802ff40:	2308      	movs	r3, #8
 802ff42:	617b      	str	r3, [r7, #20]
 802ff44:	2503      	movs	r5, #3
 802ff46:	e012      	b.n	802ff6e <__ssvfiscanf_r+0x236>
 802ff48:	4b06      	ldr	r3, [pc, #24]	@ (802ff64 <__ssvfiscanf_r+0x22c>)
 802ff4a:	60fb      	str	r3, [r7, #12]
 802ff4c:	230a      	movs	r3, #10
 802ff4e:	e7f8      	b.n	802ff42 <__ssvfiscanf_r+0x20a>
 802ff50:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802ff54:	4b03      	ldr	r3, [pc, #12]	@ (802ff64 <__ssvfiscanf_r+0x22c>)
 802ff56:	60fb      	str	r3, [r7, #12]
 802ff58:	2310      	movs	r3, #16
 802ff5a:	e7f2      	b.n	802ff42 <__ssvfiscanf_r+0x20a>
 802ff5c:	0803bda1 	.word	0x0803bda1
 802ff60:	0802bf89 	.word	0x0802bf89
 802ff64:	08034d89 	.word	0x08034d89
 802ff68:	f046 0601 	orr.w	r6, r6, #1
 802ff6c:	2502      	movs	r5, #2
 802ff6e:	6863      	ldr	r3, [r4, #4]
 802ff70:	2b00      	cmp	r3, #0
 802ff72:	dd7b      	ble.n	803006c <__ssvfiscanf_r+0x334>
 802ff74:	0671      	lsls	r1, r6, #25
 802ff76:	d407      	bmi.n	802ff88 <__ssvfiscanf_r+0x250>
 802ff78:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 8030304 <__ssvfiscanf_r+0x5cc>
 802ff7c:	6823      	ldr	r3, [r4, #0]
 802ff7e:	781a      	ldrb	r2, [r3, #0]
 802ff80:	f818 2002 	ldrb.w	r2, [r8, r2]
 802ff84:	0712      	lsls	r2, r2, #28
 802ff86:	d479      	bmi.n	803007c <__ssvfiscanf_r+0x344>
 802ff88:	2d02      	cmp	r5, #2
 802ff8a:	f000 836f 	beq.w	803066c <__ssvfiscanf_r+0x934>
 802ff8e:	2d03      	cmp	r5, #3
 802ff90:	f000 84f6 	beq.w	8030980 <__ssvfiscanf_r+0xc48>
 802ff94:	f006 0310 	and.w	r3, r6, #16
 802ff98:	2d01      	cmp	r5, #1
 802ff9a:	613b      	str	r3, [r7, #16]
 802ff9c:	f006 0501 	and.w	r5, r6, #1
 802ffa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ffa2:	f000 81b1 	beq.w	8030308 <__ssvfiscanf_r+0x5d0>
 802ffa6:	2b01      	cmp	r3, #1
 802ffa8:	bf38      	it	cc
 802ffaa:	2301      	movcc	r3, #1
 802ffac:	4698      	mov	r8, r3
 802ffae:	693b      	ldr	r3, [r7, #16]
 802ffb0:	2d00      	cmp	r5, #0
 802ffb2:	f000 813b 	beq.w	803022c <__ssvfiscanf_r+0x4f4>
 802ffb6:	2b00      	cmp	r3, #0
 802ffb8:	f040 80d8 	bne.w	803016c <__ssvfiscanf_r+0x434>
 802ffbc:	6a3b      	ldr	r3, [r7, #32]
 802ffbe:	0636      	lsls	r6, r6, #24
 802ffc0:	f853 5b04 	ldr.w	r5, [r3], #4
 802ffc4:	623b      	str	r3, [r7, #32]
 802ffc6:	f140 80d7 	bpl.w	8030178 <__ssvfiscanf_r+0x440>
 802ffca:	b145      	cbz	r5, 802ffde <__ssvfiscanf_r+0x2a6>
 802ffcc:	2080      	movs	r0, #128	@ 0x80
 802ffce:	f7fe fe9d 	bl	802ed0c <malloc>
 802ffd2:	4606      	mov	r6, r0
 802ffd4:	2800      	cmp	r0, #0
 802ffd6:	d164      	bne.n	80300a2 <__ssvfiscanf_r+0x36a>
 802ffd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ffdc:	61fb      	str	r3, [r7, #28]
 802ffde:	f1bb 0f00 	cmp.w	fp, #0
 802ffe2:	d008      	beq.n	802fff6 <__ssvfiscanf_r+0x2be>
 802ffe4:	69fb      	ldr	r3, [r7, #28]
 802ffe6:	3301      	adds	r3, #1
 802ffe8:	f000 85ba 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 802ffec:	f8db 0000 	ldr.w	r0, [fp]
 802fff0:	b108      	cbz	r0, 802fff6 <__ssvfiscanf_r+0x2be>
 802fff2:	f7fe fe93 	bl	802ed1c <free>
 802fff6:	69f8      	ldr	r0, [r7, #28]
 802fff8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802fffc:	46bd      	mov	sp, r7
 802fffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030002:	68b9      	ldr	r1, [r7, #8]
 8030004:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8030008:	f003 fe67 	bl	8033cda <__sccl>
 803000c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8030010:	60b8      	str	r0, [r7, #8]
 8030012:	2501      	movs	r5, #1
 8030014:	e7ab      	b.n	802ff6e <__ssvfiscanf_r+0x236>
 8030016:	f046 0601 	orr.w	r6, r6, #1
 803001a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 803001e:	2500      	movs	r5, #0
 8030020:	e7a5      	b.n	802ff6e <__ssvfiscanf_r+0x236>
 8030022:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8030026:	e795      	b.n	802ff54 <__ssvfiscanf_r+0x21c>
 8030028:	06f0      	lsls	r0, r6, #27
 803002a:	f53f aea6 	bmi.w	802fd7a <__ssvfiscanf_r+0x42>
 803002e:	6a3a      	ldr	r2, [r7, #32]
 8030030:	0731      	lsls	r1, r6, #28
 8030032:	f852 3b04 	ldr.w	r3, [r2], #4
 8030036:	623a      	str	r2, [r7, #32]
 8030038:	d502      	bpl.n	8030040 <__ssvfiscanf_r+0x308>
 803003a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803003c:	701a      	strb	r2, [r3, #0]
 803003e:	e69c      	b.n	802fd7a <__ssvfiscanf_r+0x42>
 8030040:	0772      	lsls	r2, r6, #29
 8030042:	d502      	bpl.n	803004a <__ssvfiscanf_r+0x312>
 8030044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030046:	801a      	strh	r2, [r3, #0]
 8030048:	e697      	b.n	802fd7a <__ssvfiscanf_r+0x42>
 803004a:	07f5      	lsls	r5, r6, #31
 803004c:	d502      	bpl.n	8030054 <__ssvfiscanf_r+0x31c>
 803004e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030050:	601a      	str	r2, [r3, #0]
 8030052:	e692      	b.n	802fd7a <__ssvfiscanf_r+0x42>
 8030054:	07b0      	lsls	r0, r6, #30
 8030056:	d5fa      	bpl.n	803004e <__ssvfiscanf_r+0x316>
 8030058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803005a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 803005c:	17d2      	asrs	r2, r2, #31
 803005e:	e9c3 1200 	strd	r1, r2, [r3]
 8030062:	e68a      	b.n	802fd7a <__ssvfiscanf_r+0x42>
 8030064:	4ba6      	ldr	r3, [pc, #664]	@ (8030300 <__ssvfiscanf_r+0x5c8>)
 8030066:	60fb      	str	r3, [r7, #12]
 8030068:	2300      	movs	r3, #0
 803006a:	e76a      	b.n	802ff42 <__ssvfiscanf_r+0x20a>
 803006c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803006e:	4621      	mov	r1, r4
 8030070:	f7ff fe0b 	bl	802fc8a <__ssrefill_r>
 8030074:	2800      	cmp	r0, #0
 8030076:	f43f af7d 	beq.w	802ff74 <__ssvfiscanf_r+0x23c>
 803007a:	e714      	b.n	802fea6 <__ssvfiscanf_r+0x16e>
 803007c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803007e:	3201      	adds	r2, #1
 8030080:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030082:	6862      	ldr	r2, [r4, #4]
 8030084:	3a01      	subs	r2, #1
 8030086:	2a00      	cmp	r2, #0
 8030088:	6062      	str	r2, [r4, #4]
 803008a:	dd02      	ble.n	8030092 <__ssvfiscanf_r+0x35a>
 803008c:	3301      	adds	r3, #1
 803008e:	6023      	str	r3, [r4, #0]
 8030090:	e774      	b.n	802ff7c <__ssvfiscanf_r+0x244>
 8030092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030094:	4621      	mov	r1, r4
 8030096:	f7ff fdf8 	bl	802fc8a <__ssrefill_r>
 803009a:	2800      	cmp	r0, #0
 803009c:	f43f af6e 	beq.w	802ff7c <__ssvfiscanf_r+0x244>
 80300a0:	e701      	b.n	802fea6 <__ssvfiscanf_r+0x16e>
 80300a2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80300a6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80300aa:	6028      	str	r0, [r5, #0]
 80300ac:	4599      	cmp	r9, r3
 80300ae:	d314      	bcc.n	80300da <__ssvfiscanf_r+0x3a2>
 80300b0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80300b4:	4293      	cmp	r3, r2
 80300b6:	f200 8553 	bhi.w	8030b60 <__ssvfiscanf_r+0xe28>
 80300ba:	3308      	adds	r3, #8
 80300bc:	fa1f fa83 	uxth.w	sl, r3
 80300c0:	f8db 0000 	ldr.w	r0, [fp]
 80300c4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80300c8:	f003 fdaa 	bl	8033c20 <realloc>
 80300cc:	2800      	cmp	r0, #0
 80300ce:	f000 8547 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 80300d2:	f8cb 0000 	str.w	r0, [fp]
 80300d6:	f8ab a004 	strh.w	sl, [fp, #4]
 80300da:	f8db 3000 	ldr.w	r3, [fp]
 80300de:	f109 0201 	add.w	r2, r9, #1
 80300e2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80300e6:	46aa      	mov	sl, r5
 80300e8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80300ec:	4635      	mov	r5, r6
 80300ee:	f04f 0920 	mov.w	r9, #32
 80300f2:	2200      	movs	r2, #0
 80300f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80300f6:	f7fd fd4b 	bl	802db90 <__locale_mb_cur_max>
 80300fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80300fc:	4290      	cmp	r0, r2
 80300fe:	f43f aed2 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 8030102:	6821      	ldr	r1, [r4, #0]
 8030104:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 8030108:	f811 0b01 	ldrb.w	r0, [r1], #1
 803010c:	f80c 0002 	strb.w	r0, [ip, r2]
 8030110:	1c53      	adds	r3, r2, #1
 8030112:	6862      	ldr	r2, [r4, #4]
 8030114:	3a01      	subs	r2, #1
 8030116:	e9c4 1200 	strd	r1, r2, [r4]
 803011a:	69ba      	ldr	r2, [r7, #24]
 803011c:	2a03      	cmp	r2, #3
 803011e:	d102      	bne.n	8030126 <__ssvfiscanf_r+0x3ee>
 8030120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8030122:	2a04      	cmp	r2, #4
 8030124:	d007      	beq.n	8030136 <__ssvfiscanf_r+0x3fe>
 8030126:	2208      	movs	r2, #8
 8030128:	2100      	movs	r1, #0
 803012a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803012e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030130:	f7fc fba6 	bl	802c880 <memset>
 8030134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030136:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 803013a:	9200      	str	r2, [sp, #0]
 803013c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803013e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030140:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8030144:	4629      	mov	r1, r5
 8030146:	f005 f925 	bl	8035394 <_mbrtowc_r>
 803014a:	4603      	mov	r3, r0
 803014c:	61b8      	str	r0, [r7, #24]
 803014e:	1c58      	adds	r0, r3, #1
 8030150:	f43f aea9 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 8030154:	461a      	mov	r2, r3
 8030156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030158:	b9b2      	cbnz	r2, 8030188 <__ssvfiscanf_r+0x450>
 803015a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 803015c:	441a      	add	r2, r3
 803015e:	4613      	mov	r3, r2
 8030160:	693a      	ldr	r2, [r7, #16]
 8030162:	b172      	cbz	r2, 8030182 <__ssvfiscanf_r+0x44a>
 8030164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8030166:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803016a:	e019      	b.n	80301a0 <__ssvfiscanf_r+0x468>
 803016c:	f04f 0900 	mov.w	r9, #0
 8030170:	464e      	mov	r6, r9
 8030172:	46ca      	mov	sl, r9
 8030174:	464d      	mov	r5, r9
 8030176:	e7bc      	b.n	80300f2 <__ssvfiscanf_r+0x3ba>
 8030178:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803017c:	464e      	mov	r6, r9
 803017e:	46ca      	mov	sl, r9
 8030180:	e7b7      	b.n	80300f2 <__ssvfiscanf_r+0x3ba>
 8030182:	693a      	ldr	r2, [r7, #16]
 8030184:	602a      	str	r2, [r5, #0]
 8030186:	e7ed      	b.n	8030164 <__ssvfiscanf_r+0x42c>
 8030188:	69ba      	ldr	r2, [r7, #24]
 803018a:	3202      	adds	r2, #2
 803018c:	d024      	beq.n	80301d8 <__ssvfiscanf_r+0x4a0>
 803018e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8030190:	441a      	add	r2, r3
 8030192:	69bb      	ldr	r3, [r7, #24]
 8030194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8030196:	2b03      	cmp	r3, #3
 8030198:	d1e5      	bne.n	8030166 <__ssvfiscanf_r+0x42e>
 803019a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 803019c:	2b04      	cmp	r3, #4
 803019e:	d1e2      	bne.n	8030166 <__ssvfiscanf_r+0x42e>
 80301a0:	693b      	ldr	r3, [r7, #16]
 80301a2:	b9bb      	cbnz	r3, 80301d4 <__ssvfiscanf_r+0x49c>
 80301a4:	f1ba 0f00 	cmp.w	sl, #0
 80301a8:	d013      	beq.n	80301d2 <__ssvfiscanf_r+0x49a>
 80301aa:	1bab      	subs	r3, r5, r6
 80301ac:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80301b0:	d80f      	bhi.n	80301d2 <__ssvfiscanf_r+0x49a>
 80301b2:	4630      	mov	r0, r6
 80301b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80301b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80301ba:	f003 fd31 	bl	8033c20 <realloc>
 80301be:	4606      	mov	r6, r0
 80301c0:	2800      	cmp	r0, #0
 80301c2:	f43f af09 	beq.w	802ffd8 <__ssvfiscanf_r+0x2a0>
 80301c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80301c8:	f8ca 0000 	str.w	r0, [sl]
 80301cc:	18c5      	adds	r5, r0, r3
 80301ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80301d2:	3504      	adds	r5, #4
 80301d4:	2200      	movs	r2, #0
 80301d6:	e000      	b.n	80301da <__ssvfiscanf_r+0x4a2>
 80301d8:	461a      	mov	r2, r3
 80301da:	6863      	ldr	r3, [r4, #4]
 80301dc:	2b00      	cmp	r3, #0
 80301de:	dc13      	bgt.n	8030208 <__ssvfiscanf_r+0x4d0>
 80301e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80301e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80301e4:	4621      	mov	r1, r4
 80301e6:	f7ff fd50 	bl	802fc8a <__ssrefill_r>
 80301ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80301ec:	b160      	cbz	r0, 8030208 <__ssvfiscanf_r+0x4d0>
 80301ee:	2a00      	cmp	r2, #0
 80301f0:	f47f ae59 	bne.w	802fea6 <__ssvfiscanf_r+0x16e>
 80301f4:	f1ba 0f00 	cmp.w	sl, #0
 80301f8:	d10b      	bne.n	8030212 <__ssvfiscanf_r+0x4da>
 80301fa:	693b      	ldr	r3, [r7, #16]
 80301fc:	2b00      	cmp	r3, #0
 80301fe:	f47f adbc 	bne.w	802fd7a <__ssvfiscanf_r+0x42>
 8030202:	69fb      	ldr	r3, [r7, #28]
 8030204:	3301      	adds	r3, #1
 8030206:	e5b0      	b.n	802fd6a <__ssvfiscanf_r+0x32>
 8030208:	f1b8 0f00 	cmp.w	r8, #0
 803020c:	f47f af72 	bne.w	80300f4 <__ssvfiscanf_r+0x3bc>
 8030210:	e7f0      	b.n	80301f4 <__ssvfiscanf_r+0x4bc>
 8030212:	1ba9      	subs	r1, r5, r6
 8030214:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8030218:	d9ef      	bls.n	80301fa <__ssvfiscanf_r+0x4c2>
 803021a:	f8da 0000 	ldr.w	r0, [sl]
 803021e:	f003 fcff 	bl	8033c20 <realloc>
 8030222:	2800      	cmp	r0, #0
 8030224:	d0e9      	beq.n	80301fa <__ssvfiscanf_r+0x4c2>
 8030226:	f8ca 0000 	str.w	r0, [sl]
 803022a:	e7e6      	b.n	80301fa <__ssvfiscanf_r+0x4c2>
 803022c:	b1db      	cbz	r3, 8030266 <__ssvfiscanf_r+0x52e>
 803022e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8030232:	4598      	cmp	r8, r3
 8030234:	dd10      	ble.n	8030258 <__ssvfiscanf_r+0x520>
 8030236:	441a      	add	r2, r3
 8030238:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803023a:	6022      	str	r2, [r4, #0]
 803023c:	4621      	mov	r1, r4
 803023e:	441d      	add	r5, r3
 8030240:	eba8 0803 	sub.w	r8, r8, r3
 8030244:	f7ff fd21 	bl	802fc8a <__ssrefill_r>
 8030248:	2800      	cmp	r0, #0
 803024a:	d0f0      	beq.n	803022e <__ssvfiscanf_r+0x4f6>
 803024c:	2d00      	cmp	r5, #0
 803024e:	f43f ae2a 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 8030252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8030254:	442b      	add	r3, r5
 8030256:	e201      	b.n	803065c <__ssvfiscanf_r+0x924>
 8030258:	eba3 0308 	sub.w	r3, r3, r8
 803025c:	4442      	add	r2, r8
 803025e:	4445      	add	r5, r8
 8030260:	6063      	str	r3, [r4, #4]
 8030262:	6022      	str	r2, [r4, #0]
 8030264:	e7f5      	b.n	8030252 <__ssvfiscanf_r+0x51a>
 8030266:	6a3b      	ldr	r3, [r7, #32]
 8030268:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803026c:	f853 5b04 	ldr.w	r5, [r3], #4
 8030270:	623b      	str	r3, [r7, #32]
 8030272:	d02d      	beq.n	80302d0 <__ssvfiscanf_r+0x598>
 8030274:	2d00      	cmp	r5, #0
 8030276:	f43f adac 	beq.w	802fdd2 <__ssvfiscanf_r+0x9a>
 803027a:	4640      	mov	r0, r8
 803027c:	f7fe fd46 	bl	802ed0c <malloc>
 8030280:	4681      	mov	r9, r0
 8030282:	2800      	cmp	r0, #0
 8030284:	f43f ae14 	beq.w	802feb0 <__ssvfiscanf_r+0x178>
 8030288:	f8bb a006 	ldrh.w	sl, [fp, #6]
 803028c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030290:	6028      	str	r0, [r5, #0]
 8030292:	45b2      	cmp	sl, r6
 8030294:	d312      	bcc.n	80302bc <__ssvfiscanf_r+0x584>
 8030296:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803029a:	429e      	cmp	r6, r3
 803029c:	f200 8460 	bhi.w	8030b60 <__ssvfiscanf_r+0xe28>
 80302a0:	3608      	adds	r6, #8
 80302a2:	b2b6      	uxth	r6, r6
 80302a4:	f8db 0000 	ldr.w	r0, [fp]
 80302a8:	00b1      	lsls	r1, r6, #2
 80302aa:	f003 fcb9 	bl	8033c20 <realloc>
 80302ae:	2800      	cmp	r0, #0
 80302b0:	f000 8456 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 80302b4:	f8cb 0000 	str.w	r0, [fp]
 80302b8:	f8ab 6004 	strh.w	r6, [fp, #4]
 80302bc:	f8db 3000 	ldr.w	r3, [fp]
 80302c0:	f10a 0201 	add.w	r2, sl, #1
 80302c4:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80302c8:	462e      	mov	r6, r5
 80302ca:	f8ab 2006 	strh.w	r2, [fp, #6]
 80302ce:	464d      	mov	r5, r9
 80302d0:	9400      	str	r4, [sp, #0]
 80302d2:	4629      	mov	r1, r5
 80302d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80302d6:	4643      	mov	r3, r8
 80302d8:	2201      	movs	r2, #1
 80302da:	f7ff fcf3 	bl	802fcc4 <_sfread_r>
 80302de:	4605      	mov	r5, r0
 80302e0:	2800      	cmp	r0, #0
 80302e2:	f43f ade0 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 80302e6:	b13e      	cbz	r6, 80302f8 <__ssvfiscanf_r+0x5c0>
 80302e8:	4580      	cmp	r8, r0
 80302ea:	d905      	bls.n	80302f8 <__ssvfiscanf_r+0x5c0>
 80302ec:	4601      	mov	r1, r0
 80302ee:	6830      	ldr	r0, [r6, #0]
 80302f0:	f003 fc96 	bl	8033c20 <realloc>
 80302f4:	b100      	cbz	r0, 80302f8 <__ssvfiscanf_r+0x5c0>
 80302f6:	6030      	str	r0, [r6, #0]
 80302f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80302fa:	442b      	add	r3, r5
 80302fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80302fe:	e780      	b.n	8030202 <__ssvfiscanf_r+0x4ca>
 8030300:	0802bf89 	.word	0x0802bf89
 8030304:	0803bda1 	.word	0x0803bda1
 8030308:	2b00      	cmp	r3, #0
 803030a:	bf08      	it	eq
 803030c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030312:	693b      	ldr	r3, [r7, #16]
 8030314:	2d00      	cmp	r5, #0
 8030316:	f000 8100 	beq.w	803051a <__ssvfiscanf_r+0x7e2>
 803031a:	2b00      	cmp	r3, #0
 803031c:	f040 80a5 	bne.w	803046a <__ssvfiscanf_r+0x732>
 8030320:	6a3b      	ldr	r3, [r7, #32]
 8030322:	0631      	lsls	r1, r6, #24
 8030324:	f853 5b04 	ldr.w	r5, [r3], #4
 8030328:	623b      	str	r3, [r7, #32]
 803032a:	f140 80a5 	bpl.w	8030478 <__ssvfiscanf_r+0x740>
 803032e:	2d00      	cmp	r5, #0
 8030330:	f43f ae55 	beq.w	802ffde <__ssvfiscanf_r+0x2a6>
 8030334:	2080      	movs	r0, #128	@ 0x80
 8030336:	f7fe fce9 	bl	802ed0c <malloc>
 803033a:	4680      	mov	r8, r0
 803033c:	2800      	cmp	r0, #0
 803033e:	f43f ae4b 	beq.w	802ffd8 <__ssvfiscanf_r+0x2a0>
 8030342:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8030346:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 803034a:	6028      	str	r0, [r5, #0]
 803034c:	429e      	cmp	r6, r3
 803034e:	d314      	bcc.n	803037a <__ssvfiscanf_r+0x642>
 8030350:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8030354:	4293      	cmp	r3, r2
 8030356:	f200 8403 	bhi.w	8030b60 <__ssvfiscanf_r+0xe28>
 803035a:	3308      	adds	r3, #8
 803035c:	fa1f f983 	uxth.w	r9, r3
 8030360:	f8db 0000 	ldr.w	r0, [fp]
 8030364:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8030368:	f003 fc5a 	bl	8033c20 <realloc>
 803036c:	2800      	cmp	r0, #0
 803036e:	f000 83f7 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 8030372:	f8cb 0000 	str.w	r0, [fp]
 8030376:	f8ab 9004 	strh.w	r9, [fp, #4]
 803037a:	f8db 3000 	ldr.w	r3, [fp]
 803037e:	1c72      	adds	r2, r6, #1
 8030380:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8030384:	46aa      	mov	sl, r5
 8030386:	f8ab 2006 	strh.w	r2, [fp, #6]
 803038a:	4645      	mov	r5, r8
 803038c:	f04f 0920 	mov.w	r9, #32
 8030390:	2600      	movs	r6, #0
 8030392:	f7fd fbfd 	bl	802db90 <__locale_mb_cur_max>
 8030396:	4286      	cmp	r6, r0
 8030398:	f43f ad85 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 803039c:	1c73      	adds	r3, r6, #1
 803039e:	607b      	str	r3, [r7, #4]
 80303a0:	6823      	ldr	r3, [r4, #0]
 80303a2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80303a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80303aa:	558a      	strb	r2, [r1, r6]
 80303ac:	6862      	ldr	r2, [r4, #4]
 80303ae:	3a01      	subs	r2, #1
 80303b0:	e9c4 3200 	strd	r3, r2, [r4]
 80303b4:	69bb      	ldr	r3, [r7, #24]
 80303b6:	2b03      	cmp	r3, #3
 80303b8:	d102      	bne.n	80303c0 <__ssvfiscanf_r+0x688>
 80303ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80303bc:	2b04      	cmp	r3, #4
 80303be:	d005      	beq.n	80303cc <__ssvfiscanf_r+0x694>
 80303c0:	2208      	movs	r2, #8
 80303c2:	2100      	movs	r1, #0
 80303c4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80303c8:	f7fc fa5a 	bl	802c880 <memset>
 80303cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80303d0:	9300      	str	r3, [sp, #0]
 80303d2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80303d6:	687b      	ldr	r3, [r7, #4]
 80303d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80303da:	4629      	mov	r1, r5
 80303dc:	f004 ffda 	bl	8035394 <_mbrtowc_r>
 80303e0:	1c42      	adds	r2, r0, #1
 80303e2:	61b8      	str	r0, [r7, #24]
 80303e4:	f43f ad5f 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 80303e8:	2800      	cmp	r0, #0
 80303ea:	d14a      	bne.n	8030482 <__ssvfiscanf_r+0x74a>
 80303ec:	6028      	str	r0, [r5, #0]
 80303ee:	682e      	ldr	r6, [r5, #0]
 80303f0:	1c73      	adds	r3, r6, #1
 80303f2:	d056      	beq.n	80304a2 <__ssvfiscanf_r+0x76a>
 80303f4:	2208      	movs	r2, #8
 80303f6:	2100      	movs	r1, #0
 80303f8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80303fc:	f7fc fa40 	bl	802c880 <memset>
 8030400:	4b99      	ldr	r3, [pc, #612]	@ (8030668 <__ssvfiscanf_r+0x930>)
 8030402:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8030408:	603b      	str	r3, [r7, #0]
 803040a:	4632      	mov	r2, r6
 803040c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030410:	683e      	ldr	r6, [r7, #0]
 8030412:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8030416:	47b0      	blx	r6
 8030418:	2801      	cmp	r0, #1
 803041a:	d144      	bne.n	80304a6 <__ssvfiscanf_r+0x76e>
 803041c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8030420:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8030424:	5c9b      	ldrb	r3, [r3, r2]
 8030426:	2b00      	cmp	r3, #0
 8030428:	d148      	bne.n	80304bc <__ssvfiscanf_r+0x784>
 803042a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 803042e:	687b      	ldr	r3, [r7, #4]
 8030430:	2b00      	cmp	r3, #0
 8030432:	d13a      	bne.n	80304aa <__ssvfiscanf_r+0x772>
 8030434:	693b      	ldr	r3, [r7, #16]
 8030436:	2b00      	cmp	r3, #0
 8030438:	f47f ac9f 	bne.w	802fd7a <__ssvfiscanf_r+0x42>
 803043c:	602b      	str	r3, [r5, #0]
 803043e:	f1ba 0f00 	cmp.w	sl, #0
 8030442:	f43f aede 	beq.w	8030202 <__ssvfiscanf_r+0x4ca>
 8030446:	eba5 0108 	sub.w	r1, r5, r8
 803044a:	108b      	asrs	r3, r1, #2
 803044c:	3301      	adds	r3, #1
 803044e:	4599      	cmp	r9, r3
 8030450:	f67f aed7 	bls.w	8030202 <__ssvfiscanf_r+0x4ca>
 8030454:	f8da 0000 	ldr.w	r0, [sl]
 8030458:	3104      	adds	r1, #4
 803045a:	f003 fbe1 	bl	8033c20 <realloc>
 803045e:	2800      	cmp	r0, #0
 8030460:	f43f aecf 	beq.w	8030202 <__ssvfiscanf_r+0x4ca>
 8030464:	f8ca 0000 	str.w	r0, [sl]
 8030468:	e6cb      	b.n	8030202 <__ssvfiscanf_r+0x4ca>
 803046a:	f04f 0900 	mov.w	r9, #0
 803046e:	46c8      	mov	r8, r9
 8030470:	46ca      	mov	sl, r9
 8030472:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8030476:	e78b      	b.n	8030390 <__ssvfiscanf_r+0x658>
 8030478:	f8d7 9010 	ldr.w	r9, [r7, #16]
 803047c:	46c8      	mov	r8, r9
 803047e:	46ca      	mov	sl, r9
 8030480:	e786      	b.n	8030390 <__ssvfiscanf_r+0x658>
 8030482:	69bb      	ldr	r3, [r7, #24]
 8030484:	3302      	adds	r3, #2
 8030486:	d1b2      	bne.n	80303ee <__ssvfiscanf_r+0x6b6>
 8030488:	687e      	ldr	r6, [r7, #4]
 803048a:	6863      	ldr	r3, [r4, #4]
 803048c:	2b00      	cmp	r3, #0
 803048e:	dc3f      	bgt.n	8030510 <__ssvfiscanf_r+0x7d8>
 8030490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030492:	4621      	mov	r1, r4
 8030494:	f7ff fbf9 	bl	802fc8a <__ssrefill_r>
 8030498:	2800      	cmp	r0, #0
 803049a:	d039      	beq.n	8030510 <__ssvfiscanf_r+0x7d8>
 803049c:	2e00      	cmp	r6, #0
 803049e:	d0c9      	beq.n	8030434 <__ssvfiscanf_r+0x6fc>
 80304a0:	e501      	b.n	802fea6 <__ssvfiscanf_r+0x16e>
 80304a2:	4632      	mov	r2, r6
 80304a4:	e7bc      	b.n	8030420 <__ssvfiscanf_r+0x6e8>
 80304a6:	2200      	movs	r2, #0
 80304a8:	e7ba      	b.n	8030420 <__ssvfiscanf_r+0x6e8>
 80304aa:	687b      	ldr	r3, [r7, #4]
 80304ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80304ae:	3b01      	subs	r3, #1
 80304b0:	4622      	mov	r2, r4
 80304b2:	5cf1      	ldrb	r1, [r6, r3]
 80304b4:	607b      	str	r3, [r7, #4]
 80304b6:	f7ff fbad 	bl	802fc14 <_sungetc_r>
 80304ba:	e7b8      	b.n	803042e <__ssvfiscanf_r+0x6f6>
 80304bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80304be:	687a      	ldr	r2, [r7, #4]
 80304c0:	4413      	add	r3, r2
 80304c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80304c4:	69bb      	ldr	r3, [r7, #24]
 80304c6:	2b03      	cmp	r3, #3
 80304c8:	d102      	bne.n	80304d0 <__ssvfiscanf_r+0x798>
 80304ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80304cc:	2b04      	cmp	r3, #4
 80304ce:	d002      	beq.n	80304d6 <__ssvfiscanf_r+0x79e>
 80304d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80304d2:	3b01      	subs	r3, #1
 80304d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80304d6:	693b      	ldr	r3, [r7, #16]
 80304d8:	b9c3      	cbnz	r3, 803050c <__ssvfiscanf_r+0x7d4>
 80304da:	3504      	adds	r5, #4
 80304dc:	f1ba 0f00 	cmp.w	sl, #0
 80304e0:	d014      	beq.n	803050c <__ssvfiscanf_r+0x7d4>
 80304e2:	eba5 0608 	sub.w	r6, r5, r8
 80304e6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80304ea:	d80d      	bhi.n	8030508 <__ssvfiscanf_r+0x7d0>
 80304ec:	4640      	mov	r0, r8
 80304ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80304f2:	f003 fb95 	bl	8033c20 <realloc>
 80304f6:	4680      	mov	r8, r0
 80304f8:	2800      	cmp	r0, #0
 80304fa:	f43f ad6d 	beq.w	802ffd8 <__ssvfiscanf_r+0x2a0>
 80304fe:	1985      	adds	r5, r0, r6
 8030500:	f8ca 0000 	str.w	r0, [sl]
 8030504:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8030508:	693e      	ldr	r6, [r7, #16]
 803050a:	e7be      	b.n	803048a <__ssvfiscanf_r+0x752>
 803050c:	2600      	movs	r6, #0
 803050e:	e7bc      	b.n	803048a <__ssvfiscanf_r+0x752>
 8030510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030512:	2b00      	cmp	r3, #0
 8030514:	f47f af3d 	bne.w	8030392 <__ssvfiscanf_r+0x65a>
 8030518:	e78c      	b.n	8030434 <__ssvfiscanf_r+0x6fc>
 803051a:	b1e3      	cbz	r3, 8030556 <__ssvfiscanf_r+0x81e>
 803051c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 8030520:	6823      	ldr	r3, [r4, #0]
 8030522:	781a      	ldrb	r2, [r3, #0]
 8030524:	5cb2      	ldrb	r2, [r6, r2]
 8030526:	b91a      	cbnz	r2, 8030530 <__ssvfiscanf_r+0x7f8>
 8030528:	2d00      	cmp	r5, #0
 803052a:	f47f ae92 	bne.w	8030252 <__ssvfiscanf_r+0x51a>
 803052e:	e450      	b.n	802fdd2 <__ssvfiscanf_r+0x9a>
 8030530:	3301      	adds	r3, #1
 8030532:	6862      	ldr	r2, [r4, #4]
 8030534:	6023      	str	r3, [r4, #0]
 8030536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030538:	3501      	adds	r5, #1
 803053a:	3a01      	subs	r2, #1
 803053c:	42ab      	cmp	r3, r5
 803053e:	6062      	str	r2, [r4, #4]
 8030540:	f43f ae87 	beq.w	8030252 <__ssvfiscanf_r+0x51a>
 8030544:	2a00      	cmp	r2, #0
 8030546:	dceb      	bgt.n	8030520 <__ssvfiscanf_r+0x7e8>
 8030548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803054a:	4621      	mov	r1, r4
 803054c:	f7ff fb9d 	bl	802fc8a <__ssrefill_r>
 8030550:	2800      	cmp	r0, #0
 8030552:	d0e5      	beq.n	8030520 <__ssvfiscanf_r+0x7e8>
 8030554:	e67d      	b.n	8030252 <__ssvfiscanf_r+0x51a>
 8030556:	6a3b      	ldr	r3, [r7, #32]
 8030558:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 803055c:	f853 5b04 	ldr.w	r5, [r3], #4
 8030560:	623b      	str	r3, [r7, #32]
 8030562:	d07e      	beq.n	8030662 <__ssvfiscanf_r+0x92a>
 8030564:	2d00      	cmp	r5, #0
 8030566:	f43f ac34 	beq.w	802fdd2 <__ssvfiscanf_r+0x9a>
 803056a:	2020      	movs	r0, #32
 803056c:	f7fe fbce 	bl	802ed0c <malloc>
 8030570:	4680      	mov	r8, r0
 8030572:	2800      	cmp	r0, #0
 8030574:	f43f ac9c 	beq.w	802feb0 <__ssvfiscanf_r+0x178>
 8030578:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 803057c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8030580:	6028      	str	r0, [r5, #0]
 8030582:	45b1      	cmp	r9, r6
 8030584:	d312      	bcc.n	80305ac <__ssvfiscanf_r+0x874>
 8030586:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803058a:	429e      	cmp	r6, r3
 803058c:	f200 82e8 	bhi.w	8030b60 <__ssvfiscanf_r+0xe28>
 8030590:	3608      	adds	r6, #8
 8030592:	b2b6      	uxth	r6, r6
 8030594:	f8db 0000 	ldr.w	r0, [fp]
 8030598:	00b1      	lsls	r1, r6, #2
 803059a:	f003 fb41 	bl	8033c20 <realloc>
 803059e:	2800      	cmp	r0, #0
 80305a0:	f000 82de 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 80305a4:	f8cb 0000 	str.w	r0, [fp]
 80305a8:	f8ab 6004 	strh.w	r6, [fp, #4]
 80305ac:	f8db 3000 	ldr.w	r3, [fp]
 80305b0:	f109 0201 	add.w	r2, r9, #1
 80305b4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80305b8:	46aa      	mov	sl, r5
 80305ba:	f8ab 2006 	strh.w	r2, [fp, #6]
 80305be:	4645      	mov	r5, r8
 80305c0:	f04f 0920 	mov.w	r9, #32
 80305c4:	462e      	mov	r6, r5
 80305c6:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 80305ca:	6823      	ldr	r3, [r4, #0]
 80305cc:	781a      	ldrb	r2, [r3, #0]
 80305ce:	f818 2002 	ldrb.w	r2, [r8, r2]
 80305d2:	b362      	cbz	r2, 803062e <__ssvfiscanf_r+0x8f6>
 80305d4:	6862      	ldr	r2, [r4, #4]
 80305d6:	3a01      	subs	r2, #1
 80305d8:	6062      	str	r2, [r4, #4]
 80305da:	1c5a      	adds	r2, r3, #1
 80305dc:	6022      	str	r2, [r4, #0]
 80305de:	781b      	ldrb	r3, [r3, #0]
 80305e0:	f805 3b01 	strb.w	r3, [r5], #1
 80305e4:	f1ba 0f00 	cmp.w	sl, #0
 80305e8:	d011      	beq.n	803060e <__ssvfiscanf_r+0x8d6>
 80305ea:	1bab      	subs	r3, r5, r6
 80305ec:	454b      	cmp	r3, r9
 80305ee:	d30e      	bcc.n	803060e <__ssvfiscanf_r+0x8d6>
 80305f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80305f4:	4630      	mov	r0, r6
 80305f6:	4649      	mov	r1, r9
 80305f8:	613b      	str	r3, [r7, #16]
 80305fa:	f003 fb11 	bl	8033c20 <realloc>
 80305fe:	4606      	mov	r6, r0
 8030600:	2800      	cmp	r0, #0
 8030602:	f43f ac55 	beq.w	802feb0 <__ssvfiscanf_r+0x178>
 8030606:	693b      	ldr	r3, [r7, #16]
 8030608:	f8ca 0000 	str.w	r0, [sl]
 803060c:	18c5      	adds	r5, r0, r3
 803060e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030610:	3b01      	subs	r3, #1
 8030612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030614:	d00b      	beq.n	803062e <__ssvfiscanf_r+0x8f6>
 8030616:	6863      	ldr	r3, [r4, #4]
 8030618:	2b00      	cmp	r3, #0
 803061a:	dcd6      	bgt.n	80305ca <__ssvfiscanf_r+0x892>
 803061c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803061e:	4621      	mov	r1, r4
 8030620:	f7ff fb33 	bl	802fc8a <__ssrefill_r>
 8030624:	2800      	cmp	r0, #0
 8030626:	d0d0      	beq.n	80305ca <__ssvfiscanf_r+0x892>
 8030628:	42b5      	cmp	r5, r6
 803062a:	f43f ac3c 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 803062e:	1bae      	subs	r6, r5, r6
 8030630:	f43f abcf 	beq.w	802fdd2 <__ssvfiscanf_r+0x9a>
 8030634:	2300      	movs	r3, #0
 8030636:	702b      	strb	r3, [r5, #0]
 8030638:	f1ba 0f00 	cmp.w	sl, #0
 803063c:	d009      	beq.n	8030652 <__ssvfiscanf_r+0x91a>
 803063e:	1c71      	adds	r1, r6, #1
 8030640:	4589      	cmp	r9, r1
 8030642:	d906      	bls.n	8030652 <__ssvfiscanf_r+0x91a>
 8030644:	f8da 0000 	ldr.w	r0, [sl]
 8030648:	f003 faea 	bl	8033c20 <realloc>
 803064c:	b108      	cbz	r0, 8030652 <__ssvfiscanf_r+0x91a>
 803064e:	f8ca 0000 	str.w	r0, [sl]
 8030652:	69fb      	ldr	r3, [r7, #28]
 8030654:	3301      	adds	r3, #1
 8030656:	61fb      	str	r3, [r7, #28]
 8030658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803065a:	4433      	add	r3, r6
 803065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803065e:	f7ff bb8c 	b.w	802fd7a <__ssvfiscanf_r+0x42>
 8030662:	46ca      	mov	sl, r9
 8030664:	e7ae      	b.n	80305c4 <__ssvfiscanf_r+0x88c>
 8030666:	bf00      	nop
 8030668:	2000016c 	.word	0x2000016c
 803066c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803066e:	2b00      	cmp	r3, #0
 8030670:	bf08      	it	eq
 8030672:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8030676:	f016 0501 	ands.w	r5, r6, #1
 803067a:	62bb      	str	r3, [r7, #40]	@ 0x28
 803067c:	f006 0810 	and.w	r8, r6, #16
 8030680:	f000 80e1 	beq.w	8030846 <__ssvfiscanf_r+0xb0e>
 8030684:	f1b8 0f00 	cmp.w	r8, #0
 8030688:	f040 8089 	bne.w	803079e <__ssvfiscanf_r+0xa66>
 803068c:	6a3b      	ldr	r3, [r7, #32]
 803068e:	0636      	lsls	r6, r6, #24
 8030690:	f853 5b04 	ldr.w	r5, [r3], #4
 8030694:	623b      	str	r3, [r7, #32]
 8030696:	f140 8089 	bpl.w	80307ac <__ssvfiscanf_r+0xa74>
 803069a:	2d00      	cmp	r5, #0
 803069c:	f43f ac9f 	beq.w	802ffde <__ssvfiscanf_r+0x2a6>
 80306a0:	2080      	movs	r0, #128	@ 0x80
 80306a2:	f7fe fb33 	bl	802ed0c <malloc>
 80306a6:	4606      	mov	r6, r0
 80306a8:	2800      	cmp	r0, #0
 80306aa:	f43f ac95 	beq.w	802ffd8 <__ssvfiscanf_r+0x2a0>
 80306ae:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80306b2:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80306b6:	6028      	str	r0, [r5, #0]
 80306b8:	4599      	cmp	r9, r3
 80306ba:	d314      	bcc.n	80306e6 <__ssvfiscanf_r+0x9ae>
 80306bc:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80306c0:	4293      	cmp	r3, r2
 80306c2:	f200 824d 	bhi.w	8030b60 <__ssvfiscanf_r+0xe28>
 80306c6:	3308      	adds	r3, #8
 80306c8:	fa1f fa83 	uxth.w	sl, r3
 80306cc:	f8db 0000 	ldr.w	r0, [fp]
 80306d0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80306d4:	f003 faa4 	bl	8033c20 <realloc>
 80306d8:	2800      	cmp	r0, #0
 80306da:	f000 8241 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 80306de:	f8cb 0000 	str.w	r0, [fp]
 80306e2:	f8ab a004 	strh.w	sl, [fp, #4]
 80306e6:	f8db 3000 	ldr.w	r3, [fp]
 80306ea:	f109 0201 	add.w	r2, r9, #1
 80306ee:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80306f2:	46aa      	mov	sl, r5
 80306f4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80306f8:	4635      	mov	r5, r6
 80306fa:	f04f 0920 	mov.w	r9, #32
 80306fe:	2300      	movs	r3, #0
 8030700:	6822      	ldr	r2, [r4, #0]
 8030702:	499e      	ldr	r1, [pc, #632]	@ (803097c <__ssvfiscanf_r+0xc44>)
 8030704:	7812      	ldrb	r2, [r2, #0]
 8030706:	5c8a      	ldrb	r2, [r1, r2]
 8030708:	0711      	lsls	r1, r2, #28
 803070a:	d43c      	bmi.n	8030786 <__ssvfiscanf_r+0xa4e>
 803070c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 803070e:	2a00      	cmp	r2, #0
 8030710:	d039      	beq.n	8030786 <__ssvfiscanf_r+0xa4e>
 8030712:	613b      	str	r3, [r7, #16]
 8030714:	f7fd fa3c 	bl	802db90 <__locale_mb_cur_max>
 8030718:	693b      	ldr	r3, [r7, #16]
 803071a:	4298      	cmp	r0, r3
 803071c:	f43f abc3 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 8030720:	1c5a      	adds	r2, r3, #1
 8030722:	613a      	str	r2, [r7, #16]
 8030724:	6822      	ldr	r2, [r4, #0]
 8030726:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 803072a:	f812 0b01 	ldrb.w	r0, [r2], #1
 803072e:	54c8      	strb	r0, [r1, r3]
 8030730:	6863      	ldr	r3, [r4, #4]
 8030732:	3b01      	subs	r3, #1
 8030734:	e9c4 2300 	strd	r2, r3, [r4]
 8030738:	69bb      	ldr	r3, [r7, #24]
 803073a:	2b03      	cmp	r3, #3
 803073c:	d102      	bne.n	8030744 <__ssvfiscanf_r+0xa0c>
 803073e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8030740:	2b04      	cmp	r3, #4
 8030742:	d005      	beq.n	8030750 <__ssvfiscanf_r+0xa18>
 8030744:	2208      	movs	r2, #8
 8030746:	2100      	movs	r1, #0
 8030748:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 803074c:	f7fc f898 	bl	802c880 <memset>
 8030750:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8030754:	9300      	str	r3, [sp, #0]
 8030756:	693b      	ldr	r3, [r7, #16]
 8030758:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803075a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803075e:	4629      	mov	r1, r5
 8030760:	f004 fe18 	bl	8035394 <_mbrtowc_r>
 8030764:	4603      	mov	r3, r0
 8030766:	61b8      	str	r0, [r7, #24]
 8030768:	1c58      	adds	r0, r3, #1
 803076a:	f43f ab9c 	beq.w	802fea6 <__ssvfiscanf_r+0x16e>
 803076e:	bb0b      	cbnz	r3, 80307b4 <__ssvfiscanf_r+0xa7c>
 8030770:	602b      	str	r3, [r5, #0]
 8030772:	6828      	ldr	r0, [r5, #0]
 8030774:	f004 fe28 	bl	80353c8 <iswspace>
 8030778:	4603      	mov	r3, r0
 803077a:	2800      	cmp	r0, #0
 803077c:	d037      	beq.n	80307ee <__ssvfiscanf_r+0xab6>
 803077e:	693a      	ldr	r2, [r7, #16]
 8030780:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030784:	bb4a      	cbnz	r2, 80307da <__ssvfiscanf_r+0xaa2>
 8030786:	f1b8 0f00 	cmp.w	r8, #0
 803078a:	f47f aaf6 	bne.w	802fd7a <__ssvfiscanf_r+0x42>
 803078e:	f8c5 8000 	str.w	r8, [r5]
 8030792:	f1ba 0f00 	cmp.w	sl, #0
 8030796:	f43f ad34 	beq.w	8030202 <__ssvfiscanf_r+0x4ca>
 803079a:	1ba9      	subs	r1, r5, r6
 803079c:	e655      	b.n	803044a <__ssvfiscanf_r+0x712>
 803079e:	f04f 0900 	mov.w	r9, #0
 80307a2:	464e      	mov	r6, r9
 80307a4:	46ca      	mov	sl, r9
 80307a6:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80307aa:	e7a8      	b.n	80306fe <__ssvfiscanf_r+0x9c6>
 80307ac:	46c1      	mov	r9, r8
 80307ae:	4646      	mov	r6, r8
 80307b0:	46c2      	mov	sl, r8
 80307b2:	e7a4      	b.n	80306fe <__ssvfiscanf_r+0x9c6>
 80307b4:	69bb      	ldr	r3, [r7, #24]
 80307b6:	3302      	adds	r3, #2
 80307b8:	d1db      	bne.n	8030772 <__ssvfiscanf_r+0xa3a>
 80307ba:	693b      	ldr	r3, [r7, #16]
 80307bc:	6862      	ldr	r2, [r4, #4]
 80307be:	2a00      	cmp	r2, #0
 80307c0:	dc9e      	bgt.n	8030700 <__ssvfiscanf_r+0x9c8>
 80307c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80307c4:	613b      	str	r3, [r7, #16]
 80307c6:	4621      	mov	r1, r4
 80307c8:	f7ff fa5f 	bl	802fc8a <__ssrefill_r>
 80307cc:	693b      	ldr	r3, [r7, #16]
 80307ce:	2800      	cmp	r0, #0
 80307d0:	d096      	beq.n	8030700 <__ssvfiscanf_r+0x9c8>
 80307d2:	2b00      	cmp	r3, #0
 80307d4:	f47f ab67 	bne.w	802fea6 <__ssvfiscanf_r+0x16e>
 80307d8:	e7d5      	b.n	8030786 <__ssvfiscanf_r+0xa4e>
 80307da:	693a      	ldr	r2, [r7, #16]
 80307dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80307de:	3a01      	subs	r2, #1
 80307e0:	613a      	str	r2, [r7, #16]
 80307e2:	6939      	ldr	r1, [r7, #16]
 80307e4:	4622      	mov	r2, r4
 80307e6:	5c59      	ldrb	r1, [r3, r1]
 80307e8:	f7ff fa14 	bl	802fc14 <_sungetc_r>
 80307ec:	e7c7      	b.n	803077e <__ssvfiscanf_r+0xa46>
 80307ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80307f0:	6939      	ldr	r1, [r7, #16]
 80307f2:	440a      	add	r2, r1
 80307f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80307f6:	69ba      	ldr	r2, [r7, #24]
 80307f8:	2a03      	cmp	r2, #3
 80307fa:	d102      	bne.n	8030802 <__ssvfiscanf_r+0xaca>
 80307fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80307fe:	2a04      	cmp	r2, #4
 8030800:	d002      	beq.n	8030808 <__ssvfiscanf_r+0xad0>
 8030802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8030804:	3a01      	subs	r2, #1
 8030806:	62ba      	str	r2, [r7, #40]	@ 0x28
 8030808:	f1b8 0f00 	cmp.w	r8, #0
 803080c:	d1d6      	bne.n	80307bc <__ssvfiscanf_r+0xa84>
 803080e:	3504      	adds	r5, #4
 8030810:	f1ba 0f00 	cmp.w	sl, #0
 8030814:	d015      	beq.n	8030842 <__ssvfiscanf_r+0xb0a>
 8030816:	1bab      	subs	r3, r5, r6
 8030818:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 803081c:	d80f      	bhi.n	803083e <__ssvfiscanf_r+0xb06>
 803081e:	4630      	mov	r0, r6
 8030820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8030824:	613b      	str	r3, [r7, #16]
 8030826:	f003 f9fb 	bl	8033c20 <realloc>
 803082a:	4606      	mov	r6, r0
 803082c:	2800      	cmp	r0, #0
 803082e:	f43f abd3 	beq.w	802ffd8 <__ssvfiscanf_r+0x2a0>
 8030832:	693b      	ldr	r3, [r7, #16]
 8030834:	f8ca 0000 	str.w	r0, [sl]
 8030838:	18c5      	adds	r5, r0, r3
 803083a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803083e:	4643      	mov	r3, r8
 8030840:	e7bc      	b.n	80307bc <__ssvfiscanf_r+0xa84>
 8030842:	4653      	mov	r3, sl
 8030844:	e7ba      	b.n	80307bc <__ssvfiscanf_r+0xa84>
 8030846:	f1b8 0f00 	cmp.w	r8, #0
 803084a:	d019      	beq.n	8030880 <__ssvfiscanf_r+0xb48>
 803084c:	4e4b      	ldr	r6, [pc, #300]	@ (803097c <__ssvfiscanf_r+0xc44>)
 803084e:	6823      	ldr	r3, [r4, #0]
 8030850:	781a      	ldrb	r2, [r3, #0]
 8030852:	5cb2      	ldrb	r2, [r6, r2]
 8030854:	0712      	lsls	r2, r2, #28
 8030856:	f53f acfc 	bmi.w	8030252 <__ssvfiscanf_r+0x51a>
 803085a:	3301      	adds	r3, #1
 803085c:	6862      	ldr	r2, [r4, #4]
 803085e:	6023      	str	r3, [r4, #0]
 8030860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030862:	3501      	adds	r5, #1
 8030864:	3a01      	subs	r2, #1
 8030866:	429d      	cmp	r5, r3
 8030868:	6062      	str	r2, [r4, #4]
 803086a:	f43f acf2 	beq.w	8030252 <__ssvfiscanf_r+0x51a>
 803086e:	2a00      	cmp	r2, #0
 8030870:	dced      	bgt.n	803084e <__ssvfiscanf_r+0xb16>
 8030872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030874:	4621      	mov	r1, r4
 8030876:	f7ff fa08 	bl	802fc8a <__ssrefill_r>
 803087a:	2800      	cmp	r0, #0
 803087c:	d0e7      	beq.n	803084e <__ssvfiscanf_r+0xb16>
 803087e:	e4e8      	b.n	8030252 <__ssvfiscanf_r+0x51a>
 8030880:	6a3b      	ldr	r3, [r7, #32]
 8030882:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8030886:	f853 5b04 	ldr.w	r5, [r3], #4
 803088a:	623b      	str	r3, [r7, #32]
 803088c:	d074      	beq.n	8030978 <__ssvfiscanf_r+0xc40>
 803088e:	2d00      	cmp	r5, #0
 8030890:	f43f aa9f 	beq.w	802fdd2 <__ssvfiscanf_r+0x9a>
 8030894:	2020      	movs	r0, #32
 8030896:	f7fe fa39 	bl	802ed0c <malloc>
 803089a:	4680      	mov	r8, r0
 803089c:	2800      	cmp	r0, #0
 803089e:	f43f ab07 	beq.w	802feb0 <__ssvfiscanf_r+0x178>
 80308a2:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80308a6:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80308aa:	6028      	str	r0, [r5, #0]
 80308ac:	45b1      	cmp	r9, r6
 80308ae:	d312      	bcc.n	80308d6 <__ssvfiscanf_r+0xb9e>
 80308b0:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80308b4:	429e      	cmp	r6, r3
 80308b6:	f200 8153 	bhi.w	8030b60 <__ssvfiscanf_r+0xe28>
 80308ba:	3608      	adds	r6, #8
 80308bc:	b2b6      	uxth	r6, r6
 80308be:	f8db 0000 	ldr.w	r0, [fp]
 80308c2:	00b1      	lsls	r1, r6, #2
 80308c4:	f003 f9ac 	bl	8033c20 <realloc>
 80308c8:	2800      	cmp	r0, #0
 80308ca:	f000 8149 	beq.w	8030b60 <__ssvfiscanf_r+0xe28>
 80308ce:	f8cb 0000 	str.w	r0, [fp]
 80308d2:	f8ab 6004 	strh.w	r6, [fp, #4]
 80308d6:	f8db 3000 	ldr.w	r3, [fp]
 80308da:	f109 0201 	add.w	r2, r9, #1
 80308de:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80308e2:	46aa      	mov	sl, r5
 80308e4:	f8ab 2006 	strh.w	r2, [fp, #6]
 80308e8:	4645      	mov	r5, r8
 80308ea:	2620      	movs	r6, #32
 80308ec:	46a9      	mov	r9, r5
 80308ee:	6823      	ldr	r3, [r4, #0]
 80308f0:	4922      	ldr	r1, [pc, #136]	@ (803097c <__ssvfiscanf_r+0xc44>)
 80308f2:	781a      	ldrb	r2, [r3, #0]
 80308f4:	5c8a      	ldrb	r2, [r1, r2]
 80308f6:	0710      	lsls	r0, r2, #28
 80308f8:	d428      	bmi.n	803094c <__ssvfiscanf_r+0xc14>
 80308fa:	6862      	ldr	r2, [r4, #4]
 80308fc:	3a01      	subs	r2, #1
 80308fe:	6062      	str	r2, [r4, #4]
 8030900:	1c5a      	adds	r2, r3, #1
 8030902:	6022      	str	r2, [r4, #0]
 8030904:	781b      	ldrb	r3, [r3, #0]
 8030906:	f805 3b01 	strb.w	r3, [r5], #1
 803090a:	f1ba 0f00 	cmp.w	sl, #0
 803090e:	d010      	beq.n	8030932 <__ssvfiscanf_r+0xbfa>
 8030910:	eba5 0809 	sub.w	r8, r5, r9
 8030914:	45b0      	cmp	r8, r6
 8030916:	d30c      	bcc.n	8030932 <__ssvfiscanf_r+0xbfa>
 8030918:	0076      	lsls	r6, r6, #1
 803091a:	4648      	mov	r0, r9
 803091c:	4631      	mov	r1, r6
 803091e:	f003 f97f 	bl	8033c20 <realloc>
 8030922:	4681      	mov	r9, r0
 8030924:	2800      	cmp	r0, #0
 8030926:	f43f aac3 	beq.w	802feb0 <__ssvfiscanf_r+0x178>
 803092a:	eb00 0508 	add.w	r5, r0, r8
 803092e:	f8ca 0000 	str.w	r0, [sl]
 8030932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030934:	3b01      	subs	r3, #1
 8030936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030938:	d008      	beq.n	803094c <__ssvfiscanf_r+0xc14>
 803093a:	6863      	ldr	r3, [r4, #4]
 803093c:	2b00      	cmp	r3, #0
 803093e:	dcd6      	bgt.n	80308ee <__ssvfiscanf_r+0xbb6>
 8030940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030942:	4621      	mov	r1, r4
 8030944:	f7ff f9a1 	bl	802fc8a <__ssrefill_r>
 8030948:	2800      	cmp	r0, #0
 803094a:	d0d0      	beq.n	80308ee <__ssvfiscanf_r+0xbb6>
 803094c:	2300      	movs	r3, #0
 803094e:	702b      	strb	r3, [r5, #0]
 8030950:	eba5 0509 	sub.w	r5, r5, r9
 8030954:	f1ba 0f00 	cmp.w	sl, #0
 8030958:	f43f acce 	beq.w	80302f8 <__ssvfiscanf_r+0x5c0>
 803095c:	1c69      	adds	r1, r5, #1
 803095e:	428e      	cmp	r6, r1
 8030960:	f67f acca 	bls.w	80302f8 <__ssvfiscanf_r+0x5c0>
 8030964:	f8da 0000 	ldr.w	r0, [sl]
 8030968:	f003 f95a 	bl	8033c20 <realloc>
 803096c:	2800      	cmp	r0, #0
 803096e:	f43f acc3 	beq.w	80302f8 <__ssvfiscanf_r+0x5c0>
 8030972:	f8ca 0000 	str.w	r0, [sl]
 8030976:	e4bf      	b.n	80302f8 <__ssvfiscanf_r+0x5c0>
 8030978:	46b2      	mov	sl, r6
 803097a:	e7b7      	b.n	80308ec <__ssvfiscanf_r+0xbb4>
 803097c:	0803bda1 	.word	0x0803bda1
 8030980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030982:	3b01      	subs	r3, #1
 8030984:	2b26      	cmp	r3, #38	@ 0x26
 8030986:	bf81      	itttt	hi
 8030988:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 803098a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 803098e:	2327      	movhi	r3, #39	@ 0x27
 8030990:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030992:	bf98      	it	ls
 8030994:	f04f 0800 	movls.w	r8, #0
 8030998:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803099c:	f04f 0900 	mov.w	r9, #0
 80309a0:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 80309a4:	6822      	ldr	r2, [r4, #0]
 80309a6:	7813      	ldrb	r3, [r2, #0]
 80309a8:	2b39      	cmp	r3, #57	@ 0x39
 80309aa:	d80f      	bhi.n	80309cc <__ssvfiscanf_r+0xc94>
 80309ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80309ae:	d91a      	bls.n	80309e6 <__ssvfiscanf_r+0xcae>
 80309b0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80309b4:	290e      	cmp	r1, #14
 80309b6:	d816      	bhi.n	80309e6 <__ssvfiscanf_r+0xcae>
 80309b8:	e8df f001 	tbb	[pc, r1]
 80309bc:	15771577 	.word	0x15771577
 80309c0:	67673e15 	.word	0x67673e15
 80309c4:	67676767 	.word	0x67676767
 80309c8:	6f67      	.short	0x6f67
 80309ca:	6f          	.byte	0x6f
 80309cb:	00          	.byte	0x00
 80309cc:	2b66      	cmp	r3, #102	@ 0x66
 80309ce:	d831      	bhi.n	8030a34 <__ssvfiscanf_r+0xcfc>
 80309d0:	2b60      	cmp	r3, #96	@ 0x60
 80309d2:	d803      	bhi.n	80309dc <__ssvfiscanf_r+0xca4>
 80309d4:	2b46      	cmp	r3, #70	@ 0x46
 80309d6:	d804      	bhi.n	80309e2 <__ssvfiscanf_r+0xcaa>
 80309d8:	2b40      	cmp	r3, #64	@ 0x40
 80309da:	d904      	bls.n	80309e6 <__ssvfiscanf_r+0xcae>
 80309dc:	6979      	ldr	r1, [r7, #20]
 80309de:	290a      	cmp	r1, #10
 80309e0:	e061      	b.n	8030aa6 <__ssvfiscanf_r+0xd6e>
 80309e2:	2b58      	cmp	r3, #88	@ 0x58
 80309e4:	d066      	beq.n	8030ab4 <__ssvfiscanf_r+0xd7c>
 80309e6:	05f1      	lsls	r1, r6, #23
 80309e8:	d511      	bpl.n	8030a0e <__ssvfiscanf_r+0xcd6>
 80309ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80309ee:	459a      	cmp	sl, r3
 80309f0:	d908      	bls.n	8030a04 <__ssvfiscanf_r+0xccc>
 80309f2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 80309f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80309f8:	4622      	mov	r2, r4
 80309fa:	f7ff f90b 	bl	802fc14 <_sungetc_r>
 80309fe:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030a02:	46c2      	mov	sl, r8
 8030a04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030a08:	459a      	cmp	sl, r3
 8030a0a:	f43f a9e2 	beq.w	802fdd2 <__ssvfiscanf_r+0x9a>
 8030a0e:	f016 0210 	ands.w	r2, r6, #16
 8030a12:	d16b      	bne.n	8030aec <__ssvfiscanf_r+0xdb4>
 8030a14:	697b      	ldr	r3, [r7, #20]
 8030a16:	f88a 2000 	strb.w	r2, [sl]
 8030a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030a1c:	68fd      	ldr	r5, [r7, #12]
 8030a1e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030a22:	47a8      	blx	r5
 8030a24:	6a3b      	ldr	r3, [r7, #32]
 8030a26:	06b2      	lsls	r2, r6, #26
 8030a28:	f103 0804 	add.w	r8, r3, #4
 8030a2c:	d555      	bpl.n	8030ada <__ssvfiscanf_r+0xda2>
 8030a2e:	681b      	ldr	r3, [r3, #0]
 8030a30:	6018      	str	r0, [r3, #0]
 8030a32:	e057      	b.n	8030ae4 <__ssvfiscanf_r+0xdac>
 8030a34:	2b78      	cmp	r3, #120	@ 0x78
 8030a36:	e7d5      	b.n	80309e4 <__ssvfiscanf_r+0xcac>
 8030a38:	0531      	lsls	r1, r6, #20
 8030a3a:	d509      	bpl.n	8030a50 <__ssvfiscanf_r+0xd18>
 8030a3c:	6979      	ldr	r1, [r7, #20]
 8030a3e:	b919      	cbnz	r1, 8030a48 <__ssvfiscanf_r+0xd10>
 8030a40:	2108      	movs	r1, #8
 8030a42:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8030a46:	6179      	str	r1, [r7, #20]
 8030a48:	0575      	lsls	r5, r6, #21
 8030a4a:	d506      	bpl.n	8030a5a <__ssvfiscanf_r+0xd22>
 8030a4c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8030a50:	4655      	mov	r5, sl
 8030a52:	f805 3b01 	strb.w	r3, [r5], #1
 8030a56:	46aa      	mov	sl, r5
 8030a58:	e00b      	b.n	8030a72 <__ssvfiscanf_r+0xd3a>
 8030a5a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8030a5e:	f1b8 0f00 	cmp.w	r8, #0
 8030a62:	d004      	beq.n	8030a6e <__ssvfiscanf_r+0xd36>
 8030a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a66:	3301      	adds	r3, #1
 8030a68:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8030a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a6e:	f109 0901 	add.w	r9, r9, #1
 8030a72:	6863      	ldr	r3, [r4, #4]
 8030a74:	3b01      	subs	r3, #1
 8030a76:	2b00      	cmp	r3, #0
 8030a78:	6063      	str	r3, [r4, #4]
 8030a7a:	dd27      	ble.n	8030acc <__ssvfiscanf_r+0xd94>
 8030a7c:	3201      	adds	r2, #1
 8030a7e:	6022      	str	r2, [r4, #0]
 8030a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8030a82:	3b01      	subs	r3, #1
 8030a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8030a86:	d18d      	bne.n	80309a4 <__ssvfiscanf_r+0xc6c>
 8030a88:	e7ad      	b.n	80309e6 <__ssvfiscanf_r+0xcae>
 8030a8a:	6978      	ldr	r0, [r7, #20]
 8030a8c:	4936      	ldr	r1, [pc, #216]	@ (8030b68 <__ssvfiscanf_r+0xe30>)
 8030a8e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030a92:	6179      	str	r1, [r7, #20]
 8030a94:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8030a98:	e7da      	b.n	8030a50 <__ssvfiscanf_r+0xd18>
 8030a9a:	6978      	ldr	r0, [r7, #20]
 8030a9c:	4932      	ldr	r1, [pc, #200]	@ (8030b68 <__ssvfiscanf_r+0xe30>)
 8030a9e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030aa2:	6179      	str	r1, [r7, #20]
 8030aa4:	2908      	cmp	r1, #8
 8030aa6:	dcf5      	bgt.n	8030a94 <__ssvfiscanf_r+0xd5c>
 8030aa8:	e79d      	b.n	80309e6 <__ssvfiscanf_r+0xcae>
 8030aaa:	0630      	lsls	r0, r6, #24
 8030aac:	d59b      	bpl.n	80309e6 <__ssvfiscanf_r+0xcae>
 8030aae:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030ab2:	e7cd      	b.n	8030a50 <__ssvfiscanf_r+0xd18>
 8030ab4:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8030ab8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8030abc:	d193      	bne.n	80309e6 <__ssvfiscanf_r+0xcae>
 8030abe:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8030ac2:	2110      	movs	r1, #16
 8030ac4:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8030ac8:	6179      	str	r1, [r7, #20]
 8030aca:	e7c1      	b.n	8030a50 <__ssvfiscanf_r+0xd18>
 8030acc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030ace:	4621      	mov	r1, r4
 8030ad0:	f7ff f8db 	bl	802fc8a <__ssrefill_r>
 8030ad4:	2800      	cmp	r0, #0
 8030ad6:	d0d3      	beq.n	8030a80 <__ssvfiscanf_r+0xd48>
 8030ad8:	e785      	b.n	80309e6 <__ssvfiscanf_r+0xcae>
 8030ada:	0733      	lsls	r3, r6, #28
 8030adc:	d50d      	bpl.n	8030afa <__ssvfiscanf_r+0xdc2>
 8030ade:	6a3b      	ldr	r3, [r7, #32]
 8030ae0:	681b      	ldr	r3, [r3, #0]
 8030ae2:	7018      	strb	r0, [r3, #0]
 8030ae4:	69fb      	ldr	r3, [r7, #28]
 8030ae6:	3301      	adds	r3, #1
 8030ae8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8030aec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030af0:	ebaa 0503 	sub.w	r5, sl, r3
 8030af4:	444d      	add	r5, r9
 8030af6:	f7ff bbac 	b.w	8030252 <__ssvfiscanf_r+0x51a>
 8030afa:	0775      	lsls	r5, r6, #29
 8030afc:	d503      	bpl.n	8030b06 <__ssvfiscanf_r+0xdce>
 8030afe:	6a3b      	ldr	r3, [r7, #32]
 8030b00:	681b      	ldr	r3, [r3, #0]
 8030b02:	8018      	strh	r0, [r3, #0]
 8030b04:	e7ee      	b.n	8030ae4 <__ssvfiscanf_r+0xdac>
 8030b06:	f016 0201 	ands.w	r2, r6, #1
 8030b0a:	d001      	beq.n	8030b10 <__ssvfiscanf_r+0xdd8>
 8030b0c:	6a3b      	ldr	r3, [r7, #32]
 8030b0e:	e78e      	b.n	8030a2e <__ssvfiscanf_r+0xcf6>
 8030b10:	07b1      	lsls	r1, r6, #30
 8030b12:	d5fb      	bpl.n	8030b0c <__ssvfiscanf_r+0xdd4>
 8030b14:	4b15      	ldr	r3, [pc, #84]	@ (8030b6c <__ssvfiscanf_r+0xe34>)
 8030b16:	68f9      	ldr	r1, [r7, #12]
 8030b18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030b1a:	4299      	cmp	r1, r3
 8030b1c:	697b      	ldr	r3, [r7, #20]
 8030b1e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030b22:	d106      	bne.n	8030b32 <__ssvfiscanf_r+0xdfa>
 8030b24:	f004 fc34 	bl	8035390 <_strtoull_r>
 8030b28:	6a3b      	ldr	r3, [r7, #32]
 8030b2a:	681b      	ldr	r3, [r3, #0]
 8030b2c:	e9c3 0100 	strd	r0, r1, [r3]
 8030b30:	e7d8      	b.n	8030ae4 <__ssvfiscanf_r+0xdac>
 8030b32:	f004 fb81 	bl	8035238 <_strtoll_r>
 8030b36:	e7f7      	b.n	8030b28 <__ssvfiscanf_r+0xdf0>
 8030b38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030b3c:	6818      	ldr	r0, [r3, #0]
 8030b3e:	f7fe f8ed 	bl	802ed1c <free>
 8030b42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8030b46:	3401      	adds	r4, #1
 8030b48:	601e      	str	r6, [r3, #0]
 8030b4a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8030b4e:	f8db 5000 	ldr.w	r5, [fp]
 8030b52:	42a3      	cmp	r3, r4
 8030b54:	dcf0      	bgt.n	8030b38 <__ssvfiscanf_r+0xe00>
 8030b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030b5a:	61fb      	str	r3, [r7, #28]
 8030b5c:	f7ff ba46 	b.w	802ffec <__ssvfiscanf_r+0x2b4>
 8030b60:	2400      	movs	r4, #0
 8030b62:	4626      	mov	r6, r4
 8030b64:	e7f1      	b.n	8030b4a <__ssvfiscanf_r+0xe12>
 8030b66:	bf00      	nop
 8030b68:	0803bf38 	.word	0x0803bf38
 8030b6c:	08034d89 	.word	0x08034d89

08030b70 <_svfprintf_r>:
 8030b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030b74:	b0d3      	sub	sp, #332	@ 0x14c
 8030b76:	468b      	mov	fp, r1
 8030b78:	4691      	mov	r9, r2
 8030b7a:	461e      	mov	r6, r3
 8030b7c:	9003      	str	r0, [sp, #12]
 8030b7e:	f7fd f80d 	bl	802db9c <_localeconv_r>
 8030b82:	6803      	ldr	r3, [r0, #0]
 8030b84:	9316      	str	r3, [sp, #88]	@ 0x58
 8030b86:	4618      	mov	r0, r3
 8030b88:	f7df fb8a 	bl	80102a0 <strlen>
 8030b8c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030b90:	900d      	str	r0, [sp, #52]	@ 0x34
 8030b92:	061b      	lsls	r3, r3, #24
 8030b94:	d515      	bpl.n	8030bc2 <_svfprintf_r+0x52>
 8030b96:	f8db 3010 	ldr.w	r3, [fp, #16]
 8030b9a:	b993      	cbnz	r3, 8030bc2 <_svfprintf_r+0x52>
 8030b9c:	9803      	ldr	r0, [sp, #12]
 8030b9e:	2140      	movs	r1, #64	@ 0x40
 8030ba0:	f7fe f8c4 	bl	802ed2c <_malloc_r>
 8030ba4:	f8cb 0000 	str.w	r0, [fp]
 8030ba8:	f8cb 0010 	str.w	r0, [fp, #16]
 8030bac:	b930      	cbnz	r0, 8030bbc <_svfprintf_r+0x4c>
 8030bae:	9a03      	ldr	r2, [sp, #12]
 8030bb0:	230c      	movs	r3, #12
 8030bb2:	6013      	str	r3, [r2, #0]
 8030bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030bb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030bba:	e1f7      	b.n	8030fac <_svfprintf_r+0x43c>
 8030bbc:	2340      	movs	r3, #64	@ 0x40
 8030bbe:	f8cb 3014 	str.w	r3, [fp, #20]
 8030bc2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8030e10 <_svfprintf_r+0x2a0>
 8030bc6:	2300      	movs	r3, #0
 8030bc8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8030bcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8030bd0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8030bd4:	ac29      	add	r4, sp, #164	@ 0xa4
 8030bd6:	9426      	str	r4, [sp, #152]	@ 0x98
 8030bd8:	9304      	str	r3, [sp, #16]
 8030bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8030bdc:	9312      	str	r3, [sp, #72]	@ 0x48
 8030bde:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030be0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030be2:	464b      	mov	r3, r9
 8030be4:	461d      	mov	r5, r3
 8030be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030bea:	b10a      	cbz	r2, 8030bf0 <_svfprintf_r+0x80>
 8030bec:	2a25      	cmp	r2, #37	@ 0x25
 8030bee:	d1f9      	bne.n	8030be4 <_svfprintf_r+0x74>
 8030bf0:	ebb5 0709 	subs.w	r7, r5, r9
 8030bf4:	d00d      	beq.n	8030c12 <_svfprintf_r+0xa2>
 8030bf6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030bf8:	443b      	add	r3, r7
 8030bfa:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030bfc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030bfe:	3301      	adds	r3, #1
 8030c00:	2b07      	cmp	r3, #7
 8030c02:	e9c4 9700 	strd	r9, r7, [r4]
 8030c06:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030c08:	dc75      	bgt.n	8030cf6 <_svfprintf_r+0x186>
 8030c0a:	3408      	adds	r4, #8
 8030c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030c0e:	443b      	add	r3, r7
 8030c10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030c12:	782b      	ldrb	r3, [r5, #0]
 8030c14:	2b00      	cmp	r3, #0
 8030c16:	f001 8148 	beq.w	8031eaa <_svfprintf_r+0x133a>
 8030c1a:	2200      	movs	r2, #0
 8030c1c:	1c6b      	adds	r3, r5, #1
 8030c1e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030c22:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8030c26:	920e      	str	r2, [sp, #56]	@ 0x38
 8030c28:	4615      	mov	r5, r2
 8030c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030c2e:	9206      	str	r2, [sp, #24]
 8030c30:	930c      	str	r3, [sp, #48]	@ 0x30
 8030c32:	9b06      	ldr	r3, [sp, #24]
 8030c34:	3b20      	subs	r3, #32
 8030c36:	2b5a      	cmp	r3, #90	@ 0x5a
 8030c38:	f200 85a4 	bhi.w	8031784 <_svfprintf_r+0xc14>
 8030c3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8030c40:	05a2009d 	.word	0x05a2009d
 8030c44:	00a505a2 	.word	0x00a505a2
 8030c48:	05a205a2 	.word	0x05a205a2
 8030c4c:	008505a2 	.word	0x008505a2
 8030c50:	05a205a2 	.word	0x05a205a2
 8030c54:	00b200a8 	.word	0x00b200a8
 8030c58:	00af05a2 	.word	0x00af05a2
 8030c5c:	05a200b4 	.word	0x05a200b4
 8030c60:	00d100ce 	.word	0x00d100ce
 8030c64:	00d100d1 	.word	0x00d100d1
 8030c68:	00d100d1 	.word	0x00d100d1
 8030c6c:	00d100d1 	.word	0x00d100d1
 8030c70:	00d100d1 	.word	0x00d100d1
 8030c74:	05a205a2 	.word	0x05a205a2
 8030c78:	05a205a2 	.word	0x05a205a2
 8030c7c:	05a205a2 	.word	0x05a205a2
 8030c80:	014705a2 	.word	0x014705a2
 8030c84:	010805a2 	.word	0x010805a2
 8030c88:	0147011b 	.word	0x0147011b
 8030c8c:	01470147 	.word	0x01470147
 8030c90:	05a205a2 	.word	0x05a205a2
 8030c94:	05a205a2 	.word	0x05a205a2
 8030c98:	05a200e2 	.word	0x05a200e2
 8030c9c:	049d05a2 	.word	0x049d05a2
 8030ca0:	05a205a2 	.word	0x05a205a2
 8030ca4:	04e705a2 	.word	0x04e705a2
 8030ca8:	050805a2 	.word	0x050805a2
 8030cac:	05a205a2 	.word	0x05a205a2
 8030cb0:	05a2052a 	.word	0x05a2052a
 8030cb4:	05a205a2 	.word	0x05a205a2
 8030cb8:	05a205a2 	.word	0x05a205a2
 8030cbc:	05a205a2 	.word	0x05a205a2
 8030cc0:	014705a2 	.word	0x014705a2
 8030cc4:	010805a2 	.word	0x010805a2
 8030cc8:	0147011d 	.word	0x0147011d
 8030ccc:	01470147 	.word	0x01470147
 8030cd0:	011d00ee 	.word	0x011d00ee
 8030cd4:	05a20102 	.word	0x05a20102
 8030cd8:	05a200fb 	.word	0x05a200fb
 8030cdc:	049f047e 	.word	0x049f047e
 8030ce0:	010204d6 	.word	0x010204d6
 8030ce4:	04e705a2 	.word	0x04e705a2
 8030ce8:	050a009b 	.word	0x050a009b
 8030cec:	05a205a2 	.word	0x05a205a2
 8030cf0:	05a20065 	.word	0x05a20065
 8030cf4:	009b      	.short	0x009b
 8030cf6:	9803      	ldr	r0, [sp, #12]
 8030cf8:	aa26      	add	r2, sp, #152	@ 0x98
 8030cfa:	4659      	mov	r1, fp
 8030cfc:	f7fe fac0 	bl	802f280 <__ssprint_r>
 8030d00:	2800      	cmp	r0, #0
 8030d02:	f040 814e 	bne.w	8030fa2 <_svfprintf_r+0x432>
 8030d06:	ac29      	add	r4, sp, #164	@ 0xa4
 8030d08:	e780      	b.n	8030c0c <_svfprintf_r+0x9c>
 8030d0a:	4b43      	ldr	r3, [pc, #268]	@ (8030e18 <_svfprintf_r+0x2a8>)
 8030d0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8030d0e:	f015 0320 	ands.w	r3, r5, #32
 8030d12:	f000 84c2 	beq.w	803169a <_svfprintf_r+0xb2a>
 8030d16:	3607      	adds	r6, #7
 8030d18:	f026 0307 	bic.w	r3, r6, #7
 8030d1c:	461a      	mov	r2, r3
 8030d1e:	685f      	ldr	r7, [r3, #4]
 8030d20:	f852 6b08 	ldr.w	r6, [r2], #8
 8030d24:	9207      	str	r2, [sp, #28]
 8030d26:	07eb      	lsls	r3, r5, #31
 8030d28:	d50a      	bpl.n	8030d40 <_svfprintf_r+0x1d0>
 8030d2a:	ea56 0307 	orrs.w	r3, r6, r7
 8030d2e:	d007      	beq.n	8030d40 <_svfprintf_r+0x1d0>
 8030d30:	2330      	movs	r3, #48	@ 0x30
 8030d32:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8030d36:	9b06      	ldr	r3, [sp, #24]
 8030d38:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8030d3c:	f045 0502 	orr.w	r5, r5, #2
 8030d40:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030d44:	2302      	movs	r3, #2
 8030d46:	f000 bc28 	b.w	803159a <_svfprintf_r+0xa2a>
 8030d4a:	9803      	ldr	r0, [sp, #12]
 8030d4c:	f7fc ff26 	bl	802db9c <_localeconv_r>
 8030d50:	6843      	ldr	r3, [r0, #4]
 8030d52:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030d54:	4618      	mov	r0, r3
 8030d56:	f7df faa3 	bl	80102a0 <strlen>
 8030d5a:	9012      	str	r0, [sp, #72]	@ 0x48
 8030d5c:	9803      	ldr	r0, [sp, #12]
 8030d5e:	f7fc ff1d 	bl	802db9c <_localeconv_r>
 8030d62:	6883      	ldr	r3, [r0, #8]
 8030d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8030d66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8030d68:	b12b      	cbz	r3, 8030d76 <_svfprintf_r+0x206>
 8030d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030d6c:	b11b      	cbz	r3, 8030d76 <_svfprintf_r+0x206>
 8030d6e:	781b      	ldrb	r3, [r3, #0]
 8030d70:	b10b      	cbz	r3, 8030d76 <_svfprintf_r+0x206>
 8030d72:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8030d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030d78:	e757      	b.n	8030c2a <_svfprintf_r+0xba>
 8030d7a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8030d7e:	2b00      	cmp	r3, #0
 8030d80:	d1f9      	bne.n	8030d76 <_svfprintf_r+0x206>
 8030d82:	2320      	movs	r3, #32
 8030d84:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030d88:	e7f5      	b.n	8030d76 <_svfprintf_r+0x206>
 8030d8a:	f045 0501 	orr.w	r5, r5, #1
 8030d8e:	e7f2      	b.n	8030d76 <_svfprintf_r+0x206>
 8030d90:	f856 3b04 	ldr.w	r3, [r6], #4
 8030d94:	930e      	str	r3, [sp, #56]	@ 0x38
 8030d96:	2b00      	cmp	r3, #0
 8030d98:	daed      	bge.n	8030d76 <_svfprintf_r+0x206>
 8030d9a:	425b      	negs	r3, r3
 8030d9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8030d9e:	f045 0504 	orr.w	r5, r5, #4
 8030da2:	e7e8      	b.n	8030d76 <_svfprintf_r+0x206>
 8030da4:	232b      	movs	r3, #43	@ 0x2b
 8030da6:	e7ed      	b.n	8030d84 <_svfprintf_r+0x214>
 8030da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030dae:	9206      	str	r2, [sp, #24]
 8030db0:	2a2a      	cmp	r2, #42	@ 0x2a
 8030db2:	d10f      	bne.n	8030dd4 <_svfprintf_r+0x264>
 8030db4:	f856 2b04 	ldr.w	r2, [r6], #4
 8030db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8030dba:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8030dbe:	e7da      	b.n	8030d76 <_svfprintf_r+0x206>
 8030dc0:	fb01 2808 	mla	r8, r1, r8, r2
 8030dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030dc8:	9206      	str	r2, [sp, #24]
 8030dca:	9a06      	ldr	r2, [sp, #24]
 8030dcc:	3a30      	subs	r2, #48	@ 0x30
 8030dce:	2a09      	cmp	r2, #9
 8030dd0:	d9f6      	bls.n	8030dc0 <_svfprintf_r+0x250>
 8030dd2:	e72d      	b.n	8030c30 <_svfprintf_r+0xc0>
 8030dd4:	f04f 0800 	mov.w	r8, #0
 8030dd8:	210a      	movs	r1, #10
 8030dda:	e7f6      	b.n	8030dca <_svfprintf_r+0x25a>
 8030ddc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8030de0:	e7c9      	b.n	8030d76 <_svfprintf_r+0x206>
 8030de2:	2200      	movs	r2, #0
 8030de4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030de6:	920e      	str	r2, [sp, #56]	@ 0x38
 8030de8:	210a      	movs	r1, #10
 8030dea:	9a06      	ldr	r2, [sp, #24]
 8030dec:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8030dee:	3a30      	subs	r2, #48	@ 0x30
 8030df0:	fb01 2200 	mla	r2, r1, r0, r2
 8030df4:	920e      	str	r2, [sp, #56]	@ 0x38
 8030df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030dfa:	9206      	str	r2, [sp, #24]
 8030dfc:	3a30      	subs	r2, #48	@ 0x30
 8030dfe:	2a09      	cmp	r2, #9
 8030e00:	d9f3      	bls.n	8030dea <_svfprintf_r+0x27a>
 8030e02:	e715      	b.n	8030c30 <_svfprintf_r+0xc0>
 8030e04:	f045 0508 	orr.w	r5, r5, #8
 8030e08:	e7b5      	b.n	8030d76 <_svfprintf_r+0x206>
 8030e0a:	bf00      	nop
 8030e0c:	f3af 8000 	nop.w
	...
 8030e18:	0803b9f3 	.word	0x0803b9f3
 8030e1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030e1e:	781b      	ldrb	r3, [r3, #0]
 8030e20:	2b68      	cmp	r3, #104	@ 0x68
 8030e22:	bf01      	itttt	eq
 8030e24:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8030e26:	3301      	addeq	r3, #1
 8030e28:	930c      	streq	r3, [sp, #48]	@ 0x30
 8030e2a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8030e2e:	bf18      	it	ne
 8030e30:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8030e34:	e79f      	b.n	8030d76 <_svfprintf_r+0x206>
 8030e36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030e38:	781b      	ldrb	r3, [r3, #0]
 8030e3a:	2b6c      	cmp	r3, #108	@ 0x6c
 8030e3c:	d105      	bne.n	8030e4a <_svfprintf_r+0x2da>
 8030e3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030e40:	3301      	adds	r3, #1
 8030e42:	930c      	str	r3, [sp, #48]	@ 0x30
 8030e44:	f045 0520 	orr.w	r5, r5, #32
 8030e48:	e795      	b.n	8030d76 <_svfprintf_r+0x206>
 8030e4a:	f045 0510 	orr.w	r5, r5, #16
 8030e4e:	e792      	b.n	8030d76 <_svfprintf_r+0x206>
 8030e50:	4632      	mov	r2, r6
 8030e52:	f852 3b04 	ldr.w	r3, [r2], #4
 8030e56:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8030e5a:	2300      	movs	r3, #0
 8030e5c:	9207      	str	r2, [sp, #28]
 8030e5e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030e62:	469a      	mov	sl, r3
 8030e64:	f04f 0801 	mov.w	r8, #1
 8030e68:	9310      	str	r3, [sp, #64]	@ 0x40
 8030e6a:	461f      	mov	r7, r3
 8030e6c:	9308      	str	r3, [sp, #32]
 8030e6e:	461e      	mov	r6, r3
 8030e70:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030e74:	e1d2      	b.n	803121c <_svfprintf_r+0x6ac>
 8030e76:	f045 0510 	orr.w	r5, r5, #16
 8030e7a:	06af      	lsls	r7, r5, #26
 8030e7c:	d512      	bpl.n	8030ea4 <_svfprintf_r+0x334>
 8030e7e:	3607      	adds	r6, #7
 8030e80:	f026 0307 	bic.w	r3, r6, #7
 8030e84:	461a      	mov	r2, r3
 8030e86:	685f      	ldr	r7, [r3, #4]
 8030e88:	f852 6b08 	ldr.w	r6, [r2], #8
 8030e8c:	9207      	str	r2, [sp, #28]
 8030e8e:	2f00      	cmp	r7, #0
 8030e90:	da06      	bge.n	8030ea0 <_svfprintf_r+0x330>
 8030e92:	4276      	negs	r6, r6
 8030e94:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030e98:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8030e9c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030ea0:	2301      	movs	r3, #1
 8030ea2:	e37d      	b.n	80315a0 <_svfprintf_r+0xa30>
 8030ea4:	4633      	mov	r3, r6
 8030ea6:	06ee      	lsls	r6, r5, #27
 8030ea8:	f853 7b04 	ldr.w	r7, [r3], #4
 8030eac:	9307      	str	r3, [sp, #28]
 8030eae:	d502      	bpl.n	8030eb6 <_svfprintf_r+0x346>
 8030eb0:	463e      	mov	r6, r7
 8030eb2:	17ff      	asrs	r7, r7, #31
 8030eb4:	e7eb      	b.n	8030e8e <_svfprintf_r+0x31e>
 8030eb6:	0668      	lsls	r0, r5, #25
 8030eb8:	d503      	bpl.n	8030ec2 <_svfprintf_r+0x352>
 8030eba:	b23e      	sxth	r6, r7
 8030ebc:	f347 37c0 	sbfx	r7, r7, #15, #1
 8030ec0:	e7e5      	b.n	8030e8e <_svfprintf_r+0x31e>
 8030ec2:	05a9      	lsls	r1, r5, #22
 8030ec4:	d5f4      	bpl.n	8030eb0 <_svfprintf_r+0x340>
 8030ec6:	b27e      	sxtb	r6, r7
 8030ec8:	f347 17c0 	sbfx	r7, r7, #7, #1
 8030ecc:	e7df      	b.n	8030e8e <_svfprintf_r+0x31e>
 8030ece:	3607      	adds	r6, #7
 8030ed0:	f026 0307 	bic.w	r3, r6, #7
 8030ed4:	ecb3 7b02 	vldmia	r3!, {d7}
 8030ed8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8030edc:	9307      	str	r3, [sp, #28]
 8030ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030ee0:	931a      	str	r3, [sp, #104]	@ 0x68
 8030ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030ee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8030ee8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8030eea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8030eee:	4b81      	ldr	r3, [pc, #516]	@ (80310f4 <_svfprintf_r+0x584>)
 8030ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030ef4:	f7df fe32 	bl	8010b5c <__aeabi_dcmpun>
 8030ef8:	bb10      	cbnz	r0, 8030f40 <_svfprintf_r+0x3d0>
 8030efa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8030efe:	4b7d      	ldr	r3, [pc, #500]	@ (80310f4 <_svfprintf_r+0x584>)
 8030f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030f04:	f7df fe0c 	bl	8010b20 <__aeabi_dcmple>
 8030f08:	b9d0      	cbnz	r0, 8030f40 <_svfprintf_r+0x3d0>
 8030f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8030f0e:	2200      	movs	r2, #0
 8030f10:	2300      	movs	r3, #0
 8030f12:	f7df fdfb 	bl	8010b0c <__aeabi_dcmplt>
 8030f16:	b110      	cbz	r0, 8030f1e <_svfprintf_r+0x3ae>
 8030f18:	232d      	movs	r3, #45	@ 0x2d
 8030f1a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030f1e:	4a76      	ldr	r2, [pc, #472]	@ (80310f8 <_svfprintf_r+0x588>)
 8030f20:	4b76      	ldr	r3, [pc, #472]	@ (80310fc <_svfprintf_r+0x58c>)
 8030f22:	9906      	ldr	r1, [sp, #24]
 8030f24:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8030f28:	2947      	cmp	r1, #71	@ 0x47
 8030f2a:	bfd4      	ite	le
 8030f2c:	4691      	movle	r9, r2
 8030f2e:	4699      	movgt	r9, r3
 8030f30:	f04f 0a00 	mov.w	sl, #0
 8030f34:	f04f 0803 	mov.w	r8, #3
 8030f38:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8030f3c:	f000 bfec 	b.w	8031f18 <_svfprintf_r+0x13a8>
 8030f40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8030f44:	4610      	mov	r0, r2
 8030f46:	4619      	mov	r1, r3
 8030f48:	f7df fe08 	bl	8010b5c <__aeabi_dcmpun>
 8030f4c:	4682      	mov	sl, r0
 8030f4e:	b140      	cbz	r0, 8030f62 <_svfprintf_r+0x3f2>
 8030f50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030f52:	4a6b      	ldr	r2, [pc, #428]	@ (8031100 <_svfprintf_r+0x590>)
 8030f54:	2b00      	cmp	r3, #0
 8030f56:	bfbc      	itt	lt
 8030f58:	232d      	movlt	r3, #45	@ 0x2d
 8030f5a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8030f5e:	4b69      	ldr	r3, [pc, #420]	@ (8031104 <_svfprintf_r+0x594>)
 8030f60:	e7df      	b.n	8030f22 <_svfprintf_r+0x3b2>
 8030f62:	9b06      	ldr	r3, [sp, #24]
 8030f64:	2b61      	cmp	r3, #97	@ 0x61
 8030f66:	d025      	beq.n	8030fb4 <_svfprintf_r+0x444>
 8030f68:	2b41      	cmp	r3, #65	@ 0x41
 8030f6a:	d125      	bne.n	8030fb8 <_svfprintf_r+0x448>
 8030f6c:	2358      	movs	r3, #88	@ 0x58
 8030f6e:	2230      	movs	r2, #48	@ 0x30
 8030f70:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8030f74:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8030f78:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8030f7c:	f045 0502 	orr.w	r5, r5, #2
 8030f80:	f340 80a5 	ble.w	80310ce <_svfprintf_r+0x55e>
 8030f84:	9803      	ldr	r0, [sp, #12]
 8030f86:	f108 0101 	add.w	r1, r8, #1
 8030f8a:	f7fd fecf 	bl	802ed2c <_malloc_r>
 8030f8e:	4681      	mov	r9, r0
 8030f90:	2800      	cmp	r0, #0
 8030f92:	f040 80a1 	bne.w	80310d8 <_svfprintf_r+0x568>
 8030f96:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030f9e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8030fa2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030fa6:	065b      	lsls	r3, r3, #25
 8030fa8:	f53f ae04 	bmi.w	8030bb4 <_svfprintf_r+0x44>
 8030fac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8030fae:	b053      	add	sp, #332	@ 0x14c
 8030fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030fb4:	2378      	movs	r3, #120	@ 0x78
 8030fb6:	e7da      	b.n	8030f6e <_svfprintf_r+0x3fe>
 8030fb8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8030fbc:	f000 808e 	beq.w	80310dc <_svfprintf_r+0x56c>
 8030fc0:	9b06      	ldr	r3, [sp, #24]
 8030fc2:	f023 0320 	bic.w	r3, r3, #32
 8030fc6:	2b47      	cmp	r3, #71	@ 0x47
 8030fc8:	d105      	bne.n	8030fd6 <_svfprintf_r+0x466>
 8030fca:	f1b8 0f00 	cmp.w	r8, #0
 8030fce:	d102      	bne.n	8030fd6 <_svfprintf_r+0x466>
 8030fd0:	46c2      	mov	sl, r8
 8030fd2:	f04f 0801 	mov.w	r8, #1
 8030fd6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8030fda:	9311      	str	r3, [sp, #68]	@ 0x44
 8030fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030fde:	2b00      	cmp	r3, #0
 8030fe0:	da7f      	bge.n	80310e2 <_svfprintf_r+0x572>
 8030fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030fe4:	9314      	str	r3, [sp, #80]	@ 0x50
 8030fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030fe8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8030fec:	9315      	str	r3, [sp, #84]	@ 0x54
 8030fee:	232d      	movs	r3, #45	@ 0x2d
 8030ff0:	931c      	str	r3, [sp, #112]	@ 0x70
 8030ff2:	9b06      	ldr	r3, [sp, #24]
 8030ff4:	f023 0320 	bic.w	r3, r3, #32
 8030ff8:	2b41      	cmp	r3, #65	@ 0x41
 8030ffa:	9308      	str	r3, [sp, #32]
 8030ffc:	f040 81e6 	bne.w	80313cc <_svfprintf_r+0x85c>
 8031000:	a820      	add	r0, sp, #128	@ 0x80
 8031002:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8031006:	f7fc fe9b 	bl	802dd40 <frexp>
 803100a:	2200      	movs	r2, #0
 803100c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8031010:	ec51 0b10 	vmov	r0, r1, d0
 8031014:	f7df fb08 	bl	8010628 <__aeabi_dmul>
 8031018:	4602      	mov	r2, r0
 803101a:	460b      	mov	r3, r1
 803101c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031020:	2200      	movs	r2, #0
 8031022:	2300      	movs	r3, #0
 8031024:	f7df fd68 	bl	8010af8 <__aeabi_dcmpeq>
 8031028:	b108      	cbz	r0, 803102e <_svfprintf_r+0x4be>
 803102a:	2301      	movs	r3, #1
 803102c:	9320      	str	r3, [sp, #128]	@ 0x80
 803102e:	4a36      	ldr	r2, [pc, #216]	@ (8031108 <_svfprintf_r+0x598>)
 8031030:	4b36      	ldr	r3, [pc, #216]	@ (803110c <_svfprintf_r+0x59c>)
 8031032:	9906      	ldr	r1, [sp, #24]
 8031034:	2961      	cmp	r1, #97	@ 0x61
 8031036:	bf18      	it	ne
 8031038:	461a      	movne	r2, r3
 803103a:	9210      	str	r2, [sp, #64]	@ 0x40
 803103c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8031040:	464e      	mov	r6, r9
 8031042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031046:	4b32      	ldr	r3, [pc, #200]	@ (8031110 <_svfprintf_r+0x5a0>)
 8031048:	2200      	movs	r2, #0
 803104a:	f7df faed 	bl	8010628 <__aeabi_dmul>
 803104e:	4602      	mov	r2, r0
 8031050:	460b      	mov	r3, r1
 8031052:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031056:	f7df fd97 	bl	8010b88 <__aeabi_d2iz>
 803105a:	9013      	str	r0, [sp, #76]	@ 0x4c
 803105c:	f7df fa7a 	bl	8010554 <__aeabi_i2d>
 8031060:	4602      	mov	r2, r0
 8031062:	460b      	mov	r3, r1
 8031064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031068:	f7df f926 	bl	80102b8 <__aeabi_dsub>
 803106c:	4602      	mov	r2, r0
 803106e:	460b      	mov	r3, r1
 8031070:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8031074:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8031076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031078:	5c9b      	ldrb	r3, [r3, r2]
 803107a:	f806 3b01 	strb.w	r3, [r6], #1
 803107e:	1c7a      	adds	r2, r7, #1
 8031080:	d006      	beq.n	8031090 <_svfprintf_r+0x520>
 8031082:	1e7b      	subs	r3, r7, #1
 8031084:	931d      	str	r3, [sp, #116]	@ 0x74
 8031086:	2200      	movs	r2, #0
 8031088:	2300      	movs	r3, #0
 803108a:	f7df fd35 	bl	8010af8 <__aeabi_dcmpeq>
 803108e:	b370      	cbz	r0, 80310ee <_svfprintf_r+0x57e>
 8031090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8031094:	4b1f      	ldr	r3, [pc, #124]	@ (8031114 <_svfprintf_r+0x5a4>)
 8031096:	2200      	movs	r2, #0
 8031098:	f7df fd56 	bl	8010b48 <__aeabi_dcmpgt>
 803109c:	2800      	cmp	r0, #0
 803109e:	d13b      	bne.n	8031118 <_svfprintf_r+0x5a8>
 80310a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80310a4:	4b1b      	ldr	r3, [pc, #108]	@ (8031114 <_svfprintf_r+0x5a4>)
 80310a6:	2200      	movs	r2, #0
 80310a8:	f7df fd26 	bl	8010af8 <__aeabi_dcmpeq>
 80310ac:	b110      	cbz	r0, 80310b4 <_svfprintf_r+0x544>
 80310ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80310b0:	07db      	lsls	r3, r3, #31
 80310b2:	d431      	bmi.n	8031118 <_svfprintf_r+0x5a8>
 80310b4:	4633      	mov	r3, r6
 80310b6:	19f1      	adds	r1, r6, r7
 80310b8:	2030      	movs	r0, #48	@ 0x30
 80310ba:	1aca      	subs	r2, r1, r3
 80310bc:	2a00      	cmp	r2, #0
 80310be:	f280 8182 	bge.w	80313c6 <_svfprintf_r+0x856>
 80310c2:	1c7b      	adds	r3, r7, #1
 80310c4:	3701      	adds	r7, #1
 80310c6:	bfb8      	it	lt
 80310c8:	2300      	movlt	r3, #0
 80310ca:	441e      	add	r6, r3
 80310cc:	e038      	b.n	8031140 <_svfprintf_r+0x5d0>
 80310ce:	f04f 0a00 	mov.w	sl, #0
 80310d2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80310d6:	e77e      	b.n	8030fd6 <_svfprintf_r+0x466>
 80310d8:	4682      	mov	sl, r0
 80310da:	e77c      	b.n	8030fd6 <_svfprintf_r+0x466>
 80310dc:	f04f 0806 	mov.w	r8, #6
 80310e0:	e779      	b.n	8030fd6 <_svfprintf_r+0x466>
 80310e2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 80310e6:	2300      	movs	r3, #0
 80310e8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80310ec:	e780      	b.n	8030ff0 <_svfprintf_r+0x480>
 80310ee:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80310f0:	e7a7      	b.n	8031042 <_svfprintf_r+0x4d2>
 80310f2:	bf00      	nop
 80310f4:	7fefffff 	.word	0x7fefffff
 80310f8:	0803b9e3 	.word	0x0803b9e3
 80310fc:	0803b9e7 	.word	0x0803b9e7
 8031100:	0803b9eb 	.word	0x0803b9eb
 8031104:	0803b9ef 	.word	0x0803b9ef
 8031108:	0803b9f3 	.word	0x0803b9f3
 803110c:	0803ba04 	.word	0x0803ba04
 8031110:	40300000 	.word	0x40300000
 8031114:	3fe00000 	.word	0x3fe00000
 8031118:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803111a:	9624      	str	r6, [sp, #144]	@ 0x90
 803111c:	7bd9      	ldrb	r1, [r3, #15]
 803111e:	2030      	movs	r0, #48	@ 0x30
 8031120:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8031122:	1e53      	subs	r3, r2, #1
 8031124:	9324      	str	r3, [sp, #144]	@ 0x90
 8031126:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803112a:	428b      	cmp	r3, r1
 803112c:	f000 8148 	beq.w	80313c0 <_svfprintf_r+0x850>
 8031130:	2b39      	cmp	r3, #57	@ 0x39
 8031132:	bf0b      	itete	eq
 8031134:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8031136:	3301      	addne	r3, #1
 8031138:	7a9b      	ldrbeq	r3, [r3, #10]
 803113a:	b2db      	uxtbne	r3, r3
 803113c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8031140:	eba6 0309 	sub.w	r3, r6, r9
 8031144:	9304      	str	r3, [sp, #16]
 8031146:	9b08      	ldr	r3, [sp, #32]
 8031148:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803114a:	2b47      	cmp	r3, #71	@ 0x47
 803114c:	f040 8187 	bne.w	803145e <_svfprintf_r+0x8ee>
 8031150:	1cf1      	adds	r1, r6, #3
 8031152:	db02      	blt.n	803115a <_svfprintf_r+0x5ea>
 8031154:	4546      	cmp	r6, r8
 8031156:	f340 81a5 	ble.w	80314a4 <_svfprintf_r+0x934>
 803115a:	9b06      	ldr	r3, [sp, #24]
 803115c:	3b02      	subs	r3, #2
 803115e:	9306      	str	r3, [sp, #24]
 8031160:	9906      	ldr	r1, [sp, #24]
 8031162:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8031166:	f021 0120 	bic.w	r1, r1, #32
 803116a:	2941      	cmp	r1, #65	@ 0x41
 803116c:	bf08      	it	eq
 803116e:	320f      	addeq	r2, #15
 8031170:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8031174:	bf06      	itte	eq
 8031176:	b2d2      	uxtbeq	r2, r2
 8031178:	2101      	moveq	r1, #1
 803117a:	2100      	movne	r1, #0
 803117c:	2b00      	cmp	r3, #0
 803117e:	9320      	str	r3, [sp, #128]	@ 0x80
 8031180:	bfb8      	it	lt
 8031182:	f1c6 0301 	rsblt	r3, r6, #1
 8031186:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 803118a:	bfb4      	ite	lt
 803118c:	222d      	movlt	r2, #45	@ 0x2d
 803118e:	222b      	movge	r2, #43	@ 0x2b
 8031190:	2b09      	cmp	r3, #9
 8031192:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8031196:	f340 8178 	ble.w	803148a <_svfprintf_r+0x91a>
 803119a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803119e:	270a      	movs	r7, #10
 80311a0:	4602      	mov	r2, r0
 80311a2:	fbb3 f6f7 	udiv	r6, r3, r7
 80311a6:	fb07 3116 	mls	r1, r7, r6, r3
 80311aa:	3130      	adds	r1, #48	@ 0x30
 80311ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80311b0:	4619      	mov	r1, r3
 80311b2:	2963      	cmp	r1, #99	@ 0x63
 80311b4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80311b8:	4633      	mov	r3, r6
 80311ba:	dcf1      	bgt.n	80311a0 <_svfprintf_r+0x630>
 80311bc:	3330      	adds	r3, #48	@ 0x30
 80311be:	1e91      	subs	r1, r2, #2
 80311c0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80311c4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80311c8:	460b      	mov	r3, r1
 80311ca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80311ce:	4283      	cmp	r3, r0
 80311d0:	f0c0 8156 	bcc.w	8031480 <_svfprintf_r+0x910>
 80311d4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80311d8:	1a9b      	subs	r3, r3, r2
 80311da:	4281      	cmp	r1, r0
 80311dc:	bf88      	it	hi
 80311de:	2300      	movhi	r3, #0
 80311e0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80311e4:	441a      	add	r2, r3
 80311e6:	ab22      	add	r3, sp, #136	@ 0x88
 80311e8:	1ad3      	subs	r3, r2, r3
 80311ea:	9a04      	ldr	r2, [sp, #16]
 80311ec:	9318      	str	r3, [sp, #96]	@ 0x60
 80311ee:	2a01      	cmp	r2, #1
 80311f0:	eb03 0802 	add.w	r8, r3, r2
 80311f4:	dc01      	bgt.n	80311fa <_svfprintf_r+0x68a>
 80311f6:	07ea      	lsls	r2, r5, #31
 80311f8:	d501      	bpl.n	80311fe <_svfprintf_r+0x68e>
 80311fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80311fc:	4498      	add	r8, r3
 80311fe:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031202:	2700      	movs	r7, #0
 8031204:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8031208:	9311      	str	r3, [sp, #68]	@ 0x44
 803120a:	9708      	str	r7, [sp, #32]
 803120c:	463e      	mov	r6, r7
 803120e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8031210:	2b00      	cmp	r3, #0
 8031212:	f040 818f 	bne.w	8031534 <_svfprintf_r+0x9c4>
 8031216:	2300      	movs	r3, #0
 8031218:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803121a:	9310      	str	r3, [sp, #64]	@ 0x40
 803121c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803121e:	4543      	cmp	r3, r8
 8031220:	bfb8      	it	lt
 8031222:	4643      	movlt	r3, r8
 8031224:	9311      	str	r3, [sp, #68]	@ 0x44
 8031226:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803122a:	b113      	cbz	r3, 8031232 <_svfprintf_r+0x6c2>
 803122c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803122e:	3301      	adds	r3, #1
 8031230:	9311      	str	r3, [sp, #68]	@ 0x44
 8031232:	f015 0302 	ands.w	r3, r5, #2
 8031236:	931c      	str	r3, [sp, #112]	@ 0x70
 8031238:	bf1e      	ittt	ne
 803123a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 803123c:	3302      	addne	r3, #2
 803123e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8031240:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8031244:	931d      	str	r3, [sp, #116]	@ 0x74
 8031246:	d122      	bne.n	803128e <_svfprintf_r+0x71e>
 8031248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803124a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803124c:	1a9b      	subs	r3, r3, r2
 803124e:	2b00      	cmp	r3, #0
 8031250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031252:	dd1c      	ble.n	803128e <_svfprintf_r+0x71e>
 8031254:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8031256:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 803125a:	2810      	cmp	r0, #16
 803125c:	489e      	ldr	r0, [pc, #632]	@ (80314d8 <_svfprintf_r+0x968>)
 803125e:	6020      	str	r0, [r4, #0]
 8031260:	f102 0201 	add.w	r2, r2, #1
 8031264:	f104 0108 	add.w	r1, r4, #8
 8031268:	f300 8298 	bgt.w	803179c <_svfprintf_r+0xc2c>
 803126c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803126e:	6060      	str	r0, [r4, #4]
 8031270:	4403      	add	r3, r0
 8031272:	2a07      	cmp	r2, #7
 8031274:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031278:	f340 82a5 	ble.w	80317c6 <_svfprintf_r+0xc56>
 803127c:	9803      	ldr	r0, [sp, #12]
 803127e:	aa26      	add	r2, sp, #152	@ 0x98
 8031280:	4659      	mov	r1, fp
 8031282:	f7fd fffd 	bl	802f280 <__ssprint_r>
 8031286:	2800      	cmp	r0, #0
 8031288:	f040 85ed 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 803128c:	ac29      	add	r4, sp, #164	@ 0xa4
 803128e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8031292:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031294:	b16a      	cbz	r2, 80312b2 <_svfprintf_r+0x742>
 8031296:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 803129a:	6022      	str	r2, [r4, #0]
 803129c:	2201      	movs	r2, #1
 803129e:	4413      	add	r3, r2
 80312a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80312a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80312a4:	6062      	str	r2, [r4, #4]
 80312a6:	4413      	add	r3, r2
 80312a8:	2b07      	cmp	r3, #7
 80312aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80312ac:	f300 828d 	bgt.w	80317ca <_svfprintf_r+0xc5a>
 80312b0:	3408      	adds	r4, #8
 80312b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80312b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80312b6:	b162      	cbz	r2, 80312d2 <_svfprintf_r+0x762>
 80312b8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80312ba:	6022      	str	r2, [r4, #0]
 80312bc:	2202      	movs	r2, #2
 80312be:	4413      	add	r3, r2
 80312c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80312c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80312c4:	6062      	str	r2, [r4, #4]
 80312c6:	3301      	adds	r3, #1
 80312c8:	2b07      	cmp	r3, #7
 80312ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80312cc:	f300 8287 	bgt.w	80317de <_svfprintf_r+0xc6e>
 80312d0:	3408      	adds	r4, #8
 80312d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80312d4:	2b80      	cmp	r3, #128	@ 0x80
 80312d6:	d122      	bne.n	803131e <_svfprintf_r+0x7ae>
 80312d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80312da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80312dc:	1a9b      	subs	r3, r3, r2
 80312de:	2b00      	cmp	r3, #0
 80312e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80312e2:	dd1c      	ble.n	803131e <_svfprintf_r+0x7ae>
 80312e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80312e6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80312ea:	2810      	cmp	r0, #16
 80312ec:	487b      	ldr	r0, [pc, #492]	@ (80314dc <_svfprintf_r+0x96c>)
 80312ee:	6020      	str	r0, [r4, #0]
 80312f0:	f102 0201 	add.w	r2, r2, #1
 80312f4:	f104 0108 	add.w	r1, r4, #8
 80312f8:	f300 827b 	bgt.w	80317f2 <_svfprintf_r+0xc82>
 80312fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80312fe:	6060      	str	r0, [r4, #4]
 8031300:	4403      	add	r3, r0
 8031302:	2a07      	cmp	r2, #7
 8031304:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031308:	f340 8288 	ble.w	803181c <_svfprintf_r+0xcac>
 803130c:	9803      	ldr	r0, [sp, #12]
 803130e:	aa26      	add	r2, sp, #152	@ 0x98
 8031310:	4659      	mov	r1, fp
 8031312:	f7fd ffb5 	bl	802f280 <__ssprint_r>
 8031316:	2800      	cmp	r0, #0
 8031318:	f040 85a5 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 803131c:	ac29      	add	r4, sp, #164	@ 0xa4
 803131e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031320:	eba3 0308 	sub.w	r3, r3, r8
 8031324:	2b00      	cmp	r3, #0
 8031326:	9310      	str	r3, [sp, #64]	@ 0x40
 8031328:	dd1c      	ble.n	8031364 <_svfprintf_r+0x7f4>
 803132a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803132c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031330:	2810      	cmp	r0, #16
 8031332:	486a      	ldr	r0, [pc, #424]	@ (80314dc <_svfprintf_r+0x96c>)
 8031334:	6020      	str	r0, [r4, #0]
 8031336:	f102 0201 	add.w	r2, r2, #1
 803133a:	f104 0108 	add.w	r1, r4, #8
 803133e:	f300 826f 	bgt.w	8031820 <_svfprintf_r+0xcb0>
 8031342:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8031344:	6060      	str	r0, [r4, #4]
 8031346:	4403      	add	r3, r0
 8031348:	2a07      	cmp	r2, #7
 803134a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803134e:	f340 827c 	ble.w	803184a <_svfprintf_r+0xcda>
 8031352:	9803      	ldr	r0, [sp, #12]
 8031354:	aa26      	add	r2, sp, #152	@ 0x98
 8031356:	4659      	mov	r1, fp
 8031358:	f7fd ff92 	bl	802f280 <__ssprint_r>
 803135c:	2800      	cmp	r0, #0
 803135e:	f040 8582 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031362:	ac29      	add	r4, sp, #164	@ 0xa4
 8031364:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031366:	9310      	str	r3, [sp, #64]	@ 0x40
 8031368:	05ea      	lsls	r2, r5, #23
 803136a:	f100 8275 	bmi.w	8031858 <_svfprintf_r+0xce8>
 803136e:	4443      	add	r3, r8
 8031370:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031372:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031374:	3301      	adds	r3, #1
 8031376:	2b07      	cmp	r3, #7
 8031378:	e9c4 9800 	strd	r9, r8, [r4]
 803137c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803137e:	f300 82b1 	bgt.w	80318e4 <_svfprintf_r+0xd74>
 8031382:	3408      	adds	r4, #8
 8031384:	076a      	lsls	r2, r5, #29
 8031386:	f100 8550 	bmi.w	8031e2a <_svfprintf_r+0x12ba>
 803138a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803138e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8031390:	428a      	cmp	r2, r1
 8031392:	bfac      	ite	ge
 8031394:	189b      	addge	r3, r3, r2
 8031396:	185b      	addlt	r3, r3, r1
 8031398:	930f      	str	r3, [sp, #60]	@ 0x3c
 803139a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803139c:	b13b      	cbz	r3, 80313ae <_svfprintf_r+0x83e>
 803139e:	9803      	ldr	r0, [sp, #12]
 80313a0:	aa26      	add	r2, sp, #152	@ 0x98
 80313a2:	4659      	mov	r1, fp
 80313a4:	f7fd ff6c 	bl	802f280 <__ssprint_r>
 80313a8:	2800      	cmp	r0, #0
 80313aa:	f040 855c 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 80313ae:	2300      	movs	r3, #0
 80313b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80313b2:	f1ba 0f00 	cmp.w	sl, #0
 80313b6:	f040 8572 	bne.w	8031e9e <_svfprintf_r+0x132e>
 80313ba:	9e07      	ldr	r6, [sp, #28]
 80313bc:	ac29      	add	r4, sp, #164	@ 0xa4
 80313be:	e0c6      	b.n	803154e <_svfprintf_r+0x9de>
 80313c0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80313c4:	e6ac      	b.n	8031120 <_svfprintf_r+0x5b0>
 80313c6:	f803 0b01 	strb.w	r0, [r3], #1
 80313ca:	e676      	b.n	80310ba <_svfprintf_r+0x54a>
 80313cc:	9b08      	ldr	r3, [sp, #32]
 80313ce:	2b46      	cmp	r3, #70	@ 0x46
 80313d0:	d005      	beq.n	80313de <_svfprintf_r+0x86e>
 80313d2:	2b45      	cmp	r3, #69	@ 0x45
 80313d4:	d11a      	bne.n	803140c <_svfprintf_r+0x89c>
 80313d6:	f108 0601 	add.w	r6, r8, #1
 80313da:	2102      	movs	r1, #2
 80313dc:	e001      	b.n	80313e2 <_svfprintf_r+0x872>
 80313de:	4646      	mov	r6, r8
 80313e0:	2103      	movs	r1, #3
 80313e2:	ab24      	add	r3, sp, #144	@ 0x90
 80313e4:	9301      	str	r3, [sp, #4]
 80313e6:	ab21      	add	r3, sp, #132	@ 0x84
 80313e8:	9300      	str	r3, [sp, #0]
 80313ea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80313ee:	ab20      	add	r3, sp, #128	@ 0x80
 80313f0:	9803      	ldr	r0, [sp, #12]
 80313f2:	4632      	mov	r2, r6
 80313f4:	f7fc fd80 	bl	802def8 <_dtoa_r>
 80313f8:	9b08      	ldr	r3, [sp, #32]
 80313fa:	2b47      	cmp	r3, #71	@ 0x47
 80313fc:	4681      	mov	r9, r0
 80313fe:	d119      	bne.n	8031434 <_svfprintf_r+0x8c4>
 8031400:	07e8      	lsls	r0, r5, #31
 8031402:	d405      	bmi.n	8031410 <_svfprintf_r+0x8a0>
 8031404:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031406:	eba3 0309 	sub.w	r3, r3, r9
 803140a:	e69b      	b.n	8031144 <_svfprintf_r+0x5d4>
 803140c:	4646      	mov	r6, r8
 803140e:	e7e4      	b.n	80313da <_svfprintf_r+0x86a>
 8031410:	eb09 0706 	add.w	r7, r9, r6
 8031414:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031418:	2200      	movs	r2, #0
 803141a:	2300      	movs	r3, #0
 803141c:	f7df fb6c 	bl	8010af8 <__aeabi_dcmpeq>
 8031420:	b100      	cbz	r0, 8031424 <_svfprintf_r+0x8b4>
 8031422:	9724      	str	r7, [sp, #144]	@ 0x90
 8031424:	2230      	movs	r2, #48	@ 0x30
 8031426:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8031428:	429f      	cmp	r7, r3
 803142a:	d9eb      	bls.n	8031404 <_svfprintf_r+0x894>
 803142c:	1c59      	adds	r1, r3, #1
 803142e:	9124      	str	r1, [sp, #144]	@ 0x90
 8031430:	701a      	strb	r2, [r3, #0]
 8031432:	e7f8      	b.n	8031426 <_svfprintf_r+0x8b6>
 8031434:	9b08      	ldr	r3, [sp, #32]
 8031436:	2b46      	cmp	r3, #70	@ 0x46
 8031438:	eb00 0706 	add.w	r7, r0, r6
 803143c:	d1ea      	bne.n	8031414 <_svfprintf_r+0x8a4>
 803143e:	7803      	ldrb	r3, [r0, #0]
 8031440:	2b30      	cmp	r3, #48	@ 0x30
 8031442:	d109      	bne.n	8031458 <_svfprintf_r+0x8e8>
 8031444:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8031448:	2200      	movs	r2, #0
 803144a:	2300      	movs	r3, #0
 803144c:	f7df fb54 	bl	8010af8 <__aeabi_dcmpeq>
 8031450:	b910      	cbnz	r0, 8031458 <_svfprintf_r+0x8e8>
 8031452:	f1c6 0601 	rsb	r6, r6, #1
 8031456:	9620      	str	r6, [sp, #128]	@ 0x80
 8031458:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803145a:	441f      	add	r7, r3
 803145c:	e7da      	b.n	8031414 <_svfprintf_r+0x8a4>
 803145e:	9b08      	ldr	r3, [sp, #32]
 8031460:	2b46      	cmp	r3, #70	@ 0x46
 8031462:	f47f ae7d 	bne.w	8031160 <_svfprintf_r+0x5f0>
 8031466:	f005 0301 	and.w	r3, r5, #1
 803146a:	2e00      	cmp	r6, #0
 803146c:	ea43 0308 	orr.w	r3, r3, r8
 8031470:	dd25      	ble.n	80314be <_svfprintf_r+0x94e>
 8031472:	b37b      	cbz	r3, 80314d4 <_svfprintf_r+0x964>
 8031474:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031476:	18f3      	adds	r3, r6, r3
 8031478:	4498      	add	r8, r3
 803147a:	2366      	movs	r3, #102	@ 0x66
 803147c:	9306      	str	r3, [sp, #24]
 803147e:	e033      	b.n	80314e8 <_svfprintf_r+0x978>
 8031480:	f813 7b01 	ldrb.w	r7, [r3], #1
 8031484:	f806 7f01 	strb.w	r7, [r6, #1]!
 8031488:	e6a1      	b.n	80311ce <_svfprintf_r+0x65e>
 803148a:	b941      	cbnz	r1, 803149e <_svfprintf_r+0x92e>
 803148c:	2230      	movs	r2, #48	@ 0x30
 803148e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8031492:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8031496:	3330      	adds	r3, #48	@ 0x30
 8031498:	f802 3b01 	strb.w	r3, [r2], #1
 803149c:	e6a3      	b.n	80311e6 <_svfprintf_r+0x676>
 803149e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80314a2:	e7f8      	b.n	8031496 <_svfprintf_r+0x926>
 80314a4:	9b04      	ldr	r3, [sp, #16]
 80314a6:	429e      	cmp	r6, r3
 80314a8:	da0d      	bge.n	80314c6 <_svfprintf_r+0x956>
 80314aa:	9b04      	ldr	r3, [sp, #16]
 80314ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80314ae:	2e00      	cmp	r6, #0
 80314b0:	eb03 0802 	add.w	r8, r3, r2
 80314b4:	dc0c      	bgt.n	80314d0 <_svfprintf_r+0x960>
 80314b6:	f1c6 0301 	rsb	r3, r6, #1
 80314ba:	4498      	add	r8, r3
 80314bc:	e008      	b.n	80314d0 <_svfprintf_r+0x960>
 80314be:	b17b      	cbz	r3, 80314e0 <_svfprintf_r+0x970>
 80314c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80314c2:	3301      	adds	r3, #1
 80314c4:	e7d8      	b.n	8031478 <_svfprintf_r+0x908>
 80314c6:	07eb      	lsls	r3, r5, #31
 80314c8:	d521      	bpl.n	803150e <_svfprintf_r+0x99e>
 80314ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80314cc:	eb06 0803 	add.w	r8, r6, r3
 80314d0:	2367      	movs	r3, #103	@ 0x67
 80314d2:	e7d3      	b.n	803147c <_svfprintf_r+0x90c>
 80314d4:	46b0      	mov	r8, r6
 80314d6:	e7d0      	b.n	803147a <_svfprintf_r+0x90a>
 80314d8:	0803bf6a 	.word	0x0803bf6a
 80314dc:	0803bf5a 	.word	0x0803bf5a
 80314e0:	2366      	movs	r3, #102	@ 0x66
 80314e2:	9306      	str	r3, [sp, #24]
 80314e4:	f04f 0801 	mov.w	r8, #1
 80314e8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80314ec:	9308      	str	r3, [sp, #32]
 80314ee:	d01f      	beq.n	8031530 <_svfprintf_r+0x9c0>
 80314f0:	2700      	movs	r7, #0
 80314f2:	2e00      	cmp	r6, #0
 80314f4:	9708      	str	r7, [sp, #32]
 80314f6:	f77f ae8a 	ble.w	803120e <_svfprintf_r+0x69e>
 80314fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80314fc:	781b      	ldrb	r3, [r3, #0]
 80314fe:	2bff      	cmp	r3, #255	@ 0xff
 8031500:	d107      	bne.n	8031512 <_svfprintf_r+0x9a2>
 8031502:	9b08      	ldr	r3, [sp, #32]
 8031504:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031506:	443b      	add	r3, r7
 8031508:	fb02 8803 	mla	r8, r2, r3, r8
 803150c:	e67f      	b.n	803120e <_svfprintf_r+0x69e>
 803150e:	46b0      	mov	r8, r6
 8031510:	e7de      	b.n	80314d0 <_svfprintf_r+0x960>
 8031512:	42b3      	cmp	r3, r6
 8031514:	daf5      	bge.n	8031502 <_svfprintf_r+0x992>
 8031516:	1af6      	subs	r6, r6, r3
 8031518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803151a:	785b      	ldrb	r3, [r3, #1]
 803151c:	b133      	cbz	r3, 803152c <_svfprintf_r+0x9bc>
 803151e:	9b08      	ldr	r3, [sp, #32]
 8031520:	3301      	adds	r3, #1
 8031522:	9308      	str	r3, [sp, #32]
 8031524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031526:	3301      	adds	r3, #1
 8031528:	9309      	str	r3, [sp, #36]	@ 0x24
 803152a:	e7e6      	b.n	80314fa <_svfprintf_r+0x98a>
 803152c:	3701      	adds	r7, #1
 803152e:	e7e4      	b.n	80314fa <_svfprintf_r+0x98a>
 8031530:	9f08      	ldr	r7, [sp, #32]
 8031532:	e66c      	b.n	803120e <_svfprintf_r+0x69e>
 8031534:	232d      	movs	r3, #45	@ 0x2d
 8031536:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803153a:	e66c      	b.n	8031216 <_svfprintf_r+0x6a6>
 803153c:	06af      	lsls	r7, r5, #26
 803153e:	d50a      	bpl.n	8031556 <_svfprintf_r+0x9e6>
 8031540:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031542:	6833      	ldr	r3, [r6, #0]
 8031544:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8031546:	17d2      	asrs	r2, r2, #31
 8031548:	e9c3 1200 	strd	r1, r2, [r3]
 803154c:	3604      	adds	r6, #4
 803154e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8031552:	f7ff bb46 	b.w	8030be2 <_svfprintf_r+0x72>
 8031556:	06e8      	lsls	r0, r5, #27
 8031558:	d503      	bpl.n	8031562 <_svfprintf_r+0x9f2>
 803155a:	6833      	ldr	r3, [r6, #0]
 803155c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803155e:	601a      	str	r2, [r3, #0]
 8031560:	e7f4      	b.n	803154c <_svfprintf_r+0x9dc>
 8031562:	0669      	lsls	r1, r5, #25
 8031564:	d503      	bpl.n	803156e <_svfprintf_r+0x9fe>
 8031566:	6833      	ldr	r3, [r6, #0]
 8031568:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803156a:	801a      	strh	r2, [r3, #0]
 803156c:	e7ee      	b.n	803154c <_svfprintf_r+0x9dc>
 803156e:	05aa      	lsls	r2, r5, #22
 8031570:	d5f3      	bpl.n	803155a <_svfprintf_r+0x9ea>
 8031572:	6833      	ldr	r3, [r6, #0]
 8031574:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8031576:	701a      	strb	r2, [r3, #0]
 8031578:	e7e8      	b.n	803154c <_svfprintf_r+0x9dc>
 803157a:	f045 0510 	orr.w	r5, r5, #16
 803157e:	f015 0320 	ands.w	r3, r5, #32
 8031582:	d020      	beq.n	80315c6 <_svfprintf_r+0xa56>
 8031584:	3607      	adds	r6, #7
 8031586:	f026 0307 	bic.w	r3, r6, #7
 803158a:	461a      	mov	r2, r3
 803158c:	685f      	ldr	r7, [r3, #4]
 803158e:	f852 6b08 	ldr.w	r6, [r2], #8
 8031592:	9207      	str	r2, [sp, #28]
 8031594:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8031598:	2300      	movs	r3, #0
 803159a:	2200      	movs	r2, #0
 803159c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80315a0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80315a4:	f000 848c 	beq.w	8031ec0 <_svfprintf_r+0x1350>
 80315a8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80315ac:	9208      	str	r2, [sp, #32]
 80315ae:	ea56 0207 	orrs.w	r2, r6, r7
 80315b2:	f040 848a 	bne.w	8031eca <_svfprintf_r+0x135a>
 80315b6:	f1b8 0f00 	cmp.w	r8, #0
 80315ba:	f000 80db 	beq.w	8031774 <_svfprintf_r+0xc04>
 80315be:	2b01      	cmp	r3, #1
 80315c0:	f040 8486 	bne.w	8031ed0 <_svfprintf_r+0x1360>
 80315c4:	e083      	b.n	80316ce <_svfprintf_r+0xb5e>
 80315c6:	4632      	mov	r2, r6
 80315c8:	f015 0710 	ands.w	r7, r5, #16
 80315cc:	f852 6b04 	ldr.w	r6, [r2], #4
 80315d0:	9207      	str	r2, [sp, #28]
 80315d2:	d001      	beq.n	80315d8 <_svfprintf_r+0xa68>
 80315d4:	461f      	mov	r7, r3
 80315d6:	e7dd      	b.n	8031594 <_svfprintf_r+0xa24>
 80315d8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80315dc:	d001      	beq.n	80315e2 <_svfprintf_r+0xa72>
 80315de:	b2b6      	uxth	r6, r6
 80315e0:	e7d8      	b.n	8031594 <_svfprintf_r+0xa24>
 80315e2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80315e6:	d0d5      	beq.n	8031594 <_svfprintf_r+0xa24>
 80315e8:	b2f6      	uxtb	r6, r6
 80315ea:	e7f3      	b.n	80315d4 <_svfprintf_r+0xa64>
 80315ec:	4633      	mov	r3, r6
 80315ee:	2278      	movs	r2, #120	@ 0x78
 80315f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80315f4:	9307      	str	r3, [sp, #28]
 80315f6:	f647 0330 	movw	r3, #30768	@ 0x7830
 80315fa:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80315fe:	4b94      	ldr	r3, [pc, #592]	@ (8031850 <_svfprintf_r+0xce0>)
 8031600:	9319      	str	r3, [sp, #100]	@ 0x64
 8031602:	2700      	movs	r7, #0
 8031604:	f045 0502 	orr.w	r5, r5, #2
 8031608:	2302      	movs	r3, #2
 803160a:	9206      	str	r2, [sp, #24]
 803160c:	e7c5      	b.n	803159a <_svfprintf_r+0xa2a>
 803160e:	4633      	mov	r3, r6
 8031610:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8031614:	f853 9b04 	ldr.w	r9, [r3], #4
 8031618:	9307      	str	r3, [sp, #28]
 803161a:	f04f 0600 	mov.w	r6, #0
 803161e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8031622:	d00f      	beq.n	8031644 <_svfprintf_r+0xad4>
 8031624:	4642      	mov	r2, r8
 8031626:	4631      	mov	r1, r6
 8031628:	4648      	mov	r0, r9
 803162a:	f7de fde9 	bl	8010200 <memchr>
 803162e:	4682      	mov	sl, r0
 8031630:	2800      	cmp	r0, #0
 8031632:	f43f ac81 	beq.w	8030f38 <_svfprintf_r+0x3c8>
 8031636:	eba0 0809 	sub.w	r8, r0, r9
 803163a:	46b2      	mov	sl, r6
 803163c:	9610      	str	r6, [sp, #64]	@ 0x40
 803163e:	4637      	mov	r7, r6
 8031640:	9608      	str	r6, [sp, #32]
 8031642:	e5eb      	b.n	803121c <_svfprintf_r+0x6ac>
 8031644:	4648      	mov	r0, r9
 8031646:	f7de fe2b 	bl	80102a0 <strlen>
 803164a:	46b2      	mov	sl, r6
 803164c:	4680      	mov	r8, r0
 803164e:	e473      	b.n	8030f38 <_svfprintf_r+0x3c8>
 8031650:	f045 0510 	orr.w	r5, r5, #16
 8031654:	f015 0320 	ands.w	r3, r5, #32
 8031658:	d009      	beq.n	803166e <_svfprintf_r+0xafe>
 803165a:	3607      	adds	r6, #7
 803165c:	f026 0307 	bic.w	r3, r6, #7
 8031660:	461a      	mov	r2, r3
 8031662:	685f      	ldr	r7, [r3, #4]
 8031664:	f852 6b08 	ldr.w	r6, [r2], #8
 8031668:	9207      	str	r2, [sp, #28]
 803166a:	2301      	movs	r3, #1
 803166c:	e795      	b.n	803159a <_svfprintf_r+0xa2a>
 803166e:	4632      	mov	r2, r6
 8031670:	f015 0710 	ands.w	r7, r5, #16
 8031674:	f852 6b04 	ldr.w	r6, [r2], #4
 8031678:	9207      	str	r2, [sp, #28]
 803167a:	d001      	beq.n	8031680 <_svfprintf_r+0xb10>
 803167c:	461f      	mov	r7, r3
 803167e:	e7f4      	b.n	803166a <_svfprintf_r+0xafa>
 8031680:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8031684:	d001      	beq.n	803168a <_svfprintf_r+0xb1a>
 8031686:	b2b6      	uxth	r6, r6
 8031688:	e7ef      	b.n	803166a <_svfprintf_r+0xafa>
 803168a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 803168e:	d0ec      	beq.n	803166a <_svfprintf_r+0xafa>
 8031690:	b2f6      	uxtb	r6, r6
 8031692:	e7f3      	b.n	803167c <_svfprintf_r+0xb0c>
 8031694:	4b6f      	ldr	r3, [pc, #444]	@ (8031854 <_svfprintf_r+0xce4>)
 8031696:	f7ff bb39 	b.w	8030d0c <_svfprintf_r+0x19c>
 803169a:	4632      	mov	r2, r6
 803169c:	f015 0710 	ands.w	r7, r5, #16
 80316a0:	f852 6b04 	ldr.w	r6, [r2], #4
 80316a4:	9207      	str	r2, [sp, #28]
 80316a6:	d002      	beq.n	80316ae <_svfprintf_r+0xb3e>
 80316a8:	461f      	mov	r7, r3
 80316aa:	f7ff bb3c 	b.w	8030d26 <_svfprintf_r+0x1b6>
 80316ae:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80316b2:	d002      	beq.n	80316ba <_svfprintf_r+0xb4a>
 80316b4:	b2b6      	uxth	r6, r6
 80316b6:	f7ff bb36 	b.w	8030d26 <_svfprintf_r+0x1b6>
 80316ba:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80316be:	f43f ab32 	beq.w	8030d26 <_svfprintf_r+0x1b6>
 80316c2:	b2f6      	uxtb	r6, r6
 80316c4:	e7f0      	b.n	80316a8 <_svfprintf_r+0xb38>
 80316c6:	2e0a      	cmp	r6, #10
 80316c8:	f177 0300 	sbcs.w	r3, r7, #0
 80316cc:	d207      	bcs.n	80316de <_svfprintf_r+0xb6e>
 80316ce:	3630      	adds	r6, #48	@ 0x30
 80316d0:	b2f6      	uxtb	r6, r6
 80316d2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 80316d6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 80316da:	f000 bc15 	b.w	8031f08 <_svfprintf_r+0x1398>
 80316de:	2300      	movs	r3, #0
 80316e0:	9304      	str	r3, [sp, #16]
 80316e2:	9b08      	ldr	r3, [sp, #32]
 80316e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80316e8:	ad52      	add	r5, sp, #328	@ 0x148
 80316ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80316ec:	220a      	movs	r2, #10
 80316ee:	2300      	movs	r3, #0
 80316f0:	4630      	mov	r0, r6
 80316f2:	4639      	mov	r1, r7
 80316f4:	f7df fb30 	bl	8010d58 <__aeabi_uldivmod>
 80316f8:	9b04      	ldr	r3, [sp, #16]
 80316fa:	9011      	str	r0, [sp, #68]	@ 0x44
 80316fc:	3301      	adds	r3, #1
 80316fe:	9304      	str	r3, [sp, #16]
 8031700:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031702:	3230      	adds	r2, #48	@ 0x30
 8031704:	468a      	mov	sl, r1
 8031706:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803170a:	f805 2c01 	strb.w	r2, [r5, #-1]
 803170e:	b1d3      	cbz	r3, 8031746 <_svfprintf_r+0xbd6>
 8031710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031712:	9a04      	ldr	r2, [sp, #16]
 8031714:	781b      	ldrb	r3, [r3, #0]
 8031716:	429a      	cmp	r2, r3
 8031718:	d115      	bne.n	8031746 <_svfprintf_r+0xbd6>
 803171a:	2aff      	cmp	r2, #255	@ 0xff
 803171c:	d013      	beq.n	8031746 <_svfprintf_r+0xbd6>
 803171e:	2e0a      	cmp	r6, #10
 8031720:	f177 0300 	sbcs.w	r3, r7, #0
 8031724:	d30f      	bcc.n	8031746 <_svfprintf_r+0xbd6>
 8031726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031728:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803172a:	eba9 0903 	sub.w	r9, r9, r3
 803172e:	461a      	mov	r2, r3
 8031730:	4648      	mov	r0, r9
 8031732:	f7fb f8ec 	bl	802c90e <strncpy>
 8031736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031738:	785b      	ldrb	r3, [r3, #1]
 803173a:	b11b      	cbz	r3, 8031744 <_svfprintf_r+0xbd4>
 803173c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803173e:	3301      	adds	r3, #1
 8031740:	9309      	str	r3, [sp, #36]	@ 0x24
 8031742:	2300      	movs	r3, #0
 8031744:	9304      	str	r3, [sp, #16]
 8031746:	2e0a      	cmp	r6, #10
 8031748:	f177 0700 	sbcs.w	r7, r7, #0
 803174c:	f0c0 83dc 	bcc.w	8031f08 <_svfprintf_r+0x1398>
 8031750:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8031752:	4657      	mov	r7, sl
 8031754:	464d      	mov	r5, r9
 8031756:	e7c9      	b.n	80316ec <_svfprintf_r+0xb7c>
 8031758:	f006 030f 	and.w	r3, r6, #15
 803175c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803175e:	0936      	lsrs	r6, r6, #4
 8031760:	5cd3      	ldrb	r3, [r2, r3]
 8031762:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031766:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 803176a:	093f      	lsrs	r7, r7, #4
 803176c:	ea56 0307 	orrs.w	r3, r6, r7
 8031770:	d1f2      	bne.n	8031758 <_svfprintf_r+0xbe8>
 8031772:	e3c9      	b.n	8031f08 <_svfprintf_r+0x1398>
 8031774:	b91b      	cbnz	r3, 803177e <_svfprintf_r+0xc0e>
 8031776:	07e9      	lsls	r1, r5, #31
 8031778:	d501      	bpl.n	803177e <_svfprintf_r+0xc0e>
 803177a:	2630      	movs	r6, #48	@ 0x30
 803177c:	e7a9      	b.n	80316d2 <_svfprintf_r+0xb62>
 803177e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031782:	e3c1      	b.n	8031f08 <_svfprintf_r+0x1398>
 8031784:	9b06      	ldr	r3, [sp, #24]
 8031786:	2b00      	cmp	r3, #0
 8031788:	f000 838f 	beq.w	8031eaa <_svfprintf_r+0x133a>
 803178c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8031790:	2300      	movs	r3, #0
 8031792:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8031796:	9607      	str	r6, [sp, #28]
 8031798:	f7ff bb63 	b.w	8030e62 <_svfprintf_r+0x2f2>
 803179c:	2010      	movs	r0, #16
 803179e:	4403      	add	r3, r0
 80317a0:	2a07      	cmp	r2, #7
 80317a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80317a6:	6060      	str	r0, [r4, #4]
 80317a8:	dd08      	ble.n	80317bc <_svfprintf_r+0xc4c>
 80317aa:	9803      	ldr	r0, [sp, #12]
 80317ac:	aa26      	add	r2, sp, #152	@ 0x98
 80317ae:	4659      	mov	r1, fp
 80317b0:	f7fd fd66 	bl	802f280 <__ssprint_r>
 80317b4:	2800      	cmp	r0, #0
 80317b6:	f040 8356 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 80317ba:	a929      	add	r1, sp, #164	@ 0xa4
 80317bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80317be:	3b10      	subs	r3, #16
 80317c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80317c2:	460c      	mov	r4, r1
 80317c4:	e546      	b.n	8031254 <_svfprintf_r+0x6e4>
 80317c6:	460c      	mov	r4, r1
 80317c8:	e561      	b.n	803128e <_svfprintf_r+0x71e>
 80317ca:	9803      	ldr	r0, [sp, #12]
 80317cc:	aa26      	add	r2, sp, #152	@ 0x98
 80317ce:	4659      	mov	r1, fp
 80317d0:	f7fd fd56 	bl	802f280 <__ssprint_r>
 80317d4:	2800      	cmp	r0, #0
 80317d6:	f040 8346 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 80317da:	ac29      	add	r4, sp, #164	@ 0xa4
 80317dc:	e569      	b.n	80312b2 <_svfprintf_r+0x742>
 80317de:	9803      	ldr	r0, [sp, #12]
 80317e0:	aa26      	add	r2, sp, #152	@ 0x98
 80317e2:	4659      	mov	r1, fp
 80317e4:	f7fd fd4c 	bl	802f280 <__ssprint_r>
 80317e8:	2800      	cmp	r0, #0
 80317ea:	f040 833c 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 80317ee:	ac29      	add	r4, sp, #164	@ 0xa4
 80317f0:	e56f      	b.n	80312d2 <_svfprintf_r+0x762>
 80317f2:	2010      	movs	r0, #16
 80317f4:	4403      	add	r3, r0
 80317f6:	2a07      	cmp	r2, #7
 80317f8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80317fc:	6060      	str	r0, [r4, #4]
 80317fe:	dd08      	ble.n	8031812 <_svfprintf_r+0xca2>
 8031800:	9803      	ldr	r0, [sp, #12]
 8031802:	aa26      	add	r2, sp, #152	@ 0x98
 8031804:	4659      	mov	r1, fp
 8031806:	f7fd fd3b 	bl	802f280 <__ssprint_r>
 803180a:	2800      	cmp	r0, #0
 803180c:	f040 832b 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031810:	a929      	add	r1, sp, #164	@ 0xa4
 8031812:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8031814:	3b10      	subs	r3, #16
 8031816:	9313      	str	r3, [sp, #76]	@ 0x4c
 8031818:	460c      	mov	r4, r1
 803181a:	e563      	b.n	80312e4 <_svfprintf_r+0x774>
 803181c:	460c      	mov	r4, r1
 803181e:	e57e      	b.n	803131e <_svfprintf_r+0x7ae>
 8031820:	2010      	movs	r0, #16
 8031822:	4403      	add	r3, r0
 8031824:	2a07      	cmp	r2, #7
 8031826:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 803182a:	6060      	str	r0, [r4, #4]
 803182c:	dd08      	ble.n	8031840 <_svfprintf_r+0xcd0>
 803182e:	9803      	ldr	r0, [sp, #12]
 8031830:	aa26      	add	r2, sp, #152	@ 0x98
 8031832:	4659      	mov	r1, fp
 8031834:	f7fd fd24 	bl	802f280 <__ssprint_r>
 8031838:	2800      	cmp	r0, #0
 803183a:	f040 8314 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 803183e:	a929      	add	r1, sp, #164	@ 0xa4
 8031840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031842:	3b10      	subs	r3, #16
 8031844:	9310      	str	r3, [sp, #64]	@ 0x40
 8031846:	460c      	mov	r4, r1
 8031848:	e56f      	b.n	803132a <_svfprintf_r+0x7ba>
 803184a:	460c      	mov	r4, r1
 803184c:	e58a      	b.n	8031364 <_svfprintf_r+0x7f4>
 803184e:	bf00      	nop
 8031850:	0803b9f3 	.word	0x0803b9f3
 8031854:	0803ba04 	.word	0x0803ba04
 8031858:	9b06      	ldr	r3, [sp, #24]
 803185a:	2b65      	cmp	r3, #101	@ 0x65
 803185c:	f340 8246 	ble.w	8031cec <_svfprintf_r+0x117c>
 8031860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8031864:	2200      	movs	r2, #0
 8031866:	2300      	movs	r3, #0
 8031868:	f7df f946 	bl	8010af8 <__aeabi_dcmpeq>
 803186c:	2800      	cmp	r0, #0
 803186e:	d06a      	beq.n	8031946 <_svfprintf_r+0xdd6>
 8031870:	4b73      	ldr	r3, [pc, #460]	@ (8031a40 <_svfprintf_r+0xed0>)
 8031872:	6023      	str	r3, [r4, #0]
 8031874:	2301      	movs	r3, #1
 8031876:	6063      	str	r3, [r4, #4]
 8031878:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803187a:	3301      	adds	r3, #1
 803187c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803187e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031880:	3301      	adds	r3, #1
 8031882:	2b07      	cmp	r3, #7
 8031884:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031886:	dc37      	bgt.n	80318f8 <_svfprintf_r+0xd88>
 8031888:	3408      	adds	r4, #8
 803188a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803188c:	9a04      	ldr	r2, [sp, #16]
 803188e:	4293      	cmp	r3, r2
 8031890:	db02      	blt.n	8031898 <_svfprintf_r+0xd28>
 8031892:	07ef      	lsls	r7, r5, #31
 8031894:	f57f ad76 	bpl.w	8031384 <_svfprintf_r+0x814>
 8031898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803189a:	6023      	str	r3, [r4, #0]
 803189c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803189e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80318a0:	6063      	str	r3, [r4, #4]
 80318a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80318a4:	4413      	add	r3, r2
 80318a6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80318a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80318aa:	3301      	adds	r3, #1
 80318ac:	2b07      	cmp	r3, #7
 80318ae:	9327      	str	r3, [sp, #156]	@ 0x9c
 80318b0:	dc2c      	bgt.n	803190c <_svfprintf_r+0xd9c>
 80318b2:	3408      	adds	r4, #8
 80318b4:	9b04      	ldr	r3, [sp, #16]
 80318b6:	1e5e      	subs	r6, r3, #1
 80318b8:	2e00      	cmp	r6, #0
 80318ba:	f77f ad63 	ble.w	8031384 <_svfprintf_r+0x814>
 80318be:	4f61      	ldr	r7, [pc, #388]	@ (8031a44 <_svfprintf_r+0xed4>)
 80318c0:	f04f 0810 	mov.w	r8, #16
 80318c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80318c8:	2e10      	cmp	r6, #16
 80318ca:	f103 0301 	add.w	r3, r3, #1
 80318ce:	f104 0108 	add.w	r1, r4, #8
 80318d2:	6027      	str	r7, [r4, #0]
 80318d4:	dc24      	bgt.n	8031920 <_svfprintf_r+0xdb0>
 80318d6:	6066      	str	r6, [r4, #4]
 80318d8:	2b07      	cmp	r3, #7
 80318da:	4416      	add	r6, r2
 80318dc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80318e0:	f340 82a0 	ble.w	8031e24 <_svfprintf_r+0x12b4>
 80318e4:	9803      	ldr	r0, [sp, #12]
 80318e6:	aa26      	add	r2, sp, #152	@ 0x98
 80318e8:	4659      	mov	r1, fp
 80318ea:	f7fd fcc9 	bl	802f280 <__ssprint_r>
 80318ee:	2800      	cmp	r0, #0
 80318f0:	f040 82b9 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 80318f4:	ac29      	add	r4, sp, #164	@ 0xa4
 80318f6:	e545      	b.n	8031384 <_svfprintf_r+0x814>
 80318f8:	9803      	ldr	r0, [sp, #12]
 80318fa:	aa26      	add	r2, sp, #152	@ 0x98
 80318fc:	4659      	mov	r1, fp
 80318fe:	f7fd fcbf 	bl	802f280 <__ssprint_r>
 8031902:	2800      	cmp	r0, #0
 8031904:	f040 82af 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031908:	ac29      	add	r4, sp, #164	@ 0xa4
 803190a:	e7be      	b.n	803188a <_svfprintf_r+0xd1a>
 803190c:	9803      	ldr	r0, [sp, #12]
 803190e:	aa26      	add	r2, sp, #152	@ 0x98
 8031910:	4659      	mov	r1, fp
 8031912:	f7fd fcb5 	bl	802f280 <__ssprint_r>
 8031916:	2800      	cmp	r0, #0
 8031918:	f040 82a5 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 803191c:	ac29      	add	r4, sp, #164	@ 0xa4
 803191e:	e7c9      	b.n	80318b4 <_svfprintf_r+0xd44>
 8031920:	3210      	adds	r2, #16
 8031922:	2b07      	cmp	r3, #7
 8031924:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031928:	f8c4 8004 	str.w	r8, [r4, #4]
 803192c:	dd08      	ble.n	8031940 <_svfprintf_r+0xdd0>
 803192e:	9803      	ldr	r0, [sp, #12]
 8031930:	aa26      	add	r2, sp, #152	@ 0x98
 8031932:	4659      	mov	r1, fp
 8031934:	f7fd fca4 	bl	802f280 <__ssprint_r>
 8031938:	2800      	cmp	r0, #0
 803193a:	f040 8294 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 803193e:	a929      	add	r1, sp, #164	@ 0xa4
 8031940:	3e10      	subs	r6, #16
 8031942:	460c      	mov	r4, r1
 8031944:	e7be      	b.n	80318c4 <_svfprintf_r+0xd54>
 8031946:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031948:	2b00      	cmp	r3, #0
 803194a:	dc7d      	bgt.n	8031a48 <_svfprintf_r+0xed8>
 803194c:	4b3c      	ldr	r3, [pc, #240]	@ (8031a40 <_svfprintf_r+0xed0>)
 803194e:	6023      	str	r3, [r4, #0]
 8031950:	2301      	movs	r3, #1
 8031952:	6063      	str	r3, [r4, #4]
 8031954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031956:	3301      	adds	r3, #1
 8031958:	9328      	str	r3, [sp, #160]	@ 0xa0
 803195a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803195c:	3301      	adds	r3, #1
 803195e:	2b07      	cmp	r3, #7
 8031960:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031962:	dc46      	bgt.n	80319f2 <_svfprintf_r+0xe82>
 8031964:	3408      	adds	r4, #8
 8031966:	9904      	ldr	r1, [sp, #16]
 8031968:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803196a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 803196c:	430b      	orrs	r3, r1
 803196e:	f005 0101 	and.w	r1, r5, #1
 8031972:	430b      	orrs	r3, r1
 8031974:	f43f ad06 	beq.w	8031384 <_svfprintf_r+0x814>
 8031978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803197a:	6023      	str	r3, [r4, #0]
 803197c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803197e:	6063      	str	r3, [r4, #4]
 8031980:	441a      	add	r2, r3
 8031982:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031984:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031986:	3301      	adds	r3, #1
 8031988:	2b07      	cmp	r3, #7
 803198a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803198c:	dc3b      	bgt.n	8031a06 <_svfprintf_r+0xe96>
 803198e:	f104 0308 	add.w	r3, r4, #8
 8031992:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031994:	2e00      	cmp	r6, #0
 8031996:	da1b      	bge.n	80319d0 <_svfprintf_r+0xe60>
 8031998:	4f2a      	ldr	r7, [pc, #168]	@ (8031a44 <_svfprintf_r+0xed4>)
 803199a:	4276      	negs	r6, r6
 803199c:	461a      	mov	r2, r3
 803199e:	2410      	movs	r4, #16
 80319a0:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80319a4:	2e10      	cmp	r6, #16
 80319a6:	f101 0101 	add.w	r1, r1, #1
 80319aa:	f103 0308 	add.w	r3, r3, #8
 80319ae:	6017      	str	r7, [r2, #0]
 80319b0:	dc33      	bgt.n	8031a1a <_svfprintf_r+0xeaa>
 80319b2:	6056      	str	r6, [r2, #4]
 80319b4:	2907      	cmp	r1, #7
 80319b6:	4406      	add	r6, r0
 80319b8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80319bc:	dd08      	ble.n	80319d0 <_svfprintf_r+0xe60>
 80319be:	9803      	ldr	r0, [sp, #12]
 80319c0:	aa26      	add	r2, sp, #152	@ 0x98
 80319c2:	4659      	mov	r1, fp
 80319c4:	f7fd fc5c 	bl	802f280 <__ssprint_r>
 80319c8:	2800      	cmp	r0, #0
 80319ca:	f040 824c 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 80319ce:	ab29      	add	r3, sp, #164	@ 0xa4
 80319d0:	9a04      	ldr	r2, [sp, #16]
 80319d2:	9904      	ldr	r1, [sp, #16]
 80319d4:	605a      	str	r2, [r3, #4]
 80319d6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80319d8:	f8c3 9000 	str.w	r9, [r3]
 80319dc:	440a      	add	r2, r1
 80319de:	9228      	str	r2, [sp, #160]	@ 0xa0
 80319e0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80319e2:	3201      	adds	r2, #1
 80319e4:	2a07      	cmp	r2, #7
 80319e6:	9227      	str	r2, [sp, #156]	@ 0x9c
 80319e8:	f73f af7c 	bgt.w	80318e4 <_svfprintf_r+0xd74>
 80319ec:	f103 0408 	add.w	r4, r3, #8
 80319f0:	e4c8      	b.n	8031384 <_svfprintf_r+0x814>
 80319f2:	9803      	ldr	r0, [sp, #12]
 80319f4:	aa26      	add	r2, sp, #152	@ 0x98
 80319f6:	4659      	mov	r1, fp
 80319f8:	f7fd fc42 	bl	802f280 <__ssprint_r>
 80319fc:	2800      	cmp	r0, #0
 80319fe:	f040 8232 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031a02:	ac29      	add	r4, sp, #164	@ 0xa4
 8031a04:	e7af      	b.n	8031966 <_svfprintf_r+0xdf6>
 8031a06:	9803      	ldr	r0, [sp, #12]
 8031a08:	aa26      	add	r2, sp, #152	@ 0x98
 8031a0a:	4659      	mov	r1, fp
 8031a0c:	f7fd fc38 	bl	802f280 <__ssprint_r>
 8031a10:	2800      	cmp	r0, #0
 8031a12:	f040 8228 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031a16:	ab29      	add	r3, sp, #164	@ 0xa4
 8031a18:	e7bb      	b.n	8031992 <_svfprintf_r+0xe22>
 8031a1a:	3010      	adds	r0, #16
 8031a1c:	2907      	cmp	r1, #7
 8031a1e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031a22:	6054      	str	r4, [r2, #4]
 8031a24:	dd08      	ble.n	8031a38 <_svfprintf_r+0xec8>
 8031a26:	9803      	ldr	r0, [sp, #12]
 8031a28:	aa26      	add	r2, sp, #152	@ 0x98
 8031a2a:	4659      	mov	r1, fp
 8031a2c:	f7fd fc28 	bl	802f280 <__ssprint_r>
 8031a30:	2800      	cmp	r0, #0
 8031a32:	f040 8218 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031a36:	ab29      	add	r3, sp, #164	@ 0xa4
 8031a38:	3e10      	subs	r6, #16
 8031a3a:	461a      	mov	r2, r3
 8031a3c:	e7b0      	b.n	80319a0 <_svfprintf_r+0xe30>
 8031a3e:	bf00      	nop
 8031a40:	0803ba15 	.word	0x0803ba15
 8031a44:	0803bf5a 	.word	0x0803bf5a
 8031a48:	9b04      	ldr	r3, [sp, #16]
 8031a4a:	444b      	add	r3, r9
 8031a4c:	9306      	str	r3, [sp, #24]
 8031a4e:	9b04      	ldr	r3, [sp, #16]
 8031a50:	42b3      	cmp	r3, r6
 8031a52:	bfa8      	it	ge
 8031a54:	4633      	movge	r3, r6
 8031a56:	2b00      	cmp	r3, #0
 8031a58:	4698      	mov	r8, r3
 8031a5a:	dd0b      	ble.n	8031a74 <_svfprintf_r+0xf04>
 8031a5c:	e9c4 9300 	strd	r9, r3, [r4]
 8031a60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031a62:	4443      	add	r3, r8
 8031a64:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031a66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031a68:	3301      	adds	r3, #1
 8031a6a:	2b07      	cmp	r3, #7
 8031a6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031a6e:	f300 8089 	bgt.w	8031b84 <_svfprintf_r+0x1014>
 8031a72:	3408      	adds	r4, #8
 8031a74:	4643      	mov	r3, r8
 8031a76:	2b00      	cmp	r3, #0
 8031a78:	bfac      	ite	ge
 8031a7a:	eba6 0808 	subge.w	r8, r6, r8
 8031a7e:	46b0      	movlt	r8, r6
 8031a80:	f1b8 0f00 	cmp.w	r8, #0
 8031a84:	dd1b      	ble.n	8031abe <_svfprintf_r+0xf4e>
 8031a86:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8031a8a:	4897      	ldr	r0, [pc, #604]	@ (8031ce8 <_svfprintf_r+0x1178>)
 8031a8c:	6020      	str	r0, [r4, #0]
 8031a8e:	f1b8 0f10 	cmp.w	r8, #16
 8031a92:	f102 0201 	add.w	r2, r2, #1
 8031a96:	f104 0108 	add.w	r1, r4, #8
 8031a9a:	dc7d      	bgt.n	8031b98 <_svfprintf_r+0x1028>
 8031a9c:	4443      	add	r3, r8
 8031a9e:	2a07      	cmp	r2, #7
 8031aa0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031aa4:	f8c4 8004 	str.w	r8, [r4, #4]
 8031aa8:	f340 808a 	ble.w	8031bc0 <_svfprintf_r+0x1050>
 8031aac:	9803      	ldr	r0, [sp, #12]
 8031aae:	aa26      	add	r2, sp, #152	@ 0x98
 8031ab0:	4659      	mov	r1, fp
 8031ab2:	f7fd fbe5 	bl	802f280 <__ssprint_r>
 8031ab6:	2800      	cmp	r0, #0
 8031ab8:	f040 81d5 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031abc:	ac29      	add	r4, sp, #164	@ 0xa4
 8031abe:	eb09 0806 	add.w	r8, r9, r6
 8031ac2:	056e      	lsls	r6, r5, #21
 8031ac4:	d508      	bpl.n	8031ad8 <_svfprintf_r+0xf68>
 8031ac6:	9b08      	ldr	r3, [sp, #32]
 8031ac8:	2b00      	cmp	r3, #0
 8031aca:	d17b      	bne.n	8031bc4 <_svfprintf_r+0x1054>
 8031acc:	2f00      	cmp	r7, #0
 8031ace:	d17b      	bne.n	8031bc8 <_svfprintf_r+0x1058>
 8031ad0:	9b06      	ldr	r3, [sp, #24]
 8031ad2:	4598      	cmp	r8, r3
 8031ad4:	bf28      	it	cs
 8031ad6:	4698      	movcs	r8, r3
 8031ad8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8031ada:	9a04      	ldr	r2, [sp, #16]
 8031adc:	4293      	cmp	r3, r2
 8031ade:	db01      	blt.n	8031ae4 <_svfprintf_r+0xf74>
 8031ae0:	07e8      	lsls	r0, r5, #31
 8031ae2:	d50e      	bpl.n	8031b02 <_svfprintf_r+0xf92>
 8031ae4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031ae6:	6023      	str	r3, [r4, #0]
 8031ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031aea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031aec:	6063      	str	r3, [r4, #4]
 8031aee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031af0:	4413      	add	r3, r2
 8031af2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031af4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031af6:	3301      	adds	r3, #1
 8031af8:	2b07      	cmp	r3, #7
 8031afa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031afc:	f300 80df 	bgt.w	8031cbe <_svfprintf_r+0x114e>
 8031b00:	3408      	adds	r4, #8
 8031b02:	9b04      	ldr	r3, [sp, #16]
 8031b04:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8031b06:	1bdf      	subs	r7, r3, r7
 8031b08:	9b06      	ldr	r3, [sp, #24]
 8031b0a:	eba3 0308 	sub.w	r3, r3, r8
 8031b0e:	429f      	cmp	r7, r3
 8031b10:	bfa8      	it	ge
 8031b12:	461f      	movge	r7, r3
 8031b14:	2f00      	cmp	r7, #0
 8031b16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031b18:	dd0a      	ble.n	8031b30 <_svfprintf_r+0xfc0>
 8031b1a:	443b      	add	r3, r7
 8031b1c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031b1e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031b20:	3301      	adds	r3, #1
 8031b22:	2b07      	cmp	r3, #7
 8031b24:	e9c4 8700 	strd	r8, r7, [r4]
 8031b28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031b2a:	f300 80d2 	bgt.w	8031cd2 <_svfprintf_r+0x1162>
 8031b2e:	3408      	adds	r4, #8
 8031b30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031b32:	9b04      	ldr	r3, [sp, #16]
 8031b34:	2f00      	cmp	r7, #0
 8031b36:	eba3 0606 	sub.w	r6, r3, r6
 8031b3a:	bfa8      	it	ge
 8031b3c:	1bf6      	subge	r6, r6, r7
 8031b3e:	2e00      	cmp	r6, #0
 8031b40:	f77f ac20 	ble.w	8031384 <_svfprintf_r+0x814>
 8031b44:	4f68      	ldr	r7, [pc, #416]	@ (8031ce8 <_svfprintf_r+0x1178>)
 8031b46:	f04f 0810 	mov.w	r8, #16
 8031b4a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031b4e:	2e10      	cmp	r6, #16
 8031b50:	f103 0301 	add.w	r3, r3, #1
 8031b54:	f104 0108 	add.w	r1, r4, #8
 8031b58:	6027      	str	r7, [r4, #0]
 8031b5a:	f77f aebc 	ble.w	80318d6 <_svfprintf_r+0xd66>
 8031b5e:	3210      	adds	r2, #16
 8031b60:	2b07      	cmp	r3, #7
 8031b62:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031b66:	f8c4 8004 	str.w	r8, [r4, #4]
 8031b6a:	dd08      	ble.n	8031b7e <_svfprintf_r+0x100e>
 8031b6c:	9803      	ldr	r0, [sp, #12]
 8031b6e:	aa26      	add	r2, sp, #152	@ 0x98
 8031b70:	4659      	mov	r1, fp
 8031b72:	f7fd fb85 	bl	802f280 <__ssprint_r>
 8031b76:	2800      	cmp	r0, #0
 8031b78:	f040 8175 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031b7c:	a929      	add	r1, sp, #164	@ 0xa4
 8031b7e:	3e10      	subs	r6, #16
 8031b80:	460c      	mov	r4, r1
 8031b82:	e7e2      	b.n	8031b4a <_svfprintf_r+0xfda>
 8031b84:	9803      	ldr	r0, [sp, #12]
 8031b86:	aa26      	add	r2, sp, #152	@ 0x98
 8031b88:	4659      	mov	r1, fp
 8031b8a:	f7fd fb79 	bl	802f280 <__ssprint_r>
 8031b8e:	2800      	cmp	r0, #0
 8031b90:	f040 8169 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031b94:	ac29      	add	r4, sp, #164	@ 0xa4
 8031b96:	e76d      	b.n	8031a74 <_svfprintf_r+0xf04>
 8031b98:	2010      	movs	r0, #16
 8031b9a:	4403      	add	r3, r0
 8031b9c:	2a07      	cmp	r2, #7
 8031b9e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031ba2:	6060      	str	r0, [r4, #4]
 8031ba4:	dd08      	ble.n	8031bb8 <_svfprintf_r+0x1048>
 8031ba6:	9803      	ldr	r0, [sp, #12]
 8031ba8:	aa26      	add	r2, sp, #152	@ 0x98
 8031baa:	4659      	mov	r1, fp
 8031bac:	f7fd fb68 	bl	802f280 <__ssprint_r>
 8031bb0:	2800      	cmp	r0, #0
 8031bb2:	f040 8158 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031bb6:	a929      	add	r1, sp, #164	@ 0xa4
 8031bb8:	f1a8 0810 	sub.w	r8, r8, #16
 8031bbc:	460c      	mov	r4, r1
 8031bbe:	e762      	b.n	8031a86 <_svfprintf_r+0xf16>
 8031bc0:	460c      	mov	r4, r1
 8031bc2:	e77c      	b.n	8031abe <_svfprintf_r+0xf4e>
 8031bc4:	2f00      	cmp	r7, #0
 8031bc6:	d04a      	beq.n	8031c5e <_svfprintf_r+0x10ee>
 8031bc8:	3f01      	subs	r7, #1
 8031bca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8031bcc:	6023      	str	r3, [r4, #0]
 8031bce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031bd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031bd2:	6063      	str	r3, [r4, #4]
 8031bd4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031bd6:	4413      	add	r3, r2
 8031bd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031bda:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031bdc:	3301      	adds	r3, #1
 8031bde:	2b07      	cmp	r3, #7
 8031be0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031be2:	dc43      	bgt.n	8031c6c <_svfprintf_r+0x10fc>
 8031be4:	3408      	adds	r4, #8
 8031be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031be8:	781a      	ldrb	r2, [r3, #0]
 8031bea:	9b06      	ldr	r3, [sp, #24]
 8031bec:	eba3 0308 	sub.w	r3, r3, r8
 8031bf0:	429a      	cmp	r2, r3
 8031bf2:	bfa8      	it	ge
 8031bf4:	461a      	movge	r2, r3
 8031bf6:	2a00      	cmp	r2, #0
 8031bf8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031bfa:	4691      	mov	r9, r2
 8031bfc:	dd09      	ble.n	8031c12 <_svfprintf_r+0x10a2>
 8031bfe:	4413      	add	r3, r2
 8031c00:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031c02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031c04:	3301      	adds	r3, #1
 8031c06:	2b07      	cmp	r3, #7
 8031c08:	e9c4 8200 	strd	r8, r2, [r4]
 8031c0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031c0e:	dc37      	bgt.n	8031c80 <_svfprintf_r+0x1110>
 8031c10:	3408      	adds	r4, #8
 8031c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031c14:	781e      	ldrb	r6, [r3, #0]
 8031c16:	f1b9 0f00 	cmp.w	r9, #0
 8031c1a:	bfa8      	it	ge
 8031c1c:	eba6 0609 	subge.w	r6, r6, r9
 8031c20:	2e00      	cmp	r6, #0
 8031c22:	dd18      	ble.n	8031c56 <_svfprintf_r+0x10e6>
 8031c24:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031c28:	482f      	ldr	r0, [pc, #188]	@ (8031ce8 <_svfprintf_r+0x1178>)
 8031c2a:	6020      	str	r0, [r4, #0]
 8031c2c:	2e10      	cmp	r6, #16
 8031c2e:	f103 0301 	add.w	r3, r3, #1
 8031c32:	f104 0108 	add.w	r1, r4, #8
 8031c36:	dc2d      	bgt.n	8031c94 <_svfprintf_r+0x1124>
 8031c38:	6066      	str	r6, [r4, #4]
 8031c3a:	2b07      	cmp	r3, #7
 8031c3c:	4416      	add	r6, r2
 8031c3e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031c42:	dd3a      	ble.n	8031cba <_svfprintf_r+0x114a>
 8031c44:	9803      	ldr	r0, [sp, #12]
 8031c46:	aa26      	add	r2, sp, #152	@ 0x98
 8031c48:	4659      	mov	r1, fp
 8031c4a:	f7fd fb19 	bl	802f280 <__ssprint_r>
 8031c4e:	2800      	cmp	r0, #0
 8031c50:	f040 8109 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031c54:	ac29      	add	r4, sp, #164	@ 0xa4
 8031c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031c58:	781b      	ldrb	r3, [r3, #0]
 8031c5a:	4498      	add	r8, r3
 8031c5c:	e733      	b.n	8031ac6 <_svfprintf_r+0xf56>
 8031c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031c60:	3b01      	subs	r3, #1
 8031c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8031c64:	9b08      	ldr	r3, [sp, #32]
 8031c66:	3b01      	subs	r3, #1
 8031c68:	9308      	str	r3, [sp, #32]
 8031c6a:	e7ae      	b.n	8031bca <_svfprintf_r+0x105a>
 8031c6c:	9803      	ldr	r0, [sp, #12]
 8031c6e:	aa26      	add	r2, sp, #152	@ 0x98
 8031c70:	4659      	mov	r1, fp
 8031c72:	f7fd fb05 	bl	802f280 <__ssprint_r>
 8031c76:	2800      	cmp	r0, #0
 8031c78:	f040 80f5 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031c7c:	ac29      	add	r4, sp, #164	@ 0xa4
 8031c7e:	e7b2      	b.n	8031be6 <_svfprintf_r+0x1076>
 8031c80:	9803      	ldr	r0, [sp, #12]
 8031c82:	aa26      	add	r2, sp, #152	@ 0x98
 8031c84:	4659      	mov	r1, fp
 8031c86:	f7fd fafb 	bl	802f280 <__ssprint_r>
 8031c8a:	2800      	cmp	r0, #0
 8031c8c:	f040 80eb 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031c90:	ac29      	add	r4, sp, #164	@ 0xa4
 8031c92:	e7be      	b.n	8031c12 <_svfprintf_r+0x10a2>
 8031c94:	2010      	movs	r0, #16
 8031c96:	4402      	add	r2, r0
 8031c98:	2b07      	cmp	r3, #7
 8031c9a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031c9e:	6060      	str	r0, [r4, #4]
 8031ca0:	dd08      	ble.n	8031cb4 <_svfprintf_r+0x1144>
 8031ca2:	9803      	ldr	r0, [sp, #12]
 8031ca4:	aa26      	add	r2, sp, #152	@ 0x98
 8031ca6:	4659      	mov	r1, fp
 8031ca8:	f7fd faea 	bl	802f280 <__ssprint_r>
 8031cac:	2800      	cmp	r0, #0
 8031cae:	f040 80da 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031cb2:	a929      	add	r1, sp, #164	@ 0xa4
 8031cb4:	3e10      	subs	r6, #16
 8031cb6:	460c      	mov	r4, r1
 8031cb8:	e7b4      	b.n	8031c24 <_svfprintf_r+0x10b4>
 8031cba:	460c      	mov	r4, r1
 8031cbc:	e7cb      	b.n	8031c56 <_svfprintf_r+0x10e6>
 8031cbe:	9803      	ldr	r0, [sp, #12]
 8031cc0:	aa26      	add	r2, sp, #152	@ 0x98
 8031cc2:	4659      	mov	r1, fp
 8031cc4:	f7fd fadc 	bl	802f280 <__ssprint_r>
 8031cc8:	2800      	cmp	r0, #0
 8031cca:	f040 80cc 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031cce:	ac29      	add	r4, sp, #164	@ 0xa4
 8031cd0:	e717      	b.n	8031b02 <_svfprintf_r+0xf92>
 8031cd2:	9803      	ldr	r0, [sp, #12]
 8031cd4:	aa26      	add	r2, sp, #152	@ 0x98
 8031cd6:	4659      	mov	r1, fp
 8031cd8:	f7fd fad2 	bl	802f280 <__ssprint_r>
 8031cdc:	2800      	cmp	r0, #0
 8031cde:	f040 80c2 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031ce2:	ac29      	add	r4, sp, #164	@ 0xa4
 8031ce4:	e724      	b.n	8031b30 <_svfprintf_r+0xfc0>
 8031ce6:	bf00      	nop
 8031ce8:	0803bf5a 	.word	0x0803bf5a
 8031cec:	9904      	ldr	r1, [sp, #16]
 8031cee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031cf0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031cf2:	2901      	cmp	r1, #1
 8031cf4:	f103 0301 	add.w	r3, r3, #1
 8031cf8:	f102 0201 	add.w	r2, r2, #1
 8031cfc:	f104 0608 	add.w	r6, r4, #8
 8031d00:	dc02      	bgt.n	8031d08 <_svfprintf_r+0x1198>
 8031d02:	07e9      	lsls	r1, r5, #31
 8031d04:	f140 8083 	bpl.w	8031e0e <_svfprintf_r+0x129e>
 8031d08:	2101      	movs	r1, #1
 8031d0a:	2a07      	cmp	r2, #7
 8031d0c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031d10:	f8c4 9000 	str.w	r9, [r4]
 8031d14:	6061      	str	r1, [r4, #4]
 8031d16:	dd08      	ble.n	8031d2a <_svfprintf_r+0x11ba>
 8031d18:	9803      	ldr	r0, [sp, #12]
 8031d1a:	aa26      	add	r2, sp, #152	@ 0x98
 8031d1c:	4659      	mov	r1, fp
 8031d1e:	f7fd faaf 	bl	802f280 <__ssprint_r>
 8031d22:	2800      	cmp	r0, #0
 8031d24:	f040 809f 	bne.w	8031e66 <_svfprintf_r+0x12f6>
 8031d28:	ae29      	add	r6, sp, #164	@ 0xa4
 8031d2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031d2c:	6033      	str	r3, [r6, #0]
 8031d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8031d30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031d32:	6073      	str	r3, [r6, #4]
 8031d34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031d36:	4413      	add	r3, r2
 8031d38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d3c:	3301      	adds	r3, #1
 8031d3e:	2b07      	cmp	r3, #7
 8031d40:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031d42:	dc33      	bgt.n	8031dac <_svfprintf_r+0x123c>
 8031d44:	3608      	adds	r6, #8
 8031d46:	9b04      	ldr	r3, [sp, #16]
 8031d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8031d4c:	1e5c      	subs	r4, r3, #1
 8031d4e:	2200      	movs	r2, #0
 8031d50:	2300      	movs	r3, #0
 8031d52:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8031d56:	f7de fecf 	bl	8010af8 <__aeabi_dcmpeq>
 8031d5a:	2800      	cmp	r0, #0
 8031d5c:	d12f      	bne.n	8031dbe <_svfprintf_r+0x124e>
 8031d5e:	f109 0201 	add.w	r2, r9, #1
 8031d62:	e9c6 2400 	strd	r2, r4, [r6]
 8031d66:	9a04      	ldr	r2, [sp, #16]
 8031d68:	f108 0301 	add.w	r3, r8, #1
 8031d6c:	3f01      	subs	r7, #1
 8031d6e:	4417      	add	r7, r2
 8031d70:	2b07      	cmp	r3, #7
 8031d72:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8031d76:	dd53      	ble.n	8031e20 <_svfprintf_r+0x12b0>
 8031d78:	9803      	ldr	r0, [sp, #12]
 8031d7a:	aa26      	add	r2, sp, #152	@ 0x98
 8031d7c:	4659      	mov	r1, fp
 8031d7e:	f7fd fa7f 	bl	802f280 <__ssprint_r>
 8031d82:	2800      	cmp	r0, #0
 8031d84:	d16f      	bne.n	8031e66 <_svfprintf_r+0x12f6>
 8031d86:	ae29      	add	r6, sp, #164	@ 0xa4
 8031d88:	ab22      	add	r3, sp, #136	@ 0x88
 8031d8a:	6033      	str	r3, [r6, #0]
 8031d8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8031d8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8031d90:	6073      	str	r3, [r6, #4]
 8031d92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031d94:	4413      	add	r3, r2
 8031d96:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031d98:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031d9a:	3301      	adds	r3, #1
 8031d9c:	2b07      	cmp	r3, #7
 8031d9e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031da0:	f73f ada0 	bgt.w	80318e4 <_svfprintf_r+0xd74>
 8031da4:	f106 0408 	add.w	r4, r6, #8
 8031da8:	f7ff baec 	b.w	8031384 <_svfprintf_r+0x814>
 8031dac:	9803      	ldr	r0, [sp, #12]
 8031dae:	aa26      	add	r2, sp, #152	@ 0x98
 8031db0:	4659      	mov	r1, fp
 8031db2:	f7fd fa65 	bl	802f280 <__ssprint_r>
 8031db6:	2800      	cmp	r0, #0
 8031db8:	d155      	bne.n	8031e66 <_svfprintf_r+0x12f6>
 8031dba:	ae29      	add	r6, sp, #164	@ 0xa4
 8031dbc:	e7c3      	b.n	8031d46 <_svfprintf_r+0x11d6>
 8031dbe:	9b04      	ldr	r3, [sp, #16]
 8031dc0:	2b01      	cmp	r3, #1
 8031dc2:	dde1      	ble.n	8031d88 <_svfprintf_r+0x1218>
 8031dc4:	4f57      	ldr	r7, [pc, #348]	@ (8031f24 <_svfprintf_r+0x13b4>)
 8031dc6:	f04f 0810 	mov.w	r8, #16
 8031dca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031dce:	2c10      	cmp	r4, #16
 8031dd0:	f103 0301 	add.w	r3, r3, #1
 8031dd4:	f106 0108 	add.w	r1, r6, #8
 8031dd8:	6037      	str	r7, [r6, #0]
 8031dda:	dc07      	bgt.n	8031dec <_svfprintf_r+0x127c>
 8031ddc:	6074      	str	r4, [r6, #4]
 8031dde:	2b07      	cmp	r3, #7
 8031de0:	4414      	add	r4, r2
 8031de2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8031de6:	dcc7      	bgt.n	8031d78 <_svfprintf_r+0x1208>
 8031de8:	460e      	mov	r6, r1
 8031dea:	e7cd      	b.n	8031d88 <_svfprintf_r+0x1218>
 8031dec:	3210      	adds	r2, #16
 8031dee:	2b07      	cmp	r3, #7
 8031df0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031df4:	f8c6 8004 	str.w	r8, [r6, #4]
 8031df8:	dd06      	ble.n	8031e08 <_svfprintf_r+0x1298>
 8031dfa:	9803      	ldr	r0, [sp, #12]
 8031dfc:	aa26      	add	r2, sp, #152	@ 0x98
 8031dfe:	4659      	mov	r1, fp
 8031e00:	f7fd fa3e 	bl	802f280 <__ssprint_r>
 8031e04:	bb78      	cbnz	r0, 8031e66 <_svfprintf_r+0x12f6>
 8031e06:	a929      	add	r1, sp, #164	@ 0xa4
 8031e08:	3c10      	subs	r4, #16
 8031e0a:	460e      	mov	r6, r1
 8031e0c:	e7dd      	b.n	8031dca <_svfprintf_r+0x125a>
 8031e0e:	2101      	movs	r1, #1
 8031e10:	2a07      	cmp	r2, #7
 8031e12:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031e16:	f8c4 9000 	str.w	r9, [r4]
 8031e1a:	6061      	str	r1, [r4, #4]
 8031e1c:	ddb4      	ble.n	8031d88 <_svfprintf_r+0x1218>
 8031e1e:	e7ab      	b.n	8031d78 <_svfprintf_r+0x1208>
 8031e20:	3608      	adds	r6, #8
 8031e22:	e7b1      	b.n	8031d88 <_svfprintf_r+0x1218>
 8031e24:	460c      	mov	r4, r1
 8031e26:	f7ff baad 	b.w	8031384 <_svfprintf_r+0x814>
 8031e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8031e2c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8031e2e:	1a9d      	subs	r5, r3, r2
 8031e30:	2d00      	cmp	r5, #0
 8031e32:	f77f aaaa 	ble.w	803138a <_svfprintf_r+0x81a>
 8031e36:	4e3c      	ldr	r6, [pc, #240]	@ (8031f28 <_svfprintf_r+0x13b8>)
 8031e38:	2710      	movs	r7, #16
 8031e3a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031e3e:	2d10      	cmp	r5, #16
 8031e40:	f103 0301 	add.w	r3, r3, #1
 8031e44:	6026      	str	r6, [r4, #0]
 8031e46:	dc18      	bgt.n	8031e7a <_svfprintf_r+0x130a>
 8031e48:	442a      	add	r2, r5
 8031e4a:	2b07      	cmp	r3, #7
 8031e4c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031e50:	6065      	str	r5, [r4, #4]
 8031e52:	f77f aa9a 	ble.w	803138a <_svfprintf_r+0x81a>
 8031e56:	9803      	ldr	r0, [sp, #12]
 8031e58:	aa26      	add	r2, sp, #152	@ 0x98
 8031e5a:	4659      	mov	r1, fp
 8031e5c:	f7fd fa10 	bl	802f280 <__ssprint_r>
 8031e60:	2800      	cmp	r0, #0
 8031e62:	f43f aa92 	beq.w	803138a <_svfprintf_r+0x81a>
 8031e66:	f1ba 0f00 	cmp.w	sl, #0
 8031e6a:	f43f a89a 	beq.w	8030fa2 <_svfprintf_r+0x432>
 8031e6e:	9803      	ldr	r0, [sp, #12]
 8031e70:	4651      	mov	r1, sl
 8031e72:	f7fc fe43 	bl	802eafc <_free_r>
 8031e76:	f7ff b894 	b.w	8030fa2 <_svfprintf_r+0x432>
 8031e7a:	3210      	adds	r2, #16
 8031e7c:	2b07      	cmp	r3, #7
 8031e7e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031e82:	6067      	str	r7, [r4, #4]
 8031e84:	dc02      	bgt.n	8031e8c <_svfprintf_r+0x131c>
 8031e86:	3408      	adds	r4, #8
 8031e88:	3d10      	subs	r5, #16
 8031e8a:	e7d6      	b.n	8031e3a <_svfprintf_r+0x12ca>
 8031e8c:	9803      	ldr	r0, [sp, #12]
 8031e8e:	aa26      	add	r2, sp, #152	@ 0x98
 8031e90:	4659      	mov	r1, fp
 8031e92:	f7fd f9f5 	bl	802f280 <__ssprint_r>
 8031e96:	2800      	cmp	r0, #0
 8031e98:	d1e5      	bne.n	8031e66 <_svfprintf_r+0x12f6>
 8031e9a:	ac29      	add	r4, sp, #164	@ 0xa4
 8031e9c:	e7f4      	b.n	8031e88 <_svfprintf_r+0x1318>
 8031e9e:	9803      	ldr	r0, [sp, #12]
 8031ea0:	4651      	mov	r1, sl
 8031ea2:	f7fc fe2b 	bl	802eafc <_free_r>
 8031ea6:	f7ff ba88 	b.w	80313ba <_svfprintf_r+0x84a>
 8031eaa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031eac:	2b00      	cmp	r3, #0
 8031eae:	f43f a878 	beq.w	8030fa2 <_svfprintf_r+0x432>
 8031eb2:	9803      	ldr	r0, [sp, #12]
 8031eb4:	aa26      	add	r2, sp, #152	@ 0x98
 8031eb6:	4659      	mov	r1, fp
 8031eb8:	f7fd f9e2 	bl	802f280 <__ssprint_r>
 8031ebc:	f7ff b871 	b.w	8030fa2 <_svfprintf_r+0x432>
 8031ec0:	ea56 0207 	orrs.w	r2, r6, r7
 8031ec4:	9508      	str	r5, [sp, #32]
 8031ec6:	f43f ab7a 	beq.w	80315be <_svfprintf_r+0xa4e>
 8031eca:	2b01      	cmp	r3, #1
 8031ecc:	f43f abfb 	beq.w	80316c6 <_svfprintf_r+0xb56>
 8031ed0:	2b02      	cmp	r3, #2
 8031ed2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031ed6:	f43f ac3f 	beq.w	8031758 <_svfprintf_r+0xbe8>
 8031eda:	f006 0307 	and.w	r3, r6, #7
 8031ede:	08f6      	lsrs	r6, r6, #3
 8031ee0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8031ee4:	08ff      	lsrs	r7, r7, #3
 8031ee6:	3330      	adds	r3, #48	@ 0x30
 8031ee8:	ea56 0107 	orrs.w	r1, r6, r7
 8031eec:	464a      	mov	r2, r9
 8031eee:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031ef2:	d1f2      	bne.n	8031eda <_svfprintf_r+0x136a>
 8031ef4:	9908      	ldr	r1, [sp, #32]
 8031ef6:	07c8      	lsls	r0, r1, #31
 8031ef8:	d506      	bpl.n	8031f08 <_svfprintf_r+0x1398>
 8031efa:	2b30      	cmp	r3, #48	@ 0x30
 8031efc:	d004      	beq.n	8031f08 <_svfprintf_r+0x1398>
 8031efe:	2330      	movs	r3, #48	@ 0x30
 8031f00:	f809 3c01 	strb.w	r3, [r9, #-1]
 8031f04:	f1a2 0902 	sub.w	r9, r2, #2
 8031f08:	ab52      	add	r3, sp, #328	@ 0x148
 8031f0a:	9d08      	ldr	r5, [sp, #32]
 8031f0c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8031f10:	f04f 0a00 	mov.w	sl, #0
 8031f14:	eba3 0809 	sub.w	r8, r3, r9
 8031f18:	4657      	mov	r7, sl
 8031f1a:	f8cd a020 	str.w	sl, [sp, #32]
 8031f1e:	4656      	mov	r6, sl
 8031f20:	f7ff b97c 	b.w	803121c <_svfprintf_r+0x6ac>
 8031f24:	0803bf5a 	.word	0x0803bf5a
 8031f28:	0803bf6a 	.word	0x0803bf6a

08031f2c <__swhatbuf_r>:
 8031f2c:	b570      	push	{r4, r5, r6, lr}
 8031f2e:	460c      	mov	r4, r1
 8031f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f34:	2900      	cmp	r1, #0
 8031f36:	b096      	sub	sp, #88	@ 0x58
 8031f38:	4615      	mov	r5, r2
 8031f3a:	461e      	mov	r6, r3
 8031f3c:	da07      	bge.n	8031f4e <__swhatbuf_r+0x22>
 8031f3e:	89a1      	ldrh	r1, [r4, #12]
 8031f40:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8031f44:	d117      	bne.n	8031f76 <__swhatbuf_r+0x4a>
 8031f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8031f4a:	4608      	mov	r0, r1
 8031f4c:	e00f      	b.n	8031f6e <__swhatbuf_r+0x42>
 8031f4e:	466a      	mov	r2, sp
 8031f50:	f003 f892 	bl	8035078 <_fstat_r>
 8031f54:	2800      	cmp	r0, #0
 8031f56:	dbf2      	blt.n	8031f3e <__swhatbuf_r+0x12>
 8031f58:	9901      	ldr	r1, [sp, #4]
 8031f5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8031f5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8031f62:	4259      	negs	r1, r3
 8031f64:	4159      	adcs	r1, r3
 8031f66:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8031f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8031f6e:	6031      	str	r1, [r6, #0]
 8031f70:	602b      	str	r3, [r5, #0]
 8031f72:	b016      	add	sp, #88	@ 0x58
 8031f74:	bd70      	pop	{r4, r5, r6, pc}
 8031f76:	2100      	movs	r1, #0
 8031f78:	2340      	movs	r3, #64	@ 0x40
 8031f7a:	e7e6      	b.n	8031f4a <__swhatbuf_r+0x1e>

08031f7c <__smakebuf_r>:
 8031f7c:	898b      	ldrh	r3, [r1, #12]
 8031f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8031f80:	079d      	lsls	r5, r3, #30
 8031f82:	4606      	mov	r6, r0
 8031f84:	460c      	mov	r4, r1
 8031f86:	d507      	bpl.n	8031f98 <__smakebuf_r+0x1c>
 8031f88:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8031f8c:	6023      	str	r3, [r4, #0]
 8031f8e:	6123      	str	r3, [r4, #16]
 8031f90:	2301      	movs	r3, #1
 8031f92:	6163      	str	r3, [r4, #20]
 8031f94:	b003      	add	sp, #12
 8031f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8031f98:	ab01      	add	r3, sp, #4
 8031f9a:	466a      	mov	r2, sp
 8031f9c:	f7ff ffc6 	bl	8031f2c <__swhatbuf_r>
 8031fa0:	9f00      	ldr	r7, [sp, #0]
 8031fa2:	4605      	mov	r5, r0
 8031fa4:	4639      	mov	r1, r7
 8031fa6:	4630      	mov	r0, r6
 8031fa8:	f7fc fec0 	bl	802ed2c <_malloc_r>
 8031fac:	b948      	cbnz	r0, 8031fc2 <__smakebuf_r+0x46>
 8031fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031fb2:	059a      	lsls	r2, r3, #22
 8031fb4:	d4ee      	bmi.n	8031f94 <__smakebuf_r+0x18>
 8031fb6:	f023 0303 	bic.w	r3, r3, #3
 8031fba:	f043 0302 	orr.w	r3, r3, #2
 8031fbe:	81a3      	strh	r3, [r4, #12]
 8031fc0:	e7e2      	b.n	8031f88 <__smakebuf_r+0xc>
 8031fc2:	89a3      	ldrh	r3, [r4, #12]
 8031fc4:	6020      	str	r0, [r4, #0]
 8031fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8031fca:	81a3      	strh	r3, [r4, #12]
 8031fcc:	9b01      	ldr	r3, [sp, #4]
 8031fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8031fd2:	b15b      	cbz	r3, 8031fec <__smakebuf_r+0x70>
 8031fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031fd8:	4630      	mov	r0, r6
 8031fda:	f003 f85f 	bl	803509c <_isatty_r>
 8031fde:	b128      	cbz	r0, 8031fec <__smakebuf_r+0x70>
 8031fe0:	89a3      	ldrh	r3, [r4, #12]
 8031fe2:	f023 0303 	bic.w	r3, r3, #3
 8031fe6:	f043 0301 	orr.w	r3, r3, #1
 8031fea:	81a3      	strh	r3, [r4, #12]
 8031fec:	89a3      	ldrh	r3, [r4, #12]
 8031fee:	431d      	orrs	r5, r3
 8031ff0:	81a5      	strh	r5, [r4, #12]
 8031ff2:	e7cf      	b.n	8031f94 <__smakebuf_r+0x18>

08031ff4 <__ssvfscanf_r>:
 8031ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031ff8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8031ffc:	461d      	mov	r5, r3
 8031ffe:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8032002:	af02      	add	r7, sp, #8
 8032004:	049e      	lsls	r6, r3, #18
 8032006:	62b8      	str	r0, [r7, #40]	@ 0x28
 8032008:	460c      	mov	r4, r1
 803200a:	617a      	str	r2, [r7, #20]
 803200c:	d406      	bmi.n	803201c <__ssvfscanf_r+0x28>
 803200e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8032012:	818b      	strh	r3, [r1, #12]
 8032014:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8032016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803201a:	664b      	str	r3, [r1, #100]	@ 0x64
 803201c:	2300      	movs	r3, #0
 803201e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8032022:	61bb      	str	r3, [r7, #24]
 8032024:	637b      	str	r3, [r7, #52]	@ 0x34
 8032026:	633b      	str	r3, [r7, #48]	@ 0x30
 8032028:	627b      	str	r3, [r7, #36]	@ 0x24
 803202a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803202e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8032034:	2b00      	cmp	r3, #0
 8032036:	f000 80d3 	beq.w	80321e0 <__ssvfscanf_r+0x1ec>
 803203a:	4a84      	ldr	r2, [pc, #528]	@ (803224c <__ssvfscanf_r+0x258>)
 803203c:	5cd6      	ldrb	r6, [r2, r3]
 803203e:	f016 0608 	ands.w	r6, r6, #8
 8032042:	d01b      	beq.n	803207c <__ssvfscanf_r+0x88>
 8032044:	6863      	ldr	r3, [r4, #4]
 8032046:	2b00      	cmp	r3, #0
 8032048:	dd08      	ble.n	803205c <__ssvfscanf_r+0x68>
 803204a:	6823      	ldr	r3, [r4, #0]
 803204c:	497f      	ldr	r1, [pc, #508]	@ (803224c <__ssvfscanf_r+0x258>)
 803204e:	781a      	ldrb	r2, [r3, #0]
 8032050:	5c8a      	ldrb	r2, [r1, r2]
 8032052:	0710      	lsls	r0, r2, #28
 8032054:	d409      	bmi.n	803206a <__ssvfscanf_r+0x76>
 8032056:	f8c7 8014 	str.w	r8, [r7, #20]
 803205a:	e7e6      	b.n	803202a <__ssvfscanf_r+0x36>
 803205c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803205e:	4621      	mov	r1, r4
 8032060:	f7fd fe13 	bl	802fc8a <__ssrefill_r>
 8032064:	2800      	cmp	r0, #0
 8032066:	d0f0      	beq.n	803204a <__ssvfscanf_r+0x56>
 8032068:	e7f5      	b.n	8032056 <__ssvfscanf_r+0x62>
 803206a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803206c:	3201      	adds	r2, #1
 803206e:	633a      	str	r2, [r7, #48]	@ 0x30
 8032070:	6862      	ldr	r2, [r4, #4]
 8032072:	3301      	adds	r3, #1
 8032074:	3a01      	subs	r2, #1
 8032076:	6062      	str	r2, [r4, #4]
 8032078:	6023      	str	r3, [r4, #0]
 803207a:	e7e3      	b.n	8032044 <__ssvfscanf_r+0x50>
 803207c:	2b25      	cmp	r3, #37	@ 0x25
 803207e:	d163      	bne.n	8032148 <__ssvfscanf_r+0x154>
 8032080:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8032082:	4642      	mov	r2, r8
 8032084:	f812 3b01 	ldrb.w	r3, [r2], #1
 8032088:	617a      	str	r2, [r7, #20]
 803208a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 803208e:	2a55      	cmp	r2, #85	@ 0x55
 8032090:	f200 816e 	bhi.w	8032370 <__ssvfscanf_r+0x37c>
 8032094:	e8df f012 	tbh	[pc, r2, lsl #1]
 8032098:	016c0056 	.word	0x016c0056
 803209c:	016c016c 	.word	0x016c016c
 80320a0:	007d016c 	.word	0x007d016c
 80320a4:	016c016c 	.word	0x016c016c
 80320a8:	016c016c 	.word	0x016c016c
 80320ac:	00b9016c 	.word	0x00b9016c
 80320b0:	00b900b9 	.word	0x00b900b9
 80320b4:	00b900b9 	.word	0x00b900b9
 80320b8:	00b900b9 	.word	0x00b900b9
 80320bc:	00b900b9 	.word	0x00b900b9
 80320c0:	016c00b9 	.word	0x016c00b9
 80320c4:	016c016c 	.word	0x016c016c
 80320c8:	016c016c 	.word	0x016c016c
 80320cc:	016c016c 	.word	0x016c016c
 80320d0:	016c00e0 	.word	0x016c00e0
 80320d4:	00c3010a 	.word	0x00c3010a
 80320d8:	00e000e0 	.word	0x00e000e0
 80320dc:	016c00e0 	.word	0x016c00e0
 80320e0:	016c016c 	.word	0x016c016c
 80320e4:	00a2016c 	.word	0x00a2016c
 80320e8:	016c016c 	.word	0x016c016c
 80320ec:	016c00c7 	.word	0x016c00c7
 80320f0:	016c016c 	.word	0x016c016c
 80320f4:	016c00fa 	.word	0x016c00fa
 80320f8:	016c016c 	.word	0x016c016c
 80320fc:	00d4016c 	.word	0x00d4016c
 8032100:	016c016c 	.word	0x016c016c
 8032104:	016c00ff 	.word	0x016c00ff
 8032108:	016c016c 	.word	0x016c016c
 803210c:	016c016c 	.word	0x016c016c
 8032110:	016c00e0 	.word	0x016c00e0
 8032114:	00c5010c 	.word	0x00c5010c
 8032118:	00e000e0 	.word	0x00e000e0
 803211c:	009400e0 	.word	0x009400e0
 8032120:	00a20130 	.word	0x00a20130
 8032124:	0085016c 	.word	0x0085016c
 8032128:	011400ac 	.word	0x011400ac
 803212c:	011100c9 	.word	0x011100c9
 8032130:	016c016c 	.word	0x016c016c
 8032134:	00a900fc 	.word	0x00a900fc
 8032138:	016c00d0 	.word	0x016c00d0
 803213c:	00d4016c 	.word	0x00d4016c
 8032140:	00a9016c 	.word	0x00a9016c
 8032144:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8032148:	6863      	ldr	r3, [r4, #4]
 803214a:	2b00      	cmp	r3, #0
 803214c:	dd0e      	ble.n	803216c <__ssvfscanf_r+0x178>
 803214e:	6823      	ldr	r3, [r4, #0]
 8032150:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8032154:	7819      	ldrb	r1, [r3, #0]
 8032156:	4291      	cmp	r1, r2
 8032158:	d142      	bne.n	80321e0 <__ssvfscanf_r+0x1ec>
 803215a:	3301      	adds	r3, #1
 803215c:	6862      	ldr	r2, [r4, #4]
 803215e:	6023      	str	r3, [r4, #0]
 8032160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032162:	3a01      	subs	r2, #1
 8032164:	3301      	adds	r3, #1
 8032166:	6062      	str	r2, [r4, #4]
 8032168:	633b      	str	r3, [r7, #48]	@ 0x30
 803216a:	e774      	b.n	8032056 <__ssvfscanf_r+0x62>
 803216c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803216e:	4621      	mov	r1, r4
 8032170:	f7fd fd8b 	bl	802fc8a <__ssrefill_r>
 8032174:	2800      	cmp	r0, #0
 8032176:	d0ea      	beq.n	803214e <__ssvfscanf_r+0x15a>
 8032178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803217a:	b113      	cbz	r3, 8032182 <__ssvfscanf_r+0x18e>
 803217c:	89a3      	ldrh	r3, [r4, #12]
 803217e:	065b      	lsls	r3, r3, #25
 8032180:	d52e      	bpl.n	80321e0 <__ssvfscanf_r+0x1ec>
 8032182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032184:	2b00      	cmp	r3, #0
 8032186:	f041 809d 	bne.w	80332c4 <__ssvfscanf_r+0x12d0>
 803218a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803218e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032190:	e0f9      	b.n	8032386 <__ssvfscanf_r+0x392>
 8032192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032194:	4333      	orrs	r3, r6
 8032196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032198:	d122      	bne.n	80321e0 <__ssvfscanf_r+0x1ec>
 803219a:	2610      	movs	r6, #16
 803219c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80321a0:	e76f      	b.n	8032082 <__ssvfscanf_r+0x8e>
 80321a2:	0731      	lsls	r1, r6, #28
 80321a4:	d11c      	bne.n	80321e0 <__ssvfscanf_r+0x1ec>
 80321a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80321aa:	2b6c      	cmp	r3, #108	@ 0x6c
 80321ac:	d105      	bne.n	80321ba <__ssvfscanf_r+0x1c6>
 80321ae:	f108 0302 	add.w	r3, r8, #2
 80321b2:	617b      	str	r3, [r7, #20]
 80321b4:	f046 0602 	orr.w	r6, r6, #2
 80321b8:	e7f0      	b.n	803219c <__ssvfscanf_r+0x1a8>
 80321ba:	f046 0601 	orr.w	r6, r6, #1
 80321be:	e7ed      	b.n	803219c <__ssvfscanf_r+0x1a8>
 80321c0:	0732      	lsls	r2, r6, #28
 80321c2:	d10d      	bne.n	80321e0 <__ssvfscanf_r+0x1ec>
 80321c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80321c8:	2b68      	cmp	r3, #104	@ 0x68
 80321ca:	bf03      	ittte	eq
 80321cc:	f108 0302 	addeq.w	r3, r8, #2
 80321d0:	617b      	streq	r3, [r7, #20]
 80321d2:	f046 0608 	orreq.w	r6, r6, #8
 80321d6:	f046 0604 	orrne.w	r6, r6, #4
 80321da:	e7df      	b.n	803219c <__ssvfscanf_r+0x1a8>
 80321dc:	0733      	lsls	r3, r6, #28
 80321de:	d0e9      	beq.n	80321b4 <__ssvfscanf_r+0x1c0>
 80321e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80321e2:	2b00      	cmp	r3, #0
 80321e4:	f000 80cf 	beq.w	8032386 <__ssvfscanf_r+0x392>
 80321e8:	e0c8      	b.n	803237c <__ssvfscanf_r+0x388>
 80321ea:	0730      	lsls	r0, r6, #28
 80321ec:	d0d6      	beq.n	803219c <__ssvfscanf_r+0x1a8>
 80321ee:	e7f7      	b.n	80321e0 <__ssvfscanf_r+0x1ec>
 80321f0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80321f4:	d1f4      	bne.n	80321e0 <__ssvfscanf_r+0x1ec>
 80321f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80321f8:	b922      	cbnz	r2, 8032204 <__ssvfscanf_r+0x210>
 80321fa:	b082      	sub	sp, #8
 80321fc:	aa02      	add	r2, sp, #8
 80321fe:	e9c2 3300 	strd	r3, r3, [r2]
 8032202:	637a      	str	r2, [r7, #52]	@ 0x34
 8032204:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8032208:	e7c8      	b.n	803219c <__ssvfscanf_r+0x1a8>
 803220a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803220e:	d1e7      	bne.n	80321e0 <__ssvfscanf_r+0x1ec>
 8032210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032212:	220a      	movs	r2, #10
 8032214:	fb02 3301 	mla	r3, r2, r1, r3
 8032218:	3b30      	subs	r3, #48	@ 0x30
 803221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803221c:	e7be      	b.n	803219c <__ssvfscanf_r+0x1a8>
 803221e:	f046 0601 	orr.w	r6, r6, #1
 8032222:	4b0b      	ldr	r3, [pc, #44]	@ (8032250 <__ssvfscanf_r+0x25c>)
 8032224:	e009      	b.n	803223a <__ssvfscanf_r+0x246>
 8032226:	f046 0601 	orr.w	r6, r6, #1
 803222a:	4b0a      	ldr	r3, [pc, #40]	@ (8032254 <__ssvfscanf_r+0x260>)
 803222c:	61bb      	str	r3, [r7, #24]
 803222e:	2308      	movs	r3, #8
 8032230:	61fb      	str	r3, [r7, #28]
 8032232:	f04f 0803 	mov.w	r8, #3
 8032236:	e011      	b.n	803225c <__ssvfscanf_r+0x268>
 8032238:	4b06      	ldr	r3, [pc, #24]	@ (8032254 <__ssvfscanf_r+0x260>)
 803223a:	61bb      	str	r3, [r7, #24]
 803223c:	230a      	movs	r3, #10
 803223e:	e7f7      	b.n	8032230 <__ssvfscanf_r+0x23c>
 8032240:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8032244:	4b03      	ldr	r3, [pc, #12]	@ (8032254 <__ssvfscanf_r+0x260>)
 8032246:	61bb      	str	r3, [r7, #24]
 8032248:	2310      	movs	r3, #16
 803224a:	e7f1      	b.n	8032230 <__ssvfscanf_r+0x23c>
 803224c:	0803bda1 	.word	0x0803bda1
 8032250:	0802bf89 	.word	0x0802bf89
 8032254:	08034d89 	.word	0x08034d89
 8032258:	f04f 0804 	mov.w	r8, #4
 803225c:	6863      	ldr	r3, [r4, #4]
 803225e:	2b00      	cmp	r3, #0
 8032260:	dd4e      	ble.n	8032300 <__ssvfscanf_r+0x30c>
 8032262:	0673      	lsls	r3, r6, #25
 8032264:	d407      	bmi.n	8032276 <__ssvfscanf_r+0x282>
 8032266:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8032564 <__ssvfscanf_r+0x570>
 803226a:	6823      	ldr	r3, [r4, #0]
 803226c:	781a      	ldrb	r2, [r3, #0]
 803226e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8032272:	0710      	lsls	r0, r2, #28
 8032274:	d44b      	bmi.n	803230e <__ssvfscanf_r+0x31a>
 8032276:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 803227a:	f1b8 0f03 	cmp.w	r8, #3
 803227e:	d858      	bhi.n	8032332 <__ssvfscanf_r+0x33e>
 8032280:	e8df f018 	tbh	[pc, r8, lsl #1]
 8032284:	037801c1 	.word	0x037801c1
 8032288:	05f30514 	.word	0x05f30514
 803228c:	f046 0601 	orr.w	r6, r6, #1
 8032290:	f04f 0802 	mov.w	r8, #2
 8032294:	e7e2      	b.n	803225c <__ssvfscanf_r+0x268>
 8032296:	6979      	ldr	r1, [r7, #20]
 8032298:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 803229c:	f001 fd1d 	bl	8033cda <__sccl>
 80322a0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80322a4:	6178      	str	r0, [r7, #20]
 80322a6:	f04f 0801 	mov.w	r8, #1
 80322aa:	e7d7      	b.n	803225c <__ssvfscanf_r+0x268>
 80322ac:	f046 0601 	orr.w	r6, r6, #1
 80322b0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80322b4:	f04f 0800 	mov.w	r8, #0
 80322b8:	e7d0      	b.n	803225c <__ssvfscanf_r+0x268>
 80322ba:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 80322be:	e7c1      	b.n	8032244 <__ssvfscanf_r+0x250>
 80322c0:	06f1      	lsls	r1, r6, #27
 80322c2:	f53f aeb2 	bmi.w	803202a <__ssvfscanf_r+0x36>
 80322c6:	0732      	lsls	r2, r6, #28
 80322c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80322cc:	d502      	bpl.n	80322d4 <__ssvfscanf_r+0x2e0>
 80322ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80322d0:	701a      	strb	r2, [r3, #0]
 80322d2:	e6aa      	b.n	803202a <__ssvfscanf_r+0x36>
 80322d4:	0770      	lsls	r0, r6, #29
 80322d6:	d502      	bpl.n	80322de <__ssvfscanf_r+0x2ea>
 80322d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80322da:	801a      	strh	r2, [r3, #0]
 80322dc:	e6a5      	b.n	803202a <__ssvfscanf_r+0x36>
 80322de:	07f1      	lsls	r1, r6, #31
 80322e0:	d502      	bpl.n	80322e8 <__ssvfscanf_r+0x2f4>
 80322e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80322e4:	601a      	str	r2, [r3, #0]
 80322e6:	e6a0      	b.n	803202a <__ssvfscanf_r+0x36>
 80322e8:	07b2      	lsls	r2, r6, #30
 80322ea:	d5fa      	bpl.n	80322e2 <__ssvfscanf_r+0x2ee>
 80322ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80322ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80322f0:	17d2      	asrs	r2, r2, #31
 80322f2:	e9c3 1200 	strd	r1, r2, [r3]
 80322f6:	e698      	b.n	803202a <__ssvfscanf_r+0x36>
 80322f8:	4b99      	ldr	r3, [pc, #612]	@ (8032560 <__ssvfscanf_r+0x56c>)
 80322fa:	61bb      	str	r3, [r7, #24]
 80322fc:	2300      	movs	r3, #0
 80322fe:	e797      	b.n	8032230 <__ssvfscanf_r+0x23c>
 8032300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032302:	4621      	mov	r1, r4
 8032304:	f7fd fcc1 	bl	802fc8a <__ssrefill_r>
 8032308:	2800      	cmp	r0, #0
 803230a:	d0aa      	beq.n	8032262 <__ssvfscanf_r+0x26e>
 803230c:	e734      	b.n	8032178 <__ssvfscanf_r+0x184>
 803230e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032310:	3201      	adds	r2, #1
 8032312:	633a      	str	r2, [r7, #48]	@ 0x30
 8032314:	6862      	ldr	r2, [r4, #4]
 8032316:	3a01      	subs	r2, #1
 8032318:	2a00      	cmp	r2, #0
 803231a:	6062      	str	r2, [r4, #4]
 803231c:	dd02      	ble.n	8032324 <__ssvfscanf_r+0x330>
 803231e:	3301      	adds	r3, #1
 8032320:	6023      	str	r3, [r4, #0]
 8032322:	e7a2      	b.n	803226a <__ssvfscanf_r+0x276>
 8032324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032326:	4621      	mov	r1, r4
 8032328:	f7fd fcaf 	bl	802fc8a <__ssrefill_r>
 803232c:	2800      	cmp	r0, #0
 803232e:	d09c      	beq.n	803226a <__ssvfscanf_r+0x276>
 8032330:	e722      	b.n	8032178 <__ssvfscanf_r+0x184>
 8032332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032334:	2b01      	cmp	r3, #1
 8032336:	bf38      	it	cc
 8032338:	2301      	movcc	r3, #1
 803233a:	4698      	mov	r8, r3
 803233c:	f016 0301 	ands.w	r3, r6, #1
 8032340:	f006 0b10 	and.w	fp, r6, #16
 8032344:	f000 80eb 	beq.w	803251e <__ssvfscanf_r+0x52a>
 8032348:	f1bb 0f00 	cmp.w	fp, #0
 803234c:	f040 8085 	bne.w	803245a <__ssvfscanf_r+0x466>
 8032350:	462b      	mov	r3, r5
 8032352:	0631      	lsls	r1, r6, #24
 8032354:	f853 5b04 	ldr.w	r5, [r3], #4
 8032358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803235a:	f140 8085 	bpl.w	8032468 <__ssvfscanf_r+0x474>
 803235e:	b13d      	cbz	r5, 8032370 <__ssvfscanf_r+0x37c>
 8032360:	2080      	movs	r0, #128	@ 0x80
 8032362:	f7fc fcd3 	bl	802ed0c <malloc>
 8032366:	4606      	mov	r6, r0
 8032368:	b998      	cbnz	r0, 8032392 <__ssvfscanf_r+0x39e>
 803236a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803236e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032372:	b143      	cbz	r3, 8032386 <__ssvfscanf_r+0x392>
 8032374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032376:	3301      	adds	r3, #1
 8032378:	f000 87a4 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 803237c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803237e:	6818      	ldr	r0, [r3, #0]
 8032380:	b108      	cbz	r0, 8032386 <__ssvfscanf_r+0x392>
 8032382:	f7fc fccb 	bl	802ed1c <free>
 8032386:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8032388:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 803238c:	46bd      	mov	sp, r7
 803238e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032394:	6028      	str	r0, [r5, #0]
 8032396:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803239a:	889b      	ldrh	r3, [r3, #4]
 803239c:	4599      	cmp	r9, r3
 803239e:	d314      	bcc.n	80323ca <__ssvfscanf_r+0x3d6>
 80323a0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80323a4:	4293      	cmp	r3, r2
 80323a6:	f200 878d 	bhi.w	80332c4 <__ssvfscanf_r+0x12d0>
 80323aa:	3308      	adds	r3, #8
 80323ac:	fa1f fa83 	uxth.w	sl, r3
 80323b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323b2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80323b6:	6818      	ldr	r0, [r3, #0]
 80323b8:	f001 fc32 	bl	8033c20 <realloc>
 80323bc:	2800      	cmp	r0, #0
 80323be:	f000 8781 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 80323c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323c4:	6018      	str	r0, [r3, #0]
 80323c6:	f8a3 a004 	strh.w	sl, [r3, #4]
 80323ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80323cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80323ce:	681b      	ldr	r3, [r3, #0]
 80323d0:	f109 0201 	add.w	r2, r9, #1
 80323d4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80323d8:	46aa      	mov	sl, r5
 80323da:	80ca      	strh	r2, [r1, #6]
 80323dc:	4635      	mov	r5, r6
 80323de:	f04f 0920 	mov.w	r9, #32
 80323e2:	2200      	movs	r2, #0
 80323e4:	613a      	str	r2, [r7, #16]
 80323e6:	f7fb fbd3 	bl	802db90 <__locale_mb_cur_max>
 80323ea:	693a      	ldr	r2, [r7, #16]
 80323ec:	4290      	cmp	r0, r2
 80323ee:	f43f aec3 	beq.w	8032178 <__ssvfscanf_r+0x184>
 80323f2:	6821      	ldr	r1, [r4, #0]
 80323f4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 80323f8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80323fc:	f80c 0002 	strb.w	r0, [ip, r2]
 8032400:	1c53      	adds	r3, r2, #1
 8032402:	6862      	ldr	r2, [r4, #4]
 8032404:	3a01      	subs	r2, #1
 8032406:	e9c4 1200 	strd	r1, r2, [r4]
 803240a:	6a3a      	ldr	r2, [r7, #32]
 803240c:	2a03      	cmp	r2, #3
 803240e:	d102      	bne.n	8032416 <__ssvfscanf_r+0x422>
 8032410:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032412:	2a04      	cmp	r2, #4
 8032414:	d007      	beq.n	8032426 <__ssvfscanf_r+0x432>
 8032416:	2208      	movs	r2, #8
 8032418:	2100      	movs	r1, #0
 803241a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 803241e:	623b      	str	r3, [r7, #32]
 8032420:	f7fa fa2e 	bl	802c880 <memset>
 8032424:	6a3b      	ldr	r3, [r7, #32]
 8032426:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 803242a:	9200      	str	r2, [sp, #0]
 803242c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803242e:	613b      	str	r3, [r7, #16]
 8032430:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032434:	4629      	mov	r1, r5
 8032436:	f002 ffad 	bl	8035394 <_mbrtowc_r>
 803243a:	1c42      	adds	r2, r0, #1
 803243c:	6238      	str	r0, [r7, #32]
 803243e:	f43f ae9b 	beq.w	8032178 <__ssvfscanf_r+0x184>
 8032442:	693b      	ldr	r3, [r7, #16]
 8032444:	b9b8      	cbnz	r0, 8032476 <__ssvfscanf_r+0x482>
 8032446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032448:	441a      	add	r2, r3
 803244a:	4613      	mov	r3, r2
 803244c:	f1bb 0f00 	cmp.w	fp, #0
 8032450:	d00e      	beq.n	8032470 <__ssvfscanf_r+0x47c>
 8032452:	633b      	str	r3, [r7, #48]	@ 0x30
 8032454:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8032458:	e019      	b.n	803248e <__ssvfscanf_r+0x49a>
 803245a:	f04f 0900 	mov.w	r9, #0
 803245e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8032460:	464e      	mov	r6, r9
 8032462:	46ca      	mov	sl, r9
 8032464:	464d      	mov	r5, r9
 8032466:	e7bc      	b.n	80323e2 <__ssvfscanf_r+0x3ee>
 8032468:	46d9      	mov	r9, fp
 803246a:	465e      	mov	r6, fp
 803246c:	46da      	mov	sl, fp
 803246e:	e7b8      	b.n	80323e2 <__ssvfscanf_r+0x3ee>
 8032470:	f8c5 b000 	str.w	fp, [r5]
 8032474:	e7ed      	b.n	8032452 <__ssvfscanf_r+0x45e>
 8032476:	6a3a      	ldr	r2, [r7, #32]
 8032478:	3202      	adds	r2, #2
 803247a:	d025      	beq.n	80324c8 <__ssvfscanf_r+0x4d4>
 803247c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 803247e:	441a      	add	r2, r3
 8032480:	6a3b      	ldr	r3, [r7, #32]
 8032482:	633a      	str	r2, [r7, #48]	@ 0x30
 8032484:	2b03      	cmp	r3, #3
 8032486:	d1e5      	bne.n	8032454 <__ssvfscanf_r+0x460>
 8032488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 803248a:	2b04      	cmp	r3, #4
 803248c:	d1e2      	bne.n	8032454 <__ssvfscanf_r+0x460>
 803248e:	f1bb 0f00 	cmp.w	fp, #0
 8032492:	d117      	bne.n	80324c4 <__ssvfscanf_r+0x4d0>
 8032494:	f1ba 0f00 	cmp.w	sl, #0
 8032498:	d013      	beq.n	80324c2 <__ssvfscanf_r+0x4ce>
 803249a:	1bab      	subs	r3, r5, r6
 803249c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80324a0:	d80f      	bhi.n	80324c2 <__ssvfscanf_r+0x4ce>
 80324a2:	4630      	mov	r0, r6
 80324a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80324a8:	613b      	str	r3, [r7, #16]
 80324aa:	f001 fbb9 	bl	8033c20 <realloc>
 80324ae:	4606      	mov	r6, r0
 80324b0:	2800      	cmp	r0, #0
 80324b2:	f43f af5a 	beq.w	803236a <__ssvfscanf_r+0x376>
 80324b6:	693b      	ldr	r3, [r7, #16]
 80324b8:	f8ca 0000 	str.w	r0, [sl]
 80324bc:	18c5      	adds	r5, r0, r3
 80324be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80324c2:	3504      	adds	r5, #4
 80324c4:	2200      	movs	r2, #0
 80324c6:	e000      	b.n	80324ca <__ssvfscanf_r+0x4d6>
 80324c8:	461a      	mov	r2, r3
 80324ca:	6863      	ldr	r3, [r4, #4]
 80324cc:	2b00      	cmp	r3, #0
 80324ce:	dc14      	bgt.n	80324fa <__ssvfscanf_r+0x506>
 80324d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80324d2:	613a      	str	r2, [r7, #16]
 80324d4:	4621      	mov	r1, r4
 80324d6:	f7fd fbd8 	bl	802fc8a <__ssrefill_r>
 80324da:	693a      	ldr	r2, [r7, #16]
 80324dc:	b168      	cbz	r0, 80324fa <__ssvfscanf_r+0x506>
 80324de:	2a00      	cmp	r2, #0
 80324e0:	f47f ae4a 	bne.w	8032178 <__ssvfscanf_r+0x184>
 80324e4:	f1ba 0f00 	cmp.w	sl, #0
 80324e8:	d10c      	bne.n	8032504 <__ssvfscanf_r+0x510>
 80324ea:	f1bb 0f00 	cmp.w	fp, #0
 80324ee:	d102      	bne.n	80324f6 <__ssvfscanf_r+0x502>
 80324f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80324f2:	3301      	adds	r3, #1
 80324f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80324f6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80324f8:	e597      	b.n	803202a <__ssvfscanf_r+0x36>
 80324fa:	f1b8 0f00 	cmp.w	r8, #0
 80324fe:	f47f af71 	bne.w	80323e4 <__ssvfscanf_r+0x3f0>
 8032502:	e7ef      	b.n	80324e4 <__ssvfscanf_r+0x4f0>
 8032504:	1ba9      	subs	r1, r5, r6
 8032506:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 803250a:	d9ee      	bls.n	80324ea <__ssvfscanf_r+0x4f6>
 803250c:	f8da 0000 	ldr.w	r0, [sl]
 8032510:	f001 fb86 	bl	8033c20 <realloc>
 8032514:	2800      	cmp	r0, #0
 8032516:	d0e8      	beq.n	80324ea <__ssvfscanf_r+0x4f6>
 8032518:	f8ca 0000 	str.w	r0, [sl]
 803251c:	e7e5      	b.n	80324ea <__ssvfscanf_r+0x4f6>
 803251e:	f1bb 0f00 	cmp.w	fp, #0
 8032522:	d021      	beq.n	8032568 <__ssvfscanf_r+0x574>
 8032524:	461e      	mov	r6, r3
 8032526:	e9d4 2300 	ldrd	r2, r3, [r4]
 803252a:	4598      	cmp	r8, r3
 803252c:	dd11      	ble.n	8032552 <__ssvfscanf_r+0x55e>
 803252e:	441a      	add	r2, r3
 8032530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032532:	6022      	str	r2, [r4, #0]
 8032534:	4621      	mov	r1, r4
 8032536:	441e      	add	r6, r3
 8032538:	eba8 0803 	sub.w	r8, r8, r3
 803253c:	f7fd fba5 	bl	802fc8a <__ssrefill_r>
 8032540:	2800      	cmp	r0, #0
 8032542:	d0f0      	beq.n	8032526 <__ssvfscanf_r+0x532>
 8032544:	2e00      	cmp	r6, #0
 8032546:	f43f ae17 	beq.w	8032178 <__ssvfscanf_r+0x184>
 803254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803254c:	4433      	add	r3, r6
 803254e:	633b      	str	r3, [r7, #48]	@ 0x30
 8032550:	e56b      	b.n	803202a <__ssvfscanf_r+0x36>
 8032552:	eba3 0308 	sub.w	r3, r3, r8
 8032556:	4442      	add	r2, r8
 8032558:	4446      	add	r6, r8
 803255a:	6063      	str	r3, [r4, #4]
 803255c:	6022      	str	r2, [r4, #0]
 803255e:	e7f4      	b.n	803254a <__ssvfscanf_r+0x556>
 8032560:	0802bf89 	.word	0x0802bf89
 8032564:	0803bda1 	.word	0x0803bda1
 8032568:	46a9      	mov	r9, r5
 803256a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803256e:	f859 5b04 	ldr.w	r5, [r9], #4
 8032572:	d02c      	beq.n	80325ce <__ssvfscanf_r+0x5da>
 8032574:	2d00      	cmp	r5, #0
 8032576:	f43f ae33 	beq.w	80321e0 <__ssvfscanf_r+0x1ec>
 803257a:	4640      	mov	r0, r8
 803257c:	f7fc fbc6 	bl	802ed0c <malloc>
 8032580:	4682      	mov	sl, r0
 8032582:	2800      	cmp	r0, #0
 8032584:	f43f adfd 	beq.w	8032182 <__ssvfscanf_r+0x18e>
 8032588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803258a:	6028      	str	r0, [r5, #0]
 803258c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8032590:	889e      	ldrh	r6, [r3, #4]
 8032592:	45b3      	cmp	fp, r6
 8032594:	d311      	bcc.n	80325ba <__ssvfscanf_r+0x5c6>
 8032596:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803259a:	429e      	cmp	r6, r3
 803259c:	f200 8692 	bhi.w	80332c4 <__ssvfscanf_r+0x12d0>
 80325a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325a2:	3608      	adds	r6, #8
 80325a4:	b2b6      	uxth	r6, r6
 80325a6:	6818      	ldr	r0, [r3, #0]
 80325a8:	00b1      	lsls	r1, r6, #2
 80325aa:	f001 fb39 	bl	8033c20 <realloc>
 80325ae:	2800      	cmp	r0, #0
 80325b0:	f000 8688 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 80325b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325b6:	6018      	str	r0, [r3, #0]
 80325b8:	809e      	strh	r6, [r3, #4]
 80325ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80325bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80325be:	681b      	ldr	r3, [r3, #0]
 80325c0:	f10b 0201 	add.w	r2, fp, #1
 80325c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80325c8:	462e      	mov	r6, r5
 80325ca:	80ca      	strh	r2, [r1, #6]
 80325cc:	4655      	mov	r5, sl
 80325ce:	9400      	str	r4, [sp, #0]
 80325d0:	4629      	mov	r1, r5
 80325d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80325d4:	4643      	mov	r3, r8
 80325d6:	2201      	movs	r2, #1
 80325d8:	f7fd fb74 	bl	802fcc4 <_sfread_r>
 80325dc:	4605      	mov	r5, r0
 80325de:	2800      	cmp	r0, #0
 80325e0:	f43f adca 	beq.w	8032178 <__ssvfscanf_r+0x184>
 80325e4:	b13e      	cbz	r6, 80325f6 <__ssvfscanf_r+0x602>
 80325e6:	4580      	cmp	r8, r0
 80325e8:	d905      	bls.n	80325f6 <__ssvfscanf_r+0x602>
 80325ea:	4601      	mov	r1, r0
 80325ec:	6830      	ldr	r0, [r6, #0]
 80325ee:	f001 fb17 	bl	8033c20 <realloc>
 80325f2:	b100      	cbz	r0, 80325f6 <__ssvfscanf_r+0x602>
 80325f4:	6030      	str	r0, [r6, #0]
 80325f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80325f8:	442b      	add	r3, r5
 80325fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80325fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80325fe:	3301      	adds	r3, #1
 8032600:	627b      	str	r3, [r7, #36]	@ 0x24
 8032602:	464d      	mov	r5, r9
 8032604:	e511      	b.n	803202a <__ssvfscanf_r+0x36>
 8032606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032608:	2b00      	cmp	r3, #0
 803260a:	bf08      	it	eq
 803260c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8032610:	f016 0801 	ands.w	r8, r6, #1
 8032614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032616:	f006 0a10 	and.w	sl, r6, #16
 803261a:	f000 8101 	beq.w	8032820 <__ssvfscanf_r+0x82c>
 803261e:	f1ba 0f00 	cmp.w	sl, #0
 8032622:	f040 80a4 	bne.w	803276e <__ssvfscanf_r+0x77a>
 8032626:	462b      	mov	r3, r5
 8032628:	f853 5b04 	ldr.w	r5, [r3], #4
 803262c:	60fb      	str	r3, [r7, #12]
 803262e:	0633      	lsls	r3, r6, #24
 8032630:	f140 80a5 	bpl.w	803277e <__ssvfscanf_r+0x78a>
 8032634:	2d00      	cmp	r5, #0
 8032636:	f43f ae9b 	beq.w	8032370 <__ssvfscanf_r+0x37c>
 803263a:	2080      	movs	r0, #128	@ 0x80
 803263c:	f7fc fb66 	bl	802ed0c <malloc>
 8032640:	4680      	mov	r8, r0
 8032642:	2800      	cmp	r0, #0
 8032644:	f43f ae91 	beq.w	803236a <__ssvfscanf_r+0x376>
 8032648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803264a:	6028      	str	r0, [r5, #0]
 803264c:	88de      	ldrh	r6, [r3, #6]
 803264e:	889b      	ldrh	r3, [r3, #4]
 8032650:	429e      	cmp	r6, r3
 8032652:	d314      	bcc.n	803267e <__ssvfscanf_r+0x68a>
 8032654:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032658:	4293      	cmp	r3, r2
 803265a:	f200 8633 	bhi.w	80332c4 <__ssvfscanf_r+0x12d0>
 803265e:	3308      	adds	r3, #8
 8032660:	fa1f f983 	uxth.w	r9, r3
 8032664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032666:	ea4f 0189 	mov.w	r1, r9, lsl #2
 803266a:	6818      	ldr	r0, [r3, #0]
 803266c:	f001 fad8 	bl	8033c20 <realloc>
 8032670:	2800      	cmp	r0, #0
 8032672:	f000 8627 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 8032676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032678:	6018      	str	r0, [r3, #0]
 803267a:	f8a3 9004 	strh.w	r9, [r3, #4]
 803267e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032680:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032682:	681b      	ldr	r3, [r3, #0]
 8032684:	1c72      	adds	r2, r6, #1
 8032686:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 803268a:	46ab      	mov	fp, r5
 803268c:	80ca      	strh	r2, [r1, #6]
 803268e:	4645      	mov	r5, r8
 8032690:	f04f 0920 	mov.w	r9, #32
 8032694:	2600      	movs	r6, #0
 8032696:	f7fb fa7b 	bl	802db90 <__locale_mb_cur_max>
 803269a:	42b0      	cmp	r0, r6
 803269c:	f43f ad6c 	beq.w	8032178 <__ssvfscanf_r+0x184>
 80326a0:	1c73      	adds	r3, r6, #1
 80326a2:	613b      	str	r3, [r7, #16]
 80326a4:	6823      	ldr	r3, [r4, #0]
 80326a6:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80326aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80326ae:	558a      	strb	r2, [r1, r6]
 80326b0:	6862      	ldr	r2, [r4, #4]
 80326b2:	3a01      	subs	r2, #1
 80326b4:	e9c4 3200 	strd	r3, r2, [r4]
 80326b8:	6a3b      	ldr	r3, [r7, #32]
 80326ba:	2b03      	cmp	r3, #3
 80326bc:	d102      	bne.n	80326c4 <__ssvfscanf_r+0x6d0>
 80326be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80326c0:	2b04      	cmp	r3, #4
 80326c2:	d005      	beq.n	80326d0 <__ssvfscanf_r+0x6dc>
 80326c4:	2208      	movs	r2, #8
 80326c6:	2100      	movs	r1, #0
 80326c8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80326cc:	f7fa f8d8 	bl	802c880 <memset>
 80326d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80326d4:	9300      	str	r3, [sp, #0]
 80326d6:	693b      	ldr	r3, [r7, #16]
 80326d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80326da:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80326de:	4629      	mov	r1, r5
 80326e0:	f002 fe58 	bl	8035394 <_mbrtowc_r>
 80326e4:	1c46      	adds	r6, r0, #1
 80326e6:	6238      	str	r0, [r7, #32]
 80326e8:	f43f ad46 	beq.w	8032178 <__ssvfscanf_r+0x184>
 80326ec:	2800      	cmp	r0, #0
 80326ee:	d14a      	bne.n	8032786 <__ssvfscanf_r+0x792>
 80326f0:	6028      	str	r0, [r5, #0]
 80326f2:	682e      	ldr	r6, [r5, #0]
 80326f4:	1c70      	adds	r0, r6, #1
 80326f6:	d056      	beq.n	80327a6 <__ssvfscanf_r+0x7b2>
 80326f8:	2208      	movs	r2, #8
 80326fa:	2100      	movs	r1, #0
 80326fc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032700:	f7fa f8be 	bl	802c880 <memset>
 8032704:	4b9a      	ldr	r3, [pc, #616]	@ (8032970 <__ssvfscanf_r+0x97c>)
 8032706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 803270c:	60bb      	str	r3, [r7, #8]
 803270e:	4632      	mov	r2, r6
 8032710:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032714:	68be      	ldr	r6, [r7, #8]
 8032716:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 803271a:	47b0      	blx	r6
 803271c:	2801      	cmp	r0, #1
 803271e:	d144      	bne.n	80327aa <__ssvfscanf_r+0x7b6>
 8032720:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8032724:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8032728:	5c9b      	ldrb	r3, [r3, r2]
 803272a:	2b00      	cmp	r3, #0
 803272c:	d148      	bne.n	80327c0 <__ssvfscanf_r+0x7cc>
 803272e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8032732:	693b      	ldr	r3, [r7, #16]
 8032734:	2b00      	cmp	r3, #0
 8032736:	d13a      	bne.n	80327ae <__ssvfscanf_r+0x7ba>
 8032738:	f1ba 0f00 	cmp.w	sl, #0
 803273c:	d115      	bne.n	803276a <__ssvfscanf_r+0x776>
 803273e:	f8c5 a000 	str.w	sl, [r5]
 8032742:	f1bb 0f00 	cmp.w	fp, #0
 8032746:	d00d      	beq.n	8032764 <__ssvfscanf_r+0x770>
 8032748:	eba5 0108 	sub.w	r1, r5, r8
 803274c:	108b      	asrs	r3, r1, #2
 803274e:	3301      	adds	r3, #1
 8032750:	4599      	cmp	r9, r3
 8032752:	d907      	bls.n	8032764 <__ssvfscanf_r+0x770>
 8032754:	f8db 0000 	ldr.w	r0, [fp]
 8032758:	3104      	adds	r1, #4
 803275a:	f001 fa61 	bl	8033c20 <realloc>
 803275e:	b108      	cbz	r0, 8032764 <__ssvfscanf_r+0x770>
 8032760:	f8cb 0000 	str.w	r0, [fp]
 8032764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032766:	3301      	adds	r3, #1
 8032768:	627b      	str	r3, [r7, #36]	@ 0x24
 803276a:	68fd      	ldr	r5, [r7, #12]
 803276c:	e45d      	b.n	803202a <__ssvfscanf_r+0x36>
 803276e:	f04f 0900 	mov.w	r9, #0
 8032772:	60fd      	str	r5, [r7, #12]
 8032774:	46c8      	mov	r8, r9
 8032776:	46cb      	mov	fp, r9
 8032778:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 803277c:	e78a      	b.n	8032694 <__ssvfscanf_r+0x6a0>
 803277e:	46d1      	mov	r9, sl
 8032780:	46d0      	mov	r8, sl
 8032782:	46d3      	mov	fp, sl
 8032784:	e786      	b.n	8032694 <__ssvfscanf_r+0x6a0>
 8032786:	6a3b      	ldr	r3, [r7, #32]
 8032788:	3302      	adds	r3, #2
 803278a:	d1b2      	bne.n	80326f2 <__ssvfscanf_r+0x6fe>
 803278c:	693e      	ldr	r6, [r7, #16]
 803278e:	6863      	ldr	r3, [r4, #4]
 8032790:	2b00      	cmp	r3, #0
 8032792:	dc40      	bgt.n	8032816 <__ssvfscanf_r+0x822>
 8032794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032796:	4621      	mov	r1, r4
 8032798:	f7fd fa77 	bl	802fc8a <__ssrefill_r>
 803279c:	2800      	cmp	r0, #0
 803279e:	d03a      	beq.n	8032816 <__ssvfscanf_r+0x822>
 80327a0:	2e00      	cmp	r6, #0
 80327a2:	d0c9      	beq.n	8032738 <__ssvfscanf_r+0x744>
 80327a4:	e4e8      	b.n	8032178 <__ssvfscanf_r+0x184>
 80327a6:	4632      	mov	r2, r6
 80327a8:	e7bc      	b.n	8032724 <__ssvfscanf_r+0x730>
 80327aa:	2200      	movs	r2, #0
 80327ac:	e7ba      	b.n	8032724 <__ssvfscanf_r+0x730>
 80327ae:	693b      	ldr	r3, [r7, #16]
 80327b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80327b2:	3b01      	subs	r3, #1
 80327b4:	4622      	mov	r2, r4
 80327b6:	5cf1      	ldrb	r1, [r6, r3]
 80327b8:	613b      	str	r3, [r7, #16]
 80327ba:	f7fd fa2b 	bl	802fc14 <_sungetc_r>
 80327be:	e7b8      	b.n	8032732 <__ssvfscanf_r+0x73e>
 80327c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80327c2:	693a      	ldr	r2, [r7, #16]
 80327c4:	4413      	add	r3, r2
 80327c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80327c8:	6a3b      	ldr	r3, [r7, #32]
 80327ca:	2b03      	cmp	r3, #3
 80327cc:	d102      	bne.n	80327d4 <__ssvfscanf_r+0x7e0>
 80327ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80327d0:	2b04      	cmp	r3, #4
 80327d2:	d002      	beq.n	80327da <__ssvfscanf_r+0x7e6>
 80327d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80327d6:	3b01      	subs	r3, #1
 80327d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80327da:	f1ba 0f00 	cmp.w	sl, #0
 80327de:	d118      	bne.n	8032812 <__ssvfscanf_r+0x81e>
 80327e0:	3504      	adds	r5, #4
 80327e2:	f1bb 0f00 	cmp.w	fp, #0
 80327e6:	d014      	beq.n	8032812 <__ssvfscanf_r+0x81e>
 80327e8:	eba5 0608 	sub.w	r6, r5, r8
 80327ec:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80327f0:	d80d      	bhi.n	803280e <__ssvfscanf_r+0x81a>
 80327f2:	4640      	mov	r0, r8
 80327f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80327f8:	f001 fa12 	bl	8033c20 <realloc>
 80327fc:	4680      	mov	r8, r0
 80327fe:	2800      	cmp	r0, #0
 8032800:	f43f adb3 	beq.w	803236a <__ssvfscanf_r+0x376>
 8032804:	1985      	adds	r5, r0, r6
 8032806:	f8cb 0000 	str.w	r0, [fp]
 803280a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 803280e:	4656      	mov	r6, sl
 8032810:	e7bd      	b.n	803278e <__ssvfscanf_r+0x79a>
 8032812:	2600      	movs	r6, #0
 8032814:	e7bb      	b.n	803278e <__ssvfscanf_r+0x79a>
 8032816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032818:	2b00      	cmp	r3, #0
 803281a:	f47f af3c 	bne.w	8032696 <__ssvfscanf_r+0x6a2>
 803281e:	e78b      	b.n	8032738 <__ssvfscanf_r+0x744>
 8032820:	f1ba 0f00 	cmp.w	sl, #0
 8032824:	d01e      	beq.n	8032864 <__ssvfscanf_r+0x870>
 8032826:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 803282a:	6823      	ldr	r3, [r4, #0]
 803282c:	781a      	ldrb	r2, [r3, #0]
 803282e:	5cb2      	ldrb	r2, [r6, r2]
 8032830:	b91a      	cbnz	r2, 803283a <__ssvfscanf_r+0x846>
 8032832:	f1b8 0f00 	cmp.w	r8, #0
 8032836:	d112      	bne.n	803285e <__ssvfscanf_r+0x86a>
 8032838:	e4d2      	b.n	80321e0 <__ssvfscanf_r+0x1ec>
 803283a:	3301      	adds	r3, #1
 803283c:	6862      	ldr	r2, [r4, #4]
 803283e:	6023      	str	r3, [r4, #0]
 8032840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032842:	f108 0801 	add.w	r8, r8, #1
 8032846:	3a01      	subs	r2, #1
 8032848:	4543      	cmp	r3, r8
 803284a:	6062      	str	r2, [r4, #4]
 803284c:	d007      	beq.n	803285e <__ssvfscanf_r+0x86a>
 803284e:	2a00      	cmp	r2, #0
 8032850:	dceb      	bgt.n	803282a <__ssvfscanf_r+0x836>
 8032852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032854:	4621      	mov	r1, r4
 8032856:	f7fd fa18 	bl	802fc8a <__ssrefill_r>
 803285a:	2800      	cmp	r0, #0
 803285c:	d0e5      	beq.n	803282a <__ssvfscanf_r+0x836>
 803285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032860:	4443      	add	r3, r8
 8032862:	e674      	b.n	803254e <__ssvfscanf_r+0x55a>
 8032864:	46a9      	mov	r9, r5
 8032866:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803286a:	f859 8b04 	ldr.w	r8, [r9], #4
 803286e:	d07d      	beq.n	803296c <__ssvfscanf_r+0x978>
 8032870:	f1b8 0f00 	cmp.w	r8, #0
 8032874:	f43f acb4 	beq.w	80321e0 <__ssvfscanf_r+0x1ec>
 8032878:	2020      	movs	r0, #32
 803287a:	f7fc fa47 	bl	802ed0c <malloc>
 803287e:	4606      	mov	r6, r0
 8032880:	2800      	cmp	r0, #0
 8032882:	f43f ac7e 	beq.w	8032182 <__ssvfscanf_r+0x18e>
 8032886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032888:	f8c8 0000 	str.w	r0, [r8]
 803288c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032890:	889d      	ldrh	r5, [r3, #4]
 8032892:	45aa      	cmp	sl, r5
 8032894:	d311      	bcc.n	80328ba <__ssvfscanf_r+0x8c6>
 8032896:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803289a:	429d      	cmp	r5, r3
 803289c:	f200 8512 	bhi.w	80332c4 <__ssvfscanf_r+0x12d0>
 80328a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80328a2:	3508      	adds	r5, #8
 80328a4:	b2ad      	uxth	r5, r5
 80328a6:	6818      	ldr	r0, [r3, #0]
 80328a8:	00a9      	lsls	r1, r5, #2
 80328aa:	f001 f9b9 	bl	8033c20 <realloc>
 80328ae:	2800      	cmp	r0, #0
 80328b0:	f000 8508 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 80328b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80328b6:	6018      	str	r0, [r3, #0]
 80328b8:	809d      	strh	r5, [r3, #4]
 80328ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80328bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80328be:	681b      	ldr	r3, [r3, #0]
 80328c0:	f10a 0201 	add.w	r2, sl, #1
 80328c4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 80328c8:	80ca      	strh	r2, [r1, #6]
 80328ca:	46c2      	mov	sl, r8
 80328cc:	46b0      	mov	r8, r6
 80328ce:	2620      	movs	r6, #32
 80328d0:	4645      	mov	r5, r8
 80328d2:	6823      	ldr	r3, [r4, #0]
 80328d4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80328d8:	781a      	ldrb	r2, [r3, #0]
 80328da:	5c8a      	ldrb	r2, [r1, r2]
 80328dc:	b35a      	cbz	r2, 8032936 <__ssvfscanf_r+0x942>
 80328de:	6862      	ldr	r2, [r4, #4]
 80328e0:	3a01      	subs	r2, #1
 80328e2:	6062      	str	r2, [r4, #4]
 80328e4:	1c5a      	adds	r2, r3, #1
 80328e6:	6022      	str	r2, [r4, #0]
 80328e8:	781b      	ldrb	r3, [r3, #0]
 80328ea:	f808 3b01 	strb.w	r3, [r8], #1
 80328ee:	f1ba 0f00 	cmp.w	sl, #0
 80328f2:	d010      	beq.n	8032916 <__ssvfscanf_r+0x922>
 80328f4:	eba8 0b05 	sub.w	fp, r8, r5
 80328f8:	45b3      	cmp	fp, r6
 80328fa:	d30c      	bcc.n	8032916 <__ssvfscanf_r+0x922>
 80328fc:	0076      	lsls	r6, r6, #1
 80328fe:	4628      	mov	r0, r5
 8032900:	4631      	mov	r1, r6
 8032902:	f001 f98d 	bl	8033c20 <realloc>
 8032906:	4605      	mov	r5, r0
 8032908:	2800      	cmp	r0, #0
 803290a:	f43f ac3a 	beq.w	8032182 <__ssvfscanf_r+0x18e>
 803290e:	eb00 080b 	add.w	r8, r0, fp
 8032912:	f8ca 0000 	str.w	r0, [sl]
 8032916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032918:	3b01      	subs	r3, #1
 803291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803291c:	d00b      	beq.n	8032936 <__ssvfscanf_r+0x942>
 803291e:	6863      	ldr	r3, [r4, #4]
 8032920:	2b00      	cmp	r3, #0
 8032922:	dcd6      	bgt.n	80328d2 <__ssvfscanf_r+0x8de>
 8032924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032926:	4621      	mov	r1, r4
 8032928:	f7fd f9af 	bl	802fc8a <__ssrefill_r>
 803292c:	2800      	cmp	r0, #0
 803292e:	d0d0      	beq.n	80328d2 <__ssvfscanf_r+0x8de>
 8032930:	45a8      	cmp	r8, r5
 8032932:	f43f ac21 	beq.w	8032178 <__ssvfscanf_r+0x184>
 8032936:	ebb8 0505 	subs.w	r5, r8, r5
 803293a:	f43f ac51 	beq.w	80321e0 <__ssvfscanf_r+0x1ec>
 803293e:	2300      	movs	r3, #0
 8032940:	f888 3000 	strb.w	r3, [r8]
 8032944:	f1ba 0f00 	cmp.w	sl, #0
 8032948:	d009      	beq.n	803295e <__ssvfscanf_r+0x96a>
 803294a:	1c69      	adds	r1, r5, #1
 803294c:	428e      	cmp	r6, r1
 803294e:	d906      	bls.n	803295e <__ssvfscanf_r+0x96a>
 8032950:	f8da 0000 	ldr.w	r0, [sl]
 8032954:	f001 f964 	bl	8033c20 <realloc>
 8032958:	b108      	cbz	r0, 803295e <__ssvfscanf_r+0x96a>
 803295a:	f8ca 0000 	str.w	r0, [sl]
 803295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032960:	3301      	adds	r3, #1
 8032962:	627b      	str	r3, [r7, #36]	@ 0x24
 8032964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032966:	442b      	add	r3, r5
 8032968:	633b      	str	r3, [r7, #48]	@ 0x30
 803296a:	e64a      	b.n	8032602 <__ssvfscanf_r+0x60e>
 803296c:	46b2      	mov	sl, r6
 803296e:	e7af      	b.n	80328d0 <__ssvfscanf_r+0x8dc>
 8032970:	2000016c 	.word	0x2000016c
 8032974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032976:	2b00      	cmp	r3, #0
 8032978:	bf08      	it	eq
 803297a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 803297e:	f016 0901 	ands.w	r9, r6, #1
 8032982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032984:	f006 0810 	and.w	r8, r6, #16
 8032988:	f000 80ef 	beq.w	8032b6a <__ssvfscanf_r+0xb76>
 803298c:	f1b8 0f00 	cmp.w	r8, #0
 8032990:	f040 8098 	bne.w	8032ac4 <__ssvfscanf_r+0xad0>
 8032994:	462b      	mov	r3, r5
 8032996:	0631      	lsls	r1, r6, #24
 8032998:	f853 5b04 	ldr.w	r5, [r3], #4
 803299c:	613b      	str	r3, [r7, #16]
 803299e:	f140 8099 	bpl.w	8032ad4 <__ssvfscanf_r+0xae0>
 80329a2:	2d00      	cmp	r5, #0
 80329a4:	f43f ace4 	beq.w	8032370 <__ssvfscanf_r+0x37c>
 80329a8:	2080      	movs	r0, #128	@ 0x80
 80329aa:	f7fc f9af 	bl	802ed0c <malloc>
 80329ae:	4606      	mov	r6, r0
 80329b0:	2800      	cmp	r0, #0
 80329b2:	f43f acda 	beq.w	803236a <__ssvfscanf_r+0x376>
 80329b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329b8:	6028      	str	r0, [r5, #0]
 80329ba:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80329be:	889b      	ldrh	r3, [r3, #4]
 80329c0:	4599      	cmp	r9, r3
 80329c2:	d314      	bcc.n	80329ee <__ssvfscanf_r+0x9fa>
 80329c4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80329c8:	4293      	cmp	r3, r2
 80329ca:	f200 847b 	bhi.w	80332c4 <__ssvfscanf_r+0x12d0>
 80329ce:	3308      	adds	r3, #8
 80329d0:	fa1f fa83 	uxth.w	sl, r3
 80329d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329d6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80329da:	6818      	ldr	r0, [r3, #0]
 80329dc:	f001 f920 	bl	8033c20 <realloc>
 80329e0:	2800      	cmp	r0, #0
 80329e2:	f000 846f 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 80329e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329e8:	6018      	str	r0, [r3, #0]
 80329ea:	f8a3 a004 	strh.w	sl, [r3, #4]
 80329ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80329f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80329f2:	681b      	ldr	r3, [r3, #0]
 80329f4:	f109 0201 	add.w	r2, r9, #1
 80329f8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80329fc:	46aa      	mov	sl, r5
 80329fe:	80ca      	strh	r2, [r1, #6]
 8032a00:	4635      	mov	r5, r6
 8032a02:	f04f 0920 	mov.w	r9, #32
 8032a06:	2300      	movs	r3, #0
 8032a08:	6822      	ldr	r2, [r4, #0]
 8032a0a:	49a7      	ldr	r1, [pc, #668]	@ (8032ca8 <__ssvfscanf_r+0xcb4>)
 8032a0c:	7812      	ldrb	r2, [r2, #0]
 8032a0e:	5c8a      	ldrb	r2, [r1, r2]
 8032a10:	0710      	lsls	r0, r2, #28
 8032a12:	d43c      	bmi.n	8032a8e <__ssvfscanf_r+0xa9a>
 8032a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032a16:	2a00      	cmp	r2, #0
 8032a18:	d039      	beq.n	8032a8e <__ssvfscanf_r+0xa9a>
 8032a1a:	60fb      	str	r3, [r7, #12]
 8032a1c:	f7fb f8b8 	bl	802db90 <__locale_mb_cur_max>
 8032a20:	68fb      	ldr	r3, [r7, #12]
 8032a22:	4298      	cmp	r0, r3
 8032a24:	f43f aba8 	beq.w	8032178 <__ssvfscanf_r+0x184>
 8032a28:	6822      	ldr	r2, [r4, #0]
 8032a2a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032a2e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8032a32:	54c8      	strb	r0, [r1, r3]
 8032a34:	f103 0b01 	add.w	fp, r3, #1
 8032a38:	6863      	ldr	r3, [r4, #4]
 8032a3a:	3b01      	subs	r3, #1
 8032a3c:	e9c4 2300 	strd	r2, r3, [r4]
 8032a40:	6a3b      	ldr	r3, [r7, #32]
 8032a42:	2b03      	cmp	r3, #3
 8032a44:	d102      	bne.n	8032a4c <__ssvfscanf_r+0xa58>
 8032a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8032a48:	2b04      	cmp	r3, #4
 8032a4a:	d005      	beq.n	8032a58 <__ssvfscanf_r+0xa64>
 8032a4c:	2208      	movs	r2, #8
 8032a4e:	2100      	movs	r1, #0
 8032a50:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8032a54:	f7f9 ff14 	bl	802c880 <memset>
 8032a58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8032a5c:	9300      	str	r3, [sp, #0]
 8032a5e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8032a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032a64:	465b      	mov	r3, fp
 8032a66:	4629      	mov	r1, r5
 8032a68:	f002 fc94 	bl	8035394 <_mbrtowc_r>
 8032a6c:	1c42      	adds	r2, r0, #1
 8032a6e:	6238      	str	r0, [r7, #32]
 8032a70:	f43f ab82 	beq.w	8032178 <__ssvfscanf_r+0x184>
 8032a74:	bb90      	cbnz	r0, 8032adc <__ssvfscanf_r+0xae8>
 8032a76:	6028      	str	r0, [r5, #0]
 8032a78:	6828      	ldr	r0, [r5, #0]
 8032a7a:	f002 fca5 	bl	80353c8 <iswspace>
 8032a7e:	4603      	mov	r3, r0
 8032a80:	2800      	cmp	r0, #0
 8032a82:	d047      	beq.n	8032b14 <__ssvfscanf_r+0xb20>
 8032a84:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032a88:	f1bb 0f00 	cmp.w	fp, #0
 8032a8c:	d139      	bne.n	8032b02 <__ssvfscanf_r+0xb0e>
 8032a8e:	f1b8 0f00 	cmp.w	r8, #0
 8032a92:	d114      	bne.n	8032abe <__ssvfscanf_r+0xaca>
 8032a94:	f8c5 8000 	str.w	r8, [r5]
 8032a98:	f1ba 0f00 	cmp.w	sl, #0
 8032a9c:	d00c      	beq.n	8032ab8 <__ssvfscanf_r+0xac4>
 8032a9e:	1ba9      	subs	r1, r5, r6
 8032aa0:	108b      	asrs	r3, r1, #2
 8032aa2:	3301      	adds	r3, #1
 8032aa4:	4599      	cmp	r9, r3
 8032aa6:	d907      	bls.n	8032ab8 <__ssvfscanf_r+0xac4>
 8032aa8:	f8da 0000 	ldr.w	r0, [sl]
 8032aac:	3104      	adds	r1, #4
 8032aae:	f001 f8b7 	bl	8033c20 <realloc>
 8032ab2:	b108      	cbz	r0, 8032ab8 <__ssvfscanf_r+0xac4>
 8032ab4:	f8ca 0000 	str.w	r0, [sl]
 8032ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032aba:	3301      	adds	r3, #1
 8032abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8032abe:	693d      	ldr	r5, [r7, #16]
 8032ac0:	f7ff bab3 	b.w	803202a <__ssvfscanf_r+0x36>
 8032ac4:	f04f 0900 	mov.w	r9, #0
 8032ac8:	613d      	str	r5, [r7, #16]
 8032aca:	464e      	mov	r6, r9
 8032acc:	46ca      	mov	sl, r9
 8032ace:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032ad2:	e798      	b.n	8032a06 <__ssvfscanf_r+0xa12>
 8032ad4:	46c1      	mov	r9, r8
 8032ad6:	4646      	mov	r6, r8
 8032ad8:	46c2      	mov	sl, r8
 8032ada:	e794      	b.n	8032a06 <__ssvfscanf_r+0xa12>
 8032adc:	6a3b      	ldr	r3, [r7, #32]
 8032ade:	3302      	adds	r3, #2
 8032ae0:	d1ca      	bne.n	8032a78 <__ssvfscanf_r+0xa84>
 8032ae2:	465b      	mov	r3, fp
 8032ae4:	6862      	ldr	r2, [r4, #4]
 8032ae6:	2a00      	cmp	r2, #0
 8032ae8:	dc8e      	bgt.n	8032a08 <__ssvfscanf_r+0xa14>
 8032aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032aec:	60fb      	str	r3, [r7, #12]
 8032aee:	4621      	mov	r1, r4
 8032af0:	f7fd f8cb 	bl	802fc8a <__ssrefill_r>
 8032af4:	68fb      	ldr	r3, [r7, #12]
 8032af6:	2800      	cmp	r0, #0
 8032af8:	d086      	beq.n	8032a08 <__ssvfscanf_r+0xa14>
 8032afa:	2b00      	cmp	r3, #0
 8032afc:	f47f ab3c 	bne.w	8032178 <__ssvfscanf_r+0x184>
 8032b00:	e7c5      	b.n	8032a8e <__ssvfscanf_r+0xa9a>
 8032b02:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b08:	f813 100b 	ldrb.w	r1, [r3, fp]
 8032b0c:	4622      	mov	r2, r4
 8032b0e:	f7fd f881 	bl	802fc14 <_sungetc_r>
 8032b12:	e7b7      	b.n	8032a84 <__ssvfscanf_r+0xa90>
 8032b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032b16:	445a      	add	r2, fp
 8032b18:	633a      	str	r2, [r7, #48]	@ 0x30
 8032b1a:	6a3a      	ldr	r2, [r7, #32]
 8032b1c:	2a03      	cmp	r2, #3
 8032b1e:	d102      	bne.n	8032b26 <__ssvfscanf_r+0xb32>
 8032b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032b22:	2a04      	cmp	r2, #4
 8032b24:	d002      	beq.n	8032b2c <__ssvfscanf_r+0xb38>
 8032b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032b28:	3a01      	subs	r2, #1
 8032b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8032b2c:	f1b8 0f00 	cmp.w	r8, #0
 8032b30:	d1d8      	bne.n	8032ae4 <__ssvfscanf_r+0xaf0>
 8032b32:	3504      	adds	r5, #4
 8032b34:	f1ba 0f00 	cmp.w	sl, #0
 8032b38:	d015      	beq.n	8032b66 <__ssvfscanf_r+0xb72>
 8032b3a:	eba5 0b06 	sub.w	fp, r5, r6
 8032b3e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8032b42:	d80e      	bhi.n	8032b62 <__ssvfscanf_r+0xb6e>
 8032b44:	4630      	mov	r0, r6
 8032b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8032b4a:	f001 f869 	bl	8033c20 <realloc>
 8032b4e:	4606      	mov	r6, r0
 8032b50:	2800      	cmp	r0, #0
 8032b52:	f43f ac0a 	beq.w	803236a <__ssvfscanf_r+0x376>
 8032b56:	eb00 050b 	add.w	r5, r0, fp
 8032b5a:	f8ca 0000 	str.w	r0, [sl]
 8032b5e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8032b62:	4643      	mov	r3, r8
 8032b64:	e7be      	b.n	8032ae4 <__ssvfscanf_r+0xaf0>
 8032b66:	4653      	mov	r3, sl
 8032b68:	e7bc      	b.n	8032ae4 <__ssvfscanf_r+0xaf0>
 8032b6a:	f1b8 0f00 	cmp.w	r8, #0
 8032b6e:	d01a      	beq.n	8032ba6 <__ssvfscanf_r+0xbb2>
 8032b70:	4e4d      	ldr	r6, [pc, #308]	@ (8032ca8 <__ssvfscanf_r+0xcb4>)
 8032b72:	6823      	ldr	r3, [r4, #0]
 8032b74:	781a      	ldrb	r2, [r3, #0]
 8032b76:	5cb2      	ldrb	r2, [r6, r2]
 8032b78:	0711      	lsls	r1, r2, #28
 8032b7a:	d411      	bmi.n	8032ba0 <__ssvfscanf_r+0xbac>
 8032b7c:	3301      	adds	r3, #1
 8032b7e:	6862      	ldr	r2, [r4, #4]
 8032b80:	6023      	str	r3, [r4, #0]
 8032b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032b84:	f109 0901 	add.w	r9, r9, #1
 8032b88:	3a01      	subs	r2, #1
 8032b8a:	454b      	cmp	r3, r9
 8032b8c:	6062      	str	r2, [r4, #4]
 8032b8e:	d007      	beq.n	8032ba0 <__ssvfscanf_r+0xbac>
 8032b90:	2a00      	cmp	r2, #0
 8032b92:	dcee      	bgt.n	8032b72 <__ssvfscanf_r+0xb7e>
 8032b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032b96:	4621      	mov	r1, r4
 8032b98:	f7fd f877 	bl	802fc8a <__ssrefill_r>
 8032b9c:	2800      	cmp	r0, #0
 8032b9e:	d0e8      	beq.n	8032b72 <__ssvfscanf_r+0xb7e>
 8032ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032ba2:	444b      	add	r3, r9
 8032ba4:	e4d3      	b.n	803254e <__ssvfscanf_r+0x55a>
 8032ba6:	46a8      	mov	r8, r5
 8032ba8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8032bac:	f858 5b04 	ldr.w	r5, [r8], #4
 8032bb0:	d077      	beq.n	8032ca2 <__ssvfscanf_r+0xcae>
 8032bb2:	2d00      	cmp	r5, #0
 8032bb4:	f43f ab14 	beq.w	80321e0 <__ssvfscanf_r+0x1ec>
 8032bb8:	2020      	movs	r0, #32
 8032bba:	f7fc f8a7 	bl	802ed0c <malloc>
 8032bbe:	4681      	mov	r9, r0
 8032bc0:	2800      	cmp	r0, #0
 8032bc2:	f43f aade 	beq.w	8032182 <__ssvfscanf_r+0x18e>
 8032bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032bc8:	6028      	str	r0, [r5, #0]
 8032bca:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032bce:	889e      	ldrh	r6, [r3, #4]
 8032bd0:	45b2      	cmp	sl, r6
 8032bd2:	d311      	bcc.n	8032bf8 <__ssvfscanf_r+0xc04>
 8032bd4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032bd8:	429e      	cmp	r6, r3
 8032bda:	f200 8373 	bhi.w	80332c4 <__ssvfscanf_r+0x12d0>
 8032bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032be0:	3608      	adds	r6, #8
 8032be2:	b2b6      	uxth	r6, r6
 8032be4:	6818      	ldr	r0, [r3, #0]
 8032be6:	00b1      	lsls	r1, r6, #2
 8032be8:	f001 f81a 	bl	8033c20 <realloc>
 8032bec:	2800      	cmp	r0, #0
 8032bee:	f000 8369 	beq.w	80332c4 <__ssvfscanf_r+0x12d0>
 8032bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032bf4:	6018      	str	r0, [r3, #0]
 8032bf6:	809e      	strh	r6, [r3, #4]
 8032bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032bfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032bfc:	681b      	ldr	r3, [r3, #0]
 8032bfe:	f10a 0201 	add.w	r2, sl, #1
 8032c02:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032c06:	80ca      	strh	r2, [r1, #6]
 8032c08:	46aa      	mov	sl, r5
 8032c0a:	2620      	movs	r6, #32
 8032c0c:	464d      	mov	r5, r9
 8032c0e:	46a9      	mov	r9, r5
 8032c10:	6823      	ldr	r3, [r4, #0]
 8032c12:	4925      	ldr	r1, [pc, #148]	@ (8032ca8 <__ssvfscanf_r+0xcb4>)
 8032c14:	781a      	ldrb	r2, [r3, #0]
 8032c16:	5c8a      	ldrb	r2, [r1, r2]
 8032c18:	0712      	lsls	r2, r2, #28
 8032c1a:	d428      	bmi.n	8032c6e <__ssvfscanf_r+0xc7a>
 8032c1c:	6862      	ldr	r2, [r4, #4]
 8032c1e:	3a01      	subs	r2, #1
 8032c20:	6062      	str	r2, [r4, #4]
 8032c22:	1c5a      	adds	r2, r3, #1
 8032c24:	6022      	str	r2, [r4, #0]
 8032c26:	781b      	ldrb	r3, [r3, #0]
 8032c28:	f805 3b01 	strb.w	r3, [r5], #1
 8032c2c:	f1ba 0f00 	cmp.w	sl, #0
 8032c30:	d010      	beq.n	8032c54 <__ssvfscanf_r+0xc60>
 8032c32:	eba5 0b09 	sub.w	fp, r5, r9
 8032c36:	45b3      	cmp	fp, r6
 8032c38:	d30c      	bcc.n	8032c54 <__ssvfscanf_r+0xc60>
 8032c3a:	0076      	lsls	r6, r6, #1
 8032c3c:	4648      	mov	r0, r9
 8032c3e:	4631      	mov	r1, r6
 8032c40:	f000 ffee 	bl	8033c20 <realloc>
 8032c44:	4681      	mov	r9, r0
 8032c46:	2800      	cmp	r0, #0
 8032c48:	f43f aa9b 	beq.w	8032182 <__ssvfscanf_r+0x18e>
 8032c4c:	eb00 050b 	add.w	r5, r0, fp
 8032c50:	f8ca 0000 	str.w	r0, [sl]
 8032c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032c56:	3b01      	subs	r3, #1
 8032c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032c5a:	d008      	beq.n	8032c6e <__ssvfscanf_r+0xc7a>
 8032c5c:	6863      	ldr	r3, [r4, #4]
 8032c5e:	2b00      	cmp	r3, #0
 8032c60:	dcd6      	bgt.n	8032c10 <__ssvfscanf_r+0xc1c>
 8032c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032c64:	4621      	mov	r1, r4
 8032c66:	f7fd f810 	bl	802fc8a <__ssrefill_r>
 8032c6a:	2800      	cmp	r0, #0
 8032c6c:	d0d0      	beq.n	8032c10 <__ssvfscanf_r+0xc1c>
 8032c6e:	2300      	movs	r3, #0
 8032c70:	702b      	strb	r3, [r5, #0]
 8032c72:	eba5 0509 	sub.w	r5, r5, r9
 8032c76:	f1ba 0f00 	cmp.w	sl, #0
 8032c7a:	d009      	beq.n	8032c90 <__ssvfscanf_r+0xc9c>
 8032c7c:	1c69      	adds	r1, r5, #1
 8032c7e:	428e      	cmp	r6, r1
 8032c80:	d906      	bls.n	8032c90 <__ssvfscanf_r+0xc9c>
 8032c82:	f8da 0000 	ldr.w	r0, [sl]
 8032c86:	f000 ffcb 	bl	8033c20 <realloc>
 8032c8a:	b108      	cbz	r0, 8032c90 <__ssvfscanf_r+0xc9c>
 8032c8c:	f8ca 0000 	str.w	r0, [sl]
 8032c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032c92:	442b      	add	r3, r5
 8032c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8032c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032c98:	3301      	adds	r3, #1
 8032c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8032c9c:	4645      	mov	r5, r8
 8032c9e:	f7ff b9c4 	b.w	803202a <__ssvfscanf_r+0x36>
 8032ca2:	46b2      	mov	sl, r6
 8032ca4:	e7b3      	b.n	8032c0e <__ssvfscanf_r+0xc1a>
 8032ca6:	bf00      	nop
 8032ca8:	0803bda1 	.word	0x0803bda1
 8032cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032cae:	3b01      	subs	r3, #1
 8032cb0:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032cb4:	bf81      	itttt	hi
 8032cb6:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032cb8:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 8032cbc:	eb03 090c 	addhi.w	r9, r3, ip
 8032cc0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8032cc4:	bf8c      	ite	hi
 8032cc6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8032cc8:	f04f 0900 	movls.w	r9, #0
 8032ccc:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8032cd0:	f04f 0a00 	mov.w	sl, #0
 8032cd4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8032cd8:	6822      	ldr	r2, [r4, #0]
 8032cda:	7813      	ldrb	r3, [r2, #0]
 8032cdc:	2b39      	cmp	r3, #57	@ 0x39
 8032cde:	d80f      	bhi.n	8032d00 <__ssvfscanf_r+0xd0c>
 8032ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8032ce2:	d91a      	bls.n	8032d1a <__ssvfscanf_r+0xd26>
 8032ce4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8032ce8:	290e      	cmp	r1, #14
 8032cea:	d816      	bhi.n	8032d1a <__ssvfscanf_r+0xd26>
 8032cec:	e8df f001 	tbb	[pc, r1]
 8032cf0:	15781578 	.word	0x15781578
 8032cf4:	68683f15 	.word	0x68683f15
 8032cf8:	68686868 	.word	0x68686868
 8032cfc:	7068      	.short	0x7068
 8032cfe:	70          	.byte	0x70
 8032cff:	00          	.byte	0x00
 8032d00:	2b66      	cmp	r3, #102	@ 0x66
 8032d02:	d832      	bhi.n	8032d6a <__ssvfscanf_r+0xd76>
 8032d04:	2b60      	cmp	r3, #96	@ 0x60
 8032d06:	d803      	bhi.n	8032d10 <__ssvfscanf_r+0xd1c>
 8032d08:	2b46      	cmp	r3, #70	@ 0x46
 8032d0a:	d804      	bhi.n	8032d16 <__ssvfscanf_r+0xd22>
 8032d0c:	2b40      	cmp	r3, #64	@ 0x40
 8032d0e:	d904      	bls.n	8032d1a <__ssvfscanf_r+0xd26>
 8032d10:	69f9      	ldr	r1, [r7, #28]
 8032d12:	290a      	cmp	r1, #10
 8032d14:	e062      	b.n	8032ddc <__ssvfscanf_r+0xde8>
 8032d16:	2b58      	cmp	r3, #88	@ 0x58
 8032d18:	d068      	beq.n	8032dec <__ssvfscanf_r+0xdf8>
 8032d1a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8032d1e:	d011      	beq.n	8032d44 <__ssvfscanf_r+0xd50>
 8032d20:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032d24:	4598      	cmp	r8, r3
 8032d26:	d908      	bls.n	8032d3a <__ssvfscanf_r+0xd46>
 8032d28:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8032d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032d2e:	4622      	mov	r2, r4
 8032d30:	f7fc ff70 	bl	802fc14 <_sungetc_r>
 8032d34:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8032d38:	46c8      	mov	r8, r9
 8032d3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032d3e:	4598      	cmp	r8, r3
 8032d40:	f43f aa4e 	beq.w	80321e0 <__ssvfscanf_r+0x1ec>
 8032d44:	f01b 0210 	ands.w	r2, fp, #16
 8032d48:	d16c      	bne.n	8032e24 <__ssvfscanf_r+0xe30>
 8032d4a:	69fb      	ldr	r3, [r7, #28]
 8032d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032d4e:	69be      	ldr	r6, [r7, #24]
 8032d50:	f888 2000 	strb.w	r2, [r8]
 8032d54:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032d58:	47b0      	blx	r6
 8032d5a:	f01b 0f20 	tst.w	fp, #32
 8032d5e:	f105 0904 	add.w	r9, r5, #4
 8032d62:	d056      	beq.n	8032e12 <__ssvfscanf_r+0xe1e>
 8032d64:	682b      	ldr	r3, [r5, #0]
 8032d66:	6018      	str	r0, [r3, #0]
 8032d68:	e058      	b.n	8032e1c <__ssvfscanf_r+0xe28>
 8032d6a:	2b78      	cmp	r3, #120	@ 0x78
 8032d6c:	e7d4      	b.n	8032d18 <__ssvfscanf_r+0xd24>
 8032d6e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8032d72:	d00a      	beq.n	8032d8a <__ssvfscanf_r+0xd96>
 8032d74:	69f9      	ldr	r1, [r7, #28]
 8032d76:	b919      	cbnz	r1, 8032d80 <__ssvfscanf_r+0xd8c>
 8032d78:	2108      	movs	r1, #8
 8032d7a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 8032d7e:	61f9      	str	r1, [r7, #28]
 8032d80:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8032d84:	d004      	beq.n	8032d90 <__ssvfscanf_r+0xd9c>
 8032d86:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8032d8a:	f808 3b01 	strb.w	r3, [r8], #1
 8032d8e:	e00b      	b.n	8032da8 <__ssvfscanf_r+0xdb4>
 8032d90:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8032d94:	f1b9 0f00 	cmp.w	r9, #0
 8032d98:	d004      	beq.n	8032da4 <__ssvfscanf_r+0xdb0>
 8032d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032d9c:	3301      	adds	r3, #1
 8032d9e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8032da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032da4:	f10a 0a01 	add.w	sl, sl, #1
 8032da8:	6863      	ldr	r3, [r4, #4]
 8032daa:	3b01      	subs	r3, #1
 8032dac:	2b00      	cmp	r3, #0
 8032dae:	6063      	str	r3, [r4, #4]
 8032db0:	dd28      	ble.n	8032e04 <__ssvfscanf_r+0xe10>
 8032db2:	3201      	adds	r2, #1
 8032db4:	6022      	str	r2, [r4, #0]
 8032db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032db8:	3b01      	subs	r3, #1
 8032dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032dbc:	d18c      	bne.n	8032cd8 <__ssvfscanf_r+0xce4>
 8032dbe:	e7ac      	b.n	8032d1a <__ssvfscanf_r+0xd26>
 8032dc0:	69f8      	ldr	r0, [r7, #28]
 8032dc2:	499b      	ldr	r1, [pc, #620]	@ (8033030 <__ssvfscanf_r+0x103c>)
 8032dc4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032dc8:	61f9      	str	r1, [r7, #28]
 8032dca:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 8032dce:	e7dc      	b.n	8032d8a <__ssvfscanf_r+0xd96>
 8032dd0:	69f8      	ldr	r0, [r7, #28]
 8032dd2:	4997      	ldr	r1, [pc, #604]	@ (8033030 <__ssvfscanf_r+0x103c>)
 8032dd4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032dd8:	61f9      	str	r1, [r7, #28]
 8032dda:	2908      	cmp	r1, #8
 8032ddc:	dcf5      	bgt.n	8032dca <__ssvfscanf_r+0xdd6>
 8032dde:	e79c      	b.n	8032d1a <__ssvfscanf_r+0xd26>
 8032de0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8032de4:	d099      	beq.n	8032d1a <__ssvfscanf_r+0xd26>
 8032de6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8032dea:	e7ce      	b.n	8032d8a <__ssvfscanf_r+0xd96>
 8032dec:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8032df0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8032df4:	d191      	bne.n	8032d1a <__ssvfscanf_r+0xd26>
 8032df6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 8032dfa:	2110      	movs	r1, #16
 8032dfc:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8032e00:	61f9      	str	r1, [r7, #28]
 8032e02:	e7c2      	b.n	8032d8a <__ssvfscanf_r+0xd96>
 8032e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e06:	4621      	mov	r1, r4
 8032e08:	f7fc ff3f 	bl	802fc8a <__ssrefill_r>
 8032e0c:	2800      	cmp	r0, #0
 8032e0e:	d0d2      	beq.n	8032db6 <__ssvfscanf_r+0xdc2>
 8032e10:	e783      	b.n	8032d1a <__ssvfscanf_r+0xd26>
 8032e12:	f01b 0f08 	tst.w	fp, #8
 8032e16:	d00b      	beq.n	8032e30 <__ssvfscanf_r+0xe3c>
 8032e18:	682b      	ldr	r3, [r5, #0]
 8032e1a:	7018      	strb	r0, [r3, #0]
 8032e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032e1e:	3301      	adds	r3, #1
 8032e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8032e22:	464d      	mov	r5, r9
 8032e24:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032e28:	eba8 0803 	sub.w	r8, r8, r3
 8032e2c:	44d0      	add	r8, sl
 8032e2e:	e516      	b.n	803285e <__ssvfscanf_r+0x86a>
 8032e30:	f01b 0f04 	tst.w	fp, #4
 8032e34:	d002      	beq.n	8032e3c <__ssvfscanf_r+0xe48>
 8032e36:	682b      	ldr	r3, [r5, #0]
 8032e38:	8018      	strh	r0, [r3, #0]
 8032e3a:	e7ef      	b.n	8032e1c <__ssvfscanf_r+0xe28>
 8032e3c:	f01b 0201 	ands.w	r2, fp, #1
 8032e40:	d190      	bne.n	8032d64 <__ssvfscanf_r+0xd70>
 8032e42:	f01b 0f02 	tst.w	fp, #2
 8032e46:	d08d      	beq.n	8032d64 <__ssvfscanf_r+0xd70>
 8032e48:	4b7a      	ldr	r3, [pc, #488]	@ (8033034 <__ssvfscanf_r+0x1040>)
 8032e4a:	69b9      	ldr	r1, [r7, #24]
 8032e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e4e:	4299      	cmp	r1, r3
 8032e50:	69fb      	ldr	r3, [r7, #28]
 8032e52:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032e56:	d105      	bne.n	8032e64 <__ssvfscanf_r+0xe70>
 8032e58:	f002 fa9a 	bl	8035390 <_strtoull_r>
 8032e5c:	682b      	ldr	r3, [r5, #0]
 8032e5e:	e9c3 0100 	strd	r0, r1, [r3]
 8032e62:	e7db      	b.n	8032e1c <__ssvfscanf_r+0xe28>
 8032e64:	f002 f9e8 	bl	8035238 <_strtoll_r>
 8032e68:	e7f8      	b.n	8032e5c <__ssvfscanf_r+0xe68>
 8032e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032e6c:	f7fa fe96 	bl	802db9c <_localeconv_r>
 8032e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032e72:	6802      	ldr	r2, [r0, #0]
 8032e74:	3b01      	subs	r3, #1
 8032e76:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032e7a:	f04f 0800 	mov.w	r8, #0
 8032e7e:	bf88      	it	hi
 8032e80:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032e82:	f8c7 8010 	str.w	r8, [r7, #16]
 8032e86:	e9c7 8802 	strd	r8, r8, [r7, #8]
 8032e8a:	bf81      	itttt	hi
 8032e8c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8032e90:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8032e94:	181b      	addhi	r3, r3, r0
 8032e96:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032e98:	bf98      	it	ls
 8032e9a:	2300      	movls	r3, #0
 8032e9c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8032ea0:	46c3      	mov	fp, r8
 8032ea2:	46c2      	mov	sl, r8
 8032ea4:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8032ea8:	6821      	ldr	r1, [r4, #0]
 8032eaa:	6079      	str	r1, [r7, #4]
 8032eac:	7808      	ldrb	r0, [r1, #0]
 8032eae:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8032eb2:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8032eb6:	f200 8123 	bhi.w	8033100 <__ssvfscanf_r+0x110c>
 8032eba:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8032ebe:	0089      	.short	0x0089
 8032ec0:	00890121 	.word	0x00890121
 8032ec4:	01210121 	.word	0x01210121
 8032ec8:	006f004f 	.word	0x006f004f
 8032ecc:	006f006f 	.word	0x006f006f
 8032ed0:	006f006f 	.word	0x006f006f
 8032ed4:	006f006f 	.word	0x006f006f
 8032ed8:	006f006f 	.word	0x006f006f
 8032edc:	01210121 	.word	0x01210121
 8032ee0:	01210121 	.word	0x01210121
 8032ee4:	01210121 	.word	0x01210121
 8032ee8:	00af0121 	.word	0x00af0121
 8032eec:	006d006d 	.word	0x006d006d
 8032ef0:	011e006d 	.word	0x011e006d
 8032ef4:	012100ed 	.word	0x012100ed
 8032ef8:	00d60121 	.word	0x00d60121
 8032efc:	01210121 	.word	0x01210121
 8032f00:	01210121 	.word	0x01210121
 8032f04:	01210090 	.word	0x01210090
 8032f08:	01210104 	.word	0x01210104
 8032f0c:	01210121 	.word	0x01210121
 8032f10:	012100f8 	.word	0x012100f8
 8032f14:	01210121 	.word	0x01210121
 8032f18:	00fe0073 	.word	0x00fe0073
 8032f1c:	01210121 	.word	0x01210121
 8032f20:	01210121 	.word	0x01210121
 8032f24:	01210121 	.word	0x01210121
 8032f28:	00af0121 	.word	0x00af0121
 8032f2c:	006d006d 	.word	0x006d006d
 8032f30:	011e006d 	.word	0x011e006d
 8032f34:	012100ed 	.word	0x012100ed
 8032f38:	00d60121 	.word	0x00d60121
 8032f3c:	01210121 	.word	0x01210121
 8032f40:	01210121 	.word	0x01210121
 8032f44:	01210090 	.word	0x01210090
 8032f48:	01210104 	.word	0x01210104
 8032f4c:	01210121 	.word	0x01210121
 8032f50:	012100f8 	.word	0x012100f8
 8032f54:	01210121 	.word	0x01210121
 8032f58:	00fe0073 	.word	0x00fe0073
 8032f5c:	05f1      	lsls	r1, r6, #23
 8032f5e:	d51d      	bpl.n	8032f9c <__ssvfscanf_r+0xfa8>
 8032f60:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8032f64:	f10a 0a01 	add.w	sl, sl, #1
 8032f68:	b11b      	cbz	r3, 8032f72 <__ssvfscanf_r+0xf7e>
 8032f6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8032f6c:	3001      	adds	r0, #1
 8032f6e:	3b01      	subs	r3, #1
 8032f70:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8032f72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8032f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032f76:	3001      	adds	r0, #1
 8032f78:	6338      	str	r0, [r7, #48]	@ 0x30
 8032f7a:	6860      	ldr	r0, [r4, #4]
 8032f7c:	3801      	subs	r0, #1
 8032f7e:	3901      	subs	r1, #1
 8032f80:	2800      	cmp	r0, #0
 8032f82:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8032f84:	6060      	str	r0, [r4, #4]
 8032f86:	f340 80cc 	ble.w	8033122 <__ssvfscanf_r+0x112e>
 8032f8a:	6879      	ldr	r1, [r7, #4]
 8032f8c:	3101      	adds	r1, #1
 8032f8e:	6021      	str	r1, [r4, #0]
 8032f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032f92:	2900      	cmp	r1, #0
 8032f94:	d188      	bne.n	8032ea8 <__ssvfscanf_r+0xeb4>
 8032f96:	e052      	b.n	803303e <__ssvfscanf_r+0x104a>
 8032f98:	0531      	lsls	r1, r6, #20
 8032f9a:	d550      	bpl.n	803303e <__ssvfscanf_r+0x104a>
 8032f9c:	eb1b 0c08 	adds.w	ip, fp, r8
 8032fa0:	d041      	beq.n	8033026 <__ssvfscanf_r+0x1032>
 8032fa2:	e04c      	b.n	803303e <__ssvfscanf_r+0x104a>
 8032fa4:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8032fa8:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8032fac:	d147      	bne.n	803303e <__ssvfscanf_r+0x104a>
 8032fae:	f1ba 0f01 	cmp.w	sl, #1
 8032fb2:	d144      	bne.n	803303e <__ssvfscanf_r+0x104a>
 8032fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032fb6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8032fba:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8032fbe:	3901      	subs	r1, #1
 8032fc0:	f809 cb01 	strb.w	ip, [r9], #1
 8032fc4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8032fc8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8032fca:	f04f 0a00 	mov.w	sl, #0
 8032fce:	e003      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 8032fd0:	0631      	lsls	r1, r6, #24
 8032fd2:	d534      	bpl.n	803303e <__ssvfscanf_r+0x104a>
 8032fd4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8032fd8:	f809 0b01 	strb.w	r0, [r9], #1
 8032fdc:	e7c9      	b.n	8032f72 <__ssvfscanf_r+0xf7e>
 8032fde:	f1bb 0f00 	cmp.w	fp, #0
 8032fe2:	d10c      	bne.n	8032ffe <__ssvfscanf_r+0x100a>
 8032fe4:	f1ba 0f00 	cmp.w	sl, #0
 8032fe8:	d10d      	bne.n	8033006 <__ssvfscanf_r+0x1012>
 8032fea:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8032fee:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8032ff2:	d108      	bne.n	8033006 <__ssvfscanf_r+0x1012>
 8032ff4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032ff8:	f04f 0b01 	mov.w	fp, #1
 8032ffc:	e7ec      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 8032ffe:	f1bb 0f02 	cmp.w	fp, #2
 8033002:	f000 8088 	beq.w	8033116 <__ssvfscanf_r+0x1122>
 8033006:	f1b8 0f01 	cmp.w	r8, #1
 803300a:	d002      	beq.n	8033012 <__ssvfscanf_r+0x101e>
 803300c:	f1b8 0f04 	cmp.w	r8, #4
 8033010:	d115      	bne.n	803303e <__ssvfscanf_r+0x104a>
 8033012:	f108 0801 	add.w	r8, r8, #1
 8033016:	fa5f f888 	uxtb.w	r8, r8
 803301a:	e7dd      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 803301c:	0531      	lsls	r1, r6, #20
 803301e:	d50b      	bpl.n	8033038 <__ssvfscanf_r+0x1044>
 8033020:	eb1b 0c08 	adds.w	ip, fp, r8
 8033024:	d108      	bne.n	8033038 <__ssvfscanf_r+0x1044>
 8033026:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803302a:	46e0      	mov	r8, ip
 803302c:	46e3      	mov	fp, ip
 803302e:	e7d3      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 8033030:	0803bf80 	.word	0x0803bf80
 8033034:	08034d89 	.word	0x08034d89
 8033038:	f1bb 0f01 	cmp.w	fp, #1
 803303c:	d06e      	beq.n	803311c <__ssvfscanf_r+0x1128>
 803303e:	f1ba 0f00 	cmp.w	sl, #0
 8033042:	d001      	beq.n	8033048 <__ssvfscanf_r+0x1054>
 8033044:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8033048:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 803304c:	f1bb 0f01 	cmp.w	fp, #1
 8033050:	d873      	bhi.n	803313a <__ssvfscanf_r+0x1146>
 8033052:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8033056:	45a9      	cmp	r9, r5
 8033058:	f67f a8c2 	bls.w	80321e0 <__ssvfscanf_r+0x1ec>
 803305c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033062:	4622      	mov	r2, r4
 8033064:	f7fc fdd6 	bl	802fc14 <_sungetc_r>
 8033068:	e7f5      	b.n	8033056 <__ssvfscanf_r+0x1062>
 803306a:	f1b8 0f00 	cmp.w	r8, #0
 803306e:	d10d      	bne.n	803308c <__ssvfscanf_r+0x1098>
 8033070:	f1ba 0f00 	cmp.w	sl, #0
 8033074:	d1e6      	bne.n	8033044 <__ssvfscanf_r+0x1050>
 8033076:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803307a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 803307e:	f040 8124 	bne.w	80332ca <__ssvfscanf_r+0x12d6>
 8033082:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8033086:	f04f 0801 	mov.w	r8, #1
 803308a:	e7a5      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 803308c:	f1b8 0f03 	cmp.w	r8, #3
 8033090:	d0bf      	beq.n	8033012 <__ssvfscanf_r+0x101e>
 8033092:	f1b8 0f05 	cmp.w	r8, #5
 8033096:	e7bb      	b.n	8033010 <__ssvfscanf_r+0x101c>
 8033098:	0531      	lsls	r1, r6, #20
 803309a:	d502      	bpl.n	80330a2 <__ssvfscanf_r+0x10ae>
 803309c:	eb1b 0c08 	adds.w	ip, fp, r8
 80330a0:	d0c1      	beq.n	8033026 <__ssvfscanf_r+0x1032>
 80330a2:	f1b8 0f02 	cmp.w	r8, #2
 80330a6:	d1ca      	bne.n	803303e <__ssvfscanf_r+0x104a>
 80330a8:	f04f 0803 	mov.w	r8, #3
 80330ac:	e794      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 80330ae:	f1b8 0f06 	cmp.w	r8, #6
 80330b2:	d1c4      	bne.n	803303e <__ssvfscanf_r+0x104a>
 80330b4:	f04f 0807 	mov.w	r8, #7
 80330b8:	e78e      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 80330ba:	f1b8 0f07 	cmp.w	r8, #7
 80330be:	d1be      	bne.n	803303e <__ssvfscanf_r+0x104a>
 80330c0:	f04f 0808 	mov.w	r8, #8
 80330c4:	e788      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 80330c6:	0531      	lsls	r1, r6, #20
 80330c8:	d5b9      	bpl.n	803303e <__ssvfscanf_r+0x104a>
 80330ca:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 80330ce:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 80330d2:	d005      	beq.n	80330e0 <__ssvfscanf_r+0x10ec>
 80330d4:	0571      	lsls	r1, r6, #21
 80330d6:	d5b2      	bpl.n	803303e <__ssvfscanf_r+0x104a>
 80330d8:	f1ba 0f00 	cmp.w	sl, #0
 80330dc:	f000 80f5 	beq.w	80332ca <__ssvfscanf_r+0x12d6>
 80330e0:	05b1      	lsls	r1, r6, #22
 80330e2:	bf58      	it	pl
 80330e4:	6939      	ldrpl	r1, [r7, #16]
 80330e6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 80330ea:	bf5c      	itt	pl
 80330ec:	ebaa 0101 	subpl.w	r1, sl, r1
 80330f0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 80330f4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 80330f8:	e767      	b.n	8032fca <__ssvfscanf_r+0xfd6>
 80330fa:	0531      	lsls	r1, r6, #20
 80330fc:	d5e5      	bpl.n	80330ca <__ssvfscanf_r+0x10d6>
 80330fe:	e74d      	b.n	8032f9c <__ssvfscanf_r+0xfa8>
 8033100:	f892 c000 	ldrb.w	ip, [r2]
 8033104:	4584      	cmp	ip, r0
 8033106:	d19a      	bne.n	803303e <__ssvfscanf_r+0x104a>
 8033108:	05b1      	lsls	r1, r6, #22
 803310a:	d598      	bpl.n	803303e <__ssvfscanf_r+0x104a>
 803310c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8033110:	f8c7 a010 	str.w	sl, [r7, #16]
 8033114:	e760      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 8033116:	f04f 0b03 	mov.w	fp, #3
 803311a:	e75d      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 803311c:	f04f 0b02 	mov.w	fp, #2
 8033120:	e75a      	b.n	8032fd8 <__ssvfscanf_r+0xfe4>
 8033122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033124:	4621      	mov	r1, r4
 8033126:	e9c7 2300 	strd	r2, r3, [r7]
 803312a:	f7fc fdae 	bl	802fc8a <__ssrefill_r>
 803312e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033132:	2800      	cmp	r0, #0
 8033134:	f43f af2c 	beq.w	8032f90 <__ssvfscanf_r+0xf9c>
 8033138:	e781      	b.n	803303e <__ssvfscanf_r+0x104a>
 803313a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 803313e:	2b06      	cmp	r3, #6
 8033140:	d827      	bhi.n	8033192 <__ssvfscanf_r+0x119e>
 8033142:	f1b8 0f02 	cmp.w	r8, #2
 8033146:	d834      	bhi.n	80331b2 <__ssvfscanf_r+0x11be>
 8033148:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803314c:	45a9      	cmp	r9, r5
 803314e:	f67f a847 	bls.w	80321e0 <__ssvfscanf_r+0x1ec>
 8033152:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8033156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033158:	4622      	mov	r2, r4
 803315a:	f7fc fd5b 	bl	802fc14 <_sungetc_r>
 803315e:	e7f5      	b.n	803314c <__ssvfscanf_r+0x1158>
 8033160:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8033164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8033168:	4622      	mov	r2, r4
 803316a:	f7fc fd53 	bl	802fc14 <_sungetc_r>
 803316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8033170:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8033174:	fa5f fb8b 	uxtb.w	fp, fp
 8033178:	f1bb 0f02 	cmp.w	fp, #2
 803317c:	d1f0      	bne.n	8033160 <__ssvfscanf_r+0x116c>
 803317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8033180:	f1a8 0803 	sub.w	r8, r8, #3
 8033184:	fa5f f888 	uxtb.w	r8, r8
 8033188:	eba3 0308 	sub.w	r3, r3, r8
 803318c:	eba9 0908 	sub.w	r9, r9, r8
 8033190:	633b      	str	r3, [r7, #48]	@ 0x30
 8033192:	05f3      	lsls	r3, r6, #23
 8033194:	d52d      	bpl.n	80331f2 <__ssvfscanf_r+0x11fe>
 8033196:	0570      	lsls	r0, r6, #21
 8033198:	d50e      	bpl.n	80331b8 <__ssvfscanf_r+0x11c4>
 803319a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803319e:	45a9      	cmp	r9, r5
 80331a0:	f67f a81e 	bls.w	80321e0 <__ssvfscanf_r+0x1ec>
 80331a4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80331a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80331aa:	4622      	mov	r2, r4
 80331ac:	f7fc fd32 	bl	802fc14 <_sungetc_r>
 80331b0:	e7f5      	b.n	803319e <__ssvfscanf_r+0x11aa>
 80331b2:	46c3      	mov	fp, r8
 80331b4:	464b      	mov	r3, r9
 80331b6:	e7db      	b.n	8033170 <__ssvfscanf_r+0x117c>
 80331b8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80331bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80331be:	2965      	cmp	r1, #101	@ 0x65
 80331c0:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 80331c4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80331c8:	d00c      	beq.n	80331e4 <__ssvfscanf_r+0x11f0>
 80331ca:	2945      	cmp	r1, #69	@ 0x45
 80331cc:	d00a      	beq.n	80331e4 <__ssvfscanf_r+0x11f0>
 80331ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80331d0:	4622      	mov	r2, r4
 80331d2:	f7fc fd1f 	bl	802fc14 <_sungetc_r>
 80331d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80331d8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80331dc:	f1a9 0802 	sub.w	r8, r9, #2
 80331e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80331e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80331e6:	4622      	mov	r2, r4
 80331e8:	f7fc fd14 	bl	802fc14 <_sungetc_r>
 80331ec:	46c1      	mov	r9, r8
 80331ee:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 80331f2:	f016 0210 	ands.w	r2, r6, #16
 80331f6:	f47e af18 	bne.w	803202a <__ssvfscanf_r+0x36>
 80331fa:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 80331fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033202:	f889 2000 	strb.w	r2, [r9]
 8033206:	d119      	bne.n	803323c <__ssvfscanf_r+0x1248>
 8033208:	693b      	ldr	r3, [r7, #16]
 803320a:	4553      	cmp	r3, sl
 803320c:	eba3 020a 	sub.w	r2, r3, sl
 8033210:	d121      	bne.n	8033256 <__ssvfscanf_r+0x1262>
 8033212:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8033216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033218:	2200      	movs	r2, #0
 803321a:	f001 fd41 	bl	8034ca0 <_strtod_r>
 803321e:	07f1      	lsls	r1, r6, #31
 8033220:	ec59 8b10 	vmov	r8, r9, d0
 8033224:	f105 0a04 	add.w	sl, r5, #4
 8033228:	d520      	bpl.n	803326c <__ssvfscanf_r+0x1278>
 803322a:	682b      	ldr	r3, [r5, #0]
 803322c:	ed83 0b00 	vstr	d0, [r3]
 8033230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8033232:	3301      	adds	r3, #1
 8033234:	627b      	str	r3, [r7, #36]	@ 0x24
 8033236:	4655      	mov	r5, sl
 8033238:	f7fe bef7 	b.w	803202a <__ssvfscanf_r+0x36>
 803323c:	68fb      	ldr	r3, [r7, #12]
 803323e:	2b00      	cmp	r3, #0
 8033240:	d0e7      	beq.n	8033212 <__ssvfscanf_r+0x121e>
 8033242:	68b9      	ldr	r1, [r7, #8]
 8033244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8033246:	230a      	movs	r3, #10
 8033248:	3101      	adds	r1, #1
 803324a:	f7f8 fe9d 	bl	802bf88 <_strtol_r>
 803324e:	68fb      	ldr	r3, [r7, #12]
 8033250:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8033254:	1ac2      	subs	r2, r0, r3
 8033256:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 803325a:	4599      	cmp	r9, r3
 803325c:	bf28      	it	cs
 803325e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8033262:	491b      	ldr	r1, [pc, #108]	@ (80332d0 <__ssvfscanf_r+0x12dc>)
 8033264:	4648      	mov	r0, r9
 8033266:	f7f8 ff49 	bl	802c0fc <sprintf>
 803326a:	e7d2      	b.n	8033212 <__ssvfscanf_r+0x121e>
 803326c:	07b2      	lsls	r2, r6, #30
 803326e:	682d      	ldr	r5, [r5, #0]
 8033270:	d502      	bpl.n	8033278 <__ssvfscanf_r+0x1284>
 8033272:	ed85 0b00 	vstr	d0, [r5]
 8033276:	e7db      	b.n	8033230 <__ssvfscanf_r+0x123c>
 8033278:	4642      	mov	r2, r8
 803327a:	464b      	mov	r3, r9
 803327c:	4640      	mov	r0, r8
 803327e:	4649      	mov	r1, r9
 8033280:	f7dd fc6c 	bl	8010b5c <__aeabi_dcmpun>
 8033284:	b128      	cbz	r0, 8033292 <__ssvfscanf_r+0x129e>
 8033286:	4813      	ldr	r0, [pc, #76]	@ (80332d4 <__ssvfscanf_r+0x12e0>)
 8033288:	f002 f8f6 	bl	8035478 <nanf>
 803328c:	ed85 0a00 	vstr	s0, [r5]
 8033290:	e7ce      	b.n	8033230 <__ssvfscanf_r+0x123c>
 8033292:	4640      	mov	r0, r8
 8033294:	4649      	mov	r1, r9
 8033296:	f7dd fcbf 	bl	8010c18 <__aeabi_d2f>
 803329a:	6028      	str	r0, [r5, #0]
 803329c:	e7c8      	b.n	8033230 <__ssvfscanf_r+0x123c>
 803329e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80332a2:	6818      	ldr	r0, [r3, #0]
 80332a4:	f7fb fd3a 	bl	802ed1c <free>
 80332a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80332ac:	3401      	adds	r4, #1
 80332ae:	601e      	str	r6, [r3, #0]
 80332b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80332b2:	681d      	ldr	r5, [r3, #0]
 80332b4:	88db      	ldrh	r3, [r3, #6]
 80332b6:	42a3      	cmp	r3, r4
 80332b8:	dcf1      	bgt.n	803329e <__ssvfscanf_r+0x12aa>
 80332ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80332be:	627b      	str	r3, [r7, #36]	@ 0x24
 80332c0:	f7ff b85c 	b.w	803237c <__ssvfscanf_r+0x388>
 80332c4:	2400      	movs	r4, #0
 80332c6:	4626      	mov	r6, r4
 80332c8:	e7f2      	b.n	80332b0 <__ssvfscanf_r+0x12bc>
 80332ca:	f04f 0a00 	mov.w	sl, #0
 80332ce:	e6bb      	b.n	8033048 <__ssvfscanf_r+0x1054>
 80332d0:	0803bf7a 	.word	0x0803bf7a
 80332d4:	0803b9e2 	.word	0x0803b9e2

080332d8 <_putc_r>:
 80332d8:	b570      	push	{r4, r5, r6, lr}
 80332da:	460d      	mov	r5, r1
 80332dc:	4614      	mov	r4, r2
 80332de:	4606      	mov	r6, r0
 80332e0:	b118      	cbz	r0, 80332ea <_putc_r+0x12>
 80332e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80332e4:	b90b      	cbnz	r3, 80332ea <_putc_r+0x12>
 80332e6:	f7f9 f825 	bl	802c334 <__sinit>
 80332ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80332ec:	07d8      	lsls	r0, r3, #31
 80332ee:	d405      	bmi.n	80332fc <_putc_r+0x24>
 80332f0:	89a3      	ldrh	r3, [r4, #12]
 80332f2:	0599      	lsls	r1, r3, #22
 80332f4:	d402      	bmi.n	80332fc <_putc_r+0x24>
 80332f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80332f8:	f7fa fcfb 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 80332fc:	68a3      	ldr	r3, [r4, #8]
 80332fe:	3b01      	subs	r3, #1
 8033300:	2b00      	cmp	r3, #0
 8033302:	60a3      	str	r3, [r4, #8]
 8033304:	da05      	bge.n	8033312 <_putc_r+0x3a>
 8033306:	69a2      	ldr	r2, [r4, #24]
 8033308:	4293      	cmp	r3, r2
 803330a:	db12      	blt.n	8033332 <_putc_r+0x5a>
 803330c:	b2eb      	uxtb	r3, r5
 803330e:	2b0a      	cmp	r3, #10
 8033310:	d00f      	beq.n	8033332 <_putc_r+0x5a>
 8033312:	6823      	ldr	r3, [r4, #0]
 8033314:	1c5a      	adds	r2, r3, #1
 8033316:	6022      	str	r2, [r4, #0]
 8033318:	701d      	strb	r5, [r3, #0]
 803331a:	b2ed      	uxtb	r5, r5
 803331c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803331e:	07da      	lsls	r2, r3, #31
 8033320:	d405      	bmi.n	803332e <_putc_r+0x56>
 8033322:	89a3      	ldrh	r3, [r4, #12]
 8033324:	059b      	lsls	r3, r3, #22
 8033326:	d402      	bmi.n	803332e <_putc_r+0x56>
 8033328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803332a:	f7fa fce4 	bl	802dcf6 <__retarget_lock_release_recursive>
 803332e:	4628      	mov	r0, r5
 8033330:	bd70      	pop	{r4, r5, r6, pc}
 8033332:	4629      	mov	r1, r5
 8033334:	4622      	mov	r2, r4
 8033336:	4630      	mov	r0, r6
 8033338:	f001 fd79 	bl	8034e2e <__swbuf_r>
 803333c:	4605      	mov	r5, r0
 803333e:	e7ed      	b.n	803331c <_putc_r+0x44>

08033340 <__malloc_lock>:
 8033340:	4801      	ldr	r0, [pc, #4]	@ (8033348 <__malloc_lock+0x8>)
 8033342:	f7fa bcd6 	b.w	802dcf2 <__retarget_lock_acquire_recursive>
 8033346:	bf00      	nop
 8033348:	2001a04a 	.word	0x2001a04a

0803334c <__malloc_unlock>:
 803334c:	4801      	ldr	r0, [pc, #4]	@ (8033354 <__malloc_unlock+0x8>)
 803334e:	f7fa bcd2 	b.w	802dcf6 <__retarget_lock_release_recursive>
 8033352:	bf00      	nop
 8033354:	2001a04a 	.word	0x2001a04a

08033358 <_Balloc>:
 8033358:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 803335a:	b570      	push	{r4, r5, r6, lr}
 803335c:	4605      	mov	r5, r0
 803335e:	460c      	mov	r4, r1
 8033360:	b17b      	cbz	r3, 8033382 <_Balloc+0x2a>
 8033362:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8033364:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8033368:	b9a0      	cbnz	r0, 8033394 <_Balloc+0x3c>
 803336a:	2101      	movs	r1, #1
 803336c:	fa01 f604 	lsl.w	r6, r1, r4
 8033370:	1d72      	adds	r2, r6, #5
 8033372:	0092      	lsls	r2, r2, #2
 8033374:	4628      	mov	r0, r5
 8033376:	f002 f885 	bl	8035484 <_calloc_r>
 803337a:	b148      	cbz	r0, 8033390 <_Balloc+0x38>
 803337c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8033380:	e00b      	b.n	803339a <_Balloc+0x42>
 8033382:	2221      	movs	r2, #33	@ 0x21
 8033384:	2104      	movs	r1, #4
 8033386:	f002 f87d 	bl	8035484 <_calloc_r>
 803338a:	6468      	str	r0, [r5, #68]	@ 0x44
 803338c:	2800      	cmp	r0, #0
 803338e:	d1e8      	bne.n	8033362 <_Balloc+0xa>
 8033390:	2000      	movs	r0, #0
 8033392:	bd70      	pop	{r4, r5, r6, pc}
 8033394:	6802      	ldr	r2, [r0, #0]
 8033396:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 803339a:	2300      	movs	r3, #0
 803339c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80333a0:	e7f7      	b.n	8033392 <_Balloc+0x3a>

080333a2 <_Bfree>:
 80333a2:	b131      	cbz	r1, 80333b2 <_Bfree+0x10>
 80333a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80333a6:	684a      	ldr	r2, [r1, #4]
 80333a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80333ac:	6008      	str	r0, [r1, #0]
 80333ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80333b2:	4770      	bx	lr

080333b4 <__multadd>:
 80333b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80333b8:	690d      	ldr	r5, [r1, #16]
 80333ba:	4607      	mov	r7, r0
 80333bc:	460c      	mov	r4, r1
 80333be:	461e      	mov	r6, r3
 80333c0:	f101 0c14 	add.w	ip, r1, #20
 80333c4:	2000      	movs	r0, #0
 80333c6:	f8dc 3000 	ldr.w	r3, [ip]
 80333ca:	b299      	uxth	r1, r3
 80333cc:	fb02 6101 	mla	r1, r2, r1, r6
 80333d0:	0c1e      	lsrs	r6, r3, #16
 80333d2:	0c0b      	lsrs	r3, r1, #16
 80333d4:	fb02 3306 	mla	r3, r2, r6, r3
 80333d8:	b289      	uxth	r1, r1
 80333da:	3001      	adds	r0, #1
 80333dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80333e0:	4285      	cmp	r5, r0
 80333e2:	f84c 1b04 	str.w	r1, [ip], #4
 80333e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80333ea:	dcec      	bgt.n	80333c6 <__multadd+0x12>
 80333ec:	b30e      	cbz	r6, 8033432 <__multadd+0x7e>
 80333ee:	68a3      	ldr	r3, [r4, #8]
 80333f0:	42ab      	cmp	r3, r5
 80333f2:	dc19      	bgt.n	8033428 <__multadd+0x74>
 80333f4:	6861      	ldr	r1, [r4, #4]
 80333f6:	4638      	mov	r0, r7
 80333f8:	3101      	adds	r1, #1
 80333fa:	f7ff ffad 	bl	8033358 <_Balloc>
 80333fe:	4680      	mov	r8, r0
 8033400:	b928      	cbnz	r0, 803340e <__multadd+0x5a>
 8033402:	4602      	mov	r2, r0
 8033404:	4b0c      	ldr	r3, [pc, #48]	@ (8033438 <__multadd+0x84>)
 8033406:	480d      	ldr	r0, [pc, #52]	@ (803343c <__multadd+0x88>)
 8033408:	21ba      	movs	r1, #186	@ 0xba
 803340a:	f7f6 fce7 	bl	8029ddc <__assert_func>
 803340e:	6922      	ldr	r2, [r4, #16]
 8033410:	3202      	adds	r2, #2
 8033412:	f104 010c 	add.w	r1, r4, #12
 8033416:	0092      	lsls	r2, r2, #2
 8033418:	300c      	adds	r0, #12
 803341a:	f7fa fc6d 	bl	802dcf8 <memcpy>
 803341e:	4621      	mov	r1, r4
 8033420:	4638      	mov	r0, r7
 8033422:	f7ff ffbe 	bl	80333a2 <_Bfree>
 8033426:	4644      	mov	r4, r8
 8033428:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803342c:	3501      	adds	r5, #1
 803342e:	615e      	str	r6, [r3, #20]
 8033430:	6125      	str	r5, [r4, #16]
 8033432:	4620      	mov	r0, r4
 8033434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033438:	0803beae 	.word	0x0803beae
 803343c:	0803bfa2 	.word	0x0803bfa2

08033440 <__s2b>:
 8033440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8033444:	460c      	mov	r4, r1
 8033446:	4615      	mov	r5, r2
 8033448:	461f      	mov	r7, r3
 803344a:	2209      	movs	r2, #9
 803344c:	3308      	adds	r3, #8
 803344e:	4606      	mov	r6, r0
 8033450:	fb93 f3f2 	sdiv	r3, r3, r2
 8033454:	2100      	movs	r1, #0
 8033456:	2201      	movs	r2, #1
 8033458:	429a      	cmp	r2, r3
 803345a:	db09      	blt.n	8033470 <__s2b+0x30>
 803345c:	4630      	mov	r0, r6
 803345e:	f7ff ff7b 	bl	8033358 <_Balloc>
 8033462:	b940      	cbnz	r0, 8033476 <__s2b+0x36>
 8033464:	4602      	mov	r2, r0
 8033466:	4b19      	ldr	r3, [pc, #100]	@ (80334cc <__s2b+0x8c>)
 8033468:	4819      	ldr	r0, [pc, #100]	@ (80334d0 <__s2b+0x90>)
 803346a:	21d3      	movs	r1, #211	@ 0xd3
 803346c:	f7f6 fcb6 	bl	8029ddc <__assert_func>
 8033470:	0052      	lsls	r2, r2, #1
 8033472:	3101      	adds	r1, #1
 8033474:	e7f0      	b.n	8033458 <__s2b+0x18>
 8033476:	9b08      	ldr	r3, [sp, #32]
 8033478:	6143      	str	r3, [r0, #20]
 803347a:	2d09      	cmp	r5, #9
 803347c:	f04f 0301 	mov.w	r3, #1
 8033480:	6103      	str	r3, [r0, #16]
 8033482:	dd16      	ble.n	80334b2 <__s2b+0x72>
 8033484:	f104 0909 	add.w	r9, r4, #9
 8033488:	46c8      	mov	r8, r9
 803348a:	442c      	add	r4, r5
 803348c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8033490:	4601      	mov	r1, r0
 8033492:	3b30      	subs	r3, #48	@ 0x30
 8033494:	220a      	movs	r2, #10
 8033496:	4630      	mov	r0, r6
 8033498:	f7ff ff8c 	bl	80333b4 <__multadd>
 803349c:	45a0      	cmp	r8, r4
 803349e:	d1f5      	bne.n	803348c <__s2b+0x4c>
 80334a0:	f1a5 0408 	sub.w	r4, r5, #8
 80334a4:	444c      	add	r4, r9
 80334a6:	1b2d      	subs	r5, r5, r4
 80334a8:	1963      	adds	r3, r4, r5
 80334aa:	42bb      	cmp	r3, r7
 80334ac:	db04      	blt.n	80334b8 <__s2b+0x78>
 80334ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80334b2:	340a      	adds	r4, #10
 80334b4:	2509      	movs	r5, #9
 80334b6:	e7f6      	b.n	80334a6 <__s2b+0x66>
 80334b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80334bc:	4601      	mov	r1, r0
 80334be:	3b30      	subs	r3, #48	@ 0x30
 80334c0:	220a      	movs	r2, #10
 80334c2:	4630      	mov	r0, r6
 80334c4:	f7ff ff76 	bl	80333b4 <__multadd>
 80334c8:	e7ee      	b.n	80334a8 <__s2b+0x68>
 80334ca:	bf00      	nop
 80334cc:	0803beae 	.word	0x0803beae
 80334d0:	0803bfa2 	.word	0x0803bfa2

080334d4 <__hi0bits>:
 80334d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80334d8:	4603      	mov	r3, r0
 80334da:	bf36      	itet	cc
 80334dc:	0403      	lslcc	r3, r0, #16
 80334de:	2000      	movcs	r0, #0
 80334e0:	2010      	movcc	r0, #16
 80334e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80334e6:	bf3c      	itt	cc
 80334e8:	021b      	lslcc	r3, r3, #8
 80334ea:	3008      	addcc	r0, #8
 80334ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80334f0:	bf3c      	itt	cc
 80334f2:	011b      	lslcc	r3, r3, #4
 80334f4:	3004      	addcc	r0, #4
 80334f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80334fa:	bf3c      	itt	cc
 80334fc:	009b      	lslcc	r3, r3, #2
 80334fe:	3002      	addcc	r0, #2
 8033500:	2b00      	cmp	r3, #0
 8033502:	db05      	blt.n	8033510 <__hi0bits+0x3c>
 8033504:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8033508:	f100 0001 	add.w	r0, r0, #1
 803350c:	bf08      	it	eq
 803350e:	2020      	moveq	r0, #32
 8033510:	4770      	bx	lr

08033512 <__lo0bits>:
 8033512:	6803      	ldr	r3, [r0, #0]
 8033514:	4602      	mov	r2, r0
 8033516:	f013 0007 	ands.w	r0, r3, #7
 803351a:	d00b      	beq.n	8033534 <__lo0bits+0x22>
 803351c:	07d9      	lsls	r1, r3, #31
 803351e:	d421      	bmi.n	8033564 <__lo0bits+0x52>
 8033520:	0798      	lsls	r0, r3, #30
 8033522:	bf49      	itett	mi
 8033524:	085b      	lsrmi	r3, r3, #1
 8033526:	089b      	lsrpl	r3, r3, #2
 8033528:	2001      	movmi	r0, #1
 803352a:	6013      	strmi	r3, [r2, #0]
 803352c:	bf5c      	itt	pl
 803352e:	6013      	strpl	r3, [r2, #0]
 8033530:	2002      	movpl	r0, #2
 8033532:	4770      	bx	lr
 8033534:	b299      	uxth	r1, r3
 8033536:	b909      	cbnz	r1, 803353c <__lo0bits+0x2a>
 8033538:	0c1b      	lsrs	r3, r3, #16
 803353a:	2010      	movs	r0, #16
 803353c:	b2d9      	uxtb	r1, r3
 803353e:	b909      	cbnz	r1, 8033544 <__lo0bits+0x32>
 8033540:	3008      	adds	r0, #8
 8033542:	0a1b      	lsrs	r3, r3, #8
 8033544:	0719      	lsls	r1, r3, #28
 8033546:	bf04      	itt	eq
 8033548:	091b      	lsreq	r3, r3, #4
 803354a:	3004      	addeq	r0, #4
 803354c:	0799      	lsls	r1, r3, #30
 803354e:	bf04      	itt	eq
 8033550:	089b      	lsreq	r3, r3, #2
 8033552:	3002      	addeq	r0, #2
 8033554:	07d9      	lsls	r1, r3, #31
 8033556:	d403      	bmi.n	8033560 <__lo0bits+0x4e>
 8033558:	085b      	lsrs	r3, r3, #1
 803355a:	f100 0001 	add.w	r0, r0, #1
 803355e:	d003      	beq.n	8033568 <__lo0bits+0x56>
 8033560:	6013      	str	r3, [r2, #0]
 8033562:	4770      	bx	lr
 8033564:	2000      	movs	r0, #0
 8033566:	4770      	bx	lr
 8033568:	2020      	movs	r0, #32
 803356a:	4770      	bx	lr

0803356c <__i2b>:
 803356c:	b510      	push	{r4, lr}
 803356e:	460c      	mov	r4, r1
 8033570:	2101      	movs	r1, #1
 8033572:	f7ff fef1 	bl	8033358 <_Balloc>
 8033576:	4602      	mov	r2, r0
 8033578:	b928      	cbnz	r0, 8033586 <__i2b+0x1a>
 803357a:	4b05      	ldr	r3, [pc, #20]	@ (8033590 <__i2b+0x24>)
 803357c:	4805      	ldr	r0, [pc, #20]	@ (8033594 <__i2b+0x28>)
 803357e:	f240 1145 	movw	r1, #325	@ 0x145
 8033582:	f7f6 fc2b 	bl	8029ddc <__assert_func>
 8033586:	2301      	movs	r3, #1
 8033588:	6144      	str	r4, [r0, #20]
 803358a:	6103      	str	r3, [r0, #16]
 803358c:	bd10      	pop	{r4, pc}
 803358e:	bf00      	nop
 8033590:	0803beae 	.word	0x0803beae
 8033594:	0803bfa2 	.word	0x0803bfa2

08033598 <__multiply>:
 8033598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803359c:	4614      	mov	r4, r2
 803359e:	690a      	ldr	r2, [r1, #16]
 80335a0:	6923      	ldr	r3, [r4, #16]
 80335a2:	429a      	cmp	r2, r3
 80335a4:	bfa8      	it	ge
 80335a6:	4623      	movge	r3, r4
 80335a8:	460f      	mov	r7, r1
 80335aa:	bfa4      	itt	ge
 80335ac:	460c      	movge	r4, r1
 80335ae:	461f      	movge	r7, r3
 80335b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80335b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80335b8:	68a3      	ldr	r3, [r4, #8]
 80335ba:	6861      	ldr	r1, [r4, #4]
 80335bc:	eb0a 0609 	add.w	r6, sl, r9
 80335c0:	42b3      	cmp	r3, r6
 80335c2:	b085      	sub	sp, #20
 80335c4:	bfb8      	it	lt
 80335c6:	3101      	addlt	r1, #1
 80335c8:	f7ff fec6 	bl	8033358 <_Balloc>
 80335cc:	b930      	cbnz	r0, 80335dc <__multiply+0x44>
 80335ce:	4602      	mov	r2, r0
 80335d0:	4b44      	ldr	r3, [pc, #272]	@ (80336e4 <__multiply+0x14c>)
 80335d2:	4845      	ldr	r0, [pc, #276]	@ (80336e8 <__multiply+0x150>)
 80335d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80335d8:	f7f6 fc00 	bl	8029ddc <__assert_func>
 80335dc:	f100 0514 	add.w	r5, r0, #20
 80335e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80335e4:	462b      	mov	r3, r5
 80335e6:	2200      	movs	r2, #0
 80335e8:	4543      	cmp	r3, r8
 80335ea:	d321      	bcc.n	8033630 <__multiply+0x98>
 80335ec:	f107 0114 	add.w	r1, r7, #20
 80335f0:	f104 0214 	add.w	r2, r4, #20
 80335f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80335f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80335fc:	9302      	str	r3, [sp, #8]
 80335fe:	1b13      	subs	r3, r2, r4
 8033600:	3b15      	subs	r3, #21
 8033602:	f023 0303 	bic.w	r3, r3, #3
 8033606:	3304      	adds	r3, #4
 8033608:	f104 0715 	add.w	r7, r4, #21
 803360c:	42ba      	cmp	r2, r7
 803360e:	bf38      	it	cc
 8033610:	2304      	movcc	r3, #4
 8033612:	9301      	str	r3, [sp, #4]
 8033614:	9b02      	ldr	r3, [sp, #8]
 8033616:	9103      	str	r1, [sp, #12]
 8033618:	428b      	cmp	r3, r1
 803361a:	d80c      	bhi.n	8033636 <__multiply+0x9e>
 803361c:	2e00      	cmp	r6, #0
 803361e:	dd03      	ble.n	8033628 <__multiply+0x90>
 8033620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8033624:	2b00      	cmp	r3, #0
 8033626:	d05b      	beq.n	80336e0 <__multiply+0x148>
 8033628:	6106      	str	r6, [r0, #16]
 803362a:	b005      	add	sp, #20
 803362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033630:	f843 2b04 	str.w	r2, [r3], #4
 8033634:	e7d8      	b.n	80335e8 <__multiply+0x50>
 8033636:	f8b1 a000 	ldrh.w	sl, [r1]
 803363a:	f1ba 0f00 	cmp.w	sl, #0
 803363e:	d024      	beq.n	803368a <__multiply+0xf2>
 8033640:	f104 0e14 	add.w	lr, r4, #20
 8033644:	46a9      	mov	r9, r5
 8033646:	f04f 0c00 	mov.w	ip, #0
 803364a:	f85e 7b04 	ldr.w	r7, [lr], #4
 803364e:	f8d9 3000 	ldr.w	r3, [r9]
 8033652:	fa1f fb87 	uxth.w	fp, r7
 8033656:	b29b      	uxth	r3, r3
 8033658:	fb0a 330b 	mla	r3, sl, fp, r3
 803365c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8033660:	f8d9 7000 	ldr.w	r7, [r9]
 8033664:	4463      	add	r3, ip
 8033666:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 803366a:	fb0a c70b 	mla	r7, sl, fp, ip
 803366e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8033672:	b29b      	uxth	r3, r3
 8033674:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8033678:	4572      	cmp	r2, lr
 803367a:	f849 3b04 	str.w	r3, [r9], #4
 803367e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8033682:	d8e2      	bhi.n	803364a <__multiply+0xb2>
 8033684:	9b01      	ldr	r3, [sp, #4]
 8033686:	f845 c003 	str.w	ip, [r5, r3]
 803368a:	9b03      	ldr	r3, [sp, #12]
 803368c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8033690:	3104      	adds	r1, #4
 8033692:	f1b9 0f00 	cmp.w	r9, #0
 8033696:	d021      	beq.n	80336dc <__multiply+0x144>
 8033698:	682b      	ldr	r3, [r5, #0]
 803369a:	f104 0c14 	add.w	ip, r4, #20
 803369e:	46ae      	mov	lr, r5
 80336a0:	f04f 0a00 	mov.w	sl, #0
 80336a4:	f8bc b000 	ldrh.w	fp, [ip]
 80336a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80336ac:	fb09 770b 	mla	r7, r9, fp, r7
 80336b0:	4457      	add	r7, sl
 80336b2:	b29b      	uxth	r3, r3
 80336b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80336b8:	f84e 3b04 	str.w	r3, [lr], #4
 80336bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80336c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80336c4:	f8be 3000 	ldrh.w	r3, [lr]
 80336c8:	fb09 330a 	mla	r3, r9, sl, r3
 80336cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80336d0:	4562      	cmp	r2, ip
 80336d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80336d6:	d8e5      	bhi.n	80336a4 <__multiply+0x10c>
 80336d8:	9f01      	ldr	r7, [sp, #4]
 80336da:	51eb      	str	r3, [r5, r7]
 80336dc:	3504      	adds	r5, #4
 80336de:	e799      	b.n	8033614 <__multiply+0x7c>
 80336e0:	3e01      	subs	r6, #1
 80336e2:	e79b      	b.n	803361c <__multiply+0x84>
 80336e4:	0803beae 	.word	0x0803beae
 80336e8:	0803bfa2 	.word	0x0803bfa2

080336ec <__pow5mult>:
 80336ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80336f0:	4615      	mov	r5, r2
 80336f2:	f012 0203 	ands.w	r2, r2, #3
 80336f6:	4607      	mov	r7, r0
 80336f8:	460e      	mov	r6, r1
 80336fa:	d007      	beq.n	803370c <__pow5mult+0x20>
 80336fc:	4c1a      	ldr	r4, [pc, #104]	@ (8033768 <__pow5mult+0x7c>)
 80336fe:	3a01      	subs	r2, #1
 8033700:	2300      	movs	r3, #0
 8033702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8033706:	f7ff fe55 	bl	80333b4 <__multadd>
 803370a:	4606      	mov	r6, r0
 803370c:	10ad      	asrs	r5, r5, #2
 803370e:	d027      	beq.n	8033760 <__pow5mult+0x74>
 8033710:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8033712:	b944      	cbnz	r4, 8033726 <__pow5mult+0x3a>
 8033714:	f240 2171 	movw	r1, #625	@ 0x271
 8033718:	4638      	mov	r0, r7
 803371a:	f7ff ff27 	bl	803356c <__i2b>
 803371e:	2300      	movs	r3, #0
 8033720:	6438      	str	r0, [r7, #64]	@ 0x40
 8033722:	4604      	mov	r4, r0
 8033724:	6003      	str	r3, [r0, #0]
 8033726:	f04f 0900 	mov.w	r9, #0
 803372a:	07eb      	lsls	r3, r5, #31
 803372c:	d50a      	bpl.n	8033744 <__pow5mult+0x58>
 803372e:	4631      	mov	r1, r6
 8033730:	4622      	mov	r2, r4
 8033732:	4638      	mov	r0, r7
 8033734:	f7ff ff30 	bl	8033598 <__multiply>
 8033738:	4631      	mov	r1, r6
 803373a:	4680      	mov	r8, r0
 803373c:	4638      	mov	r0, r7
 803373e:	f7ff fe30 	bl	80333a2 <_Bfree>
 8033742:	4646      	mov	r6, r8
 8033744:	106d      	asrs	r5, r5, #1
 8033746:	d00b      	beq.n	8033760 <__pow5mult+0x74>
 8033748:	6820      	ldr	r0, [r4, #0]
 803374a:	b938      	cbnz	r0, 803375c <__pow5mult+0x70>
 803374c:	4622      	mov	r2, r4
 803374e:	4621      	mov	r1, r4
 8033750:	4638      	mov	r0, r7
 8033752:	f7ff ff21 	bl	8033598 <__multiply>
 8033756:	6020      	str	r0, [r4, #0]
 8033758:	f8c0 9000 	str.w	r9, [r0]
 803375c:	4604      	mov	r4, r0
 803375e:	e7e4      	b.n	803372a <__pow5mult+0x3e>
 8033760:	4630      	mov	r0, r6
 8033762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8033766:	bf00      	nop
 8033768:	0803bffc 	.word	0x0803bffc

0803376c <__lshift>:
 803376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8033770:	460c      	mov	r4, r1
 8033772:	6849      	ldr	r1, [r1, #4]
 8033774:	6923      	ldr	r3, [r4, #16]
 8033776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803377a:	68a3      	ldr	r3, [r4, #8]
 803377c:	4607      	mov	r7, r0
 803377e:	4691      	mov	r9, r2
 8033780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8033784:	f108 0601 	add.w	r6, r8, #1
 8033788:	42b3      	cmp	r3, r6
 803378a:	db0b      	blt.n	80337a4 <__lshift+0x38>
 803378c:	4638      	mov	r0, r7
 803378e:	f7ff fde3 	bl	8033358 <_Balloc>
 8033792:	4605      	mov	r5, r0
 8033794:	b948      	cbnz	r0, 80337aa <__lshift+0x3e>
 8033796:	4602      	mov	r2, r0
 8033798:	4b28      	ldr	r3, [pc, #160]	@ (803383c <__lshift+0xd0>)
 803379a:	4829      	ldr	r0, [pc, #164]	@ (8033840 <__lshift+0xd4>)
 803379c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80337a0:	f7f6 fb1c 	bl	8029ddc <__assert_func>
 80337a4:	3101      	adds	r1, #1
 80337a6:	005b      	lsls	r3, r3, #1
 80337a8:	e7ee      	b.n	8033788 <__lshift+0x1c>
 80337aa:	2300      	movs	r3, #0
 80337ac:	f100 0114 	add.w	r1, r0, #20
 80337b0:	f100 0210 	add.w	r2, r0, #16
 80337b4:	4618      	mov	r0, r3
 80337b6:	4553      	cmp	r3, sl
 80337b8:	db33      	blt.n	8033822 <__lshift+0xb6>
 80337ba:	6920      	ldr	r0, [r4, #16]
 80337bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80337c0:	f104 0314 	add.w	r3, r4, #20
 80337c4:	f019 091f 	ands.w	r9, r9, #31
 80337c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80337cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80337d0:	d02b      	beq.n	803382a <__lshift+0xbe>
 80337d2:	f1c9 0e20 	rsb	lr, r9, #32
 80337d6:	468a      	mov	sl, r1
 80337d8:	2200      	movs	r2, #0
 80337da:	6818      	ldr	r0, [r3, #0]
 80337dc:	fa00 f009 	lsl.w	r0, r0, r9
 80337e0:	4310      	orrs	r0, r2
 80337e2:	f84a 0b04 	str.w	r0, [sl], #4
 80337e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80337ea:	459c      	cmp	ip, r3
 80337ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80337f0:	d8f3      	bhi.n	80337da <__lshift+0x6e>
 80337f2:	ebac 0304 	sub.w	r3, ip, r4
 80337f6:	3b15      	subs	r3, #21
 80337f8:	f023 0303 	bic.w	r3, r3, #3
 80337fc:	3304      	adds	r3, #4
 80337fe:	f104 0015 	add.w	r0, r4, #21
 8033802:	4584      	cmp	ip, r0
 8033804:	bf38      	it	cc
 8033806:	2304      	movcc	r3, #4
 8033808:	50ca      	str	r2, [r1, r3]
 803380a:	b10a      	cbz	r2, 8033810 <__lshift+0xa4>
 803380c:	f108 0602 	add.w	r6, r8, #2
 8033810:	3e01      	subs	r6, #1
 8033812:	4638      	mov	r0, r7
 8033814:	612e      	str	r6, [r5, #16]
 8033816:	4621      	mov	r1, r4
 8033818:	f7ff fdc3 	bl	80333a2 <_Bfree>
 803381c:	4628      	mov	r0, r5
 803381e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8033822:	f842 0f04 	str.w	r0, [r2, #4]!
 8033826:	3301      	adds	r3, #1
 8033828:	e7c5      	b.n	80337b6 <__lshift+0x4a>
 803382a:	3904      	subs	r1, #4
 803382c:	f853 2b04 	ldr.w	r2, [r3], #4
 8033830:	f841 2f04 	str.w	r2, [r1, #4]!
 8033834:	459c      	cmp	ip, r3
 8033836:	d8f9      	bhi.n	803382c <__lshift+0xc0>
 8033838:	e7ea      	b.n	8033810 <__lshift+0xa4>
 803383a:	bf00      	nop
 803383c:	0803beae 	.word	0x0803beae
 8033840:	0803bfa2 	.word	0x0803bfa2

08033844 <__mcmp>:
 8033844:	690a      	ldr	r2, [r1, #16]
 8033846:	4603      	mov	r3, r0
 8033848:	6900      	ldr	r0, [r0, #16]
 803384a:	1a80      	subs	r0, r0, r2
 803384c:	b530      	push	{r4, r5, lr}
 803384e:	d10e      	bne.n	803386e <__mcmp+0x2a>
 8033850:	3314      	adds	r3, #20
 8033852:	3114      	adds	r1, #20
 8033854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8033858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803385c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8033860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8033864:	4295      	cmp	r5, r2
 8033866:	d003      	beq.n	8033870 <__mcmp+0x2c>
 8033868:	d205      	bcs.n	8033876 <__mcmp+0x32>
 803386a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803386e:	bd30      	pop	{r4, r5, pc}
 8033870:	42a3      	cmp	r3, r4
 8033872:	d3f3      	bcc.n	803385c <__mcmp+0x18>
 8033874:	e7fb      	b.n	803386e <__mcmp+0x2a>
 8033876:	2001      	movs	r0, #1
 8033878:	e7f9      	b.n	803386e <__mcmp+0x2a>
	...

0803387c <__mdiff>:
 803387c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033880:	4689      	mov	r9, r1
 8033882:	4606      	mov	r6, r0
 8033884:	4611      	mov	r1, r2
 8033886:	4648      	mov	r0, r9
 8033888:	4614      	mov	r4, r2
 803388a:	f7ff ffdb 	bl	8033844 <__mcmp>
 803388e:	1e05      	subs	r5, r0, #0
 8033890:	d112      	bne.n	80338b8 <__mdiff+0x3c>
 8033892:	4629      	mov	r1, r5
 8033894:	4630      	mov	r0, r6
 8033896:	f7ff fd5f 	bl	8033358 <_Balloc>
 803389a:	4602      	mov	r2, r0
 803389c:	b928      	cbnz	r0, 80338aa <__mdiff+0x2e>
 803389e:	4b3f      	ldr	r3, [pc, #252]	@ (803399c <__mdiff+0x120>)
 80338a0:	f240 2137 	movw	r1, #567	@ 0x237
 80338a4:	483e      	ldr	r0, [pc, #248]	@ (80339a0 <__mdiff+0x124>)
 80338a6:	f7f6 fa99 	bl	8029ddc <__assert_func>
 80338aa:	2301      	movs	r3, #1
 80338ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80338b0:	4610      	mov	r0, r2
 80338b2:	b003      	add	sp, #12
 80338b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80338b8:	bfbc      	itt	lt
 80338ba:	464b      	movlt	r3, r9
 80338bc:	46a1      	movlt	r9, r4
 80338be:	4630      	mov	r0, r6
 80338c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80338c4:	bfba      	itte	lt
 80338c6:	461c      	movlt	r4, r3
 80338c8:	2501      	movlt	r5, #1
 80338ca:	2500      	movge	r5, #0
 80338cc:	f7ff fd44 	bl	8033358 <_Balloc>
 80338d0:	4602      	mov	r2, r0
 80338d2:	b918      	cbnz	r0, 80338dc <__mdiff+0x60>
 80338d4:	4b31      	ldr	r3, [pc, #196]	@ (803399c <__mdiff+0x120>)
 80338d6:	f240 2145 	movw	r1, #581	@ 0x245
 80338da:	e7e3      	b.n	80338a4 <__mdiff+0x28>
 80338dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80338e0:	6926      	ldr	r6, [r4, #16]
 80338e2:	60c5      	str	r5, [r0, #12]
 80338e4:	f109 0310 	add.w	r3, r9, #16
 80338e8:	f109 0514 	add.w	r5, r9, #20
 80338ec:	f104 0e14 	add.w	lr, r4, #20
 80338f0:	f100 0b14 	add.w	fp, r0, #20
 80338f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80338f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80338fc:	9301      	str	r3, [sp, #4]
 80338fe:	46d9      	mov	r9, fp
 8033900:	f04f 0c00 	mov.w	ip, #0
 8033904:	9b01      	ldr	r3, [sp, #4]
 8033906:	f85e 0b04 	ldr.w	r0, [lr], #4
 803390a:	f853 af04 	ldr.w	sl, [r3, #4]!
 803390e:	9301      	str	r3, [sp, #4]
 8033910:	fa1f f38a 	uxth.w	r3, sl
 8033914:	4619      	mov	r1, r3
 8033916:	b283      	uxth	r3, r0
 8033918:	1acb      	subs	r3, r1, r3
 803391a:	0c00      	lsrs	r0, r0, #16
 803391c:	4463      	add	r3, ip
 803391e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8033922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8033926:	b29b      	uxth	r3, r3
 8033928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803392c:	4576      	cmp	r6, lr
 803392e:	f849 3b04 	str.w	r3, [r9], #4
 8033932:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033936:	d8e5      	bhi.n	8033904 <__mdiff+0x88>
 8033938:	1b33      	subs	r3, r6, r4
 803393a:	3b15      	subs	r3, #21
 803393c:	f023 0303 	bic.w	r3, r3, #3
 8033940:	3415      	adds	r4, #21
 8033942:	3304      	adds	r3, #4
 8033944:	42a6      	cmp	r6, r4
 8033946:	bf38      	it	cc
 8033948:	2304      	movcc	r3, #4
 803394a:	441d      	add	r5, r3
 803394c:	445b      	add	r3, fp
 803394e:	461e      	mov	r6, r3
 8033950:	462c      	mov	r4, r5
 8033952:	4544      	cmp	r4, r8
 8033954:	d30e      	bcc.n	8033974 <__mdiff+0xf8>
 8033956:	f108 0103 	add.w	r1, r8, #3
 803395a:	1b49      	subs	r1, r1, r5
 803395c:	f021 0103 	bic.w	r1, r1, #3
 8033960:	3d03      	subs	r5, #3
 8033962:	45a8      	cmp	r8, r5
 8033964:	bf38      	it	cc
 8033966:	2100      	movcc	r1, #0
 8033968:	440b      	add	r3, r1
 803396a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803396e:	b191      	cbz	r1, 8033996 <__mdiff+0x11a>
 8033970:	6117      	str	r7, [r2, #16]
 8033972:	e79d      	b.n	80338b0 <__mdiff+0x34>
 8033974:	f854 1b04 	ldr.w	r1, [r4], #4
 8033978:	46e6      	mov	lr, ip
 803397a:	0c08      	lsrs	r0, r1, #16
 803397c:	fa1c fc81 	uxtah	ip, ip, r1
 8033980:	4471      	add	r1, lr
 8033982:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8033986:	b289      	uxth	r1, r1
 8033988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803398c:	f846 1b04 	str.w	r1, [r6], #4
 8033990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033994:	e7dd      	b.n	8033952 <__mdiff+0xd6>
 8033996:	3f01      	subs	r7, #1
 8033998:	e7e7      	b.n	803396a <__mdiff+0xee>
 803399a:	bf00      	nop
 803399c:	0803beae 	.word	0x0803beae
 80339a0:	0803bfa2 	.word	0x0803bfa2

080339a4 <__ulp>:
 80339a4:	b082      	sub	sp, #8
 80339a6:	ed8d 0b00 	vstr	d0, [sp]
 80339aa:	9a01      	ldr	r2, [sp, #4]
 80339ac:	4b0f      	ldr	r3, [pc, #60]	@ (80339ec <__ulp+0x48>)
 80339ae:	4013      	ands	r3, r2
 80339b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80339b4:	2b00      	cmp	r3, #0
 80339b6:	dc08      	bgt.n	80339ca <__ulp+0x26>
 80339b8:	425b      	negs	r3, r3
 80339ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80339be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80339c2:	da04      	bge.n	80339ce <__ulp+0x2a>
 80339c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80339c8:	4113      	asrs	r3, r2
 80339ca:	2200      	movs	r2, #0
 80339cc:	e008      	b.n	80339e0 <__ulp+0x3c>
 80339ce:	f1a2 0314 	sub.w	r3, r2, #20
 80339d2:	2b1e      	cmp	r3, #30
 80339d4:	bfda      	itte	le
 80339d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80339da:	40da      	lsrle	r2, r3
 80339dc:	2201      	movgt	r2, #1
 80339de:	2300      	movs	r3, #0
 80339e0:	4619      	mov	r1, r3
 80339e2:	4610      	mov	r0, r2
 80339e4:	ec41 0b10 	vmov	d0, r0, r1
 80339e8:	b002      	add	sp, #8
 80339ea:	4770      	bx	lr
 80339ec:	7ff00000 	.word	0x7ff00000

080339f0 <__b2d>:
 80339f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80339f4:	6906      	ldr	r6, [r0, #16]
 80339f6:	f100 0814 	add.w	r8, r0, #20
 80339fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80339fe:	1f37      	subs	r7, r6, #4
 8033a00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8033a04:	4610      	mov	r0, r2
 8033a06:	f7ff fd65 	bl	80334d4 <__hi0bits>
 8033a0a:	f1c0 0320 	rsb	r3, r0, #32
 8033a0e:	280a      	cmp	r0, #10
 8033a10:	600b      	str	r3, [r1, #0]
 8033a12:	491b      	ldr	r1, [pc, #108]	@ (8033a80 <__b2d+0x90>)
 8033a14:	dc15      	bgt.n	8033a42 <__b2d+0x52>
 8033a16:	f1c0 0c0b 	rsb	ip, r0, #11
 8033a1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8033a1e:	45b8      	cmp	r8, r7
 8033a20:	ea43 0501 	orr.w	r5, r3, r1
 8033a24:	bf34      	ite	cc
 8033a26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033a2a:	2300      	movcs	r3, #0
 8033a2c:	3015      	adds	r0, #21
 8033a2e:	fa02 f000 	lsl.w	r0, r2, r0
 8033a32:	fa23 f30c 	lsr.w	r3, r3, ip
 8033a36:	4303      	orrs	r3, r0
 8033a38:	461c      	mov	r4, r3
 8033a3a:	ec45 4b10 	vmov	d0, r4, r5
 8033a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033a42:	45b8      	cmp	r8, r7
 8033a44:	bf3a      	itte	cc
 8033a46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8033a4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8033a4e:	2300      	movcs	r3, #0
 8033a50:	380b      	subs	r0, #11
 8033a52:	d012      	beq.n	8033a7a <__b2d+0x8a>
 8033a54:	f1c0 0120 	rsb	r1, r0, #32
 8033a58:	fa23 f401 	lsr.w	r4, r3, r1
 8033a5c:	4082      	lsls	r2, r0
 8033a5e:	4322      	orrs	r2, r4
 8033a60:	4547      	cmp	r7, r8
 8033a62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8033a66:	bf8c      	ite	hi
 8033a68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8033a6c:	2200      	movls	r2, #0
 8033a6e:	4083      	lsls	r3, r0
 8033a70:	40ca      	lsrs	r2, r1
 8033a72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8033a76:	4313      	orrs	r3, r2
 8033a78:	e7de      	b.n	8033a38 <__b2d+0x48>
 8033a7a:	ea42 0501 	orr.w	r5, r2, r1
 8033a7e:	e7db      	b.n	8033a38 <__b2d+0x48>
 8033a80:	3ff00000 	.word	0x3ff00000

08033a84 <__d2b>:
 8033a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8033a88:	460f      	mov	r7, r1
 8033a8a:	2101      	movs	r1, #1
 8033a8c:	ec59 8b10 	vmov	r8, r9, d0
 8033a90:	4616      	mov	r6, r2
 8033a92:	f7ff fc61 	bl	8033358 <_Balloc>
 8033a96:	4604      	mov	r4, r0
 8033a98:	b930      	cbnz	r0, 8033aa8 <__d2b+0x24>
 8033a9a:	4602      	mov	r2, r0
 8033a9c:	4b23      	ldr	r3, [pc, #140]	@ (8033b2c <__d2b+0xa8>)
 8033a9e:	4824      	ldr	r0, [pc, #144]	@ (8033b30 <__d2b+0xac>)
 8033aa0:	f240 310f 	movw	r1, #783	@ 0x30f
 8033aa4:	f7f6 f99a 	bl	8029ddc <__assert_func>
 8033aa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8033aac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8033ab0:	b10d      	cbz	r5, 8033ab6 <__d2b+0x32>
 8033ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8033ab6:	9301      	str	r3, [sp, #4]
 8033ab8:	f1b8 0300 	subs.w	r3, r8, #0
 8033abc:	d023      	beq.n	8033b06 <__d2b+0x82>
 8033abe:	4668      	mov	r0, sp
 8033ac0:	9300      	str	r3, [sp, #0]
 8033ac2:	f7ff fd26 	bl	8033512 <__lo0bits>
 8033ac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8033aca:	b1d0      	cbz	r0, 8033b02 <__d2b+0x7e>
 8033acc:	f1c0 0320 	rsb	r3, r0, #32
 8033ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8033ad4:	430b      	orrs	r3, r1
 8033ad6:	40c2      	lsrs	r2, r0
 8033ad8:	6163      	str	r3, [r4, #20]
 8033ada:	9201      	str	r2, [sp, #4]
 8033adc:	9b01      	ldr	r3, [sp, #4]
 8033ade:	61a3      	str	r3, [r4, #24]
 8033ae0:	2b00      	cmp	r3, #0
 8033ae2:	bf0c      	ite	eq
 8033ae4:	2201      	moveq	r2, #1
 8033ae6:	2202      	movne	r2, #2
 8033ae8:	6122      	str	r2, [r4, #16]
 8033aea:	b1a5      	cbz	r5, 8033b16 <__d2b+0x92>
 8033aec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8033af0:	4405      	add	r5, r0
 8033af2:	603d      	str	r5, [r7, #0]
 8033af4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8033af8:	6030      	str	r0, [r6, #0]
 8033afa:	4620      	mov	r0, r4
 8033afc:	b003      	add	sp, #12
 8033afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033b02:	6161      	str	r1, [r4, #20]
 8033b04:	e7ea      	b.n	8033adc <__d2b+0x58>
 8033b06:	a801      	add	r0, sp, #4
 8033b08:	f7ff fd03 	bl	8033512 <__lo0bits>
 8033b0c:	9b01      	ldr	r3, [sp, #4]
 8033b0e:	6163      	str	r3, [r4, #20]
 8033b10:	3020      	adds	r0, #32
 8033b12:	2201      	movs	r2, #1
 8033b14:	e7e8      	b.n	8033ae8 <__d2b+0x64>
 8033b16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8033b1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8033b1e:	6038      	str	r0, [r7, #0]
 8033b20:	6918      	ldr	r0, [r3, #16]
 8033b22:	f7ff fcd7 	bl	80334d4 <__hi0bits>
 8033b26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8033b2a:	e7e5      	b.n	8033af8 <__d2b+0x74>
 8033b2c:	0803beae 	.word	0x0803beae
 8033b30:	0803bfa2 	.word	0x0803bfa2

08033b34 <__ratio>:
 8033b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033b38:	b085      	sub	sp, #20
 8033b3a:	e9cd 1000 	strd	r1, r0, [sp]
 8033b3e:	a902      	add	r1, sp, #8
 8033b40:	f7ff ff56 	bl	80339f0 <__b2d>
 8033b44:	9800      	ldr	r0, [sp, #0]
 8033b46:	a903      	add	r1, sp, #12
 8033b48:	ec55 4b10 	vmov	r4, r5, d0
 8033b4c:	f7ff ff50 	bl	80339f0 <__b2d>
 8033b50:	9b01      	ldr	r3, [sp, #4]
 8033b52:	6919      	ldr	r1, [r3, #16]
 8033b54:	9b00      	ldr	r3, [sp, #0]
 8033b56:	691b      	ldr	r3, [r3, #16]
 8033b58:	1ac9      	subs	r1, r1, r3
 8033b5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8033b5e:	1a9b      	subs	r3, r3, r2
 8033b60:	ec5b ab10 	vmov	sl, fp, d0
 8033b64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8033b68:	2b00      	cmp	r3, #0
 8033b6a:	bfce      	itee	gt
 8033b6c:	462a      	movgt	r2, r5
 8033b6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8033b72:	465a      	movle	r2, fp
 8033b74:	462f      	mov	r7, r5
 8033b76:	46d9      	mov	r9, fp
 8033b78:	bfcc      	ite	gt
 8033b7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8033b7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8033b82:	464b      	mov	r3, r9
 8033b84:	4652      	mov	r2, sl
 8033b86:	4620      	mov	r0, r4
 8033b88:	4639      	mov	r1, r7
 8033b8a:	f7dc fe77 	bl	801087c <__aeabi_ddiv>
 8033b8e:	ec41 0b10 	vmov	d0, r0, r1
 8033b92:	b005      	add	sp, #20
 8033b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033b98 <__copybits>:
 8033b98:	3901      	subs	r1, #1
 8033b9a:	b570      	push	{r4, r5, r6, lr}
 8033b9c:	1149      	asrs	r1, r1, #5
 8033b9e:	6914      	ldr	r4, [r2, #16]
 8033ba0:	3101      	adds	r1, #1
 8033ba2:	f102 0314 	add.w	r3, r2, #20
 8033ba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8033baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8033bae:	1f05      	subs	r5, r0, #4
 8033bb0:	42a3      	cmp	r3, r4
 8033bb2:	d30c      	bcc.n	8033bce <__copybits+0x36>
 8033bb4:	1aa3      	subs	r3, r4, r2
 8033bb6:	3b11      	subs	r3, #17
 8033bb8:	f023 0303 	bic.w	r3, r3, #3
 8033bbc:	3211      	adds	r2, #17
 8033bbe:	42a2      	cmp	r2, r4
 8033bc0:	bf88      	it	hi
 8033bc2:	2300      	movhi	r3, #0
 8033bc4:	4418      	add	r0, r3
 8033bc6:	2300      	movs	r3, #0
 8033bc8:	4288      	cmp	r0, r1
 8033bca:	d305      	bcc.n	8033bd8 <__copybits+0x40>
 8033bcc:	bd70      	pop	{r4, r5, r6, pc}
 8033bce:	f853 6b04 	ldr.w	r6, [r3], #4
 8033bd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8033bd6:	e7eb      	b.n	8033bb0 <__copybits+0x18>
 8033bd8:	f840 3b04 	str.w	r3, [r0], #4
 8033bdc:	e7f4      	b.n	8033bc8 <__copybits+0x30>

08033bde <__any_on>:
 8033bde:	f100 0214 	add.w	r2, r0, #20
 8033be2:	6900      	ldr	r0, [r0, #16]
 8033be4:	114b      	asrs	r3, r1, #5
 8033be6:	4298      	cmp	r0, r3
 8033be8:	b510      	push	{r4, lr}
 8033bea:	db11      	blt.n	8033c10 <__any_on+0x32>
 8033bec:	dd0a      	ble.n	8033c04 <__any_on+0x26>
 8033bee:	f011 011f 	ands.w	r1, r1, #31
 8033bf2:	d007      	beq.n	8033c04 <__any_on+0x26>
 8033bf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8033bf8:	fa24 f001 	lsr.w	r0, r4, r1
 8033bfc:	fa00 f101 	lsl.w	r1, r0, r1
 8033c00:	428c      	cmp	r4, r1
 8033c02:	d10b      	bne.n	8033c1c <__any_on+0x3e>
 8033c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8033c08:	4293      	cmp	r3, r2
 8033c0a:	d803      	bhi.n	8033c14 <__any_on+0x36>
 8033c0c:	2000      	movs	r0, #0
 8033c0e:	bd10      	pop	{r4, pc}
 8033c10:	4603      	mov	r3, r0
 8033c12:	e7f7      	b.n	8033c04 <__any_on+0x26>
 8033c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033c18:	2900      	cmp	r1, #0
 8033c1a:	d0f5      	beq.n	8033c08 <__any_on+0x2a>
 8033c1c:	2001      	movs	r0, #1
 8033c1e:	e7f6      	b.n	8033c0e <__any_on+0x30>

08033c20 <realloc>:
 8033c20:	4b02      	ldr	r3, [pc, #8]	@ (8033c2c <realloc+0xc>)
 8033c22:	460a      	mov	r2, r1
 8033c24:	4601      	mov	r1, r0
 8033c26:	6818      	ldr	r0, [r3, #0]
 8033c28:	f000 b890 	b.w	8033d4c <_realloc_r>
 8033c2c:	200002d8 	.word	0x200002d8

08033c30 <_fclose_r>:
 8033c30:	b570      	push	{r4, r5, r6, lr}
 8033c32:	4605      	mov	r5, r0
 8033c34:	460c      	mov	r4, r1
 8033c36:	b1b1      	cbz	r1, 8033c66 <_fclose_r+0x36>
 8033c38:	b118      	cbz	r0, 8033c42 <_fclose_r+0x12>
 8033c3a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8033c3c:	b90b      	cbnz	r3, 8033c42 <_fclose_r+0x12>
 8033c3e:	f7f8 fb79 	bl	802c334 <__sinit>
 8033c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033c44:	07de      	lsls	r6, r3, #31
 8033c46:	d405      	bmi.n	8033c54 <_fclose_r+0x24>
 8033c48:	89a3      	ldrh	r3, [r4, #12]
 8033c4a:	0598      	lsls	r0, r3, #22
 8033c4c:	d402      	bmi.n	8033c54 <_fclose_r+0x24>
 8033c4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033c50:	f7fa f84f 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 8033c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8033c58:	b943      	cbnz	r3, 8033c6c <_fclose_r+0x3c>
 8033c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033c5c:	07d9      	lsls	r1, r3, #31
 8033c5e:	d402      	bmi.n	8033c66 <_fclose_r+0x36>
 8033c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033c62:	f7fa f848 	bl	802dcf6 <__retarget_lock_release_recursive>
 8033c66:	2600      	movs	r6, #0
 8033c68:	4630      	mov	r0, r6
 8033c6a:	bd70      	pop	{r4, r5, r6, pc}
 8033c6c:	4621      	mov	r1, r4
 8033c6e:	4628      	mov	r0, r5
 8033c70:	f7f8 f996 	bl	802bfa0 <__sflush_r>
 8033c74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8033c76:	4606      	mov	r6, r0
 8033c78:	b133      	cbz	r3, 8033c88 <_fclose_r+0x58>
 8033c7a:	69e1      	ldr	r1, [r4, #28]
 8033c7c:	4628      	mov	r0, r5
 8033c7e:	4798      	blx	r3
 8033c80:	2800      	cmp	r0, #0
 8033c82:	bfb8      	it	lt
 8033c84:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8033c88:	89a3      	ldrh	r3, [r4, #12]
 8033c8a:	061a      	lsls	r2, r3, #24
 8033c8c:	d503      	bpl.n	8033c96 <_fclose_r+0x66>
 8033c8e:	6921      	ldr	r1, [r4, #16]
 8033c90:	4628      	mov	r0, r5
 8033c92:	f7fa ff33 	bl	802eafc <_free_r>
 8033c96:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8033c98:	b141      	cbz	r1, 8033cac <_fclose_r+0x7c>
 8033c9a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8033c9e:	4299      	cmp	r1, r3
 8033ca0:	d002      	beq.n	8033ca8 <_fclose_r+0x78>
 8033ca2:	4628      	mov	r0, r5
 8033ca4:	f7fa ff2a 	bl	802eafc <_free_r>
 8033ca8:	2300      	movs	r3, #0
 8033caa:	6323      	str	r3, [r4, #48]	@ 0x30
 8033cac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8033cae:	b121      	cbz	r1, 8033cba <_fclose_r+0x8a>
 8033cb0:	4628      	mov	r0, r5
 8033cb2:	f7fa ff23 	bl	802eafc <_free_r>
 8033cb6:	2300      	movs	r3, #0
 8033cb8:	6463      	str	r3, [r4, #68]	@ 0x44
 8033cba:	f7f8 fb2f 	bl	802c31c <__sfp_lock_acquire>
 8033cbe:	2300      	movs	r3, #0
 8033cc0:	81a3      	strh	r3, [r4, #12]
 8033cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033cc4:	07db      	lsls	r3, r3, #31
 8033cc6:	d402      	bmi.n	8033cce <_fclose_r+0x9e>
 8033cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033cca:	f7fa f814 	bl	802dcf6 <__retarget_lock_release_recursive>
 8033cce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033cd0:	f7fa f80d 	bl	802dcee <__retarget_lock_close_recursive>
 8033cd4:	f7f8 fb28 	bl	802c328 <__sfp_lock_release>
 8033cd8:	e7c6      	b.n	8033c68 <_fclose_r+0x38>

08033cda <__sccl>:
 8033cda:	b570      	push	{r4, r5, r6, lr}
 8033cdc:	780b      	ldrb	r3, [r1, #0]
 8033cde:	4604      	mov	r4, r0
 8033ce0:	2b5e      	cmp	r3, #94	@ 0x5e
 8033ce2:	bf0b      	itete	eq
 8033ce4:	784b      	ldrbeq	r3, [r1, #1]
 8033ce6:	1c4a      	addne	r2, r1, #1
 8033ce8:	1c8a      	addeq	r2, r1, #2
 8033cea:	2100      	movne	r1, #0
 8033cec:	bf08      	it	eq
 8033cee:	2101      	moveq	r1, #1
 8033cf0:	3801      	subs	r0, #1
 8033cf2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8033cf6:	f800 1f01 	strb.w	r1, [r0, #1]!
 8033cfa:	42a8      	cmp	r0, r5
 8033cfc:	d1fb      	bne.n	8033cf6 <__sccl+0x1c>
 8033cfe:	b90b      	cbnz	r3, 8033d04 <__sccl+0x2a>
 8033d00:	1e50      	subs	r0, r2, #1
 8033d02:	bd70      	pop	{r4, r5, r6, pc}
 8033d04:	f081 0101 	eor.w	r1, r1, #1
 8033d08:	54e1      	strb	r1, [r4, r3]
 8033d0a:	4610      	mov	r0, r2
 8033d0c:	4602      	mov	r2, r0
 8033d0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8033d12:	2d2d      	cmp	r5, #45	@ 0x2d
 8033d14:	d005      	beq.n	8033d22 <__sccl+0x48>
 8033d16:	2d5d      	cmp	r5, #93	@ 0x5d
 8033d18:	d016      	beq.n	8033d48 <__sccl+0x6e>
 8033d1a:	2d00      	cmp	r5, #0
 8033d1c:	d0f1      	beq.n	8033d02 <__sccl+0x28>
 8033d1e:	462b      	mov	r3, r5
 8033d20:	e7f2      	b.n	8033d08 <__sccl+0x2e>
 8033d22:	7846      	ldrb	r6, [r0, #1]
 8033d24:	2e5d      	cmp	r6, #93	@ 0x5d
 8033d26:	d0fa      	beq.n	8033d1e <__sccl+0x44>
 8033d28:	42b3      	cmp	r3, r6
 8033d2a:	dcf8      	bgt.n	8033d1e <__sccl+0x44>
 8033d2c:	3002      	adds	r0, #2
 8033d2e:	461a      	mov	r2, r3
 8033d30:	3201      	adds	r2, #1
 8033d32:	4296      	cmp	r6, r2
 8033d34:	54a1      	strb	r1, [r4, r2]
 8033d36:	dcfb      	bgt.n	8033d30 <__sccl+0x56>
 8033d38:	1af2      	subs	r2, r6, r3
 8033d3a:	3a01      	subs	r2, #1
 8033d3c:	1c5d      	adds	r5, r3, #1
 8033d3e:	42b3      	cmp	r3, r6
 8033d40:	bfa8      	it	ge
 8033d42:	2200      	movge	r2, #0
 8033d44:	18ab      	adds	r3, r5, r2
 8033d46:	e7e1      	b.n	8033d0c <__sccl+0x32>
 8033d48:	4610      	mov	r0, r2
 8033d4a:	e7da      	b.n	8033d02 <__sccl+0x28>

08033d4c <_realloc_r>:
 8033d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033d50:	4682      	mov	sl, r0
 8033d52:	4693      	mov	fp, r2
 8033d54:	460c      	mov	r4, r1
 8033d56:	b929      	cbnz	r1, 8033d64 <_realloc_r+0x18>
 8033d58:	4611      	mov	r1, r2
 8033d5a:	b003      	add	sp, #12
 8033d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033d60:	f7fa bfe4 	b.w	802ed2c <_malloc_r>
 8033d64:	f7ff faec 	bl	8033340 <__malloc_lock>
 8033d68:	f10b 080b 	add.w	r8, fp, #11
 8033d6c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8033d70:	f1b8 0f16 	cmp.w	r8, #22
 8033d74:	f1a4 0908 	sub.w	r9, r4, #8
 8033d78:	f025 0603 	bic.w	r6, r5, #3
 8033d7c:	d908      	bls.n	8033d90 <_realloc_r+0x44>
 8033d7e:	f038 0807 	bics.w	r8, r8, #7
 8033d82:	d507      	bpl.n	8033d94 <_realloc_r+0x48>
 8033d84:	230c      	movs	r3, #12
 8033d86:	f8ca 3000 	str.w	r3, [sl]
 8033d8a:	f04f 0b00 	mov.w	fp, #0
 8033d8e:	e032      	b.n	8033df6 <_realloc_r+0xaa>
 8033d90:	f04f 0810 	mov.w	r8, #16
 8033d94:	45c3      	cmp	fp, r8
 8033d96:	d8f5      	bhi.n	8033d84 <_realloc_r+0x38>
 8033d98:	4546      	cmp	r6, r8
 8033d9a:	f280 8174 	bge.w	8034086 <_realloc_r+0x33a>
 8033d9e:	4b9e      	ldr	r3, [pc, #632]	@ (8034018 <_realloc_r+0x2cc>)
 8033da0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8033da4:	eb09 0106 	add.w	r1, r9, r6
 8033da8:	458c      	cmp	ip, r1
 8033daa:	6848      	ldr	r0, [r1, #4]
 8033dac:	d005      	beq.n	8033dba <_realloc_r+0x6e>
 8033dae:	f020 0201 	bic.w	r2, r0, #1
 8033db2:	440a      	add	r2, r1
 8033db4:	6852      	ldr	r2, [r2, #4]
 8033db6:	07d7      	lsls	r7, r2, #31
 8033db8:	d449      	bmi.n	8033e4e <_realloc_r+0x102>
 8033dba:	f020 0003 	bic.w	r0, r0, #3
 8033dbe:	458c      	cmp	ip, r1
 8033dc0:	eb06 0700 	add.w	r7, r6, r0
 8033dc4:	d11b      	bne.n	8033dfe <_realloc_r+0xb2>
 8033dc6:	f108 0210 	add.w	r2, r8, #16
 8033dca:	42ba      	cmp	r2, r7
 8033dcc:	dc41      	bgt.n	8033e52 <_realloc_r+0x106>
 8033dce:	eb09 0208 	add.w	r2, r9, r8
 8033dd2:	eba7 0708 	sub.w	r7, r7, r8
 8033dd6:	f047 0701 	orr.w	r7, r7, #1
 8033dda:	609a      	str	r2, [r3, #8]
 8033ddc:	6057      	str	r7, [r2, #4]
 8033dde:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8033de2:	f003 0301 	and.w	r3, r3, #1
 8033de6:	ea43 0308 	orr.w	r3, r3, r8
 8033dea:	f844 3c04 	str.w	r3, [r4, #-4]
 8033dee:	4650      	mov	r0, sl
 8033df0:	f7ff faac 	bl	803334c <__malloc_unlock>
 8033df4:	46a3      	mov	fp, r4
 8033df6:	4658      	mov	r0, fp
 8033df8:	b003      	add	sp, #12
 8033dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033dfe:	45b8      	cmp	r8, r7
 8033e00:	dc27      	bgt.n	8033e52 <_realloc_r+0x106>
 8033e02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033e06:	60d3      	str	r3, [r2, #12]
 8033e08:	609a      	str	r2, [r3, #8]
 8033e0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8033e0e:	eba7 0008 	sub.w	r0, r7, r8
 8033e12:	280f      	cmp	r0, #15
 8033e14:	f003 0301 	and.w	r3, r3, #1
 8033e18:	eb09 0207 	add.w	r2, r9, r7
 8033e1c:	f240 8135 	bls.w	803408a <_realloc_r+0x33e>
 8033e20:	eb09 0108 	add.w	r1, r9, r8
 8033e24:	ea48 0303 	orr.w	r3, r8, r3
 8033e28:	f040 0001 	orr.w	r0, r0, #1
 8033e2c:	f8c9 3004 	str.w	r3, [r9, #4]
 8033e30:	6048      	str	r0, [r1, #4]
 8033e32:	6853      	ldr	r3, [r2, #4]
 8033e34:	f043 0301 	orr.w	r3, r3, #1
 8033e38:	6053      	str	r3, [r2, #4]
 8033e3a:	3108      	adds	r1, #8
 8033e3c:	4650      	mov	r0, sl
 8033e3e:	f7fa fe5d 	bl	802eafc <_free_r>
 8033e42:	4650      	mov	r0, sl
 8033e44:	f7ff fa82 	bl	803334c <__malloc_unlock>
 8033e48:	f109 0b08 	add.w	fp, r9, #8
 8033e4c:	e7d3      	b.n	8033df6 <_realloc_r+0xaa>
 8033e4e:	2000      	movs	r0, #0
 8033e50:	4601      	mov	r1, r0
 8033e52:	07ea      	lsls	r2, r5, #31
 8033e54:	f100 80c7 	bmi.w	8033fe6 <_realloc_r+0x29a>
 8033e58:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8033e5c:	eba9 0505 	sub.w	r5, r9, r5
 8033e60:	686a      	ldr	r2, [r5, #4]
 8033e62:	f022 0203 	bic.w	r2, r2, #3
 8033e66:	4432      	add	r2, r6
 8033e68:	9201      	str	r2, [sp, #4]
 8033e6a:	2900      	cmp	r1, #0
 8033e6c:	f000 8086 	beq.w	8033f7c <_realloc_r+0x230>
 8033e70:	458c      	cmp	ip, r1
 8033e72:	eb00 0702 	add.w	r7, r0, r2
 8033e76:	d149      	bne.n	8033f0c <_realloc_r+0x1c0>
 8033e78:	f108 0210 	add.w	r2, r8, #16
 8033e7c:	42ba      	cmp	r2, r7
 8033e7e:	dc7d      	bgt.n	8033f7c <_realloc_r+0x230>
 8033e80:	46ab      	mov	fp, r5
 8033e82:	68ea      	ldr	r2, [r5, #12]
 8033e84:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8033e88:	60ca      	str	r2, [r1, #12]
 8033e8a:	6091      	str	r1, [r2, #8]
 8033e8c:	1f32      	subs	r2, r6, #4
 8033e8e:	2a24      	cmp	r2, #36	@ 0x24
 8033e90:	d836      	bhi.n	8033f00 <_realloc_r+0x1b4>
 8033e92:	2a13      	cmp	r2, #19
 8033e94:	d932      	bls.n	8033efc <_realloc_r+0x1b0>
 8033e96:	6821      	ldr	r1, [r4, #0]
 8033e98:	60a9      	str	r1, [r5, #8]
 8033e9a:	6861      	ldr	r1, [r4, #4]
 8033e9c:	60e9      	str	r1, [r5, #12]
 8033e9e:	2a1b      	cmp	r2, #27
 8033ea0:	d81a      	bhi.n	8033ed8 <_realloc_r+0x18c>
 8033ea2:	3408      	adds	r4, #8
 8033ea4:	f105 0210 	add.w	r2, r5, #16
 8033ea8:	6821      	ldr	r1, [r4, #0]
 8033eaa:	6011      	str	r1, [r2, #0]
 8033eac:	6861      	ldr	r1, [r4, #4]
 8033eae:	6051      	str	r1, [r2, #4]
 8033eb0:	68a1      	ldr	r1, [r4, #8]
 8033eb2:	6091      	str	r1, [r2, #8]
 8033eb4:	eb05 0208 	add.w	r2, r5, r8
 8033eb8:	eba7 0708 	sub.w	r7, r7, r8
 8033ebc:	f047 0701 	orr.w	r7, r7, #1
 8033ec0:	609a      	str	r2, [r3, #8]
 8033ec2:	6057      	str	r7, [r2, #4]
 8033ec4:	686b      	ldr	r3, [r5, #4]
 8033ec6:	f003 0301 	and.w	r3, r3, #1
 8033eca:	ea43 0308 	orr.w	r3, r3, r8
 8033ece:	606b      	str	r3, [r5, #4]
 8033ed0:	4650      	mov	r0, sl
 8033ed2:	f7ff fa3b 	bl	803334c <__malloc_unlock>
 8033ed6:	e78e      	b.n	8033df6 <_realloc_r+0xaa>
 8033ed8:	68a1      	ldr	r1, [r4, #8]
 8033eda:	6129      	str	r1, [r5, #16]
 8033edc:	68e1      	ldr	r1, [r4, #12]
 8033ede:	6169      	str	r1, [r5, #20]
 8033ee0:	2a24      	cmp	r2, #36	@ 0x24
 8033ee2:	bf01      	itttt	eq
 8033ee4:	6922      	ldreq	r2, [r4, #16]
 8033ee6:	61aa      	streq	r2, [r5, #24]
 8033ee8:	6961      	ldreq	r1, [r4, #20]
 8033eea:	61e9      	streq	r1, [r5, #28]
 8033eec:	bf19      	ittee	ne
 8033eee:	3410      	addne	r4, #16
 8033ef0:	f105 0218 	addne.w	r2, r5, #24
 8033ef4:	f105 0220 	addeq.w	r2, r5, #32
 8033ef8:	3418      	addeq	r4, #24
 8033efa:	e7d5      	b.n	8033ea8 <_realloc_r+0x15c>
 8033efc:	465a      	mov	r2, fp
 8033efe:	e7d3      	b.n	8033ea8 <_realloc_r+0x15c>
 8033f00:	4621      	mov	r1, r4
 8033f02:	4658      	mov	r0, fp
 8033f04:	f7f8 fca2 	bl	802c84c <memmove>
 8033f08:	4b43      	ldr	r3, [pc, #268]	@ (8034018 <_realloc_r+0x2cc>)
 8033f0a:	e7d3      	b.n	8033eb4 <_realloc_r+0x168>
 8033f0c:	45b8      	cmp	r8, r7
 8033f0e:	dc35      	bgt.n	8033f7c <_realloc_r+0x230>
 8033f10:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033f14:	4628      	mov	r0, r5
 8033f16:	60d3      	str	r3, [r2, #12]
 8033f18:	609a      	str	r2, [r3, #8]
 8033f1a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8033f1e:	68eb      	ldr	r3, [r5, #12]
 8033f20:	60d3      	str	r3, [r2, #12]
 8033f22:	609a      	str	r2, [r3, #8]
 8033f24:	1f32      	subs	r2, r6, #4
 8033f26:	2a24      	cmp	r2, #36	@ 0x24
 8033f28:	d824      	bhi.n	8033f74 <_realloc_r+0x228>
 8033f2a:	2a13      	cmp	r2, #19
 8033f2c:	d908      	bls.n	8033f40 <_realloc_r+0x1f4>
 8033f2e:	6823      	ldr	r3, [r4, #0]
 8033f30:	60ab      	str	r3, [r5, #8]
 8033f32:	6863      	ldr	r3, [r4, #4]
 8033f34:	60eb      	str	r3, [r5, #12]
 8033f36:	2a1b      	cmp	r2, #27
 8033f38:	d80a      	bhi.n	8033f50 <_realloc_r+0x204>
 8033f3a:	3408      	adds	r4, #8
 8033f3c:	f105 0010 	add.w	r0, r5, #16
 8033f40:	6823      	ldr	r3, [r4, #0]
 8033f42:	6003      	str	r3, [r0, #0]
 8033f44:	6863      	ldr	r3, [r4, #4]
 8033f46:	6043      	str	r3, [r0, #4]
 8033f48:	68a3      	ldr	r3, [r4, #8]
 8033f4a:	6083      	str	r3, [r0, #8]
 8033f4c:	46a9      	mov	r9, r5
 8033f4e:	e75c      	b.n	8033e0a <_realloc_r+0xbe>
 8033f50:	68a3      	ldr	r3, [r4, #8]
 8033f52:	612b      	str	r3, [r5, #16]
 8033f54:	68e3      	ldr	r3, [r4, #12]
 8033f56:	616b      	str	r3, [r5, #20]
 8033f58:	2a24      	cmp	r2, #36	@ 0x24
 8033f5a:	bf01      	itttt	eq
 8033f5c:	6923      	ldreq	r3, [r4, #16]
 8033f5e:	61ab      	streq	r3, [r5, #24]
 8033f60:	6963      	ldreq	r3, [r4, #20]
 8033f62:	61eb      	streq	r3, [r5, #28]
 8033f64:	bf19      	ittee	ne
 8033f66:	3410      	addne	r4, #16
 8033f68:	f105 0018 	addne.w	r0, r5, #24
 8033f6c:	f105 0020 	addeq.w	r0, r5, #32
 8033f70:	3418      	addeq	r4, #24
 8033f72:	e7e5      	b.n	8033f40 <_realloc_r+0x1f4>
 8033f74:	4621      	mov	r1, r4
 8033f76:	f7f8 fc69 	bl	802c84c <memmove>
 8033f7a:	e7e7      	b.n	8033f4c <_realloc_r+0x200>
 8033f7c:	9b01      	ldr	r3, [sp, #4]
 8033f7e:	4598      	cmp	r8, r3
 8033f80:	dc31      	bgt.n	8033fe6 <_realloc_r+0x29a>
 8033f82:	4628      	mov	r0, r5
 8033f84:	68eb      	ldr	r3, [r5, #12]
 8033f86:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8033f8a:	60d3      	str	r3, [r2, #12]
 8033f8c:	609a      	str	r2, [r3, #8]
 8033f8e:	1f32      	subs	r2, r6, #4
 8033f90:	2a24      	cmp	r2, #36	@ 0x24
 8033f92:	d824      	bhi.n	8033fde <_realloc_r+0x292>
 8033f94:	2a13      	cmp	r2, #19
 8033f96:	d908      	bls.n	8033faa <_realloc_r+0x25e>
 8033f98:	6823      	ldr	r3, [r4, #0]
 8033f9a:	60ab      	str	r3, [r5, #8]
 8033f9c:	6863      	ldr	r3, [r4, #4]
 8033f9e:	60eb      	str	r3, [r5, #12]
 8033fa0:	2a1b      	cmp	r2, #27
 8033fa2:	d80a      	bhi.n	8033fba <_realloc_r+0x26e>
 8033fa4:	3408      	adds	r4, #8
 8033fa6:	f105 0010 	add.w	r0, r5, #16
 8033faa:	6823      	ldr	r3, [r4, #0]
 8033fac:	6003      	str	r3, [r0, #0]
 8033fae:	6863      	ldr	r3, [r4, #4]
 8033fb0:	6043      	str	r3, [r0, #4]
 8033fb2:	68a3      	ldr	r3, [r4, #8]
 8033fb4:	6083      	str	r3, [r0, #8]
 8033fb6:	9f01      	ldr	r7, [sp, #4]
 8033fb8:	e7c8      	b.n	8033f4c <_realloc_r+0x200>
 8033fba:	68a3      	ldr	r3, [r4, #8]
 8033fbc:	612b      	str	r3, [r5, #16]
 8033fbe:	68e3      	ldr	r3, [r4, #12]
 8033fc0:	616b      	str	r3, [r5, #20]
 8033fc2:	2a24      	cmp	r2, #36	@ 0x24
 8033fc4:	bf01      	itttt	eq
 8033fc6:	6923      	ldreq	r3, [r4, #16]
 8033fc8:	61ab      	streq	r3, [r5, #24]
 8033fca:	6963      	ldreq	r3, [r4, #20]
 8033fcc:	61eb      	streq	r3, [r5, #28]
 8033fce:	bf19      	ittee	ne
 8033fd0:	3410      	addne	r4, #16
 8033fd2:	f105 0018 	addne.w	r0, r5, #24
 8033fd6:	f105 0020 	addeq.w	r0, r5, #32
 8033fda:	3418      	addeq	r4, #24
 8033fdc:	e7e5      	b.n	8033faa <_realloc_r+0x25e>
 8033fde:	4621      	mov	r1, r4
 8033fe0:	f7f8 fc34 	bl	802c84c <memmove>
 8033fe4:	e7e7      	b.n	8033fb6 <_realloc_r+0x26a>
 8033fe6:	4659      	mov	r1, fp
 8033fe8:	4650      	mov	r0, sl
 8033fea:	f7fa fe9f 	bl	802ed2c <_malloc_r>
 8033fee:	4683      	mov	fp, r0
 8033ff0:	b918      	cbnz	r0, 8033ffa <_realloc_r+0x2ae>
 8033ff2:	4650      	mov	r0, sl
 8033ff4:	f7ff f9aa 	bl	803334c <__malloc_unlock>
 8033ff8:	e6c7      	b.n	8033d8a <_realloc_r+0x3e>
 8033ffa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8033ffe:	f023 0301 	bic.w	r3, r3, #1
 8034002:	444b      	add	r3, r9
 8034004:	f1a0 0208 	sub.w	r2, r0, #8
 8034008:	4293      	cmp	r3, r2
 803400a:	d107      	bne.n	803401c <_realloc_r+0x2d0>
 803400c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8034010:	f027 0703 	bic.w	r7, r7, #3
 8034014:	4437      	add	r7, r6
 8034016:	e6f8      	b.n	8033e0a <_realloc_r+0xbe>
 8034018:	2000040c 	.word	0x2000040c
 803401c:	1f32      	subs	r2, r6, #4
 803401e:	2a24      	cmp	r2, #36	@ 0x24
 8034020:	d82d      	bhi.n	803407e <_realloc_r+0x332>
 8034022:	2a13      	cmp	r2, #19
 8034024:	d928      	bls.n	8034078 <_realloc_r+0x32c>
 8034026:	6823      	ldr	r3, [r4, #0]
 8034028:	6003      	str	r3, [r0, #0]
 803402a:	6863      	ldr	r3, [r4, #4]
 803402c:	6043      	str	r3, [r0, #4]
 803402e:	2a1b      	cmp	r2, #27
 8034030:	d80e      	bhi.n	8034050 <_realloc_r+0x304>
 8034032:	f104 0208 	add.w	r2, r4, #8
 8034036:	f100 0308 	add.w	r3, r0, #8
 803403a:	6811      	ldr	r1, [r2, #0]
 803403c:	6019      	str	r1, [r3, #0]
 803403e:	6851      	ldr	r1, [r2, #4]
 8034040:	6059      	str	r1, [r3, #4]
 8034042:	6892      	ldr	r2, [r2, #8]
 8034044:	609a      	str	r2, [r3, #8]
 8034046:	4621      	mov	r1, r4
 8034048:	4650      	mov	r0, sl
 803404a:	f7fa fd57 	bl	802eafc <_free_r>
 803404e:	e73f      	b.n	8033ed0 <_realloc_r+0x184>
 8034050:	68a3      	ldr	r3, [r4, #8]
 8034052:	6083      	str	r3, [r0, #8]
 8034054:	68e3      	ldr	r3, [r4, #12]
 8034056:	60c3      	str	r3, [r0, #12]
 8034058:	2a24      	cmp	r2, #36	@ 0x24
 803405a:	bf01      	itttt	eq
 803405c:	6923      	ldreq	r3, [r4, #16]
 803405e:	6103      	streq	r3, [r0, #16]
 8034060:	6961      	ldreq	r1, [r4, #20]
 8034062:	6141      	streq	r1, [r0, #20]
 8034064:	bf19      	ittee	ne
 8034066:	f104 0210 	addne.w	r2, r4, #16
 803406a:	f100 0310 	addne.w	r3, r0, #16
 803406e:	f104 0218 	addeq.w	r2, r4, #24
 8034072:	f100 0318 	addeq.w	r3, r0, #24
 8034076:	e7e0      	b.n	803403a <_realloc_r+0x2ee>
 8034078:	4603      	mov	r3, r0
 803407a:	4622      	mov	r2, r4
 803407c:	e7dd      	b.n	803403a <_realloc_r+0x2ee>
 803407e:	4621      	mov	r1, r4
 8034080:	f7f8 fbe4 	bl	802c84c <memmove>
 8034084:	e7df      	b.n	8034046 <_realloc_r+0x2fa>
 8034086:	4637      	mov	r7, r6
 8034088:	e6bf      	b.n	8033e0a <_realloc_r+0xbe>
 803408a:	431f      	orrs	r7, r3
 803408c:	f8c9 7004 	str.w	r7, [r9, #4]
 8034090:	6853      	ldr	r3, [r2, #4]
 8034092:	f043 0301 	orr.w	r3, r3, #1
 8034096:	6053      	str	r3, [r2, #4]
 8034098:	e6d3      	b.n	8033e42 <_realloc_r+0xf6>
 803409a:	bf00      	nop

0803409c <sulp>:
 803409c:	b570      	push	{r4, r5, r6, lr}
 803409e:	4604      	mov	r4, r0
 80340a0:	460d      	mov	r5, r1
 80340a2:	ec45 4b10 	vmov	d0, r4, r5
 80340a6:	4616      	mov	r6, r2
 80340a8:	f7ff fc7c 	bl	80339a4 <__ulp>
 80340ac:	ec51 0b10 	vmov	r0, r1, d0
 80340b0:	b17e      	cbz	r6, 80340d2 <sulp+0x36>
 80340b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80340b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80340ba:	2b00      	cmp	r3, #0
 80340bc:	dd09      	ble.n	80340d2 <sulp+0x36>
 80340be:	051b      	lsls	r3, r3, #20
 80340c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80340c4:	2400      	movs	r4, #0
 80340c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80340ca:	4622      	mov	r2, r4
 80340cc:	462b      	mov	r3, r5
 80340ce:	f7dc faab 	bl	8010628 <__aeabi_dmul>
 80340d2:	ec41 0b10 	vmov	d0, r0, r1
 80340d6:	bd70      	pop	{r4, r5, r6, pc}

080340d8 <_strtod_l>:
 80340d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80340dc:	b09f      	sub	sp, #124	@ 0x7c
 80340de:	460c      	mov	r4, r1
 80340e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80340e2:	2200      	movs	r2, #0
 80340e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80340e6:	9005      	str	r0, [sp, #20]
 80340e8:	f04f 0a00 	mov.w	sl, #0
 80340ec:	f04f 0b00 	mov.w	fp, #0
 80340f0:	460a      	mov	r2, r1
 80340f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80340f4:	7811      	ldrb	r1, [r2, #0]
 80340f6:	292b      	cmp	r1, #43	@ 0x2b
 80340f8:	d04a      	beq.n	8034190 <_strtod_l+0xb8>
 80340fa:	d838      	bhi.n	803416e <_strtod_l+0x96>
 80340fc:	290d      	cmp	r1, #13
 80340fe:	d832      	bhi.n	8034166 <_strtod_l+0x8e>
 8034100:	2908      	cmp	r1, #8
 8034102:	d832      	bhi.n	803416a <_strtod_l+0x92>
 8034104:	2900      	cmp	r1, #0
 8034106:	d03b      	beq.n	8034180 <_strtod_l+0xa8>
 8034108:	2200      	movs	r2, #0
 803410a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803410c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803410e:	782a      	ldrb	r2, [r5, #0]
 8034110:	2a30      	cmp	r2, #48	@ 0x30
 8034112:	f040 80b3 	bne.w	803427c <_strtod_l+0x1a4>
 8034116:	786a      	ldrb	r2, [r5, #1]
 8034118:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803411c:	2a58      	cmp	r2, #88	@ 0x58
 803411e:	d16e      	bne.n	80341fe <_strtod_l+0x126>
 8034120:	9302      	str	r3, [sp, #8]
 8034122:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034124:	9301      	str	r3, [sp, #4]
 8034126:	ab1a      	add	r3, sp, #104	@ 0x68
 8034128:	9300      	str	r3, [sp, #0]
 803412a:	4a8e      	ldr	r2, [pc, #568]	@ (8034364 <_strtod_l+0x28c>)
 803412c:	9805      	ldr	r0, [sp, #20]
 803412e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8034130:	a919      	add	r1, sp, #100	@ 0x64
 8034132:	f001 fa51 	bl	80355d8 <__gethex>
 8034136:	f010 060f 	ands.w	r6, r0, #15
 803413a:	4604      	mov	r4, r0
 803413c:	d005      	beq.n	803414a <_strtod_l+0x72>
 803413e:	2e06      	cmp	r6, #6
 8034140:	d128      	bne.n	8034194 <_strtod_l+0xbc>
 8034142:	3501      	adds	r5, #1
 8034144:	2300      	movs	r3, #0
 8034146:	9519      	str	r5, [sp, #100]	@ 0x64
 8034148:	930b      	str	r3, [sp, #44]	@ 0x2c
 803414a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803414c:	2b00      	cmp	r3, #0
 803414e:	f040 858e 	bne.w	8034c6e <_strtod_l+0xb96>
 8034152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8034154:	b1cb      	cbz	r3, 803418a <_strtod_l+0xb2>
 8034156:	4652      	mov	r2, sl
 8034158:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 803415c:	ec43 2b10 	vmov	d0, r2, r3
 8034160:	b01f      	add	sp, #124	@ 0x7c
 8034162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034166:	2920      	cmp	r1, #32
 8034168:	d1ce      	bne.n	8034108 <_strtod_l+0x30>
 803416a:	3201      	adds	r2, #1
 803416c:	e7c1      	b.n	80340f2 <_strtod_l+0x1a>
 803416e:	292d      	cmp	r1, #45	@ 0x2d
 8034170:	d1ca      	bne.n	8034108 <_strtod_l+0x30>
 8034172:	2101      	movs	r1, #1
 8034174:	910b      	str	r1, [sp, #44]	@ 0x2c
 8034176:	1c51      	adds	r1, r2, #1
 8034178:	9119      	str	r1, [sp, #100]	@ 0x64
 803417a:	7852      	ldrb	r2, [r2, #1]
 803417c:	2a00      	cmp	r2, #0
 803417e:	d1c5      	bne.n	803410c <_strtod_l+0x34>
 8034180:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8034182:	9419      	str	r4, [sp, #100]	@ 0x64
 8034184:	2b00      	cmp	r3, #0
 8034186:	f040 8570 	bne.w	8034c6a <_strtod_l+0xb92>
 803418a:	4652      	mov	r2, sl
 803418c:	465b      	mov	r3, fp
 803418e:	e7e5      	b.n	803415c <_strtod_l+0x84>
 8034190:	2100      	movs	r1, #0
 8034192:	e7ef      	b.n	8034174 <_strtod_l+0x9c>
 8034194:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8034196:	b13a      	cbz	r2, 80341a8 <_strtod_l+0xd0>
 8034198:	2135      	movs	r1, #53	@ 0x35
 803419a:	a81c      	add	r0, sp, #112	@ 0x70
 803419c:	f7ff fcfc 	bl	8033b98 <__copybits>
 80341a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80341a2:	9805      	ldr	r0, [sp, #20]
 80341a4:	f7ff f8fd 	bl	80333a2 <_Bfree>
 80341a8:	3e01      	subs	r6, #1
 80341aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80341ac:	2e04      	cmp	r6, #4
 80341ae:	d806      	bhi.n	80341be <_strtod_l+0xe6>
 80341b0:	e8df f006 	tbb	[pc, r6]
 80341b4:	201d0314 	.word	0x201d0314
 80341b8:	14          	.byte	0x14
 80341b9:	00          	.byte	0x00
 80341ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80341be:	05e1      	lsls	r1, r4, #23
 80341c0:	bf48      	it	mi
 80341c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80341c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80341ca:	0d1b      	lsrs	r3, r3, #20
 80341cc:	051b      	lsls	r3, r3, #20
 80341ce:	2b00      	cmp	r3, #0
 80341d0:	d1bb      	bne.n	803414a <_strtod_l+0x72>
 80341d2:	f7f9 fd59 	bl	802dc88 <__errno>
 80341d6:	2322      	movs	r3, #34	@ 0x22
 80341d8:	6003      	str	r3, [r0, #0]
 80341da:	e7b6      	b.n	803414a <_strtod_l+0x72>
 80341dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80341e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80341e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80341e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80341ec:	e7e7      	b.n	80341be <_strtod_l+0xe6>
 80341ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 803436c <_strtod_l+0x294>
 80341f2:	e7e4      	b.n	80341be <_strtod_l+0xe6>
 80341f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80341f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80341fc:	e7df      	b.n	80341be <_strtod_l+0xe6>
 80341fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034200:	1c5a      	adds	r2, r3, #1
 8034202:	9219      	str	r2, [sp, #100]	@ 0x64
 8034204:	785b      	ldrb	r3, [r3, #1]
 8034206:	2b30      	cmp	r3, #48	@ 0x30
 8034208:	d0f9      	beq.n	80341fe <_strtod_l+0x126>
 803420a:	2b00      	cmp	r3, #0
 803420c:	d09d      	beq.n	803414a <_strtod_l+0x72>
 803420e:	2301      	movs	r3, #1
 8034210:	9309      	str	r3, [sp, #36]	@ 0x24
 8034212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034214:	930c      	str	r3, [sp, #48]	@ 0x30
 8034216:	2300      	movs	r3, #0
 8034218:	9308      	str	r3, [sp, #32]
 803421a:	930a      	str	r3, [sp, #40]	@ 0x28
 803421c:	461f      	mov	r7, r3
 803421e:	220a      	movs	r2, #10
 8034220:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8034222:	7805      	ldrb	r5, [r0, #0]
 8034224:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8034228:	b2d9      	uxtb	r1, r3
 803422a:	2909      	cmp	r1, #9
 803422c:	d928      	bls.n	8034280 <_strtod_l+0x1a8>
 803422e:	494e      	ldr	r1, [pc, #312]	@ (8034368 <_strtod_l+0x290>)
 8034230:	2201      	movs	r2, #1
 8034232:	f7f8 fb5a 	bl	802c8ea <strncmp>
 8034236:	2800      	cmp	r0, #0
 8034238:	d032      	beq.n	80342a0 <_strtod_l+0x1c8>
 803423a:	2000      	movs	r0, #0
 803423c:	462a      	mov	r2, r5
 803423e:	4681      	mov	r9, r0
 8034240:	463d      	mov	r5, r7
 8034242:	4603      	mov	r3, r0
 8034244:	2a65      	cmp	r2, #101	@ 0x65
 8034246:	d001      	beq.n	803424c <_strtod_l+0x174>
 8034248:	2a45      	cmp	r2, #69	@ 0x45
 803424a:	d114      	bne.n	8034276 <_strtod_l+0x19e>
 803424c:	b91d      	cbnz	r5, 8034256 <_strtod_l+0x17e>
 803424e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034250:	4302      	orrs	r2, r0
 8034252:	d095      	beq.n	8034180 <_strtod_l+0xa8>
 8034254:	2500      	movs	r5, #0
 8034256:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8034258:	1c62      	adds	r2, r4, #1
 803425a:	9219      	str	r2, [sp, #100]	@ 0x64
 803425c:	7862      	ldrb	r2, [r4, #1]
 803425e:	2a2b      	cmp	r2, #43	@ 0x2b
 8034260:	d077      	beq.n	8034352 <_strtod_l+0x27a>
 8034262:	2a2d      	cmp	r2, #45	@ 0x2d
 8034264:	d07b      	beq.n	803435e <_strtod_l+0x286>
 8034266:	f04f 0c00 	mov.w	ip, #0
 803426a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 803426e:	2909      	cmp	r1, #9
 8034270:	f240 8082 	bls.w	8034378 <_strtod_l+0x2a0>
 8034274:	9419      	str	r4, [sp, #100]	@ 0x64
 8034276:	f04f 0800 	mov.w	r8, #0
 803427a:	e0a2      	b.n	80343c2 <_strtod_l+0x2ea>
 803427c:	2300      	movs	r3, #0
 803427e:	e7c7      	b.n	8034210 <_strtod_l+0x138>
 8034280:	2f08      	cmp	r7, #8
 8034282:	bfd5      	itete	le
 8034284:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8034286:	9908      	ldrgt	r1, [sp, #32]
 8034288:	fb02 3301 	mlale	r3, r2, r1, r3
 803428c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8034290:	f100 0001 	add.w	r0, r0, #1
 8034294:	bfd4      	ite	le
 8034296:	930a      	strle	r3, [sp, #40]	@ 0x28
 8034298:	9308      	strgt	r3, [sp, #32]
 803429a:	3701      	adds	r7, #1
 803429c:	9019      	str	r0, [sp, #100]	@ 0x64
 803429e:	e7bf      	b.n	8034220 <_strtod_l+0x148>
 80342a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80342a2:	1c5a      	adds	r2, r3, #1
 80342a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80342a6:	785a      	ldrb	r2, [r3, #1]
 80342a8:	b37f      	cbz	r7, 803430a <_strtod_l+0x232>
 80342aa:	4681      	mov	r9, r0
 80342ac:	463d      	mov	r5, r7
 80342ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80342b2:	2b09      	cmp	r3, #9
 80342b4:	d912      	bls.n	80342dc <_strtod_l+0x204>
 80342b6:	2301      	movs	r3, #1
 80342b8:	e7c4      	b.n	8034244 <_strtod_l+0x16c>
 80342ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80342bc:	1c5a      	adds	r2, r3, #1
 80342be:	9219      	str	r2, [sp, #100]	@ 0x64
 80342c0:	785a      	ldrb	r2, [r3, #1]
 80342c2:	3001      	adds	r0, #1
 80342c4:	2a30      	cmp	r2, #48	@ 0x30
 80342c6:	d0f8      	beq.n	80342ba <_strtod_l+0x1e2>
 80342c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80342cc:	2b08      	cmp	r3, #8
 80342ce:	f200 84d3 	bhi.w	8034c78 <_strtod_l+0xba0>
 80342d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80342d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80342d6:	4681      	mov	r9, r0
 80342d8:	2000      	movs	r0, #0
 80342da:	4605      	mov	r5, r0
 80342dc:	3a30      	subs	r2, #48	@ 0x30
 80342de:	f100 0301 	add.w	r3, r0, #1
 80342e2:	d02a      	beq.n	803433a <_strtod_l+0x262>
 80342e4:	4499      	add	r9, r3
 80342e6:	eb00 0c05 	add.w	ip, r0, r5
 80342ea:	462b      	mov	r3, r5
 80342ec:	210a      	movs	r1, #10
 80342ee:	4563      	cmp	r3, ip
 80342f0:	d10d      	bne.n	803430e <_strtod_l+0x236>
 80342f2:	1c69      	adds	r1, r5, #1
 80342f4:	4401      	add	r1, r0
 80342f6:	4428      	add	r0, r5
 80342f8:	2808      	cmp	r0, #8
 80342fa:	dc16      	bgt.n	803432a <_strtod_l+0x252>
 80342fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80342fe:	230a      	movs	r3, #10
 8034300:	fb03 2300 	mla	r3, r3, r0, r2
 8034304:	930a      	str	r3, [sp, #40]	@ 0x28
 8034306:	2300      	movs	r3, #0
 8034308:	e018      	b.n	803433c <_strtod_l+0x264>
 803430a:	4638      	mov	r0, r7
 803430c:	e7da      	b.n	80342c4 <_strtod_l+0x1ec>
 803430e:	2b08      	cmp	r3, #8
 8034310:	f103 0301 	add.w	r3, r3, #1
 8034314:	dc03      	bgt.n	803431e <_strtod_l+0x246>
 8034316:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8034318:	434e      	muls	r6, r1
 803431a:	960a      	str	r6, [sp, #40]	@ 0x28
 803431c:	e7e7      	b.n	80342ee <_strtod_l+0x216>
 803431e:	2b10      	cmp	r3, #16
 8034320:	bfde      	ittt	le
 8034322:	9e08      	ldrle	r6, [sp, #32]
 8034324:	434e      	mulle	r6, r1
 8034326:	9608      	strle	r6, [sp, #32]
 8034328:	e7e1      	b.n	80342ee <_strtod_l+0x216>
 803432a:	280f      	cmp	r0, #15
 803432c:	dceb      	bgt.n	8034306 <_strtod_l+0x22e>
 803432e:	9808      	ldr	r0, [sp, #32]
 8034330:	230a      	movs	r3, #10
 8034332:	fb03 2300 	mla	r3, r3, r0, r2
 8034336:	9308      	str	r3, [sp, #32]
 8034338:	e7e5      	b.n	8034306 <_strtod_l+0x22e>
 803433a:	4629      	mov	r1, r5
 803433c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803433e:	1c50      	adds	r0, r2, #1
 8034340:	9019      	str	r0, [sp, #100]	@ 0x64
 8034342:	7852      	ldrb	r2, [r2, #1]
 8034344:	4618      	mov	r0, r3
 8034346:	460d      	mov	r5, r1
 8034348:	e7b1      	b.n	80342ae <_strtod_l+0x1d6>
 803434a:	f04f 0900 	mov.w	r9, #0
 803434e:	2301      	movs	r3, #1
 8034350:	e77d      	b.n	803424e <_strtod_l+0x176>
 8034352:	f04f 0c00 	mov.w	ip, #0
 8034356:	1ca2      	adds	r2, r4, #2
 8034358:	9219      	str	r2, [sp, #100]	@ 0x64
 803435a:	78a2      	ldrb	r2, [r4, #2]
 803435c:	e785      	b.n	803426a <_strtod_l+0x192>
 803435e:	f04f 0c01 	mov.w	ip, #1
 8034362:	e7f8      	b.n	8034356 <_strtod_l+0x27e>
 8034364:	0803c10c 	.word	0x0803c10c
 8034368:	0803bb76 	.word	0x0803bb76
 803436c:	7ff00000 	.word	0x7ff00000
 8034370:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034372:	1c51      	adds	r1, r2, #1
 8034374:	9119      	str	r1, [sp, #100]	@ 0x64
 8034376:	7852      	ldrb	r2, [r2, #1]
 8034378:	2a30      	cmp	r2, #48	@ 0x30
 803437a:	d0f9      	beq.n	8034370 <_strtod_l+0x298>
 803437c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8034380:	2908      	cmp	r1, #8
 8034382:	f63f af78 	bhi.w	8034276 <_strtod_l+0x19e>
 8034386:	3a30      	subs	r2, #48	@ 0x30
 8034388:	920e      	str	r2, [sp, #56]	@ 0x38
 803438a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803438c:	920f      	str	r2, [sp, #60]	@ 0x3c
 803438e:	f04f 080a 	mov.w	r8, #10
 8034392:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8034394:	1c56      	adds	r6, r2, #1
 8034396:	9619      	str	r6, [sp, #100]	@ 0x64
 8034398:	7852      	ldrb	r2, [r2, #1]
 803439a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 803439e:	f1be 0f09 	cmp.w	lr, #9
 80343a2:	d939      	bls.n	8034418 <_strtod_l+0x340>
 80343a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80343a6:	1a76      	subs	r6, r6, r1
 80343a8:	2e08      	cmp	r6, #8
 80343aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80343ae:	dc03      	bgt.n	80343b8 <_strtod_l+0x2e0>
 80343b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80343b2:	4588      	cmp	r8, r1
 80343b4:	bfa8      	it	ge
 80343b6:	4688      	movge	r8, r1
 80343b8:	f1bc 0f00 	cmp.w	ip, #0
 80343bc:	d001      	beq.n	80343c2 <_strtod_l+0x2ea>
 80343be:	f1c8 0800 	rsb	r8, r8, #0
 80343c2:	2d00      	cmp	r5, #0
 80343c4:	d14e      	bne.n	8034464 <_strtod_l+0x38c>
 80343c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80343c8:	4308      	orrs	r0, r1
 80343ca:	f47f aebe 	bne.w	803414a <_strtod_l+0x72>
 80343ce:	2b00      	cmp	r3, #0
 80343d0:	f47f aed6 	bne.w	8034180 <_strtod_l+0xa8>
 80343d4:	2a69      	cmp	r2, #105	@ 0x69
 80343d6:	d028      	beq.n	803442a <_strtod_l+0x352>
 80343d8:	dc25      	bgt.n	8034426 <_strtod_l+0x34e>
 80343da:	2a49      	cmp	r2, #73	@ 0x49
 80343dc:	d025      	beq.n	803442a <_strtod_l+0x352>
 80343de:	2a4e      	cmp	r2, #78	@ 0x4e
 80343e0:	f47f aece 	bne.w	8034180 <_strtod_l+0xa8>
 80343e4:	499b      	ldr	r1, [pc, #620]	@ (8034654 <_strtod_l+0x57c>)
 80343e6:	a819      	add	r0, sp, #100	@ 0x64
 80343e8:	f001 fb18 	bl	8035a1c <__match>
 80343ec:	2800      	cmp	r0, #0
 80343ee:	f43f aec7 	beq.w	8034180 <_strtod_l+0xa8>
 80343f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80343f4:	781b      	ldrb	r3, [r3, #0]
 80343f6:	2b28      	cmp	r3, #40	@ 0x28
 80343f8:	d12e      	bne.n	8034458 <_strtod_l+0x380>
 80343fa:	4997      	ldr	r1, [pc, #604]	@ (8034658 <_strtod_l+0x580>)
 80343fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80343fe:	a819      	add	r0, sp, #100	@ 0x64
 8034400:	f001 fb20 	bl	8035a44 <__hexnan>
 8034404:	2805      	cmp	r0, #5
 8034406:	d127      	bne.n	8034458 <_strtod_l+0x380>
 8034408:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 803440a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 803440e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8034412:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8034416:	e698      	b.n	803414a <_strtod_l+0x72>
 8034418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803441a:	fb08 2101 	mla	r1, r8, r1, r2
 803441e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8034422:	920e      	str	r2, [sp, #56]	@ 0x38
 8034424:	e7b5      	b.n	8034392 <_strtod_l+0x2ba>
 8034426:	2a6e      	cmp	r2, #110	@ 0x6e
 8034428:	e7da      	b.n	80343e0 <_strtod_l+0x308>
 803442a:	498c      	ldr	r1, [pc, #560]	@ (803465c <_strtod_l+0x584>)
 803442c:	a819      	add	r0, sp, #100	@ 0x64
 803442e:	f001 faf5 	bl	8035a1c <__match>
 8034432:	2800      	cmp	r0, #0
 8034434:	f43f aea4 	beq.w	8034180 <_strtod_l+0xa8>
 8034438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803443a:	4989      	ldr	r1, [pc, #548]	@ (8034660 <_strtod_l+0x588>)
 803443c:	3b01      	subs	r3, #1
 803443e:	a819      	add	r0, sp, #100	@ 0x64
 8034440:	9319      	str	r3, [sp, #100]	@ 0x64
 8034442:	f001 faeb 	bl	8035a1c <__match>
 8034446:	b910      	cbnz	r0, 803444e <_strtod_l+0x376>
 8034448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803444a:	3301      	adds	r3, #1
 803444c:	9319      	str	r3, [sp, #100]	@ 0x64
 803444e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8034670 <_strtod_l+0x598>
 8034452:	f04f 0a00 	mov.w	sl, #0
 8034456:	e678      	b.n	803414a <_strtod_l+0x72>
 8034458:	4882      	ldr	r0, [pc, #520]	@ (8034664 <_strtod_l+0x58c>)
 803445a:	f001 f805 	bl	8035468 <nan>
 803445e:	ec5b ab10 	vmov	sl, fp, d0
 8034462:	e672      	b.n	803414a <_strtod_l+0x72>
 8034464:	eba8 0309 	sub.w	r3, r8, r9
 8034468:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803446a:	9309      	str	r3, [sp, #36]	@ 0x24
 803446c:	2f00      	cmp	r7, #0
 803446e:	bf08      	it	eq
 8034470:	462f      	moveq	r7, r5
 8034472:	2d10      	cmp	r5, #16
 8034474:	462c      	mov	r4, r5
 8034476:	bfa8      	it	ge
 8034478:	2410      	movge	r4, #16
 803447a:	f7dc f85b 	bl	8010534 <__aeabi_ui2d>
 803447e:	2d09      	cmp	r5, #9
 8034480:	4682      	mov	sl, r0
 8034482:	468b      	mov	fp, r1
 8034484:	dc13      	bgt.n	80344ae <_strtod_l+0x3d6>
 8034486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034488:	2b00      	cmp	r3, #0
 803448a:	f43f ae5e 	beq.w	803414a <_strtod_l+0x72>
 803448e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034490:	dd78      	ble.n	8034584 <_strtod_l+0x4ac>
 8034492:	2b16      	cmp	r3, #22
 8034494:	dc5f      	bgt.n	8034556 <_strtod_l+0x47e>
 8034496:	4974      	ldr	r1, [pc, #464]	@ (8034668 <_strtod_l+0x590>)
 8034498:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803449c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80344a0:	4652      	mov	r2, sl
 80344a2:	465b      	mov	r3, fp
 80344a4:	f7dc f8c0 	bl	8010628 <__aeabi_dmul>
 80344a8:	4682      	mov	sl, r0
 80344aa:	468b      	mov	fp, r1
 80344ac:	e64d      	b.n	803414a <_strtod_l+0x72>
 80344ae:	4b6e      	ldr	r3, [pc, #440]	@ (8034668 <_strtod_l+0x590>)
 80344b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80344b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80344b8:	f7dc f8b6 	bl	8010628 <__aeabi_dmul>
 80344bc:	4682      	mov	sl, r0
 80344be:	9808      	ldr	r0, [sp, #32]
 80344c0:	468b      	mov	fp, r1
 80344c2:	f7dc f837 	bl	8010534 <__aeabi_ui2d>
 80344c6:	4602      	mov	r2, r0
 80344c8:	460b      	mov	r3, r1
 80344ca:	4650      	mov	r0, sl
 80344cc:	4659      	mov	r1, fp
 80344ce:	f7db fef5 	bl	80102bc <__adddf3>
 80344d2:	2d0f      	cmp	r5, #15
 80344d4:	4682      	mov	sl, r0
 80344d6:	468b      	mov	fp, r1
 80344d8:	ddd5      	ble.n	8034486 <_strtod_l+0x3ae>
 80344da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80344dc:	1b2c      	subs	r4, r5, r4
 80344de:	441c      	add	r4, r3
 80344e0:	2c00      	cmp	r4, #0
 80344e2:	f340 8096 	ble.w	8034612 <_strtod_l+0x53a>
 80344e6:	f014 030f 	ands.w	r3, r4, #15
 80344ea:	d00a      	beq.n	8034502 <_strtod_l+0x42a>
 80344ec:	495e      	ldr	r1, [pc, #376]	@ (8034668 <_strtod_l+0x590>)
 80344ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80344f2:	4652      	mov	r2, sl
 80344f4:	465b      	mov	r3, fp
 80344f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80344fa:	f7dc f895 	bl	8010628 <__aeabi_dmul>
 80344fe:	4682      	mov	sl, r0
 8034500:	468b      	mov	fp, r1
 8034502:	f034 040f 	bics.w	r4, r4, #15
 8034506:	d073      	beq.n	80345f0 <_strtod_l+0x518>
 8034508:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 803450c:	dd48      	ble.n	80345a0 <_strtod_l+0x4c8>
 803450e:	2400      	movs	r4, #0
 8034510:	46a0      	mov	r8, r4
 8034512:	940a      	str	r4, [sp, #40]	@ 0x28
 8034514:	46a1      	mov	r9, r4
 8034516:	9a05      	ldr	r2, [sp, #20]
 8034518:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8034670 <_strtod_l+0x598>
 803451c:	2322      	movs	r3, #34	@ 0x22
 803451e:	6013      	str	r3, [r2, #0]
 8034520:	f04f 0a00 	mov.w	sl, #0
 8034524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034526:	2b00      	cmp	r3, #0
 8034528:	f43f ae0f 	beq.w	803414a <_strtod_l+0x72>
 803452c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803452e:	9805      	ldr	r0, [sp, #20]
 8034530:	f7fe ff37 	bl	80333a2 <_Bfree>
 8034534:	9805      	ldr	r0, [sp, #20]
 8034536:	4649      	mov	r1, r9
 8034538:	f7fe ff33 	bl	80333a2 <_Bfree>
 803453c:	9805      	ldr	r0, [sp, #20]
 803453e:	4641      	mov	r1, r8
 8034540:	f7fe ff2f 	bl	80333a2 <_Bfree>
 8034544:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8034546:	9805      	ldr	r0, [sp, #20]
 8034548:	f7fe ff2b 	bl	80333a2 <_Bfree>
 803454c:	9805      	ldr	r0, [sp, #20]
 803454e:	4621      	mov	r1, r4
 8034550:	f7fe ff27 	bl	80333a2 <_Bfree>
 8034554:	e5f9      	b.n	803414a <_strtod_l+0x72>
 8034556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034558:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 803455c:	4293      	cmp	r3, r2
 803455e:	dbbc      	blt.n	80344da <_strtod_l+0x402>
 8034560:	4c41      	ldr	r4, [pc, #260]	@ (8034668 <_strtod_l+0x590>)
 8034562:	f1c5 050f 	rsb	r5, r5, #15
 8034566:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803456a:	4652      	mov	r2, sl
 803456c:	465b      	mov	r3, fp
 803456e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8034572:	f7dc f859 	bl	8010628 <__aeabi_dmul>
 8034576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034578:	1b5d      	subs	r5, r3, r5
 803457a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803457e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8034582:	e78f      	b.n	80344a4 <_strtod_l+0x3cc>
 8034584:	3316      	adds	r3, #22
 8034586:	dba8      	blt.n	80344da <_strtod_l+0x402>
 8034588:	4b37      	ldr	r3, [pc, #220]	@ (8034668 <_strtod_l+0x590>)
 803458a:	eba9 0808 	sub.w	r8, r9, r8
 803458e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8034592:	e9d8 2300 	ldrd	r2, r3, [r8]
 8034596:	4650      	mov	r0, sl
 8034598:	4659      	mov	r1, fp
 803459a:	f7dc f96f 	bl	801087c <__aeabi_ddiv>
 803459e:	e783      	b.n	80344a8 <_strtod_l+0x3d0>
 80345a0:	4b32      	ldr	r3, [pc, #200]	@ (803466c <_strtod_l+0x594>)
 80345a2:	9308      	str	r3, [sp, #32]
 80345a4:	2300      	movs	r3, #0
 80345a6:	1124      	asrs	r4, r4, #4
 80345a8:	4650      	mov	r0, sl
 80345aa:	4659      	mov	r1, fp
 80345ac:	461e      	mov	r6, r3
 80345ae:	2c01      	cmp	r4, #1
 80345b0:	dc21      	bgt.n	80345f6 <_strtod_l+0x51e>
 80345b2:	b10b      	cbz	r3, 80345b8 <_strtod_l+0x4e0>
 80345b4:	4682      	mov	sl, r0
 80345b6:	468b      	mov	fp, r1
 80345b8:	492c      	ldr	r1, [pc, #176]	@ (803466c <_strtod_l+0x594>)
 80345ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80345be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80345c2:	4652      	mov	r2, sl
 80345c4:	465b      	mov	r3, fp
 80345c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80345ca:	f7dc f82d 	bl	8010628 <__aeabi_dmul>
 80345ce:	4b28      	ldr	r3, [pc, #160]	@ (8034670 <_strtod_l+0x598>)
 80345d0:	460a      	mov	r2, r1
 80345d2:	400b      	ands	r3, r1
 80345d4:	4927      	ldr	r1, [pc, #156]	@ (8034674 <_strtod_l+0x59c>)
 80345d6:	428b      	cmp	r3, r1
 80345d8:	4682      	mov	sl, r0
 80345da:	d898      	bhi.n	803450e <_strtod_l+0x436>
 80345dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80345e0:	428b      	cmp	r3, r1
 80345e2:	bf86      	itte	hi
 80345e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8034678 <_strtod_l+0x5a0>
 80345e8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80345ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80345f0:	2300      	movs	r3, #0
 80345f2:	9308      	str	r3, [sp, #32]
 80345f4:	e07a      	b.n	80346ec <_strtod_l+0x614>
 80345f6:	07e2      	lsls	r2, r4, #31
 80345f8:	d505      	bpl.n	8034606 <_strtod_l+0x52e>
 80345fa:	9b08      	ldr	r3, [sp, #32]
 80345fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034600:	f7dc f812 	bl	8010628 <__aeabi_dmul>
 8034604:	2301      	movs	r3, #1
 8034606:	9a08      	ldr	r2, [sp, #32]
 8034608:	3208      	adds	r2, #8
 803460a:	3601      	adds	r6, #1
 803460c:	1064      	asrs	r4, r4, #1
 803460e:	9208      	str	r2, [sp, #32]
 8034610:	e7cd      	b.n	80345ae <_strtod_l+0x4d6>
 8034612:	d0ed      	beq.n	80345f0 <_strtod_l+0x518>
 8034614:	4264      	negs	r4, r4
 8034616:	f014 020f 	ands.w	r2, r4, #15
 803461a:	d00a      	beq.n	8034632 <_strtod_l+0x55a>
 803461c:	4b12      	ldr	r3, [pc, #72]	@ (8034668 <_strtod_l+0x590>)
 803461e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8034622:	4650      	mov	r0, sl
 8034624:	4659      	mov	r1, fp
 8034626:	e9d3 2300 	ldrd	r2, r3, [r3]
 803462a:	f7dc f927 	bl	801087c <__aeabi_ddiv>
 803462e:	4682      	mov	sl, r0
 8034630:	468b      	mov	fp, r1
 8034632:	1124      	asrs	r4, r4, #4
 8034634:	d0dc      	beq.n	80345f0 <_strtod_l+0x518>
 8034636:	2c1f      	cmp	r4, #31
 8034638:	dd20      	ble.n	803467c <_strtod_l+0x5a4>
 803463a:	2400      	movs	r4, #0
 803463c:	46a0      	mov	r8, r4
 803463e:	940a      	str	r4, [sp, #40]	@ 0x28
 8034640:	46a1      	mov	r9, r4
 8034642:	9a05      	ldr	r2, [sp, #20]
 8034644:	2322      	movs	r3, #34	@ 0x22
 8034646:	f04f 0a00 	mov.w	sl, #0
 803464a:	f04f 0b00 	mov.w	fp, #0
 803464e:	6013      	str	r3, [r2, #0]
 8034650:	e768      	b.n	8034524 <_strtod_l+0x44c>
 8034652:	bf00      	nop
 8034654:	0803bb79 	.word	0x0803bb79
 8034658:	0803c0f8 	.word	0x0803c0f8
 803465c:	0803b9e8 	.word	0x0803b9e8
 8034660:	0803bea4 	.word	0x0803bea4
 8034664:	0803b9e2 	.word	0x0803b9e2
 8034668:	0803c030 	.word	0x0803c030
 803466c:	0803c008 	.word	0x0803c008
 8034670:	7ff00000 	.word	0x7ff00000
 8034674:	7ca00000 	.word	0x7ca00000
 8034678:	7fefffff 	.word	0x7fefffff
 803467c:	f014 0310 	ands.w	r3, r4, #16
 8034680:	bf18      	it	ne
 8034682:	236a      	movne	r3, #106	@ 0x6a
 8034684:	4ea9      	ldr	r6, [pc, #676]	@ (803492c <_strtod_l+0x854>)
 8034686:	9308      	str	r3, [sp, #32]
 8034688:	4650      	mov	r0, sl
 803468a:	4659      	mov	r1, fp
 803468c:	2300      	movs	r3, #0
 803468e:	07e2      	lsls	r2, r4, #31
 8034690:	d504      	bpl.n	803469c <_strtod_l+0x5c4>
 8034692:	e9d6 2300 	ldrd	r2, r3, [r6]
 8034696:	f7db ffc7 	bl	8010628 <__aeabi_dmul>
 803469a:	2301      	movs	r3, #1
 803469c:	1064      	asrs	r4, r4, #1
 803469e:	f106 0608 	add.w	r6, r6, #8
 80346a2:	d1f4      	bne.n	803468e <_strtod_l+0x5b6>
 80346a4:	b10b      	cbz	r3, 80346aa <_strtod_l+0x5d2>
 80346a6:	4682      	mov	sl, r0
 80346a8:	468b      	mov	fp, r1
 80346aa:	9b08      	ldr	r3, [sp, #32]
 80346ac:	b1b3      	cbz	r3, 80346dc <_strtod_l+0x604>
 80346ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80346b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80346b6:	2b00      	cmp	r3, #0
 80346b8:	4659      	mov	r1, fp
 80346ba:	dd0f      	ble.n	80346dc <_strtod_l+0x604>
 80346bc:	2b1f      	cmp	r3, #31
 80346be:	dd55      	ble.n	803476c <_strtod_l+0x694>
 80346c0:	2b34      	cmp	r3, #52	@ 0x34
 80346c2:	bfde      	ittt	le
 80346c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80346c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80346cc:	4093      	lslle	r3, r2
 80346ce:	f04f 0a00 	mov.w	sl, #0
 80346d2:	bfcc      	ite	gt
 80346d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80346d8:	ea03 0b01 	andle.w	fp, r3, r1
 80346dc:	2200      	movs	r2, #0
 80346de:	2300      	movs	r3, #0
 80346e0:	4650      	mov	r0, sl
 80346e2:	4659      	mov	r1, fp
 80346e4:	f7dc fa08 	bl	8010af8 <__aeabi_dcmpeq>
 80346e8:	2800      	cmp	r0, #0
 80346ea:	d1a6      	bne.n	803463a <_strtod_l+0x562>
 80346ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80346ee:	9300      	str	r3, [sp, #0]
 80346f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80346f2:	9805      	ldr	r0, [sp, #20]
 80346f4:	462b      	mov	r3, r5
 80346f6:	463a      	mov	r2, r7
 80346f8:	f7fe fea2 	bl	8033440 <__s2b>
 80346fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80346fe:	2800      	cmp	r0, #0
 8034700:	f43f af05 	beq.w	803450e <_strtod_l+0x436>
 8034704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8034706:	2a00      	cmp	r2, #0
 8034708:	eba9 0308 	sub.w	r3, r9, r8
 803470c:	bfa8      	it	ge
 803470e:	2300      	movge	r3, #0
 8034710:	9312      	str	r3, [sp, #72]	@ 0x48
 8034712:	2400      	movs	r4, #0
 8034714:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8034718:	9316      	str	r3, [sp, #88]	@ 0x58
 803471a:	46a0      	mov	r8, r4
 803471c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803471e:	9805      	ldr	r0, [sp, #20]
 8034720:	6859      	ldr	r1, [r3, #4]
 8034722:	f7fe fe19 	bl	8033358 <_Balloc>
 8034726:	4681      	mov	r9, r0
 8034728:	2800      	cmp	r0, #0
 803472a:	f43f aef4 	beq.w	8034516 <_strtod_l+0x43e>
 803472e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8034730:	691a      	ldr	r2, [r3, #16]
 8034732:	3202      	adds	r2, #2
 8034734:	f103 010c 	add.w	r1, r3, #12
 8034738:	0092      	lsls	r2, r2, #2
 803473a:	300c      	adds	r0, #12
 803473c:	f7f9 fadc 	bl	802dcf8 <memcpy>
 8034740:	ec4b ab10 	vmov	d0, sl, fp
 8034744:	9805      	ldr	r0, [sp, #20]
 8034746:	aa1c      	add	r2, sp, #112	@ 0x70
 8034748:	a91b      	add	r1, sp, #108	@ 0x6c
 803474a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 803474e:	f7ff f999 	bl	8033a84 <__d2b>
 8034752:	901a      	str	r0, [sp, #104]	@ 0x68
 8034754:	2800      	cmp	r0, #0
 8034756:	f43f aede 	beq.w	8034516 <_strtod_l+0x43e>
 803475a:	9805      	ldr	r0, [sp, #20]
 803475c:	2101      	movs	r1, #1
 803475e:	f7fe ff05 	bl	803356c <__i2b>
 8034762:	4680      	mov	r8, r0
 8034764:	b948      	cbnz	r0, 803477a <_strtod_l+0x6a2>
 8034766:	f04f 0800 	mov.w	r8, #0
 803476a:	e6d4      	b.n	8034516 <_strtod_l+0x43e>
 803476c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034770:	fa02 f303 	lsl.w	r3, r2, r3
 8034774:	ea03 0a0a 	and.w	sl, r3, sl
 8034778:	e7b0      	b.n	80346dc <_strtod_l+0x604>
 803477a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 803477c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 803477e:	2d00      	cmp	r5, #0
 8034780:	bfab      	itete	ge
 8034782:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8034784:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8034786:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8034788:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 803478a:	bfac      	ite	ge
 803478c:	18ef      	addge	r7, r5, r3
 803478e:	1b5e      	sublt	r6, r3, r5
 8034790:	9b08      	ldr	r3, [sp, #32]
 8034792:	1aed      	subs	r5, r5, r3
 8034794:	4415      	add	r5, r2
 8034796:	4b66      	ldr	r3, [pc, #408]	@ (8034930 <_strtod_l+0x858>)
 8034798:	3d01      	subs	r5, #1
 803479a:	429d      	cmp	r5, r3
 803479c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80347a0:	da50      	bge.n	8034844 <_strtod_l+0x76c>
 80347a2:	1b5b      	subs	r3, r3, r5
 80347a4:	2b1f      	cmp	r3, #31
 80347a6:	eba2 0203 	sub.w	r2, r2, r3
 80347aa:	f04f 0101 	mov.w	r1, #1
 80347ae:	dc3d      	bgt.n	803482c <_strtod_l+0x754>
 80347b0:	fa01 f303 	lsl.w	r3, r1, r3
 80347b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80347b6:	2300      	movs	r3, #0
 80347b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80347ba:	18bd      	adds	r5, r7, r2
 80347bc:	9b08      	ldr	r3, [sp, #32]
 80347be:	42af      	cmp	r7, r5
 80347c0:	4416      	add	r6, r2
 80347c2:	441e      	add	r6, r3
 80347c4:	463b      	mov	r3, r7
 80347c6:	bfa8      	it	ge
 80347c8:	462b      	movge	r3, r5
 80347ca:	42b3      	cmp	r3, r6
 80347cc:	bfa8      	it	ge
 80347ce:	4633      	movge	r3, r6
 80347d0:	2b00      	cmp	r3, #0
 80347d2:	bfc2      	ittt	gt
 80347d4:	1aed      	subgt	r5, r5, r3
 80347d6:	1af6      	subgt	r6, r6, r3
 80347d8:	1aff      	subgt	r7, r7, r3
 80347da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80347dc:	2b00      	cmp	r3, #0
 80347de:	dd16      	ble.n	803480e <_strtod_l+0x736>
 80347e0:	4641      	mov	r1, r8
 80347e2:	9805      	ldr	r0, [sp, #20]
 80347e4:	461a      	mov	r2, r3
 80347e6:	f7fe ff81 	bl	80336ec <__pow5mult>
 80347ea:	4680      	mov	r8, r0
 80347ec:	2800      	cmp	r0, #0
 80347ee:	d0ba      	beq.n	8034766 <_strtod_l+0x68e>
 80347f0:	4601      	mov	r1, r0
 80347f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80347f4:	9805      	ldr	r0, [sp, #20]
 80347f6:	f7fe fecf 	bl	8033598 <__multiply>
 80347fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80347fc:	2800      	cmp	r0, #0
 80347fe:	f43f ae8a 	beq.w	8034516 <_strtod_l+0x43e>
 8034802:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034804:	9805      	ldr	r0, [sp, #20]
 8034806:	f7fe fdcc 	bl	80333a2 <_Bfree>
 803480a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803480c:	931a      	str	r3, [sp, #104]	@ 0x68
 803480e:	2d00      	cmp	r5, #0
 8034810:	dc1d      	bgt.n	803484e <_strtod_l+0x776>
 8034812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034814:	2b00      	cmp	r3, #0
 8034816:	dd23      	ble.n	8034860 <_strtod_l+0x788>
 8034818:	4649      	mov	r1, r9
 803481a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803481c:	9805      	ldr	r0, [sp, #20]
 803481e:	f7fe ff65 	bl	80336ec <__pow5mult>
 8034822:	4681      	mov	r9, r0
 8034824:	b9e0      	cbnz	r0, 8034860 <_strtod_l+0x788>
 8034826:	f04f 0900 	mov.w	r9, #0
 803482a:	e674      	b.n	8034516 <_strtod_l+0x43e>
 803482c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8034830:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8034834:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8034838:	35e2      	adds	r5, #226	@ 0xe2
 803483a:	fa01 f305 	lsl.w	r3, r1, r5
 803483e:	9310      	str	r3, [sp, #64]	@ 0x40
 8034840:	9113      	str	r1, [sp, #76]	@ 0x4c
 8034842:	e7ba      	b.n	80347ba <_strtod_l+0x6e2>
 8034844:	2300      	movs	r3, #0
 8034846:	9310      	str	r3, [sp, #64]	@ 0x40
 8034848:	2301      	movs	r3, #1
 803484a:	9313      	str	r3, [sp, #76]	@ 0x4c
 803484c:	e7b5      	b.n	80347ba <_strtod_l+0x6e2>
 803484e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034850:	9805      	ldr	r0, [sp, #20]
 8034852:	462a      	mov	r2, r5
 8034854:	f7fe ff8a 	bl	803376c <__lshift>
 8034858:	901a      	str	r0, [sp, #104]	@ 0x68
 803485a:	2800      	cmp	r0, #0
 803485c:	d1d9      	bne.n	8034812 <_strtod_l+0x73a>
 803485e:	e65a      	b.n	8034516 <_strtod_l+0x43e>
 8034860:	2e00      	cmp	r6, #0
 8034862:	dd07      	ble.n	8034874 <_strtod_l+0x79c>
 8034864:	4649      	mov	r1, r9
 8034866:	9805      	ldr	r0, [sp, #20]
 8034868:	4632      	mov	r2, r6
 803486a:	f7fe ff7f 	bl	803376c <__lshift>
 803486e:	4681      	mov	r9, r0
 8034870:	2800      	cmp	r0, #0
 8034872:	d0d8      	beq.n	8034826 <_strtod_l+0x74e>
 8034874:	2f00      	cmp	r7, #0
 8034876:	dd08      	ble.n	803488a <_strtod_l+0x7b2>
 8034878:	4641      	mov	r1, r8
 803487a:	9805      	ldr	r0, [sp, #20]
 803487c:	463a      	mov	r2, r7
 803487e:	f7fe ff75 	bl	803376c <__lshift>
 8034882:	4680      	mov	r8, r0
 8034884:	2800      	cmp	r0, #0
 8034886:	f43f ae46 	beq.w	8034516 <_strtod_l+0x43e>
 803488a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803488c:	9805      	ldr	r0, [sp, #20]
 803488e:	464a      	mov	r2, r9
 8034890:	f7fe fff4 	bl	803387c <__mdiff>
 8034894:	4604      	mov	r4, r0
 8034896:	2800      	cmp	r0, #0
 8034898:	f43f ae3d 	beq.w	8034516 <_strtod_l+0x43e>
 803489c:	68c3      	ldr	r3, [r0, #12]
 803489e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80348a0:	2300      	movs	r3, #0
 80348a2:	60c3      	str	r3, [r0, #12]
 80348a4:	4641      	mov	r1, r8
 80348a6:	f7fe ffcd 	bl	8033844 <__mcmp>
 80348aa:	2800      	cmp	r0, #0
 80348ac:	da46      	bge.n	803493c <_strtod_l+0x864>
 80348ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80348b0:	ea53 030a 	orrs.w	r3, r3, sl
 80348b4:	d16c      	bne.n	8034990 <_strtod_l+0x8b8>
 80348b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80348ba:	2b00      	cmp	r3, #0
 80348bc:	d168      	bne.n	8034990 <_strtod_l+0x8b8>
 80348be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80348c2:	0d1b      	lsrs	r3, r3, #20
 80348c4:	051b      	lsls	r3, r3, #20
 80348c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80348ca:	d961      	bls.n	8034990 <_strtod_l+0x8b8>
 80348cc:	6963      	ldr	r3, [r4, #20]
 80348ce:	b913      	cbnz	r3, 80348d6 <_strtod_l+0x7fe>
 80348d0:	6923      	ldr	r3, [r4, #16]
 80348d2:	2b01      	cmp	r3, #1
 80348d4:	dd5c      	ble.n	8034990 <_strtod_l+0x8b8>
 80348d6:	4621      	mov	r1, r4
 80348d8:	2201      	movs	r2, #1
 80348da:	9805      	ldr	r0, [sp, #20]
 80348dc:	f7fe ff46 	bl	803376c <__lshift>
 80348e0:	4641      	mov	r1, r8
 80348e2:	4604      	mov	r4, r0
 80348e4:	f7fe ffae 	bl	8033844 <__mcmp>
 80348e8:	2800      	cmp	r0, #0
 80348ea:	dd51      	ble.n	8034990 <_strtod_l+0x8b8>
 80348ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80348f0:	9a08      	ldr	r2, [sp, #32]
 80348f2:	0d1b      	lsrs	r3, r3, #20
 80348f4:	051b      	lsls	r3, r3, #20
 80348f6:	2a00      	cmp	r2, #0
 80348f8:	d06b      	beq.n	80349d2 <_strtod_l+0x8fa>
 80348fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80348fe:	d868      	bhi.n	80349d2 <_strtod_l+0x8fa>
 8034900:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034904:	f67f ae9d 	bls.w	8034642 <_strtod_l+0x56a>
 8034908:	4b0a      	ldr	r3, [pc, #40]	@ (8034934 <_strtod_l+0x85c>)
 803490a:	4650      	mov	r0, sl
 803490c:	4659      	mov	r1, fp
 803490e:	2200      	movs	r2, #0
 8034910:	f7db fe8a 	bl	8010628 <__aeabi_dmul>
 8034914:	4b08      	ldr	r3, [pc, #32]	@ (8034938 <_strtod_l+0x860>)
 8034916:	400b      	ands	r3, r1
 8034918:	4682      	mov	sl, r0
 803491a:	468b      	mov	fp, r1
 803491c:	2b00      	cmp	r3, #0
 803491e:	f47f ae05 	bne.w	803452c <_strtod_l+0x454>
 8034922:	9a05      	ldr	r2, [sp, #20]
 8034924:	2322      	movs	r3, #34	@ 0x22
 8034926:	6013      	str	r3, [r2, #0]
 8034928:	e600      	b.n	803452c <_strtod_l+0x454>
 803492a:	bf00      	nop
 803492c:	0803c120 	.word	0x0803c120
 8034930:	fffffc02 	.word	0xfffffc02
 8034934:	39500000 	.word	0x39500000
 8034938:	7ff00000 	.word	0x7ff00000
 803493c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034940:	d165      	bne.n	8034a0e <_strtod_l+0x936>
 8034942:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8034944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8034948:	b35a      	cbz	r2, 80349a2 <_strtod_l+0x8ca>
 803494a:	4a9f      	ldr	r2, [pc, #636]	@ (8034bc8 <_strtod_l+0xaf0>)
 803494c:	4293      	cmp	r3, r2
 803494e:	d12b      	bne.n	80349a8 <_strtod_l+0x8d0>
 8034950:	9b08      	ldr	r3, [sp, #32]
 8034952:	4651      	mov	r1, sl
 8034954:	b303      	cbz	r3, 8034998 <_strtod_l+0x8c0>
 8034956:	4b9d      	ldr	r3, [pc, #628]	@ (8034bcc <_strtod_l+0xaf4>)
 8034958:	465a      	mov	r2, fp
 803495a:	4013      	ands	r3, r2
 803495c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8034960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8034964:	d81b      	bhi.n	803499e <_strtod_l+0x8c6>
 8034966:	0d1b      	lsrs	r3, r3, #20
 8034968:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803496c:	fa02 f303 	lsl.w	r3, r2, r3
 8034970:	4299      	cmp	r1, r3
 8034972:	d119      	bne.n	80349a8 <_strtod_l+0x8d0>
 8034974:	4b96      	ldr	r3, [pc, #600]	@ (8034bd0 <_strtod_l+0xaf8>)
 8034976:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034978:	429a      	cmp	r2, r3
 803497a:	d102      	bne.n	8034982 <_strtod_l+0x8aa>
 803497c:	3101      	adds	r1, #1
 803497e:	f43f adca 	beq.w	8034516 <_strtod_l+0x43e>
 8034982:	4b92      	ldr	r3, [pc, #584]	@ (8034bcc <_strtod_l+0xaf4>)
 8034984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034986:	401a      	ands	r2, r3
 8034988:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 803498c:	f04f 0a00 	mov.w	sl, #0
 8034990:	9b08      	ldr	r3, [sp, #32]
 8034992:	2b00      	cmp	r3, #0
 8034994:	d1b8      	bne.n	8034908 <_strtod_l+0x830>
 8034996:	e5c9      	b.n	803452c <_strtod_l+0x454>
 8034998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803499c:	e7e8      	b.n	8034970 <_strtod_l+0x898>
 803499e:	4613      	mov	r3, r2
 80349a0:	e7e6      	b.n	8034970 <_strtod_l+0x898>
 80349a2:	ea53 030a 	orrs.w	r3, r3, sl
 80349a6:	d0a1      	beq.n	80348ec <_strtod_l+0x814>
 80349a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80349aa:	b1db      	cbz	r3, 80349e4 <_strtod_l+0x90c>
 80349ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80349ae:	4213      	tst	r3, r2
 80349b0:	d0ee      	beq.n	8034990 <_strtod_l+0x8b8>
 80349b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80349b4:	9a08      	ldr	r2, [sp, #32]
 80349b6:	4650      	mov	r0, sl
 80349b8:	4659      	mov	r1, fp
 80349ba:	b1bb      	cbz	r3, 80349ec <_strtod_l+0x914>
 80349bc:	f7ff fb6e 	bl	803409c <sulp>
 80349c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80349c4:	ec53 2b10 	vmov	r2, r3, d0
 80349c8:	f7db fc78 	bl	80102bc <__adddf3>
 80349cc:	4682      	mov	sl, r0
 80349ce:	468b      	mov	fp, r1
 80349d0:	e7de      	b.n	8034990 <_strtod_l+0x8b8>
 80349d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80349d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80349da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80349de:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80349e2:	e7d5      	b.n	8034990 <_strtod_l+0x8b8>
 80349e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80349e6:	ea13 0f0a 	tst.w	r3, sl
 80349ea:	e7e1      	b.n	80349b0 <_strtod_l+0x8d8>
 80349ec:	f7ff fb56 	bl	803409c <sulp>
 80349f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80349f4:	ec53 2b10 	vmov	r2, r3, d0
 80349f8:	f7db fc5e 	bl	80102b8 <__aeabi_dsub>
 80349fc:	2200      	movs	r2, #0
 80349fe:	2300      	movs	r3, #0
 8034a00:	4682      	mov	sl, r0
 8034a02:	468b      	mov	fp, r1
 8034a04:	f7dc f878 	bl	8010af8 <__aeabi_dcmpeq>
 8034a08:	2800      	cmp	r0, #0
 8034a0a:	d0c1      	beq.n	8034990 <_strtod_l+0x8b8>
 8034a0c:	e619      	b.n	8034642 <_strtod_l+0x56a>
 8034a0e:	4641      	mov	r1, r8
 8034a10:	4620      	mov	r0, r4
 8034a12:	f7ff f88f 	bl	8033b34 <__ratio>
 8034a16:	ec57 6b10 	vmov	r6, r7, d0
 8034a1a:	2200      	movs	r2, #0
 8034a1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8034a20:	4630      	mov	r0, r6
 8034a22:	4639      	mov	r1, r7
 8034a24:	f7dc f87c 	bl	8010b20 <__aeabi_dcmple>
 8034a28:	2800      	cmp	r0, #0
 8034a2a:	d06f      	beq.n	8034b0c <_strtod_l+0xa34>
 8034a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034a2e:	2b00      	cmp	r3, #0
 8034a30:	d17a      	bne.n	8034b28 <_strtod_l+0xa50>
 8034a32:	f1ba 0f00 	cmp.w	sl, #0
 8034a36:	d158      	bne.n	8034aea <_strtod_l+0xa12>
 8034a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8034a3e:	2b00      	cmp	r3, #0
 8034a40:	d15a      	bne.n	8034af8 <_strtod_l+0xa20>
 8034a42:	4b64      	ldr	r3, [pc, #400]	@ (8034bd4 <_strtod_l+0xafc>)
 8034a44:	2200      	movs	r2, #0
 8034a46:	4630      	mov	r0, r6
 8034a48:	4639      	mov	r1, r7
 8034a4a:	f7dc f85f 	bl	8010b0c <__aeabi_dcmplt>
 8034a4e:	2800      	cmp	r0, #0
 8034a50:	d159      	bne.n	8034b06 <_strtod_l+0xa2e>
 8034a52:	4630      	mov	r0, r6
 8034a54:	4639      	mov	r1, r7
 8034a56:	4b60      	ldr	r3, [pc, #384]	@ (8034bd8 <_strtod_l+0xb00>)
 8034a58:	2200      	movs	r2, #0
 8034a5a:	f7db fde5 	bl	8010628 <__aeabi_dmul>
 8034a5e:	4606      	mov	r6, r0
 8034a60:	460f      	mov	r7, r1
 8034a62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8034a66:	9606      	str	r6, [sp, #24]
 8034a68:	9307      	str	r3, [sp, #28]
 8034a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034a6e:	4d57      	ldr	r5, [pc, #348]	@ (8034bcc <_strtod_l+0xaf4>)
 8034a70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034a76:	401d      	ands	r5, r3
 8034a78:	4b58      	ldr	r3, [pc, #352]	@ (8034bdc <_strtod_l+0xb04>)
 8034a7a:	429d      	cmp	r5, r3
 8034a7c:	f040 80b2 	bne.w	8034be4 <_strtod_l+0xb0c>
 8034a80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034a82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8034a86:	ec4b ab10 	vmov	d0, sl, fp
 8034a8a:	f7fe ff8b 	bl	80339a4 <__ulp>
 8034a8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034a92:	ec51 0b10 	vmov	r0, r1, d0
 8034a96:	f7db fdc7 	bl	8010628 <__aeabi_dmul>
 8034a9a:	4652      	mov	r2, sl
 8034a9c:	465b      	mov	r3, fp
 8034a9e:	f7db fc0d 	bl	80102bc <__adddf3>
 8034aa2:	460b      	mov	r3, r1
 8034aa4:	4949      	ldr	r1, [pc, #292]	@ (8034bcc <_strtod_l+0xaf4>)
 8034aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8034be0 <_strtod_l+0xb08>)
 8034aa8:	4019      	ands	r1, r3
 8034aaa:	4291      	cmp	r1, r2
 8034aac:	4682      	mov	sl, r0
 8034aae:	d942      	bls.n	8034b36 <_strtod_l+0xa5e>
 8034ab0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034ab2:	4b47      	ldr	r3, [pc, #284]	@ (8034bd0 <_strtod_l+0xaf8>)
 8034ab4:	429a      	cmp	r2, r3
 8034ab6:	d103      	bne.n	8034ac0 <_strtod_l+0x9e8>
 8034ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8034aba:	3301      	adds	r3, #1
 8034abc:	f43f ad2b 	beq.w	8034516 <_strtod_l+0x43e>
 8034ac0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8034bd0 <_strtod_l+0xaf8>
 8034ac4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034ac8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8034aca:	9805      	ldr	r0, [sp, #20]
 8034acc:	f7fe fc69 	bl	80333a2 <_Bfree>
 8034ad0:	9805      	ldr	r0, [sp, #20]
 8034ad2:	4649      	mov	r1, r9
 8034ad4:	f7fe fc65 	bl	80333a2 <_Bfree>
 8034ad8:	9805      	ldr	r0, [sp, #20]
 8034ada:	4641      	mov	r1, r8
 8034adc:	f7fe fc61 	bl	80333a2 <_Bfree>
 8034ae0:	9805      	ldr	r0, [sp, #20]
 8034ae2:	4621      	mov	r1, r4
 8034ae4:	f7fe fc5d 	bl	80333a2 <_Bfree>
 8034ae8:	e618      	b.n	803471c <_strtod_l+0x644>
 8034aea:	f1ba 0f01 	cmp.w	sl, #1
 8034aee:	d103      	bne.n	8034af8 <_strtod_l+0xa20>
 8034af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034af2:	2b00      	cmp	r3, #0
 8034af4:	f43f ada5 	beq.w	8034642 <_strtod_l+0x56a>
 8034af8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8034ba8 <_strtod_l+0xad0>
 8034afc:	4f35      	ldr	r7, [pc, #212]	@ (8034bd4 <_strtod_l+0xafc>)
 8034afe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034b02:	2600      	movs	r6, #0
 8034b04:	e7b1      	b.n	8034a6a <_strtod_l+0x992>
 8034b06:	4f34      	ldr	r7, [pc, #208]	@ (8034bd8 <_strtod_l+0xb00>)
 8034b08:	2600      	movs	r6, #0
 8034b0a:	e7aa      	b.n	8034a62 <_strtod_l+0x98a>
 8034b0c:	4b32      	ldr	r3, [pc, #200]	@ (8034bd8 <_strtod_l+0xb00>)
 8034b0e:	4630      	mov	r0, r6
 8034b10:	4639      	mov	r1, r7
 8034b12:	2200      	movs	r2, #0
 8034b14:	f7db fd88 	bl	8010628 <__aeabi_dmul>
 8034b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034b1a:	4606      	mov	r6, r0
 8034b1c:	460f      	mov	r7, r1
 8034b1e:	2b00      	cmp	r3, #0
 8034b20:	d09f      	beq.n	8034a62 <_strtod_l+0x98a>
 8034b22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8034b26:	e7a0      	b.n	8034a6a <_strtod_l+0x992>
 8034b28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8034bb0 <_strtod_l+0xad8>
 8034b2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034b30:	ec57 6b17 	vmov	r6, r7, d7
 8034b34:	e799      	b.n	8034a6a <_strtod_l+0x992>
 8034b36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8034b3a:	9b08      	ldr	r3, [sp, #32]
 8034b3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8034b40:	2b00      	cmp	r3, #0
 8034b42:	d1c1      	bne.n	8034ac8 <_strtod_l+0x9f0>
 8034b44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034b48:	0d1b      	lsrs	r3, r3, #20
 8034b4a:	051b      	lsls	r3, r3, #20
 8034b4c:	429d      	cmp	r5, r3
 8034b4e:	d1bb      	bne.n	8034ac8 <_strtod_l+0x9f0>
 8034b50:	4630      	mov	r0, r6
 8034b52:	4639      	mov	r1, r7
 8034b54:	f7dc f92c 	bl	8010db0 <__aeabi_d2lz>
 8034b58:	f7db fd38 	bl	80105cc <__aeabi_l2d>
 8034b5c:	4602      	mov	r2, r0
 8034b5e:	460b      	mov	r3, r1
 8034b60:	4630      	mov	r0, r6
 8034b62:	4639      	mov	r1, r7
 8034b64:	f7db fba8 	bl	80102b8 <__aeabi_dsub>
 8034b68:	460b      	mov	r3, r1
 8034b6a:	4602      	mov	r2, r0
 8034b6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8034b70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8034b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034b76:	ea46 060a 	orr.w	r6, r6, sl
 8034b7a:	431e      	orrs	r6, r3
 8034b7c:	d06f      	beq.n	8034c5e <_strtod_l+0xb86>
 8034b7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8034bb8 <_strtod_l+0xae0>)
 8034b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034b84:	f7db ffc2 	bl	8010b0c <__aeabi_dcmplt>
 8034b88:	2800      	cmp	r0, #0
 8034b8a:	f47f accf 	bne.w	803452c <_strtod_l+0x454>
 8034b8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8034bc0 <_strtod_l+0xae8>)
 8034b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034b98:	f7db ffd6 	bl	8010b48 <__aeabi_dcmpgt>
 8034b9c:	2800      	cmp	r0, #0
 8034b9e:	d093      	beq.n	8034ac8 <_strtod_l+0x9f0>
 8034ba0:	e4c4      	b.n	803452c <_strtod_l+0x454>
 8034ba2:	bf00      	nop
 8034ba4:	f3af 8000 	nop.w
 8034ba8:	00000000 	.word	0x00000000
 8034bac:	bff00000 	.word	0xbff00000
 8034bb0:	00000000 	.word	0x00000000
 8034bb4:	3ff00000 	.word	0x3ff00000
 8034bb8:	94a03595 	.word	0x94a03595
 8034bbc:	3fdfffff 	.word	0x3fdfffff
 8034bc0:	35afe535 	.word	0x35afe535
 8034bc4:	3fe00000 	.word	0x3fe00000
 8034bc8:	000fffff 	.word	0x000fffff
 8034bcc:	7ff00000 	.word	0x7ff00000
 8034bd0:	7fefffff 	.word	0x7fefffff
 8034bd4:	3ff00000 	.word	0x3ff00000
 8034bd8:	3fe00000 	.word	0x3fe00000
 8034bdc:	7fe00000 	.word	0x7fe00000
 8034be0:	7c9fffff 	.word	0x7c9fffff
 8034be4:	9b08      	ldr	r3, [sp, #32]
 8034be6:	b323      	cbz	r3, 8034c32 <_strtod_l+0xb5a>
 8034be8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8034bec:	d821      	bhi.n	8034c32 <_strtod_l+0xb5a>
 8034bee:	a328      	add	r3, pc, #160	@ (adr r3, 8034c90 <_strtod_l+0xbb8>)
 8034bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034bf4:	4630      	mov	r0, r6
 8034bf6:	4639      	mov	r1, r7
 8034bf8:	f7db ff92 	bl	8010b20 <__aeabi_dcmple>
 8034bfc:	b1a0      	cbz	r0, 8034c28 <_strtod_l+0xb50>
 8034bfe:	4639      	mov	r1, r7
 8034c00:	4630      	mov	r0, r6
 8034c02:	f7db ffe9 	bl	8010bd8 <__aeabi_d2uiz>
 8034c06:	2801      	cmp	r0, #1
 8034c08:	bf38      	it	cc
 8034c0a:	2001      	movcc	r0, #1
 8034c0c:	f7db fc92 	bl	8010534 <__aeabi_ui2d>
 8034c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034c12:	4606      	mov	r6, r0
 8034c14:	460f      	mov	r7, r1
 8034c16:	b9fb      	cbnz	r3, 8034c58 <_strtod_l+0xb80>
 8034c18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8034c1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8034c1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8034c20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8034c24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034c28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8034c2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8034c2e:	1b5b      	subs	r3, r3, r5
 8034c30:	9311      	str	r3, [sp, #68]	@ 0x44
 8034c32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8034c36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8034c3a:	f7fe feb3 	bl	80339a4 <__ulp>
 8034c3e:	4650      	mov	r0, sl
 8034c40:	ec53 2b10 	vmov	r2, r3, d0
 8034c44:	4659      	mov	r1, fp
 8034c46:	f7db fcef 	bl	8010628 <__aeabi_dmul>
 8034c4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8034c4e:	f7db fb35 	bl	80102bc <__adddf3>
 8034c52:	4682      	mov	sl, r0
 8034c54:	468b      	mov	fp, r1
 8034c56:	e770      	b.n	8034b3a <_strtod_l+0xa62>
 8034c58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8034c5c:	e7e0      	b.n	8034c20 <_strtod_l+0xb48>
 8034c5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8034c98 <_strtod_l+0xbc0>)
 8034c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034c64:	f7db ff52 	bl	8010b0c <__aeabi_dcmplt>
 8034c68:	e798      	b.n	8034b9c <_strtod_l+0xac4>
 8034c6a:	2300      	movs	r3, #0
 8034c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8034c6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8034c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8034c72:	6013      	str	r3, [r2, #0]
 8034c74:	f7ff ba6d 	b.w	8034152 <_strtod_l+0x7a>
 8034c78:	2a65      	cmp	r2, #101	@ 0x65
 8034c7a:	f43f ab66 	beq.w	803434a <_strtod_l+0x272>
 8034c7e:	2a45      	cmp	r2, #69	@ 0x45
 8034c80:	f43f ab63 	beq.w	803434a <_strtod_l+0x272>
 8034c84:	2301      	movs	r3, #1
 8034c86:	f7ff bb9e 	b.w	80343c6 <_strtod_l+0x2ee>
 8034c8a:	bf00      	nop
 8034c8c:	f3af 8000 	nop.w
 8034c90:	ffc00000 	.word	0xffc00000
 8034c94:	41dfffff 	.word	0x41dfffff
 8034c98:	94a03595 	.word	0x94a03595
 8034c9c:	3fcfffff 	.word	0x3fcfffff

08034ca0 <_strtod_r>:
 8034ca0:	4b01      	ldr	r3, [pc, #4]	@ (8034ca8 <_strtod_r+0x8>)
 8034ca2:	f7ff ba19 	b.w	80340d8 <_strtod_l>
 8034ca6:	bf00      	nop
 8034ca8:	2000016c 	.word	0x2000016c

08034cac <_strtoul_l.constprop.0>:
 8034cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034cb0:	4e34      	ldr	r6, [pc, #208]	@ (8034d84 <_strtoul_l.constprop.0+0xd8>)
 8034cb2:	4686      	mov	lr, r0
 8034cb4:	460d      	mov	r5, r1
 8034cb6:	4628      	mov	r0, r5
 8034cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034cbc:	5d37      	ldrb	r7, [r6, r4]
 8034cbe:	f017 0708 	ands.w	r7, r7, #8
 8034cc2:	d1f8      	bne.n	8034cb6 <_strtoul_l.constprop.0+0xa>
 8034cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8034cc6:	d12f      	bne.n	8034d28 <_strtoul_l.constprop.0+0x7c>
 8034cc8:	782c      	ldrb	r4, [r5, #0]
 8034cca:	2701      	movs	r7, #1
 8034ccc:	1c85      	adds	r5, r0, #2
 8034cce:	f033 0010 	bics.w	r0, r3, #16
 8034cd2:	d109      	bne.n	8034ce8 <_strtoul_l.constprop.0+0x3c>
 8034cd4:	2c30      	cmp	r4, #48	@ 0x30
 8034cd6:	d12c      	bne.n	8034d32 <_strtoul_l.constprop.0+0x86>
 8034cd8:	7828      	ldrb	r0, [r5, #0]
 8034cda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8034cde:	2858      	cmp	r0, #88	@ 0x58
 8034ce0:	d127      	bne.n	8034d32 <_strtoul_l.constprop.0+0x86>
 8034ce2:	786c      	ldrb	r4, [r5, #1]
 8034ce4:	2310      	movs	r3, #16
 8034ce6:	3502      	adds	r5, #2
 8034ce8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8034cec:	2600      	movs	r6, #0
 8034cee:	fbb8 f8f3 	udiv	r8, r8, r3
 8034cf2:	fb03 f908 	mul.w	r9, r3, r8
 8034cf6:	ea6f 0909 	mvn.w	r9, r9
 8034cfa:	4630      	mov	r0, r6
 8034cfc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034d00:	f1bc 0f09 	cmp.w	ip, #9
 8034d04:	d81c      	bhi.n	8034d40 <_strtoul_l.constprop.0+0x94>
 8034d06:	4664      	mov	r4, ip
 8034d08:	42a3      	cmp	r3, r4
 8034d0a:	dd2a      	ble.n	8034d62 <_strtoul_l.constprop.0+0xb6>
 8034d0c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8034d10:	d007      	beq.n	8034d22 <_strtoul_l.constprop.0+0x76>
 8034d12:	4580      	cmp	r8, r0
 8034d14:	d322      	bcc.n	8034d5c <_strtoul_l.constprop.0+0xb0>
 8034d16:	d101      	bne.n	8034d1c <_strtoul_l.constprop.0+0x70>
 8034d18:	45a1      	cmp	r9, r4
 8034d1a:	db1f      	blt.n	8034d5c <_strtoul_l.constprop.0+0xb0>
 8034d1c:	fb00 4003 	mla	r0, r0, r3, r4
 8034d20:	2601      	movs	r6, #1
 8034d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034d26:	e7e9      	b.n	8034cfc <_strtoul_l.constprop.0+0x50>
 8034d28:	2c2b      	cmp	r4, #43	@ 0x2b
 8034d2a:	bf04      	itt	eq
 8034d2c:	782c      	ldrbeq	r4, [r5, #0]
 8034d2e:	1c85      	addeq	r5, r0, #2
 8034d30:	e7cd      	b.n	8034cce <_strtoul_l.constprop.0+0x22>
 8034d32:	2b00      	cmp	r3, #0
 8034d34:	d1d8      	bne.n	8034ce8 <_strtoul_l.constprop.0+0x3c>
 8034d36:	2c30      	cmp	r4, #48	@ 0x30
 8034d38:	bf0c      	ite	eq
 8034d3a:	2308      	moveq	r3, #8
 8034d3c:	230a      	movne	r3, #10
 8034d3e:	e7d3      	b.n	8034ce8 <_strtoul_l.constprop.0+0x3c>
 8034d40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8034d44:	f1bc 0f19 	cmp.w	ip, #25
 8034d48:	d801      	bhi.n	8034d4e <_strtoul_l.constprop.0+0xa2>
 8034d4a:	3c37      	subs	r4, #55	@ 0x37
 8034d4c:	e7dc      	b.n	8034d08 <_strtoul_l.constprop.0+0x5c>
 8034d4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8034d52:	f1bc 0f19 	cmp.w	ip, #25
 8034d56:	d804      	bhi.n	8034d62 <_strtoul_l.constprop.0+0xb6>
 8034d58:	3c57      	subs	r4, #87	@ 0x57
 8034d5a:	e7d5      	b.n	8034d08 <_strtoul_l.constprop.0+0x5c>
 8034d5c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8034d60:	e7df      	b.n	8034d22 <_strtoul_l.constprop.0+0x76>
 8034d62:	1c73      	adds	r3, r6, #1
 8034d64:	d106      	bne.n	8034d74 <_strtoul_l.constprop.0+0xc8>
 8034d66:	2322      	movs	r3, #34	@ 0x22
 8034d68:	f8ce 3000 	str.w	r3, [lr]
 8034d6c:	4630      	mov	r0, r6
 8034d6e:	b932      	cbnz	r2, 8034d7e <_strtoul_l.constprop.0+0xd2>
 8034d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034d74:	b107      	cbz	r7, 8034d78 <_strtoul_l.constprop.0+0xcc>
 8034d76:	4240      	negs	r0, r0
 8034d78:	2a00      	cmp	r2, #0
 8034d7a:	d0f9      	beq.n	8034d70 <_strtoul_l.constprop.0+0xc4>
 8034d7c:	b106      	cbz	r6, 8034d80 <_strtoul_l.constprop.0+0xd4>
 8034d7e:	1e69      	subs	r1, r5, #1
 8034d80:	6011      	str	r1, [r2, #0]
 8034d82:	e7f5      	b.n	8034d70 <_strtoul_l.constprop.0+0xc4>
 8034d84:	0803bda1 	.word	0x0803bda1

08034d88 <_strtoul_r>:
 8034d88:	f7ff bf90 	b.w	8034cac <_strtoul_l.constprop.0>

08034d8c <strtoul>:
 8034d8c:	4613      	mov	r3, r2
 8034d8e:	460a      	mov	r2, r1
 8034d90:	4601      	mov	r1, r0
 8034d92:	4802      	ldr	r0, [pc, #8]	@ (8034d9c <strtoul+0x10>)
 8034d94:	6800      	ldr	r0, [r0, #0]
 8034d96:	f7ff bf89 	b.w	8034cac <_strtoul_l.constprop.0>
 8034d9a:	bf00      	nop
 8034d9c:	200002d8 	.word	0x200002d8

08034da0 <__submore>:
 8034da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034da4:	460c      	mov	r4, r1
 8034da6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8034da8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8034dac:	4299      	cmp	r1, r3
 8034dae:	d11d      	bne.n	8034dec <__submore+0x4c>
 8034db0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8034db4:	f7f9 ffba 	bl	802ed2c <_malloc_r>
 8034db8:	b918      	cbnz	r0, 8034dc2 <__submore+0x22>
 8034dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8034dc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8034dc8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8034dcc:	6320      	str	r0, [r4, #48]	@ 0x30
 8034dce:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8034dd2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8034dd6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8034dda:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8034dde:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8034de2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8034de6:	6020      	str	r0, [r4, #0]
 8034de8:	2000      	movs	r0, #0
 8034dea:	e7e8      	b.n	8034dbe <__submore+0x1e>
 8034dec:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8034dee:	0077      	lsls	r7, r6, #1
 8034df0:	463a      	mov	r2, r7
 8034df2:	f7fe ffab 	bl	8033d4c <_realloc_r>
 8034df6:	4605      	mov	r5, r0
 8034df8:	2800      	cmp	r0, #0
 8034dfa:	d0de      	beq.n	8034dba <__submore+0x1a>
 8034dfc:	eb00 0806 	add.w	r8, r0, r6
 8034e00:	4601      	mov	r1, r0
 8034e02:	4632      	mov	r2, r6
 8034e04:	4640      	mov	r0, r8
 8034e06:	f7f8 ff77 	bl	802dcf8 <memcpy>
 8034e0a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 8034e0e:	f8c4 8000 	str.w	r8, [r4]
 8034e12:	e7e9      	b.n	8034de8 <__submore+0x48>

08034e14 <__ascii_wctomb>:
 8034e14:	4603      	mov	r3, r0
 8034e16:	4608      	mov	r0, r1
 8034e18:	b141      	cbz	r1, 8034e2c <__ascii_wctomb+0x18>
 8034e1a:	2aff      	cmp	r2, #255	@ 0xff
 8034e1c:	d904      	bls.n	8034e28 <__ascii_wctomb+0x14>
 8034e1e:	228a      	movs	r2, #138	@ 0x8a
 8034e20:	601a      	str	r2, [r3, #0]
 8034e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034e26:	4770      	bx	lr
 8034e28:	700a      	strb	r2, [r1, #0]
 8034e2a:	2001      	movs	r0, #1
 8034e2c:	4770      	bx	lr

08034e2e <__swbuf_r>:
 8034e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034e30:	460e      	mov	r6, r1
 8034e32:	4614      	mov	r4, r2
 8034e34:	4605      	mov	r5, r0
 8034e36:	b118      	cbz	r0, 8034e40 <__swbuf_r+0x12>
 8034e38:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8034e3a:	b90b      	cbnz	r3, 8034e40 <__swbuf_r+0x12>
 8034e3c:	f7f7 fa7a 	bl	802c334 <__sinit>
 8034e40:	69a3      	ldr	r3, [r4, #24]
 8034e42:	60a3      	str	r3, [r4, #8]
 8034e44:	89a3      	ldrh	r3, [r4, #12]
 8034e46:	0719      	lsls	r1, r3, #28
 8034e48:	d501      	bpl.n	8034e4e <__swbuf_r+0x20>
 8034e4a:	6923      	ldr	r3, [r4, #16]
 8034e4c:	b943      	cbnz	r3, 8034e60 <__swbuf_r+0x32>
 8034e4e:	4621      	mov	r1, r4
 8034e50:	4628      	mov	r0, r5
 8034e52:	f7f7 fc2b 	bl	802c6ac <__swsetup_r>
 8034e56:	b118      	cbz	r0, 8034e60 <__swbuf_r+0x32>
 8034e58:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8034e5c:	4638      	mov	r0, r7
 8034e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034e64:	b2f6      	uxtb	r6, r6
 8034e66:	049a      	lsls	r2, r3, #18
 8034e68:	4637      	mov	r7, r6
 8034e6a:	d406      	bmi.n	8034e7a <__swbuf_r+0x4c>
 8034e6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8034e70:	81a3      	strh	r3, [r4, #12]
 8034e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8034e74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8034e78:	6663      	str	r3, [r4, #100]	@ 0x64
 8034e7a:	6823      	ldr	r3, [r4, #0]
 8034e7c:	6922      	ldr	r2, [r4, #16]
 8034e7e:	1a98      	subs	r0, r3, r2
 8034e80:	6963      	ldr	r3, [r4, #20]
 8034e82:	4283      	cmp	r3, r0
 8034e84:	dc05      	bgt.n	8034e92 <__swbuf_r+0x64>
 8034e86:	4621      	mov	r1, r4
 8034e88:	4628      	mov	r0, r5
 8034e8a:	f7f7 f911 	bl	802c0b0 <_fflush_r>
 8034e8e:	2800      	cmp	r0, #0
 8034e90:	d1e2      	bne.n	8034e58 <__swbuf_r+0x2a>
 8034e92:	68a3      	ldr	r3, [r4, #8]
 8034e94:	3b01      	subs	r3, #1
 8034e96:	60a3      	str	r3, [r4, #8]
 8034e98:	6823      	ldr	r3, [r4, #0]
 8034e9a:	1c5a      	adds	r2, r3, #1
 8034e9c:	6022      	str	r2, [r4, #0]
 8034e9e:	701e      	strb	r6, [r3, #0]
 8034ea0:	6962      	ldr	r2, [r4, #20]
 8034ea2:	1c43      	adds	r3, r0, #1
 8034ea4:	429a      	cmp	r2, r3
 8034ea6:	d004      	beq.n	8034eb2 <__swbuf_r+0x84>
 8034ea8:	89a3      	ldrh	r3, [r4, #12]
 8034eaa:	07db      	lsls	r3, r3, #31
 8034eac:	d5d6      	bpl.n	8034e5c <__swbuf_r+0x2e>
 8034eae:	2e0a      	cmp	r6, #10
 8034eb0:	d1d4      	bne.n	8034e5c <__swbuf_r+0x2e>
 8034eb2:	4621      	mov	r1, r4
 8034eb4:	4628      	mov	r0, r5
 8034eb6:	f7f7 f8fb 	bl	802c0b0 <_fflush_r>
 8034eba:	2800      	cmp	r0, #0
 8034ebc:	d0ce      	beq.n	8034e5c <__swbuf_r+0x2e>
 8034ebe:	e7cb      	b.n	8034e58 <__swbuf_r+0x2a>

08034ec0 <_raise_r>:
 8034ec0:	291f      	cmp	r1, #31
 8034ec2:	b538      	push	{r3, r4, r5, lr}
 8034ec4:	4605      	mov	r5, r0
 8034ec6:	460c      	mov	r4, r1
 8034ec8:	d904      	bls.n	8034ed4 <_raise_r+0x14>
 8034eca:	2316      	movs	r3, #22
 8034ecc:	6003      	str	r3, [r0, #0]
 8034ece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034ed2:	bd38      	pop	{r3, r4, r5, pc}
 8034ed4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8034ed8:	b112      	cbz	r2, 8034ee0 <_raise_r+0x20>
 8034eda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8034ede:	b94b      	cbnz	r3, 8034ef4 <_raise_r+0x34>
 8034ee0:	4628      	mov	r0, r5
 8034ee2:	f000 f8fd 	bl	80350e0 <_getpid_r>
 8034ee6:	4622      	mov	r2, r4
 8034ee8:	4601      	mov	r1, r0
 8034eea:	4628      	mov	r0, r5
 8034eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034ef0:	f000 b8e4 	b.w	80350bc <_kill_r>
 8034ef4:	2b01      	cmp	r3, #1
 8034ef6:	d00a      	beq.n	8034f0e <_raise_r+0x4e>
 8034ef8:	1c59      	adds	r1, r3, #1
 8034efa:	d103      	bne.n	8034f04 <_raise_r+0x44>
 8034efc:	2316      	movs	r3, #22
 8034efe:	6003      	str	r3, [r0, #0]
 8034f00:	2001      	movs	r0, #1
 8034f02:	e7e6      	b.n	8034ed2 <_raise_r+0x12>
 8034f04:	2100      	movs	r1, #0
 8034f06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8034f0a:	4620      	mov	r0, r4
 8034f0c:	4798      	blx	r3
 8034f0e:	2000      	movs	r0, #0
 8034f10:	e7df      	b.n	8034ed2 <_raise_r+0x12>
	...

08034f14 <raise>:
 8034f14:	4b02      	ldr	r3, [pc, #8]	@ (8034f20 <raise+0xc>)
 8034f16:	4601      	mov	r1, r0
 8034f18:	6818      	ldr	r0, [r3, #0]
 8034f1a:	f7ff bfd1 	b.w	8034ec0 <_raise_r>
 8034f1e:	bf00      	nop
 8034f20:	200002d8 	.word	0x200002d8

08034f24 <__gettzinfo>:
 8034f24:	4800      	ldr	r0, [pc, #0]	@ (8034f28 <__gettzinfo+0x4>)
 8034f26:	4770      	bx	lr
 8034f28:	20000818 	.word	0x20000818

08034f2c <gmtime_r>:
 8034f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034f30:	4a4d      	ldr	r2, [pc, #308]	@ (8035068 <gmtime_r+0x13c>)
 8034f32:	460c      	mov	r4, r1
 8034f34:	2300      	movs	r3, #0
 8034f36:	e9d0 0100 	ldrd	r0, r1, [r0]
 8034f3a:	f7db febd 	bl	8010cb8 <__aeabi_ldivmod>
 8034f3e:	2a00      	cmp	r2, #0
 8034f40:	bfbc      	itt	lt
 8034f42:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8034f46:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8034f4a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8034f4e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8034f52:	fbb2 f3f1 	udiv	r3, r2, r1
 8034f56:	fb01 2213 	mls	r2, r1, r3, r2
 8034f5a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8034f5e:	bfac      	ite	ge
 8034f60:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8034f64:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8034f68:	60a3      	str	r3, [r4, #8]
 8034f6a:	fbb2 f3f1 	udiv	r3, r2, r1
 8034f6e:	fb01 2213 	mls	r2, r1, r3, r2
 8034f72:	6063      	str	r3, [r4, #4]
 8034f74:	6022      	str	r2, [r4, #0]
 8034f76:	1cc3      	adds	r3, r0, #3
 8034f78:	2207      	movs	r2, #7
 8034f7a:	fb93 f2f2 	sdiv	r2, r3, r2
 8034f7e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8034f82:	1a9b      	subs	r3, r3, r2
 8034f84:	bf48      	it	mi
 8034f86:	3307      	addmi	r3, #7
 8034f88:	2800      	cmp	r0, #0
 8034f8a:	61a3      	str	r3, [r4, #24]
 8034f8c:	bfb8      	it	lt
 8034f8e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8034f92:	4936      	ldr	r1, [pc, #216]	@ (803506c <gmtime_r+0x140>)
 8034f94:	bfae      	itee	ge
 8034f96:	fb90 f1f1 	sdivge	r1, r0, r1
 8034f9a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8034f9e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8034fa2:	4b33      	ldr	r3, [pc, #204]	@ (8035070 <gmtime_r+0x144>)
 8034fa4:	fb03 0001 	mla	r0, r3, r1, r0
 8034fa8:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8034fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8034fb0:	4403      	add	r3, r0
 8034fb2:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8034fb6:	fbb0 f2fc 	udiv	r2, r0, ip
 8034fba:	1a9b      	subs	r3, r3, r2
 8034fbc:	f240 176d 	movw	r7, #365	@ 0x16d
 8034fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8035074 <gmtime_r+0x148>)
 8034fc2:	fbb0 f2f2 	udiv	r2, r0, r2
 8034fc6:	2664      	movs	r6, #100	@ 0x64
 8034fc8:	1a9b      	subs	r3, r3, r2
 8034fca:	fbb3 f2f7 	udiv	r2, r3, r7
 8034fce:	fbb3 f3fc 	udiv	r3, r3, ip
 8034fd2:	fbb2 f5f6 	udiv	r5, r2, r6
 8034fd6:	1aeb      	subs	r3, r5, r3
 8034fd8:	4403      	add	r3, r0
 8034fda:	fb07 3312 	mls	r3, r7, r2, r3
 8034fde:	2099      	movs	r0, #153	@ 0x99
 8034fe0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8034fe4:	3702      	adds	r7, #2
 8034fe6:	f103 0e01 	add.w	lr, r3, #1
 8034fea:	fbb7 fcf0 	udiv	ip, r7, r0
 8034fee:	fb00 f00c 	mul.w	r0, r0, ip
 8034ff2:	3002      	adds	r0, #2
 8034ff4:	f04f 0805 	mov.w	r8, #5
 8034ff8:	fbb0 f0f8 	udiv	r0, r0, r8
 8034ffc:	ebae 0000 	sub.w	r0, lr, r0
 8035000:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8035004:	4577      	cmp	r7, lr
 8035006:	bf8c      	ite	hi
 8035008:	f06f 0709 	mvnhi.w	r7, #9
 803500c:	2702      	movls	r7, #2
 803500e:	4467      	add	r7, ip
 8035010:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8035014:	fb0c 2101 	mla	r1, ip, r1, r2
 8035018:	2f01      	cmp	r7, #1
 803501a:	bf98      	it	ls
 803501c:	3101      	addls	r1, #1
 803501e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8035022:	d30c      	bcc.n	803503e <gmtime_r+0x112>
 8035024:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8035028:	61e3      	str	r3, [r4, #28]
 803502a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803502e:	2300      	movs	r3, #0
 8035030:	60e0      	str	r0, [r4, #12]
 8035032:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8035036:	6223      	str	r3, [r4, #32]
 8035038:	4620      	mov	r0, r4
 803503a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803503e:	f012 0f03 	tst.w	r2, #3
 8035042:	d102      	bne.n	803504a <gmtime_r+0x11e>
 8035044:	fb06 2515 	mls	r5, r6, r5, r2
 8035048:	b95d      	cbnz	r5, 8035062 <gmtime_r+0x136>
 803504a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 803504e:	fbb2 f6f5 	udiv	r6, r2, r5
 8035052:	fb05 2216 	mls	r2, r5, r6, r2
 8035056:	fab2 f282 	clz	r2, r2
 803505a:	0952      	lsrs	r2, r2, #5
 803505c:	333b      	adds	r3, #59	@ 0x3b
 803505e:	4413      	add	r3, r2
 8035060:	e7e2      	b.n	8035028 <gmtime_r+0xfc>
 8035062:	2201      	movs	r2, #1
 8035064:	e7fa      	b.n	803505c <gmtime_r+0x130>
 8035066:	bf00      	nop
 8035068:	00015180 	.word	0x00015180
 803506c:	00023ab1 	.word	0x00023ab1
 8035070:	fffdc54f 	.word	0xfffdc54f
 8035074:	00023ab0 	.word	0x00023ab0

08035078 <_fstat_r>:
 8035078:	b538      	push	{r3, r4, r5, lr}
 803507a:	4d07      	ldr	r5, [pc, #28]	@ (8035098 <_fstat_r+0x20>)
 803507c:	2300      	movs	r3, #0
 803507e:	4604      	mov	r4, r0
 8035080:	4608      	mov	r0, r1
 8035082:	4611      	mov	r1, r2
 8035084:	602b      	str	r3, [r5, #0]
 8035086:	f7dd f9b2 	bl	80123ee <_fstat>
 803508a:	1c43      	adds	r3, r0, #1
 803508c:	d102      	bne.n	8035094 <_fstat_r+0x1c>
 803508e:	682b      	ldr	r3, [r5, #0]
 8035090:	b103      	cbz	r3, 8035094 <_fstat_r+0x1c>
 8035092:	6023      	str	r3, [r4, #0]
 8035094:	bd38      	pop	{r3, r4, r5, pc}
 8035096:	bf00      	nop
 8035098:	2001a044 	.word	0x2001a044

0803509c <_isatty_r>:
 803509c:	b538      	push	{r3, r4, r5, lr}
 803509e:	4d06      	ldr	r5, [pc, #24]	@ (80350b8 <_isatty_r+0x1c>)
 80350a0:	2300      	movs	r3, #0
 80350a2:	4604      	mov	r4, r0
 80350a4:	4608      	mov	r0, r1
 80350a6:	602b      	str	r3, [r5, #0]
 80350a8:	f7dd f9a6 	bl	80123f8 <_isatty>
 80350ac:	1c43      	adds	r3, r0, #1
 80350ae:	d102      	bne.n	80350b6 <_isatty_r+0x1a>
 80350b0:	682b      	ldr	r3, [r5, #0]
 80350b2:	b103      	cbz	r3, 80350b6 <_isatty_r+0x1a>
 80350b4:	6023      	str	r3, [r4, #0]
 80350b6:	bd38      	pop	{r3, r4, r5, pc}
 80350b8:	2001a044 	.word	0x2001a044

080350bc <_kill_r>:
 80350bc:	b538      	push	{r3, r4, r5, lr}
 80350be:	4d07      	ldr	r5, [pc, #28]	@ (80350dc <_kill_r+0x20>)
 80350c0:	2300      	movs	r3, #0
 80350c2:	4604      	mov	r4, r0
 80350c4:	4608      	mov	r0, r1
 80350c6:	4611      	mov	r1, r2
 80350c8:	602b      	str	r3, [r5, #0]
 80350ca:	f7dd f961 	bl	8012390 <_kill>
 80350ce:	1c43      	adds	r3, r0, #1
 80350d0:	d102      	bne.n	80350d8 <_kill_r+0x1c>
 80350d2:	682b      	ldr	r3, [r5, #0]
 80350d4:	b103      	cbz	r3, 80350d8 <_kill_r+0x1c>
 80350d6:	6023      	str	r3, [r4, #0]
 80350d8:	bd38      	pop	{r3, r4, r5, pc}
 80350da:	bf00      	nop
 80350dc:	2001a044 	.word	0x2001a044

080350e0 <_getpid_r>:
 80350e0:	f7dd b954 	b.w	801238c <_getpid>

080350e4 <_sbrk_r>:
 80350e4:	b538      	push	{r3, r4, r5, lr}
 80350e6:	4d06      	ldr	r5, [pc, #24]	@ (8035100 <_sbrk_r+0x1c>)
 80350e8:	2300      	movs	r3, #0
 80350ea:	4604      	mov	r4, r0
 80350ec:	4608      	mov	r0, r1
 80350ee:	602b      	str	r3, [r5, #0]
 80350f0:	f7dd f986 	bl	8012400 <_sbrk>
 80350f4:	1c43      	adds	r3, r0, #1
 80350f6:	d102      	bne.n	80350fe <_sbrk_r+0x1a>
 80350f8:	682b      	ldr	r3, [r5, #0]
 80350fa:	b103      	cbz	r3, 80350fe <_sbrk_r+0x1a>
 80350fc:	6023      	str	r3, [r4, #0]
 80350fe:	bd38      	pop	{r3, r4, r5, pc}
 8035100:	2001a044 	.word	0x2001a044

08035104 <sysconf>:
 8035104:	2808      	cmp	r0, #8
 8035106:	b508      	push	{r3, lr}
 8035108:	d006      	beq.n	8035118 <sysconf+0x14>
 803510a:	f7f8 fdbd 	bl	802dc88 <__errno>
 803510e:	2316      	movs	r3, #22
 8035110:	6003      	str	r3, [r0, #0]
 8035112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035116:	bd08      	pop	{r3, pc}
 8035118:	2080      	movs	r0, #128	@ 0x80
 803511a:	e7fc      	b.n	8035116 <sysconf+0x12>

0803511c <_strtoll_l.constprop.0>:
 803511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035120:	b085      	sub	sp, #20
 8035122:	4690      	mov	r8, r2
 8035124:	4a43      	ldr	r2, [pc, #268]	@ (8035234 <_strtoll_l.constprop.0+0x118>)
 8035126:	9002      	str	r0, [sp, #8]
 8035128:	4689      	mov	r9, r1
 803512a:	461e      	mov	r6, r3
 803512c:	460d      	mov	r5, r1
 803512e:	462b      	mov	r3, r5
 8035130:	f815 4b01 	ldrb.w	r4, [r5], #1
 8035134:	5d17      	ldrb	r7, [r2, r4]
 8035136:	f017 0708 	ands.w	r7, r7, #8
 803513a:	d1f8      	bne.n	803512e <_strtoll_l.constprop.0+0x12>
 803513c:	2c2d      	cmp	r4, #45	@ 0x2d
 803513e:	d149      	bne.n	80351d4 <_strtoll_l.constprop.0+0xb8>
 8035140:	782c      	ldrb	r4, [r5, #0]
 8035142:	2701      	movs	r7, #1
 8035144:	1c9d      	adds	r5, r3, #2
 8035146:	f036 0310 	bics.w	r3, r6, #16
 803514a:	d109      	bne.n	8035160 <_strtoll_l.constprop.0+0x44>
 803514c:	2c30      	cmp	r4, #48	@ 0x30
 803514e:	d146      	bne.n	80351de <_strtoll_l.constprop.0+0xc2>
 8035150:	782b      	ldrb	r3, [r5, #0]
 8035152:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8035156:	2b58      	cmp	r3, #88	@ 0x58
 8035158:	d141      	bne.n	80351de <_strtoll_l.constprop.0+0xc2>
 803515a:	786c      	ldrb	r4, [r5, #1]
 803515c:	2610      	movs	r6, #16
 803515e:	3502      	adds	r5, #2
 8035160:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8035164:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 8035168:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 803516c:	17f3      	asrs	r3, r6, #31
 803516e:	4632      	mov	r2, r6
 8035170:	4658      	mov	r0, fp
 8035172:	4651      	mov	r1, sl
 8035174:	9303      	str	r3, [sp, #12]
 8035176:	f7db fdef 	bl	8010d58 <__aeabi_uldivmod>
 803517a:	9201      	str	r2, [sp, #4]
 803517c:	2200      	movs	r2, #0
 803517e:	468e      	mov	lr, r1
 8035180:	4684      	mov	ip, r0
 8035182:	4611      	mov	r1, r2
 8035184:	4610      	mov	r0, r2
 8035186:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 803518a:	2b09      	cmp	r3, #9
 803518c:	d905      	bls.n	803519a <_strtoll_l.constprop.0+0x7e>
 803518e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8035192:	2b19      	cmp	r3, #25
 8035194:	d82a      	bhi.n	80351ec <_strtoll_l.constprop.0+0xd0>
 8035196:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803519a:	429e      	cmp	r6, r3
 803519c:	dd30      	ble.n	8035200 <_strtoll_l.constprop.0+0xe4>
 803519e:	1c54      	adds	r4, r2, #1
 80351a0:	d015      	beq.n	80351ce <_strtoll_l.constprop.0+0xb2>
 80351a2:	4584      	cmp	ip, r0
 80351a4:	eb7e 0201 	sbcs.w	r2, lr, r1
 80351a8:	d327      	bcc.n	80351fa <_strtoll_l.constprop.0+0xde>
 80351aa:	458e      	cmp	lr, r1
 80351ac:	bf08      	it	eq
 80351ae:	4584      	cmpeq	ip, r0
 80351b0:	d102      	bne.n	80351b8 <_strtoll_l.constprop.0+0x9c>
 80351b2:	9a01      	ldr	r2, [sp, #4]
 80351b4:	429a      	cmp	r2, r3
 80351b6:	db20      	blt.n	80351fa <_strtoll_l.constprop.0+0xde>
 80351b8:	9a03      	ldr	r2, [sp, #12]
 80351ba:	4371      	muls	r1, r6
 80351bc:	fb00 1102 	mla	r1, r0, r2, r1
 80351c0:	fba6 0200 	umull	r0, r2, r6, r0
 80351c4:	440a      	add	r2, r1
 80351c6:	1818      	adds	r0, r3, r0
 80351c8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 80351cc:	2201      	movs	r2, #1
 80351ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80351d2:	e7d8      	b.n	8035186 <_strtoll_l.constprop.0+0x6a>
 80351d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80351d6:	bf04      	itt	eq
 80351d8:	782c      	ldrbeq	r4, [r5, #0]
 80351da:	1c9d      	addeq	r5, r3, #2
 80351dc:	e7b3      	b.n	8035146 <_strtoll_l.constprop.0+0x2a>
 80351de:	2e00      	cmp	r6, #0
 80351e0:	d1be      	bne.n	8035160 <_strtoll_l.constprop.0+0x44>
 80351e2:	2c30      	cmp	r4, #48	@ 0x30
 80351e4:	bf0c      	ite	eq
 80351e6:	2608      	moveq	r6, #8
 80351e8:	260a      	movne	r6, #10
 80351ea:	e7b9      	b.n	8035160 <_strtoll_l.constprop.0+0x44>
 80351ec:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80351f0:	2b19      	cmp	r3, #25
 80351f2:	d805      	bhi.n	8035200 <_strtoll_l.constprop.0+0xe4>
 80351f4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 80351f8:	e7cf      	b.n	803519a <_strtoll_l.constprop.0+0x7e>
 80351fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80351fe:	e7e6      	b.n	80351ce <_strtoll_l.constprop.0+0xb2>
 8035200:	1c53      	adds	r3, r2, #1
 8035202:	d10a      	bne.n	803521a <_strtoll_l.constprop.0+0xfe>
 8035204:	9a02      	ldr	r2, [sp, #8]
 8035206:	2322      	movs	r3, #34	@ 0x22
 8035208:	6013      	str	r3, [r2, #0]
 803520a:	4658      	mov	r0, fp
 803520c:	4651      	mov	r1, sl
 803520e:	f1b8 0f00 	cmp.w	r8, #0
 8035212:	d10a      	bne.n	803522a <_strtoll_l.constprop.0+0x10e>
 8035214:	b005      	add	sp, #20
 8035216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803521a:	b117      	cbz	r7, 8035222 <_strtoll_l.constprop.0+0x106>
 803521c:	4240      	negs	r0, r0
 803521e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035222:	f1b8 0f00 	cmp.w	r8, #0
 8035226:	d0f5      	beq.n	8035214 <_strtoll_l.constprop.0+0xf8>
 8035228:	b10a      	cbz	r2, 803522e <_strtoll_l.constprop.0+0x112>
 803522a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803522e:	f8c8 9000 	str.w	r9, [r8]
 8035232:	e7ef      	b.n	8035214 <_strtoll_l.constprop.0+0xf8>
 8035234:	0803bda1 	.word	0x0803bda1

08035238 <_strtoll_r>:
 8035238:	f7ff bf70 	b.w	803511c <_strtoll_l.constprop.0>

0803523c <__libc_fini_array>:
 803523c:	b538      	push	{r3, r4, r5, lr}
 803523e:	4d07      	ldr	r5, [pc, #28]	@ (803525c <__libc_fini_array+0x20>)
 8035240:	4c07      	ldr	r4, [pc, #28]	@ (8035260 <__libc_fini_array+0x24>)
 8035242:	1b64      	subs	r4, r4, r5
 8035244:	10a4      	asrs	r4, r4, #2
 8035246:	b91c      	cbnz	r4, 8035250 <__libc_fini_array+0x14>
 8035248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803524c:	f000 bc9c 	b.w	8035b88 <_fini>
 8035250:	3c01      	subs	r4, #1
 8035252:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8035256:	4798      	blx	r3
 8035258:	e7f5      	b.n	8035246 <__libc_fini_array+0xa>
 803525a:	bf00      	nop
 803525c:	0803c1b8 	.word	0x0803c1b8
 8035260:	0803c1bc 	.word	0x0803c1bc

08035264 <_strtoull_l.constprop.0>:
 8035264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035268:	4691      	mov	r9, r2
 803526a:	4a48      	ldr	r2, [pc, #288]	@ (803538c <_strtoull_l.constprop.0+0x128>)
 803526c:	9001      	str	r0, [sp, #4]
 803526e:	468a      	mov	sl, r1
 8035270:	461e      	mov	r6, r3
 8035272:	460d      	mov	r5, r1
 8035274:	462b      	mov	r3, r5
 8035276:	f815 4b01 	ldrb.w	r4, [r5], #1
 803527a:	5d17      	ldrb	r7, [r2, r4]
 803527c:	f017 0708 	ands.w	r7, r7, #8
 8035280:	d1f8      	bne.n	8035274 <_strtoull_l.constprop.0+0x10>
 8035282:	2c2d      	cmp	r4, #45	@ 0x2d
 8035284:	d14a      	bne.n	803531c <_strtoull_l.constprop.0+0xb8>
 8035286:	782c      	ldrb	r4, [r5, #0]
 8035288:	2701      	movs	r7, #1
 803528a:	1c9d      	adds	r5, r3, #2
 803528c:	f036 0310 	bics.w	r3, r6, #16
 8035290:	d109      	bne.n	80352a6 <_strtoull_l.constprop.0+0x42>
 8035292:	2c30      	cmp	r4, #48	@ 0x30
 8035294:	d147      	bne.n	8035326 <_strtoull_l.constprop.0+0xc2>
 8035296:	782b      	ldrb	r3, [r5, #0]
 8035298:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803529c:	2b58      	cmp	r3, #88	@ 0x58
 803529e:	d142      	bne.n	8035326 <_strtoull_l.constprop.0+0xc2>
 80352a0:	786c      	ldrb	r4, [r5, #1]
 80352a2:	2610      	movs	r6, #16
 80352a4:	3502      	adds	r5, #2
 80352a6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80352aa:	4632      	mov	r2, r6
 80352ac:	465b      	mov	r3, fp
 80352ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80352b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80352b6:	f7db fd4f 	bl	8010d58 <__aeabi_uldivmod>
 80352ba:	4632      	mov	r2, r6
 80352bc:	9000      	str	r0, [sp, #0]
 80352be:	4688      	mov	r8, r1
 80352c0:	465b      	mov	r3, fp
 80352c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80352c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80352ca:	f7db fd45 	bl	8010d58 <__aeabi_uldivmod>
 80352ce:	2300      	movs	r3, #0
 80352d0:	4618      	mov	r0, r3
 80352d2:	4619      	mov	r1, r3
 80352d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80352d8:	f1bc 0f09 	cmp.w	ip, #9
 80352dc:	d82a      	bhi.n	8035334 <_strtoull_l.constprop.0+0xd0>
 80352de:	4664      	mov	r4, ip
 80352e0:	42a6      	cmp	r6, r4
 80352e2:	dd38      	ble.n	8035356 <_strtoull_l.constprop.0+0xf2>
 80352e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80352e8:	d015      	beq.n	8035316 <_strtoull_l.constprop.0+0xb2>
 80352ea:	9b00      	ldr	r3, [sp, #0]
 80352ec:	4283      	cmp	r3, r0
 80352ee:	eb78 0301 	sbcs.w	r3, r8, r1
 80352f2:	d32d      	bcc.n	8035350 <_strtoull_l.constprop.0+0xec>
 80352f4:	9b00      	ldr	r3, [sp, #0]
 80352f6:	4588      	cmp	r8, r1
 80352f8:	bf08      	it	eq
 80352fa:	4283      	cmpeq	r3, r0
 80352fc:	d101      	bne.n	8035302 <_strtoull_l.constprop.0+0x9e>
 80352fe:	42a2      	cmp	r2, r4
 8035300:	db26      	blt.n	8035350 <_strtoull_l.constprop.0+0xec>
 8035302:	4371      	muls	r1, r6
 8035304:	fb00 110b 	mla	r1, r0, fp, r1
 8035308:	fba6 0300 	umull	r0, r3, r6, r0
 803530c:	4419      	add	r1, r3
 803530e:	1820      	adds	r0, r4, r0
 8035310:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8035314:	2301      	movs	r3, #1
 8035316:	f815 4b01 	ldrb.w	r4, [r5], #1
 803531a:	e7db      	b.n	80352d4 <_strtoull_l.constprop.0+0x70>
 803531c:	2c2b      	cmp	r4, #43	@ 0x2b
 803531e:	bf04      	itt	eq
 8035320:	782c      	ldrbeq	r4, [r5, #0]
 8035322:	1c9d      	addeq	r5, r3, #2
 8035324:	e7b2      	b.n	803528c <_strtoull_l.constprop.0+0x28>
 8035326:	2e00      	cmp	r6, #0
 8035328:	d1bd      	bne.n	80352a6 <_strtoull_l.constprop.0+0x42>
 803532a:	2c30      	cmp	r4, #48	@ 0x30
 803532c:	bf0c      	ite	eq
 803532e:	2608      	moveq	r6, #8
 8035330:	260a      	movne	r6, #10
 8035332:	e7b8      	b.n	80352a6 <_strtoull_l.constprop.0+0x42>
 8035334:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8035338:	f1bc 0f19 	cmp.w	ip, #25
 803533c:	d801      	bhi.n	8035342 <_strtoull_l.constprop.0+0xde>
 803533e:	3c37      	subs	r4, #55	@ 0x37
 8035340:	e7ce      	b.n	80352e0 <_strtoull_l.constprop.0+0x7c>
 8035342:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8035346:	f1bc 0f19 	cmp.w	ip, #25
 803534a:	d804      	bhi.n	8035356 <_strtoull_l.constprop.0+0xf2>
 803534c:	3c57      	subs	r4, #87	@ 0x57
 803534e:	e7c7      	b.n	80352e0 <_strtoull_l.constprop.0+0x7c>
 8035350:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8035354:	e7df      	b.n	8035316 <_strtoull_l.constprop.0+0xb2>
 8035356:	1c5a      	adds	r2, r3, #1
 8035358:	d10a      	bne.n	8035370 <_strtoull_l.constprop.0+0x10c>
 803535a:	9901      	ldr	r1, [sp, #4]
 803535c:	2222      	movs	r2, #34	@ 0x22
 803535e:	600a      	str	r2, [r1, #0]
 8035360:	4618      	mov	r0, r3
 8035362:	4619      	mov	r1, r3
 8035364:	f1b9 0f00 	cmp.w	r9, #0
 8035368:	d10a      	bne.n	8035380 <_strtoull_l.constprop.0+0x11c>
 803536a:	b003      	add	sp, #12
 803536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035370:	b117      	cbz	r7, 8035378 <_strtoull_l.constprop.0+0x114>
 8035372:	4240      	negs	r0, r0
 8035374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8035378:	f1b9 0f00 	cmp.w	r9, #0
 803537c:	d0f5      	beq.n	803536a <_strtoull_l.constprop.0+0x106>
 803537e:	b10b      	cbz	r3, 8035384 <_strtoull_l.constprop.0+0x120>
 8035380:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8035384:	f8c9 a000 	str.w	sl, [r9]
 8035388:	e7ef      	b.n	803536a <_strtoull_l.constprop.0+0x106>
 803538a:	bf00      	nop
 803538c:	0803bda1 	.word	0x0803bda1

08035390 <_strtoull_r>:
 8035390:	f7ff bf68 	b.w	8035264 <_strtoull_l.constprop.0>

08035394 <_mbrtowc_r>:
 8035394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8035396:	4c0a      	ldr	r4, [pc, #40]	@ (80353c0 <_mbrtowc_r+0x2c>)
 8035398:	9e08      	ldr	r6, [sp, #32]
 803539a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 803539e:	9600      	str	r6, [sp, #0]
 80353a0:	4605      	mov	r5, r0
 80353a2:	4614      	mov	r4, r2
 80353a4:	b912      	cbnz	r2, 80353ac <_mbrtowc_r+0x18>
 80353a6:	4a07      	ldr	r2, [pc, #28]	@ (80353c4 <_mbrtowc_r+0x30>)
 80353a8:	2301      	movs	r3, #1
 80353aa:	4621      	mov	r1, r4
 80353ac:	47b8      	blx	r7
 80353ae:	1c43      	adds	r3, r0, #1
 80353b0:	bf01      	itttt	eq
 80353b2:	2300      	moveq	r3, #0
 80353b4:	6033      	streq	r3, [r6, #0]
 80353b6:	238a      	moveq	r3, #138	@ 0x8a
 80353b8:	602b      	streq	r3, [r5, #0]
 80353ba:	b003      	add	sp, #12
 80353bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80353be:	bf00      	nop
 80353c0:	2000016c 	.word	0x2000016c
 80353c4:	0803b9e2 	.word	0x0803b9e2

080353c8 <iswspace>:
 80353c8:	2100      	movs	r1, #0
 80353ca:	f000 b801 	b.w	80353d0 <iswspace_l>
	...

080353d0 <iswspace_l>:
 80353d0:	28ff      	cmp	r0, #255	@ 0xff
 80353d2:	bf9d      	ittte	ls
 80353d4:	4b02      	ldrls	r3, [pc, #8]	@ (80353e0 <iswspace_l+0x10>)
 80353d6:	5c18      	ldrbls	r0, [r3, r0]
 80353d8:	f000 0008 	andls.w	r0, r0, #8
 80353dc:	2000      	movhi	r0, #0
 80353de:	4770      	bx	lr
 80353e0:	0803bda1 	.word	0x0803bda1

080353e4 <__register_exitproc>:
 80353e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80353e8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8035460 <__register_exitproc+0x7c>
 80353ec:	4606      	mov	r6, r0
 80353ee:	f8da 0000 	ldr.w	r0, [sl]
 80353f2:	4698      	mov	r8, r3
 80353f4:	460f      	mov	r7, r1
 80353f6:	4691      	mov	r9, r2
 80353f8:	f7f8 fc7b 	bl	802dcf2 <__retarget_lock_acquire_recursive>
 80353fc:	4b16      	ldr	r3, [pc, #88]	@ (8035458 <__register_exitproc+0x74>)
 80353fe:	681c      	ldr	r4, [r3, #0]
 8035400:	b90c      	cbnz	r4, 8035406 <__register_exitproc+0x22>
 8035402:	4c16      	ldr	r4, [pc, #88]	@ (803545c <__register_exitproc+0x78>)
 8035404:	601c      	str	r4, [r3, #0]
 8035406:	6865      	ldr	r5, [r4, #4]
 8035408:	f8da 0000 	ldr.w	r0, [sl]
 803540c:	2d1f      	cmp	r5, #31
 803540e:	dd05      	ble.n	803541c <__register_exitproc+0x38>
 8035410:	f7f8 fc71 	bl	802dcf6 <__retarget_lock_release_recursive>
 8035414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8035418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803541c:	b19e      	cbz	r6, 8035446 <__register_exitproc+0x62>
 803541e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8035422:	2201      	movs	r2, #1
 8035424:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8035428:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 803542c:	40aa      	lsls	r2, r5
 803542e:	4313      	orrs	r3, r2
 8035430:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8035434:	2e02      	cmp	r6, #2
 8035436:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 803543a:	bf02      	ittt	eq
 803543c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8035440:	4313      	orreq	r3, r2
 8035442:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8035446:	1c6b      	adds	r3, r5, #1
 8035448:	3502      	adds	r5, #2
 803544a:	6063      	str	r3, [r4, #4]
 803544c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8035450:	f7f8 fc51 	bl	802dcf6 <__retarget_lock_release_recursive>
 8035454:	2000      	movs	r0, #0
 8035456:	e7df      	b.n	8035418 <__register_exitproc+0x34>
 8035458:	2001a050 	.word	0x2001a050
 803545c:	2001a088 	.word	0x2001a088
 8035460:	20000400 	.word	0x20000400
 8035464:	00000000 	.word	0x00000000

08035468 <nan>:
 8035468:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8035470 <nan+0x8>
 803546c:	4770      	bx	lr
 803546e:	bf00      	nop
 8035470:	00000000 	.word	0x00000000
 8035474:	7ff80000 	.word	0x7ff80000

08035478 <nanf>:
 8035478:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8035480 <nanf+0x8>
 803547c:	4770      	bx	lr
 803547e:	bf00      	nop
 8035480:	7fc00000 	.word	0x7fc00000

08035484 <_calloc_r>:
 8035484:	b538      	push	{r3, r4, r5, lr}
 8035486:	fba1 1502 	umull	r1, r5, r1, r2
 803548a:	b935      	cbnz	r5, 803549a <_calloc_r+0x16>
 803548c:	f7f9 fc4e 	bl	802ed2c <_malloc_r>
 8035490:	4604      	mov	r4, r0
 8035492:	b938      	cbnz	r0, 80354a4 <_calloc_r+0x20>
 8035494:	2400      	movs	r4, #0
 8035496:	4620      	mov	r0, r4
 8035498:	bd38      	pop	{r3, r4, r5, pc}
 803549a:	f7f8 fbf5 	bl	802dc88 <__errno>
 803549e:	230c      	movs	r3, #12
 80354a0:	6003      	str	r3, [r0, #0]
 80354a2:	e7f7      	b.n	8035494 <_calloc_r+0x10>
 80354a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80354a8:	f022 0203 	bic.w	r2, r2, #3
 80354ac:	3a04      	subs	r2, #4
 80354ae:	2a24      	cmp	r2, #36	@ 0x24
 80354b0:	d819      	bhi.n	80354e6 <_calloc_r+0x62>
 80354b2:	2a13      	cmp	r2, #19
 80354b4:	d915      	bls.n	80354e2 <_calloc_r+0x5e>
 80354b6:	2a1b      	cmp	r2, #27
 80354b8:	e9c0 5500 	strd	r5, r5, [r0]
 80354bc:	d806      	bhi.n	80354cc <_calloc_r+0x48>
 80354be:	f100 0308 	add.w	r3, r0, #8
 80354c2:	2200      	movs	r2, #0
 80354c4:	e9c3 2200 	strd	r2, r2, [r3]
 80354c8:	609a      	str	r2, [r3, #8]
 80354ca:	e7e4      	b.n	8035496 <_calloc_r+0x12>
 80354cc:	2a24      	cmp	r2, #36	@ 0x24
 80354ce:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80354d2:	bf11      	iteee	ne
 80354d4:	f100 0310 	addne.w	r3, r0, #16
 80354d8:	6105      	streq	r5, [r0, #16]
 80354da:	f100 0318 	addeq.w	r3, r0, #24
 80354de:	6145      	streq	r5, [r0, #20]
 80354e0:	e7ef      	b.n	80354c2 <_calloc_r+0x3e>
 80354e2:	4603      	mov	r3, r0
 80354e4:	e7ed      	b.n	80354c2 <_calloc_r+0x3e>
 80354e6:	4629      	mov	r1, r5
 80354e8:	f7f7 f9ca 	bl	802c880 <memset>
 80354ec:	e7d3      	b.n	8035496 <_calloc_r+0x12>
	...

080354f0 <__env_lock>:
 80354f0:	4801      	ldr	r0, [pc, #4]	@ (80354f8 <__env_lock+0x8>)
 80354f2:	f7f8 bbfe 	b.w	802dcf2 <__retarget_lock_acquire_recursive>
 80354f6:	bf00      	nop
 80354f8:	2001a049 	.word	0x2001a049

080354fc <__env_unlock>:
 80354fc:	4801      	ldr	r0, [pc, #4]	@ (8035504 <__env_unlock+0x8>)
 80354fe:	f7f8 bbfa 	b.w	802dcf6 <__retarget_lock_release_recursive>
 8035502:	bf00      	nop
 8035504:	2001a049 	.word	0x2001a049

08035508 <rshift>:
 8035508:	6903      	ldr	r3, [r0, #16]
 803550a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803550e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8035512:	ea4f 1261 	mov.w	r2, r1, asr #5
 8035516:	f100 0414 	add.w	r4, r0, #20
 803551a:	dd45      	ble.n	80355a8 <rshift+0xa0>
 803551c:	f011 011f 	ands.w	r1, r1, #31
 8035520:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8035524:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8035528:	d10c      	bne.n	8035544 <rshift+0x3c>
 803552a:	f100 0710 	add.w	r7, r0, #16
 803552e:	4629      	mov	r1, r5
 8035530:	42b1      	cmp	r1, r6
 8035532:	d334      	bcc.n	803559e <rshift+0x96>
 8035534:	1a9b      	subs	r3, r3, r2
 8035536:	009b      	lsls	r3, r3, #2
 8035538:	1eea      	subs	r2, r5, #3
 803553a:	4296      	cmp	r6, r2
 803553c:	bf38      	it	cc
 803553e:	2300      	movcc	r3, #0
 8035540:	4423      	add	r3, r4
 8035542:	e015      	b.n	8035570 <rshift+0x68>
 8035544:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8035548:	f1c1 0820 	rsb	r8, r1, #32
 803554c:	40cf      	lsrs	r7, r1
 803554e:	f105 0e04 	add.w	lr, r5, #4
 8035552:	46a1      	mov	r9, r4
 8035554:	4576      	cmp	r6, lr
 8035556:	46f4      	mov	ip, lr
 8035558:	d815      	bhi.n	8035586 <rshift+0x7e>
 803555a:	1a9a      	subs	r2, r3, r2
 803555c:	0092      	lsls	r2, r2, #2
 803555e:	3a04      	subs	r2, #4
 8035560:	3501      	adds	r5, #1
 8035562:	42ae      	cmp	r6, r5
 8035564:	bf38      	it	cc
 8035566:	2200      	movcc	r2, #0
 8035568:	18a3      	adds	r3, r4, r2
 803556a:	50a7      	str	r7, [r4, r2]
 803556c:	b107      	cbz	r7, 8035570 <rshift+0x68>
 803556e:	3304      	adds	r3, #4
 8035570:	1b1a      	subs	r2, r3, r4
 8035572:	42a3      	cmp	r3, r4
 8035574:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8035578:	bf08      	it	eq
 803557a:	2300      	moveq	r3, #0
 803557c:	6102      	str	r2, [r0, #16]
 803557e:	bf08      	it	eq
 8035580:	6143      	streq	r3, [r0, #20]
 8035582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8035586:	f8dc c000 	ldr.w	ip, [ip]
 803558a:	fa0c fc08 	lsl.w	ip, ip, r8
 803558e:	ea4c 0707 	orr.w	r7, ip, r7
 8035592:	f849 7b04 	str.w	r7, [r9], #4
 8035596:	f85e 7b04 	ldr.w	r7, [lr], #4
 803559a:	40cf      	lsrs	r7, r1
 803559c:	e7da      	b.n	8035554 <rshift+0x4c>
 803559e:	f851 cb04 	ldr.w	ip, [r1], #4
 80355a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80355a6:	e7c3      	b.n	8035530 <rshift+0x28>
 80355a8:	4623      	mov	r3, r4
 80355aa:	e7e1      	b.n	8035570 <rshift+0x68>

080355ac <__hexdig_fun>:
 80355ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80355b0:	2b09      	cmp	r3, #9
 80355b2:	d802      	bhi.n	80355ba <__hexdig_fun+0xe>
 80355b4:	3820      	subs	r0, #32
 80355b6:	b2c0      	uxtb	r0, r0
 80355b8:	4770      	bx	lr
 80355ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80355be:	2b05      	cmp	r3, #5
 80355c0:	d801      	bhi.n	80355c6 <__hexdig_fun+0x1a>
 80355c2:	3847      	subs	r0, #71	@ 0x47
 80355c4:	e7f7      	b.n	80355b6 <__hexdig_fun+0xa>
 80355c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80355ca:	2b05      	cmp	r3, #5
 80355cc:	d801      	bhi.n	80355d2 <__hexdig_fun+0x26>
 80355ce:	3827      	subs	r0, #39	@ 0x27
 80355d0:	e7f1      	b.n	80355b6 <__hexdig_fun+0xa>
 80355d2:	2000      	movs	r0, #0
 80355d4:	4770      	bx	lr
	...

080355d8 <__gethex>:
 80355d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80355dc:	b085      	sub	sp, #20
 80355de:	468a      	mov	sl, r1
 80355e0:	9302      	str	r3, [sp, #8]
 80355e2:	680b      	ldr	r3, [r1, #0]
 80355e4:	9001      	str	r0, [sp, #4]
 80355e6:	4690      	mov	r8, r2
 80355e8:	1c9c      	adds	r4, r3, #2
 80355ea:	46a1      	mov	r9, r4
 80355ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80355f0:	2830      	cmp	r0, #48	@ 0x30
 80355f2:	d0fa      	beq.n	80355ea <__gethex+0x12>
 80355f4:	eba9 0303 	sub.w	r3, r9, r3
 80355f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80355fc:	f7ff ffd6 	bl	80355ac <__hexdig_fun>
 8035600:	4605      	mov	r5, r0
 8035602:	2800      	cmp	r0, #0
 8035604:	d168      	bne.n	80356d8 <__gethex+0x100>
 8035606:	49a0      	ldr	r1, [pc, #640]	@ (8035888 <__gethex+0x2b0>)
 8035608:	2201      	movs	r2, #1
 803560a:	4648      	mov	r0, r9
 803560c:	f7f7 f96d 	bl	802c8ea <strncmp>
 8035610:	4607      	mov	r7, r0
 8035612:	2800      	cmp	r0, #0
 8035614:	d167      	bne.n	80356e6 <__gethex+0x10e>
 8035616:	f899 0001 	ldrb.w	r0, [r9, #1]
 803561a:	4626      	mov	r6, r4
 803561c:	f7ff ffc6 	bl	80355ac <__hexdig_fun>
 8035620:	2800      	cmp	r0, #0
 8035622:	d062      	beq.n	80356ea <__gethex+0x112>
 8035624:	4623      	mov	r3, r4
 8035626:	7818      	ldrb	r0, [r3, #0]
 8035628:	2830      	cmp	r0, #48	@ 0x30
 803562a:	4699      	mov	r9, r3
 803562c:	f103 0301 	add.w	r3, r3, #1
 8035630:	d0f9      	beq.n	8035626 <__gethex+0x4e>
 8035632:	f7ff ffbb 	bl	80355ac <__hexdig_fun>
 8035636:	fab0 f580 	clz	r5, r0
 803563a:	096d      	lsrs	r5, r5, #5
 803563c:	f04f 0b01 	mov.w	fp, #1
 8035640:	464a      	mov	r2, r9
 8035642:	4616      	mov	r6, r2
 8035644:	3201      	adds	r2, #1
 8035646:	7830      	ldrb	r0, [r6, #0]
 8035648:	f7ff ffb0 	bl	80355ac <__hexdig_fun>
 803564c:	2800      	cmp	r0, #0
 803564e:	d1f8      	bne.n	8035642 <__gethex+0x6a>
 8035650:	498d      	ldr	r1, [pc, #564]	@ (8035888 <__gethex+0x2b0>)
 8035652:	2201      	movs	r2, #1
 8035654:	4630      	mov	r0, r6
 8035656:	f7f7 f948 	bl	802c8ea <strncmp>
 803565a:	2800      	cmp	r0, #0
 803565c:	d13f      	bne.n	80356de <__gethex+0x106>
 803565e:	b944      	cbnz	r4, 8035672 <__gethex+0x9a>
 8035660:	1c74      	adds	r4, r6, #1
 8035662:	4622      	mov	r2, r4
 8035664:	4616      	mov	r6, r2
 8035666:	3201      	adds	r2, #1
 8035668:	7830      	ldrb	r0, [r6, #0]
 803566a:	f7ff ff9f 	bl	80355ac <__hexdig_fun>
 803566e:	2800      	cmp	r0, #0
 8035670:	d1f8      	bne.n	8035664 <__gethex+0x8c>
 8035672:	1ba4      	subs	r4, r4, r6
 8035674:	00a7      	lsls	r7, r4, #2
 8035676:	7833      	ldrb	r3, [r6, #0]
 8035678:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 803567c:	2b50      	cmp	r3, #80	@ 0x50
 803567e:	d13e      	bne.n	80356fe <__gethex+0x126>
 8035680:	7873      	ldrb	r3, [r6, #1]
 8035682:	2b2b      	cmp	r3, #43	@ 0x2b
 8035684:	d033      	beq.n	80356ee <__gethex+0x116>
 8035686:	2b2d      	cmp	r3, #45	@ 0x2d
 8035688:	d034      	beq.n	80356f4 <__gethex+0x11c>
 803568a:	1c71      	adds	r1, r6, #1
 803568c:	2400      	movs	r4, #0
 803568e:	7808      	ldrb	r0, [r1, #0]
 8035690:	f7ff ff8c 	bl	80355ac <__hexdig_fun>
 8035694:	1e43      	subs	r3, r0, #1
 8035696:	b2db      	uxtb	r3, r3
 8035698:	2b18      	cmp	r3, #24
 803569a:	d830      	bhi.n	80356fe <__gethex+0x126>
 803569c:	f1a0 0210 	sub.w	r2, r0, #16
 80356a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80356a4:	f7ff ff82 	bl	80355ac <__hexdig_fun>
 80356a8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80356ac:	fa5f fc8c 	uxtb.w	ip, ip
 80356b0:	f1bc 0f18 	cmp.w	ip, #24
 80356b4:	f04f 030a 	mov.w	r3, #10
 80356b8:	d91e      	bls.n	80356f8 <__gethex+0x120>
 80356ba:	b104      	cbz	r4, 80356be <__gethex+0xe6>
 80356bc:	4252      	negs	r2, r2
 80356be:	4417      	add	r7, r2
 80356c0:	f8ca 1000 	str.w	r1, [sl]
 80356c4:	b1ed      	cbz	r5, 8035702 <__gethex+0x12a>
 80356c6:	f1bb 0f00 	cmp.w	fp, #0
 80356ca:	bf0c      	ite	eq
 80356cc:	2506      	moveq	r5, #6
 80356ce:	2500      	movne	r5, #0
 80356d0:	4628      	mov	r0, r5
 80356d2:	b005      	add	sp, #20
 80356d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80356d8:	2500      	movs	r5, #0
 80356da:	462c      	mov	r4, r5
 80356dc:	e7b0      	b.n	8035640 <__gethex+0x68>
 80356de:	2c00      	cmp	r4, #0
 80356e0:	d1c7      	bne.n	8035672 <__gethex+0x9a>
 80356e2:	4627      	mov	r7, r4
 80356e4:	e7c7      	b.n	8035676 <__gethex+0x9e>
 80356e6:	464e      	mov	r6, r9
 80356e8:	462f      	mov	r7, r5
 80356ea:	2501      	movs	r5, #1
 80356ec:	e7c3      	b.n	8035676 <__gethex+0x9e>
 80356ee:	2400      	movs	r4, #0
 80356f0:	1cb1      	adds	r1, r6, #2
 80356f2:	e7cc      	b.n	803568e <__gethex+0xb6>
 80356f4:	2401      	movs	r4, #1
 80356f6:	e7fb      	b.n	80356f0 <__gethex+0x118>
 80356f8:	fb03 0002 	mla	r0, r3, r2, r0
 80356fc:	e7ce      	b.n	803569c <__gethex+0xc4>
 80356fe:	4631      	mov	r1, r6
 8035700:	e7de      	b.n	80356c0 <__gethex+0xe8>
 8035702:	eba6 0309 	sub.w	r3, r6, r9
 8035706:	3b01      	subs	r3, #1
 8035708:	4629      	mov	r1, r5
 803570a:	2b07      	cmp	r3, #7
 803570c:	dc0a      	bgt.n	8035724 <__gethex+0x14c>
 803570e:	9801      	ldr	r0, [sp, #4]
 8035710:	f7fd fe22 	bl	8033358 <_Balloc>
 8035714:	4604      	mov	r4, r0
 8035716:	b940      	cbnz	r0, 803572a <__gethex+0x152>
 8035718:	4b5c      	ldr	r3, [pc, #368]	@ (803588c <__gethex+0x2b4>)
 803571a:	4602      	mov	r2, r0
 803571c:	21e4      	movs	r1, #228	@ 0xe4
 803571e:	485c      	ldr	r0, [pc, #368]	@ (8035890 <__gethex+0x2b8>)
 8035720:	f7f4 fb5c 	bl	8029ddc <__assert_func>
 8035724:	3101      	adds	r1, #1
 8035726:	105b      	asrs	r3, r3, #1
 8035728:	e7ef      	b.n	803570a <__gethex+0x132>
 803572a:	f100 0a14 	add.w	sl, r0, #20
 803572e:	2300      	movs	r3, #0
 8035730:	4655      	mov	r5, sl
 8035732:	469b      	mov	fp, r3
 8035734:	45b1      	cmp	r9, r6
 8035736:	d337      	bcc.n	80357a8 <__gethex+0x1d0>
 8035738:	f845 bb04 	str.w	fp, [r5], #4
 803573c:	eba5 050a 	sub.w	r5, r5, sl
 8035740:	10ad      	asrs	r5, r5, #2
 8035742:	6125      	str	r5, [r4, #16]
 8035744:	4658      	mov	r0, fp
 8035746:	f7fd fec5 	bl	80334d4 <__hi0bits>
 803574a:	016d      	lsls	r5, r5, #5
 803574c:	f8d8 6000 	ldr.w	r6, [r8]
 8035750:	1a2d      	subs	r5, r5, r0
 8035752:	42b5      	cmp	r5, r6
 8035754:	dd54      	ble.n	8035800 <__gethex+0x228>
 8035756:	1bad      	subs	r5, r5, r6
 8035758:	4629      	mov	r1, r5
 803575a:	4620      	mov	r0, r4
 803575c:	f7fe fa3f 	bl	8033bde <__any_on>
 8035760:	4681      	mov	r9, r0
 8035762:	b178      	cbz	r0, 8035784 <__gethex+0x1ac>
 8035764:	1e6b      	subs	r3, r5, #1
 8035766:	1159      	asrs	r1, r3, #5
 8035768:	f003 021f 	and.w	r2, r3, #31
 803576c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8035770:	f04f 0901 	mov.w	r9, #1
 8035774:	fa09 f202 	lsl.w	r2, r9, r2
 8035778:	420a      	tst	r2, r1
 803577a:	d003      	beq.n	8035784 <__gethex+0x1ac>
 803577c:	454b      	cmp	r3, r9
 803577e:	dc36      	bgt.n	80357ee <__gethex+0x216>
 8035780:	f04f 0902 	mov.w	r9, #2
 8035784:	4629      	mov	r1, r5
 8035786:	4620      	mov	r0, r4
 8035788:	f7ff febe 	bl	8035508 <rshift>
 803578c:	442f      	add	r7, r5
 803578e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8035792:	42bb      	cmp	r3, r7
 8035794:	da42      	bge.n	803581c <__gethex+0x244>
 8035796:	9801      	ldr	r0, [sp, #4]
 8035798:	4621      	mov	r1, r4
 803579a:	f7fd fe02 	bl	80333a2 <_Bfree>
 803579e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80357a0:	2300      	movs	r3, #0
 80357a2:	6013      	str	r3, [r2, #0]
 80357a4:	25a3      	movs	r5, #163	@ 0xa3
 80357a6:	e793      	b.n	80356d0 <__gethex+0xf8>
 80357a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80357ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80357ae:	d012      	beq.n	80357d6 <__gethex+0x1fe>
 80357b0:	2b20      	cmp	r3, #32
 80357b2:	d104      	bne.n	80357be <__gethex+0x1e6>
 80357b4:	f845 bb04 	str.w	fp, [r5], #4
 80357b8:	f04f 0b00 	mov.w	fp, #0
 80357bc:	465b      	mov	r3, fp
 80357be:	7830      	ldrb	r0, [r6, #0]
 80357c0:	9303      	str	r3, [sp, #12]
 80357c2:	f7ff fef3 	bl	80355ac <__hexdig_fun>
 80357c6:	9b03      	ldr	r3, [sp, #12]
 80357c8:	f000 000f 	and.w	r0, r0, #15
 80357cc:	4098      	lsls	r0, r3
 80357ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80357d2:	3304      	adds	r3, #4
 80357d4:	e7ae      	b.n	8035734 <__gethex+0x15c>
 80357d6:	45b1      	cmp	r9, r6
 80357d8:	d8ea      	bhi.n	80357b0 <__gethex+0x1d8>
 80357da:	492b      	ldr	r1, [pc, #172]	@ (8035888 <__gethex+0x2b0>)
 80357dc:	9303      	str	r3, [sp, #12]
 80357de:	2201      	movs	r2, #1
 80357e0:	4630      	mov	r0, r6
 80357e2:	f7f7 f882 	bl	802c8ea <strncmp>
 80357e6:	9b03      	ldr	r3, [sp, #12]
 80357e8:	2800      	cmp	r0, #0
 80357ea:	d1e1      	bne.n	80357b0 <__gethex+0x1d8>
 80357ec:	e7a2      	b.n	8035734 <__gethex+0x15c>
 80357ee:	1ea9      	subs	r1, r5, #2
 80357f0:	4620      	mov	r0, r4
 80357f2:	f7fe f9f4 	bl	8033bde <__any_on>
 80357f6:	2800      	cmp	r0, #0
 80357f8:	d0c2      	beq.n	8035780 <__gethex+0x1a8>
 80357fa:	f04f 0903 	mov.w	r9, #3
 80357fe:	e7c1      	b.n	8035784 <__gethex+0x1ac>
 8035800:	da09      	bge.n	8035816 <__gethex+0x23e>
 8035802:	1b75      	subs	r5, r6, r5
 8035804:	4621      	mov	r1, r4
 8035806:	9801      	ldr	r0, [sp, #4]
 8035808:	462a      	mov	r2, r5
 803580a:	f7fd ffaf 	bl	803376c <__lshift>
 803580e:	1b7f      	subs	r7, r7, r5
 8035810:	4604      	mov	r4, r0
 8035812:	f100 0a14 	add.w	sl, r0, #20
 8035816:	f04f 0900 	mov.w	r9, #0
 803581a:	e7b8      	b.n	803578e <__gethex+0x1b6>
 803581c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8035820:	42bd      	cmp	r5, r7
 8035822:	dd6f      	ble.n	8035904 <__gethex+0x32c>
 8035824:	1bed      	subs	r5, r5, r7
 8035826:	42ae      	cmp	r6, r5
 8035828:	dc34      	bgt.n	8035894 <__gethex+0x2bc>
 803582a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803582e:	2b02      	cmp	r3, #2
 8035830:	d022      	beq.n	8035878 <__gethex+0x2a0>
 8035832:	2b03      	cmp	r3, #3
 8035834:	d024      	beq.n	8035880 <__gethex+0x2a8>
 8035836:	2b01      	cmp	r3, #1
 8035838:	d115      	bne.n	8035866 <__gethex+0x28e>
 803583a:	42ae      	cmp	r6, r5
 803583c:	d113      	bne.n	8035866 <__gethex+0x28e>
 803583e:	2e01      	cmp	r6, #1
 8035840:	d10b      	bne.n	803585a <__gethex+0x282>
 8035842:	9a02      	ldr	r2, [sp, #8]
 8035844:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8035848:	6013      	str	r3, [r2, #0]
 803584a:	2301      	movs	r3, #1
 803584c:	6123      	str	r3, [r4, #16]
 803584e:	f8ca 3000 	str.w	r3, [sl]
 8035852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035854:	2562      	movs	r5, #98	@ 0x62
 8035856:	601c      	str	r4, [r3, #0]
 8035858:	e73a      	b.n	80356d0 <__gethex+0xf8>
 803585a:	1e71      	subs	r1, r6, #1
 803585c:	4620      	mov	r0, r4
 803585e:	f7fe f9be 	bl	8033bde <__any_on>
 8035862:	2800      	cmp	r0, #0
 8035864:	d1ed      	bne.n	8035842 <__gethex+0x26a>
 8035866:	9801      	ldr	r0, [sp, #4]
 8035868:	4621      	mov	r1, r4
 803586a:	f7fd fd9a 	bl	80333a2 <_Bfree>
 803586e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8035870:	2300      	movs	r3, #0
 8035872:	6013      	str	r3, [r2, #0]
 8035874:	2550      	movs	r5, #80	@ 0x50
 8035876:	e72b      	b.n	80356d0 <__gethex+0xf8>
 8035878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803587a:	2b00      	cmp	r3, #0
 803587c:	d1f3      	bne.n	8035866 <__gethex+0x28e>
 803587e:	e7e0      	b.n	8035842 <__gethex+0x26a>
 8035880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035882:	2b00      	cmp	r3, #0
 8035884:	d1dd      	bne.n	8035842 <__gethex+0x26a>
 8035886:	e7ee      	b.n	8035866 <__gethex+0x28e>
 8035888:	0803bb76 	.word	0x0803bb76
 803588c:	0803beae 	.word	0x0803beae
 8035890:	0803c148 	.word	0x0803c148
 8035894:	1e6f      	subs	r7, r5, #1
 8035896:	f1b9 0f00 	cmp.w	r9, #0
 803589a:	d130      	bne.n	80358fe <__gethex+0x326>
 803589c:	b127      	cbz	r7, 80358a8 <__gethex+0x2d0>
 803589e:	4639      	mov	r1, r7
 80358a0:	4620      	mov	r0, r4
 80358a2:	f7fe f99c 	bl	8033bde <__any_on>
 80358a6:	4681      	mov	r9, r0
 80358a8:	117a      	asrs	r2, r7, #5
 80358aa:	2301      	movs	r3, #1
 80358ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80358b0:	f007 071f 	and.w	r7, r7, #31
 80358b4:	40bb      	lsls	r3, r7
 80358b6:	4213      	tst	r3, r2
 80358b8:	4629      	mov	r1, r5
 80358ba:	4620      	mov	r0, r4
 80358bc:	bf18      	it	ne
 80358be:	f049 0902 	orrne.w	r9, r9, #2
 80358c2:	f7ff fe21 	bl	8035508 <rshift>
 80358c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80358ca:	1b76      	subs	r6, r6, r5
 80358cc:	2502      	movs	r5, #2
 80358ce:	f1b9 0f00 	cmp.w	r9, #0
 80358d2:	d047      	beq.n	8035964 <__gethex+0x38c>
 80358d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80358d8:	2b02      	cmp	r3, #2
 80358da:	d015      	beq.n	8035908 <__gethex+0x330>
 80358dc:	2b03      	cmp	r3, #3
 80358de:	d017      	beq.n	8035910 <__gethex+0x338>
 80358e0:	2b01      	cmp	r3, #1
 80358e2:	d109      	bne.n	80358f8 <__gethex+0x320>
 80358e4:	f019 0f02 	tst.w	r9, #2
 80358e8:	d006      	beq.n	80358f8 <__gethex+0x320>
 80358ea:	f8da 3000 	ldr.w	r3, [sl]
 80358ee:	ea49 0903 	orr.w	r9, r9, r3
 80358f2:	f019 0f01 	tst.w	r9, #1
 80358f6:	d10e      	bne.n	8035916 <__gethex+0x33e>
 80358f8:	f045 0510 	orr.w	r5, r5, #16
 80358fc:	e032      	b.n	8035964 <__gethex+0x38c>
 80358fe:	f04f 0901 	mov.w	r9, #1
 8035902:	e7d1      	b.n	80358a8 <__gethex+0x2d0>
 8035904:	2501      	movs	r5, #1
 8035906:	e7e2      	b.n	80358ce <__gethex+0x2f6>
 8035908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803590a:	f1c3 0301 	rsb	r3, r3, #1
 803590e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035912:	2b00      	cmp	r3, #0
 8035914:	d0f0      	beq.n	80358f8 <__gethex+0x320>
 8035916:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803591a:	f104 0314 	add.w	r3, r4, #20
 803591e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8035922:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8035926:	f04f 0c00 	mov.w	ip, #0
 803592a:	4618      	mov	r0, r3
 803592c:	f853 2b04 	ldr.w	r2, [r3], #4
 8035930:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8035934:	d01b      	beq.n	803596e <__gethex+0x396>
 8035936:	3201      	adds	r2, #1
 8035938:	6002      	str	r2, [r0, #0]
 803593a:	2d02      	cmp	r5, #2
 803593c:	f104 0314 	add.w	r3, r4, #20
 8035940:	d13c      	bne.n	80359bc <__gethex+0x3e4>
 8035942:	f8d8 2000 	ldr.w	r2, [r8]
 8035946:	3a01      	subs	r2, #1
 8035948:	42b2      	cmp	r2, r6
 803594a:	d109      	bne.n	8035960 <__gethex+0x388>
 803594c:	1171      	asrs	r1, r6, #5
 803594e:	2201      	movs	r2, #1
 8035950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8035954:	f006 061f 	and.w	r6, r6, #31
 8035958:	fa02 f606 	lsl.w	r6, r2, r6
 803595c:	421e      	tst	r6, r3
 803595e:	d13a      	bne.n	80359d6 <__gethex+0x3fe>
 8035960:	f045 0520 	orr.w	r5, r5, #32
 8035964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8035966:	601c      	str	r4, [r3, #0]
 8035968:	9b02      	ldr	r3, [sp, #8]
 803596a:	601f      	str	r7, [r3, #0]
 803596c:	e6b0      	b.n	80356d0 <__gethex+0xf8>
 803596e:	4299      	cmp	r1, r3
 8035970:	f843 cc04 	str.w	ip, [r3, #-4]
 8035974:	d8d9      	bhi.n	803592a <__gethex+0x352>
 8035976:	68a3      	ldr	r3, [r4, #8]
 8035978:	459b      	cmp	fp, r3
 803597a:	db17      	blt.n	80359ac <__gethex+0x3d4>
 803597c:	6861      	ldr	r1, [r4, #4]
 803597e:	9801      	ldr	r0, [sp, #4]
 8035980:	3101      	adds	r1, #1
 8035982:	f7fd fce9 	bl	8033358 <_Balloc>
 8035986:	4681      	mov	r9, r0
 8035988:	b918      	cbnz	r0, 8035992 <__gethex+0x3ba>
 803598a:	4b1a      	ldr	r3, [pc, #104]	@ (80359f4 <__gethex+0x41c>)
 803598c:	4602      	mov	r2, r0
 803598e:	2184      	movs	r1, #132	@ 0x84
 8035990:	e6c5      	b.n	803571e <__gethex+0x146>
 8035992:	6922      	ldr	r2, [r4, #16]
 8035994:	3202      	adds	r2, #2
 8035996:	f104 010c 	add.w	r1, r4, #12
 803599a:	0092      	lsls	r2, r2, #2
 803599c:	300c      	adds	r0, #12
 803599e:	f7f8 f9ab 	bl	802dcf8 <memcpy>
 80359a2:	4621      	mov	r1, r4
 80359a4:	9801      	ldr	r0, [sp, #4]
 80359a6:	f7fd fcfc 	bl	80333a2 <_Bfree>
 80359aa:	464c      	mov	r4, r9
 80359ac:	6923      	ldr	r3, [r4, #16]
 80359ae:	1c5a      	adds	r2, r3, #1
 80359b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80359b4:	6122      	str	r2, [r4, #16]
 80359b6:	2201      	movs	r2, #1
 80359b8:	615a      	str	r2, [r3, #20]
 80359ba:	e7be      	b.n	803593a <__gethex+0x362>
 80359bc:	6922      	ldr	r2, [r4, #16]
 80359be:	455a      	cmp	r2, fp
 80359c0:	dd0b      	ble.n	80359da <__gethex+0x402>
 80359c2:	2101      	movs	r1, #1
 80359c4:	4620      	mov	r0, r4
 80359c6:	f7ff fd9f 	bl	8035508 <rshift>
 80359ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80359ce:	3701      	adds	r7, #1
 80359d0:	42bb      	cmp	r3, r7
 80359d2:	f6ff aee0 	blt.w	8035796 <__gethex+0x1be>
 80359d6:	2501      	movs	r5, #1
 80359d8:	e7c2      	b.n	8035960 <__gethex+0x388>
 80359da:	f016 061f 	ands.w	r6, r6, #31
 80359de:	d0fa      	beq.n	80359d6 <__gethex+0x3fe>
 80359e0:	4453      	add	r3, sl
 80359e2:	f1c6 0620 	rsb	r6, r6, #32
 80359e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80359ea:	f7fd fd73 	bl	80334d4 <__hi0bits>
 80359ee:	42b0      	cmp	r0, r6
 80359f0:	dbe7      	blt.n	80359c2 <__gethex+0x3ea>
 80359f2:	e7f0      	b.n	80359d6 <__gethex+0x3fe>
 80359f4:	0803beae 	.word	0x0803beae

080359f8 <L_shift>:
 80359f8:	f1c2 0208 	rsb	r2, r2, #8
 80359fc:	0092      	lsls	r2, r2, #2
 80359fe:	b570      	push	{r4, r5, r6, lr}
 8035a00:	f1c2 0620 	rsb	r6, r2, #32
 8035a04:	6843      	ldr	r3, [r0, #4]
 8035a06:	6804      	ldr	r4, [r0, #0]
 8035a08:	fa03 f506 	lsl.w	r5, r3, r6
 8035a0c:	432c      	orrs	r4, r5
 8035a0e:	40d3      	lsrs	r3, r2
 8035a10:	6004      	str	r4, [r0, #0]
 8035a12:	f840 3f04 	str.w	r3, [r0, #4]!
 8035a16:	4288      	cmp	r0, r1
 8035a18:	d3f4      	bcc.n	8035a04 <L_shift+0xc>
 8035a1a:	bd70      	pop	{r4, r5, r6, pc}

08035a1c <__match>:
 8035a1c:	b530      	push	{r4, r5, lr}
 8035a1e:	6803      	ldr	r3, [r0, #0]
 8035a20:	3301      	adds	r3, #1
 8035a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035a26:	b914      	cbnz	r4, 8035a2e <__match+0x12>
 8035a28:	6003      	str	r3, [r0, #0]
 8035a2a:	2001      	movs	r0, #1
 8035a2c:	bd30      	pop	{r4, r5, pc}
 8035a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8035a32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8035a36:	2d19      	cmp	r5, #25
 8035a38:	bf98      	it	ls
 8035a3a:	3220      	addls	r2, #32
 8035a3c:	42a2      	cmp	r2, r4
 8035a3e:	d0f0      	beq.n	8035a22 <__match+0x6>
 8035a40:	2000      	movs	r0, #0
 8035a42:	e7f3      	b.n	8035a2c <__match+0x10>

08035a44 <__hexnan>:
 8035a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035a48:	680b      	ldr	r3, [r1, #0]
 8035a4a:	6801      	ldr	r1, [r0, #0]
 8035a4c:	115e      	asrs	r6, r3, #5
 8035a4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8035a52:	f013 031f 	ands.w	r3, r3, #31
 8035a56:	b087      	sub	sp, #28
 8035a58:	bf18      	it	ne
 8035a5a:	3604      	addne	r6, #4
 8035a5c:	2500      	movs	r5, #0
 8035a5e:	1f37      	subs	r7, r6, #4
 8035a60:	4682      	mov	sl, r0
 8035a62:	4690      	mov	r8, r2
 8035a64:	9301      	str	r3, [sp, #4]
 8035a66:	f846 5c04 	str.w	r5, [r6, #-4]
 8035a6a:	46b9      	mov	r9, r7
 8035a6c:	463c      	mov	r4, r7
 8035a6e:	9502      	str	r5, [sp, #8]
 8035a70:	46ab      	mov	fp, r5
 8035a72:	784a      	ldrb	r2, [r1, #1]
 8035a74:	1c4b      	adds	r3, r1, #1
 8035a76:	9303      	str	r3, [sp, #12]
 8035a78:	b342      	cbz	r2, 8035acc <__hexnan+0x88>
 8035a7a:	4610      	mov	r0, r2
 8035a7c:	9105      	str	r1, [sp, #20]
 8035a7e:	9204      	str	r2, [sp, #16]
 8035a80:	f7ff fd94 	bl	80355ac <__hexdig_fun>
 8035a84:	2800      	cmp	r0, #0
 8035a86:	d151      	bne.n	8035b2c <__hexnan+0xe8>
 8035a88:	9a04      	ldr	r2, [sp, #16]
 8035a8a:	9905      	ldr	r1, [sp, #20]
 8035a8c:	2a20      	cmp	r2, #32
 8035a8e:	d818      	bhi.n	8035ac2 <__hexnan+0x7e>
 8035a90:	9b02      	ldr	r3, [sp, #8]
 8035a92:	459b      	cmp	fp, r3
 8035a94:	dd13      	ble.n	8035abe <__hexnan+0x7a>
 8035a96:	454c      	cmp	r4, r9
 8035a98:	d206      	bcs.n	8035aa8 <__hexnan+0x64>
 8035a9a:	2d07      	cmp	r5, #7
 8035a9c:	dc04      	bgt.n	8035aa8 <__hexnan+0x64>
 8035a9e:	462a      	mov	r2, r5
 8035aa0:	4649      	mov	r1, r9
 8035aa2:	4620      	mov	r0, r4
 8035aa4:	f7ff ffa8 	bl	80359f8 <L_shift>
 8035aa8:	4544      	cmp	r4, r8
 8035aaa:	d952      	bls.n	8035b52 <__hexnan+0x10e>
 8035aac:	2300      	movs	r3, #0
 8035aae:	f1a4 0904 	sub.w	r9, r4, #4
 8035ab2:	f844 3c04 	str.w	r3, [r4, #-4]
 8035ab6:	f8cd b008 	str.w	fp, [sp, #8]
 8035aba:	464c      	mov	r4, r9
 8035abc:	461d      	mov	r5, r3
 8035abe:	9903      	ldr	r1, [sp, #12]
 8035ac0:	e7d7      	b.n	8035a72 <__hexnan+0x2e>
 8035ac2:	2a29      	cmp	r2, #41	@ 0x29
 8035ac4:	d157      	bne.n	8035b76 <__hexnan+0x132>
 8035ac6:	3102      	adds	r1, #2
 8035ac8:	f8ca 1000 	str.w	r1, [sl]
 8035acc:	f1bb 0f00 	cmp.w	fp, #0
 8035ad0:	d051      	beq.n	8035b76 <__hexnan+0x132>
 8035ad2:	454c      	cmp	r4, r9
 8035ad4:	d206      	bcs.n	8035ae4 <__hexnan+0xa0>
 8035ad6:	2d07      	cmp	r5, #7
 8035ad8:	dc04      	bgt.n	8035ae4 <__hexnan+0xa0>
 8035ada:	462a      	mov	r2, r5
 8035adc:	4649      	mov	r1, r9
 8035ade:	4620      	mov	r0, r4
 8035ae0:	f7ff ff8a 	bl	80359f8 <L_shift>
 8035ae4:	4544      	cmp	r4, r8
 8035ae6:	d936      	bls.n	8035b56 <__hexnan+0x112>
 8035ae8:	f1a8 0204 	sub.w	r2, r8, #4
 8035aec:	4623      	mov	r3, r4
 8035aee:	f853 1b04 	ldr.w	r1, [r3], #4
 8035af2:	f842 1f04 	str.w	r1, [r2, #4]!
 8035af6:	429f      	cmp	r7, r3
 8035af8:	d2f9      	bcs.n	8035aee <__hexnan+0xaa>
 8035afa:	1b3b      	subs	r3, r7, r4
 8035afc:	f023 0303 	bic.w	r3, r3, #3
 8035b00:	3304      	adds	r3, #4
 8035b02:	3401      	adds	r4, #1
 8035b04:	3e03      	subs	r6, #3
 8035b06:	42b4      	cmp	r4, r6
 8035b08:	bf88      	it	hi
 8035b0a:	2304      	movhi	r3, #4
 8035b0c:	4443      	add	r3, r8
 8035b0e:	2200      	movs	r2, #0
 8035b10:	f843 2b04 	str.w	r2, [r3], #4
 8035b14:	429f      	cmp	r7, r3
 8035b16:	d2fb      	bcs.n	8035b10 <__hexnan+0xcc>
 8035b18:	683b      	ldr	r3, [r7, #0]
 8035b1a:	b91b      	cbnz	r3, 8035b24 <__hexnan+0xe0>
 8035b1c:	4547      	cmp	r7, r8
 8035b1e:	d128      	bne.n	8035b72 <__hexnan+0x12e>
 8035b20:	2301      	movs	r3, #1
 8035b22:	603b      	str	r3, [r7, #0]
 8035b24:	2005      	movs	r0, #5
 8035b26:	b007      	add	sp, #28
 8035b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035b2c:	3501      	adds	r5, #1
 8035b2e:	2d08      	cmp	r5, #8
 8035b30:	f10b 0b01 	add.w	fp, fp, #1
 8035b34:	dd06      	ble.n	8035b44 <__hexnan+0x100>
 8035b36:	4544      	cmp	r4, r8
 8035b38:	d9c1      	bls.n	8035abe <__hexnan+0x7a>
 8035b3a:	2300      	movs	r3, #0
 8035b3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8035b40:	2501      	movs	r5, #1
 8035b42:	3c04      	subs	r4, #4
 8035b44:	6822      	ldr	r2, [r4, #0]
 8035b46:	f000 000f 	and.w	r0, r0, #15
 8035b4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8035b4e:	6020      	str	r0, [r4, #0]
 8035b50:	e7b5      	b.n	8035abe <__hexnan+0x7a>
 8035b52:	2508      	movs	r5, #8
 8035b54:	e7b3      	b.n	8035abe <__hexnan+0x7a>
 8035b56:	9b01      	ldr	r3, [sp, #4]
 8035b58:	2b00      	cmp	r3, #0
 8035b5a:	d0dd      	beq.n	8035b18 <__hexnan+0xd4>
 8035b5c:	f1c3 0320 	rsb	r3, r3, #32
 8035b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8035b64:	40da      	lsrs	r2, r3
 8035b66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8035b6a:	4013      	ands	r3, r2
 8035b6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8035b70:	e7d2      	b.n	8035b18 <__hexnan+0xd4>
 8035b72:	3f04      	subs	r7, #4
 8035b74:	e7d0      	b.n	8035b18 <__hexnan+0xd4>
 8035b76:	2004      	movs	r0, #4
 8035b78:	e7d5      	b.n	8035b26 <__hexnan+0xe2>
	...

08035b7c <_init>:
 8035b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035b7e:	bf00      	nop
 8035b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035b82:	bc08      	pop	{r3}
 8035b84:	469e      	mov	lr, r3
 8035b86:	4770      	bx	lr

08035b88 <_fini>:
 8035b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8035b8a:	bf00      	nop
 8035b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8035b8e:	bc08      	pop	{r3}
 8035b90:	469e      	mov	lr, r3
 8035b92:	4770      	bx	lr
